                      (      exbasic.asm):00001                 INCLUDE constants.asm
     0008             (    constants.asm):00001         BS              EQU 8                             ; BACKSPACE
     000D             (    constants.asm):00002         CR              EQU $D                            ; ENTER KEY
     001B             (    constants.asm):00003         ESC             EQU $1B                           ; ESCAPE CODE
     0020             (    constants.asm):00004         SPACE           EQU $20                           ; SPACE (BLANK)
     003A             (    constants.asm):00005         STKBUF          EQU 58                            ; STACK BUFFER ROOM
     00FA             (    constants.asm):00006         LBUFMX          EQU 250                           ; MAX NUMBER OF CHARS IN A BASIC LINE
     00FA             (    constants.asm):00007         MAXLIN          EQU $FA                           ; MAXIMUM MS BYTE OF LINE NUMBER
                      (    constants.asm):00008         ;*        PSEUDO  OPS
     0021             (    constants.asm):00009         SKP1            EQU $21                           ; OP CODE OF BRN - SKIP ONE BYTE
     008C             (    constants.asm):00010         SKP2            EQU $8C                           ; OP CODE OF CMPX # - SKIP TWO BYTES
     0086             (    constants.asm):00011         SKP1LD          EQU $86                           ; OP CODE OF LDA # - SKIP THE NEXT BYTE
                      (    constants.asm):00012         ;*                             ; AND LOAD THE VALUE OF THAT BYTE INTO ACCA - THIS
                      (    constants.asm):00013         ;*                             ; IS USUALLY USED TO LOAD ACCA WITH A NON ZERO VALUE
                      (    constants.asm):00014         
     D7FF             (    constants.asm):00015         END_OF_USER_RAM EQU $D7FF
     F448             (    constants.asm):00016         STRING_SPACE_SIZE EQU -3000
                      (      exbasic.asm):00002                 INCLUDE directpage.asm
                      (   directpage.asm):00001                 ORG     0
                      (   directpage.asm):00002         
0000                  (   directpage.asm):00003         ENDFLG
0000                  (   directpage.asm):00004                 RMB     1                                 ; STOP/END FLAG: POSITIVE=STOP, NEG=END
0001                  (   directpage.asm):00005         CHARAC
0001                  (   directpage.asm):00006                 RMB     1                                 ; TERMINATOR FLAG 1
0002                  (   directpage.asm):00007         ENDCHR
0002                  (   directpage.asm):00008                 RMB     1                                 ; TERMINATOR FLAG 2
0003                  (   directpage.asm):00009         TMPLOC
0003                  (   directpage.asm):00010                 RMB     1                                 ; SCRATCH VARIABLE
0004                  (   directpage.asm):00011         IFCTR
0004                  (   directpage.asm):00012                 RMB     1                                 ; IF COUNTER - HOW MANY IF STATEMENTS IN A LINE
0005                  (   directpage.asm):00013         DIMFLG
0005                  (   directpage.asm):00014                 RMB     1                                 ; *DV* ARRAY FLAG 0=EVALUATE, 1=DIMENSIONING
0006                  (   directpage.asm):00015         VALTYP
0006                  (   directpage.asm):00016                 RMB     1                                 ; *DV* *PV TYPE FLAG: 0=NUMERIC, $FF=STRING
0007                  (   directpage.asm):00017         GARBFL
0007                  (   directpage.asm):00018                 RMB     1                                 ; *TV STRING SPACE HOUSEKEEPING FLAG
0008                  (   directpage.asm):00019         ARYDIS
0008                  (   directpage.asm):00020                 RMB     1                                 ; DISABLE ARRAY SEARCH: 00=ALLOW SEARCH
0009                  (   directpage.asm):00021         INPFLG
0009                  (   directpage.asm):00022                 RMB     1                                 ; *TV INPUT FLAG: READ=0, INPUT<>0
000A                  (   directpage.asm):00023         RELFLG
000A                  (   directpage.asm):00024                 RMB     1                                 ; *TV RELATIONAL OPERATOR FLAG
000B                  (   directpage.asm):00025         TEMPPT
000B                  (   directpage.asm):00026                 RMB     2                                 ; *PV TEMPORARY STRING STACK POINTER
000D                  (   directpage.asm):00027         LASTPT
000D                  (   directpage.asm):00028                 RMB     2                                 ; *PV ADDR OF LAST USED STRING STACK ADDRESS
000F                  (   directpage.asm):00029         TEMPTR
000F                  (   directpage.asm):00030                 RMB     2                                 ; TEMPORARY POINTER
0011                  (   directpage.asm):00031         TMPTR1
0011                  (   directpage.asm):00032                 RMB     2                                 ; TEMPORARY DESCRIPTOR STORAGE (STACK SEARCH)
0013                  (   directpage.asm):00033         FPA2
0013                  (   directpage.asm):00034                 RMB     4                                 ; FLOATING POINT ACCUMULATOR #2 MANTISSA
0017                  (   directpage.asm):00035         BOTSTK
0017                  (   directpage.asm):00036                 RMB     2                                 ; BOTTOM OF STACK AT LAST CHECK
0019                  (   directpage.asm):00037         TXTTAB
0019                  (   directpage.asm):00038                 RMB     2                                 ; *PV BEGINNING OF BASIC PROGRAM
001B                  (   directpage.asm):00039         VARTAB
001B                  (   directpage.asm):00040                 RMB     2                                 ; *PV START OF VARIABLES
001D                  (   directpage.asm):00041         ARYTAB
001D                  (   directpage.asm):00042                 RMB     2                                 ; *PV START OF ARRAYS
001F                  (   directpage.asm):00043         ARYEND
001F                  (   directpage.asm):00044                 RMB     2                                 ; *PV END OF ARRAYS (+1)
0021                  (   directpage.asm):00045         FRETOP
0021                  (   directpage.asm):00046                 RMB     2                                 ; *PV START OF STRING STORAGE (TOP OF FREE RAM)
0023                  (   directpage.asm):00047         STRTAB
0023                  (   directpage.asm):00048                 RMB     2                                 ; *PV START OF STRING VARIABLES
0025                  (   directpage.asm):00049         FRESPC
0025                  (   directpage.asm):00050                 RMB     2                                 ; UTILITY STRING POINTER
0027                  (   directpage.asm):00051         MEMSIZ
0027                  (   directpage.asm):00052                 RMB     2                                 ; *PV TOP OF STRING SPACE
0029                  (   directpage.asm):00053         OLDTXT
0029                  (   directpage.asm):00054                 RMB     2                                 ; SAVED LINE NUMBER DURING A "STOP"
002B                  (   directpage.asm):00055         BINVAL
002B                  (   directpage.asm):00056                 RMB     2                                 ; BINARY VALUE OF A CONVERTED LINE NUMBER
002D                  (   directpage.asm):00057         OLDPTR
002D                  (   directpage.asm):00058                 RMB     2                                 ; SAVED INPUT PTR DURING A "STOP"
002F                  (   directpage.asm):00059         TINPTR
002F                  (   directpage.asm):00060                 RMB     2                                 ; TEMPORARY INPUT POINTER STORAGE
0031                  (   directpage.asm):00061         DATTXT
0031                  (   directpage.asm):00062                 RMB     2                                 ; *PV 'DATA' STATEMENT LINE NUMBER POINTER
0033                  (   directpage.asm):00063         DATPTR
0033                  (   directpage.asm):00064                 RMB     2                                 ; *PV 'DATA' STATEMENT ADDRESS POINTER
0035                  (   directpage.asm):00065         DATTMP
0035                  (   directpage.asm):00066                 RMB     2                                 ; DATA POINTER FOR 'INPUT' & 'READ'
0037                  (   directpage.asm):00067         VARNAM
0037                  (   directpage.asm):00068                 RMB     2                                 ; *TV TEMP STORAGE FOR A VARIABLE NAME
0039                  (   directpage.asm):00069         VARPTR
0039                  (   directpage.asm):00070                 RMB     2                                 ; *TV POINTER TO A VARIABLE DESCRIPTOR
003B                  (   directpage.asm):00071         VARDES
003B                  (   directpage.asm):00072                 RMB     2                                 ; TEMP POINTER TO A VARIABLE DESCRIPTOR
003D                  (   directpage.asm):00073         RELPTR
003D                  (   directpage.asm):00074                 RMB     2                                 ; POINTER TO RELATIONAL OPERATOR PROCESSING ROUTINE
003F                  (   directpage.asm):00075         TRELFL
003F                  (   directpage.asm):00076                 RMB     1                                 ; TEMPORARY RELATIONAL OPERATOR FLAG BYTE
                      (   directpage.asm):00077         ;* FLOATING POINT ACCUMULATORS #3,4 & 5 ARE MOSTLY
                      (   directpage.asm):00078         ;* USED AS SCRATCH PAD VARIABLES.
                      (   directpage.asm):00079         ;** FLOATING POINT ACCUMULATOR #3 :PACKED: ($40-$44)
0040                  (   directpage.asm):00080         V40
0040                  (   directpage.asm):00081                 RMB     1
0041                  (   directpage.asm):00082         V41
0041                  (   directpage.asm):00083                 RMB     1
0042                  (   directpage.asm):00084         V42
0042                  (   directpage.asm):00085                 RMB     1
0043                  (   directpage.asm):00086         V43
0043                  (   directpage.asm):00087                 RMB     1
0044                  (   directpage.asm):00088         V44
0044                  (   directpage.asm):00089                 RMB     1
                      (   directpage.asm):00090         ;** FLOATING POINT ACCUMULATOR #4 :PACKED: ($45-$49)
0045                  (   directpage.asm):00091         V45
0045                  (   directpage.asm):00092                 RMB     1
0046                  (   directpage.asm):00093         V46
0046                  (   directpage.asm):00094                 RMB     1
0047                  (   directpage.asm):00095         V47
0047                  (   directpage.asm):00096                 RMB     1
0048                  (   directpage.asm):00097         V48
0048                  (   directpage.asm):00098                 RMB     2
                      (   directpage.asm):00099         ;** FLOATING POINT ACCUMULATOR #5 :PACKED: ($4A-$4E)
004A                  (   directpage.asm):00100         V4A
004A                  (   directpage.asm):00101                 RMB     1
004B                  (   directpage.asm):00102         V4B
004B                  (   directpage.asm):00103                 RMB     2
004D                  (   directpage.asm):00104         V4D
004D                  (   directpage.asm):00105                 RMB     2
                      (   directpage.asm):00106         ;** FLOATING POINT ACCUMULATOR #0
004F                  (   directpage.asm):00107         FP0EXP
004F                  (   directpage.asm):00108                 RMB     1                                 ; *PV FLOATING POINT ACCUMULATOR #0 EXPONENT
0050                  (   directpage.asm):00109         FPA0
0050                  (   directpage.asm):00110                 RMB     4                                 ; *PV FLOATING POINT ACCUMULATOR #0 MANTISSA
0054                  (   directpage.asm):00111         FP0SGN
0054                  (   directpage.asm):00112                 RMB     1                                 ; *PV FLOATING POINT ACCUMULATOR #0 SIGN
0055                  (   directpage.asm):00113         COEFCT
0055                  (   directpage.asm):00114                 RMB     1                                 ; POLYNOMIAL COEFFICIENT COUNTER
0056                  (   directpage.asm):00115         STRDES
0056                  (   directpage.asm):00116                 RMB     5                                 ; TEMPORARY STRING DESCRIPTOR
005B                  (   directpage.asm):00117         FPCARY
005B                  (   directpage.asm):00118                 RMB     1                                 ; FLOATING POINT CARRY BYTE
                      (   directpage.asm):00119         ;** FLOATING POINT ACCUMULATOR #1
005C                  (   directpage.asm):00120         FP1EXP
005C                  (   directpage.asm):00121                 RMB     1                                 ; *PV FLOATING POINT ACCUMULATOR #1 EXPONENT
005D                  (   directpage.asm):00122         FPA1
005D                  (   directpage.asm):00123                 RMB     4                                 ; *PV FLOATING POINT ACCUMULATOR #1 MANTISSA
0061                  (   directpage.asm):00124         FP1SGN
0061                  (   directpage.asm):00125                 RMB     1                                 ; *PV FLOATING POINT ACCUMULATOR #1 SIGN
0062                  (   directpage.asm):00126         RESSGN
0062                  (   directpage.asm):00127                 RMB     1                                 ; SIGN OF RESULT OF FLOATING POINT OPERATION
0063                  (   directpage.asm):00128         FPSBYT
0063                  (   directpage.asm):00129                 RMB     1                                 ; FLOATING POINT SUB BYTE (FIFTH BYTE)
0064                  (   directpage.asm):00130         COEFPT
0064                  (   directpage.asm):00131                 RMB     2                                 ; POLYNOMIAL COEFFICIENT POINTER
0066                  (   directpage.asm):00132         LSTTXT
0066                  (   directpage.asm):00133                 RMB     2                                 ; CURRENT LINE POINTER DURING LIST
0068                  (   directpage.asm):00134         CURLIN
0068                  (   directpage.asm):00135                 RMB     2                                 ; *PV CURRENT LINE # OF BASIC PROGRAM, $FFFF = DIRECT
006A                  (   directpage.asm):00136         DEVCFW
006A                  (   directpage.asm):00137                 RMB     1                                 ; *TV TAB FIELD WIDTH
006B                  (   directpage.asm):00138         DEVLCF
006B                  (   directpage.asm):00139                 RMB     1                                 ; *TV TAB ZONE
006C                  (   directpage.asm):00140         DEVPOS
006C                  (   directpage.asm):00141                 RMB     1                                 ; *TV PRINT POSITION
006D                  (   directpage.asm):00142         DEVWID
006D                  (   directpage.asm):00143                 RMB     1                                 ; *TV PRINT WIDTH
006E                  (   directpage.asm):00144         RSTFLG
006E                  (   directpage.asm):00145                 RMB     1                                 ; *PV WARM START FLAG: $55=WARM, OTHER=COLD
006F                  (   directpage.asm):00146         RSTVEC
006F                  (   directpage.asm):00147                 RMB     2                                 ; *PV WARM START VECTOR - JUMP ADDRESS FOR WARM START
0071                  (   directpage.asm):00148         TOPRAM
0071                  (   directpage.asm):00149                 RMB     2                                 ; *PV TOP OF RAM
0073                  (   directpage.asm):00150         IKEYIM
0073                  (   directpage.asm):00151                 RMB     1                                 ; *TV INKEY$ RAM IMAGE
0074                  (   directpage.asm):00152         ZERO
0074                  (   directpage.asm):00153                 RMB     2                                 ; *PV DUMMY - THESE TWO BYTES ARE ALWAYS ZERO
                      (   directpage.asm):00154         ;* THE FOLLOWING BYTES ARE MOVED DOWN FROM ROM
0076                  (   directpage.asm):00155         LPTCFW
0076                  (   directpage.asm):00156                 RMB     1                                 ; 16
0077                  (   directpage.asm):00157         LPTLCF
0077                  (   directpage.asm):00158                 RMB     1                                 ; 112
0078                  (   directpage.asm):00159         LPTWID
0078                  (   directpage.asm):00160                 RMB     1                                 ; 132
0079                  (   directpage.asm):00161         LPTPOS
0079                  (   directpage.asm):00162                 RMB     1                                 ; 0
007A                  (   directpage.asm):00163         EXECJP
007A                  (   directpage.asm):00164                 RMB     2                                 ; LB4AA
007C                  (   directpage.asm):00165         VAB
007C                  (   directpage.asm):00166                 RMB     1                                 ; = LOW ORDER FOUR BYTES OF THE PRODUCT
007D                  (   directpage.asm):00167         VAC
007D                  (   directpage.asm):00168                 RMB     1                                 ; = OF A FLOATING POINT MULTIPLICATION
007E                  (   directpage.asm):00169         VAD
007E                  (   directpage.asm):00170                 RMB     1                                 ; = THESE BYTES ARE USE AS RANDOM DATA
007F                  (   directpage.asm):00171         VAE
007F                  (   directpage.asm):00172                 RMB     1                                 ; = BY THE RND STATEMENT
                      (   directpage.asm):00173         
                      (   directpage.asm):00174         ;* EXTENDED BASIC VARIABLES
0080                  (   directpage.asm):00175         TRCFLG
0080                  (   directpage.asm):00176                 RMB     1                                 ; *PV TRACE FLAG 0=OFF ELSE=ON
0081                  (   directpage.asm):00177         USRADR
0081                  (   directpage.asm):00178                 RMB     2                                 ; *PV ADDRESS OF THE START OF USR VECTORS
                      (   directpage.asm):00179         
                      (   directpage.asm):00180         ;* EXTENDED BASIC SCRATCH PAD VARIABLES
0083                  (   directpage.asm):00181         VCF
0083                  (   directpage.asm):00182                 RMB     2
0085                  (   directpage.asm):00183         VD1
0085                  (   directpage.asm):00184                 RMB     2
0087                  (   directpage.asm):00185         VD3
0087                  (   directpage.asm):00186                 RMB     2
0089                  (   directpage.asm):00187         VD5
0089                  (   directpage.asm):00188                 RMB     2
008B                  (   directpage.asm):00189         VD7
008B                  (   directpage.asm):00190                 RMB     1
008C                  (   directpage.asm):00191         VD8
008C                  (   directpage.asm):00192                 RMB     1
008D                  (   directpage.asm):00193         VD9
008D                  (   directpage.asm):00194                 RMB     1
008E                  (   directpage.asm):00195         VDA
008E                  (   directpage.asm):00196                 RMB     1
008F                  (   directpage.asm):00197         SW3VEC
008F                  (   directpage.asm):00198                 RMB     3
0092                  (   directpage.asm):00199         SW2VEC
0092                  (   directpage.asm):00200                 RMB     3
0095                  (   directpage.asm):00201         SWIVEC
0095                  (   directpage.asm):00202                 RMB     3
0098                  (   directpage.asm):00203         NMIVEC
0098                  (   directpage.asm):00204                 RMB     3
009B                  (   directpage.asm):00205         IRQVEC
009B                  (   directpage.asm):00206                 RMB     3
009E                  (   directpage.asm):00207         FRQVEC
009E                  (   directpage.asm):00208                 RMB     3
00A1                  (   directpage.asm):00209         USRJMP
00A1                  (   directpage.asm):00210                 RMB     3                                 ; JUMP ADDRESS FOR BASIC'S USR FUNCTION
00A4                  (   directpage.asm):00211         RVSEED
00A4                  (   directpage.asm):00212                 RMB     1                                 ; * FLOATING POINT RANDOM NUMBER SEED EXPONENT
00A5                  (   directpage.asm):00213                 RMB     4                                 ; * MANTISSA: INITIALLY SET TO $804FC75259
                      (   directpage.asm):00214         
                      (   directpage.asm):00215         ;**** USR FUNCTION VECTOR ADDRESSES (EX BASIC ONLY)
00A9                  (   directpage.asm):00216         USR0
00A9                  (   directpage.asm):00217                 RMB     2                                 ; USR 0 VECTOR
00AB                  (   directpage.asm):00218                 RMB     2                                 ; USR 1
00AD                  (   directpage.asm):00219                 RMB     2                                 ; USR 2
00AF                  (   directpage.asm):00220                 RMB     2                                 ; USR 3
00B1                  (   directpage.asm):00221                 RMB     2                                 ; USR 4
00B3                  (   directpage.asm):00222                 RMB     2                                 ; USR 5
00B5                  (   directpage.asm):00223                 RMB     2                                 ; USR 6
00B7                  (   directpage.asm):00224                 RMB     2                                 ; USR 7
00B9                  (   directpage.asm):00225                 RMB     2                                 ; USR 8
00BB                  (   directpage.asm):00226                 RMB     2                                 ; USR 9
00BD                  (   directpage.asm):00227         SAVFCB:
00BD                  (   directpage.asm):00228                 RMB     2                                 ; POINTER FOR FCB
                      (   directpage.asm):00229         
                      (   directpage.asm):00230         
                      (   directpage.asm):00231                 ORG     $D800
D800                  (   directpage.asm):00232         STRSTK
D800                  (   directpage.asm):00233                 RMB     145*5                             ; STRING DESCRIPTOR STACK
DAD5                  (   directpage.asm):00234         LINHDR
DAD5                  (   directpage.asm):00235                 RMB     2                                 ; LINE INPUT BUFFER HEADER
DAD7                  (   directpage.asm):00236         LINBUF
DAD7                  (   directpage.asm):00237                 RMB     LBUFMX+1                          ; BASIC LINE INPUT BUFFER
DBD2                  (   directpage.asm):00238         STRBUF
DBD2                  (   directpage.asm):00239                 RMB     41                                ; STRING BUFFER
DBFB                  (   directpage.asm):00240         ENDRAM
DBFB                  (   directpage.asm):00241                 RMB     1
                      (      exbasic.asm):00003         
                      (      exbasic.asm):00004                 ORG     $2000
                      (      exbasic.asm):00005         
2000 8600             (      exbasic.asm):00006                 LDA     #$00
2002 1F8B             (      exbasic.asm):00007                 TFR     A,DP
2004 0F6E             (      exbasic.asm):00008                 CLR     RSTFLG
2006 0F80             (      exbasic.asm):00009                 CLR     TRCFLG
2008 7E2044           (      exbasic.asm):00010                 JMP     STARTUP
                      (      exbasic.asm):00011         
                      (      exbasic.asm):00012                 INCLUDE consoleio.asm
                      (    consoleio.asm):00001         ;* THIS ROUTINE PICKS UP THE NEXT INPUT CHARACTER FROM
                      (    consoleio.asm):00002         ;* BASIC. THE ADDRESS OF THE NEXT BASIC BYTE TO BE
                      (    consoleio.asm):00003         ;* INTERPRETED IS STORED AT CHARAD.
200B                  (    consoleio.asm):00004         GETNCH
200B 7C2015           (    consoleio.asm):00005                 INC     CHARAD+1                          ; *PV INCREMENT LS BYTE OF INPUT POINTER
200E 2603             (    consoleio.asm):00006                 BNE     GETCCH                            ; *PV BRANCH IF NOT ZERO (NO CARRY)
2010 7C2014           (    consoleio.asm):00007                 INC     CHARAD                            ; *PV INCREMENT MS BYTE OF INPUT POINTER
2013                  (    consoleio.asm):00008         GETCCH
2013 B6               (    consoleio.asm):00009                 FCB     $B6                               ; *PV OP CODE OF LDA EXTENDED
2014                  (    consoleio.asm):00010         CHARAD
2014 0000             (    consoleio.asm):00011                 FCB     $00,$00
2016 7E21BC           (    consoleio.asm):00012                 JMP     BROMHK                            ; JUMP BACK INTO THE BASIC RUM
                      (    consoleio.asm):00013         
                      (    consoleio.asm):00014         
                      (    consoleio.asm):00015         ;* CONSOLE IN
2019                  (    consoleio.asm):00016         LA171
2019 8D03             (    consoleio.asm):00017                 BSR     KEYIN                             ; GET A CHARACTER FROM CONSOLE IN
201B 27FC             (    consoleio.asm):00018                 BEQ     LA171                             ; LOOP IF NO KEY DOWN
201D 39               (    consoleio.asm):00019                 RTS
                      (    consoleio.asm):00020         
                      (    consoleio.asm):00021         ;*
                      (    consoleio.asm):00022         ;* THIS ROUTINE GETS A KEYSTROKE FROM THE KEYBOARD IF A KEY
                      (    consoleio.asm):00023         ;* IS DOWN. IT RETURNS ZERO TRUE IF THERE WAS NO KEY DOWN.
                      (    consoleio.asm):00024         ;*
                      (    consoleio.asm):00025         ;*
201E                  (    consoleio.asm):00026         LA1C1
201E                  (    consoleio.asm):00027         KEYIN
201E 3F               (    consoleio.asm):00028                 SWI
201F 23               (    consoleio.asm):00029                 FCB     35
2020 2603             (    consoleio.asm):00030                 BNE     NOCHAR
2022 847F             (    consoleio.asm):00031                 ANDA    #$7F
2024 39               (    consoleio.asm):00032                 RTS
2025                  (    consoleio.asm):00033         NOCHAR
2025 4F               (    consoleio.asm):00034                 CLRA
2026 39               (    consoleio.asm):00035                 RTS
                      (    consoleio.asm):00036         
                      (    consoleio.asm):00037         
                      (    consoleio.asm):00038         
                      (    consoleio.asm):00039         ;* CONSOLE OUT
2027                  (    consoleio.asm):00040         PUTCHR
2027 3402             (    consoleio.asm):00041                 PSHS    A                                 ;
2029 810D             (    consoleio.asm):00042                 CMPA    #CR                               ; IS IT CARRIAGE RETURN?
202B 270A             (    consoleio.asm):00043                 BEQ     NEWLINE                           ; YES
202D 3F               (    consoleio.asm):00044                 SWI
202E 21               (    consoleio.asm):00045                 FCB     33
202F 0C79             (    consoleio.asm):00046                 INC     LPTPOS                            ; INCREMENT CHARACTER COUNTER
2031 9679             (    consoleio.asm):00047                 LDA     LPTPOS                            ; CHECK FOR END OF LINE PRINTER LINE
2033 9178             (    consoleio.asm):00048                 CMPA    LPTWID                            ; AT END OF LINE PRINTER LINE?
2035 250A             (    consoleio.asm):00049                 BLO     PUTEND                            ; NO
2037                  (    consoleio.asm):00050         NEWLINE
2037 0F79             (    consoleio.asm):00051                 CLR     LPTPOS                            ; RESET CHARACTER COUNTER
2039 860D             (    consoleio.asm):00052                 LDA     #13
203B 3F               (    consoleio.asm):00053                 SWI
203C 21               (    consoleio.asm):00054                 FCB     33
203D 860A             (    consoleio.asm):00055                 LDA     #10                               ; DO LINEFEED AFTER CR
203F 3F               (    consoleio.asm):00056                 SWI
2040 21               (    consoleio.asm):00057                 FCB     33
2041                  (    consoleio.asm):00058         PUTEND
2041 3502             (    consoleio.asm):00059                 PULS    A                                 ;
2043 39               (    consoleio.asm):00060                 RTS
                      (      exbasic.asm):00013         
                      (      exbasic.asm):00014         ;*
2044                  (      exbasic.asm):00015         STARTUP:
2044                  (      exbasic.asm):00016         LA00E
2044 8620             (      exbasic.asm):00017                 LDA     #$20
2046 B7DAD7           (      exbasic.asm):00018                 STA     LINBUF
2049 10CEDBD2         (      exbasic.asm):00019                 LDS     #(LINBUF+LBUFMX)+1                  ; SET STACK TO TOP OF LINE INPUT BUFFER
                      (      exbasic.asm):00020         
204D 8E0000           (      exbasic.asm):00021                 LDX     #$0000
2050 8600             (      exbasic.asm):00022                 LDA     #$00
                      (      exbasic.asm):00023         !
2052 A780             (      exbasic.asm):00024                 STA     ,X+
2054 8C0100           (      exbasic.asm):00025                 CPX     #$100
2057 26F9             (      exbasic.asm):00026                 BNE     <
2059 8ECE00           (      exbasic.asm):00027                 LDX     #$CE00
                      (      exbasic.asm):00028         !
205C A780             (      exbasic.asm):00029                 STA     ,X+
205E 8CCFFF           (      exbasic.asm):00030                 CPX     #$CFFF
2061 26F9             (      exbasic.asm):00031                 BNE     <
                      (      exbasic.asm):00032         
2063                  (      exbasic.asm):00033         BACDST
2063                  (      exbasic.asm):00034         LA077
2063 8E44FC           (      exbasic.asm):00035                 LDX     #PROGST                           ; SET TO START OF PROGRAM SPACE
2066 6F80             (      exbasic.asm):00036                 CLR     ,X+                               ; CLEAR 1ST BYTE OF BASIC PROGRAM
2068 9F19             (      exbasic.asm):00037                 STX     TXTTAB                            ; BEGINNING OF BASIC PROGRAM
206A                  (      exbasic.asm):00038         LA084
206A 8ED7FF           (      exbasic.asm):00039                 LDX     #END_OF_USER_RAM
206D                  (      exbasic.asm):00040         LA093
206D 9F71             (      exbasic.asm):00041                 STX     TOPRAM                            ; SAVE ABSOLUTE TOP OF RAM
206F 9F27             (      exbasic.asm):00042                 STX     MEMSIZ                            ; SAVE TOP OF STRING SPACE
2071 9F23             (      exbasic.asm):00043                 STX     STRTAB                            ; SAVE START OF STRING VARIABLES
2073 3089F448         (      exbasic.asm):00044                 LEAX    STRING_SPACE_SIZE,X               ; CLEAR 3000 - DEFAULT STRING SPACE TO 3000 BYTES
2077 9F21             (      exbasic.asm):00045                 STX     FRETOP                            ; SAVE START OF STRING SPACE
2079 1F14             (      exbasic.asm):00046                 TFR     X,S                               ; PUT STACK THERE
207B 8E20C0           (      exbasic.asm):00047                 LDX     #LA10D                            ; POINT X TO ROM SOURCE DATA
207E CE0076           (      exbasic.asm):00048                 LDU     #LPTCFW                           ; POINT U TO RAM DESTINATION
2081 C612             (      exbasic.asm):00049                 LDB     #18                               ; MOVE 18 BYTES
2083 BD21AA           (      exbasic.asm):00050                 JSR     LA59A                             ; MOVE 18 BYTES FROM ROM TO RAM
2086 CE009B           (      exbasic.asm):00051                 LDU     #IRQVEC                           ; POINT U TO NEXT RAM DESTINATION
2089 C604             (      exbasic.asm):00052                 LDB     #4                                ; MOVE 4 MORE BYTES
208B BD21AA           (      exbasic.asm):00053                 JSR     LA59A                             ; MOVE 4 BYTES FROM ROM TO RAM
208E 8639             (      exbasic.asm):00054                 LDA     #$39
2090 B7DAD4           (      exbasic.asm):00055                 STA     LINHDR-1                          ; PUT RTS IN LINHDR-1
2093 0F80             (      exbasic.asm):00056                 CLR     TRCFLG
2095 BD24CE           (      exbasic.asm):00057                 JSR     LAD19                             ; G0 DO A 'NEW'
                      (      exbasic.asm):00058         ;* EXTENDED BASIC INITIALISATION
2098 8E00A9           (      exbasic.asm):00059                 LDX     #USR0                             ; INITIALIZE ADDRESS OF START OF
209B 9F81             (      exbasic.asm):00060                 STX     USRADR                            ; USR JUMP TABLE
                      (      exbasic.asm):00061         ;* INITIALIZE THE USR CALLS TO 'FC ERROR'
209D CE2C1B           (      exbasic.asm):00062                 LDU     #LB44A                            ; ADDRESS OF 'FC ERROR' ROUTINE
20A0 C60A             (      exbasic.asm):00063                 LDB     #10                               ; 10 USR CALLS IN EX BASIC
20A2                  (      exbasic.asm):00064         L8031
20A2 EF81             (      exbasic.asm):00065                 STU     ,X++                              ; STORE 'FC' ERROR AT USR ADDRESSES
20A4 5A               (      exbasic.asm):00066                 DECB                                      ; FINISHED ALL 10?
20A5 26FB             (      exbasic.asm):00067                 BNE     L8031                             ; NO
                      (      exbasic.asm):00068         
20A7 8E20F5           (      exbasic.asm):00069                 LDX     #LA147-1                          ; POINT X TO BASIC STARTUP MESSAGE
20AA BD3140           (      exbasic.asm):00070                 JSR     LB99C                             ; PRINT STARTUP MESSAGE
20AD 8E20B8           (      exbasic.asm):00071                 LDX     #BAWMST                           ; WARM START ADDRESS
20B0 9F6F             (      exbasic.asm):00072                 STX     RSTVEC                            ; SAVE IT
20B2 8655             (      exbasic.asm):00073                 LDA     #$55                              ; WARM START FLAG
20B4 976E             (      exbasic.asm):00074                 STA     RSTFLG                            ; SAVE IT
20B6 2004             (      exbasic.asm):00075                 BRA     LA0F3                             ; GO TO BASIC'S MAIN LOOP
20B8                  (      exbasic.asm):00076         BAWMST
20B8 12               (      exbasic.asm):00077                 NOP                                       ; NOP REQ'D FOR WARM START
20B9 BD24E8           (      exbasic.asm):00078                 JSR     LAD33                             ; DO PART OF A NEW
20BC                  (      exbasic.asm):00079         LA0F3
20BC 7E2432           (      exbasic.asm):00080                 JMP     LAC73                             ; GO TO MAIN LOOP OF BASIC
                      (      exbasic.asm):00081         ;*
                      (      exbasic.asm):00082         ;* FIRQ SERVICE ROUTINE
20BF                  (      exbasic.asm):00083         BFRQSV
20BF 3B               (      exbasic.asm):00084                 RTI
                      (      exbasic.asm):00085         ;*
                      (      exbasic.asm):00086         ;* THESE BYTES ARE MOVED TO ADDRESSES $76 - $85 THE DIRECT PAGE
20C0                  (      exbasic.asm):00087         LA10D
20C0 10               (      exbasic.asm):00088                 FCB     16                                ; TAB FIELD WIDTH
20C1 40               (      exbasic.asm):00089                 FCB     64                                ; LAST TAB ZONE
20C2 50               (      exbasic.asm):00090                 FCB     80                                ; PRINTER WIDTH
20C3 00               (      exbasic.asm):00091                 FCB     0                                 ; LINE PRINTER POSITION
20C4 2C1B             (      exbasic.asm):00092                 FDB     LB44A                             ; ARGUMENT OF EXEC COMMAND - SET TO 'FC' ERROR
20C6 0000000000000000 (      exbasic.asm):00093                 FCB     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     0000000000000000
     0000000000
                      (      exbasic.asm):00094         ;*
                      (      exbasic.asm):00095         ;* THESE BYTES ARE MOVED TO ADDRESSES $A7-$B1
20DB 80               (      exbasic.asm):00096                 FCB     $80                               ; *RANDOM SEED
20DC 4FC7             (      exbasic.asm):00097                 FDB     $4FC7                             ; *RANDON SEED OF MANTISSA
20DE 5259             (      exbasic.asm):00098                 FDB     $5259                             ; *.811635157
                      (      exbasic.asm):00099         ;* BASIC COMMAND INTERPRETATION TABLE ROM IMAGE
20E0                  (      exbasic.asm):00100         COMVEC
20E0 35               (      exbasic.asm):00101                 FCB     53                                ; 53 BASIC COMMANDS
20E1 221B             (      exbasic.asm):00102                 FDB     LAA66                             ; POINTS TO RESERVED WORDS
20E3 2334             (      exbasic.asm):00103                 FDB     LAB67                             ; POINTS TO JUMP TABLE FOR COMMANDS
20E5 1D               (      exbasic.asm):00104                 FCB     29                                ; 29 BASIC SECONDARY COMMANDS
20E6 22C7             (      exbasic.asm):00105                 FDB     LAB1A                             ; POINTS TO SECONDARY FUNCTION RESERVED WORDS
20E8 21CC             (      exbasic.asm):00106                 FDB     LAA29                             ; POINTS TO SECONDARY FUNCTION JUMP TABLE
20EA 0000             (      exbasic.asm):00107                 FDB     0                                 ; NO MORE TABLES (RES WORDS=0)
20EC 0000             (      exbasic.asm):00108                 FDB     0                                 ; NO MORE TABLES
20EE 0000             (      exbasic.asm):00109                 FDB     0                                 ; NO MORE TABLES
20F0 0000             (      exbasic.asm):00110                 FDB     0                                 ; NO MORE TABLES
20F2 0000             (      exbasic.asm):00111                 FDB     0                                 ; NO MORE TABLES
20F4 0000             (      exbasic.asm):00112                 FDB     0                                 ; NO MORE TABLES (SECONDARY FNS =0)
                      (      exbasic.asm):00113         
                      (      exbasic.asm):00114         ;* COPYRIGHT MESSAGES
20F6                  (      exbasic.asm):00115         LA147
20F6 3638303920455854 (      exbasic.asm):00116                 FCC     "6809 EXTENDED BASIC FOR CUBIX"
     454E444544204241
     53494320464F5220
     4355424958
2113 0D               (      exbasic.asm):00117                 FCB     CR
2114 2843292031393832 (      exbasic.asm):00118                 FCC     "(C) 1982 BY MICROSOFT"
     204259204D494352
     4F534F4654
2129                  (      exbasic.asm):00119         LA156
2129 0D0D             (      exbasic.asm):00120                 FCB     CR,CR
212B                  (      exbasic.asm):00121         LA165
212B 00               (      exbasic.asm):00122                 FCB     $00
                      (      exbasic.asm):00123         
                      (      exbasic.asm):00124         
212C                  (      exbasic.asm):00125         LA35F
212C 3416             (      exbasic.asm):00126                 PSHS    X,B,A                             ; SAVE REGISTERS
212E 9E76             (      exbasic.asm):00127                 LDX     LPTCFW                            ; TAB FIELD WIDTH AND TAB ZONE
2130 DC78             (      exbasic.asm):00128                 LDD     LPTWID                            ; PRINTER WIDTH AND POSITION
2132                  (      exbasic.asm):00129         LA37C
2132 9F6A             (      exbasic.asm):00130                 STX     DEVCFW                            ; SAVE TAB FIELD WIDTH AND ZONE
2134 D76C             (      exbasic.asm):00131                 STB     DEVPOS                            ; SAVE PRINT POSITION
2136 976D             (      exbasic.asm):00132                 STA     DEVWID                            ; SAVE PRINT WIDTH
2138 3596             (      exbasic.asm):00133                 PULS    A,B,X,PC                          ; RESTORE REGISTERS
                      (      exbasic.asm):00134         
                      (      exbasic.asm):00135         ;* THIS IS THE ROUTINE THAT GETS AN INPUT LINE FOR BASIC
                      (      exbasic.asm):00136         ;* EXIT WITH BREAK KEY: CARRY = 1
                      (      exbasic.asm):00137         ;* EXIT WITH ENTER KEY: CARRY = 0
213A                  (      exbasic.asm):00138         LA38D
213A                  (      exbasic.asm):00139         LA390
213A 0F73             (      exbasic.asm):00140                 CLR     IKEYIM                            ; RESET BREAK CHECK KEY TEMP KEY STORAGE
213C 8EDAD8           (      exbasic.asm):00141                 LDX     #LINBUF+1                         ; INPUT LINE BUFFER
213F C601             (      exbasic.asm):00142                 LDB     #1                                ; ACCB CHAR COUNTER: SET TO 1 TO ALLOW A
                      (      exbasic.asm):00143         ;*         BACKSPACE AS FIRST CHARACTER
2141                  (      exbasic.asm):00144         LA39A
2141 BD2019           (      exbasic.asm):00145                 JSR     LA171                             ; GO GET A CHARACTER FROM CONSOLE IN
2144 8108             (      exbasic.asm):00146                 CMPA    #BS                               ; BACKSPACE
2146 2607             (      exbasic.asm):00147                 BNE     LA3B4                             ; NO
2148 5A               (      exbasic.asm):00148                 DECB                                      ; YES - DECREMENT CHAR COUNTER
2149 27EF             (      exbasic.asm):00149                 BEQ     LA390                             ; BRANCH IF BACK AT START OF LINE AGAIN
214B 301F             (      exbasic.asm):00150                 LEAX    -1,X                              ; DECREMENT BUFFER POINTER
214D 2034             (      exbasic.asm):00151                 BRA     LA3E8                             ; ECHO CHAR TO SCREEN
214F                  (      exbasic.asm):00152         LA3B4
214F 8115             (      exbasic.asm):00153                 CMPA    #$15                              ; SHIFT RIGHT ARROW?
2151 260A             (      exbasic.asm):00154                 BNE     LA3C2                             ; NO
                      (      exbasic.asm):00155         ;* YES, RESET BUFFER TO BEGINNING AND ERASE CURRENT LINE
2153                  (      exbasic.asm):00156         LA3B8
2153 5A               (      exbasic.asm):00157                 DECB                                      ; DEC CHAR CTR
2154 27E4             (      exbasic.asm):00158                 BEQ     LA390                             ; GO BACK TO START IF CHAR CTR = 0
2156 8608             (      exbasic.asm):00159                 LDA     #BS                               ; BACKSPACE?
2158 BD2027           (      exbasic.asm):00160                 JSR     PUTCHR                            ; SEND TO CONSOLE OUT (SCREEN)
215B 20F6             (      exbasic.asm):00161                 BRA     LA3B8                             ; KEEP GOING
215D                  (      exbasic.asm):00162         LA3C2
215D 8103             (      exbasic.asm):00163                 CMPA    #3                                ; BREAK KEY?
215F 1A01             (      exbasic.asm):00164                 ORCC    #1                                ; SET CARRY FLAG
2161 2705             (      exbasic.asm):00165                 BEQ     LA3CD                             ; BRANCH IF BREAK KEY DOWN
2163                  (      exbasic.asm):00166         LA3C8
2163 810D             (      exbasic.asm):00167                 CMPA    #CR                               ; ENTER KEY?
2165 260D             (      exbasic.asm):00168                 BNE     LA3D9                             ; NO
2167                  (      exbasic.asm):00169         LA3CC
2167 4F               (      exbasic.asm):00170                 CLRA                                      ; CLEAR CARRY FLAG IF ENTER KEY - END LINE ENTRY
2168                  (      exbasic.asm):00171         LA3CD
2168 3401             (      exbasic.asm):00172                 PSHS    CC                                ; SAVE CARRY FLAG
216A BD30FF           (      exbasic.asm):00173                 JSR     LB958                             ; SEND CR TO SCREEN
216D 6F84             (      exbasic.asm):00174                 CLR     ,X                                ; MAKE LAST BYTE IN INPUT BUFFER = 0
216F 8EDAD7           (      exbasic.asm):00175                 LDX     #LINBUF                           ; RESET INPUT BUFFER POINTER
2172 3581             (      exbasic.asm):00176                 PULS    CC,PC                             ; RESTORE CARRY FLAG
                      (      exbasic.asm):00177         
                      (      exbasic.asm):00178         ;* INSERT A CHARACTER INTO THE BASIC LINE INPUT BUFFER
2174                  (      exbasic.asm):00179         LA3D9
2174 8120             (      exbasic.asm):00180                 CMPA    #$20                              ; IS IT CONTROL CHAR?
2176 25C9             (      exbasic.asm):00181                 BLO     LA39A                             ; BRANCH IF CONTROL CHARACTER
2178 817B             (      exbasic.asm):00182                 CMPA    #'z'+1                            ; *
217A 24C5             (      exbasic.asm):00183                 BCC     LA39A                             ; * IGNORE IF > LOWER CASE Z
217C C1FA             (      exbasic.asm):00184                 CMPB    #LBUFMX                           ; HAVE 250 OR MORE CHARACTERS BEEN ENTERED?
217E 24C1             (      exbasic.asm):00185                 BCC     LA39A                             ; YES, IGNORE ANY MORE
2180 A780             (      exbasic.asm):00186                 STA     ,X+                               ; PUT IT IN INPUT BUFFER
2182 5C               (      exbasic.asm):00187                 INCB                                      ; INCREMENT CHARACTER COUNTER
2183                  (      exbasic.asm):00188         LA3E8
2183 BD2027           (      exbasic.asm):00189                 JSR     PUTCHR                            ; ECHO IT TO SCREEN
2186 20B9             (      exbasic.asm):00190                 BRA     LA39A                             ; GO SET SOME MORE
                      (      exbasic.asm):00191         
                      (      exbasic.asm):00192         
                      (      exbasic.asm):00193         ;* EXEC
2188                  (      exbasic.asm):00194         EXEC
2188 2705             (      exbasic.asm):00195                 BEQ     LA545                             ; BRANCH IF NO ARGUMENT
218A BD2F15           (      exbasic.asm):00196                 JSR     LB73D                             ; EVALUATE ARGUMENT - ARGUMENT RETURNED IN X
218D 9F7A             (      exbasic.asm):00197                 STX     EXECJP                            ; STORE X TO EXEC JUMP ADDRESS
218F                  (      exbasic.asm):00198         LA545
218F 6E9F007A         (      exbasic.asm):00199                 JMP     [EXECJP]                          ; GO DO IT
                      (      exbasic.asm):00200         
                      (      exbasic.asm):00201         ;* BREAK CHECK
2193                  (      exbasic.asm):00202         LA549
2193 7E25BE           (      exbasic.asm):00203                 JMP     LADEB                             ; GO DO BREAK KEY CHECK
                      (      exbasic.asm):00204         
                      (      exbasic.asm):00205         ;* INKEY$
2196                  (      exbasic.asm):00206         INKEY
2196 9673             (      exbasic.asm):00207                 LDA     IKEYIM                            ; WAS A KEY DOWN IN THE BREAK CHECK?
2198 2603             (      exbasic.asm):00208                 BNE     LA56B                             ; YES
219A BD201E           (      exbasic.asm):00209                 JSR     KEYIN                             ; GO GET A KEY
219D                  (      exbasic.asm):00210         LA56B
219D 0F73             (      exbasic.asm):00211                 CLR     IKEYIM                            ; CLEAR INKEY RAM IMAGE
219F 9753             (      exbasic.asm):00212                 STA     FPA0+3                            ; STORE THE KEY IN FPA0
21A1 10260CBB         (      exbasic.asm):00213                 LBNE    LB68F                             ; CONVERT FPA0+3 TO A STRING
21A5 9756             (      exbasic.asm):00214                 STA     STRDES                            ; SET LENGTH OF STRING = 0 IF NO KEY DOWN
21A7 7E2E6C           (      exbasic.asm):00215                 JMP     LB69B                             ; PUT A NULL STRING ONTO THE STRING STACK
                      (      exbasic.asm):00216         
                      (      exbasic.asm):00217         ;* MOVE ACCB BYTES FROM (X) TO (U)
21AA                  (      exbasic.asm):00218         LA59A
21AA A680             (      exbasic.asm):00219                 LDA     ,X+                               ; GET BYTE FROM X
21AC A7C0             (      exbasic.asm):00220                 STA     ,U+                               ; STORE IT AT U
21AE 5A               (      exbasic.asm):00221                 DECB                                      ; MOVED ALL BYTES?
21AF 26F9             (      exbasic.asm):00222                 BNE     LA59A                             ; NO
21B1                  (      exbasic.asm):00223         LA5A1
21B1 39               (      exbasic.asm):00224                 RTS
                      (      exbasic.asm):00225         
21B2                  (      exbasic.asm):00226         LA5C4
21B2 39               (      exbasic.asm):00227                 RTS
                      (      exbasic.asm):00228         
                      (      exbasic.asm):00229         ;** THIS ROUTINE WILL SCAN OFF THE FILE NAME FROM A BASIC LINE
                      (      exbasic.asm):00230         ;** AND RETURN A SYNTAX ERROR IF THERE ARE ANY CHARACTERS
                      (      exbasic.asm):00231         ;** FOLLOWING THE END OF THE NAME
21B3                  (      exbasic.asm):00232         LA5C7
21B3 BD2013           (      exbasic.asm):00233                 JSR     GETCCH                            ; GET CURRENT INPUT CHAR FROM BASIC LINE
21B6                  (      exbasic.asm):00234         LA5C9
21B6 27FA             (      exbasic.asm):00235                 BEQ     LA5C4                             ; RETURN IF END OF LINE
21B8 7E2A43           (      exbasic.asm):00236                 JMP     LB277                             ; SYNTAX ERROR IF ANY MORE CHARACTERS
                      (      exbasic.asm):00237         ;* IRQ SERVICE
21BB                  (      exbasic.asm):00238         BIRQSV
21BB                  (      exbasic.asm):00239         LA9C5
21BB 3B               (      exbasic.asm):00240                 RTI                                       ; RETURN FROM INTERRUPT
                      (      exbasic.asm):00241         
                      (      exbasic.asm):00242         ;* SET CARRY IF NUMERIC - RETURN WITH
                      (      exbasic.asm):00243         ;* ZERO FLAG SET IF ACCA = 0 OR 3A(:) - END
                      (      exbasic.asm):00244         ;* OF BASIC LINE OR SUB LINE
21BC                  (      exbasic.asm):00245         BROMHK
21BC 813A             (      exbasic.asm):00246                 CMPA    #'9'+1                            ; IS THIS CHARACTER >=(ASCII 9)+1?
21BE 240B             (      exbasic.asm):00247                 BHS     LAA28                             ; BRANCH IF > 9; Z SET IF = COLON
21C0 8120             (      exbasic.asm):00248                 CMPA    #SPACE                            ; SPACE?
21C2 2603             (      exbasic.asm):00249                 BNE     LAA24                             ; NO - SET CARRY IF NUMERIC
21C4 7E200B           (      exbasic.asm):00250                 JMP     GETNCH                            ; IF SPACE, GET NECT CHAR (IGNORE SPACES)
21C7                  (      exbasic.asm):00251         LAA24
21C7 8030             (      exbasic.asm):00252                 SUBA    #'0'                              ; * SET CARRY IF
21C9 80D0             (      exbasic.asm):00253                 SUBA    #-'0'                             ; * CHARACTER > ASCII 0
21CB                  (      exbasic.asm):00254         LAA28
21CB 39               (      exbasic.asm):00255                 RTS
                      (      exbasic.asm):00256         
                      (      exbasic.asm):00257                 INCLUDE tokens.asm
                      (       tokens.asm):00001         
                      (       tokens.asm):00002         ;* DISPATCH TABLE FOR SECONDARY FUNCTIONS
                      (       tokens.asm):00003         ;* TOKENS ARE PRECEEDED BY $FF
                      (       tokens.asm):00004         ;* FIRST SET ALWAYS HAS ONE PARAMETER
21CC                  (       tokens.asm):00005         FUNC_TAB
21CC                  (       tokens.asm):00006         LAA29
21CC 341E             (       tokens.asm):00007                 FDB     SGN                               ; SGN
21CE 3492             (       tokens.asm):00008                 FDB     INT                               ; INT
21D0 3437             (       tokens.asm):00009                 FDB     ABS                               ; ABS
21D2 00A1             (       tokens.asm):00010                 FDB     USRJMP                            ; USR
21D4                  (       tokens.asm):00011         tag1a:
     0083             (       tokens.asm):00012         TOK_USR         EQU ((tag1a-FUNC_TAB)/2)+$7F
     FF83             (       tokens.asm):00013         TOK_FF_USR      EQU ((tag1a-FUNC_TAB)/2)+$FF7F
21D4 36C6             (       tokens.asm):00014                 FDB     RND                               ; RND
21D6 371B             (       tokens.asm):00015                 FDB     SIN                               ; SIN
21D8 2F28             (       tokens.asm):00016                 FDB     PEEK                              ; PEEK
21DA 2E52             (       tokens.asm):00017                 FDB     LEN                               ; LEN
21DC 2CCE             (       tokens.asm):00018                 FDB     STR                               ; STR$
21DE 2EEA             (       tokens.asm):00019                 FDB     VAL                               ; VAL
21E0 2E71             (       tokens.asm):00020                 FDB     ASC                               ; ASC
21E2 2E5D             (       tokens.asm):00021                 FDB     CHR                               ; CHR$
21E4 37CB             (       tokens.asm):00022                 FDB     ATN                               ; ATN
21E6 3793             (       tokens.asm):00023                 FDB     COS                               ; COS
21E8 379C             (       tokens.asm):00024                 FDB     TAN                               ; TAN
21EA 390D             (       tokens.asm):00025                 FDB     EXP                               ; EXP
21EC 393F             (       tokens.asm):00026                 FDB     FIX                               ; FIX
21EE 3861             (       tokens.asm):00027                 FDB     LOG                               ; LOG
21F0 3AC8             (       tokens.asm):00028                 FDB     POS                               ; POS
21F2 389B             (       tokens.asm):00029                 FDB     SQR                               ; SQR
21F4 3FBC             (       tokens.asm):00030                 FDB     HEXDOL                            ; HEX$
                      (       tokens.asm):00031         ;* LEFT, RIGHT AND MID ARE TREATED SEPARATELY
21F6 2E7C             (       tokens.asm):00032                 FDB     LEFT                              ; LEFT$
21F8                  (       tokens.asm):00033         tag1b
     0095             (       tokens.asm):00034         TOK_LEFT        EQU ((tag1b-FUNC_TAB)/2)+$7F
21F8 2E99             (       tokens.asm):00035                 FDB     RIGHT                             ; RIGHT$
21FA 2EA0             (       tokens.asm):00036                 FDB     MID                               ; MID$
21FC                  (       tokens.asm):00037         tag1c
     0097             (       tokens.asm):00038         TOK_MID         EQU ((tag1c-FUNC_TAB)/2)+$7F
                      (       tokens.asm):00039         ;* REMAINING FUNCTIONS
21FC 2196             (       tokens.asm):00040                 FDB     INKEY                             ; INKEY$
21FE                  (       tokens.asm):00041         tag1d
     0098             (       tokens.asm):00042         TOK_INKEY       EQU ((tag1d-FUNC_TAB)/2)+$7F
21FE 2CBF             (       tokens.asm):00043                 FDB     MEM                               ; MEM
2200 3AD0             (       tokens.asm):00044                 FDB     VARPT                             ; VARPTR
2202 3B91             (       tokens.asm):00045                 FDB     INSTR                             ; INSTR
2204 3B61             (       tokens.asm):00046                 FDB     STRING                            ; STRING$
2206                  (       tokens.asm):00047         tag1e
     001D             (       tokens.asm):00048         NUM_SEC_FNS     EQU (tag1e-FUNC_TAB)/2
                      (       tokens.asm):00049         
                      (       tokens.asm):00050         ;* THIS TABLE CONTAINS PRECEDENCES AND DISPATCH ADDRESSES FOR ARITHMETIC
                      (       tokens.asm):00051         ;* AND LOGICAL OPERATORS - THE NEGATION OPERATORS DO NOT ACT ON TWO OPERANDS
                      (       tokens.asm):00052         ;* S0 THEY ARE NOT LISTED IN THIS TABLE. THEY ARE TREATED SEPARATELY IN THE
                      (       tokens.asm):00053         ;* EXPRESSION EVALUATION ROUTINE. THEY ARE:
                      (       tokens.asm):00054         ;* UNARY NEGATION (-), PRECEDENCE &7D AND LOGICAL NEGATION (NOT), PRECEDENCE $5A
                      (       tokens.asm):00055         ;* THE RELATIONAL OPERATORS < > = ARE ALSO NOT LISTED, PRECEDENCE $64.
                      (       tokens.asm):00056         ;* A PRECEDENCE VALUE OF ZERO INDICATES END OF EXPRESSION OR PARENTHESES
                      (       tokens.asm):00057         ;*
2206                  (       tokens.asm):00058         LAA51
2206 79               (       tokens.asm):00059                 FCB     $79
2207 3169             (       tokens.asm):00060                 FDB     LB9C5                             ; +
2209 79               (       tokens.asm):00061                 FCB     $79
220A 3160             (       tokens.asm):00062                 FDB     LB9BC                             ; -
220C 7B               (       tokens.asm):00063                 FCB     $7B
220D 3270             (       tokens.asm):00064                 FDB     LBACC                             ; *
220F 7B               (       tokens.asm):00065                 FCB     $7B
2210 3335             (       tokens.asm):00066                 FDB     LBB91                             ; /
2212 7F               (       tokens.asm):00067                 FCB     $7F
2213 38A4             (       tokens.asm):00068                 FDB     L8489                             ; EXPONENTIATION
2215 50               (       tokens.asm):00069                 FCB     $50
2216 2A9E             (       tokens.asm):00070                 FDB     LB2D5                             ; AND
2218 46               (       tokens.asm):00071                 FCB     $46
2219 2A9D             (       tokens.asm):00072                 FDB     LB2D4                             ; OR
                      (       tokens.asm):00073         
                      (       tokens.asm):00074         ;* THIS IS THE RESERVED WORD TABLE
                      (       tokens.asm):00075         ;* FIRST PART OF THE TABLE CONTAINS EXECUTABLE COMMANDS
221B                  (       tokens.asm):00076         LAA66
221B 464F             (       tokens.asm):00077                 FCC     "FO"                              ; 80
221D D2               (       tokens.asm):00078                 FCB     $80+'R'
221E 47               (       tokens.asm):00079                 FCC     "G"                               ; 81
221F CF               (       tokens.asm):00080                 FCB     $80+'O'
     0081             (       tokens.asm):00081         TOK_GO          EQU $81
2220 5245             (       tokens.asm):00082                 FCC     "RE"                              ; 82
2222 CD               (       tokens.asm):00083                 FCB     $80+'M'
2223 A7               (       tokens.asm):00084                 FCB     ''+$80                            ; 83
2224 454C53           (       tokens.asm):00085                 FCC     "ELS"                             ; 84
2227 C5               (       tokens.asm):00086                 FCB     $80+'E'
2228 49               (       tokens.asm):00087                 FCC     "I"                               ; 85
2229 C6               (       tokens.asm):00088                 FCB     $80+'F'
222A 444154           (       tokens.asm):00089                 FCC     "DAT"                             ; 86
222D C1               (       tokens.asm):00090                 FCB     $80+'A'
222E 5052494E         (       tokens.asm):00091                 FCC     "PRIN"                            ; 87
2232 D4               (       tokens.asm):00092                 FCB     $80+'T'
2233 4F               (       tokens.asm):00093                 FCC     "O"                               ; 88
2234 CE               (       tokens.asm):00094                 FCB     $80+'N'
2235 494E5055         (       tokens.asm):00095                 FCC     "INPU"                            ; 89
2239 D4               (       tokens.asm):00096                 FCB     $80+'T'
223A 454E             (       tokens.asm):00097                 FCC     "EN"                              ; 8A
223C C4               (       tokens.asm):00098                 FCB     $80+'D'
223D 4E4558           (       tokens.asm):00099                 FCC     "NEX"                             ; 8B
2240 D4               (       tokens.asm):00100                 FCB     $80+'T'
2241 4449             (       tokens.asm):00101                 FCC     "DI"                              ; 8C
2243 CD               (       tokens.asm):00102                 FCB     $80+'M'
2244 524541           (       tokens.asm):00103                 FCC     "REA"                             ; 8D
2247 C4               (       tokens.asm):00104                 FCB     $80+'D'
2248 5255             (       tokens.asm):00105                 FCC     "RU"                              ; 8E
224A CE               (       tokens.asm):00106                 FCB     $80+'N'
224B 524553544F52     (       tokens.asm):00107                 FCC     "RESTOR"                          ; 8F
2251 C5               (       tokens.asm):00108                 FCB     $80+'E'
2252 5245545552       (       tokens.asm):00109                 FCC     "RETUR"                           ; 90
2257 CE               (       tokens.asm):00110                 FCB     $80+'N'
2258 53544F           (       tokens.asm):00111                 FCC     "STO"                             ; 91
225B D0               (       tokens.asm):00112                 FCB     $80+'P'
225C 504F4B           (       tokens.asm):00113                 FCC     "POK"                             ; 92
225F C5               (       tokens.asm):00114                 FCB     $80+'E'
2260 434F4E           (       tokens.asm):00115                 FCC     "CON"                             ; 93
2263 D4               (       tokens.asm):00116                 FCB     $80+'T'
2264 4C4953           (       tokens.asm):00117                 FCC     "LIS"                             ; 94
2267 D4               (       tokens.asm):00118                 FCB     $80+'T'
2268 434C4541         (       tokens.asm):00119                 FCC     "CLEA"                            ; 95
226C D2               (       tokens.asm):00120                 FCB     $80+'R'
226D 4E45             (       tokens.asm):00121                 FCC     "NE"                              ; 96
226F D7               (       tokens.asm):00122                 FCB     $80+'W'
2270 455845           (       tokens.asm):00123                 FCC     "EXE"                             ; 97
2273 C3               (       tokens.asm):00124                 FCB     $80+'C'
2274 54524F           (       tokens.asm):00125                 FCC     "TRO"                             ; 98
2277 CE               (       tokens.asm):00126                 FCB     $80+'N'
2278 54524F46         (       tokens.asm):00127                 FCC     "TROF"                            ; 99
227C C6               (       tokens.asm):00128                 FCB     $80+'F'
227D 4445             (       tokens.asm):00129                 FCC     "DE"                              ; 9A
227F CC               (       tokens.asm):00130                 FCB     $80+'L'
2280 4445             (       tokens.asm):00131                 FCC     "DE"                              ; 9B
2282 C6               (       tokens.asm):00132                 FCB     $80+'F'
2283 4C494E           (       tokens.asm):00133                 FCC     "LIN"                             ; 9C
2286 C5               (       tokens.asm):00134                 FCB     $80+'E'
2287 52454E55         (       tokens.asm):00135                 FCC     "RENU"                            ; 9D
228B CD               (       tokens.asm):00136                 FCB     $80+'M'
228C 454449           (       tokens.asm):00137                 FCC     "EDI"                             ; 9E
228F D4               (       tokens.asm):00138                 FCB     $80+'T'
2290 455849           (       tokens.asm):00139                 FCC     "EXI"
2293 D4               (       tokens.asm):00140                 FCB     $80+'T'                           ; 9F
2294 534156           (       tokens.asm):00141                 FCC     "SAV"
2297 C5               (       tokens.asm):00142                 FCB     $80+'E'                           ; A0
2298 4C4F41           (       tokens.asm):00143                 FCC     "LOA"
229B C4               (       tokens.asm):00144                 FCB     $80+'D'                           ; A1
                      (       tokens.asm):00145         
                      (       tokens.asm):00146         
                      (       tokens.asm):00147         ;* END OF EXECUTABLE COMMANDS. THE REMAINDER OF THE TABLE ARE NON-EXECUTABLE TOKENS
229C 544142           (       tokens.asm):00148                 FCC     "TAB"
229F A8               (       tokens.asm):00149                 FCB     $80+'('
     00A2             (       tokens.asm):00150         TOK_TAB         EQU $A2
22A0 54               (       tokens.asm):00151                 FCC     "T"
22A1 CF               (       tokens.asm):00152                 FCB     $80+'O'
     00A3             (       tokens.asm):00153         TOK_TO          EQU TOK_TAB+1
22A2 5355             (       tokens.asm):00154                 FCC     "SU"
22A4 C2               (       tokens.asm):00155                 FCB     $80+'B'
     00A4             (       tokens.asm):00156         TOK_SUB         EQU TOK_TO+1
22A5 544845           (       tokens.asm):00157                 FCC     "THE"
22A8 CE               (       tokens.asm):00158                 FCB     $80+'N'
     00A5             (       tokens.asm):00159         TOK_THEN        EQU TOK_SUB+1
22A9 4E4F             (       tokens.asm):00160                 FCC     "NO"
22AB D4               (       tokens.asm):00161                 FCB     $80+'T'
     00A6             (       tokens.asm):00162         TOK_NOT         EQU TOK_THEN+1
22AC 535445           (       tokens.asm):00163                 FCC     "STE"
22AF D0               (       tokens.asm):00164                 FCB     $80+'P'
     00A7             (       tokens.asm):00165         TOK_STEP        EQU TOK_NOT+1
22B0 4F46             (       tokens.asm):00166                 FCC     "OF"
22B2 C6               (       tokens.asm):00167                 FCB     $80+'F'
     00A8             (       tokens.asm):00168         TOK_OFF         EQU TOK_STEP+1
22B3 AB               (       tokens.asm):00169                 FCB     '+'+$80
     00A9             (       tokens.asm):00170         TOK_PLUS        EQU TOK_OFF+1
22B4 AD               (       tokens.asm):00171                 FCB     '-'+$80
     00AA             (       tokens.asm):00172         TOK_MINUS       EQU TOK_PLUS+1
22B5 AA               (       tokens.asm):00173                 FCB     '*'+$80
     00AB             (       tokens.asm):00174         TOK_TIMES       EQU TOK_MINUS+1
22B6 AF               (       tokens.asm):00175                 FCB     '/'+$80
     00AC             (       tokens.asm):00176         TOK_DIVIDE      EQU TOK_TIMES+1
22B7 DE               (       tokens.asm):00177                 FCB     '^'+$80
     00AD             (       tokens.asm):00178         TOK_POWER       EQU TOK_DIVIDE+1
22B8 414E             (       tokens.asm):00179                 FCC     "AN"
22BA C4               (       tokens.asm):00180                 FCB     $80+'D'
     00AE             (       tokens.asm):00181         TOK_AND         EQU TOK_POWER+1
22BB 4F               (       tokens.asm):00182                 FCC     "O"
22BC D2               (       tokens.asm):00183                 FCB     $80+'R'
     00AF             (       tokens.asm):00184         TOK_OR          EQU TOK_AND+1
22BD BE               (       tokens.asm):00185                 FCB     '>'+$80
     00B0             (       tokens.asm):00186         TOK_GREATER     EQU TOK_OR+1
22BE BD               (       tokens.asm):00187                 FCB     '='+$80
     00B1             (       tokens.asm):00188         TOK_EQUALS      EQU TOK_GREATER+1
22BF BC               (       tokens.asm):00189                 FCB     '<'+$80
     00B2             (       tokens.asm):00190         TOK_LESS        EQU TOK_EQUALS+1
22C0 46               (       tokens.asm):00191                 FCC     "F"
22C1 CE               (       tokens.asm):00192                 FCB     $80+'N'
     00B3             (       tokens.asm):00193         TOK_FN          EQU TOK_LESS+1
22C2 5553494E         (       tokens.asm):00194                 FCC     "USIN"
22C6 C7               (       tokens.asm):00195                 FCB     $80+'G'
     00B4             (       tokens.asm):00196         TOK_USING       EQU TOK_FN+1
                      (       tokens.asm):00197         
                      (       tokens.asm):00198         ;*
                      (       tokens.asm):00199         ;* FIRST SET ALWAYS HAS ONE PARAMETER
22C7                  (       tokens.asm):00200         LAB1A
22C7 5347             (       tokens.asm):00201                 FCC     "SG"                              ; 80
22C9 CE               (       tokens.asm):00202                 FCB     $80+'N'
22CA 494E             (       tokens.asm):00203                 FCC     "IN"                              ; 81
22CC D4               (       tokens.asm):00204                 FCB     $80+'T'
22CD 4142             (       tokens.asm):00205                 FCC     "AB"                              ; 82
22CF D3               (       tokens.asm):00206                 FCB     $80+'S'
22D0 5553             (       tokens.asm):00207                 FCC     "US"                              ; 83
22D2 D2               (       tokens.asm):00208                 FCB     $80+'R'
22D3 524E             (       tokens.asm):00209                 FCC     "RN"                              ; 84
22D5 C4               (       tokens.asm):00210                 FCB     $80+'D'
22D6 5349             (       tokens.asm):00211                 FCC     "SI"                              ; 85
22D8 CE               (       tokens.asm):00212                 FCB     $80+'N'
22D9 504545           (       tokens.asm):00213                 FCC     "PEE"                             ; 86
22DC CB               (       tokens.asm):00214                 FCB     $80+'K'
22DD 4C45             (       tokens.asm):00215                 FCC     "LE"                              ; 87
22DF CE               (       tokens.asm):00216                 FCB     $80+'N'
22E0 535452           (       tokens.asm):00217                 FCC     "STR"                             ; 88
22E3 A4               (       tokens.asm):00218                 FCB     $80+'$'
22E4 5641             (       tokens.asm):00219                 FCC     "VA"                              ; 89
22E6 CC               (       tokens.asm):00220                 FCB     $80+'L'
22E7 4153             (       tokens.asm):00221                 FCC     "AS"                              ; 8A
22E9 C3               (       tokens.asm):00222                 FCB     $80+'C'
22EA 434852           (       tokens.asm):00223                 FCC     "CHR"                             ; 8B
22ED A4               (       tokens.asm):00224                 FCB     $80+'$'
22EE 4154             (       tokens.asm):00225                 FCC     "AT"                              ; 8C
22F0 CE               (       tokens.asm):00226                 FCB     $80+'N'
22F1 434F             (       tokens.asm):00227                 FCC     "CO"                              ; 8D
22F3 D3               (       tokens.asm):00228                 FCB     $80+'S'
22F4 5441             (       tokens.asm):00229                 FCC     "TA"                              ; 8E
22F6 CE               (       tokens.asm):00230                 FCB     $80+'N'
22F7 4558             (       tokens.asm):00231                 FCC     "EX"                              ; 8F
22F9 D0               (       tokens.asm):00232                 FCB     $80+'P'
22FA 4649             (       tokens.asm):00233                 FCC     "FI"                              ; 90
22FC D8               (       tokens.asm):00234                 FCB     $80+'X'
22FD 4C4F             (       tokens.asm):00235                 FCC     "LO"                              ; 91
22FF C7               (       tokens.asm):00236                 FCB     $80+'G'
2300 504F             (       tokens.asm):00237                 FCC     "PO"                              ; 92
2302 D3               (       tokens.asm):00238                 FCB     $80+'S'
2303 5351             (       tokens.asm):00239                 FCC     "SQ"                              ; 93
2305 D2               (       tokens.asm):00240                 FCB     $80+'R'
2306 484558           (       tokens.asm):00241                 FCC     "HEX"                             ; 94
2309 A4               (       tokens.asm):00242                 FCB     $80+'$'
                      (       tokens.asm):00243         ;* LEFT, RIGHT AND MID ARE TREATED SEPARATELY
230A 4C454654         (       tokens.asm):00244                 FCC     "LEFT"                            ; 95
230E A4               (       tokens.asm):00245                 FCB     $80+'$'
230F 5249474854       (       tokens.asm):00246                 FCC     "RIGHT"                           ; 96
2314 A4               (       tokens.asm):00247                 FCB     $80+'$'
2315 4D4944           (       tokens.asm):00248                 FCC     "MID"                             ; 97
2318 A4               (       tokens.asm):00249                 FCB     $80+'$'
                      (       tokens.asm):00250         ;* REMAINING FUNCTIONS
2319 494E4B4559       (       tokens.asm):00251                 FCC     "INKEY"                           ; 98
231E A4               (       tokens.asm):00252                 FCB     $80+'$'
231F 4D45             (       tokens.asm):00253                 FCC     "ME"                              ; 99
2321 CD               (       tokens.asm):00254                 FCB     $80+'M'
2322 5641525054       (       tokens.asm):00255                 FCC     "VARPT"                           ; 9A
2327 D2               (       tokens.asm):00256                 FCB     $80+'R'
2328 494E5354         (       tokens.asm):00257                 FCC     "INST"                            ; 9B
232C D2               (       tokens.asm):00258                 FCB     $80+'R'
232D 535452494E47     (       tokens.asm):00259                 FCC     "STRING"                          ; 9C
2333 A4               (       tokens.asm):00260                 FCB     $80+'$'
                      (       tokens.asm):00261         
                      (       tokens.asm):00262         ;*
                      (       tokens.asm):00263         ;* DISPATCH TABLE FOR COMMANDS TOKEN #
2334                  (       tokens.asm):00264         CMD_TAB
2334                  (       tokens.asm):00265         LAB67
2334 24FC             (       tokens.asm):00266                 FDB     FOR                               ; 80
2336 2653             (       tokens.asm):00267                 FDB     GO                                ; 81
2338 26B5             (       tokens.asm):00268                 FDB     REM                               ; 82
233A                  (       tokens.asm):00269         tag1f
     0082             (       tokens.asm):00270         TOK_REM         EQU ((tag1f-CMD_TAB)/2)+$7F
233A 26B5             (       tokens.asm):00271                 FDB     REM                               ; 83 (')
233C                  (       tokens.asm):00272         tag1g
     0083             (       tokens.asm):00273         TOK_SNGL_Q      EQU ((tag1g-CMD_TAB)/2)+$7F
233C 26B5             (       tokens.asm):00274                 FDB     REM                               ; 84 (ELSE)
233E                  (       tokens.asm):00275         tag1h
     0084             (       tokens.asm):00276         TOK_ELSE        EQU ((tag1h-CMD_TAB)/2)+$7F
233E 26E8             (       tokens.asm):00277                 FDB     IF                                ; 85
2340                  (       tokens.asm):00278         tag1i
     0085             (       tokens.asm):00279         TOK_IF          EQU ((tag1i-CMD_TAB)/2)+$7F
2340 26B2             (       tokens.asm):00280                 FDB     DATA                              ; 86
2342                  (       tokens.asm):00281         tag1j
     0086             (       tokens.asm):00282         TOK_DATA        EQU ((tag1j-CMD_TAB)/2)+$7F
2342 30C2             (       tokens.asm):00283                 FDB     PRINT                             ; 87
2344                  (       tokens.asm):00284         tag1k
     0087             (       tokens.asm):00285         TOK_PRINT       EQU ((tag1k-CMD_TAB)/2)+$7F
2344 271A             (       tokens.asm):00286                 FDB     ON                                ; 88
2346 27CC             (       tokens.asm):00287                 FDB     INPUT                             ; 89
2348                  (       tokens.asm):00288         tag1l
     0089             (       tokens.asm):00289         TOK_INPUT       EQU ((tag1l-CMD_TAB)/2)+$7F
2348 25D5             (       tokens.asm):00290                 FDB     END                               ; 8A
234A 28BA             (       tokens.asm):00291                 FDB     NEXT                              ; 8B
234C 2B17             (       tokens.asm):00292                 FDB     DIM                               ; 8C
234E 2806             (       tokens.asm):00293                 FDB     READ                              ; 8D
2350 2647             (       tokens.asm):00294                 FDB     RUN                               ; 8E
2352 25B7             (       tokens.asm):00295                 FDB     RESTOR                            ; 8F
2354 2691             (       tokens.asm):00296                 FDB     RETURN                            ; 90
2356 25DA             (       tokens.asm):00297                 FDB     STOP                              ; 91
2358 2F2F             (       tokens.asm):00298                 FDB     POKE                              ; 92
235A 2600             (       tokens.asm):00299                 FDB     CONT                              ; 93
235C 2F36             (       tokens.asm):00300                 FDB     LIST                              ; 94
235E 2612             (       tokens.asm):00301                 FDB     CLEAR                             ; 95
2360 24CC             (       tokens.asm):00302                 FDB     NEW                               ; 96
2362 2188             (       tokens.asm):00303                 FDB     EXEC                              ; 97
2364 3AC3             (       tokens.asm):00304                 FDB     TRON                              ; 98
2366 3AC4             (       tokens.asm):00305                 FDB     TROFF                             ; 99
2368 3D50             (       tokens.asm):00306                 FDB     DEL                               ; 9A
236A 3C8C             (       tokens.asm):00307                 FDB     DEF                               ; 9B
236C 4454             (       tokens.asm):00308                 FDB     LINE                              ; 9C
236E 3DDD             (       tokens.asm):00309                 FDB     RENUM                             ; 9D
2370 394E             (       tokens.asm):00310                 FDB     EDIT                              ; 9E
2372 445D             (       tokens.asm):00311                 FDB     EXIT                              ; 9F
2374 445F             (       tokens.asm):00312                 FDB     SAVE                              ; A0
2376 44AB             (       tokens.asm):00313                 FDB     LOAD                              ; A1
2378                  (       tokens.asm):00314         tag1m
     00A1             (       tokens.asm):00315         TOK_HIGH_EXEC   EQU ((tag1m-CMD_TAB)/2)+$7F
                      (       tokens.asm):00316         ;
                      (       tokens.asm):00317         ;* ERROR MESSAGES AND THEIR NUMBERS AS USED INTERNALLY
2378                  (       tokens.asm):00318         LABAF
2378 4E46             (       tokens.asm):00319                 FCC     "NF"                              ; 0 NEXT WITHOUT FOR
237A 534E             (       tokens.asm):00320                 FCC     "SN"                              ; 1 SYNTAX ERROR
237C 5247             (       tokens.asm):00321                 FCC     "RG"                              ; 2 RETURN WITHOUT GOSUB
237E 4F44             (       tokens.asm):00322                 FCC     "OD"                              ; 3 OUT OF DATA
2380 4643             (       tokens.asm):00323                 FCC     "FC"                              ; 4 ILLEGAL FUNCTION CALL
2382 4F56             (       tokens.asm):00324                 FCC     "OV"                              ; 5 OVERFLOW
2384 4F4D             (       tokens.asm):00325                 FCC     "OM"                              ; 6 OUT OF MEMORY
2386 554C             (       tokens.asm):00326                 FCC     "UL"                              ; 7 UNDEFINED LINE NUMBER
2388 4253             (       tokens.asm):00327                 FCC     "BS"                              ; 8 BAD SUBSCRIPT
238A 4444             (       tokens.asm):00328                 FCC     "DD"                              ; 9 REDIMENSIONED ARRAY
238C 2F30             (       tokens.asm):00329                 FCC     "/0"                              ; 10 DIVISION BY ZERO
238E 4944             (       tokens.asm):00330                 FCC     "ID"                              ; 11 ILLEGAL DIRECT STATEMENT
2390 544D             (       tokens.asm):00331                 FCC     "TM"                              ; 12 TYPE MISMATCH
2392 4F53             (       tokens.asm):00332                 FCC     "OS"                              ; 13 OUT OF STRING SPACE
2394 4C53             (       tokens.asm):00333                 FCC     "LS"                              ; 14 STRING TOO LONG
2396 5354             (       tokens.asm):00334                 FCC     "ST"                              ; 15 STRING FORMULA TOO COMPLEX
2398 434E             (       tokens.asm):00335                 FCC     "CN"                              ; 16 CAN'T CONTINUE
239A 4644             (       tokens.asm):00336                 FCC     "FD"                              ; 17 BAD FILE DATA
239C 414F             (       tokens.asm):00337                 FCC     "AO"                              ; 18 FILE ALREADY OPEN
239E 444E             (       tokens.asm):00338                 FCC     "DN"                              ; 19 DEVICE NUMBER ERROR
23A0 494F             (       tokens.asm):00339                 FCC     "IO"                              ; 20 I/O ERROR
23A2 464D             (       tokens.asm):00340                 FCC     "FM"                              ; 21 BAD FILE MODE
23A4 4E4F             (       tokens.asm):00341                 FCC     "NO"                              ; 22 FILE NOT OPEN
23A6 4945             (       tokens.asm):00342                 FCC     "IE"                              ; 23 INPUT PAST END OF FILE
23A8 4453             (       tokens.asm):00343                 FCC     "DS"                              ; 24 DIRECT STATEMENT IN FILE
                      (       tokens.asm):00344         ;* ADDITIONAL ERROR MESSAGES ADDED BY EXTENDED BASIC
23AA                  (       tokens.asm):00345         L890B
23AA 5546             (       tokens.asm):00346                 FCC     "UF"                              ; 25 UNDEFINED FUNCTION (FN) CALL
23AC                  (       tokens.asm):00347         L890D
23AC 4E45             (       tokens.asm):00348                 FCC     "NE"                              ; 26 FILE NOT FOUND
                      (       tokens.asm):00349         
23AE                  (       tokens.asm):00350         LABE1
23AE 204552524F52     (       tokens.asm):00351                 FCC     " ERROR"
23B4 00               (       tokens.asm):00352                 FCB     $00
23B5                  (       tokens.asm):00353         LABE8
23B5 20494E20         (       tokens.asm):00354                 FCC     " IN "
23B9 00               (       tokens.asm):00355                 FCB     $00
23BA                  (       tokens.asm):00356         LABED
23BA 0D               (       tokens.asm):00357                 FCB     CR
23BB                  (       tokens.asm):00358         LABEE
23BB 4F4B             (       tokens.asm):00359                 FCC     "OK"
23BD 0D00             (       tokens.asm):00360                 FCB     CR,$00
23BF                  (       tokens.asm):00361         LABF2
23BF 0D               (       tokens.asm):00362                 FCB     CR
23C0 425245414B       (       tokens.asm):00363                 FCC     "BREAK"
23C5 00               (       tokens.asm):00364                 FCB     $00
                      (      exbasic.asm):00258         
                      (      exbasic.asm):00259         
                      (      exbasic.asm):00260         ;* SEARCH THE STACK FOR 'GOSUB/RETURN' OR 'FOR/NEXT' DATA.
                      (      exbasic.asm):00261         ;* THE 'FOR/NEXT' INDEX VARIABLE DESCRIPTOR ADDRESS BEING
                      (      exbasic.asm):00262         ;* SOUGHT IS STORED IN VARDES. EACH BLOCK OF FOR/NEXT DATA IS 18
                      (      exbasic.asm):00263         ;* BYTES WITH A $80 LEADER BYTE AND THE GOSUB/RETURN DATA IS 5 BYTES
                      (      exbasic.asm):00264         ;* WITH AN $A6 LEADER BYTE. THE FIRST NON "FOR/NEXT" DATA
                      (      exbasic.asm):00265         ;* IS CONSIDERED 'GOSUB/RETURN'
23C6                  (      exbasic.asm):00266         LABF9
23C6 3064             (      exbasic.asm):00267                 LEAX    4,S                               ; POINT X TO 3RD ADDRESS ON STACK - IGNORE THE
                      (      exbasic.asm):00268         ;*         FIRST TWO RETURN ADDRESSES ON THE STACK
23C8                  (      exbasic.asm):00269         LABFB
23C8 C612             (      exbasic.asm):00270                 LDB     #18                               ; 18 BYTES SAVED ON STACK FOR EACH 'FOR' LOOP
23CA 9F0F             (      exbasic.asm):00271                 STX     TEMPTR                            ; SAVE POINTER
23CC A684             (      exbasic.asm):00272                 LDA     ,X                                ; GET 1ST BYTE
23CE 8080             (      exbasic.asm):00273                 SUBA    #$80                              ; * CHECK FOR TYPE OF STACK JUMP FOUND
23D0 2615             (      exbasic.asm):00274                 BNE     LAC1A                             ; * BRANCH IF NOT 'FOR/NEXT'
23D2 AE01             (      exbasic.asm):00275                 LDX     1,X                               ; = GET INDEX VARIABLE DESCRIPTOR
23D4 9F11             (      exbasic.asm):00276                 STX     TMPTR1                            ; = POINTER AND SAVE IT IN TMPTR1
23D6 9E3B             (      exbasic.asm):00277                 LDX     VARDES                            ; GET INDEX VARIABLE BEING SEARCHED FOR
23D8 2709             (      exbasic.asm):00278                 BEQ     LAC16                             ; BRANCH IF DEFAULT INDEX VARIABLE - USE THE
                      (      exbasic.asm):00279         ;*                             ; FIRST 'FOR/NEXT' DATA FOUND ON STACK
                      (      exbasic.asm):00280         ;*                             ; IF NO INDEX VARIABLE AFTER 'NEXT'
23DA 9C11             (      exbasic.asm):00281                 CMPX    TMPTR1                            ; DOES THE STACK INDEX MATCH THE ONE
                      (      exbasic.asm):00282         ;*                             ; BEING SEARCHED FOR?
23DC 2709             (      exbasic.asm):00283                 BEQ     LAC1A                             ; YES
23DE 9E0F             (      exbasic.asm):00284                 LDX     TEMPTR                            ; * RESTORE INITIAL POINTER, ADD
23E0 3A               (      exbasic.asm):00285                 ABX                                       ; * 18 TO IT AND LOOK FOR
23E1 20E5             (      exbasic.asm):00286                 BRA     LABFB                             ; * NEXT BLOCK OF DATA
23E3                  (      exbasic.asm):00287         LAC16
23E3 9E11             (      exbasic.asm):00288                 LDX     TMPTR1                            ; = GET 1ST INDEX VARIABLE FOUND AND
23E5 9F3B             (      exbasic.asm):00289                 STX     VARDES                            ; = SAVE AS 'NEXT' INDEX
23E7                  (      exbasic.asm):00290         LAC1A
23E7 9E0F             (      exbasic.asm):00291                 LDX     TEMPTR                            ; POINT X TO START OF 'FOR/NEXT' DATA
23E9 4D               (      exbasic.asm):00292                 TSTA                                      ; SET ZERO FLAG IF 'FOR/NEXT' DATA
23EA 39               (      exbasic.asm):00293                 RTS
                      (      exbasic.asm):00294         ;* CHECK FOR MEMORY SPACE FOR NEW TOP OF
                      (      exbasic.asm):00295         ;* ARRAYS AND MOVE ARRAYS TO NEW LOCATION
23EB                  (      exbasic.asm):00296         LAC1E
23EB 8D17             (      exbasic.asm):00297                 BSR     LAC37                             ; ACCD = NEW BOTTOM OF FREE RAM - IS THERE
                      (      exbasic.asm):00298         ;*                             ; ROOM FOR THE STACK?
                      (      exbasic.asm):00299         ;* MOVE BYTES FROM V43(X) TO V41(U) UNTIL (X) = V47 AND
                      (      exbasic.asm):00300         ;* SAVE FINAL VALUE OF U IN V45
23ED                  (      exbasic.asm):00301         LAC20
23ED DE41             (      exbasic.asm):00302                 LDU     V41                               ; POINT U TO DESTINATION ADDRESS (V41)
23EF 3341             (      exbasic.asm):00303                 LEAU    1,U                               ; ADD ONE TO U - COMPENSATE FOR FIRST PSHU
23F1 9E43             (      exbasic.asm):00304                 LDX     V43                               ; POINT X TO SOURCE ADDRESS (V43)
23F3 3001             (      exbasic.asm):00305                 LEAX    1,X                               ; ADD ONE - COMPENSATE FOR FIRST LDA ,X
23F5                  (      exbasic.asm):00306         LAC28
23F5 A682             (      exbasic.asm):00307                 LDA     ,-X                               ; GRAB A BYTE FROM SOURCE
23F7 3602             (      exbasic.asm):00308                 PSHU    A                                 ; MOVE IT TO DESTINATION
23F9 9C47             (      exbasic.asm):00309                 CMPX    V47                               ; DONE?
23FB 26F8             (      exbasic.asm):00310                 BNE     LAC28                             ; NO - KEEP MOVING BYTES
23FD DF45             (      exbasic.asm):00311                 STU     V45                               ; SAVE FINAL DESTINATION ADDRESS
23FF                  (      exbasic.asm):00312         LAC32
23FF 39               (      exbasic.asm):00313                 RTS
                      (      exbasic.asm):00314         ;* CHECK TO SEE IF THERE IS ROOM TO STORE 2*ACCB
                      (      exbasic.asm):00315         ;* BYTES IN FREE RAM - OM ERROR IF NOT
2400                  (      exbasic.asm):00316         LAC33
2400 4F               (      exbasic.asm):00317                 CLRA                                      ; * ACCD CONTAINS NUMBER OF EXTRA
2401 58               (      exbasic.asm):00318                 ASLB                                      ; * BYTES TO PUT ON STACK
2402 D31F             (      exbasic.asm):00319                 ADDD    ARYEND                            ; END OF PROGRAM AND VARIABLES
2404                  (      exbasic.asm):00320         LAC37
2404 C3003A           (      exbasic.asm):00321                 ADDD    #STKBUF                           ; ADD STACK BUFFER - ROOM FOR STACK?
2407 2508             (      exbasic.asm):00322                 BCS     LAC44                             ; BRANCH IF GREATER THAN $FFFF
2409 10DF17           (      exbasic.asm):00323                 STS     BOTSTK                            ; CURRENT NEW BOTTOM OF STACK STACK POINTER
240C 109317           (      exbasic.asm):00324                 CMPD    BOTSTK                            ; ARE WE GOING TO BE BELOW STACK?
240F 25EE             (      exbasic.asm):00325                 BCS     LAC32                             ; YES - NO ERROR
2411                  (      exbasic.asm):00326         LAC44
2411 C60C             (      exbasic.asm):00327                 LDB     #6*2                              ; OUT OF MEMORY ERROR
                      (      exbasic.asm):00328         
                      (      exbasic.asm):00329         ;* ERROR SERVICING ROUTINE
2413                  (      exbasic.asm):00330         LAC46
2413 BD24E8           (      exbasic.asm):00331                 JSR     LAD33                             ; RESET STACK, STRING STACK, CONTINUE POINTER
2416 BD3103           (      exbasic.asm):00332                 JSR     LB95C                             ; SEND A CR TO SCREEN
2419 BD3153           (      exbasic.asm):00333                 JSR     LB9AF                             ; SEND A '?' TO SCREEN
241C 8E2378           (      exbasic.asm):00334                 LDX     #LABAF                            ; POINT TO ERROR TABLE
241F                  (      exbasic.asm):00335         LAC60
241F 3A               (      exbasic.asm):00336                 ABX                                       ; ADD MESSAGE NUMBER OFFSET
2420 8D33             (      exbasic.asm):00337                 BSR     LACA0                             ; * GET TWO CHARACTERS FROM X AND
2422 8D31             (      exbasic.asm):00338                 BSR     LACA0                             ; * SEND TO CONSOLE OUT (SCREEN)
2424 8E23AD           (      exbasic.asm):00339                 LDX     #LABE1-1                          ; POINT TO "ERROR" MESSAGE
2427                  (      exbasic.asm):00340         LAC68
2427 BD3140           (      exbasic.asm):00341                 JSR     LB99C                             ; PRINT MESSAGE POINTED TO BY X
242A 9668             (      exbasic.asm):00342                 LDA     CURLIN                            ; GET CURRENT LINE NUMBER (CURL IN)
242C 4C               (      exbasic.asm):00343                 INCA                                      ; TEST FOR DIRECT MODE
242D 2703             (      exbasic.asm):00344                 BEQ     LAC73                             ; BRANCH IF DIRECT MODE
242F BD356C           (      exbasic.asm):00345                 JSR     LBDC5                             ; PRINT 'IN ****'
                      (      exbasic.asm):00346         ;*        THIS    IS THE MAIN LOOP OF BASIC WHEN IN DIRECT MODE
2432                  (      exbasic.asm):00347         LAC73
2432 BD3103           (      exbasic.asm):00348                 JSR     LB95C                             ; MOVE CURSOR TO START OF LINE
2435 8E23BA           (      exbasic.asm):00349                 LDX     #LABED                            ; POINT X TO 'OK', CR MESSAGE
2438 BD3140           (      exbasic.asm):00350                 JSR     LB99C                             ; PRINT 'OK', CR
243B                  (      exbasic.asm):00351         LAC7C
243B BD213A           (      exbasic.asm):00352                 JSR     LA390                             ; GO GET AN INPUT LINE
243E CEFFFF           (      exbasic.asm):00353                 LDU     #$FFFF                            ; THE LINE NUMBER FOR DIRECT MODE IS $FFFF
2441 DF68             (      exbasic.asm):00354                 STU     CURLIN                            ; SAVE IT IN CURLIN
2443 25F6             (      exbasic.asm):00355                 BCS     LAC7C                             ; BRANCH IF LINE INPUT TERMINATED BY BREAK
2445 BF2014           (      exbasic.asm):00356                 STX     CHARAD                            ; SAVE (X) AS CURRENT INPUT POINTER - THIS WILL
                      (      exbasic.asm):00357         ;*         ENABLE THE 'LIVE KEYBOARD' (DIRECT) MODE. THE
                      (      exbasic.asm):00358         ;*         LINE JUST ENTERED WILL BE INTERPRETED
2448 BD200B           (      exbasic.asm):00359                 JSR     GETNCH                            ; GET NEXT CHARACTER FROM BASIC
244B 27EE             (      exbasic.asm):00360                 BEQ     LAC7C                             ; NO LINE INPUT - GET ANOTHER LINE
244D 250B             (      exbasic.asm):00361                 BCS     LACA5                             ; BRANCH IF NUMER1C - THERE WAS A LINE NUMBER BEFORE
                      (      exbasic.asm):00362         ;*         THE  STATEMENT ENTERED, SO THIS STATEMENT
                      (      exbasic.asm):00363         ;*         WILL BE MERGED INTO THE BASIC PROGRAM
                      (      exbasic.asm):00364         
244F BD2FED           (      exbasic.asm):00365                 JSR     LB821                             ; GO CRUNCH LINE
2452 7E2589           (      exbasic.asm):00366                 JMP     LADC0                             ; GO EXECUTE THE STATEMENT (LIVE KEYBOARD)
                      (      exbasic.asm):00367         ;*
2455                  (      exbasic.asm):00368         LACA0
2455 A680             (      exbasic.asm):00369                 LDA     ,X+                               ; GET A CHARACTER
2457 7E3155           (      exbasic.asm):00370                 JMP     LB9B1                             ; SEND TO CONSOLE OUT
                      (      exbasic.asm):00371         ;* TAKE A LINE FROM THE LINE INPUT BUFFER
                      (      exbasic.asm):00372         ;* AND INSERT IT INTO THE BASIC PROGRAM
245A                  (      exbasic.asm):00373         LACA5
245A BD2742           (      exbasic.asm):00374                 JSR     LAF67                             ; CONVERT LINE NUMBER TO BINARY
245D                  (      exbasic.asm):00375         LACA8
245D 9E2B             (      exbasic.asm):00376                 LDX     BINVAL                            ; GET CONVERTED LINE NUMBER
245F BFDAD5           (      exbasic.asm):00377                 STX     LINHDR                            ; STORE IT IN LINE INPUT HEADER
2462 BD2FED           (      exbasic.asm):00378                 JSR     LB821                             ; GO CRUNCH THE LINE
2465 D703             (      exbasic.asm):00379                 STB     TMPLOC                            ; SAVE LINE LENGTH
2467 8D4D             (      exbasic.asm):00380                 BSR     LAD01                             ; FIND OUT WHERE TO INSERT LINE
2469 2512             (      exbasic.asm):00381                 BCS     LACC8                             ; RANCH IF LINE NUMBER DOES NOT ALREADY EXIST
246B DC47             (      exbasic.asm):00382                 LDD     V47                               ; GET ABSOLUTE ADDRESS OF LINE NUMBER
246D A384             (      exbasic.asm):00383                 SUBD    ,X                                ; SUBTRACT ADDRESS OF NEXT LINE NUMBER
246F D31B             (      exbasic.asm):00384                 ADDD    VARTAB                            ; * ADD TO CURRENT END OF PROGRAM - THIS WILL REMOVE
2471 DD1B             (      exbasic.asm):00385                 STD     VARTAB                            ; * THE LENGTH OF THIS LINE NUMBER FROM THE PROGRAM
2473 EE84             (      exbasic.asm):00386                 LDU     ,X                                ; POINT U TO ADDRESS OF NEXT LINE NUMBER
                      (      exbasic.asm):00387         ;* DELETE OLD LINE FROM BASIC PROGRAM
2475                  (      exbasic.asm):00388         LACC0
2475 3702             (      exbasic.asm):00389                 PULU    A                                 ; GET A BYTE FROM WHAT'S LEFT OF PROGRAM
2477 A780             (      exbasic.asm):00390                 STA     ,X+                               ; MOVE IT DOWN
2479 9C1B             (      exbasic.asm):00391                 CMPX    VARTAB                            ; COMPARE TO END OF BASIC PROGRAM
247B 26F8             (      exbasic.asm):00392                 BNE     LACC0                             ; BRANCH IF NOT AT END
247D                  (      exbasic.asm):00393         LACC8
247D B6DAD7           (      exbasic.asm):00394                 LDA     LINBUF                            ; * CHECK TO SEE IF THERE IS A LINE IN
2480 271C             (      exbasic.asm):00395                 BEQ     LACE9                             ; * THE BUFFER AND BRANCH IF NONE
2482 DC1B             (      exbasic.asm):00396                 LDD     VARTAB                            ; = SAVE CURRENT END OF
2484 DD43             (      exbasic.asm):00397                 STD     V43                               ; = PROGRAM IN V43
2486 DB03             (      exbasic.asm):00398                 ADDB    TMPLOC                            ; * ADD LENGTH OF CRUNCHED LINE,
2488 8900             (      exbasic.asm):00399                 ADCA    #0                                ; * PROPOGATE CARRY AND SAVE NEW END
248A DD41             (      exbasic.asm):00400                 STD     V41                               ; * OF PROGRAM IN V41
248C BD23EB           (      exbasic.asm):00401                 JSR     LAC1E                             ; = MAKE SURE THERE'S ENOUGH RAM FOR THIS
                      (      exbasic.asm):00402         ;*         =    LINE & MAKE A HOLE IN BASIC FOR NEW LINE
248F CEDAD3           (      exbasic.asm):00403                 LDU     #LINHDR-2                         ; POINT U TO LINE TO BE INSERTED
2492                  (      exbasic.asm):00404         LACDD
2492 3702             (      exbasic.asm):00405                 PULU    A                                 ; GET A BYTE FROM NEW LINE
2494 A780             (      exbasic.asm):00406                 STA     ,X+                               ; INSERT IT IN PROGRAM
2496 9C45             (      exbasic.asm):00407                 CMPX    V45                               ; * COMPARE TO ADDRESS OF END OF INSERTED
2498 26F8             (      exbasic.asm):00408                 BNE     LACDD                             ; * LINE AND BRANCH IF NOT DONE
249A 9E41             (      exbasic.asm):00409                 LDX     V41                               ; = GET AND SAVE
249C 9F1B             (      exbasic.asm):00410                 STX     VARTAB                            ; = END OF PROGRAM
249E                  (      exbasic.asm):00411         LACE9
249E 8D36             (      exbasic.asm):00412                 BSR     LAD21                             ; RESET INPUT POINTER, CLEAR VARIABLES, INITIALIZE
24A0 8D02             (      exbasic.asm):00413                 BSR     LACEF                             ; ADJUST START OF NEXT LINE ADDRESSES
24A2 2097             (      exbasic.asm):00414                 BRA     LAC7C                             ; EENTER BASIC'S INPUT LOOP
                      (      exbasic.asm):00415         ;* COMPUTE THE START OF NEXT LINE ADDRESSES FOR THE BASIC PROGRAM
24A4                  (      exbasic.asm):00416         LACEF
24A4 9E19             (      exbasic.asm):00417                 LDX     TXTTAB                            ; POINT X TO START OF PROGRAM
24A6                  (      exbasic.asm):00418         LACF1
24A6 EC84             (      exbasic.asm):00419                 LDD     ,X                                ; GET ADDRESS OF NEXT LINE
24A8 2721             (      exbasic.asm):00420                 BEQ     LAD16                             ; RETURN IF END OF PROGRAM
24AA 3304             (      exbasic.asm):00421                 LEAU    4,X                               ; POINT U TO START OF BASIC TEXT IN LINE
24AC                  (      exbasic.asm):00422         LACF7
24AC A6C0             (      exbasic.asm):00423                 LDA     ,U+                               ; * SKIP THROUGH THE LINE UNTIL A
24AE 26FC             (      exbasic.asm):00424                 BNE     LACF7                             ; * ZERO (END OF LINE) IS FOUND
24B0 EF84             (      exbasic.asm):00425                 STU     ,X                                ; SAVE THE NEW START OF NEXT LINE ADDRESS
24B2 AE84             (      exbasic.asm):00426                 LDX     ,X                                ; POINT X TO START OF NEXT LINE
24B4 20F0             (      exbasic.asm):00427                 BRA     LACF1                             ; KEEP GOING
                      (      exbasic.asm):00428         ;*
                      (      exbasic.asm):00429         ;* FIND A LINE NUMBER IN THE BASIC PROGRAM
                      (      exbasic.asm):00430         ;* RETURN WITH CARRY SET IF NO MATCH FOUND
24B6                  (      exbasic.asm):00431         LAD01
24B6 DC2B             (      exbasic.asm):00432                 LDD     BINVAL                            ; GET THE LINE NUMBER TO FIND
24B8 9E19             (      exbasic.asm):00433                 LDX     TXTTAB                            ; BEGINNING OF PROGRAM
24BA                  (      exbasic.asm):00434         LAD05
24BA EE84             (      exbasic.asm):00435                 LDU     ,X                                ; GET ADDRESS OF NEXT LINE NUMBER
24BC 2709             (      exbasic.asm):00436                 BEQ     LAD12                             ; BRANCH IF END OF PROG
24BE 10A302           (      exbasic.asm):00437                 CMPD    2,X                               ; IS IT A MATCH?
24C1 2306             (      exbasic.asm):00438                 BLS     LAD14                             ; CARRY SET IF LOWER; CARRY CLEAR IF MATCH
24C3 AE84             (      exbasic.asm):00439                 LDX     ,X                                ; X = ADDRESS OF NEXT LINE
24C5 20F3             (      exbasic.asm):00440                 BRA     LAD05                             ; KEEP LOOPING FOR LINE NUMBER
24C7                  (      exbasic.asm):00441         LAD12
24C7 1A01             (      exbasic.asm):00442                 ORCC    #1                                ; SET CARRY FLAG
24C9                  (      exbasic.asm):00443         LAD14
24C9 9F47             (      exbasic.asm):00444                 STX     V47                               ; SAVE MATCH LINE NUMBER OR NUMBER OF LINE JUST AFTER
                      (      exbasic.asm):00445         ;*                             ; WHERE IT SHOULD HAVE BEEN
24CB                  (      exbasic.asm):00446         LAD16
24CB 39               (      exbasic.asm):00447                 RTS
                      (      exbasic.asm):00448         
                      (      exbasic.asm):00449         ;* NEW
24CC                  (      exbasic.asm):00450         NEW
24CC 26FB             (      exbasic.asm):00451                 BNE     LAD14                             ; BRANCH IF ARGUMENT GIVEN
24CE                  (      exbasic.asm):00452         LAD19
24CE 9E19             (      exbasic.asm):00453                 LDX     TXTTAB                            ; GET START OF BASIC
24D0 6F80             (      exbasic.asm):00454                 CLR     ,X+                               ; * PUT 2 ZERO BYTES THERE - ERASE
24D2 6F80             (      exbasic.asm):00455                 CLR     ,X+                               ; * THE BASIC PROGRAM
24D4 9F1B             (      exbasic.asm):00456                 STX     VARTAB                            ; AND THE NEXT ADDRESS IS NOW THE END OF PROGRAM
24D6                  (      exbasic.asm):00457         LAD21
24D6 9E19             (      exbasic.asm):00458                 LDX     TXTTAB                            ; GET START OF BASIC
24D8 BD268B           (      exbasic.asm):00459                 JSR     LAEBB                             ; PUT INPUT POINTER ONE BEFORE START OF BASIC
                      (      exbasic.asm):00460         ;* ERASE ALL VARIABLES
24DB                  (      exbasic.asm):00461         LAD26
24DB 9E27             (      exbasic.asm):00462                 LDX     MEMSIZ                            ; * RESET START OF STRING VARIABLES
24DD 9F23             (      exbasic.asm):00463                 STX     STRTAB                            ; * TO TOP OF STRING SPACE
24DF BD25B7           (      exbasic.asm):00464                 JSR     RESTOR                            ; RESET 'DATA' POINTER TO START OF BASIC
24E2 9E1B             (      exbasic.asm):00465                 LDX     VARTAB                            ; * GET START OF VARIABLES AND USE IT
24E4 9F1D             (      exbasic.asm):00466                 STX     ARYTAB                            ; * TO RESET START OF ARRAYS
24E6 9F1F             (      exbasic.asm):00467                 STX     ARYEND                            ; RESET END OF ARRAYS
24E8                  (      exbasic.asm):00468         LAD33
24E8 8ED800           (      exbasic.asm):00469                 LDX     #STRSTK                           ; * RESET STRING STACK POINTER TO
24EB 9F0B             (      exbasic.asm):00470                 STX     TEMPPT                            ; * BOTTOM OF STRING STACK
24ED AEE4             (      exbasic.asm):00471                 LDX     ,S                                ; GET RETURN ADDRESS OFF STACK
24EF 10DE21           (      exbasic.asm):00472                 LDS     FRETOP                            ; RESTORE STACK POINTER
24F2 6FE2             (      exbasic.asm):00473                 CLR     ,-S                               ; PUT A ZERO BYTE ON STACK - TO CLEAR ANY RETURN OF
                      (      exbasic.asm):00474         ;*                             ; FOR/NEXT DATA FROM THE STACK
24F4 0F2D             (      exbasic.asm):00475                 CLR     OLDPTR                            ; RESET 'CONT' ADDRESS SO YOU
24F6 0F2E             (      exbasic.asm):00476                 CLR     OLDPTR+1                          ; 'CAN'T CONTINUE'
24F8 0F08             (      exbasic.asm):00477                 CLR     ARYDIS                            ; CLEAR THE ARRAY DISABLE FLAG
24FA 6E84             (      exbasic.asm):00478                 JMP     ,X                                ; RETURN TO CALLING ROUTINE - THIS IS NECESSARY
                      (      exbasic.asm):00479         ;*                             ; SINCE THE STACK WAS RESET
                      (      exbasic.asm):00480         ;*
                      (      exbasic.asm):00481         ;* FOR
                      (      exbasic.asm):00482         ;*
                      (      exbasic.asm):00483         ;* THE FOR COMMAND WILL STORE 18 BYTES ON THE STACK FOR
                      (      exbasic.asm):00484         ;* EACH FOR-NEXT LOOP WHICH IS BEING PROCESSED. THESE
                      (      exbasic.asm):00485         ;* BYTES ARE DEFINED AS FOLLOWS: 0- $80 (FOR FLAG);
                      (      exbasic.asm):00486         ;*         1,2=INDEX VARIABLE DESCRIPTOR POINTER; 3-7=FP VALUE OF STEP;
                      (      exbasic.asm):00487         ;*         8=STEP DIRECTION: $FF IF NEGATIVE; 0 IF ZERO; 1 IF POSITIVE;
                      (      exbasic.asm):00488         ;* 9-13=FP VALUE OF 'TO' PARAMETER;
                      (      exbasic.asm):00489         ;* 14,15=CURRENT LINE NUMBER; 16,17=RAM ADDRESS OF THE END
                      (      exbasic.asm):00490         ;*         OF   THE LINE CONTAINING THE 'FOR' STATEMENT
24FC                  (      exbasic.asm):00491         FOR
24FC 8680             (      exbasic.asm):00492                 LDA     #$80                              ; * SAVE THE DISABLE ARRAY FLAG IN VO8
24FE 9708             (      exbasic.asm):00493                 STA     ARYDIS                            ; * DO NOT ALLOW THE INDEX VARIABLE TO BE AN ARRAY
2500 BD2765           (      exbasic.asm):00494                 JSR     LET                               ; SET INDEX VARIABLE TO INITIAL VALUE
2503 BD23C6           (      exbasic.asm):00495                 JSR     LABF9                             ; SEARCH THE STACK FOR 'FOR/NEXT' DATA
2506 3262             (      exbasic.asm):00496                 LEAS    2,S                               ; PURGE RETURN ADDRESS OFF OF THE STACK
2508 2604             (      exbasic.asm):00497                 BNE     LAD59                             ; BRANCH IF INDEX VARIABLE NOT ALREADY BEING USED
250A 9E0F             (      exbasic.asm):00498                 LDX     TEMPTR                            ; GET (ADDRESS + 18) OF MATCHED 'FOR/NEXT' DATA
250C 3285             (      exbasic.asm):00499                 LEAS    B,X                               ; MOVE THE STACK POINTER TO THE BEGINNING OF THE
                      (      exbasic.asm):00500         ;* MATCHED 'FOR/NEXT' DATA SO THE NEW DATA WILL
                      (      exbasic.asm):00501         ;* OVERLAY THE OLD DATA. THIS WILL ALSO DESTROY
                      (      exbasic.asm):00502         ;* ALL OF THE 'RETURN' AND 'FOR/NEXT' DATA BELOW
                      (      exbasic.asm):00503         ;* THIS POINT ON THE STACK
250E                  (      exbasic.asm):00504         LAD59
250E C609             (      exbasic.asm):00505                 LDB     #$09                              ; * CHECK FOR ROOM FOR 18 BYTES
2510 BD2400           (      exbasic.asm):00506                 JSR     LAC33                             ; * IN FREE RAM
2513 BD26BB           (      exbasic.asm):00507                 JSR     LAEE8                             ; GET ADDR OF END OF SUBLINE IN X
2516 DC68             (      exbasic.asm):00508                 LDD     CURLIN                            ; GET CURRENT LINE NUMBER
2518 3416             (      exbasic.asm):00509                 PSHS    X,B,A                             ; SAVE LINE ADDR AND LINE NUMBER ON STACK
251A C6A3             (      exbasic.asm):00510                 LDB     #TOK_TO                           ; TOKEN FOR 'TO'
251C BD2A3A           (      exbasic.asm):00511                 JSR     LB26F                             ; SYNTAX CHECK FOR 'TO'
251F BD2908           (      exbasic.asm):00512                 JSR     LB143                             ; 'TM' ERROR IF INDEX VARIABLE SET TO STRING
2522 BD2906           (      exbasic.asm):00513                 JSR     LB141                             ; EVALUATE EXPRESSION
                      (      exbasic.asm):00514         ;*
2525 D654             (      exbasic.asm):00515                 LDB     FP0SGN                            ; GET FPA0 MANTISSA SIGN
2527 CA7F             (      exbasic.asm):00516                 ORB     #$7F                              ; FORM A MASK TO SAVE DATA BITS OF HIGH ORDER MANTISSA
2529 D450             (      exbasic.asm):00517                 ANDB    FPA0                              ; PUT THE MANTISSA SIGN IN BIT 7 OF HIGH ORDER MANTISSA
252B D750             (      exbasic.asm):00518                 STB     FPA0                              ; SAVE THE PACKED HIGH ORDER MANTISSA
252D 108E2534         (      exbasic.asm):00519                 LDY     #LAD7F                            ; LOAD FOLLOWING ADDRESS INTO Y AS A RETURN
2531 7E29B2           (      exbasic.asm):00520                 JMP     LB1EA                             ; ADDRESS - PUSH FPA0 ONTO THE STACK
2534                  (      exbasic.asm):00521         LAD7F
2534 8E3269           (      exbasic.asm):00522                 LDX     #LBAC5                            ; POINT X TO FLOATING POINT NUMBER 1.0 (DEFAULT STEP VALUE)
2537 BD33B8           (      exbasic.asm):00523                 JSR     LBC14                             ; MOVE (X) TO FPA0
253A BD2013           (      exbasic.asm):00524                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
253D 81A7             (      exbasic.asm):00525                 CMPA    #TOK_STEP                         ; STEP TOKEN
253F 2606             (      exbasic.asm):00526                 BNE     LAD90                             ; BRANCH IF NO 'STEP' VALUE
2541 BD200B           (      exbasic.asm):00527                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
2544 BD2906           (      exbasic.asm):00528                 JSR     LB141                             ; EVALUATE NUMERIC EXPRESSION
2547                  (      exbasic.asm):00529         LAD90
2547 BD3411           (      exbasic.asm):00530                 JSR     LBC6D                             ; CHECK STATUS OF FPA0
254A BD29AE           (      exbasic.asm):00531                 JSR     LB1E6                             ; SAVE STATUS AND FPA0 ON THE STACK
254D DC3B             (      exbasic.asm):00532                 LDD     VARDES                            ; * GET DESCRIPTOR POINTER FOR THE 'STEP'
254F 3406             (      exbasic.asm):00533                 PSHS    B,A                               ; * VARIABLE AND SAVE IT ON THE STACK
2551 8680             (      exbasic.asm):00534                 LDA     #$80                              ; = GET THE 'FOR' FLAG AND
2553 3402             (      exbasic.asm):00535                 PSHS    A                                 ; = SAVE IT ON THE STACK
                      (      exbasic.asm):00536         ;*
                      (      exbasic.asm):00537         ;* MAIN COMMAND INTERPRETATION LOOP
2555                  (      exbasic.asm):00538         LAD9E
2555 1CAF             (      exbasic.asm):00539                 ANDCC   #$AF                              ; ENABLE IRQ,FIRQ
2557 8D65             (      exbasic.asm):00540                 BSR     LADEB                             ; CHECK FOR KEYBOARD BREAK
2559 BE2014           (      exbasic.asm):00541                 LDX     CHARAD                            ; GET BASIC'S INPUT POINTER
255C 9F2F             (      exbasic.asm):00542                 STX     TINPTR                            ; SAVE IT
255E A680             (      exbasic.asm):00543                 LDA     ,X+                               ; GET CURRENT INPUT CHAR & MOVE POINTER
2560 2707             (      exbasic.asm):00544                 BEQ     LADB4                             ; BRANCH IF END OF LINE
2562 813A             (      exbasic.asm):00545                 CMPA    #':'                              ; CHECK FOR LINE SEPARATOR
2564 2723             (      exbasic.asm):00546                 BEQ     LADC0                             ; BRANCH IF COLON
2566                  (      exbasic.asm):00547         LADB1
2566 7E2A43           (      exbasic.asm):00548                 JMP     LB277                             ; 'SYNTAX ERROR'-IF NOT LINE SEPARATOR
2569                  (      exbasic.asm):00549         LADB4
2569 A681             (      exbasic.asm):00550                 LDA     ,X++                              ; GET MS BYTE OF ADDRESS OF NEXT BASIC LINE
256B 9700             (      exbasic.asm):00551                 STA     ENDFLG                            ; SAVE IN STOP/END FLAG - CAUSE A STOP IF
                      (      exbasic.asm):00552         ;*                             ; NEXT LINE ADDRESS IS < $8000; CAUSE
                      (      exbasic.asm):00553         ;*                             ; AN END IF ADDRESS > $8000
256D 2778             (      exbasic.asm):00554                 BEQ     LAE15                             ; BRANCH TO 'STOP' - END OF PROGRAM
256F EC80             (      exbasic.asm):00555                 LDD     ,X+                               ; GET CURRENT LINE NUMBER
2571 DD68             (      exbasic.asm):00556                 STD     CURLIN                            ; SAVE IN CURLIN
2573 BF2014           (      exbasic.asm):00557                 STX     CHARAD                            ; SAVE ADDRESS OF FIRST BYTE OF LINE
                      (      exbasic.asm):00558         ;* EXTENDED BASIC TRACE
2576 9680             (      exbasic.asm):00559                 LDA     TRCFLG                            ; TEST THE TRACE FLAG
2578 270F             (      exbasic.asm):00560                 BEQ     LADC0                             ; BRANCH IF TRACE OFF
257A 865B             (      exbasic.asm):00561                 LDA     #$5B                              ; <LEFT HAND MARKER FOR TRON LINE NUMBER
257C BD2027           (      exbasic.asm):00562                 JSR     PUTCHR                            ; OUTPUT A CHARACTER
257F 9668             (      exbasic.asm):00563                 LDA     CURLIN                            ; GET MS BYTE OF LINE NUMBER
2581 BD3573           (      exbasic.asm):00564                 JSR     LBDCC                             ; CONVERT ACCD TO DECIMAL AND PRINT ON SCREEN
2584 865D             (      exbasic.asm):00565                 LDA     #$5D                              ; > RIGHT HAND MARKER FOR TRON LINE NUMBER
2586 BD2027           (      exbasic.asm):00566                 JSR     PUTCHR                            ; OUTPUT A CHARACTER
                      (      exbasic.asm):00567         ;* END OF EXTENDED BASIC TRACE
2589                  (      exbasic.asm):00568         LADC0
2589 BD200B           (      exbasic.asm):00569                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
258C 8D02             (      exbasic.asm):00570                 BSR     LADC6                             ; GO PROCESS COMMAND
258E 20C5             (      exbasic.asm):00571                 BRA     LAD9E                             ; GO BACK TO MAIN LOOP
2590                  (      exbasic.asm):00572         LADC6
2590 272B             (      exbasic.asm):00573                 BEQ     LADEA                             ; RETURN IF END OF LINE (RTS - was BEQ LAE40)
2592 4D               (      exbasic.asm):00574                 TSTA                                      ; CHECK FOR TOKEN - BIT 7 SET (NEGATIVE)
2593 102A01CE         (      exbasic.asm):00575                 LBPL    LET                               ; BRANCH IF NOT A TOKEN - GO DO A 'LET' WHICH
                      (      exbasic.asm):00576         ;*                             ; IS THE 'DEFAULT' TOKEN FOR MICROSOFT BASIC
2597 81FF             (      exbasic.asm):00577                 CMPA    #$FF                              ; SECONDARY TOKEN
2599 2710             (      exbasic.asm):00578                 BEQ     SECTOK
259B 81A1             (      exbasic.asm):00579                 CMPA    #TOK_HIGH_EXEC                    ; SKIPF TOKEN - HIGHEST EXECUTABLE COMMAND IN BASIC
259D 22C7             (      exbasic.asm):00580                 BHI     LADB1                             ; 'SYNTAX ERROR' IF NON-EXECUTABLE TOKEN
259F BE20E3           (      exbasic.asm):00581                 LDX     COMVEC+3                          ; GET ADDRESS OF BASIC'S COMMAND TABLE
25A2                  (      exbasic.asm):00582         LADD4
25A2 48               (      exbasic.asm):00583                 ASLA                                      ; X2 (2 BYTE/JUMP ADDRESS) & DISCARD BIT 7
25A3 1F89             (      exbasic.asm):00584                 TFR     A,B                               ; SAVE COMMAND OFFSET IN ACCB
25A5 3A               (      exbasic.asm):00585                 ABX                                       ; NON X POINTS TO COMMAND JUMP ADDR
25A6 BD200B           (      exbasic.asm):00586                 JSR     GETNCH                            ; GET AN INPUT CHAR
                      (      exbasic.asm):00587         ;*
                      (      exbasic.asm):00588         ;* HERE IS WHERE WE BRANCH TO DO A 'COMMAND'
25A9 6E94             (      exbasic.asm):00589                 JMP     [,X]                              ; GO DO A COMMAND
25AB                  (      exbasic.asm):00590         SECTOK
                      (      exbasic.asm):00591         ;* THE ONLY SECONDARY TOKEN THAT CAN ALSO BE AN EXECUTABLE IS
                      (      exbasic.asm):00592         ;* THE MID$ REPLACEMENT STATEMENT. SO SPECIAL-CASE CHECK DONE HERE
25AB BD200B           (      exbasic.asm):00593                 JSR     GETNCH                            ; GET AN INPUT CHAR
25AE 8197             (      exbasic.asm):00594                 CMPA    #TOK_MID                          ; TOKEN FOR "MID$"
25B0 10271534         (      exbasic.asm):00595                 LBEQ    L86D6                             ; PROCESS MID$ REPLACEMENT
25B4 7E2A43           (      exbasic.asm):00596                 JMP     LB277                             ; SYNTAX ERROR
                      (      exbasic.asm):00597         
                      (      exbasic.asm):00598         ;*
                      (      exbasic.asm):00599         ;* RESTORE
25B7                  (      exbasic.asm):00600         RESTOR
25B7 9E19             (      exbasic.asm):00601                 LDX     TXTTAB                            ; BEGINNING OF PROGRAM ADDRESS
25B9 301F             (      exbasic.asm):00602                 LEAX    -1,X                              ; MOVE TO ONE BYTE BEFORE PROGRAM
25BB                  (      exbasic.asm):00603         LADE8
25BB 9F33             (      exbasic.asm):00604                 STX     DATPTR                            ; SAVE NEW DATA POINTER
25BD                  (      exbasic.asm):00605         LADEA
25BD 39               (      exbasic.asm):00606                 RTS
                      (      exbasic.asm):00607         ;*
                      (      exbasic.asm):00608         ;* BREAK CHECK
25BE                  (      exbasic.asm):00609         LADEB
25BE BD201E           (      exbasic.asm):00610                 JSR     LA1C1                             ; GET A KEYSTROKE ENTRY
25C1 270A             (      exbasic.asm):00611                 BEQ     LADFA                             ; RETURN IF NO INPUT
25C3                  (      exbasic.asm):00612         LADF0
25C3 8103             (      exbasic.asm):00613                 CMPA    #3                                ; CONTROL C? (BREAK)
25C5 2713             (      exbasic.asm):00614                 BEQ     STOP                              ; YES
25C7 8113             (      exbasic.asm):00615                 CMPA    #$13                              ; CONTROL S? (PAUSE)
25C9 2703             (      exbasic.asm):00616                 BEQ     LADFB                             ; YES
25CB 9773             (      exbasic.asm):00617                 STA     IKEYIM                            ; SAVE KEYSTROKE IN INKEY IMAGE
25CD                  (      exbasic.asm):00618         LADFA
25CD 39               (      exbasic.asm):00619                 RTS
25CE                  (      exbasic.asm):00620         LADFB
25CE BD201E           (      exbasic.asm):00621                 JSR     KEYIN                             ; GET A KEY
25D1 27FB             (      exbasic.asm):00622                 BEQ     LADFB                             ; BRANCH IF NO KEY DOWN
25D3 20EE             (      exbasic.asm):00623                 BRA     LADF0                             ; CONTINUE - DO A BREAK CHECK
                      (      exbasic.asm):00624         ;*
                      (      exbasic.asm):00625         ;* END
25D5                  (      exbasic.asm):00626         END
25D5 BD2013           (      exbasic.asm):00627                 JSR     GETCCH                            ; GET CURRENT INPUT CHAR
25D8 2002             (      exbasic.asm):00628                 BRA     LAE0B
                      (      exbasic.asm):00629         ;*
                      (      exbasic.asm):00630         ;* STOP
25DA                  (      exbasic.asm):00631         STOP
25DA 1A01             (      exbasic.asm):00632                 ORCC    #$01                              ; SET CARRY FLAG
25DC                  (      exbasic.asm):00633         LAE0B
25DC 2633             (      exbasic.asm):00634                 BNE     LAE40                             ; BRANCH IF ARGUMENT EXISTS
25DE BE2014           (      exbasic.asm):00635                 LDX     CHARAD                            ; * SAVE CURRENT POSITION OF
25E1 9F2F             (      exbasic.asm):00636                 STX     TINPTR                            ; * BASIC'S INPUT POINTER
25E3                  (      exbasic.asm):00637         LAE11
25E3 0600             (      exbasic.asm):00638                 ROR     ENDFLG                            ; ROTATE CARRY INTO BIT 7 OF STOP/END FLAG
25E5 3262             (      exbasic.asm):00639                 LEAS    2,S                               ; PURGE RETURN ADDRESS OFF STACK
25E7                  (      exbasic.asm):00640         LAE15
25E7 9E68             (      exbasic.asm):00641                 LDX     CURLIN                            ; GET CURRENT LINE NUMBER
25E9 8CFFFF           (      exbasic.asm):00642                 CMPX    #$FFFF                            ; DIRECT MODE?
25EC 2706             (      exbasic.asm):00643                 BEQ     LAE22                             ; YES
25EE 9F29             (      exbasic.asm):00644                 STX     OLDTXT                            ; SAVE CURRENT LINE NUMBER
25F0 9E2F             (      exbasic.asm):00645                 LDX     TINPTR                            ; * GET AND SAVE CURRENT POSITION
25F2 9F2D             (      exbasic.asm):00646                 STX     OLDPTR                            ; * OF BASIC'S INPUT POINTER
25F4                  (      exbasic.asm):00647         LAE22
25F4 8E23BE           (      exbasic.asm):00648                 LDX     #LABF2-1                          ; POINT TO CR, 'BREAK' MESSAGE
25F7 0D00             (      exbasic.asm):00649                 TST     ENDFLG                            ; CHECK STOP/END FLAG
25F9 102AFE35         (      exbasic.asm):00650                 LBPL    LAC73                             ; BRANCH TO MAIN LOOP OF BASIC IF END
25FD 7E2427           (      exbasic.asm):00651                 JMP     LAC68                             ; PRINT 'BREAK AT ####' AND GO TO
                      (      exbasic.asm):00652         ;*                             ; BASIC'S MAIN LOOP IF 'STOP'
                      (      exbasic.asm):00653         ;* CONT
2600                  (      exbasic.asm):00654         CONT
2600 260F             (      exbasic.asm):00655                 BNE     LAE40                             ; RETURN IF ARGUMENT GIVEN
2602 C620             (      exbasic.asm):00656                 LDB     #2*16                             ; 'CAN'T CONTINUE' ERROR
2604 9E2D             (      exbasic.asm):00657                 LDX     OLDPTR                            ; GET CONTINUE ADDRESS (INPUT POINTER)
2606 1027FE09         (      exbasic.asm):00658                 LBEQ    LAC46                             ; 'CN' ERROR IF CONTINUE ADDRESS = 0
260A BF2014           (      exbasic.asm):00659                 STX     CHARAD                            ; RESET BASIC'S INPUT POINTER
260D 9E29             (      exbasic.asm):00660                 LDX     OLDTXT                            ; GET LINE NUMBER
260F 9F68             (      exbasic.asm):00661                 STX     CURLIN                            ; RESET CURRENT LINE NUMBER
2611                  (      exbasic.asm):00662         LAE40
2611 39               (      exbasic.asm):00663                 RTS
                      (      exbasic.asm):00664         ;*
                      (      exbasic.asm):00665         ;* CLEAR
2612                  (      exbasic.asm):00666         CLEAR
2612 272D             (      exbasic.asm):00667                 BEQ     LAE6F                             ; BRANCH IF NO ARGUMENT
2614 BD2BB6           (      exbasic.asm):00668                 JSR     LB3E6                             ; EVALUATE ARGUMENT
2617 3406             (      exbasic.asm):00669                 PSHS    B,A                               ; SAVE AMOUNT OF STRING SPACE ON STACK
2619 9E27             (      exbasic.asm):00670                 LDX     MEMSIZ                            ; GET CURRENT TOP OF CLEARED SPACE
261B BD2013           (      exbasic.asm):00671                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
261E 270C             (      exbasic.asm):00672                 BEQ     LAE5A                             ; BRANCH IF NO NEW TOP OF CLEARED SPACE
2620 BD2A38           (      exbasic.asm):00673                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
2623 BD2F15           (      exbasic.asm):00674                 JSR     LB73D                             ; EVALUATE EXPRESSlON; RETURN VALUE IN X
2626 301F             (      exbasic.asm):00675                 LEAX    -1,X                              ; X = TOP OF CLEARED SPACE
2628 9C71             (      exbasic.asm):00676                 CMPX    TOPRAM                            ; COMPARE TO TOP OF RAM
262A 2218             (      exbasic.asm):00677                 BHI     LAE72                             ; 'OM' ERROR IF > TOP OF RAM
262C                  (      exbasic.asm):00678         LAE5A
262C 1F10             (      exbasic.asm):00679                 TFR     X,D                               ; ACCD = TOP OF CLEARED SPACE
262E A3E1             (      exbasic.asm):00680                 SUBD    ,S++                              ; SUBTRACT OUT AMOUNT OF CLEARED SPACE
2630 2512             (      exbasic.asm):00681                 BCS     LAE72                             ; 'OM' ERROR IF FREE MEM < 0
2632 1F03             (      exbasic.asm):00682                 TFR     D,U                               ; U = BOTTOM OF CLEARED SPACE
2634 83003A           (      exbasic.asm):00683                 SUBD    #STKBUF                           ; SUBTRACT OUT STACK BUFFER
2637 250B             (      exbasic.asm):00684                 BCS     LAE72                             ; 'OM' ERROR IF FREE MEM < 0
2639 931B             (      exbasic.asm):00685                 SUBD    VARTAB                            ; SUBTRACT OUT START OF VARIABLES
263B 2507             (      exbasic.asm):00686                 BCS     LAE72                             ; 'OM' ERROR IF FREE MEM < 0
263D DF21             (      exbasic.asm):00687                 STU     FRETOP                            ; SAVE NEW BOTTOM OF CLEARED SPACE
263F 9F27             (      exbasic.asm):00688                 STX     MEMSIZ                            ; SAVE NEW TOP OF CLEARED SPACE
2641                  (      exbasic.asm):00689         LAE6F
2641 7E24DB           (      exbasic.asm):00690                 JMP     LAD26                             ; ERASE ALL VARIABLES, INITIALIZE POINTERS, ETC
2644                  (      exbasic.asm):00691         LAE72
2644 7E2411           (      exbasic.asm):00692                 JMP     LAC44                             ; 'OM' ERROR
                      (      exbasic.asm):00693         ;*
                      (      exbasic.asm):00694         ;* RUN
2647                  (      exbasic.asm):00695         RUN
2647 BD2013           (      exbasic.asm):00696                 JSR     GETCCH                            ; * GET CURRENT INPUT CHARACTER
264A 1027FE88         (      exbasic.asm):00697                 LBEQ    LAD21                             ; * IF NO LINE NUMBER
264E BD24DB           (      exbasic.asm):00698                 JSR     LAD26                             ; ERASE ALL VARIABLES
2651 201B             (      exbasic.asm):00699                 BRA     LAE9F                             ; 'GOTO' THE RUN ADDRESS
                      (      exbasic.asm):00700         ;*
                      (      exbasic.asm):00701         ;* GO
2653                  (      exbasic.asm):00702         GO
2653 1F89             (      exbasic.asm):00703                 TFR     A,B                               ; SAVE INPUT CHARACTER IN ACCB
2655                  (      exbasic.asm):00704         LAE88
2655 BD200B           (      exbasic.asm):00705                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
2658 C1A3             (      exbasic.asm):00706                 CMPB    #TOK_TO                           ; 'TO' TOKEN
265A 2717             (      exbasic.asm):00707                 BEQ     LAEA4                             ; BRANCH IF GOTO
265C C1A4             (      exbasic.asm):00708                 CMPB    #TOK_SUB                          ; 'SUB' TOKEN
265E 2648             (      exbasic.asm):00709                 BNE     LAED7                             ; 'SYNTAX ERROR' IF NEITHER
2660 C603             (      exbasic.asm):00710                 LDB     #3                                ; =ROOM FOR 6
2662 BD2400           (      exbasic.asm):00711                 JSR     LAC33                             ; =BYTES ON STACK?
2665 FE2014           (      exbasic.asm):00712                 LDU     CHARAD                            ; * SAVE CURRENT BASIC INPUT POINTER, LINE
2668 9E68             (      exbasic.asm):00713                 LDX     CURLIN                            ; * NUMBER AND SUB TOKEN ON STACK
266A 86A4             (      exbasic.asm):00714                 LDA     #TOK_SUB                          ; *
266C 3452             (      exbasic.asm):00715                 PSHS    U,X,A                             ; *
266E                  (      exbasic.asm):00716         LAE9F
266E 8D03             (      exbasic.asm):00717                 BSR     LAEA4                             ; GO DO A 'GOTO'
2670 7E2555           (      exbasic.asm):00718                 JMP     LAD9E                             ; JUMP BACK TO BASIC'S MAIN LOOP
                      (      exbasic.asm):00719         ;* GOTO
2673                  (      exbasic.asm):00720         LAEA4
2673 BD2013           (      exbasic.asm):00721                 JSR     GETCCH                            ; GET CURRENT INPUT CHAR
2676 BD2742           (      exbasic.asm):00722                 JSR     LAF67                             ; GET LINE NUMBER TO BINARY IN BINVAL
2679 8D43             (      exbasic.asm):00723                 BSR     LAEEB                             ; ADVANCE BASIC'S POINTER TO END OF LINE
267B 3001             (      exbasic.asm):00724                 LEAX    $01,X                             ; POINT TO START OF NEXT LINE
267D DC2B             (      exbasic.asm):00725                 LDD     BINVAL                            ; GET THE LINE NUMBER TO RUN
267F 109368           (      exbasic.asm):00726                 CMPD    CURLIN                            ; COMPARE TO CURRENT LINE NUMBER
2682 2202             (      exbasic.asm):00727                 BHI     LAEB6                             ; IF REO'D LINE NUMBER IS > CURRENT LINE NUMBER,
                      (      exbasic.asm):00728         ;*              ; DON'T START LOOKING FROM
                      (      exbasic.asm):00729         ;*              ; START OF PROGRAM
2684 9E19             (      exbasic.asm):00730                 LDX     TXTTAB                            ; BEGINNING OF PROGRAM
2686                  (      exbasic.asm):00731         LAEB6
2686 BD24BA           (      exbasic.asm):00732                 JSR     LAD05                             ; GO FIND A LINE NUMBER
2689 2518             (      exbasic.asm):00733                 BCS     LAED2                             ; 'UNDEFINED LINE NUMBER'
268B                  (      exbasic.asm):00734         LAEBB
268B 301F             (      exbasic.asm):00735                 LEAX    -1,X                              ; MOVE BACK TO JUST BEFORE START OF LINE
268D BF2014           (      exbasic.asm):00736                 STX     CHARAD                            ; RESET BASIC'S INPUT POINTER
2690                  (      exbasic.asm):00737         LAEBF
2690 39               (      exbasic.asm):00738                 RTS
                      (      exbasic.asm):00739         ;*
                      (      exbasic.asm):00740         ;* RETURN
2691                  (      exbasic.asm):00741         RETURN
2691 26FD             (      exbasic.asm):00742                 BNE     LAEBF                             ; EXIT ROUTINE IF ARGUMENT GIVEN
2693 86FF             (      exbasic.asm):00743                 LDA     #$FF                              ; * PUT AN ILLEGAL VARIABLE NAME IN FIRST BYTE OF
2695 973B             (      exbasic.asm):00744                 STA     VARDES                            ; * VARDES WHICH WILL CAUSE 'FOR/NEXT' DATA ON THE
                      (      exbasic.asm):00745         ;*              ; STACK TO BE IGNORED
2697 BD23C6           (      exbasic.asm):00746                 JSR     LABF9                             ; CHECK FOR RETURN DATA ON THE STACK
269A 1F14             (      exbasic.asm):00747                 TFR     X,S                               ; RESET STACK POINTER - PURGE TWO RETURN ADDRESSES
                      (      exbasic.asm):00748         ;*              ; FROM THE STACK
269C 8124             (      exbasic.asm):00749                 CMPA    #TOK_SUB-$80                      ; SUB TOKEN - $80
269E 270B             (      exbasic.asm):00750                 BEQ     LAEDA                             ; BRANCH IF 'RETURN' FROM SUBROUTINE
26A0 C604             (      exbasic.asm):00751                 LDB     #2*2                              ; ERROR #2 'RETURN WITHOUT GOSUB'
26A2 8C               (      exbasic.asm):00752                 FCB     SKP2                              ; SKIP TWO BYTES
26A3                  (      exbasic.asm):00753         LAED2
26A3 C60E             (      exbasic.asm):00754                 LDB     #7*2                              ; ERROR #7 'UNDEFINED LINE NUMBER'
26A5 7E2413           (      exbasic.asm):00755                 JMP     LAC46                             ; JUMP TO ERROR HANDLER
26A8                  (      exbasic.asm):00756         LAED7
26A8 7E2A43           (      exbasic.asm):00757                 JMP     LB277                             ; 'SYNTAX ERROR'
26AB                  (      exbasic.asm):00758         LAEDA
26AB 3552             (      exbasic.asm):00759                 PULS    A,X,U                             ; * RESTORE VALUES OF CURRENT LINE NUMBER AND
26AD 9F68             (      exbasic.asm):00760                 STX     CURLIN                            ; * BASIC'S INPUT POINTER FOR THIS SUBROUTINE
26AF FF2014           (      exbasic.asm):00761                 STU     CHARAD                            ; * AND LOAD ACCA WITH SUB TOKEN ($A6)
                      (      exbasic.asm):00762         ;*
                      (      exbasic.asm):00763         ;* DATA
26B2                  (      exbasic.asm):00764         DATA
26B2 8D07             (      exbasic.asm):00765                 BSR     LAEE8                             ; MOVE INPUT POINTER TO END OF SUBLINE OR LINE
26B4 8C               (      exbasic.asm):00766                 FCB     SKP2                              ; SKIP 2 BYTES
                      (      exbasic.asm):00767         
                      (      exbasic.asm):00768         ;* REM, ELSE
26B5                  (      exbasic.asm):00769         ELSE
26B5                  (      exbasic.asm):00770         REM
26B5 8D07             (      exbasic.asm):00771                 BSR     LAEEB                             ; MOVE INPUT POINTER TO END OF LINE
26B7 BF2014           (      exbasic.asm):00772                 STX     CHARAD                            ; RESET BASIC'S INPUT POINTER
26BA                  (      exbasic.asm):00773         LAEE7
26BA 39               (      exbasic.asm):00774                 RTS
                      (      exbasic.asm):00775         ;* ADVANCE INPUT POINTER TO END OF SUBLINE OR LINE
26BB                  (      exbasic.asm):00776         LAEE8
26BB C63A             (      exbasic.asm):00777                 LDB     #':'                              ; COLON = SUBLINE TERMINATOR CHARACTER
26BD                  (      exbasic.asm):00778         LAEEA
26BD 86               (      exbasic.asm):00779                 FCB     SKP1LD                            ; SKPILD SKIP ONE BYTE; LDA #$5F
                      (      exbasic.asm):00780         ;* ADVANCE BASIC'S INPUT POINTER TO END OF
                      (      exbasic.asm):00781         ;* LINE - RETURN ADDRESS OF END OF LINE+1 IN X
26BE                  (      exbasic.asm):00782         LAEEB
26BE 5F               (      exbasic.asm):00783                 CLRB                                      ; 0 = LINE TERMINATOR CHARACTER
26BF D701             (      exbasic.asm):00784                 STB     CHARAC                            ; TEMP STORE PRIMARY TERMINATOR CHARACTER
26C1 5F               (      exbasic.asm):00785                 CLRB                                      ; 0 (END OF LINE) = ALTERNATE TERM. CHAR.
26C2 BE2014           (      exbasic.asm):00786                 LDX     CHARAD                            ; LOAD X W/BASIC'S INPUT POINTER
26C5                  (      exbasic.asm):00787         LAEF1
26C5 1F98             (      exbasic.asm):00788                 TFR     B,A                               ; * CHANGE TERMINATOR CHARACTER
26C7 D601             (      exbasic.asm):00789                 LDB     CHARAC                            ; * FROM ACCB TO CHARAC - SAVE OLD TERMINATOR
                      (      exbasic.asm):00790         ;*         IN   CHARAC
26C9 9701             (      exbasic.asm):00791                 STA     CHARAC                            ; SWAP PRIMARY AND SECONDARY TERMINATORS
26CB                  (      exbasic.asm):00792         LAEF7
26CB A684             (      exbasic.asm):00793                 LDA     ,X                                ; GET NEXT INPUT CHARACTER
26CD 27EB             (      exbasic.asm):00794                 BEQ     LAEE7                             ; RETURN IF 0 (END OF LINE)
26CF 3404             (      exbasic.asm):00795                 PSHS    B                                 ; SAVE TERMINATOR ON STACK
26D1 A1E0             (      exbasic.asm):00796                 CMPA    ,S+                               ; COMPARE TO INPUT CHARACTER
26D3 27E5             (      exbasic.asm):00797                 BEQ     LAEE7                             ; RETURN IF EQUAL
26D5 3001             (      exbasic.asm):00798                 LEAX    1,X                               ; MOVE POINTER UP ONE
26D7 8122             (      exbasic.asm):00799                 CMPA    #$22                              ; CHECK FOR DOUBLE QUOTES
26D9 27EA             (      exbasic.asm):00800                 BEQ     LAEF1                             ; BRANCH IF " - TOGGLE TERMINATOR CHARACTERS
26DB 4C               (      exbasic.asm):00801                 INCA                                      ; * CHECK FOR $FF AND BRANCH IF
26DC 2602             (      exbasic.asm):00802                 BNE     LAF0C                             ; * NOT SECONDARY TOKEN
26DE 3001             (      exbasic.asm):00803                 LEAX    1,X                               ; MOVE INPUT POINTER 1 MORE IF SECONDARY
26E0                  (      exbasic.asm):00804         LAF0C
26E0 8186             (      exbasic.asm):00805                 CMPA    #TOK_IF+1                         ; TOKEN FOR IF?
26E2 26E7             (      exbasic.asm):00806                 BNE     LAEF7                             ; NO - GET ANOTHER INPUT CHARACTER
26E4 0C04             (      exbasic.asm):00807                 INC     IFCTR                             ; INCREMENT IF COUNTER - KEEP TRACK OF HOW MANY
                      (      exbasic.asm):00808         ;*                             ; 'IF' STATEMENTS ARE NESTED IN ONE LINE
26E6 20E3             (      exbasic.asm):00809                 BRA     LAEF7                             ; GET ANOTHER INPUT CHARACTER
                      (      exbasic.asm):00810         
                      (      exbasic.asm):00811         ;* IF
26E8                  (      exbasic.asm):00812         IF
26E8 BD2906           (      exbasic.asm):00813                 JSR     LB141                             ; EVALUATE NUMERIC EXPRESSION
26EB BD2013           (      exbasic.asm):00814                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
26EE 8181             (      exbasic.asm):00815                 CMPA    #TOK_GO                           ; TOKEN FOR GO
26F0 2705             (      exbasic.asm):00816                 BEQ     LAF22                             ; TREAT 'GO' THE SAME AS 'THEN'
26F2 C6A5             (      exbasic.asm):00817                 LDB     #TOK_THEN                         ; TOKEN FOR THEN
26F4 BD2A3A           (      exbasic.asm):00818                 JSR     LB26F                             ; DO A SYNTAX CHECK ON ACCB
26F7                  (      exbasic.asm):00819         LAF22
26F7 964F             (      exbasic.asm):00820                 LDA     FP0EXP                            ; CHECK FOR TRUE/FALSE - FALSE IF FPA0 EXPONENT = ZERO
26F9 2615             (      exbasic.asm):00821                 BNE     LAF39                             ; BRANCH IF CONDITION TRUE
26FB 0F04             (      exbasic.asm):00822                 CLR     IFCTR                             ; CLEAR FLAG - KEEP TRACK OF WHICH NESTED ELSE STATEMENT
                      (      exbasic.asm):00823         ;*                             ; TO SEARCH FOR IN NESTED 'IF' LOOPS
26FD                  (      exbasic.asm):00824         LAF28
26FD 8DB3             (      exbasic.asm):00825                 BSR     DATA                              ; MOVE BASIC'S POINTER TO END OF SUBLINE
26FF 4D               (      exbasic.asm):00826                 TSTA                                      ; * CHECK TO SEE IF END OF LINE OR SUBLINE
2700 27B8             (      exbasic.asm):00827                 BEQ     LAEE7                             ; * AND RETURN IF END OF LINE
2702 BD200B           (      exbasic.asm):00828                 JSR     GETNCH                            ; GET AN INPUT CHARACTER FROM BASIC
2705 8184             (      exbasic.asm):00829                 CMPA    #TOK_ELSE                         ; TOKEN FOR ELSE
2707 26F4             (      exbasic.asm):00830                 BNE     LAF28                             ; IGNORE ALL DATA EXCEPT 'ELSE' UNTIL
                      (      exbasic.asm):00831         ;*                             ; END OF LINE (ZERO BYTE)
2709 0A04             (      exbasic.asm):00832                 DEC     IFCTR                             ; CHECK TO SEE IF YOU MUST SEARCH ANOTHER SUBLINE
270B 2AF0             (      exbasic.asm):00833                 BPL     LAF28                             ; BRANCH TO SEARCH ANOTHER SUBLINE FOR 'ELSE'
270D BD200B           (      exbasic.asm):00834                 JSR     GETNCH                            ; GET AN INPUT CHARACTER FROM BASIC
2710                  (      exbasic.asm):00835         LAF39
2710 BD2013           (      exbasic.asm):00836                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
2713 1025FF5C         (      exbasic.asm):00837                 LBCS    LAEA4                             ; BRANCH TO 'GOTO' IF NUMERIC CHARACTER
2717 7E2590           (      exbasic.asm):00838                 JMP     LADC6                             ; RETURN TO MAIN INTERPRETATION LOOP
                      (      exbasic.asm):00839         
                      (      exbasic.asm):00840         ;* ON
271A                  (      exbasic.asm):00841         ON
271A BD2EDE           (      exbasic.asm):00842                 JSR     LB70B                             ; EVALUATE EXPRESSION
271D C681             (      exbasic.asm):00843                 LDB     #TOK_GO                           ; TOKEN FOR GO
271F BD2A3A           (      exbasic.asm):00844                 JSR     LB26F                             ; SYNTAX CHECK FOR GO
2722 3402             (      exbasic.asm):00845                 PSHS    A                                 ; SAVE NEW TOKEN (TO,SUB)
2724 81A4             (      exbasic.asm):00846                 CMPA    #TOK_SUB                          ; TOKEN FOR SUB?
2726 2706             (      exbasic.asm):00847                 BEQ     LAF54                             ; YES
2728 81A3             (      exbasic.asm):00848                 CMPA    #TOK_TO                           ; TOKEN FOR TO?
272A                  (      exbasic.asm):00849         LAF52
272A 1026FF7A         (      exbasic.asm):00850                 LBNE    LAED7                             ; 'SYNTAX' ERROR IF NOT 'SUB' OR 'TO'
272E                  (      exbasic.asm):00851         LAF54
272E 0A53             (      exbasic.asm):00852                 DEC     FPA0+3                            ; DECREMENT IS BYTE OF MANTISSA OF FPA0 - THIS
                      (      exbasic.asm):00853         ;*                             ; IS THE ARGUMENT OF THE 'ON' STATEMENT
2730 2605             (      exbasic.asm):00854                 BNE     LAF5D                             ; BRANCH IF NOT AT THE PROPER GOTO OR GOSUB LINE NUMBER
2732 3504             (      exbasic.asm):00855                 PULS    B                                 ; GET BACK THE TOKEN FOLLOWING 'GO'
2734 7E2655           (      exbasic.asm):00856                 JMP     LAE88                             ; GO DO A 'GOTO' OR 'GOSUB'
2737                  (      exbasic.asm):00857         LAF5D
2737 BD200B           (      exbasic.asm):00858                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
273A 8D06             (      exbasic.asm):00859                 BSR     LAF67                             ; CONVERT BASIC LINE NUMBER TO BINARY
273C 812C             (      exbasic.asm):00860                 CMPA    #','                              ; IS CHARACTER FOLLOWING LINE NUMBER A COMMA?
273E 27EE             (      exbasic.asm):00861                 BEQ     LAF54                             ; YES
2740 3584             (      exbasic.asm):00862                 PULS    B,PC                              ; IF NOT, FALL THROUGH TO NEXT COMMAND
2742                  (      exbasic.asm):00863         LAF67
2742 9E74             (      exbasic.asm):00864                 LDX     ZERO                              ; DEFAULT LINE NUMBER OF ZERO
2744 9F2B             (      exbasic.asm):00865                 STX     BINVAL                            ; SAVE IT IN BINVAL
                      (      exbasic.asm):00866         ;*
                      (      exbasic.asm):00867         ;* CONVERT LINE NUMBER TO BINARY - RETURN VALUE IN BINVAL
                      (      exbasic.asm):00868         ;*
2746                  (      exbasic.asm):00869         LAF6B
2746 2462             (      exbasic.asm):00870                 BCC     LAFCE                             ; RETURN IF NOT NUMERIC CHARACTER
2748 8030             (      exbasic.asm):00871                 SUBA    #'0'                              ; MASK OFF ASCII
274A 9701             (      exbasic.asm):00872                 STA     CHARAC                            ; SAVE DIGIT IN VO1
274C DC2B             (      exbasic.asm):00873                 LDD     BINVAL                            ; GET ACCUMULATED LINE NUMBER VALUE
274E 8118             (      exbasic.asm):00874                 CMPA    #24                               ; LARGEST LINE NUMBER IS $F9FF (63999) -
                      (      exbasic.asm):00875         ;*         (24*256+255)*10+9
2750 22D8             (      exbasic.asm):00876                 BHI     LAF52                             ; 'SYNTAX' ERROR IF TOO BIG
                      (      exbasic.asm):00877         ;* MULT ACCD X 10
2752 58               (      exbasic.asm):00878                 ASLB                                      ; *
2753 49               (      exbasic.asm):00879                 ROLA                                      ; * TIMES 2
2754 58               (      exbasic.asm):00880                 ASLB                                      ; =
2755 49               (      exbasic.asm):00881                 ROLA                                      ; = TIMES 4
2756 D32B             (      exbasic.asm):00882                 ADDD    BINVAL                            ; ADD 1 = TIMES 5
2758 58               (      exbasic.asm):00883                 ASLB                                      ; *
2759 49               (      exbasic.asm):00884                 ROLA                                      ; * TIMES 10
275A DB01             (      exbasic.asm):00885                 ADDB    CHARAC                            ; ADD NEXT DIGIT
275C 8900             (      exbasic.asm):00886                 ADCA    #0                                ; PROPAGATE CARRY
275E DD2B             (      exbasic.asm):00887                 STD     BINVAL                            ; SAVE NEW ACCUMULATED LINE NUMBER
2760 BD200B           (      exbasic.asm):00888                 JSR     GETNCH                            ; GET NEXT CHARACTER FROM BASIC
2763 20E1             (      exbasic.asm):00889                 BRA     LAF6B                             ; LOOP- PROCESS NEXT DIGIT
                      (      exbasic.asm):00890         ;*
                      (      exbasic.asm):00891         ;* LET (EXBAS)
                      (      exbasic.asm):00892         ;* EVALUATE A NON-TOKEN EXPRESSION
                      (      exbasic.asm):00893         ;* TARGET = REPLACEMENT
2765                  (      exbasic.asm):00894         LET
2765 BD2B21           (      exbasic.asm):00895                 JSR     LB357                             ; FIND TARGET VARIABLE DESCRIPTOR
2768 9F3B             (      exbasic.asm):00896                 STX     VARDES                            ; SAVE DESCRIPTOR ADDRESS OF 1ST EXPRESSION
276A C6B1             (      exbasic.asm):00897                 LDB     #TOK_EQUALS                       ; TOKEN FOR "="
276C BD2A3A           (      exbasic.asm):00898                 JSR     LB26F                             ; DO A SYNTAX CHECK FOR '='
276F 9606             (      exbasic.asm):00899                 LDA     VALTYP                            ; * GET VARIABLE TYPE AND
2771 3402             (      exbasic.asm):00900                 PSHS    A                                 ; * SAVE ON THE STACK
2773 BD291B           (      exbasic.asm):00901                 JSR     LB156                             ; EVALUATE EXPRESSION
2776 3502             (      exbasic.asm):00902                 PULS    A                                 ; * REGET VARIABLE TYPE OF 1ST EXPRESSION AND
2778 46               (      exbasic.asm):00903                 RORA                                      ; * SET CARRY IF STRING
2779 BD290D           (      exbasic.asm):00904                 JSR     LB148                             ; TYPE CHECK-TM ERROR IF VARIABLE TYPES ON
                      (      exbasic.asm):00905         ;*                             ; BOTH SIDES OF EQUALS SIGN NOT THE SAME
277C 10270C57         (      exbasic.asm):00906                 LBEQ    LBC33                             ; GO PUT FPA0 INTO VARIABLE DESCRIPTOR IF NUMERIC
                      (      exbasic.asm):00907         ;* MOVE A STRING WHOSE DESCRIPTOR IS LOCATED AT
                      (      exbasic.asm):00908         ;* FPA0+2 INTO THE STRING SPACE. TRANSFER THE
                      (      exbasic.asm):00909         ;* DESCRIPTOR ADDRESS TO THE ADDRESS IN VARDES
                      (      exbasic.asm):00910         ;* DON'T MOVE THE STRING IF IT IS ALREADY IN THE
                      (      exbasic.asm):00911         ;* STRING SPACE. REMOVE DESCRIPTOR FROM STRING
                      (      exbasic.asm):00912         ;* STACK IF IT IS LAST ONE ON THE STACK
2780                  (      exbasic.asm):00913         LAFA4
2780 9E52             (      exbasic.asm):00914                 LDX     FPA0+2                            ; POINT X TO DESCRIPTOR OF REPLACEMENT STRING
2782 DC21             (      exbasic.asm):00915                 LDD     FRETOP                            ; LOAD ACCD WITH START OF STRING SPACE
2784 10A302           (      exbasic.asm):00916                 CMPD    2,X                               ; IS THE STRING IN STRING SPACE?
2787 2411             (      exbasic.asm):00917                 BCC     LAFBE                             ; BRANCH IF IT'S NOT IN THE STRING SPACE
2789 9C1B             (      exbasic.asm):00918                 CMPX    VARTAB                            ; COMPARE DESCRIPTOR ADDRESS TO START OF VARIABLES
278B 250D             (      exbasic.asm):00919                 BCS     LAFBE                             ; BRANCH IF DESCRIPTOR ADDRESS NOT IN VARIABLES
278D                  (      exbasic.asm):00920         LAFB1
278D E684             (      exbasic.asm):00921                 LDB     ,X                                ; GET LENGTH OF REPLACEMENT STRING
278F BD2CDE           (      exbasic.asm):00922                 JSR     LB50D                             ; RESERVE ACCB BYTES OF STRING SPACE
2792 9E4D             (      exbasic.asm):00923                 LDX     V4D                               ; GET DESCRIPTOR ADDRESS BACK
2794 BD2E14           (      exbasic.asm):00924                 JSR     LB643                             ; MOVE STRING INTO STRING SPACE
2797 8E0056           (      exbasic.asm):00925                 LDX     #STRDES                           ; POINT X TO TEMP STRING DESCRIPTOR ADDRESS
279A                  (      exbasic.asm):00926         LAFBE
279A 9F4D             (      exbasic.asm):00927                 STX     V4D                               ; SAVE STRING DESCRIPTOR ADDRESS IN V4D
279C BD2E46           (      exbasic.asm):00928                 JSR     LB675                             ; REMOVE STRING DESCRIPTOR IF LAST ONE
                      (      exbasic.asm):00929         ;*              ; ON STRING STACK
279F DE4D             (      exbasic.asm):00930                 LDU     V4D                               ; POINT U TO REPLACEMENT DESCRIPTOR ADDRESS
27A1 9E3B             (      exbasic.asm):00931                 LDX     VARDES                            ; GET TARGET DESCRIPTOR ADDRESS
27A3 3726             (      exbasic.asm):00932                 PULU    A,B,Y                             ; GET LENGTH AND START OF REPLACEMENT STRING
27A5 A784             (      exbasic.asm):00933                 STA     ,X                                ; * SAVE STRING LENGTH AND START IN
27A7 10AF02           (      exbasic.asm):00934                 STY     2,X                               ; * TARGET DESCRIPTOR LOCATION
27AA                  (      exbasic.asm):00935         LAFCE
27AA 39               (      exbasic.asm):00936                 RTS
                      (      exbasic.asm):00937         
27AB                  (      exbasic.asm):00938         LAFCF
27AB 3F5245444F       (      exbasic.asm):00939                 FCC     "?REDO"                           ; ?REDO MESSAGE
27B0 0D00             (      exbasic.asm):00940                 FCB     CR,$00
                      (      exbasic.asm):00941         
27B2                  (      exbasic.asm):00942         LAFD6
27B2                  (      exbasic.asm):00943         LAFDC
27B2 7E2413           (      exbasic.asm):00944                 JMP     LAC46                             ; JMP TO ERROR HANDLER
27B5                  (      exbasic.asm):00945         LAFDF
27B5 9609             (      exbasic.asm):00946                 LDA     INPFLG                            ; = GET THE INPUT FLAG AND BRANCH
27B7 2707             (      exbasic.asm):00947                 BEQ     LAFEA                             ; = IF 'INPUT'
27B9 9E31             (      exbasic.asm):00948                 LDX     DATTXT                            ; * GET LINE NUMBER WHERE THE ERROR OCCURRED
27BB 9F68             (      exbasic.asm):00949                 STX     CURLIN                            ; * AND USE IT AS THE CURRENT LINE NUMBER
27BD 7E2A43           (      exbasic.asm):00950                 JMP     LB277                             ; 'SYNTAX ERROR'
27C0                  (      exbasic.asm):00951         LAFEA
27C0 8E27AA           (      exbasic.asm):00952                 LDX     #LAFCF-1                          ; * POINT X TO '?REDO' AND PRINT
27C3 BD3140           (      exbasic.asm):00953                 JSR     LB99C                             ; * IT ON THE SCREEN
27C6 9E2F             (      exbasic.asm):00954                 LDX     TINPTR                            ; = GET THE SAVED ABSOLUTE ADDRESS OF
27C8 BF2014           (      exbasic.asm):00955                 STX     CHARAD                            ; = INPUT POINTER AND RESTORE IT
27CB 39               (      exbasic.asm):00956                 RTS
                      (      exbasic.asm):00957         ;*
                      (      exbasic.asm):00958         ;* INPUT
27CC                  (      exbasic.asm):00959         INPUT
27CC C616             (      exbasic.asm):00960                 LDB     #11*2                             ; 'ID' ERROR
27CE 9E68             (      exbasic.asm):00961                 LDX     CURLIN                            ; GET CURRENT LINE NUMBER
27D0 3001             (      exbasic.asm):00962                 LEAX    1,X                               ; ADD ONE
27D2 27DE             (      exbasic.asm):00963                 BEQ     LAFDC                             ; 'ID' ERROR BRANCH IF DIRECT MODE
27D4 8D01             (      exbasic.asm):00964                 BSR     LB00F                             ; GET SOME INPUT DATA - WAS LB002
27D6 39               (      exbasic.asm):00965                 RTS
27D7                  (      exbasic.asm):00966         LB00F
27D7 8122             (      exbasic.asm):00967                 CMPA    #$22                              ; CHECK FOR PROMPT STRING DELIMITER
27D9 260B             (      exbasic.asm):00968                 BNE     LB01E                             ; BRANCH IF NO PROMPT STRING
27DB BD2A0D           (      exbasic.asm):00969                 JSR     LB244                             ; PUT PROMPT STRING ON STRING STACK
27DE C63B             (      exbasic.asm):00970                 LDB     #';'                              ; *
27E0 BD2A3A           (      exbasic.asm):00971                 JSR     LB26F                             ; * DO A SYNTAX CHECK FOR SEMICOLON
27E3 BD3143           (      exbasic.asm):00972                 JSR     LB99F                             ; PRINT MESSAGE TO CONSOLE OUT
27E6                  (      exbasic.asm):00973         LB01E
27E6 8EDAD7           (      exbasic.asm):00974                 LDX     #LINBUF                           ; POINT TO BASIC'S LINE BUFFER
27E9 6F84             (      exbasic.asm):00975                 CLR     ,X                                ; CLEAR 1ST BYTE - FLAG TO INDICATE NO DATA
                      (      exbasic.asm):00976         ;*              ; IN LINE BUFFER
27EB 8D06             (      exbasic.asm):00977                 BSR     LB02F                             ; INPUT A STRING TO LINE BUFFER
27ED C62C             (      exbasic.asm):00978                 LDB     #','                              ; * INSERT A COMMA AT THE END
27EF E784             (      exbasic.asm):00979                 STB     ,X                                ; * OF THE LINE INPUT BUFFER
27F1 2016             (      exbasic.asm):00980                 BRA     LB049
                      (      exbasic.asm):00981         ;* FILL BASIC'S LINE INPUT BUFFER CONSOLE IN
27F3                  (      exbasic.asm):00982         LB02F
27F3 BD3153           (      exbasic.asm):00983                 JSR     LB9AF                             ; SEND A "?" TO CONSOLE OUT
27F6 BD3150           (      exbasic.asm):00984                 JSR     LB9AC                             ; SEND A 'SPACE' TO CONSOLE OUT
27F9                  (      exbasic.asm):00985         LB035
27F9 BD213A           (      exbasic.asm):00986                 JSR     LA390                             ; GO READ IN A BASIC LINE
27FC 2405             (      exbasic.asm):00987                 BCC     LB03F                             ; BRANCH IF ENTER KEY ENDED ENTRY
27FE 3264             (      exbasic.asm):00988                 LEAS    4,S                               ; PURGE TWO RETURN ADDRESSES OFF THE STACK
2800 7E25E3           (      exbasic.asm):00989                 JMP     LAE11                             ; GO DO A 'STOP' IF BREAK KEY ENDED LINE ENTRY
2803                  (      exbasic.asm):00990         LB03F
2803 C62E             (      exbasic.asm):00991                 LDB     #2*23                             ; 'INPUT PAST END OF FILE' ERROR
2805 39               (      exbasic.asm):00992                 RTS
                      (      exbasic.asm):00993         ;*
                      (      exbasic.asm):00994         ;* READ
2806                  (      exbasic.asm):00995         READ
2806 9E33             (      exbasic.asm):00996                 LDX     DATPTR                            ; GET 'READ' START ADDRESS
2808 86               (      exbasic.asm):00997                 FCB     SKP1LD                            ; SKIP ONE BYTE - LDA #*$4F
2809                  (      exbasic.asm):00998         LB049
2809 4F               (      exbasic.asm):00999                 CLRA                                      ; 'INPUT' ENTRY POINT: INPUT FLAG = 0
280A 9709             (      exbasic.asm):01000                 STA     INPFLG                            ; SET INPUT FLAG; 0 = INPUT: <> 0 = READ
280C 9F35             (      exbasic.asm):01001                 STX     DATTMP                            ; SAVE 'READ' START ADDRESS/'INPUT' BUFFER START
280E                  (      exbasic.asm):01002         LB04E
280E BD2B21           (      exbasic.asm):01003                 JSR     LB357                             ; EVALUATE A VARIABLE
2811 9F3B             (      exbasic.asm):01004                 STX     VARDES                            ; SAVE DESCRIPTOR ADDRESS
2813 BE2014           (      exbasic.asm):01005                 LDX     CHARAD                            ; * GET BASIC'S INPUT POINTER
2816 9F2B             (      exbasic.asm):01006                 STX     BINVAL                            ; * AND SAVE IT
2818 9E35             (      exbasic.asm):01007                 LDX     DATTMP                            ; GET 'READ' ADDRESS START/'INPUT' BUFFER POINTER
281A A684             (      exbasic.asm):01008                 LDA     ,X                                ; GET A CHARACTER FROM THE BASIC PROGRAM
281C 2609             (      exbasic.asm):01009                 BNE     LB069                             ; BRANCH IF NOT END OF LINE
281E 9609             (      exbasic.asm):01010                 LDA     INPFLG                            ; * CHECK INPUT FLAG AND BRANCH
2820 2658             (      exbasic.asm):01011                 BNE     LB0B9                             ; * IF LOOKING FOR DATA (READ)
                      (      exbasic.asm):01012         ;* NO DATA IN 'INPUT' LINE BUFFER AND/OR INPUT
                      (      exbasic.asm):01013         ;* NOT COMING FROM SCREEN
2822 BD3153           (      exbasic.asm):01014                 JSR     LB9AF                             ; SEND A '?' TO CONSOLE OUT
2825 8DCC             (      exbasic.asm):01015                 BSR     LB02F                             ; FILL INPUT BUFFER FROM CONSOLE IN
2827                  (      exbasic.asm):01016         LB069
2827 BF2014           (      exbasic.asm):01017                 STX     CHARAD                            ; RESET BASIC'S INPUT POINTER
282A BD200B           (      exbasic.asm):01018                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
282D D606             (      exbasic.asm):01019                 LDB     VALTYP                            ; * CHECK VARIABLE TYPE AND
282F 2724             (      exbasic.asm):01020                 BEQ     LB098                             ; * BRANCH IF NUMERIC
                      (      exbasic.asm):01021         ;* READ/INPUT A STRING VARIABLE
2831 BE2014           (      exbasic.asm):01022                 LDX     CHARAD                            ; LOAD X WITH CURRENT BASIC INPUT POINTER
2834 9701             (      exbasic.asm):01023                 STA     CHARAC                            ; SAVE CURRENT INPUT CHARACTER
2836 8122             (      exbasic.asm):01024                 CMPA    #$22                              ; CHECK FOR STRING DELIMITER
2838 270E             (      exbasic.asm):01025                 BEQ     LB08B                             ; BRANCH IF STRING DELIMITER
283A 301F             (      exbasic.asm):01026                 LEAX    -1,X                              ; BACK UP POINTER
283C 4F               (      exbasic.asm):01027                 CLRA                                      ; * ZERO = END OF LINE CHARACTER
283D 9701             (      exbasic.asm):01028                 STA     CHARAC                            ; * SAVE AS TERMINATOR
283F BD212C           (      exbasic.asm):01029                 JSR     LA35F                             ; SET UP PRINT PARAMETERS
2842 863A             (      exbasic.asm):01030                 LDA     #':'                              ; END OF SUBLINE CHARACTER
2844 9701             (      exbasic.asm):01031                 STA     CHARAC                            ; SAVE AS TERMINATOR I
2846 862C             (      exbasic.asm):01032                 LDA     #','                              ; COMMA
2848                  (      exbasic.asm):01033         LB08B
2848 9702             (      exbasic.asm):01034                 STA     ENDCHR                            ; SAVE AS TERMINATOR 2
284A BD2CEF           (      exbasic.asm):01035                 JSR     LB51E                             ; STRIP A STRING FROM THE INPUT BUFFER
284D BD2A13           (      exbasic.asm):01036                 JSR     LB249                             ; MOVE INPUT POINTER TO END OF STRING
2850 BD2780           (      exbasic.asm):01037                 JSR     LAFA4                             ; PUT A STRING INTO THE STRING SPACE IF NECESSARY
2853 2006             (      exbasic.asm):01038                 BRA     LB09E                             ; CHECK FOR ANOTHER DATA ITEM
                      (      exbasic.asm):01039         ;* SAVE A NUMERIC VALUE IN A READ OR INPUT DATA ITEM
2855                  (      exbasic.asm):01040         LB098
2855 BD34B6           (      exbasic.asm):01041                 JSR     LBD12                             ; CONVERT AN ASCII STRING TO FP NUMBER
2858 BD33D7           (      exbasic.asm):01042                 JSR     LBC33                             ; PACK FPA0 AND STORE IT IN ADDRESS IN VARDES -
                      (      exbasic.asm):01043         ;*                             ; INPUT OR READ DATA ITEM
285B                  (      exbasic.asm):01044         LB09E
285B BD2013           (      exbasic.asm):01045                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
285E 2706             (      exbasic.asm):01046                 BEQ     LB0A8                             ; BRANCH IF END OF LINE
2860 812C             (      exbasic.asm):01047                 CMPA    #','                              ; CHECK FOR A COMMA
2862 1026FF4C         (      exbasic.asm):01048                 LBNE    LAFD6                             ; BAD FILE DATA' ERROR OR RETRY
2866                  (      exbasic.asm):01049         LB0A8
2866 BE2014           (      exbasic.asm):01050                 LDX     CHARAD                            ; * GET CURRENT INPUT
2869 9F35             (      exbasic.asm):01051                 STX     DATTMP                            ; * POINTER (USED AS A DATA POINTER) AND SAVE IT
286B 9E2B             (      exbasic.asm):01052                 LDX     BINVAL                            ; * RESET INPUT POINTER TO INPUT OR
286D BF2014           (      exbasic.asm):01053                 STX     CHARAD                            ; * READ STATEMENT
2870 BD2013           (      exbasic.asm):01054                 JSR     GETCCH                            ; GET CURRENT CHARACTER FROM BASIC
2873 2722             (      exbasic.asm):01055                 BEQ     LB0D5                             ; BRANCH IF END OF LINE - EXIT COMMAND
2875 BD2A38           (      exbasic.asm):01056                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
2878 2094             (      exbasic.asm):01057                 BRA     LB04E                             ; GET ANOTHER INPUT OR READ ITEM
                      (      exbasic.asm):01058         ;* SEARCH FROM ADDRESS IN X FOR
                      (      exbasic.asm):01059         ;* 1ST OCCURENCE OF THE TOKEN FOR DATA
287A                  (      exbasic.asm):01060         LB0B9
287A BF2014           (      exbasic.asm):01061                 STX     CHARAD                            ; RESET BASIC'S INPUT POINTER
287D BD26BB           (      exbasic.asm):01062                 JSR     LAEE8                             ; SEARCH FOR END OF CURRENT LINE OR SUBLINE
2880 3001             (      exbasic.asm):01063                 LEAX    1,X                               ; MOVE X ONE PAST END OF LINE
2882 4D               (      exbasic.asm):01064                 TSTA                                      ; CHECK FOR END OF LINE
2883 260A             (      exbasic.asm):01065                 BNE     LB0CD                             ; BRANCH IF END OF SUBLINE
2885 C606             (      exbasic.asm):01066                 LDB     #2*3                              ; 'OUT OF DATA' ERROR
2887 EE81             (      exbasic.asm):01067                 LDU     ,X++                              ; GET NEXT 2 CHARACTERS
2889 2741             (      exbasic.asm):01068                 BEQ     LB10A                             ; 'OD' ERROR IF END OF PROGRAM
288B EC81             (      exbasic.asm):01069                 LDD     ,X++                              ; GET BASIC LINE NUMBER AND
288D DD31             (      exbasic.asm):01070                 STD     DATTXT                            ; SAVE IT IN DATTXT
288F                  (      exbasic.asm):01071         LB0CD
288F A684             (      exbasic.asm):01072                 LDA     ,X                                ; GET AN INPUT CHARACTER
2891 8186             (      exbasic.asm):01073                 CMPA    #TOK_DATA                         ; DATA TOKEN?
2893 26E5             (      exbasic.asm):01074                 BNE     LB0B9                             ; NO - KEEP LOOKING
2895 2090             (      exbasic.asm):01075                 BRA     LB069                             ; YES
                      (      exbasic.asm):01076         ;* EXIT READ AND INPUT COMMANDS
2897                  (      exbasic.asm):01077         LB0D5
2897 9E35             (      exbasic.asm):01078                 LDX     DATTMP                            ; GET DATA POINTER
2899 D609             (      exbasic.asm):01079                 LDB     INPFLG                            ; * CHECK INPUT FLAG
289B 1026FD1C         (      exbasic.asm):01080                 LBNE    LADE8                             ; * SAVE NEW DATA POINTER IF READ
289F A684             (      exbasic.asm):01081                 LDA     ,X                                ; = CHECK NEXT CHARACTER IN 'INPUT' BUFFER
28A1 2706             (      exbasic.asm):01082                 BEQ     LB0E7                             ; =
28A3 8E28A9           (      exbasic.asm):01083                 LDX     #LB0E8-1                          ; POINT X TO '?EXTRA IGNORED'
28A6 7E3140           (      exbasic.asm):01084                 JMP     LB99C                             ; PRINT THE MESSAGE
28A9                  (      exbasic.asm):01085         LB0E7
28A9 39               (      exbasic.asm):01086                 RTS
                      (      exbasic.asm):01087         
28AA                  (      exbasic.asm):01088         LB0E8
28AA 3F45585452412049 (      exbasic.asm):01089                 FCC     "?EXTRA IGNORED"                  ; ?EXTRA IGNORED MESSAGE
     474E4F524544
                      (      exbasic.asm):01090         
                      (      exbasic.asm):01091         
28B8 0D00             (      exbasic.asm):01092                 FCB     CR,$00
                      (      exbasic.asm):01093         
                      (      exbasic.asm):01094         ;* NEXT
28BA                  (      exbasic.asm):01095         NEXT
28BA 2604             (      exbasic.asm):01096                 BNE     LB0FE                             ; BRANCH IF ARGUMENT GIVEN
28BC 9E74             (      exbasic.asm):01097                 LDX     ZERO                              ; X = 0: DEFAULT FOR NO ARGUMENT
28BE 2003             (      exbasic.asm):01098                 BRA     LB101
28C0                  (      exbasic.asm):01099         LB0FE
28C0 BD2B21           (      exbasic.asm):01100                 JSR     LB357                             ; EVALUATE AN ALPHA EXPRESSION
28C3                  (      exbasic.asm):01101         LB101
28C3 9F3B             (      exbasic.asm):01102                 STX     VARDES                            ; SAVE VARIABLE DESCRIPTOR POINTER
28C5 BD23C6           (      exbasic.asm):01103                 JSR     LABF9                             ; GO SCAN FOR 'FOR/NEXT' DATA ON STACK
28C8 2704             (      exbasic.asm):01104                 BEQ     LB10C                             ; BRANCH IF DATA FOUND
28CA C600             (      exbasic.asm):01105                 LDB     #0                                ; 'NEXT WITHOUT FOR' ERROR (SHOULD BE CLRB)
28CC                  (      exbasic.asm):01106         LB10A
28CC 204A             (      exbasic.asm):01107                 BRA     LB153                             ; PROCESS ERROR
28CE                  (      exbasic.asm):01108         LB10C
28CE 1F14             (      exbasic.asm):01109                 TFR     X,S                               ; POINT S TO START OF 'FOR/NEXT' DATA
28D0 3003             (      exbasic.asm):01110                 LEAX    3,X                               ; POINT X TO FP VALUE OF STEP
28D2 BD33B8           (      exbasic.asm):01111                 JSR     LBC14                             ; COPY A FP NUMBER FROM (X) TO FPA0
28D5 A668             (      exbasic.asm):01112                 LDA     8,S                               ; GET THE DIRECTION OF STEP
28D7 9754             (      exbasic.asm):01113                 STA     FP0SGN                            ; SAVE IT AS THE SIGN OF FPA0
28D9 9E3B             (      exbasic.asm):01114                 LDX     VARDES                            ; POINT (X) TO INDEX VARIABLE DESCRIPTOR
28DB BD3166           (      exbasic.asm):01115                 JSR     LB9C2                             ; ADD (X) TO FPA0 (STEP TO INDEX)
28DE BD33D7           (      exbasic.asm):01116                 JSR     LBC33                             ; PACK FPA0 AND STORE IT IN ADDRESS
                      (      exbasic.asm):01117         ;*                             ; CONTAINED IN VARDES
28E1 3069             (      exbasic.asm):01118                 LEAX    9,S                               ; POINT (X) TO TERMINAL VALUE OF INDEX
28E3 BD343A           (      exbasic.asm):01119                 JSR     LBC96                             ; COMPARE CURRENT INDEX VALUE TO TERMINAL VALUE OF INDEX
28E6 E068             (      exbasic.asm):01120                 SUBB    8,S                               ; ACCB = 0 IF TERMINAL VALUE=CURRENT VALUE AND STEP=0 OR IF
                      (      exbasic.asm):01121         ;*                             ; STEP IS POSITIVE AND CURRENT VALUE>TERMINAL VALUE OR
                      (      exbasic.asm):01122         ;*                             ; STEP IS NEGATIVE AND CURRENT VALUE<TERMINAL VALUE
28E8 270D             (      exbasic.asm):01123                 BEQ     LB134                             ; BRANCH IF 'FOR/NEXT' LOOP DONE
28EA AE6E             (      exbasic.asm):01124                 LDX     14,S                              ; * GET LINE NUMBER AND
28EC 9F68             (      exbasic.asm):01125                 STX     CURLIN                            ; * BASIC POINTER OF
28EE AEE810           (      exbasic.asm):01126                 LDX     16,S                              ; * STATEMENT FOLLOWING THE
28F1 BF2014           (      exbasic.asm):01127                 STX     CHARAD                            ; * PROPER FOR STATEMENT
28F4                  (      exbasic.asm):01128         LB131
28F4 7E2555           (      exbasic.asm):01129                 JMP     LAD9E                             ; JUMP BACK TO COMMAND INTEPR. LOOP
28F7                  (      exbasic.asm):01130         LB134
28F7 32E812           (      exbasic.asm):01131                 LEAS    18,S                              ; PULL THE 'FOR-NEXT' DATA OFF THE STACK
28FA BD2013           (      exbasic.asm):01132                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
28FD 812C             (      exbasic.asm):01133                 CMPA    #','                              ; CHECK FOR ANOTHER ARGUMENT
28FF 26F3             (      exbasic.asm):01134                 BNE     LB131                             ; RETURN IF NONE
2901 BD200B           (      exbasic.asm):01135                 JSR     GETNCH                            ; GET NEXT CHARACTER FROM BASIC
2904 8DBA             (      exbasic.asm):01136                 BSR     LB0FE                             ; BSR SIMULATES A CALL TO 'NEXT' FROM COMMAND LOOP
                      (      exbasic.asm):01137         
                      (      exbasic.asm):01138         
2906                  (      exbasic.asm):01139         LB141
2906 8D13             (      exbasic.asm):01140                 BSR     LB156                             ; EVALUATE EXPRESSION AND DO A TYPE CHECK FOR NUMERIC
2908                  (      exbasic.asm):01141         LB143
2908 1CFE             (      exbasic.asm):01142                 ANDCC   #$FE                              ; CLEAR CARRY FLAG
290A                  (      exbasic.asm):01143         LB145
290A 7D               (      exbasic.asm):01144                 FCB     $7D                               ; OP CODE OF TST $1A01 - SKIP TWO BYTES (DO
                      (      exbasic.asm):01145         ;*              ; NOT CHANGE CARRY FLAG)
290B                  (      exbasic.asm):01146         LB146
290B 1A01             (      exbasic.asm):01147                 ORCC    #1                                ; SET CARRY
                      (      exbasic.asm):01148         
                      (      exbasic.asm):01149         ;* STRING TYPE MODE CHECK - IF ENTERED AT LB146 THEN VALTYP PLUS IS 'TM' ERROR
                      (      exbasic.asm):01150         ;* NUMERIC TYPE MODE CHECK - IF ENTERED AT LB143 THEN VALTYP MINUS IS 'TM' ERROR
                      (      exbasic.asm):01151         ;* IF ENTERED AT LB148, A TYPE CHECK IS DONE ON VALTYP
                      (      exbasic.asm):01152         ;* IF ENTERED WITH CARRY SET, THEN 'TM' ERROR IF NUMERIC
                      (      exbasic.asm):01153         ;* IF ENTERED WITH CARRY CLEAR, THEN 'TM' ERROR IF STRING.
290D                  (      exbasic.asm):01154         LB148
290D 0D06             (      exbasic.asm):01155                 TST     VALTYP                            ; TEST TYPE FLAG; DO NOT CHANGE CARRY
290F 2503             (      exbasic.asm):01156                 BCS     LB14F                             ; BRANCH IF STRING
2911 2A96             (      exbasic.asm):01157                 BPL     LB0E7                             ; RETURN ON PLUS
2913 8C               (      exbasic.asm):01158                 FCB     SKP2                              ; SKIP 2 BYTES - 'TM' ERROR
2914                  (      exbasic.asm):01159         LB14F
2914 2B93             (      exbasic.asm):01160                 BMI     LB0E7                             ; RETURN ON MINUS
2916 C618             (      exbasic.asm):01161                 LDB     #12*2                             ; 'TYPE M1SMATCH' ERROR
2918                  (      exbasic.asm):01162         LB153
2918 7E2413           (      exbasic.asm):01163                 JMP     LAC46                             ; PROCESS ERROR
                      (      exbasic.asm):01164         ;* EVALUATE EXPRESSION
291B                  (      exbasic.asm):01165         LB156
291B 8D70             (      exbasic.asm):01166                 BSR     LB1C6                             ; BACK UP INPUT POINTER
291D                  (      exbasic.asm):01167         LB158
291D 4F               (      exbasic.asm):01168                 CLRA                                      ; END OF OPERATION PRECEDENCE FLAG
291E 8C               (      exbasic.asm):01169                 FCB     SKP2                              ; SKIP TWO BYTES
291F                  (      exbasic.asm):01170         LB15A
291F 3404             (      exbasic.asm):01171                 PSHS    B                                 ; SAVE FLAG (RELATIONAL OPERATOR FLAG)
2921 3402             (      exbasic.asm):01172                 PSHS    A                                 ; SAVE FLAG (PRECEDENCE FLAG)
2923 C601             (      exbasic.asm):01173                 LDB     #1                                ; *
2925 BD2400           (      exbasic.asm):01174                 JSR     LAC33                             ; * SEE IF ROOM IN FREE RAM FOR (B) WORDS
2928 BD29EB           (      exbasic.asm):01175                 JSR     LB223                             ; GO EVALUATE AN EXPRESSION
292B 0F3F             (      exbasic.asm):01176                 CLR     TRELFL                            ; RESET RELATIONAL OPERATOR FLAG
292D                  (      exbasic.asm):01177         LB168
292D BD2013           (      exbasic.asm):01178                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
                      (      exbasic.asm):01179         ;* CHECK FOR RELATIONAL OPERATORS
2930                  (      exbasic.asm):01180         LB16A
2930 80B0             (      exbasic.asm):01181                 SUBA    #TOK_GREATER                      ; TOKEN FOR >
2932 2514             (      exbasic.asm):01182                 BCS     LB181                             ; BRANCH IF LESS THAN RELATIONAL OPERATORS
2934 8103             (      exbasic.asm):01183                 CMPA    #3                                ; *
2936 2410             (      exbasic.asm):01184                 BCC     LB181                             ; * BRANCH IF GREATER THAN RELATIONAL OPERATORS
2938 8101             (      exbasic.asm):01185                 CMPA    #1                                ; SET CARRY IF '>'
293A 49               (      exbasic.asm):01186                 ROLA                                      ; CARRY TO BIT 0
293B 983F             (      exbasic.asm):01187                 EORA    TRELFL                            ; * CARRY SET IF
293D 913F             (      exbasic.asm):01188                 CMPA    TRELFL                            ; * TRELFL = ACCA
293F 2566             (      exbasic.asm):01189                 BCS     LB1DF                             ; BRANCH IF SYNTAX ERROR : == << OR >>
2941 973F             (      exbasic.asm):01190                 STA     TRELFL                            ; BIT 0: >, BIT 1 =, BIT 2: <
2943 BD200B           (      exbasic.asm):01191                 JSR     GETNCH                            ; GET AN INPUT CHARACTER
2946 20E8             (      exbasic.asm):01192                 BRA     LB16A                             ; CHECK FOR ANOTHER RELATIONAL OPERATOR
                      (      exbasic.asm):01193         ;*
2948                  (      exbasic.asm):01194         LB181
2948 D63F             (      exbasic.asm):01195                 LDB     TRELFL                            ; GET RELATIONAL OPERATOR FLAG
294A 2633             (      exbasic.asm):01196                 BNE     LB1B8                             ; BRANCH IF RELATIONAL COMPARISON
294C 1024006C         (      exbasic.asm):01197                 LBCC    LB1F4                             ; BRANCH IF > RELATIONAL OPERATOR
2950 8B07             (      exbasic.asm):01198                 ADDA    #7                                ; SEVEN ARITHMETIC/LOGICAL OPERATORS
2952 2468             (      exbasic.asm):01199                 BCC     LB1F4                             ; BRANCH IF NOT ARITHMETIC/LOGICAL OPERATOR
2954 9906             (      exbasic.asm):01200                 ADCA    VALTYP                            ; ADD CARRY, NUMERIC FLAG AND MODIFIED TOKEN NUMBER
2956 10270486         (      exbasic.asm):01201                 LBEQ    LB60F                             ; BRANCH IF VALTYP = FF, AND ACCA = '+' TOKEN -
                      (      exbasic.asm):01202         ;*                             ; CONCATENATE TWO STRINGS
295A 89FF             (      exbasic.asm):01203                 ADCA    #-1                               ; RESTORE ARITHMETIC/LOGICAL OPERATOR NUMBER
295C 3402             (      exbasic.asm):01204                 PSHS    A                                 ; * STORE OPERATOR NUMBER ON STACK; MULTIPLY IT BY 2
295E 48               (      exbasic.asm):01205                 ASLA                                      ; * THEN ADD THE STORED STACK DATA = MULTIPLY
295F ABE0             (      exbasic.asm):01206                 ADDA    ,S+                               ; * X 3; 3 BYTE/TABLE ENTRY
2961 8E2206           (      exbasic.asm):01207                 LDX     #LAA51                            ; JUMP TABLE FOR ARITHMETIC & LOGICAL OPERATORS
2964 3086             (      exbasic.asm):01208                 LEAX    A,X                               ; POINT X TO PROPER TABLE
2966                  (      exbasic.asm):01209         LB19F
2966 3502             (      exbasic.asm):01210                 PULS    A                                 ; GET PRECEDENCE FLAG FROM STACK
2968 A184             (      exbasic.asm):01211                 CMPA    ,X                                ; COMPARE TO CURRENT OPERATOR
296A 2456             (      exbasic.asm):01212                 BCC     LB1FA                             ; BRANCH IF STACK OPERATOR > CURRENT OPERATOR
296C 8D9A             (      exbasic.asm):01213                 BSR     LB143                             ; 'TM' ERROR IF VARIABLE TYPE = STRING
                      (      exbasic.asm):01214         
                      (      exbasic.asm):01215         ;* OPERATION BEING PROCESSED IS OF HIGHER PRECEDENCE THAN THE PREVIOUS OPERATION.
296E                  (      exbasic.asm):01216         LB1A7
296E 3402             (      exbasic.asm):01217                 PSHS    A                                 ; SAVE PRECEDENCE FLAG
2970 8D2A             (      exbasic.asm):01218                 BSR     LB1D4                             ; PUSH OPERATOR ROUTINE ADDRESS AND FPA0 ONTO STACK
2972 9E3D             (      exbasic.asm):01219                 LDX     RELPTR                            ; GET POINTER TO ARITHMETIC/LOGICAL TABLE ENTRY FOR
                      (      exbasic.asm):01220         ;*                             ; LAST CALCULATED OPERATION
2974 3502             (      exbasic.asm):01221                 PULS    A                                 ; GET PRECEDENCE FLAG OF PREVIOUS OPERATION
2976 261E             (      exbasic.asm):01222                 BNE     LB1CE                             ; BRANCH IF NOT END OF OPERATION
2978 4D               (      exbasic.asm):01223                 TSTA                                      ; CHECK TYPE OF PRECEDENCE FLAG
2979 1027006B         (      exbasic.asm):01224                 LBEQ    LB220                             ; BRANCH IF END OF EXPRESSION OR SUB-EXPRESSION
297D 204C             (      exbasic.asm):01225                 BRA     LB203                             ; EVALUATE AN OPERATION
                      (      exbasic.asm):01226         
297F                  (      exbasic.asm):01227         LB1B8
297F 0806             (      exbasic.asm):01228                 ASL     VALTYP                            ; BIT 7 OF TYPE FLAG TO CARRY
2981 59               (      exbasic.asm):01229                 ROLB                                      ; SHIFT RELATIONAL FLAG LEFT - VALTYP TO BIT 0
2982 8D09             (      exbasic.asm):01230                 BSR     LB1C6                             ; MOVE THE INPUT POINTER BACK ONE
2984 8E2993           (      exbasic.asm):01231                 LDX     #LB1CB                            ; POINT X TO RELATIONAL COMPARISON JUMP TABLE
2987 D73F             (      exbasic.asm):01232                 STB     TRELFL                            ; SAVE RELATIONAL COMPARISON DATA
2989 0F06             (      exbasic.asm):01233                 CLR     VALTYP                            ; SET VARIABLE TYPE TO NUMERIC
298B 20D9             (      exbasic.asm):01234                 BRA     LB19F                             ; PERFORM OPERATION OR SAVE ON STACK
                      (      exbasic.asm):01235         
298D                  (      exbasic.asm):01236         LB1C6
298D BE2014           (      exbasic.asm):01237                 LDX     CHARAD                            ; * GET BASIC'S INPUT POINTER AND
2990 7E268B           (      exbasic.asm):01238                 JMP     LAEBB                             ; * MOVE IT BACK ONE
                      (      exbasic.asm):01239         ;* RELATIONAL COMPARISON JUMP TABLE
2993                  (      exbasic.asm):01240         LB1CB
2993 64               (      exbasic.asm):01241                 FCB     $64                               ; RELATIONAL COMPARISON FLAG
2994                  (      exbasic.asm):01242         LB1CC
2994 2ABD             (      exbasic.asm):01243                 FDB     LB2F4                             ; JUMP ADDRESS
                      (      exbasic.asm):01244         
2996                  (      exbasic.asm):01245         LB1CE
2996 A184             (      exbasic.asm):01246                 CMPA    ,X                                ; COMPARE PRECEDENCE OF LAST DONE OPERATION TO
                      (      exbasic.asm):01247         ;*         NEXT TO BE DONE OPERATION
2998 2431             (      exbasic.asm):01248                 BCC     LB203                             ; EVALUATE OPERATION IF LOWER PRECEDENCE
299A 20D2             (      exbasic.asm):01249                 BRA     LB1A7                             ; PUSH OPERATION DATA ON STACK IF HIGHER PRECEDENCE
                      (      exbasic.asm):01250         
                      (      exbasic.asm):01251         ;* PUSH OPERATOR EVALUATION ADDRESS AND FPA0 ONTO STACK AND EVALUATE ANOTHER EXPR
299C                  (      exbasic.asm):01252         LB1D4
299C EC01             (      exbasic.asm):01253                 LDD     1,X                               ; GET ADDRESS OF OPERATOR ROUTINE
299E 3406             (      exbasic.asm):01254                 PSHS    B,A                               ; SAVE IT ON THE STACK
29A0 8D08             (      exbasic.asm):01255                 BSR     LB1E2                             ; PUSH FPA0 ONTO STACK
29A2 D63F             (      exbasic.asm):01256                 LDB     TRELFL                            ; GET BACK RELATIONAL OPERATOR FLAG
29A4 16FF78           (      exbasic.asm):01257                 LBRA    LB15A                             ; EVALUATE ANOTHER EXPRESSION
29A7                  (      exbasic.asm):01258         LB1DF
29A7 7E2A43           (      exbasic.asm):01259                 JMP     LB277                             ; 'SYNTAX ERROR'
                      (      exbasic.asm):01260         ;* PUSH FPA0 ONTO THE STACK. ,S   = EXPONENT
                      (      exbasic.asm):01261         ;* 1-2,S =HIGH ORDER MANTISSA 3-4,S = LOW ORDER MANTISSA
                      (      exbasic.asm):01262         ;* 5,S = SIGN RETURN WITH PRECEDENCE CODE IN ACCA
29AA                  (      exbasic.asm):01263         LB1E2
29AA D654             (      exbasic.asm):01264                 LDB     FP0SGN                            ; GET SIGN OF FPA0 MANTISSA
29AC A684             (      exbasic.asm):01265                 LDA     ,X                                ; GET PRECEDENCE CODE TO ACCA
29AE                  (      exbasic.asm):01266         LB1E6
29AE 3520             (      exbasic.asm):01267                 PULS    Y                                 ; GET RETURN ADDRESS FROM STACK & PUT IT IN Y
29B0 3404             (      exbasic.asm):01268                 PSHS    B                                 ; SAVE ACCB ON STACK
29B2                  (      exbasic.asm):01269         LB1EA
29B2 D64F             (      exbasic.asm):01270                 LDB     FP0EXP                            ; * PUSH FPA0 ONTO THE STACK
29B4 9E50             (      exbasic.asm):01271                 LDX     FPA0                              ; *
29B6 DE52             (      exbasic.asm):01272                 LDU     FPA0+2                            ; *
29B8 3454             (      exbasic.asm):01273                 PSHS    U,X,B                             ; *
29BA 6EA4             (      exbasic.asm):01274                 JMP     ,Y                                ; JUMP TO ADDRESS IN Y
                      (      exbasic.asm):01275         
                      (      exbasic.asm):01276         ;* BRANCH HERE IF NON-OPERATOR CHARACTER FOUND - USUALLY ')' OR END OF LINE
29BC                  (      exbasic.asm):01277         LB1F4
29BC 9E74             (      exbasic.asm):01278                 LDX     ZERO                              ; POINT X TO DUMMY VALUE (ZERO)
29BE A6E0             (      exbasic.asm):01279                 LDA     ,S+                               ; GET PRECEDENCE FLAG FROM STACK
29C0 2726             (      exbasic.asm):01280                 BEQ     LB220                             ; BRANCH IF END OF EXPRESSION
29C2                  (      exbasic.asm):01281         LB1FA
29C2 8164             (      exbasic.asm):01282                 CMPA    #$64                              ; * CHECK FOR RELATIONAL COMPARISON FLAG
29C4 2703             (      exbasic.asm):01283                 BEQ     LB201                             ; * AND BRANCH IF RELATIONAL COMPARISON
29C6 BD2908           (      exbasic.asm):01284                 JSR     LB143                             ; 'TM' ERROR IF VARIABLE TYPE = STRING
29C9                  (      exbasic.asm):01285         LB201
29C9 9F3D             (      exbasic.asm):01286                 STX     RELPTR                            ; SAVE POINTER TO OPERATOR ROUTINE
29CB                  (      exbasic.asm):01287         LB203
29CB 3504             (      exbasic.asm):01288                 PULS    B                                 ; GET RELATIONAL OPERATOR FLAG FROM STACK
29CD 815A             (      exbasic.asm):01289                 CMPA    #$5A                              ; CHECK FOR 'NOT' OPERATOR
29CF 2719             (      exbasic.asm):01290                 BEQ     LB222                             ; RETURN IF 'NOT' - NO RELATIONAL COMPARISON
29D1 817D             (      exbasic.asm):01291                 CMPA    #$7D                              ; CHECK FOR NEGATION (UNARY) FLAG
29D3 2715             (      exbasic.asm):01292                 BEQ     LB222                             ; RETURN IF NEGATION - NO RELATIONAL COMPARISON
                      (      exbasic.asm):01293         
                      (      exbasic.asm):01294         ;* EVALUATE AN OPERATION. EIGHT BYTES WILL BE STORED ON STACK, FIRST SIX BYTES
                      (      exbasic.asm):01295         ;* ARE A TEMPORARY FLOATING POINT RESULT THEN THE ADDRESS OF ROUTINE WHICH
                      (      exbasic.asm):01296         ;* WILL EVALUATE THE OPERATION. THE RTS AT END OF ROUTINE WILL VECTOR
                      (      exbasic.asm):01297         ;* TO EVALUATING ROUTINE.
29D5 54               (      exbasic.asm):01298                 LSRB                                      ; = ROTATE VALTYP BIT INTO CARRY
29D6 D70A             (      exbasic.asm):01299                 STB     RELFLG                            ; = FLAG AND SAVE NEW RELFLG
29D8 3552             (      exbasic.asm):01300                 PULS    A,X,U                             ; * PULL A FP VALUE OFF OF THE STACK
29DA 975C             (      exbasic.asm):01301                 STA     FP1EXP                            ; * AND SAVE IT IN FPA1
29DC 9F5D             (      exbasic.asm):01302                 STX     FPA1                              ; *
29DE DF5F             (      exbasic.asm):01303                 STU     FPA1+2                            ; *
29E0 3504             (      exbasic.asm):01304                 PULS    B                                 ; = GET MANTISSA SIGN AND
29E2 D761             (      exbasic.asm):01305                 STB     FP1SGN                            ; = SAVE IT IN FPA1
29E4 D854             (      exbasic.asm):01306                 EORB    FP0SGN                            ; EOR IT WITH FPA1 MANTISSA SIGN
29E6 D762             (      exbasic.asm):01307                 STB     RESSGN                            ; SAVE IT IN RESULT SIGN BYTE
29E8                  (      exbasic.asm):01308         LB220
29E8 D64F             (      exbasic.asm):01309                 LDB     FP0EXP                            ; GET EXPONENT OF FPA0
29EA                  (      exbasic.asm):01310         LB222
29EA 39               (      exbasic.asm):01311                 RTS
                      (      exbasic.asm):01312         
29EB                  (      exbasic.asm):01313         LB223
29EB BD3C5D           (      exbasic.asm):01314                 JSR     XVEC15                            ; CALL EXTENDED BASIC ADD-IN
29EE 0F06             (      exbasic.asm):01315                 CLR     VALTYP                            ; INITIALIZE TYPE FLAG TO NUMERIC
29F0 BD200B           (      exbasic.asm):01316                 JSR     GETNCH                            ; GET AN INPUT CHAR
29F3 2403             (      exbasic.asm):01317                 BCC     LB22F                             ; BRANCH IF NOT NUMERIC
29F5                  (      exbasic.asm):01318         LB22C
29F5 7E34B6           (      exbasic.asm):01319                 JMP     LBD12                             ; CONVERT ASCII STRING TO FLOATING POINT -
                      (      exbasic.asm):01320         ;*         RETURN RESULT IN FPA0
                      (      exbasic.asm):01321         ;* PROCESS A NON NUMERIC FIRST CHARACTER
29F8                  (      exbasic.asm):01322         LB22F
29F8 BD2B71           (      exbasic.asm):01323                 JSR     LB3A2                             ; SET CARRY IF NOT ALPHA
29FB 2453             (      exbasic.asm):01324                 BCC     LB284                             ; BRANCH IF ALPHA CHARACTER
29FD 812E             (      exbasic.asm):01325                 CMPA    #'.'                              ; IS IT '.' (DECIMAL POINT)?
29FF 27F4             (      exbasic.asm):01326                 BEQ     LB22C                             ; CONVERT ASCII STRING TO FLOATING POINT
2A01 81AA             (      exbasic.asm):01327                 CMPA    #TOK_MINUS                        ; MINUS TOKEN
2A03 2743             (      exbasic.asm):01328                 BEQ     LB27C                             ; YES - GO PROCESS THE MINUS OPERATOR
2A05 81A9             (      exbasic.asm):01329                 CMPA    #TOK_PLUS                         ; PLUS TOKEN
2A07 27E2             (      exbasic.asm):01330                 BEQ     LB223                             ; YES - GET ANOTHER CHARACTER
2A09 8122             (      exbasic.asm):01331                 CMPA    #$22                              ; STRING DELIMITER?
2A0B 260C             (      exbasic.asm):01332                 BNE     LB24E                             ; NO
2A0D                  (      exbasic.asm):01333         LB244
2A0D BE2014           (      exbasic.asm):01334                 LDX     CHARAD                            ; CURRENT BASIC POINTER TO X
2A10 BD2CE9           (      exbasic.asm):01335                 JSR     LB518                             ; SAVE STRING ON STRING STACK
2A13                  (      exbasic.asm):01336         LB249
2A13 9E64             (      exbasic.asm):01337                 LDX     COEFPT                            ; * GET ADDRESS OF END OF STRING AND
2A15 BF2014           (      exbasic.asm):01338                 STX     CHARAD                            ; * PUT BASIC'S INPUT POINTER THERE
2A18 39               (      exbasic.asm):01339                 RTS
2A19                  (      exbasic.asm):01340         LB24E
2A19 81A6             (      exbasic.asm):01341                 CMPA    #TOK_NOT                          ; NOT TOKEN?
2A1B 260D             (      exbasic.asm):01342                 BNE     LB25F                             ; NO
                      (      exbasic.asm):01343         ;* PROCESS THE NOT OPERATOR
2A1D 865A             (      exbasic.asm):01344                 LDA     #$5A                              ; 'NOT' PRECEDENCE FLAG
2A1F BD291F           (      exbasic.asm):01345                 JSR     LB15A                             ; PROCESS OPERATION FOLLOWING 'NOT'
2A22 BD2BBD           (      exbasic.asm):01346                 JSR     INTCNV                            ; CONVERT FPA0 TO INTEGER IN ACCD
2A25 43               (      exbasic.asm):01347                 COMA                                      ; * 'NOT' THE INTEGER
2A26 53               (      exbasic.asm):01348                 COMB                                      ; *
2A27 7E2CC5           (      exbasic.asm):01349                 JMP     GIVABF                            ; CONVERT ACCD TO FLOATING POINT (FPA0)
2A2A                  (      exbasic.asm):01350         LB25F
2A2A 4C               (      exbasic.asm):01351                 INCA                                      ; CHECK FOR TOKENS PRECEEDED BY $FF
2A2B 272F             (      exbasic.asm):01352                 BEQ     LB290                             ; IT WAS PRECEEDED BY $FF
2A2D                  (      exbasic.asm):01353         LB262
2A2D 8D06             (      exbasic.asm):01354                 BSR     LB26A                             ; SYNTAX CHECK FOR A '('
2A2F BD291B           (      exbasic.asm):01355                 JSR     LB156                             ; EVALUATE EXPRESSIONS WITHIN PARENTHESES AT
                      (      exbasic.asm):01356         ;*         HIGHEST PRECEDENCE
2A32                  (      exbasic.asm):01357         LB267
2A32 C629             (      exbasic.asm):01358                 LDB     #')'                              ; SYNTAX CHECK FOR ')'
2A34 8C               (      exbasic.asm):01359                 FCB     SKP2                              ; SKIP 2 BYTES
2A35                  (      exbasic.asm):01360         LB26A
2A35 C628             (      exbasic.asm):01361                 LDB     #'('                              ; SYNTAX CHECK FOR '('
2A37 8C               (      exbasic.asm):01362                 FCB     SKP2                              ; SKIP 2 BYTES
2A38                  (      exbasic.asm):01363         LB26D
2A38 C62C             (      exbasic.asm):01364                 LDB     #','                              ; SYNTAX CHECK FOR COMMA
2A3A                  (      exbasic.asm):01365         LB26F
2A3A E19F2014         (      exbasic.asm):01366                 CMPB    [CHARAD]                          ; * COMPARE ACCB TO CURRENT INPUT
2A3E 2603             (      exbasic.asm):01367                 BNE     LB277                             ; * CHARACTER - SYNTAX ERROR IF NO MATCH
2A40 7E200B           (      exbasic.asm):01368                 JMP     GETNCH                            ; GET A CHARACTER FROM BASIC
2A43                  (      exbasic.asm):01369         LB277
2A43 C602             (      exbasic.asm):01370                 LDB     #2*1                              ; SYNTAX ERROR
2A45 7E2413           (      exbasic.asm):01371                 JMP     LAC46                             ; JUMP TO ERROR HANDLER
                      (      exbasic.asm):01372         
                      (      exbasic.asm):01373         ;* PROCESS THE MINUS (UNARY) OPERATOR
2A48                  (      exbasic.asm):01374         LB27C
2A48 867D             (      exbasic.asm):01375                 LDA     #$7D                              ; MINUS (UNARY) PRECEDENCE FLAG
2A4A BD291F           (      exbasic.asm):01376                 JSR     LB15A                             ; PROCESS OPERATION FOLLOWING 'UNARY' NEGATION
2A4D 7E3690           (      exbasic.asm):01377                 JMP     LBEE9                             ; CHANGE SIGN OF FPA0 MANTISSA
                      (      exbasic.asm):01378         
                      (      exbasic.asm):01379         ;* EVALUATE ALPHA EXPRESSION
2A50                  (      exbasic.asm):01380         LB284
2A50 BD2B21           (      exbasic.asm):01381                 JSR     LB357                             ; FIND THE DESCRIPTOR ADDRESS OF A VARIABLE
2A53                  (      exbasic.asm):01382         LB287
2A53 9F52             (      exbasic.asm):01383                 STX     FPA0+2                            ; SAVE DESCRIPTOR ADDRESS IN FPA0
2A55 9606             (      exbasic.asm):01384                 LDA     VALTYP                            ; TEST VARIABLE TYPE
2A57 2691             (      exbasic.asm):01385                 BNE     LB222                             ; RETURN IF STRING
2A59 7E33B8           (      exbasic.asm):01386                 JMP     LBC14                             ; COPY A FP NUMBER FROM (X) TO FPA0
                      (      exbasic.asm):01387         
                      (      exbasic.asm):01388         ;* EVALUATING A SECONDARY TOKEN
2A5C                  (      exbasic.asm):01389         LB290
2A5C BD200B           (      exbasic.asm):01390                 JSR     GETNCH                            ; GET AN INPUT CHARACTER (SECONDARY TOKEN)
2A5F 1F89             (      exbasic.asm):01391                 TFR     A,B                               ; SAVE IT IN ACCB
2A61 58               (      exbasic.asm):01392                 ASLB                                      ; X2 & BET RID OF BIT 7
2A62 BD200B           (      exbasic.asm):01393                 JSR     GETNCH                            ; GET ANOTHER INPUT CHARACTER
2A65 C138             (      exbasic.asm):01394                 CMPB    #(NUM_SEC_FNS-1)*2                  ; 29 SECONDARY FUNCTIONS - 1
2A67 2303             (      exbasic.asm):01395                 BLS     LB29F                             ; BRANCH IF COLOR BASIC TOKEN
2A69 7E2A43           (      exbasic.asm):01396                 JMP     LB277                             ; SYNTAX ERROR
2A6C                  (      exbasic.asm):01397         LB29F
2A6C 3404             (      exbasic.asm):01398                 PSHS    B                                 ; SAVE TOKEN OFFSET ON STACK
2A6E C12A             (      exbasic.asm):01399                 CMPB    #(TOK_LEFT-$80)*2                   ; CHECK FOR TOKEN WITH AN ARGUMENT
2A70 251E             (      exbasic.asm):01400                 BCS     LB2C7                             ; DO SECONDARIES STRING$ OR LESS
2A72 C130             (      exbasic.asm):01401                 CMPB    #(TOK_INKEY-$80)*2                  ; *
2A74 241C             (      exbasic.asm):01402                 BCC     LB2C9                             ; * DO SECONDARIES $92 (INKEY$) OR >
2A76 8DBD             (      exbasic.asm):01403                 BSR     LB26A                             ; SYNTAX CHECK FOR A '('
2A78 A6E4             (      exbasic.asm):01404                 LDA     ,S                                ; GET TOKEN NUMBER
                      (      exbasic.asm):01405         ;* DO SECONDARIES (LEFT$, RIGHT$, MID$)
2A7A BD291B           (      exbasic.asm):01406                 JSR     LB156                             ; EVALUATE FIRST STRING IN ARGUMENT
2A7D 8DB9             (      exbasic.asm):01407                 BSR     LB26D                             ; SYNTAX CHECK FOR A COMMA
2A7F BD290B           (      exbasic.asm):01408                 JSR     LB146                             ; 'TM' ERROR IF NUMERIC VARiABLE
2A82 3502             (      exbasic.asm):01409                 PULS    A                                 ; GET TOKEN OFFSET FROM STACK
2A84 DE52             (      exbasic.asm):01410                 LDU     FPA0+2                            ; POINT U TO STRING DESCRIPTOR
2A86 3442             (      exbasic.asm):01411                 PSHS    U,A                               ; SAVE TOKEN OFFSET AND DESCRIPTOR ADDRESS
2A88 BD2EDE           (      exbasic.asm):01412                 JSR     LB70B                             ; EVALUATE FIRST NUMERIC ARGUMENT
2A8B 3502             (      exbasic.asm):01413                 PULS    A                                 ; GET TOKEN OFFSET FROM STACK
2A8D 3406             (      exbasic.asm):01414                 PSHS    B,A                               ; SAVE TOKEN OFFSET AND NUMERIC ARGUMENT
2A8F 8E               (      exbasic.asm):01415                 FCB     $8E                               ; OP CODE OF LDX# - SKlP 2 BYTES
2A90                  (      exbasic.asm):01416         LB2C7
2A90 8D9B             (      exbasic.asm):01417                 BSR     LB262                             ; SYNTAX CHECK FOR A '('
2A92                  (      exbasic.asm):01418         LB2C9
2A92 3504             (      exbasic.asm):01419                 PULS    B                                 ; GET TOKEN OFFSET
2A94 BE20E8           (      exbasic.asm):01420                 LDX     COMVEC+8                          ; GET SECONDARY FUNCTION JUMP TABLE ADDRESS
2A97                  (      exbasic.asm):01421         LB2CE
2A97 3A               (      exbasic.asm):01422                 ABX                                       ; ADD IN COMMAND OFFSET
                      (      exbasic.asm):01423         ;*
                      (      exbasic.asm):01424         ;* HERE IS WHERE WE BRANCH TO A SECONDARY FUNCTION
2A98 AD94             (      exbasic.asm):01425                 JSR     [,X]                              ; GO DO AN SECONDARY FUNCTION
2A9A 7E2908           (      exbasic.asm):01426                 JMP     LB143                             ; 'TM' ERROR IF VARIABLE TYPE = STRING
                      (      exbasic.asm):01427         
                      (      exbasic.asm):01428         ;* LOGICAL OPERATOR 'OR' JUMPS HERE
2A9D                  (      exbasic.asm):01429         LB2D4
2A9D 86               (      exbasic.asm):01430                 FCB     SKP1LD                            ; SKIP ONE BYTE - 'OR' FLAG = $4F
                      (      exbasic.asm):01431         
                      (      exbasic.asm):01432         ;* LOGICAL OPERATOR 'AND' JUMPS HERE
2A9E                  (      exbasic.asm):01433         LB2D5
2A9E 4F               (      exbasic.asm):01434                 CLRA                                      ; AND FLAG = 0
2A9F 9703             (      exbasic.asm):01435                 STA     TMPLOC                            ; AND/OR FLAG
2AA1 BD2BBD           (      exbasic.asm):01436                 JSR     INTCNV                            ; CONVERT FPA0 INTO AN INTEGER IN ACCD
2AA4 DD01             (      exbasic.asm):01437                 STD     CHARAC                            ; TEMP SAVE ACCD
2AA6 BD33EE           (      exbasic.asm):01438                 JSR     LBC4A                             ; MOVE FPA1 TO FPA0
2AA9 BD2BBD           (      exbasic.asm):01439                 JSR     INTCNV                            ; CONVERT FPA0 INTO AN INTEGER IN ACCD
2AAC 0D03             (      exbasic.asm):01440                 TST     TMPLOC                            ; CHECK AND/OR FLAG
2AAE 2606             (      exbasic.asm):01441                 BNE     LB2ED                             ; BRANCH IF OR
2AB0 9401             (      exbasic.asm):01442                 ANDA    CHARAC                            ; * 'AND' ACCD WITH FPA0 INTEGER
2AB2 D402             (      exbasic.asm):01443                 ANDB    ENDCHR                            ; * STORED IN ENDCHR
2AB4 2004             (      exbasic.asm):01444                 BRA     LB2F1                             ; CONVERT TO FP
2AB6                  (      exbasic.asm):01445         LB2ED
2AB6 9A01             (      exbasic.asm):01446                 ORA     CHARAC                            ; * 'OR' ACCD WITH FPA0 INTEGER
2AB8 DA02             (      exbasic.asm):01447                 ORB     ENDCHR                            ; * STORED IN CHARAC
2ABA                  (      exbasic.asm):01448         LB2F1
2ABA 7E2CC5           (      exbasic.asm):01449                 JMP     GIVABF                            ; CONVERT THE VALUE IN ACCD INTO A FP NUMBER
                      (      exbasic.asm):01450         
                      (      exbasic.asm):01451         ;* RELATIONAL COMPARISON PROCESS HANDLER
2ABD                  (      exbasic.asm):01452         LB2F4
2ABD BD290D           (      exbasic.asm):01453                 JSR     LB148                             ; 'TM' ERROR IF TYPE MISMATCH
2AC0 2610             (      exbasic.asm):01454                 BNE     LB309                             ; BRANCH IF STRING VARIABLE
2AC2 9661             (      exbasic.asm):01455                 LDA     FP1SGN                            ; * 'PACK' THE MANTISSA
2AC4 8A7F             (      exbasic.asm):01456                 ORA     #$7F                              ; * SIGN OF FPA1 INTO
2AC6 945D             (      exbasic.asm):01457                 ANDA    FPA1                              ; * BIT 7 OF THE
2AC8 975D             (      exbasic.asm):01458                 STA     FPA1                              ; * MANTISSA MS BYTE
2ACA 8E005C           (      exbasic.asm):01459                 LDX     #FP1EXP                           ; POINT X TO FPA1
2ACD BD343A           (      exbasic.asm):01460                 JSR     LBC96                             ; COMPARE FPA0 TO FPA1
2AD0 2036             (      exbasic.asm):01461                 BRA     LB33F                             ; CHECK TRUTH OF RELATIONAL COMPARISON
                      (      exbasic.asm):01462         
                      (      exbasic.asm):01463         ;* RELATIONAL COMPARISON OF STRINGS
2AD2                  (      exbasic.asm):01464         LB309
2AD2 0F06             (      exbasic.asm):01465                 CLR     VALTYP                            ; SET VARIABLE TYPE TO NUMERIC
2AD4 0A3F             (      exbasic.asm):01466                 DEC     TRELFL                            ; REMOVE STRING TYPE FLAG (BIT0=1 FOR STRINGS) FROM THE
                      (      exbasic.asm):01467         ;*                             ; DESIRED RELATIONAL COMPARISON DATA
2AD6 BD2E28           (      exbasic.asm):01468                 JSR     LB657                             ; GET LENGTH AND ADDRESS OF STRING WHOSE
                      (      exbasic.asm):01469         ;*                             ; DESCRIPTOR ADDRESS IS IN THE BOTTOM OF FPA0
2AD9 D756             (      exbasic.asm):01470                 STB     STRDES                            ; * SAVE LENGTH AND ADDRESS IN TEMPORARY
2ADB 9F58             (      exbasic.asm):01471                 STX     STRDES+2                          ; * DESCRIPTOR (STRING B)
2ADD 9E5F             (      exbasic.asm):01472                 LDX     FPA1+2                            ; = RETURN LENGTH AND ADDRESS OF STRING
2ADF BD2E2A           (      exbasic.asm):01473                 JSR     LB659                             ; = WHOSE DESCRIPTOR ADDRESS IS STORED IN FPA1+2
2AE2 9656             (      exbasic.asm):01474                 LDA     STRDES                            ; LOAD ACCA WITH LENGTH OF STRING B
2AE4 3404             (      exbasic.asm):01475                 PSHS    B                                 ; SAVE LENGTH A ON STACK
2AE6 A0E0             (      exbasic.asm):01476                 SUBA    ,S+                               ; SUBTRACT LENGTH A FROM LENGTH B
2AE8 2707             (      exbasic.asm):01477                 BEQ     LB328                             ; BRANCH IF STRINGS OF EQUAL LENGTH
2AEA 8601             (      exbasic.asm):01478                 LDA     #1                                ; ; TRUE FLAG
2AEC 2403             (      exbasic.asm):01479                 BCC     LB328                             ; TRUE IF LENGTH B > LENGTH A
2AEE D656             (      exbasic.asm):01480                 LDB     STRDES                            ; LOAD ACCB WITH LENGTH B
2AF0 40               (      exbasic.asm):01481                 NEGA                                      ; SET FLAG = FALSE (1FF)
2AF1                  (      exbasic.asm):01482         LB328
2AF1 9754             (      exbasic.asm):01483                 STA     FP0SGN                            ; SAVE TRUE/FALSE FLAG
2AF3 DE58             (      exbasic.asm):01484                 LDU     STRDES+2                          ; POINT U TO START OF STRING
2AF5 5C               (      exbasic.asm):01485                 INCB                                      ; COMPENSATE FOR THE DECB BELOW
                      (      exbasic.asm):01486         ;* ENTER WITH ACCB CONTAINING LENGTH OF SHORTER STRING
2AF6                  (      exbasic.asm):01487         LB32D
2AF6 5A               (      exbasic.asm):01488                 DECB                                      ; DECREMENT SHORTER STRING LENGTH
2AF7 2604             (      exbasic.asm):01489                 BNE     LB334                             ; BRANCH IF ALL OF STRING NOT COMPARED
2AF9 D654             (      exbasic.asm):01490                 LDB     FP0SGN                            ; GET TRUE/FALSE FLAB
2AFB 200B             (      exbasic.asm):01491                 BRA     LB33F                             ; CHECK TRUTH OF RELATIONAL COMPARISON
2AFD                  (      exbasic.asm):01492         LB334
2AFD A680             (      exbasic.asm):01493                 LDA     ,X+                               ; GET A BYTE FROM STRING A
2AFF A1C0             (      exbasic.asm):01494                 CMPA    ,U+                               ; COMPARE TO STRING B
2B01 27F3             (      exbasic.asm):01495                 BEQ     LB32D                             ; CHECK ANOTHER CHARACTER IF =
2B03 C6FF             (      exbasic.asm):01496                 LDB     #$FF                              ; FALSE FLAG IF STRING A > B
2B05 2401             (      exbasic.asm):01497                 BCC     LB33F                             ; BRANCH IF STRING A > STRING B
2B07 50               (      exbasic.asm):01498                 NEGB                                      ; SET FLAG = TRUE
                      (      exbasic.asm):01499         
                      (      exbasic.asm):01500         ;* DETERMINE TRUTH OF COMPARISON - RETURN RESULT IN FPA0
2B08                  (      exbasic.asm):01501         LB33F
2B08 CB01             (      exbasic.asm):01502                 ADDB    #1                                ; CONVERT $FF,0,1 TO 0,1,2
2B0A 59               (      exbasic.asm):01503                 ROLB                                      ; NOW IT'S 1,2,4 FOR > = <
2B0B D40A             (      exbasic.asm):01504                 ANDB    RELFLG                            ; 'AND' THE ACTUAL COMPARISON WITH THE DESIRED -
2B0D                  (      exbasic.asm):01505         COMPARISON
2B0D 2702             (      exbasic.asm):01506                 BEQ     LB348                             ; BRANCH IF FALSE (NO MATCHING BITS)
2B0F C6FF             (      exbasic.asm):01507                 LDB     #$FF                              ; TRUE FLAG
2B11                  (      exbasic.asm):01508         LB348
2B11 7E3420           (      exbasic.asm):01509                 JMP     LBC7C                             ; CONVERT ACCB INTO FP NUMBER IN FPA0
                      (      exbasic.asm):01510         
                      (      exbasic.asm):01511         ;* DIM
2B14                  (      exbasic.asm):01512         LB34B
2B14 BD2A38           (      exbasic.asm):01513                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
2B17                  (      exbasic.asm):01514         DIM
2B17 C601             (      exbasic.asm):01515                 LDB     #1                                ; DIMENSION FLAG
2B19 8D0A             (      exbasic.asm):01516                 BSR     LB35A                             ; SAVE ARRAY SPACE FOR THIS VARIABLE
2B1B BD2013           (      exbasic.asm):01517                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
2B1E 26F4             (      exbasic.asm):01518                 BNE     LB34B                             ; KEEP DIMENSIONING IF NOT END OF LINE
2B20 39               (      exbasic.asm):01519                 RTS
                      (      exbasic.asm):01520         ;* EVALUATE A VARIABLE - RETURN X AND
                      (      exbasic.asm):01521         ;* VARPTR POINTING TO VARIABLE DESCRIPTOR
                      (      exbasic.asm):01522         ;* EACH VARIABLE REQUIRES 7 BYTES - THE FIRST TWO
                      (      exbasic.asm):01523         ;* BYTES ARE THE VARIABLE NAME AND THE NEXT 5
                      (      exbasic.asm):01524         ;* BYTES ARE THE DESCRIPTOR. IF BIT 7 OF THE
                      (      exbasic.asm):01525         ;* FIRST BYTE OF VARlABLE NAME IS SET, THE
                      (      exbasic.asm):01526         ;* VARIABLE IS A DEF FN VARIABLE. IF BIT 7 OF
                      (      exbasic.asm):01527         ;* THE SECOND BYTE OF VARIABLE NAME IS SET, THE
                      (      exbasic.asm):01528         ;* VARIABLE IS A STRING, OTHERWISE THE VARIABLE
                      (      exbasic.asm):01529         ;* IS NUMERIC.
                      (      exbasic.asm):01530         ;* IF THE VARIABLE IS NOT FOUND, A ZERO VARIABLE IS
                      (      exbasic.asm):01531         ;* INSERTED INTO THE VARIABLE SPACE
2B21                  (      exbasic.asm):01532         LB357
2B21 5F               (      exbasic.asm):01533                 CLRB                                      ; DIMENSION FLAG = 0; DO NOT SET UP AN ARRAY
2B22 BD2013           (      exbasic.asm):01534                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
2B25                  (      exbasic.asm):01535         LB35A
2B25 D705             (      exbasic.asm):01536                 STB     DIMFLG                            ; SAVE ARRAY FLAG
                      (      exbasic.asm):01537         ;* ENTRY POINT FOR DEF FN VARIABLE SEARCH
2B27                  (      exbasic.asm):01538         LB35C
2B27 9737             (      exbasic.asm):01539                 STA     VARNAM                            ; SAVE INPUT CHARACTER
2B29 BD2013           (      exbasic.asm):01540                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
2B2C 8D43             (      exbasic.asm):01541                 BSR     LB3A2                             ; SET CARRY IF NOT ALPHA
2B2E 1025FF11         (      exbasic.asm):01542                 LBCS    LB277                             ; SYNTAX ERROR IF NOT ALPHA
2B32 5F               (      exbasic.asm):01543                 CLRB                                      ; DEFAULT 2ND VARIABLE CHARACTER TO ZERO
2B33 D706             (      exbasic.asm):01544                 STB     VALTYP                            ; SET VARIABLE TYPE TO NUMERIC
2B35 BD200B           (      exbasic.asm):01545                 JSR     GETNCH                            ; GET ANOTHER CHARACTER FROM BASIC
2B38 2504             (      exbasic.asm):01546                 BCS     LB371                             ; BRANCH IF NUMERIC (2ND CHARACTER IN
                      (      exbasic.asm):01547         ;*                             ; VARIABLE MAY BE NUMERIC)
2B3A 8D35             (      exbasic.asm):01548                 BSR     LB3A2                             ; SET CARRY IF NOT ALPHA
2B3C 250B             (      exbasic.asm):01549                 BCS     LB37B                             ; BRANCH IF NOT ALPHA
2B3E                  (      exbasic.asm):01550         LB371
2B3E 1F89             (      exbasic.asm):01551                 TFR     A,B                               ; SAVE 2ND CHARACTER IN ACCB
                      (      exbasic.asm):01552         ;* READ INPUT CHARACTERS UNTIL A NON ALPHA OR
                      (      exbasic.asm):01553         ;* NON NUMERIC IS FOUND - IGNORE ALL CHARACTERS
                      (      exbasic.asm):01554         ;* IN VARIABLE NAME AFTER THE 1ST TWO
2B40                  (      exbasic.asm):01555         LB373
2B40 BD200B           (      exbasic.asm):01556                 JSR     GETNCH                            ; GET AN INPUT CHARACTER
2B43 25FB             (      exbasic.asm):01557                 BCS     LB373                             ; BRANCH IF NUMERIC
2B45 8D2A             (      exbasic.asm):01558                 BSR     LB3A2                             ; SET CARRY IF NOT ALPHA
2B47 24F7             (      exbasic.asm):01559                 BCC     LB373                             ; BRANCH IF ALPHA
2B49                  (      exbasic.asm):01560         LB37B
2B49 8124             (      exbasic.asm):01561                 CMPA    #'$'                              ; CHECK FOR A STRING VARIABLE
2B4B 2607             (      exbasic.asm):01562                 BNE     LB385                             ; BRANCH IF IT IS NOT A STRING
2B4D 0306             (      exbasic.asm):01563                 COM     VALTYP                            ; SET VARIABLE TYPE TO STRING
2B4F CB80             (      exbasic.asm):01564                 ADDB    #$80                              ; SET BIT 7 OF 2ND CHARACTER (STRING)
2B51 BD200B           (      exbasic.asm):01565                 JSR     GETNCH                            ; GET AN INPUT CHARACTER
2B54                  (      exbasic.asm):01566         LB385
2B54 D738             (      exbasic.asm):01567                 STB     VARNAM+1                          ; SAVE 2ND CHARACTER IN VARNAM+1
2B56 9A08             (      exbasic.asm):01568                 ORA     ARYDIS                            ; OR IN THE ARRAY DISABLE FLAG - IF = $80,
                      (      exbasic.asm):01569         ;*              ; DON'T SEARCH FOR VARIABLES IN THE ARRAYS
2B58 8028             (      exbasic.asm):01570                 SUBA    #'('                              ; IS THIS AN ARRAY VARIABLE?
2B5A 10270076         (      exbasic.asm):01571                 LBEQ    LB404                             ; BRANCH IF IT IS
2B5E 0F08             (      exbasic.asm):01572                 CLR     ARYDIS                            ; RESET THE ARRAY DISABLE FLAG
2B60 9E1B             (      exbasic.asm):01573                 LDX     VARTAB                            ; POINT X TO THE START OF VARIABLES
2B62 DC37             (      exbasic.asm):01574                 LDD     VARNAM                            ; GET VARIABLE IN QUESTION
2B64                  (      exbasic.asm):01575         LB395
2B64 9C1D             (      exbasic.asm):01576                 CMPX    ARYTAB                            ; COMPARE X TO THE END OF VARIABLES
2B66 2712             (      exbasic.asm):01577                 BEQ     LB3AB                             ; BRANCH IF END OF VARIABLES
2B68 10A381           (      exbasic.asm):01578                 CMPD    ,X++                              ; * COMPARE VARIABLE IN QUESTION TO CURRENT
2B6B 273E             (      exbasic.asm):01579                 BEQ     LB3DC                             ; * VARIABLE AND BRANCH IF MATCH
2B6D 3005             (      exbasic.asm):01580                 LEAX    5,X                               ; = MOVE POINTER TO NEXT VARIABLE AND
2B6F 20F3             (      exbasic.asm):01581                 BRA     LB395                             ; = KEEP LOOKING
                      (      exbasic.asm):01582         
                      (      exbasic.asm):01583         ;* SET CARRY IF NOT UPPER CASE ALPHA
2B71                  (      exbasic.asm):01584         LB3A2
2B71 8141             (      exbasic.asm):01585                 CMPA    #'A'                              ; * CARRY SET IF < 'A'
2B73 2504             (      exbasic.asm):01586                 BCS     LB3AA                             ; *
2B75 805B             (      exbasic.asm):01587                 SUBA    #'Z'+1                            ; =
                      (      exbasic.asm):01588         ;*         SUBA #-('Z+1)       ; = CARRY CLEAR IF <= 'Z'
2B77 80A5             (      exbasic.asm):01589                 FCB     $80,$A5
2B79                  (      exbasic.asm):01590         LB3AA
2B79 39               (      exbasic.asm):01591                 RTS
                      (      exbasic.asm):01592         ;* PUT A NEW VARIABLE IN TABLE OF VARIABLES
2B7A                  (      exbasic.asm):01593         LB3AB
2B7A 8E0074           (      exbasic.asm):01594                 LDX     #ZERO                             ; POINT X TO ZERO LOCATION
2B7D EEE4             (      exbasic.asm):01595                 LDU     ,S                                ; GET CURRENT RETURN ADDRESS
2B7F 11832A53         (      exbasic.asm):01596                 CMPU    #LB287                            ; DID WE COME FROM 'EVALUATE ALPHA EXPR'?
2B83 2728             (      exbasic.asm):01597                 BEQ     LB3DE                             ; YES - RETURN A ZERO VALUE
2B85 DC1F             (      exbasic.asm):01598                 LDD     ARYEND                            ; * GET END OF ARRAYS ADDRESS AND
2B87 DD43             (      exbasic.asm):01599                 STD     V43                               ; * SAVE IT AT V43
2B89 C30007           (      exbasic.asm):01600                 ADDD    #7                                ; = ADD 7 TO END OF ARRAYS (EACH
2B8C DD41             (      exbasic.asm):01601                 STD     V41                               ; = VARIABLE = 7 BYTES) AND SAVE AT V41
2B8E 9E1D             (      exbasic.asm):01602                 LDX     ARYTAB                            ; * GET END OF VARIABLES AND SAVE AT V47
2B90 9F47             (      exbasic.asm):01603                 STX     V47                               ; *
2B92 BD23EB           (      exbasic.asm):01604                 JSR     LAC1E                             ; MAKE A SEVEN BYTE SLOT FOR NEW VARIABLE AT
                      (      exbasic.asm):01605         ;*         TOP  OF VARIABLES
2B95 9E41             (      exbasic.asm):01606                 LDX     V41                               ; = GET NEW END OF ARRAYS AND SAVE IT
2B97 9F1F             (      exbasic.asm):01607                 STX     ARYEND                            ; =
2B99 9E45             (      exbasic.asm):01608                 LDX     V45                               ; * GET NEW END OF VARIABLES AND SAVE IT
2B9B 9F1D             (      exbasic.asm):01609                 STX     ARYTAB                            ; *
2B9D 9E47             (      exbasic.asm):01610                 LDX     V47                               ; GET OLD END OF VARIABLES
2B9F DC37             (      exbasic.asm):01611                 LDD     VARNAM                            ; GET NEW VARIABLE NAME
2BA1 ED81             (      exbasic.asm):01612                 STD     ,X++                              ; SAVE VARIABLE NAME
2BA3 4F               (      exbasic.asm):01613                 CLRA                                      ; * ZERO OUT THE FP VALUE OF THE NUMERIC
2BA4 5F               (      exbasic.asm):01614                 CLRB                                      ; * VARIABLE OR THE LENGTH AND ADDRESS
2BA5 ED84             (      exbasic.asm):01615                 STD     ,X                                ; * OF A STRING VARIABLE
2BA7 ED02             (      exbasic.asm):01616                 STD     2,X                               ; *
2BA9 A704             (      exbasic.asm):01617                 STA     4,X                               ; *
2BAB                  (      exbasic.asm):01618         LB3DC
2BAB 9F39             (      exbasic.asm):01619                 STX     VARPTR                            ; STORE ADDRESS OF VARIABLE VALUE
2BAD                  (      exbasic.asm):01620         LB3DE
2BAD 39               (      exbasic.asm):01621                 RTS
                      (      exbasic.asm):01622         ;*
2BAE                  (      exbasic.asm):01623         LB3DF
2BAE 9080000000       (      exbasic.asm):01624                 FCB     $90,$80,$00,$00,$00               ; * FLOATING POINT -32768
                      (      exbasic.asm):01625         ;*                             ; SMALLEST SIGNED TWO BYTE INTEGER
                      (      exbasic.asm):01626         ;*
2BB3                  (      exbasic.asm):01627         LB3E4
2BB3 BD200B           (      exbasic.asm):01628                 JSR     GETNCH                            ; GET AN INPUT CHARACTER FROM BASIC
2BB6                  (      exbasic.asm):01629         LB3E6
2BB6 BD2906           (      exbasic.asm):01630                 JSR     LB141                             ; GO EVALUATE NUMERIC EXPRESSION
2BB9                  (      exbasic.asm):01631         LB3E9
2BB9 9654             (      exbasic.asm):01632                 LDA     FP0SGN                            ; GET FPA0 MANTISSA SIGN
2BBB 2B5E             (      exbasic.asm):01633                 BMI     LB44A                             ; 'FC' ERROR IF NEGATIVE NUMBER
                      (      exbasic.asm):01634         
                      (      exbasic.asm):01635         
2BBD                  (      exbasic.asm):01636         INTCNV
2BBD BD2908           (      exbasic.asm):01637                 JSR     LB143                             ; 'TM' ERROR IF STRING VARIABLE
2BC0 964F             (      exbasic.asm):01638                 LDA     FP0EXP                            ; GET FPA0 EXPONENT
2BC2 8190             (      exbasic.asm):01639                 CMPA    #$90                              ; * COMPARE TO 32768 - LARGEST INTEGER EXPONENT AND
2BC4 2508             (      exbasic.asm):01640                 BCS     LB3FE                             ; * BRANCH IF FPA0 < 32768
2BC6 8E2BAE           (      exbasic.asm):01641                 LDX     #LB3DF                            ; POINT X TO FP VALUE OF -32768
2BC9 BD343A           (      exbasic.asm):01642                 JSR     LBC96                             ; COMPARE -32768 TO FPA0
2BCC 264D             (      exbasic.asm):01643                 BNE     LB44A                             ; 'FC' ERROR IF NOT =
2BCE                  (      exbasic.asm):01644         LB3FE
2BCE BD346C           (      exbasic.asm):01645                 JSR     LBCC8                             ; CONVERT FPA0 TO A TWO BYTE INTEGER
2BD1 DC52             (      exbasic.asm):01646                 LDD     FPA0+2                            ; GET THE INTEGER
2BD3 39               (      exbasic.asm):01647                 RTS
                      (      exbasic.asm):01648         ;* EVALUATE AN ARRAY VARIABLE
2BD4                  (      exbasic.asm):01649         LB404
2BD4 DC05             (      exbasic.asm):01650                 LDD     DIMFLG                            ; GET ARRAY FLAG AND VARIABLE TYPE
2BD6 3406             (      exbasic.asm):01651                 PSHS    B,A                               ; SAVE THEM ON STACK
2BD8 12               (      exbasic.asm):01652                 NOP                                       ; DEAD SPACE CAUSED BY 1.2 REVISION
2BD9 5F               (      exbasic.asm):01653                 CLRB                                      ; RESET DIMENSION COUNTER
2BDA                  (      exbasic.asm):01654         LB40A
2BDA 9E37             (      exbasic.asm):01655                 LDX     VARNAM                            ; GET VARIABLE NAME
2BDC 3414             (      exbasic.asm):01656                 PSHS    X,B                               ; SAVE VARIABLE NAME AND DIMENSION COUNTER
2BDE 8DD3             (      exbasic.asm):01657                 BSR     LB3E4                             ; EVALUATE EXPRESSION (DIMENSlON LENGTH)
2BE0 3534             (      exbasic.asm):01658                 PULS    B,X,Y                             ; PULL OFF VARIABLE NAME, DIMENSlON COUNTER,
                      (      exbasic.asm):01659         ;*                             ; ARRAY FLAG
2BE2 9F37             (      exbasic.asm):01660                 STX     VARNAM                            ; SAVE VARIABLE NAME AND VARIABLE TYPE
2BE4 DE52             (      exbasic.asm):01661                 LDU     FPA0+2                            ; GET DIMENSION LENGTH
2BE6 3460             (      exbasic.asm):01662                 PSHS    U,Y                               ; SAVE DIMENSION LENGTH, ARRAY FLAG, VARIABLE TYPE
2BE8 5C               (      exbasic.asm):01663                 INCB                                      ; INCREASE DIMENSION COUNTER
2BE9 BD2013           (      exbasic.asm):01664                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
2BEC 812C             (      exbasic.asm):01665                 CMPA    #','                              ; CHECK FOR ANOTHER DIMENSION
2BEE 27EA             (      exbasic.asm):01666                 BEQ     LB40A                             ; BRANCH IF MORE
2BF0 D703             (      exbasic.asm):01667                 STB     TMPLOC                            ; SAVE DIMENSION COUNTER
2BF2 BD2A32           (      exbasic.asm):01668                 JSR     LB267                             ; SYNTAX CHECK FOR A ')'
2BF5 3506             (      exbasic.asm):01669                 PULS    A,B                               ; * RESTORE VARIABLE TYPE AND ARRAY
2BF7 DD05             (      exbasic.asm):01670                 STD     DIMFLG                            ; * FLAG - LEAVE DIMENSION LENGTH ON STACK
2BF9 9E1D             (      exbasic.asm):01671                 LDX     ARYTAB                            ; GET START OF ARRAYS
2BFB                  (      exbasic.asm):01672         LB42A
2BFB 9C1F             (      exbasic.asm):01673                 CMPX    ARYEND                            ; COMPARE TO END OF ARRAYS
2BFD 2721             (      exbasic.asm):01674                 BEQ     LB44F                             ; BRANCH IF NO MATCH FOUND
2BFF DC37             (      exbasic.asm):01675                 LDD     VARNAM                            ; GET VARIABLE IN QUESTION
2C01 10A384           (      exbasic.asm):01676                 CMPD    ,X                                ; COMPARE TO CURRENT VARIABLE
2C04 2706             (      exbasic.asm):01677                 BEQ     LB43B                             ; BRANCH IF =
2C06 EC02             (      exbasic.asm):01678                 LDD     2,X                               ; GET OFFSET TO NEXT ARRAY VARIABLE
2C08 308B             (      exbasic.asm):01679                 LEAX    D,X                               ; ADD TO CURRENT POINTER
2C0A 20EF             (      exbasic.asm):01680                 BRA     LB42A                             ; KEEP SEARCHING
2C0C                  (      exbasic.asm):01681         LB43B
2C0C C612             (      exbasic.asm):01682                 LDB     #2*9                              ; 'REDIMENSIONED ARRAY' ERROR
2C0E 9605             (      exbasic.asm):01683                 LDA     DIMFLG                            ; * TEST ARRAY FLAG - IF <>0 YOU ARE TRYING
2C10 260B             (      exbasic.asm):01684                 BNE     LB44C                             ; * TO REDIMENSION AN ARRAY
2C12 D603             (      exbasic.asm):01685                 LDB     TMPLOC                            ; GET NUMBER OF DIMENSIONS IN ARRAY
2C14 E104             (      exbasic.asm):01686                 CMPB    4,X                               ; COMPARE TO THIS ARRAYS DIMENSIONS
2C16 2759             (      exbasic.asm):01687                 BEQ     LB4A0                             ; BRANCH IF =
2C18                  (      exbasic.asm):01688         LB447
2C18 C610             (      exbasic.asm):01689                 LDB     #8*2                              ; 'BAD SUBSCRIPT'
2C1A 8C               (      exbasic.asm):01690                 FCB     SKP2                              ; SKIP TWO BYTES
2C1B                  (      exbasic.asm):01691         LB44A
2C1B C608             (      exbasic.asm):01692                 LDB     #4*2                              ; 'ILLEGAL FUNCTION CALL'
2C1D                  (      exbasic.asm):01693         LB44C
2C1D 7E2413           (      exbasic.asm):01694                 JMP     LAC46                             ; JUMP TO ERROR SERVICING ROUTINE
                      (      exbasic.asm):01695         
                      (      exbasic.asm):01696         ;* INSERT A NEW ARRAY INTO ARRAY VARIABLES
                      (      exbasic.asm):01697         ;* EACH SET OF ARRAY VARIABLES IS PRECEEDED BY A DE-
                      (      exbasic.asm):01698         ;* SCRIPTOR BLOCK COMPOSED OF 5+2*N BYTES WHERE N IS THE
                      (      exbasic.asm):01699         ;* NUMBER OF DIMENSIONS IN THE ARRAY. THE BLOCK IS DEFINED
                      (      exbasic.asm):01700         ;* AS FOLLOWS: BYTES 0,1:VARIABLE'S NAME; 2,3:TOTAL LENGTH
                      (      exbasic.asm):01701         ;* OF ARRAY ITEMS AND DESCRIPTOR BLOCK; 4:NUMBER OF DIMEN-
                      (      exbasic.asm):01702         ;* ISIONS; 5,6:LENGTH OF DIMENSION 1; 7,8:LENGTH OF DIMEN-
                      (      exbasic.asm):01703         ;* SION 2;... 4+N,5+N:LENGTH OF DIMENSION N.
                      (      exbasic.asm):01704         
2C20                  (      exbasic.asm):01705         LB44F
2C20 CC0005           (      exbasic.asm):01706                 LDD     #5                                ; * 5 BYTES/ARRAY ENTRY SAVE AT COEFPT
2C23 DD64             (      exbasic.asm):01707                 STD     COEFPT                            ; *
2C25 DC37             (      exbasic.asm):01708                 LDD     VARNAM                            ; = GET NAME OF ARRAY AND SAVE IN
2C27 ED84             (      exbasic.asm):01709                 STD     ,X                                ; = FIRST 2 BYTES OF DESCRIPTOR
2C29 D603             (      exbasic.asm):01710                 LDB     TMPLOC                            ; GET NUMBER OF DIMENSIONS AND SAVE IN
2C2B E704             (      exbasic.asm):01711                 STB     4,X                               ; * 5TH BYTE OF DESCRIPTOR
2C2D BD2400           (      exbasic.asm):01712                 JSR     LAC33                             ; CHECK FOR ROOM FOR DESCRIPTOR IN FREE RAM
2C30 9F41             (      exbasic.asm):01713                 STX     V41                               ; TEMPORARILY SAVE DESCRIPTOR ADDRESS
2C32                  (      exbasic.asm):01714         LB461
2C32 C60B             (      exbasic.asm):01715                 LDB     #11                               ; * DEFAULT DIMENSION VALUE:X(10)
2C34 4F               (      exbasic.asm):01716                 CLRA                                      ; *
2C35 0D05             (      exbasic.asm):01717                 TST     DIMFLG                            ; = CHECK ARRAY FLAG AND BRANCH IF
2C37 2705             (      exbasic.asm):01718                 BEQ     LB46D                             ; = NOT DIMENSIONING AN ARRAY
2C39 3506             (      exbasic.asm):01719                 PULS    A,B                               ; GET DIMENSION LENGTH
2C3B C30001           (      exbasic.asm):01720                 ADDD    #1                                ; ADD ONE (X(0) HAS A LENGTH OF ONE)
2C3E                  (      exbasic.asm):01721         LB46D
2C3E ED05             (      exbasic.asm):01722                 STD     5,X                               ; SAVE LENGTH OF ARRAY DIMENSION
2C40 8D5D             (      exbasic.asm):01723                 BSR     LB4CE                             ; MULTIPLY ACCUM ARRAY SIZE NUMBER LENGTH
                      (      exbasic.asm):01724         ;*                             ; OF NEW DIMENSION
2C42 DD64             (      exbasic.asm):01725                 STD     COEFPT                            ; TEMP STORE NEW CURRENT ACCUMULATED ARRAY SIZE
2C44 3002             (      exbasic.asm):01726                 LEAX    2,X                               ; BUMP POINTER UP TWO
2C46 0A03             (      exbasic.asm):01727                 DEC     TMPLOC                            ; * DECREMENT DIMENSION COUNTER AND BRANCH IF
2C48 26E8             (      exbasic.asm):01728                 BNE     LB461                             ; * NOT DONE WITH ALL DIMENSIONS
2C4A 9F0F             (      exbasic.asm):01729                 STX     TEMPTR                            ; SAVE ADDRESS OF (END OF ARRAY DESCRIPTOR - 5)
2C4C D30F             (      exbasic.asm):01730                 ADDD    TEMPTR                            ; ADD TOTAL SIZE OF NEW ARRAY
2C4E 1025F7BF         (      exbasic.asm):01731                 LBCS    LAC44                             ; 'OM' ERROR IF > $FFFF
2C52 1F01             (      exbasic.asm):01732                 TFR     D,X                               ; SAVE END OF ARRAY IN X
2C54 BD2404           (      exbasic.asm):01733                 JSR     LAC37                             ; MAKE SURE THERE IS ENOUGH FREE RAM FOR ARRAY
2C57 830035           (      exbasic.asm):01734                 SUBD    #STKBUF-5                         ; SUBTRACT OUT THE (STACK BUFFER - 5)
2C5A DD1F             (      exbasic.asm):01735                 STD     ARYEND                            ; SAVE NEW END OF ARRAYS
2C5C 4F               (      exbasic.asm):01736                 CLRA                                      ; ZERO = TERMINATOR BYTE
2C5D                  (      exbasic.asm):01737         LB48C
2C5D 301F             (      exbasic.asm):01738                 LEAX    -1,X                              ; * STORE TWO TERMINATOR BYTES AT
2C5F A705             (      exbasic.asm):01739                 STA     5,X                               ; * THE END OF THE ARRAY DESCRIPTOR
2C61 9C0F             (      exbasic.asm):01740                 CMPX    TEMPTR                            ; *
2C63 26F8             (      exbasic.asm):01741                 BNE     LB48C                             ; *
2C65 9E41             (      exbasic.asm):01742                 LDX     V41                               ; GET ADDRESS OF START OF DESCRIPTOR
2C67 961F             (      exbasic.asm):01743                 LDA     ARYEND                            ; GET MSB OF END OF ARRAYS; LSB ALREADY THERE
2C69 9341             (      exbasic.asm):01744                 SUBD    V41                               ; SUBTRACT OUT ADDRESS OF START OF DESCRIPTOR
2C6B ED02             (      exbasic.asm):01745                 STD     2,X                               ; SAVE LENGTH OF (ARRAY AND DESCRIPTOR)
2C6D 9605             (      exbasic.asm):01746                 LDA     DIMFLG                            ; * GET ARRAY FLAG AND BRANCH
2C6F 262D             (      exbasic.asm):01747                 BNE     LB4CD                             ; * BACK IF DIMENSIONING
                      (      exbasic.asm):01748         ;* CALCULATE POINTER TO CORRECT ELEMENT
2C71                  (      exbasic.asm):01749         LB4A0
2C71 E604             (      exbasic.asm):01750                 LDB     4,X                               ; GET THE NUMBER OF DIMENSIONS
2C73 D703             (      exbasic.asm):01751                 STB     TMPLOC                            ; TEMPORARILY SAVE
2C75 4F               (      exbasic.asm):01752                 CLRA                                      ; * INITIALIZE POINTER
2C76 5F               (      exbasic.asm):01753                 CLRB                                      ; * TO ZERO
2C77                  (      exbasic.asm):01754         LB4A6
2C77 DD64             (      exbasic.asm):01755                 STD     COEFPT                            ; SAVE ACCUMULATED POINTER
2C79 3506             (      exbasic.asm):01756                 PULS    A,B                               ; * PULL DIMENSION ARGUMENT OFF THE
2C7B DD52             (      exbasic.asm):01757                 STD     FPA0+2                            ; * STACK AND SAVE IT
2C7D 10A305           (      exbasic.asm):01758                 CMPD    5,X                               ; COMPARE TO STORED 'DIM' ARGUMENT
2C80 243A             (      exbasic.asm):01759                 BCC     LB4EB                             ; 'BS' ERROR IF > = "DIM" ARGUMENT
2C82 DE64             (      exbasic.asm):01760                 LDU     COEFPT                            ; * GET ACCUMULATED POINTER AND
2C84 2704             (      exbasic.asm):01761                 BEQ     LB4B9                             ; * BRANCH IF 1ST DIMENSION
2C86 8D17             (      exbasic.asm):01762                 BSR     LB4CE                             ; = MULTIPLY ACCUMULATED POINTER AND DIMENSION
2C88 D352             (      exbasic.asm):01763                 ADDD    FPA0+2                            ; = LENGTH AND ADD TO CURRENT ARGUMENT
2C8A                  (      exbasic.asm):01764         LB4B9
2C8A 3002             (      exbasic.asm):01765                 LEAX    2,X                               ; MOVE POINTER TO NEXT DIMENSION
2C8C 0A03             (      exbasic.asm):01766                 DEC     TMPLOC                            ; * DECREMENT DIMENSION COUNTER AND
2C8E 26E7             (      exbasic.asm):01767                 BNE     LB4A6                             ; * BRANCH IF ANY DIMENSIONS LEFT
                      (      exbasic.asm):01768         ;* MULTIPLY ACCD BY 5 - 5 BYTES/ARRAY VALUE
2C90 EDE3             (      exbasic.asm):01769                 STD     ,--S
2C92 58               (      exbasic.asm):01770                 ASLB
2C93 49               (      exbasic.asm):01771                 ROLA                                      ; TIMES 2
2C94 58               (      exbasic.asm):01772                 ASLB
2C95 49               (      exbasic.asm):01773                 ROLA                                      ; TIMES 4
2C96 E3E1             (      exbasic.asm):01774                 ADDD    ,S++                              ; TIMES 5
2C98 308B             (      exbasic.asm):01775                 LEAX    D,X                               ; ADD OFFSET TO START OF ARRAY
2C9A 3005             (      exbasic.asm):01776                 LEAX    5,X                               ; ADJUST POINTER FOR SIZE OF DESCRIPTOR
2C9C 9F39             (      exbasic.asm):01777                 STX     VARPTR                            ; SAVE POINTER TO ARRAY VALUE
2C9E                  (      exbasic.asm):01778         LB4CD
2C9E 39               (      exbasic.asm):01779                 RTS
                      (      exbasic.asm):01780         ;* MULTIPLY 2 BYTE NUMBER IN 5,X BY THE 2 BYTE NUMBER
                      (      exbasic.asm):01781         ;* IN COEFPT. RETURN RESULT IN ACCD, BS ERROR IF > $FFFF
2C9F                  (      exbasic.asm):01782         LB4CE
2C9F 8610             (      exbasic.asm):01783                 LDA     #16                               ; 16 SHIFTS TO DO A MULTIPLY
2CA1 9745             (      exbasic.asm):01784                 STA     V45                               ; SHIFT COUNTER
2CA3 EC05             (      exbasic.asm):01785                 LDD     5,X                               ; * GET SIZE OF DIMENSION
2CA5 DD17             (      exbasic.asm):01786                 STD     BOTSTK                            ; * AND SAVE IT
2CA7 4F               (      exbasic.asm):01787                 CLRA                                      ; * ZERO
2CA8 5F               (      exbasic.asm):01788                 CLRB                                      ; * ACCD
2CA9                  (      exbasic.asm):01789         LB4D8
2CA9 58               (      exbasic.asm):01790                 ASLB                                      ; = SHIFT ACCB LEFT
2CAA 49               (      exbasic.asm):01791                 ROLA                                      ; = ONE BIT
2CAB 250F             (      exbasic.asm):01792                 BCS     LB4EB                             ; 'BS' ERROR IF CARRY
2CAD 0865             (      exbasic.asm):01793                 ASL     COEFPT+1                          ; * SHIFT MULTIPLICAND LEFT ONE
2CAF 0964             (      exbasic.asm):01794                 ROL     COEFPT                            ; * BIT - ADD MULTIPLIER TO ACCUMULATOR
2CB1 2404             (      exbasic.asm):01795                 BCC     LB4E6                             ; * IF CARRY <> 0
2CB3 D317             (      exbasic.asm):01796                 ADDD    BOTSTK                            ; ADD MULTIPLIER TO ACCD
2CB5 2505             (      exbasic.asm):01797                 BCS     LB4EB                             ; 'BS' ERROR IF CARRY (>$FFFF)
2CB7                  (      exbasic.asm):01798         LB4E6
2CB7 0A45             (      exbasic.asm):01799                 DEC     V45                               ; * DECREMENT SHIFT COUNTER
2CB9 26EE             (      exbasic.asm):01800                 BNE     LB4D8                             ; * IF NOT DONE
2CBB 39               (      exbasic.asm):01801                 RTS
2CBC                  (      exbasic.asm):01802         LB4EB
2CBC 7E2C18           (      exbasic.asm):01803                 JMP     LB447                             ; 'BS' ERROR
                      (      exbasic.asm):01804         ;*
                      (      exbasic.asm):01805         ;* MEM
                      (      exbasic.asm):01806         ;* THIS IS NOT A TRUE INDICATOR OF FREE MEMORY BECAUSE
                      (      exbasic.asm):01807         ;* BASIC REQUIRES A STKBUF SIZE BUFFER FOR THE STACK
                      (      exbasic.asm):01808         ;* FOR WHICH MEM DOES NOT ALLOW.
                      (      exbasic.asm):01809         ;*
2CBF                  (      exbasic.asm):01810         MEM
2CBF 1F40             (      exbasic.asm):01811                 TFR     S,D                               ; PUT STACK POINTER INTO ACCD
2CC1 931F             (      exbasic.asm):01812                 SUBD    ARYEND                            ; SUBTRACT END OF ARRAYS
2CC3 21               (      exbasic.asm):01813                 FCB     SKP1                              ; SKIP ONE BYTE
                      (      exbasic.asm):01814         ;*CONVERT THE VALUE IN ACCB INTO A FP NUMBER IN FPA0
2CC4                  (      exbasic.asm):01815         LB4F3
2CC4 4F               (      exbasic.asm):01816                 CLRA                                      ; CLEAR MS BYTE OF ACCD
                      (      exbasic.asm):01817         ;* CONVERT THE VALUE IN ACCD INTO A FLOATING POINT NUMBER IN FPA0
2CC5                  (      exbasic.asm):01818         GIVABF
2CC5 0F06             (      exbasic.asm):01819                 CLR     VALTYP                            ; SET VARIABLE TYPE TO NUMERIC
2CC7 DD50             (      exbasic.asm):01820                 STD     FPA0                              ; SAVE ACCD IN TOP OF FACA
2CC9 C690             (      exbasic.asm):01821                 LDB     #$90                              ; EXPONENT REQUIRED IF THE TOP TWO BYTES
                      (      exbasic.asm):01822         ;*         OF   FPA0 ARE TO BE TREATED AS AN INTEGER IN FPA0
2CCB 7E3426           (      exbasic.asm):01823                 JMP     LBC82                             ; CONVERT THE REST OF FPA0 TO AN INTEGER
                      (      exbasic.asm):01824         
                      (      exbasic.asm):01825         ;* STR$
2CCE                  (      exbasic.asm):01826         STR
2CCE BD2908           (      exbasic.asm):01827                 JSR     LB143                             ; 'TM' ERROR IF STRING VARIABLE
2CD1 CEDBD4           (      exbasic.asm):01828                 LDU     #STRBUF+2                         ; *CONVERT FP NUMBER TO ASCII STRING IN
2CD4 BD3583           (      exbasic.asm):01829                 JSR     LBDDC                             ; *THE STRING BUFFER
2CD7 3262             (      exbasic.asm):01830                 LEAS    2,S                               ; PURGE THE RETURN ADDRESS FROM THE STACK
2CD9 8EDBD3           (      exbasic.asm):01831                 LDX     #STRBUF+1                         ; *POINT X TO STRING BUFFER AND SAVE
2CDC 200B             (      exbasic.asm):01832                 BRA     LB518                             ; *THE STRING IN THE STRING SPACE
                      (      exbasic.asm):01833         ;* RESERVE ACCB BYTES OF STRING SPACE. RETURN START
                      (      exbasic.asm):01834         ;* ADDRESS IN (X) AND FRESPC
2CDE                  (      exbasic.asm):01835         LB50D
2CDE 9F4D             (      exbasic.asm):01836                 STX     V4D                               ; SAVE X IN V4D
2CE0                  (      exbasic.asm):01837         LB50F
2CE0 8D5C             (      exbasic.asm):01838                 BSR     LB56D                             ; RESERVE ACCB BYTES IN STRING SPACE
2CE2                  (      exbasic.asm):01839         LB511
2CE2 9F58             (      exbasic.asm):01840                 STX     STRDES+2                          ; SAVE NEW STRING ADDRESS
2CE4 D756             (      exbasic.asm):01841                 STB     STRDES                            ; SAVE LENGTH OF RESERVED BLOCK
2CE6 39               (      exbasic.asm):01842                 RTS
2CE7                  (      exbasic.asm):01843         LB516
2CE7 301F             (      exbasic.asm):01844                 LEAX    -1,X                              ; MOVE POINTER BACK ONE
                      (      exbasic.asm):01845         ;* SCAN A LINE FROM (X) UNTIL AN END OF LINE FLAG (ZERO) OR
                      (      exbasic.asm):01846         ;* EITHER OF THE TWO TERMINATORS STORED IN CHARAC OR ENDCHR IS MATCHED.
                      (      exbasic.asm):01847         ;* THE RESULTING STRING IS STORED IN THE STRING SPACE
                      (      exbasic.asm):01848         ;* ONLY IF THE START OF THE STRING IS <= STRBUF+2
2CE9                  (      exbasic.asm):01849         LB518
2CE9 8622             (      exbasic.asm):01850                 LDA     #$22                              ; * INITIALIZE
2CEB 9701             (      exbasic.asm):01851                 STA     CHARAC                            ; * TERMINATORS
2CED                  (      exbasic.asm):01852         LB51A
2CED 9702             (      exbasic.asm):01853                 STA     ENDCHR                            ; * TO "
2CEF                  (      exbasic.asm):01854         LB51E
2CEF 3001             (      exbasic.asm):01855                 LEAX    1,X                               ; MOVE POINTER UP ONE
2CF1 9F62             (      exbasic.asm):01856                 STX     RESSGN                            ; TEMPORARILY SAVE START OF STRING
2CF3 9F58             (      exbasic.asm):01857                 STX     STRDES+2                          ; SAVE START OF STRING IN TEMP DESCRIPTOR
2CF5 C6FF             (      exbasic.asm):01858                 LDB     #-1                               ; INITIALIZE CHARACTER COUNTER TO - 1
2CF7                  (      exbasic.asm):01859         LB526
2CF7 5C               (      exbasic.asm):01860                 INCB                                      ; INCREMENT CHARACTER COUNTER
2CF8 A680             (      exbasic.asm):01861                 LDA     ,X+                               ; GET CHARACTER
2CFA 270C             (      exbasic.asm):01862                 BEQ     LB537                             ; BRANCH IF END OF LINE
2CFC 9101             (      exbasic.asm):01863                 CMPA    CHARAC                            ; * CHECK FOR TERMINATORS
2CFE 2704             (      exbasic.asm):01864                 BEQ     LB533                             ; * IN CHARAC AND ENDCHR
2D00 9102             (      exbasic.asm):01865                 CMPA    ENDCHR                            ; * DON'T MOVE POINTER BACK
2D02 26F3             (      exbasic.asm):01866                 BNE     LB526                             ; * ONE IF TERMINATOR IS "MATCHED"
2D04                  (      exbasic.asm):01867         LB533
2D04 8122             (      exbasic.asm):01868                 CMPA    #$22                              ; = COMPARE CHARACTER TO STRING DELIMITER
2D06 2702             (      exbasic.asm):01869                 BEQ     LB539                             ; = & DON'T MOVE POINTER BACK IF SO
2D08                  (      exbasic.asm):01870         LB537
2D08 301F             (      exbasic.asm):01871                 LEAX    -1,X                              ; MOVE POINTER BACK ONE
2D0A                  (      exbasic.asm):01872         LB539
2D0A 9F64             (      exbasic.asm):01873                 STX     COEFPT                            ; SAVE END OF STRING ADDRESS
2D0C D756             (      exbasic.asm):01874                 STB     STRDES                            ; SAVE STRING LENGTH IN TEMP DESCRIPTOR
2D0E DE62             (      exbasic.asm):01875                 LDU     RESSGN                            ; GET INITlAL STRING START
2D10 1183DBD4         (      exbasic.asm):01876                 CMPU    #STRBUF+2                         ; COMPARE TO START OF STRING BUFFER
2D14                  (      exbasic.asm):01877         LB543
2D14 2207             (      exbasic.asm):01878                 BHI     LB54C                             ; BRANCH IF > START OF STRING BUFFER
2D16 8DC6             (      exbasic.asm):01879                 BSR     LB50D                             ; GO RESERVE SPACE FOR THE STRING
2D18 9E62             (      exbasic.asm):01880                 LDX     RESSGN                            ; POINT X TO THE BEGINNING OF THE STRING
2D1A BD2E16           (      exbasic.asm):01881                 JSR     LB645                             ; MOVE (B) BYTES FROM (X) TO
                      (      exbasic.asm):01882         ;*                             [FRESPC] - MOVE STRING DATA
                      (      exbasic.asm):01883         ;* PUT DIRECT PAGE STRING DESCRIPTOR BUFFER DATA
                      (      exbasic.asm):01884         ;* ON THE STRING STACK. SET VARIABLE TYPE TO STRING
2D1D                  (      exbasic.asm):01885         LB54C
2D1D 9E0B             (      exbasic.asm):01886                 LDX     TEMPPT                            ; GET NEXT AVAILABLE STRING STACK DESCRIPTOR
2D1F 8CDAD5           (      exbasic.asm):01887                 CMPX    #LINHDR                           ; COMPARE TO TOP OF STRING DESCRIPTOR STACK - WAS #CFNBUF
2D22 2605             (      exbasic.asm):01888                 BNE     LB558                             ; FORMULA O.K.
2D24 C61E             (      exbasic.asm):01889                 LDB     #15*2                             ; STRING FORMULA TOO COMPLEX' ERROR
2D26                  (      exbasic.asm):01890         LB555
2D26 7E2413           (      exbasic.asm):01891                 JMP     LAC46                             ; JUMP TO ERROR SERVICING ROUTINE
2D29                  (      exbasic.asm):01892         LB558
2D29 9656             (      exbasic.asm):01893                 LDA     STRDES                            ; * GET LENGTH OF STRING AND SAVE IT
                      (      exbasic.asm):01894         ;*         STA  ,X             ; * IN BYTE 0 OF DESCRIPTOR
2D2B A700             (      exbasic.asm):01895                 FCB     $A7,$00
2D2D DC58             (      exbasic.asm):01896                 LDD     STRDES+2                          ; = GET START ADDRESS OF ACTUAL STRING
2D2F ED02             (      exbasic.asm):01897                 STD     2,X                               ; = AND SAVE IN BYTES 2,3 OF DESCRIPTOR
2D31 86FF             (      exbasic.asm):01898                 LDA     #$FF                              ; * VARIABLE TYPE = STRING
2D33 9706             (      exbasic.asm):01899                 STA     VALTYP                            ; * SAVE IN VARIABLE TYPE FLAG
2D35 9F0D             (      exbasic.asm):01900                 STX     LASTPT                            ; = SAVE START OF DESCRIPTOR
2D37 9F52             (      exbasic.asm):01901                 STX     FPA0+2                            ; = ADDRESS IN LASTPT AND FPA0
2D39 3005             (      exbasic.asm):01902                 LEAX    5,X                               ; 5 BYTES/STRING DESCRIPTOR
2D3B 9F0B             (      exbasic.asm):01903                 STX     TEMPPT                            ; NEXT AVAILABLE STRING VARIABLE DESCRIPTOR
2D3D 39               (      exbasic.asm):01904                 RTS
                      (      exbasic.asm):01905         ;* RESERVE ACCB BYTES IN STRING STORAGE SPACE
                      (      exbasic.asm):01906         ;* RETURN WITH THE STARTING ADDRESS OF THE
                      (      exbasic.asm):01907         ;* RESERVED STRING SPACE IN (X) AND FRESPC
2D3E                  (      exbasic.asm):01908         LB56D
2D3E 0F07             (      exbasic.asm):01909                 CLR     GARBFL                            ; CLEAR STRING REORGANIZATION FLAG
2D40                  (      exbasic.asm):01910         LB56F
2D40 4F               (      exbasic.asm):01911                 CLRA                                      ; * PUSH THE LENGTH OF THE
2D41 3406             (      exbasic.asm):01912                 PSHS    B,A                               ; * STRING ONTO THE STACK
2D43 DC23             (      exbasic.asm):01913                 LDD     STRTAB                            ; GET START OF STRING VARIABLES
2D45 A3E0             (      exbasic.asm):01914                 SUBD    ,S+                               ; SUBTRACT STRING LENGTH
2D47 109321           (      exbasic.asm):01915                 CMPD    FRETOP                            ; COMPARE TO START OF STRING STORAGE
2D4A 250A             (      exbasic.asm):01916                 BCS     LB585                             ; IF BELOW START, THEN REORGANIZE
2D4C DD23             (      exbasic.asm):01917                 STD     STRTAB                            ; SAVE NEW START OF STRING VARIABLES
2D4E 9E23             (      exbasic.asm):01918                 LDX     STRTAB                            ; GET START OF STRING VARIABLES
2D50 3001             (      exbasic.asm):01919                 LEAX    1,X                               ; ADD ONE
2D52 9F25             (      exbasic.asm):01920                 STX     FRESPC                            ; SAVE START ADDRESS OF NEWLY RESERVED SPACE
2D54 3584             (      exbasic.asm):01921                 PULS    B,PC                              ; RESTORE NUMBER OF BYTES RESERVED AND RETURN
2D56                  (      exbasic.asm):01922         LB585
2D56 C61A             (      exbasic.asm):01923                 LDB     #2*13                             ; OUT OF STRING SPACE' ERROR
2D58 0307             (      exbasic.asm):01924                 COM     GARBFL                            ; TOGGLE REORGANIZATiON FLAG
2D5A 27CA             (      exbasic.asm):01925                 BEQ     LB555                             ; ERROR IF FRESHLY REORGANIZED
2D5C 8D04             (      exbasic.asm):01926                 BSR     LB591                             ; GO REORGANIZE STRING SPACE
2D5E 3504             (      exbasic.asm):01927                 PULS    B                                 ; GET BACK THE NUMBER OF BYTES TO RESERVE
2D60 20DE             (      exbasic.asm):01928                 BRA     LB56F                             ; TRY TO RESERVE ACCB BYTES AGAIN
                      (      exbasic.asm):01929         ;* REORGANIZE THE STRING SPACE
2D62                  (      exbasic.asm):01930         LB591
2D62 9E27             (      exbasic.asm):01931                 LDX     MEMSIZ                            ; GET THE TOP OF STRING SPACE
2D64                  (      exbasic.asm):01932         LB593
2D64 9F23             (      exbasic.asm):01933                 STX     STRTAB                            ; SAVE TOP OF UNORGANIZED STRING SPACE
2D66 4F               (      exbasic.asm):01934                 CLRA                                      ; * ZERO OUT ACCD
2D67 5F               (      exbasic.asm):01935                 CLRB                                      ; * AND RESET VARIABLE
2D68 DD4B             (      exbasic.asm):01936                 STD     V4B                               ; * POINTER TO 0
2D6A 9E21             (      exbasic.asm):01937                 LDX     FRETOP                            ; POINT X TO START OF STRING SPACE
2D6C 9F47             (      exbasic.asm):01938                 STX     V47                               ; SAVE POINTER IN V47
2D6E 8ED800           (      exbasic.asm):01939                 LDX     #STRSTK                           ; POINT X TO START OF STRING DESCRIPTOR STACK
2D71                  (      exbasic.asm):01940         LB5A0
2D71 9C0B             (      exbasic.asm):01941                 CMPX    TEMPPT                            ; COMPARE TO ADDRESS OF NEXT AVAILABLE DESCRIPTOR
2D73 2704             (      exbasic.asm):01942                 BEQ     LB5A8                             ; BRANCH IF TOP OF STRING STACK
2D75 8D32             (      exbasic.asm):01943                 BSR     LB5D8                             ; CHECK FOR STRING IN UNORGANIZED STRING SPACE
2D77 20F8             (      exbasic.asm):01944                 BRA     LB5A0                             ; KEEP CHECKING
2D79                  (      exbasic.asm):01945         LB5A8
2D79 9E1B             (      exbasic.asm):01946                 LDX     VARTAB                            ; GET THE END OF BASIC PROGRAM
2D7B                  (      exbasic.asm):01947         LB5AA
2D7B 9C1D             (      exbasic.asm):01948                 CMPX    ARYTAB                            ; COMPARE TO END OF VARIABLES
2D7D 2704             (      exbasic.asm):01949                 BEQ     LB5B2                             ; BRANCH IF AT TOP OF VARIABLES
2D7F 8D22             (      exbasic.asm):01950                 BSR     LB5D2                             ; CHECK FOR STRING IN UNORGANIZED STRING SPACE
2D81 20F8             (      exbasic.asm):01951                 BRA     LB5AA                             ; KEEP CHECKING VARIABLES
2D83                  (      exbasic.asm):01952         LB5B2
2D83 9F41             (      exbasic.asm):01953                 STX     V41                               ; SAVE ADDRESS OF THE END OF VARIABLES
2D85                  (      exbasic.asm):01954         LB5B4
2D85 9E41             (      exbasic.asm):01955                 LDX     V41                               ; GET CURRENT ARRAY POINTER
2D87                  (      exbasic.asm):01956         LB5B6
2D87 9C1F             (      exbasic.asm):01957                 CMPX    ARYEND                            ; COMPARE TO THE END OF ARRAYS
2D89 2735             (      exbasic.asm):01958                 BEQ     LB5EF                             ; BRANCH IF AT END OF ARRAYS
2D8B EC02             (      exbasic.asm):01959                 LDD     2,X                               ; GET LENGTH OF ARRAY AND DESCRIPTOR
2D8D D341             (      exbasic.asm):01960                 ADDD    V41                               ; * ADD TO CURRENT ARRAY POINTER
2D8F DD41             (      exbasic.asm):01961                 STD     V41                               ; * AND SAVE IT
2D91 A601             (      exbasic.asm):01962                 LDA     1,X                               ; GET 1ST CHARACTER OF VARIABLE NAME
2D93 2AF0             (      exbasic.asm):01963                 BPL     LB5B4                             ; BRANCH IF NUMERIC ARRAY
2D95 E604             (      exbasic.asm):01964                 LDB     4,X                               ; GET THE NUMBER OF DIMENSIONS IN THIS ARRAY
2D97 58               (      exbasic.asm):01965                 ASLB                                      ; MULTIPLY BY 2
2D98 CB05             (      exbasic.asm):01966                 ADDB    #5                                ; ADD FIVE BYTES (VARIABLE NAME, ARRAY
                      (      exbasic.asm):01967         ;*                             ; LENGTH, NUMBER DIMENSIONS)
2D9A 3A               (      exbasic.asm):01968                 ABX                                       ; X NOW POINTS TO START OF ARRAY ELEMENTS
2D9B                  (      exbasic.asm):01969         LB5CA
2D9B 9C41             (      exbasic.asm):01970                 CMPX    V41                               ; AT END OF THIS ARRAY?
2D9D 27E8             (      exbasic.asm):01971                 BEQ     LB5B6                             ; YES - CHECK FOR ANOTHER
2D9F 8D08             (      exbasic.asm):01972                 BSR     LB5D8                             ; CHECK FOR STRING LOCATED IN
                      (      exbasic.asm):01973         ;*                             ; UNORGANIZED STRING SPACE
2DA1 20F8             (      exbasic.asm):01974                 BRA     LB5CA                             ; KEEP CHECKING ELEMENTS IN THIS ARRAY
2DA3                  (      exbasic.asm):01975         LB5D2
2DA3 A601             (      exbasic.asm):01976                 LDA     1,X                               ; GET F1RST BYTE OF VARIABLE NAME
2DA5 3002             (      exbasic.asm):01977                 LEAX    2,X                               ; MOVE POINTER TO DESCRIPTOR
2DA7 2A14             (      exbasic.asm):01978                 BPL     LB5EC                             ; BRANCH IF VARIABLE IS NUMERIC
                      (      exbasic.asm):01979         ;* SEARCH FOR STRING - ENTER WITH X POINTING TO
                      (      exbasic.asm):01980         ;* THE STRING DESCRIPTOR. IF STRING IS STORED
                      (      exbasic.asm):01981         ;* BETWEEN V47 AND STRTAB, SAVE DESCRIPTOR POINTER
                      (      exbasic.asm):01982         ;* IN V4B AND RESET V47 TO STRING ADDRESS
2DA9                  (      exbasic.asm):01983         LB5D8
2DA9 E684             (      exbasic.asm):01984                 LDB     ,X                                ; GET THE LENGTH OF THE STRING
2DAB 2710             (      exbasic.asm):01985                 BEQ     LB5EC                             ; BRANCH IF NULL - NO STRING
2DAD EC02             (      exbasic.asm):01986                 LDD     2,X                               ; GET STARTING ADDRESS OF THE STRING
2DAF 109323           (      exbasic.asm):01987                 CMPD    STRTAB                            ; COMPARE TO THE START OF STRING VARIABLES
2DB2 2209             (      exbasic.asm):01988                 BHI     LB5EC                             ; BRANCH IF THIS STRING IS STORED IN
                      (      exbasic.asm):01989         ;*              ; THE STRING VARIABLES
2DB4 109347           (      exbasic.asm):01990                 CMPD    V47                               ; COMPARE TO START OF STRING SPACE
2DB7 2304             (      exbasic.asm):01991                 BLS     LB5EC                             ; BRANCH IF NOT STORED IN THE STRING SPACE
2DB9 9F4B             (      exbasic.asm):01992                 STX     V4B                               ; SAVE VARIABLE POINTER IF STORED IN STRING SPACE
2DBB DD47             (      exbasic.asm):01993                 STD     V47                               ; SAVE STRING STARTING ADDRESS
2DBD                  (      exbasic.asm):01994         LB5EC
2DBD 3005             (      exbasic.asm):01995                 LEAX    5,X                               ; MOVE TO NEXT VARIABLE DESCRIPTOR
2DBF                  (      exbasic.asm):01996         LB5EE
2DBF 39               (      exbasic.asm):01997                 RTS
2DC0                  (      exbasic.asm):01998         LB5EF
2DC0 9E4B             (      exbasic.asm):01999                 LDX     V4B                               ; GET ADDRESS OF THE DESCRIPTOR FOR THE
                      (      exbasic.asm):02000         ;*              ; STRING WHICH IS STORED IN THE HIGHEST RAM ADDRESS IN
                      (      exbasic.asm):02001         ;*              ; THE UNORGANIZED STRING SPACE
2DC2 27FB             (      exbasic.asm):02002                 BEQ     LB5EE                             ; BRANCH IF NONE FOUND AND REORGANIZATION DONE
2DC4 4F               (      exbasic.asm):02003                 CLRA                                      ; CLEAR MS BYTE OF LENGTH
2DC5 E684             (      exbasic.asm):02004                 LDB     ,X                                ; GET LENGTH OF STRING
2DC7 5A               (      exbasic.asm):02005                 DECB                                      ; SUBTRACT ONE
2DC8 D347             (      exbasic.asm):02006                 ADDD    V47                               ; ADD LENGTH OF STRING TO ITS STARTING ADDRESS
2DCA DD43             (      exbasic.asm):02007                 STD     V43                               ; SAVE AS MOVE STARTING ADDRESS
2DCC 9E23             (      exbasic.asm):02008                 LDX     STRTAB                            ; POINT X TO THE START OF ORGANIZED STRING VARIABLES
2DCE 9F41             (      exbasic.asm):02009                 STX     V41                               ; SAVE AS MOVE ENDING ADDRESS
2DD0 BD23ED           (      exbasic.asm):02010                 JSR     LAC20                             ; MOVE STRING FROM CURRENT POSITION TO THE
                      (      exbasic.asm):02011         ;*              ; TOP OF UNORGANIZED STRING SPACE
2DD3 9E4B             (      exbasic.asm):02012                 LDX     V4B                               ; POINT X TO STRING DESCRIPTOR
2DD5 DC45             (      exbasic.asm):02013                 LDD     V45                               ; * GET NEW STARTING ADDRESS OF STRING AND
2DD7 ED02             (      exbasic.asm):02014                 STD     2,X                               ; * SAVE IT IN DESCRIPTOR
2DD9 9E45             (      exbasic.asm):02015                 LDX     V45                               ; GET NEW TOP OF UNORGANIZED STRING SPACE
2DDB 301F             (      exbasic.asm):02016                 LEAX    -1,X                              ; MOVE POINTER BACK ONE
2DDD 7E2D64           (      exbasic.asm):02017                 JMP     LB593                             ; JUMP BACK AND REORGANIZE SOME MORE
                      (      exbasic.asm):02018         
                      (      exbasic.asm):02019         
2DE0                  (      exbasic.asm):02020         LB60F
2DE0 DC52             (      exbasic.asm):02021                 LDD     FPA0+2                            ; * GET DESCRIPTOR ADDRESS OF STRING A
2DE2 3406             (      exbasic.asm):02022                 PSHS    B,A                               ; * AND SAVE IT ON THE STACK
2DE4 BD29EB           (      exbasic.asm):02023                 JSR     LB223                             ; GET DESCRIPTOR ADDRESS OF STRING B
2DE7 BD290B           (      exbasic.asm):02024                 JSR     LB146                             ; 'TM' ERROR IF NUMERIC VARIABLE
2DEA 3510             (      exbasic.asm):02025                 PULS    X                                 ; * POINT X TO STRING A DESCRIPTOR
2DEC 9F62             (      exbasic.asm):02026                 STX     RESSGN                            ; * ADDRESS AND SAVE IT IN RESSGN
2DEE E684             (      exbasic.asm):02027                 LDB     ,X                                ; GET LENGTH OF STRING A
2DF0 9E52             (      exbasic.asm):02028                 LDX     FPA0+2                            ; POINT X TO DESCRIPTOR OF STRING B
2DF2 EB84             (      exbasic.asm):02029                 ADDB    ,X                                ; ADD LENGTH OF STRING B TO STR1NG A
2DF4 2405             (      exbasic.asm):02030                 BCC     LB62A                             ; BRANCH IF LENGTH < 256
2DF6 C61C             (      exbasic.asm):02031                 LDB     #2*14                             ; 'STRING TOO LONG' ERROR IF LENGTH > 255
2DF8 7E2413           (      exbasic.asm):02032                 JMP     LAC46                             ; JUMP TO ERROR SERVICING ROUTINE
2DFB                  (      exbasic.asm):02033         LB62A
2DFB BD2CDE           (      exbasic.asm):02034                 JSR     LB50D                             ; RESERVE ROOM IN STRING SPACE FOR NEW STRING
2DFE 9E62             (      exbasic.asm):02035                 LDX     RESSGN                            ; GET DESCRIPTOR ADDRESS OF STRING A
2E00 E684             (      exbasic.asm):02036                 LDB     ,X                                ; GET LENGTH OF STRING A
2E02 8D10             (      exbasic.asm):02037                 BSR     LB643                             ; MOVE STRING A INTO RESERVED BUFFER IN STRING SPACE
2E04 9E4D             (      exbasic.asm):02038                 LDX     V4D                               ; GET DESCRIPTOR ADDRESS OF STRING B
2E06 8D22             (      exbasic.asm):02039                 BSR     LB659                             ; GET LENGTH AND ADDRESS OF STRING B
2E08 8D0C             (      exbasic.asm):02040                 BSR     LB645                             ; MOVE STRING B INTO REST OF RESERVED BUFFER
2E0A 9E62             (      exbasic.asm):02041                 LDX     RESSGN                            ; POINT X TO DESCRIPTOR OF STRING A
2E0C 8D1C             (      exbasic.asm):02042                 BSR     LB659                             ; DELETE STRING A IF LAST STRING ON STRING STACK
2E0E BD2D1D           (      exbasic.asm):02043                 JSR     LB54C                             ; PUT STRING DESCRIPTOR ON THE STRING STACK
2E11 7E292D           (      exbasic.asm):02044                 JMP     LB168                             ; BRANCH BACK TO EXPRESSION EVALUATION
                      (      exbasic.asm):02045         ;
                      (      exbasic.asm):02046         ;* MOVE (B) BYTES FROM 2,X TO FRESPC
2E14                  (      exbasic.asm):02047         LB643
2E14 AE02             (      exbasic.asm):02048                 LDX     2,X                               ; POINT X TO SOURCE ADDRESS
2E16                  (      exbasic.asm):02049         LB645
2E16 DE25             (      exbasic.asm):02050                 LDU     FRESPC                            ; POINT U TO DESTINATION ADDRESS
2E18 5C               (      exbasic.asm):02051                 INCB                                      ; COMPENSATION FOR THE DECB BELOW
2E19 2004             (      exbasic.asm):02052                 BRA     LB64E                             ; GO MOVE THE BYTES
                      (      exbasic.asm):02053         ;* MOVE B BYTES FROM (X) TO (U)
2E1B                  (      exbasic.asm):02054         LB64A
2E1B A680             (      exbasic.asm):02055                 LDA     ,X+                               ; * GET A SOURCE BYTE AND MOVE IT
2E1D A7C0             (      exbasic.asm):02056                 STA     ,U+                               ; * TO THE DESTINATION
2E1F                  (      exbasic.asm):02057         LB64E
2E1F 5A               (      exbasic.asm):02058                 DECB                                      ; DECREMENT BYTE COUNTER
2E20 26F9             (      exbasic.asm):02059                 BNE     LB64A                             ; BRANCH IF ALL BYTES NOT MOVED
2E22 DF25             (      exbasic.asm):02060                 STU     FRESPC                            ; SAVE ENDING ADDRESS IN FRESPC
2E24 39               (      exbasic.asm):02061                 RTS
                      (      exbasic.asm):02062         ;* RETURN LENGTH (ACCB) AND ADDRESS (X) OF
                      (      exbasic.asm):02063         ;* STRING WHOSE DESCRIPTOR IS IN FPA0+2
                      (      exbasic.asm):02064         ;* DELETE THE STRING IF IT IS THE LAST ONE
                      (      exbasic.asm):02065         ;* PUT ON THE STRING STACK. REMOVE STRING FROM STRING
                      (      exbasic.asm):02066         ;* SPACE IF IT IS AT THE BOTTOM OF STRING VARIABLES.
2E25                  (      exbasic.asm):02067         LB654
2E25 BD290B           (      exbasic.asm):02068                 JSR     LB146                             ; 'TM' ERROR IF VARIABLE TYPE = NUMERIC
2E28                  (      exbasic.asm):02069         LB657
2E28 9E52             (      exbasic.asm):02070                 LDX     FPA0+2                            ; GET ADDRESS OF SELECTED STRING DESCRIPTOR
2E2A                  (      exbasic.asm):02071         LB659
2E2A E684             (      exbasic.asm):02072                 LDB     ,X                                ; GET LENGTH OF STRING
2E2C 8D18             (      exbasic.asm):02073                 BSR     LB675                             ; * CHECK TO SEE IF THIS STRING DESCRIPTOR WAS
2E2E 2613             (      exbasic.asm):02074                 BNE     LB672                             ; * THE LAST ONE PUT ON THE STRING STACK AND
                      (      exbasic.asm):02075         ;*                             ; * BRANCH IF NOT
2E30 AE07             (      exbasic.asm):02076                 LDX     5+2,X                             ; GET START ADDRESS OF STRING JUST REMOVED
2E32 301F             (      exbasic.asm):02077                 LEAX    -1,X                              ; MOVE POINTER DOWN ONE
2E34 9C23             (      exbasic.asm):02078                 CMPX    STRTAB                            ; COMPARE TO START OF STRING VARIABLES
2E36 2608             (      exbasic.asm):02079                 BNE     LB66F                             ; BRANCH IF THIS STRING IS NOT AT THE BOTTOM
                      (      exbasic.asm):02080         ;*                             ; OF STRING VARIABLES
2E38 3404             (      exbasic.asm):02081                 PSHS    B                                 ; SAVE LENGTH; ACCA WAS CLEARED
2E3A D323             (      exbasic.asm):02082                 ADDD    STRTAB                            ; * ADD THE LENGTH OF THE JUST REMOVED STRING
2E3C DD23             (      exbasic.asm):02083                 STD     STRTAB                            ; * TO THE START OF STRING VARIABLES - THIS WILL
                      (      exbasic.asm):02084         ;*                             ; * REMOVE THE STRING FROM THE STRING SPACE
2E3E 3504             (      exbasic.asm):02085                 PULS    B                                 ; RESTORE LENGTH
2E40                  (      exbasic.asm):02086         LB66F
2E40 3001             (      exbasic.asm):02087                 LEAX    1,X                               ; ADD ONE TO POINTER
2E42 39               (      exbasic.asm):02088                 RTS
2E43                  (      exbasic.asm):02089         LB672
2E43 AE02             (      exbasic.asm):02090                 LDX     2,X                               ; *POINT X TO ADDRESS OF STRING NOT
2E45 39               (      exbasic.asm):02091                 RTS                                       ; *ON THE STRING STACK
                      (      exbasic.asm):02092         ;* REMOVE STRING FROM STRING STACK. ENTER WITH X
                      (      exbasic.asm):02093         ;* POINTING TO A STRING DESCRIPTOR - DELETE THE
                      (      exbasic.asm):02094         ;* STRING FROM STACK IF IT IS ON TOP OF THE
                      (      exbasic.asm):02095         ;* STACK. IF THE STRING IS DELETED, SET THE ZERO FLAG
2E46                  (      exbasic.asm):02096         LB675
2E46 9C0D             (      exbasic.asm):02097                 CMPX    LASTPT                            ; *COMPARE TO LAST USED DESCRIPTOR ADDRESS
2E48 2607             (      exbasic.asm):02098                 BNE     LB680                             ; *ON THE STRING STACK, RETURN IF DESCRIPTOR
                      (      exbasic.asm):02099         ;*                             ; *ADDRESS NOT ON THE STRING STACK
2E4A 9F0B             (      exbasic.asm):02100                 STX     TEMPPT                            ; SAVE LAST USED DESCRIPTOR AS NEXT AVAILABLE
2E4C 301B             (      exbasic.asm):02101                 LEAX    -5,X                              ; * MOVE LAST USED DESCRIPTOR BACK 5 BYTES
2E4E 9F0D             (      exbasic.asm):02102                 STX     LASTPT                            ; * AND SAVE AS THE LAST USED DESCRIPTOR ADDR
2E50 4F               (      exbasic.asm):02103                 CLRA                                      ; SET ZERO FLAG
2E51                  (      exbasic.asm):02104         LB680
2E51 39               (      exbasic.asm):02105                 RTS
                      (      exbasic.asm):02106         
                      (      exbasic.asm):02107         ;* LEN
2E52                  (      exbasic.asm):02108         LEN
2E52 8D03             (      exbasic.asm):02109                 BSR     LB686                             ; POINT X TO PROPER STRING AND GET LENGTH
2E54                  (      exbasic.asm):02110         LB683
2E54 7E2CC4           (      exbasic.asm):02111                 JMP     LB4F3                             ; CONVERT ACCB TO FP NUMBER IN FPA0
                      (      exbasic.asm):02112         ;* POINT X TO STRING ADDRESS LOAD LENGTH INTO
                      (      exbasic.asm):02113         ;* ACCB. ENTER WITH THE STRING DESCRIPTOR IN
                      (      exbasic.asm):02114         ;* BOTTOM TWO BYTES OF FPA0
2E57                  (      exbasic.asm):02115         LB686
2E57 8DCC             (      exbasic.asm):02116                 BSR     LB654                             ; GET LENGTH AND ADDRESS OF STRING
2E59 0F06             (      exbasic.asm):02117                 CLR     VALTYP                            ; SET VARIABLE TYPE TO NUMERIC
2E5B 5D               (      exbasic.asm):02118                 TSTB                                      ; SET FLAGS ACCORDING TO LENGTH
2E5C 39               (      exbasic.asm):02119                 RTS
                      (      exbasic.asm):02120         ;
                      (      exbasic.asm):02121         ;* CHR$
2E5D                  (      exbasic.asm):02122         CHR
2E5D BD2EE1           (      exbasic.asm):02123                 JSR     LB70E                             ; CONVERT FPA0 TO AN INTEGER IN ACCD
2E60                  (      exbasic.asm):02124         LB68F
2E60 C601             (      exbasic.asm):02125                 LDB     #1                                ; * RESERVE ONE BYTE IN
2E62 BD2D3E           (      exbasic.asm):02126                 JSR     LB56D                             ; * THE STRING SPACE
2E65 9653             (      exbasic.asm):02127                 LDA     FPA0+3                            ; GET ASCII STRING VALUE
2E67 BD2CE2           (      exbasic.asm):02128                 JSR     LB511                             ; SAVE RESERVED STRING DESCRIPTOR IN TEMP DESCRIPTOR
2E6A A784             (      exbasic.asm):02129                 STA     ,X                                ; SAVE THE STRING (IT'S ONLY ONE BYTE)
2E6C                  (      exbasic.asm):02130         LB69B
2E6C 3262             (      exbasic.asm):02131                 LEAS    2,S                               ; PURGE THE RETURN ADDRESS OFF OF THE STACK
2E6E                  (      exbasic.asm):02132         LB69D
2E6E 7E2D1D           (      exbasic.asm):02133                 JMP     LB54C                             ; PUT TEMP DESCRIPTOR DATA ONTO STRING STACK
                      (      exbasic.asm):02134         ;
                      (      exbasic.asm):02135         ;
2E71                  (      exbasic.asm):02136         ASC
2E71 8D02             (      exbasic.asm):02137                 BSR     LB6A4                             ; PUT 1ST CHARACTER OF STRING INTO ACCB
2E73 20DF             (      exbasic.asm):02138                 BRA     LB683                             ; CONVERT ACCB INTO FP NUMBER IN FPA0
2E75                  (      exbasic.asm):02139         LB6A4
2E75 8DE0             (      exbasic.asm):02140                 BSR     LB686                             ; POINT X TO STRING DESCRIPTOR
2E77 275F             (      exbasic.asm):02141                 BEQ     LB706                             ; 'FC' ERROR IF NULL STRING
2E79 E684             (      exbasic.asm):02142                 LDB     ,X                                ; GET FIRST BYTE OF STRING
2E7B 39               (      exbasic.asm):02143                 RTS
                      (      exbasic.asm):02144         
                      (      exbasic.asm):02145         
2E7C                  (      exbasic.asm):02146         LEFT
2E7C 8D49             (      exbasic.asm):02147                 BSR     LB6F5                             ; GET ARGUMENTS FROM STACK
2E7E                  (      exbasic.asm):02148         LB6AD
2E7E 4F               (      exbasic.asm):02149                 CLRA                                      ; CLEAR STRING POINTER OFFSET - OFFSET = 0 FOR LEFT$
2E7F                  (      exbasic.asm):02150         LB6AE
2E7F E184             (      exbasic.asm):02151                 CMPB    ,X                                ; * COMPARE LENGTH PARAMETER TO LENGTH OF
2E81 2303             (      exbasic.asm):02152                 BLS     LB6B5                             ; * STRING AND BRANCH IF LENGTH OF STRING
                      (      exbasic.asm):02153         ;*                             ; >= LENGTH PARAMETER
2E83 E684             (      exbasic.asm):02154                 LDB     ,X                                ; USE LENGTH OF STRING OTHERWISE
2E85 4F               (      exbasic.asm):02155                 CLRA                                      ; CLEAR STRING POINTER OFFSET (0 FOR LEFT$)
2E86                  (      exbasic.asm):02156         LB6B5
2E86 3406             (      exbasic.asm):02157                 PSHS    B,A                               ; PUSH PARAMETERS ONTO STACK
2E88 BD2CE0           (      exbasic.asm):02158                 JSR     LB50F                             ; RESERVE ACCB BYTES IN THE STRING SPACE
2E8B 9E4D             (      exbasic.asm):02159                 LDX     V4D                               ; POINT X TO STRING DESCRIPTOR
2E8D 8D9B             (      exbasic.asm):02160                 BSR     LB659                             ; GET ADDRESS OF OLD STRING (X=ADDRESS)
2E8F 3504             (      exbasic.asm):02161                 PULS    B                                 ; * PULL STRING POINTER OFFSET OFF OF THE STACK
2E91 3A               (      exbasic.asm):02162                 ABX                                       ; * AND ADD IT TO STRING ADDRESS
2E92 3504             (      exbasic.asm):02163                 PULS    B                                 ; PULL LENGTH PARAMETER OFF OF THE STACK
2E94 BD2E16           (      exbasic.asm):02164                 JSR     LB645                             ; MOVE ACCB BYTES FROM (X) TO [FRESPC]
2E97 20D5             (      exbasic.asm):02165                 BRA     LB69D                             ; PUT TEMP STRING DESCRIPTOR ONTO THE STRING STACK
                      (      exbasic.asm):02166         
                      (      exbasic.asm):02167         ;* RIGHT$
2E99                  (      exbasic.asm):02168         RIGHT
2E99 8D2C             (      exbasic.asm):02169                 BSR     LB6F5                             ; GET ARGUMENTS FROM STACK
2E9B A084             (      exbasic.asm):02170                 SUBA    ,X                                ; ACCA=LENGTH PARAMETER - LENGTH OF OLD STRING
2E9D 40               (      exbasic.asm):02171                 NEGA                                      ; NOW ACCA = LENGTH OF OLD STRING
2E9E 20DF             (      exbasic.asm):02172                 BRA     LB6AE                             ; PUT NEW STRING IN THE STRING SPACE
                      (      exbasic.asm):02173         ;
                      (      exbasic.asm):02174         ;* MID$
2EA0                  (      exbasic.asm):02175         MID
2EA0 C6FF             (      exbasic.asm):02176                 LDB     #$FF                              ; * GET DEFAULT VALUE OF LENGTH AND
2EA2 D753             (      exbasic.asm):02177                 STB     FPA0+3                            ; * SAVE IT IN FPA0
2EA4 BD2013           (      exbasic.asm):02178                 JSR     GETCCH                            ; GET CURRENT CHARACTER FROM BASIC
2EA7 8129             (      exbasic.asm):02179                 CMPA    #')'                              ; ARGUMENT DELIMITER?
2EA9 2705             (      exbasic.asm):02180                 BEQ     LB6DE                             ; YES - NO LENGTH PARAMETER GIVEN
2EAB BD2A38           (      exbasic.asm):02181                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
2EAE 8D2E             (      exbasic.asm):02182                 BSR     LB70B                             ; EVALUATE NUMERIC EXPRESSION (LENGTH)
2EB0                  (      exbasic.asm):02183         LB6DE
2EB0 8D15             (      exbasic.asm):02184                 BSR     LB6F5                             ; GET ARGUMENTS FROM STACK
2EB2 2724             (      exbasic.asm):02185                 BEQ     LB706                             ; 'FC' ERROR IF NULL STRING
2EB4 5F               (      exbasic.asm):02186                 CLRB                                      ; CLEAR LENGTH COUNTER (DEFAULT VALUE)
2EB5 4A               (      exbasic.asm):02187                 DECA                                      ; *SUOTRACT ONE FROM POSITION PARAMETER (THESE
2EB6 A184             (      exbasic.asm):02188                 CMPA    ,X                                ; *ROUTINES EXPECT 1ST POSITION TO BE ZERO, NOT ONE)
                      (      exbasic.asm):02189         ;*                             ; *AND COMPARE IT TO LENGTH OF OLD STRING
2EB8 24CC             (      exbasic.asm):02190                 BCC     LB6B5                             ; IF POSITION > LENGTH OF OLD STRING, THEN NEW
                      (      exbasic.asm):02191         ;*                             ; STRING WILL BE A NULL STRING
2EBA 1F89             (      exbasic.asm):02192                 TFR     A,B                               ; SAVE ABSOLUTE POSITION PARAMETER IN ACCB
2EBC E084             (      exbasic.asm):02193                 SUBB    ,X                                ; ACCB=POSITION-LENGTH OF OLD STRING
2EBE 50               (      exbasic.asm):02194                 NEGB                                      ; NOW ACCB=LENGTH OF OLDSTRING-POSITION
2EBF D153             (      exbasic.asm):02195                 CMPB    FPA0+3                            ; *IF THE AMOUNT OF OLD STRING TO THE RIGHT OF
2EC1 23C3             (      exbasic.asm):02196                 BLS     LB6B5                             ; *POSITION IS <= THE LENGTH PARAMETER, BRANCH AND
                      (      exbasic.asm):02197         ;* USE ALL OF THE STRING TO THE RIGHT OF THE POSITION
                      (      exbasic.asm):02198         ;* INSTEAD OF THE LENGTH PARAMETER
2EC3 D653             (      exbasic.asm):02199                 LDB     FPA0+3                            ; GET LENGTH OF NEW STRING
2EC5 20BF             (      exbasic.asm):02200                 BRA     LB6B5                             ; PUT NEW STRING IN STRING SPACE
                      (      exbasic.asm):02201         ;* DO A SYNTAX CHECK FOR ")", THEN PULL THE PREVIOUSLY CALCULATED NUMERIC
                      (      exbasic.asm):02202         ;* ARGUMENT (ACCD) AND STRING ARGUMENT DESCRIPTOR ADDR OFF OF THE STACK
2EC7                  (      exbasic.asm):02203         LB6F5
2EC7 BD2A32           (      exbasic.asm):02204                 JSR     LB267                             ; SYNTAX CHECK FOR A ")"
2ECA EEE4             (      exbasic.asm):02205                 LDU     ,S                                ; LOAD THE RETURN ADDRESS INTO U REGISTER
2ECC AE65             (      exbasic.asm):02206                 LDX     5,S                               ; * GET ADDRESS OF STRING AND
2ECE 9F4D             (      exbasic.asm):02207                 STX     V4D                               ; * SAVE IT IN V4D
2ED0 A664             (      exbasic.asm):02208                 LDA     4,S                               ; = PUT LENGTH OF STRING IN
2ED2 E664             (      exbasic.asm):02209                 LDB     4,S                               ; = BOTH ACCA AND ACCB
2ED4 3267             (      exbasic.asm):02210                 LEAS    7,S                               ; REMOVE DESCRIPTOR AND RETURN ADDRESS FROM STACK
2ED6 1F35             (      exbasic.asm):02211                 TFR     U,PC                              ; JUMP TO ADDRESS IN U REGISTER
2ED8                  (      exbasic.asm):02212         LB706
2ED8 7E2C1B           (      exbasic.asm):02213                 JMP     LB44A                             ; 'ILLEGAL FUNCTION CALL'
                      (      exbasic.asm):02214         ;* EVALUATE AN EXPRESSION - RETURN AN INTEGER IN
                      (      exbasic.asm):02215         ;* ACCB - 'FC' ERROR IF EXPRESSION > 255
2EDB                  (      exbasic.asm):02216         LB709
2EDB BD200B           (      exbasic.asm):02217                 JSR     GETNCH                            ; GET NEXT BASIC INPUT CHARACTER
2EDE                  (      exbasic.asm):02218         LB70B
2EDE BD2906           (      exbasic.asm):02219                 JSR     LB141                             ; EVALUATE A NUMERIC EXPRESSION
2EE1                  (      exbasic.asm):02220         LB70E
2EE1 BD2BB9           (      exbasic.asm):02221                 JSR     LB3E9                             ; CONVERT FPA0 TO INTEGER IN ACCD
2EE4 4D               (      exbasic.asm):02222                 TSTA                                      ; TEST MS BYTE OF INTEGER
2EE5 26F1             (      exbasic.asm):02223                 BNE     LB706                             ; 'FC' ERROR IF EXPRESSION > 255
2EE7 7E2013           (      exbasic.asm):02224                 JMP     GETCCH                            ; GET CURRENT INPUT CHARACTER FROM BASIC
                      (      exbasic.asm):02225         ;
                      (      exbasic.asm):02226         ;* VAL
2EEA                  (      exbasic.asm):02227         VAL
2EEA BD2E57           (      exbasic.asm):02228                 JSR     LB686                             ; POINT X TO STRING ADDRESS
2EED 102702EC         (      exbasic.asm):02229                 LBEQ    LBA39                             ; IF NULL STRING SET FPA0
2EF1 FE2014           (      exbasic.asm):02230                 LDU     CHARAD                            ; SAVE INPUT POINTER IN REGISTER U
2EF4 BF2014           (      exbasic.asm):02231                 STX     CHARAD                            ; POINT INPUT POINTER TO ADDRESS OF STRING
2EF7 3A               (      exbasic.asm):02232                 ABX                                       ; MOVE POINTER TO END OF STRING TERMINATOR
2EF8 A684             (      exbasic.asm):02233                 LDA     ,X                                ; GET LAST BYTE OF STRING
2EFA 3452             (      exbasic.asm):02234                 PSHS    U,X,A                             ; SAVE INPUT POINTER, STRING TERMINATOR
                      (      exbasic.asm):02235         ;*         ADDRESS AND CHARACTER
2EFC 6F84             (      exbasic.asm):02236                 CLR     ,X                                ; CLEAR STRING TERMINATOR : FOR ASCII - FP CONVERSION
2EFE BD2013           (      exbasic.asm):02237                 JSR     GETCCH                            ; GET CURRENT CHARACTER FROM BASIC
2F01 BD34B6           (      exbasic.asm):02238                 JSR     LBD12                             ; CONVERT AN ASCII STRING TO FLOATING POINT
2F04 3552             (      exbasic.asm):02239                 PULS    A,X,U                             ; RESTORE CHARACTERS AND POINTERS
2F06 A784             (      exbasic.asm):02240                 STA     ,X                                ; REPLACE STRING TERMINATOR
2F08 FF2014           (      exbasic.asm):02241                 STU     CHARAD                            ; RESTORE INPUT CHARACTER
2F0B 39               (      exbasic.asm):02242                 RTS
                      (      exbasic.asm):02243         
2F0C                  (      exbasic.asm):02244         LB734
2F0C 8D07             (      exbasic.asm):02245                 BSR     LB73D                             ; * EVALUATE AN EXPRESSION, RETURN
2F0E 9F2B             (      exbasic.asm):02246                 STX     BINVAL                            ; * THE VALUE IN X; STORE IT IN BINVAL
2F10                  (      exbasic.asm):02247         LB738
2F10 BD2A38           (      exbasic.asm):02248                 JSR     LB26D                             ; SYNTAX CHECK FOR A COMMA
2F13 20C9             (      exbasic.asm):02249                 BRA     LB70B                             ; EVALUATE EXPRESSION IN RANGE 0 <= X < 256
                      (      exbasic.asm):02250         ;* EVALUATE EXPRESSION : RETURN INTEGER PORTION IN X - 'FC' ERROR IF
                      (      exbasic.asm):02251         ;
2F15                  (      exbasic.asm):02252         LB73D
2F15 BD2906           (      exbasic.asm):02253                 JSR     LB141                             ; EVALUATE NUMERIC EXPRESSION
2F18                  (      exbasic.asm):02254         LB740
2F18 9654             (      exbasic.asm):02255                 LDA     FP0SGN                            ; GET SIGN OF FPA0 MANTISSA
2F1A 2BBC             (      exbasic.asm):02256                 BMI     LB706                             ; ILLEGAL FUNCTION CALL' IF NEGATIVE
2F1C 964F             (      exbasic.asm):02257                 LDA     FP0EXP                            ; GET EXPONENT OF FPA0
2F1E 8190             (      exbasic.asm):02258                 CMPA    #$90                              ; COMPARE TO LARGEST POSITIVE INTEGER
2F20 22B6             (      exbasic.asm):02259                 BHI     LB706                             ; ILLEGAL FUNCTION CALL' IF TOO LARGE
2F22 BD346C           (      exbasic.asm):02260                 JSR     LBCC8                             ; SHIFT BINARY POINT TO EXTREME RIGHT OF FPA0
2F25 9E52             (      exbasic.asm):02261                 LDX     FPA0+2                            ; LOAD X WITH LOWER TWO BYTES OF FPA0
2F27 39               (      exbasic.asm):02262                 RTS
                      (      exbasic.asm):02263         ;
                      (      exbasic.asm):02264         ;* PEEK
2F28                  (      exbasic.asm):02265         PEEK
2F28 8DEE             (      exbasic.asm):02266                 BSR     LB740                             ; CONVERT FPA0 TO INTEGER IN REGISTER X
2F2A E684             (      exbasic.asm):02267                 LDB     ,X                                ; GET THE VALUE BEING 'PEEK'ED
2F2C 7E2CC4           (      exbasic.asm):02268                 JMP     LB4F3                             ; CONVERT ACCB INTO A FP NUMBER
                      (      exbasic.asm):02269         ;
                      (      exbasic.asm):02270         ;* POKE
2F2F                  (      exbasic.asm):02271         POKE
2F2F 8DDB             (      exbasic.asm):02272                 BSR     LB734                             ; EVALUATE 2 EXPRESSIONS
2F31 9E2B             (      exbasic.asm):02273                 LDX     BINVAL                            ; GET THE ADDRESS TO BE 'POKE'ED
2F33 E784             (      exbasic.asm):02274                 STB     ,X                                ; STORE THE DATA IN THAT ADDRESS
2F35 39               (      exbasic.asm):02275                 RTS
                      (      exbasic.asm):02276         ;
                      (      exbasic.asm):02277         ;
                      (      exbasic.asm):02278         ;* LIST
2F36                  (      exbasic.asm):02279         LIST
2F36 3401             (      exbasic.asm):02280                 PSHS    CC                                ; SAVE ZERO FLAG ON STACK
2F38 BD2742           (      exbasic.asm):02281                 JSR     LAF67                             ; CONVERT DECIMAL LINE NUMBER TO BINARY
2F3B BD24B6           (      exbasic.asm):02282                 JSR     LAD01                             ; * FIND RAM ADDRESS OF THAT LINE NUMBER AND
2F3E 9F66             (      exbasic.asm):02283                 STX     LSTTXT                            ; * SAVE IT IN LSTTXT
2F40 3501             (      exbasic.asm):02284                 PULS    CC                                ; GET ZERO FLAG FROM STACK
2F42 2714             (      exbasic.asm):02285                 BEQ     LB784                             ; BRANCH IF END OF LINE
2F44 BD2013           (      exbasic.asm):02286                 JSR     GETCCH                            ; GET CURRENT CHARACTER FROM BASIC
2F47 2714             (      exbasic.asm):02287                 BEQ     LB789                             ; BRANCH IF END OF LINE
2F49 81AA             (      exbasic.asm):02288                 CMPA    #TOK_MINUS                        ; MINUS TOKEN (IS IT A RANGE OF LINE NUMBERS?)
2F4B 260A             (      exbasic.asm):02289                 BNE     LB783                             ; NO - RETURN
2F4D BD200B           (      exbasic.asm):02290                 JSR     GETNCH                            ; GET NEXT CHARACTER FROM BASIC
2F50 2706             (      exbasic.asm):02291                 BEQ     LB784                             ; BRANCH IF END OF LINE
2F52 BD2742           (      exbasic.asm):02292                 JSR     LAF67                             ; GET ENDING LINE NUMBER
2F55 2706             (      exbasic.asm):02293                 BEQ     LB789                             ; BRANCH IF LEGAL LINE NUMBER
2F57                  (      exbasic.asm):02294         LB783
2F57 39               (      exbasic.asm):02295                 RTS
                      (      exbasic.asm):02296         ;* LIST THE ENTIRE PROGRAM
2F58                  (      exbasic.asm):02297         LB784
2F58 CEFFFF           (      exbasic.asm):02298                 LDU     #$FFFF                            ; * SET THE DEFAULT ENDING LINE NUMBER
2F5B DF2B             (      exbasic.asm):02299                 STU     BINVAL                            ; * TO $FFFF
2F5D                  (      exbasic.asm):02300         LB789
2F5D 3262             (      exbasic.asm):02301                 LEAS    2,S                               ; PURGE RETURN ADDRESS FROM THE STACK
2F5F 9E66             (      exbasic.asm):02302                 LDX     LSTTXT                            ; POINT X TO STARTING LINE ADDRESS
2F61                  (      exbasic.asm):02303         LB78D
2F61 BD3103           (      exbasic.asm):02304                 JSR     LB95C                             ; MOVE CURSOR TO START OF A NEW LINE
2F64 BD2193           (      exbasic.asm):02305                 JSR     LA549                             ; CHECK FOR A BREAK OR PAUSE
2F67 EC84             (      exbasic.asm):02306                 LDD     ,X                                ; GET ADDRESS OF NEXT BASIC LINE
2F69 2603             (      exbasic.asm):02307                 BNE     LB79F                             ; BRANCH IF NOT END OF PROGRAM
2F6B                  (      exbasic.asm):02308         LB797
2F6B 7E2432           (      exbasic.asm):02309                 JMP     LAC73                             ; RETURN TO BASIC'S MAIN INPUT LOOP
2F6E                  (      exbasic.asm):02310         LB79F
2F6E 9F66             (      exbasic.asm):02311                 STX     LSTTXT                            ; SAVE NEW STARTING LINE ADDRESS
2F70 EC02             (      exbasic.asm):02312                 LDD     2,X                               ; * GET THE LINE NUMBER OF THIS LINE AND
2F72 10932B           (      exbasic.asm):02313                 CMPD    BINVAL                            ; * COMPARE IT TO ENDING LINE NUMBER
2F75 22F4             (      exbasic.asm):02314                 BHI     LB797                             ; EXIT IF LINE NUMBER > ENDING LINE NUMBER
2F77 BD3573           (      exbasic.asm):02315                 JSR     LBDCC                             ; PRINT THE NUMBER IN ACCD ON SCREEN IN DECIMAL
2F7A BD3150           (      exbasic.asm):02316                 JSR     LB9AC                             ; SEND A SPACE TO CONSOLE OUT
2F7D 9E66             (      exbasic.asm):02317                 LDX     LSTTXT                            ; GET RAM ADDRESS OF THIS LINE
2F7F 8D10             (      exbasic.asm):02318                 BSR     LB7C2                             ; UNCRUNCH A LINE
2F81 AE9F0066         (      exbasic.asm):02319                 LDX     [LSTTXT]                          ; POINT X TO START OF NEXT LINE
2F85 CEDAD8           (      exbasic.asm):02320                 LDU     #LINBUF+1                         ; POINT U TO BUFFER FULL OF UNCRUNCHED LINE
2F88                  (      exbasic.asm):02321         LB7B9
2F88 A6C0             (      exbasic.asm):02322                 LDA     ,U+                               ; GET A BYTE FROM THE BUFFER
2F8A 27D5             (      exbasic.asm):02323                 BEQ     LB78D                             ; BRANCH IF END OF BUFFER
2F8C BD3155           (      exbasic.asm):02324                 JSR     LB9B1                             ; SEND CHARACTER TO CONSOLE OUT
2F8F 20F7             (      exbasic.asm):02325                 BRA     LB7B9                             ; GET ANOTHER CHARACTER
                      (      exbasic.asm):02326         ;
                      (      exbasic.asm):02327         ;* UNCRUNCH A LINE INTO BASIC'S LINE INPUT BUFFER
2F91                  (      exbasic.asm):02328         LB7C2
2F91 3004             (      exbasic.asm):02329                 LEAX    4,X                               ; MOVE POINTER PAST ADDRESS OF NEXT LINE AND LINE NUMBER
2F93 108EDAD8         (      exbasic.asm):02330                 LDY     #LINBUF+1                         ; UNCRUNCH LINE INTO LINE INPUT BUFFER
2F97                  (      exbasic.asm):02331         LB7CB
2F97 A680             (      exbasic.asm):02332                 LDA     ,X+                               ; GET A CHARACTER
2F99 2751             (      exbasic.asm):02333                 BEQ     LB820                             ; BRANCH IF END OF LINE
2F9B 2B15             (      exbasic.asm):02334                 BMI     LB7E6                             ; BRANCH IF IT'S A TOKEN
2F9D 813A             (      exbasic.asm):02335                 CMPA    #':'                              ; CHECK FOR END OF SUB LINE
2F9F 260D             (      exbasic.asm):02336                 BNE     LB7E2                             ; BRNCH IF NOT END OF SUB LINE
2FA1 E684             (      exbasic.asm):02337                 LDB     ,X                                ; GET CHARACTER FOLLOWING COLON
2FA3 C184             (      exbasic.asm):02338                 CMPB    #TOK_ELSE                         ; TOKEN FOR ELSE?
2FA5 27F0             (      exbasic.asm):02339                 BEQ     LB7CB                             ; YES - DON'T PUT IT IN BUFFER
2FA7 C183             (      exbasic.asm):02340                 CMPB    #TOK_SNGL_Q                       ; TOKEN FOR REMARK?
2FA9 27EC             (      exbasic.asm):02341                 BEQ     LB7CB                             ; YES - DON'T PUT IT IN BUFFER
2FAB 8C               (      exbasic.asm):02342                 FCB     SKP2                              ; SKIP TWO BYTES
2FAC                  (      exbasic.asm):02343         LB7E0
2FAC 8621             (      exbasic.asm):02344                 LDA     #'!'                              ; EXCLAMATION POINT
2FAE                  (      exbasic.asm):02345         LB7E2
2FAE 8D30             (      exbasic.asm):02346                 BSR     LB814                             ; PUT CHARACTER IN BUFFER
2FB0 20E5             (      exbasic.asm):02347                 BRA     LB7CB                             ; GET ANOTHER CHARACTER
                      (      exbasic.asm):02348         
2FB2                  (      exbasic.asm):02349         LB7E6
2FB2 CE20D6           (      exbasic.asm):02350                 LDU     #COMVEC-10                        ; FIRST DO COMMANDS
2FB5 81FF             (      exbasic.asm):02351                 CMPA    #$FF                              ; CHECK FOR SECONDARY TOKEN
2FB7 2604             (      exbasic.asm):02352                 BNE     LB7F1                             ; BRANCH IF NON SECONDARY TOKEN
2FB9 A680             (      exbasic.asm):02353                 LDA     ,X+                               ; GET SECONDARY TOKEN
2FBB 3345             (      exbasic.asm):02354                 LEAU    5,U                               ; BUMP IT UP TO SECONDARY FUNCTIONS
2FBD                  (      exbasic.asm):02355         LB7F1
2FBD 847F             (      exbasic.asm):02356                 ANDA    #$7F                              ; MASK OFF BIT 7 OF TOKEN
2FBF                  (      exbasic.asm):02357         LB7F3
2FBF 334A             (      exbasic.asm):02358                 LEAU    10,U                              ; MOVE TO NEXT COMMAND TABLE
2FC1 6DC4             (      exbasic.asm):02359                 TST     ,U                                ; IS THIS TABLE ENABLED?
2FC3 27E7             (      exbasic.asm):02360                 BEQ     LB7E0                             ; NO - ILLEGAL TOKEN
2FC5 A0C4             (      exbasic.asm):02361                 SUBA    ,U                                ; SUBTRACT THE NUMBER OF TOKENS FROM THE CURRENT TOKEN NUMBER
2FC7 2AF6             (      exbasic.asm):02362                 BPL     LB7F3                             ; BRANCH IF TOKEN NOT IN THIS TABLE
2FC9 ABC4             (      exbasic.asm):02363                 ADDA    ,U                                ; RESTORE TOKEN NUMBER RELATIVE TO THIS TABLE
2FCB EE41             (      exbasic.asm):02364                 LDU     1,U                               ; POINT U TO COMMAND DICTIONARY TABLE
2FCD                  (      exbasic.asm):02365         LB801
2FCD 4A               (      exbasic.asm):02366                 DECA                                      ; DECREMENT TOKEN NUMBER
2FCE 2B06             (      exbasic.asm):02367                 BMI     LB80A                             ; BRANCH IF THIS IS THE CORRECT TOKEN
                      (      exbasic.asm):02368         ;* SKIP THROUGH DICTIONARY TABLE TO START OF NEXT TOKEN
2FD0                  (      exbasic.asm):02369         LB804
2FD0 6DC0             (      exbasic.asm):02370                 TST     ,U+                               ; GRAB A BYTE
2FD2 2AFC             (      exbasic.asm):02371                 BPL     LB804                             ; BRANCH IF BIT 7 NOT SET
2FD4 20F7             (      exbasic.asm):02372                 BRA     LB801                             ; GO SEE IF THIS IS THE CORRECT TOKEN
2FD6                  (      exbasic.asm):02373         LB80A
2FD6 A6C4             (      exbasic.asm):02374                 LDA     ,U                                ; GET A CHARACTER FROM DICTIONARY TABLE
2FD8 8D06             (      exbasic.asm):02375                 BSR     LB814                             ; PUT CHARACTER IN BUFFER
2FDA 6DC0             (      exbasic.asm):02376                 TST     ,U+                               ; CHECK FOR START OF NEXT TOKEN
2FDC 2AF8             (      exbasic.asm):02377                 BPL     LB80A                             ; BRANCH IF NOT DONE WITH THIS TOKEN
2FDE 20B7             (      exbasic.asm):02378                 BRA     LB7CB                             ; GO GET ANOTHER CHARACTER
2FE0                  (      exbasic.asm):02379         LB814
2FE0 108CDBD1         (      exbasic.asm):02380                 CMPY    #LINBUF+LBUFMX                    ; TEST FOR END OF LINE INPUT BUFFER
2FE4 2406             (      exbasic.asm):02381                 BCC     LB820                             ; BRANCH IF AT END OF BUFFER
2FE6 847F             (      exbasic.asm):02382                 ANDA    #$7F                              ; MASK OFF BIT 7
2FE8 A7A0             (      exbasic.asm):02383                 STA     ,Y+                               ; * SAVE CHARACTER IN BUFFER AND
2FEA 6FA4             (      exbasic.asm):02384                 CLR     ,Y                                ; * CLEAR NEXT CHARACTER SLOT IN BUFFER
2FEC                  (      exbasic.asm):02385         LB820
2FEC 39               (      exbasic.asm):02386                 RTS
                      (      exbasic.asm):02387         ;*
                      (      exbasic.asm):02388         ;* CRUNCH THE LINE THAT THE INPUT POINTER IS
                      (      exbasic.asm):02389         ;* POINTING TO INTO THE LINE INPUT BUFFER
                      (      exbasic.asm):02390         ;* RETURN LENGTH OF CRUNCHED LINE IN ACCD
                      (      exbasic.asm):02391         ;*
2FED                  (      exbasic.asm):02392         LB821
2FED BE2014           (      exbasic.asm):02393                 LDX     CHARAD                            ; GET BASIC'S INPUT POINTER ADDRESS
2FF0 CEDAD7           (      exbasic.asm):02394                 LDU     #LINBUF                           ; POINT X TO LINE INPUT BUFFER
2FF3                  (      exbasic.asm):02395         LB829
2FF3 0F43             (      exbasic.asm):02396                 CLR     V43                               ; CLEAR ILLEGAL TOKEN FLAG
2FF5 0F44             (      exbasic.asm):02397                 CLR     V44                               ; CLEAR DATA FLAG
2FF7                  (      exbasic.asm):02398         LB82D
2FF7 A680             (      exbasic.asm):02399                 LDA     ,X+                               ; GET INPUT CHAR
2FF9 2721             (      exbasic.asm):02400                 BEQ     LB852                             ; BRANCH IF END OF LINE
2FFB 0D43             (      exbasic.asm):02401                 TST     V43                               ; * CHECK ILLEGAL TOKEN FLAG & BRANCH IF NOT
2FFD 270F             (      exbasic.asm):02402                 BEQ     LB844                             ; * PROCESSING AN ILLEGAL TOKEN
2FFF BD2B71           (      exbasic.asm):02403                 JSR     LB3A2                             ; SET CARRY IF NOT UPPER CASE ALPHA
3002 2418             (      exbasic.asm):02404                 BCC     LB852                             ; BRANCH IF UPPER CASE ALPHA
3004 8130             (      exbasic.asm):02405                 CMPA    #'0'                              ; * DON'T CRUNCH ASCII NUMERIC CHARACTERS
3006 2504             (      exbasic.asm):02406                 BLO     LB842                             ; * BRANCH IF NOT NUMERIC
3008 8139             (      exbasic.asm):02407                 CMPA    #'9'                              ; *
300A 2310             (      exbasic.asm):02408                 BLS     LB852                             ; * BRANCH IF NUMERIC
                      (      exbasic.asm):02409         ;* END UP HERE IF NOT UPPER CASE ALPHA OR NUMERIC
300C                  (      exbasic.asm):02410         LB842
300C 0F43             (      exbasic.asm):02411                 CLR     V43                               ; CLEAR ILLEGAL TOKEN FLAG
300E                  (      exbasic.asm):02412         LB844
300E 8120             (      exbasic.asm):02413                 CMPA    #SPACE                            ; SPACE?
3010 270A             (      exbasic.asm):02414                 BEQ     LB852                             ; DO NOT REMOVE SPACES
3012 9742             (      exbasic.asm):02415                 STA     V42                               ; SAVE INPUT CHARACTER AS SCAN DELIMITER
3014 8122             (      exbasic.asm):02416                 CMPA    #$22                              ; CHECK FOR STRING DELIMITER
3016 2739             (      exbasic.asm):02417                 BEQ     LB886                             ; BRANCH IF STRING
3018 0D44             (      exbasic.asm):02418                 TST     V44                               ; * CHECK DATA FLAG AND BRANCH IF CLEAR
301A 271A             (      exbasic.asm):02419                 BEQ     LB86B                             ; * DO NOT CRUNCH DATA
301C                  (      exbasic.asm):02420         LB852
301C A7C0             (      exbasic.asm):02421                 STA     ,U+                               ; SAVE CHARACTER IN BUFFER
301E 2706             (      exbasic.asm):02422                 BEQ     LB85C                             ; BRANCH IF END OF LINE
3020 813A             (      exbasic.asm):02423                 CMPA    #':'                              ; * CHECK FOR END OF SUBLINE
3022 27CF             (      exbasic.asm):02424                 BEQ     LB829                             ; * AND RESET FLAGS IF END OF SUBLINE
3024                  (      exbasic.asm):02425         LB85A
3024 20D1             (      exbasic.asm):02426                 BRA     LB82D                             ; GO GET ANOTHER CHARACTER
3026                  (      exbasic.asm):02427         LB85C
3026 6FC0             (      exbasic.asm):02428                 CLR     ,U+                               ; * DOUBLE ZERO AT END OF LINE
3028 6FC0             (      exbasic.asm):02429                 CLR     ,U+                               ; *
302A 1F30             (      exbasic.asm):02430                 TFR     U,D                               ; SAVE ADDRESS OF END OF LINE IN ACCD
302C 83DAD5           (      exbasic.asm):02431                 SUBD    #LINHDR                           ; LENGTH OF LINE IN ACCD
302F 8EDAD6           (      exbasic.asm):02432                 LDX     #LINBUF-1                         ; * SET THE INPUT POINTER TO ONE BEFORE
3032 BF2014           (      exbasic.asm):02433                 STX     CHARAD                            ; * THE START OF THE CRUNCHED LINE
3035 39               (      exbasic.asm):02434                 RTS                                       ; EXIT 'CRUNCH'
3036                  (      exbasic.asm):02435         LB86B
3036 813F             (      exbasic.asm):02436                 CMPA    #'?'                              ; CHECK FOR "?" - PRINT ABBREVIATION
3038 2604             (      exbasic.asm):02437                 BNE     LB873                             ; BRANCH IF NOT PRINT ABBREVIATION
303A 8687             (      exbasic.asm):02438                 LDA     #TOK_PRINT                        ; * GET THE PRINT TOKEN AND SAVE IT
303C 20DE             (      exbasic.asm):02439                 BRA     LB852                             ; * IN BUFFER
303E                  (      exbasic.asm):02440         LB873
303E 8127             (      exbasic.asm):02441                 CMPA    #$27                              ; APOSTROPHE IS SAME AS REM
3040 2613             (      exbasic.asm):02442                 BNE     LB88A                             ; BRANCH IF NOT REMARK
3042 CC3A83           (      exbasic.asm):02443                 LDD     #$3A00+TOK_SNGL_Q                 ; COLON, REM TOKEN
3045 EDC1             (      exbasic.asm):02444                 STD     ,U++                              ; SAVE IN BUFFER
3047                  (      exbasic.asm):02445         LB87C
3047 0F42             (      exbasic.asm):02446                 CLR     V42                               ; SET DELIMITER = 0 (END OF LINE)
3049                  (      exbasic.asm):02447         LB87E
3049 A680             (      exbasic.asm):02448                 LDA     ,X+                               ; SCAN TILL WE MATCH [V42]
304B 27CF             (      exbasic.asm):02449                 BEQ     LB852                             ; BRANCH IF END OF LINE
304D 9142             (      exbasic.asm):02450                 CMPA    V42                               ; DELIMITER?
304F 27CB             (      exbasic.asm):02451                 BEQ     LB852                             ; BRANCH OUT IF SO
3051                  (      exbasic.asm):02452         LB886
3051 A7C0             (      exbasic.asm):02453                 STA     ,U+                               ; DON'T CRUNCH REMARKS OR STRINGS
3053 20F4             (      exbasic.asm):02454                 BRA     LB87E                             ; GO GET MORE STRING OR REMARK
3055                  (      exbasic.asm):02455         LB88A
3055 8130             (      exbasic.asm):02456                 CMPA    #'0'                              ; * LESS THAN ASCII ZERO?
3057 2504             (      exbasic.asm):02457                 BCS     LB892                             ; * BRANCH IF SO
3059 813C             (      exbasic.asm):02458                 CMPA    #';'+1                            ; = CHECK FOR NUMERIC VALUE, COLON OR SEMICOLON
305B 25BF             (      exbasic.asm):02459                 BCS     LB852                             ; = AND INSERT IN BUFFER IF SO
305D                  (      exbasic.asm):02460         LB892
305D 301F             (      exbasic.asm):02461                 LEAX    -1,X                              ; MOVE INPUT POINTER BACK ONE
305F 3450             (      exbasic.asm):02462                 PSHS    U,X                               ; SAVE POINTERS TO INPUT STRING, OUTPUT STRING
3061 0F41             (      exbasic.asm):02463                 CLR     V41                               ; TOKEN FLAG 0 = COMMAND, FF = SECONDARY
3063 CE20D6           (      exbasic.asm):02464                 LDU     #COMVEC-10                        ; POINT U TO COMMAND INTERPRETATION
                      (      exbasic.asm):02465         ;*                             ; TABLE FOR BASIC - 10
3066                  (      exbasic.asm):02466         LB89B
3066 0F42             (      exbasic.asm):02467                 CLR     V42                               ; INITIALIZE V42 AS TOKEN COUNTER
3068                  (      exbasic.asm):02468         LB89D
3068 334A             (      exbasic.asm):02469                 LEAU    10,U                              ; MOVE TO NEXT COMMAND INTERPRETATION TABLE
306A A6C4             (      exbasic.asm):02470                 LDA     ,U                                ; GET NUMBER OF COMMANDS
306C 2731             (      exbasic.asm):02471                 BEQ     LB8D4                             ; GO DO SECONDARY FUNCTIONS IF NO COMMAND TABLE
306E 10AE41           (      exbasic.asm):02472                 LDY     1,U                               ; POINT Y TO COMMAND DICTIONARY TABLE
3071                  (      exbasic.asm):02473         LB8A6
3071 AEE4             (      exbasic.asm):02474                 LDX     ,S                                ; GET POINTER TO INPUT STRING
3073                  (      exbasic.asm):02475         LB8A8
3073 E6A0             (      exbasic.asm):02476                 LDB     ,Y+                               ; GET A BYTE FROM DICTIONARY TABLE
3075 E080             (      exbasic.asm):02477                 SUBB    ,X+                               ; SUBTRACT INPUT CHARACTER
3077 27FA             (      exbasic.asm):02478                 BEQ     LB8A8                             ; LOOP IF SAME
3079 C180             (      exbasic.asm):02479                 CMPB    #$80                              ; LAST CHAR IN RESERVED WORD TABLE HAD
                      (      exbasic.asm):02480         ;*                             ; BIT 7 SET, SO IF WE HAVE $80 HERE
                      (      exbasic.asm):02481         ;*                             ; THEN IT IS A GOOD COMPARE
307B 2638             (      exbasic.asm):02482                 BNE     LB8EA                             ; BRANCH IF NO MATCH - CHECK ANOTHER COMMAND
307D 3262             (      exbasic.asm):02483                 LEAS    2,S                               ; DELETE OLD INPUT POINTER FROM STACK
307F 3540             (      exbasic.asm):02484                 PULS    U                                 ; GET POINTER TO OUTPUT STRING
3081 DA42             (      exbasic.asm):02485                 ORB     V42                               ; OR IN THE TABLE POSITION TO MAKE THE TOKEN
                      (      exbasic.asm):02486         ;*                             ; - NOTE THAT B ALREADY HAD $80 IN IT -
3083 9641             (      exbasic.asm):02487                 LDA     V41                               ; * CHECK TOKEN FLAG AND BRANCH
3085 2606             (      exbasic.asm):02488                 BNE     LB8C2                             ; * IF SECONDARY
3087 C184             (      exbasic.asm):02489                 CMPB    #TOK_ELSE                         ; IS IT ELSE TOKEN?
3089 2606             (      exbasic.asm):02490                 BNE     LB8C6                             ; NO
308B 863A             (      exbasic.asm):02491                 LDA     #':'                              ; PUT A COLON (SUBLINE) BEFORE ELSE TOKEN
308D                  (      exbasic.asm):02492         LB8C2
308D EDC1             (      exbasic.asm):02493                 STD     ,U++                              ; SECONDARY TOKENS PRECEEDED BY $FF
308F 2093             (      exbasic.asm):02494                 BRA     LB85A                             ; GO PROCESS MORE INPUT CHARACTERS
3091                  (      exbasic.asm):02495         LB8C6
3091 E7C0             (      exbasic.asm):02496                 STB     ,U+                               ; SAVE THIS TOKEN
3093 C186             (      exbasic.asm):02497                 CMPB    #TOK_DATA                         ; DATA TOKEN?
3095 2602             (      exbasic.asm):02498                 BNE     LB8CE                             ; NO
3097 0C44             (      exbasic.asm):02499                 INC     V44                               ; SET DATA FLAG
3099                  (      exbasic.asm):02500         LB8CE
3099 C182             (      exbasic.asm):02501                 CMPB    #TOK_REM                          ; REM TOKEN?
309B 27AA             (      exbasic.asm):02502                 BEQ     LB87C                             ; YES
309D                  (      exbasic.asm):02503         LB8D2
309D 2085             (      exbasic.asm):02504                 BRA     LB85A                             ; GO PROCESS MORE INPUT CHARACTERS
                      (      exbasic.asm):02505         ;* CHECK FOR A SECONDARY TOKEN
309F                  (      exbasic.asm):02506         LB8D4
309F CE20DB           (      exbasic.asm):02507                 LDU     #COMVEC-5                         ; NOW DO SECONDARY FUNCTIONS
30A2 0341             (      exbasic.asm):02508                 COM     V41                               ; TOGGLE THE TOKEN FLAG
30A4 26C0             (      exbasic.asm):02509                 BNE     LB89B                             ; BRANCH IF NOW CHECKING SECONDARY COMMANDS
                      (      exbasic.asm):02510         ;
                      (      exbasic.asm):02511         ;* THIS CODE WILL PROCESS INPUT DATA WHICH CANNOT BE CRUNCHED AND SO
                      (      exbasic.asm):02512         ;* IS ASSUMED TO BE ILLEGAL DATA OR AN ILLEGAL TOKEN
30A6 3550             (      exbasic.asm):02513                 PULS    X,U                               ; RESTORE INPUT AND OUTPUT POINTERS
30A8 A680             (      exbasic.asm):02514                 LDA     ,X+                               ; * MOVE THE FIRST CHARACTER OF AN
30AA A7C0             (      exbasic.asm):02515                 STA     ,U+                               ; * ILLEGAL TOKEN
30AC BD2B71           (      exbasic.asm):02516                 JSR     LB3A2                             ; SET CARRY IF NOT ALPHA
30AF 25EC             (      exbasic.asm):02517                 BCS     LB8D2                             ; BRANCH IF NOT ALPHA
30B1 0343             (      exbasic.asm):02518                 COM     V43                               ; SET ILLEGAL TOKEN FLAG IF UPPER CASE ALPHA
30B3 20E8             (      exbasic.asm):02519                 BRA     LB8D2                             ; PROCESS MORE INPUT CHARACTERS
30B5                  (      exbasic.asm):02520         LB8EA
30B5 0C42             (      exbasic.asm):02521                 INC     V42                               ; INCREMENT TOKEN COUNTER
30B7 4A               (      exbasic.asm):02522                 DECA                                      ; DECR COMMAND COUNTER
30B8 27AE             (      exbasic.asm):02523                 BEQ     LB89D                             ; GET ANOTHER COMMAND TABLE IF DONE W/THIS ONE
30BA 313F             (      exbasic.asm):02524                 LEAY    -1,Y                              ; MOVE POINTER BACK ONE
30BC                  (      exbasic.asm):02525         LB8F1
30BC E6A0             (      exbasic.asm):02526                 LDB     ,Y+                               ; * GET TO NEXT
30BE 2AFC             (      exbasic.asm):02527                 BPL     LB8F1                             ; * RESERVED WORD
30C0 20AF             (      exbasic.asm):02528                 BRA     LB8A6                             ; GO SEE IF THIS WORD IS A MATCH
                      (      exbasic.asm):02529         ;
                      (      exbasic.asm):02530         ;* PRINT
30C2                  (      exbasic.asm):02531         PRINT
30C2 273B             (      exbasic.asm):02532                 BEQ     LB958                             ; BRANCH IF NO ARGUMENT
30C4 8D01             (      exbasic.asm):02533                 BSR     LB8FE                             ; CHECK FOR ALL PRINT OPTIONS
30C6 39               (      exbasic.asm):02534                 RTS
30C7                  (      exbasic.asm):02535         LB8FE
30C7                  (      exbasic.asm):02536         LB918
30C7 BD4051           (      exbasic.asm):02537                 JSR     XVEC9                             ; CALL EXTENDED BASIC ADD-IN
30CA                  (      exbasic.asm):02538         LB91B
30CA 2740             (      exbasic.asm):02539                 BEQ     LB965                             ; RETURN IF END OF LINE
30CC                  (      exbasic.asm):02540         LB91D
30CC 81A2             (      exbasic.asm):02541                 CMPA    #TOK_TAB                          ; TOKEN FOR TAB( ?
30CE 2755             (      exbasic.asm):02542                 BEQ     LB97E                             ; YES
30D0 812C             (      exbasic.asm):02543                 CMPA    #','                              ; COMMA?
30D2 2739             (      exbasic.asm):02544                 BEQ     LB966                             ; YES - ADVANCE TO NEXT TAB FIELD
30D4 813B             (      exbasic.asm):02545                 CMPA    #';'                              ; SEMICOLON?
30D6 2762             (      exbasic.asm):02546                 BEQ     LB997                             ; YES - DO NOT ADVANCE CURSOR
30D8 BD291B           (      exbasic.asm):02547                 JSR     LB156                             ; EVALUATE EXPRESSION
30DB 9606             (      exbasic.asm):02548                 LDA     VALTYP                            ; * GET VARIABLE TYPE AND
30DD 3402             (      exbasic.asm):02549                 PSHS    A                                 ; * SAVE IT ON THE STACK
30DF 2606             (      exbasic.asm):02550                 BNE     LB938                             ; BRANCH IF STRING VARIABLE
30E1 BD3580           (      exbasic.asm):02551                 JSR     LBDD9                             ; CONVERT FP NUMBER TO AN ASCII STRING
30E4 BD2CE7           (      exbasic.asm):02552                 JSR     LB516                             ; PARSE A STRING FROM (X-1) AND PUT
                      (      exbasic.asm):02553         ;*                             ; DESCRIPTOR ON STRING STACK
30E7                  (      exbasic.asm):02554         LB938
30E7 8D5A             (      exbasic.asm):02555                 BSR     LB99F                             ; PRINT STRING POINTED TO BY X
30E9 3504             (      exbasic.asm):02556                 PULS    B                                 ; GET VARIABLE TYPE BACK
30EB BD212C           (      exbasic.asm):02557                 JSR     LA35F                             ; SET UP TAB WIDTH ZONE, ETC
30EE                  (      exbasic.asm):02558         LB949
30EE 5D               (      exbasic.asm):02559                 TSTB                                      ; CHECK CURRENT PRINT POSITION
30EF 2609             (      exbasic.asm):02560                 BNE     LB954                             ; BRANCH IF NOT AT START OF LINE
30F1 BD2013           (      exbasic.asm):02561                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
30F4 812C             (      exbasic.asm):02562                 CMPA    #','                              ; COMMA?
30F6 2715             (      exbasic.asm):02563                 BEQ     LB966                             ; SKIP TO NEXT TAB FIELD
30F8 8D56             (      exbasic.asm):02564                 BSR     LB9AC                             ; SEND A SPACE TO CONSOLE OUT
30FA                  (      exbasic.asm):02565         LB954
30FA BD2013           (      exbasic.asm):02566                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
30FD 26CD             (      exbasic.asm):02567                 BNE     LB91D                             ; BRANCH IF NOT END OF LINE
30FF                  (      exbasic.asm):02568         LB958
30FF 860D             (      exbasic.asm):02569                 LDA     #CR                               ; * SEND A CR TO
3101 2052             (      exbasic.asm):02570                 BRA     LB9B1                             ; * CONSOLE OUT
3103                  (      exbasic.asm):02571         LB95C
3103 BD212C           (      exbasic.asm):02572                 JSR     LA35F                             ; SET UP TAB WIDTH, ZONE ETC
3106 27F7             (      exbasic.asm):02573                 BEQ     LB958                             ; BRANCH IF WIDTH = ZERO
3108 966C             (      exbasic.asm):02574                 LDA     DEVPOS                            ; GET PRINT POSITION
310A 26F3             (      exbasic.asm):02575                 BNE     LB958                             ; BRANCH IF NOT AT START OF LINE
310C                  (      exbasic.asm):02576         LB965
310C 39               (      exbasic.asm):02577                 RTS
                      (      exbasic.asm):02578         ;* SKIP TO NEXT TAB FIELD
310D                  (      exbasic.asm):02579         LB966
310D BD212C           (      exbasic.asm):02580                 JSR     LA35F                             ; SET UP TAB WIDTH, ZONE ETC
3110 270A             (      exbasic.asm):02581                 BEQ     LB975                             ; BRANCH IF LINE WIDTH = 0 (CASSETTE)
3112 D66C             (      exbasic.asm):02582                 LDB     DEVPOS                            ; GET CURRENT POSITION
3114 D16B             (      exbasic.asm):02583                 CMPB    DEVLCF                            ; COMPARE TO LAST TAB ZONE
3116 2506             (      exbasic.asm):02584                 BCS     LB977                             ; BRANCH IF < LAST TAB ZONE
3118 8DE5             (      exbasic.asm):02585                 BSR     LB958                             ; SEND A CARRIAGE RETURN TO CONSOLE OUT
311A 201E             (      exbasic.asm):02586                 BRA     LB997                             ; GET MORE DATA
311C                  (      exbasic.asm):02587         LB975
311C D66C             (      exbasic.asm):02588                 LDB     DEVPOS                            ; *
311E                  (      exbasic.asm):02589         LB977
311E D06A             (      exbasic.asm):02590                 SUBB    DEVCFW                            ; * SUBTRACT TAB FIELD WIDTH FROM CURRENT
3120 24FC             (      exbasic.asm):02591                 BCC     LB977                             ; * POSITION UNTIL CARRY SET - NEGATING THE
3122 50               (      exbasic.asm):02592                 NEGB                                      ; * REMAINDER LEAVES THE NUMBER OF SPACES TO NEXT
                      (      exbasic.asm):02593         ;*              ; * TAB ZONE IN ACCB
3123 2010             (      exbasic.asm):02594                 BRA     LB98E                             ; GO ADVANCE TO NEXT TAB ZONE
                      (      exbasic.asm):02595         ;
                      (      exbasic.asm):02596         ;* PRINT TAB(
3125                  (      exbasic.asm):02597         LB97E
3125 BD2EDB           (      exbasic.asm):02598                 JSR     LB709                             ; EVALUATE EXPRESSION - RETURN VALUE IN B
3128 8129             (      exbasic.asm):02599                 CMPA    #')'                              ; * 'SYNTAX' ERROR IF NOT ')'
312A 1026F915         (      exbasic.asm):02600                 LBNE    LB277                             ; *
312E BD212C           (      exbasic.asm):02601                 JSR     LA35F                             ; SET UP TAB WIDTH, ZONE ETC
3131 D06C             (      exbasic.asm):02602                 SUBB    DEVPOS                            ; GET DIFFERENCE OF PRINT POSITION & TAB POSITION
3133 2305             (      exbasic.asm):02603                 BLS     LB997                             ; BRANCH IF TAB POSITION < CURRENT POSITION
3135                  (      exbasic.asm):02604         LB98E
3135                  (      exbasic.asm):02605         LB992
3135 8D19             (      exbasic.asm):02606                 BSR     LB9AC                             ; SEND A SPACE TO CONSOLE OUT
3137 5A               (      exbasic.asm):02607                 DECB                                      ; DECREMENT DIFFERENCE COUNT
3138 26FB             (      exbasic.asm):02608                 BNE     LB992                             ; BRANCH UNTIL CURRENT POSITION = TAB POSITION
313A                  (      exbasic.asm):02609         LB997
313A BD200B           (      exbasic.asm):02610                 JSR     GETNCH                            ; GET NEXT CHARACTER FROM BASIC
313D 7E30CA           (      exbasic.asm):02611                 JMP     LB91B                             ; LOOK FOR MORE PRINT DATA
                      (      exbasic.asm):02612         ;* COPY A STRING FROM (X) TO CONSOLE OUT
3140                  (      exbasic.asm):02613         LB99C
3140 BD2CE9           (      exbasic.asm):02614                 JSR     LB518                             ; PARSE A STRING FROM X AND PUT
                      (      exbasic.asm):02615         ;*         DESCRIPTOR ON STRING STACK
3143                  (      exbasic.asm):02616         LB99F
3143 BD2E28           (      exbasic.asm):02617                 JSR     LB657                             ; GET LENGTH OF STRING AND REMOVE
                      (      exbasic.asm):02618         ;*         DESCRIPTOR FROM STRING STACK
3146 5C               (      exbasic.asm):02619                 INCB                                      ; COMPENSATE FOR DECB BELOW
3147                  (      exbasic.asm):02620         LB9A3
3147 5A               (      exbasic.asm):02621                 DECB                                      ; DECREMENT COUNTER
3148 27C2             (      exbasic.asm):02622                 BEQ     LB965                             ; EXIT ROUTINE
314A A680             (      exbasic.asm):02623                 LDA     ,X+                               ; GET A CHARACTER FROM X
314C 8D07             (      exbasic.asm):02624                 BSR     LB9B1                             ; SEND TO CONSOLE OUT
314E 20F7             (      exbasic.asm):02625                 BRA     LB9A3                             ; KEEP LOOPING
3150                  (      exbasic.asm):02626         LB9AC
3150 8620             (      exbasic.asm):02627                 LDA     #SPACE                            ; SPACE TO CONSOLE OUT
3152 8C               (      exbasic.asm):02628                 FCB     SKP2                              ; SKIP NEXT TWO BYTES
3153                  (      exbasic.asm):02629         LB9AF
3153 863F             (      exbasic.asm):02630                 LDA     #'?'                              ; QUESTION MARK TO CONSOLE OUT
3155                  (      exbasic.asm):02631         LB9B1
3155 7E2027           (      exbasic.asm):02632                 JMP     PUTCHR                            ; JUMP TO CONSOLE OUT
                      (      exbasic.asm):02633         ;
                      (      exbasic.asm):02634         ;* FLOATING POINT MATH PACKAGE;
                      (      exbasic.asm):02635         ;
                      (      exbasic.asm):02636         ;* ADD .5 TO FPA0
3158                  (      exbasic.asm):02637         LB9B4
3158 8E3667           (      exbasic.asm):02638                 LDX     #LBEC0                            ; FLOATING POINT CONSTANT (.5)
315B 2009             (      exbasic.asm):02639                 BRA     LB9C2                             ; ADD .5 TO FPA0
                      (      exbasic.asm):02640         ;* SUBTRACT FPA0 FROM FP NUMBER POINTED
                      (      exbasic.asm):02641         ;* TO BY (X), LEAVE RESULT IN FPA0
315D                  (      exbasic.asm):02642         LB9B9
315D BD32D3           (      exbasic.asm):02643                 JSR     LBB2F                             ; COPY PACKED FP DATA FROM (X) TO FPA1
                      (      exbasic.asm):02644         ;
                      (      exbasic.asm):02645         ;* ARITHMETIC OPERATION (-) JUMPS HERE - SUBTRACT FPA0 FROM FPA1 (ENTER
                      (      exbasic.asm):02646         ;* WITH EXPONENT OF FPA0 IN ACCB AND EXPONENT OF FPA1 IN ACCA)
3160                  (      exbasic.asm):02647         LB9BC
3160 0354             (      exbasic.asm):02648                 COM     FP0SGN                            ; CHANGE MANTISSA SIGN OF FPA0
3162 0362             (      exbasic.asm):02649                 COM     RESSGN                            ; REVERSE RESULT SIGN FLAG
3164 2003             (      exbasic.asm):02650                 BRA     LB9C5                             ; GO ADD FPA1 AND FPA0
                      (      exbasic.asm):02651         ;* ADD FP NUMBER POINTED TO BY
                      (      exbasic.asm):02652         ;* (X) TO FPA0 - LEAVE RESULT IN FPA0
3166                  (      exbasic.asm):02653         LB9C2
3166 BD32D3           (      exbasic.asm):02654                 JSR     LBB2F                             ; UNPACK PACKED FP DATA FROM (X) TO
                      (      exbasic.asm):02655         ;*         FPA1; RETURN EXPONENT OF FPA1 IN ACCA
                      (      exbasic.asm):02656         ;
                      (      exbasic.asm):02657         ;* ARITHMETIC OPERATION (+) JUMPS HERE - ADD FPA0 TO
                      (      exbasic.asm):02658         ;
3169                  (      exbasic.asm):02659         LB9C5
3169 5D               (      exbasic.asm):02660                 TSTB                                      ; CHECK EXPONENT OF FPA0
316A 10270280         (      exbasic.asm):02661                 LBEQ    LBC4A                             ; COPY FPA1 TO FPA0 IF FPA0 =
316E 8E005C           (      exbasic.asm):02662                 LDX     #FP1EXP                           ; POINT X TO FPA1
3171                  (      exbasic.asm):02663         LB9CD
3171 1F89             (      exbasic.asm):02664                 TFR     A,B                               ; PUT EXPONENT OF FPA1 INTO ACCB
3173 5D               (      exbasic.asm):02665                 TSTB                                      ; CHECK EXPONENT
3174 276C             (      exbasic.asm):02666                 BEQ     LBA3E                             ; RETURN IF EXPONENT = 0 (ADDING 0 TO FPA0)
3176 D04F             (      exbasic.asm):02667                 SUBB    FP0EXP                            ; SUBTRACT EXPONENT OF FPA0 FROM EXPONENT OF FPA1
3178 2769             (      exbasic.asm):02668                 BEQ     LBA3F                             ; BRANCH IF EXPONENTS ARE EQUAL
317A 250A             (      exbasic.asm):02669                 BCS     LB9E2                             ; BRANCH IF EXPONENT FPA0 > FPA1
317C 974F             (      exbasic.asm):02670                 STA     FP0EXP                            ; REPLACE FPA0 EXPONENT WITH FPA1 EXPONENT
317E 9661             (      exbasic.asm):02671                 LDA     FP1SGN                            ; * REPLACE FPA0 MANTISSA SIGN
3180 9754             (      exbasic.asm):02672                 STA     FP0SGN                            ; * WITH FPA1 MANTISSA SIGN
3182 8E004F           (      exbasic.asm):02673                 LDX     #FP0EXP                           ; POINT X TO FPA0
3185 50               (      exbasic.asm):02674                 NEGB                                      ; NEGATE DIFFERENCE OF EXPONENTS
3186                  (      exbasic.asm):02675         LB9E2
3186 C1F8             (      exbasic.asm):02676                 CMPB    #-8                               ; TEST DIFFERENCE OF EXPONENTS
3188 2F59             (      exbasic.asm):02677                 BLE     LBA3F                             ; BRANCH IF DIFFERENCE OF EXPONENTS <= 8
318A 4F               (      exbasic.asm):02678                 CLRA                                      ; CLEAR OVERFLOW BYTE
318B 6401             (      exbasic.asm):02679                 LSR     1,X                               ; SHIFT MS BYTE OF MANTISSA; BIT 7 = 0
318D BD325E           (      exbasic.asm):02680                 JSR     LBABA                             ; GO SHIFT MANTISSA OF (X) TO THE RIGHT (B) TIMES
3190                  (      exbasic.asm):02681         LB9EC
3190 D662             (      exbasic.asm):02682                 LDB     RESSGN                            ; GET SIGN FLAG
3192 2A0B             (      exbasic.asm):02683                 BPL     LB9FB                             ; BRANCH IF FPA0 AND FPA1 SIGNS ARE THE SAME
3194 6301             (      exbasic.asm):02684                 COM     1,X                               ; * COMPLEMENT MANTISSA POINTED
3196 6302             (      exbasic.asm):02685                 COM     2,X                               ; * TO BY (X) THE
3198 6303             (      exbasic.asm):02686                 COM     3,X                               ; * ADCA BELOW WILL
319A 6304             (      exbasic.asm):02687                 COM     4,X                               ; * CONVERT THIS OPERATION
319C 43               (      exbasic.asm):02688                 COMA                                      ; * INTO A NEG (MANTISSA)
319D 8900             (      exbasic.asm):02689                 ADCA    #0                                ; ADD ONE TO ACCA - COMA ALWAYS SETS THE CARRY FLAG
                      (      exbasic.asm):02690         ;* THE PREVIOUS TWO BYTES MAY BE REPLACED BY A NEGA
                      (      exbasic.asm):02691         ;*
                      (      exbasic.asm):02692         ;* ADD MANTISSAS OF FPA0 AND FPA1, PUT RESULT IN FPA0
319F                  (      exbasic.asm):02693         LB9FB
319F 9763             (      exbasic.asm):02694                 STA     FPSBYT                            ; SAVE FPA SUB BYTE
31A1 9653             (      exbasic.asm):02695                 LDA     FPA0+3                            ; * ADD LS BYTE
31A3 9960             (      exbasic.asm):02696                 ADCA    FPA1+3                            ; * OF MANTISSA
31A5 9753             (      exbasic.asm):02697                 STA     FPA0+3                            ; SAVE IN FPA0 LSB
31A7 9652             (      exbasic.asm):02698                 LDA     FPA0+2                            ; * ADD NEXT BYTE
31A9 995F             (      exbasic.asm):02699                 ADCA    FPA1+2                            ; * OF MANTISSA
31AB 9752             (      exbasic.asm):02700                 STA     FPA0+2                            ; SAVE IN FPA0
31AD 9651             (      exbasic.asm):02701                 LDA     FPA0+1                            ; * ADD NEXT BYTE
31AF 995E             (      exbasic.asm):02702                 ADCA    FPA1+1                            ; * OF MANTISSA
31B1 9751             (      exbasic.asm):02703                 STA     FPA0+1                            ; SAVE IN FPA0
31B3 9650             (      exbasic.asm):02704                 LDA     FPA0                              ; * ADD MS BYTE
31B5 995D             (      exbasic.asm):02705                 ADCA    FPA1                              ; * OF MANTISSA
31B7 9750             (      exbasic.asm):02706                 STA     FPA0                              ; SAVE IN FPA0
31B9 5D               (      exbasic.asm):02707                 TSTB                                      ; TEST SIGN FLAG
31BA 2A44             (      exbasic.asm):02708                 BPL     LBA5C                             ; BRANCH IF FPA0 & FPA1 SIGNS WERE ALIKE
31BC                  (      exbasic.asm):02709         LBA18
31BC 2502             (      exbasic.asm):02710                 BCS     LBA1C                             ; BRANCH IF POSITIVE MANTISSA
31BE 8D5D             (      exbasic.asm):02711                 BSR     LBA79                             ; NEGATE FPA0 MANTISSA
                      (      exbasic.asm):02712         ;
                      (      exbasic.asm):02713         ;* NORMALIZE FPA0
31C0                  (      exbasic.asm):02714         LBA1C
31C0 5F               (      exbasic.asm):02715                 CLRB                                      ; CLEAR TEMPORARY EXPONENT ACCUMULATOR
31C1                  (      exbasic.asm):02716         LBA1D
31C1 9650             (      exbasic.asm):02717                 LDA     FPA0                              ; TEST MSB OF MANTISSA
31C3 262E             (      exbasic.asm):02718                 BNE     LBA4F                             ; BRANCH IF <> 0
31C5 9651             (      exbasic.asm):02719                 LDA     FPA0+1                            ; * IF THE MSB IS
31C7 9750             (      exbasic.asm):02720                 STA     FPA0                              ; * 0, THEN SHIFT THE
31C9 9652             (      exbasic.asm):02721                 LDA     FPA0+2                            ; * MANTISSA A WHOLE BYTE
31CB 9751             (      exbasic.asm):02722                 STA     FPA0+1                            ; * AT A TIME. THIS
31CD 9653             (      exbasic.asm):02723                 LDA     FPA0+3                            ; * IS FASTER THAN ONE
31CF 9752             (      exbasic.asm):02724                 STA     FPA0+2                            ; * BIT AT A TIME
31D1 9663             (      exbasic.asm):02725                 LDA     FPSBYT                            ; * BUT USES MORE MEMORY.
31D3 9753             (      exbasic.asm):02726                 STA     FPA0+3                            ; * FPSBYT, THE CARRY IN
31D5 0F63             (      exbasic.asm):02727                 CLR     FPSBYT                            ; * BYTE, REPLACES THE MATISSA LSB.
31D7 CB08             (      exbasic.asm):02728                 ADDB    #8                                ; SHIFTING ONE BYTE = 8 BIT SHIFTS; ADD 8 TO EXPONENT
31D9 C128             (      exbasic.asm):02729                 CMPB    #5*8                              ; CHECK FOR 5 SHIFTS
31DB 2DE4             (      exbasic.asm):02730                 BLT     LBA1D                             ; BRANCH IF < 5 SHIFTS, IF > 5, THEN MANTISSA = 0
31DD                  (      exbasic.asm):02731         LBA39
31DD 4F               (      exbasic.asm):02732                 CLRA                                      ; A ZERO EXPONENT = 0 FLOATING POINT
31DE                  (      exbasic.asm):02733         LBA3A
31DE 974F             (      exbasic.asm):02734                 STA     FP0EXP                            ; ZERO OUT THE EXPONENT
31E0 9754             (      exbasic.asm):02735                 STA     FP0SGN                            ; ZERO OUT THE MANTISSA SIGN
31E2                  (      exbasic.asm):02736         LBA3E
31E2 39               (      exbasic.asm):02737                 RTS
31E3                  (      exbasic.asm):02738         LBA3F
31E3 8D6D             (      exbasic.asm):02739                 BSR     LBAAE                             ; SHIFT FPA0 MANTISSA TO RIGHT
31E5 5F               (      exbasic.asm):02740                 CLRB                                      ; CLEAR CARRY FLAG
31E6 20A8             (      exbasic.asm):02741                 BRA     LB9EC
                      (      exbasic.asm):02742         ;* SHIFT FPA0 LEFT ONE BIT UNTIL BIT 7
                      (      exbasic.asm):02743         ;* OF MATISSA MS BYTE = 1
31E8                  (      exbasic.asm):02744         LBA44
31E8 5C               (      exbasic.asm):02745                 INCB                                      ; ADD ONE TO EXPONENT ACCUMULATOR
31E9 0863             (      exbasic.asm):02746                 ASL     FPSBYT                            ; SHIFT SUB BYTE ONE LEFT
31EB 0953             (      exbasic.asm):02747                 ROL     FPA0+3                            ; SHIFT LS BYTE
31ED 0952             (      exbasic.asm):02748                 ROL     FPA0+2                            ; SHIFT NS BYTE
31EF 0951             (      exbasic.asm):02749                 ROL     FPA0+1                            ; SHIFT NS BYTE
31F1 0950             (      exbasic.asm):02750                 ROL     FPA0                              ; SHIFT MS BYTE
31F3                  (      exbasic.asm):02751         LBA4F
31F3 2AF3             (      exbasic.asm):02752                 BPL     LBA44                             ; BRANCH IF NOT YET NORMALIZED
31F5 964F             (      exbasic.asm):02753                 LDA     FP0EXP                            ; GET CURRENT EXPONENT
31F7 3404             (      exbasic.asm):02754                 PSHS    B                                 ; SAVE EXPONENT MODIFIER CAUSED BY NORMALIZATION
31F9 A0E0             (      exbasic.asm):02755                 SUBA    ,S+                               ; SUBTRACT ACCUMULATED EXPONENT MODIFIER
31FB 974F             (      exbasic.asm):02756                 STA     FP0EXP                            ; SAVE AS NEW EXPONENT
31FD 23DE             (      exbasic.asm):02757                 BLS     LBA39                             ; SET FPA0 = 0 IF THE NORMALIZATION CAUSED
                      (      exbasic.asm):02758         ;*         MORE OR EQUAL NUMBER OF LEFT SHIFTS THAN THE
                      (      exbasic.asm):02759         ;*         SIZE OF THE EXPONENT
31FF 8C               (      exbasic.asm):02760                 FCB     SKP2                              ; SKIP 2 BYTES
3200                  (      exbasic.asm):02761         LBA5C
3200 2508             (      exbasic.asm):02762                 BCS     LBA66                             ; BRANCH IF MANTISSA OVERFLOW
3202 0863             (      exbasic.asm):02763                 ASL     FPSBYT                            ; SUB BYTE BIT 7 TO CARRY - USE AS ROUND-OFF
                      (      exbasic.asm):02764         ;*                             ; FLAG (TRUNCATE THE REST OF SUB BYTE)
3204 8600             (      exbasic.asm):02765                 LDA     #0                                ; CLRA, BUT DO NOT CHANGE CARRY FLAG
3206 9763             (      exbasic.asm):02766                 STA     FPSBYT                            ; CLEAR THE SUB BYTE
3208 200C             (      exbasic.asm):02767                 BRA     LBA72                             ; GO ROUND-OFF RESULT
320A                  (      exbasic.asm):02768         LBA66
320A 0C4F             (      exbasic.asm):02769                 INC     FP0EXP                            ; INCREMENT EXPONENT - MULTIPLY BY 2
320C 2728             (      exbasic.asm):02770                 BEQ     LBA92                             ; OVERFLOW ERROR IF CARRY PAST $FF
320E 0650             (      exbasic.asm):02771                 ROR     FPA0                              ; * SHIFT MANTISSA
3210 0651             (      exbasic.asm):02772                 ROR     FPA0+1                            ; * ONE TO
3212 0652             (      exbasic.asm):02773                 ROR     FPA0+2                            ; * THE RIGHT -
3214 0653             (      exbasic.asm):02774                 ROR     FPA0+3                            ; * DIVIDE BY TWO
3216                  (      exbasic.asm):02775         LBA72
3216 2404             (      exbasic.asm):02776                 BCC     LBA78                             ; BRANCH IF NO ROUND-OFF NEEDED
3218 8D0D             (      exbasic.asm):02777                 BSR     LBA83                             ; ADD ONE TO MANTISSA - ROUND OFF
321A 27EE             (      exbasic.asm):02778                 BEQ     LBA66                             ; BRANCH iF OVERFLOW - MANTISSA = 0
321C                  (      exbasic.asm):02779         LBA78
321C 39               (      exbasic.asm):02780                 RTS
                      (      exbasic.asm):02781         ;* NEGATE FPA0 MANTISSA
321D                  (      exbasic.asm):02782         LBA79
321D 0354             (      exbasic.asm):02783                 COM     FP0SGN                            ; TOGGLE SIGN OF MANTISSA
321F                  (      exbasic.asm):02784         LBA7B
321F 0350             (      exbasic.asm):02785                 COM     FPA0                              ; * COMPLEMENT ALL 4 MANTISSA BYTES
3221 0351             (      exbasic.asm):02786                 COM     FPA0+1                            ; *
3223 0352             (      exbasic.asm):02787                 COM     FPA0+2                            ; *
3225 0353             (      exbasic.asm):02788                 COM     FPA0+3                            ; *
                      (      exbasic.asm):02789         ;* ADD ONE TO FPA0 MANTISSA
3227                  (      exbasic.asm):02790         LBA83
3227 9E52             (      exbasic.asm):02791                 LDX     FPA0+2                            ; * GET BOTTOM 2 MANTISSA
3229 3001             (      exbasic.asm):02792                 LEAX    1,X                               ; * BYTES, ADD ONE TO
322B 9F52             (      exbasic.asm):02793                 STX     FPA0+2                            ; * THEM AND SAVE THEM
322D 2606             (      exbasic.asm):02794                 BNE     LBA91                             ; BRANCH IF NO OVERFLOW
322F 9E50             (      exbasic.asm):02795                 LDX     FPA0                              ; * IF OVERFLOW ADD ONE
3231 3001             (      exbasic.asm):02796                 LEAX    1,X                               ; * TO TOP 2 MANTISSA
3233 9F50             (      exbasic.asm):02797                 STX     FPA0                              ; * BYTES AND SAVE THEM
3235                  (      exbasic.asm):02798         LBA91
3235 39               (      exbasic.asm):02799                 RTS
3236                  (      exbasic.asm):02800         LBA92
3236 C60A             (      exbasic.asm):02801                 LDB     #2*5                              ; OV' OVERFLOW ERROR
3238 7E2413           (      exbasic.asm):02802                 JMP     LAC46                             ; PROCESS AN ERROR
323B                  (      exbasic.asm):02803         LBA97
323B 8E0012           (      exbasic.asm):02804                 LDX     #FPA2-1                           ; POINT X TO FPA2
                      (      exbasic.asm):02805         ;* SHIFT FPA POINTED TO BY (X) TO
                      (      exbasic.asm):02806         ;* THE RIGHT -(B) TIMES. EXIT WITH
                      (      exbasic.asm):02807         ;* ACCA CONTAINING DATA SHIFTED OUT
                      (      exbasic.asm):02808         ;* TO THE RIGHT (SUB BYTE) AND THE DATA
                      (      exbasic.asm):02809         ;* SHIFTED IN FROM THE LEFT WILL COME FROM FPCARY
323E                  (      exbasic.asm):02810         LBA9A
323E A604             (      exbasic.asm):02811                 LDA     4,X                               ; GET LS BYTE OF MANTISSA (X)
3240 9763             (      exbasic.asm):02812                 STA     FPSBYT                            ; SAVE IN FPA SUB BYTE
3242 A603             (      exbasic.asm):02813                 LDA     3,X                               ; * SHIFT THE NEXT THREE BYTES OF THE
3244 A704             (      exbasic.asm):02814                 STA     4,X                               ; * MANTISSA RIGHT ONE COMPLETE BYTE.
3246 A602             (      exbasic.asm):02815                 LDA     2,X                               ; *
3248 A703             (      exbasic.asm):02816                 STA     3,X                               ; *
324A A601             (      exbasic.asm):02817                 LDA     1,X                               ; *
324C A702             (      exbasic.asm):02818                 STA     2,X                               ; *
324E 965B             (      exbasic.asm):02819                 LDA     FPCARY                            ; GET THE CARRY IN BYTE
3250 A701             (      exbasic.asm):02820                 STA     1,X                               ; STORE AS THE MS MANTISSA BYTE OF (X)
3252                  (      exbasic.asm):02821         LBAAE
3252 CB08             (      exbasic.asm):02822                 ADDB    #8                                ; ADD 8 TO DIFFERENCE OF EXPONENTS
3254 2FE8             (      exbasic.asm):02823                 BLE     LBA9A                             ; BRANCH IF EXPONENT DIFFERENCE < -8
3256 9663             (      exbasic.asm):02824                 LDA     FPSBYT                            ; GET FPA SUB BYTE
3258 C008             (      exbasic.asm):02825                 SUBB    #8                                ; CAST OUT THE 8 ADDED IN ABOVE
325A 270C             (      exbasic.asm):02826                 BEQ     LBAC4                             ; BRANCH IF EXPONENT DIFFERENCE = 0
                      (      exbasic.asm):02827         ;
                      (      exbasic.asm):02828         ;
325C                  (      exbasic.asm):02829         LBAB8
325C 6701             (      exbasic.asm):02830                 ASR     1,X                               ; * SHIFT MANTISSA AND SUB BYTE ONE BIT TO THE RIGHT
325E                  (      exbasic.asm):02831         LBABA
325E 6602             (      exbasic.asm):02832                 ROR     2,X                               ; *
3260 6603             (      exbasic.asm):02833                 ROR     3,X                               ; *
3262 6604             (      exbasic.asm):02834                 ROR     4,X                               ; *
3264 46               (      exbasic.asm):02835                 RORA                                      ; *
3265 5C               (      exbasic.asm):02836                 INCB                                      ; ADD ONE TO EXPONENT DIFFERENCE
3266 26F4             (      exbasic.asm):02837                 BNE     LBAB8                             ; BRANCH IF EXPONENTS NOT =
3268                  (      exbasic.asm):02838         LBAC4
3268 39               (      exbasic.asm):02839                 RTS
3269                  (      exbasic.asm):02840         LBAC5
3269 8100000000       (      exbasic.asm):02841                 FCB     $81,$00,$00,$00,$00               ; FLOATING POINT CONSTANT 1.0
                      (      exbasic.asm):02842         ;
                      (      exbasic.asm):02843         ;* ARITHMETIC OPERATION (*) JUMPS HERE - MULTIPLY
                      (      exbasic.asm):02844         ;* FPA0 BY (X) - RETURN PRODUCT IN FPA0
326E                  (      exbasic.asm):02845         LBACA
326E 8D63             (      exbasic.asm):02846                 BSR     LBB2F                             ; MOVE PACKED FPA FROM (X) TO FPA1
3270                  (      exbasic.asm):02847         LBACC
3270 2760             (      exbasic.asm):02848                 BEQ     LBB2E                             ; BRANCH IF EXPONENT OF FPA0 = 0
3272 8D78             (      exbasic.asm):02849                 BSR     LBB48                             ; CALCULATE EXPONENT OF PRODUCT
                      (      exbasic.asm):02850         ;* MULTIPLY FPA0 MANTISSA BY FPA1. NORMALIZE
                      (      exbasic.asm):02851         ;* HIGH ORDER BYTES OF PRODUCT IN FPA0. THE
                      (      exbasic.asm):02852         ;* LOW ORDER FOUR BYTES OF THE PRODUCT WILL
                      (      exbasic.asm):02853         ;* BE STORED IN VAB-VAE.
3274                  (      exbasic.asm):02854         LBAD0
3274 8600             (      exbasic.asm):02855                 LDA     #0                                ; * ZERO OUT MANTISSA OF FPA2
3276 9713             (      exbasic.asm):02856                 STA     FPA2                              ; *
3278 9714             (      exbasic.asm):02857                 STA     FPA2+1                            ; *
327A 9715             (      exbasic.asm):02858                 STA     FPA2+2                            ; *
327C 9716             (      exbasic.asm):02859                 STA     FPA2+3                            ; *
327E D653             (      exbasic.asm):02860                 LDB     FPA0+3                            ; GET LS BYTE OF FPA0
3280 8D22             (      exbasic.asm):02861                 BSR     LBB00                             ; MULTIPLY BY FPA1
3282 D663             (      exbasic.asm):02862                 LDB     FPSBYT                            ; * TEMPORARILY SAVE SUB BYTE 4
3284 D77F             (      exbasic.asm):02863                 STB     VAE                               ; *
3286 D652             (      exbasic.asm):02864                 LDB     FPA0+2                            ; GET NUMBER 3 MANTISSA BYTE OF FPA0
3288 8D1A             (      exbasic.asm):02865                 BSR     LBB00                             ; MULTIPLY BY FPA1
328A D663             (      exbasic.asm):02866                 LDB     FPSBYT                            ; * TEMPORARILY SAVE SUB BYTE 3
328C D77E             (      exbasic.asm):02867                 STB     VAD                               ; *
328E D651             (      exbasic.asm):02868                 LDB     FPA0+1                            ; GET NUMBER 2 MANTISSA BYTE OF FPA0
3290 8D12             (      exbasic.asm):02869                 BSR     LBB00                             ; MULTIPLY BY FPA1
3292 D663             (      exbasic.asm):02870                 LDB     FPSBYT                            ; * TEMPORARILY SAVE SUB BYTE 2
3294 D77D             (      exbasic.asm):02871                 STB     VAC                               ; *
3296 D650             (      exbasic.asm):02872                 LDB     FPA0                              ; GET MS BYTE OF FPA0 MANTISSA
3298 8D0C             (      exbasic.asm):02873                 BSR     LBB02                             ; MULTIPLY BY FPA1
329A D663             (      exbasic.asm):02874                 LDB     FPSBYT                            ; * TEMPORARILY SAVE SUB BYTE 1
329C D77C             (      exbasic.asm):02875                 STB     VAB                               ; *
329E BD33AF           (      exbasic.asm):02876                 JSR     LBC0B                             ; COPY MANTISSA FROM FPA2 TO FPA0
32A1 7E31C0           (      exbasic.asm):02877                 JMP     LBA1C                             ; NORMALIZE FPA0
32A4                  (      exbasic.asm):02878         LBB00
32A4 2795             (      exbasic.asm):02879                 BEQ     LBA97                             ; SHIFT FPA2 ONE BYTE TO RIGHT
32A6                  (      exbasic.asm):02880         LBB02
32A6 43               (      exbasic.asm):02881                 COMA                                      ; SET CARRY FLAG
                      (      exbasic.asm):02882         ;* MULTIPLY FPA1 MANTISSA BY ACCB AND
                      (      exbasic.asm):02883         ;* ADD PRODUCT TO FPA2 MANTISSA
32A7                  (      exbasic.asm):02884         LBB03
32A7 9613             (      exbasic.asm):02885                 LDA     FPA2                              ; GET FPA2 MS BYTE
32A9 56               (      exbasic.asm):02886                 RORB                                      ; ROTATE CARRY FLAG INTO SHIFT COUNTER;
                      (      exbasic.asm):02887         ;*         DATA BIT INTO CARRY
32AA 2726             (      exbasic.asm):02888                 BEQ     LBB2E                             ; BRANCH WHEN 8 SHIFTS DONE
32AC 2416             (      exbasic.asm):02889                 BCC     LBB20                             ; DO NOT ADD FPA1 IF DATA BIT = 0
32AE 9616             (      exbasic.asm):02890                 LDA     FPA2+3                            ; * ADD MANTISSA LS BYTE
32B0 9B60             (      exbasic.asm):02891                 ADDA    FPA1+3                            ; *
32B2 9716             (      exbasic.asm):02892                 STA     FPA2+3                            ; *
32B4 9615             (      exbasic.asm):02893                 LDA     FPA2+2                            ; = ADD MANTISSA NUMBER 3 BYTE
32B6 995F             (      exbasic.asm):02894                 ADCA    FPA1+2                            ; =
32B8 9715             (      exbasic.asm):02895                 STA     FPA2+2                            ; =
32BA 9614             (      exbasic.asm):02896                 LDA     FPA2+1                            ; * ADD MANTISSA NUMBER 2 BYTE
32BC 995E             (      exbasic.asm):02897                 ADCA    FPA1+1                            ; *
32BE 9714             (      exbasic.asm):02898                 STA     FPA2+1                            ; *
32C0 9613             (      exbasic.asm):02899                 LDA     FPA2                              ; = ADD MANTISSA MS BYTE
32C2 995D             (      exbasic.asm):02900                 ADCA    FPA1                              ; =
32C4                  (      exbasic.asm):02901         LBB20
32C4 46               (      exbasic.asm):02902                 RORA                                      ; * ROTATE CARRY INTO MS BYTE
32C5 9713             (      exbasic.asm):02903                 STA     FPA2                              ; *
32C7 0614             (      exbasic.asm):02904                 ROR     FPA2+1                            ; = ROTATE FPA2 ONE BIT TO THE RIGHT
32C9 0615             (      exbasic.asm):02905                 ROR     FPA2+2                            ; =
32CB 0616             (      exbasic.asm):02906                 ROR     FPA2+3                            ; =
32CD 0663             (      exbasic.asm):02907                 ROR     FPSBYT                            ; =
32CF 4F               (      exbasic.asm):02908                 CLRA                                      ; CLEAR CARRY FLAG
32D0 20D5             (      exbasic.asm):02909                 BRA     LBB03                             ; KEEP LOOPING
32D2                  (      exbasic.asm):02910         LBB2E
32D2 39               (      exbasic.asm):02911                 RTS
                      (      exbasic.asm):02912         ;* UNPACK A FP NUMBER FROM (X) TO FPA1
32D3                  (      exbasic.asm):02913         LBB2F
32D3 EC01             (      exbasic.asm):02914                 LDD     1,X                               ; GET TWO MSB BYTES OF MANTISSA FROM
                      (      exbasic.asm):02915         ;*         FPA  POINTED TO BY X
32D5 9761             (      exbasic.asm):02916                 STA     FP1SGN                            ; SAVE PACKED MANTISSA SIGN BYTE
32D7 8A80             (      exbasic.asm):02917                 ORA     #$80                              ; FORCE BIT 7 OF MSB MANTISSA = 1
32D9 DD5D             (      exbasic.asm):02918                 STD     FPA1                              ; SAVE 2 MSB BYTES IN FPA1
32DB D661             (      exbasic.asm):02919                 LDB     FP1SGN                            ; * GET PACKED MANTISSA SIGN BYTE. EOR W/FPA0
32DD D854             (      exbasic.asm):02920                 EORB    FP0SGN                            ; * SIGN - NEW SIGN POSITION IF BOTH OLD SIGNS ALIKE,
32DF D762             (      exbasic.asm):02921                 STB     RESSGN                            ; * NEG IF BOTH OLD SIGNS DIFF. SAVE ADJUSTED
                      (      exbasic.asm):02922         ;*                             ; * MANTISSA SIGN BYTE
32E1 EC03             (      exbasic.asm):02923                 LDD     3,X                               ; = GET 2 LSB BYTES OF MANTISSA
32E3 DD5F             (      exbasic.asm):02924                 STD     FPA1+2                            ; = AND PUT IN FPA1
32E5 A684             (      exbasic.asm):02925                 LDA     ,X                                ; * GET EXPONENT FROM (X) AND
32E7 975C             (      exbasic.asm):02926                 STA     FP1EXP                            ; * PUT IN EXPONENT OF FPA1
32E9 D64F             (      exbasic.asm):02927                 LDB     FP0EXP                            ; GET EXPONENT OF FPA0
32EB 39               (      exbasic.asm):02928                 RTS
                      (      exbasic.asm):02929         ;* CALCULATE EXPONENT FOR PRODUCT OF FPA0 & FPA1
                      (      exbasic.asm):02930         ;* ENTER WITH EXPONENT OF FPA1 IN ACCA
32EC                  (      exbasic.asm):02931         LBB48
32EC 4D               (      exbasic.asm):02932                 TSTA                                      ; TEST EXPONENT OF FPA1
32ED 2716             (      exbasic.asm):02933                 BEQ     LBB61                             ; PURGE RETURN ADDRESS & SET FPA0 = 0
32EF 9B4F             (      exbasic.asm):02934                 ADDA    FP0EXP                            ; ADD FPA1 EXPONENT TO FPA0 EXPONENT
32F1 46               (      exbasic.asm):02935                 RORA                                      ; ROTATE CARRY INTO BIT 7; BIT 0 INTO CARRY
32F2 49               (      exbasic.asm):02936                 ROLA                                      ; SET OVERFLOW FLAG
32F3 2810             (      exbasic.asm):02937                 BVC     LBB61                             ; BRANCH IF EXPONENT TOO LARGE OR SMALL
32F5 8B80             (      exbasic.asm):02938                 ADDA    #$80                              ; ADD $80 BIAS TO EXPONENT
32F7 974F             (      exbasic.asm):02939                 STA     FP0EXP                            ; SAVE NEW EXPONENT
32F9 270C             (      exbasic.asm):02940                 BEQ     LBB63                             ; SET FPA0
32FB 9662             (      exbasic.asm):02941                 LDA     RESSGN                            ; GET MANTISSA SIGN
32FD 9754             (      exbasic.asm):02942                 STA     FP0SGN                            ; SAVE AS MANTISSA SIGN OF FPA0
32FF 39               (      exbasic.asm):02943                 RTS
                      (      exbasic.asm):02944         ;* IF FPA0 = POSITIVE THEN 'OV' ERROR IF FPA0
                      (      exbasic.asm):02945         ;* = IS NEGATIVE THEN FPA0 = 0
3300                  (      exbasic.asm):02946         LBB5C
3300 9654             (      exbasic.asm):02947                 LDA     FP0SGN                            ; GET MANTISSA SIGN OF FPA0
3302 43               (      exbasic.asm):02948                 COMA                                      ; CHANGE SIGN OF FPA0 MANTISSA
3303 2002             (      exbasic.asm):02949                 BRA     LBB63
3305                  (      exbasic.asm):02950         LBB61
3305 3262             (      exbasic.asm):02951                 LEAS    2,S                               ; PURGE RETURN ADDRESS FROM STACK
3307                  (      exbasic.asm):02952         LBB63
3307 102AFED2         (      exbasic.asm):02953                 LBPL    LBA39                             ; ZERO FPA0 MANTISSA SIGN & EXPONENT
330B                  (      exbasic.asm):02954         LBB67
330B 7E3236           (      exbasic.asm):02955                 JMP     LBA92                             ; 'OV' OVERFLOW ERROR
                      (      exbasic.asm):02956         ;* FAST MULTIPLY BY 10 AND LEAVE RESULT IN FPA0
330E                  (      exbasic.asm):02957         LBB6A
330E BD3403           (      exbasic.asm):02958                 JSR     LBC5F                             ; TRANSFER FPA0 TO FPA1
3311 270D             (      exbasic.asm):02959                 BEQ     LBB7C                             ; BRANCH IF EXPONENT = 0
3313 8B02             (      exbasic.asm):02960                 ADDA    #2                                ; ADD 2 TO EXPONENT (TIMES 4)
3315 25F4             (      exbasic.asm):02961                 BCS     LBB67                             ; 'OV' ERROR IF EXPONENT > $FF
3317 0F62             (      exbasic.asm):02962                 CLR     RESSGN                            ; CLEAR RESULT SIGN BYTE
3319 BD3171           (      exbasic.asm):02963                 JSR     LB9CD                             ; ADD FPA1 TO FPA0 (TIMES 5)
331C 0C4F             (      exbasic.asm):02964                 INC     FP0EXP                            ; ADD ONE TO EXPONENT (TIMES 10)
331E 27EB             (      exbasic.asm):02965                 BEQ     LBB67                             ; 'OV' ERROR IF EXPONENT > $FF
3320                  (      exbasic.asm):02966         LBB7C
3320 39               (      exbasic.asm):02967                 RTS
3321                  (      exbasic.asm):02968         LBB7D
3321 8420000000       (      exbasic.asm):02969                 FCB     $84,$20,$00,$00,$00               ; FLOATING POINT CONSTANT 10
                      (      exbasic.asm):02970         ;* DIVIDE FPA0 BY 10
3326                  (      exbasic.asm):02971         LBB82
3326 BD3403           (      exbasic.asm):02972                 JSR     LBC5F                             ; MOVE FPA0 TO FPA1
3329 8E3321           (      exbasic.asm):02973                 LDX     #LBB7D                            ; POINT TO FLOATING POINT CONSTANT 10
332C 5F               (      exbasic.asm):02974                 CLRB                                      ; ZERO MANTISSA SIGN BYTE
332D                  (      exbasic.asm):02975         LBB89
332D D762             (      exbasic.asm):02976                 STB     RESSGN                            ; STORE THE QUOTIENT MANTISSA SIGN BYTE
332F BD33B8           (      exbasic.asm):02977                 JSR     LBC14                             ; UNPACK AN FP NUMBER FROM (X) INTO FPA0
3332 8C               (      exbasic.asm):02978                 FCB     SKP2                              ; SKIP TWO BYTES
                      (      exbasic.asm):02979         ;* DIVIDE (X) BY FPA0-LEAVE NORMALIZED QUOTIENT IN FPA0
3333                  (      exbasic.asm):02980         LBB8F
3333 8D9E             (      exbasic.asm):02981                 BSR     LBB2F                             ; GET FP NUMBER FROM (X) TO FPA1
                      (      exbasic.asm):02982         ;
                      (      exbasic.asm):02983         ;* ARITHMETIC OPERATION (/) JUMPS HERE. DIVIDE FPA1 BY FPA0 (ENTER WITH
                      (      exbasic.asm):02984         ;* EXPONENT OF FPA1 IN ACCA AND FLAGS SET BY TSTA)
                      (      exbasic.asm):02985         ;
                      (      exbasic.asm):02986         ;* DIVIDE FPA1 BY FPA0
3335                  (      exbasic.asm):02987         LBB91
3335 2773             (      exbasic.asm):02988                 BEQ     LBC06                             ; '/0' DIVIDE BY ZERO ERROR
3337 004F             (      exbasic.asm):02989                 NEG     FP0EXP                            ; GET EXPONENT OF RECIPROCAL OF DIVISOR
3339 8DB1             (      exbasic.asm):02990                 BSR     LBB48                             ; CALCULATE EXPONENT OF QUOTIENT
333B 0C4F             (      exbasic.asm):02991                 INC     FP0EXP                            ; INCREMENT EXPONENT
333D 27CC             (      exbasic.asm):02992                 BEQ     LBB67                             ; 'OV' OVERFLOW ERROR
333F 8E0013           (      exbasic.asm):02993                 LDX     #FPA2                             ; POINT X TO MANTISSA OF FPA2 - HOLD
                      (      exbasic.asm):02994         ;*                             ; TEMPORARY QUOTIENT IN FPA2
3342 C604             (      exbasic.asm):02995                 LDB     #4                                ; 5 BYTE DIVIDE
3344 D703             (      exbasic.asm):02996                 STB     TMPLOC                            ; SAVE BYTE COUNTER
3346 C601             (      exbasic.asm):02997                 LDB     #1                                ; SHIFT COUNTER-AND TEMPORARY QUOTIENT BYTE
                      (      exbasic.asm):02998         ;* COMPARE FPA0 MANTISSA TO FPA1 MANTISSA -
                      (      exbasic.asm):02999         ;* SET CARRY FLAG IF FPA1 >= FPA0
3348                  (      exbasic.asm):03000         LBBA4
3348 9650             (      exbasic.asm):03001                 LDA     FPA0                              ; * COMPARE THE TWO MS BYTES
334A 915D             (      exbasic.asm):03002                 CMPA    FPA1                              ; * OF FPA0 AND FPA1 AND
334C 2613             (      exbasic.asm):03003                 BNE     LBBBD                             ; * BRANCH IF <>
334E 9651             (      exbasic.asm):03004                 LDA     FPA0+1                            ; = COMPARE THE NUMBER 2
3350 915E             (      exbasic.asm):03005                 CMPA    FPA1+1                            ; = BYTES AND
3352 260D             (      exbasic.asm):03006                 BNE     LBBBD                             ; = BRANCH IF <>
3354 9652             (      exbasic.asm):03007                 LDA     FPA0+2                            ; * COMPARE THE NUMBER 3
3356 915F             (      exbasic.asm):03008                 CMPA    FPA1+2                            ; * BYTES AND
3358 2607             (      exbasic.asm):03009                 BNE     LBBBD                             ; * BRANCH IF <>
335A 9653             (      exbasic.asm):03010                 LDA     FPA0+3                            ; = COMPARE THE LS BYTES
335C 9160             (      exbasic.asm):03011                 CMPA    FPA1+3                            ; = AND BRANCH
335E 2601             (      exbasic.asm):03012                 BNE     LBBBD                             ; = IF <>
3360 43               (      exbasic.asm):03013                 COMA                                      ; SET CARRY FLAG IF FPA0 = FPA1
3361                  (      exbasic.asm):03014         LBBBD
3361 1FA8             (      exbasic.asm):03015                 TFR     CC,A                              ; SAVE CARRY FLAG STATUS IN ACCA; CARRY
                      (      exbasic.asm):03016         ;*         CLEAR IF FPA0 > FPA1
3363 59               (      exbasic.asm):03017                 ROLB                                      ; ROTATE CARRY INTO TEMPORARY QUOTIENT BYTE
3364 240A             (      exbasic.asm):03018                 BCC     LBBCC                             ; CARRY WILL BE SET AFTER 8 SHIFTS
3366 E780             (      exbasic.asm):03019                 STB     ,X+                               ; SAVE TEMPORARY QUOTIENT
3368 0A03             (      exbasic.asm):03020                 DEC     TMPLOC                            ; DECREMENT BYTE COUNTER
336A 2B34             (      exbasic.asm):03021                 BMI     LBBFC                             ; BRANCH IF DONE
336C 272E             (      exbasic.asm):03022                 BEQ     LBBF8                             ; BRANCH IF LAST BYTE
336E C601             (      exbasic.asm):03023                 LDB     #1                                ; RESET SHIFT COUNTER AND TEMPORARY QUOTIENT BYTE
3370                  (      exbasic.asm):03024         LBBCC
3370 1F8A             (      exbasic.asm):03025                 TFR     A,CC                              ; RESTORE CARRY FLAG AND
3372 250E             (      exbasic.asm):03026                 BCS     LBBDE                             ; BRANCH IF FPA0 =< FPA1
3374                  (      exbasic.asm):03027         LBBD0
3374 0860             (      exbasic.asm):03028                 ASL     FPA1+3                            ; * SHIFT FPA1 MANTISSA 1 BIT TO LEFT
3376 095F             (      exbasic.asm):03029                 ROL     FPA1+2                            ; *
3378 095E             (      exbasic.asm):03030                 ROL     FPA1+1                            ; *
337A 095D             (      exbasic.asm):03031                 ROL     FPA1                              ; *
337C 25E3             (      exbasic.asm):03032                 BCS     LBBBD                             ; BRANCH IF CARRY - ADD ONE TO PARTIAL QUOTIENT
337E 2BC8             (      exbasic.asm):03033                 BMI     LBBA4                             ; IF MSB OF HIGH ORDER MANTISSA BYTE IS
                      (      exbasic.asm):03034         ;*         SET, CHECK THE MAGNITUDES OF FPA0, FPA1
3380 20DF             (      exbasic.asm):03035                 BRA     LBBBD                             ; CARRY IS CLEAR, CHECK ANOTHER BIT
                      (      exbasic.asm):03036         ;* SUBTRACT FPA0 FROM FPA1 - LEAVE RESULT IN FPA1
3382                  (      exbasic.asm):03037         LBBDE
3382 9660             (      exbasic.asm):03038                 LDA     FPA1+3                            ; * SUBTRACT THE LS BYTES OF MANTISSA
3384 9053             (      exbasic.asm):03039                 SUBA    FPA0+3                            ; *
3386 9760             (      exbasic.asm):03040                 STA     FPA1+3                            ; *
3388 965F             (      exbasic.asm):03041                 LDA     FPA1+2                            ; = THEN THE NEXT BYTE
338A 9252             (      exbasic.asm):03042                 SBCA    FPA0+2                            ; =
338C 975F             (      exbasic.asm):03043                 STA     FPA1+2                            ; =
338E 965E             (      exbasic.asm):03044                 LDA     FPA1+1                            ; * AND THE NEXT
3390 9251             (      exbasic.asm):03045                 SBCA    FPA0+1                            ; *
3392 975E             (      exbasic.asm):03046                 STA     FPA1+1                            ; *
3394 965D             (      exbasic.asm):03047                 LDA     FPA1                              ; = AND FINALLY, THE MS BYTE OF MANTISSA
3396 9250             (      exbasic.asm):03048                 SBCA    FPA0                              ; =
3398 975D             (      exbasic.asm):03049                 STA     FPA1                              ; =
339A 20D8             (      exbasic.asm):03050                 BRA     LBBD0                             ; GO SHIFT FPA1
339C                  (      exbasic.asm):03051         LBBF8
339C C640             (      exbasic.asm):03052                 LDB     #$40                              ; USE ONLY TWO BITS OF THE LAST BYTE (FIFTH)
339E 20D0             (      exbasic.asm):03053                 BRA     LBBCC                             ; GO SHIFT THE LAST BYTE
33A0                  (      exbasic.asm):03054         LBBFC
33A0 56               (      exbasic.asm):03055                 RORB                                      ; * SHIFT CARRY (ALWAYS SET HERE) INTO
33A1 56               (      exbasic.asm):03056                 RORB                                      ; * BIT 5 AND MOVE
33A2 56               (      exbasic.asm):03057                 RORB                                      ; * BITS 1,0 TO BITS 7,6
33A3 D763             (      exbasic.asm):03058                 STB     FPSBYT                            ; SAVE SUB BYTE
33A5 8D08             (      exbasic.asm):03059                 BSR     LBC0B                             ; MOVE MANTISSA OF FPA2 TO FPA0
33A7 7E31C0           (      exbasic.asm):03060                 JMP     LBA1C                             ; NORMALIZE FPA0
33AA                  (      exbasic.asm):03061         LBC06
33AA C614             (      exbasic.asm):03062                 LDB     #2*10                             ; /0' ERROR
33AC 7E2413           (      exbasic.asm):03063                 JMP     LAC46                             ; PROCESS THE ERROR
                      (      exbasic.asm):03064         ;* COPY MANTISSA FROM FPA2 TO FPA0
33AF                  (      exbasic.asm):03065         LBC0B
33AF 9E13             (      exbasic.asm):03066                 LDX     FPA2                              ; * MOVE TOP 2 BYTES
33B1 9F50             (      exbasic.asm):03067                 STX     FPA0                              ; *
33B3 9E15             (      exbasic.asm):03068                 LDX     FPA2+2                            ; = MOVE BOTTOM 2 BYTES
33B5 9F52             (      exbasic.asm):03069                 STX     FPA0+2                            ; =
33B7 39               (      exbasic.asm):03070                 RTS
                      (      exbasic.asm):03071         ;* COPY A PACKED FP NUMBER FROM (X) TO FPA0
33B8                  (      exbasic.asm):03072         LBC14
33B8 3402             (      exbasic.asm):03073                 PSHS    A                                 ; SAVE ACCA
33BA EC01             (      exbasic.asm):03074                 LDD     1,X                               ; GET TOP TWO MANTISSA BYTES
33BC 9754             (      exbasic.asm):03075                 STA     FP0SGN                            ; SAVE MS BYTE OF MANTISSA AS MANTISSA SIGN
33BE 8A80             (      exbasic.asm):03076                 ORA     #$80                              ; UNPACK MS BYTE
33C0 DD50             (      exbasic.asm):03077                 STD     FPA0                              ; SAVE UNPACKED TOP 2 MANTISSA BYTES
33C2 0F63             (      exbasic.asm):03078                 CLR     FPSBYT                            ; CLEAR MANTISSA SUB BYTE
33C4 E684             (      exbasic.asm):03079                 LDB     ,X                                ; GET EXPONENT TO ACCB
33C6 AE03             (      exbasic.asm):03080                 LDX     3,X                               ; * MOVE LAST 2
33C8 9F52             (      exbasic.asm):03081                 STX     FPA0+2                            ; * MANTISSA BYTES
33CA D74F             (      exbasic.asm):03082                 STB     FP0EXP                            ; SAVE EXPONENT
33CC 3582             (      exbasic.asm):03083                 PULS    A,PC                              ; RESTORE ACCA AND RETURN
                      (      exbasic.asm):03084         ;
33CE                  (      exbasic.asm):03085         LBC2A
33CE 8E0045           (      exbasic.asm):03086                 LDX     #V45                              ; POINT X TO MANTISSA OF FPA4
33D1 2006             (      exbasic.asm):03087                 BRA     LBC35                             ; MOVE FPA0 TO FPA4
33D3                  (      exbasic.asm):03088         LBC2F
33D3 8E0040           (      exbasic.asm):03089                 LDX     #V40                              ; POINT X TO MANTISSA OF FPA3
33D6 8C               (      exbasic.asm):03090                 FCB     SKP2                              ; SKIP TWO BYTES
33D7                  (      exbasic.asm):03091         LBC33
33D7 9E3B             (      exbasic.asm):03092                 LDX     VARDES                            ; POINT X TO VARIABLE DESCRIPTOR IN VARDES
                      (      exbasic.asm):03093         ;* PACK FPA0 AND MOVE IT TO ADDRESS IN X
33D9                  (      exbasic.asm):03094         LBC35
33D9 964F             (      exbasic.asm):03095                 LDA     FP0EXP                            ; * COPY EXPONENT
33DB A784             (      exbasic.asm):03096                 STA     ,X                                ; *
33DD 9654             (      exbasic.asm):03097                 LDA     FP0SGN                            ; GET MANTISSA SIGN BIT
33DF 8A7F             (      exbasic.asm):03098                 ORA     #$7F                              ; MASK THE BOTTOM 7 BITS
33E1 9450             (      exbasic.asm):03099                 ANDA    FPA0                              ; AND BIT 7 OF MANTISSA SIGN INTO BIT 7 OF MS BYTE
33E3 A701             (      exbasic.asm):03100                 STA     1,X                               ; SAVE MS BYTE
33E5 9651             (      exbasic.asm):03101                 LDA     FPA0+1                            ; * MOVE 2ND MANTISSA BYTE
33E7 A702             (      exbasic.asm):03102                 STA     2,X                               ; *
33E9 DE52             (      exbasic.asm):03103                 LDU     FPA0+2                            ; = MOVE BOTTOM 2 MANTISSA BYTES
33EB EF03             (      exbasic.asm):03104                 STU     3,X                               ; =
33ED 39               (      exbasic.asm):03105                 RTS
                      (      exbasic.asm):03106         ;* MOVE FPA1 TO FPA0 RETURN W/MANTISSA SIGN IN ACCA
33EE                  (      exbasic.asm):03107         LBC4A
33EE 9661             (      exbasic.asm):03108                 LDA     FP1SGN                            ; * COPY MANTISSA SIGN FROM
33F0                  (      exbasic.asm):03109         LBC4C
33F0 9754             (      exbasic.asm):03110                 STA     FP0SGN                            ; * FPA1 TO FPA0
33F2 9E5C             (      exbasic.asm):03111                 LDX     FP1EXP                            ; = COPY EXPONENT + MS BYTE FROM
33F4 9F4F             (      exbasic.asm):03112                 STX     FP0EXP                            ; = FPA1 TO FPA0
33F6 0F63             (      exbasic.asm):03113                 CLR     FPSBYT                            ; CLEAR MANTISSA SUB BYTE
33F8 965E             (      exbasic.asm):03114                 LDA     FPA1+1                            ; * COPY 2ND MANTISSA BYTE
33FA 9751             (      exbasic.asm):03115                 STA     FPA0+1                            ; * FROM FPA1 TO FPA0
33FC 9654             (      exbasic.asm):03116                 LDA     FP0SGN                            ; GET MANTISSA SIGN
33FE 9E5F             (      exbasic.asm):03117                 LDX     FPA1+2                            ; * COPY 3RD AND 4TH MANTISSA BYTE
3400 9F52             (      exbasic.asm):03118                 STX     FPA0+2                            ; * FROM FPA1 TO FPA0
3402 39               (      exbasic.asm):03119                 RTS
                      (      exbasic.asm):03120         ;* TRANSFER FPA0 TO FPA1
3403                  (      exbasic.asm):03121         LBC5F
3403 DC4F             (      exbasic.asm):03122                 LDD     FP0EXP                            ; * TRANSFER EXPONENT & MS BYTE
3405 DD5C             (      exbasic.asm):03123                 STD     FP1EXP                            ; *
3407 9E51             (      exbasic.asm):03124                 LDX     FPA0+1                            ; = TRANSFER MIDDLE TWO BYTES
3409 9F5E             (      exbasic.asm):03125                 STX     FPA1+1                            ; =
340B 9E53             (      exbasic.asm):03126                 LDX     FPA0+3                            ; * TRANSFER BOTTOM TWO BYTES
340D 9F60             (      exbasic.asm):03127                 STX     FPA1+3                            ; *
340F 4D               (      exbasic.asm):03128                 TSTA                                      ; SET FLAGS ACCORDING TO EXPONENT
3410 39               (      exbasic.asm):03129                 RTS
                      (      exbasic.asm):03130         ;* CHECK FPA0; RETURN ACCB = 0 IF FPA0 = 0,
                      (      exbasic.asm):03131         ;* ACCB = $FF IF FPA0 = NEGATIVE, ACCB = 1 IF FPA0 = POSITIVE
3411                  (      exbasic.asm):03132         LBC6D
3411 D64F             (      exbasic.asm):03133                 LDB     FP0EXP                            ; GET EXPONENT
3413 2708             (      exbasic.asm):03134                 BEQ     LBC79                             ; BRANCH IF FPA0 = 0
3415                  (      exbasic.asm):03135         LBC71
3415 D654             (      exbasic.asm):03136                 LDB     FP0SGN                            ; GET SIGN OF MANTISSA
3417                  (      exbasic.asm):03137         LBC73
3417 59               (      exbasic.asm):03138                 ROLB                                      ; BIT 7 TO CARRY
3418 C6FF             (      exbasic.asm):03139                 LDB     #$FF                              ; NEGATIVE FLAG
341A 2501             (      exbasic.asm):03140                 BCS     LBC79                             ; BRANCH IF NEGATIVE MANTISSA
341C 50               (      exbasic.asm):03141                 NEGB                                      ; ACCB = 1 IF POSITIVE MANTISSA
341D                  (      exbasic.asm):03142         LBC79
341D 39               (      exbasic.asm):03143                 RTS
                      (      exbasic.asm):03144         ;
                      (      exbasic.asm):03145         ;* SGN
341E                  (      exbasic.asm):03146         SGN
341E 8DF1             (      exbasic.asm):03147                 BSR     LBC6D                             ; SET ACCB ACCORDING TO SIGN OF FPA0
                      (      exbasic.asm):03148         ;* CONVERT A SIGNED NUMBER IN ACCB INTO A FLOATING POINT NUMBER
3420                  (      exbasic.asm):03149         LBC7C
3420 D750             (      exbasic.asm):03150                 STB     FPA0                              ; SAVE ACCB IN FPA0
3422 0F51             (      exbasic.asm):03151                 CLR     FPA0+1                            ; CLEAR NUMBER 2 MANTISSA BYTE OF FPA0
3424 C688             (      exbasic.asm):03152                 LDB     #$88                              ; EXPONENT REQUIRED IF FPA0 IS TO BE AN INTEGER
3426                  (      exbasic.asm):03153         LBC82
3426 9650             (      exbasic.asm):03154                 LDA     FPA0                              ; GET MS BYTE OF MANTISSA
3428 8080             (      exbasic.asm):03155                 SUBA    #$80                              ; SET CARRY IF POSITIVE MANTISSA
342A                  (      exbasic.asm):03156         LBC86
342A D74F             (      exbasic.asm):03157                 STB     FP0EXP                            ; SAVE EXPONENT
342C DC74             (      exbasic.asm):03158                 LDD     ZERO                              ; * ZERO OUT ACCD AND
342E DD52             (      exbasic.asm):03159                 STD     FPA0+2                            ; * BOTTOM HALF OF FPA0
3430 9763             (      exbasic.asm):03160                 STA     FPSBYT                            ; CLEAR SUB BYTE
3432 9754             (      exbasic.asm):03161                 STA     FP0SGN                            ; CLEAR SIGN OF FPA0 MANTISSA
3434 7E31BC           (      exbasic.asm):03162                 JMP     LBA18                             ; GO NORMALIZE FPA0
                      (      exbasic.asm):03163         ;
                      (      exbasic.asm):03164         ;* ABS
3437                  (      exbasic.asm):03165         ABS
3437 0F54             (      exbasic.asm):03166                 CLR     FP0SGN                            ; FORCE MANTISSA SIGN OF FPA0 POSITIVE
3439 39               (      exbasic.asm):03167                 RTS
                      (      exbasic.asm):03168         ;* COMPARE A PACKED FLOATING POINT NUMBER POINTED TO
                      (      exbasic.asm):03169         ;* BY (X) TO AN UNPACKED FP NUMBER IN FPA0. RETURN
                      (      exbasic.asm):03170         ;* ZERO FLAG SET AND ACCB = 0, IF EQUAL; ACCB = 1 IF
                      (      exbasic.asm):03171         ;* FPA0 > (X); ACCB = $FF IF FPA0 < (X)
343A                  (      exbasic.asm):03172         LBC96
343A E684             (      exbasic.asm):03173                 LDB     ,X                                ; CHECK EXPONENT OF (X)
343C 27D3             (      exbasic.asm):03174                 BEQ     LBC6D                             ; BRANCH IF FPA = 0
343E E601             (      exbasic.asm):03175                 LDB     1,X                               ; GET MS BYTE OF MANTISSA OF (X)
3440 D854             (      exbasic.asm):03176                 EORB    FP0SGN                            ; EOR WITH SIGN OF FPA0
3442 2BD1             (      exbasic.asm):03177                 BMI     LBC71                             ; BRANCH IF SIGNS NOT =
                      (      exbasic.asm):03178         ;* COMPARE FPA0 WITH FP NUMBER POINTED TO BY (X).
                      (      exbasic.asm):03179         ;* FPA0 IS NORMALIZED, (X) IS PACKED.
3444                  (      exbasic.asm):03180         LBCA0
3444 D64F             (      exbasic.asm):03181                 LDB     FP0EXP                            ; * GET EXPONENT OF
3446 E184             (      exbasic.asm):03182                 CMPB    ,X                                ; * FPA0, COMPARE TO EXPONENT OF
3448 261D             (      exbasic.asm):03183                 BNE     LBCC3                             ; * (X) AND BRANCH IF <>.
344A E601             (      exbasic.asm):03184                 LDB     1,X                               ; * GET MS BYTE OF (X), KEEP ONLY
344C CA7F             (      exbasic.asm):03185                 ORB     #$7F                              ; * THE SIGN BIT - 'AND' THE BOTTOM 7
344E D450             (      exbasic.asm):03186                 ANDB    FPA0                              ; * BITS OF FPA0 INTO ACCB
3450 E101             (      exbasic.asm):03187                 CMPB    1,X                               ; = COMPARE THE BOTTOM 7 BITS OF THE MANTISSA
3452 2613             (      exbasic.asm):03188                 BNE     LBCC3                             ; = MS BYTE AND BRANCH IF <>
3454 D651             (      exbasic.asm):03189                 LDB     FPA0+1                            ; * COMPARE 2ND BYTE
3456 E102             (      exbasic.asm):03190                 CMPB    2,X                               ; * OF MANTISSA,
3458 260D             (      exbasic.asm):03191                 BNE     LBCC3                             ; * BRANCH IF <>
345A D652             (      exbasic.asm):03192                 LDB     FPA0+2                            ; = COMPARE 3RD BYTE
345C E103             (      exbasic.asm):03193                 CMPB    3,X                               ; = OF MANTISSA,
345E 2607             (      exbasic.asm):03194                 BNE     LBCC3                             ; = BRANCH IF <>
3460 D653             (      exbasic.asm):03195                 LDB     FPA0+3                            ; * SUBTRACT LS BYTE
3462 E004             (      exbasic.asm):03196                 SUBB    4,X                               ; * OF (X) FROM LS BYTE OF
3464 2601             (      exbasic.asm):03197                 BNE     LBCC3                             ; * FPA0, BRANCH IF <>
3466 39               (      exbasic.asm):03198                 RTS                                       ; RETURN IF FP (X) = FPA0
3467                  (      exbasic.asm):03199         LBCC3
3467 56               (      exbasic.asm):03200                 RORB                                      ; SHIFT CARRY TO BIT 7; CARRY SET IF FPA0 < (X)
3468 D854             (      exbasic.asm):03201                 EORB    FP0SGN                            ; TOGGLE SIZE COMPARISON BIT IF FPA0 IS NEGATIVE
346A 20AB             (      exbasic.asm):03202                 BRA     LBC73                             ; GO SET ACCB ACCORDING TO COMPARISON
                      (      exbasic.asm):03203         ;* DE-NORMALIZE FPA0 : SHIFT THE MANTISSA UNTIL THE BINARY POINT IS TO THE RIGHT
                      (      exbasic.asm):03204         ;* OF THE LEAST SIGNIFICANT BYTE OF THE MANTISSA
346C                  (      exbasic.asm):03205         LBCC8
346C D64F             (      exbasic.asm):03206                 LDB     FP0EXP                            ; GET EXPONENT OF FPA0
346E 273D             (      exbasic.asm):03207                 BEQ     LBD09                             ; ZERO MANTISSA IF FPA0 = 0
3470 C0A0             (      exbasic.asm):03208                 SUBB    #$A0                              ; SUBTRACT $A0 FROM FPA0 EXPONENT T THIS WILL YIELD
                      (      exbasic.asm):03209         ;*                             ; THE NUMBER OF SHIFTS REQUIRED TO DENORMALIZE FPA0. WHEN
                      (      exbasic.asm):03210         ;*                             ; THE EXPONENT OF FPA0 IS = ZERO, THEN THE BINARY POINT
                      (      exbasic.asm):03211         ;*                             ; WILL BE TO THE RIGHT OF THE MANTISSA
3472 9654             (      exbasic.asm):03212                 LDA     FP0SGN                            ; TEST SIGN OF FPA0 MANTISSA
3474 2A05             (      exbasic.asm):03213                 BPL     LBCD7                             ; BRANCH IF POSITIVE
3476 035B             (      exbasic.asm):03214                 COM     FPCARY                            ; COMPLEMENT CARRY IN BYTE
3478 BD321F           (      exbasic.asm):03215                 JSR     LBA7B                             ; NEGATE MANTISSA OF FPA0
347B                  (      exbasic.asm):03216         LBCD7
347B 8E004F           (      exbasic.asm):03217                 LDX     #FP0EXP                           ; POINT X TO FPA0
347E C1F8             (      exbasic.asm):03218                 CMPB    #-8                               ; EXPONENT DIFFERENCE < -8?
3480 2E06             (      exbasic.asm):03219                 BGT     LBCE4                             ; YES
3482 BD3252           (      exbasic.asm):03220                 JSR     LBAAE                             ; SHIFT FPA0 RIGHT UNTIL FPA0 EXPONENT = $A0
3485 0F5B             (      exbasic.asm):03221                 CLR     FPCARY                            ; CLEAR CARRY IN BYTE
3487 39               (      exbasic.asm):03222                 RTS
3488                  (      exbasic.asm):03223         LBCE4
3488 0F5B             (      exbasic.asm):03224                 CLR     FPCARY                            ; CLEAR CARRY IN BYTE
348A 9654             (      exbasic.asm):03225                 LDA     FP0SGN                            ; * GET SIGN OF FPA0 MANTISSA
348C 49               (      exbasic.asm):03226                 ROLA                                      ; * ROTATE IT INTO THE CARRY FLAG
348D 0650             (      exbasic.asm):03227                 ROR     FPA0                              ; ROTATE CARRY (MANTISSA SIGN) INTO BIT 7
                      (      exbasic.asm):03228         ;*                             ; OF LS BYTE OF MANTISSA
348F 7E325E           (      exbasic.asm):03229                 JMP     LBABA                             ; DE-NORMALIZE FPA0
                      (      exbasic.asm):03230         ;
                      (      exbasic.asm):03231         ;* INT
                      (      exbasic.asm):03232         ;* THE INT STATEMENT WILL "DENORMALIZE" FPA0 - THAT IS IT WILL SHIFT THE BINARY POINT
                      (      exbasic.asm):03233         ;* TO THE EXTREME RIGHT OF THE MANTISSA TO FORCE ITS EXPONENT TO BE $AO. ONCE
                      (      exbasic.asm):03234         ;* THIS IS DONE THE MANTISSA OF FPA0 WILL CONTAIN THE FOUR LEAST SIGNIFICANT
                      (      exbasic.asm):03235         ;* BYTES OF THE INTEGER PORTION OF FPA0. AT THE CONCLUSION OF THE DE-NORMALIZATION
                      (      exbasic.asm):03236         ;* ONLY THE INTEGER PORTION OF FPA0 WILL REMAIN.
                      (      exbasic.asm):03237         ;*
3492                  (      exbasic.asm):03238         INT
3492 D64F             (      exbasic.asm):03239                 LDB     FP0EXP                            ; GET EXPONENT OF FPA0
3494 C1A0             (      exbasic.asm):03240                 CMPB    #$A0                              ; LARGEST POSSIBLE INTEGER EXPONENT
3496 241D             (      exbasic.asm):03241                 BCC     LBD11                             ; RETURN IF FPA0 >= 32768
3498 8DD2             (      exbasic.asm):03242                 BSR     LBCC8                             ; SHIFT THE BINARY POINT ONE TO THE RIGHT OF THE
                      (      exbasic.asm):03243         ;*                             ; LS BYTE OF THE FPA0 MANTISSA
349A D763             (      exbasic.asm):03244                 STB     FPSBYT                            ; ACCB = 0: ZERO OUT THE SUB BYTE
349C 9654             (      exbasic.asm):03245                 LDA     FP0SGN                            ; GET MANTISSA SIGN
349E D754             (      exbasic.asm):03246                 STB     FP0SGN                            ; FORCE MANTISSA SIGN TO BE POSITIVE
34A0 8080             (      exbasic.asm):03247                 SUBA    #$80                              ; SET CARRY IF MANTISSA
34A2 86A0             (      exbasic.asm):03248                 LDA     #$A0                              ; * GET DENORMALIZED EXPONENT AND
34A4 974F             (      exbasic.asm):03249                 STA     FP0EXP                            ; * SAVE IT IN FPA0 EXPONENT
34A6 9653             (      exbasic.asm):03250                 LDA     FPA0+3                            ; = GET LS BYTE OF FPA0 AND
34A8 9701             (      exbasic.asm):03251                 STA     CHARAC                            ; = SAVE IT IN CHARAC
34AA 7E31BC           (      exbasic.asm):03252                 JMP     LBA18                             ; NORMALIZE FPA0
                      (      exbasic.asm):03253         
34AD                  (      exbasic.asm):03254         LBD09
34AD D750             (      exbasic.asm):03255                 STB     FPA0                              ; * LOAD MANTISSA OF FPA0 WITH CONTENTS OF ACCB
34AF D751             (      exbasic.asm):03256                 STB     FPA0+1                            ; *
34B1 D752             (      exbasic.asm):03257                 STB     FPA0+2                            ; *
34B3 D753             (      exbasic.asm):03258                 STB     FPA0+3                            ; *
34B5                  (      exbasic.asm):03259         LBD11
34B5 39               (      exbasic.asm):03260                 RTS                                       ; *
                      (      exbasic.asm):03261         ;
                      (      exbasic.asm):03262         ;* CONVERT ASCII STRING TO FLOATING POINT
34B6                  (      exbasic.asm):03263         LBD12
34B6 9E74             (      exbasic.asm):03264                 LDX     ZERO                              ; (X) = 0
34B8 9F54             (      exbasic.asm):03265                 STX     FP0SGN                            ; * ZERO OUT FPA0 & THE SIGN FLAG (COEFCT)
34BA 9F4F             (      exbasic.asm):03266                 STX     FP0EXP                            ; *
34BC 9F51             (      exbasic.asm):03267                 STX     FPA0+1                            ; *
34BE 9F52             (      exbasic.asm):03268                 STX     FPA0+2                            ; *
34C0 9F47             (      exbasic.asm):03269                 STX     V47                               ; INITIALIZE EXPONENT & EXPONENT SIGN FLAG TO ZERO
34C2 9F45             (      exbasic.asm):03270                 STX     V45                               ; INITIALIZE RIGHT DECIMAL CTR & DECIMAL PT FLAG TO 0
34C4 2567             (      exbasic.asm):03271                 BCS     LBD86                             ; IF CARRY SET (NUMERIC CHARACTER), ASSUME ACCA CONTAINS FIRST
                      (      exbasic.asm):03272         ;*         NUMERIC CHAR, SIGN IS POSITIVE AND SKIP THE RAM HOOK
34C6 BD3BF8           (      exbasic.asm):03273                 JSR     XVEC19                            ; CALL EXTENDED BASIC ADD-IN
34C9                  (      exbasic.asm):03274         LBD25
34C9 812D             (      exbasic.asm):03275                 CMPA    #'-'                              ; * CHECK FOR A LEADING MINUS SIGN AND BRANCH
34CB 2604             (      exbasic.asm):03276                 BNE     LBD2D                             ; * IF NO MINUS SIGN
34CD 0355             (      exbasic.asm):03277                 COM     COEFCT                            ; TOGGLE SIGN; 0 = +; FF = -
34CF 2004             (      exbasic.asm):03278                 BRA     LBD31                             ; INTERPRET THE REST OF THE STRING
34D1                  (      exbasic.asm):03279         LBD2D
34D1 812B             (      exbasic.asm):03280                 CMPA    #'+'                              ; * CHECK FOR LEADING PLUS SlGN AND BRANCH
34D3 2605             (      exbasic.asm):03281                 BNE     LBD35                             ; * IF NOT A PLUS SIGN
34D5                  (      exbasic.asm):03282         LBD31
34D5 BD200B           (      exbasic.asm):03283                 JSR     GETNCH                            ; GET NEXT INPUT CHARACTER FROM BASIC
34D8 2553             (      exbasic.asm):03284                 BCS     LBD86                             ; BRANCH IF NUMERIC CHARACTER
34DA                  (      exbasic.asm):03285         LBD35
34DA 812E             (      exbasic.asm):03286                 CMPA    #'.'                              ; DECIMAL POlNT?
34DC 272A             (      exbasic.asm):03287                 BEQ     LBD61                             ; YES
34DE 8145             (      exbasic.asm):03288                 CMPA    #'E'                              ; "E" SHORTHAND FORM (SCIENTIFIC NOTATION)?
34E0 262A             (      exbasic.asm):03289                 BNE     LBD65                             ; NO
                      (      exbasic.asm):03290         ;* EVALUATE EXPONENT OF EXPONENTIAL FORMAT
34E2 BD200B           (      exbasic.asm):03291                 JSR     GETNCH                            ; GET NEXT INPUT CHARACTER FROM BASIC
34E5 2565             (      exbasic.asm):03292                 BCS     LBDA5                             ; BRANCH IF NUMERIC
34E7 81AA             (      exbasic.asm):03293                 CMPA    #TOK_MINUS                        ; MINUS TOKEN?
34E9 270E             (      exbasic.asm):03294                 BEQ     LBD53                             ; YES
34EB 812D             (      exbasic.asm):03295                 CMPA    #'-'                              ; ASCII MINUS?
34ED 270A             (      exbasic.asm):03296                 BEQ     LBD53                             ; YES
34EF 81A9             (      exbasic.asm):03297                 CMPA    #TOK_PLUS                         ; PLUS TOKEN?
34F1 2708             (      exbasic.asm):03298                 BEQ     LBD55                             ; YES
34F3 812B             (      exbasic.asm):03299                 CMPA    #'+'                              ; ASCII PLUS?
34F5 2704             (      exbasic.asm):03300                 BEQ     LBD55                             ; YES
34F7 2007             (      exbasic.asm):03301                 BRA     LBD59                             ; BRANCH IF NO SIGN FOUND
34F9                  (      exbasic.asm):03302         LBD53
34F9 0348             (      exbasic.asm):03303                 COM     V48                               ; SET EXPONENT SIGN FLAG TO NEGATIVE
                      (      exbasic.asm):03304         ;* STRIP A DECIMAL NUMBER FROM BASIC LINE, CONVERT IT TO BINARY IN V47
34FB                  (      exbasic.asm):03305         LBD55
34FB BD200B           (      exbasic.asm):03306                 JSR     GETNCH                            ; GET NEXT INPUT CHARACTER FROM BASIC
34FE 254C             (      exbasic.asm):03307                 BCS     LBDA5                             ; IF NUMERIC CHARACTER, CONVERT TO BINARY
3500                  (      exbasic.asm):03308         LBD59
3500 0D48             (      exbasic.asm):03309                 TST     V48                               ; * CHECK EXPONENT SIGN FLAG
3502 2708             (      exbasic.asm):03310                 BEQ     LBD65                             ; * AND BRANCH IF POSITIVE
3504 0047             (      exbasic.asm):03311                 NEG     V47                               ; NEGATE VALUE OF EXPONENT
3506 2004             (      exbasic.asm):03312                 BRA     LBD65
3508                  (      exbasic.asm):03313         LBD61
3508 0346             (      exbasic.asm):03314                 COM     V46                               ; *TOGGLE DECIMAL PT FLAG AND INTERPRET ANOTHER
350A 26C9             (      exbasic.asm):03315                 BNE     LBD31                             ; *CHARACTER IF <> 0 - TERMINATE INTERPRETATION
                      (      exbasic.asm):03316         ;*        IF      SECOND DECIMAL POINT
                      (      exbasic.asm):03317         ;* ADJUST FPA0 FOR THE DECIMAL EXPONENT IN V47
350C                  (      exbasic.asm):03318         LBD65
350C 9647             (      exbasic.asm):03319                 LDA     V47                               ; * GET EXPONENT, SUBTRACT THE NUMBER OF
350E 9045             (      exbasic.asm):03320                 SUBA    V45                               ; * PLACES TO THE RIGHT OF DECIMAL POINT
3510 9747             (      exbasic.asm):03321                 STA     V47                               ; * AND RESAVE IT.
3512 2712             (      exbasic.asm):03322                 BEQ     LBD7F                             ; EXIT ROUTINE IF ADJUSTED EXPONENT = ZERO
3514 2A09             (      exbasic.asm):03323                 BPL     LBD78                             ; BRANCH IF POSITIVE EXPONENT
3516                  (      exbasic.asm):03324         LBD6F
3516 BD3326           (      exbasic.asm):03325                 JSR     LBB82                             ; DIVIDE FPA0 BY 10
3519 0C47             (      exbasic.asm):03326                 INC     V47                               ; INCREMENT EXPONENT COUNTER (MULTIPLY BY 10)
351B 26F9             (      exbasic.asm):03327                 BNE     LBD6F                             ; KEEP MULTIPLYING
351D 2007             (      exbasic.asm):03328                 BRA     LBD7F                             ; EXIT ROUTINE
351F                  (      exbasic.asm):03329         LBD78
351F BD330E           (      exbasic.asm):03330                 JSR     LBB6A                             ; MULTIPLY FPA0 BY 10
3522 0A47             (      exbasic.asm):03331                 DEC     V47                               ; DECREMENT EXPONENT COUNTER (DIVIDE BY 10)
3524 26F9             (      exbasic.asm):03332                 BNE     LBD78                             ; KEEP MULTIPLYING
3526                  (      exbasic.asm):03333         LBD7F
3526 9655             (      exbasic.asm):03334                 LDA     COEFCT                            ; GET THE SIGN FLAG
3528 2A8B             (      exbasic.asm):03335                 BPL     LBD11                             ; RETURN IF POSITIVE
352A 7E3690           (      exbasic.asm):03336                 JMP     LBEE9                             ; TOGGLE MANTISSA SIGN OF FPA0, IF NEGATIVE
                      (      exbasic.asm):03337         ;*MULTIPLY FPA0 BY TEN AND ADD ACCA TO THE RESULT
352D                  (      exbasic.asm):03338         LBD86
352D D645             (      exbasic.asm):03339                 LDB     V45                               ; *GET THE RIGHT DECIMAL COUNTER AND SUBTRACT
352F D046             (      exbasic.asm):03340                 SUBB    V46                               ; *THE DECIMAL POINT FLAG FROM IT. IF DECIMAL POINT
3531 D745             (      exbasic.asm):03341                 STB     V45                               ; *FLAG=0, NOTHING HAPPENS. IF DECIMAL POINT FLAG IS
                      (      exbasic.asm):03342         ;*                             -1, THEN RIGHT DECIMAL COUNTER IS INCREMENTED BY ONE
3533 3402             (      exbasic.asm):03343                 PSHS    A                                 ; SAVE NEW DIGIT ON STACK
3535 BD330E           (      exbasic.asm):03344                 JSR     LBB6A                             ; MULTIPLY FPA0 BY 10
3538 3504             (      exbasic.asm):03345                 PULS    B                                 ; GET NEW DIGIT BACK
353A C030             (      exbasic.asm):03346                 SUBB    #'0'                              ; MASK OFF ASCII
353C 8D02             (      exbasic.asm):03347                 BSR     LBD99                             ; ADD ACCB TO FPA0
353E 2095             (      exbasic.asm):03348                 BRA     LBD31                             ; GET ANOTHER CHARACTER FROM BASIC
3540                  (      exbasic.asm):03349         LBD99
3540 BD33D3           (      exbasic.asm):03350                 JSR     LBC2F                             ; PACK FPA0 AND SAVE IT IN FPA3
3543 BD3420           (      exbasic.asm):03351                 JSR     LBC7C                             ; CONVERT ACCB TO FP NUMBER IN FPA0
3546 8E0040           (      exbasic.asm):03352                 LDX     #V40                              ; * ADD FPA0 TO
3549 7E3166           (      exbasic.asm):03353                 JMP     LB9C2                             ; * FPA3
                      (      exbasic.asm):03354         ;
                      (      exbasic.asm):03355         ;
354C                  (      exbasic.asm):03356         LBDA5
354C D647             (      exbasic.asm):03357                 LDB     V47
354E 58               (      exbasic.asm):03358                 ASLB                                      ; TIMES 2
354F 58               (      exbasic.asm):03359                 ASLB                                      ; TIMES 4
3550 DB47             (      exbasic.asm):03360                 ADDB    V47                               ; ADD 1 = TIMES 5
3552 58               (      exbasic.asm):03361                 ASLB                                      ; TIMES 10
3553 8030             (      exbasic.asm):03362                 SUBA    #'0'                              ; *MASK OFF ASCII FROM ACCA, PUSH
3555 3404             (      exbasic.asm):03363                 PSHS    B                                 ; *RESULT ONTO THE STACK AND
3557 ABE0             (      exbasic.asm):03364                 ADDA    ,S+                               ; ADD lT TO ACCB
3559 9747             (      exbasic.asm):03365                 STA     V47                               ; SAVE IN V47
355B 209E             (      exbasic.asm):03366                 BRA     LBD55                             ; INTERPRET ANOTHER CHARACTER
                      (      exbasic.asm):03367         ;*
355D                  (      exbasic.asm):03368         LBDB6
355D 9B3EBC1FFD       (      exbasic.asm):03369                 FCB     $9B,$3E,$BC,$1F,$FD               ; * 99999999.9
3562                  (      exbasic.asm):03370         LBDBB
3562 9E6E6B27FD       (      exbasic.asm):03371                 FCB     $9E,$6E,$6B,$27,$FD               ; * 999999999
3567                  (      exbasic.asm):03372         LBDC0
3567 9E6E6B2800       (      exbasic.asm):03373                 FCB     $9E,$6E,$6B,$28,$00               ; * 1E + 09
                      (      exbasic.asm):03374         ;*
356C                  (      exbasic.asm):03375         LBDC5
356C 8E23B4           (      exbasic.asm):03376                 LDX     #LABE8-1                          ; POINT X TO " IN " MESSAGE
356F 8D0C             (      exbasic.asm):03377                 BSR     LBDD6                             ; COPY A STRING FROM (X) TO CONSOLE OUT
3571 DC68             (      exbasic.asm):03378                 LDD     CURLIN                            ; GET CURRENT BASIC LINE NUMBER TO ACCD
                      (      exbasic.asm):03379         ;* CONVERT VALUE IN ACCD INTO A DECIMAL NUMBER
                      (      exbasic.asm):03380         ;* AND PRINT IT TO CONSOLE OUT
3573                  (      exbasic.asm):03381         LBDCC
3573 DD50             (      exbasic.asm):03382                 STD     FPA0                              ; SAVE ACCD IN TOP HALF OF FPA0
3575 C690             (      exbasic.asm):03383                 LDB     #$90                              ; REQ'D EXPONENT IF TOP HALF OF ACCD = INTEGER
3577 43               (      exbasic.asm):03384                 COMA                                      ; SET CARRY FLAG - FORCE POSITIVE MANTISSA
3578 BD342A           (      exbasic.asm):03385                 JSR     LBC86                             ; ZERO BOTTOM HALF AND SIGN OF FPA0, THEN
                      (      exbasic.asm):03386         ;*         SAVE EXPONENT AND NORMALIZE IT
357B 8D03             (      exbasic.asm):03387                 BSR     LBDD9                             ; CONVERT FP NUMBER TO ASCII STRING
357D                  (      exbasic.asm):03388         LBDD6
357D 7E3140           (      exbasic.asm):03389                 JMP     LB99C                             ; COPY A STRING FROM (X) TO CONSOLE OUT
                      (      exbasic.asm):03390         ;
                      (      exbasic.asm):03391         ;* CONVERT FP NUMBER TO ASCII STRING
3580                  (      exbasic.asm):03392         LBDD9
3580 CEDBD5           (      exbasic.asm):03393                 LDU     #STRBUF+3                         ; POINT U TO BUFFER WHICH WILL NOT CAUSE
                      (      exbasic.asm):03394         ;*                             ; THE STRING TO BE STORED IN STRING SPACE
3583                  (      exbasic.asm):03395         LBDDC
3583 8620             (      exbasic.asm):03396                 LDA     #SPACE                            ; SPACE = DEFAULT SIGN FOR POSITIVE #
3585 D654             (      exbasic.asm):03397                 LDB     FP0SGN                            ; GET SIGN OF FPA0
3587 2A02             (      exbasic.asm):03398                 BPL     LBDE4                             ; BRANCH IF POSITIVE
3589 862D             (      exbasic.asm):03399                 LDA     #'-'                              ; ASCII MINUS SIGN
358B                  (      exbasic.asm):03400         LBDE4
358B A7C0             (      exbasic.asm):03401                 STA     ,U+                               ; STORE SIGN OF NUMBER
358D DF64             (      exbasic.asm):03402                 STU     COEFPT                            ; SAVE BUFFER POINTER
358F 9754             (      exbasic.asm):03403                 STA     FP0SGN                            ; SAVE SIGN (IN ASCII)
3591 8630             (      exbasic.asm):03404                 LDA     #'0'                              ; ASCII ZERO IF EXPONENT = 0
3593 D64F             (      exbasic.asm):03405                 LDB     FP0EXP                            ; GET FPA0 EXPONENT
3595 102700C6         (      exbasic.asm):03406                 LBEQ    LBEB8                             ; BRANCH IF FPA0 = 0
3599 4F               (      exbasic.asm):03407                 CLRA                                      ; BASE 10 EXPONENT=0 FOR FP NUMBER > 1
359A C180             (      exbasic.asm):03408                 CMPB    #$80                              ; CHECK EXPONENT
359C 2208             (      exbasic.asm):03409                 BHI     LBDFF                             ; BRANCH IF FP NUMBER > 1
                      (      exbasic.asm):03410         ;* IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 TO SPEED UP THE CONVERSION PROCESS
359E 8E3567           (      exbasic.asm):03411                 LDX     #LBDC0                            ; POINT X TO FP 1E+09
35A1 BD326E           (      exbasic.asm):03412                 JSR     LBACA                             ; MULTIPLY FPA0 BY (X)
35A4 86F7             (      exbasic.asm):03413                 LDA     #-9                               ; BASE 10 EXPONENT = -9
35A6                  (      exbasic.asm):03414         LBDFF
35A6 9745             (      exbasic.asm):03415                 STA     V45                               ; BASE 10 EXPONENT
                      (      exbasic.asm):03416         ;* PSEUDO - NORMALIZE THE FP NUMBER TO A VALUE IN THE RANGE
                      (      exbasic.asm):03417         ;* OF 999,999,999 RO 99,999,999.9 - THIS IS THE LARGEST
                      (      exbasic.asm):03418         ;* NUMBER RANGE IN WHICH ALL OF THE DIGITS ARE
                      (      exbasic.asm):03419         ;* SIGNIFICANT WHICH CAN BE DISPLAYED WITHOUT USING
                      (      exbasic.asm):03420         ;* SCIENTIFIC NOTATION
35A8                  (      exbasic.asm):03421         LBE01
35A8 8E3562           (      exbasic.asm):03422                 LDX     #LBDBB                            ; POINT X TO FP 999,999,999
35AB BD3444           (      exbasic.asm):03423                 JSR     LBCA0                             ; COMPARE FPA0 TO 999,999,999
35AE 2E0F             (      exbasic.asm):03424                 BGT     LBE18                             ; BRANCH IF > 999,999,999
35B0                  (      exbasic.asm):03425         LBE09
35B0 8E355D           (      exbasic.asm):03426                 LDX     #LBDB6                            ; POINT X TO FP 99,999,999.9
35B3 BD3444           (      exbasic.asm):03427                 JSR     LBCA0                             ; COMPARE FPA0 TO 99,999,999.9
35B6 2E0E             (      exbasic.asm):03428                 BGT     LBE1F                             ; BRANCH IF > 99,999,999.9 (IN RANGE)
35B8 BD330E           (      exbasic.asm):03429                 JSR     LBB6A                             ; MULTIPLY FPA0 BY 10
35BB 0A45             (      exbasic.asm):03430                 DEC     V45                               ; SUBTRACT ONE FROM DECIMAL OFFSET
35BD 20F1             (      exbasic.asm):03431                 BRA     LBE09                             ; PSEUDO - NORMALIZE SOME MORE
35BF                  (      exbasic.asm):03432         LBE18
35BF BD3326           (      exbasic.asm):03433                 JSR     LBB82                             ; DIVIDE FPA0 BY 10
35C2 0C45             (      exbasic.asm):03434                 INC     V45                               ; ADD ONE TO BASE 10 EXPONENT
35C4 20E2             (      exbasic.asm):03435                 BRA     LBE01                             ; PSEUDO - NORMALIZE SOME MORE
35C6                  (      exbasic.asm):03436         LBE1F
35C6 BD3158           (      exbasic.asm):03437                 JSR     LB9B4                             ; ADD .5 TO FPA0 (ROUND OFF)
35C9 BD346C           (      exbasic.asm):03438                 JSR     LBCC8                             ; CONVERT FPA0 TO AN INTEGER
35CC C601             (      exbasic.asm):03439                 LDB     #1                                ; DEFAULT DECIMAL POINT FLAG (FORCE IMMED DECIMAL PT)
35CE 9645             (      exbasic.asm):03440                 LDA     V45                               ; * GET BASE 10 EXPONENT AND ADD TEN TO IT
35D0 8B0A             (      exbasic.asm):03441                 ADDA    #9+1                              ; * (NUMBER 'NORMALIZED' TO 9 PLACES & DECIMAL PT)
35D2 2B09             (      exbasic.asm):03442                 BMI     LBE36                             ; BRANCH IF NUMBER < 1.0
35D4 810B             (      exbasic.asm):03443                 CMPA    #9+2                              ; NINE PLACES MAY BE DISPLAYED WITHOUT
                      (      exbasic.asm):03444         ;*         USING SCIENTIFIC NOTATION
35D6 2405             (      exbasic.asm):03445                 BCC     LBE36                             ; BRANCH IF SCIENTIFIC NOTATION REQUIRED
35D8 4A               (      exbasic.asm):03446                 DECA                                      ; * SUBTRACT 1 FROM MODIFIED BASE 10 EXPONENT CTR
35D9 1F89             (      exbasic.asm):03447                 TFR     A,B                               ; * AND SAVE IT IN ACCB (DECiMAL POINT FLAG)
35DB 8602             (      exbasic.asm):03448                 LDA     #2                                ; FORCE EXPONENT = 0 - DON'T USE SCIENTIFIC NOTATION
35DD                  (      exbasic.asm):03449         LBE36
35DD 4A               (      exbasic.asm):03450                 DECA                                      ; * SUBTRACT TWO (WITHOUT AFFECTING CARRY)
35DE 4A               (      exbasic.asm):03451                 DECA                                      ; * FROM BASE 10 EXPONENT
35DF 9747             (      exbasic.asm):03452                 STA     V47                               ; SAVE EXPONENT - ZERO EXPONENT = DO NOT DISPLAY
                      (      exbasic.asm):03453         ;*         IN   SCIENTIFIC NOTATION
35E1 D745             (      exbasic.asm):03454                 STB     V45                               ; DECIMAL POINT FLAG - NUMBER OF PLACES TO
                      (      exbasic.asm):03455         ;*         LEFT OF DECIMAL POINT
35E3 2E0D             (      exbasic.asm):03456                 BGT     LBE4B                             ; BRANCH IF >= 1
35E5 DE64             (      exbasic.asm):03457                 LDU     COEFPT                            ; POINT U TO THE STRING BUFFER
35E7 862E             (      exbasic.asm):03458                 LDA     #'.'                              ; * STORE A PERIOD
35E9 A7C0             (      exbasic.asm):03459                 STA     ,U+                               ; * IN THE BUFFER
35EB 5D               (      exbasic.asm):03460                 TSTB                                      ; CHECK DECIMAL POINT FLAG
35EC 2704             (      exbasic.asm):03461                 BEQ     LBE4B                             ; BRANCH IF NOTHING TO LEFT OF DECIMAL POINT
35EE 8630             (      exbasic.asm):03462                 LDA     #'0'                              ; * STORE A ZERO
35F0 A7C0             (      exbasic.asm):03463                 STA     ,U+                               ; * IN THE BUFFER
                      (      exbasic.asm):03464         ;
                      (      exbasic.asm):03465         ;* CONVERT FPA0 INTO A STRING OF ASCII DIGITS
35F2                  (      exbasic.asm):03466         LBE4B
35F2 8E366C           (      exbasic.asm):03467                 LDX     #LBEC5                            ; POINT X TO FP POWER OF 10 MANTISSA
35F5 C680             (      exbasic.asm):03468                 LDB     #0+$80                            ; INITIALIZE DIGIT COUNTER TO 0+$80
                      (      exbasic.asm):03469         ;* BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA
                      (      exbasic.asm):03470         ;* IS NEGATIVE. WHEN YOU 'ADD' A NEGATIVE MANTISSA, IT IS
                      (      exbasic.asm):03471         ;* THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB IS HOW
                      (      exbasic.asm):03472         ;* THE ROUTINE KNOWS THAT A 'SUBTRACTION' IS OCCURING.
35F7                  (      exbasic.asm):03473         LBE50
35F7 9653             (      exbasic.asm):03474                 LDA     FPA0+3                            ; * ADD MANTISSA LS
35F9 AB03             (      exbasic.asm):03475                 ADDA    3,X                               ; * BYTE OF FPA0
35FB 9753             (      exbasic.asm):03476                 STA     FPA0+3                            ; * AND (X)
35FD 9652             (      exbasic.asm):03477                 LDA     FPA0+2                            ; = ADD MANTISSA
35FF A902             (      exbasic.asm):03478                 ADCA    2,X                               ; = NUMBER 3 BYTE OF
3601 9752             (      exbasic.asm):03479                 STA     FPA0+2                            ; = FPA0 AND (X)
3603 9651             (      exbasic.asm):03480                 LDA     FPA0+1                            ; * ADD MANTISSA
3605 A901             (      exbasic.asm):03481                 ADCA    1,X                               ; * NUMBER 2 BYTE OF
3607 9751             (      exbasic.asm):03482                 STA     FPA0+1                            ; * FPA0 AND (X)
3609 9650             (      exbasic.asm):03483                 LDA     FPA0                              ; = ADD MANTISSA
360B A984             (      exbasic.asm):03484                 ADCA    ,X                                ; = MS BYTE OF
360D 9750             (      exbasic.asm):03485                 STA     FPA0                              ; = FPA0 AND (X)
360F 5C               (      exbasic.asm):03486                 INCB                                      ; ADD ONE TO DIGIT COUNTER
3610 56               (      exbasic.asm):03487                 RORB                                      ; ROTATE CARRY INTO BIT 7
3611 59               (      exbasic.asm):03488                 ROLB                                      ; *SET OVERFLOW FLAG AND BRANCH IF CARRY = 1 AND
3612 28E3             (      exbasic.asm):03489                 BVC     LBE50                             ; *POSITIVE MANTISSA OR CARRY = 0 AND NEG MANTISSA
3614 2403             (      exbasic.asm):03490                 BCC     LBE72                             ; BRANCH IF NEGATIVE MANTISSA
3616 C00B             (      exbasic.asm):03491                 SUBB    #10+1                             ; * TAKE THE 9'S COMPLEMENT IF
3618 50               (      exbasic.asm):03492                 NEGB                                      ; * ADDING MANTISSA
3619                  (      exbasic.asm):03493         LBE72
3619 CB2F             (      exbasic.asm):03494                 ADDB    #'0'-1                            ; ADD ASCII OFFSET TO DIGIT
361B 3004             (      exbasic.asm):03495                 LEAX    4,X                               ; MOVE TO NEXT POWER OF 10 MANTISSA
361D 1F98             (      exbasic.asm):03496                 TFR     B,A                               ; SAVE DIGIT IN ACCA
361F 847F             (      exbasic.asm):03497                 ANDA    #$7F                              ; MASK OFF BIT 7 (ADD/SUBTRACT FLAG)
3621 A7C0             (      exbasic.asm):03498                 STA     ,U+                               ; STORE DIGIT IN STRING BUFFER
3623 0A45             (      exbasic.asm):03499                 DEC     V45                               ; DECREMENT DECIMAL POINT FLAG
3625 2604             (      exbasic.asm):03500                 BNE     LBE84                             ; BRANCH IF NOT TIME FOR DECIMAL POINT
3627 862E             (      exbasic.asm):03501                 LDA     #'.'                              ; * STORE DECIMAL POINT IN
3629 A7C0             (      exbasic.asm):03502                 STA     ,U+                               ; * STRING BUFFER
362B                  (      exbasic.asm):03503         LBE84
362B 53               (      exbasic.asm):03504                 COMB                                      ; TOGGLE BIT 7 (ADD/SUBTRACT FLAG)
362C C480             (      exbasic.asm):03505                 ANDB    #$80                              ; MASK OFF ALL BUT ADD/SUBTRACT FLAG
362E 8C3690           (      exbasic.asm):03506                 CMPX    #LBEC5+36                         ; COMPARE X TO END OF MANTISSA TABLE
3631 26C4             (      exbasic.asm):03507                 BNE     LBE50                             ; BRANCH IF NOT AT END OF TABLE
                      (      exbasic.asm):03508         ;* BLANK TRAILING ZEROS AND STORE EXPONENT IF ANY
3633                  (      exbasic.asm):03509         LBE8C
3633 A6C2             (      exbasic.asm):03510                 LDA     ,-U                               ; GET THE LAST CHARACTER; MOVE POINTER BACK
3635 8130             (      exbasic.asm):03511                 CMPA    #'0'                              ; WAS IT A ZERO?
3637 27FA             (      exbasic.asm):03512                 BEQ     LBE8C                             ; IGNORE TRAILING ZEROS IF SO
3639 812E             (      exbasic.asm):03513                 CMPA    #'.'                              ; CHECK FOR DECIMAL POINT
363B 2602             (      exbasic.asm):03514                 BNE     LBE98                             ; BRANCH IF NOT DECIMAL POINT
363D 335F             (      exbasic.asm):03515                 LEAU    -1,U                              ; STEP OVER THE DECIMAL POINT
363F                  (      exbasic.asm):03516         LBE98
363F 862B             (      exbasic.asm):03517                 LDA     #'+'                              ; ASCII PLUS SIGN
3641 D647             (      exbasic.asm):03518                 LDB     V47                               ; GET SCIENTIFIC NOTATION EXPONENT
3643 271C             (      exbasic.asm):03519                 BEQ     LBEBA                             ; BRANCH IF NOT SCIENTIFIC NOTATION
3645 2A03             (      exbasic.asm):03520                 BPL     LBEA3                             ; BRANCH IF POSITIVE EXPONENT
3647 862D             (      exbasic.asm):03521                 LDA     #'-'                              ; ASCII MINUS SIGN
3649 50               (      exbasic.asm):03522                 NEGB                                      ; NEGATE EXPONENT IF NEGATIVE
364A                  (      exbasic.asm):03523         LBEA3
364A A742             (      exbasic.asm):03524                 STA     2,U                               ; STORE EXPONENT SIGN IN STRING
364C 8645             (      exbasic.asm):03525                 LDA     #'E'                              ; * GET ASCII 'E' (SCIENTIFIC NOTATION
364E A741             (      exbasic.asm):03526                 STA     1,U                               ; * FLAG) AND SAVE IT IN THE STRING
3650 862F             (      exbasic.asm):03527                 LDA     #'0'-1                            ; INITIALIZE ACCA TO ASCII ZERO
                      (      exbasic.asm):03528         ;
                      (      exbasic.asm):03529         ;
3652                  (      exbasic.asm):03530         LBEAB
3652 4C               (      exbasic.asm):03531                 INCA                                      ; ADD ONE TO 10'S DIGIT OF EXPONENT
3653 C00A             (      exbasic.asm):03532                 SUBB    #10                               ; SUBTRACT 10 FROM ACCB
3655 24FB             (      exbasic.asm):03533                 BCC     LBEAB                             ; ADD 1 TO 10'S DIGIT IF NO CARRY
3657 CB3A             (      exbasic.asm):03534                 ADDB    #'9'+1                            ; CONVERT UNITS DIGIT TO ASCII
3659 ED43             (      exbasic.asm):03535                 STD     3,U                               ; SAVE EXPONENT IN STRING
365B 6F45             (      exbasic.asm):03536                 CLR     5,U                               ; CLEAR LAST BYTE (TERMINATOR)
365D 2004             (      exbasic.asm):03537                 BRA     LBEBC                             ; GO RESET POINTER
365F                  (      exbasic.asm):03538         LBEB8
365F A7C4             (      exbasic.asm):03539                 STA     ,U                                ; STORE LAST CHARACTER
3661                  (      exbasic.asm):03540         LBEBA
3661 6F41             (      exbasic.asm):03541                 CLR     1,U                               ; CLEAR LAST BYTE (TERMINATOR - REQUIRED BY
                      (      exbasic.asm):03542         ;*         PRINT SUBROUTINES)
3663                  (      exbasic.asm):03543         LBEBC
3663 8EDBD5           (      exbasic.asm):03544                 LDX     #STRBUF+3                         ; RESET POINTER TO START OF BUFFER
3666 39               (      exbasic.asm):03545                 RTS
                      (      exbasic.asm):03546         ;*
3667                  (      exbasic.asm):03547         LBEC0
3667 8000000000       (      exbasic.asm):03548                 FCB     $80,$00,$00,$00,$00               ; FLOATING POINT .5
                      (      exbasic.asm):03549         ;*
                      (      exbasic.asm):03550         ;*** TABLE OF UNNORMALIZED POWERS OF 10
366C                  (      exbasic.asm):03551         LBEC5
366C FA0A1F00         (      exbasic.asm):03552                 FCB     $FA,$0A,$1F,$00                   ; -100000000
3670                  (      exbasic.asm):03553         LBEC9
3670 00989680         (      exbasic.asm):03554                 FCB     $00,$98,$96,$80                   ; 10000000
3674                  (      exbasic.asm):03555         LBECD
3674 FFF0BDC0         (      exbasic.asm):03556                 FCB     $FF,$F0,$BD,$C0                   ; -1000000
3678                  (      exbasic.asm):03557         LBED1
3678 000186A0         (      exbasic.asm):03558                 FCB     $00,$01,$86,$A0                   ; 100000
367C                  (      exbasic.asm):03559         LBED5
367C FFFFD8F0         (      exbasic.asm):03560                 FCB     $FF,$FF,$D8,$F0                   ; -10000
3680                  (      exbasic.asm):03561         LBED9
3680 000003E8         (      exbasic.asm):03562                 FCB     $00,$00,$03,$E8                   ; 1000
3684                  (      exbasic.asm):03563         LBEDD
3684 FFFFFF9C         (      exbasic.asm):03564                 FCB     $FF,$FF,$FF,$9C                   ; -100
3688                  (      exbasic.asm):03565         LBEE1
3688 0000000A         (      exbasic.asm):03566                 FCB     $00,$00,$00,$0A                   ; 10
368C                  (      exbasic.asm):03567         LBEE5
368C FFFFFFFF         (      exbasic.asm):03568                 FCB     $FF,$FF,$FF,$FF                   ; -1
                      (      exbasic.asm):03569         ;*
                      (      exbasic.asm):03570         ;*
3690                  (      exbasic.asm):03571         LBEE9
3690 964F             (      exbasic.asm):03572                 LDA     FP0EXP                            ; GET EXPONENT OF FPA0
3692 2702             (      exbasic.asm):03573                 BEQ     LBEEF                             ; BRANCH IF FPA0 = 0
3694 0354             (      exbasic.asm):03574                 COM     FP0SGN                            ; TOGGLE MANTISSA SIGN OF FPA0
3696                  (      exbasic.asm):03575         LBEEF
3696 39               (      exbasic.asm):03576                 RTS
                      (      exbasic.asm):03577         ;* EXPAND A POLYNOMIAL OF THE FORM
                      (      exbasic.asm):03578         ;* AQ+BQ**3+CQ**5+DQ**7.... WHERE Q = FPA0
                      (      exbasic.asm):03579         ;* AND THE X REGISTER POINTS TO A TABLE OF
                      (      exbasic.asm):03580         ;* COEFFICIENTS A,B,C,D....
3697                  (      exbasic.asm):03581         LBEF0
3697 9F64             (      exbasic.asm):03582                 STX     COEFPT                            ; SAVE COEFFICIENT TABLE POINTER
3699 BD33D3           (      exbasic.asm):03583                 JSR     LBC2F                             ; MOVE FPA0 TO FPA3
369C 8D05             (      exbasic.asm):03584                 BSR     LBEFC                             ; MULTIPLY FPA3 BY FPA0
369E 8D08             (      exbasic.asm):03585                 BSR     LBF01                             ; EXPAND POLYNOMIAL
36A0 8E0040           (      exbasic.asm):03586                 LDX     #V40                              ; POINT X TO FPA3
36A3                  (      exbasic.asm):03587         LBEFC
36A3 7E326E           (      exbasic.asm):03588                 JMP     LBACA                             ; MULTIPLY (X) BY FPA0
                      (      exbasic.asm):03589         ;
                      (      exbasic.asm):03590         ;* CALCULATE THE VALUE OF AN EXPANDED POLYNOMIAL
                      (      exbasic.asm):03591         ;* EXPRESSION. ENTER WITH (X) POINTING TO A TABLE
                      (      exbasic.asm):03592         ;* OF COEFFICIENTS, THE FIRST BYTE OF WHICH IS THE
                      (      exbasic.asm):03593         ;* NUMBER OF (COEFFICIENTS-1) FOLLOWED BY THAT NUMBER
                      (      exbasic.asm):03594         ;* OF PACKED FLOATING POINT NUMBERS. THE
                      (      exbasic.asm):03595         ;* POLYNOMIAL IS EVALUATED AS FOLLOWS: VALUE =
                      (      exbasic.asm):03596         ;* (((FPA0*Y0+Y1)*FPA0+Y2)*FPA0...YN)
36A6                  (      exbasic.asm):03597         LBEFF
36A6 9F64             (      exbasic.asm):03598                 STX     COEFPT                            ; SAVE COEFFICIENT TABLE POINTER
36A8                  (      exbasic.asm):03599         LBF01
36A8 BD33CE           (      exbasic.asm):03600                 JSR     LBC2A                             ; MOVE FPA0 TO FPA4
36AB 9E64             (      exbasic.asm):03601                 LDX     COEFPT                            ; GET THE COEFFICIENT POINTER
36AD E680             (      exbasic.asm):03602                 LDB     ,X+                               ; GET THE TOP OF COEFFICIENT TABLE TO
36AF D755             (      exbasic.asm):03603                 STB     COEFCT                            ; * USE AND STORE IT IN TEMPORARY COUNTER
36B1 9F64             (      exbasic.asm):03604                 STX     COEFPT                            ; SAVE NEW COEFFICIENT POINTER
36B3                  (      exbasic.asm):03605         LBF0C
36B3 8DEE             (      exbasic.asm):03606                 BSR     LBEFC                             ; MULTIPLY (X) BY FPA0
36B5 9E64             (      exbasic.asm):03607                 LDX     COEFPT                            ; *GET COEFFICIENT POINTER
36B7 3005             (      exbasic.asm):03608                 LEAX    5,X                               ; *MOVE TO NEXT FP NUMBER
36B9 9F64             (      exbasic.asm):03609                 STX     COEFPT                            ; *SAVE NEW COEFFICIENT POINTER
36BB BD3166           (      exbasic.asm):03610                 JSR     LB9C2                             ; ADD (X) AND FPA0
36BE 8E0045           (      exbasic.asm):03611                 LDX     #V45                              ; POINT (X) TO FPA4
36C1 0A55             (      exbasic.asm):03612                 DEC     COEFCT                            ; DECREMENT TEMP COUNTER
36C3 26EE             (      exbasic.asm):03613                 BNE     LBF0C                             ; BRANCH IF MORE COEFFICIENTS LEFT
36C5 39               (      exbasic.asm):03614                 RTS
                      (      exbasic.asm):03615         ;
                      (      exbasic.asm):03616         ;* RND
36C6                  (      exbasic.asm):03617         RND
36C6 BD3411           (      exbasic.asm):03618                 JSR     LBC6D                             ; TEST FPA0
36C9 2B1F             (      exbasic.asm):03619                 BMI     LBF45                             ; BRANCH IF FPA0 = NEGATIVE
36CB 2715             (      exbasic.asm):03620                 BEQ     LBF3B                             ; BRANCH IF FPA0 = 0
36CD 8D10             (      exbasic.asm):03621                 BSR     LBF38                             ; CONVERT FPA0 TO AN INTEGER
36CF BD33D3           (      exbasic.asm):03622                 JSR     LBC2F                             ; PACK FPA0 TO FPA3
36D2 8D0E             (      exbasic.asm):03623                 BSR     LBF3B                             ; GET A RANDOM NUMBER: FPA0 < 1.0
36D4 8E0040           (      exbasic.asm):03624                 LDX     #V40                              ; POINT (X) TO FPA3
36D7 8DCA             (      exbasic.asm):03625                 BSR     LBEFC                             ; MULTIPLY (X) BY FPA0
36D9 8E3269           (      exbasic.asm):03626                 LDX     #LBAC5                            ; POINT (X) TO FP VALUE OF 1.0
36DC BD3166           (      exbasic.asm):03627                 JSR     LB9C2                             ; ADD 1.0 TO FPA0
36DF                  (      exbasic.asm):03628         LBF38
36DF 7E3492           (      exbasic.asm):03629                 JMP     INT                               ; CONVERT FPA0 TO AN INTEGER
                      (      exbasic.asm):03630         ;* CALCULATE A RANDOM NUMBER IN THE RANGE 0.0 < X <= 1.0
36E2                  (      exbasic.asm):03631         LBF3B
36E2 9EA5             (      exbasic.asm):03632                 LDX     RVSEED+1                          ; * MOVE VARIABLE
36E4 9F50             (      exbasic.asm):03633                 STX     FPA0                              ; * RANDOM NUMBER
36E6 9EA7             (      exbasic.asm):03634                 LDX     RVSEED+3                          ; * SEED TO
36E8 9F52             (      exbasic.asm):03635                 STX     FPA0+2                            ; * FPA0
36EA                  (      exbasic.asm):03636         LBF45
36EA BE3717           (      exbasic.asm):03637                 LDX     RSEED                             ; = MOVE FIXED
36ED 9F5D             (      exbasic.asm):03638                 STX     FPA1                              ; = RANDOM NUMBER
36EF BE3719           (      exbasic.asm):03639                 LDX     RSEED+2                           ; = SEED TO
36F2 9F5F             (      exbasic.asm):03640                 STX     FPA1+2                            ; = MANTISSA OF FPA0
36F4 BD3274           (      exbasic.asm):03641                 JSR     LBAD0                             ; MULTIPLY FPA0 X FPA1
36F7 DC7E             (      exbasic.asm):03642                 LDD     VAD                               ; GET THE TWO LOWEST ORDER PRODUCT BYTES
36F9 C3658B           (      exbasic.asm):03643                 ADDD    #$658B                            ; ADD A CONSTANT
36FC DDA7             (      exbasic.asm):03644                 STD     RVSEED+3                          ; SAVE NEW LOW ORDER VARIABLE RANDOM # SEED
36FE DD52             (      exbasic.asm):03645                 STD     FPA0+2                            ; SAVE NEW LOW ORDER BYTES OF FPA0 MANTISSA
3700 DC7C             (      exbasic.asm):03646                 LDD     VAB                               ; GET 2 MORE LOW ORDER PRODUCT BYTES
3702 C9B0             (      exbasic.asm):03647                 ADCB    #$B0                              ; ADD A CONSTANT
3704 8905             (      exbasic.asm):03648                 ADCA    #5                                ; ADD A CONSTANT
3706 DDA5             (      exbasic.asm):03649                 STD     RVSEED+1                          ; SAVE NEW HIGH ORDER VARIABLE RANDOM # SEED
3708 DD50             (      exbasic.asm):03650                 STD     FPA0                              ; SAVE NEW HIGH ORDER FPA0 MANTISSA
370A 0F54             (      exbasic.asm):03651                 CLR     FP0SGN                            ; FORCE FPA0 MANTISSA = POSITIVE
370C 8680             (      exbasic.asm):03652                 LDA     #$80                              ; * SET FPA0 BIASED EXPONENT
370E 974F             (      exbasic.asm):03653                 STA     FP0EXP                            ; * TO 0 1 < FPA0 < 0
3710 9615             (      exbasic.asm):03654                 LDA     FPA2+2                            ; GET A BYTE FROM FPA2 (MORE RANDOMNESS)
3712 9763             (      exbasic.asm):03655                 STA     FPSBYT                            ; SAVE AS SUB BYTE
3714 7E31C0           (      exbasic.asm):03656                 JMP     LBA1C                             ; NORMALIZE FPA0
                      (      exbasic.asm):03657         ;*
3717                  (      exbasic.asm):03658         RSEED
3717 40E6             (      exbasic.asm):03659                 FDB     $40E6                             ; *CONSTANT RANDOM NUMBER GENERATOR SEED
3719 4DAB             (      exbasic.asm):03660                 FDB     $4DAB                             ; *
                      (      exbasic.asm):03661         ;
                      (      exbasic.asm):03662         ;* SIN
                      (      exbasic.asm):03663         ;* THE SIN FUNCTION REQUIRES AN ARGUMENT IN RADIANS AND WILL REPEAT ITSELF EVERY
                      (      exbasic.asm):03664         ;* 2*PI RADIANS. THE ARGUMENT IS DIVIDED BY 2*PI AND ONLY THE FRACTIONAL PART IS
                      (      exbasic.asm):03665         ;* RETAINED. SINCE THE ARGUMENT WAS DIVIDED BY 2*P1, THE COEFFICIENTS MUST BE
                      (      exbasic.asm):03666         ;* MULTIPLIED BY THE APPROPRIATE POWER OF 2*PI.
                      (      exbasic.asm):03667         ;
                      (      exbasic.asm):03668         ;* SIN IS EVALUATED USING THE TRIGONOMETRIC IDENTITIES BELOW:
                      (      exbasic.asm):03669         ;* SIN(X)=SIN(PI-X) & -SIN(PI/2-X)=SIN((3*PI)/2+X)
371B                  (      exbasic.asm):03670         SIN
371B BD3403           (      exbasic.asm):03671                 JSR     LBC5F                             ; COPY FPA0 TO FPA1
371E 8E3760           (      exbasic.asm):03672                 LDX     #LBFBD                            ; POINT (X) TO 2*PI
3721 D661             (      exbasic.asm):03673                 LDB     FP1SGN                            ; *GET MANTISSA SIGN OF FPA1
3723 BD332D           (      exbasic.asm):03674                 JSR     LBB89                             ; *AND DIVIDE FPA0 BY 2*PI
3726 BD3403           (      exbasic.asm):03675                 JSR     LBC5F                             ; COPY FPA0 TO FPA1
3729 8DB4             (      exbasic.asm):03676                 BSR     LBF38                             ; CONVERT FPA0 TO AN INTEGER
372B 0F62             (      exbasic.asm):03677                 CLR     RESSGN                            ; SET RESULT SIGN = POSITIVE
372D 965C             (      exbasic.asm):03678                 LDA     FP1EXP                            ; *GET EXPONENT OF FPA1
372F D64F             (      exbasic.asm):03679                 LDB     FP0EXP                            ; *GET EXPONENT OF FPA0
3731 BD3160           (      exbasic.asm):03680                 JSR     LB9BC                             ; *SUBTRACT FPA0 FROM FPA1
                      (      exbasic.asm):03681         ;* NOW FPA0 CONTAINS ONLY THE FRACTIONAL PART OF ARGUMENT/2*PI
3734 8E3765           (      exbasic.asm):03682                 LDX     #LBFC2                            ; POINT X TO FP (.25)
3737 BD315D           (      exbasic.asm):03683                 JSR     LB9B9                             ; SUBTRACT FPA0 FROM .25 (PI/2)
373A 9654             (      exbasic.asm):03684                 LDA     FP0SGN                            ; GET MANTISSA SIGN OF FPA0
373C 3402             (      exbasic.asm):03685                 PSHS    A                                 ; SAVE IT ON STACK
373E 2A09             (      exbasic.asm):03686                 BPL     LBFA6                             ; BRANCH IF MANTISSA POSITIVE
3740 BD3158           (      exbasic.asm):03687                 JSR     LB9B4                             ; ADD .5 (PI) TO FPA0
3743 9654             (      exbasic.asm):03688                 LDA     FP0SGN                            ; GET SIGN OF FPA0
3745 2B05             (      exbasic.asm):03689                 BMI     LBFA9                             ; BRANCH IF NEGATIVE
3747 030A             (      exbasic.asm):03690                 COM     RELFLG                            ; COM IF +(3*PI)/2 >= ARGUMENT >+ PI/2 (QUADRANT FLAG)
3749                  (      exbasic.asm):03691         LBFA6
3749 BD3690           (      exbasic.asm):03692                 JSR     LBEE9                             ; TOGGLE MANTISSA SIGN OF FPA0
374C                  (      exbasic.asm):03693         LBFA9
374C 8E3765           (      exbasic.asm):03694                 LDX     #LBFC2                            ; POINT X TO FP (.25)
374F BD3166           (      exbasic.asm):03695                 JSR     LB9C2                             ; ADD .25 (PI/2) TO FPA0
3752 3502             (      exbasic.asm):03696                 PULS    A                                 ; GET OLD MANTISSA SIGN
3754 4D               (      exbasic.asm):03697                 TSTA                                      ; * BRANCH IF OLD
3755 2A03             (      exbasic.asm):03698                 BPL     LBFB7                             ; * SIGN WAS POSITIVE
3757 BD3690           (      exbasic.asm):03699                 JSR     LBEE9                             ; TOGGLE MANTISSA SIGN
375A                  (      exbasic.asm):03700         LBFB7
375A 8E376A           (      exbasic.asm):03701                 LDX     #LBFC7                            ; POINT X TO TABLE OF COEFFICIENTS
375D 7E3697           (      exbasic.asm):03702                 JMP     LBEF0                             ; GO CALCULATE POLYNOMIAL VALUE
                      (      exbasic.asm):03703         
3760                  (      exbasic.asm):03704         LBFBD
3760 83490FDAA2       (      exbasic.asm):03705                 FCB     $83,$49,$0F,$DA,$A2               ; 6.28318531 (2*PI)
3765                  (      exbasic.asm):03706         LBFC2
3765 7F00000000       (      exbasic.asm):03707                 FCB     $7F,$00,$00,$00,$00               ; .25
                      (      exbasic.asm):03708         ;
                      (      exbasic.asm):03709         ;
376A                  (      exbasic.asm):03710         LBFC7
376A 05               (      exbasic.asm):03711                 FCB     6-1                               ; SIX COEFFICIENTS
376B                  (      exbasic.asm):03712         LBFC8
376B 84E61A2D1B       (      exbasic.asm):03713                 FCB     $84,$E6,$1A,$2D,$1B               ; * -((2*PI)**11)/11!
3770                  (      exbasic.asm):03714         LBFCD
3770 862807FBF8       (      exbasic.asm):03715                 FCB     $86,$28,$07,$FB,$F8               ; * ((2*PI)**9)/9!
3775                  (      exbasic.asm):03716         LBFD2
3775 8799688901       (      exbasic.asm):03717                 FCB     $87,$99,$68,$89,$01               ; * -((2*PI)**7)/7!
377A                  (      exbasic.asm):03718         LBFD7
377A 872335DFE1       (      exbasic.asm):03719                 FCB     $87,$23,$35,$DF,$E1               ; * ((2*PI)**5)/5!
377F                  (      exbasic.asm):03720         LBFDC
377F 86A55DE728       (      exbasic.asm):03721                 FCB     $86,$A5,$5D,$E7,$28               ; * -((2*PI)**3)/3!
3784                  (      exbasic.asm):03722         LBFE1
3784 83490FDAA2       (      exbasic.asm):03723                 FCB     $83,$49,$0F,$DA,$A2               ; *
                      (      exbasic.asm):03724         ;
3789 A154468F13       (      exbasic.asm):03725                 FCB     $A1,$54,$46,$8F,$13               ; UNUSED GARBAGE BYTES
378E 8F524389CD       (      exbasic.asm):03726                 FCB     $8F,$52,$43,$89,$CD               ; UNUSED GARBAGE BYTES
                      (      exbasic.asm):03727         ;* EXTENDED BASIC
                      (      exbasic.asm):03728         ;
                      (      exbasic.asm):03729         ;* COS
                      (      exbasic.asm):03730         ;* THE VALUE OF COS(X) IS DETERMINED BY THE TRIG IDENTITY COS(X)=SIN((PI/2)+X)
3793                  (      exbasic.asm):03731         COS
3793 8E37C6           (      exbasic.asm):03732                 LDX     #L83AB                            ; POINT X TO FP CONSTANT (P1/2)
3796 BD3166           (      exbasic.asm):03733                 JSR     LB9C2                             ; ADD FPA0 TO (X)
3799                  (      exbasic.asm):03734         L837E
3799 7E371B           (      exbasic.asm):03735                 JMP     SIN                               ; JUMP TO SIN ROUTINE
                      (      exbasic.asm):03736         ;
                      (      exbasic.asm):03737         ;* TAN
                      (      exbasic.asm):03738         ;* THE VALUE OF TAN(X) IS DETERMINED BY THE TRIG IDENTITY TAN(X)=SIN(X)/COS(X)
379C                  (      exbasic.asm):03739         TAN
379C BD33D3           (      exbasic.asm):03740                 JSR     LBC2F                             ; PACK FPA0 AND MOVE IT TO FPA3
379F 0F0A             (      exbasic.asm):03741                 CLR     RELFLG                            ; RESET QUADRANT FLAG
37A1 8DF6             (      exbasic.asm):03742                 BSR     L837E                             ; CALCULATE SIN OF ARGUMENT
37A3 8E004A           (      exbasic.asm):03743                 LDX     #V4A                              ; POINT X TO FPA5
37A6 BD33D9           (      exbasic.asm):03744                 JSR     LBC35                             ; PACK FPA0 AND MOVE IT TO FPA5
37A9 8E0040           (      exbasic.asm):03745                 LDX     #V40                              ; POINT X TO FPA3
37AC BD33B8           (      exbasic.asm):03746                 JSR     LBC14                             ; MOVE FPA3 TO FPA0
37AF 0F54             (      exbasic.asm):03747                 CLR     FP0SGN                            ; FORCE FPA0 MANTISSA TO BE POSITIVE
37B1 960A             (      exbasic.asm):03748                 LDA     RELFLG                            ; GET THE QUADRANT FLAG - COS NEGATIVE IN QUADS 2,3
37B3 8D0C             (      exbasic.asm):03749                 BSR     L83A6                             ; CALCULATE VALUE OF COS(FPA0)
37B5 0D4F             (      exbasic.asm):03750                 TST     FP0EXP                            ; CHECK EXPONENT OF FPA0
37B7 1027FA7B         (      exbasic.asm):03751                 LBEQ    LBA92                             ; ''OV' ERROR IF COS(X)=0
37BB 8E004A           (      exbasic.asm):03752                 LDX     #V4A                              ; POINT X TO FPA5
37BE                  (      exbasic.asm):03753         L83A3
37BE 7E3333           (      exbasic.asm):03754                 JMP     LBB8F                             ; DIVIDE (X) BY FPA0 - SIN(X)/COS(X)
37C1                  (      exbasic.asm):03755         L83A6
37C1 3402             (      exbasic.asm):03756                 PSHS    A                                 ; SAVE SIGN FLAG ON STACK
37C3 7E3749           (      exbasic.asm):03757                 JMP     LBFA6                             ; EXPAND POLYNOMIAL
                      (      exbasic.asm):03758         ;
37C6                  (      exbasic.asm):03759         L83AB
37C6 81490FDAA2       (      exbasic.asm):03760                 FCB     $81,$49,$0F,$DA,$A2               ; 1.57079633 (PI/2)
                      (      exbasic.asm):03761         ;
                      (      exbasic.asm):03762         ;* ATN
                      (      exbasic.asm):03763         ;* A 12 TERM TAYLOR SERIES IS USED TO EVALUATE THE
                      (      exbasic.asm):03764         ;* ARCTAN EXPRESSION. TWO  DIFFERENT FORMULI ARE USED
                      (      exbasic.asm):03765         ;* TO EVALUATE THE EXPRESSION DEPENDING UPON
                      (      exbasic.asm):03766         ;* WHETHER OR NOT THE ARGUMENT SQUARED IS > OR < 1.0
                      (      exbasic.asm):03767         ;
                      (      exbasic.asm):03768         ;* IF X**2<1 THEN ATN=X-(X**3)/3+(X**5)/5-(X**7)/7. . .
                      (      exbasic.asm):03769         ;* IF X**2>=1 THEN ATN=PI/2-(1/X-1/((X**3)*3)+(1/((X**5)*5)-. . .)
                      (      exbasic.asm):03770         ;
37CB                  (      exbasic.asm):03771         ATN
37CB 9654             (      exbasic.asm):03772                 LDA     FP0SGN                            ; * GET THE SIGN OF THE MANTISSA AND
37CD 3402             (      exbasic.asm):03773                 PSHS    A                                 ; * SAVE IT ON THE STACK
37CF 2A02             (      exbasic.asm):03774                 BPL     L83B8                             ; BRANCH IF POSITIVE MANTISSA
37D1 8D24             (      exbasic.asm):03775                 BSR     L83DC                             ; CHANGE SIGN OF FPA0
37D3                  (      exbasic.asm):03776         L83B8
37D3 964F             (      exbasic.asm):03777                 LDA     FP0EXP                            ; * GET EXPONENT OF FPA0 AND
37D5 3402             (      exbasic.asm):03778                 PSHS    A                                 ; * SAVE IT ON THE STACK
37D7 8181             (      exbasic.asm):03779                 CMPA    #$81                              ; IS FPAO < 1.0?
37D9 2505             (      exbasic.asm):03780                 BLO     L83C5                             ; YES
37DB 8E3269           (      exbasic.asm):03781                 LDX     #LBAC5                            ; POINT X TO FP CONSTANT 1.0
37DE 8DDE             (      exbasic.asm):03782                 BSR     L83A3                             ; GET RECIPROCAL OF FPA0
37E0                  (      exbasic.asm):03783         L83C5
37E0 8E37FB           (      exbasic.asm):03784                 LDX     #L83E0                            ; POINT (X) TO TAYLOR SERIES COEFFICIENTS
37E3 BD3697           (      exbasic.asm):03785                 JSR     LBEF0                             ; EXPAND POLYNOMIAL
37E6 3502             (      exbasic.asm):03786                 PULS    A                                 ; GET EXPONENT OF ARGUMENT
37E8 8181             (      exbasic.asm):03787                 CMPA    #$81                              ; WAS ARGUMENT < 1.0?
37EA 2506             (      exbasic.asm):03788                 BLO     L83D7                             ; YES
37EC 8E37C6           (      exbasic.asm):03789                 LDX     #L83AB                            ; POINT (X) TO FP NUMBER (PI/2)
37EF BD315D           (      exbasic.asm):03790                 JSR     LB9B9                             ; SUBTRACT FPA0 FROM (PI/2)
37F2                  (      exbasic.asm):03791         L83D7
37F2 3502             (      exbasic.asm):03792                 PULS    A                                 ; * GET SIGN OF INITIAL ARGUMENT MANTISSA
37F4 4D               (      exbasic.asm):03793                 TSTA                                      ; * AND SET FLAGS ACCORDING TO IT
37F5 2A03             (      exbasic.asm):03794                 BPL     L83DF                             ; RETURN IF ARGUMENT WAS POSITIVE
37F7                  (      exbasic.asm):03795         L83DC
37F7 7E3690           (      exbasic.asm):03796                 JMP     LBEE9                             ; CHANGE MANTISSA SIGN OF FPA0
37FA                  (      exbasic.asm):03797         L83DF
37FA 39               (      exbasic.asm):03798                 RTS
                      (      exbasic.asm):03799         ;*
                      (      exbasic.asm):03800         ;* TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR ARCTANGENT
37FB                  (      exbasic.asm):03801         L83E0
37FB 0B               (      exbasic.asm):03802                 FCB     $0B                               ; TWELVE COEFFICIENTS
37FC                  (      exbasic.asm):03803         L83E1
37FC 76B383BDD3       (      exbasic.asm):03804                 FCB     $76,$B3,$83,$BD,$D3               ; -6.84793912E-04 1/23
3801                  (      exbasic.asm):03805         L83E6
3801 791EF4A6F5       (      exbasic.asm):03806                 FCB     $79,$1E,$F4,$A6,$F5               ; +4.85094216E-03 1/21
3806                  (      exbasic.asm):03807         L83EB
3806 7B83FCB010       (      exbasic.asm):03808                 FCB     $7B,$83,$FC,$B0,$10               ; -0.0161117018
380B                  (      exbasic.asm):03809         L83F0
380B 7C0C1F67CA       (      exbasic.asm):03810                 FCB     $7C,$0C,$1F,$67,$CA               ; 0.0342096381
3810                  (      exbasic.asm):03811         L83F5
3810 7CDE53CBC1       (      exbasic.asm):03812                 FCB     $7C,$DE,$53,$CB,$C1               ; -0.0542791328
3815                  (      exbasic.asm):03813         L83FA
3815 7D1464704C       (      exbasic.asm):03814                 FCB     $7D,$14,$64,$70,$4C               ; 0.0724571965
381A                  (      exbasic.asm):03815         L83FF
381A 7DB7EA517A       (      exbasic.asm):03816                 FCB     $7D,$B7,$EA,$51,$7A               ; -0.0898023954
381F                  (      exbasic.asm):03817         L8404
381F 7D6330887E       (      exbasic.asm):03818                 FCB     $7D,$63,$30,$88,$7E               ; 0.110932413
3824                  (      exbasic.asm):03819         L8409
3824 7E9244993A       (      exbasic.asm):03820                 FCB     $7E,$92,$44,$99,$3A               ; -0.142839808
3829                  (      exbasic.asm):03821         L840E
3829 7E4CCC91C7       (      exbasic.asm):03822                 FCB     $7E,$4C,$CC,$91,$C7               ; 0.199999121
382E                  (      exbasic.asm):03823         L8413
382E 7FAAAAAA13       (      exbasic.asm):03824                 FCB     $7F,$AA,$AA,$AA,$13               ; -0.333333316
3833                  (      exbasic.asm):03825         L8418
3833 8100000000       (      exbasic.asm):03826                 FCB     $81,$00,$00,$00,$00               ; 1
                      (      exbasic.asm):03827         ;*
                      (      exbasic.asm):03828         ;*** TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR LN(X)
                      (      exbasic.asm):03829         ;*
3838                  (      exbasic.asm):03830         L841D
3838 03               (      exbasic.asm):03831                 FCB     3                                 ; FOUR COEFFICIENTS
3839                  (      exbasic.asm):03832         L841E
3839 7F5E56CB79       (      exbasic.asm):03833                 FCB     $7F,$5E,$56,$CB,$79               ; 0.434255942
383E                  (      exbasic.asm):03834         L8423
383E 80139B0B64       (      exbasic.asm):03835                 FCB     $80,$13,$9B,$0B,$64               ; 0.576584541
3843                  (      exbasic.asm):03836         L8428
3843 8076389316       (      exbasic.asm):03837                 FCB     $80,$76,$38,$93,$16               ; 0.961800759
3848                  (      exbasic.asm):03838         L842D
3848 8238AA3B20       (      exbasic.asm):03839                 FCB     $82,$38,$AA,$3B,$20               ; 2.88539007
                      (      exbasic.asm):03840         ;
384D                  (      exbasic.asm):03841         L8432
384D 803504F334       (      exbasic.asm):03842                 FCB     $80,$35,$04,$F3,$34               ; 1/SQR(2)
                      (      exbasic.asm):03843         ;
3852                  (      exbasic.asm):03844         L8437
3852 813504F334       (      exbasic.asm):03845                 FCB     $81,$35,$04,$F3,$34               ; SQR(2)
                      (      exbasic.asm):03846         ;
3857                  (      exbasic.asm):03847         L843C
3857 8080000000       (      exbasic.asm):03848                 FCB     $80,$80,$00,$00,$00               ; -0.5
                      (      exbasic.asm):03849         ;
385C                  (      exbasic.asm):03850         L8441
385C 80317217F8       (      exbasic.asm):03851                 FCB     $80,$31,$72,$17,$F8               ; LN(2)
                      (      exbasic.asm):03852         ;*
                      (      exbasic.asm):03853         ;* LOG - NATURAL LOGARITHM (LN)
                      (      exbasic.asm):03854         ;
                      (      exbasic.asm):03855         ;* THE NATURAL OR NAPERIAN LOGARITHM IS CALCULATED USING
                      (      exbasic.asm):03856         ;* MATHEMATICAL IDENTITIES. FPA0 IS OF THE FORM FPA0=A*(2**B) (SCIENTIFIC
                      (      exbasic.asm):03857         ;* NOTATION). THEREFORE, THE LOG ROUTINE DETERMINES THE VALUE OF
                      (      exbasic.asm):03858         ;* LN(A*(2**B)). A SERIES OF MATHEMATICAL IDENTITIES WILL EXPAND THIS
                      (      exbasic.asm):03859         ;* TERM: LN(A*(2**B))=(-1/2+(1/LN(2))*(LN(A*SQR(2)))+B)*LN(2). ALL OF
                      (      exbasic.asm):03860         ;* THE TERMS OF THE LATTER EXPRESSION ARE CONSTANTS EXCEPT FOR THE
                      (      exbasic.asm):03861         ;* LN(A*SQR(2)) TERM WHICH IS EVALUATED USING THE TAYLOR SERIES EXPANSION
3861                  (      exbasic.asm):03862         LOG
3861 BD3411           (      exbasic.asm):03863                 JSR     LBC6D                             ; CHECK STATUS OF FPA0
3864 102FF3B3         (      exbasic.asm):03864                 LBLE    LB44A                             ; 'FC' ERROR IF NEGATIVE OR ZERO
3868 8E384D           (      exbasic.asm):03865                 LDX     #L8432                            ; POINT (X) TO FP NUMBER (1/SQR(2))
386B 964F             (      exbasic.asm):03866                 LDA     FP0EXP                            ; *GET EXPONENT OF ARGUMENT
386D 8080             (      exbasic.asm):03867                 SUBA    #$80                              ; *SUBTRACT OFF THE BIAS AND
386F 3402             (      exbasic.asm):03868                 PSHS    A                                 ; *SAVE IT ON THE STACK
3871 8680             (      exbasic.asm):03869                 LDA     #$80
3873 974F             (      exbasic.asm):03870                 STA     FP0EXP
3875 BD3166           (      exbasic.asm):03871                 JSR     LB9C2                             ; ADD FPA0 TO (X)
3878 8E3852           (      exbasic.asm):03872                 LDX     #L8437                            ; POINT X TO SQR(2)
387B BD3333           (      exbasic.asm):03873                 JSR     LBB8F                             ; DIVIDE SQR(2) BY FPA0
387E 8E3269           (      exbasic.asm):03874                 LDX     #LBAC5                            ; POINT X TO FP VALUE OF 1.00
3881 BD315D           (      exbasic.asm):03875                 JSR     LB9B9                             ; SUBTRACT FPA0 FROM (X)
                      (      exbasic.asm):03876         ;*         NOW  FPA0 = (1-SQR(2)*X)/(1+SQR(2)*X) WHERE X IS ARGUMENT
3884 8E3838           (      exbasic.asm):03877                 LDX     #L841D                            ; POINT X TO TABLE OF COEFFICIENTS
3887 BD3697           (      exbasic.asm):03878                 JSR     LBEF0                             ; EXPAND POLYNOMIAL
388A 8E3857           (      exbasic.asm):03879                 LDX     #L843C                            ; POINT X TO FP VALUE OF (-.5)
388D BD3166           (      exbasic.asm):03880                 JSR     LB9C2                             ; ADD FPA0 TO X
3890 3504             (      exbasic.asm):03881                 PULS    B                                 ; GET EXPONENT OF ARGUMENT BACK (WITHOUT BIAS)
3892 BD3540           (      exbasic.asm):03882                 JSR     LBD99                             ; ADD ACCB TO FPA0
3895 8E385C           (      exbasic.asm):03883                 LDX     #L8441                            ; POINT X TO LN(2)
3898 7E326E           (      exbasic.asm):03884                 JMP     LBACA                             ; MULTIPLY FPA0 * LN(2)
                      (      exbasic.asm):03885         ;
                      (      exbasic.asm):03886         ;* SQR
389B                  (      exbasic.asm):03887         SQR
389B BD3403           (      exbasic.asm):03888                 JSR     LBC5F                             ; MOVE FPA0 TO FPA1
389E 8E3667           (      exbasic.asm):03889                 LDX     #LBEC0                            ; POINT (X) TO FP NUMBER (.5)
38A1 BD33B8           (      exbasic.asm):03890                 JSR     LBC14                             ; COPY A PACKED NUMBER FROM (X) TO FPA0
                      (      exbasic.asm):03891         ;
                      (      exbasic.asm):03892         ;* ARITHMETIC OPERATOR FOR EXPONENTIATION JUMPS
                      (      exbasic.asm):03893         ;* HERE. THE FORMULA USED TO EVALUATE EXPONENTIATION
                      (      exbasic.asm):03894         ;* IS A**X=E**(X LN A) = E**(FPA0*LN(FPA1)), E=2.7182818
38A4                  (      exbasic.asm):03895         L8489
38A4 2767             (      exbasic.asm):03896                 BEQ     EXP                               ; DO A NATURAL EXPONENTIATION IF EXPONENT = 0
38A6 4D               (      exbasic.asm):03897                 TSTA                                      ; *CHECK VALUE BEING EXPONENTIATED
38A7 2603             (      exbasic.asm):03898                 BNE     L8491                             ; *AND BRANCH IF IT IS <> 0
38A9 7E31DE           (      exbasic.asm):03899                 JMP     LBA3A                             ; FPA0=0 IF RAISING ZERO TO A POWER
38AC                  (      exbasic.asm):03900         L8491
38AC 8E004A           (      exbasic.asm):03901                 LDX     #V4A                              ; * PACK FPA0 AND SAVE
38AF BD33D9           (      exbasic.asm):03902                 JSR     LBC35                             ; * IT IN FPA5 (ARGUMENT'S EXPONENT)
38B2 5F               (      exbasic.asm):03903                 CLRB                                      ; ACCB=DEFAULT RESULT SIGN FLAG; 0=POSITIVE
38B3 9661             (      exbasic.asm):03904                 LDA     FP1SGN                            ; *CHECK THE SIGN OF ARGUMENT
38B5 2A10             (      exbasic.asm):03905                 BPL     L84AC                             ; *BRANCH IF POSITIVE
38B7 BD3492           (      exbasic.asm):03906                 JSR     INT                               ; CONVERT EXPONENT INTO AN INTEGER
38BA 8E004A           (      exbasic.asm):03907                 LDX     #V4A                              ; POINT X TO FPA5 (ORIGINAL EXPONENT)
38BD 9661             (      exbasic.asm):03908                 LDA     FP1SGN                            ; GET MANTISSA SIGN OF FPA1 (ARGUMENT)
38BF BD3444           (      exbasic.asm):03909                 JSR     LBCA0                             ; *COMPARE FPA0 TO (X) AND
38C2 2603             (      exbasic.asm):03910                 BNE     L84AC                             ; *BRANCH IF NOT EQUAL
38C4 43               (      exbasic.asm):03911                 COMA                                      ; TOGGLE FPA1 MANTISSA SIGN - FORCE POSITIVE
38C5 D601             (      exbasic.asm):03912                 LDB     CHARAC                            ; GET LS BYTE OF INTEGER VALUE OF EXPONENT (RESULT SIGN FLAG)
38C7                  (      exbasic.asm):03913         L84AC
38C7 BD33F0           (      exbasic.asm):03914                 JSR     LBC4C                             ; COPY FPA1 TO FPA0; ACCA = MANTISSA SIGN
38CA 3404             (      exbasic.asm):03915                 PSHS    B                                 ; PUT RESULT SIGN FLAG ON THE STACK
38CC BD3861           (      exbasic.asm):03916                 JSR     LOG
38CF 8E004A           (      exbasic.asm):03917                 LDX     #V4A                              ; POINT (X) TO FPA5
38D2 BD326E           (      exbasic.asm):03918                 JSR     LBACA                             ; MULTIPLY FPA0 BY FPA5
38D5 8D36             (      exbasic.asm):03919                 BSR     EXP                               ; CALCULATE E**(FPA0)
38D7 3502             (      exbasic.asm):03920                 PULS    A                                 ; * GET RESULT SIGN FLAG FROM THE STACK
38D9 46               (      exbasic.asm):03921                 RORA                                      ; * AND BRANCH IF NEGATIVE
38DA 1025FDB2         (      exbasic.asm):03922                 LBCS    LBEE9                             ; CHANGE SIGN OF FPA0 MANTISSA
38DE 39               (      exbasic.asm):03923                 RTS
                      (      exbasic.asm):03924         ;
                      (      exbasic.asm):03925         ;* CORRECTION FACTOR FOR EXPONENTIAL FUNCTION
38DF                  (      exbasic.asm):03926         L84C4
38DF 8138AA3B29       (      exbasic.asm):03927                 FCB     $81,$38,$AA,$3B,$29               ; 1.44269504 ( CF )
                      (      exbasic.asm):03928         ;*
                      (      exbasic.asm):03929         ;* TCHEBYSHEV MODIFIED TAYLOR SERIES COEFFICIENTS FOR E**X
                      (      exbasic.asm):03930         ;*
38E4                  (      exbasic.asm):03931         L84C9
38E4 07               (      exbasic.asm):03932                 FCB     7                                 ; EIGHT COEFFICIENTS
38E5                  (      exbasic.asm):03933         L84CA
38E5 7134583E56       (      exbasic.asm):03934                 FCB     $71,$34,$58,$3E,$56               ; 2.14987637E-05: 1/(7!*(CF**7))
38EA                  (      exbasic.asm):03935         L84CF
38EA 74167EB31B       (      exbasic.asm):03936                 FCB     $74,$16,$7E,$B3,$1B               ; 1.4352314E-04 : 1/(6!*(CF**6))
38EF                  (      exbasic.asm):03937         L84D4
38EF 772FEEE385       (      exbasic.asm):03938                 FCB     $77,$2F,$EE,$E3,$85               ; 1.34226348E-03: 1/(5!*(CF**5))
38F4                  (      exbasic.asm):03939         L84D9
38F4 7A1D841C2A       (      exbasic.asm):03940                 FCB     $7A,$1D,$84,$1C,$2A               ; 9.61401701E-03: 1/(4!*(CF**4))
38F9                  (      exbasic.asm):03941         L84DE
38F9 7C6359580A       (      exbasic.asm):03942                 FCB     $7C,$63,$59,$58,$0A               ; 0.0555051269
38FE                  (      exbasic.asm):03943         L84E3
38FE 7E75FDE7C6       (      exbasic.asm):03944                 FCB     $7E,$75,$FD,$E7,$C6               ; 0.240226385
3903                  (      exbasic.asm):03945         L84E8
3903 8031721810       (      exbasic.asm):03946                 FCB     $80,$31,$72,$18,$10               ; 0.693147186
3908                  (      exbasic.asm):03947         L84ED
3908 8100000000       (      exbasic.asm):03948                 FCB     $81,$00,$00,$00,$00               ; 1
                      (      exbasic.asm):03949         ;*
                      (      exbasic.asm):03950         ;* EXP ( E**X)
                      (      exbasic.asm):03951         ;* THE EXPONENTIAL FUNCTION IS EVALUATED BY FIRST MULTIPLYING THE
                      (      exbasic.asm):03952         ;* ARGUMENT BY A CORRECTION FACTOR (CF). AFTER THIS IS DONE, AN
                      (      exbasic.asm):03953         ;* ARGUMENT >= 127 WILL YIELD A ZERO RESULT (NO UNDERFLOW) FOR A
                      (      exbasic.asm):03954         ;* NEGATIVE ARGUMENT OR AN 'OV' (OVERFLOW) ERROR FOR A POSITIVE
                      (      exbasic.asm):03955         ;* ARGUMENT. THE POLYNOMIAL COEFFICIENTS ARE MODIFIED TO REFLECT
                      (      exbasic.asm):03956         ;* THE CF MULTIPLICATION AT THE START OF THE EVALUATION PROCESS.
                      (      exbasic.asm):03957         ;
390D                  (      exbasic.asm):03958         EXP
390D 8E38DF           (      exbasic.asm):03959                 LDX     #L84C4                            ; POINT X TO THE CORRECTION FACTOR
3910 BD326E           (      exbasic.asm):03960                 JSR     LBACA                             ; MULTIPLY FPA0 BY (X)
3913 BD33D3           (      exbasic.asm):03961                 JSR     LBC2F                             ; PACK FPA0 AND STORE IT IN FPA3
3916 964F             (      exbasic.asm):03962                 LDA     FP0EXP                            ; *GET EXPONENT OF FPA0 AND
3918 8188             (      exbasic.asm):03963                 CMPA    #$88                              ; *COMPARE TO THE MAXIMUM VALUE
391A 2503             (      exbasic.asm):03964                 BLO     L8504                             ; BRANCH IF FPA0 < 128
391C                  (      exbasic.asm):03965         L8501
391C 7E3300           (      exbasic.asm):03966                 JMP     LBB5C                             ; SET FPA0 = 0 OR 'OV' ERROR
391F                  (      exbasic.asm):03967         L8504
391F BD3492           (      exbasic.asm):03968                 JSR     INT                               ; CONVERT FPA0 TO INTEGER
3922 9601             (      exbasic.asm):03969                 LDA     CHARAC                            ; GET LS BYTE OF INTEGER
3924 8B81             (      exbasic.asm):03970                 ADDA    #$81                              ; * WAS THE ARGUMENT =127, IF SO
3926 27F4             (      exbasic.asm):03971                 BEQ     L8501                             ; * THEN 'OV' ERROR; THIS WILL ALSO ADD THE $80 BIAS
                      (      exbasic.asm):03972         ;*              ; * REQUIRED WHEN THE NEW EXPONENT IS CALCULATED BELOW
3928 4A               (      exbasic.asm):03973                 DECA                                      ; DECREMENT ONE FROM THE EXPONENT, BECAUSE $81, NOT $80 WAS USED ABOVE
3929 3402             (      exbasic.asm):03974                 PSHS    A                                 ; SAVE EXPONENT OF INTEGER PORTION ON STACK
392B 8E0040           (      exbasic.asm):03975                 LDX     #V40                              ; POINT (X) TO FPA3
392E BD315D           (      exbasic.asm):03976                 JSR     LB9B9                             ; SUBTRACT FPA0 FROM (X) - GET FRACTIONAL PART OF ARGUMENT
3931 8E38E4           (      exbasic.asm):03977                 LDX     #L84C9                            ; POINT X TO COEFFICIENTS
3934 BD36A6           (      exbasic.asm):03978                 JSR     LBEFF                             ; EVALUATE POLYNOMIAL FOR FRACTIONAL PART
3937 0F62             (      exbasic.asm):03979                 CLR     RESSGN                            ; FORCE THE MANTISSA TO BE POSITIVE
3939 3502             (      exbasic.asm):03980                 PULS    A                                 ; GET INTEGER EXPONENT FROM STACK
393B BD32EC           (      exbasic.asm):03981                 JSR     LBB48                             ; * CALCULATE EXPONENT OF NEW FPA0 BY ADDING THE EXPONENTS OF THE
                      (      exbasic.asm):03982         ;*              ; * INTEGER AND FRACTIONAL PARTS
393E 39               (      exbasic.asm):03983                 RTS
                      (      exbasic.asm):03984         ;
                      (      exbasic.asm):03985         ;* FIX
393F                  (      exbasic.asm):03986         FIX
393F BD3411           (      exbasic.asm):03987                 JSR     LBC6D                             ; CHECK STATUS OF FPA0
3942 2B03             (      exbasic.asm):03988                 BMI     L852C                             ; BRANCH IF FPA0 = NEGATIVE
3944                  (      exbasic.asm):03989         L8529
3944 7E3492           (      exbasic.asm):03990                 JMP     INT                               ; CONVERT FPA0 TO INTEGER
3947                  (      exbasic.asm):03991         L852C
3947 0354             (      exbasic.asm):03992                 COM     FP0SGN                            ; TOGGLE SIGN OF FPA0 MANTISSA
3949 8DF9             (      exbasic.asm):03993                 BSR     L8529                             ; CONVERT FPA0 TO INTEGER
394B 7E3690           (      exbasic.asm):03994                 JMP     LBEE9                             ; TOGGLE SIGN OF FPA0
                      (      exbasic.asm):03995         ;
                      (      exbasic.asm):03996         ;* EDIT
394E                  (      exbasic.asm):03997         EDIT
394E BD3D90           (      exbasic.asm):03998                 JSR     L89AE                             ; GET LINE NUMBER FROM BASIC
3951 3262             (      exbasic.asm):03999                 LEAS    $02,S                             ; PURGE RETURN ADDRESS OFF OF THE STACK
3953                  (      exbasic.asm):04000         L8538
3953 8601             (      exbasic.asm):04001                 LDA     #$01                              ; 'LIST' FLAG
3955 978C             (      exbasic.asm):04002                 STA     VD8                               ; SET FLAG TO LIST LINE
3957 BD24B6           (      exbasic.asm):04003                 JSR     LAD01                             ; GO FIND THE LINE NUMBER IN PROGRAM
395A 1025ED45         (      exbasic.asm):04004                 LBCS    LAED2                             ; ERROR #7 'UNDEFINED LINE #'
395E BD2F91           (      exbasic.asm):04005                 JSR     LB7C2                             ; GO UNCRUNCH LINE INTO BUFFER AT LINBUF+1
3961 1F20             (      exbasic.asm):04006                 TFR     Y,D                               ; PUT ABSOLUTE ADDRESS OF END OF LINE TO ACCD
3963 83DAD9           (      exbasic.asm):04007                 SUBD    #LINBUF+2                         ; SUBTRACT OUT THE START OF LINE
3966 D78B             (      exbasic.asm):04008                 STB     VD7                               ; SAVE LENGTH OF LINE
3968                  (      exbasic.asm):04009         L854D
3968 DC2B             (      exbasic.asm):04010                 LDD     BINVAL                            ; GET THE HEX VALUE OF LINE NUMBER
396A BD3573           (      exbasic.asm):04011                 JSR     LBDCC                             ; LIST THE LINE NUMBER ON THE SCREEN
396D BD3150           (      exbasic.asm):04012                 JSR     LB9AC                             ; PRINT A SPACE
3970 8EDAD8           (      exbasic.asm):04013                 LDX     #LINBUF+1                         ; POINT X TO BUFFER
3973 D68C             (      exbasic.asm):04014                 LDB     VD8                               ; * CHECK TO SEE IF LINE IS TO BE
3975 2625             (      exbasic.asm):04015                 BNE     L8581                             ; * LISTED TO SCREEN - BRANCH IF IT IS
3977                  (      exbasic.asm):04016         L855C
3977 5F               (      exbasic.asm):04017                 CLRB                                      ; RESET DIGIT ACCUMULATOR - DEFAULT VALUE
3978                  (      exbasic.asm):04018         L855D
3978 BD3AA3           (      exbasic.asm):04019                 JSR     L8687                             ; GET KEY STROKE
397B BD426F           (      exbasic.asm):04020                 JSR     L90AA                             ; SET CARRY IF NOT NUMERIC
397E 250B             (      exbasic.asm):04021                 BLO     L8570                             ; BRANCH IF NOT NUMERIC
3980 8030             (      exbasic.asm):04022                 SUBA    #'0'                              ; MASK OFF ASCII
3982 3402             (      exbasic.asm):04023                 PSHS    A                                 ; SAVE IT ON STACK
3984 860A             (      exbasic.asm):04024                 LDA     #10                               ; NUMBER BEING CONVERTED IS BASE 10
3986 3D               (      exbasic.asm):04025                 MUL                                       ; MULTIPLY ACCUMULATED VALUE BY BASE (10)
3987 EBE0             (      exbasic.asm):04026                 ADDB    ,S+                               ; ADD DIGIT TO ACCUMULATED VALUE
3989 20ED             (      exbasic.asm):04027                 BRA     L855D                             ; CHECK FOR ANOTHER DIGIT
398B                  (      exbasic.asm):04028         L8570
398B C001             (      exbasic.asm):04029                 SUBB    #$01                              ; * REPEAT PARAMETER IN ACCB; IF IT
398D C901             (      exbasic.asm):04030                 ADCB    #$01                              ; *IS 0, THEN MAKE IT '1'
398F 8141             (      exbasic.asm):04031                 CMPA    #'A'                              ; ABORT?
3991 2605             (      exbasic.asm):04032                 BNE     L857D                             ; NO
3993 BD30FF           (      exbasic.asm):04033                 JSR     LB958                             ; PRINT CARRIAGE RETURN TO SCREEN
3996 20BB             (      exbasic.asm):04034                 BRA     L8538                             ; RESTART EDIT PROCESS - CANCEL ALL CHANGES
3998                  (      exbasic.asm):04035         L857D
3998 814C             (      exbasic.asm):04036                 CMPA    #'L'                              ; LIST?
399A 260B             (      exbasic.asm):04037                 BNE     L858C                             ; NO
399C                  (      exbasic.asm):04038         L8581
399C 8D32             (      exbasic.asm):04039                 BSR     L85B4                             ; LIST THE LINE
399E 0F8C             (      exbasic.asm):04040                 CLR     VD8                               ; RESET THE LIST FLAG TO 'NO LIST'
39A0 BD30FF           (      exbasic.asm):04041                 JSR     LB958                             ; PRINT CARRIAGE RETURN
39A3 20C3             (      exbasic.asm):04042                 BRA     L854D                             ; GO INTERPRET ANOTHER EDIT COMMAND
39A5                  (      exbasic.asm):04043         L858A
39A5 3262             (      exbasic.asm):04044                 LEAS    $02,S                             ; PURGE RETURN ADDRESS OFF OF THE STACK
39A7                  (      exbasic.asm):04045         L858C
39A7 810D             (      exbasic.asm):04046                 CMPA    #CR                               ; ENTER KEY?
39A9 260E             (      exbasic.asm):04047                 BNE     L859D                             ; NO
39AB 8D23             (      exbasic.asm):04048                 BSR     L85B4                             ; ECHO THE LINE TO THE SCREEN
39AD                  (      exbasic.asm):04049         L8592
39AD BD30FF           (      exbasic.asm):04050                 JSR     LB958                             ; PRINT CARRIAGE RETURN
39B0 8EDAD8           (      exbasic.asm):04051                 LDX     #LINBUF+1                         ; * RESET BASIC'S INPUT POINTER
39B3 BF2014           (      exbasic.asm):04052                 STX     CHARAD                            ; * TO THE LINE INPUT BUFFER
39B6 7E245D           (      exbasic.asm):04053                 JMP     LACA8                             ; GO PUT LINE BACK IN PROGRAM
39B9                  (      exbasic.asm):04054         L859D
39B9 8145             (      exbasic.asm):04055                 CMPA    #'E'                              ; EXIT?
39BB 27F0             (      exbasic.asm):04056                 BEQ     L8592                             ; YES - SAME AS ENTER EXCEPT NO ECHO
39BD 8151             (      exbasic.asm):04057                 CMPA    #'Q'                              ; QUIT?
39BF 2606             (      exbasic.asm):04058                 BNE     L85AB                             ; NO
39C1 BD30FF           (      exbasic.asm):04059                 JSR     LB958                             ; PRINT CARRIAGE RETURN TO SCREEN
39C4 7E2432           (      exbasic.asm):04060                 JMP     LAC73                             ; GO TO COMMAND LEVEL - MAKE NO CHANGES
39C7                  (      exbasic.asm):04061         L85AB
39C7 8D02             (      exbasic.asm):04062                 BSR     L85AF                             ; INTERPRET THE REMAINING COMMANDS AS SUBROUTINES
39C9 20AC             (      exbasic.asm):04063                 BRA     L855C                             ; GO INTERPRET ANOTHER EDIT COMMAND
39CB                  (      exbasic.asm):04064         L85AF
39CB 8120             (      exbasic.asm):04065                 CMPA    #SPACE                            ; SPACE BAR?
39CD 2610             (      exbasic.asm):04066                 BNE     L85C3                             ; NO
39CF                  (      exbasic.asm):04067         L85B3
39CF 8C               (      exbasic.asm):04068                 FCB     SKP2                              ; SKIP TWO BYTES
                      (      exbasic.asm):04069         ;* DISPLAY THE NEXT ACCB BYTES OF THE LINE IN THE BUFFER TO THE SCREEN
                      (      exbasic.asm):04070         ;*
39D0                  (      exbasic.asm):04071         L85B4
39D0 C6F9             (      exbasic.asm):04072                 LDB     #LBUFMX-1                         ; 250 BYTES MAX IN BUFFER
39D2                  (      exbasic.asm):04073         L85B6
39D2 A684             (      exbasic.asm):04074                 LDA     ,X                                ; GET A CHARACTER FROM BUFFER
39D4 2708             (      exbasic.asm):04075                 BEQ     L85C2                             ; EXIT IF IT'S A 0
39D6 BD2027           (      exbasic.asm):04076                 JSR     PUTCHR                            ; SEND CHAR TO CONSOLE OUT
39D9 3001             (      exbasic.asm):04077                 LEAX    $01,X                             ; MOVE POINTER UP ONE
39DB 5A               (      exbasic.asm):04078                 DECB                                      ; DECREMENT CHARACTER COUNTER
39DC 26F4             (      exbasic.asm):04079                 BNE     L85B6                             ; LOOP IF NOT DONE
39DE                  (      exbasic.asm):04080         L85C2
39DE 39               (      exbasic.asm):04081                 RTS
39DF                  (      exbasic.asm):04082         L85C3
39DF 8144             (      exbasic.asm):04083                 CMPA    #'D'                              ; DELETE?
39E1 2648             (      exbasic.asm):04084                 BNE     L860F                             ; NO
39E3                  (      exbasic.asm):04085         L85C7
39E3 6D84             (      exbasic.asm):04086                 TST     ,X                                ; * CHECK FOR END OF LINE
39E5 27F7             (      exbasic.asm):04087                 BEQ     L85C2                             ; * AND BRANCH IF SO
39E7 8D04             (      exbasic.asm):04088                 BSR     L85D1                             ; REMOVE A CHARACTER
39E9 5A               (      exbasic.asm):04089                 DECB                                      ; DECREMENT REPEAT PARAMETER
39EA 26F7             (      exbasic.asm):04090                 BNE     L85C7                             ; BRANCH IF NOT DONE
39EC 39               (      exbasic.asm):04091                 RTS
                      (      exbasic.asm):04092         ;* REMOVE ONE CHARACTER FROM BUFFER
39ED                  (      exbasic.asm):04093         L85D1
39ED 0A8B             (      exbasic.asm):04094                 DEC     VD7                               ; DECREMENT LENGTH OF BUFFER
39EF 311F             (      exbasic.asm):04095                 LEAY    -1,X                              ; POINT Y TO ONE BEFORE CURRENT BUFFER POINTER
39F1                  (      exbasic.asm):04096         L85D5
39F1 3121             (      exbasic.asm):04097                 LEAY    $01,Y                             ; INCREMENT TEMPORARY BUFFER POINTER
39F3 A621             (      exbasic.asm):04098                 LDA     $01,Y                             ; GET NEXT CHARACTER
39F5 A7A4             (      exbasic.asm):04099                 STA     ,Y                                ; PUT IT IN CURRENT POSITION
39F7 26F8             (      exbasic.asm):04100                 BNE     L85D5                             ; BRANCH IF NOT END OF LINE
39F9 39               (      exbasic.asm):04101                 RTS
39FA                  (      exbasic.asm):04102         L85DE
39FA 8149             (      exbasic.asm):04103                 CMPA    #'I'                              ;  INSERT?
39FC 2713             (      exbasic.asm):04104                 BEQ     L85F5                             ; YES
39FE 8158             (      exbasic.asm):04105                 CMPA    #'X'                              ; EXTEND?
3A00 270D             (      exbasic.asm):04106                 BEQ     L85F3                             ; YES
3A02 8148             (      exbasic.asm):04107                 CMPA    #'H'                              ; HACK?
3A04 265C             (      exbasic.asm):04108                 BNE     L8646                             ; NO
3A06 6F84             (      exbasic.asm):04109                 CLR     ,X                                ; TURN CURRENT BUFFER POINTER INTO END OF LINE FLAG
3A08 1F10             (      exbasic.asm):04110                 TFR     X,D                               ; PUT CURRENT BUFFER POINTER IN ACCD
3A0A 83DAD9           (      exbasic.asm):04111                 SUBD    #LINBUF+2                         ; SUBTRACT INITIAL POINTER POSITION
3A0D D78B             (      exbasic.asm):04112                 STB     VD7                               ; SAVE NEW BUFFER LENGTH
3A0F                  (      exbasic.asm):04113         L85F3
3A0F 8DBF             (      exbasic.asm):04114                 BSR     L85B4                             ; DISPLAY THE LINE ON THE SCREEN
3A11                  (      exbasic.asm):04115         L85F5
3A11 BD3AA3           (      exbasic.asm):04116                 JSR     L8687                             ; GET A KEYSTROKE
3A14 810D             (      exbasic.asm):04117                 CMPA    #CR                               ; ENTER KEY?
3A16 278D             (      exbasic.asm):04118                 BEQ     L858A                             ; YES - INTERPRET ANOTHER COMMAND - PRINT LINE
3A18 811B             (      exbasic.asm):04119                 CMPA    #ESC                              ; ESCAPE?
3A1A 2725             (      exbasic.asm):04120                 BEQ     L8625                             ; YES - RETURN TO COMMAND LEVEL - DON'T PRINT LINE
3A1C 8108             (      exbasic.asm):04121                 CMPA    #BS                               ; BACK SPACE?
3A1E 2622             (      exbasic.asm):04122                 BNE     L8626                             ; NO
3A20 8CDAD8           (      exbasic.asm):04123                 CMPX    #LINBUF+1                         ; COMPARE POINTER TO START OF BUFFER
3A23 27EC             (      exbasic.asm):04124                 BEQ     L85F5                             ; DO NOT ALLOW BS IF AT START
3A25 8D45             (      exbasic.asm):04125                 BSR     L8650                             ; MOVE POINTER BACK ONE, BS TO SCREEN
3A27 8DC4             (      exbasic.asm):04126                 BSR     L85D1                             ; REMOVE ONE CHARACTER FROM BUFFER
3A29 20E6             (      exbasic.asm):04127                 BRA     L85F5                             ; GET INSERT SUB COMMAND
3A2B                  (      exbasic.asm):04128         L860F
3A2B 8143             (      exbasic.asm):04129                 CMPA    #'C'                              ; CHANGE?
3A2D 26CB             (      exbasic.asm):04130                 BNE     L85DE                             ; NO
3A2F                  (      exbasic.asm):04131         L8613
3A2F 6D84             (      exbasic.asm):04132                 TST     ,X                                ; CHECK CURRENT BUFFER CHARACTER
3A31 270E             (      exbasic.asm):04133                 BEQ     L8625                             ; BRANCH IF END OF LINE
3A33 BD3AA3           (      exbasic.asm):04134                 JSR     L8687                             ; GET A KEYSTROKE
3A36 2502             (      exbasic.asm):04135                 BLO     L861E                             ; BRANCH IF LEGITIMATE KEY
3A38 20F5             (      exbasic.asm):04136                 BRA     L8613                             ; TRY AGAIN IF ILLEGAL KEY
3A3A                  (      exbasic.asm):04137         L861E
3A3A A780             (      exbasic.asm):04138                 STA     ,X+                               ; INSERT NEW CHARACTER INTO BUFFER
3A3C 8D37             (      exbasic.asm):04139                 BSR     L8659                             ; SEND NEW CHARACTER TO SCREEN
3A3E 5A               (      exbasic.asm):04140                 DECB                                      ; DECREMENT REPEAT PARAMETER
3A3F 26EE             (      exbasic.asm):04141                 BNE     L8613                             ; BRANCH IF NOT DONE
3A41                  (      exbasic.asm):04142         L8625
3A41 39               (      exbasic.asm):04143                 RTS
3A42                  (      exbasic.asm):04144         L8626
3A42 D68B             (      exbasic.asm):04145                 LDB     VD7                               ; GET LENGTH OF LINE
3A44 C1F9             (      exbasic.asm):04146                 CMPB    #LBUFMX-1                         ; COMPARE TO MAXIMUM LENGTH
3A46 2602             (      exbasic.asm):04147                 BNE     L862E                             ; BRANCH IF NOT AT MAXIMUM
3A48 20C7             (      exbasic.asm):04148                 BRA     L85F5                             ; IGNORE INPUT IF LINE AT MAXIMUM LENGTH
3A4A                  (      exbasic.asm):04149         L862E
3A4A 3410             (      exbasic.asm):04150                 PSHS    X                                 ; SAVE CURRENT BUFFER POINTER
3A4C                  (      exbasic.asm):04151         L8630
3A4C 6D80             (      exbasic.asm):04152                 TST     ,X+                               ; * SCAN THE LINE UNTIL END OF
3A4E 26FC             (      exbasic.asm):04153                 BNE     L8630                             ; * LINE (0) IS FOUND
3A50                  (      exbasic.asm):04154         L8634
3A50 E682             (      exbasic.asm):04155                 LDB     ,-X                               ; DECR TEMP LINE POINTER AND GET A CHARACTER
3A52 E701             (      exbasic.asm):04156                 STB     $01,X                             ; PUT CHARACTER BACK DOWN ONE SPOT
3A54 ACE4             (      exbasic.asm):04157                 CMPX    ,S                                ; HAVE WE REACHED STARTING POINT?
3A56 26F8             (      exbasic.asm):04158                 BNE     L8634                             ; NO - KEEP GOING
3A58 3262             (      exbasic.asm):04159                 LEAS    $02,S                             ; PURGE BUFFER POINTER FROM STACK
3A5A A780             (      exbasic.asm):04160                 STA     ,X+                               ; INSERT NEW CHARACTER INTO THE LINE
3A5C 8D17             (      exbasic.asm):04161                 BSR     L8659                             ; SEND A CHARACTER TO CONSOLE OUT
3A5E 0C8B             (      exbasic.asm):04162                 INC     VD7                               ; ADD ONE TO BUFFER LENGTH
3A60 20AF             (      exbasic.asm):04163                 BRA     L85F5                             ; GET INSERT SUB COMMAND
3A62                  (      exbasic.asm):04164         L8646
3A62 8108             (      exbasic.asm):04165                 CMPA    #BS                               ; BACKSPACE?
3A64 2612             (      exbasic.asm):04166                 BNE     L865C                             ; NO
3A66                  (      exbasic.asm):04167         L864A
3A66 8D04             (      exbasic.asm):04168                 BSR     L8650                             ; MOVE POINTER BACK 1, SEND BS TO SCREEN
3A68 5A               (      exbasic.asm):04169                 DECB                                      ; DECREMENT REPEAT PARAMETER
3A69 26FB             (      exbasic.asm):04170                 BNE     L864A                             ; LOOP UNTIL DONE
3A6B 39               (      exbasic.asm):04171                 RTS
3A6C                  (      exbasic.asm):04172         L8650
3A6C 8CDAD8           (      exbasic.asm):04173                 CMPX    #LINBUF+1                         ; COMPARE POINTER TO START OF BUFFER
3A6F 27D0             (      exbasic.asm):04174                 BEQ     L8625                             ; DO NOT ALLOW BS IF AT START
3A71 301F             (      exbasic.asm):04175                 LEAX    -1,X                              ; MOVE POINTER BACK ONE
3A73 8608             (      exbasic.asm):04176                 LDA     #BS                               ; BACK SPACE
3A75                  (      exbasic.asm):04177         L8659
3A75 7E2027           (      exbasic.asm):04178                 JMP     PUTCHR                            ; SEND TO CONSOLE OUT
3A78                  (      exbasic.asm):04179         L865C
3A78 814B             (      exbasic.asm):04180                 CMPA    #'K'                              ; KILL?
3A7A 2705             (      exbasic.asm):04181                 BEQ     L8665                             ; YES
3A7C 8053             (      exbasic.asm):04182                 SUBA    #'S'                              ; SEARCH?
3A7E 2701             (      exbasic.asm):04183                 BEQ     L8665                             ; YES
3A80 39               (      exbasic.asm):04184                 RTS
3A81                  (      exbasic.asm):04185         L8665
3A81 3402             (      exbasic.asm):04186                 PSHS    A                                 ; SAVE KILL/SEARCH FLAG ON STACK
3A83 8D1E             (      exbasic.asm):04187                 BSR     L8687                             ; * GET A KEYSTROKE (TARGET CHARACTER)
3A85 3402             (      exbasic.asm):04188                 PSHS    A                                 ; * AND SAVE IT ON STACK
3A87                  (      exbasic.asm):04189         L866B
3A87 A684             (      exbasic.asm):04190                 LDA     ,X                                ; GET CURRENT BUFFER CHARACTER
3A89 2716             (      exbasic.asm):04191                 BEQ     L8685                             ; AND RETURN IF END OF LINE
3A8B 6D61             (      exbasic.asm):04192                 TST     $01,S                             ; CHECK KILL/SEARCH FLAG
3A8D 2606             (      exbasic.asm):04193                 BNE     L8679                             ; BRANCH IF KILL
3A8F 8DE4             (      exbasic.asm):04194                 BSR     L8659                             ; SEND A CHARACTER TO CONSOLE OUT
3A91 3001             (      exbasic.asm):04195                 LEAX    $01,X                             ; INCREMENT BUFFER POINTER
3A93 2003             (      exbasic.asm):04196                 BRA     L867C                             ; CHECK NEXT INPUT CHARACTER
3A95                  (      exbasic.asm):04197         L8679
3A95 BD39ED           (      exbasic.asm):04198                 JSR     L85D1                             ; REMOVE ONE CHARACTER FROM BUFFER
3A98                  (      exbasic.asm):04199         L867C
3A98 A684             (      exbasic.asm):04200                 LDA     ,X                                ; GET CURRENT INPUT CHARACTER
3A9A A1E4             (      exbasic.asm):04201                 CMPA    ,S                                ; COMPARE TO TARGET CHARACTER
3A9C 26E9             (      exbasic.asm):04202                 BNE     L866B                             ; BRANCH IF NO MATCH
3A9E 5A               (      exbasic.asm):04203                 DECB                                      ; DECREMENT REPEAT PARAMETER
3A9F 26E6             (      exbasic.asm):04204                 BNE     L866B                             ; BRANCH IF NOT DONE
3AA1                  (      exbasic.asm):04205         L8685
3AA1 35A0             (      exbasic.asm):04206                 PULS    Y,PC                              ; THE Y PULL WILL CLEAN UP THE STACK FOR THE 2 PSHS A
                      (      exbasic.asm):04207         ;*
                      (      exbasic.asm):04208         ;* GET A KEYSTRKE
3AA3                  (      exbasic.asm):04209         L8687
3AA3 BD2019           (      exbasic.asm):04210                 JSR     LA171                             ; CALL CONSOLE IN : DEV NBR=SCREEN
3AA6 817F             (      exbasic.asm):04211                 CMPA    #$7F                              ; GRAPHIC CHARACTER?
3AA8 24F9             (      exbasic.asm):04212                 BCC     L8687                             ; YES - GET ANOTHER CHAR
3AAA 815F             (      exbasic.asm):04213                 CMPA    #$5F                              ; SHIFT UP ARROW (QUIT INSERT)
3AAC 2602             (      exbasic.asm):04214                 BNE     L8694                             ; NO
3AAE 861B             (      exbasic.asm):04215                 LDA     #ESC                              ; REPLACE W/ESCAPE CODE
3AB0                  (      exbasic.asm):04216         L8694
3AB0 810D             (      exbasic.asm):04217                 CMPA    #CR                               ; ENTER KEY
3AB2 270E             (      exbasic.asm):04218                 BEQ     L86A6                             ; YES
3AB4 811B             (      exbasic.asm):04219                 CMPA    #ESC                              ; ESCAPE?
3AB6 270A             (      exbasic.asm):04220                 BEQ     L86A6                             ; YES
3AB8 8108             (      exbasic.asm):04221                 CMPA    #BS                               ; BACKSPACE?
3ABA 2706             (      exbasic.asm):04222                 BEQ     L86A6                             ; YES
3ABC 8120             (      exbasic.asm):04223                 CMPA    #SPACE                            ; SPACE
3ABE 25E3             (      exbasic.asm):04224                 BLO     L8687                             ; GET ANOTHER CHAR IF CONTROL CHAR
3AC0 1A01             (      exbasic.asm):04225                 ORCC    #$01                              ; SET CARRY
3AC2                  (      exbasic.asm):04226         L86A6
3AC2 39               (      exbasic.asm):04227                 RTS
                      (      exbasic.asm):04228         ;
                      (      exbasic.asm):04229         ;* TRON
3AC3                  (      exbasic.asm):04230         TRON
3AC3 86               (      exbasic.asm):04231                 FCB     SKP1LD                            ; SKIP ONE BYTE AND LDA #$4F
                      (      exbasic.asm):04232         ;
                      (      exbasic.asm):04233         ;* TROFF
3AC4                  (      exbasic.asm):04234         TROFF
3AC4 4F               (      exbasic.asm):04235                 CLRA                                      ; TROFF FLAG
3AC5 9780             (      exbasic.asm):04236                 STA     TRCFLG                            ; TRON/TROFF FLAG:0=TROFF, <> 0=TRON
3AC7 39               (      exbasic.asm):04237                 RTS
                      (      exbasic.asm):04238         
                      (      exbasic.asm):04239         ;* POS
                      (      exbasic.asm):04240         ;
3AC8                  (      exbasic.asm):04241         POS
3AC8 8600             (      exbasic.asm):04242                 LDA     #0                                ; GET DEVICE NUMBER
3ACA D679             (      exbasic.asm):04243                 LDB     LPTPOS                            ; GET PRINT POSITION
3ACC                  (      exbasic.asm):04244         LA5E8
3ACC 1D               (      exbasic.asm):04245                 SEX                                       ; CONVERT ACCB TO 2 DIGIT SIGNED INTEGER
3ACD 7E2CC5           (      exbasic.asm):04246                 JMP     GIVABF                            ; CONVERT ACCD TO FLOATING POINT
                      (      exbasic.asm):04247         ;
                      (      exbasic.asm):04248         ;
                      (      exbasic.asm):04249         ;* VARPTR
3AD0                  (      exbasic.asm):04250         VARPT
3AD0 BD2A35           (      exbasic.asm):04251                 JSR     LB26A                             ; SYNTAX CHECK FOR '('
3AD3 DC1F             (      exbasic.asm):04252                 LDD     ARYEND                            ; GET ADDR OF END OF ARRAYS
3AD5 3406             (      exbasic.asm):04253                 PSHS    B,A                               ; SAVE IT ON STACK
3AD7 BD2B21           (      exbasic.asm):04254                 JSR     LB357                             ; GET VARIABLE DESCRIPTOR
3ADA BD2A32           (      exbasic.asm):04255                 JSR     LB267                             ; SYNTAX CHECK FOR ')'
3ADD 3506             (      exbasic.asm):04256                 PULS    A,B                               ; GET END OF ARRAYS ADDR BACK
3ADF 1E10             (      exbasic.asm):04257                 EXG     X,D                               ; SWAP END OF ARRAYS AND VARIABLE DESCRIPTOR
3AE1 9C1F             (      exbasic.asm):04258                 CMPX    ARYEND                            ; COMPARE TO NEW END OF ARRAYS
3AE3 2652             (      exbasic.asm):04259                 BNE     L8724                             ; 'FC' ERROR IF VARIABLE WAS NOT DEFINED PRIOR TO CALLING VARPTR
3AE5 7E2CC5           (      exbasic.asm):04260                 JMP     GIVABF                            ; CONVERT VARIABLE DESCRIPTOR INTO A FP NUMBER
                      (      exbasic.asm):04261         ;
                      (      exbasic.asm):04262         ;* MID$(OLDSTRING,POSITION,LENGTH)=REPLACEMENT
3AE8                  (      exbasic.asm):04263         L86D6
3AE8 BD200B           (      exbasic.asm):04264                 JSR     GETNCH                            ; GET INPUT CHAR FROM BASIC
3AEB BD2A35           (      exbasic.asm):04265                 JSR     LB26A                             ; SYNTAX CHECK FOR '('
3AEE BD2B21           (      exbasic.asm):04266                 JSR     LB357                             ; * GET VARIABLE DESCRIPTOR ADDRESS AND
3AF1 3410             (      exbasic.asm):04267                 PSHS    X                                 ; * SAVE IT ON THE STACK
3AF3 EC02             (      exbasic.asm):04268                 LDD     $02,X                             ; POINT ACCD TO START OF OLDSTRING
3AF5 109321           (      exbasic.asm):04269                 CMPD    FRETOP                            ; COMPARE TO START OF CLEARED SPACE
3AF8 2304             (      exbasic.asm):04270                 BLS     L86EB                             ; BRANCH IF <=
3AFA 9327             (      exbasic.asm):04271                 SUBD    MEMSIZ                            ; SUBTRACT OUT TOP OF CLEARED SPACE
3AFC 2312             (      exbasic.asm):04272                 BLS     L86FD                             ; BRANCH IF STRING IN STRING SPACE
3AFE                  (      exbasic.asm):04273         L86EB
3AFE E684             (      exbasic.asm):04274                 LDB     ,X                                ; GET LENGTH OF OLDSTRING
3B00 BD2D3E           (      exbasic.asm):04275                 JSR     LB56D                             ; RESERVE ACCB BYTES IN STRING SPACE
3B03 3410             (      exbasic.asm):04276                 PSHS    X                                 ; SAVE RESERVED SPACE STRING ADDRESS ON STACK
3B05 AE62             (      exbasic.asm):04277                 LDX     $02,S                             ; POINT X TO OLDSTRING DESCRIPTOR
3B07 BD2E14           (      exbasic.asm):04278                 JSR     LB643                             ; MOVE OLDSTRING INTO STRING SPACE
3B0A 3550             (      exbasic.asm):04279                 PULS    X,U                               ; * GET OLDSTRING DESCRIPTOR ADDRESS AND RESERVED STRING
3B0C AF42             (      exbasic.asm):04280                 STX     $02,U                             ; * ADDRESS AND SAVE RESERVED ADDRESS AS OLDSTRING ADDRESS
3B0E 3440             (      exbasic.asm):04281                 PSHS    U                                 ; SAVE OLDSTRING DESCRIPTOR ADDRESS
3B10                  (      exbasic.asm):04282         L86FD
3B10 BD2F10           (      exbasic.asm):04283                 JSR     LB738                             ; SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION
3B13 3404             (      exbasic.asm):04284                 PSHS    B                                 ; SAVE POSITION PARAMETER ON STACK
3B15 5D               (      exbasic.asm):04285                 TSTB                                      ; * CHECK POSITION PARAMETER AND BRANCH
3B16 271F             (      exbasic.asm):04286                 BEQ     L8724                             ; * IF START OF STRING
3B18 C6FF             (      exbasic.asm):04287                 LDB     #$FF                              ; DEFAULT REPLACEMENT LENGTH = $FF
3B1A 8129             (      exbasic.asm):04288                 CMPA    #')'                              ; * CHECK FOR END OF MID$ STATEMENT AND
3B1C 2703             (      exbasic.asm):04289                 BEQ     L870E                             ; * BRANCH IF AT END OF STATEMENT
3B1E BD2F10           (      exbasic.asm):04290                 JSR     LB738                             ; SYNTAX CHECK FOR COMMA AND EVALUATE LENGTH EXPRESSION
3B21                  (      exbasic.asm):04291         L870E
3B21 3404             (      exbasic.asm):04292                 PSHS    B                                 ; SAVE LENGTH PARAMETER ON STACK
3B23 BD2A32           (      exbasic.asm):04293                 JSR     LB267                             ; SYNTAX CHECK FOR ')'
3B26 C6B1             (      exbasic.asm):04294                 LDB     #TOK_EQUALS                       ; TOKEN FOR =
3B28 BD2A3A           (      exbasic.asm):04295                 JSR     LB26F                             ; SYNTAX CHECK FOR '='
3B2B 8D2E             (      exbasic.asm):04296                 BSR     L8748                             ; EVALUATE REPLACEMENT STRING
3B2D 1F13             (      exbasic.asm):04297                 TFR     X,U                               ; SAVE REPLACEMENT STRING ADDRESS IN U
3B2F AE62             (      exbasic.asm):04298                 LDX     $02,S                             ; POINT X TO OLOSTRING DESCRIPTOR ADDRESS
3B31 A684             (      exbasic.asm):04299                 LDA     ,X                                ; GET LENGTH OF OLDSTRING
3B33 A061             (      exbasic.asm):04300                 SUBA    $01,S                             ; SUBTRACT POSITION PARAMETER
3B35 2403             (      exbasic.asm):04301                 BCC     L8727                             ; INSERT REPLACEMENT STRING INTO OLDSTRING
3B37                  (      exbasic.asm):04302         L8724
3B37 7E2C1B           (      exbasic.asm):04303                 JMP     LB44A                             ; 'FC' ERROR IF POSITION > LENGTH OF OLDSTRING
3B3A                  (      exbasic.asm):04304         L8727
3B3A 4C               (      exbasic.asm):04305                 INCA                                      ; * NOW ACCA = NUMBER OF CHARACTERS TO THE RIGHT
                      (      exbasic.asm):04306         ;*                             ; * (INCLUSIVE) OF THE POSITION PARAMETER
3B3B A1E4             (      exbasic.asm):04307                 CMPA    ,S
3B3D 2402             (      exbasic.asm):04308                 BCC     L872E                             ; BRANCH IF NEW STRING WILL FIT IN OLDSTRING
3B3F A7E4             (      exbasic.asm):04309                 STA     ,S                                ; IF NOT, USE AS MUCH OF LENGTH PARAMETER AS WILL FIT
3B41                  (      exbasic.asm):04310         L872E
3B41 A661             (      exbasic.asm):04311                 LDA     $01,S                             ; GET POSITION PARAMETER
3B43 1E89             (      exbasic.asm):04312                 EXG     A,B                               ; ACCA=LENGTH OF REPL STRING, ACCB=POSITION PARAMETER
3B45 AE02             (      exbasic.asm):04313                 LDX     $02,X                             ; POINT X TO OLDSTRING ADDRESS
3B47 5A               (      exbasic.asm):04314                 DECB                                      ; * BASIC'S POSITION PARAMETER STARTS AT 1; THIS ROUTINE
                      (      exbasic.asm):04315         ;*                             ; * WANTS IT TO START AT ZERO
3B48 3A               (      exbasic.asm):04316                 ABX                                       ; POINT X TO POSITION IN OLDSTRING WHERE THE REPLACEMENT WILL GO
3B49 4D               (      exbasic.asm):04317                 TSTA                                      ; * IF THE LENGTH OF THE REPLACEMENT STRING IS ZERO
3B4A 270D             (      exbasic.asm):04318                 BEQ     L8746                             ; * THEN RETURN
3B4C A1E4             (      exbasic.asm):04319                 CMPA    ,S
3B4E 2302             (      exbasic.asm):04320                 BLS     L873F                             ; ADJUSTED LENGTH PARAMETER, THEN BRANCH
3B50 A6E4             (      exbasic.asm):04321                 LDA     ,S                                ; OTHERWISE USE AS MUCH ROOM AS IS AVAILABLE
3B52                  (      exbasic.asm):04322         L873F
3B52 1F89             (      exbasic.asm):04323                 TFR     A,B                               ; SAVE NUMBER OF BYTES TO MOVE IN ACCB
3B54 1E31             (      exbasic.asm):04324                 EXG     U,X                               ; SWAP SOURCE AND DESTINATION POINTERS
3B56 BD21AA           (      exbasic.asm):04325                 JSR     LA59A                             ; MOVE (B) BYTES FROM (X) TO (U)
3B59                  (      exbasic.asm):04326         L8746
3B59 3596             (      exbasic.asm):04327                 PULS    A,B,X,PC
3B5B                  (      exbasic.asm):04328         L8748
3B5B BD291B           (      exbasic.asm):04329                 JSR     LB156                             ; EVALUATE EXPRESSION
3B5E 7E2E25           (      exbasic.asm):04330                 JMP     LB654                             ; *'TM' ERROR IF NUMERIC; RETURN WITH X POINTING
                      (      exbasic.asm):04331         ;*                             ; *TO STRING, ACCB = LENGTH
                      (      exbasic.asm):04332         ;
                      (      exbasic.asm):04333         ;* STRING
3B61                  (      exbasic.asm):04334         STRING
3B61 BD2A35           (      exbasic.asm):04335                 JSR     LB26A                             ; SYNTAX CHECK FOR '('
3B64 BD2EDE           (      exbasic.asm):04336                 JSR     LB70B                             ; EVALUATE EXPRESSION; ERROR IF > 255
3B67 3404             (      exbasic.asm):04337                 PSHS    B                                 ; SAVE LENGTH OF STRING
3B69 BD2A38           (      exbasic.asm):04338                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
3B6C BD291B           (      exbasic.asm):04339                 JSR     LB156                             ; EVALUATE EXPRESSION
3B6F BD2A32           (      exbasic.asm):04340                 JSR     LB267                             ; SYNTAX CHECK FOR ')'
3B72 9606             (      exbasic.asm):04341                 LDA     VALTYP                            ; GET VARIABLE TYPE
3B74 2605             (      exbasic.asm):04342                 BNE     L8768                             ; BRANCH IF STRING
3B76 BD2EE1           (      exbasic.asm):04343                 JSR     LB70E                             ; CONVERT FPA0 INTO AN INTEGER IN ACCB
3B79 2003             (      exbasic.asm):04344                 BRA     L876B                             ; SAVE THE STRING IN STRING SPACE
3B7B                  (      exbasic.asm):04345         L8768
3B7B BD2E75           (      exbasic.asm):04346                 JSR     LB6A4                             ; GET FIRST BYTE OF STRING
3B7E                  (      exbasic.asm):04347         L876B
3B7E 3404             (      exbasic.asm):04348                 PSHS    B                                 ; SAVE FIRST BYTE OF EXPRESSION
3B80 E661             (      exbasic.asm):04349                 LDB     $01,S                             ; GET LENGTH OF STRING
3B82 BD2CE0           (      exbasic.asm):04350                 JSR     LB50F                             ; RESERVE ACCB BYTES IN STRING SPACE
3B85 3506             (      exbasic.asm):04351                 PULS    A,B                               ; GET LENGTH OF STRING AND CHARACTER
3B87 2705             (      exbasic.asm):04352                 BEQ     L877B                             ; BRANCH IF NULL STRING
3B89                  (      exbasic.asm):04353         L8776
3B89 A780             (      exbasic.asm):04354                 STA     ,X+                               ; SAVE A CHARACTER IN STRING SPACE
3B8B 5A               (      exbasic.asm):04355                 DECB                                      ; DECREMENT LENGTH
3B8C 26FB             (      exbasic.asm):04356                 BNE     L8776                             ; BRANCH IF NOT DONE
3B8E                  (      exbasic.asm):04357         L877B
3B8E 7E2E6C           (      exbasic.asm):04358                 JMP     LB69B                             ; PUT STRING DESCRIPTOR ONTO STRING STACK
                      (      exbasic.asm):04359         ;
                      (      exbasic.asm):04360         ;* INSTR
3B91                  (      exbasic.asm):04361         INSTR
3B91 BD2A35           (      exbasic.asm):04362                 JSR     LB26A                             ; SYNTAX CHECK FOR '('
3B94 BD291B           (      exbasic.asm):04363                 JSR     LB156                             ; EVALUATE EXPRESSION
3B97 C601             (      exbasic.asm):04364                 LDB     #$01                              ; DEFAULT POSITION = 1 (SEARCH START)
3B99 3404             (      exbasic.asm):04365                 PSHS    B                                 ; SAVE START
3B9B 9606             (      exbasic.asm):04366                 LDA     VALTYP                            ; GET VARIABLE TYPE
3B9D 2610             (      exbasic.asm):04367                 BNE     L879C                             ; BRANCH IF STRING
3B9F BD2EE1           (      exbasic.asm):04368                 JSR     LB70E                             ; CONVERT FPA0 TO INTEGER IN ACCB
3BA2 E7E4             (      exbasic.asm):04369                 STB     ,S                                ; SAVE START SEARCH VALUE
3BA4 2791             (      exbasic.asm):04370                 BEQ     L8724                             ; BRANCH IF START SEARCH AT ZERO
3BA6 BD2A38           (      exbasic.asm):04371                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
3BA9 BD291B           (      exbasic.asm):04372                 JSR     LB156                             ; EVALUATE EXPRESSION - SEARCH STRING
3BAC BD290B           (      exbasic.asm):04373                 JSR     LB146                             ; 'TM' ERROR IF NUMERIC
3BAF                  (      exbasic.asm):04374         L879C
3BAF 9E52             (      exbasic.asm):04375                 LDX     FPA0+2                            ; SEARCH STRING DESCRIPTOR ADDRESS
3BB1 3410             (      exbasic.asm):04376                 PSHS    X                                 ; SAVE ON THE STACK
3BB3 BD2A38           (      exbasic.asm):04377                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
3BB6 BD3B5B           (      exbasic.asm):04378                 JSR     L8748                             ; EVALUATE TARGET STRING EXPRESSION
3BB9 3414             (      exbasic.asm):04379                 PSHS    X,B                               ; SAVE ADDRESS AND LENGTH ON STACK
3BBB BD2A32           (      exbasic.asm):04380                 JSR     LB267                             ; SYNTAX CHECK FOR ')'
3BBE AE63             (      exbasic.asm):04381                 LDX     $03,S                             ; * LOAD X WITH SEARCH STRING DESCRIPTOR ADDRESS
3BC0 BD2E2A           (      exbasic.asm):04382                 JSR     LB659                             ; * AND GET THE LENGTH ANDADDRESS OF SEARCH STRING
3BC3 3404             (      exbasic.asm):04383                 PSHS    B                                 ; SAVE LENGTH ON STACK
                      (      exbasic.asm):04384         ;*
                      (      exbasic.asm):04385         ;* AT THIS POINT THE STACK HAS THE FOLLOWING INFORMATION
                      (      exbasic.asm):04386         ;* ON IT: 0,S-SEARCH LENGTH; 1,S-TARGET LENGTH; 2 3,S-TARGET
                      (      exbasic.asm):04387         ;* ADDRESS; 4 5,S-SEARCH DESCRIPTOR ADDRESS; 6,S-SEARCH POSITION
3BC5 E166             (      exbasic.asm):04388                 CMPB    $06,S                             ; COMPARE LENGTH OF SEARCH STRING TO START
3BC7 2523             (      exbasic.asm):04389                 BLO     L87D9                             ; POSITION; RETURN 0 IF LENGTH < START
3BC9 A661             (      exbasic.asm):04390                 LDA     $01,S                             ; GET LENGTH OF TARGET STRING
3BCB 271C             (      exbasic.asm):04391                 BEQ     L87D6                             ; BRANCH IF TARGET STRING = NULL
3BCD E666             (      exbasic.asm):04392                 LDB     $06,S                             ; GET START POSITION
3BCF 5A               (      exbasic.asm):04393                 DECB                                      ; MOVE BACK ONE
3BD0 3A               (      exbasic.asm):04394                 ABX                                       ; POINT X TO POSITION IN SEARCH STRING WHERE SEARCHING WILL START
3BD1                  (      exbasic.asm):04395         L87BE
3BD1 3184             (      exbasic.asm):04396                 LEAY    ,X                                ; POINT Y TO SEARCH POSITION
3BD3 EE62             (      exbasic.asm):04397                 LDU     $02,S                             ; POINT U TO START OF TARGET
3BD5 E661             (      exbasic.asm):04398                 LDB     $01,S                             ; LOAD ACCB WITH LENGTH OF TARGET
3BD7 A6E4             (      exbasic.asm):04399                 LDA     ,S                                ; LOAD ACCA WITH LENGTH OF SEARCH
3BD9 A066             (      exbasic.asm):04400                 SUBA    $06,S                             ; SUBTRACT SEARCH POSITION FROM SEARCH LENGTH
3BDB 4C               (      exbasic.asm):04401                 INCA                                      ; ADD ONE
3BDC A161             (      exbasic.asm):04402                 CMPA    $01,S                             ; COMPARE TO TARGET LENGTH
3BDE 250C             (      exbasic.asm):04403                 BLO     L87D9                             ; RETURN 0 IF TARGET LENGTH > WHAT'S LEFT OF SEARCH STRING
3BE0                  (      exbasic.asm):04404         L87CD
3BE0 A680             (      exbasic.asm):04405                 LDA     ,X+                               ; GET A CHARACTER FROM SEARCH STRING
3BE2 A1C0             (      exbasic.asm):04406                 CMPA    ,U+                               ; COMPARE IT TO TARGET STRING
3BE4 260C             (      exbasic.asm):04407                 BNE     L87DF                             ; BRANCH IF NO MATCH
3BE6 5A               (      exbasic.asm):04408                 DECB                                      ; DECREMENT TARGET LENGTH
3BE7 26F7             (      exbasic.asm):04409                 BNE     L87CD                             ; CHECK ANOTHER CHARACTER
3BE9                  (      exbasic.asm):04410         L87D6
3BE9 E666             (      exbasic.asm):04411                 LDB     $06,S                             ; GET MATCH POSITION
3BEB                  (      exbasic.asm):04412         L87D8
3BEB 21               (      exbasic.asm):04413                 FCB     SKP1                              ; SKIP NEXT BYTE
3BEC                  (      exbasic.asm):04414         L87D9
3BEC 5F               (      exbasic.asm):04415                 CLRB                                      ; MATCH ADDRESS = 0
3BED 3267             (      exbasic.asm):04416                 LEAS    $07,S                             ; CLEAN UP THE STACK
3BEF 7E2CC4           (      exbasic.asm):04417                 JMP     LB4F3                             ; CONVERT ACCB TO FP NUMBER
3BF2                  (      exbasic.asm):04418         L87DF
3BF2 6C66             (      exbasic.asm):04419                 INC     $06,S                             ; INCREMENT SEARCH POSITION
3BF4 3021             (      exbasic.asm):04420                 LEAX    $01,Y                             ; MOVE X TO NEXT SEARCH POSITION
3BF6 20D9             (      exbasic.asm):04421                 BRA     L87BE                             ; KEEP LOOKING FOR A MATCH
                      (      exbasic.asm):04422         ;
                      (      exbasic.asm):04423         ;* EXTENDED BASIC RVEC19 HOOK CODE
3BF8                  (      exbasic.asm):04424         XVEC19
3BF8 8126             (      exbasic.asm):04425                 CMPA    #'&'                              ; *
3BFA 2660             (      exbasic.asm):04426                 BNE     L8845                             ; * RETURN IF NOT HEX OR OCTAL VARIABLE
3BFC 3262             (      exbasic.asm):04427                 LEAS    $02,S                             ; PURGE RETURN ADDRESS FROM STACK
                      (      exbasic.asm):04428         ;* PROCESS A VARIABLE PRECEEDED BY A '&' (&H,&O)
3BFE                  (      exbasic.asm):04429         L87EB
3BFE 0F52             (      exbasic.asm):04430                 CLR     FPA0+2                            ; * CLEAR BOTTOM TWO
3C00 0F53             (      exbasic.asm):04431                 CLR     FPA0+3                            ; * BYTES OF FPA0
3C02 8E0052           (      exbasic.asm):04432                 LDX     #FPA0+2                           ; BYTES 2,3 OF FPA0 = (TEMPORARY ACCUMULATOR)
3C05 BD200B           (      exbasic.asm):04433                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
3C08 814F             (      exbasic.asm):04434                 CMPA    #'O'
3C0A 2713             (      exbasic.asm):04435                 BEQ     L880A                             ; YES
3C0C 8148             (      exbasic.asm):04436                 CMPA    #'H'
3C0E 2725             (      exbasic.asm):04437                 BEQ     L881F                             ; YES
3C10 BD2013           (      exbasic.asm):04438                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
3C13 200D             (      exbasic.asm):04439                 BRA     L880C                             ; DEFAULT TO OCTAL (&O)
3C15                  (      exbasic.asm):04440         L8800
3C15 8138             (      exbasic.asm):04441                 CMPA    #'8'
3C17 1022EE28         (      exbasic.asm):04442                 LBHI    LB277
3C1B C603             (      exbasic.asm):04443                 LDB     #$03                              ; BASE 8 MULTIPLIER
3C1D 8D2C             (      exbasic.asm):04444                 BSR     L8834                             ; ADD DIGIT TO TEMPORARY ACCUMULATOR
                      (      exbasic.asm):04445         ;* EVALUATE AN &O VARIABLE
3C1F                  (      exbasic.asm):04446         L880A
3C1F BD200B           (      exbasic.asm):04447                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
3C22                  (      exbasic.asm):04448         L880C
3C22 25F1             (      exbasic.asm):04449                 BLO     L8800                             ; BRANCH IF NUMERIC
3C24                  (      exbasic.asm):04450         L880E
3C24 0F50             (      exbasic.asm):04451                 CLR     FPA0                              ; * CLEAR 2 HIGH ORDER
3C26 0F51             (      exbasic.asm):04452                 CLR     FPA0+1                            ; * BYTES OF FPA0
3C28 0F06             (      exbasic.asm):04453                 CLR     VALTYP                            ; SET VARXABLE TYPE TO NUMERIC
3C2A 0F63             (      exbasic.asm):04454                 CLR     FPSBYT                            ; ZERO OUT SUB BYTE OF FPA0
3C2C 0F54             (      exbasic.asm):04455                 CLR     FP0SGN                            ; ZERO OUT MANTISSA SIGN OF FPA0
3C2E C6A0             (      exbasic.asm):04456                 LDB     #$A0                              ; * SET EXPONENT OF FPA0
3C30 D74F             (      exbasic.asm):04457                 STB     FP0EXP                            ; *
3C32 7E31C0           (      exbasic.asm):04458                 JMP     LBA1C                             ; GO NORMALIZE FPA0
                      (      exbasic.asm):04459         ;* EVALUATE AN &H VARIABLE
3C35                  (      exbasic.asm):04460         L881F
3C35 BD200B           (      exbasic.asm):04461                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
3C38 250B             (      exbasic.asm):04462                 BLO     L882E                             ; BRANCH IF NUMERIC
3C3A BD2B71           (      exbasic.asm):04463                 JSR     LB3A2                             ; SET CARRY IF NOT ALPHA
3C3D 25E5             (      exbasic.asm):04464                 BLO     L880E                             ; BRANCH IF NOT ALPHA OR NUMERIC
3C3F 8147             (      exbasic.asm):04465                 CMPA    #'G'                              ; CHECK FOR LETTERS A-F
3C41 24E1             (      exbasic.asm):04466                 BCC     L880E                             ; BRANCH IF >= G (ILLEGAL HEX LETTER)
3C43 8007             (      exbasic.asm):04467                 SUBA    #7                                ; SUBTRACT ASCII DIFFERENCE BETWEEN A AND 9
3C45                  (      exbasic.asm):04468         L882E
3C45 C604             (      exbasic.asm):04469                 LDB     #$04                              ; BASE 16 DIGIT MULTIPLIER = 2**4
3C47 8D02             (      exbasic.asm):04470                 BSR     L8834                             ; ADD DIGIT TO TEMPORARY ACCUMULATOR
3C49 20EA             (      exbasic.asm):04471                 BRA     L881F                             ; KEEP EVALUATING VARIABLE
3C4B                  (      exbasic.asm):04472         L8834
3C4B 6801             (      exbasic.asm):04473                 ASL     $01,X                             ; * MULTIPLY TEMPORARY
3C4D 6984             (      exbasic.asm):04474                 ROL     ,X                                ; * ACCUMULATOR BY TWO
3C4F 1025F5E3         (      exbasic.asm):04475                 LBCS    LBA92                             ; 'OV' OVERFLOW ERROR
3C53 5A               (      exbasic.asm):04476                 DECB                                      ; DECREMENT SHIFT COUNTER
3C54 26F5             (      exbasic.asm):04477                 BNE     L8834                             ; MULTIPLY TEMPORARY ACCUMULATOR AGAIN
3C56 8030             (      exbasic.asm):04478                 SUBA    #'0'                              ; MASK OFF ASCII
3C58 AB01             (      exbasic.asm):04479                 ADDA    $01,X                             ; * ADD DIGIT TO TEMPORARY
3C5A A701             (      exbasic.asm):04480                 STA     $01,X                             ; * ACCUMULATOR AND SAVE IT
3C5C                  (      exbasic.asm):04481         L8845
3C5C 39               (      exbasic.asm):04482                 RTS
                      (      exbasic.asm):04483         
3C5D                  (      exbasic.asm):04484         XVEC15
3C5D 3540             (      exbasic.asm):04485                 PULS    U                                 ; PULL RETURN ADDRESS AND SAVE IN U REGISTER
3C5F 0F06             (      exbasic.asm):04486                 CLR     VALTYP                            ; SET VARIABLE TYPE TO NUMERIC
3C61 BE2014           (      exbasic.asm):04487                 LDX     CHARAD                            ; CURRENT INPUT POINTER TO X
3C64 BD200B           (      exbasic.asm):04488                 JSR     GETNCH                            ; GET CHARACTER FROM BASIC
3C67 8126             (      exbasic.asm):04489                 CMPA    #'&'                              ; HEX AND OCTAL VARIABLES ARE PRECEEDED BY &
3C69 2793             (      exbasic.asm):04490                 BEQ     L87EB                             ; PROCESS A '&' VARIABLE
3C6B 81B3             (      exbasic.asm):04491                 CMPA    #TOK_FN                           ; TOKEN FOR FN
3C6D 2761             (      exbasic.asm):04492                 BEQ     L88B4                             ; PROCESS FN CALL
3C6F 81FF             (      exbasic.asm):04493                 CMPA    #$FF                              ; CHECK FOR SECONDARY TOKEN
3C71 2609             (      exbasic.asm):04494                 BNE     L8862                             ; NOT SECONDARY
3C73 BD200B           (      exbasic.asm):04495                 JSR     GETNCH                            ; GET CHARACTER FROM BASIC
3C76 8183             (      exbasic.asm):04496                 CMPA    #TOK_USR                          ; TOKEN FOR USR
3C78 102700B4         (      exbasic.asm):04497                 LBEQ    L892C                             ; PROCESS USR CALL
3C7C                  (      exbasic.asm):04498         L8862
3C7C BF2014           (      exbasic.asm):04499                 STX     CHARAD                            ; RESTORE BASIC'S INPUT POINTER
3C7F 6EC4             (      exbasic.asm):04500                 JMP     ,U                                ; RETURN TO CALLING ROUTINE
3C81                  (      exbasic.asm):04501         L8866
3C81 9E68             (      exbasic.asm):04502                 LDX     CURLIN                            ; GET CURRENT LINE NUMBER
3C83 3001             (      exbasic.asm):04503                 LEAX    $01,X                             ; IN DIRECT MODE?
3C85 26D5             (      exbasic.asm):04504                 BNE     L8845                             ; RETURN IF NOT IN DIRECT MODE
3C87 C616             (      exbasic.asm):04505                 LDB     #2*11                             ; 'ILLEGAL DIRECT STATEMENT' ERROR
3C89                  (      exbasic.asm):04506         L886E
3C89 7E2413           (      exbasic.asm):04507                 JMP     LAC46                             ; PROCESS ERROR
                      (      exbasic.asm):04508         
3C8C                  (      exbasic.asm):04509         DEF
3C8C AE9F2014         (      exbasic.asm):04510                 LDX     [CHARAD]                          ; GET TWO INPUT CHARS
3C90 8CFF83           (      exbasic.asm):04511                 CMPX    #TOK_FF_USR                       ; TOKEN FOR USR
3C93 10270079         (      exbasic.asm):04512                 LBEQ    L890F                             ; BRANCH IF DEF USR
3C97 8D24             (      exbasic.asm):04513                 BSR     L88A1                             ; GET DESCRIPTOR ADDRESS FOR FN VARIABLE NAME
3C99 8DE6             (      exbasic.asm):04514                 BSR     L8866                             ; DON'T ALLOW DEF FN IF IN DIRECT MODE
3C9B BD2A35           (      exbasic.asm):04515                 JSR     LB26A                             ; SYNTAX CHECK FOR '('
3C9E C680             (      exbasic.asm):04516                 LDB     #$80                              ; * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE
3CA0 D708             (      exbasic.asm):04517                 STB     ARYDIS                            ; * AND SAVE IT IN THE ARRAY DISABLE FLAG
3CA2 BD2B21           (      exbasic.asm):04518                 JSR     LB357                             ; GET VARIABLE DESCRIPTOR
3CA5 8D26             (      exbasic.asm):04519                 BSR     L88B1                             ; 'TM' ERROR IF STRING
3CA7 BD2A32           (      exbasic.asm):04520                 JSR     LB267                             ; SYNTAX CHECK FOR ')'
3CAA C6B1             (      exbasic.asm):04521                 LDB     #TOK_EQUALS                       ; TOKEN FOR '='
3CAC BD2A3A           (      exbasic.asm):04522                 JSR     LB26F                             ; DO A SYNTAX CHECK FOR =
3CAF 9E4B             (      exbasic.asm):04523                 LDX     V4B                               ; GET THE ADDRESS OF THE FN NAME DESCRIPTOR
3CB1 FC2014           (      exbasic.asm):04524                 LDD     CHARAD                            ; * GET THE CURRENT INPUT POINTER ADDRESS AND
3CB4 ED84             (      exbasic.asm):04525                 STD     ,X                                ; * SAVE IT IN FIRST 2 BYTES OF THE DESCRIPTOR
3CB6 DC39             (      exbasic.asm):04526                 LDD     VARPTR                            ; = GET THE DESCRIPTOR ADDRESS OF THE ARGUMENT
3CB8 ED02             (      exbasic.asm):04527                 STD     $02,X                             ; = VARIABLE AND SAVE IT IN THE DESCRIPTOR OF THE FN NAME
3CBA 7E26B2           (      exbasic.asm):04528                 JMP     DATA                              ; MOVE INPUT POINTER TO END OF LINE OR SUBLINE
3CBD                  (      exbasic.asm):04529         L88A1
3CBD C6B3             (      exbasic.asm):04530                 LDB     #TOK_FN                           ; TOKEN FOR FN
3CBF BD2A3A           (      exbasic.asm):04531                 JSR     LB26F                             ; DO A SYNTAX CHECK FOR FN
3CC2 C680             (      exbasic.asm):04532                 LDB     #$80                              ; * GET THE FLAG TO INDICATE ARRAY VARIABLE SEARCH DISABLE FLAG
3CC4 D708             (      exbasic.asm):04533                 STB     ARYDIS                            ; * AND SAVE IT IN ARRAY VARIABLE FLAG
3CC6 8A80             (      exbasic.asm):04534                 ORA     #$80                              ; SET BIT 7 OF CURRENT INPUT CHARACTER TO INDICATE AN FN VARIABLE
3CC8 BD2B27           (      exbasic.asm):04535                 JSR     LB35C                             ; * GET THE DESCRIPTOR ADDRESS OF THIS
3CCB 9F4B             (      exbasic.asm):04536                 STX     V4B                               ; * VARIABLE AND SAVE IT IN V4B
3CCD                  (      exbasic.asm):04537         L88B1
3CCD 7E2908           (      exbasic.asm):04538                 JMP     LB143                             ; 'TM' ERROR IF STRING VARIABLE
                      (      exbasic.asm):04539         ;* EVALUATE AN FN CALL
3CD0                  (      exbasic.asm):04540         L88B4
3CD0 8DEB             (      exbasic.asm):04541                 BSR     L88A1                             ; * GET THE DESCRIPTOR OF THE FN NAME
3CD2 3410             (      exbasic.asm):04542                 PSHS    X                                 ; * VARIABLE AND SAVE IT ON THE STACK
3CD4 BD2A2D           (      exbasic.asm):04543                 JSR     LB262                             ; SYNTAX CHECK FOR '(' & EVALUATE EXPR
3CD7 8DF4             (      exbasic.asm):04544                 BSR     L88B1                             ; 'TM' ERROR IF STRING VARIABLE
3CD9 3540             (      exbasic.asm):04545                 PULS    U                                 ; POINT U TO FN NAME DESCRIPTOR
3CDB C632             (      exbasic.asm):04546                 LDB     #2*25                             ; 'UNDEFINED FUNCTION CALL' ERROR
3CDD AE42             (      exbasic.asm):04547                 LDX     $02,U                             ; POINT X TO ARGUMENT VARIABLE DESCRIPTOR
3CDF 27A8             (      exbasic.asm):04548                 BEQ     L886E                             ; BRANCH TO ERROR HANDLER
3CE1 10BE2014         (      exbasic.asm):04549                 LDY     CHARAD                            ; SAVE CURRENT INPUT POINTER IN Y
3CE5 EEC4             (      exbasic.asm):04550                 LDU     ,U                                ; * POINT U TO START OF FN FORMULA AND
3CE7 FF2014           (      exbasic.asm):04551                 STU     CHARAD                            ; * SAVE IT IN INPUT POINTER
3CEA A604             (      exbasic.asm):04552                 LDA     $04,X                             ; = GET FP VALUE OF
3CEC 3402             (      exbasic.asm):04553                 PSHS    A                                 ; = ARGUMENT VARIABLE, CURRENT INPUT
3CEE EC84             (      exbasic.asm):04554                 LDD     ,X                                ; = POINTER, AND ADDRESS OF START
3CF0 EE02             (      exbasic.asm):04555                 LDU     $02,X                             ; = OF FN FORMULA AND SAVE
3CF2 3476             (      exbasic.asm):04556                 PSHS    U,Y,X,B,A                         ; = THEM ON THE STACK
3CF4 BD33D9           (      exbasic.asm):04557                 JSR     LBC35                             ; PACK FPA0 AND SAVE IT IN (X)
3CF7                  (      exbasic.asm):04558         L88D9
3CF7 BD2906           (      exbasic.asm):04559                 JSR     LB141                             ; EVALUATE FN EXPRESSION
3CFA 3576             (      exbasic.asm):04560                 PULS    A,B,X,Y,U                         ; RESTORE REGISTERS
3CFC ED84             (      exbasic.asm):04561                 STD     ,X                                ; * GET THE FP
3CFE EF02             (      exbasic.asm):04562                 STU     $02,X                             ; * VALUE OF THE ARGUMENT
3D00 3502             (      exbasic.asm):04563                 PULS    A                                 ; * VARIABLE OFF OF THE
3D02 A704             (      exbasic.asm):04564                 STA     $04,X                             ; * STACK AND RE-SAVE IT
3D04 BD2013           (      exbasic.asm):04565                 JSR     GETCCH                            ; GET FINAL CHARACTER OF THE FN FORMULA
3D07 1026ED38         (      exbasic.asm):04566                 LBNE    LB277                             ; 'SYNTAX' ERROR IF NOT END OF LINE
3D0B 10BF2014         (      exbasic.asm):04567                 STY     CHARAD                            ; RESTORE INPUT POINTER
3D0F                  (      exbasic.asm):04568         L88EF
3D0F 39               (      exbasic.asm):04569                 RTS
                      (      exbasic.asm):04570         ;
                      (      exbasic.asm):04571         ;
                      (      exbasic.asm):04572         ;
                      (      exbasic.asm):04573         ;* DEF USR
3D10                  (      exbasic.asm):04574         L890F
3D10 BD200B           (      exbasic.asm):04575                 JSR     GETNCH                            ; SKIP PAST SECOND BYTE OF DEF USR TOKEN
3D13 8D09             (      exbasic.asm):04576                 BSR     L891C                             ; GET FN NUMBER
3D15 3410             (      exbasic.asm):04577                 PSHS    X                                 ; SAVE FN EXEC ADDRESS STORAGE LOC
3D17 8D2F             (      exbasic.asm):04578                 BSR     L8944                             ; CALCULATE EXEC ADDRESS
3D19 3540             (      exbasic.asm):04579                 PULS    U                                 ; GET FN EXEC ADDRESS STORAGE LOC
3D1B AFC4             (      exbasic.asm):04580                 STX     ,U                                ; SAVE EXEC ADDRESS
3D1D 39               (      exbasic.asm):04581                 RTS
3D1E                  (      exbasic.asm):04582         L891C
3D1E 5F               (      exbasic.asm):04583                 CLRB                                      ; DEFAULT TO USR0 IF NO ARGUMENT
3D1F BD200B           (      exbasic.asm):04584                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
3D22 2407             (      exbasic.asm):04585                 BCC     L8927                             ; BRANCH IF NOT NUMERIC
3D24 8030             (      exbasic.asm):04586                 SUBA    #'0'                              ; MASK OFF ASCII
3D26 1F89             (      exbasic.asm):04587                 TFR     A,B                               ; SAVE USR NUMBER IN ACCB
3D28 BD200B           (      exbasic.asm):04588                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
3D2B                  (      exbasic.asm):04589         L8927
3D2B 9E81             (      exbasic.asm):04590                 LDX     USRADR                            ; GET ADDRESS OF STORAGE LOCs FOR USR ADDRESS
3D2D 58               (      exbasic.asm):04591                 ASLB                                      ; X2 - 2 BYTES/USR ADDRESS
3D2E 3A               (      exbasic.asm):04592                 ABX                                       ; ADD OFFSET TO START ADDRESS OF STORAGE LOCs
3D2F 39               (      exbasic.asm):04593                 RTS
                      (      exbasic.asm):04594         ;* PROCESS A USR CALL
3D30                  (      exbasic.asm):04595         L892C
3D30 8DEC             (      exbasic.asm):04596                 BSR     L891C                             ; GET STORAGE LOC OF EXEC ADDRESS FOR USR N
3D32 AE84             (      exbasic.asm):04597                 LDX     ,X                                ; * GET EXEC ADDRESS AND
3D34 3410             (      exbasic.asm):04598                 PSHS    X                                 ; * PUSH IT ONTO STACK
3D36 BD2A2D           (      exbasic.asm):04599                 JSR     LB262                             ; SYNTAX CHECK FOR '(' & EVALUATE EXPR
3D39 8E004F           (      exbasic.asm):04600                 LDX     #FP0EXP                           ; POINT X TO FPA0
3D3C 9606             (      exbasic.asm):04601                 LDA     VALTYP                            ; GET VARIABLE TYPE
3D3E 2707             (      exbasic.asm):04602                 BEQ     L8943                             ; BRANCH IF NUMERIC, STRING IF <> 0
3D40 BD2E28           (      exbasic.asm):04603                 JSR     LB657                             ; GET LENGTH & ADDRESS OF STRING VARIABLE
3D43 9E52             (      exbasic.asm):04604                 LDX     FPA0+2                            ; GET POINTER TO STRING DESCRIPTOR
3D45 9606             (      exbasic.asm):04605                 LDA     VALTYP                            ; GET VARIABLE TYPE
3D47                  (      exbasic.asm):04606         L8943
3D47 39               (      exbasic.asm):04607                 RTS                                       ; JUMP TO USR ROUTINE (PSHS X ABOVE)
3D48                  (      exbasic.asm):04608         L8944
3D48 C6B1             (      exbasic.asm):04609                 LDB     #TOK_EQUALS                       ; TOKEN FOR '='
3D4A BD2A3A           (      exbasic.asm):04610                 JSR     LB26F                             ; DO A SYNTAX CHECK FOR =
3D4D 7E2F15           (      exbasic.asm):04611                 JMP     LB73D                             ; EVALUATE EXPRESSION, RETURN VALUE IN X
                      (      exbasic.asm):04612         ;
                      (      exbasic.asm):04613         ;
                      (      exbasic.asm):04614         ;
                      (      exbasic.asm):04615         ;* DEL
3D50                  (      exbasic.asm):04616         DEL
3D50 1027EEC7         (      exbasic.asm):04617                 LBEQ    LB44A                             ; 'FC' ERROR IF NO ARGUMENT
3D54 BD2742           (      exbasic.asm):04618                 JSR     LAF67                             ; CONVERT A DECIMAL BASiC NUMBER TO BINARY
3D57 BD24B6           (      exbasic.asm):04619                 JSR     LAD01                             ; FIND RAM ADDRESS OF START OF A BASIC LINE
3D5A 9F87             (      exbasic.asm):04620                 STX     VD3                               ; SAVE RAM ADDRESS OF STARTING LINE NUMBER
3D5C BD2013           (      exbasic.asm):04621                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
3D5F 2711             (      exbasic.asm):04622                 BEQ     L8990                             ; BRANCH IF END OF LINE
3D61 81AA             (      exbasic.asm):04623                 CMPA    #TOK_MINUS                        ; TOKEN FOR '-'
3D63 263C             (      exbasic.asm):04624                 BNE     L89BF                             ; TERMINATE COMMAND IF LINE NUMBER NOT FOLLOWED BY '-'
3D65 BD200B           (      exbasic.asm):04625                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
3D68 2704             (      exbasic.asm):04626                 BEQ     L898C                             ; IF END OF LINE, USE DEFAULT ENDING LINE NUMBER
3D6A 8D24             (      exbasic.asm):04627                 BSR     L89AE                             ; * CONVERT ENDING LINE NUMBER TO BINARY
3D6C 2004             (      exbasic.asm):04628                 BRA     L8990                             ; * AND SAVE IT IN BINVAL
3D6E                  (      exbasic.asm):04629         L898C
3D6E 86FF             (      exbasic.asm):04630                 LDA     #$FF                              ; = USE $FFXX AS DEFAULT ENDING
3D70 972B             (      exbasic.asm):04631                 STA     BINVAL                            ; = LINE NUMBER - SAVE IT IN BINVAL
3D72                  (      exbasic.asm):04632         L8990
3D72 DE87             (      exbasic.asm):04633                 LDU     VD3                               ; POINT U TO STARTING LINE NUMBER ADDRESS
3D74                  (      exbasic.asm):04634         L8992
3D74 8C               (      exbasic.asm):04635                 FCB     SKP2                              ; SKIP TWO BYTES
3D75                  (      exbasic.asm):04636         L8993
3D75 EEC4             (      exbasic.asm):04637                 LDU     ,U                                ; POINT U TO START OF NEXT LINE
3D77 ECC4             (      exbasic.asm):04638                 LDD     ,U                                ; CHECK FOR END OF PROGRAM
3D79 2706             (      exbasic.asm):04639                 BEQ     L899F                             ; BRANCH IF END OF PROGRAM
3D7B EC42             (      exbasic.asm):04640                 LDD     $02,U                             ; LOAD ACCD WITH THIS LINE'S NUMBER
3D7D 932B             (      exbasic.asm):04641                 SUBD    BINVAL                            ; SUBTRACT ENDING LINE NUMBER ADDRESS
3D7F 23F4             (      exbasic.asm):04642                 BLS     L8993                             ; BRANCH IF = < ENDING LINE NUMBER
3D81                  (      exbasic.asm):04643         L899F
3D81 9E87             (      exbasic.asm):04644                 LDX     VD3                               ; GET STARTING LINE NUMBER
3D83 8D15             (      exbasic.asm):04645                 BSR     L89B8                             ; MOVE (U) TO (X) UNTIL END OF PROGRAM
3D85 BD24D6           (      exbasic.asm):04646                 JSR     LAD21                             ; RESET BASIC'S INPUT POINTER AND ERASE VARIABLES
3D88 9E87             (      exbasic.asm):04647                 LDX     VD3                               ; GET STARTING LINE NUMBER ADDRESS
3D8A BD24A6           (      exbasic.asm):04648                 JSR     LACF1                             ; RECOMPUTE START OF NEXT LINE ADDRESSES
3D8D 7E2432           (      exbasic.asm):04649                 JMP     LAC73                             ; JUMP TO BASIC'S MAIN COMMAND LOOP
3D90                  (      exbasic.asm):04650         L89AE
3D90 BD2742           (      exbasic.asm):04651                 JSR     LAF67                             ; GO GET LINE NUMBER CONVERTED TO BINARY
3D93 7E21B3           (      exbasic.asm):04652                 JMP     LA5C7                             ; MAKE SURE THERE'S NO MORE ON THIS LINE
3D96                  (      exbasic.asm):04653         L89B4
3D96 A6C0             (      exbasic.asm):04654                 LDA     ,U+                               ; GET A BYTE FROM (U)
3D98 A780             (      exbasic.asm):04655                 STA     ,X+                               ; MOVE THE BYTE TO (X)
3D9A                  (      exbasic.asm):04656         L89B8
3D9A 11931B           (      exbasic.asm):04657                 CMPU    VARTAB                            ; COMPARE TO END OF BASIC
3D9D 26F7             (      exbasic.asm):04658                 BNE     L89B4                             ; BRANCH IF NOT AT END
3D9F 9F1B             (      exbasic.asm):04659                 STX     VARTAB                            ; SAVE (X) AS NEW END OF BASIC
3DA1                  (      exbasic.asm):04660         L89BF
3DA1 39               (      exbasic.asm):04661                 RTS
                      (      exbasic.asm):04662         ;
                      (      exbasic.asm):04663         ;
3DA2                  (      exbasic.asm):04664         L89C0
3DA2 BD3C81           (      exbasic.asm):04665                 JSR     L8866                             ; 'BS' ERROR IF IN DIRECT MODE
3DA5 BD200B           (      exbasic.asm):04666                 JSR     GETNCH                            ; GET A CHAR FROM BASIC
3DA8                  (      exbasic.asm):04667         L89D2
3DA8 8122             (      exbasic.asm):04668                 CMPA    #$22                              ; CHECK FOR PROMPT STRING
3DAA 260B             (      exbasic.asm):04669                 BNE     L89E1                             ; BRANCH IF NO PROMPT STRING
3DAC BD2A0D           (      exbasic.asm):04670                 JSR     LB244                             ; STRIP OFF PROMPT STRING & PUT IT ON STRING STACK
3DAF C63B             (      exbasic.asm):04671                 LDB     #';'                              ; *
3DB1 BD2A3A           (      exbasic.asm):04672                 JSR     LB26F                             ; * DO A SYNTAX CHECK FOR;
3DB4 BD3143           (      exbasic.asm):04673                 JSR     LB99F                             ; REMOVE PROMPT STRING FROM STRING STACK & SEND TO CONSOLE OUT
3DB7                  (      exbasic.asm):04674         L89E1
3DB7 327E             (      exbasic.asm):04675                 LEAS    -2,S                              ; RESERVE TWO STORAGE SLOTS ON STACK
3DB9 BD27F9           (      exbasic.asm):04676                 JSR     LB035                             ; INPUT A LINE FROM CURRENT INPUT DEVICE
3DBC 3262             (      exbasic.asm):04677                 LEAS    $02,S                             ; CLEAN UP THE STACK
3DBE BD2B21           (      exbasic.asm):04678                 JSR     LB357                             ; SEARCH FOR A VARIABLE
3DC1 9F3B             (      exbasic.asm):04679                 STX     VARDES                            ; SAVE POINTER TO VARIABLE DESCRIPTOR
3DC3 BD290B           (      exbasic.asm):04680                 JSR     LB146                             ; ''TM' ERROR IF VARIABLE TYPE = NUMERIC
3DC6 8EDAD7           (      exbasic.asm):04681                 LDX     #LINBUF                           ; POINT X TO THE STRING BUFFER WHERE THE INPUT STRING WAS STORED
3DC9 4F               (      exbasic.asm):04682                 CLRA                                      ; TERMINATOR CHARACTER 0 (END OF LINE)
3DCA BD2CED           (      exbasic.asm):04683                 JSR     LB51A                             ; PARSE THE INPUT STRING AND STORE IT IN THE STRING SPACE
3DCD 7E2780           (      exbasic.asm):04684                 JMP     LAFA4                             ; REMOVE DESCRIPTOR FROM STRING STACK
3DD0                  (      exbasic.asm):04685         L89FC
3DD0 BD2742           (      exbasic.asm):04686                 JSR     LAF67                             ; STRIP A DECIMAL NUMBER FROM BASIC INPUT LINE
3DD3 9E2B             (      exbasic.asm):04687                 LDX     BINVAL                            ; GET BINARY VALUE
3DD5 39               (      exbasic.asm):04688                 RTS
3DD6                  (      exbasic.asm):04689         L8A02
3DD6 9E85             (      exbasic.asm):04690                 LDX     VD1                               ; GET CURRENT OLD NUMBER BEING RENUMBERED
3DD8                  (      exbasic.asm):04691         L8A04
3DD8 9F2B             (      exbasic.asm):04692                 STX     BINVAL                            ; SAVE THE LINE NUMBER BEING SEARCHED FOR
3DDA 7E24B6           (      exbasic.asm):04693                 JMP     LAD01                             ; GO FIND THE LINE NUMBER IN BASIC PROGRAM
                      (      exbasic.asm):04694         ;
                      (      exbasic.asm):04695         ;* RENUM
3DDD                  (      exbasic.asm):04696         RENUM
3DDD BD24DB           (      exbasic.asm):04697                 JSR     LAD26                             ; ERASE VARIABLES
3DE0 CC000A           (      exbasic.asm):04698                 LDD     #10                               ; DEFAULT LINE NUMBER INTERVAL
3DE3 DD89             (      exbasic.asm):04699                 STD     VD5                               ; SAVE DEFAULT RENUMBER START LINE NUMBER
3DE5 DD83             (      exbasic.asm):04700                 STD     VCF                               ; SAVE DEFAULT INTERVAL
3DE7 5F               (      exbasic.asm):04701                 CLRB                                      ; NOW ACCD = 0
3DE8 DD85             (      exbasic.asm):04702                 STD     VD1                               ; DEFAULT LINE NUMBER OF WHERE TO START RENUMBERING
3DEA BD2013           (      exbasic.asm):04703                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
3DED 2407             (      exbasic.asm):04704                 BCC     L8A20                             ; BRANCH IF NOT NUMERIC
3DEF 8DDF             (      exbasic.asm):04705                 BSR     L89FC                             ; CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY
3DF1 9F89             (      exbasic.asm):04706                 STX     VD5                               ; SAVE LINE NUMBER WHERE RENUMBERING STARTS
3DF3 BD2013           (      exbasic.asm):04707                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
3DF6                  (      exbasic.asm):04708         L8A20
3DF6 271C             (      exbasic.asm):04709                 BEQ     L8A3D                             ; BRANCH IF END OF LINE
3DF8 BD2A38           (      exbasic.asm):04710                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
3DFB 2407             (      exbasic.asm):04711                 BCC     L8A2D                             ; BRANCH IF NEXT CHARACTER NOT NUMERIC
3DFD 8DD1             (      exbasic.asm):04712                 BSR     L89FC                             ; CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY
3DFF 9F85             (      exbasic.asm):04713                 STX     VD1                               ; SAVE NEW RENUMBER LINE
3E01 BD2013           (      exbasic.asm):04714                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
3E04                  (      exbasic.asm):04715         L8A2D
3E04 270E             (      exbasic.asm):04716                 BEQ     L8A3D                             ; BRANCH IF END OF LINE
3E06 BD2A38           (      exbasic.asm):04717                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
3E09 2406             (      exbasic.asm):04718                 BCC     L8A3A                             ; BRANCH IF NEXT CHARACTER NOT NUMERIC
3E0B 8DC3             (      exbasic.asm):04719                 BSR     L89FC                             ; CONVERT DECIMAL NUMBER IN BASIC PROGRAM TO BINARY
3E0D 9F83             (      exbasic.asm):04720                 STX     VCF                               ; SAVE NEW INTERVAL
3E0F 2749             (      exbasic.asm):04721                 BEQ     L8A83                             ; 'FC' ERROR
3E11                  (      exbasic.asm):04722         L8A3A
3E11 BD21B3           (      exbasic.asm):04723                 JSR     LA5C7                             ; CHECK FOR MORE CHARACTERS ON LINE - 'SYNTAX' ERROR IF ANY
3E14                  (      exbasic.asm):04724         L8A3D
3E14 8DC0             (      exbasic.asm):04725                 BSR     L8A02                             ; GO GET ADDRESS OF OLD NUMBER BEING RENUMBERED
3E16 9F87             (      exbasic.asm):04726                 STX     VD3                               ; SAVE ADDRESS
3E18 9E89             (      exbasic.asm):04727                 LDX     VD5                               ; GET NEXT RENUMBERED LINE NUMBER TO USE
3E1A 8DBC             (      exbasic.asm):04728                 BSR     L8A04                             ; FIND THE LINE NUMBER IN THE BASIC PROGRAM
3E1C 9C87             (      exbasic.asm):04729                 CMPX    VD3                               ; COMPARE TO ADDRESS OF OLD LINE NUMBER
3E1E 253A             (      exbasic.asm):04730                 BLO     L8A83                             ; 'FC' ERROR IF NEW ADDRESS < OLD ADDRESS
3E20 8D1C             (      exbasic.asm):04731                 BSR     L8A67                             ; MAKE SURE RENUMBERED LINE NUMBERS WILL BE IN RANGE
3E22 BD3EB4           (      exbasic.asm):04732                 JSR     L8ADD                             ; CONVERT ASCII LINE NUMBERS TO 'EXPANDED' BINARY
3E25 BD24A4           (      exbasic.asm):04733                 JSR     LACEF                             ; RECALCULATE NEXT LINE RAM ADDRESSES
3E28 8DAC             (      exbasic.asm):04734                 BSR     L8A02                             ; GET RAM ADDRESS OF FIRST LINE TO BE RENUMBERED
3E2A 9F87             (      exbasic.asm):04735                 STX     VD3                               ; SAVE IT
3E2C 8D3A             (      exbasic.asm):04736                 BSR     L8A91                             ; MAKE SURE LINE NUMBERS EXIST
3E2E 8D0F             (      exbasic.asm):04737                 BSR     L8A68                             ; INSERT NEW LINE NUMBERS IN LINE HEADERS
3E30 8D36             (      exbasic.asm):04738                 BSR     L8A91                             ; INSERT NEW LINE NUMBERS IN PROGRAM STATEMENTS
3E32 BD3F5A           (      exbasic.asm):04739                 JSR     L8B7B                             ; CONVERT PACKED BINARY LINE NUMBERS TO ASCII
3E35 BD24DB           (      exbasic.asm):04740                 JSR     LAD26                             ; ERASE VARIABLES
3E38 BD24A4           (      exbasic.asm):04741                 JSR     LACEF                             ; RECALCULATE NEXT LINE RAM ADDRESS
3E3B 7E2432           (      exbasic.asm):04742                 JMP     LAC73                             ; GO BACK TO BASIC'S MAIN LOOP
3E3E                  (      exbasic.asm):04743         L8A67
3E3E 86               (      exbasic.asm):04744                 FCB     SKP1LD                            ; SKIP ONE BYTE - LDA #$4F
3E3F                  (      exbasic.asm):04745         L8A68
3E3F 4F               (      exbasic.asm):04746                 CLRA                                      ; NEW LINE NUMBER FLAG - 0; INSERT NEW LINE NUMBERS
3E40 978C             (      exbasic.asm):04747                 STA     VD8                               ; SAVE NEW LINE NUMBER FLAG; 0 = INSERT NEW NUMBERS
3E42 9E87             (      exbasic.asm):04748                 LDX     VD3                               ; GET ADDRESS OF OLD LINE NUMBER BEING RENUMBERED
3E44 DC89             (      exbasic.asm):04749                 LDD     VD5                               ; GET THE CURRENT RENUMBERED LINE NUMBER
3E46 8D15             (      exbasic.asm):04750                 BSR     L8A86                             ; RETURN IF END OF PROGRAM
3E48                  (      exbasic.asm):04751         L8A71
3E48 0D8C             (      exbasic.asm):04752                 TST     VD8                               ; CHECK NEW LINE NUMBER FLAG
3E4A 2602             (      exbasic.asm):04753                 BNE     L8A77                             ; BRANCH IF NOT INSERTING NEW LINE NUMBERS
3E4C ED02             (      exbasic.asm):04754                 STD     $02,X                             ; STORE THE NEW LINE NUMBER IN THE BASIC PROGRAM
3E4E                  (      exbasic.asm):04755         L8A77
3E4E AE84             (      exbasic.asm):04756                 LDX     ,X                                ; POINT X TO THE NEXT LINE IN BASIC
3E50 8D0B             (      exbasic.asm):04757                 BSR     L8A86                             ; RETURN IF END OF PROGRAM
3E52 D383             (      exbasic.asm):04758                 ADDD    VCF                               ; ADD INTERVAL TO CURRENT RENUMBERED LINE NUMBER
3E54 2504             (      exbasic.asm):04759                 BLO     L8A83                             ; 'FC' ERROR IF LINE NUMBER > $FFFF
3E56 81FA             (      exbasic.asm):04760                 CMPA    #MAXLIN                           ; LARGEST LINE NUMBER = $F9FF
3E58 25EE             (      exbasic.asm):04761                 BLO     L8A71                             ; BRANCH IF LEGAL LINE NUMBER
3E5A                  (      exbasic.asm):04762         L8A83
3E5A 7E2C1B           (      exbasic.asm):04763                 JMP     LB44A                             ; 'FC' ERROR IF LINE NUMBER MS BYTE > $F9
                      (      exbasic.asm):04764         ;* TEST THE TWO BYTES POINTED TO BY (X).
                      (      exbasic.asm):04765         ;* NORMAL RETURN IF <> 0. IF = 0 (END OF
                      (      exbasic.asm):04766         ;* PROGRAM) RETURN IS PULLED OFF STACK AND
                      (      exbasic.asm):04767         ;* YOU RETURN TO PREVIOUS SUBROUTINE CALL.
3E5D                  (      exbasic.asm):04768         L8A86
3E5D 3406             (      exbasic.asm):04769                 PSHS    B,A                               ; SAVE ACCD
3E5F EC84             (      exbasic.asm):04770                 LDD     ,X                                ; TEST THE 2 BYTES POINTED TO BY X
3E61 3506             (      exbasic.asm):04771                 PULS    A,B                               ; RESTORE ACCD
3E63 2602             (      exbasic.asm):04772                 BNE     L8A90                             ; BRANCH IF NOT END OF PROGRAM
3E65 3262             (      exbasic.asm):04773                 LEAS    $02,S                             ; PURGE RETURN ADDRESS FROM STACK
3E67                  (      exbasic.asm):04774         L8A90
3E67 39               (      exbasic.asm):04775                 RTS
3E68                  (      exbasic.asm):04776         L8A91
3E68 9E19             (      exbasic.asm):04777                 LDX     TXTTAB                            ; GET START OF BASIC PROGRAM
3E6A 301F             (      exbasic.asm):04778                 LEAX    -1,X                              ; MOVE POINTER BACK ONE
3E6C                  (      exbasic.asm):04779         L8A95
3E6C 3001             (      exbasic.asm):04780                 LEAX    $01,X                             ; MOVE POINTER UP ONE
3E6E 8DED             (      exbasic.asm):04781                 BSR     L8A86                             ; RETURN IF END OF PROGRAM
3E70                  (      exbasic.asm):04782         L8A99
3E70 3003             (      exbasic.asm):04783                 LEAX    $03,X                             ; SKIP OVER NEXT LINE ADDRESS AND LINE NUMBER
3E72                  (      exbasic.asm):04784         L8A9B
3E72 3001             (      exbasic.asm):04785                 LEAX    $01,X                             ; MOVE POINTER TO NEXT CHARACTER
3E74 A684             (      exbasic.asm):04786                 LDA     ,X                                ; CHECK CURRENT CHARACTER
3E76 27F4             (      exbasic.asm):04787                 BEQ     L8A95                             ; BRANCH IF END OF LINE
3E78 9F0F             (      exbasic.asm):04788                 STX     TEMPTR                            ; SAVE CURRENT POINTER
3E7A 4A               (      exbasic.asm):04789                 DECA                                      ; =
3E7B 270C             (      exbasic.asm):04790                 BEQ     L8AB2                             ; =BRANCH IF START OF PACKED NUMERIC LINE
3E7D 4A               (      exbasic.asm):04791                 DECA                                      ; *
3E7E 272A             (      exbasic.asm):04792                 BEQ     L8AD3                             ; *BRANCH IF LINE NUMBER EXISTS
3E80 4A               (      exbasic.asm):04793                 DECA                                      ; =
3E81 26EF             (      exbasic.asm):04794                 BNE     L8A9B                             ; =MOVE TO NEXT CHARACTER IF > 3
3E83                  (      exbasic.asm):04795         L8AAC
3E83 8603             (      exbasic.asm):04796                 LDA     #$03                              ; * SET 1ST BYTE = 3 TO INDICATE LINE
3E85 A780             (      exbasic.asm):04797                 STA     ,X+                               ; * NUMBER DOESN'T CURRENTLY EXIST
3E87 20E7             (      exbasic.asm):04798                 BRA     L8A99                             ; GO GET ANOTHER CHARACTER
3E89                  (      exbasic.asm):04799         L8AB2
3E89 EC01             (      exbasic.asm):04800                 LDD     $01,X                             ; GET MS BYTE OF LINE NUMBER
3E8B 6A02             (      exbasic.asm):04801                 DEC     $02,X                             ; DECREMENT ZERO CHECK BYTE
3E8D 2701             (      exbasic.asm):04802                 BEQ     L8AB9                             ; BRANCH IF MS BYTE <> 0
3E8F 4F               (      exbasic.asm):04803                 CLRA                                      ; CLEAR MS BYTE
3E90                  (      exbasic.asm):04804         L8AB9
3E90 E603             (      exbasic.asm):04805                 LDB     $03,X                             ; GET LS BYTE OF LINE NUMBER
3E92 6A04             (      exbasic.asm):04806                 DEC     $04,X                             ; DECREMENT ZERO CHECK FLAG
3E94 2701             (      exbasic.asm):04807                 BEQ     L8AC0                             ; BRANCH IF IS BYTE <> 0
3E96 5F               (      exbasic.asm):04808                 CLRB                                      ; CLEAR LS BYTE
3E97                  (      exbasic.asm):04809         L8AC0
3E97 ED01             (      exbasic.asm):04810                 STD     $01,X                             ; SAVE BINARY LINE NUMBER
3E99 DD2B             (      exbasic.asm):04811                 STD     BINVAL                            ; SAVE TRIAL LINE NUMBER
3E9B BD24B6           (      exbasic.asm):04812                 JSR     LAD01                             ; FIND RAM ADDRESS OF A BASIC LINE NUMBER
3E9E                  (      exbasic.asm):04813         L8AC7
3E9E 9E0F             (      exbasic.asm):04814                 LDX     TEMPTR                            ; GET BACK POINTER TO START OF PACKED LINE NUMBER
3EA0 25E1             (      exbasic.asm):04815                 BLO     L8AAC                             ; BRANCH IF NO LINE NUMBER MATCH FOUND
3EA2 DC47             (      exbasic.asm):04816                 LDD     V47                               ; GET START ADDRESS OF LINE NUMBER
3EA4 6C80             (      exbasic.asm):04817                 INC     ,X+                               ; * SET 1ST BYTE = 2, TO INDICATE LINE NUMBER EXISTS IF CHECKING FOR
                      (      exbasic.asm):04818         ;*              ; * EXISTENCE OF LINE NUMBER, SET IT = 1 IF INSERTING LINE NUMBERS
                      (      exbasic.asm):04819         
3EA6 ED84             (      exbasic.asm):04820                 STD     ,X                                ; SAVE RAM ADDRESS OF CORRECT LINE NUMBER
3EA8 20C6             (      exbasic.asm):04821                 BRA     L8A99                             ; GO GET ANOTHER CHARACTER
3EAA                  (      exbasic.asm):04822         L8AD3
3EAA 6F84             (      exbasic.asm):04823                 CLR     ,X                                ; CLEAR CARRY FLAG AND 1ST BYTE
3EAC AE01             (      exbasic.asm):04824                 LDX     $01,X                             ; POINT X TO RAM ADDRESS OF CORRECT LINE NUMBER
3EAE AE02             (      exbasic.asm):04825                 LDX     $02,X                             ; PUT CORRECT LINE NUMBER INTO (X)
3EB0 9F47             (      exbasic.asm):04826                 STX     V47                               ; SAVE IT TEMPORARILY
3EB2 20EA             (      exbasic.asm):04827                 BRA     L8AC7                             ; GO INSERT IT INTO BASIC LINE
3EB4                  (      exbasic.asm):04828         L8ADD
3EB4 9E19             (      exbasic.asm):04829                 LDX     TXTTAB                            ; GET BEGINNING OF BASIC PROGRAM
3EB6 2005             (      exbasic.asm):04830                 BRA     L8AE5
3EB8                  (      exbasic.asm):04831         L8AE1
3EB8 BE2014           (      exbasic.asm):04832                 LDX     CHARAD                            ; *GET CURRENT INPUT POINTER
3EBB 3001             (      exbasic.asm):04833                 LEAX    $01,X                             ; *AND BUMP IT ONE
3EBD                  (      exbasic.asm):04834         L8AE5
3EBD 8D9E             (      exbasic.asm):04835                 BSR     L8A86                             ; RETURN IF END OF PROGRAM
3EBF 3002             (      exbasic.asm):04836                 LEAX    $02,X                             ; SKIP PAST NEXT LINE ADDRESS
3EC1                  (      exbasic.asm):04837         L8AE9
3EC1 3001             (      exbasic.asm):04838                 LEAX    $01,X                             ; ADVANCE POINTER BY ONE
3EC3                  (      exbasic.asm):04839         L8AEB
3EC3 BF2014           (      exbasic.asm):04840                 STX     CHARAD                            ; SAVE NEW BASIC INPUT POINTER
3EC6                  (      exbasic.asm):04841         L8AED
3EC6 BD200B           (      exbasic.asm):04842                 JSR     GETNCH                            ; GET NEXT CHARACTER FROM BASIC
3EC9                  (      exbasic.asm):04843         L8AEF
3EC9 4D               (      exbasic.asm):04844                 TSTA                                      ; CHECK THE CHARACTER
3ECA 27EC             (      exbasic.asm):04845                 BEQ     L8AE1                             ; BRANCH IF END OF LINE
3ECC 2AF8             (      exbasic.asm):04846                 BPL     L8AED                             ; BRANCH IF NOT A TOKEN
3ECE BE2014           (      exbasic.asm):04847                 LDX     CHARAD                            ; GET CURRENT INPUT POINTER
3ED1 81FF             (      exbasic.asm):04848                 CMPA    #$FF                              ; IS THIS A SECONDARY TOKEN?
3ED3 27EC             (      exbasic.asm):04849                 BEQ     L8AE9                             ; YES - IGNORE IT
3ED5 81A5             (      exbasic.asm):04850                 CMPA    #TOK_THEN                         ; TOKEN FOR THEN?
3ED7 2713             (      exbasic.asm):04851                 BEQ     L8B13                             ; YES
3ED9 8184             (      exbasic.asm):04852                 CMPA    #TOK_ELSE                         ; TOKEN FOR ELSE?
3EDB 270F             (      exbasic.asm):04853                 BEQ     L8B13                             ; YES
3EDD 8181             (      exbasic.asm):04854                 CMPA    #TOK_GO                           ; TOKEN FOR GO?
3EDF 26E5             (      exbasic.asm):04855                 BNE     L8AED                             ; NO
3EE1 BD200B           (      exbasic.asm):04856                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
3EE4 81A3             (      exbasic.asm):04857                 CMPA    #TOK_TO                           ; TOKEN FOR TO?
3EE6 2704             (      exbasic.asm):04858                 BEQ     L8B13                             ; YES
3EE8 81A4             (      exbasic.asm):04859                 CMPA    #TOK_SUB                          ; TOKEN FOR SUB?
3EEA 26D7             (      exbasic.asm):04860                 BNE     L8AEB                             ; NO
3EEC                  (      exbasic.asm):04861         L8B13
3EEC BD200B           (      exbasic.asm):04862                 JSR     GETNCH                            ; GET A CHARACTER FROM BASIC
3EEF 2505             (      exbasic.asm):04863                 BLO     L8B1B                             ; BRANCH IF NUMERIC
3EF1                  (      exbasic.asm):04864         L8B17
3EF1 BD2013           (      exbasic.asm):04865                 JSR     GETCCH                            ; GET CURRENT BASIC INPUT CHARRACTER
3EF4 20D3             (      exbasic.asm):04866                 BRA     L8AEF                             ; KEEP CHECKING THE LINE
3EF6                  (      exbasic.asm):04867         L8B1B
3EF6 BE2014           (      exbasic.asm):04868                 LDX     CHARAD                            ; GET CURRENT INPUT ADDRESS
3EF9 3410             (      exbasic.asm):04869                 PSHS    X                                 ; SAVE IT ON THE STACK
3EFB BD2742           (      exbasic.asm):04870                 JSR     LAF67                             ; CONVERT DECIMAL BASIC NUMBER TO BINARY
3EFE BE2014           (      exbasic.asm):04871                 LDX     CHARAD                            ; GET CURRENT INPUT POINTER
3F01                  (      exbasic.asm):04872         L8B24
3F01 A682             (      exbasic.asm):04873                 LDA     ,-X                               ; GET PREVIOUS INPUT CHARACTER
3F03 BD426F           (      exbasic.asm):04874                 JSR     L90AA                             ; CLEAR CARRY IF NUMERIC INPUT VALUE
3F06 25F9             (      exbasic.asm):04875                 BLO     L8B24                             ; BRANCH IF NON-NUMERIC
3F08 3001             (      exbasic.asm):04876                 LEAX    $01,X                             ; MOVE POINTER UP ONE
3F0A 1F10             (      exbasic.asm):04877                 TFR     X,D                               ; NOW ACCD POINTS TO ONE PAST END OF LINE NUMBER
3F0C E061             (      exbasic.asm):04878                 SUBB    $01,S                             ; SUBTRACT PRE-NUMERIC POINTER LS BYTE
3F0E C005             (      exbasic.asm):04879                 SUBB    #$05                              ; MAKE SURE THERE ARE AT LEAST 5 CHARACTERS IN THE NUMERIC LINE
                      (      exbasic.asm):04880         ;*
3F10 2721             (      exbasic.asm):04881                 BEQ     L8B55                             ; BRANCH IF EXACTLY 5
3F12 250A             (      exbasic.asm):04882                 BLO     L8B41                             ; BRANCH IF < 5
3F14 3384             (      exbasic.asm):04883                 LEAU    ,X                                ; TRANSFER X TO U
3F16 50               (      exbasic.asm):04884                 NEGB                                      ; NEGATE B
3F17 3085             (      exbasic.asm):04885                 LEAX    B,X                               ; MOVE X BACK B BYTES
3F19 BD3D9A           (      exbasic.asm):04886                 JSR     L89B8                             ; *MOVE BYTES FROM (U) TO (X) UNTIL
                      (      exbasic.asm):04887         ;*         *U   = END OF BASIC; (I) = NEW END OF BASIC
3F1C 2015             (      exbasic.asm):04888                 BRA     L8B55
                      (      exbasic.asm):04889         ;* FORCE FIVE BYTES OF SPACE FOR THE LINE NUMBER
3F1E                  (      exbasic.asm):04890         L8B41
3F1E 9F47             (      exbasic.asm):04891                 STX     V47                               ; SAVE END OF NUMERIC VALUE
3F20 9E1B             (      exbasic.asm):04892                 LDX     VARTAB                            ; GET END OF BASIC PROGRAM
3F22 9F43             (      exbasic.asm):04893                 STX     V43                               ; SAVE IT
3F24 50               (      exbasic.asm):04894                 NEGB                                      ; NEGATE B
3F25 3085             (      exbasic.asm):04895                 LEAX    B,X                               ; ADD IT TO END OF NUMERIC POiNTER
3F27 9F41             (      exbasic.asm):04896                 STX     V41                               ; SAVE POINTER
3F29 9F1B             (      exbasic.asm):04897                 STX     VARTAB                            ; STORE END OF BASIC PROGRAM
3F2B BD23EB           (      exbasic.asm):04898                 JSR     LAC1E                             ; ACCD = TOP OF ARRAYS - CHECK FOR ENOUGH ROOM
3F2E 9E45             (      exbasic.asm):04899                 LDX     V45                               ; * GET AND SAVE THE
3F30 BF2014           (      exbasic.asm):04900                 STX     CHARAD                            ; * NEW CURRENT INPUT POINTER
3F33                  (      exbasic.asm):04901         L8B55
3F33 3510             (      exbasic.asm):04902                 PULS    X                                 ; RESTORE POINTER TO START OF NUMERIC VALUE
3F35 8601             (      exbasic.asm):04903                 LDA     #$01                              ; NEW LINE NUMBER FLAG
3F37 A784             (      exbasic.asm):04904                 STA     ,X                                ; * SAVE NEW LINE FLAG
3F39 A702             (      exbasic.asm):04905                 STA     $02,X                             ; *
3F3B A704             (      exbasic.asm):04906                 STA     $04,X                             ; *
3F3D D62B             (      exbasic.asm):04907                 LDB     BINVAL                            ; GET MS BYTE OF BINARY LINE NUMBER
3F3F 2604             (      exbasic.asm):04908                 BNE     L8B67                             ; BRANCH IF IT IS NOT ZERO
3F41 C601             (      exbasic.asm):04909                 LDB     #$01                              ; ; SAVE A 1 IF BYTE IS 0; OTHERWISE, BASIC WILL
                      (      exbasic.asm):04910         ;*              ; THINK IT IS THE END OF A LINE
3F43 6C02             (      exbasic.asm):04911                 INC     $02,X                             ; IF 2,X = 2, THEN PREVIOUS BYTE WAS A ZERO
3F45                  (      exbasic.asm):04912         L8B67
3F45 E701             (      exbasic.asm):04913                 STB     $01,X                             ; SAVE MS BYTE OF BINARY LINE NUMBER
3F47 D62C             (      exbasic.asm):04914                 LDB     BINVAL+1                          ; GET IS BYTE OF BINARY LINE NUMBER
3F49 2604             (      exbasic.asm):04915                 BNE     L8B71                             ; BRANCH IF NOT A ZERO BYTE
3F4B C601             (      exbasic.asm):04916                 LDB     #$01                              ; SAVE A 1 IF BYTE IS A 0
3F4D 6C04             (      exbasic.asm):04917                 INC     $04,X                             ; IF 4,X = 2, THEN PREVIOUS BYTE WAS A 0
3F4F                  (      exbasic.asm):04918         L8B71
3F4F E703             (      exbasic.asm):04919                 STB     $03,X                             ; SAVE LS BYTE OF BINARY LINE NUMBER
3F51 BD2013           (      exbasic.asm):04920                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
3F54 812C             (      exbasic.asm):04921                 CMPA    #','                              ; IS IT A COMMA?
3F56 2794             (      exbasic.asm):04922                 BEQ     L8B13                             ; YES - PROCESS ANOTHER NUMERIC VALUE
3F58 2097             (      exbasic.asm):04923                 BRA     L8B17                             ; NO - GO GET AND PROCESS AN INPUT CHARACTER
3F5A                  (      exbasic.asm):04924         L8B7B
3F5A 9E19             (      exbasic.asm):04925                 LDX     TXTTAB                            ; POINT X TO START OF BASIC PROGRAM
3F5C 301F             (      exbasic.asm):04926                 LEAX    -1,X                              ; MOVE POINTER BACK ONE
3F5E                  (      exbasic.asm):04927         L8B7F
3F5E 3001             (      exbasic.asm):04928                 LEAX    $01,X                             ; MOVE POINTER UP ONE
3F60 EC02             (      exbasic.asm):04929                 LDD     $02,X                             ; GET ADDRESS OF NEXT LINE
3F62 DD68             (      exbasic.asm):04930                 STD     CURLIN                            ; SAVE IT IN CURLIN
3F64 BD3E5D           (      exbasic.asm):04931                 JSR     L8A86                             ; RETURN IF END OF PROGRAM
3F67 3003             (      exbasic.asm):04932                 LEAX    $03,X                             ; SKIP OVER ADDRESS OF NEXT LINE AND 1ST BYTE OF LINE NUMBER
3F69                  (      exbasic.asm):04933         L8B8A
3F69 3001             (      exbasic.asm):04934                 LEAX    $01,X                             ; MOVE POINTER UP ONE
3F6B                  (      exbasic.asm):04935         L8B8C
3F6B A684             (      exbasic.asm):04936                 LDA     ,X                                ; GET CURRENT CHARACTER
3F6D 27EF             (      exbasic.asm):04937                 BEQ     L8B7F                             ; BRANCH IF END OF LINE
3F6F 4A               (      exbasic.asm):04938                 DECA                                      ; INPUT CHARACTER = 1? - VALID LINE NUMBER
3F70 271B             (      exbasic.asm):04939                 BEQ     L8BAE                             ; YES
3F72 8002             (      exbasic.asm):04940                 SUBA    #$02                              ; INPUT CHARACTER 3? - UL LINE NUMBER
3F74 26F3             (      exbasic.asm):04941                 BNE     L8B8A                             ; NO
3F76 3410             (      exbasic.asm):04942                 PSHS    X                                 ; SAVE CURRENT POSITION OF INPUT POINTER
3F78 8E3FB7           (      exbasic.asm):04943                 LDX     #L8BD9-1                          ; POINT X TO 'UL' MESSAGE
3F7B BD3140           (      exbasic.asm):04944                 JSR     LB99C                             ; PRINT STRING TO THE SCREEN
3F7E AEE4             (      exbasic.asm):04945                 LDX     ,S                                ; GET INPUT POINTER
3F80 EC01             (      exbasic.asm):04946                 LDD     $01,X                             ; GET THE UNDEFINED LINE NUMBER
3F82 BD3573           (      exbasic.asm):04947                 JSR     LBDCC                             ; CONVERT NUMBER IN ACCD TO DECIMAL AND DISPLAY IT
3F85 BD356C           (      exbasic.asm):04948                 JSR     LBDC5                             ; PRINT 'IN XXXX' XXXX = CURRENT LINE NUMBER
3F88 BD30FF           (      exbasic.asm):04949                 JSR     LB958                             ; SEND A CR TO CONSOLE OUT
3F8B 3510             (      exbasic.asm):04950                 PULS    X                                 ; GET INPUT POINTER BACK
3F8D                  (      exbasic.asm):04951         L8BAE
3F8D 3410             (      exbasic.asm):04952                 PSHS    X                                 ; SAVE CURRENT POSITION OF INPUT POINTER
3F8F EC01             (      exbasic.asm):04953                 LDD     $01,X                             ; LOAD ACCD WITH BINARY VALUE OF LINE NUMBER
3F91 DD52             (      exbasic.asm):04954                 STD     FPA0+2                            ; SAVE IN BOTTOM 2 BYTES OF FPA0
3F93 BD3C24           (      exbasic.asm):04955                 JSR     L880E                             ; ADJUST REST OF FPA0 AS AN INTEGER
3F96 BD3580           (      exbasic.asm):04956                 JSR     LBDD9                             ; CONVERT FPA0 TO ASCII, STORE IN LINE NUMBER
3F99 3540             (      exbasic.asm):04957                 PULS    U                                 ; LOAD U WITH PREVIOUS ADDRESS OF INPUT POINTER
3F9B C605             (      exbasic.asm):04958                 LDB     #$05                              ; EACH EXPANDED LINE NUMBER USES 5 BYTES
3F9D                  (      exbasic.asm):04959         L8BBE
3F9D 3001             (      exbasic.asm):04960                 LEAX    $01,X                             ; MOVE POINTER FORWARD ONE
3F9F A684             (      exbasic.asm):04961                 LDA     ,X                                ; GET AN ASCII BYTE
3FA1 2705             (      exbasic.asm):04962                 BEQ     L8BC9                             ; BRANCH IF END OF NUMBER
3FA3 5A               (      exbasic.asm):04963                 DECB                                      ; DECREMENT BYTE COUNTER
3FA4 A7C0             (      exbasic.asm):04964                 STA     ,U+                               ; STORE ASCII NUMBER IN BASIC LINE
3FA6 20F5             (      exbasic.asm):04965                 BRA     L8BBE                             ; CHECK FOR ANOTHER DIGIT
3FA8                  (      exbasic.asm):04966         L8BC9
3FA8 30C4             (      exbasic.asm):04967                 LEAX    ,U                                ; TRANSFER NEW LINE POINTER TO (X)
3FAA 5D               (      exbasic.asm):04968                 TSTB                                      ; DOES THE NEW LINE NUMBER REQUIRE 5 BYTES?
3FAB 27BE             (      exbasic.asm):04969                 BEQ     L8B8C                             ; YES - GO GET ANOTHER INPUT CHARACTER
3FAD 31C4             (      exbasic.asm):04970                 LEAY    ,U                                ; SAVE NEW LINE POINTER IN Y
3FAF 33C5             (      exbasic.asm):04971                 LEAU    B,U                               ; POINT U TO END OF 5 BYTE PACKED LINE NUMBER BLOCK
3FB1 BD3D9A           (      exbasic.asm):04972                 JSR     L89B8                             ; MOVE BYTES FROM (U) TO (X) UNTIL END OF PROGRAM
3FB4 30A4             (      exbasic.asm):04973                 LEAX    ,Y                                ; LOAD (X) WITH NEW LINE POINTER
3FB6 20B3             (      exbasic.asm):04974                 BRA     L8B8C                             ; GO GET ANOTHER INPUT CHARACTER
                      (      exbasic.asm):04975         ;
3FB8                  (      exbasic.asm):04976         L8BD9
3FB8 554C20           (      exbasic.asm):04977                 FCC     "UL "                             ; UNKNOWN LINE NUMBER MESSAGE
3FBB 00               (      exbasic.asm):04978                 FCB     0
                      (      exbasic.asm):04979         ;
                      (      exbasic.asm):04980         ;
3FBC                  (      exbasic.asm):04981         HEXDOL
3FBC BD2F18           (      exbasic.asm):04982                 JSR     LB740                             ; CONVERT FPA0 INTO A POSITIVE 2 BYTE INTEGER
3FBF 8EDBD4           (      exbasic.asm):04983                 LDX     #STRBUF+2                         ; POINT TO TEMPORARY BUFFER
3FC2 C604             (      exbasic.asm):04984                 LDB     #$04                              ; CONVERT 4 NIBBLES
3FC4                  (      exbasic.asm):04985         L8BE5
3FC4 3404             (      exbasic.asm):04986                 PSHS    B                                 ; SAVE NIBBLE COUNTER
3FC6 5F               (      exbasic.asm):04987                 CLRB                                      ; CLEAR CARRY FLAG
3FC7 8604             (      exbasic.asm):04988                 LDA     #$04                              ; 4 SHIFTS
3FC9                  (      exbasic.asm):04989         L8BEA
3FC9 0853             (      exbasic.asm):04990                 ASL     FPA0+3                            ; * SHIFT BOTTOM TWO BYTES OF
3FCB 0952             (      exbasic.asm):04991                 ROL     FPA0+2                            ; * FPA0 LEFT ONE BIT (X2)
3FCD 59               (      exbasic.asm):04992                 ROLB                                      ; IF OVERFLOW, ACCB <> 0
3FCE 4A               (      exbasic.asm):04993                 DECA                                      ; * DECREMENT SHIFT COUNTER AND
3FCF 26F8             (      exbasic.asm):04994                 BNE     L8BEA                             ; * BRANCH IF NOT DONE
3FD1 5D               (      exbasic.asm):04995                 TSTB                                      ; CHECK FOR OVERFLOW
3FD2 260A             (      exbasic.asm):04996                 BNE     L8BFF                             ; BRANCH IF OVERFLOW
3FD4 A6E4             (      exbasic.asm):04997                 LDA     ,S                                ; * GET NIBBLE COUNTER,
3FD6 4A               (      exbasic.asm):04998                 DECA                                      ; * DECREMENT IT AND
3FD7 2705             (      exbasic.asm):04999                 BEQ     L8BFF                             ; * BRANCH IF DONE
3FD9 8CDBD4           (      exbasic.asm):05000                 CMPX    #STRBUF+2                         ; DO NOT DO A CONVERSION UNTIL A NON-ZERO
3FDC 270C             (      exbasic.asm):05001                 BEQ     L8C0B                             ; BYTE IS FOUND - LEADING ZERO SUPPRESSION
3FDE                  (      exbasic.asm):05002         L8BFF
3FDE CB30             (      exbasic.asm):05003                 ADDB    #'0'                              ; ADD IN ASCII ZERO
3FE0 C139             (      exbasic.asm):05004                 CMPB    #'9'                              ; COMPARE TO ASCII 9
3FE2 2302             (      exbasic.asm):05005                 BLS     L8C07                             ; BRANCH IF < 9
3FE4 CB07             (      exbasic.asm):05006                 ADDB    #7                                ; ADD ASCII OFFSET IF HEX LETTER
3FE6                  (      exbasic.asm):05007         L8C07
3FE6 E780             (      exbasic.asm):05008                 STB     ,X+                               ; STORE HEX VALUE AND ADVANCE POINTER
3FE8 6F84             (      exbasic.asm):05009                 CLR     ,X                                ; CLEAR NEXT BYTE - END OF STRING FLAG
3FEA                  (      exbasic.asm):05010         L8C0B
3FEA 3504             (      exbasic.asm):05011                 PULS    B                                 ; * GET NIBBLE COUNTER,
3FEC 5A               (      exbasic.asm):05012                 DECB                                      ; * DECREMENT IT AND
3FED 26D5             (      exbasic.asm):05013                 BNE     L8BE5                             ; * BRANCH IF NOT DONE
3FEF 3262             (      exbasic.asm):05014                 LEAS    $02,S                             ; PURGE RETURN ADDRESS OFF OF STACK
3FF1 8EDBD3           (      exbasic.asm):05015                 LDX     #STRBUF+1                         ; RESET POINTER
3FF4 7E2CE9           (      exbasic.asm):05016                 JMP     LB518                             ; SAVE STRING ON STRING STACK
                      (      exbasic.asm):05017         ;* PROCESS EXCLAMATION POINT
3FF7                  (      exbasic.asm):05018         L8E37
3FF7 8601             (      exbasic.asm):05019                 LDA     #$01                              ; * SET SPACES
3FF9 978D             (      exbasic.asm):05020                 STA     VD9                               ; * COUNTER = 1
                      (      exbasic.asm):05021         ;* PROCESS STRING ITEM - LIST
3FFB                  (      exbasic.asm):05022         L8E3B
3FFB 5A               (      exbasic.asm):05023                 DECB                                      ; DECREMENT FORMAT STRING LENGTH COUNTER
3FFC BD419D           (      exbasic.asm):05024                 JSR     L8FD8                             ; SEND A '+' TO CONSOLE OUT IF VDA <>0
3FFF BD2013           (      exbasic.asm):05025                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
4002 10270094         (      exbasic.asm):05026                 LBEQ    L8ED8                             ; EXIT PRINT USING IF END OF LINE
4006 D787             (      exbasic.asm):05027                 STB     VD3                               ; SAVE REMAINDER FORMAT STRING LENGTH
4008 BD291B           (      exbasic.asm):05028                 JSR     LB156                             ; EVALUATE EXPRESSION
400B BD290B           (      exbasic.asm):05029                 JSR     LB146                             ; 'TM' ERROR IF NUMERIC VARIABLE
400E 9E52             (      exbasic.asm):05030                 LDX     FPA0+2                            ; * GET ITEM - LIST DESCRIPTOR ADDRESS
4010 9F4D             (      exbasic.asm):05031                 STX     V4D                               ; * AND SAVE IT IN V4D
4012 D68D             (      exbasic.asm):05032                 LDB     VD9                               ; GET SPACES COUNTER
4014 BD2E7E           (      exbasic.asm):05033                 JSR     LB6AD                             ; PUT ACCB BYTES INTO STRING SPACE & PUT DESCRIPTOR ON STRING STACK
4017 BD3143           (      exbasic.asm):05034                 JSR     LB99F                             ; PRINT THE FORMATTED STRING TO CONSOLE OUT
                      (      exbasic.asm):05035         ;* PAD FORMAT STRING WITH SPACES IF ITEM - LIST STRING < FORMAT STRING LENGTH
401A 9E52             (      exbasic.asm):05036                 LDX     FPA0+2                            ; POINT X TO FORMATTED STRING DESCRIPTOR ADDRESS
401C D68D             (      exbasic.asm):05037                 LDB     VD9                               ; GET SPACES COUNTER
401E E084             (      exbasic.asm):05038                 SUBB    ,X                                ; SUBTRACT LENGTH OF FORMATTED STRING
4020                  (      exbasic.asm):05039         L8E5F
4020 5A               (      exbasic.asm):05040                 DECB                                      ; DECREMENT DIFFERENCE
4021 102B0151         (      exbasic.asm):05041                 LBMI    L8FB3                             ; GO INTERPRET ANOTHER ITEM - LIST
4025 BD3150           (      exbasic.asm):05042                 JSR     LB9AC                             ; PAD FORMAT STRING WITH A SPACE
4028 20F6             (      exbasic.asm):05043                 BRA     L8E5F                             ; KEEP PADDING
                      (      exbasic.asm):05044         ;* PERCENT SIGN - PROCESS A %SPACES% COMMAND
402A                  (      exbasic.asm):05045         L8E69
402A D787             (      exbasic.asm):05046                 STB     VD3                               ; * SAVE THE CURRENT FORMAT STRING
402C 9F0F             (      exbasic.asm):05047                 STX     TEMPTR                            ; * COUNTER AND POINTER
402E 8602             (      exbasic.asm):05048                 LDA     #$02                              ; INITIAL SPACES COUNTER = 2
4030 978D             (      exbasic.asm):05049                 STA     VD9                               ; SAVE IN SPACES COUNTER
4032                  (      exbasic.asm):05050         L8E71
4032 A684             (      exbasic.asm):05051                 LDA     ,X                                ; GET A CHARACTER FROM FORMAT STRING
4034 8125             (      exbasic.asm):05052                 CMPA    #'%'                              ; COMPARE TO TERMINATOR CHARACTER
4036 27C3             (      exbasic.asm):05053                 BEQ     L8E3B                             ; BRANCH IF END OF SPACES COMMAND
4038 8120             (      exbasic.asm):05054                 CMPA    #' '                              ; BLANK
403A 2607             (      exbasic.asm):05055                 BNE     L8E82                             ; BRANCH IF ILLEGAL CHARACTER
403C 0C8D             (      exbasic.asm):05056                 INC     VD9                               ; ADD ONE TO SPACES COUNTER
403E 3001             (      exbasic.asm):05057                 LEAX    $01,X                             ; MOVE FORMAT POINTER UP ONE
4040 5A               (      exbasic.asm):05058                 DECB                                      ; DECREMENT LENGTH COUNTER
4041 26EF             (      exbasic.asm):05059                 BNE     L8E71                             ; BRANCH IF NOT END OF FORMAT STRING
4043                  (      exbasic.asm):05060         L8E82
4043 9E0F             (      exbasic.asm):05061                 LDX     TEMPTR                            ; * RESTORE CURRENT FORMAT STRING COUNTER
4045 D687             (      exbasic.asm):05062                 LDB     VD3                               ; * AND POINTER TO POSITION BEFORE SPACES COMMAND
4047 8625             (      exbasic.asm):05063                 LDA     #'%'                              ; SEND A '%' TO CONSOLE OUT AS A DEBUGGING AID
                      (      exbasic.asm):05064         ;* ERROR PROCESSOR - ILLEGAL CHARACTER OR BAD SYNTAX IN FORMAT STRING
4049                  (      exbasic.asm):05065         L8E88
4049 BD419D           (      exbasic.asm):05066                 JSR     L8FD8                             ; SEND A '+' TO CONSOLE OUT IF VDA <> 0
404C BD2027           (      exbasic.asm):05067                 JSR     PUTCHR                            ; SEND CHARACTER TO CONSOLE OUT
404F 2029             (      exbasic.asm):05068                 BRA     L8EB9                             ; GET NEXT CHARACTER IN FORMAT STRING
                      (      exbasic.asm):05069         ;
                      (      exbasic.asm):05070         ;* PRINT RAM HOOK
4051                  (      exbasic.asm):05071         XVEC9
4051 81B4             (      exbasic.asm):05072                 CMPA    #TOK_USING                        ; USING TOKEN
4053 2701             (      exbasic.asm):05073                 BEQ     L8E95                             ; BRANCH IF PRINT USING
4055 39               (      exbasic.asm):05074                 RTS
                      (      exbasic.asm):05075         ;* PRINT USING
                      (      exbasic.asm):05076         ;* VDA IS USED AS A STATUS BYTE: BIT 6 = COMMA FORCE
                      (      exbasic.asm):05077         ;* BIT 5=LEADING ASTERISK FORCE; BIT 4 = FLOATING $ FORCE
                      (      exbasic.asm):05078         ;* BIT 3 = PRE SIGN FORCE; BIT 2 = POST SIGN FORCE; BIT 0 = EXPONENTIAL FORCE
4056                  (      exbasic.asm):05079         L8E95
4056 3262             (      exbasic.asm):05080                 LEAS    $02,S                             ; PURGE RETURN ADDRESS OFF THE STACK
4058 BD291D           (      exbasic.asm):05081                 JSR     LB158                             ; EVALUATE FORMAT STRING
405B BD290B           (      exbasic.asm):05082                 JSR     LB146                             ; 'TM' ERROR IF VARIABLE TYPE = NUMERIC
405E C63B             (      exbasic.asm):05083                 LDB     #';'                              ; CHECK FOR ITEM LIST SEPARATOR
4060 BD2A3A           (      exbasic.asm):05084                 JSR     LB26F                             ; SYNTAX CHECK FOR ;
4063 9E52             (      exbasic.asm):05085                 LDX     FPA0+2                            ; * GET FORMAT STRING DESCRIPTOR ADDRESS
4065 9F89             (      exbasic.asm):05086                 STX     VD5                               ; * AND SAVE IT IN VD5
4067 2006             (      exbasic.asm):05087                 BRA     L8EAE                             ; GO PROCESS FORMAT STRING
4069                  (      exbasic.asm):05088         L8EA8
4069 968B             (      exbasic.asm):05089                 LDA     VD7                               ; *CHECK NEXT PRINT ITEM FLAG AND
406B 2708             (      exbasic.asm):05090                 BEQ     L8EB4                             ; *'FC' ERROR IF NO FURTHER PRINT ITEMS
406D 9E89             (      exbasic.asm):05091                 LDX     VD5                               ; RESET FORMAT STRING POINTER TO START OF STRING
406F                  (      exbasic.asm):05092         L8EAE
406F 0F8B             (      exbasic.asm):05093                 CLR     VD7                               ; RESET NEXT PRINT ITEM FLAG
4071 E684             (      exbasic.asm):05094                 LDB     ,X                                ; GET LENGTH OF FORMAT STRING
4073 2603             (      exbasic.asm):05095                 BNE     L8EB7                             ; INTERPRET FORMAT STRING IF LENGTH > 0
4075                  (      exbasic.asm):05096         L8EB4
4075 7E2C1B           (      exbasic.asm):05097                 JMP     LB44A                             ; 'FC' ERROR IF FORMAT STRING = NULL
4078                  (      exbasic.asm):05098         L8EB7
4078 AE02             (      exbasic.asm):05099                 LDX     $02,X                             ; POINT X TO START OF FORMAT STRING
                      (      exbasic.asm):05100         ;* INTERPRET THE FORMAT STRING
407A                  (      exbasic.asm):05101         L8EB9
407A 0F8E             (      exbasic.asm):05102                 CLR     VDA                               ; CLEAR THE STATUS BYTE
407C                  (      exbasic.asm):05103         L8EBB
407C 0F8D             (      exbasic.asm):05104                 CLR     VD9                               ; CLEAR LEFT DIGIT COUNTER
407E A680             (      exbasic.asm):05105                 LDA     ,X+                               ; GET A CHARACTER FROM FORMAT STRING
4080 8121             (      exbasic.asm):05106                 CMPA    #'!'                              ; EXCLAMATION POINT?
4082 1027FF71         (      exbasic.asm):05107                 LBEQ    L8E37                             ; YES - STRING TYPE FORMAT
4086 8123             (      exbasic.asm):05108                 CMPA    #'#'                              ; NUMBER SIGN? (DIGIT LOCATOR)
4088 275C             (      exbasic.asm):05109                 BEQ     L8F24                             ; YES - NUMERIC TYPE FORMAT
408A 5A               (      exbasic.asm):05110                 DECB                                      ; DECREMENT FORMAT STRING LENGTH
408B 2617             (      exbasic.asm):05111                 BNE     L8EE2                             ; BRANCH IF NOT DONE
408D BD419D           (      exbasic.asm):05112                 JSR     L8FD8                             ; SEND A '+' TO CONSOLE OUT IF VDA <> 0
4090 BD2027           (      exbasic.asm):05113                 JSR     PUTCHR                            ; SEND CHARACTER TO CONSOLE OUT
4093                  (      exbasic.asm):05114         L8ED2
4093 BD2013           (      exbasic.asm):05115                 JSR     GETCCH                            ; GET CURRENT CHARACTER FROM BASIC
4096 26D1             (      exbasic.asm):05116                 BNE     L8EA8                             ; BRANCH IF NOT END OF LINE
4098 968B             (      exbasic.asm):05117                 LDA     VD7                               ; GET NEXT PRINT ITEM FLAG
409A                  (      exbasic.asm):05118         L8ED8
409A 2603             (      exbasic.asm):05119                 BNE     L8EDD                             ; BRANCH IF MORE PRINT ITEMS
409C BD30FF           (      exbasic.asm):05120                 JSR     LB958                             ; SEND A CARRIAGE RETURN TO CONSOLE OUT
409F                  (      exbasic.asm):05121         L8EDD
409F 9E89             (      exbasic.asm):05122                 LDX     VD5                               ; POINT X TO FORMAT STRING DESCRIPTOR
40A1 7E2E2A           (      exbasic.asm):05123                 JMP     LB659                             ; RETURN ADDRESS AND LENGTH OF FORMAT STRING - EXIT PRINT USING
40A4                  (      exbasic.asm):05124         L8EE2
40A4 812B             (      exbasic.asm):05125                 CMPA    #'+'                              ; CHECK FOR '+' (PRE-SIGN FORCE)
40A6 2609             (      exbasic.asm):05126                 BNE     L8EEF                             ; NO PLUS
40A8 BD419D           (      exbasic.asm):05127                 JSR     L8FD8                             ; SEND A '+' TO CONSOLE OUT IF VDA <> 0
40AB 8608             (      exbasic.asm):05128                 LDA     #$08                              ; * LOAD THE STATUS BYTE WITH 8;
40AD 978E             (      exbasic.asm):05129                 STA     VDA                               ; * PRE-SIGN FORCE FLAG
40AF 20CB             (      exbasic.asm):05130                 BRA     L8EBB                             ; INTERPRET THE REST OF THE FORMAT STRING
40B1                  (      exbasic.asm):05131         L8EEF
40B1 812E             (      exbasic.asm):05132                 CMPA    #'.'                              ; DECIMAL POINT?
40B3 274E             (      exbasic.asm):05133                 BEQ     L8F41                             ; YES
40B5 8125             (      exbasic.asm):05134                 CMPA    #'%'                              ; PERCENT SIGN?
40B7 1027FF6F         (      exbasic.asm):05135                 LBEQ    L8E69                             ; YES
40BB A184             (      exbasic.asm):05136                 CMPA    ,X                                ; COMPARE THE PRESENT FORMAT STRING INPUT
                      (      exbasic.asm):05137         ;*              ; CHARACTER TO THE NEXT ONE IN THE STRING
40BD                  (      exbasic.asm):05138         L8EFB
40BD 268A             (      exbasic.asm):05139                 BNE     L8E88                             ; NO MATCH - ILLEGAL CHARACTER
                      (      exbasic.asm):05140         ;* TWO CONSECUTIVE EQUAL CHARACTERS IN FORMAT STRING
40BF 8124             (      exbasic.asm):05141                 CMPA    #'$'                              ; DOLLAR SIGN?
40C1 2719             (      exbasic.asm):05142                 BEQ     L8F1A                             ; YES - MAKE THE DOLLAR SIGN FLOAT
40C3 812A             (      exbasic.asm):05143                 CMPA    #'*'                              ; ASTERISK?
40C5 26F6             (      exbasic.asm):05144                 BNE     L8EFB                             ; NO - ILLEGAL CHARACTER
40C7 968E             (      exbasic.asm):05145                 LDA     VDA                               ; * GRAB THE STATUS BYTE AND BET BIT 5
40C9 8A20             (      exbasic.asm):05146                 ORA     #$20                              ; * TO INDICATE THAT THE OUTPUT WILL
40CB 978E             (      exbasic.asm):05147                 STA     VDA                               ; * BE LEFT PADDED WITH ASTERISKS
40CD C102             (      exbasic.asm):05148                 CMPB    #2                                ; * CHECK TO SEE IF THE $$ ARE THE LAST TWO
40CF 2511             (      exbasic.asm):05149                 BLO     L8F20                             ; * CHARACTERS IN THE FORMAT STRING AND BRANCH IF SO
40D1 A601             (      exbasic.asm):05150                 LDA     $01,X                             ; GET THE NEXT CHARACTER AFTER **
40D3 8124             (      exbasic.asm):05151                 CMPA    #'$'                              ; CHECK FOR **$
40D5 260B             (      exbasic.asm):05152                 BNE     L8F20                             ; CHECK FOR MORE CHARACTERS
40D7 5A               (      exbasic.asm):05153                 DECB                                      ; DECREMENT STRING LENGTH COUNTER
40D8 3001             (      exbasic.asm):05154                 LEAX    $01,X                             ; MOVE FORMAT STRING POINTER UP ONE
40DA 0C8D             (      exbasic.asm):05155                 INC     VD9                               ; ADD ONE TO LEFT DIGIT COUNTER - FOR ASTERISK PAD AND
                      (      exbasic.asm):05156         ;*              ; FLOATING DOLLAR SIGN COMBINATION
40DC                  (      exbasic.asm):05157         L8F1A
40DC 968E             (      exbasic.asm):05158                 LDA     VDA                               ; * GET THE STATUS BYTE AND SET
40DE 8A10             (      exbasic.asm):05159                 ORA     #$10                              ; * BIT 4 TO INDICATE A
40E0 978E             (      exbasic.asm):05160                 STA     VDA                               ; * FLOATING DOLLAR SIGN
40E2                  (      exbasic.asm):05161         L8F20
40E2 3001             (      exbasic.asm):05162                 LEAX    $01,X                             ; MOVE FORMAT STRING POINTER UP ONE
40E4 0C8D             (      exbasic.asm):05163                 INC     VD9                               ; ADD ONE TO LEFT DIGIT (FLOATING $ OR ASTERISK PAD)
                      (      exbasic.asm):05164         ;* PROCESS CHARACTERS TO THE LEFT OF THE DECIMAL POINT IN THE FORMAT STRING
40E6                  (      exbasic.asm):05165         L8F24
40E6 0F8C             (      exbasic.asm):05166                 CLR     VD8                               ; CLEAR THE RIGHT DIGIT COUNTER
40E8                  (      exbasic.asm):05167         L8F26
40E8 0C8D             (      exbasic.asm):05168                 INC     VD9                               ; ADD ONE TO LEFT DIGIT COUNTER
40EA 5A               (      exbasic.asm):05169                 DECB                                      ; DECREMENT FORMAT STRING LENGTH COUNTER
40EB 2749             (      exbasic.asm):05170                 BEQ     L8F74                             ; BRANCH IF END OF FORMAT STRING
40ED A680             (      exbasic.asm):05171                 LDA     ,X+                               ; GET THE NEXT FORMAT CHARACTER
40EF 812E             (      exbasic.asm):05172                 CMPA    #'.'                              ; DECIMAL POINT?
40F1 271E             (      exbasic.asm):05173                 BEQ     L8F4F                             ; YES
40F3 8123             (      exbasic.asm):05174                 CMPA    #'#'                              ; NUMBER SIGN?
40F5 27F1             (      exbasic.asm):05175                 BEQ     L8F26                             ; YES
40F7 812C             (      exbasic.asm):05176                 CMPA    #','                              ; COMMA?
40F9 2621             (      exbasic.asm):05177                 BNE     L8F5A                             ; NO
40FB 968E             (      exbasic.asm):05178                 LDA     VDA                               ; * GET THE STATUS BYTE
40FD 8A40             (      exbasic.asm):05179                 ORA     #$40                              ; * AND SET BIT 6 WHICH IS THE
40FF 978E             (      exbasic.asm):05180                 STA     VDA                               ; * COMMA SEPARATOR FLAG
4101 20E5             (      exbasic.asm):05181                 BRA     L8F26                             ; PROCESS MORE CHARACTERS TO LEFT OF DECIMAL POINT
                      (      exbasic.asm):05182         ;* PROCESS DECIMAL POINT IF NO DIGITS TO LEFT OF IT
4103                  (      exbasic.asm):05183         L8F41
4103 A684             (      exbasic.asm):05184                 LDA     ,X                                ; GET NEXT FORMAT CHARACTER
4105 8123             (      exbasic.asm):05185                 CMPA    #'#'                              ; IS IT A NUMBER SIGN?
4107 1026FF3E         (      exbasic.asm):05186                 LBNE    L8E88                             ; NO
410B 8601             (      exbasic.asm):05187                 LDA     #1                                ; * SET THE RIGHT DIGIT COUNTER TO 1 -
410D 978C             (      exbasic.asm):05188                 STA     VD8                               ; * ALLOW ONE SPOT FOR DECIMAL POINT
410F 3001             (      exbasic.asm):05189                 LEAX    $01,X                             ; MOVE FORMAT POINTER UP ONE
                      (      exbasic.asm):05190         ;* PROCESS DIGITS TO RIGHT OF DECIMAL POINT
4111                  (      exbasic.asm):05191         L8F4F
4111 0C8C             (      exbasic.asm):05192                 INC     VD8                               ; ADD ONE TO RIGHT DIGIT COUNTER
4113 5A               (      exbasic.asm):05193                 DECB                                      ; DECREMENT FORMAT LENGTH COUNTER
4114 2720             (      exbasic.asm):05194                 BEQ     L8F74                             ; BRANCH IF END OF FORMAT STRING
4116 A680             (      exbasic.asm):05195                 LDA     ,X+                               ; GET A CHARACTER FROM FORMAT STRING
4118 8123             (      exbasic.asm):05196                 CMPA    #'#'                              ; IS IT NUMBER SIGN?
411A 27F5             (      exbasic.asm):05197                 BEQ     L8F4F                             ; YES - KEEP CHECKING
                      (      exbasic.asm):05198         ;* CHECK FOR EXPONENTIAL FORCE
411C                  (      exbasic.asm):05199         L8F5A
411C 815E             (      exbasic.asm):05200                 CMPA    #$5E                              ; CHECK FOR UP ARROW
411E 2616             (      exbasic.asm):05201                 BNE     L8F74                             ; NO UP ARROW
4120 A184             (      exbasic.asm):05202                 CMPA    ,X                                ; IS THE NEXT CHARACTER AN UP ARROW?
4122 2612             (      exbasic.asm):05203                 BNE     L8F74                             ; NO
4124 A101             (      exbasic.asm):05204                 CMPA    $01,X                             ; AND THE NEXT CHARACTER?
4126 260E             (      exbasic.asm):05205                 BNE     L8F74                             ; NO
4128 A102             (      exbasic.asm):05206                 CMPA    $02,X                             ; HOW ABOUT THE 4TH CHARACTER?
412A 260A             (      exbasic.asm):05207                 BNE     L8F74                             ; NO, ALSO
412C C104             (      exbasic.asm):05208                 CMPB    #4                                ; * CHECK TO SEE IF THE 4 UP ARROWS ARE IN THE
412E 2506             (      exbasic.asm):05209                 BLO     L8F74                             ; * FORMAT STRING AND BRANCH IF NOT
4130 C004             (      exbasic.asm):05210                 SUBB    #4                                ; * MOVE POINTER UP 4 AND SUBTRACT
4132 3004             (      exbasic.asm):05211                 LEAX    $04,X                             ; * FOUR FROM LENGTH
4134 0C8E             (      exbasic.asm):05212                 INC     VDA                               ; INCREMENT STATUS BYTE - EXPONENTIAL FORM
                      (      exbasic.asm):05213         ;
                      (      exbasic.asm):05214         ;* CHECK FOR A PRE OR POST - SIGN FORCE AT END OF FORMAT STRING
4136                  (      exbasic.asm):05215         L8F74
4136 301F             (      exbasic.asm):05216                 LEAX    -1,X                              ; MOVE POINTER BACK ONE
4138 0C8D             (      exbasic.asm):05217                 INC     VD9                               ; ADD ONE TO LEFT DIGIT COUNTER FOR PRE-SIGN FORCE
413A 968E             (      exbasic.asm):05218                 LDA     VDA                               ; * PRE-SIGN
413C 8508             (      exbasic.asm):05219                 BITA    #$08                              ; * FORCE AND
413E 2618             (      exbasic.asm):05220                 BNE     L8F96                             ; * BRANCH IF SET
4140 0A8D             (      exbasic.asm):05221                 DEC     VD9                               ; DECREMENT LEFT DIGIT - NO PRE-SIGN FORCE
4142 5D               (      exbasic.asm):05222                 TSTB                                      ; * CHECK LENGTH COUNTER AND BRANCH
4143 2713             (      exbasic.asm):05223                 BEQ     L8F96                             ; * IF END OF FORMAT STRING
4145 A684             (      exbasic.asm):05224                 LDA     ,X                                ; GET NEXT FORMAT STRING CHARACTER
4147 802D             (      exbasic.asm):05225                 SUBA    #'-'                              ; CHECK FOR MINUS SIGN
4149 2706             (      exbasic.asm):05226                 BEQ     L8F8F                             ; BRANCH IF MINUS SIGN
414B 81FE             (      exbasic.asm):05227                 CMPA    #$FE                              ; * WAS CMPA #('+')-('-')
414D 2609             (      exbasic.asm):05228                 BNE     L8F96                             ; BRANCH IF NO PLUS SIGN
414F 8608             (      exbasic.asm):05229                 LDA     #$08                              ; GET THE PRE-SIGN FORCE FLAG
4151                  (      exbasic.asm):05230         L8F8F
4151 8A04             (      exbasic.asm):05231                 ORA     #$04                              ; 'OR' IN POST-SIGN FORCE FLAG
4153 9A8E             (      exbasic.asm):05232                 ORA     VDA                               ; 'OR' IN THE STATUS BYTE
4155 978E             (      exbasic.asm):05233                 STA     VDA                               ; SAVE THE STATUS BYTE
4157 5A               (      exbasic.asm):05234                 DECB                                      ; DECREMENT FORMAT STRING LENGTH
                      (      exbasic.asm):05235         ;
                      (      exbasic.asm):05236         ;* EVALUATE NUMERIC ITEM-LIST
4158                  (      exbasic.asm):05237         L8F96
4158 BD2013           (      exbasic.asm):05238                 JSR     GETCCH                            ; GET CURRENT CHARACTER
415B 1027FF3B         (      exbasic.asm):05239                 LBEQ    L8ED8                             ; BRANCH IF END OF LINE
415F D787             (      exbasic.asm):05240                 STB     VD3                               ; SAVE FORMAT STRING LENGTH WHEN FORMAT EVALUATION ENDED
4161 BD2906           (      exbasic.asm):05241                 JSR     LB141                             ; EVALUATE EXPRESSION
4164 968D             (      exbasic.asm):05242                 LDA     VD9                               ; GET THE LEFT DIGIT COUNTER
4166 9B8C             (      exbasic.asm):05243                 ADDA    VD8                               ; ADD IT TO THE RIGHT DIGIT COUNTER
4168 8111             (      exbasic.asm):05244                 CMPA    #17                               ; *
416A 1022EAAD         (      exbasic.asm):05245                 LBHI    LB44A                             ; *'FC' ERROR IF MORE THAN 16 DIGITS AND DECIMAL POiNT
416E BD41AA           (      exbasic.asm):05246                 JSR     L8FE5                             ; CONVERT ITEM-LIST TO FORMATTED ASCII STRING
4171 301F             (      exbasic.asm):05247                 LEAX    -1,X                              ; MOVE BUFFER POINTER BACK ONE
4173 BD3140           (      exbasic.asm):05248                 JSR     LB99C                             ; DISPLAY THE FORMATTED STRING TO CONSOLE OUT
4176                  (      exbasic.asm):05249         L8FB3
4176 0F8B             (      exbasic.asm):05250                 CLR     VD7                               ; RESET NEXT PRINT ITEM FLAG
4178 BD2013           (      exbasic.asm):05251                 JSR     GETCCH                            ; GET CURRENT INPUT CHARACTER
417B 270E             (      exbasic.asm):05252                 BEQ     L8FC6                             ; BRANCH IF END OF LINE
417D 978B             (      exbasic.asm):05253                 STA     VD7                               ; SAVE CURRENT CHARACTER (<>0) IN NEXT PRINT ITEM FLAG
417F 813B             (      exbasic.asm):05254                 CMPA    #';'                              ; * CHECK FOR ; - ITEM-LIST SEPARATOR AND
4181 2705             (      exbasic.asm):05255                 BEQ     L8FC4                             ; * BRANCH IF SEMICOLON
4183 BD2A38           (      exbasic.asm):05256                 JSR     LB26D                             ; SYNTAX CHECK FOR COMMA
4186 2003             (      exbasic.asm):05257                 BRA     L8FC6                             ; PROCESS NEXT PRINT ITEM
4188                  (      exbasic.asm):05258         L8FC4
4188 BD200B           (      exbasic.asm):05259                 JSR     GETNCH                            ; GET NEXT INPUT CHARACTER
418B                  (      exbasic.asm):05260         L8FC6
418B 9E89             (      exbasic.asm):05261                 LDX     VD5                               ; GET FORMAT STRING DESCRIPTOR ADDRESS
418D E684             (      exbasic.asm):05262                 LDB     ,X                                ; GET LENGTH OF FORMAT STRING
418F D087             (      exbasic.asm):05263                 SUBB    VD3                               ; SUBTRACT AMOUNT OF FORMAT STRING LEFT AFTER LAST PRINT ITEM
4191 AE02             (      exbasic.asm):05264                 LDX     $02,X                             ; *GET FORMAT STRING START ADDRESS AND ADVANCE
4193 3A               (      exbasic.asm):05265                 ABX                                       ; *POINTER TO START OF UNUSED FORMAT STRING
4194 D687             (      exbasic.asm):05266                 LDB     VD3                               ; * GET AMOUNT OF UNUSED FORMAT STRING
4196 1026FEE0         (      exbasic.asm):05267                 LBNE    L8EB9                             ; * REINTERPRET FORMAT STRING FROM THAT POINT
419A 7E4093           (      exbasic.asm):05268                 JMP     L8ED2                             ; REINTERPRET FORMAT STRING FROM THE START IF ENTIRELY
                      (      exbasic.asm):05269         ;*         USED ON LAST PRINT ITEM
                      (      exbasic.asm):05270         ;
                      (      exbasic.asm):05271         ;* PRINT A '+' TO CONSOLE OUT IF THE STATUS BYTE <> 0
419D                  (      exbasic.asm):05272         L8FD8
419D 3402             (      exbasic.asm):05273                 PSHS    A                                 ; RESTORE ACCA AND RETURN
419F 862B             (      exbasic.asm):05274                 LDA     #'+'                              ; GET ASCII PLUS SIGN
41A1 0D8E             (      exbasic.asm):05275                 TST     VDA                               ; * CHECK THE STATUS BYTE AND
41A3 2703             (      exbasic.asm):05276                 BEQ     L8FE3                             ; * RETURN IF = 0
41A5 BD2027           (      exbasic.asm):05277                 JSR     PUTCHR                            ; SEND A CHARACTER TO CONSOLE OUT
41A8                  (      exbasic.asm):05278         L8FE3
41A8 3582             (      exbasic.asm):05279                 PULS    A,PC                              ; RETURN ACCA AND RETURN
                      (      exbasic.asm):05280         ;
                      (      exbasic.asm):05281         ;* CONVERT ITEM-LIST TO DECIMAL ASCII STRING
41AA                  (      exbasic.asm):05282         L8FE5
41AA CEDBD6           (      exbasic.asm):05283                 LDU     #STRBUF+4                         ; POINT U TO STRING BUFFER
41AD C620             (      exbasic.asm):05284                 LDB     #SPACE                            ; BLANK
41AF 968E             (      exbasic.asm):05285                 LDA     VDA                               ; * GET THE STATUS FLAG AND
41B1 8508             (      exbasic.asm):05286                 BITA    #$08                              ; * CHECK FOR A PRE-SIGN FORCE
41B3 2702             (      exbasic.asm):05287                 BEQ     L8FF2                             ; * BRANCH IF NO PRE-SIGN FORCE
41B5 C62B             (      exbasic.asm):05288                 LDB     #'+'                              ; PLUS SIGN
41B7                  (      exbasic.asm):05289         L8FF2
41B7 0D54             (      exbasic.asm):05290                 TST     FP0SGN                            ; CHECK THE SIGN OF FPA0
41B9 2A04             (      exbasic.asm):05291                 BPL     L8FFA                             ; BRANCH IF POSITIVE
41BB 0F54             (      exbasic.asm):05292                 CLR     FP0SGN                            ; FORCE FPA0 SIGN TO BE POSITIVE
41BD C62D             (      exbasic.asm):05293                 LDB     #'-'                              ; MINUS SIGN
41BF                  (      exbasic.asm):05294         L8FFA
41BF E7C0             (      exbasic.asm):05295                 STB     ,U+                               ; SAVE THE SIGN IN BUFFER
41C1 C630             (      exbasic.asm):05296                 LDB     #'0'                              ; * PUT A ZERO INTO THE BUFFER
41C3 E7C0             (      exbasic.asm):05297                 STB     ,U+                               ; *
41C5 8401             (      exbasic.asm):05298                 ANDA    #$01                              ; * CHECK THE EXPONENTIAL FORCE FLAG IN
41C7 10260107         (      exbasic.asm):05299                 LBNE    L910D                             ; * THE STATUS BYTE - BRANCH IF ACTIVE
41CB 8E3567           (      exbasic.asm):05300                 LDX     #LBDC0                            ; POINT X TO FLOATING POINT 1E + 09
41CE BD3444           (      exbasic.asm):05301                 JSR     LBCA0                             ; COMPARE FPA0 TO (X)
41D1 2B15             (      exbasic.asm):05302                 BMI     L9023                             ; BRANCH IF FPA0 < 1E+09
41D3 BD3580           (      exbasic.asm):05303                 JSR     LBDD9                             ; CONVERT FP NUMBER TO ASCII STRING
41D6                  (      exbasic.asm):05304         L9011
41D6 A680             (      exbasic.asm):05305                 LDA     ,X+                               ; * ADVANCE POINTER TO END OF
41D8 26FC             (      exbasic.asm):05306                 BNE     L9011                             ; * ASCII STRING (ZERO BYTE)
41DA                  (      exbasic.asm):05307         L9015
41DA A682             (      exbasic.asm):05308                 LDA     ,-X                               ; MOVE THE
41DC A701             (      exbasic.asm):05309                 STA     $01,X                             ; ENTIRE STRING
41DE 8CDBD5           (      exbasic.asm):05310                 CMPX    #STRBUF+3                         ; UP ONE
41E1 26F7             (      exbasic.asm):05311                 BNE     L9015                             ; BYTE
41E3 8625             (      exbasic.asm):05312                 LDA     #'%'                              ; * INSERT A % SIGN AT START OF
41E5 A784             (      exbasic.asm):05313                 STA     ,X                                ; * STRING - OVERFLOW ERROR
41E7 39               (      exbasic.asm):05314                 RTS
                      (      exbasic.asm):05315         ;
41E8                  (      exbasic.asm):05316         L9023
41E8 964F             (      exbasic.asm):05317                 LDA     FP0EXP                            ; GET EXPONENT OF FPA0
41EA 9747             (      exbasic.asm):05318                 STA     V47                               ; AND SAVE IT IN V74
41EC 2703             (      exbasic.asm):05319                 BEQ     L902C                             ; BRANCH IF FPA0 = 0
41EE BD4392           (      exbasic.asm):05320                 JSR     L91CD                             ; CONVERT FPA0 TO NUMBER WITH 9 SIGNIFICANT
                      (      exbasic.asm):05321         ;*              ; PLACES TO LEFT OF DECIMAL POINT
41F1                  (      exbasic.asm):05322         L902C
41F1 9647             (      exbasic.asm):05323                 LDA     V47                               ; GET BASE 10 EXPONENT OFFSET
41F3 102B0081         (      exbasic.asm):05324                 LBMI    L90B3                             ; BRANCH IF FPA0 < 100,000,000
41F7 40               (      exbasic.asm):05325                 NEGA                                      ; * CALCULATE THE NUMBER OF LEADING ZEROES TO INSERT -
41F8 9B8D             (      exbasic.asm):05326                 ADDA    VD9                               ; * SUBTRACT BASE 10 EXPONENT OFFSET AND 9 (FPA0 HAS
41FA 8009             (      exbasic.asm):05327                 SUBA    #$09                              ; * 9 PLACES TO LEFT OF EXPONENT) FROM LEFT DIGIT COUNTER
41FC BD42AF           (      exbasic.asm):05328                 JSR     L90EA                             ; PUT ACCA ZEROES IN STRING BUFFER
41FF BD4428           (      exbasic.asm):05329                 JSR     L9263                             ; INITIALIZE DECIMAL POINT AND COMMA COUNTERS
4202 BD43C7           (      exbasic.asm):05330                 JSR     L9202                             ; CONVERT FPA0 TO DECIMAL ASCII IN THE STRING BUFFER
4205 9647             (      exbasic.asm):05331                 LDA     V47                               ; * GET BASE 10 EXPONENT AND PUT THAT MANY
4207 BD4446           (      exbasic.asm):05332                 JSR     L9281                             ; * ZEROES IN STRING BUFFER - STOP AT DECIMAL POINT
420A 9647             (      exbasic.asm):05333                 LDA     V47                               ; WASTED INSTRUCTION - SERVES NO PURPOSE
420C BD440E           (      exbasic.asm):05334                 JSR     L9249                             ; CHECK FOR DECIMAL POINT
420F 968C             (      exbasic.asm):05335                 LDA     VD8                               ; GET THE RIGHT DIGIT COUNTER
4211 2602             (      exbasic.asm):05336                 BNE     L9050                             ; BRANCH IF RIGHT DIGlT COUNTER <> 0
4213 335F             (      exbasic.asm):05337                 LEAU    -1,U                              ; * MOVE BUFFER POINTER BACK ONE - DELETE
                      (      exbasic.asm):05338         ;*                             ; * DECIMAL POINT IF NO RIGHT DIGITS SPECiFIED
4215                  (      exbasic.asm):05339         L9050
4215 4A               (      exbasic.asm):05340                 DECA                                      ; SUBTRACT ONE (DECIMAL POINT)
4216 BD42AF           (      exbasic.asm):05341                 JSR     L90EA                             ; PUT ACCA ZEROES INTO BUFFER (TRAILING ZEROES)
4219                  (      exbasic.asm):05342         L9054
4219 BD434A           (      exbasic.asm):05343                 JSR     L9185                             ; INSERT ASTERISK PADDING, FLOATING $, AND POST-SIGN
421C 4D               (      exbasic.asm):05344                 TSTA                                      ; WAS THERE A POST-SIGN?
421D 2706             (      exbasic.asm):05345                 BEQ     L9060                             ; NO
421F C12A             (      exbasic.asm):05346                 CMPB    #'*'                              ; IS THE FIRST CHARACTER AN $?
4221 2702             (      exbasic.asm):05347                 BEQ     L9060                             ; YES
4223 E7C0             (      exbasic.asm):05348                 STB     ,U+                               ; STORE THE POST-SIGN
4225                  (      exbasic.asm):05349         L9060
4225 6FC4             (      exbasic.asm):05350                 CLR     ,U                                ; CLEAR THE LAST CHARACTER IN THE BUFFER
                      (      exbasic.asm):05351         ;*
                      (      exbasic.asm):05352         ;* REMOVE ANY EXTRA BLANKS OR ASTERISKS FROM THE
                      (      exbasic.asm):05353         ;* STRING BUFFER TO THE LEFT OF THE DECIMAL POINT
4227 8EDBD5           (      exbasic.asm):05354                 LDX     #STRBUF+3                         ; POINT X TO THE START OF THE BUFFER
422A                  (      exbasic.asm):05355         L9065
422A 3001             (      exbasic.asm):05356                 LEAX    $01,X                             ; MOVE BUFFER POINTER UP ONE
422C 9F0F             (      exbasic.asm):05357                 STX     TEMPTR                            ; SAVE BUFFER POINTER IN TEMPTR
422E 963A             (      exbasic.asm):05358                 LDA     VARPTR+1                          ; * GET ADDRESS OF DECIMAL POINT IN BUFFER, SUBTRACT
4230 9010             (      exbasic.asm):05359                 SUBA    TEMPTR+1                          ; * CURRENT POSITION AND SUBTRACT LEFT DIGIT COUNTER -
4232 908D             (      exbasic.asm):05360                 SUBA    VD9                               ; * THE RESULT WILL BE ZERO WHEN TEMPTR+1 IS POINTING
                      (      exbasic.asm):05361         ;*              ; * TO THE FIRST DIGIT OF THE FORMAT STRING
4234 2738             (      exbasic.asm):05362                 BEQ     L90A9                             ; RETURN IF NO DIGITS TO LEFT OF THE DECiMAL POINT
4236 A684             (      exbasic.asm):05363                 LDA     ,X                                ; GET THE CURRENT BUFFER CHARACTER
4238 8120             (      exbasic.asm):05364                 CMPA    #SPACE                            ; SPACE?
423A 27EE             (      exbasic.asm):05365                 BEQ     L9065                             ; YES - ADVANCE POINTER
423C 812A             (      exbasic.asm):05366                 CMPA    #'*'                              ; ASTERISK?
423E 27EA             (      exbasic.asm):05367                 BEQ     L9065                             ; YES - ADVANCE POINTER
4240 4F               (      exbasic.asm):05368                 CLRA                                      ; A ZERO ON THE STACK IS END OF DATA POINTER
4241                  (      exbasic.asm):05369         L907C
4241 3402             (      exbasic.asm):05370                 PSHS    A                                 ; PUSH A CHARACTER ONTO THE STACK
4243 A680             (      exbasic.asm):05371                 LDA     ,X+                               ; GET NEXT CHARACTER FROM BUFFER
4245 812D             (      exbasic.asm):05372                 CMPA    #'-'                              ; MINUS SIGN?
4247 27F8             (      exbasic.asm):05373                 BEQ     L907C                             ; YES
4249 812B             (      exbasic.asm):05374                 CMPA    #'+'                              ; PLUS SIGN?
424B 27F4             (      exbasic.asm):05375                 BEQ     L907C                             ; YES
424D 8124             (      exbasic.asm):05376                 CMPA    #'$'                              ; DOLLAR SIGN?
424F 27F0             (      exbasic.asm):05377                 BEQ     L907C                             ; YES
4251 8130             (      exbasic.asm):05378                 CMPA    #'0'                              ; ZERO?
4253 260E             (      exbasic.asm):05379                 BNE     L909E                             ; NO - ERROR
4255 A601             (      exbasic.asm):05380                 LDA     $01,X                             ; GET CHARACTER FOLLOWING ZERO
4257 8D16             (      exbasic.asm):05381                 BSR     L90AA                             ; CLEAR CARRY IF NUMERIC
4259 2508             (      exbasic.asm):05382                 BLO     L909E                             ; BRANCH IF NOT A NUMERIC CHARACTER - ERROR
425B                  (      exbasic.asm):05383         L9096
425B 3502             (      exbasic.asm):05384                 PULS    A                                 ; * PULL A CHARACTER OFF OF THE STACK
425D A782             (      exbasic.asm):05385                 STA     ,-X                               ; * AND PUT IT BACK IN THE STRING BUFFER
425F 26FA             (      exbasic.asm):05386                 BNE     L9096                             ; * KEEP GOING UNTIL ZERO FLAG
4261 20C7             (      exbasic.asm):05387                 BRA     L9065                             ; KEEP CLEANING UP THE INPUT BUFFER
4263                  (      exbasic.asm):05388         L909E
4263 3502             (      exbasic.asm):05389                 PULS    A                                 ;
4265 4D               (      exbasic.asm):05390                 TSTA                                      ; * THE STACK AND EXIT WHEN
4266 26FB             (      exbasic.asm):05391                 BNE     L909E                             ; * ZERO FLAG FOUND
4268 9E0F             (      exbasic.asm):05392                 LDX     TEMPTR                            ; GET THE STRING BUFFER START POINTER
426A 8625             (      exbasic.asm):05393                 LDA     #'%'                              ; * PUT A % SIGN BEFORE THE ERROR POSITION TO
426C A782             (      exbasic.asm):05394                 STA     ,-X                               ; * INDICATE AN ERROR
426E                  (      exbasic.asm):05395         L90A9
426E 39               (      exbasic.asm):05396                 RTS
                      (      exbasic.asm):05397         ;*
                      (      exbasic.asm):05398         ;* CLEAR CARRY IF NUMERIC
426F                  (      exbasic.asm):05399         L90AA
426F 8130             (      exbasic.asm):05400                 CMPA    #'0'                              ; ASCII ZERO
4271 2504             (      exbasic.asm):05401                 BLO     L90B2                             ; RETURN IF ACCA < ASCII 0
4273 803A             (      exbasic.asm):05402                 SUBA    #$3A                              ; *  #'9'+1
4275 80C6             (      exbasic.asm):05403                 SUBA    #$C6                              ; * #-('9'+1)  CARRY CLEAR IF NUMERIC
4277                  (      exbasic.asm):05404         L90B2
4277 39               (      exbasic.asm):05405                 RTS
                      (      exbasic.asm):05406         ;*
                      (      exbasic.asm):05407         ;* PROCESS AN ITEM-LIST WHICH IS < 100,000,000
4278                  (      exbasic.asm):05408         L90B3
4278 968C             (      exbasic.asm):05409                 LDA     VD8                               ; GET RIGHT DIGIT COUNTER
427A 2701             (      exbasic.asm):05410                 BEQ     L90B8                             ; BRANCH IF NO FORMATTED DIGITS TO THE RIGHT OF DECIMAL PT
427C 4A               (      exbasic.asm):05411                 DECA                                      ; SUBTRACT ONE FOR DECIMAL POINT
427D                  (      exbasic.asm):05412         L90B8
427D 9B47             (      exbasic.asm):05413                 ADDA    V47                               ; *ADD THE BASE 10 EXPONENT OFFSET - ACCA CONTAINS THE
                      (      exbasic.asm):05414         ;*         *NUMBER OF SHIFTS REQUIRED TO ADJUST FPA0 TO THE SPECIFIED
                      (      exbasic.asm):05415         ;*         *NUMBER OF DlGITS TO THE RIGHT OF THE DECIMAL POINT
427F 2B01             (      exbasic.asm):05416                 BMI     L90BD                             ; IF ACCA >= 0 THEN NO SHIFTS ARE REQUIRED
4281 4F               (      exbasic.asm):05417                 CLRA                                      ; FORCE SHIFT COUNTER = 0
4282                  (      exbasic.asm):05418         L90BD
4282 3402             (      exbasic.asm):05419                 PSHS    A                                 ; SAVE INITIAL SHIFT COUNTER ON THE STACK
4284                  (      exbasic.asm):05420         L90BF
4284 2A0A             (      exbasic.asm):05421                 BPL     L90CB                             ; EXIT ROUTINE IF POSITIVE
4286 3402             (      exbasic.asm):05422                 PSHS    A                                 ; SAVE SHIFT COUNTER ON STACK
4288 BD3326           (      exbasic.asm):05423                 JSR     LBB82                             ; DIVIDE FPA0 BY 10 - SHIFT ONE DIGIT TO RIGHT
428B 3502             (      exbasic.asm):05424                 PULS    A                                 ; GET SHIFT COUNTER FROM THE STACK
428D 4C               (      exbasic.asm):05425                 INCA                                      ; BUMP SHIFT COUNTER UP BY ONE
428E 20F4             (      exbasic.asm):05426                 BRA     L90BF                             ; CHECK FOR FURTHER DIVISION
4290                  (      exbasic.asm):05427         L90CB
4290 9647             (      exbasic.asm):05428                 LDA     V47                               ; * GET BASE 10 EXPONENT OFFSET, ADD INITIAL SHIFT COUNTER
4292 A0E0             (      exbasic.asm):05429                 SUBA    ,S+                               ; * AND SAVE NEW BASE 10 EXPONENT OFFSET - BECAUSE
4294 9747             (      exbasic.asm):05430                 STA     V47                               ; * FPA0 WAS SHIFTED ABOVE
4296 8B09             (      exbasic.asm):05431                 ADDA    #$09                              ; * ADD NINE (SIGNIFICANT PLACES) AND BRANCH IF THERE ARE NO
4298 2B19             (      exbasic.asm):05432                 BMI     L90EE                             ; * ZEROES TO THE LEFT OF THE DECIMAL POINT IN THIS PRINT ITEM
429A 968D             (      exbasic.asm):05433                 LDA     VD9                               ; *DETERMINE HOW MANY FILLER ZEROES TO THE LEFT OF THE DECIMAL
429C 8009             (      exbasic.asm):05434                 SUBA    #$09                              ; *POINT. GET THE NUMBER OF FORMAT PLACES TO LEFT OF DECIMAL
429E 9047             (      exbasic.asm):05435                 SUBA    V47                               ; *POINT, SUBTRACT THE BASE 10 EXPONENT OFFSET AND THE CONSTANT 9
42A0 8D0D             (      exbasic.asm):05436                 BSR     L90EA                             ; *(UNNORMALIZATION)-THEN OUTPUT THAT MANY ZEROES TO THE BUFFER
42A2 BD4428           (      exbasic.asm):05437                 JSR     L9263                             ; INITIALIZE DECIMAL POINT AND COMMA COUNTERS
42A5 201D             (      exbasic.asm):05438                 BRA     L90FF                             ; PROCESS THE REMAINDER OF THE PRINT ITEM
                      (      exbasic.asm):05439         ;*
                      (      exbasic.asm):05440         ;* PUT (ACCA+1) ASCII ZEROES IN BUFFER
42A7                  (      exbasic.asm):05441         L90E2
42A7 3402             (      exbasic.asm):05442                 PSHS    A                                 ; SAVE ZERO COUNTER
42A9 8630             (      exbasic.asm):05443                 LDA     #'0'                              ; * INSERT A ZERO INTO
42AB A7C0             (      exbasic.asm):05444                 STA     ,U+                               ; * THE BUFFER
42AD 3502             (      exbasic.asm):05445                 PULS    A                                 ; RESTORE ZERO COUNTER
                      (      exbasic.asm):05446         
                      (      exbasic.asm):05447         ;* PUT ACCA ASCII ZEROES INTO THE BUFFER
42AF                  (      exbasic.asm):05448         L90EA
42AF 4A               (      exbasic.asm):05449                 DECA                                      ; DECREMENT ZERO COUNTER
42B0 2AF5             (      exbasic.asm):05450                 BPL     L90E2                             ; BRANCH IF NOT DONE
42B2 39               (      exbasic.asm):05451                 RTS
                      (      exbasic.asm):05452         
42B3                  (      exbasic.asm):05453         L90EE
42B3 968D             (      exbasic.asm):05454                 LDA     VD9                               ; * GET THE LEFT DIGIT COUNTER AND PUT
42B5 8DF8             (      exbasic.asm):05455                 BSR     L90EA                             ; * THAT MANY ZEROES IN THE STRiNG BUFFER
42B7 BD4412           (      exbasic.asm):05456                 JSR     L924D                             ; PUT THE DECIMAL POINT IN THE STRING BUFFER
42BA 86F7             (      exbasic.asm):05457                 LDA     #-9                               ; *DETERMINE HOW MANY FILLER ZEROES BETWEEN THE DECIMAL POINT
42BC 9047             (      exbasic.asm):05458                 SUBA    V47                               ; *AND SIGNIFICANT DATA. SUBTRACT BASE 10 EXPONENT FROM -9
42BE 8DEF             (      exbasic.asm):05459                 BSR     L90EA                             ; *(UNNORMALIZATION) AND OUTPUT THAT MANY ZEROES TO BUFFER
42C0 0F45             (      exbasic.asm):05460                 CLR     V45                               ; CLEAR THE DECIMAL POINT COUNTER - SUPPRESS THE DECIMAL POINT
42C2 0F8B             (      exbasic.asm):05461                 CLR     VD7                               ; CLEAR THE COMMA COUNTER - SUPPRESS COMMAS
42C4                  (      exbasic.asm):05462         L90FF
42C4 BD43C7           (      exbasic.asm):05463                 JSR     L9202                             ; DECODE FPA0 INTO A DECIMAL ASCII STRING
42C7 968C             (      exbasic.asm):05464                 LDA     VD8                               ; GET THE RIGHT DIGIT COUNTER
42C9 2602             (      exbasic.asm):05465                 BNE     L9108                             ; BRANCH IF RIGHT DIGIT COUNTER <> 0
42CB DE39             (      exbasic.asm):05466                 LDU     VARPTR                            ; RESET BUFFER PTR TO THE DECIMAL POINT IF NO DIGITS TO RIGHT
42CD                  (      exbasic.asm):05467         L9108
42CD 9B47             (      exbasic.asm):05468                 ADDA    V47                               ; *ADD BASE 10 EXPONENT - A POSITIVE ACCA WILL CAUSE THAT MANY
                      (      exbasic.asm):05469         ;* *FILLER ZEROES TO BE OUTPUT ; TO THE RIGHT OF LAST SIGNIFICANT DATA
                      (      exbasic.asm):05470         ;*         *SIGNIFICANT DATA
42CF 16FF43           (      exbasic.asm):05471                 LBRA    L9050                             ; INSERT LEADING ASTERISKS, FLOATING DOLLAR SIGN, ETC
                      (      exbasic.asm):05472         ;*
                      (      exbasic.asm):05473         ;* FORCE THE NUMERIC OUTPUT FORMAT TO BE EXPONENTIAL FORMAT
42D2                  (      exbasic.asm):05474         L910D
42D2 964F             (      exbasic.asm):05475                 LDA     FP0EXP                            ; * GET EXPONENT OF FPA0 AND
42D4 3402             (      exbasic.asm):05476                 PSHS    A                                 ; * SAVE IT ON THE STACK
42D6 2703             (      exbasic.asm):05477                 BEQ     L9116                             ; BRANCH IF FPA0 = 0
42D8 BD4392           (      exbasic.asm):05478                 JSR     L91CD                             ; *CONVERT FPA0 INTO A NUMBER WITH 9 SIGNIFICANT
                      (      exbasic.asm):05479         ;*         *DIGITS TO THE LEFT OF THE DECIMAL POINT
42DB                  (      exbasic.asm):05480         L9116
42DB 968C             (      exbasic.asm):05481                 LDA     VD8                               ; GET THE RIGHT DIGIT COUNTER
42DD 2701             (      exbasic.asm):05482                 BEQ     L911B                             ; BRANCH IF NO FORMATTED DIGITS TO THE RIGHT
42DF 4A               (      exbasic.asm):05483                 DECA                                      ; SUBTRACT ONE FOR THE DECIMAL POINT
42E0                  (      exbasic.asm):05484         L911B
42E0 9B8D             (      exbasic.asm):05485                 ADDA    VD9                               ; ADD TO THE LEFT DIGIT COUNTER
42E2 7FDBD5           (      exbasic.asm):05486                 CLR     STRBUF+3                          ; CLEAR BUFFER BYTE AS TEMPORARY STORAGE LOCATION
42E5 D68E             (      exbasic.asm):05487                 LDB     VDA                               ; * GET THE STATUS BYTE FOR A
42E7 C404             (      exbasic.asm):05488                 ANDB    #$04                              ; * POST-BYTE FORCE; BRANCH IF
42E9 2603             (      exbasic.asm):05489                 BNE     L9129                             ; * A POST-BYTE FORCE
42EB 73DBD5           (      exbasic.asm):05490                 COM     STRBUF+3                          ; TOGGLE BUFFER BYTE TO -1 IF NO POST-BYTE FORCE
42EE                  (      exbasic.asm):05491         L9129
42EE BBDBD5           (      exbasic.asm):05492                 ADDA    STRBUF+3                          ; SUBTRACT 1 IF NO POST BYTE FORCE
42F1 8009             (      exbasic.asm):05493                 SUBA    #$09                              ; *SUBTRACT 9 (DUE TO THE CONVERSION TO 9
                      (      exbasic.asm):05494         ;*         *SIGNIFICANT DIGITS TO LEFT OF DECIMAL POINT)
42F3 3402             (      exbasic.asm):05495                 PSHS    A                                 ; * SAVE SHIFT COUNTER ON THE STACK - ACCA CONTAINS THE NUMBER
                      (      exbasic.asm):05496         ;*         OF   SHIFTS REQUIRED TO ADJUST FPA0 FOR THE NUMBER OF
                      (      exbasic.asm):05497         ;*         FORMATTED PLACES TO THE RIGHT OF THE DECIMAL POINT.
42F5                  (      exbasic.asm):05498         L9130
42F5 2A0A             (      exbasic.asm):05499                 BPL     L913C                             ; NO MORE SHIFTS WHEN ACCA >= 0
42F7 3402             (      exbasic.asm):05500                 PSHS    A                                 ; SAVE SHIFT COUNTER
42F9 BD3326           (      exbasic.asm):05501                 JSR     LBB82                             ; DIVIDE FPA0 BY 10 - SHIFT TO RIGHT ONE
42FC 3502             (      exbasic.asm):05502                 PULS    A                                 ; RESTORE THE SHIFT COUNTER
42FE 4C               (      exbasic.asm):05503                 INCA                                      ; ADD 1 TO SHIFT COUNTER
42FF 20F4             (      exbasic.asm):05504                 BRA     L9130                             ; CHECK FOR FURTHER SHIFTING (DIVISION)
4301                  (      exbasic.asm):05505         L913C
4301 A6E4             (      exbasic.asm):05506                 LDA     ,S                                ; *GET THE INITIAL VALUE OF THE SHIFT COUNTER
4303 2B01             (      exbasic.asm):05507                 BMI     L9141                             ; *AND BRANCH IF SHIFTING HAS TAKEN PLACE
4305 4F               (      exbasic.asm):05508                 CLRA                                      ; RESET ACCA IF NO SHIFTING HAS TAKEN PLACE
4306                  (      exbasic.asm):05509         L9141
4306 40               (      exbasic.asm):05510                 NEGA                                      ; *CALCULATE THE POSITION OF THE DECIMAL POINT BY
4307 9B8D             (      exbasic.asm):05511                 ADDA    VD9                               ; *NEGATING SHIFT COUNTER, ADDING THE LEFT DIGIT COUNTER
4309 4C               (      exbasic.asm):05512                 INCA                                      ; *PLUS ONE AND THE POST-BYTE POSlTION, IF USED
430A BBDBD5           (      exbasic.asm):05513                 ADDA    STRBUF+3                          ; *
430D 9745             (      exbasic.asm):05514                 STA     V45                               ; SAVE DECIMAL POINT COUNTER
430F 0F8B             (      exbasic.asm):05515                 CLR     VD7                               ; CLEAR COMMA COUNTER - NO COMMAS INSERTED
4311 BD43C7           (      exbasic.asm):05516                 JSR     L9202                             ; CONVERT FPA0 INTO ASCII DECIMAL STRING
4314 3502             (      exbasic.asm):05517                 PULS    A                                 ; * GET THE INITIAL VALUE OF SHIFT COUNTER AND
4316 BD4446           (      exbasic.asm):05518                 JSR     L9281                             ; * INSERT THAT MANY ZEROES INTO THE BUFFER
4319 968C             (      exbasic.asm):05519                 LDA     VD8                               ; *GET THE RIGHT DIGIT COUNTER AND BRANCH
431B 2602             (      exbasic.asm):05520                 BNE     L915A                             ; *IF NOT ZERO
431D 335F             (      exbasic.asm):05521                 LEAU    -1,U                              ; MOVE BUFFER POINTER BACK ONE
                      (      exbasic.asm):05522         ;
                      (      exbasic.asm):05523         ;* CALCULATE VALUE OF EXPONENT AND PUT IN STRING BUFFER
431F                  (      exbasic.asm):05524         L915A
431F E6E0             (      exbasic.asm):05525                 LDB     ,S+                               ; GET ORIGINAL EXPONENT OF FPA0
4321 2709             (      exbasic.asm):05526                 BEQ     L9167                             ; BRANCH IF EXPONENT = 0
4323 D647             (      exbasic.asm):05527                 LDB     V47                               ; GET BASE 10 EXPONENT
4325 CB09             (      exbasic.asm):05528                 ADDB    #$09                              ; ADD 9 FOR 9 SIGNIFICANT DIGIT CONVERSION
4327 D08D             (      exbasic.asm):05529                 SUBB    VD9                               ; SUBTRACT LEFT DIGIT COUNTER
4329 F0DBD5           (      exbasic.asm):05530                 SUBB    STRBUF+3                          ; ADD ONE TO EXPONENT IF POST-SIGN FORCE
432C                  (      exbasic.asm):05531         L9167
432C 862B             (      exbasic.asm):05532                 LDA     #'+'                              ; PLUS SIGN
432E 5D               (      exbasic.asm):05533                 TSTB                                      ; TEST EXPONENT
432F 2A03             (      exbasic.asm):05534                 BPL     L916F                             ; BRANCH IF POSITIVE EXPONENT
4331 862D             (      exbasic.asm):05535                 LDA     #'-'                              ; MINUS SIGN
4333 50               (      exbasic.asm):05536                 NEGB                                      ; CONVERT EXPONENT TO POSITIVE NUMBER
4334                  (      exbasic.asm):05537         L916F
4334 A741             (      exbasic.asm):05538                 STA     $01,U                             ; PUT SIGN OF EXPONENT IN STRING BUFFER
4336 8645             (      exbasic.asm):05539                 LDA     #'E'                              ; * PUT AN 'E' (EXPONENTIATION FLAG) IN
4338 A7C1             (      exbasic.asm):05540                 STA     ,U++                              ; * BUFFER AND SKIP OVER THE SIGN
433A 862F             (      exbasic.asm):05541                 LDA     #$2F                              ; * WAS LDA #'0'-1
                      (      exbasic.asm):05542         ;*CONVERT BINARY EXPONENT IN ACCB TO ASCII VALUE IN ACCA
433C                  (      exbasic.asm):05543         L9177
433C 4C               (      exbasic.asm):05544                 INCA                                      ; ADD ONE TO TENS DIGIT COUNTER
433D C00A             (      exbasic.asm):05545                 SUBB    #10                               ; *SUBTRACT 10 FROM EXPONENT AND ADD ONE TO TENS
433F 24FB             (      exbasic.asm):05546                 BCC     L9177                             ; * DIGIT IF NO CARRY. TENS DIGIT DONE IF THERE IS A CARRY
4341 CB3A             (      exbasic.asm):05547                 ADDB    #$3A                              ; WAS ADDB #'9'+1
4343 EDC1             (      exbasic.asm):05548                 STD     ,U++                              ; SAVE EXPONENT IN BUFFER
4345 6FC4             (      exbasic.asm):05549                 CLR     ,U                                ; CLEAR FINAL BYTE IN BUFFER - PRINT TERMINATOR
4347 7E4219           (      exbasic.asm):05550                 JMP     L9054                             ; INSERT ASTERISK PADDING, FLOATING DOLLAR SIGN, ETC.
                      (      exbasic.asm):05551         ;
                      (      exbasic.asm):05552         ;* INSERT ASTERISK PADDING, FLOATING $ AND PRE-SIGN
434A                  (      exbasic.asm):05553         L9185
434A 8EDBD6           (      exbasic.asm):05554                 LDX     #STRBUF+4                         ; POINT X TO START OF PRINT ITEM BUFFER
434D E684             (      exbasic.asm):05555                 LDB     ,X                                ; * GET SIGN BYTE OF ITEM-LIST BUFFER
434F 3404             (      exbasic.asm):05556                 PSHS    B                                 ; * AND SAVE IT ON THE STACK
4351 8620             (      exbasic.asm):05557                 LDA     #SPACE                            ; DEFAULT PAD WITH BLANKS
4353 D68E             (      exbasic.asm):05558                 LDB     VDA                               ; * GET STATUS BYTE AND CHECK FOR
4355 C520             (      exbasic.asm):05559                 BITB    #$20                              ; * ASTERISK LEFT PADDING
4357 3504             (      exbasic.asm):05560                 PULS    B                                 ; GET SIGN BYTE AGAIN
4359 2708             (      exbasic.asm):05561                 BEQ     L919E                             ; BRANCH IF NO PADDING
435B 862A             (      exbasic.asm):05562                 LDA     #'*'                              ; PAD WITH ASTERISK
435D C120             (      exbasic.asm):05563                 CMPB    #SPACE                            ; WAS THE FIRST BYTE A BLANK (POSITIVE)?
435F 2602             (      exbasic.asm):05564                 BNE     L919E                             ; NO
4361 1F89             (      exbasic.asm):05565                 TFR     A,B                               ; TRANSFER PAD CHARACTER TO ACCB
4363                  (      exbasic.asm):05566         L919E
4363 3404             (      exbasic.asm):05567                 PSHS    B                                 ; SAVE FIRST CHARACTER ON STACK
4365                  (      exbasic.asm):05568         L91A0
4365 A780             (      exbasic.asm):05569                 STA     ,X+                               ; STORE PAD CHARACTER IN BUFFER
4367 E684             (      exbasic.asm):05570                 LDB     ,X                                ; GET NEXT CHARACTER IN BUFFER
4369 2710             (      exbasic.asm):05571                 BEQ     L91B6                             ; INSERT A ZERO IF END OF BUFFER
436B C145             (      exbasic.asm):05572                 CMPB    #'E'                              ; * CHECK FOR AN 'E' AND
436D 270C             (      exbasic.asm):05573                 BEQ     L91B6                             ; * PUT A ZERO BEFORE IT
436F C130             (      exbasic.asm):05574                 CMPB    #'0'                              ; * REPLACE LEADING ZEROES WITH
4371 27F2             (      exbasic.asm):05575                 BEQ     L91A0                             ; * PAD CHARACTERS
4373 C12C             (      exbasic.asm):05576                 CMPB    #','                              ; * REPLACE LEADING COMMAS
4375 27EE             (      exbasic.asm):05577                 BEQ     L91A0                             ; * WITH PAD CHARACTERS
4377 C12E             (      exbasic.asm):05578                 CMPB    #'.'                              ; * CHECK FOR DECIMAL POINT
4379 2604             (      exbasic.asm):05579                 BNE     L91BA                             ; * AND DON'T PUT A ZERO BEFORE IT
437B                  (      exbasic.asm):05580         L91B6
437B 8630             (      exbasic.asm):05581                 LDA     #'0'                              ; * REPLACE PREVIOUS CHARACTER
437D A782             (      exbasic.asm):05582                 STA     ,-X                               ; * WITH A ZERO
437F                  (      exbasic.asm):05583         L91BA
437F 968E             (      exbasic.asm):05584                 LDA     VDA                               ; * GET STATUS BYTE, CHECK
4381 8510             (      exbasic.asm):05585                 BITA    #$10                              ; * FOR FLOATING $
4383 2704             (      exbasic.asm):05586                 BEQ     L91C4                             ; * BRANCH IF NO FLOATING $
4385 C624             (      exbasic.asm):05587                 LDB     #'$'                              ; * STORE A $ IN
4387 E782             (      exbasic.asm):05588                 STB     ,-X                               ; * BUFFER
4389                  (      exbasic.asm):05589         L91C4
4389 8404             (      exbasic.asm):05590                 ANDA    #$04                              ; CHECK PRE-SIGN FLAG
438B 3504             (      exbasic.asm):05591                 PULS    B                                 ; GET SIGN CHARACTER
438D 2602             (      exbasic.asm):05592                 BNE     L91CC                             ; RETURN IF POST-SIGN REQUIRED
438F E782             (      exbasic.asm):05593                 STB     ,-X                               ; STORE FIRST CHARACTER
4391                  (      exbasic.asm):05594         L91CC
4391 39               (      exbasic.asm):05595                 RTS
                      (      exbasic.asm):05596         ;*
                      (      exbasic.asm):05597         ;* CONVERT FPA0 INTO A NUMBER OF THE FORM - NNN,NNN,NNN X 10**M.
                      (      exbasic.asm):05598         ;* THE EXPONENT M WILL BE RETURNED IN V47 (BASE 10 EXPONENT).
4392                  (      exbasic.asm):05599         L91CD
4392 3440             (      exbasic.asm):05600                 PSHS    U                                 ; SAVE BUFFER POINTER
4394 4F               (      exbasic.asm):05601                 CLRA                                      ; INITIAL EXPONENT OFFSET = 0
4395                  (      exbasic.asm):05602         L91D0
4395 9747             (      exbasic.asm):05603                 STA     V47                               ; SAVE EXPONENT OFFSET
4397 D64F             (      exbasic.asm):05604                 LDB     FP0EXP                            ; GET EXPONENT OF FPA0
4399 C180             (      exbasic.asm):05605                 CMPB    #$80                              ; * COMPARE TO EXPONENT OF .5
439B 2211             (      exbasic.asm):05606                 BHI     L91E9                             ; * AND BRANCH IF FPA0 > = 1.0
                      (      exbasic.asm):05607         ;
                      (      exbasic.asm):05608         ;* IF FPA0 < 1.0, MULTIPLY IT BY 1E+09 UNTIL IT IS >= 1
439D 8E3567           (      exbasic.asm):05609                 LDX     #LBDC0                            ; POINT X TO FP NUMBER (1E+09)
43A0 BD326E           (      exbasic.asm):05610                 JSR     LBACA                             ; MULTIPLY FPA0 BY 1E+09
43A3 9647             (      exbasic.asm):05611                 LDA     V47                               ; GET EXPONENT OFFSET
43A5 8009             (      exbasic.asm):05612                 SUBA    #$09                              ; SUBTRACT 9 (BECAUSE WE MULTIPLIED BY 1E+09 ABOVE)
43A7 20EC             (      exbasic.asm):05613                 BRA     L91D0                             ; CHECK TO SEE IF > 1.0
43A9                  (      exbasic.asm):05614         L91E4
43A9 BD3326           (      exbasic.asm):05615                 JSR     LBB82                             ; DIVIDE FPA0 BY 10
43AC 0C47             (      exbasic.asm):05616                 INC     V47                               ; INCREMENT EXPONENT OFFSET
43AE                  (      exbasic.asm):05617         L91E9
43AE 8E3562           (      exbasic.asm):05618                 LDX     #LBDBB                            ; POINT X TO FP NUMBER (999,999,999)
43B1 BD3444           (      exbasic.asm):05619                 JSR     LBCA0                             ; COMPARE FPA0 TO X
43B4 2EF3             (      exbasic.asm):05620                 BGT     L91E4                             ; BRANCH IF FPA0 > 999,999,999
43B6                  (      exbasic.asm):05621         L91F1
43B6 8E355D           (      exbasic.asm):05622                 LDX     #LBDB6                            ; POINT X TO FP NUMBER (99,999,999.9)
43B9 BD3444           (      exbasic.asm):05623                 JSR     LBCA0                             ; COMPARE FPA0 TO X
43BC 2E07             (      exbasic.asm):05624                 BGT     L9200                             ; RETURN IF 999,999,999 > FPA0 > 99,999,999.9
43BE BD330E           (      exbasic.asm):05625                 JSR     LBB6A                             ; MULTIPLY FPA0 BY 10
43C1 0A47             (      exbasic.asm):05626                 DEC     V47                               ; DECREMENT EXPONENT OFFSET
43C3 20F1             (      exbasic.asm):05627                 BRA     L91F1                             ; KEEP UNNORMALIZING
43C5                  (      exbasic.asm):05628         L9200
43C5 35C0             (      exbasic.asm):05629                 PULS    U,PC                              ; RESTORE BUFFER POINTER AND RETURN
                      (      exbasic.asm):05630         ;*
                      (      exbasic.asm):05631         ;* CONVERT FPA0 INTO AN INTEGER, THEN DECODE IT
                      (      exbasic.asm):05632         ;* INTO A DECIMAL ASCII STRING IN THE BUFFER
43C7                  (      exbasic.asm):05633         L9202
43C7 3440             (      exbasic.asm):05634                 PSHS    U                                 ; SAVE BUFFER POINTER
43C9 BD3158           (      exbasic.asm):05635                 JSR     LB9B4                             ; ADD .5 TO FPA0 (ROUND OFF)
43CC BD346C           (      exbasic.asm):05636                 JSR     LBCC8                             ; CONVERT FPA0 TO INTEGER FORMAT
43CF 3540             (      exbasic.asm):05637                 PULS    U                                 ; RESTORE BUFFER POINTER
                      (      exbasic.asm):05638         ;*
                      (      exbasic.asm):05639         ;* CONVERT FPA0 INTO A DECIMAL ASCII STRING
43D1 8E366C           (      exbasic.asm):05640                 LDX     #LBEC5                            ; POINT X TO UNNORMALIZED POWERS OF 10
43D4 C680             (      exbasic.asm):05641                 LDB     #$80                              ; INITIALIZE DIGIT COUNTER TO 0 + $80.
                      (      exbasic.asm):05642         ;* BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA
                      (      exbasic.asm):05643         ;* IS NEGATIVE. WHEN YOU 'ADD' A NEGATIVE MANTISSA, IT IS
                      (      exbasic.asm):05644         ;* THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB
                      (      exbasic.asm):05645         ;* IS HOW THIS ROUTINE KNOWS THAT A 'SUBTRACTION' IS OCCURRING.
43D6                  (      exbasic.asm):05646         L9211
43D6 8D36             (      exbasic.asm):05647                 BSR     L9249                             ; CHECK FOR COMMA INSERTION
43D8                  (      exbasic.asm):05648         L9213
43D8 9653             (      exbasic.asm):05649                 LDA     FPA0+3                            ; * 'ADD' A POWER OF 10 MANTISSA TO FPA0.
43DA AB03             (      exbasic.asm):05650                 ADDA    $03,X                             ; * IF THE MANTISSA IS NEGATIVE, A SUBTRACTION
43DC 9753             (      exbasic.asm):05651                 STA     FPA0+3                            ; * WILL BE WHAT REALLY TAKES PLACE.
43DE 9652             (      exbasic.asm):05652                 LDA     FPA0+2                            ; *
43E0 A902             (      exbasic.asm):05653                 ADCA    $02,X                             ; *
43E2 9752             (      exbasic.asm):05654                 STA     FPA0+2                            ; *
43E4 9651             (      exbasic.asm):05655                 LDA     FPA0+1                            ; *
43E6 A901             (      exbasic.asm):05656                 ADCA    $01,X                             ; *
43E8 9751             (      exbasic.asm):05657                 STA     FPA0+1                            ; *
43EA 9650             (      exbasic.asm):05658                 LDA     FPA0                              ; *
43EC A984             (      exbasic.asm):05659                 ADCA    ,X                                ; *
43EE 9750             (      exbasic.asm):05660                 STA     FPA0                              ; *
43F0 5C               (      exbasic.asm):05661                 INCB                                      ; ADD ONE TO DIGIT COUNTER
43F1 56               (      exbasic.asm):05662                 RORB                                      ; ROTATE CARRY INTO BIT 7
43F2 59               (      exbasic.asm):05663                 ROLB                                      ; * SET OVERFLOW FLAG - BRANCH IF CARRY SET AND
43F3 28E3             (      exbasic.asm):05664                 BVC     L9213                             ; * ADDING MANTISSA OR CARRY CLEAR AND SUBTRACTING MANTISSA
43F5 2403             (      exbasic.asm):05665                 BCC     L9235                             ; BRANCH IF SUBTRACTING MANTISSA
43F7 C00B             (      exbasic.asm):05666                 SUBB    #10+1                             ; WAS SUBB #10+1
43F9 50               (      exbasic.asm):05667                 NEGB                                      ; * IF ADDING MANTISSA
43FA                  (      exbasic.asm):05668         L9235
43FA CB2F             (      exbasic.asm):05669                 ADDB    #$2F                              ; WAS ADDB #'0'-1
43FC 3004             (      exbasic.asm):05670                 LEAX    $04,X                             ; MOVE TO NEXT POWER OF 10 MANTISSA
43FE 1F98             (      exbasic.asm):05671                 TFR     B,A                               ; SAVE DIGIT IN ACCA
4400 847F             (      exbasic.asm):05672                 ANDA    #$7F                              ; MASK OFF ADD/SUBTRACT FLAG (BIT 7)
4402 A7C0             (      exbasic.asm):05673                 STA     ,U+                               ; STORE DIGIT IN BUFFER
4404 53               (      exbasic.asm):05674                 COMB                                      ; TOGGLE ADD/SUBTRACT FLAG
4405 C480             (      exbasic.asm):05675                 ANDB    #$80                              ; MASK OFF EVERYTHING BUT ADD/SUB FLAG
4407 8C3690           (      exbasic.asm):05676                 CMPX    #LBEE9                            ; COMPARE TO END OF UNNORMALIZED POWERS OF 10
440A 26CA             (      exbasic.asm):05677                 BNE     L9211                             ; BRANCH IF NOT DONE
440C 6FC4             (      exbasic.asm):05678                 CLR     ,U                                ; PUT A ZERO AT END OF INTEGER
                      (      exbasic.asm):05679         ;
                      (      exbasic.asm):05680         ;* DECREMENT DECIMAL POINT COUNTER AND CHECK FOR COMMA INSERTION
440E                  (      exbasic.asm):05681         L9249
440E 0A45             (      exbasic.asm):05682                 DEC     V45                               ; DECREMENT DECIMAL POINT COUNTER
4410 2609             (      exbasic.asm):05683                 BNE     L9256                             ; NOT TIME FOR DECIMAL POINT
4412                  (      exbasic.asm):05684         L924D
4412 DF39             (      exbasic.asm):05685                 STU     VARPTR                            ; SAVE BUFFER POINTER-POSITION OF THE DECIMAL POINT
4414 862E             (      exbasic.asm):05686                 LDA     #'.'                              ; * STORE A DECIMAL
4416 A7C0             (      exbasic.asm):05687                 STA     ,U+                               ; * POINT IN THE OUTPUT BUFFER
4418 0F8B             (      exbasic.asm):05688                 CLR     VD7                               ; * CLEAR COMMA COUNTER - NOW IT WILL TAKE 255
                      (      exbasic.asm):05689         ;*                             ; * DECREMENTS BEFORE ANOTHER COMMA WILL BE INSERTED
441A 39               (      exbasic.asm):05690                 RTS
441B                  (      exbasic.asm):05691         L9256
441B 0A8B             (      exbasic.asm):05692                 DEC     VD7                               ; DECREMENT COMMA COUNTER
441D 2608             (      exbasic.asm):05693                 BNE     L9262                             ; RETURN IF NOT TIME FOR COMMA
441F 8603             (      exbasic.asm):05694                 LDA     #$03                              ; * RESET COMMA COUNTER TO 3; THREE
4421 978B             (      exbasic.asm):05695                 STA     VD7                               ; * DIGITS BETWEEN COMMAS
4423 862C             (      exbasic.asm):05696                 LDA     #','                              ; * PUT A COMMA INTO
4425 A7C0             (      exbasic.asm):05697                 STA     ,U+                               ; * THE BUFFER
4427                  (      exbasic.asm):05698         L9262
4427 39               (      exbasic.asm):05699                 RTS
                      (      exbasic.asm):05700         ;
                      (      exbasic.asm):05701         ;* INITIALIZE DECIMAL POINT AND COMMA COUNTERS
4428                  (      exbasic.asm):05702         L9263
4428 9647             (      exbasic.asm):05703                 LDA     V47                               ; GET THE BASE 10 EXPONENT OFFSET
442A 8B0A             (      exbasic.asm):05704                 ADDA    #10                               ; * ADD 10 (FPA0 WAS 'NORMALIZED' TO 9 PLACES LEFT
442C 9745             (      exbasic.asm):05705                 STA     V45                               ; * OF DECIMAL POINT) - SAVE IN DECIMAL POINT COUNTER
442E 4C               (      exbasic.asm):05706                 INCA                                      ; ADD ONE FOR THE DECIMAL POINT
442F                  (      exbasic.asm):05707         L926A
442F 8003             (      exbasic.asm):05708                 SUBA    #$03                              ; * DIVIDE DECIMAL POINT COUNTER BY 3; LEAVE
4431 24FC             (      exbasic.asm):05709                 BCC     L926A                             ; * THE REMAINDER IN ACCA
4433 8B05             (      exbasic.asm):05710                 ADDA    #$05                              ; CONVERT REMAINDER INTO A NUMBER FROM 1-3
4435 978B             (      exbasic.asm):05711                 STA     VD7                               ; SAVE COMMA COUNTER
4437 968E             (      exbasic.asm):05712                 LDA     VDA                               ; GET STATUS BYTE
4439 8440             (      exbasic.asm):05713                 ANDA    #$40                              ; CHECK FOR COMMA FLAG
443B 2602             (      exbasic.asm):05714                 BNE     L927A                             ; BRANCH IF COMMA FLAG ACTIVE
443D 978B             (      exbasic.asm):05715                 STA     VD7                               ; CLEAR COMMA COUNTER - 255 DIGITS OUTPUT BEFORE A COMMA
443F                  (      exbasic.asm):05716         L927A
443F 39               (      exbasic.asm):05717                 RTS
                      (      exbasic.asm):05718         ;*
                      (      exbasic.asm):05719         ;* INSERT ACCA ZEROES INTO THE BUFFER
4440                  (      exbasic.asm):05720         L927B
4440 3402             (      exbasic.asm):05721                 PSHS    A                                 ; SAVE ZEROES COUNTER
4442 8DCA             (      exbasic.asm):05722                 BSR     L9249                             ; CHECK FOR DECIMAL POINT
4444 3502             (      exbasic.asm):05723                 PULS    A                                 ; RESTORE ZEROES COUNTER
4446                  (      exbasic.asm):05724         L9281
4446 4A               (      exbasic.asm):05725                 DECA                                      ; * DECREMENT ZEROES COUNTER AND
4447 2B0A             (      exbasic.asm):05726                 BMI     L928E                             ; * RETURN IF < 0
4449 3402             (      exbasic.asm):05727                 PSHS    A                                 ; SAVE ZEROES COUNTER
444B 8630             (      exbasic.asm):05728                 LDA     #'0'                              ; * PUT A ZERO INTO
444D A7C0             (      exbasic.asm):05729                 STA     ,U+                               ; * THE BUFFER
444F A6E0             (      exbasic.asm):05730                 LDA     ,S+                               ; RESTORE THE ZEROES COUNTER
4451 26ED             (      exbasic.asm):05731                 BNE     L927B                             ; BRANCH IF NOT DONE
4453                  (      exbasic.asm):05732         L928E
4453 39               (      exbasic.asm):05733                 RTS
                      (      exbasic.asm):05734         ;
                      (      exbasic.asm):05735         ;
                      (      exbasic.asm):05736         ;* LINE
4454                  (      exbasic.asm):05737         LINE
4454 8189             (      exbasic.asm):05738                 CMPA    #TOK_INPUT                        ; 'INPUT' TOKEN
4456 1027F948         (      exbasic.asm):05739                 LBEQ    L89C0                             ; GO DO 'LINE INPUT' COMMAND
445A 7E2A43           (      exbasic.asm):05740                 JMP     LB277                             ; 'SYNTAX ERROR' IF NOT "LINE INPUT"
                      (      exbasic.asm):05741         
                      (      exbasic.asm):05742         ;* EXIT
445D                  (      exbasic.asm):05743         EXIT
445D 3F               (      exbasic.asm):05744                 SWI
445E 00               (      exbasic.asm):05745                 FCB     00
                      (      exbasic.asm):05746         
                      (      exbasic.asm):05747                 INCLUDE disk.asm
                      (         disk.asm):00001         ;* SAVE
445F                  (         disk.asm):00002         SAVE
445F 273D             (         disk.asm):00003                 BEQ     SAVERR                            ; BRANCH IF NO ARGUMENT
4461 9E68             (         disk.asm):00004                 LDX     CURLIN                            ; GET CURRENT LINE NUMBER
4463 8CFFFF           (         disk.asm):00005                 CMPX    #$FFFF                            ; ERROR IF NOT DIRECT MODE
4466 263E             (         disk.asm):00006                 BNE     NONDIRECTSAVE
                      (         disk.asm):00007         
4468 BD291B           (         disk.asm):00008                 JSR     LB156                             ; EVALUATE EXPRESSION
446B BD2E25           (         disk.asm):00009                 JSR     LB654                             ; GET THE STRING ARGUMENT (B=LEN, X=ADDRESS)
                      (         disk.asm):00010                                                           ; TURN THE STRING INTO A CUBIX FILENAME (LESS THE EXTENSION)
446E 4F               (         disk.asm):00011                 CLRA
446F 9F0F             (         disk.asm):00012                 STX     TEMPTR
4471 D30F             (         disk.asm):00013                 ADDD    TEMPTR
4473 1F02             (         disk.asm):00014                 TFR     D,Y
4475 860D             (         disk.asm):00015                 LDA     #$0D
4477 A7A4             (         disk.asm):00016                 STA     ,Y
4479 1F12             (         disk.asm):00017                 TFR     X,Y
                      (         disk.asm):00018         ;
447B 3F               (         disk.asm):00019                 SWI                                       ; AND OPEN THE FILE FOR WRITE/CREATE
447C 0B               (         disk.asm):00020                 FCB     11                                ; ERROR OUT IF THE FILENAME IS NOT VALID
447D 2622             (         disk.asm):00021                 BNE     DSKABORT
447F CC4241           (         disk.asm):00022                 LDD     #$4241                            ;'BA' GET FIRST PORTION
4482 ED84             (         disk.asm):00023                 STD     ,X                                ;SAVE IT
4484 8653             (         disk.asm):00024                 LDA     #'S'                              ;LAST CHAR
4486 A702             (         disk.asm):00025                 STA     2,X                               ;WRITE IT
                      (         disk.asm):00026         
                      (         disk.asm):00027         ;
4488 8E44FC           (         disk.asm):00028                 LDX     #PROGST                           ; BEGINNING OF BASIC PROGRAM
448B DC1B             (         disk.asm):00029                 LDD     VARTAB
448D 8344FC           (         disk.asm):00030                 SUBD    #PROGST                           ; D CONTAINS LENGTH OF BASIC PROGRAM
                      (         disk.asm):00031         
4490 1CFE             (         disk.asm):00032                 CLC
4492 46               (         disk.asm):00033                 RORA
4493 1F89             (         disk.asm):00034                 TFR     A,B
4495 4F               (         disk.asm):00035                 CLRA
4496 5C               (         disk.asm):00036                 INCB                                      ; D NOW CONTAINS NUMBER OF BLOCKS OF BASIC PROGRAM
                      (         disk.asm):00037         
4497 3F               (         disk.asm):00038                 SWI                                       ; SAVE THAT SUCKER
4498 36               (         disk.asm):00039                 FCB     54
4499 2606             (         disk.asm):00040                 BNE     DSKABORT
                      (         disk.asm):00041         
449B 7E2612           (         disk.asm):00042                 JMP     CLEAR                             ; CLEAR ALL VARIABLES
                      (         disk.asm):00043         
449E                  (         disk.asm):00044         SAVERR:
449E 7E2A43           (         disk.asm):00045                 JMP     LB277                             ; 'SYNTAX ERROR' IF NOT A TEXT STRING ARGUMENT
44A1                  (         disk.asm):00046         DSKABORT:
44A1 C628             (         disk.asm):00047                 LDB     #2*20                             ; 'IO' ERROR
44A3 7E2413           (         disk.asm):00048                 JMP     LAC46
44A6                  (         disk.asm):00049         NONDIRECTSAVE:
44A6 C630             (         disk.asm):00050                 LDB     #2*24                             ; 'DM' ERROR
44A8 7E2413           (         disk.asm):00051                 JMP     LAC46
                      (         disk.asm):00052         
                      (         disk.asm):00053         
                      (         disk.asm):00054         ;* LOAD
44AB                  (         disk.asm):00055         LOAD
44AB 27F1             (         disk.asm):00056                 BEQ     SAVERR                            ; BRANCH IF NO ARGUMENT
                      (         disk.asm):00057         
44AD BD291B           (         disk.asm):00058                 JSR     LB156                             ; EVALUATE EXPRESSION
44B0 BD2E25           (         disk.asm):00059                 JSR     LB654                             ; GET THE STRING ARGUMENT (B=LEN, X=ADDRESS)
                      (         disk.asm):00060                                                           ; TURN THE STRING INTO A CUBIX FILENAME (LESS THE EXTENSION)
44B3 4F               (         disk.asm):00061                 CLRA
44B4 9F0F             (         disk.asm):00062                 STX     TEMPTR
44B6 D30F             (         disk.asm):00063                 ADDD    TEMPTR
44B8 1F02             (         disk.asm):00064                 TFR     D,Y
44BA 860D             (         disk.asm):00065                 LDA     #$0D
44BC A7A4             (         disk.asm):00066                 STA     ,Y
44BE 1F12             (         disk.asm):00067                 TFR     X,Y
                      (         disk.asm):00068         ;
44C0 3F               (         disk.asm):00069                 SWI                                       ; AND OPEN THE FILE
44C1 0B               (         disk.asm):00070                 FCB     11                                ; ERROR OUT IF THE FILENAME IS NOT VALID
44C2 26DD             (         disk.asm):00071                 BNE     DSKABORT
44C4 CC4241           (         disk.asm):00072                 LDD     #$4241                            ;'BA' GET FIRST PORTION
44C7 ED84             (         disk.asm):00073                 STD     ,X                                ;SAVE IT
44C9 8653             (         disk.asm):00074                 LDA     #'S'                              ;LAST CHAR
44CB A702             (         disk.asm):00075                 STA     2,X                               ;WRITE IT
                      (         disk.asm):00076         
                      (         disk.asm):00077         ;
44CD 8E44FC           (         disk.asm):00078                 LDX     #PROGST                           ; BEGINNING OF BASIC PROGRAM
44D0 3F               (         disk.asm):00079                 SWI                                       ; LOAD THAT SUCKER
44D1 35               (         disk.asm):00080                 FCB     53
44D2 26CD             (         disk.asm):00081                 BNE     DSKABORT
                      (         disk.asm):00082         
44D4 8E44FC           (         disk.asm):00083                 LDX     #PROGST                           ; BEGINNING OF BASIC PROGRAM
44D7 3001             (         disk.asm):00084                 INX
44D9 9F19             (         disk.asm):00085                 STX     TXTTAB                            ; SET START OF BASIC
                      (         disk.asm):00086         
                      (         disk.asm):00087         !
44DB 8CD7FF           (         disk.asm):00088                 CPX     #END_OF_USER_RAM
44DE 2417             (         disk.asm):00089                 BHS     LOADMEMERR
44E0 A680             (         disk.asm):00090                 LDA     ,X+
44E2 8100             (         disk.asm):00091                 CMPA    #$00
44E4 26F5             (         disk.asm):00092                 BNE     <
44E6 A680             (         disk.asm):00093                 LDA     ,X+
44E8 8100             (         disk.asm):00094                 CMPA    #$00
44EA 26EF             (         disk.asm):00095                 BNE     <
                      (         disk.asm):00096         
44EC 9F1B             (         disk.asm):00097                 STX     VARTAB
44EE BD24D6           (         disk.asm):00098                 JSR     LAD21
44F1 BD2612           (         disk.asm):00099                 JSR     CLEAR                             ; CLEAR ALL VARIABLES TO RESET MESS MADE BY FCB
44F4 7E2432           (         disk.asm):00100                 JMP     LAC73                             ; GOTO INPUT LOOP
                      (         disk.asm):00101         
44F7                  (         disk.asm):00102         LOADMEMERR:
44F7 C60C             (         disk.asm):00103                 LDB     #2*6                              ; 'OM' ERROR
44F9 7E2413           (         disk.asm):00104                 JMP     LAC46                             ; JUMP TO ERROR HANDLER
                      (      exbasic.asm):05748         
44FC                  (      exbasic.asm):05749         PROGST
44FC                  (      exbasic.asm):05750                 RMB     1                                 ; START OF PROGRAM SPACE

Symbol Table:
[ G] ABS                              3437
[ G] ARYDIS                           0008
[ G] ARYEND                           001F
[ G] ARYTAB                           001D
[ G] ASC                              2E71
[ G] ATN                              37CB
[ G] BACDST                           2063
[ G] BAWMST                           20B8
[ G] BFRQSV                           20BF
[ G] BINVAL                           002B
[ G] BIRQSV                           21BB
[ G] BOTSTK                           0017
[ G] BROMHK                           21BC
[ G] BS                               0008
[ G] CHARAC                           0001
[ G] CHARAD                           2014
[ G] CHR                              2E5D
[ G] CLEAR                            2612
[ G] CMD_TAB                          2334
[ G] COEFCT                           0055
[ G] COEFPT                           0064
[ G] COMPARISON                       2B0D
[ G] COMVEC                           20E0
[ G] CONT                             2600
[ G] COS                              3793
[ G] CR                               000D
[ G] CURLIN                           0068
[ G] DATA                             26B2
[ G] DATPTR                           0033
[ G] DATTMP                           0035
[ G] DATTXT                           0031
[ G] DEF                              3C8C
[ G] DEL                              3D50
[ G] DEVCFW                           006A
[ G] DEVLCF                           006B
[ G] DEVPOS                           006C
[ G] DEVWID                           006D
[ G] DIM                              2B17
[ G] DIMFLG                           0005
[ G] DSKABORT                         44A1
[ G] EDIT                             394E
[ G] ELSE                             26B5
[ G] END                              25D5
[ G] END_OF_USER_RAM                  D7FF
[ G] ENDCHR                           0002
[ G] ENDFLG                           0000
[ G] ENDRAM                           DBFB
[ G] ESC                              001B
[ G] EXEC                             2188
[ G] EXECJP                           007A
[ G] EXIT                             445D
[ G] EXP                              390D
[ G] FIX                              393F
[ G] FOR                              24FC
[ G] FP0EXP                           004F
[ G] FP0SGN                           0054
[ G] FP1EXP                           005C
[ G] FP1SGN                           0061
[ G] FPA0                             0050
[ G] FPA1                             005D
[ G] FPA2                             0013
[ G] FPCARY                           005B
[ G] FPSBYT                           0063
[ G] FRESPC                           0025
[ G] FRETOP                           0021
[ G] FRQVEC                           009E
[ G] FUNC_TAB                         21CC
[ G] GARBFL                           0007
[ G] GETCCH                           2013
[ G] GETNCH                           200B
[ G] GIVABF                           2CC5
[ G] GO                               2653
[ G] HEXDOL                           3FBC
[ G] IF                               26E8
[ G] IFCTR                            0004
[ G] IKEYIM                           0073
[ G] INKEY                            2196
[ G] INPFLG                           0009
[ G] INPUT                            27CC
[ G] INSTR                            3B91
[ G] INT                              3492
[ G] INTCNV                           2BBD
[ G] IRQVEC                           009B
[ G] KEYIN                            201E
[ G] L8031                            20A2
[ G] L837E                            3799
[ G] L83A3                            37BE
[ G] L83A6                            37C1
[ G] L83AB                            37C6
[ G] L83B8                            37D3
[ G] L83C5                            37E0
[ G] L83D7                            37F2
[ G] L83DC                            37F7
[ G] L83DF                            37FA
[ G] L83E0                            37FB
[ G] L83E1                            37FC
[ G] L83E6                            3801
[ G] L83EB                            3806
[ G] L83F0                            380B
[ G] L83F5                            3810
[ G] L83FA                            3815
[ G] L83FF                            381A
[ G] L8404                            381F
[ G] L8409                            3824
[ G] L840E                            3829
[ G] L8413                            382E
[ G] L8418                            3833
[ G] L841D                            3838
[ G] L841E                            3839
[ G] L8423                            383E
[ G] L8428                            3843
[ G] L842D                            3848
[ G] L8432                            384D
[ G] L8437                            3852
[ G] L843C                            3857
[ G] L8441                            385C
[ G] L8489                            38A4
[ G] L8491                            38AC
[ G] L84AC                            38C7
[ G] L84C4                            38DF
[ G] L84C9                            38E4
[ G] L84CA                            38E5
[ G] L84CF                            38EA
[ G] L84D4                            38EF
[ G] L84D9                            38F4
[ G] L84DE                            38F9
[ G] L84E3                            38FE
[ G] L84E8                            3903
[ G] L84ED                            3908
[ G] L8501                            391C
[ G] L8504                            391F
[ G] L8529                            3944
[ G] L852C                            3947
[ G] L8538                            3953
[ G] L854D                            3968
[ G] L855C                            3977
[ G] L855D                            3978
[ G] L8570                            398B
[ G] L857D                            3998
[ G] L8581                            399C
[ G] L858A                            39A5
[ G] L858C                            39A7
[ G] L8592                            39AD
[ G] L859D                            39B9
[ G] L85AB                            39C7
[ G] L85AF                            39CB
[ G] L85B3                            39CF
[ G] L85B4                            39D0
[ G] L85B6                            39D2
[ G] L85C2                            39DE
[ G] L85C3                            39DF
[ G] L85C7                            39E3
[ G] L85D1                            39ED
[ G] L85D5                            39F1
[ G] L85DE                            39FA
[ G] L85F3                            3A0F
[ G] L85F5                            3A11
[ G] L860F                            3A2B
[ G] L8613                            3A2F
[ G] L861E                            3A3A
[ G] L8625                            3A41
[ G] L8626                            3A42
[ G] L862E                            3A4A
[ G] L8630                            3A4C
[ G] L8634                            3A50
[ G] L8646                            3A62
[ G] L864A                            3A66
[ G] L8650                            3A6C
[ G] L8659                            3A75
[ G] L865C                            3A78
[ G] L8665                            3A81
[ G] L866B                            3A87
[ G] L8679                            3A95
[ G] L867C                            3A98
[ G] L8685                            3AA1
[ G] L8687                            3AA3
[ G] L8694                            3AB0
[ G] L86A6                            3AC2
[ G] L86D6                            3AE8
[ G] L86EB                            3AFE
[ G] L86FD                            3B10
[ G] L870E                            3B21
[ G] L8724                            3B37
[ G] L8727                            3B3A
[ G] L872E                            3B41
[ G] L873F                            3B52
[ G] L8746                            3B59
[ G] L8748                            3B5B
[ G] L8768                            3B7B
[ G] L876B                            3B7E
[ G] L8776                            3B89
[ G] L877B                            3B8E
[ G] L879C                            3BAF
[ G] L87BE                            3BD1
[ G] L87CD                            3BE0
[ G] L87D6                            3BE9
[ G] L87D8                            3BEB
[ G] L87D9                            3BEC
[ G] L87DF                            3BF2
[ G] L87EB                            3BFE
[ G] L8800                            3C15
[ G] L880A                            3C1F
[ G] L880C                            3C22
[ G] L880E                            3C24
[ G] L881F                            3C35
[ G] L882E                            3C45
[ G] L8834                            3C4B
[ G] L8845                            3C5C
[ G] L8862                            3C7C
[ G] L8866                            3C81
[ G] L886E                            3C89
[ G] L88A1                            3CBD
[ G] L88B1                            3CCD
[ G] L88B4                            3CD0
[ G] L88D9                            3CF7
[ G] L88EF                            3D0F
[ G] L890B                            23AA
[ G] L890D                            23AC
[ G] L890F                            3D10
[ G] L891C                            3D1E
[ G] L8927                            3D2B
[ G] L892C                            3D30
[ G] L8943                            3D47
[ G] L8944                            3D48
[ G] L898C                            3D6E
[ G] L8990                            3D72
[ G] L8992                            3D74
[ G] L8993                            3D75
[ G] L899F                            3D81
[ G] L89AE                            3D90
[ G] L89B4                            3D96
[ G] L89B8                            3D9A
[ G] L89BF                            3DA1
[ G] L89C0                            3DA2
[ G] L89D2                            3DA8
[ G] L89E1                            3DB7
[ G] L89FC                            3DD0
[ G] L8A02                            3DD6
[ G] L8A04                            3DD8
[ G] L8A20                            3DF6
[ G] L8A2D                            3E04
[ G] L8A3A                            3E11
[ G] L8A3D                            3E14
[ G] L8A67                            3E3E
[ G] L8A68                            3E3F
[ G] L8A71                            3E48
[ G] L8A77                            3E4E
[ G] L8A83                            3E5A
[ G] L8A86                            3E5D
[ G] L8A90                            3E67
[ G] L8A91                            3E68
[ G] L8A95                            3E6C
[ G] L8A99                            3E70
[ G] L8A9B                            3E72
[ G] L8AAC                            3E83
[ G] L8AB2                            3E89
[ G] L8AB9                            3E90
[ G] L8AC0                            3E97
[ G] L8AC7                            3E9E
[ G] L8AD3                            3EAA
[ G] L8ADD                            3EB4
[ G] L8AE1                            3EB8
[ G] L8AE5                            3EBD
[ G] L8AE9                            3EC1
[ G] L8AEB                            3EC3
[ G] L8AED                            3EC6
[ G] L8AEF                            3EC9
[ G] L8B13                            3EEC
[ G] L8B17                            3EF1
[ G] L8B1B                            3EF6
[ G] L8B24                            3F01
[ G] L8B41                            3F1E
[ G] L8B55                            3F33
[ G] L8B67                            3F45
[ G] L8B71                            3F4F
[ G] L8B7B                            3F5A
[ G] L8B7F                            3F5E
[ G] L8B8A                            3F69
[ G] L8B8C                            3F6B
[ G] L8BAE                            3F8D
[ G] L8BBE                            3F9D
[ G] L8BC9                            3FA8
[ G] L8BD9                            3FB8
[ G] L8BE5                            3FC4
[ G] L8BEA                            3FC9
[ G] L8BFF                            3FDE
[ G] L8C07                            3FE6
[ G] L8C0B                            3FEA
[ G] L8E37                            3FF7
[ G] L8E3B                            3FFB
[ G] L8E5F                            4020
[ G] L8E69                            402A
[ G] L8E71                            4032
[ G] L8E82                            4043
[ G] L8E88                            4049
[ G] L8E95                            4056
[ G] L8EA8                            4069
[ G] L8EAE                            406F
[ G] L8EB4                            4075
[ G] L8EB7                            4078
[ G] L8EB9                            407A
[ G] L8EBB                            407C
[ G] L8ED2                            4093
[ G] L8ED8                            409A
[ G] L8EDD                            409F
[ G] L8EE2                            40A4
[ G] L8EEF                            40B1
[ G] L8EFB                            40BD
[ G] L8F1A                            40DC
[ G] L8F20                            40E2
[ G] L8F24                            40E6
[ G] L8F26                            40E8
[ G] L8F41                            4103
[ G] L8F4F                            4111
[ G] L8F5A                            411C
[ G] L8F74                            4136
[ G] L8F8F                            4151
[ G] L8F96                            4158
[ G] L8FB3                            4176
[ G] L8FC4                            4188
[ G] L8FC6                            418B
[ G] L8FD8                            419D
[ G] L8FE3                            41A8
[ G] L8FE5                            41AA
[ G] L8FF2                            41B7
[ G] L8FFA                            41BF
[ G] L9011                            41D6
[ G] L9015                            41DA
[ G] L9023                            41E8
[ G] L902C                            41F1
[ G] L9050                            4215
[ G] L9054                            4219
[ G] L9060                            4225
[ G] L9065                            422A
[ G] L907C                            4241
[ G] L9096                            425B
[ G] L909E                            4263
[ G] L90A9                            426E
[ G] L90AA                            426F
[ G] L90B2                            4277
[ G] L90B3                            4278
[ G] L90B8                            427D
[ G] L90BD                            4282
[ G] L90BF                            4284
[ G] L90CB                            4290
[ G] L90E2                            42A7
[ G] L90EA                            42AF
[ G] L90EE                            42B3
[ G] L90FF                            42C4
[ G] L9108                            42CD
[ G] L910D                            42D2
[ G] L9116                            42DB
[ G] L911B                            42E0
[ G] L9129                            42EE
[ G] L9130                            42F5
[ G] L913C                            4301
[ G] L9141                            4306
[ G] L915A                            431F
[ G] L9167                            432C
[ G] L916F                            4334
[ G] L9177                            433C
[ G] L9185                            434A
[ G] L919E                            4363
[ G] L91A0                            4365
[ G] L91B6                            437B
[ G] L91BA                            437F
[ G] L91C4                            4389
[ G] L91CC                            4391
[ G] L91CD                            4392
[ G] L91D0                            4395
[ G] L91E4                            43A9
[ G] L91E9                            43AE
[ G] L91F1                            43B6
[ G] L9200                            43C5
[ G] L9202                            43C7
[ G] L9211                            43D6
[ G] L9213                            43D8
[ G] L9235                            43FA
[ G] L9249                            440E
[ G] L924D                            4412
[ G] L9256                            441B
[ G] L9262                            4427
[ G] L9263                            4428
[ G] L926A                            442F
[ G] L927A                            443F
[ G] L927B                            4440
[ G] L9281                            4446
[ G] L928E                            4453
[ G] LA00E                            2044
[ G] LA077                            2063
[ G] LA084                            206A
[ G] LA093                            206D
[ G] LA0F3                            20BC
[ G] LA10D                            20C0
[ G] LA147                            20F6
[ G] LA156                            2129
[ G] LA165                            212B
[ G] LA171                            2019
[ G] LA1C1                            201E
[ G] LA35F                            212C
[ G] LA37C                            2132
[ G] LA38D                            213A
[ G] LA390                            213A
[ G] LA39A                            2141
[ G] LA3B4                            214F
[ G] LA3B8                            2153
[ G] LA3C2                            215D
[ G] LA3C8                            2163
[ G] LA3CC                            2167
[ G] LA3CD                            2168
[ G] LA3D9                            2174
[ G] LA3E8                            2183
[ G] LA545                            218F
[ G] LA549                            2193
[ G] LA56B                            219D
[ G] LA59A                            21AA
[ G] LA5A1                            21B1
[ G] LA5C4                            21B2
[ G] LA5C7                            21B3
[ G] LA5C9                            21B6
[ G] LA5E8                            3ACC
[ G] LA9C5                            21BB
[ G] LAA24                            21C7
[ G] LAA28                            21CB
[ G] LAA29                            21CC
[ G] LAA51                            2206
[ G] LAA66                            221B
[ G] LAB1A                            22C7
[ G] LAB67                            2334
[ G] LABAF                            2378
[ G] LABE1                            23AE
[ G] LABE8                            23B5
[ G] LABED                            23BA
[ G] LABEE                            23BB
[ G] LABF2                            23BF
[ G] LABF9                            23C6
[ G] LABFB                            23C8
[ G] LAC16                            23E3
[ G] LAC1A                            23E7
[ G] LAC1E                            23EB
[ G] LAC20                            23ED
[ G] LAC28                            23F5
[ G] LAC32                            23FF
[ G] LAC33                            2400
[ G] LAC37                            2404
[ G] LAC44                            2411
[ G] LAC46                            2413
[ G] LAC60                            241F
[ G] LAC68                            2427
[ G] LAC73                            2432
[ G] LAC7C                            243B
[ G] LACA0                            2455
[ G] LACA5                            245A
[ G] LACA8                            245D
[ G] LACC0                            2475
[ G] LACC8                            247D
[ G] LACDD                            2492
[ G] LACE9                            249E
[ G] LACEF                            24A4
[ G] LACF1                            24A6
[ G] LACF7                            24AC
[ G] LAD01                            24B6
[ G] LAD05                            24BA
[ G] LAD12                            24C7
[ G] LAD14                            24C9
[ G] LAD16                            24CB
[ G] LAD19                            24CE
[ G] LAD21                            24D6
[ G] LAD26                            24DB
[ G] LAD33                            24E8
[ G] LAD59                            250E
[ G] LAD7F                            2534
[ G] LAD90                            2547
[ G] LAD9E                            2555
[ G] LADB1                            2566
[ G] LADB4                            2569
[ G] LADC0                            2589
[ G] LADC6                            2590
[ G] LADD4                            25A2
[ G] LADE8                            25BB
[ G] LADEA                            25BD
[ G] LADEB                            25BE
[ G] LADF0                            25C3
[ G] LADFA                            25CD
[ G] LADFB                            25CE
[ G] LAE0B                            25DC
[ G] LAE11                            25E3
[ G] LAE15                            25E7
[ G] LAE22                            25F4
[ G] LAE40                            2611
[ G] LAE5A                            262C
[ G] LAE6F                            2641
[ G] LAE72                            2644
[ G] LAE88                            2655
[ G] LAE9F                            266E
[ G] LAEA4                            2673
[ G] LAEB6                            2686
[ G] LAEBB                            268B
[ G] LAEBF                            2690
[ G] LAED2                            26A3
[ G] LAED7                            26A8
[ G] LAEDA                            26AB
[ G] LAEE7                            26BA
[ G] LAEE8                            26BB
[ G] LAEEA                            26BD
[ G] LAEEB                            26BE
[ G] LAEF1                            26C5
[ G] LAEF7                            26CB
[ G] LAF0C                            26E0
[ G] LAF22                            26F7
[ G] LAF28                            26FD
[ G] LAF39                            2710
[ G] LAF52                            272A
[ G] LAF54                            272E
[ G] LAF5D                            2737
[ G] LAF67                            2742
[ G] LAF6B                            2746
[ G] LAFA4                            2780
[ G] LAFB1                            278D
[ G] LAFBE                            279A
[ G] LAFCE                            27AA
[ G] LAFCF                            27AB
[ G] LAFD6                            27B2
[ G] LAFDC                            27B2
[ G] LAFDF                            27B5
[ G] LAFEA                            27C0
[ G] LASTPT                           000D
[ G] LB00F                            27D7
[ G] LB01E                            27E6
[ G] LB02F                            27F3
[ G] LB035                            27F9
[ G] LB03F                            2803
[ G] LB049                            2809
[ G] LB04E                            280E
[ G] LB069                            2827
[ G] LB08B                            2848
[ G] LB098                            2855
[ G] LB09E                            285B
[ G] LB0A8                            2866
[ G] LB0B9                            287A
[ G] LB0CD                            288F
[ G] LB0D5                            2897
[ G] LB0E7                            28A9
[ G] LB0E8                            28AA
[ G] LB0FE                            28C0
[ G] LB101                            28C3
[ G] LB10A                            28CC
[ G] LB10C                            28CE
[ G] LB131                            28F4
[ G] LB134                            28F7
[ G] LB141                            2906
[ G] LB143                            2908
[ G] LB145                            290A
[ G] LB146                            290B
[ G] LB148                            290D
[ G] LB14F                            2914
[ G] LB153                            2918
[ G] LB156                            291B
[ G] LB158                            291D
[ G] LB15A                            291F
[ G] LB168                            292D
[ G] LB16A                            2930
[ G] LB181                            2948
[ G] LB19F                            2966
[ G] LB1A7                            296E
[ G] LB1B8                            297F
[ G] LB1C6                            298D
[ G] LB1CB                            2993
[ G] LB1CC                            2994
[ G] LB1CE                            2996
[ G] LB1D4                            299C
[ G] LB1DF                            29A7
[ G] LB1E2                            29AA
[ G] LB1E6                            29AE
[ G] LB1EA                            29B2
[ G] LB1F4                            29BC
[ G] LB1FA                            29C2
[ G] LB201                            29C9
[ G] LB203                            29CB
[ G] LB220                            29E8
[ G] LB222                            29EA
[ G] LB223                            29EB
[ G] LB22C                            29F5
[ G] LB22F                            29F8
[ G] LB244                            2A0D
[ G] LB249                            2A13
[ G] LB24E                            2A19
[ G] LB25F                            2A2A
[ G] LB262                            2A2D
[ G] LB267                            2A32
[ G] LB26A                            2A35
[ G] LB26D                            2A38
[ G] LB26F                            2A3A
[ G] LB277                            2A43
[ G] LB27C                            2A48
[ G] LB284                            2A50
[ G] LB287                            2A53
[ G] LB290                            2A5C
[ G] LB29F                            2A6C
[ G] LB2C7                            2A90
[ G] LB2C9                            2A92
[ G] LB2CE                            2A97
[ G] LB2D4                            2A9D
[ G] LB2D5                            2A9E
[ G] LB2ED                            2AB6
[ G] LB2F1                            2ABA
[ G] LB2F4                            2ABD
[ G] LB309                            2AD2
[ G] LB328                            2AF1
[ G] LB32D                            2AF6
[ G] LB334                            2AFD
[ G] LB33F                            2B08
[ G] LB348                            2B11
[ G] LB34B                            2B14
[ G] LB357                            2B21
[ G] LB35A                            2B25
[ G] LB35C                            2B27
[ G] LB371                            2B3E
[ G] LB373                            2B40
[ G] LB37B                            2B49
[ G] LB385                            2B54
[ G] LB395                            2B64
[ G] LB3A2                            2B71
[ G] LB3AA                            2B79
[ G] LB3AB                            2B7A
[ G] LB3DC                            2BAB
[ G] LB3DE                            2BAD
[ G] LB3DF                            2BAE
[ G] LB3E4                            2BB3
[ G] LB3E6                            2BB6
[ G] LB3E9                            2BB9
[ G] LB3FE                            2BCE
[ G] LB404                            2BD4
[ G] LB40A                            2BDA
[ G] LB42A                            2BFB
[ G] LB43B                            2C0C
[ G] LB447                            2C18
[ G] LB44A                            2C1B
[ G] LB44C                            2C1D
[ G] LB44F                            2C20
[ G] LB461                            2C32
[ G] LB46D                            2C3E
[ G] LB48C                            2C5D
[ G] LB4A0                            2C71
[ G] LB4A6                            2C77
[ G] LB4B9                            2C8A
[ G] LB4CD                            2C9E
[ G] LB4CE                            2C9F
[ G] LB4D8                            2CA9
[ G] LB4E6                            2CB7
[ G] LB4EB                            2CBC
[ G] LB4F3                            2CC4
[ G] LB50D                            2CDE
[ G] LB50F                            2CE0
[ G] LB511                            2CE2
[ G] LB516                            2CE7
[ G] LB518                            2CE9
[ G] LB51A                            2CED
[ G] LB51E                            2CEF
[ G] LB526                            2CF7
[ G] LB533                            2D04
[ G] LB537                            2D08
[ G] LB539                            2D0A
[ G] LB543                            2D14
[ G] LB54C                            2D1D
[ G] LB555                            2D26
[ G] LB558                            2D29
[ G] LB56D                            2D3E
[ G] LB56F                            2D40
[ G] LB585                            2D56
[ G] LB591                            2D62
[ G] LB593                            2D64
[ G] LB5A0                            2D71
[ G] LB5A8                            2D79
[ G] LB5AA                            2D7B
[ G] LB5B2                            2D83
[ G] LB5B4                            2D85
[ G] LB5B6                            2D87
[ G] LB5CA                            2D9B
[ G] LB5D2                            2DA3
[ G] LB5D8                            2DA9
[ G] LB5EC                            2DBD
[ G] LB5EE                            2DBF
[ G] LB5EF                            2DC0
[ G] LB60F                            2DE0
[ G] LB62A                            2DFB
[ G] LB643                            2E14
[ G] LB645                            2E16
[ G] LB64A                            2E1B
[ G] LB64E                            2E1F
[ G] LB654                            2E25
[ G] LB657                            2E28
[ G] LB659                            2E2A
[ G] LB66F                            2E40
[ G] LB672                            2E43
[ G] LB675                            2E46
[ G] LB680                            2E51
[ G] LB683                            2E54
[ G] LB686                            2E57
[ G] LB68F                            2E60
[ G] LB69B                            2E6C
[ G] LB69D                            2E6E
[ G] LB6A4                            2E75
[ G] LB6AD                            2E7E
[ G] LB6AE                            2E7F
[ G] LB6B5                            2E86
[ G] LB6DE                            2EB0
[ G] LB6F5                            2EC7
[ G] LB706                            2ED8
[ G] LB709                            2EDB
[ G] LB70B                            2EDE
[ G] LB70E                            2EE1
[ G] LB734                            2F0C
[ G] LB738                            2F10
[ G] LB73D                            2F15
[ G] LB740                            2F18
[ G] LB783                            2F57
[ G] LB784                            2F58
[ G] LB789                            2F5D
[ G] LB78D                            2F61
[ G] LB797                            2F6B
[ G] LB79F                            2F6E
[ G] LB7B9                            2F88
[ G] LB7C2                            2F91
[ G] LB7CB                            2F97
[ G] LB7E0                            2FAC
[ G] LB7E2                            2FAE
[ G] LB7E6                            2FB2
[ G] LB7F1                            2FBD
[ G] LB7F3                            2FBF
[ G] LB801                            2FCD
[ G] LB804                            2FD0
[ G] LB80A                            2FD6
[ G] LB814                            2FE0
[ G] LB820                            2FEC
[ G] LB821                            2FED
[ G] LB829                            2FF3
[ G] LB82D                            2FF7
[ G] LB842                            300C
[ G] LB844                            300E
[ G] LB852                            301C
[ G] LB85A                            3024
[ G] LB85C                            3026
[ G] LB86B                            3036
[ G] LB873                            303E
[ G] LB87C                            3047
[ G] LB87E                            3049
[ G] LB886                            3051
[ G] LB88A                            3055
[ G] LB892                            305D
[ G] LB89B                            3066
[ G] LB89D                            3068
[ G] LB8A6                            3071
[ G] LB8A8                            3073
[ G] LB8C2                            308D
[ G] LB8C6                            3091
[ G] LB8CE                            3099
[ G] LB8D2                            309D
[ G] LB8D4                            309F
[ G] LB8EA                            30B5
[ G] LB8F1                            30BC
[ G] LB8FE                            30C7
[ G] LB918                            30C7
[ G] LB91B                            30CA
[ G] LB91D                            30CC
[ G] LB938                            30E7
[ G] LB949                            30EE
[ G] LB954                            30FA
[ G] LB958                            30FF
[ G] LB95C                            3103
[ G] LB965                            310C
[ G] LB966                            310D
[ G] LB975                            311C
[ G] LB977                            311E
[ G] LB97E                            3125
[ G] LB98E                            3135
[ G] LB992                            3135
[ G] LB997                            313A
[ G] LB99C                            3140
[ G] LB99F                            3143
[ G] LB9A3                            3147
[ G] LB9AC                            3150
[ G] LB9AF                            3153
[ G] LB9B1                            3155
[ G] LB9B4                            3158
[ G] LB9B9                            315D
[ G] LB9BC                            3160
[ G] LB9C2                            3166
[ G] LB9C5                            3169
[ G] LB9CD                            3171
[ G] LB9E2                            3186
[ G] LB9EC                            3190
[ G] LB9FB                            319F
[ G] LBA18                            31BC
[ G] LBA1C                            31C0
[ G] LBA1D                            31C1
[ G] LBA39                            31DD
[ G] LBA3A                            31DE
[ G] LBA3E                            31E2
[ G] LBA3F                            31E3
[ G] LBA44                            31E8
[ G] LBA4F                            31F3
[ G] LBA5C                            3200
[ G] LBA66                            320A
[ G] LBA72                            3216
[ G] LBA78                            321C
[ G] LBA79                            321D
[ G] LBA7B                            321F
[ G] LBA83                            3227
[ G] LBA91                            3235
[ G] LBA92                            3236
[ G] LBA97                            323B
[ G] LBA9A                            323E
[ G] LBAAE                            3252
[ G] LBAB8                            325C
[ G] LBABA                            325E
[ G] LBAC4                            3268
[ G] LBAC5                            3269
[ G] LBACA                            326E
[ G] LBACC                            3270
[ G] LBAD0                            3274
[ G] LBB00                            32A4
[ G] LBB02                            32A6
[ G] LBB03                            32A7
[ G] LBB20                            32C4
[ G] LBB2E                            32D2
[ G] LBB2F                            32D3
[ G] LBB48                            32EC
[ G] LBB5C                            3300
[ G] LBB61                            3305
[ G] LBB63                            3307
[ G] LBB67                            330B
[ G] LBB6A                            330E
[ G] LBB7C                            3320
[ G] LBB7D                            3321
[ G] LBB82                            3326
[ G] LBB89                            332D
[ G] LBB8F                            3333
[ G] LBB91                            3335
[ G] LBBA4                            3348
[ G] LBBBD                            3361
[ G] LBBCC                            3370
[ G] LBBD0                            3374
[ G] LBBDE                            3382
[ G] LBBF8                            339C
[ G] LBBFC                            33A0
[ G] LBC06                            33AA
[ G] LBC0B                            33AF
[ G] LBC14                            33B8
[ G] LBC2A                            33CE
[ G] LBC2F                            33D3
[ G] LBC33                            33D7
[ G] LBC35                            33D9
[ G] LBC4A                            33EE
[ G] LBC4C                            33F0
[ G] LBC5F                            3403
[ G] LBC6D                            3411
[ G] LBC71                            3415
[ G] LBC73                            3417
[ G] LBC79                            341D
[ G] LBC7C                            3420
[ G] LBC82                            3426
[ G] LBC86                            342A
[ G] LBC96                            343A
[ G] LBCA0                            3444
[ G] LBCC3                            3467
[ G] LBCC8                            346C
[ G] LBCD7                            347B
[ G] LBCE4                            3488
[ G] LBD09                            34AD
[ G] LBD11                            34B5
[ G] LBD12                            34B6
[ G] LBD25                            34C9
[ G] LBD2D                            34D1
[ G] LBD31                            34D5
[ G] LBD35                            34DA
[ G] LBD53                            34F9
[ G] LBD55                            34FB
[ G] LBD59                            3500
[ G] LBD61                            3508
[ G] LBD65                            350C
[ G] LBD6F                            3516
[ G] LBD78                            351F
[ G] LBD7F                            3526
[ G] LBD86                            352D
[ G] LBD99                            3540
[ G] LBDA5                            354C
[ G] LBDB6                            355D
[ G] LBDBB                            3562
[ G] LBDC0                            3567
[ G] LBDC5                            356C
[ G] LBDCC                            3573
[ G] LBDD6                            357D
[ G] LBDD9                            3580
[ G] LBDDC                            3583
[ G] LBDE4                            358B
[ G] LBDFF                            35A6
[ G] LBE01                            35A8
[ G] LBE09                            35B0
[ G] LBE18                            35BF
[ G] LBE1F                            35C6
[ G] LBE36                            35DD
[ G] LBE4B                            35F2
[ G] LBE50                            35F7
[ G] LBE72                            3619
[ G] LBE84                            362B
[ G] LBE8C                            3633
[ G] LBE98                            363F
[ G] LBEA3                            364A
[ G] LBEAB                            3652
[ G] LBEB8                            365F
[ G] LBEBA                            3661
[ G] LBEBC                            3663
[ G] LBEC0                            3667
[ G] LBEC5                            366C
[ G] LBEC9                            3670
[ G] LBECD                            3674
[ G] LBED1                            3678
[ G] LBED5                            367C
[ G] LBED9                            3680
[ G] LBEDD                            3684
[ G] LBEE1                            3688
[ G] LBEE5                            368C
[ G] LBEE9                            3690
[ G] LBEEF                            3696
[ G] LBEF0                            3697
[ G] LBEFC                            36A3
[ G] LBEFF                            36A6
[ G] LBF01                            36A8
[ G] LBF0C                            36B3
[ G] LBF38                            36DF
[ G] LBF3B                            36E2
[ G] LBF45                            36EA
[ G] LBFA6                            3749
[ G] LBFA9                            374C
[ G] LBFB7                            375A
[ G] LBFBD                            3760
[ G] LBFC2                            3765
[ G] LBFC7                            376A
[ G] LBFC8                            376B
[ G] LBFCD                            3770
[ G] LBFD2                            3775
[ G] LBFD7                            377A
[ G] LBFDC                            377F
[ G] LBFE1                            3784
[ G] LBUFMX                           00FA
[ G] LEFT                             2E7C
[ G] LEN                              2E52
[ G] LET                              2765
[ G] LINBUF                           DAD7
[ G] LINE                             4454
[ G] LINHDR                           DAD5
[ G] LIST                             2F36
[ G] LOAD                             44AB
[ G] LOADMEMERR                       44F7
[ G] LOG                              3861
[ G] LPTCFW                           0076
[ G] LPTLCF                           0077
[ G] LPTPOS                           0079
[ G] LPTWID                           0078
[ G] LSTTXT                           0066
[ G] MAXLIN                           00FA
[ G] MEM                              2CBF
[ G] MEMSIZ                           0027
[ G] MID                              2EA0
[ G] NEW                              24CC
[ G] NEWLINE                          2037
[ G] NEXT                             28BA
[ G] NMIVEC                           0098
[ G] NOCHAR                           2025
[ G] NONDIRECTSAVE                    44A6
[ G] NUM_SEC_FNS                      001D
[ G] OLDPTR                           002D
[ G] OLDTXT                           0029
[ G] ON                               271A
[ G] PEEK                             2F28
[ G] POKE                             2F2F
[ G] POS                              3AC8
[ G] PRINT                            30C2
[ G] PROGST                           44FC
[ G] PUTCHR                           2027
[ G] PUTEND                           2041
[ G] READ                             2806
[ G] RELFLG                           000A
[ G] RELPTR                           003D
[ G] REM                              26B5
[ G] RENUM                            3DDD
[ G] RESSGN                           0062
[ G] RESTOR                           25B7
[ G] RETURN                           2691
[ G] RIGHT                            2E99
[ G] RND                              36C6
[ G] RSEED                            3717
[ G] RSTFLG                           006E
[ G] RSTVEC                           006F
[ G] RUN                              2647
[ G] RVSEED                           00A4
[ G] SAVE                             445F
[ G] SAVERR                           449E
[ G] SAVFCB                           00BD
[ G] SECTOK                           25AB
[ G] SGN                              341E
[ G] SIN                              371B
[ G] SKP1                             0021
[ G] SKP1LD                           0086
[ G] SKP2                             008C
[ G] SPACE                            0020
[ G] SQR                              389B
[ G] STARTUP                          2044
[ G] STKBUF                           003A
[ G] STOP                             25DA
[ G] STR                              2CCE
[ G] STRBUF                           DBD2
[ G] STRDES                           0056
[ G] STRING                           3B61
[ G] STRING_SPACE_SIZE                FFFFF448
[ G] STRSTK                           D800
[ G] STRTAB                           0023
[ G] SW2VEC                           0092
[ G] SW3VEC                           008F
[ G] SWIVEC                           0095
[ G] tag1a                            21D4
[ G] tag1b                            21F8
[ G] tag1c                            21FC
[ G] tag1d                            21FE
[ G] tag1e                            2206
[ G] tag1f                            233A
[ G] tag1g                            233C
[ G] tag1h                            233E
[ G] tag1i                            2340
[ G] tag1j                            2342
[ G] tag1k                            2344
[ G] tag1l                            2348
[ G] tag1m                            2378
[ G] TAN                              379C
[ G] TEMPPT                           000B
[ G] TEMPTR                           000F
[ G] TINPTR                           002F
[ G] TMPLOC                           0003
[ G] TMPTR1                           0011
[ G] TOK_AND                          00AE
[ G] TOK_DATA                         0086
[ G] TOK_DIVIDE                       00AC
[ G] TOK_ELSE                         0084
[ G] TOK_EQUALS                       00B1
[ G] TOK_FF_USR                       FF83
[ G] TOK_FN                           00B3
[ G] TOK_GO                           0081
[ G] TOK_GREATER                      00B0
[ G] TOK_HIGH_EXEC                    00A1
[ G] TOK_IF                           0085
[ G] TOK_INKEY                        0098
[ G] TOK_INPUT                        0089
[ G] TOK_LEFT                         0095
[ G] TOK_LESS                         00B2
[ G] TOK_MID                          0097
[ G] TOK_MINUS                        00AA
[ G] TOK_NOT                          00A6
[ G] TOK_OFF                          00A8
[ G] TOK_OR                           00AF
[ G] TOK_PLUS                         00A9
[ G] TOK_POWER                        00AD
[ G] TOK_PRINT                        0087
[ G] TOK_REM                          0082
[ G] TOK_SNGL_Q                       0083
[ G] TOK_STEP                         00A7
[ G] TOK_SUB                          00A4
[ G] TOK_TAB                          00A2
[ G] TOK_THEN                         00A5
[ G] TOK_TIMES                        00AB
[ G] TOK_TO                           00A3
[ G] TOK_USING                        00B4
[ G] TOK_USR                          0083
[ G] TOPRAM                           0071
[ G] TRCFLG                           0080
[ G] TRELFL                           003F
[ G] TROFF                            3AC4
[ G] TRON                             3AC3
[ G] TXTTAB                           0019
[ G] USR0                             00A9
[ G] USRADR                           0081
[ G] USRJMP                           00A1
[ G] V40                              0040
[ G] V41                              0041
[ G] V42                              0042
[ G] V43                              0043
[ G] V44                              0044
[ G] V45                              0045
[ G] V46                              0046
[ G] V47                              0047
[ G] V48                              0048
[ G] V4A                              004A
[ G] V4B                              004B
[ G] V4D                              004D
[ G] VAB                              007C
[ G] VAC                              007D
[ G] VAD                              007E
[ G] VAE                              007F
[ G] VAL                              2EEA
[ G] VALTYP                           0006
[ G] VARDES                           003B
[ G] VARNAM                           0037
[ G] VARPT                            3AD0
[ G] VARPTR                           0039
[ G] VARTAB                           001B
[ G] VCF                              0083
[ G] VD1                              0085
[ G] VD3                              0087
[ G] VD5                              0089
[ G] VD7                              008B
[ G] VD8                              008C
[ G] VD9                              008D
[ G] VDA                              008E
[ G] XVEC15                           3C5D
[ G] XVEC19                           3BF8
[ G] XVEC9                            4051
[ G] ZERO                             0074
