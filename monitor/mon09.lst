                      (        mon09.asm):00001         ;*
                      (        mon09.asm):00002         ;* MON09: A software debug monitor for the 6809
                      (        mon09.asm):00003         ;*
                      (        mon09.asm):00004         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (        mon09.asm):00005         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and 48K of RAM
                      (        mon09.asm):00006         ;* from $2000-$DFFF. The 8K block from $0000-$1FFF is used for I/O devices
                      (        mon09.asm):00007         ;* etc. MON09 uses 160 bytes of memory at the very top of available RAM,
                      (        mon09.asm):00008         ;* and the user stack pointer is initialized to point to the beginning of
                      (        mon09.asm):00009         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (        mon09.asm):00010         ;*
                      (        mon09.asm):00011         ;* Console and Host I/O device drivers are included for both 6551 and 6552
                      (        mon09.asm):00012         ;* type uarts, which are selected by the set symbol 'utype', and conditionally
                      (        mon09.asm):00013         ;* assembled into the code. THIS FILE MUST BE PROCESSED WITH 'MACRO' PRIOR
                      (        mon09.asm):00014         ;* TO ASSEMBLING WITH ASM09!!! You can modify the I/O drivers to support a
                      (        mon09.asm):00015         ;* different uart device if you wish. The serial I/O drivers are at the very
                      (        mon09.asm):00016         ;* end of the monitor source code (Just before the interrupt vectors).
                      (        mon09.asm):00017         ;*
                      (        mon09.asm):00018         ;* ?COPY.TXT 1985-2007 Dave Dunfield
                      (        mon09.asm):00019         ;* **See COPY.TXT**.
                      (        mon09.asm):00020         ;*
                      (        mon09.asm):00021         ;* HARDWARE INFORMATION
     1997             (        mon09.asm):00022         utype           SET 6551        Uart is 6551
     E000             (        mon09.asm):00023         ROM             = $E000       MON09 code goes here
     DF60             (        mon09.asm):00024         RAM             = $DF60       MON09 data goes here
     0000             (        mon09.asm):00025         SER1            = $0000       Serial Port 1 (Console)
     0004             (        mon09.asm):00026         SER2            = $0004       Serial Port 2 (Host)
     E000             (        mon09.asm):00027         STACK           = RAM+$A0     MON09 Stack (Top of RAM)
                      (        mon09.asm):00028         ;*
                      (        mon09.asm):00029                 ORG     RAM     Internal MON09 variables
                      (        mon09.asm):00030         ;*
                      (        mon09.asm):00031         ;* MON09 INTERNAL MEMORY
                      (        mon09.asm):00032         ;*
DF60                  (        mon09.asm):00033         SWIADR
DF60                  (        mon09.asm):00034                 RMB     2       SWI VECTOR ADDRESS
DF62                  (        mon09.asm):00035         SWI2ADR
DF62                  (        mon09.asm):00036                 RMB     2       SWI2 VECTOR ADDRESS
DF64                  (        mon09.asm):00037         SWI3ADR
DF64                  (        mon09.asm):00038                 RMB     2       SWI3 VECTOR ADDRESS
DF66                  (        mon09.asm):00039         IRQADR
DF66                  (        mon09.asm):00040                 RMB     2       IRQ VECTOR ADDRESS
DF68                  (        mon09.asm):00041         FIRQADR
DF68                  (        mon09.asm):00042                 RMB     2       FIRQ VECTOR ADDRESS
DF6A                  (        mon09.asm):00043         IOCON
DF6A                  (        mon09.asm):00044                 RMB     1       I/O CONFIGURATION BYTE
DF6B                  (        mon09.asm):00045         UART1
DF6B                  (        mon09.asm):00046                 RMB     2       UART 1 ADDRESS
DF6D                  (        mon09.asm):00047         UART2
DF6D                  (        mon09.asm):00048                 RMB     2       UART 2 ADDRESS
DF6F                  (        mon09.asm):00049         SAVCC
DF6F                  (        mon09.asm):00050                 RMB     1       SAVED CONDITION CODE REGISTER
DF70                  (        mon09.asm):00051         SAVA
DF70                  (        mon09.asm):00052                 RMB     1       SAVED 6809 A REGISTER
DF71                  (        mon09.asm):00053         SAVB
DF71                  (        mon09.asm):00054                 RMB     1       SAVED 6809 B REGISTER
DF72                  (        mon09.asm):00055         SAVDP
DF72                  (        mon09.asm):00056                 RMB     1       SAVED DIRECT PAGE REGISTER
DF73                  (        mon09.asm):00057         SAVX
DF73                  (        mon09.asm):00058                 RMB     2       SAVED X REGISTER
DF75                  (        mon09.asm):00059         SAVY
DF75                  (        mon09.asm):00060                 RMB     2       SAVED Y REGISTER
DF77                  (        mon09.asm):00061         SAVU
DF77                  (        mon09.asm):00062                 RMB     2       SAVED U REGISTER
DF79                  (        mon09.asm):00063         SAVPC
DF79                  (        mon09.asm):00064                 RMB     2       SAVED PROGRAM COUNTER
DF7B                  (        mon09.asm):00065         SAVS
DF7B                  (        mon09.asm):00066                 RMB     2       SAVED S REGISTER
DF7D                  (        mon09.asm):00067         TEMP
DF7D                  (        mon09.asm):00068                 RMB     2       TEMPORARY STORAGE
DF7F                  (        mon09.asm):00069         STPFLG
DF7F                  (        mon09.asm):00070                 RMB     1       REGISTER DISPLAY WHILE STEPPING FLAG
DF80                  (        mon09.asm):00071         PTRSAV
DF80                  (        mon09.asm):00072                 RMB     2       SINGLE STEP AND DISASSEMBLER CODE POINTER
DF82                  (        mon09.asm):00073         INSTYP
DF82                  (        mon09.asm):00074                 RMB     1       DISASSEMBLED INSTRUCTION TYPE
DF83                  (        mon09.asm):00075         POSBYT
DF83                  (        mon09.asm):00076                 RMB     1       POSTBYTE STORAGE AREA
DF84                  (        mon09.asm):00077         BRKTAB
DF84                  (        mon09.asm):00078                 RMB     24      BREAKPOINT TABLE
DF9C                  (        mon09.asm):00079         DSPBUF
DF9C                  (        mon09.asm):00080                 RMB     50      DISASSEMBLER DISPLAY BUFFER
DFCE                  (        mon09.asm):00081         INSRAM
DFCE                  (        mon09.asm):00082                 RMB     7       INSTRUCTION EXECUTION ADDRESS
                      (        mon09.asm):00083         ;*
                      (        mon09.asm):00084                 ORG     ROM     MONITOR CODE
                      (        mon09.asm):00085         ;*
                      (        mon09.asm):00086         ;* INITIALIZATIONS.
                      (        mon09.asm):00087         ;*
E000                  (        mon09.asm):00088         RESET
E000 10CEE000         (        mon09.asm):00089                 LDS     #STACK      SET UP STACK
E004 8EDF60           (        mon09.asm):00090                 LDX     #SWIADR     POINT TO START
E007                  (        mon09.asm):00091         CLRRAM
E007 6F80             (        mon09.asm):00092                 CLR     ,X+     CLEAR IT
E009 8CDFCE           (        mon09.asm):00093                 CMPX    #INSRAM     AT BUFFER?
E00C 25F9             (        mon09.asm):00094                 BLO     CLRRAM      KEEP GOING
E00E 8E0000           (        mon09.asm):00095                 LDX     #SER1       GET SERIAL PORT 1
E011 BFDF6B           (        mon09.asm):00096                 STX     >UART1      SET IT UP
E014 17173A           (        mon09.asm):00097                 LBSR    INIT        INITIALIZE IT
E017 8E0004           (        mon09.asm):00098                 LDX     #SER2       GET SERIAL PORT 2
E01A BFDF6D           (        mon09.asm):00099                 STX     >UART2      SET IT UP
E01D 171731           (        mon09.asm):00100                 LBSR    INIT        INITIALIZE IT
E020 8603             (        mon09.asm):00101                 LDA     #3      DEFAULT I/O CONFIGURATION
E022 B7DF6A           (        mon09.asm):00102                 STA     IOCON       SET IT
E025 CCDF60           (        mon09.asm):00103                 LDD     #RAM        DEFAULT STACK AT TOP OF RAM
E028 FDDF7B           (        mon09.asm):00104                 STD     SAVS        SAVE IT
E02B 86D0             (        mon09.asm):00105                 LDA     #$D0        SET CC
E02D B7DF6F           (        mon09.asm):00106                 STA     SAVCC       SAVE IT
E030                  (        mon09.asm):00107         MONITOR
E030 170799           (        mon09.asm):00108                 LBSR    WRMSG       OUTPUT MESSAGE
E033 0A0D             (        mon09.asm):00109                 FCB     $0A,$0D
E035 4D4F4E3039205665 (        mon09.asm):00110                 FCC     'MON09 Version 3.3'
     7273696F6E20332E
     33
E046 0A0D0A           (        mon09.asm):00111                 FCB     $0A,$0D,$0A
E049 3F434F50592E5458 (        mon09.asm):00112                 FCC     '?COPY.TXT 1985-2007 Dave Dunfield'
     5420313938352D32
     3030372044617665
     2044756E6669656C
     64
E06A 0A0D             (        mon09.asm):00113                 FCB     $0A,$0D
E06C 2A2A53656520434F (        mon09.asm):00114                 FCC     '**See COPY.TXT**.'
     50592E5458542A2A
     2E
E07D 0AFF             (        mon09.asm):00115                 FCB     $0A,$FF
E07F                  (        mon09.asm):00116         MAIN
E07F 10CEE000         (        mon09.asm):00117                 LDS     #STACK      FIX STACK IN CASE ERROR
E083 170746           (        mon09.asm):00118                 LBSR    WRMSG       OUTPUT MESSAGE
E086 2A2000           (        mon09.asm):00119                 FCN     '* '
E089 170757           (        mon09.asm):00120                 LBSR    GETECH      GET CHARACTER
E08C 5F               (        mon09.asm):00121                 CLRB    INDICATE NO SECOND CHAR
                      (        mon09.asm):00122         ;* LOOK FOR COMMAND IN TABLE
E08D                  (        mon09.asm):00123         LOOKC
E08D 8EE0C5           (        mon09.asm):00124                 LDX     #CMDTAB     POINT TO COMMAND TABLE
E090 7FDF7D           (        mon09.asm):00125                 CLR     TEMP        INDICATE NO PARTIAL MATCH
E093                  (        mon09.asm):00126         LOOK1
E093 10A381           (        mon09.asm):00127                 CMPD    ,X++        DOES IT MATCH
E096 271E             (        mon09.asm):00128                 BEQ     LOOK3       YES IT DOES
E098 A11E             (        mon09.asm):00129                 CMPA    -2,X        DOES FIRST CHAR MATCH?
E09A 2603             (        mon09.asm):00130                 BNE     LOOK2                             ;NO, DON'T RECORD
E09C 7ADF7D           (        mon09.asm):00131                 DEC     TEMP        SET FLAG
E09F                  (        mon09.asm):00132         LOOK2
E09F 3002             (        mon09.asm):00133                 LEAX    2,X     ADVANCE TO NEXT
E0A1 6D84             (        mon09.asm):00134                 TST     ,X      HAVE WE HIT THE END
E0A3 26EE             (        mon09.asm):00135                 BNE     LOOK1       NO, KEEP LOOKING
E0A5 5D               (        mon09.asm):00136                 TSTB    ALREADY HAVE TWO CHARS?
E0A6 2615             (        mon09.asm):00137                 BNE     ERROR       YES, ERROR
E0A8 F6DF7D           (        mon09.asm):00138                 LDB     TEMP        ANY PARTIAL MATCHES?
E0AB 2710             (        mon09.asm):00139                 BEQ     ERROR       NO, ERROR
E0AD 1F89             (        mon09.asm):00140                 TFR     A,B     SAVE CHAR IN 'A'
E0AF 170731           (        mon09.asm):00141                 LBSR    GETECH      GET NEXT CHAR
E0B2 1E89             (        mon09.asm):00142                 EXG     A,B     SWAP BACK
E0B4 20D7             (        mon09.asm):00143                 BRA     LOOKC       AND CONTINUE
                      (        mon09.asm):00144         ;* COMMAND WAS FOUND, EXECUTE IT
E0B6                  (        mon09.asm):00145         LOOK3
E0B6 170738           (        mon09.asm):00146                 LBSR    SPACE       OUTPUT SPACE
E0B9 AD94             (        mon09.asm):00147                 JSR     [,X]        EXECUTE COMMAND
E0BB 20C2             (        mon09.asm):00148                 BRA     MAIN        AND RETURN
                      (        mon09.asm):00149         ;* ERROR HAS OCCURED
E0BD                  (        mon09.asm):00150         ERROR
E0BD 17070C           (        mon09.asm):00151                 LBSR    WRMSG       OUTPUT MESSAGE
E0C0 203F             (        mon09.asm):00152                 FCC     ' ?'
E0C2 FF               (        mon09.asm):00153                 FCB     $FF
E0C3 20BA             (        mon09.asm):00154                 BRA     MAIN        TRY AGAIN
                      (        mon09.asm):00155         ;* COMMAND LOOKUP TABLE
E0C5                  (        mon09.asm):00156         CMDTAB
E0C5 444D             (        mon09.asm):00157                 FCB     'D','M'     DISPLAY MEMORY
E0C7 E160             (        mon09.asm):00158                 FDB     MEMORY
E0C9 4449             (        mon09.asm):00159                 FCB     'D','I'     DISASSEMBLE
E0CB E204             (        mon09.asm):00160                 FDB     DISASM
E0CD 4452             (        mon09.asm):00161                 FCB     'D','R'     DISPLAY REGISTERS
E0CF E2C9             (        mon09.asm):00162                 FDB     DISREG
E0D1 4442             (        mon09.asm):00163                 FCB     'D','B'     VIEW BREAKPOINTS
E0D3 E39A             (        mon09.asm):00164                 FDB     DSPBRK
E0D5 4456             (        mon09.asm):00165                 FCB     'D','V'     DISPLAY VECTORS
E0D7 E226             (        mon09.asm):00166                 FDB     DISVEC
E0D9 4455             (        mon09.asm):00167                 FCB     'D','U'     DISPLAY UARTS
E0DB E25D             (        mon09.asm):00168                 FDB     DISURT
E0DD 4352             (        mon09.asm):00169                 FCB     'C','R'     CHANGE REGISTER
E0DF E345             (        mon09.asm):00170                 FDB     CHGREG
E0E1 4356             (        mon09.asm):00171                 FCB     'C','V'     CHANGE VECTORS
E0E3 E276             (        mon09.asm):00172                 FDB     CHGVEC
E0E5 4355             (        mon09.asm):00173                 FCB     'C','U'     CHANGE UARTS
E0E7 E2A8             (        mon09.asm):00174                 FDB     CHGURT      DO IT
E0E9 4500             (        mon09.asm):00175                 FCB     'E',0       SUBSTITUTE MEMORY
E0EB E1C1             (        mon09.asm):00176                 FDB     SUBMEM
E0ED 4C00             (        mon09.asm):00177                 FCB     'L',0       DOWNLOAD
E0EF E60D             (        mon09.asm):00178                 FDB     LOAD
E0F1 4200             (        mon09.asm):00179                 FCB     'B',0       SET BREAKPOINT
E0F3 E3D4             (        mon09.asm):00180                 FDB     SETBRK
E0F5 5300             (        mon09.asm):00181                 FCB     'S',0       STEP
E0F7 E3F4             (        mon09.asm):00182                 FDB     GOSTEP
E0F9 4700             (        mon09.asm):00183                 FCB     'G',0       GO
E0FB E41E             (        mon09.asm):00184                 FDB     GOEXEC
E0FD 5400             (        mon09.asm):00185                 FCB     'T',0       TRANSPARENT MODE
E0FF E5E9             (        mon09.asm):00186                 FDB     TMODE
E101 464D             (        mon09.asm):00187                 FCB     'F','M'     FILL MEMORY
E103 E12E             (        mon09.asm):00188                 FDB     FILMEM
E105 5252             (        mon09.asm):00189                 FCB     'R','R'     REPEATING READ
E107 E45D             (        mon09.asm):00190                 FDB     RDLOOP
E109 5257             (        mon09.asm):00191                 FCB     'R','W'     REPEATING WRITE
E10B E46D             (        mon09.asm):00192                 FDB     WRLOOP
E10D 4D54             (        mon09.asm):00193                 FCB     'M','T'     MEMORY TEST
E10F E4B7             (        mon09.asm):00194                 FDB     RAMTEST
E111 5700             (        mon09.asm):00195                 FCB     'W',0       WRITE MEMORY
E113 E1B1             (        mon09.asm):00196                 FDB     WRIMEM
E115 4D4D             (        mon09.asm):00197                 FCB     'M','M'     MOVE MEMORY
E117 E146             (        mon09.asm):00198                 FDB     MOVMEM
E119 5852             (        mon09.asm):00199                 FCB     'X','R'     REPEATING 16 BIT READ
E11B E48C             (        mon09.asm):00200                 FDB     XRLOOP
E11D 5857             (        mon09.asm):00201                 FCB     'X','W'     REPEATING 16 BIT WRITE
E11F E49C             (        mon09.asm):00202                 FDB     XWLOOP
E121 2B00             (        mon09.asm):00203                 FCB     '+',0       HEX ADDITION
E123 E588             (        mon09.asm):00204                 FDB     HEXADD
E125 2D00             (        mon09.asm):00205                 FCB     '-',0       HEX SUBTRACTION
E127 E599             (        mon09.asm):00206                 FDB     HEXSUB
E129 3F00             (        mon09.asm):00207                 FCB     '?',0       HELP COMMAND
E12B E5BB             (        mon09.asm):00208                 FDB     HELP
E12D 00               (        mon09.asm):00209                 FCB     0       MARK END OF TABLE
                      (        mon09.asm):00210         ;*
                      (        mon09.asm):00211         ;* 'F' - FILL MEMORY
                      (        mon09.asm):00212         ;*
E12E                  (        mon09.asm):00213         FILMEM
E12E 1705E2           (        mon09.asm):00214                 LBSR    GETRNG      GET ADDRESSES
E131 FDDF7D           (        mon09.asm):00215                 STD     TEMP        SAVE IT
E134 1706BA           (        mon09.asm):00216                 LBSR    SPACE       SPACE OVER
E137 17063D           (        mon09.asm):00217                 LBSR    GETBYT      GET DATA BYTE
E13A 2681             (        mon09.asm):00218                 BNE     ERROR       INVALID
E13C                  (        mon09.asm):00219         FILL1
E13C A780             (        mon09.asm):00220                 STA     ,X+     WRITE IT
E13E BCDF7D           (        mon09.asm):00221                 CMPX    TEMP        ARE WE THERE
E141 23F9             (        mon09.asm):00222                 BLS     FILL1       NO, KEEP GOING
E143 1606B1           (        mon09.asm):00223                 LBRA    LFCR        NEW LINE
                      (        mon09.asm):00224         ;*
                      (        mon09.asm):00225         ;* 'MM' - MOVE MEMORY
                      (        mon09.asm):00226         ;*
E146                  (        mon09.asm):00227         MOVMEM
E146 1705CA           (        mon09.asm):00228                 LBSR    GETRNG      GET A RANGE
E149 FDDF7D           (        mon09.asm):00229                 STD     TEMP        SAVE LAST VALUE
E14C 1706A2           (        mon09.asm):00230                 LBSR    SPACE       SEPERATOR
E14F 1705DE           (        mon09.asm):00231                 LBSR    GETADR      GET DEST ADDRESS
E152 1F02             (        mon09.asm):00232                 TFR     D,Y     SET IT UP
E154                  (        mon09.asm):00233         MOVM1
E154 A680             (        mon09.asm):00234                 LDA     ,X+     GET SOURCE BYTE
E156 A7A0             (        mon09.asm):00235                 STA     ,Y+     SAVE IN DEST
E158 BCDF7D           (        mon09.asm):00236                 CMPX    TEMP        SAVE IT
E15B 23F7             (        mon09.asm):00237                 BLS     MOVM1       KEEP MOVEING
E15D 160697           (        mon09.asm):00238                 LBRA    LFCR        NEW LINE
                      (        mon09.asm):00239         ;*
                      (        mon09.asm):00240         ;* 'DM' - DISPLAY MEMORY
                      (        mon09.asm):00241         ;*
E160                  (        mon09.asm):00242         MEMORY
E160 1705B0           (        mon09.asm):00243                 LBSR    GETRNG      GET ADDRESS
E163 FDDF7D           (        mon09.asm):00244                 STD     TEMP        SAVE
E166                  (        mon09.asm):00245         MEM1
E166 17068E           (        mon09.asm):00246                 LBSR    LFCR        NEW LINE
E169 1706CA           (        mon09.asm):00247                 LBSR    CHKCHR      CHECK FOR CHAR
E16C 1027FF0F         (        mon09.asm):00248                 LBEQ    MAIN        ESCAPE, QUIT
E170 1F10             (        mon09.asm):00249                 TFR     X,D     GET ADDRESS
E172 3406             (        mon09.asm):00250                 PSHS    A,B     SAVE FOR LATER
E174 17063B           (        mon09.asm):00251                 LBSR    WRDOUT      DISPLAY
E177 C610             (        mon09.asm):00252                 LDB     #16     DISPLAY 16 TO A LINE
E179                  (        mon09.asm):00253         MEM2
E179 170675           (        mon09.asm):00254                 LBSR    SPACE       OUTPUT A SPACE
E17C C503             (        mon09.asm):00255                 BITB    #3      ON A BOUNDARY?
E17E 2603             (        mon09.asm):00256                 BNE     MEM3        NO, SPACE
E180 17066E           (        mon09.asm):00257                 LBSR    SPACE       EXTRA SPACE
E183                  (        mon09.asm):00258         MEM3
E183 A680             (        mon09.asm):00259                 LDA     ,X+     GET BYTE
E185 17062E           (        mon09.asm):00260                 LBSR    HEXOUT      DISPLAY
E188 5A               (        mon09.asm):00261                 DECB    REDUCE COUNT
E189 26EE             (        mon09.asm):00262                 BNE     MEM2        CONTINUE
E18B C604             (        mon09.asm):00263                 LDB     #4      FOUR SPACE
E18D                  (        mon09.asm):00264         MEM4
E18D 170661           (        mon09.asm):00265                 LBSR    SPACE       DISPLAY A SPACE
E190 5A               (        mon09.asm):00266                 DECB    REDUCE COUNT
E191 26FA             (        mon09.asm):00267                 BNE     MEM4        CONTINUE
E193 3510             (        mon09.asm):00268                 PULS    X       RESTORE X
E195 C610             (        mon09.asm):00269                 LDB     #16     COUNT OF 16
E197                  (        mon09.asm):00270         MEM5
E197 A680             (        mon09.asm):00271                 LDA     ,X+     GET CHAR
E199 8120             (        mon09.asm):00272                 CMPA    #' '        <SPACE
E19B 2504             (        mon09.asm):00273                 BLO     MEM6        CONVERT TO DOT
E19D 817F             (        mon09.asm):00274                 CMPA    #$7F        PRINTABLE?
E19F 2502             (        mon09.asm):00275                 BLO     MEM7        OK TO DISPLAY
E1A1                  (        mon09.asm):00276         MEM6
E1A1 862E             (        mon09.asm):00277                 LDA     #'.'        CHANGE TO DOT
E1A3                  (        mon09.asm):00278         MEM7
E1A3 170672           (        mon09.asm):00279                 LBSR    PUTCHR      OUTPUT
E1A6 5A               (        mon09.asm):00280                 DECB    REDUCE COUNT
E1A7 26EE             (        mon09.asm):00281                 BNE     MEM5        DISPLAY THEM ALL
E1A9 BCDF7D           (        mon09.asm):00282                 CMPX    TEMP        PAST END?
E1AC 23B8             (        mon09.asm):00283                 BLS     MEM1        NO, KEEP GOING
E1AE 160646           (        mon09.asm):00284                 LBRA    LFCR        NEW LINE
                      (        mon09.asm):00285         ;*
                      (        mon09.asm):00286         ;* 'W' - WRITE TO MEMORY
                      (        mon09.asm):00287         ;*
E1B1                  (        mon09.asm):00288         WRIMEM
E1B1 17057C           (        mon09.asm):00289                 LBSR    GETADR      GET ADDRESS
E1B4 1F01             (        mon09.asm):00290                 TFR     D,X     SET IT UP
E1B6 170638           (        mon09.asm):00291                 LBSR    SPACE       STEP OVER
E1B9 1705BB           (        mon09.asm):00292                 LBSR    GETBYT      GET BYTE
E1BC A784             (        mon09.asm):00293                 STA     ,X      WRITE TO MEMORY
E1BE 160636           (        mon09.asm):00294                 LBRA    LFCR        NEW LINE
                      (        mon09.asm):00295         ;*
                      (        mon09.asm):00296         ;* 'E' - EDIT MEMORY
                      (        mon09.asm):00297         ;*
E1C1                  (        mon09.asm):00298         SUBMEM
E1C1 17056C           (        mon09.asm):00299                 LBSR    GETADR      GET ADDRESS
E1C4 1F01             (        mon09.asm):00300                 TFR     D,X     COPY
E1C6                  (        mon09.asm):00301         SUBM1
E1C6 17062E           (        mon09.asm):00302                 LBSR    LFCR        NEW LINE
E1C9 1F10             (        mon09.asm):00303                 TFR     X,D     GET ADDRESS
E1CB 1705E4           (        mon09.asm):00304                 LBSR    WRDOUT      OUTPUT
E1CE C608             (        mon09.asm):00305                 LDB     #8      NEW COUNT
E1D0                  (        mon09.asm):00306         SUBM2
E1D0 17061E           (        mon09.asm):00307                 LBSR    SPACE       SEPERATOR
E1D3 A684             (        mon09.asm):00308                 LDA     ,X      GET BYTE
E1D5 1705DE           (        mon09.asm):00309                 LBSR    HEXOUT      DISPLAY
E1D8 862D             (        mon09.asm):00310                 LDA     #'-'        PROMPT
E1DA 17063B           (        mon09.asm):00311                 LBSR    PUTCHR      OUTPUT
E1DD 170597           (        mon09.asm):00312                 LBSR    GETBYT      GET A BYTE
E1E0 2609             (        mon09.asm):00313                 BNE     SUBM4       INVALID
E1E2 A784             (        mon09.asm):00314                 STA     ,X      RESAVE
E1E4                  (        mon09.asm):00315         SUBM3
E1E4 3001             (        mon09.asm):00316                 LEAX    1,X     ADVANCE
E1E6 5A               (        mon09.asm):00317                 DECB    REDUCE COUNT
E1E7 26E7             (        mon09.asm):00318                 BNE     SUBM2       MORE, CONTINUE
E1E9 20DB             (        mon09.asm):00319                 BRA     SUBM1       NEW LINE
E1EB                  (        mon09.asm):00320         SUBM4
E1EB 810D             (        mon09.asm):00321                 CMPA    #$0D        CR?
E1ED 10270606         (        mon09.asm):00322                 LBEQ    LFCR        IF SO, QUIT
E1F1 8120             (        mon09.asm):00323                 CMPA    #' '        SPACE?
E1F3 2605             (        mon09.asm):00324                 BNE     SUBM5       NO
E1F5 1705F9           (        mon09.asm):00325                 LBSR    SPACE       FILL FOR TWO DIGITS
E1F8 20EA             (        mon09.asm):00326                 BRA     SUBM3       ADVANCE
E1FA                  (        mon09.asm):00327         SUBM5
E1FA 8108             (        mon09.asm):00328                 CMPA    #$08        BACKSPACE?
E1FC 1026FEBD         (        mon09.asm):00329                 LBNE    ERROR       INVALID
E200 301F             (        mon09.asm):00330                 LEAX    -1,X        BACKUP
E202 20C2             (        mon09.asm):00331                 BRA     SUBM1       NEW LINE
                      (        mon09.asm):00332         ;*
                      (        mon09.asm):00333         ;* 'DI' - DISASSEMBLE
                      (        mon09.asm):00334         ;*
E204                  (        mon09.asm):00335         DISASM
E204 17050C           (        mon09.asm):00336                 LBSR    GETRNG      GET ADDRESS
E207 FDDF7D           (        mon09.asm):00337                 STD     TEMP        SAVE
E20A 1F12             (        mon09.asm):00338                 TFR     X,Y     COPY TO Y
E20C 1705E8           (        mon09.asm):00339                 LBSR    LFCR        NEW LINE
E20F CEDF9C           (        mon09.asm):00340                 LDU     #DSPBUF     POINT TO INPUT BUFFER
E212                  (        mon09.asm):00341         DISS1
E212 170901           (        mon09.asm):00342                 LBSR    DISASS      DISASSEMBLE
E215 1F31             (        mon09.asm):00343                 TFR     U,X     COPY
E217 1705BC           (        mon09.asm):00344                 LBSR    WRLIN       OUTPUT
E21A 170619           (        mon09.asm):00345                 LBSR    CHKCHR      END?
E21D 2706             (        mon09.asm):00346                 BEQ     DISS2       YES, QUIT
E21F 10BCDF7D         (        mon09.asm):00347                 CMPY    TEMP        OVER?
E223 25ED             (        mon09.asm):00348                 BLO     DISS1       TRY AGAIN
E225                  (        mon09.asm):00349         DISS2
E225 39               (        mon09.asm):00350                 RTS
                      (        mon09.asm):00351         ;*
                      (        mon09.asm):00352         ;* 'DV' - DISPLAY VECTORS
                      (        mon09.asm):00353         ;*
E226                  (        mon09.asm):00354         DISVEC
E226 8EE23C           (        mon09.asm):00355                 LDX     #VECTXT     POINT TO VECTOR TEXT
E229 108EDF60         (        mon09.asm):00356                 LDY     #SWIADR     POINT TO FIRST VECTOR
E22D                  (        mon09.asm):00357         DISV1
E22D 1705A6           (        mon09.asm):00358                 LBSR    WRLIN       OUTPUT A MESSAGE
E230 ECA1             (        mon09.asm):00359                 LDD     ,Y++        GET A VECTOR
E232 17057D           (        mon09.asm):00360                 LBSR    WRDOUT      OUTPUT VECTOR ADDRESS
E235 A684             (        mon09.asm):00361                 LDA     ,X      MORE TEXT?
E237 26F4             (        mon09.asm):00362                 BNE     DISV1       AND CONTINUE
E239 1605BB           (        mon09.asm):00363                 LBRA    LFCR        NEW LINE
E23C                  (        mon09.asm):00364         VECTXT
E23C 5357493D00       (        mon09.asm):00365                 FCN     'SWI='
E241 20535749323D00   (        mon09.asm):00366                 FCN     ' SWI2='
E248 20535749333D00   (        mon09.asm):00367                 FCN     ' SWI3='
E24F 204952513D00     (        mon09.asm):00368                 FCN     ' IRQ='
E255 20464952513D00   (        mon09.asm):00369                 FCN     ' FIRQ='
E25C 00               (        mon09.asm):00370                 FCB     0       END OF TABLE
                      (        mon09.asm):00371         ;*
                      (        mon09.asm):00372         ;* 'DU' DISPLAY UARTS
                      (        mon09.asm):00373         ;*
E25D                  (        mon09.asm):00374         DISURT
E25D 8EE266           (        mon09.asm):00375                 LDX     #URTEXT     POINT TO TEXT
E260 108EDF6B         (        mon09.asm):00376                 LDY     #UART1      POINT TO UART
E264 20C7             (        mon09.asm):00377                 BRA     DISV1       DISPLAY IT
E266                  (        mon09.asm):00378         URTEXT
E266 55415254313D00   (        mon09.asm):00379                 FCN     'UART1='
E26D 2055415254323D00 (        mon09.asm):00380                 FCN     ' UART2='
E275 00               (        mon09.asm):00381                 FCB     0
                      (        mon09.asm):00382         ;*
                      (        mon09.asm):00383         ;* 'CV' - CHANGE VECTOR
                      (        mon09.asm):00384         ;*
E276                  (        mon09.asm):00385         CHGVEC
E276 17056A           (        mon09.asm):00386                 LBSR    GETECH      GET CHAR & ECHO
E279 8153             (        mon09.asm):00387                 CMPA    #'S'        SWI?
E27B 2604             (        mon09.asm):00388                 BNE     CHGV1       NO
E27D 8631             (        mon09.asm):00389                 LDA     #'1'        SAME AS '1'
E27F 200E             (        mon09.asm):00390                 BRA     CHGV3       CONTINUE
E281                  (        mon09.asm):00391         CHGV1
E281 8149             (        mon09.asm):00392                 CMPA    #'I'        IRQ?
E283 2604             (        mon09.asm):00393                 BNE     CHGV2       NO, ITS OK
E285 8634             (        mon09.asm):00394                 LDA     #'4'        CONVERT
E287 2006             (        mon09.asm):00395                 BRA     CHGV3       AND CONTINUE
E289                  (        mon09.asm):00396         CHGV2
E289 8146             (        mon09.asm):00397                 CMPA    #'F'        FIRQ?
E28B 2602             (        mon09.asm):00398                 BNE     CHGV3       NO
E28D 8635             (        mon09.asm):00399                 LDA     #'5'        CONVERT
E28F                  (        mon09.asm):00400         CHGV3
E28F 8031             (        mon09.asm):00401                 SUBA    #'1'        TEST IT
E291 8104             (        mon09.asm):00402                 CMPA    #4      CHECK RANGE
E293 1022FE26         (        mon09.asm):00403                 LBHI    ERROR       INVALID
E297 8EDF60           (        mon09.asm):00404                 LDX     #SWIADR     POINT TO IT
E29A                  (        mon09.asm):00405         CHGV4
E29A 48               (        mon09.asm):00406                 LSLA    X2 FOR 2 BYTE ENTRIES
E29B 3086             (        mon09.asm):00407                 LEAX    A,X     ADVANCE TO VECTOR
E29D 170551           (        mon09.asm):00408                 LBSR    SPACE       SEPERATOR
E2A0 17048D           (        mon09.asm):00409                 LBSR    GETADR      GET NEW VALUE
E2A3 ED84             (        mon09.asm):00410                 STD     ,X      WRITE NEW VECTOR
E2A5 16054F           (        mon09.asm):00411                 LBRA    LFCR        NEW LINE & EXIT
                      (        mon09.asm):00412         ;*
                      (        mon09.asm):00413         ;* 'CU' - CHANGE UART ADDRESS
                      (        mon09.asm):00414         ;*
E2A8                  (        mon09.asm):00415         CHGURT
E2A8 170538           (        mon09.asm):00416                 LBSR    GETECH      GET AND ECHO
E2AB 8031             (        mon09.asm):00417                 SUBA    #'1'        CONVERT
E2AD 8101             (        mon09.asm):00418                 CMPA    #1      IN RANGE?
E2AF 1022FE0A         (        mon09.asm):00419                 LBHI    ERROR       INVALID
E2B3 8EDF6B           (        mon09.asm):00420                 LDX     #UART1      POINT TO IT
E2B6 48               (        mon09.asm):00421                 LSLA    X2 FOR 2 BYTE ENTRIES
E2B7 3086             (        mon09.asm):00422                 LEAX    A,X     ADVANCE TO IT
E2B9 170535           (        mon09.asm):00423                 LBSR    SPACE       SEPERATOR
E2BC 170471           (        mon09.asm):00424                 LBSR    GETADR      GET ADDRESS
E2BF ED84             (        mon09.asm):00425                 STD     ,X      SET IT
E2C1 1F01             (        mon09.asm):00426                 TFR     D,X     SET UP POINTER
E2C3 17148B           (        mon09.asm):00427                 LBSR    INIT        INITIALIZE IT
E2C6 16052E           (        mon09.asm):00428                 LBRA    LFCR        NEW LINE
                      (        mon09.asm):00429         ;*
                      (        mon09.asm):00430         ;* 'DR' - DISPLAY REGISTERS
                      (        mon09.asm):00431         ;*
E2C9                  (        mon09.asm):00432         DISREG
E2C9 8EE313           (        mon09.asm):00433                 LDX     #REGTXT     POINT TO TEXT
E2CC 108EDF6F         (        mon09.asm):00434                 LDY     #SAVCC      POINT TO VALUE
E2D0 8D31             (        mon09.asm):00435                 BSR     RSUB1       'CC='
E2D2 170501           (        mon09.asm):00436                 LBSR    WRLIN       ' ['
E2D5 CEE33D           (        mon09.asm):00437                 LDU     #CCBITS     POINT TO BIT TABLE
E2D8 E63F             (        mon09.asm):00438                 LDB     -1,Y        GET BITS BACK
E2DA 3420             (        mon09.asm):00439                 PSHS    Y       SAVE POINTER
E2DC 108E0008         (        mon09.asm):00440                 LDY     #8      EIGHT BITS IN BYTE
E2E0                  (        mon09.asm):00441         REGB1
E2E0 A6C0             (        mon09.asm):00442                 LDA     ,U+     GET BIT IDENTIFIER
E2E2 58               (        mon09.asm):00443                 ASLB    IS IT SET?
E2E3 2502             (        mon09.asm):00444                 BCS     RBITS       YES, DISPLAY IT
E2E5 862D             (        mon09.asm):00445                 LDA     #'-'        NO, DISPLAY DASH
E2E7                  (        mon09.asm):00446         RBITS
E2E7 17052E           (        mon09.asm):00447                 LBSR    PUTCHR      OUTPUT A CHARACTER
E2EA 313F             (        mon09.asm):00448                 LEAY    -1,Y        REDUCE COUNT
E2EC 26F2             (        mon09.asm):00449                 BNE     REGB1       MORE TO GO
E2EE 3520             (        mon09.asm):00450                 PULS    Y       RESTORE Y
E2F0 8D11             (        mon09.asm):00451                 BSR     RSUB1       '] A='
E2F2 8D0F             (        mon09.asm):00452                 BSR     RSUB1       ' B='
E2F4 8D0D             (        mon09.asm):00453                 BSR     RSUB1       ' DP='
E2F6 8D13             (        mon09.asm):00454                 BSR     RSUB2       ' X='
E2F8 8D11             (        mon09.asm):00455                 BSR     RSUB2       ' Y='
E2FA 8D0F             (        mon09.asm):00456                 BSR     RSUB2       ' U='
E2FC 8D0D             (        mon09.asm):00457                 BSR     RSUB2       ' PC='
E2FE 8D0B             (        mon09.asm):00458                 BSR     RSUB2       ' S='
E300 1604F4           (        mon09.asm):00459                 LBRA    LFCR        QUIT
                      (        mon09.asm):00460         ;* DISPLAY 8 BIT REGISTER VALUE
E303                  (        mon09.asm):00461         RSUB1
E303 1704D0           (        mon09.asm):00462                 LBSR    WRLIN       OUTPUT BYTE VALUE
E306 A6A0             (        mon09.asm):00463                 LDA     ,Y+     GET REGISTER VALUE
E308 1604AB           (        mon09.asm):00464                 LBRA    HEXOUT      OUTPUT IN HEX
                      (        mon09.asm):00465         ;* DISPLAY 16 BIT REGISTER VALUE
E30B                  (        mon09.asm):00466         RSUB2
E30B 1704C8           (        mon09.asm):00467                 LBSR    WRLIN       OUTPUT WORD VALUE
E30E ECA1             (        mon09.asm):00468                 LDD     ,Y++        GET REGISTER VALUE
E310 16049F           (        mon09.asm):00469                 LBRA    WRDOUT      OUTPUT IN HEX
                      (        mon09.asm):00470         ;* TABLE OF TEXT FOR REGISTER DISPLAY
E313                  (        mon09.asm):00471         REGTXT
E313 43433D00         (        mon09.asm):00472                 FCN     'CC='
E317 205B00           (        mon09.asm):00473                 FCN     ' ['
E31A 5D20413D00       (        mon09.asm):00474                 FCN     '] A='
E31F 20423D00         (        mon09.asm):00475                 FCN     ' B='
E323 2044503D00       (        mon09.asm):00476                 FCN     ' DP='
E328 20583D00         (        mon09.asm):00477                 FCN     ' X='
E32C 20593D00         (        mon09.asm):00478                 FCN     ' Y='
E330 20553D00         (        mon09.asm):00479                 FCN     ' U='
E334 2050433D00       (        mon09.asm):00480                 FCN     ' PC='
E339 20533D00         (        mon09.asm):00481                 FCN     ' S='
                      (        mon09.asm):00482         ;* TABLE OF CONDITION CODE BIT MEANINGS
E33D                  (        mon09.asm):00483         CCBITS
E33D 454648494E5A5643 (        mon09.asm):00484                 FCC     'EFHINZVC'
                      (        mon09.asm):00485         ;*
                      (        mon09.asm):00486         ;* 'CR' - CHANGE REGISTER
                      (        mon09.asm):00487         ;*
E345                  (        mon09.asm):00488         CHGREG
E345 17049B           (        mon09.asm):00489                 LBSR    GETECH      GET OPERAND
E348 8120             (        mon09.asm):00490                 CMPA    #' '        A+B?
E34A 2727             (        mon09.asm):00491                 BEQ     CHG4        YES
E34C 8EE390           (        mon09.asm):00492                 LDX     #CHGTAB     POINT TO TABLE
E34F 5F               (        mon09.asm):00493                 CLRB    ZERO INDICATOR
E350                  (        mon09.asm):00494         CHG1
E350 A184             (        mon09.asm):00495                 CMPA    ,X      IS THIS IT?
E352 2708             (        mon09.asm):00496                 BEQ     CHG2        YES
E354 5C               (        mon09.asm):00497                 INCB    ADVANCE COUNT
E355 6D80             (        mon09.asm):00498                 TST     ,X+     END OF TABLE
E357 26F7             (        mon09.asm):00499                 BNE     CHG1        NO, KEEP TRYING
E359 16FD61           (        mon09.asm):00500                 LBRA    ERROR       INDICATE ERROR
E35C                  (        mon09.asm):00501         CHG2
E35C 170492           (        mon09.asm):00502                 LBSR    SPACE       OUTPUT SPACE
E35F 8EDF6F           (        mon09.asm):00503                 LDX     #SAVCC      POINT TO START OF REGISTERS
E362 C104             (        mon09.asm):00504                 CMPB    #4      16 BIT?
E364 241B             (        mon09.asm):00505                 BHS     R16     YES
E366 3085             (        mon09.asm):00506                 LEAX    B,X     OFFSET TO ADDRESS
E368 17040C           (        mon09.asm):00507                 LBSR    GETBYT      GET NEW VALUE
E36B 1026FD4E         (        mon09.asm):00508                 LBNE    ERROR       INVALID
E36F A784             (        mon09.asm):00509                 STA     ,X      SAVE IN REGISTER
E371 201A             (        mon09.asm):00510                 BRA     CHG3        AND QUIT
E373                  (        mon09.asm):00511         CHG4
E373 170456           (        mon09.asm):00512                 LBSR    WRMSG       OUTPUT MESSAGE
E376 5B41425D2000     (        mon09.asm):00513                 FCN     '[AB] '
E37C 8EDF70           (        mon09.asm):00514                 LDX     #SAVA       POINT TO 'D'
E37F 2007             (        mon09.asm):00515                 BRA     R17     MAKE LIKE 16 BIT REG
E381                  (        mon09.asm):00516         R16
E381 3004             (        mon09.asm):00517                 LEAX    4,X     OFFSET TO 16 BIT REGISTERS
E383 C004             (        mon09.asm):00518                 SUBB    #4      CONVERT TO ZERO ORIGIN
E385 58               (        mon09.asm):00519                 LSLB    DOUBLE FOR WORD VALUES
E386 3085             (        mon09.asm):00520                 LEAX    B,X     MOVE TO CORRECT OFFSET
E388                  (        mon09.asm):00521         R17
E388 1703A5           (        mon09.asm):00522                 LBSR    GETADR      GET WORD VALUE
E38B ED84             (        mon09.asm):00523                 STD     ,X      SET REGISTER VALUE
E38D                  (        mon09.asm):00524         CHG3
E38D 160467           (        mon09.asm):00525                 LBRA    LFCR        QUIT
                      (        mon09.asm):00526         ;* TABLE OF REGISTER NAMES
E390                  (        mon09.asm):00527         CHGTAB
E390 4341424458595550 (        mon09.asm):00528                 FCN     'CABDXYUPS'
     5300
                      (        mon09.asm):00529         ;*
                      (        mon09.asm):00530         ;* 'DB' - DISPLAY BREAKPOINTS
                      (        mon09.asm):00531         ;*
E39A                  (        mon09.asm):00532         DSPBRK
E39A 8630             (        mon09.asm):00533                 LDA     #'0'        START WITH BRKPT ZERO
E39C 8EDF84           (        mon09.asm):00534                 LDX     #BRKTAB     POINT TO TABLE
E39F                  (        mon09.asm):00535         DSPB1
E39F 3402             (        mon09.asm):00536                 PSHS    A       SAVE NUMBER
E3A1 8642             (        mon09.asm):00537                 LDA     #'B'        PRECEDE WITH 'B'
E3A3 170472           (        mon09.asm):00538                 LBSR    PUTCHR      OUTPUT
E3A6 A6E4             (        mon09.asm):00539                 LDA     ,S      GET NUMBER BACK
E3A8 17046D           (        mon09.asm):00540                 LBSR    PUTCHR      OUTPUT
E3AB 863D             (        mon09.asm):00541                 LDA     #'='        AND FOLLOW WITH '='
E3AD 170468           (        mon09.asm):00542                 LBSR    PUTCHR      OUTPUT
E3B0 EC81             (        mon09.asm):00543                 LDD     ,X++        GET VALUE
E3B2 260E             (        mon09.asm):00544                 BNE     DSPB2       NON-ZERO, DISPLAY
E3B4 170415           (        mon09.asm):00545                 LBSR    WRMSG       OUTPUT MESSAGE INSTEAD
E3B7 3B2A3B2A3B2A3B2A (        mon09.asm):00546                 FCN     ';*;*;*;*'
     00
E3C0 2003             (        mon09.asm):00547                 BRA     DSPB3       CONTINUE
E3C2                  (        mon09.asm):00548         DSPB2
E3C2 1703ED           (        mon09.asm):00549                 LBSR    WRDOUT      OUTPUT VALUE
E3C5                  (        mon09.asm):00550         DSPB3
E3C5 170429           (        mon09.asm):00551                 LBSR    SPACE       SEPERATE WITH SPACE
E3C8 3001             (        mon09.asm):00552                 LEAX    1,X     SKIP OPCODE SAVE
E3CA 3502             (        mon09.asm):00553                 PULS    A       RESTORE NUMBER
E3CC 4C               (        mon09.asm):00554                 INCA    ADVANCE
E3CD 8138             (        mon09.asm):00555                 CMPA    #'8'        BEYOND END?
E3CF 25CE             (        mon09.asm):00556                 BLO     DSPB1       NO, CONTINUE
E3D1 160423           (        mon09.asm):00557                 LBRA    LFCR        NEW LINE AND QUIT
                      (        mon09.asm):00558         ;*
                      (        mon09.asm):00559         ;* 'B' - SET BREAKPOINT
                      (        mon09.asm):00560         ;*
E3D4                  (        mon09.asm):00561         SETBRK
E3D4 17040C           (        mon09.asm):00562                 LBSR    GETECH      GET CHARACTER
E3D7 8030             (        mon09.asm):00563                 SUBA    #'0'        CONVERT TO NUMBER
E3D9 8108             (        mon09.asm):00564                 CMPA    #8      IN RANGE?
E3DB 1024FCDE         (        mon09.asm):00565                 LBHS    ERROR       NO, QUIT
E3DF 3402             (        mon09.asm):00566                 PSHS    A       SAVE NUMBER
E3E1 48               (        mon09.asm):00567                 LSLA    DOUBLE FOR 16 BIT VALUES
E3E2 ABE0             (        mon09.asm):00568                 ADDA    ,S+     TRIPLE FOR OPCODE BYTE
E3E4 8EDF84           (        mon09.asm):00569                 LDX     #BRKTAB     POINT TO BREAKPOINT TABLE
E3E7 3086             (        mon09.asm):00570                 LEAX    A,X     ADVANCE TO BREAKPOINT
E3E9 170405           (        mon09.asm):00571                 LBSR    SPACE       SEPERATE WITH SPACE
E3EC 170341           (        mon09.asm):00572                 LBSR    GETADR      GET VALUE
E3EF ED84             (        mon09.asm):00573                 STD     ,X      SAVE IN TABLE
E3F1 160403           (        mon09.asm):00574                 LBRA    LFCR        NEW LINE AND QUIT
                      (        mon09.asm):00575         ;*
                      (        mon09.asm):00576         ;* 'S' - SINGLE STEP
                      (        mon09.asm):00577         ;*
E3F4                  (        mon09.asm):00578         GOSTEP
E3F4 170304           (        mon09.asm):00579                 LBSR    GETPC       GET ADDRESS
E3F7 1703FD           (        mon09.asm):00580                 LBSR    LFCR        OUTPUT MESSAGE
E3FA                  (        mon09.asm):00581         GOSTP1
E3FA 170464           (        mon09.asm):00582                 LBSR    STEPDI      STEP AND DISPLAY INSTRUCTION
E3FD 7DDF7F           (        mon09.asm):00583                 TST     STPFLG      DISPLAY REGISTERS?
E400 2B03             (        mon09.asm):00584                 BMI     NODSR                             ;NO, DON'T DISPLAY
E402                  (        mon09.asm):00585         STPREG
E402 17FEC4           (        mon09.asm):00586                 LBSR    DISREG      DISPLAY REGISTERS
E405                  (        mon09.asm):00587         NODSR
E405 1703FB           (        mon09.asm):00588                 LBSR    GETCHR      GET KEY FROM TERMINAL
E408 813F             (        mon09.asm):00589                 CMPA    #'?'        DISPLAY REGS?
E40A 27F6             (        mon09.asm):00590                 BEQ     STPREG      IF SO, DISPLAY
E40C 8120             (        mon09.asm):00591                 CMPA    #' '        STEP TO NEXT?
E40E 27EA             (        mon09.asm):00592                 BEQ     GOSTP1      IF SO, STEP
E410 811B             (        mon09.asm):00593                 CMPA    #$1B        EXIT STEPPING?
E412 2709             (        mon09.asm):00594                 BEQ     GOSTP2      IF SO, QUIT
E414 810D             (        mon09.asm):00595                 CMPA    #$0D        TOGGLE REGISTER DISPLAY?
E416 26ED             (        mon09.asm):00596                 BNE     NODSR       IF NOT, IGNORE
E418 73DF7F           (        mon09.asm):00597                 COM     STPFLG      TOGGLE DISPLAY FLAG
E41B 20E8             (        mon09.asm):00598                 BRA     NODSR       GET NEXT KEY
E41D                  (        mon09.asm):00599         GOSTP2
E41D 39               (        mon09.asm):00600                 RTS
                      (        mon09.asm):00601         ;*
                      (        mon09.asm):00602         ;* 'G' - GO (EXECUTE)
                      (        mon09.asm):00603         ;*
E41E                  (        mon09.asm):00604         GOEXEC
E41E 1702DA           (        mon09.asm):00605                 LBSR    GETPC       GET ADDRESS
E421 1703D3           (        mon09.asm):00606                 LBSR    LFCR        NEW LINE
                      (        mon09.asm):00607         ;* STEP ONE INST. BEFORE INSERTING BREAKPOINTS, SO THAT BREAKPOINTS
                      (        mon09.asm):00608         ;* CAN BE USED WITHIN LOOPS ETC.
E424 17044B           (        mon09.asm):00609                 LBSR    STEP        STEP ONE INSTRUCTION
                      (        mon09.asm):00610         ;* INSERT BREAKPOINTS
E427 8EDF84           (        mon09.asm):00611                 LDX     #BRKTAB     POINT TO BREAKPOINT TABLE
E42A C608             (        mon09.asm):00612                 LDB     #8      EIGHT BREAKPOINTS
E42C                  (        mon09.asm):00613         GOEX3
E42C 10AE81           (        mon09.asm):00614                 LDY     ,X++        GET BREAKPOINT ADDRESS
E42F 2708             (        mon09.asm):00615                 BEQ     GOEX4       NO BREAKPOINT, QUIT
E431 A6A4             (        mon09.asm):00616                 LDA     ,Y      GET OPCODE
E433 A784             (        mon09.asm):00617                 STA     ,X      SAVE IN TABLE
E435 863F             (        mon09.asm):00618                 LDA     #$3F        GET 'SWI' BREAKPOINT OPCODE
E437 A7A4             (        mon09.asm):00619                 STA     ,Y      SAVE IN CODE SPACE
E439                  (        mon09.asm):00620         GOEX4
E439 3001             (        mon09.asm):00621                 LEAX    1,X     ADVANCE TO NEXT IN TABLE
E43B 5A               (        mon09.asm):00622                 DECB    REDUCE COUNT OF BRKPTS
E43C 26EE             (        mon09.asm):00623                 BNE     GOEX3       DO ALL EIGHT
E43E 10FEDF7B         (        mon09.asm):00624                 LDS     SAVS        RESTORE STACK POINTER
E442 B6DF6F           (        mon09.asm):00625                 LDA     SAVCC       GET SAVED CC
E445 F6DF72           (        mon09.asm):00626                 LDB     SAVDP       GET SAVED DPR
E448 3406             (        mon09.asm):00627                 PSHS    A,B     SAVE ON STACK FOR LAST RESTORE
E44A FCDF70           (        mon09.asm):00628                 LDD     SAVA        RESTORE A, B REGISTERS
E44D BEDF73           (        mon09.asm):00629                 LDX     SAVX        RESTORE X REGISTER
E450 10BEDF75         (        mon09.asm):00630                 LDY     SAVY        RESTORE Y REGISTER
E454 FEDF77           (        mon09.asm):00631                 LDU     SAVU        RESTORE U REGISTER
E457 3509             (        mon09.asm):00632                 PULS    CC,DP       RESTORE CC + DP
E459 6E9FDF79         (        mon09.asm):00633                 JMP     [SAVPC]     EXECUTE USER PGM
                      (        mon09.asm):00634         ;*
                      (        mon09.asm):00635         ;* 'RR' - REPEATING READ
                      (        mon09.asm):00636         ;*
E45D                  (        mon09.asm):00637         RDLOOP
E45D 1702D0           (        mon09.asm):00638                 LBSR    GETADR      GET ADDRESS
E460 1F01             (        mon09.asm):00639                 TFR     D,X     SET UP 'X'
E462 170392           (        mon09.asm):00640                 LBSR    LFCR        NEW LINE
E465                  (        mon09.asm):00641         RDLP1
E465 A684             (        mon09.asm):00642                 LDA     ,X      READ LOCATION
E467 1703CC           (        mon09.asm):00643                 LBSR    CHKCHR      ABORT?
E46A 26F9             (        mon09.asm):00644                 BNE     RDLP1       NO, ITS OK
E46C 39               (        mon09.asm):00645                 RTS
                      (        mon09.asm):00646         ;*
                      (        mon09.asm):00647         ;* 'RW' - REPEATING WRITE
                      (        mon09.asm):00648         ;*
E46D                  (        mon09.asm):00649         WRLOOP
E46D 1702C0           (        mon09.asm):00650                 LBSR    GETADR      GET ADDRESS
E470 1F01             (        mon09.asm):00651                 TFR     D,X     SET UP 'X'
E472 17037C           (        mon09.asm):00652                 LBSR    SPACE       SPACE OVER
E475 1702FF           (        mon09.asm):00653                 LBSR    GETBYT      GET DATA
E478 1026FC41         (        mon09.asm):00654                 LBNE    ERROR       INVALID
E47C 3402             (        mon09.asm):00655                 PSHS    A       SAVE ACCA
E47E 170376           (        mon09.asm):00656                 LBSR    LFCR        NEW LINE
E481                  (        mon09.asm):00657         WRLP1
E481 A6E4             (        mon09.asm):00658                 LDA     ,S      GET CHAR
E483 A784             (        mon09.asm):00659                 STA     ,X      WRITE IT OUT
E485 1703AE           (        mon09.asm):00660                 LBSR    CHKCHR      ABORT COMMAND?
E488 26F7             (        mon09.asm):00661                 BNE     WRLP1       CONTINUE
E48A 3582             (        mon09.asm):00662                 PULS    A,PC        GO HOME
                      (        mon09.asm):00663         ;*
                      (        mon09.asm):00664         ;* 'XR' - REPEATING 16 BIT READ
                      (        mon09.asm):00665         ;*
E48C                  (        mon09.asm):00666         XRLOOP
E48C 1702A1           (        mon09.asm):00667                 LBSR    GETADR      GET ADDRESS
E48F 1F01             (        mon09.asm):00668                 TFR     D,X     SET UP 'X'
E491 170363           (        mon09.asm):00669                 LBSR    LFCR        NEW LINE
E494                  (        mon09.asm):00670         XRLP1
E494 EC84             (        mon09.asm):00671                 LDD     ,X      READ LOCATION
E496 17039D           (        mon09.asm):00672                 LBSR    CHKCHR      ABORT?
E499 26F9             (        mon09.asm):00673                 BNE     XRLP1       NO, ITS OK
E49B 39               (        mon09.asm):00674                 RTS
                      (        mon09.asm):00675         ;*
                      (        mon09.asm):00676         ;* 'XW' - REPEATING 16 BITWRITE
                      (        mon09.asm):00677         ;*
E49C                  (        mon09.asm):00678         XWLOOP
E49C 170291           (        mon09.asm):00679                 LBSR    GETADR      GET ADDRESS
E49F 1F01             (        mon09.asm):00680                 TFR     D,X     SET UP 'X'
E4A1 17034D           (        mon09.asm):00681                 LBSR    SPACE       SPACE OVER
E4A4 170289           (        mon09.asm):00682                 LBSR    GETADR      GET DATA
E4A7 3406             (        mon09.asm):00683                 PSHS    A,B     SAVE ACCA
E4A9 17034B           (        mon09.asm):00684                 LBSR    LFCR        NEW LINE
E4AC                  (        mon09.asm):00685         XWLP1
E4AC ECE4             (        mon09.asm):00686                 LDD     ,S      GET CHAR
E4AE ED84             (        mon09.asm):00687                 STD     ,X      WRITE IT OUT
E4B0 170383           (        mon09.asm):00688                 LBSR    CHKCHR      ABORT COMMAND?
E4B3 26F7             (        mon09.asm):00689                 BNE     XWLP1       CONTINUE
E4B5 3586             (        mon09.asm):00690                 PULS    A,B,PC      GO HOME
                      (        mon09.asm):00691         ;*
                      (        mon09.asm):00692         ;* 'MT' - MEMORY TEST
                      (        mon09.asm):00693         ;*
E4B7                  (        mon09.asm):00694         RAMTEST
E4B7 170259           (        mon09.asm):00695                 LBSR    GETRNG      GET ADDRESS RANGE
E4BA FDDF7D           (        mon09.asm):00696                 STD     TEMP        SAVE ENDING ADDRESS
E4BD CCFFFF           (        mon09.asm):00697                 LDD     #-1     BEGIN WITH NEGATIVE 1
E4C0 FDDF9C           (        mon09.asm):00698                 STD     DSPBUF      SAVE PASS COUNT
E4C3 170331           (        mon09.asm):00699                 LBSR    LFCR        NEW LINE
E4C6 1F12             (        mon09.asm):00700                 TFR     X,Y     COPY STARTING ADDRESS
E4C8                  (        mon09.asm):00701         RAM0
E4C8 6F80             (        mon09.asm):00702                 CLR     ,X+     ZAP ONE BYTE
E4CA BCDF7D           (        mon09.asm):00703                 CMPX    TEMP        ARE WE OVER?
E4CD 23F9             (        mon09.asm):00704                 BLS     RAM0        NO, CLEAR EM ALL
E4CF                  (        mon09.asm):00705         RAM1
E4CF 1F21             (        mon09.asm):00706                 TFR     Y,X     RESET STARTING ADDRESS
E4D1 860D             (        mon09.asm):00707                 LDA     #$0D        GET CR
E4D3 170342           (        mon09.asm):00708                 LBSR    PUTCHR      BACK TO START OF LINE
E4D6 1702F3           (        mon09.asm):00709                 LBSR    WRMSG       OUTPUT MESSAGE
E4D9 506173733A2000   (        mon09.asm):00710                 FCN     'Pass: '
E4E0 FCDF9C           (        mon09.asm):00711                 LDD     DSPBUF      GET COUNTER
E4E3 C30001           (        mon09.asm):00712                 ADDD    #1      ADVANCE PASS COUNT
E4E6 FDDF9C           (        mon09.asm):00713                 STD     DSPBUF      RESAVE
E4E9 1702C6           (        mon09.asm):00714                 LBSR    WRDOUT      OUTPUT
E4EC 170302           (        mon09.asm):00715                 LBSR    SPACE       SPACE OVER
E4EF                  (        mon09.asm):00716         RAM2
E4EF 170344           (        mon09.asm):00717                 LBSR    CHKCHR      CHARACTER READY?
E4F2 271C             (        mon09.asm):00718                 BEQ     RAM5        ESCAPE, QUIT & RESTART MONITOR
E4F4 F6DF9D           (        mon09.asm):00719                 LDB     DSPBUF+1    GET EXPECTED VALUE
E4F7 E184             (        mon09.asm):00720                 CMPB    ,X      DID IT KEEP ITS VALUE
E4F9 264E             (        mon09.asm):00721                 BNE     RAM7        NO, ERROR
E4FB 8601             (        mon09.asm):00722                 LDA     #%00000001  FIRST DATA VALUE
E4FD                  (        mon09.asm):00723         RAM3
E4FD A784             (        mon09.asm):00724                 STA     ,X      RESAVE IT
E4FF A184             (        mon09.asm):00725                 CMPA    ,X      SAME ?
E501 2613             (        mon09.asm):00726                 BNE     RAM6        FAILED
E503 48               (        mon09.asm):00727                 LSLA    SHIFT THE BIT
E504 26F7             (        mon09.asm):00728                 BNE     RAM3        CONTINUE TILL ALL DONE
E506                  (        mon09.asm):00729         RAM4
E506 5C               (        mon09.asm):00730                 INCB    ADVANCE TO NEXT VALUE
E507 E780             (        mon09.asm):00731                 STB     ,X+     SAVE REGISTER
E509 BCDF7D           (        mon09.asm):00732                 CMPX    TEMP        ARE WE IN RANGE?
E50C 23E1             (        mon09.asm):00733                 BLS     RAM2        YES, ITS OK
E50E 20BF             (        mon09.asm):00734                 BRA     RAM1        AND RESTART
E510                  (        mon09.asm):00735         RAM5
E510 1702E4           (        mon09.asm):00736                 LBSR    LFCR        NEW LINE
E513 16FB69           (        mon09.asm):00737                 LBRA    MAIN        AND RESTART MONITOR
                      (        mon09.asm):00738         ;* VERIFY OF LOCATION FAILED
E516                  (        mon09.asm):00739         RAM6
E516 3402             (        mon09.asm):00740                 PSHS    A       SAVE VALUE WRITTEN
E518 1702B1           (        mon09.asm):00741                 LBSR    WRMSG       OUTPUT MESSAGE
E51B 416464723A2000   (        mon09.asm):00742                 FCN     'Addr: '
E522 1F10             (        mon09.asm):00743                 TFR     X,D     GET ADDRESS
E524 17028B           (        mon09.asm):00744                 LBSR    WRDOUT      OUTPUT
E527 1702A2           (        mon09.asm):00745                 LBSR    WRMSG       OUTPUT MESSAGE
E52A 2C2057726F74653A (        mon09.asm):00746                 FCN     ', Wrote: '
     2000
E534 3502             (        mon09.asm):00747                 PULS    A       RESTORE VALUE
E536 17027D           (        mon09.asm):00748                 LBSR    HEXOUT      OUTPUT
E539 170290           (        mon09.asm):00749                 LBSR    WRMSG       OUTPUT MESSAGE
E53C 2C20526561643A20 (        mon09.asm):00750                 FCN     ', Read: '
     00
E545 A684             (        mon09.asm):00751                 LDA     ,X      GET VALUE READ
E547 2033             (        mon09.asm):00752                 BRA     RAM8        CONTINUE
                      (        mon09.asm):00753         ;* DATA WAS CORRUPTED BY OTHER WRITES
E549                  (        mon09.asm):00754         RAM7
E549 170280           (        mon09.asm):00755                 LBSR    WRMSG       OUTPUT MESSAGE
E54C 416464723A2000   (        mon09.asm):00756                 FCN     'Addr: '
E553 1F10             (        mon09.asm):00757                 TFR     X,D     GET ADDR
E555 17025A           (        mon09.asm):00758                 LBSR    WRDOUT      OUTPUT
E558 170271           (        mon09.asm):00759                 LBSR    WRMSG       OUTPUT MESSAGE
E55B 2C20457870656374 (        mon09.asm):00760                 FCN     ', Expected: '
     65643A2000
E568 B6DF9D           (        mon09.asm):00761                 LDA     DSPBUF+1    GET VALUE
E56B 170248           (        mon09.asm):00762                 LBSR    HEXOUT      OUTPUT
E56E 17025B           (        mon09.asm):00763                 LBSR    WRMSG       OUTPUT MESSAGE
E571 2C20526561643A20 (        mon09.asm):00764                 FCN     ', Read: '
     00
E57A A684             (        mon09.asm):00765                 LDA     ,X      GET VALUE BACK
E57C                  (        mon09.asm):00766         RAM8
E57C 170237           (        mon09.asm):00767                 LBSR    HEXOUT      OUTPUT VALUE
E57F 170275           (        mon09.asm):00768                 LBSR    LFCR        NEW LINE
E582 F6DF9D           (        mon09.asm):00769                 LDB     DSPBUF+1    GET CORRECT NEXT VALUE
E585 16FF7E           (        mon09.asm):00770                 LBRA    RAM4
                      (        mon09.asm):00771         ;*
                      (        mon09.asm):00772         ;* '+' - HEXIDECIMAL ADDITION
                      (        mon09.asm):00773         ;*
E588                  (        mon09.asm):00774         HEXADD
E588 1701A5           (        mon09.asm):00775                 LBSR    GETADR      GET FIRST VALUE
E58B 3406             (        mon09.asm):00776                 PSHS    A,B     SAVE IT
E58D 862B             (        mon09.asm):00777                 LDA     #'+'        PLUS SIGN
E58F 170286           (        mon09.asm):00778                 LBSR    PUTCHR      DISPLAY
E592 17019B           (        mon09.asm):00779                 LBSR    GETADR      GET SECOND VALUE
E595 E3E4             (        mon09.asm):00780                 ADDD    ,S      PERFORM ADDITION
E597 2013             (        mon09.asm):00781                 BRA     HEXSHO      DISPLAY IT
                      (        mon09.asm):00782         ;*
                      (        mon09.asm):00783         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (        mon09.asm):00784         ;*
E599                  (        mon09.asm):00785         HEXSUB
E599 170194           (        mon09.asm):00786                 LBSR    GETADR      GET FIRST
E59C 3406             (        mon09.asm):00787                 PSHS    A,B     SAVE IT
E59E 862D             (        mon09.asm):00788                 LDA     #'-'        MINUS SIGN
E5A0 170275           (        mon09.asm):00789                 LBSR    PUTCHR      DISPLAY
E5A3 17018A           (        mon09.asm):00790                 LBSR    GETADR      GET SECOND ADDRESS
E5A6 3406             (        mon09.asm):00791                 PSHS    A,B     SAVE IT
E5A8 EC62             (        mon09.asm):00792                 LDD     2,S     GET FIRST VALUE
E5AA A3E1             (        mon09.asm):00793                 SUBD    ,S++        PERFORM SUBTRACTION
E5AC                  (        mon09.asm):00794         HEXSHO
E5AC EDE4             (        mon09.asm):00795                 STD     ,S      SAVE RESULT
E5AE 863D             (        mon09.asm):00796                 LDA     #'='        =ALS SIGN
E5B0 170265           (        mon09.asm):00797                 LBSR    PUTCHR      DISPLAY
E5B3 3506             (        mon09.asm):00798                 PULS    A,B     RESTORE RESULT
E5B5 1701FA           (        mon09.asm):00799                 LBSR    WRDOUT      OUTPUT
E5B8 16023C           (        mon09.asm):00800                 LBRA    LFCR        NEW LINE & RETURN
                      (        mon09.asm):00801         ;*
                      (        mon09.asm):00802         ;* '?' - HELP COMMAND
                      (        mon09.asm):00803         ;*
E5BB                  (        mon09.asm):00804         HELP
E5BB 8EF3E5           (        mon09.asm):00805                 LDX     #HTEXT      POINT TO HELP TEXT
E5BE                  (        mon09.asm):00806         HLP1
E5BE C619             (        mon09.asm):00807                 LDB     #25     COLUMN COUNTER
E5C0                  (        mon09.asm):00808         HLP2
E5C0 A680             (        mon09.asm):00809                 LDA     ,X+     GET CHAR FROM TEXT
E5C2 2718             (        mon09.asm):00810                 BEQ     HLP4        EXIT THIS LINE
E5C4 817C             (        mon09.asm):00811                 CMPA    #'|'        SEPERATOR?
E5C6 2706             (        mon09.asm):00812                 BEQ     HLP3        YES, EXIT
E5C8 17024D           (        mon09.asm):00813                 LBSR    PUTCHR      OUTPUT
E5CB 5A               (        mon09.asm):00814                 DECB    BACKUP
E5CC 20F2             (        mon09.asm):00815                 BRA     HLP2        NEXT
E5CE                  (        mon09.asm):00816         HLP3
E5CE 170220           (        mon09.asm):00817                 LBSR    SPACE       OUTPUT SPACE
E5D1 5A               (        mon09.asm):00818                 DECB    REDUCE COUNT
E5D2 26FA             (        mon09.asm):00819                 BNE     HLP3        KEEP GOING
E5D4 1701F5           (        mon09.asm):00820                 LBSR    WRMSG       OUTPUT MESSAGE
E5D7 2D2000           (        mon09.asm):00821                 FCN     '- '        SEPERATOR
E5DA 20E4             (        mon09.asm):00822                 BRA     HLP2        AND CONTINUE
E5DC                  (        mon09.asm):00823         HLP4
E5DC 170218           (        mon09.asm):00824                 LBSR    LFCR        NEW LINE
E5DF 170254           (        mon09.asm):00825                 LBSR    CHKCHR      TEST FOR CHARACTER ENTERED
E5E2 2704             (        mon09.asm):00826                 BEQ     HLP5        IF SO, EXIT
E5E4 A684             (        mon09.asm):00827                 LDA     ,X      IS THIS THE END?
E5E6 2AD6             (        mon09.asm):00828                 BPL     HLP1        NO, KEEP GOING
E5E8                  (        mon09.asm):00829         HLP5
E5E8 39               (        mon09.asm):00830                 RTS
                      (        mon09.asm):00831         ;*
                      (        mon09.asm):00832         ;* 'T' - TRANSPARENT MODE
                      (        mon09.asm):00833         ;*
     E5E9             (        mon09.asm):00834         TMODE           = *       TERMINAL ROUTINE
E5E9                  (        mon09.asm):00835         TM1
E5E9 BEDF6B           (        mon09.asm):00836                 LDX     >UART1      POINT TO MAIN UART
E5EC                  (        mon09.asm):00837         TM2
E5EC 17116A           (        mon09.asm):00838                 LBSR    READ        TEST FOR CHAR FROM TERMINAL
E5EF 260C             (        mon09.asm):00839                 BNE     TM3     NONE, IGNORE
E5F1 811B             (        mon09.asm):00840                 CMPA    #$1B        ESCAPE?
E5F3 10270200         (        mon09.asm):00841                 LBEQ    LFCR        NEW LINE, AND RETURN
E5F7 BEDF6D           (        mon09.asm):00842                 LDX     >UART2      POINT TO UART 2
E5FA 17116A           (        mon09.asm):00843                 LBSR    WRITE       OUTPUT TO AUX PORT
E5FD                  (        mon09.asm):00844         TM3
E5FD BEDF6D           (        mon09.asm):00845                 LDX     >UART2      POINT TO UART 2
E600 171156           (        mon09.asm):00846                 LBSR    READ        TEST FOR CHAR FROM AUX
E603 26E4             (        mon09.asm):00847                 BNE     TM1     NONE, IGNORE
E605 BEDF6B           (        mon09.asm):00848                 LDX     >UART1      POINT TO UART 1
E608 17115C           (        mon09.asm):00849                 LBSR    WRITE       OUTPUT TO TERMINAL
E60B 20DF             (        mon09.asm):00850                 BRA     TM2     GET NEXT CHAR
                      (        mon09.asm):00851         ;*
                      (        mon09.asm):00852         ;* 'DL' - DOWNLOAD
                      (        mon09.asm):00853         ;*
E60D                  (        mon09.asm):00854         LOAD
E60D B6DF6A           (        mon09.asm):00855                 LDA     IOCON       GET I/O CONFIG
E610 3402             (        mon09.asm):00856                 PSHS    A       SAVE
E612 1701E2           (        mon09.asm):00857                 LBSR    LFCR        NEW LINE
E615                  (        mon09.asm):00858         DLO1
E615 7FDF6A           (        mon09.asm):00859                 CLR     IOCON       INDICATE NO OUTPUT, READ UART
E618 8D16             (        mon09.asm):00860                 BSR     DLOAD       DOWNLOAD RECORD
E61A 240C             (        mon09.asm):00861                 BCC     DLO2        END
E61C A6E4             (        mon09.asm):00862                 LDA     ,S      GET OLD I/O CONFIG
E61E B7DF6A           (        mon09.asm):00863                 STA     IOCON       RESET
E621 862E             (        mon09.asm):00864                 LDA     #'.'        GET DOT
E623 1701F2           (        mon09.asm):00865                 LBSR    PUTCHR      OUTPUT
E626 20ED             (        mon09.asm):00866                 BRA     DLO1        CONTINUE
E628                  (        mon09.asm):00867         DLO2
E628 3502             (        mon09.asm):00868                 PULS    A       RESTORE A
E62A B7DF6A           (        mon09.asm):00869                 STA     IOCON       SAVE
E62D 1601C7           (        mon09.asm):00870                 LBRA    LFCR        New line & return
                      (        mon09.asm):00871         ;* Download a record in either MOTOROLA or INTEL hex format
E630                  (        mon09.asm):00872         DLOAD
E630 1701D0           (        mon09.asm):00873                 LBSR    GETCHR      Get a character
E633 813A             (        mon09.asm):00874                 CMPA    #':'        Start of INTEL record?
E635 2770             (        mon09.asm):00875                 BEQ     DLINT       Yes, download INTEL
E637 8153             (        mon09.asm):00876                 CMPA    #'S'        Start of MOTOROLA record?
E639 26F5             (        mon09.asm):00877                 BNE     DLOAD       No, keep looking
                      (        mon09.asm):00878         ;* Download a record in MOTOROLA hex format
E63B                  (        mon09.asm):00879         DLMOT
E63B 1701C5           (        mon09.asm):00880                 LBSR    GETCHR      GET NEXT CHAR
E63E 8130             (        mon09.asm):00881                 CMPA    #'0'        HEADER RECORD?
E640 27EE             (        mon09.asm):00882                 BEQ     DLOAD       SKIP IT
E642 8139             (        mon09.asm):00883                 CMPA    #'9'        END OF FILE?
E644 2760             (        mon09.asm):00884                 BEQ     DLEOF       END OF FILE
E646 8131             (        mon09.asm):00885                 CMPA    #'1'        DATA RECORD?
E648 2642             (        mon09.asm):00886                 BNE     LODERR      LOAD ERROR
E64A 17012A           (        mon09.asm):00887                 LBSR    GETBYT      GET LENGTH
E64D 263D             (        mon09.asm):00888                 BNE     LODERR      Report error
E64F B7DF7D           (        mon09.asm):00889                 STA     TEMP        START CHECKSUM
E652 8003             (        mon09.asm):00890                 SUBA    #3      CONVERT
E654 B7DF7E           (        mon09.asm):00891                 STA     TEMP+1      Set length
E657 17011D           (        mon09.asm):00892                 LBSR    GETBYT      Get first byte of address
E65A 2630             (        mon09.asm):00893                 BNE     LODERR      Report error
E65C 1F89             (        mon09.asm):00894                 TFR     A,B     Save for later
E65E BBDF7D           (        mon09.asm):00895                 ADDA    TEMP        Include in checksum
E661 B7DF7D           (        mon09.asm):00896                 STA     TEMP        Resave
E664 170110           (        mon09.asm):00897                 LBSR    GETBYT      Get next byte of address
E667 2623             (        mon09.asm):00898                 BNE     LODERR      Report error
E669 1E89             (        mon09.asm):00899                 EXG     A,B     Swap
E66B 1F01             (        mon09.asm):00900                 TFR     D,X     Set pointer
E66D FBDF7D           (        mon09.asm):00901                 ADDB    TEMP        Include in checksum
E670 F7DF7D           (        mon09.asm):00902                 STB     TEMP        Resave checksum
E673                  (        mon09.asm):00903         DLMOT1
E673 170101           (        mon09.asm):00904                 LBSR    GETBYT      Get a data byte
E676 A780             (        mon09.asm):00905                 STA     ,X+     Save in RAM
E678 BBDF7D           (        mon09.asm):00906                 ADDA    TEMP        Include checksum
E67B B7DF7D           (        mon09.asm):00907                 STA     TEMP        Resave
E67E 7ADF7E           (        mon09.asm):00908                 DEC     TEMP+1      Reduce length
E681 26F0             (        mon09.asm):00909                 BNE     DLMOT1      Do them all
E683 1700F1           (        mon09.asm):00910                 LBSR    GETBYT      Get a byte
E686 BBDF7D           (        mon09.asm):00911                 ADDA    TEMP        Add computed checksum
E689 4C               (        mon09.asm):00912                 INCA    Test for success
E68A 2718             (        mon09.asm):00913                 BEQ     DLRTS       Download OK
                      (        mon09.asm):00914         ;* Error occured on loading
E68C                  (        mon09.asm):00915         LODERR
E68C 8603             (        mon09.asm):00916                 LDA     #3      GET DEFAULT I/O
E68E B7DF6A           (        mon09.asm):00917                 STA     IOCON       SET I/O
E691 170138           (        mon09.asm):00918                 LBSR    WRMSG       OUTPUT
E694 203F4C6F61642065 (        mon09.asm):00919                 FCC     ' ?Load error'
     72726F72
E6A0 FF               (        mon09.asm):00920                 FCB     $FF
E6A1 16F9DB           (        mon09.asm):00921                 LBRA    MAIN        BACK FOR COMMAND
                      (        mon09.asm):00922         ;* Return indicating another record
E6A4                  (        mon09.asm):00923         DLRTS
E6A4 1A01             (        mon09.asm):00924                 ORCC    #$01        SET 'C' FLAG
E6A6                  (        mon09.asm):00925         DLEOF
E6A6 39               (        mon09.asm):00926                 RTS
                      (        mon09.asm):00927         ;* Download record in INTEL format
E6A7                  (        mon09.asm):00928         DLINT
E6A7 1700CD           (        mon09.asm):00929                 LBSR    GETBYT      Get count
E6AA 26E0             (        mon09.asm):00930                 BNE     LODERR      Report error
E6AC B7DF7D           (        mon09.asm):00931                 STA     TEMP        Start checksum
E6AF B7DF7E           (        mon09.asm):00932                 STA     TEMP+1      Record length
E6B2 8100             (        mon09.asm):00933                 CMPA    #0      Test & clear C
E6B4 27F0             (        mon09.asm):00934                 BEQ     DLEOF       End of file
                      (        mon09.asm):00935         ;* Get address
E6B6 1700BE           (        mon09.asm):00936                 LBSR    GETBYT      Get first byte of address
E6B9 26D1             (        mon09.asm):00937                 BNE     LODERR      Report error
E6BB 1F89             (        mon09.asm):00938                 TFR     A,B     Save for later
E6BD BBDF7D           (        mon09.asm):00939                 ADDA    TEMP        Include in checksum
E6C0 B7DF7D           (        mon09.asm):00940                 STA     TEMP        Resave
E6C3 1700B1           (        mon09.asm):00941                 LBSR    GETBYT      Get next byte of address
E6C6 26C4             (        mon09.asm):00942                 BNE     LODERR      Report error
E6C8 1E89             (        mon09.asm):00943                 EXG     A,B     Swap
E6CA 1F01             (        mon09.asm):00944                 TFR     D,X     Set pointer
E6CC FBDF7D           (        mon09.asm):00945                 ADDB    TEMP        Include in checksum
E6CF F7DF7D           (        mon09.asm):00946                 STB     TEMP        Resave checksum
                      (        mon09.asm):00947         ;* Get record type
E6D2 1700A2           (        mon09.asm):00948                 LBSR    GETBYT      Get type value
E6D5 26B5             (        mon09.asm):00949                 BNE     LODERR      Report error
E6D7 BBDF7D           (        mon09.asm):00950                 ADDA    TEMP        Include checksum
E6DA B7DF7D           (        mon09.asm):00951                 STA     TEMP        Resave checksum
                      (        mon09.asm):00952         ;* Get data bytes
E6DD                  (        mon09.asm):00953         DLINT1
E6DD 170097           (        mon09.asm):00954                 LBSR    GETBYT      Get data byte
E6E0 26AA             (        mon09.asm):00955                 BNE     LODERR      Report error
E6E2 A780             (        mon09.asm):00956                 STA     ,X+     Write to memory
E6E4 BBDF7D           (        mon09.asm):00957                 ADDA    TEMP        Include checksum
E6E7 B7DF7D           (        mon09.asm):00958                 STA     TEMP        Resave checksum
E6EA 7ADF7E           (        mon09.asm):00959                 DEC     TEMP+1      Reduce length
E6ED 26EE             (        mon09.asm):00960                 BNE     DLINT1      Do them all
                      (        mon09.asm):00961         ;* Get checksum
E6EF BDE777           (        mon09.asm):00962                 JSR     GETBYT      Read a byte
E6F2 2698             (        mon09.asm):00963                 BNE     LODERR      Report error
E6F4 BBDF7D           (        mon09.asm):00964                 ADDA    TEMP        Include checksum
E6F7 27AB             (        mon09.asm):00965                 BEQ     DLRTS       Report success
E6F9 2091             (        mon09.asm):00966                 BRA     LODERR      Report failure
                      (        mon09.asm):00967         ;*
                      (        mon09.asm):00968         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (        mon09.asm):00969         ;*
E6FB                  (        mon09.asm):00970         GETPC
E6FB 8D3A             (        mon09.asm):00971                 BSR     GETAD1      Get address
E6FD 2710             (        mon09.asm):00972                 BEQ     GETPC1      Normal data
E6FF 8120             (        mon09.asm):00973                 CMPA    #' '        Space?
E701 2631             (        mon09.asm):00974                 BNE     GETERR      Report error
E703 1700C6           (        mon09.asm):00975                 LBSR    WRMSG       Output message
E706 2D3E00           (        mon09.asm):00976                 FCN     '->'        Display address
E709 FCDF79           (        mon09.asm):00977                 LDD     SAVPC       Get PC value
E70C 1600A3           (        mon09.asm):00978                 LBRA    WRDOUT      Display
E70F                  (        mon09.asm):00979         GETPC1
E70F FDDF79           (        mon09.asm):00980                 STD     SAVPC       Set new PC
E712 39               (        mon09.asm):00981                 RTS
                      (        mon09.asm):00982         ;*
                      (        mon09.asm):00983         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (        mon09.asm):00984         ;*
E713                  (        mon09.asm):00985         GETRNG
E713 8D1B             (        mon09.asm):00986                 BSR     GETADR      Get first address
E715 1F01             (        mon09.asm):00987                 TFR     D,X     Save in X
E717 862C             (        mon09.asm):00988                 LDA     #','        Separator
E719 1700FC           (        mon09.asm):00989                 LBSR    PUTCHR      Display
E71C 8D19             (        mon09.asm):00990                 BSR     GETAD1      Get second address
E71E 2786             (        mon09.asm):00991                 BEQ     DLEOF       Normal data
E720 8120             (        mon09.asm):00992                 CMPA    #' '        Space?
E722 2610             (        mon09.asm):00993                 BNE     GETERR      No, report error
E724 1700A5           (        mon09.asm):00994                 LBSR    WRMSG       Output message
E727 4646464600       (        mon09.asm):00995                 FCN     'FFFF'
E72C CCFFFF           (        mon09.asm):00996                 LDD     #$FFFF      Assume top of RAM
E72F 39               (        mon09.asm):00997                 RTS
                      (        mon09.asm):00998         ;*
                      (        mon09.asm):00999         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (        mon09.asm):01000         ;*
E730                  (        mon09.asm):01001         GETADR
E730 8D05             (        mon09.asm):01002                 BSR     GETAD1      Get word value
E732 270F             (        mon09.asm):01003                 BEQ     GETAD2      Its OK
E734                  (        mon09.asm):01004         GETERR
E734 16F986           (        mon09.asm):01005                 LBRA    ERROR       Report error
                      (        mon09.asm):01006         ;* Get word value without error checking
E737                  (        mon09.asm):01007         GETAD1
E737 8D3E             (        mon09.asm):01008                 BSR     GETBYT      Get HIGH byte
E739 2609             (        mon09.asm):01009                 BNE     GETAD3      Test for special register
E73B 1F89             (        mon09.asm):01010                 TFR     A,B     Copy for later
E73D 8D38             (        mon09.asm):01011                 BSR     GETBYT      Get LOW byte
E73F 26F3             (        mon09.asm):01012                 BNE     GETERR      Report error
E741 1E89             (        mon09.asm):01013                 EXG     A,B     Correct order
E743                  (        mon09.asm):01014         GETAD2
E743 39               (        mon09.asm):01015                 RTS
                      (        mon09.asm):01016         ;* Handle special register names
E744                  (        mon09.asm):01017         GETAD3
E744 3410             (        mon09.asm):01018                 PSHS    X       Save X
E746 BEDF73           (        mon09.asm):01019                 LDX     SAVX        Assume X
E749 8158             (        mon09.asm):01020                 CMPA    #'X'        Is it X?
E74B 271C             (        mon09.asm):01021                 BEQ     GETAD4      Yes
E74D BEDF75           (        mon09.asm):01022                 LDX     SAVY        Assume Y
E750 8159             (        mon09.asm):01023                 CMPA    #'Y'        Is it Y?
E752 2715             (        mon09.asm):01024                 BEQ     GETAD4      Yes
E754 BEDF77           (        mon09.asm):01025                 LDX     SAVU        Assume U
E757 8155             (        mon09.asm):01026                 CMPA    #'U'        Is it U?
E759 270E             (        mon09.asm):01027                 BEQ     GETAD4      Yes
E75B BEDF73           (        mon09.asm):01028                 LDX     SAVX        Assume S
E75E 8153             (        mon09.asm):01029                 CMPA    #'S'        Is it S?
E760 2707             (        mon09.asm):01030                 BEQ     GETAD4      Yes
E762 BEDF79           (        mon09.asm):01031                 LDX     SAVPC       Assume PC?
E765 8150             (        mon09.asm):01032                 CMPA    #'P'        Is it PC?
E767 260C             (        mon09.asm):01033                 BNE     GETAD5      No, error
E769                  (        mon09.asm):01034         GETAD4
E769 863D             (        mon09.asm):01035                 LDA     #'='        Separator
E76B 1700AA           (        mon09.asm):01036                 LBSR    PUTCHR      Echo it
E76E 1F10             (        mon09.asm):01037                 TFR     X,D     D = value
E770 8D40             (        mon09.asm):01038                 BSR     WRDOUT      Display it
E772 4F               (        mon09.asm):01039                 CLRA    Set 'Z'
E773 1F10             (        mon09.asm):01040                 TFR     X,D     Get value back
E775                  (        mon09.asm):01041         GETAD5
E775 3590             (        mon09.asm):01042                 PULS    X,PC        Restore & return
                      (        mon09.asm):01043         ;*
                      (        mon09.asm):01044         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (        mon09.asm):01045         ;*
E777                  (        mon09.asm):01046         GETBYT
E777 8D20             (        mon09.asm):01047                 BSR     GETNIB      Get FIRST nibble
E779 2611             (        mon09.asm):01048                 BNE     GETB3       Invalid, test for quote
E77B 48               (        mon09.asm):01049                 LSLA    Rotate
E77C 48               (        mon09.asm):01050                 LSLA    into
E77D 48               (        mon09.asm):01051                 LSLA    high
E77E 48               (        mon09.asm):01052                 LSLA    nibble
E77F 3402             (        mon09.asm):01053                 PSHS    A       Save for later
E781 8D16             (        mon09.asm):01054                 BSR     GETNIB      Get SECOND nibble
E783 2604             (        mon09.asm):01055                 BNE     GETB2       Report error
E785 AAE4             (        mon09.asm):01056                 ORA     ,S      Include high
E787                  (        mon09.asm):01057         GETB4
E787 1A04             (        mon09.asm):01058                 ORCC    #$04        Indicate success (SET 'Z')
E789                  (        mon09.asm):01059         GETB2
E789 3261             (        mon09.asm):01060                 LEAS    1,S     Skip saved value
E78B                  (        mon09.asm):01061         GETB1
E78B 39               (        mon09.asm):01062                 RTS
E78C                  (        mon09.asm):01063         GETB3
E78C 8127             (        mon09.asm):01064                 CMPA    #$27        Single quote?
E78E 26FB             (        mon09.asm):01065                 BNE     GETB1       No, abort
E790 170070           (        mon09.asm):01066                 LBSR    GETCHR      Get ASCII character
E793 170082           (        mon09.asm):01067                 LBSR    PUTCHR      Echo on terminal
E796 1A04             (        mon09.asm):01068                 ORCC    #$04        Indicate success (SET 'Z')
E798 39               (        mon09.asm):01069                 RTS
                      (        mon09.asm):01070         ;*
                      (        mon09.asm):01071         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (        mon09.asm):01072         ;*
E799                  (        mon09.asm):01073         GETNIB
E799 170047           (        mon09.asm):01074                 LBSR    GETECH      Get character
E79C 8030             (        mon09.asm):01075                 SUBA    #'0'        Convert numbers
E79E 8109             (        mon09.asm):01076                 CMPA    #9      Numeric?
E7A0 230A             (        mon09.asm):01077                 BLS     GETN1       Yes, OK
E7A2 8007             (        mon09.asm):01078                 SUBA    #7      Convert alphas
E7A4 810A             (        mon09.asm):01079                 CMPA    #$A     Under?
E7A6 2507             (        mon09.asm):01080                 BLO     GETN2       Yer, error
E7A8 810F             (        mon09.asm):01081                 CMPA    #$F     Over?
E7AA 2203             (        mon09.asm):01082                 BHI     GETN2       Yes, error
E7AC                  (        mon09.asm):01083         GETN1
E7AC 1A04             (        mon09.asm):01084                 ORCC    #$04        SET 'Z' FLAG, INDICATE OK
E7AE 39               (        mon09.asm):01085                 RTS
E7AF                  (        mon09.asm):01086         GETN2
E7AF 8B37             (        mon09.asm):01087                 ADDA    #$37        Normalize character + clear Z
E7B1 39               (        mon09.asm):01088                 RTS
                      (        mon09.asm):01089         ;*
                      (        mon09.asm):01090         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (        mon09.asm):01091         ;*
E7B2                  (        mon09.asm):01092         WRDOUT
E7B2 8D02             (        mon09.asm):01093                 BSR     HEXOUT      Output first byte
E7B4 1F98             (        mon09.asm):01094                 TFR     B,A     Get second byte
                      (        mon09.asm):01095         ;*
                      (        mon09.asm):01096         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (        mon09.asm):01097         ;*
E7B6                  (        mon09.asm):01098         HEXOUT
E7B6 3402             (        mon09.asm):01099                 PSHS    A       Save low nibble
E7B8 44               (        mon09.asm):01100                 LSRA    Rotate
E7B9 44               (        mon09.asm):01101                 LSRA    upper nibble
E7BA 44               (        mon09.asm):01102                 LSRA    into
E7BB 44               (        mon09.asm):01103                 LSRA    lower nibble
E7BC 8D02             (        mon09.asm):01104                 BSR     HOUT        Output high nibble
E7BE 3502             (        mon09.asm):01105                 PULS    A       Rertore low nibble
                      (        mon09.asm):01106         ;*
                      (        mon09.asm):01107         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (        mon09.asm):01108         ;*
E7C0                  (        mon09.asm):01109         HOUT
E7C0 840F             (        mon09.asm):01110                 ANDA    #$0F        Remove upper half
E7C2 8B30             (        mon09.asm):01111                 ADDA    #'0'        Convert to printable
E7C4 8139             (        mon09.asm):01112                 CMPA    #'9'        In range?
E7C6 2302             (        mon09.asm):01113                 BLS     HOUT1       Yes, display
E7C8 8B07             (        mon09.asm):01114                 ADDA    #7      Convert to alpha
E7CA                  (        mon09.asm):01115         HOUT1
E7CA 204C             (        mon09.asm):01116                 BRA     PUTCHR      Output character
                      (        mon09.asm):01117         ;*
                      (        mon09.asm):01118         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (        mon09.asm):01119         ;*
E7CC                  (        mon09.asm):01120         WRMSG
E7CC 3410             (        mon09.asm):01121                 PSHS    X       SAVE X
E7CE AE62             (        mon09.asm):01122                 LDX     2,S     GET OLD PC
E7D0 8D04             (        mon09.asm):01123                 BSR     WRLIN       OUTPUT LINE
E7D2 AF62             (        mon09.asm):01124                 STX     2,S     UPDATE OLD PC
E7D4 3590             (        mon09.asm):01125                 PULS    X,PC        RESTORE X, RETURN
                      (        mon09.asm):01126         ;*
                      (        mon09.asm):01127         ;* DISPLAY MESSAGE(X)
                      (        mon09.asm):01128         ;*
E7D6                  (        mon09.asm):01129         WRLIN
E7D6 A680             (        mon09.asm):01130                 LDA     ,X+     GET CHAR FROM MESSAGE
E7D8 2708             (        mon09.asm):01131                 BEQ     WRLND       END, QUIT
E7DA 81FF             (        mon09.asm):01132                 CMPA    #$FF        NEWLINE END, LFCR & EXIT
E7DC 2719             (        mon09.asm):01133                 BEQ     LFCR        IF SO, NEW LINE, RETURN
E7DE 8D38             (        mon09.asm):01134                 BSR     PUTCHR      OUTPUT TO TERM
E7E0 20F4             (        mon09.asm):01135                 BRA     WRLIN       KEEP GOING
E7E2                  (        mon09.asm):01136         WRLND
E7E2 39               (        mon09.asm):01137                 RTS
                      (        mon09.asm):01138         ;*
                      (        mon09.asm):01139         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (        mon09.asm):01140         ;*
E7E3                  (        mon09.asm):01141         GETECH
E7E3 8D1E             (        mon09.asm):01142                 BSR     GETCHR      GET CHARACTER
E7E5 8120             (        mon09.asm):01143                 CMPA    #' '        SPACE?
E7E7 23F9             (        mon09.asm):01144                 BLS     WRLND                             ;IF < DON'T DISPLAY
E7E9 8161             (        mon09.asm):01145                 CMPA    #$61        LOWER CASE?
E7EB 252B             (        mon09.asm):01146                 BLO     PUTCHR      OK
E7ED 845F             (        mon09.asm):01147                 ANDA    #$5F        CONVERT TO UPPER
E7EF 2027             (        mon09.asm):01148                 BRA     PUTCHR      ECHO
                      (        mon09.asm):01149         ;*
                      (        mon09.asm):01150         ;* DISPLAY A SPACE ON THE TERMINAL
                      (        mon09.asm):01151         ;*
E7F1                  (        mon09.asm):01152         SPACE
E7F1 3402             (        mon09.asm):01153                 PSHS    A       SAVE A
E7F3 8620             (        mon09.asm):01154                 LDA     #' '        GET SPACE
E7F5 2008             (        mon09.asm):01155                 BRA     LFC1        DISLAY AND GO HOME
                      (        mon09.asm):01156         ;*
                      (        mon09.asm):01157         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (        mon09.asm):01158         ;*
E7F7                  (        mon09.asm):01159         LFCR
E7F7 3402             (        mon09.asm):01160                 PSHS    A       SAVE
E7F9 860A             (        mon09.asm):01161                 LDA     #$0A        GET LF
E7FB 8D1B             (        mon09.asm):01162                 BSR     PUTCHR      OUTPUT
E7FD 860D             (        mon09.asm):01163                 LDA     #$0D        GET CR
E7FF                  (        mon09.asm):01164         LFC1
E7FF 8D17             (        mon09.asm):01165                 BSR     PUTCHR      OUTPUT
E801 3582             (        mon09.asm):01166                 PULS    A,PC        RESTORE AND GO HOME
                      (        mon09.asm):01167         ;*
                      (        mon09.asm):01168         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (        mon09.asm):01169         ;*
E803                  (        mon09.asm):01170         GETCHR
E803 3410             (        mon09.asm):01171                 PSHS    X       SAVE 'X'
E805 BEDF6B           (        mon09.asm):01172                 LDX     >UART1      POINT TO CONSOLE
E808 B6DF6A           (        mon09.asm):01173                 LDA     IOCON       GET I/O CONFIG
E80B 44               (        mon09.asm):01174                 LSRA    SHIFT TO CARRY
E80C 2503             (        mon09.asm):01175                 BCS     GETC1       READ FROM UART
E80E BEDF6D           (        mon09.asm):01176                 LDX     >UART2      POINT TO AUX UART
E811                  (        mon09.asm):01177         GETC1
E811 170F45           (        mon09.asm):01178                 LBSR    READ        READ TERMINAL
E814 26FB             (        mon09.asm):01179                 BNE     GETC1       KEEP TRYING
E816 3590             (        mon09.asm):01180                 PULS    X,PC
                      (        mon09.asm):01181         ;*
                      (        mon09.asm):01182         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (        mon09.asm):01183         ;*
E818                  (        mon09.asm):01184         PUTCHR
E818 3416             (        mon09.asm):01185                 PSHS    A,B,X       SAVE REGS
E81A F6DF6A           (        mon09.asm):01186                 LDB     IOCON       GET I/O CONFIG
E81D C502             (        mon09.asm):01187                 BITB    #2      WRITE TO TERM?
E81F 2706             (        mon09.asm):01188                 BEQ     PUT1        NO, TRY UART
E821 BEDF6B           (        mon09.asm):01189                 LDX     >UART1      POINT TO UART1
E824 170F40           (        mon09.asm):01190                 LBSR    WRITE       OUTPUT TO TERMINAL
E827                  (        mon09.asm):01191         PUT1
E827 F6DF6A           (        mon09.asm):01192                 LDB     IOCON       INCASE CORRUPTED
E82A C504             (        mon09.asm):01193                 BITB    #4      WRITE TO UART?
E82C 2706             (        mon09.asm):01194                 BEQ     PUT2        NO, SKIP IT
E82E BEDF6D           (        mon09.asm):01195                 LDX     >UART2      POINT TO UART2
E831 170F33           (        mon09.asm):01196                 LBSR    WRITE       OUTPUT TO UART
E834                  (        mon09.asm):01197         PUT2
E834 3596             (        mon09.asm):01198                 PULS    A,B,X,PC    RESTORE AND GO HOME
                      (        mon09.asm):01199         ;*
                      (        mon09.asm):01200         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (        mon09.asm):01201         ;* SCREEN OUTPUT FLOW CONTROL.
                      (        mon09.asm):01202         ;*
E836                  (        mon09.asm):01203         CHKCHR
E836 3410             (        mon09.asm):01204                 PSHS    X       SAVE PTR
E838 BEDF6B           (        mon09.asm):01205                 LDX     >UART1      POINT TO CONSOLE UART
E83B F6DF6A           (        mon09.asm):01206                 LDB     IOCON       GET I/O CONFIG
E83E 2B07             (        mon09.asm):01207                 BMI     CHKC1       ALREADY HELD
E840 170F16           (        mon09.asm):01208                 LBSR    READ        READ TERMINAL
E843 8120             (        mon09.asm):01209                 CMPA    #' '        SPACE?
E845 2616             (        mon09.asm):01210                 BNE     CHKC3       NO, IGNORE IT
E847                  (        mon09.asm):01211         CHKC1
E847 CA80             (        mon09.asm):01212                 ORB     #%10000000  SET HELD BIT
E849 170F0D           (        mon09.asm):01213                 LBSR    READ        GET KEY FROM CONSOLE
E84C 8120             (        mon09.asm):01214                 CMPA    #' '        SPACE?
E84E 270A             (        mon09.asm):01215                 BEQ     CHKC2       YES, ALLOW
E850 C47F             (        mon09.asm):01216                 ANDB    #%01111111  DISABLE HELD BIT
E852 810D             (        mon09.asm):01217                 CMPA    #$0D        CARRIAGE RETURN?
E854 2704             (        mon09.asm):01218                 BEQ     CHKC2       ALLOW
E856 811B             (        mon09.asm):01219                 CMPA    #$1B        ESCAPE?
E858 26ED             (        mon09.asm):01220                 BNE     CHKC1       NO, IGNORE
E85A                  (        mon09.asm):01221         CHKC2
E85A F7DF6A           (        mon09.asm):01222                 STB     IOCON       RESAVE I/O CONFIG BYTE
E85D                  (        mon09.asm):01223         CHKC3
E85D 811B             (        mon09.asm):01224                 CMPA    #$1B        TEST FOR ESCAPE CHARACTER
E85F 3590             (        mon09.asm):01225                 PULS    X,PC
                      (        mon09.asm):01226         ;*
                      (        mon09.asm):01227         ;* STEP ONE INSTRUCTION
                      (        mon09.asm):01228         ;*
E861                  (        mon09.asm):01229         STEPDI
E861 10BEDF79         (        mon09.asm):01230                 LDY     SAVPC       GET PC
E865 CEDF9C           (        mon09.asm):01231                 LDU     #DSPBUF     GET INPUT BUFFER
E868 1702AB           (        mon09.asm):01232                 LBSR    DISASS      DISPLAY
E86B 1F31             (        mon09.asm):01233                 TFR     U,X     POINT TO IT
E86D 17FF66           (        mon09.asm):01234                 LBSR    WRLIN       DISPLAY
E870 200A             (        mon09.asm):01235                 BRA     STEPCE      AND PERFORM STEP
                      (        mon09.asm):01236         ;*
                      (        mon09.asm):01237         ;* STEP WITHOUT DISPLAYING INSTRUCTION
                      (        mon09.asm):01238         ;*
E872                  (        mon09.asm):01239         STEP
E872 10BEDF79         (        mon09.asm):01240                 LDY     SAVPC       GET PROGRAM COUNTER
E876 CEDF9C           (        mon09.asm):01241                 LDU     #DSPBUF     POINT TO FREE RAM FOR DISASEMBLY OUTPUT
E879 17029A           (        mon09.asm):01242                 LBSR    DISASS      PERFORM DISASSEMBLY
E87C                  (        mon09.asm):01243         STEPCE
E87C 10BFDF79         (        mon09.asm):01244                 STY     SAVPC       SAVE NEW PC
E880 FEDF80           (        mon09.asm):01245                 LDU     PTRSAV      GET POINTER BACK
E883 ECC0             (        mon09.asm):01246                 LDD     ,U+     GET OPCODE
                      (        mon09.asm):01247         ;* TEST FOR LONG CONDITIONAL BRANCHES
E885                  (        mon09.asm):01248         LCBRAN
E885 8110             (        mon09.asm):01249                 CMPA    #$10        PREFIX?
E887 2612             (        mon09.asm):01250                 BNE     LOBRAN      NO, GOT FOR IT
E889 E6C4             (        mon09.asm):01251                 LDB     ,U      GET OPCODE
E88B C122             (        mon09.asm):01252                 CMPB    #$22        IN RANGE?
E88D 250C             (        mon09.asm):01253                 BLO     LOBRAN      NO
E88F C12F             (        mon09.asm):01254                 CMPB    #$2F        IN RANGE?
E891 2208             (        mon09.asm):01255                 BHI     LOBRAN      NO
E893 A6C0             (        mon09.asm):01256                 LDA     ,U+     GET OPCOIDE BYTE
E895 17025C           (        mon09.asm):01257                 LBSR    TSTCON      TEST CONDITIONAL
E898 2705             (        mon09.asm):01258                 BEQ     LBRAN1      YES, DO IT
E89A 39               (        mon09.asm):01259                 RTS
                      (        mon09.asm):01260         ;* TEST FOR LONG BRANCHES
E89B                  (        mon09.asm):01261         LOBRAN
E89B 8116             (        mon09.asm):01262                 CMPA    #$16        IS IT LBRA?
E89D 2606             (        mon09.asm):01263                 BNE     LBRANS      NO, TRY LBSR
E89F                  (        mon09.asm):01264         LBRAN1
E89F ECC1             (        mon09.asm):01265                 LDD     ,U++        GET OFFSET
E8A1 30CB             (        mon09.asm):01266                 LEAX    D,U     PERFORM BRANCH
E8A3 2034             (        mon09.asm):01267                 BRA     SAVNPC      SAVE NEW PC
                      (        mon09.asm):01268         ;* TEST FOR LONG BRANCH TO SUB
E8A5                  (        mon09.asm):01269         LBRANS
E8A5 8117             (        mon09.asm):01270                 CMPA    #$17        'LBSR'?
E8A7 2606             (        mon09.asm):01271                 BNE     SCOBRA      NO, TRY SHORT CONDITIONALS
E8A9 ECC1             (        mon09.asm):01272                 LDD     ,U++        GET OFFSET
E8AB 30CB             (        mon09.asm):01273                 LEAX    D,U     SET UP ADDRESS
E8AD 2020             (        mon09.asm):01274                 BRA     SAVSTK
                      (        mon09.asm):01275         ;* TEST FOR SHORT CONDITIONAL BRANCHES
E8AF                  (        mon09.asm):01276         SCOBRA
E8AF 8122             (        mon09.asm):01277                 CMPA    #$22        < 'BHI'?
E8B1 250A             (        mon09.asm):01278                 BLO     SHBRAN      NO, TRY SHORT BRANCHES
E8B3 812F             (        mon09.asm):01279                 CMPA    #$2F        > 'BLE'?
E8B5 2206             (        mon09.asm):01280                 BHI     SHBRAN      NO, TRY SHORT BRANCHES
E8B7 17023A           (        mon09.asm):01281                 LBSR    TSTCON      SEE OF CONDITIONAL IS OK
E8BA 2705             (        mon09.asm):01282                 BEQ     SBRAN1      YES, DO IT
E8BC 39               (        mon09.asm):01283                 RTS
                      (        mon09.asm):01284         ;* TEST FOR SHORT BRANCHES
E8BD                  (        mon09.asm):01285         SHBRAN
E8BD 8120             (        mon09.asm):01286                 CMPA    #$20        SHORT BRANCH?
E8BF 2606             (        mon09.asm):01287                 BNE     SBRANS      NO, TRY SHORT BRANCH TO SUB
E8C1                  (        mon09.asm):01288         SBRAN1
E8C1 E6C0             (        mon09.asm):01289                 LDB     ,U+     GET OFFSET
E8C3 30C5             (        mon09.asm):01290                 LEAX    B,U     EMULATE JUMP
E8C5 2012             (        mon09.asm):01291                 BRA     SAVNPC      SAVE NEW PC
                      (        mon09.asm):01292         ;* TEST FOR SHORT BRANCH TO SUBROUTINE
E8C7                  (        mon09.asm):01293         SBRANS
E8C7 818D             (        mon09.asm):01294                 CMPA    #$8D        'BSR'?
E8C9 2612             (        mon09.asm):01295                 BNE     TSTTFR      NO, TRY TRANSFER
E8CB E6C0             (        mon09.asm):01296                 LDB     ,U+     GET OFFSET
E8CD 30C5             (        mon09.asm):01297                 LEAX    B,U     PERFORM BRANCH
E8CF                  (        mon09.asm):01298         SAVSTK
E8CF 10BEDF7B         (        mon09.asm):01299                 LDY     SAVS        GET STACK POINTER
E8D3 EFA3             (        mon09.asm):01300                 STU     ,--Y        PUSH ADDRESS
E8D5 10BFDF7B         (        mon09.asm):01301                 STY     SAVS        RESAVE
E8D9                  (        mon09.asm):01302         SAVNPC
E8D9 BFDF79           (        mon09.asm):01303                 STX     SAVPC       SAVE IT
E8DC 39               (        mon09.asm):01304                 RTS
                      (        mon09.asm):01305         ;* TEST FOR TRANSFER
E8DD                  (        mon09.asm):01306         TSTTFR
E8DD 811F             (        mon09.asm):01307                 CMPA    #$1F        TRANSFER?
E8DF 2620             (        mon09.asm):01308                 BNE     TSTEXG      NO, TRY EXCHANGE
E8E1 8D01             (        mon09.asm):01309                 BSR     LOKREG      LOOKUP REGISTER
E8E3 39               (        mon09.asm):01310                 RTS
                      (        mon09.asm):01311         ;* LOOKUP REGISTER, AND SIMULATE IF PC XFER OR EXCHANGE
E8E4                  (        mon09.asm):01312         LOKREG
E8E4 A6C4             (        mon09.asm):01313                 LDA     ,U      GET POSTBYTE
E8E6 840F             (        mon09.asm):01314                 ANDA    #$0F        REMOVE HIGH REGISTER
E8E8 8105             (        mon09.asm):01315                 CMPA    #5      IS IT PC?
E8EA 2610             (        mon09.asm):01316                 BNE     LOK1                              ;NO, IT'S OK TO EXECUTE
E8EC A6C4             (        mon09.asm):01317                 LDA     ,U      GET REG POSTBYTE BACK
E8EE 44               (        mon09.asm):01318                 LSRA    SHIFT
E8EF 44               (        mon09.asm):01319                 LSRA    HIGH REGISTER
E8F0 44               (        mon09.asm):01320                 LSRA    TO LOW (LEAVE X 2)
E8F1                  (        mon09.asm):01321         LOK2
E8F1 8EF3A9           (        mon09.asm):01322                 LDX     #TFREGT     POINT TO TABLE
E8F4 840F             (        mon09.asm):01323                 ANDA    #$0F        INSURE WE GET VALID REG
E8F6 AE86             (        mon09.asm):01324                 LDX     A,X     GET ADDRESS OF VARIABLE
E8F8 EC84             (        mon09.asm):01325                 LDD     ,X      GET REGISTER VALUE
E8FA 202E             (        mon09.asm):01326                 BRA     STDPC       SAVE IT
E8FC                  (        mon09.asm):01327         LOK1
E8FC 3262             (        mon09.asm):01328                 LEAS    2,S     SKIP LAST CALL
E8FE 160197           (        mon09.asm):01329                 LBRA    NOREXE      EXECUTE NORMAL INSTRUCTION
                      (        mon09.asm):01330         ;* TEST FOR EXCHANGE
E901                  (        mon09.asm):01331         TSTEXG
E901 811E             (        mon09.asm):01332                 CMPA    #$1E        IS IT EXCHANGE
E903 2619             (        mon09.asm):01333                 BNE     TSTRTS      NO, TRY RTS
E905 10BEDF79         (        mon09.asm):01334                 LDY     SAVPC       GET OLD PC VALUE
E909 A6C4             (        mon09.asm):01335                 LDA     ,U      GET REGISTER
E90B 84F0             (        mon09.asm):01336                 ANDA    #$F0        USE HIGH ONLY
E90D 8150             (        mon09.asm):01337                 CMPA    #$50        IS PC FIRST?
E90F 2607             (        mon09.asm):01338                 BNE     TSTE1       NO, SKIP
E911 A6C4             (        mon09.asm):01339                 LDA     ,U      GET REG BACK
E913 48               (        mon09.asm):01340                 LSLA    DOUBLE
E914 8DDB             (        mon09.asm):01341                 BSR     LOK2        GET ADDRESS OF REG TO SWAP WITH
E916 2002             (        mon09.asm):01342                 BRA     TSTE2       PERFORM MOVE TO PC
E918                  (        mon09.asm):01343         TSTE1
E918 8DCA             (        mon09.asm):01344                 BSR     LOKREG      GET REGISTER SEE IF PC IS LOW REGISTER
E91A                  (        mon09.asm):01345         TSTE2
E91A 10AF84           (        mon09.asm):01346                 STY     ,X      SAVE PC IN REGISTER
E91D 39               (        mon09.asm):01347                 RTS
                      (        mon09.asm):01348         ;* TEST FOR 'RTS' INSTRUCTIONS
E91E                  (        mon09.asm):01349         TSTRTS
E91E 8139             (        mon09.asm):01350                 CMPA    #$39        IS IT 'RTS'
E920 260C             (        mon09.asm):01351                 BNE     TPULS       NO, TRY PULS
E922 FEDF7B           (        mon09.asm):01352                 LDU     SAVS        POINT TO STACK
E925 3706             (        mon09.asm):01353                 PULU    A,B     GET DATA
E927 FFDF7B           (        mon09.asm):01354                 STU     SAVS        RESAVE SP
E92A                  (        mon09.asm):01355         STDPC
E92A FDDF79           (        mon09.asm):01356                 STD     SAVPC
E92D 39               (        mon09.asm):01357                 RTS
                      (        mon09.asm):01358         ;* TEST FOR 'PULS' INSTRUCTION
E92E                  (        mon09.asm):01359         TPULS
E92E 8135             (        mon09.asm):01360                 CMPA    #$35        PULLING FROM S?
E930 260D             (        mon09.asm):01361                 BNE     TPULU       NO, TRY PULU
E932 BEDF7B           (        mon09.asm):01362                 LDX     SAVS        GET SAVED 'S' REG
E935 108EF3B5         (        mon09.asm):01363                 LDY     #PULSTAB    POINT TO TABLE
E939 8D15             (        mon09.asm):01364                 BSR     DOPUL       PERFORM PULL
E93B BFDF7B           (        mon09.asm):01365                 STX     SAVS        RESAVE NEW 'S' REGISTER
E93E 39               (        mon09.asm):01366                 RTS
                      (        mon09.asm):01367         ;* TEST FOR A 'PULU' INSTRUCTION
E93F                  (        mon09.asm):01368         TPULU
E93F 8137             (        mon09.asm):01369                 CMPA    #$37        IS IT 'PULU'?
E941 262E             (        mon09.asm):01370                 BNE     JSREXT      NO, TRY JSR EXTENDED
E943 BEDF77           (        mon09.asm):01371                 LDX     SAVU        GET SAVED 'U'
E946 108EF3C5         (        mon09.asm):01372                 LDY     #PULUTAB    POINT TO TABLE
E94A 8D04             (        mon09.asm):01373                 BSR     DOPUL       PERFORM PULL
E94C BFDF77           (        mon09.asm):01374                 STX     SAVU        RESAVE 'S'
E94F 39               (        mon09.asm):01375                 RTS
                      (        mon09.asm):01376         ;* PERFORM PUL OPERATIONS
E950                  (        mon09.asm):01377         DOPUL
E950 A6C4             (        mon09.asm):01378                 LDA     ,U      GET POSTBYTE
E952 C604             (        mon09.asm):01379                 LDB     #4      TEST FOR FIRST FOUR BITS (8 BIT REG)
E954                  (        mon09.asm):01380         DOPUL1
E954 5A               (        mon09.asm):01381                 DECB    DECREMENT COUNT
E955 44               (        mon09.asm):01382                 LSRA    SHIFT
E956 2413             (        mon09.asm):01383                 BCC     DOPUL2      NOTHING, GO AGAIN
E958 3406             (        mon09.asm):01384                 PSHS    A,B     SAVE REGS
E95A 5D               (        mon09.asm):01385                 TSTB    ARE WE INTO 16 BITS?
E95B 2B06             (        mon09.asm):01386                 BMI     PUL16       YES, PERFORM 16 BITS
E95D A680             (        mon09.asm):01387                 LDA     ,X+     PULL A BYTE
E95F A7B1             (        mon09.asm):01388                 STA     [,Y++]      SAVE IN REGISTER
E961 2004             (        mon09.asm):01389                 BRA     DOPUL3      GO AGAIN
E963                  (        mon09.asm):01390         PUL16
E963 EC81             (        mon09.asm):01391                 LDD     ,X++        GET 16 BIT VALUE
E965 EDB1             (        mon09.asm):01392                 STD     [,Y++]      SAVE IN REGISTER
E967                  (        mon09.asm):01393         DOPUL3
E967 3506             (        mon09.asm):01394                 PULS    A,B     RESTORE
E969 20E9             (        mon09.asm):01395                 BRA     DOPUL1      CONTINUE
E96B                  (        mon09.asm):01396         DOPUL2
E96B 3122             (        mon09.asm):01397                 LEAY    2,Y     ADVANCE
E96D 4D               (        mon09.asm):01398                 TSTA    ARE WE CONE
E96E 26E4             (        mon09.asm):01399                 BNE     DOPUL1      CONTINUE
E970 39               (        mon09.asm):01400                 RTS
                      (        mon09.asm):01401         ;* TEST FOR 'JSR' EXTENDED
E971                  (        mon09.asm):01402         JSREXT
E971 81BD             (        mon09.asm):01403                 CMPA    #$BD        IS IT EXTENDED JSR
E973 2604             (        mon09.asm):01404                 BNE     JMPEXT      NO, TRY JUMP EXTENDED
E975 8D06             (        mon09.asm):01405                 BSR     DJMPEX      FAKE JUMP
E977 2021             (        mon09.asm):01406                 BRA     PSHPC       SAVE PC
                      (        mon09.asm):01407         ;* TEST FOR 'JMP' EXTENDED
E979                  (        mon09.asm):01408         JMPEXT
E979 817E             (        mon09.asm):01409                 CMPA    #$7E        IS IT JMP EXTENDED?
E97B 2604             (        mon09.asm):01410                 BNE     JSRDIR      NO, TRY JMP DIRECT
E97D                  (        mon09.asm):01411         DJMPEX
E97D ECC1             (        mon09.asm):01412                 LDD     ,U++        GET ADDRESS
E97F 20A9             (        mon09.asm):01413                 BRA     STDPC       SAVE IT
                      (        mon09.asm):01414         ;* TEST FOR 'JSR' DIRECT
E981                  (        mon09.asm):01415         JSRDIR
E981 819D             (        mon09.asm):01416                 CMPA    #$9D        'JSR' DIRECT PAGE?
E983 2604             (        mon09.asm):01417                 BNE     JMPDIR      NO, TRY JUMP
E985 8D06             (        mon09.asm):01418                 BSR     DJMPDI      DO IT
E987 2011             (        mon09.asm):01419                 BRA     PSHPC       SAVE PC
                      (        mon09.asm):01420         ;* TEST FOR 'JMP' DIRECT PAGE
E989                  (        mon09.asm):01421         JMPDIR
E989 810E             (        mon09.asm):01422                 CMPA    #$0E        IS IT JUMP DIRECT PAGE?
E98B 2607             (        mon09.asm):01423                 BNE     JSRIND      NO, TRY JUMP INDEXED
E98D                  (        mon09.asm):01424         DJMPDI
E98D E6C0             (        mon09.asm):01425                 LDB     ,U+     GET LOW ADDRESS
E98F B6DF72           (        mon09.asm):01426                 LDA     SAVDP       GET DIRECT PAGE
E992 2096             (        mon09.asm):01427                 BRA     STDPC       SAVE IT
                      (        mon09.asm):01428         ;* TEST FOR 'JSR' INDEXED
E994                  (        mon09.asm):01429         JSRIND
E994 81AD             (        mon09.asm):01430                 CMPA    #$AD        IS IT 'JSR' INDEXED?
E996 260B             (        mon09.asm):01431                 BNE     JMPIND      NO, TRY NEXT
E998 8D0F             (        mon09.asm):01432                 BSR     DJMPIN      DO IT
E99A                  (        mon09.asm):01433         PSHPC
E99A BEDF7B           (        mon09.asm):01434                 LDX     SAVS        GET ADDRESS
E99D EF83             (        mon09.asm):01435                 STU     ,--X        SAVE
E99F BFDF7B           (        mon09.asm):01436                 STX     SAVS        RESAVE
E9A2 39               (        mon09.asm):01437                 RTS
                      (        mon09.asm):01438         ;* TEST FOR 'JMP' INDEXED
E9A3                  (        mon09.asm):01439         JMPIND
E9A3 816E             (        mon09.asm):01440                 CMPA    #$6E        IS IT JUMP INDEXED?
E9A5 102600EF         (        mon09.asm):01441                 LBNE    NOREXE      NO, NON-TRANSFER INSTRUCTION
                      (        mon09.asm):01442         ;* FIRST POINT Y AT REGISTER INVOLVED
E9A9                  (        mon09.asm):01443         DJMPIN
E9A9 A6C0             (        mon09.asm):01444                 LDA     ,U+     GET POSTBYTE
E9AB 3402             (        mon09.asm):01445                 PSHS    A       SAVE IT
E9AD 8460             (        mon09.asm):01446                 ANDA    #%01100000  SAVE ONLY REGISTER
E9AF 44               (        mon09.asm):01447                 LSRA    CONVERT
E9B0 44               (        mon09.asm):01448                 LSRA    REGISTER
E9B1 44               (        mon09.asm):01449                 LSRA    INTO INDEX VALUE
E9B2 44               (        mon09.asm):01450                 LSRA    SHIFT IT OVER
E9B3 8EF3AB           (        mon09.asm):01451                 LDX     #INDTAB     POINT TO TABLE
E9B6 10AE86           (        mon09.asm):01452                 LDY     A,X     GET REGISTER ADDRESS
E9B9 10BFDF7D         (        mon09.asm):01453                 STY     TEMP        SAVE FOR INC/DEC
E9BD 10AEA4           (        mon09.asm):01454                 LDY     ,Y      GET REGISTER CONTENTS
E9C0 A6E4             (        mon09.asm):01455                 LDA     ,S      GET POSTBYTE BACK
E9C2 2B52             (        mon09.asm):01456                 BMI     NOT5BO      NOT A FIVE BIT OFFSET
                      (        mon09.asm):01457         ;* FIVE BIT REGISTER OFFSET
E9C4 841F             (        mon09.asm):01458                 ANDA    #%00011111  SAVE ONLY OFFSET
E9C6 8110             (        mon09.asm):01459                 CMPA    #%00010000  NEGATIVE?
E9C8 2548             (        mon09.asm):01460                 BLO     SINOK       lNO, IT'S OK
E9CA 8AE0             (        mon09.asm):01461                 ORA     #%11100000  CONVERT TO NEGATIVE
E9CC 8AE0             (        mon09.asm):01462                 ORA     #%11100000  CONVERT TO NEGATIVE
E9CE 8AE0             (        mon09.asm):01463                 ORA     #%11100000  CONVERT TO NEGATIVE
E9D0 8AE0             (        mon09.asm):01464                 ORA     #%11100000  CONVERT TO NEGATIVE
E9D2 8AE0             (        mon09.asm):01465                 ORA     #%11100000  CONVERT TO NEGATIVE
E9D4 8AE0             (        mon09.asm):01466                 ORA     #%11100000  CONVERT TO NEGATIVE
E9D6 8AE0             (        mon09.asm):01467                 ORA     #%11100000  CONVERT TO NEGATIVE
E9D8 8AE0             (        mon09.asm):01468                 ORA     #%11100000  CONVERT TO NEGATIVE
E9DA 8AE0             (        mon09.asm):01469                 ORA     #%11100000  CONVERT TO NEGATIVE
E9DC 8AE0             (        mon09.asm):01470                 ORA     #%11100000  CONVERT TO NEGATIVE
E9DE 8AE0             (        mon09.asm):01471                 ORA     #%11100000  CONVERT TO NEGATIVE
E9E0 8AE0             (        mon09.asm):01472                 ORA     #%11100000  CONVERT TO NEGATIVE
E9E2 8AE0             (        mon09.asm):01473                 ORA     #%11100000  CONVERT TO NEGATIVE
E9E4 8AE0             (        mon09.asm):01474                 ORA     #%11100000  CONVERT TO NEGATIVE
E9E6 8AE0             (        mon09.asm):01475                 ORA     #%11100000  CONVERT TO NEGATIVE
E9E8 8AE0             (        mon09.asm):01476                 ORA     #%11100000  CONVERT TO NEGATIVE
E9EA 8AE0             (        mon09.asm):01477                 ORA     #%11100000  CONVERT TO NEGATIVE
E9EC 8AE0             (        mon09.asm):01478                 ORA     #%11100000  CONVERT TO NEGATIVE
E9EE 8AE0             (        mon09.asm):01479                 ORA     #%11100000  CONVERT TO NEGATIVE
E9F0 8AE0             (        mon09.asm):01480                 ORA     #%11100000  CONVERT TO NEGATIVE
E9F2 8AE0             (        mon09.asm):01481                 ORA     #%11100000  CONVERT TO NEGATIVE
E9F4 8AE0             (        mon09.asm):01482                 ORA     #%11100000  CONVERT TO NEGATIVE
E9F6 8AE0             (        mon09.asm):01483                 ORA     #%11100000  CONVERT TO NEGATIVE
E9F8 8AE0             (        mon09.asm):01484                 ORA     #%11100000  CONVERT TO NEGATIVE
E9FA 8AE0             (        mon09.asm):01485                 ORA     #%11100000  CONVERT TO NEGATIVE
E9FC 8AE0             (        mon09.asm):01486                 ORA     #%11100000  CONVERT TO NEGATIVE
E9FE 8AE0             (        mon09.asm):01487                 ORA     #%11100000  CONVERT TO NEGATIVE
EA00 8AE0             (        mon09.asm):01488                 ORA     #%11100000  CONVERT TO NEGATIVE
EA02 8AE0             (        mon09.asm):01489                 ORA     #%11100000  CONVERT TO NEGATIVE
EA04 8AE0             (        mon09.asm):01490                 ORA     #%11100000  CONVERT TO NEGATIVE
EA06 8AE0             (        mon09.asm):01491                 ORA     #%11100000  CONVERT TO NEGATIVE
EA08 8AE0             (        mon09.asm):01492                 ORA     #%11100000  CONVERT TO NEGATIVE
EA0A 8AE0             (        mon09.asm):01493                 ORA     #%11100000  CONVERT TO NEGATIVE
EA0C 8AE0             (        mon09.asm):01494                 ORA     #%11100000  CONVERT TO NEGATIVE
EA0E 8AE0             (        mon09.asm):01495                 ORA     #%11100000  CONVERT TO NEGATIVE
EA10 8AE0             (        mon09.asm):01496                 ORA     #%11100000  CONVERT TO NEGATIVE
EA12                  (        mon09.asm):01497         SINOK
EA12 30A6             (        mon09.asm):01498                 LEAX    A,Y     GET ADDRESS
EA14 205E             (        mon09.asm):01499                 BRA     XSAVPC      SAVE IT
                      (        mon09.asm):01500         ;* TEST FOR NO OFFSET
EA16                  (        mon09.asm):01501         NOT5BO
EA16 848F             (        mon09.asm):01502                 ANDA    #%10001111  REMOVE REGISTER & INDIRECT BIT
EA18 8184             (        mon09.asm):01503                 CMPA    #$84        NO OFFSET?
EA1A 2604             (        mon09.asm):01504                 BNE     TOFF8       NO, TRY OFFSET OF 8
EA1C 1F21             (        mon09.asm):01505                 TFR     Y,X     COPY
EA1E 2054             (        mon09.asm):01506                 BRA     XSAVPC      SAVE IT
                      (        mon09.asm):01507         ;* TEST FOR EIGHT BIT OFFSET
EA20                  (        mon09.asm):01508         TOFF8
EA20 8188             (        mon09.asm):01509                 CMPA    #$88        8 BIT OFSET?
EA22 2604             (        mon09.asm):01510                 BNE     TOFF16      NO, TRY 16 BIT OFFSET
EA24 E6C0             (        mon09.asm):01511                 LDB     ,U+     GET OFFSET
EA26 201A             (        mon09.asm):01512                 BRA     BSAVOF      GO FOR IT
                      (        mon09.asm):01513         ;* TEST FOR 16 BIT OFFSET
EA28                  (        mon09.asm):01514         TOFF16
EA28 8189             (        mon09.asm):01515                 CMPA    #$89        16 BIT OFFSET?
EA2A 2606             (        mon09.asm):01516                 BNE     TOFFA       TRY A ACCUMULATOR OFFSET
EA2C ECC0             (        mon09.asm):01517                 LDD     ,U+     GET OFFSET
EA2E 30AB             (        mon09.asm):01518                 LEAX    D,Y     DO IT
EA30 2042             (        mon09.asm):01519                 BRA     XSAVPC      SAVE IT
                      (        mon09.asm):01520         ;* TEST FOR ACCA OFFSET
EA32                  (        mon09.asm):01521         TOFFA
EA32 8186             (        mon09.asm):01522                 CMPA    #$86        OFFSET BY ACCA
EA34 2605             (        mon09.asm):01523                 BNE     TOFFB       NO, TRY B
EA36 F6DF70           (        mon09.asm):01524                 LDB     SAVA        GET ACCA
EA39 2007             (        mon09.asm):01525                 BRA     BSAVOF      SAVE IT
                      (        mon09.asm):01526         ;* TEST FOR ACCB OFFSET
EA3B                  (        mon09.asm):01527         TOFFB
EA3B 8185             (        mon09.asm):01528                 CMPA    #$85        B OFFSET
EA3D 2607             (        mon09.asm):01529                 BNE     TOFFD       NO, TRY D OFFSET
EA3F F6DF71           (        mon09.asm):01530                 LDB     SAVB        GET B
EA42                  (        mon09.asm):01531         BSAVOF
EA42 30A5             (        mon09.asm):01532                 LEAX    B,Y     DO OFFSET
EA44 202E             (        mon09.asm):01533                 BRA     XSAVPC      SAVE IT
                      (        mon09.asm):01534         ;* TEST FOR ACCD OFFSET
EA46                  (        mon09.asm):01535         TOFFD
EA46 818B             (        mon09.asm):01536                 CMPA    #$8B        IS IT D OFFSET?
EA48 2607             (        mon09.asm):01537                 BNE     TAINC1      NO, TRY AUTO INC
EA4A FCDF70           (        mon09.asm):01538                 LDD     SAVA        GET D ACCUMULATOR
EA4D 30AB             (        mon09.asm):01539                 LEAX    D,Y     DO IT
EA4F 2023             (        mon09.asm):01540                 BRA     XSAVPC      SAVE IT
                      (        mon09.asm):01541         ;* TEST FOR AUTO INCREMENT
EA51                  (        mon09.asm):01542         TAINC1
EA51 8180             (        mon09.asm):01543                 CMPA    #$80        AUTO INC BY 1?
EA53 2604             (        mon09.asm):01544                 BNE     TAINC2      NO, TRY AUTO INC BY 2
EA55 30A0             (        mon09.asm):01545                 LEAX    ,Y+     GET ADDRESS
EA57 2016             (        mon09.asm):01546                 BRA     RSVREG      RESAVE REGISTER
                      (        mon09.asm):01547         ;* TEST FOR DOUBLE AUTO INCREMENT
EA59                  (        mon09.asm):01548         TAINC2
EA59 8181             (        mon09.asm):01549                 CMPA    #$81        AUTO INC BY 1?
EA5B 2604             (        mon09.asm):01550                 BNE     TADEC1      NO, TRY AUTO DEC
EA5D 30A1             (        mon09.asm):01551                 LEAX    ,Y++        GET ADDRESS
EA5F 200E             (        mon09.asm):01552                 BRA     RSVREG      RESAVE REGISTER
                      (        mon09.asm):01553         ;* TEST FOR AUTO DECREMENT
EA61                  (        mon09.asm):01554         TADEC1
EA61 8182             (        mon09.asm):01555                 CMPA    #$82        AUTO DEC?
EA63 2604             (        mon09.asm):01556                 BNE     TADEC2      NO, TRY AUTO DEC BY TWO
EA65 30A2             (        mon09.asm):01557                 LEAX    ,-Y     GET ADDRESS
EA67 2006             (        mon09.asm):01558                 BRA     RSVREG      RESAVE REGISTER
                      (        mon09.asm):01559         ;* TEST FOR DOUBLE AUTO DECREMENT
EA69                  (        mon09.asm):01560         TADEC2
EA69 8183             (        mon09.asm):01561                 CMPA    #$83        DOUBLE AUTO DEC.
EA6B 2609             (        mon09.asm):01562                 BNE     TPCO8       NO, TRY PC OFFSET
EA6D 30A3             (        mon09.asm):01563                 LEAX    ,--Y        GET OFFSET
EA6F                  (        mon09.asm):01564         RSVREG
EA6F 10AF9FDF7D       (        mon09.asm):01565                 STY     [TEMP]      RESAVE REGISTER CONTENTS
EA74                  (        mon09.asm):01566         XSAVPC
EA74 2016             (        mon09.asm):01567                 BRA     SAVXPC      SAVE NEW PC
                      (        mon09.asm):01568         ;* TEST FOR EIGHT BIT OFFSET FROM PCR
EA76                  (        mon09.asm):01569         TPCO8
EA76 818C             (        mon09.asm):01570                 CMPA    #$8C        8 BIT PC RELATIVE?
EA78 2606             (        mon09.asm):01571                 BNE     TPCO16      NO, TRY 16 BIT PC RELATIVE
EA7A E6C0             (        mon09.asm):01572                 LDB     ,U+     GET BYTE
EA7C 30C5             (        mon09.asm):01573                 LEAX    B,U     OFFSET IT
EA7E 200C             (        mon09.asm):01574                 BRA     SAVXPC      RESAVE PC
                      (        mon09.asm):01575         ;* TEST FOR 16 BIT OFFSET FROM PCR
EA80                  (        mon09.asm):01576         TPCO16
EA80 818D             (        mon09.asm):01577                 CMPA    #$8D        16 BIT OFFSET
EA82 2606             (        mon09.asm):01578                 BNE     TEIND       NO, TRY EXTENDED INDIRECT
EA84 ECC1             (        mon09.asm):01579                 LDD     ,U++        GET VALUE
EA86 30CB             (        mon09.asm):01580                 LEAX    D,U     POINT TO NEW LOCATION
EA88 2002             (        mon09.asm):01581                 BRA     SAVXPC      RESAVE
                      (        mon09.asm):01582         ;* EXTENDED ADDRESSING VIA INDEXED POSTBYTE
EA8A                  (        mon09.asm):01583         TEIND
EA8A AEC1             (        mon09.asm):01584                 LDX     ,U++        GET ADDRESS
                      (        mon09.asm):01585         ;* SET SAVED PC TO CALCULATED ADDRESS (IN 'X').
                      (        mon09.asm):01586         ;* CHECK FOR & PERFORM INDIRECTION IF R=IRED
EA8C                  (        mon09.asm):01587         SAVXPC
EA8C 3502             (        mon09.asm):01588                 PULS    A       RESTORE POSTBYTE
EA8E 8510             (        mon09.asm):01589                 BITA    #%00010000  INDIRECT ADDRESSING?
EA90 2702             (        mon09.asm):01590                 BEQ     NINXIN      NOT INDIRECT
EA92 AE84             (        mon09.asm):01591                 LDX     ,X      PERFORM A LEVEL OF INDIRECTION
EA94                  (        mon09.asm):01592         NINXIN
EA94 BFDF79           (        mon09.asm):01593                 STX     SAVPC       SAVE IT
EA97 39               (        mon09.asm):01594                 RTS
                      (        mon09.asm):01595         ;* NORMAL EXECUTABLE INSTRUCTION, COPY IT INTO OUR RAM, THEN EXECUTE IT
EA98                  (        mon09.asm):01596         NOREXE
EA98 335F             (        mon09.asm):01597                 LEAU    -1,U        BACKUP TO INSTRUCTION
EA9A 8EDFCE           (        mon09.asm):01598                 LDX     #INSRAM     POINT TO RAM FOR INSTRUCTION
                      (        mon09.asm):01599         ;* COPY INSTRUCTION INTO RAM
EA9D                  (        mon09.asm):01600         NORE1
EA9D 11B3DF79         (        mon09.asm):01601                 CMPU    SAVPC       ARE WE THERE
EAA1 2406             (        mon09.asm):01602                 BHS     NORE2       END OF INSTRUCTION
EAA3 A6C0             (        mon09.asm):01603                 LDA     ,U+     GET DATA
EAA5 A780             (        mon09.asm):01604                 STA     ,X+     SAVE IN RAM
EAA7 20F4             (        mon09.asm):01605                 BRA     NORE1       CONTINUE
                      (        mon09.asm):01606         ;* INSERT A JUMP AFTER IT
EAA9                  (        mon09.asm):01607         NORE2
EAA9 867E             (        mon09.asm):01608                 LDA     #$7E        GET 'JMP' EXTENDED INSTRUCTION
EAAB A780             (        mon09.asm):01609                 STA     ,X+     SAVE IT
EAAD CCEAD4           (        mon09.asm):01610                 LDD     #NORE3      POINT AT ADDRESS TO JUMP TO
EAB0 ED84             (        mon09.asm):01611                 STD     ,X      SAVE IT
EAB2 10FFDF7D         (        mon09.asm):01612                 STS     TEMP        SAVE SP
EAB6 10FEDF7B         (        mon09.asm):01613                 LDS     SAVS        RESTORE STACK POINTER
EABA B6DF6F           (        mon09.asm):01614                 LDA     SAVCC       GET CC
EABD F6DF72           (        mon09.asm):01615                 LDB     SAVDP       GET DP
EAC0 3406             (        mon09.asm):01616                 PSHS    A,B     SAVE CC AND DP
EAC2 FCDF70           (        mon09.asm):01617                 LDD     SAVA        RESTORE A, B
EAC5 BEDF73           (        mon09.asm):01618                 LDX     SAVX        RESTORE X
EAC8 10BEDF75         (        mon09.asm):01619                 LDY     SAVY        RESTORE Y
EACC FEDF77           (        mon09.asm):01620                 LDU     SAVU        RESTORE U
EACF 3509             (        mon09.asm):01621                 PULS    CC,DP       RESTORE CC AND DP
EAD1 7EDFCE           (        mon09.asm):01622                 JMP     INSRAM      EXECUTE INSTRUCTION
                      (        mon09.asm):01623         ;* INSTRUCTION SHOULD RETURN TO HERE
EAD4                  (        mon09.asm):01624         NORE3
EAD4 3409             (        mon09.asm):01625                 PSHS    CC,DP       SAVE REGS
EAD6 FDDF70           (        mon09.asm):01626                 STD     SAVA        SAVE REGS
EAD9 BFDF73           (        mon09.asm):01627                 STX     SAVX        SAVE X
EADC 10BFDF75         (        mon09.asm):01628                 STY     SAVY        SAVE Y
EAE0 FFDF77           (        mon09.asm):01629                 STU     SAVU        SAVE U
EAE3 3506             (        mon09.asm):01630                 PULS    A,B     GET REGS BACK
EAE5 B7DF6F           (        mon09.asm):01631                 STA     SAVCC       SAVE CC
EAE8 F7DF72           (        mon09.asm):01632                 STB     SAVDP       SAVE DP
EAEB 10FFDF7B         (        mon09.asm):01633                 STS     SAVS        SAVE STACK POINTER
EAEF 10FEDF7D         (        mon09.asm):01634                 LDS     TEMP        RESTORE OUR STACK
EAF3 39               (        mon09.asm):01635                 RTS
                      (        mon09.asm):01636         ;*
                      (        mon09.asm):01637         ;* SUBROUTINE TO EVALUATE CONDITIONAL BRANCH OPCODES, AND DETERMINE
                      (        mon09.asm):01638         ;* IF THEY ARE TO BE EXECUTED
                      (        mon09.asm):01639         ;*
EAF4                  (        mon09.asm):01640         TSTCON
EAF4 C603             (        mon09.asm):01641                 LDB     #3      TEST FOR THREE CONDITIONALS
EAF6 812F             (        mon09.asm):01642                 CMPA    #$2F        IS IT 'BLE'?
EAF8 2602             (        mon09.asm):01643                 BNE     TSTC0       NO, ITS NORMAL
EAFA C606             (        mon09.asm):01644                 LDB     #6      HANDLE WRETCHED 'BLE' CASE
EAFC                  (        mon09.asm):01645         TSTC0
EAFC 8022             (        mon09.asm):01646                 SUBA    #$22        CONVERT OPCODE TO SIMPLE INDEX
EAFE 48               (        mon09.asm):01647                 LSLA    ROTATE..
EAFF 48               (        mon09.asm):01648                 LSLA    TWICE FOR FOUR BYTE ENTRIES
EB00 8EF36E           (        mon09.asm):01649                 LDX     #CONTAB     POINT TO TABLE
EB03 3086             (        mon09.asm):01650                 LEAX    A,X     ADVANCE TO TABLE ENTRY
EB05 B6DF6F           (        mon09.asm):01651                 LDA     SAVCC       GET CONDITION CODES
EB08 A480             (        mon09.asm):01652                 ANDA    ,X+     MASK OUT NON-APPLICABLE ONES
EB0A                  (        mon09.asm):01653         TSTC1
EB0A A180             (        mon09.asm):01654                 CMPA    ,X+     DOES IT MATCH?
EB0C 2706             (        mon09.asm):01655                 BEQ     TSTC2                             ;IT'S OK
EB0E 5A               (        mon09.asm):01656                 DECB    REDUCE COUNT
EB0F 26F9             (        mon09.asm):01657                 BNE     TSTC1       CONTINUE
EB11 86FF             (        mon09.asm):01658                 LDA     #255        INDICATE CONDITIONAL NOT MET
EB13 39               (        mon09.asm):01659                 RTS
EB14                  (        mon09.asm):01660         TSTC2
EB14 4F               (        mon09.asm):01661                 CLRA    INDICATE CONDITIONAL MET
EB15 39               (        mon09.asm):01662                 RTS
                      (        mon09.asm):01663         ;*
                      (        mon09.asm):01664         ;* DISASSEMBLE OPCODE POINTED TO BY Y. PLACE IN OUTPUT BUFFER POINTED TO BY U
                      (        mon09.asm):01665         ;*
EB16                  (        mon09.asm):01666         DISASS
EB16 10BFDF80         (        mon09.asm):01667                 STY     PTRSAV      SAVE INSTRUCTION POINTER
EB1A 3440             (        mon09.asm):01668                 PSHS    U       SAVE INST POINTER
EB1C CC201A           (        mon09.asm):01669                 LDD     #$2000+26   GET SPACE+NUMBER OF BYTES TO CLEAR
EB1F                  (        mon09.asm):01670         DISA1
EB1F A7C0             (        mon09.asm):01671                 STA     ,U+     SET A SPACE
EB21 5A               (        mon09.asm):01672                 DECB    REDUCE COUNT
EB22 26FB             (        mon09.asm):01673                 BNE     DISA1       CONTINUE
EB24 8EEE30           (        mon09.asm):01674                 LDX     #OPTAB1     POINT TO GENERAL OPCODE TABLE
EB27 A6A4             (        mon09.asm):01675                 LDA     ,Y      GET DATA BYTE
EB29 8110             (        mon09.asm):01676                 CMPA    #$10        PREFIX BYTE?
EB2B 2709             (        mon09.asm):01677                 BEQ     SETOP2      NEW TABLE
EB2D 8111             (        mon09.asm):01678                 CMPA    #$11        OTHER PREFIX BYTE
EB2F 260A             (        mon09.asm):01679                 BNE     OPFIND                            ;NO, IT'S OK
EB31 8EF13F           (        mon09.asm):01680                 LDX     #OPTAB3     POINT TO THIRD TABLE
EB34 2003             (        mon09.asm):01681                 BRA     OPFNXT      OK
EB36                  (        mon09.asm):01682         SETOP2
EB36 8EF0CA           (        mon09.asm):01683                 LDX     #OPTAB2     POINT TO SECOND OPERAND TABLE
EB39                  (        mon09.asm):01684         OPFNXT
EB39 3121             (        mon09.asm):01685                 LEAY    1,Y     SKIP PREFIX BYTE
                      (        mon09.asm):01686         ;* LOOK FOR OPCODE IN TABLE
EB3B                  (        mon09.asm):01687         OPFIND
EB3B A680             (        mon09.asm):01688                 LDA     ,X+     GET BYTE FROM TABLE
EB3D A1A4             (        mon09.asm):01689                 CMPA    ,Y      IS THIS IT?
EB3F 270C             (        mon09.asm):01690                 BEQ     FNDOPC      FOUND IT
EB41 81CF             (        mon09.asm):01691                 CMPA    #$CF        END OF TABLE?
EB43 2704             (        mon09.asm):01692                 BEQ     BADOPC      IF SO, FAKE AN OPCODE
EB45 3002             (        mon09.asm):01693                 LEAX    2,X     ADVANCE
EB47 20F2             (        mon09.asm):01694                 BRA     OPFIND      KEEP LOOKING
EB49                  (        mon09.asm):01695         BADOPC
EB49 10BEDF80         (        mon09.asm):01696                 LDY     PTRSAV      INSURE WE ARE AT BEGINNING
                      (        mon09.asm):01697         ;* LOCATED OPCODE, GENERATE STRING
EB4D                  (        mon09.asm):01698         FNDOPC
EB4D 3121             (        mon09.asm):01699                 LEAY    1,Y     SKIP TO POSTBYTE
EB4F A680             (        mon09.asm):01700                 LDA     ,X+     GET DATA
EB51 B7DF82           (        mon09.asm):01701                 STA     INSTYP      SAVE FOR LATER
EB54 E684             (        mon09.asm):01702                 LDB     ,X      GET INSTRUCTION NUMBER
EB56 8604             (        mon09.asm):01703                 LDA     #4      FOUR BYTES/ENTRY
EB58 3D               (        mon09.asm):01704                 MUL     CALCULATE ENTRY OFFSET
EB59 8EF15A           (        mon09.asm):01705                 LDX     #ITABLE     POINT TO INSTRUCTION TABLE
EB5C 308B             (        mon09.asm):01706                 LEAX    D,X     ADVANCE TO IT
EB5E C604             (        mon09.asm):01707                 LDB     #4      SIZE OF INSTRIUCTION FIELD
EB60                  (        mon09.asm):01708         FNDO1
EB60 A680             (        mon09.asm):01709                 LDA     ,X+     GET CHAR
EB62 A7C0             (        mon09.asm):01710                 STA     ,U+     SAVE IN OUTPUT
EB64 5A               (        mon09.asm):01711                 DECB    MOVE FOUR CHARACTERS
EB65 26F9             (        mon09.asm):01712                 BNE     FNDO1       CONTINUE
EB67                  (        mon09.asm):01713         FNDO2
EB67 B6DF82           (        mon09.asm):01714                 LDA     INSTYP      GET TYPE BITS BACK
EB6A 840F             (        mon09.asm):01715                 ANDA    #$0F        REMOVE CRAP
EB6C 10270173         (        mon09.asm):01716                 LBEQ    ENDIS       NO OPERANDS
                      (        mon09.asm):01717         ;* INSERT SPACES FOR OPERAND
EB70 C620             (        mon09.asm):01718                 LDB     #' '        GET A SPACE
EB72 E7C0             (        mon09.asm):01719                 STB     ,U+     SAVE IN OUTPUT
EB74 E7C0             (        mon09.asm):01720                 STB     ,U+     SAVE IN OUTPUT
EB76 4A               (        mon09.asm):01721                 DECA    IS 8 BIT IT IMMEDIATE?
EB77 2606             (        mon09.asm):01722                 BNE     IMM16       NO, TRY 16 BIT IMMEDIATE
                      (        mon09.asm):01723         ;* EIGHT BIT IMMEDIATE ADDRESSING OPERAND
EB79                  (        mon09.asm):01724         IMM8
EB79 8623             (        mon09.asm):01725                 LDA     #'#'        INDICATE IMMEDIATE
EB7B A7C0             (        mon09.asm):01726                 STA     ,U+     SAVE IT
EB7D 2010             (        mon09.asm):01727                 BRA     OP8     QUIT
                      (        mon09.asm):01728         ;* SIXTEEN BIT IMMEDIATE ADDRESSING
EB7F                  (        mon09.asm):01729         IMM16
EB7F 4A               (        mon09.asm):01730                 DECA    IS THIS IT?
EB80 2606             (        mon09.asm):01731                 BNE     DIRECT      NO, TRY DIRECT
EB82 8623             (        mon09.asm):01732                 LDA     #'#'        INDICATE IMMEDIATE
EB84 A7C0             (        mon09.asm):01733                 STA     ,U+     SAVE IT
EB86 2011             (        mon09.asm):01734                 BRA     OP16        16 BIT OPERAND
                      (        mon09.asm):01735         ;* DIRECT PAGE ADDRESSING
EB88                  (        mon09.asm):01736         DIRECT
EB88 4A               (        mon09.asm):01737                 DECA    IS THIS IT?
EB89 260B             (        mon09.asm):01738                 BNE     EXTEND      NO, TRY EXTENDED
EB8B 863C             (        mon09.asm):01739                 LDA     #'<'        INDICATE DIRECT
EB8D A7C0             (        mon09.asm):01740                 STA     ,U+     SAVE IT
EB8F                  (        mon09.asm):01741         OP8
EB8F A6A0             (        mon09.asm):01742                 LDA     ,Y+     GET OPERAND BYTE
EB91 170192           (        mon09.asm):01743                 LBSR    WRHEXB      OUTPUT
EB94 2008             (        mon09.asm):01744                 BRA     ENDIS1      END GO HOME
                      (        mon09.asm):01745         ;* EXTENDED ADDRESSING
EB96                  (        mon09.asm):01746         EXTEND
EB96 4A               (        mon09.asm):01747                 DECA    IS THIS IT?
EB97 2608             (        mon09.asm):01748                 BNE     INDEX       NO, TRY INDEXED
EB99                  (        mon09.asm):01749         OP16
EB99 ECA1             (        mon09.asm):01750                 LDD     ,Y++        GET OPCODES
EB9B 170190           (        mon09.asm):01751                 LBSR    WRHEXW      OUTPUT WORD
EB9E                  (        mon09.asm):01752         ENDIS1
EB9E 160142           (        mon09.asm):01753                 LBRA    ENDIS       GO HOME
                      (        mon09.asm):01754         ;* INDEXED ADDRESSING MODES
EBA1                  (        mon09.asm):01755         INDEX
EBA1 4A               (        mon09.asm):01756                 DECA    IS IT INDEXED?
EBA2 102600CB         (        mon09.asm):01757                 LBNE    PSHPUL      NO, TRY PUSH OR PUL
EBA6 A6A0             (        mon09.asm):01758                 LDA     ,Y+     GET POST BYTE
EBA8 B7DF83           (        mon09.asm):01759                 STA     POSBYT      SAVE FOR LATER
                      (        mon09.asm):01760         ;* TEST FOR FIVE BIT OFFSET
EBAB 2B04             (        mon09.asm):01761                 BMI     NO5BO       NOT A FIVE BIT OFFSET
EBAD 841F             (        mon09.asm):01762                 ANDA    #$1F        CONVERT TO POSTBYTE
EBAF 2014             (        mon09.asm):01763                 BRA     EVLX1       INSERT REGISTER AND CONTINUE
                      (        mon09.asm):01764         ;* TEST FOR INDIRECT MODE
EBB1                  (        mon09.asm):01765         NO5BO
EBB1 8510             (        mon09.asm):01766                 BITA    #$10        TEST FOR INDIRECT
EBB3 2704             (        mon09.asm):01767                 BEQ     NOIND       NOT INDIRECT
EBB5 C65B             (        mon09.asm):01768                 LDB     #'['        GET OPENING
EBB7 E7C0             (        mon09.asm):01769                 STB     ,U+     SAVE IN OUTPUT
                      (        mon09.asm):01770         ;* TEST FOR NO OFFSET
EBB9                  (        mon09.asm):01771         NOIND
EBB9 848F             (        mon09.asm):01772                 ANDA    #$8F        REMOVE REGS AND INDIRECT BIT
EBBB 8184             (        mon09.asm):01773                 CMPA    #$84        NO OFFSET?
EBBD 272E             (        mon09.asm):01774                 BEQ     INSR1       INSERT REGISTER AND EXIT
                      (        mon09.asm):01775         ;* TEST FOR EIGHT BIT OFFSET
EBBF 8188             (        mon09.asm):01776                 CMPA    #$88        EIGHT BIT OFFSET
EBC1 2607             (        mon09.asm):01777                 BNE     EVL1        NO, TRY NEXT
EBC3 A6A0             (        mon09.asm):01778                 LDA     ,Y+     GET BYTE OFFSET
EBC5                  (        mon09.asm):01779         EVLX1
EBC5 17015E           (        mon09.asm):01780                 LBSR    WRHEXB      OUTPUT
EBC8 2023             (        mon09.asm):01781                 BRA     INSR1       CONTINUE
                      (        mon09.asm):01782         ;* TEST FOR 16 BIT OFFSET
EBCA                  (        mon09.asm):01783         EVL1
EBCA 8189             (        mon09.asm):01784                 CMPA    #$89        16 BIT OFSET?
EBCC 2607             (        mon09.asm):01785                 BNE     EVL2        NO, TRY NEXT
EBCE ECA1             (        mon09.asm):01786                 LDD     ,Y++        GET OPERAND
EBD0 17015B           (        mon09.asm):01787                 LBSR    WRHEXW      OUTPUT
EBD3 2018             (        mon09.asm):01788                 BRA     INSR1       INSERT REGISTER
                      (        mon09.asm):01789         ;* TEST FOR A ACCUMULATOR OFFSET
EBD5                  (        mon09.asm):01790         EVL2
EBD5 8186             (        mon09.asm):01791                 CMPA    #$86        IS IT 'A' OFFSET?
EBD7 2604             (        mon09.asm):01792                 BNE     EVL3        NO, TRY NEXT
EBD9 8641             (        mon09.asm):01793                 LDA     #'A'        GET ACCA
EBDB 200E             (        mon09.asm):01794                 BRA     SAIREG      GO HOME
                      (        mon09.asm):01795         ;* TEST FOR B ACCUMULATOR OFFSET
EBDD                  (        mon09.asm):01796         EVL3
EBDD 8185             (        mon09.asm):01797                 CMPA    #$85        IS IT 'B' OFFSET?
EBDF 2604             (        mon09.asm):01798                 BNE     EVL4        NO, TRY NEXT
EBE1 8642             (        mon09.asm):01799                 LDA     #'B'        GET B
EBE3 2006             (        mon09.asm):01800                 BRA     SAIREG      GO HOME
                      (        mon09.asm):01801         ;* TEST FRO 'D' ACCUMULATOR OFFSET
EBE5                  (        mon09.asm):01802         EVL4
EBE5 818B             (        mon09.asm):01803                 CMPA    #$8B        D OFFSET?
EBE7 2606             (        mon09.asm):01804                 BNE     EVL5        NO, TRY NEXT
EBE9 8644             (        mon09.asm):01805                 LDA     #'D'        GET D REGISTER
EBEB                  (        mon09.asm):01806         SAIREG
EBEB A7C0             (        mon09.asm):01807                 STA     ,U+     SAVE IT
EBED                  (        mon09.asm):01808         INSR1
EBED 202C             (        mon09.asm):01809                 BRA     INSREG
                      (        mon09.asm):01810         ;* TEST FOR EXTENDED INDIRECT
EBEF                  (        mon09.asm):01811         EVL5
EBEF 818F             (        mon09.asm):01812                 CMPA    #$8F                              ;EXTENDED INDIRECT?
EBF1 2607             (        mon09.asm):01813                 BNE     EVL6                              ;NO, TRY NEXT
EBF3 ECA1             (        mon09.asm):01814                 LDD     ,Y++                              ;GET OFFSET
EBF5 170136           (        mon09.asm):01815                 LBSR    WRHEXW                            ;OUTPUT
EBF8 2054             (        mon09.asm):01816                 BRA     EVLFIN                            ;AND CONTINUE
                      (        mon09.asm):01817         ;* TEST FOR PC OFFSET, 8 BIT
EBFA                  (        mon09.asm):01818         EVL6
EBFA 818C             (        mon09.asm):01819                 CMPA    #$8C        EIGHT BIT PC OFFSET?
EBFC 2607             (        mon09.asm):01820                 BNE     EVL7        NO, TRY NEXT
EBFE A6A0             (        mon09.asm):01821                 LDA     ,Y+     GET OFFSET
EC00 170123           (        mon09.asm):01822                 LBSR    WRHEXB      OUTPUT
EC03 2009             (        mon09.asm):01823                 BRA     WRPCRG      OUTPUT PC REGISTER
                      (        mon09.asm):01824         ;* TEST FOR PC OFFSET, 16 BIT
EC05                  (        mon09.asm):01825         EVL7
EC05 818D             (        mon09.asm):01826                 CMPA    #$8D        PC OFFSET?
EC07 2612             (        mon09.asm):01827                 BNE     INSREG      NO, INSERT REGISTER
EC09 ECA1             (        mon09.asm):01828                 LDD     ,Y++        GET OFFSET
EC0B 170120           (        mon09.asm):01829                 LBSR    WRHEXW      OUTPUT
EC0E                  (        mon09.asm):01830         WRPCRG
EC0E 8EEDFB           (        mon09.asm):01831                 LDX     #PCRG       POINT TO STRING
EC11                  (        mon09.asm):01832         WRPR1
EC11 A680             (        mon09.asm):01833                 LDA     ,X+     GET CHAR
EC13 A7C0             (        mon09.asm):01834                 STA     ,U+     SAVE
EC15 8152             (        mon09.asm):01835                 CMPA    #'R'        END?
EC17 26F8             (        mon09.asm):01836                 BNE     WRPR1       NO, CONTINUE
EC19 2033             (        mon09.asm):01837                 BRA     EVLFIN      END IT NOW
                      (        mon09.asm):01838         ;* INSERT REGISTER BITS
EC1B                  (        mon09.asm):01839         INSREG
EC1B 862C             (        mon09.asm):01840                 LDA     #','        GET COMMA
EC1D A7C0             (        mon09.asm):01841                 STA     ,U+     SAVE IT
EC1F B6DF83           (        mon09.asm):01842                 LDA     POSBYT      GET POSTBYTE
EC22 C62D             (        mon09.asm):01843                 LDB     #'-'        GET MINUS
EC24 848F             (        mon09.asm):01844                 ANDA    #$8F        REMOVE CRAP
EC26 8182             (        mon09.asm):01845                 CMPA    #$82        DECREMENT BY ONE?
EC28 2706             (        mon09.asm):01846                 BEQ     DEC1        DECREMENT BY ONE
EC2A 8183             (        mon09.asm):01847                 CMPA    #$83        DECREMENT BY TWO?
EC2C 2604             (        mon09.asm):01848                 BNE     NODEC                             ;NO, DON'T DEC
EC2E E7C0             (        mon09.asm):01849                 STB     ,U+     SAVE
EC30                  (        mon09.asm):01850         DEC1
EC30 E7C0             (        mon09.asm):01851                 STB     ,U+     AGAIN
EC32                  (        mon09.asm):01852         NODEC
EC32 B6DF83           (        mon09.asm):01853                 LDA     POSBYT      GET POSTBYTE
EC35 44               (        mon09.asm):01854                 LSRA    SHIFT
EC36 44               (        mon09.asm):01855                 LSRA    REGISTER
EC37 44               (        mon09.asm):01856                 LSRA    BITS
EC38 44               (        mon09.asm):01857                 LSRA    INTO
EC39 44               (        mon09.asm):01858                 LSRA    BOTTOM
EC3A C658             (        mon09.asm):01859                 LDB     #'X'        GET 'X'
EC3C 8403             (        mon09.asm):01860                 ANDA    #$03        REMOVE CRAP
EC3E 270C             (        mon09.asm):01861                 BEQ     EVLEND      ITS 'X'
EC40 C659             (        mon09.asm):01862                 LDB     #'Y'        GET 'Y'
EC42 4A               (        mon09.asm):01863                 DECA    TEST FOR 'Y'
EC43 2707             (        mon09.asm):01864                 BEQ     EVLEND      YES
EC45 C655             (        mon09.asm):01865                 LDB     #'U'        GET 'U'
EC47 4A               (        mon09.asm):01866                 DECA    TEST
EC48 2702             (        mon09.asm):01867                 BEQ     EVLEND      ITS 'U'
EC4A C653             (        mon09.asm):01868                 LDB     #'S'        MUST BE 'S'
EC4C                  (        mon09.asm):01869         EVLEND
EC4C E7C0             (        mon09.asm):01870                 STB     ,U+     SAVE IN OUTPUT
EC4E                  (        mon09.asm):01871         EVLFIN
EC4E B6DF83           (        mon09.asm):01872                 LDA     POSBYT      GET POSTBYTE
EC51 C62B             (        mon09.asm):01873                 LDB     #'+'        GET PLUS
EC53 848F             (        mon09.asm):01874                 ANDA    #$8F        GET TYPE
EC55 8180             (        mon09.asm):01875                 CMPA    #$80        IS IT INC BY ONE
EC57 2706             (        mon09.asm):01876                 BEQ     INC1        IF SO, WE HAVE IT
EC59 8181             (        mon09.asm):01877                 CMPA    #$81        INC BY TWO?
EC5B 2604             (        mon09.asm):01878                 BNE     NOINC       NO INCREMENT
EC5D E7C0             (        mon09.asm):01879                 STB     ,U+     SAVE ONE
EC5F                  (        mon09.asm):01880         INC1
EC5F E7C0             (        mon09.asm):01881                 STB     ,U+     SAVE TWO
EC61                  (        mon09.asm):01882         NOINC
EC61 B6DF83           (        mon09.asm):01883                 LDA     POSBYT      GET POSTBYTE
EC64 2A08             (        mon09.asm):01884                 BPL     NOIND1      FIVE BIT OFFSET
EC66 8510             (        mon09.asm):01885                 BITA    #$10        INDIRECT?
EC68 2704             (        mon09.asm):01886                 BEQ     NOIND1      NO INDIRECT
EC6A 865D             (        mon09.asm):01887                 LDA     #']'        CLOSING BRACE
EC6C A7C0             (        mon09.asm):01888                 STA     ,U+     SAVE IT
EC6E                  (        mon09.asm):01889         NOIND1
EC6E 160072           (        mon09.asm):01890                 LBRA    ENDIS       END IT
                      (        mon09.asm):01891         ;* PULS OR PULL OPCODES
EC71                  (        mon09.asm):01892         PSHPUL
EC71 4A               (        mon09.asm):01893                 DECA    IS IT PUSH OR PULL?
EC72 2635             (        mon09.asm):01894                 BNE     TFREXG      NO, TRY TRANSFER OR EXCHANGE
EC74 A6A0             (        mon09.asm):01895                 LDA     ,Y+     GET POSTBYTE
EC76 8EEE1F           (        mon09.asm):01896                 LDX     #PSHTAB     GET 'CC'
EC79                  (        mon09.asm):01897         PSH1
EC79 44               (        mon09.asm):01898                 LSRA    SHIFT OUT BITS
EC7A 2425             (        mon09.asm):01899                 BCC     PSHNXT      SKIP THIS ONE
EC7C 3406             (        mon09.asm):01900                 PSHS    A,B     SAVE REGS
EC7E EC81             (        mon09.asm):01901                 LDD     ,X++        GET DATA
EC80 8155             (        mon09.asm):01902                 CMPA    #'U'        SAVEING U REGISTER
EC82 2607             (        mon09.asm):01903                 BNE     PSH4                              ;NO, IT'S OK
EC84 7DDF82           (        mon09.asm):01904                 TST     INSTYP      SPECIAL CASE
EC87 2A02             (        mon09.asm):01905                 BPL     PSH4        OK
EC89 8653             (        mon09.asm):01906                 LDA     #'S'        CONVERT
EC8B                  (        mon09.asm):01907         PSH4
EC8B A7C0             (        mon09.asm):01908                 STA     ,U+     SAVE IT
EC8D 5D               (        mon09.asm):01909                 TSTB    MORE?
EC8E 2702             (        mon09.asm):01910                 BEQ     PSH2        NO, SKIP IT
EC90 E7C0             (        mon09.asm):01911                 STB     ,U+     SAVE
EC92                  (        mon09.asm):01912         PSH2
EC92 3506             (        mon09.asm):01913                 PULS    A,B     RESTORE REGS
EC94 4D               (        mon09.asm):01914                 TSTA    MORE BITS?
EC95 270F             (        mon09.asm):01915                 BEQ     PSH3        NO, QUIT
EC97 3402             (        mon09.asm):01916                 PSHS    A       RESAVE
EC99 862C             (        mon09.asm):01917                 LDA     #','        GET COMMA
EC9B A7C0             (        mon09.asm):01918                 STA     ,U+     SAVE
EC9D 3502             (        mon09.asm):01919                 PULS    A       GET IT BACK
EC9F 20D8             (        mon09.asm):01920                 BRA     PSH1        CONTINUE
ECA1                  (        mon09.asm):01921         PSHNXT
ECA1 3002             (        mon09.asm):01922                 LEAX    2,X     ADVANCE
ECA3 4D               (        mon09.asm):01923                 TSTA    ARE WE OK
ECA4 26D3             (        mon09.asm):01924                 BNE     PSH1        KEEP TRYING
ECA6                  (        mon09.asm):01925         PSH3
ECA6 16003A           (        mon09.asm):01926                 LBRA    ENDIS       DONE
                      (        mon09.asm):01927         ;* TRANSFER AND EXCHANGE POSTBYTE OPCODES
ECA9                  (        mon09.asm):01928         TFREXG
ECA9 4A               (        mon09.asm):01929                 DECA    TRANSFER OR EXCHANGE?
ECAA 2623             (        mon09.asm):01930                 BNE     SBRAN       TRY SHORT BRANCH
ECAC A6A4             (        mon09.asm):01931                 LDA     ,Y      GET POSTBYTE
ECAE 44               (        mon09.asm):01932                 LSRA    SHIFT
ECAF 44               (        mon09.asm):01933                 LSRA    INTO
ECB0 44               (        mon09.asm):01934                 LSRA    LOW
ECB1 44               (        mon09.asm):01935                 LSRA    NIBBLE
ECB2 8D0B             (        mon09.asm):01936                 BSR     TFRREG      GET REGISTER
ECB4 862C             (        mon09.asm):01937                 LDA     #','        SEPERATOR
ECB6 A7C0             (        mon09.asm):01938                 STA     ,U+     SAVE
ECB8 A6A0             (        mon09.asm):01939                 LDA     ,Y+     GET POSTBYTE AGAIN
ECBA 8D03             (        mon09.asm):01940                 BSR     TFRREG      PLACE IT
ECBC 160024           (        mon09.asm):01941                 LBRA    ENDIS       GO HOME
                      (        mon09.asm):01942         ;* CALCULATE TRANSFER REGISTER
ECBF                  (        mon09.asm):01943         TFRREG
ECBF 840F             (        mon09.asm):01944                 ANDA    #$0F        REMOVE HIGH CRAP
ECC1 48               (        mon09.asm):01945                 LSLA    MULTIPLY BY TWO
ECC2 8EEDFF           (        mon09.asm):01946                 LDX     #REGTAB     POINT TO TABLE
ECC5 EC86             (        mon09.asm):01947                 LDD     A,X     GET REGISTER VALUE
ECC7 A7C0             (        mon09.asm):01948                 STA     ,U+     SAVE IT
ECC9 5D               (        mon09.asm):01949                 TSTB    SECOND BYTE?
ECCA 2702             (        mon09.asm):01950                 BEQ     TFRET       NO, SKIP IT
ECCC E7C0             (        mon09.asm):01951                 STB     ,U+     SAVE IT
ECCE                  (        mon09.asm):01952         TFRET
ECCE 39               (        mon09.asm):01953                 RTS
                      (        mon09.asm):01954         ;* SHORT BRANCH
ECCF                  (        mon09.asm):01955         SBRAN
ECCF 4A               (        mon09.asm):01956                 DECA    SHORT BRANCH
ECD0 2608             (        mon09.asm):01957                 BNE     LBRAN       NO, TRY LONG BRANCH
ECD2 E6A0             (        mon09.asm):01958                 LDB     ,Y+     GET OPERATOR
ECD4 30A5             (        mon09.asm):01959                 LEAX    B,Y     GET NEW ADDRESS
ECD6 1F10             (        mon09.asm):01960                 TFR     X,D     COPY
ECD8 2006             (        mon09.asm):01961                 BRA     SAVADR      FINISH
                      (        mon09.asm):01962         ;* LONG BRANCH
ECDA                  (        mon09.asm):01963         LBRAN
ECDA ECA1             (        mon09.asm):01964                 LDD     ,Y++        GET OPERAND
ECDC 3420             (        mon09.asm):01965                 PSHS    Y       SAVE Y
ECDE E3E1             (        mon09.asm):01966                 ADDD    ,S++        ADD OFFSET TO REG
ECE0                  (        mon09.asm):01967         SAVADR
ECE0 17004B           (        mon09.asm):01968                 LBSR    WRHEXW      OUTPUT WORD.
ECE3                  (        mon09.asm):01969         ENDIS
ECE3 86FF             (        mon09.asm):01970                 LDA     #$FF        LINE TERMINATOR
ECE5 A7C4             (        mon09.asm):01971                 STA     ,U      SAVE IT
                      (        mon09.asm):01972         ;* INSERT ADDRESS/BYTE DATA
ECE7 EEE4             (        mon09.asm):01973                 LDU     ,S      RESTORE U REGISTER
ECE9 3420             (        mon09.asm):01974                 PSHS    Y       SAVE POINTER TO END
ECEB BEDF80           (        mon09.asm):01975                 LDX     PTRSAV      POINT TO STARTING ADDRESS
ECEE 1F10             (        mon09.asm):01976                 TFR     X,D     COPY
ECF0 170045           (        mon09.asm):01977                 LBSR    WRHEX       OUTPUT
ECF3 1F98             (        mon09.asm):01978                 TFR     B,A     COPY
ECF5 170040           (        mon09.asm):01979                 LBSR    WRHEX       OUTPUT
ECF8 5F               (        mon09.asm):01980                 CLRB    START WITH ZERO
ECF9                  (        mon09.asm):01981         END1
ECF9 ACE4             (        mon09.asm):01982                 CMPX    ,S      ARE WE AT END?
ECFB 240A             (        mon09.asm):01983                 BHS     END2        IF SO, QUIT
ECFD 5C               (        mon09.asm):01984                 INCB    ADVANCE
ECFE 3341             (        mon09.asm):01985                 LEAU    1,U     ADVANCE
ED00 A680             (        mon09.asm):01986                 LDA     ,X+     GET BYTE
ED02 170033           (        mon09.asm):01987                 LBSR    WRHEX       OUTPUT
ED05 20F2             (        mon09.asm):01988                 BRA     END1        CONTINUE
ED07                  (        mon09.asm):01989         END2
ED07 3262             (        mon09.asm):01990                 LEAS    2,S     RESTORE STACK
ED09 EEE4             (        mon09.asm):01991                 LDU     ,S      RESTORE U REGISTER
ED0B 33C814           (        mon09.asm):01992                 LEAU    20,U        ADVANCE TO TEXT FIELD
ED0E BEDF80           (        mon09.asm):01993                 LDX     PTRSAV      GET POINTER BACK
ED11                  (        mon09.asm):01994         END3
ED11 5A               (        mon09.asm):01995                 DECB    REDUCE COUNT
ED12 2B10             (        mon09.asm):01996                 BMI     END4        CONTINUE
ED14 A680             (        mon09.asm):01997                 LDA     ,X+     GO IT AGAIN
ED16 8120             (        mon09.asm):01998                 CMPA    #' '        < SPACE?
ED18 2504             (        mon09.asm):01999                 BLO     END5        YES
ED1A 817F             (        mon09.asm):02000                 CMPA    #$7F        > 7F?
ED1C 2502             (        mon09.asm):02001                 BLO     END6        OK
ED1E                  (        mon09.asm):02002         END5
ED1E 862E             (        mon09.asm):02003                 LDA     #'.'        CONVERT TO DOT
ED20                  (        mon09.asm):02004         END6
ED20 A7C0             (        mon09.asm):02005                 STA     ,U+     SAVE
ED22 20ED             (        mon09.asm):02006                 BRA     END3
ED24                  (        mon09.asm):02007         END4
ED24 35C0             (        mon09.asm):02008                 PULS    U,PC        GO HOME
                      (        mon09.asm):02009         ;*
                      (        mon09.asm):02010         ;* SUBROUTINES
                      (        mon09.asm):02011         ;*
ED26                  (        mon09.asm):02012         WRHEXB
ED26 3402             (        mon09.asm):02013                 PSHS    A       SAVE IT
ED28 8624             (        mon09.asm):02014                 LDA     #'$'        INDICATE HEX
ED2A A7C0             (        mon09.asm):02015                 STA     ,U+     SAVE
ED2C 2008             (        mon09.asm):02016                 BRA     WRHEX1      CONTINUE
ED2E                  (        mon09.asm):02017         WRHEXW
ED2E 3404             (        mon09.asm):02018                 PSHS    B       SAVE B
ED30 C624             (        mon09.asm):02019                 LDB     #'$'        INDICATE HEX
ED32 E7C0             (        mon09.asm):02020                 STB     ,U+     SAVE IT
ED34 8D02             (        mon09.asm):02021                 BSR     WRHEX       OUTPUT
ED36                  (        mon09.asm):02022         WRHEX1
ED36 3502             (        mon09.asm):02023                 PULS    A       RESTORE
ED38                  (        mon09.asm):02024         WRHEX
ED38 3402             (        mon09.asm):02025                 PSHS    A       SAVE IT
ED3A 44               (        mon09.asm):02026                 LSRA    SHIFT
ED3B 44               (        mon09.asm):02027                 LSRA    HIGH BYTE
ED3C 44               (        mon09.asm):02028                 LSRA    INTO
ED3D 44               (        mon09.asm):02029                 LSRA    LOW FOR OUTPUT
ED3E 8D02             (        mon09.asm):02030                 BSR     WRHEXN      OUTPUT NIBBLE
ED40 3502             (        mon09.asm):02031                 PULS    A       RETORE
ED42                  (        mon09.asm):02032         WRHEXN
ED42 840F             (        mon09.asm):02033                 ANDA    #$0F        REMOVE CRAP
ED44 8B30             (        mon09.asm):02034                 ADDA    #$30        CONVERT
ED46 8139             (        mon09.asm):02035                 CMPA    #$39        OK?
ED48 2302             (        mon09.asm):02036                 BLS     WRNOK       OK
ED4A 8B07             (        mon09.asm):02037                 ADDA    #7      CONVERT
ED4C                  (        mon09.asm):02038         WRNOK
ED4C A7C0             (        mon09.asm):02039                 STA     ,U+     SAVE IT
ED4E 39               (        mon09.asm):02040                 RTS
                      (        mon09.asm):02041         ;*
                      (        mon09.asm):02042         ;* NMI HANDLER
                      (        mon09.asm):02043         ;*
ED4F                  (        mon09.asm):02044         NMIHND
ED4F 8EDF6F           (        mon09.asm):02045                 LDX     #SAVCC      POINT TO START OF SAVED REGS
ED52 C60C             (        mon09.asm):02046                 LDB     #12     MOVE 12 BYTES
ED54                  (        mon09.asm):02047         NMIH1
ED54 A6E0             (        mon09.asm):02048                 LDA     ,S+     GET BYTE
ED56 A780             (        mon09.asm):02049                 STA     ,X+     SAVE
ED58 5A               (        mon09.asm):02050                 DECB    DECREMENT COUNT
ED59 26F9             (        mon09.asm):02051                 BNE     NMIH1       DO THEM ALL
ED5B 10FFDF7B         (        mon09.asm):02052                 STS     SAVS        SAVE STACK POINTER
ED5F 17FA6A           (        mon09.asm):02053                 LBSR    WRMSG       DISPLAY MESSAGE
ED62 3B2A3B2A3B2A204E (        mon09.asm):02054                 FCC     ';*;*;* NMI Interrupt ;*;*;*'
     4D4920496E746572
     72757074203B2A3B
     2A3B2A
ED7D FF               (        mon09.asm):02055                 FCB     $FF     NEW LINE
ED7E 2062             (        mon09.asm):02056                 BRA     BRKREG      DISPLAY REGISTERS
                      (        mon09.asm):02057         ;*
                      (        mon09.asm):02058         ;* SWI HANDLER
                      (        mon09.asm):02059         ;*
ED80                  (        mon09.asm):02060         SWIHND
ED80 108EDF84         (        mon09.asm):02061                 LDY     #BRKTAB     POINT TO BREAKPOINT TABLE
ED84 AE6A             (        mon09.asm):02062                 LDX     10,S        GET STORED PC
ED86 301F             (        mon09.asm):02063                 LEAX    -1,X        BACKUP TO BREAKPOINT ADDRESS
ED88 C608             (        mon09.asm):02064                 LDB     #8      CHECK EIGHT BREAKPOINTS
ED8A                  (        mon09.asm):02065         SWIHN1
ED8A ACA4             (        mon09.asm):02066                 CMPX    ,Y      IS THIS IT?
ED8C 2710             (        mon09.asm):02067                 BEQ     SWIHN2      YES
ED8E 3123             (        mon09.asm):02068                 LEAY    3,Y     SKIP OPCODE
ED90 5A               (        mon09.asm):02069                 DECB    REDUCE COUNT
ED91 26F7             (        mon09.asm):02070                 BNE     SWIHN1      CONTINUE
ED93 E662             (        mon09.asm):02071                 LDB     2,S     RESTORE B.
ED95 AE64             (        mon09.asm):02072                 LDX     4,S     RESTORE X.
ED97 10AE66           (        mon09.asm):02073                 LDY     6,S     RESTORE Y.
ED9A 6E9FDF60         (        mon09.asm):02074                 JMP     [SWIADR]    NOT A BREAKPOINT, EXECUTE SWI HANDLER
ED9E                  (        mon09.asm):02075         SWIHN2
ED9E F7DF82           (        mon09.asm):02076                 STB     INSTYP      SAVE BREAKPOINT NUMBER
EDA1 8EDF6F           (        mon09.asm):02077                 LDX     #SAVCC      POINT TO START OF SAVED REGS
EDA4 C60A             (        mon09.asm):02078                 LDB     #10     MOVE 10
EDA6                  (        mon09.asm):02079         SWIHN25
EDA6 A6E0             (        mon09.asm):02080                 LDA     ,S+     GET BYTE
EDA8 A780             (        mon09.asm):02081                 STA     ,X+     SAVE
EDAA 5A               (        mon09.asm):02082                 DECB    DECREMENT COUNT
EDAB 26F9             (        mon09.asm):02083                 BNE     SWIHN25     DO THEM ALL
EDAD 3510             (        mon09.asm):02084                 PULS    X       GET PC
EDAF 301F             (        mon09.asm):02085                 LEAX    -1,X        SET BACK TO REAL PC
EDB1 BFDF79           (        mon09.asm):02086                 STX     SAVPC       SAVED PC
EDB4 10FFDF7B         (        mon09.asm):02087                 STS     SAVS        SAVE STACK POINTER
EDB8 17FA11           (        mon09.asm):02088                 LBSR    WRMSG       DISPLAY MESSAGE
EDBB 3B2A3B2A3B2A2042 (        mon09.asm):02089                 FCN     ';*;*;* Breakpoint #'
     7265616B706F696E
     74202300
EDCF 8638             (        mon09.asm):02090                 LDA     #$38        GET NUMBER, PLUS ASCII CONVERT
EDD1 B0DF82           (        mon09.asm):02091                 SUBA    INSTYP      CONVERT TO PROPER DIGIT
EDD4 17FA41           (        mon09.asm):02092                 LBSR    PUTCHR      DISPLAY
EDD7 17F9F2           (        mon09.asm):02093                 LBSR    WRMSG       OUTPUT MESSAGE
EDDA 203B2A3B2A3B2A   (        mon09.asm):02094                 FCC     ' ;*;*;*'      TRAILING MESSAGE
EDE1 FF               (        mon09.asm):02095                 FCB     $FF     NEW LINE
EDE2                  (        mon09.asm):02096         BRKREG
EDE2 17F4E4           (        mon09.asm):02097                 LBSR    DISREG      DISPLAY
EDE5                  (        mon09.asm):02098         BRKRES
EDE5 8EDF84           (        mon09.asm):02099                 LDX     #BRKTAB     POINT TO BREAKPOINT TABLE
EDE8 C608             (        mon09.asm):02100                 LDB     #8      DO IT EIGHT TIMES
EDEA                  (        mon09.asm):02101         SWIHN3
EDEA 10AE81           (        mon09.asm):02102                 LDY     ,X++        GET REG
EDED 2704             (        mon09.asm):02103                 BEQ     SWIHN4      NO BRK, NEXT
EDEF A684             (        mon09.asm):02104                 LDA     ,X      GET OPCODE
EDF1 A7A4             (        mon09.asm):02105                 STA     ,Y      REPLACE IN RAM
EDF3                  (        mon09.asm):02106         SWIHN4
EDF3 3001             (        mon09.asm):02107                 LEAX    1,X     SKIP OPCODE
EDF5 5A               (        mon09.asm):02108                 DECB    REDUCE COUNT
EDF6 26F2             (        mon09.asm):02109                 BNE     SWIHN3      GO AGAIN
EDF8 16F284           (        mon09.asm):02110                 LBRA    MAIN        DO PROMPT
                      (        mon09.asm):02111         ;* CONSTANTS
EDFB                  (        mon09.asm):02112         PCRG
EDFB 2C504352         (        mon09.asm):02113                 FCC     ',PCR'
                      (        mon09.asm):02114         ;* TRANSFER/EXCHANGE REGISTER TABLE
EDFF                  (        mon09.asm):02115         REGTAB
EDFF 4400             (        mon09.asm):02116                 FCN     'D'     0
EE01 5800             (        mon09.asm):02117                 FCN     'X'     1
EE03 5900             (        mon09.asm):02118                 FCN     'Y'     2
EE05 5500             (        mon09.asm):02119                 FCN     'U'     3
EE07 5300             (        mon09.asm):02120                 FCN     'S'     4
EE09 5043             (        mon09.asm):02121                 FCC     'PC'        5
EE0B 3F00             (        mon09.asm):02122                 FCN     '?'     6
EE0D 3F00             (        mon09.asm):02123                 FCN     '?'     7
EE0F 4100             (        mon09.asm):02124                 FCN     'A'     8
EE11 4200             (        mon09.asm):02125                 FCN     'B'     9
EE13 4343             (        mon09.asm):02126                 FCC     'CC'        A
EE15 4450             (        mon09.asm):02127                 FCC     'DP'        B
EE17 3F00             (        mon09.asm):02128                 FCN     '?'     C
EE19 3F00             (        mon09.asm):02129                 FCN     '?'     D
EE1B 3F00             (        mon09.asm):02130                 FCN     '?'     E
EE1D 3F00             (        mon09.asm):02131                 FCN     '?'     F
                      (        mon09.asm):02132         ;* PUSH/PULL REGISTER TABLE
EE1F                  (        mon09.asm):02133         PSHTAB
EE1F 4343             (        mon09.asm):02134                 FCC     'CC'
EE21 4100             (        mon09.asm):02135                 FCN     'A'
EE23 4200             (        mon09.asm):02136                 FCN     'B'
EE25 4450             (        mon09.asm):02137                 FCC     'DP'
EE27 5800             (        mon09.asm):02138                 FCN     'X'
EE29 5900             (        mon09.asm):02139                 FCN     'Y'
EE2B 5500             (        mon09.asm):02140                 FCN     'U'
EE2D 504300           (        mon09.asm):02141                 FCN     'PC'
                      (        mon09.asm):02142         ;*
                      (        mon09.asm):02143         ;* OPCODE TABLE, OPCODE BYTE, TYPE BYTE, TEXT BYTE
                      (        mon09.asm):02144         ;*
EE30                  (        mon09.asm):02145         OPTAB1
EE30 860101           (        mon09.asm):02146                 FCB     $86,1,1     'LDA' INSTRUCTIONS
EE33 960301           (        mon09.asm):02147                 FCB     $96,3,1
EE36 A60501           (        mon09.asm):02148                 FCB     $A6,5,1
EE39 B60401           (        mon09.asm):02149                 FCB     $B6,4,1
EE3C C60102           (        mon09.asm):02150                 FCB     $C6,1,2     'LDB' INSTRUCTIONS
EE3F D60302           (        mon09.asm):02151                 FCB     $D6,3,2
EE42 E60502           (        mon09.asm):02152                 FCB     $E6,5,2
EE45 F60402           (        mon09.asm):02153                 FCB     $F6,4,2
EE48 CC0203           (        mon09.asm):02154                 FCB     $CC,2,3     'LDD' INSTRUCTIONS
EE4B DC0303           (        mon09.asm):02155                 FCB     $DC,3,3
EE4E EC0503           (        mon09.asm):02156                 FCB     $EC,5,3
EE51 FC0403           (        mon09.asm):02157                 FCB     $FC,4,3
EE54 CE0204           (        mon09.asm):02158                 FCB     $CE,2,4     'LDU' INSTRUCTIONS
EE57 DE0304           (        mon09.asm):02159                 FCB     $DE,3,4
EE5A EE0504           (        mon09.asm):02160                 FCB     $EE,5,4
EE5D FE0404           (        mon09.asm):02161                 FCB     $FE,4,4
EE60 8E0205           (        mon09.asm):02162                 FCB     $8E,2,5     'LDX' INSTRUCTIONS
EE63 9E0305           (        mon09.asm):02163                 FCB     $9E,3,5
EE66 AE0505           (        mon09.asm):02164                 FCB     $AE,5,5
EE69 BE0405           (        mon09.asm):02165                 FCB     $BE,4,5
EE6C 970306           (        mon09.asm):02166                 FCB     $97,3,6     'STA' INSTRUCTINOS
EE6F A70506           (        mon09.asm):02167                 FCB     $A7,5,6
EE72 B70406           (        mon09.asm):02168                 FCB     $B7,4,6
EE75 D70307           (        mon09.asm):02169                 FCB     $D7,3,7     'STB' INSTRUCTIONS
EE78 E70507           (        mon09.asm):02170                 FCB     $E7,5,7
EE7B F70407           (        mon09.asm):02171                 FCB     $F7,4,7
EE7E DD0308           (        mon09.asm):02172                 FCB     $DD,3,8     'STD' INSTRUCTIONS
EE81 ED0508           (        mon09.asm):02173                 FCB     $ED,5,8
EE84 FD0408           (        mon09.asm):02174                 FCB     $FD,4,8
EE87 DF0309           (        mon09.asm):02175                 FCB     $DF,3,9     'STU' INSTRUCTIONS
EE8A EF0509           (        mon09.asm):02176                 FCB     $EF,5,9
EE8D FF0409           (        mon09.asm):02177                 FCB     $FF,4,9
EE90 9F030A           (        mon09.asm):02178                 FCB     $9F,3,10    'STX' INSTRUCTIONS
EE93 AF050A           (        mon09.asm):02179                 FCB     $AF,5,10
EE96 BF040A           (        mon09.asm):02180                 FCB     $BF,4,10
EE99 3A000B           (        mon09.asm):02181                 FCB     $3A,0,11    'ABX'
EE9C 89010C           (        mon09.asm):02182                 FCB     $89,1,12    'ADCA'
EE9F 99030C           (        mon09.asm):02183                 FCB     $99,3,12
EEA2 A9050C           (        mon09.asm):02184                 FCB     $A9,5,12
EEA5 B9040C           (        mon09.asm):02185                 FCB     $B9,4,12
EEA8 C9010D           (        mon09.asm):02186                 FCB     $C9,1,13    'ADCB'
EEAB D9030D           (        mon09.asm):02187                 FCB     $D9,3,13
EEAE E9050D           (        mon09.asm):02188                 FCB     $E9,5,13
EEB1 F9040D           (        mon09.asm):02189                 FCB     $F9,4,13
EEB4 8B010E           (        mon09.asm):02190                 FCB     $8B,1,14    'ADDA'
EEB7 9B030E           (        mon09.asm):02191                 FCB     $9B,3,14
EEBA AB050E           (        mon09.asm):02192                 FCB     $AB,5,14
EEBD BB040E           (        mon09.asm):02193                 FCB     $BB,4,14
EEC0 CB010F           (        mon09.asm):02194                 FCB     $CB,1,15    'ADDB'
EEC3 DB030F           (        mon09.asm):02195                 FCB     $DB,3,15
EEC6 EB050F           (        mon09.asm):02196                 FCB     $EB,5,15
EEC9 FB040F           (        mon09.asm):02197                 FCB     $FB,4,15
EECC C30210           (        mon09.asm):02198                 FCB     $C3,2,16    'ADDD'
EECF D30310           (        mon09.asm):02199                 FCB     $D3,3,16
EED2 E30510           (        mon09.asm):02200                 FCB     $E3,5,16
EED5 F30410           (        mon09.asm):02201                 FCB     $F3,4,16
EED8 480011           (        mon09.asm):02202                 FCB     $48,0,17    'ASLA'
EEDB 580012           (        mon09.asm):02203                 FCB     $58,0,18    'ASLB'
EEDE 080313           (        mon09.asm):02204                 FCB     $08,3,19    'ASL'
EEE1 680513           (        mon09.asm):02205                 FCB     $68,5,19
EEE4 780413           (        mon09.asm):02206                 FCB     $78,4,19
EEE7 470014           (        mon09.asm):02207                 FCB     $47,0,20    'ASRA'
EEEA 570015           (        mon09.asm):02208                 FCB     $57,0,21    'ASRB'
EEED 070316           (        mon09.asm):02209                 FCB     $07,3,22    'ASR'
EEF0 670516           (        mon09.asm):02210                 FCB     $67,5,22
EEF3 770416           (        mon09.asm):02211                 FCB     $77,4,22
EEF6 850117           (        mon09.asm):02212                 FCB     $85,1,23    'BITA'
EEF9 950317           (        mon09.asm):02213                 FCB     $95,3,23
EEFC A50517           (        mon09.asm):02214                 FCB     $A5,5,23
EEFF B50417           (        mon09.asm):02215                 FCB     $B5,4,23
EF02 C50118           (        mon09.asm):02216                 FCB     $C5,1,24    'BITB'
EF05 D50318           (        mon09.asm):02217                 FCB     $D5,3,24
EF08 E50518           (        mon09.asm):02218                 FCB     $E5,5,24
EF0B F50418           (        mon09.asm):02219                 FCB     $F5,4,24
EF0E 4F0019           (        mon09.asm):02220                 FCB     $4F,0,25    'CLRA'
EF11 5F001A           (        mon09.asm):02221                 FCB     $5F,0,26    'CLRB'
EF14 0F031B           (        mon09.asm):02222                 FCB     $0F,3,27    'CLR'
EF17 6F051B           (        mon09.asm):02223                 FCB     $6F,5,27
EF1A 7F041B           (        mon09.asm):02224                 FCB     $7F,4,27
EF1D 81011C           (        mon09.asm):02225                 FCB     $81,1,28    'CMPA'
EF20 91031C           (        mon09.asm):02226                 FCB     $91,3,28
EF23 A1051C           (        mon09.asm):02227                 FCB     $A1,5,28
EF26 B1041C           (        mon09.asm):02228                 FCB     $B1,4,28
EF29 C1011D           (        mon09.asm):02229                 FCB     $C1,1,29    'CMPB'
EF2C D1031D           (        mon09.asm):02230                 FCB     $D1,3,29
EF2F E1051D           (        mon09.asm):02231                 FCB     $E1,5,29
EF32 F1041D           (        mon09.asm):02232                 FCB     $F1,4,29
EF35 8C021E           (        mon09.asm):02233                 FCB     $8C,2,30    'CMPX'
EF38 9C031E           (        mon09.asm):02234                 FCB     $9C,3,30
EF3B AC051E           (        mon09.asm):02235                 FCB     $AC,5,30
EF3E BC041E           (        mon09.asm):02236                 FCB     $BC,4,30
EF41 43001F           (        mon09.asm):02237                 FCB     $43,0,31    'COMA'
EF44 530020           (        mon09.asm):02238                 FCB     $53,0,32    'COMB'
EF47 030321           (        mon09.asm):02239                 FCB     $03,3,33    'COM'
EF4A 630521           (        mon09.asm):02240                 FCB     $63,5,33
EF4D 730421           (        mon09.asm):02241                 FCB     $73,4,33
EF50 3C0122           (        mon09.asm):02242                 FCB     $3C,1,34    'CWAI'
EF53 190023           (        mon09.asm):02243                 FCB     $19,0,35    'DAA'
EF56 4A0024           (        mon09.asm):02244                 FCB     $4A,0,36    'DECA'
EF59 5A0025           (        mon09.asm):02245                 FCB     $5A,0,37    'DECB'
EF5C 0A0326           (        mon09.asm):02246                 FCB     $0A,3,38    'DEC'
EF5F 6A0526           (        mon09.asm):02247                 FCB     $6A,5,38
EF62 7A0426           (        mon09.asm):02248                 FCB     $7A,4,38
EF65 880127           (        mon09.asm):02249                 FCB     $88,1,39    'EORA'
EF68 980327           (        mon09.asm):02250                 FCB     $98,3,39
EF6B A80527           (        mon09.asm):02251                 FCB     $A8,5,39
EF6E B80427           (        mon09.asm):02252                 FCB     $B8,4,39
EF71 C80128           (        mon09.asm):02253                 FCB     $C8,1,40    'EORB'
EF74 D80328           (        mon09.asm):02254                 FCB     $D8,3,40
EF77 E80528           (        mon09.asm):02255                 FCB     $E8,5,40
EF7A F80428           (        mon09.asm):02256                 FCB     $F8,4,40
EF7D 1E0729           (        mon09.asm):02257                 FCB     $1E,7,41    'EXG'
EF80 1F072A           (        mon09.asm):02258                 FCB     $1F,7,42    'TFR'
EF83 34062B           (        mon09.asm):02259                 FCB     $34,6,43    'PSHS'
EF86 36862C           (        mon09.asm):02260                 FCB     $36,$86,44  'PSHU'
EF89 35062D           (        mon09.asm):02261                 FCB     $35,6,45    'PULS'
EF8C 37862E           (        mon09.asm):02262                 FCB     $37,$86,46  'PULU'
EF8F 4C002F           (        mon09.asm):02263                 FCB     $4C,0,47    'INCA'
EF92 5C0030           (        mon09.asm):02264                 FCB     $5C,0,48    'INCB'
EF95 0C0331           (        mon09.asm):02265                 FCB     $0C,3,49    'INC'
EF98 6C0531           (        mon09.asm):02266                 FCB     $6C,5,49
EF9B 7C0431           (        mon09.asm):02267                 FCB     $7C,4,49
EF9E 0E0332           (        mon09.asm):02268                 FCB     $0E,3,50    'JMP'
EFA1 6E0532           (        mon09.asm):02269                 FCB     $6E,5,50
EFA4 7E0432           (        mon09.asm):02270                 FCB     $7E,4,50
EFA7 9D0333           (        mon09.asm):02271                 FCB     $9D,3,51    'JSR'
EFAA AD0533           (        mon09.asm):02272                 FCB     $AD,5,51
EFAD BD0433           (        mon09.asm):02273                 FCB     $BD,4,51
EFB0 320534           (        mon09.asm):02274                 FCB     $32,5,52    'LEAS'
EFB3 330535           (        mon09.asm):02275                 FCB     $33,5,53    'LEAU'
EFB6 300536           (        mon09.asm):02276                 FCB     $30,5,54    'LEAX'
EFB9 310537           (        mon09.asm):02277                 FCB     $31,5,55    'LEAY'
EFBC 440038           (        mon09.asm):02278                 FCB     $44,0,56    'LSRA'
EFBF 540039           (        mon09.asm):02279                 FCB     $54,0,57    'LSRB'
EFC2 04033A           (        mon09.asm):02280                 FCB     $04,3,58    'LSR'
EFC5 64053A           (        mon09.asm):02281                 FCB     $64,5,58
EFC8 74043A           (        mon09.asm):02282                 FCB     $74,4,58
EFCB 3D003B           (        mon09.asm):02283                 FCB     $3D,0,59    'MUL'
EFCE 40003C           (        mon09.asm):02284                 FCB     $40,0,60    'NEGA'
EFD1 50003D           (        mon09.asm):02285                 FCB     $50,0,61    'NEGB'
EFD4 00033E           (        mon09.asm):02286                 FCB     $00,3,62    'NEG'
EFD7 60053E           (        mon09.asm):02287                 FCB     $60,5,62
EFDA 70043E           (        mon09.asm):02288                 FCB     $70,4,62
EFDD 12003F           (        mon09.asm):02289                 FCB     $12,0,63    'NOP'
EFE0 8A0140           (        mon09.asm):02290                 FCB     $8A,1,64    'ORA'
EFE3 9A0340           (        mon09.asm):02291                 FCB     $9A,3,64
EFE6 AA0540           (        mon09.asm):02292                 FCB     $AA,5,64
EFE9 BA0440           (        mon09.asm):02293                 FCB     $BA,4,64
EFEC CA0141           (        mon09.asm):02294                 FCB     $CA,1,65    'ORB'
EFEF DA0341           (        mon09.asm):02295                 FCB     $DA,3,65
EFF2 EA0541           (        mon09.asm):02296                 FCB     $EA,5,65
EFF5 FA0441           (        mon09.asm):02297                 FCB     $FA,4,65
EFF8 1A0142           (        mon09.asm):02298                 FCB     $1A,1,66    'ORCC'
EFFB 840143           (        mon09.asm):02299                 FCB     $84,1,67    'ANDA'
EFFE 940343           (        mon09.asm):02300                 FCB     $94,3,67
F001 A40543           (        mon09.asm):02301                 FCB     $A4,5,67
F004 B40443           (        mon09.asm):02302                 FCB     $B4,4,67
F007 C40144           (        mon09.asm):02303                 FCB     $C4,1,68    'ANDB'
F00A D40344           (        mon09.asm):02304                 FCB     $D4,3,68
F00D E40544           (        mon09.asm):02305                 FCB     $E4,5,68
F010 F40444           (        mon09.asm):02306                 FCB     $F4,4,68
F013 1C0145           (        mon09.asm):02307                 FCB     $1C,1,69    'ANDCC'
F016 490046           (        mon09.asm):02308                 FCB     $49,0,70    'ROLA'
F019 590047           (        mon09.asm):02309                 FCB     $59,0,71    'ROLB'
F01C 090348           (        mon09.asm):02310                 FCB     $09,3,72    'ROL'
F01F 690548           (        mon09.asm):02311                 FCB     $69,5,72
F022 790448           (        mon09.asm):02312                 FCB     $79,4,72
F025 460049           (        mon09.asm):02313                 FCB     $46,0,73    'RORA'
F028 56004A           (        mon09.asm):02314                 FCB     $56,0,74    'RORB'
F02B 06034B           (        mon09.asm):02315                 FCB     $06,3,75    'ROR'
F02E 66054B           (        mon09.asm):02316                 FCB     $66,5,75
F031 76044B           (        mon09.asm):02317                 FCB     $76,4,75
F034 3B004C           (        mon09.asm):02318                 FCB     $3B,0,76    'RTI'
F037 39004D           (        mon09.asm):02319                 FCB     $39,0,77    'RTS'
F03A 82014E           (        mon09.asm):02320                 FCB     $82,1,78    'SBCA'
F03D 92034E           (        mon09.asm):02321                 FCB     $92,3,78
F040 A2054E           (        mon09.asm):02322                 FCB     $A2,5,78
F043 B2044E           (        mon09.asm):02323                 FCB     $B2,4,78
F046 C2014F           (        mon09.asm):02324                 FCB     $C2,1,79    'SBCB'
F049 D2034F           (        mon09.asm):02325                 FCB     $D2,3,79
F04C E2054F           (        mon09.asm):02326                 FCB     $E2,5,79
F04F F2044F           (        mon09.asm):02327                 FCB     $F2,4,79
F052 1D0050           (        mon09.asm):02328                 FCB     $1D,0,80
F055 800151           (        mon09.asm):02329                 FCB     $80,1,81    'SUBA'
F058 900351           (        mon09.asm):02330                 FCB     $90,3,81
F05B A00551           (        mon09.asm):02331                 FCB     $A0,5,81
F05E B00451           (        mon09.asm):02332                 FCB     $B0,4,81
F061 C00152           (        mon09.asm):02333                 FCB     $C0,1,82    'SUBB'
F064 D00352           (        mon09.asm):02334                 FCB     $D0,3,82
F067 E00552           (        mon09.asm):02335                 FCB     $E0,5,82
F06A F00452           (        mon09.asm):02336                 FCB     $F0,4,82
F06D 830253           (        mon09.asm):02337                 FCB     $83,2,83    'SUBD'
F070 930353           (        mon09.asm):02338                 FCB     $93,3,83
F073 A30553           (        mon09.asm):02339                 FCB     $A3,5,83
F076 B30453           (        mon09.asm):02340                 FCB     $B3,4,83
F079 3F0054           (        mon09.asm):02341                 FCB     $3F,0,84    'SWI'
F07C 130055           (        mon09.asm):02342                 FCB     $13,0,85    'SYNC'
F07F 4D0056           (        mon09.asm):02343                 FCB     $4D,0,86    'TSTA'
F082 5D0057           (        mon09.asm):02344                 FCB     $5D,0,87    'TSTB'
F085 0D0358           (        mon09.asm):02345                 FCB     $0D,3,88    'TST'
F088 6D0558           (        mon09.asm):02346                 FCB     $6D,5,88
F08B 7D0458           (        mon09.asm):02347                 FCB     $7D,4,88
F08E 160963           (        mon09.asm):02348                 FCB     $16,9,99    'LBRA'
F091 170964           (        mon09.asm):02349                 FCB     $17,9,100   'LBSR'
F094 200865           (        mon09.asm):02350                 FCB     $20,8,101   'BRA'
F097 210866           (        mon09.asm):02351                 FCB     $21,8,102   'BRN'
F09A 220867           (        mon09.asm):02352                 FCB     $22,8,103   'BHI'
F09D 230868           (        mon09.asm):02353                 FCB     $23,8,104   'BLS'
F0A0 240869           (        mon09.asm):02354                 FCB     $24,8,105   'BCC'
F0A3 25086A           (        mon09.asm):02355                 FCB     $25,8,106   'BCS'
F0A6 26086B           (        mon09.asm):02356                 FCB     $26,8,107   'BNE'
F0A9 27086C           (        mon09.asm):02357                 FCB     $27,8,108   'BEQ'
F0AC 28086D           (        mon09.asm):02358                 FCB     $28,8,109   'BVC'
F0AF 29086E           (        mon09.asm):02359                 FCB     $29,8,110   'BVS'
F0B2 2A086F           (        mon09.asm):02360                 FCB     $2A,8,111   'BPL'
F0B5 2B0870           (        mon09.asm):02361                 FCB     $2B,8,112   'BMI'
F0B8 2C0871           (        mon09.asm):02362                 FCB     $2C,8,113   'BGE'
F0BB 2D0872           (        mon09.asm):02363                 FCB     $2D,8,114   'BLT'
F0BE 2E0873           (        mon09.asm):02364                 FCB     $2E,8,115   'BGT'
F0C1 2F0874           (        mon09.asm):02365                 FCB     $2F,8,116   'BLE'
F0C4 8D0884           (        mon09.asm):02366                 FCB     $8D,8,132   'BSR'
F0C7 CF0000           (        mon09.asm):02367                 FCB     $CF,0,0     'FCB', UNKNOWN OPCODE
                      (        mon09.asm):02368         ;* OPERAND TABLE NUMBER TWO, $10 PREFIX INSTRUCTIONS
F0CA                  (        mon09.asm):02369         OPTAB2
F0CA 830259           (        mon09.asm):02370                 FCB     $83,2,89    'CMPD'
F0CD 930359           (        mon09.asm):02371                 FCB     $93,3,89
F0D0 A30559           (        mon09.asm):02372                 FCB     $A3,5,89
F0D3 B30459           (        mon09.asm):02373                 FCB     $B3,4,89
F0D6 8C025A           (        mon09.asm):02374                 FCB     $8C,2,90    'CMPY'
F0D9 9C035A           (        mon09.asm):02375                 FCB     $9C,3,90
F0DC AC055A           (        mon09.asm):02376                 FCB     $AC,5,90
F0DF BC045A           (        mon09.asm):02377                 FCB     $BC,4,90
F0E2 CE025B           (        mon09.asm):02378                 FCB     $CE,2,91    'LDS'
F0E5 DE035B           (        mon09.asm):02379                 FCB     $DE,3,91
F0E8 EE055B           (        mon09.asm):02380                 FCB     $EE,5,91
F0EB FE045B           (        mon09.asm):02381                 FCB     $FE,4,91
F0EE 8E025C           (        mon09.asm):02382                 FCB     $8E,2,92    'LDY'
F0F1 9E035C           (        mon09.asm):02383                 FCB     $9E,3,92
F0F4 AE055C           (        mon09.asm):02384                 FCB     $AE,5,92
F0F7 BE045C           (        mon09.asm):02385                 FCB     $BE,4,92
F0FA DF035D           (        mon09.asm):02386                 FCB     $DF,3,93    'STS'
F0FD EF055D           (        mon09.asm):02387                 FCB     $EF,5,93
F100 FF045D           (        mon09.asm):02388                 FCB     $FF,4,93
F103 9F035E           (        mon09.asm):02389                 FCB     $9F,3,94    'STY'
F106 AF055E           (        mon09.asm):02390                 FCB     $AF,5,94
F109 BF045E           (        mon09.asm):02391                 FCB     $BF,4,94
F10C 3F005F           (        mon09.asm):02392                 FCB     $3F,0,95    'SWI2'
F10F 210975           (        mon09.asm):02393                 FCB     $21,9,117   'LBRN'
F112 220976           (        mon09.asm):02394                 FCB     $22,9,118   'LBHI'
F115 230977           (        mon09.asm):02395                 FCB     $23,9,119   'LBLS'
F118 240978           (        mon09.asm):02396                 FCB     $24,9,120   'LBCC'
F11B 250979           (        mon09.asm):02397                 FCB     $25,9,121   'LBCS'
F11E 26097A           (        mon09.asm):02398                 FCB     $26,9,122   'LBNE'
F121 27097B           (        mon09.asm):02399                 FCB     $27,9,123   'LBEQ'
F124 28097C           (        mon09.asm):02400                 FCB     $28,9,124   'LBVC'
F127 29097D           (        mon09.asm):02401                 FCB     $29,9,125   'LBVS'
F12A 2A097E           (        mon09.asm):02402                 FCB     $2A,9,126   'LBPL'
F12D 2B097F           (        mon09.asm):02403                 FCB     $2B,9,127   'LBMI'
F130 2C0980           (        mon09.asm):02404                 FCB     $2C,9,128   'LBGE'
F133 2D0981           (        mon09.asm):02405                 FCB     $2D,9,129   'LBLT'
F136 2E0982           (        mon09.asm):02406                 FCB     $2E,9,130   'LBGT'
F139 2F0983           (        mon09.asm):02407                 FCB     $2F,9,131   'LBLE'
F13C CF0100           (        mon09.asm):02408                 FCB     $CF,1,0
                      (        mon09.asm):02409         ;* OPERAND TABLE #3, $11 PREFIXES
F13F                  (        mon09.asm):02410         OPTAB3
F13F 8C0260           (        mon09.asm):02411                 FCB     $8C,2,96    'CMPS'
F142 9C0360           (        mon09.asm):02412                 FCB     $9C,3,96
F145 AC0560           (        mon09.asm):02413                 FCB     $AC,5,96
F148 BC0460           (        mon09.asm):02414                 FCB     $BC,4,96
F14B 830261           (        mon09.asm):02415                 FCB     $83,2,97    'CMPU'
F14E 930361           (        mon09.asm):02416                 FCB     $93,3,97
F151 A30561           (        mon09.asm):02417                 FCB     $A3,5,97
F154 B30461           (        mon09.asm):02418                 FCB     $B3,4,97
F157 3F0062           (        mon09.asm):02419                 FCB     $3F,0,98    'SWI3'
                      (        mon09.asm):02420         ;* INSTRUCTION TEXT TABLE
F15A                  (        mon09.asm):02421         ITABLE
F15A 46434220         (        mon09.asm):02422                 FCC     'FCB '      0
F15E 4C444120         (        mon09.asm):02423                 FCC     'LDA '      1
F162 4C444220         (        mon09.asm):02424                 FCC     'LDB '      2
F166 4C444420         (        mon09.asm):02425                 FCC     'LDD '      3
F16A 4C445520         (        mon09.asm):02426                 FCC     'LDU '      4
F16E 4C445820         (        mon09.asm):02427                 FCC     'LDX '      5
F172 53544120         (        mon09.asm):02428                 FCC     'STA '      6
F176 53544220         (        mon09.asm):02429                 FCC     'STB '      7
F17A 53544420         (        mon09.asm):02430                 FCC     'STD '      8
F17E 53545520         (        mon09.asm):02431                 FCC     'STU '      9
F182 53545820         (        mon09.asm):02432                 FCC     'STX '      10
F186 41425820         (        mon09.asm):02433                 FCC     'ABX '      11
F18A 41444341         (        mon09.asm):02434                 FCC     'ADCA'      12
F18E 41444342         (        mon09.asm):02435                 FCC     'ADCB'      13
F192 41444441         (        mon09.asm):02436                 FCC     'ADDA'      14
F196 41444442         (        mon09.asm):02437                 FCC     'ADDB'      15
F19A 41444444         (        mon09.asm):02438                 FCC     'ADDD'      16
F19E 41534C41         (        mon09.asm):02439                 FCC     'ASLA'      17
F1A2 41534C42         (        mon09.asm):02440                 FCC     'ASLB'      18
F1A6 41534C20         (        mon09.asm):02441                 FCC     'ASL '      19
F1AA 41535241         (        mon09.asm):02442                 FCC     'ASRA'      20
F1AE 41535242         (        mon09.asm):02443                 FCC     'ASRB'      21
F1B2 41535220         (        mon09.asm):02444                 FCC     'ASR '      22
F1B6 42495441         (        mon09.asm):02445                 FCC     'BITA'      23
F1BA 42495442         (        mon09.asm):02446                 FCC     'BITB'      24
F1BE 434C5241         (        mon09.asm):02447                 FCC     'CLRA'      25
F1C2 434C5242         (        mon09.asm):02448                 FCC     'CLRB'      26
F1C6 434C5220         (        mon09.asm):02449                 FCC     'CLR '      27
F1CA 434D5041         (        mon09.asm):02450                 FCC     'CMPA'      28
F1CE 434D5042         (        mon09.asm):02451                 FCC     'CMPB'      29
F1D2 434D5058         (        mon09.asm):02452                 FCC     'CMPX'      30
F1D6 434F4D41         (        mon09.asm):02453                 FCC     'COMA'      31
F1DA 434F4D42         (        mon09.asm):02454                 FCC     'COMB'      32
F1DE 434F4D20         (        mon09.asm):02455                 FCC     'COM '      33
F1E2 43574149         (        mon09.asm):02456                 FCC     'CWAI'      34
F1E6 44414120         (        mon09.asm):02457                 FCC     'DAA '      35
F1EA 44454341         (        mon09.asm):02458                 FCC     'DECA'      36
F1EE 44454342         (        mon09.asm):02459                 FCC     'DECB'      37
F1F2 44454320         (        mon09.asm):02460                 FCC     'DEC '      38
F1F6 454F5241         (        mon09.asm):02461                 FCC     'EORA'      39
F1FA 454F5242         (        mon09.asm):02462                 FCC     'EORB'      40
F1FE 45584720         (        mon09.asm):02463                 FCC     'EXG '      41
F202 54465220         (        mon09.asm):02464                 FCC     'TFR '      42
F206 50534853         (        mon09.asm):02465                 FCC     'PSHS'      43
F20A 50534855         (        mon09.asm):02466                 FCC     'PSHU'      44
F20E 50554C53         (        mon09.asm):02467                 FCC     'PULS'      45
F212 50554C55         (        mon09.asm):02468                 FCC     'PULU'      46
F216 494E4341         (        mon09.asm):02469                 FCC     'INCA'      47
F21A 494E4342         (        mon09.asm):02470                 FCC     'INCB'      48
F21E 494E4320         (        mon09.asm):02471                 FCC     'INC '      49
F222 4A4D5020         (        mon09.asm):02472                 FCC     'JMP '      50
F226 4A535220         (        mon09.asm):02473                 FCC     'JSR '      51
F22A 4C454153         (        mon09.asm):02474                 FCC     'LEAS'      52
F22E 4C454155         (        mon09.asm):02475                 FCC     'LEAU'      53
F232 4C454158         (        mon09.asm):02476                 FCC     'LEAX'      54
F236 4C454159         (        mon09.asm):02477                 FCC     'LEAY'      55
F23A 4C535241         (        mon09.asm):02478                 FCC     'LSRA'      56
F23E 4C535242         (        mon09.asm):02479                 FCC     'LSRB'      57
F242 4C535220         (        mon09.asm):02480                 FCC     'LSR '      58
F246 4D554C20         (        mon09.asm):02481                 FCC     'MUL '      59
F24A 4E454741         (        mon09.asm):02482                 FCC     'NEGA'      60
F24E 4E454742         (        mon09.asm):02483                 FCC     'NEGB'      61
F252 4E454720         (        mon09.asm):02484                 FCC     'NEG '      62
F256 4E4F5020         (        mon09.asm):02485                 FCC     'NOP '      63
F25A 4F524120         (        mon09.asm):02486                 FCC     'ORA '      64
F25E 4F524220         (        mon09.asm):02487                 FCC     'ORB '      65
F262 4F524343         (        mon09.asm):02488                 FCC     'ORCC'      66
F266 414E4441         (        mon09.asm):02489                 FCC     'ANDA'      67
F26A 414E4442         (        mon09.asm):02490                 FCC     'ANDB'      68
F26E 414E4443         (        mon09.asm):02491                 FCC     'ANDC'      69
F272 524F4C41         (        mon09.asm):02492                 FCC     'ROLA'      70
F276 524F4C42         (        mon09.asm):02493                 FCC     'ROLB'      71
F27A 524F4C20         (        mon09.asm):02494                 FCC     'ROL '      72
F27E 524F5241         (        mon09.asm):02495                 FCC     'RORA'      73
F282 524F5242         (        mon09.asm):02496                 FCC     'RORB'      74
F286 524F5220         (        mon09.asm):02497                 FCC     'ROR '      75
F28A 52544920         (        mon09.asm):02498                 FCC     'RTI '      76
F28E 52545320         (        mon09.asm):02499                 FCC     'RTS '      77
F292 53424341         (        mon09.asm):02500                 FCC     'SBCA'      78
F296 53424342         (        mon09.asm):02501                 FCC     'SBCB'      79
F29A 53455820         (        mon09.asm):02502                 FCC     'SEX '      80
F29E 53554241         (        mon09.asm):02503                 FCC     'SUBA'      81
F2A2 53554242         (        mon09.asm):02504                 FCC     'SUBB'      82
F2A6 53554244         (        mon09.asm):02505                 FCC     'SUBD'      83
F2AA 53574920         (        mon09.asm):02506                 FCC     'SWI '      84
F2AE 53594E43         (        mon09.asm):02507                 FCC     'SYNC'      85
F2B2 54535441         (        mon09.asm):02508                 FCC     'TSTA'      86
F2B6 54535442         (        mon09.asm):02509                 FCC     'TSTB'      87
F2BA 54535420         (        mon09.asm):02510                 FCC     'TST '      88
F2BE 434D5044         (        mon09.asm):02511                 FCC     'CMPD'      89
F2C2 434D5059         (        mon09.asm):02512                 FCC     'CMPY'      90
F2C6 4C445320         (        mon09.asm):02513                 FCC     'LDS '      91
F2CA 4C445920         (        mon09.asm):02514                 FCC     'LDY '      92
F2CE 53545320         (        mon09.asm):02515                 FCC     'STS '      93
F2D2 53545920         (        mon09.asm):02516                 FCC     'STY '      94
F2D6 53574932         (        mon09.asm):02517                 FCC     'SWI2'      95
F2DA 434D5053         (        mon09.asm):02518                 FCC     'CMPS'      96
F2DE 434D5055         (        mon09.asm):02519                 FCC     'CMPU'      97
F2E2 53574933         (        mon09.asm):02520                 FCC     'SWI3'      98
F2E6 4C425241         (        mon09.asm):02521                 FCC     'LBRA'      99
F2EA 4C425352         (        mon09.asm):02522                 FCC     'LBSR'      100
F2EE 42524120         (        mon09.asm):02523                 FCC     'BRA '      101
F2F2 42524E20         (        mon09.asm):02524                 FCC     'BRN '      102
F2F6 42484920         (        mon09.asm):02525                 FCC     'BHI '      103
F2FA 424C5320         (        mon09.asm):02526                 FCC     'BLS '      104
F2FE 42434320         (        mon09.asm):02527                 FCC     'BCC '      105
F302 42435320         (        mon09.asm):02528                 FCC     'BCS '      106
F306 424E4520         (        mon09.asm):02529                 FCC     'BNE '      107
F30A 42455120         (        mon09.asm):02530                 FCC     'BEQ '      108
F30E 42564320         (        mon09.asm):02531                 FCC     'BVC '      109
F312 42565320         (        mon09.asm):02532                 FCC     'BVS '      110
F316 42504C20         (        mon09.asm):02533                 FCC     'BPL '      111
F31A 424D4920         (        mon09.asm):02534                 FCC     'BMI '      112
F31E 42474520         (        mon09.asm):02535                 FCC     'BGE '      113
F322 424C5420         (        mon09.asm):02536                 FCC     'BLT '      114
F326 42475420         (        mon09.asm):02537                 FCC     'BGT '      115
F32A 424C4520         (        mon09.asm):02538                 FCC     'BLE '      116
F32E 4C42524E         (        mon09.asm):02539                 FCC     'LBRN'      117
F332 4C424849         (        mon09.asm):02540                 FCC     'LBHI'      118
F336 4C424C53         (        mon09.asm):02541                 FCC     'LBLS'      119
F33A 4C424343         (        mon09.asm):02542                 FCC     'LBCC'      120
F33E 4C424353         (        mon09.asm):02543                 FCC     'LBCS'      121
F342 4C424E45         (        mon09.asm):02544                 FCC     'LBNE'      122
F346 4C424551         (        mon09.asm):02545                 FCC     'LBEQ'      123
F34A 4C425643         (        mon09.asm):02546                 FCC     'LBVC'      124
F34E 4C425653         (        mon09.asm):02547                 FCC     'LBVS'      125
F352 4C42504C         (        mon09.asm):02548                 FCC     'LBPL'      126
F356 4C424D49         (        mon09.asm):02549                 FCC     'LBMI'      127
F35A 4C424745         (        mon09.asm):02550                 FCC     'LBGE'      128
F35E 4C424C54         (        mon09.asm):02551                 FCC     'LBLT'      129
F362 4C424754         (        mon09.asm):02552                 FCC     'LBGT'      130
F366 4C424C45         (        mon09.asm):02553                 FCC     'LBLE'      131
F36A 42535220         (        mon09.asm):02554                 FCC     'BSR '      132
                      (        mon09.asm):02555         ;*
                      (        mon09.asm):02556         ;* CONDITIONAL TABLE, FIRST BYTE IS MASK, NEXT THREE BYTES ARE POSSIBLE
                      (        mon09.asm):02557         ;* BIT SETTINGS
                      (        mon09.asm):02558         ;*
F36E                  (        mon09.asm):02559         CONTAB
F36E 05000000         (        mon09.asm):02560                 FCB     $05,$00,$00,$00 'BHI', NO C OR Z
F372 05010405         (        mon09.asm):02561                 FCB     $05,$01,$04,$05 'BLS', EITHER C OR Z
F376 01000000         (        mon09.asm):02562                 FCB     $01,$00,$00,$00 'BCC', NO C
F37A 01010101         (        mon09.asm):02563                 FCB     $01,$01,$01,$01 'BCS', C SET
F37E 04000000         (        mon09.asm):02564                 FCB     $04,$00,$00,$00 'BNE', NO Z
F382 04040404         (        mon09.asm):02565                 FCB     $04,$04,$04,$04 'BEQ', Z SET
F386 02000000         (        mon09.asm):02566                 FCB     $02,$00,$00,$00 'BVC', V CLEAR
F38A 02020202         (        mon09.asm):02567                 FCB     $02,$02,$02,$02 'BVS', V SET
F38E 08000000         (        mon09.asm):02568                 FCB     $08,$00,$00,$00 'BPL', N CLEAR
F392 08080808         (        mon09.asm):02569                 FCB     $08,$08,$08,$08 'BMI', N SET
F396 0A000A0A         (        mon09.asm):02570                 FCB     $0A,$00,$0A,$0A 'BGE', N=V
F39A 0A080202         (        mon09.asm):02571                 FCB     $0A,$08,$02,$02 'BLT', N -= V
F39E 0E0A0000         (        mon09.asm):02572                 FCB     $0E,$0A,$00,$00 'BGT', N=V, Z=0
F3A2 0E080204         (        mon09.asm):02573                 FCB     $0E,$08,$02,$04 'BLE', V-=N OR Z=1
F3A6 0C060E           (        mon09.asm):02574                 FCB     $0C,$06,$0E
                      (        mon09.asm):02575         ;* TRANSFER AND EXCHANGE REGISTER TABLE
F3A9                  (        mon09.asm):02576         TFREGT
F3A9 DF70             (        mon09.asm):02577                 FDB     SAVA
F3AB                  (        mon09.asm):02578         INDTAB
F3AB DF73             (        mon09.asm):02579                 FDB     SAVX
F3AD DF75             (        mon09.asm):02580                 FDB     SAVY
F3AF DF77             (        mon09.asm):02581                 FDB     SAVU
F3B1 DF7B             (        mon09.asm):02582                 FDB     SAVS
F3B3 DF79             (        mon09.asm):02583                 FDB     SAVPC
                      (        mon09.asm):02584         ;* PULL TABLE FOR PULS
F3B5                  (        mon09.asm):02585         PULSTAB
F3B5 DF6F             (        mon09.asm):02586                 FDB     SAVCC
F3B7 DF70             (        mon09.asm):02587                 FDB     SAVA
F3B9 DF71             (        mon09.asm):02588                 FDB     SAVB
F3BB DF72             (        mon09.asm):02589                 FDB     SAVDP
F3BD DF73             (        mon09.asm):02590                 FDB     SAVX
F3BF DF75             (        mon09.asm):02591                 FDB     SAVY
F3C1 DF77             (        mon09.asm):02592                 FDB     SAVU
F3C3 DF79             (        mon09.asm):02593                 FDB     SAVPC
                      (        mon09.asm):02594         ;* PULL TABLE FOR PULU
F3C5                  (        mon09.asm):02595         PULUTAB
F3C5 DF6F             (        mon09.asm):02596                 FDB     SAVCC
F3C7 DF70             (        mon09.asm):02597                 FDB     SAVA
F3C9 DF71             (        mon09.asm):02598                 FDB     SAVB
F3CB DF72             (        mon09.asm):02599                 FDB     SAVDP
F3CD DF73             (        mon09.asm):02600                 FDB     SAVX
F3CF DF75             (        mon09.asm):02601                 FDB     SAVY
F3D1 DF7B             (        mon09.asm):02602                 FDB     SAVS
F3D3 DF79             (        mon09.asm):02603                 FDB     SAVPC
                      (        mon09.asm):02604         ;* VECTOR HANDLERS
F3D5                  (        mon09.asm):02605         SWI3
F3D5 6E9FDF64         (        mon09.asm):02606                 JMP     [SWI3ADR]
F3D9                  (        mon09.asm):02607         SWI2
F3D9 6E9FDF62         (        mon09.asm):02608                 JMP     [SWI2ADR]
F3DD                  (        mon09.asm):02609         IRQ
F3DD 6E9FDF66         (        mon09.asm):02610                 JMP     [IRQADR]
F3E1                  (        mon09.asm):02611         FIRQ
F3E1 6E9FDF68         (        mon09.asm):02612                 JMP     [FIRQADR]
                      (        mon09.asm):02613         ;* HELP TEXT
F3E5                  (        mon09.asm):02614         HTEXT
F3E5 00               (        mon09.asm):02615                 FCB     0       NEW LINE TO START
F3E6 4220302D37203C61 (        mon09.asm):02616                 FCN     'B 0-7 <addr>|Set breakpoint (0000=remove)'
     6464723E7C536574
     20627265616B706F
     696E742028303030
     303D72656D6F7665
     2900
F410 4352203C7265673E (        mon09.asm):02617                 FCN     'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
F430 4355203C75617274 (        mon09.asm):02618                 FCN     'CU <uart> <addr>|Change UART address'
     3E203C616464723E
     7C4368616E676520
     5541525420616464
     7265737300
F455 4356203C7665633E (        mon09.asm):02619                 FCN     'CV <vec> <addr>|Change interrupt vector'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7200
F47D 44427C446973706C (        mon09.asm):02620                 FCN     'DB|Display breakpoints'
     617920627265616B
     706F696E747300
F494 4449203C61646472 (        mon09.asm):02621                 FCN     'DI <addr>,<addr>|Display memory in assembly format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E20617373656D
     626C7920666F726D
     617400
F4C7 444D203C61646472 (        mon09.asm):02622                 FCN     'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
F4FA 44527C446973706C (        mon09.asm):02623                 FCN     'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
F519 44557C446973706C (        mon09.asm):02624                 FCN     'DU|Display UART addresses'
     6179205541525420
     6164647265737365
     7300
F533 44567C446973706C (        mon09.asm):02625                 FCN     'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
F550 45203C616464723E (        mon09.asm):02626                 FCN     'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
F565 464D203C61646472 (        mon09.asm):02627                 FCN     'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
F589 47205B3C61646472 (        mon09.asm):02628                 FCN     'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
F5A9 4C7C4C6F61642061 (        mon09.asm):02629                 FCN     'L|Load an image into RAM from uart2'
     6E20696D61676520
     696E746F2052414D
     2066726F6D207561
     72743200
F5CD 4D4D203C61646472 (        mon09.asm):02630                 FCN     'MM <addr>,<addr> <addr>|Move memory'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F727900
F5F1 4D54203C61646472 (        mon09.asm):02631                 FCN     'MT <addr>,<addr>|Memory test'
     3E2C3C616464723E
     7C4D656D6F727920
     7465737400
F60E 5252203C61646472 (        mon09.asm):02632                 FCN     'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
F62E 5257203C61646472 (        mon09.asm):02633                 FCN     'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
F656 53205B3C61646472 (        mon09.asm):02634                 FCN     'S [<addr>]|Single step execution'
     3E5D7C53696E676C
     6520737465702065
     7865637574696F6E
     00
F677 547C5465726D696E (        mon09.asm):02635                 FCN     'T|Terminal passthrough to uart2'
     616C207061737374
     68726F7567682074
     6F20756172743200
F697 57203C616464723E (        mon09.asm):02636                 FCN     'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
F6B7 5852203C61646472 (        mon09.asm):02637                 FCN     'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
F6D7 5857203C61646472 (        mon09.asm):02638                 FCN     'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
F6FF 2B203C76616C7565 (        mon09.asm):02639                 FCN     '+ <value>+<value>|Hexidecimal addition'
     3E2B3C76616C7565
     3E7C486578696465
     63696D616C206164
     646974696F6E00
F726 2D203C76616C7565 (        mon09.asm):02640                 FCN     '- <value>-<value>|Hexidecimal subtraction'
     3E2D3C76616C7565
     3E7C486578696465
     63696D616C207375
     627472616374696F
     6E00
F750 FF               (        mon09.asm):02641                 FCB     -1      END OF TABLE
                      (        mon09.asm):02642         ;*
                      (        mon09.asm):02643         ;    ifeq    utype,6551
                      (        mon09.asm):02644         ;*
                      (        mon09.asm):02645         ;* MACHINE DEPENDANT I/O ROUTINES FOR 6551 UARTS
                      (        mon09.asm):02646         ;*
                      (        mon09.asm):02647         ;* INITIALIZE UART(X)
F751                  (        mon09.asm):02648         INIT
F751 CC0B1E           (        mon09.asm):02649                 LDD     #$0B1E      ENABLE RX, TX, 9600, 8NO1
F754 6F01             (        mon09.asm):02650                 CLR     1,X     RESET
F756 ED02             (        mon09.asm):02651                 STD     2,X     WRITE COMMAND REG
F758 39               (        mon09.asm):02652                 RTS
                      (        mon09.asm):02653         ;* READ UART(X)
F759                  (        mon09.asm):02654         READ
F759 A601             (        mon09.asm):02655                 LDA     1,X     GET STATUS
F75B 8508             (        mon09.asm):02656                 BITA    #%00001000  RECEIVER READY?
F75D 2705             (        mon09.asm):02657                 BEQ     NOCHR       NO CHARACTER
F75F A684             (        mon09.asm):02658                 LDA     ,X      READ CHARAC>uR
F761 1A04             (        mon09.asm):02659                 ORCC    #%00000100  SET 'Z'
F763 39               (        mon09.asm):02660                 RTS
F764                  (        mon09.asm):02661         NOCHR
F764 86FF             (        mon09.asm):02662                 LDA     #$FF        NO CHAR
F766 39               (        mon09.asm):02663                 RTS
                      (        mon09.asm):02664         ;* WRITE UART(X)
F767                  (        mon09.asm):02665         WRITE
F767 E601             (        mon09.asm):02666                 LDB     1,X     GET STATUS
F769 C510             (        mon09.asm):02667                 BITB    #%00010000  XMITTER READY?
F76B 27FA             (        mon09.asm):02668                 BEQ     WRITE       NO, TRY AGAIN
F76D A784             (        mon09.asm):02669                 STA     ,X      OUTPUT
F76F 39               (        mon09.asm):02670                 RTS
                      (        mon09.asm):02671         ;    else
                      (        mon09.asm):02672         ;*
                      (        mon09.asm):02673         ;* MACHINE DEPENDANT I/O ROUTINES FOR 6552 UARTS
                      (        mon09.asm):02674         ;*
                      (        mon09.asm):02675         ;* INITIALIZE UART(X)
                      (        mon09.asm):02676         ;INIT    LDA #%01001101  9600 BAUD, 1 STOP BIT, NO ECHO
                      (        mon09.asm):02677         ;    STA 1,X     WRITE CONTROL REGISTER
                      (        mon09.asm):02678         ;    CLR 2,X     INSURE NO BREAK CONDITION
                      (        mon09.asm):02679         ;    LDA #%11100000  8 BITS, NO PARITY, DTR ON, RTS ON
                      (        mon09.asm):02680         ;    STA 1,X     WRITE FORMAT REGISTER
                      (        mon09.asm):02681         ;    RTS
                      (        mon09.asm):02682         ;;* READ UART(X)
                      (        mon09.asm):02683         ;READ    LDA ,X      GET STATUS
                      (        mon09.asm):02684         ;    BITA    #%00000001  RECEIVER READY?
                      (        mon09.asm):02685         ;    BEQ NOCHR       NO CHARACTER
                      (        mon09.asm):02686         ;    LDA 3,X     READ CHARACTER
                      (        mon09.asm):02687         ;    ORCC    #$04        SET 'Z'
                      (        mon09.asm):02688         ;    RTS
                      (        mon09.asm):02689         ;NOCHR   LDA #$FF        NO CHAR
                      (        mon09.asm):02690         ;    RTS
                      (        mon09.asm):02691         ;;* WRITE UART(X)
                      (        mon09.asm):02692         ;WRITE   LDB ,X      GET STATUS
                      (        mon09.asm):02693         ;    BITB    #%01000000  XMITTER READY?
                      (        mon09.asm):02694         ;    BEQ WRITE       NO, TRY AGAIN
                      (        mon09.asm):02695         ;    STA 3,X     OUTPUT
                      (        mon09.asm):02696         ;    RTS
                      (        mon09.asm):02697         ;    endif
                      (        mon09.asm):02698         ;*
                      (        mon09.asm):02699         ;* MACHINE VECTORS
                      (        mon09.asm):02700         ;*
                      (        mon09.asm):02701                 ORG     $FFF2
FFF2 F3D5             (        mon09.asm):02702                 FDB     SWI3
FFF4 F3D9             (        mon09.asm):02703                 FDB     SWI2
FFF6 F3E1             (        mon09.asm):02704                 FDB     FIRQ
FFF8 F3DD             (        mon09.asm):02705                 FDB     IRQ
FFFA ED80             (        mon09.asm):02706                 FDB     SWIHND
FFFC ED4F             (        mon09.asm):02707                 FDB     NMIHND
FFFE E000             (        mon09.asm):02708                 FDB     RESET

Symbol Table:
[ G] BADOPC                           EB49
[ G] BRKREG                           EDE2
[ G] BRKRES                           EDE5
[ G] BRKTAB                           DF84
[ G] BSAVOF                           EA42
[ G] CCBITS                           E33D
[ G] CHG1                             E350
[ G] CHG2                             E35C
[ G] CHG3                             E38D
[ G] CHG4                             E373
[ G] CHGREG                           E345
[ G] CHGTAB                           E390
[ G] CHGURT                           E2A8
[ G] CHGV1                            E281
[ G] CHGV2                            E289
[ G] CHGV3                            E28F
[ G] CHGV4                            E29A
[ G] CHGVEC                           E276
[ G] CHKC1                            E847
[ G] CHKC2                            E85A
[ G] CHKC3                            E85D
[ G] CHKCHR                           E836
[ G] CLRRAM                           E007
[ G] CMDTAB                           E0C5
[ G] CONTAB                           F36E
[ G] DEC1                             EC30
[ G] DIRECT                           EB88
[ G] DISA1                            EB1F
[ G] DISASM                           E204
[ G] DISASS                           EB16
[ G] DISREG                           E2C9
[ G] DISS1                            E212
[ G] DISS2                            E225
[ G] DISURT                           E25D
[ G] DISV1                            E22D
[ G] DISVEC                           E226
[ G] DJMPDI                           E98D
[ G] DJMPEX                           E97D
[ G] DJMPIN                           E9A9
[ G] DLEOF                            E6A6
[ G] DLINT                            E6A7
[ G] DLINT1                           E6DD
[ G] DLMOT                            E63B
[ G] DLMOT1                           E673
[ G] DLO1                             E615
[ G] DLO2                             E628
[ G] DLOAD                            E630
[ G] DLRTS                            E6A4
[ G] DOPUL                            E950
[ G] DOPUL1                           E954
[ G] DOPUL2                           E96B
[ G] DOPUL3                           E967
[ G] DSPB1                            E39F
[ G] DSPB2                            E3C2
[ G] DSPB3                            E3C5
[ G] DSPBRK                           E39A
[ G] DSPBUF                           DF9C
[ G] END1                             ECF9
[ G] END2                             ED07
[ G] END3                             ED11
[ G] END4                             ED24
[ G] END5                             ED1E
[ G] END6                             ED20
[ G] ENDIS                            ECE3
[ G] ENDIS1                           EB9E
[ G] ERROR                            E0BD
[ G] EVL1                             EBCA
[ G] EVL2                             EBD5
[ G] EVL3                             EBDD
[ G] EVL4                             EBE5
[ G] EVL5                             EBEF
[ G] EVL6                             EBFA
[ G] EVL7                             EC05
[ G] EVLEND                           EC4C
[ G] EVLFIN                           EC4E
[ G] EVLX1                            EBC5
[ G] EXTEND                           EB96
[ G] FILL1                            E13C
[ G] FILMEM                           E12E
[ G] FIRQ                             F3E1
[ G] FIRQADR                          DF68
[ G] FNDO1                            EB60
[ G] FNDO2                            EB67
[ G] FNDOPC                           EB4D
[ G] GETAD1                           E737
[ G] GETAD2                           E743
[ G] GETAD3                           E744
[ G] GETAD4                           E769
[ G] GETAD5                           E775
[ G] GETADR                           E730
[ G] GETB1                            E78B
[ G] GETB2                            E789
[ G] GETB3                            E78C
[ G] GETB4                            E787
[ G] GETBYT                           E777
[ G] GETC1                            E811
[ G] GETCHR                           E803
[ G] GETECH                           E7E3
[ G] GETERR                           E734
[ G] GETN1                            E7AC
[ G] GETN2                            E7AF
[ G] GETNIB                           E799
[ G] GETPC                            E6FB
[ G] GETPC1                           E70F
[ G] GETRNG                           E713
[ G] GOEX3                            E42C
[ G] GOEX4                            E439
[ G] GOEXEC                           E41E
[ G] GOSTEP                           E3F4
[ G] GOSTP1                           E3FA
[ G] GOSTP2                           E41D
[ G] HELP                             E5BB
[ G] HEXADD                           E588
[ G] HEXOUT                           E7B6
[ G] HEXSHO                           E5AC
[ G] HEXSUB                           E599
[ G] HLP1                             E5BE
[ G] HLP2                             E5C0
[ G] HLP3                             E5CE
[ G] HLP4                             E5DC
[ G] HLP5                             E5E8
[ G] HOUT                             E7C0
[ G] HOUT1                            E7CA
[ G] HTEXT                            F3E5
[ G] IMM16                            EB7F
[ G] IMM8                             EB79
[ G] INC1                             EC5F
[ G] INDEX                            EBA1
[ G] INDTAB                           F3AB
[ G] INIT                             F751
[ G] INSR1                            EBED
[ G] INSRAM                           DFCE
[ G] INSREG                           EC1B
[ G] INSTYP                           DF82
[ G] IOCON                            DF6A
[ G] IRQ                              F3DD
[ G] IRQADR                           DF66
[ G] ITABLE                           F15A
[ G] JMPDIR                           E989
[ G] JMPEXT                           E979
[ G] JMPIND                           E9A3
[ G] JSRDIR                           E981
[ G] JSREXT                           E971
[ G] JSRIND                           E994
[ G] LBRAN                            ECDA
[ G] LBRAN1                           E89F
[ G] LBRANS                           E8A5
[ G] LCBRAN                           E885
[ G] LFC1                             E7FF
[ G] LFCR                             E7F7
[ G] LOAD                             E60D
[ G] LOBRAN                           E89B
[ G] LODERR                           E68C
[ G] LOK1                             E8FC
[ G] LOK2                             E8F1
[ G] LOKREG                           E8E4
[ G] LOOK1                            E093
[ G] LOOK2                            E09F
[ G] LOOK3                            E0B6
[ G] LOOKC                            E08D
[ G] MAIN                             E07F
[ G] MEM1                             E166
[ G] MEM2                             E179
[ G] MEM3                             E183
[ G] MEM4                             E18D
[ G] MEM5                             E197
[ G] MEM6                             E1A1
[ G] MEM7                             E1A3
[ G] MEMORY                           E160
[ G] MONITOR                          E030
[ G] MOVM1                            E154
[ G] MOVMEM                           E146
[ G] NINXIN                           EA94
[ G] NMIH1                            ED54
[ G] NMIHND                           ED4F
[ G] NO5BO                            EBB1
[ G] NOCHR                            F764
[ G] NODEC                            EC32
[ G] NODSR                            E405
[ G] NOINC                            EC61
[ G] NOIND                            EBB9
[ G] NOIND1                           EC6E
[ G] NORE1                            EA9D
[ G] NORE2                            EAA9
[ G] NORE3                            EAD4
[ G] NOREXE                           EA98
[ G] NOT5BO                           EA16
[ G] OP16                             EB99
[ G] OP8                              EB8F
[ G] OPFIND                           EB3B
[ G] OPFNXT                           EB39
[ G] OPTAB1                           EE30
[ G] OPTAB2                           F0CA
[ G] OPTAB3                           F13F
[ G] PCRG                             EDFB
[ G] POSBYT                           DF83
[ G] PSH1                             EC79
[ G] PSH2                             EC92
[ G] PSH3                             ECA6
[ G] PSH4                             EC8B
[ G] PSHNXT                           ECA1
[ G] PSHPC                            E99A
[ G] PSHPUL                           EC71
[ G] PSHTAB                           EE1F
[ G] PTRSAV                           DF80
[ G] PUL16                            E963
[ G] PULSTAB                          F3B5
[ G] PULUTAB                          F3C5
[ G] PUT1                             E827
[ G] PUT2                             E834
[ G] PUTCHR                           E818
[ G] R16                              E381
[ G] R17                              E388
[ G] RAM                              DF60
[ G] RAM0                             E4C8
[ G] RAM1                             E4CF
[ G] RAM2                             E4EF
[ G] RAM3                             E4FD
[ G] RAM4                             E506
[ G] RAM5                             E510
[ G] RAM6                             E516
[ G] RAM7                             E549
[ G] RAM8                             E57C
[ G] RAMTEST                          E4B7
[ G] RBITS                            E2E7
[ G] RDLOOP                           E45D
[ G] RDLP1                            E465
[ G] READ                             F759
[ G] REGB1                            E2E0
[ G] REGTAB                           EDFF
[ G] REGTXT                           E313
[ G] RESET                            E000
[ G] ROM                              E000
[ G] RSUB1                            E303
[ G] RSUB2                            E30B
[ G] RSVREG                           EA6F
[ G] SAIREG                           EBEB
[ G] SAVA                             DF70
[ G] SAVADR                           ECE0
[ G] SAVB                             DF71
[ G] SAVCC                            DF6F
[ G] SAVDP                            DF72
[ G] SAVNPC                           E8D9
[ G] SAVPC                            DF79
[ G] SAVS                             DF7B
[ G] SAVSTK                           E8CF
[ G] SAVU                             DF77
[ G] SAVX                             DF73
[ G] SAVXPC                           EA8C
[ G] SAVY                             DF75
[ G] SBRAN                            ECCF
[ G] SBRAN1                           E8C1
[ G] SBRANS                           E8C7
[ G] SCOBRA                           E8AF
[ G] SER1                             0000
[ G] SER2                             0004
[ G] SETBRK                           E3D4
[ G] SETOP2                           EB36
[ G] SHBRAN                           E8BD
[ G] SINOK                            EA12
[ G] SPACE                            E7F1
[ G] STACK                            E000
[ G] STDPC                            E92A
[ G] STEP                             E872
[ G] STEPCE                           E87C
[ G] STEPDI                           E861
[ G] STPFLG                           DF7F
[ G] STPREG                           E402
[ G] SUBM1                            E1C6
[ G] SUBM2                            E1D0
[ G] SUBM3                            E1E4
[ G] SUBM4                            E1EB
[ G] SUBM5                            E1FA
[ G] SUBMEM                           E1C1
[ G] SWI2                             F3D9
[ G] SWI2ADR                          DF62
[ G] SWI3                             F3D5
[ G] SWI3ADR                          DF64
[ G] SWIADR                           DF60
[ G] SWIHN1                           ED8A
[ G] SWIHN2                           ED9E
[ G] SWIHN25                          EDA6
[ G] SWIHN3                           EDEA
[ G] SWIHN4                           EDF3
[ G] SWIHND                           ED80
[ G] TADEC1                           EA61
[ G] TADEC2                           EA69
[ G] TAINC1                           EA51
[ G] TAINC2                           EA59
[ G] TEIND                            EA8A
[ G] TEMP                             DF7D
[ G] TFREGT                           F3A9
[ G] TFRET                            ECCE
[ G] TFREXG                           ECA9
[ G] TFRREG                           ECBF
[ G] TM1                              E5E9
[ G] TM2                              E5EC
[ G] TM3                              E5FD
[ G] TMODE                            E5E9
[ G] TOFF16                           EA28
[ G] TOFF8                            EA20
[ G] TOFFA                            EA32
[ G] TOFFB                            EA3B
[ G] TOFFD                            EA46
[ G] TPCO16                           EA80
[ G] TPCO8                            EA76
[ G] TPULS                            E92E
[ G] TPULU                            E93F
[ G] TSTC0                            EAFC
[ G] TSTC1                            EB0A
[ G] TSTC2                            EB14
[ G] TSTCON                           EAF4
[ G] TSTE1                            E918
[ G] TSTE2                            E91A
[ G] TSTEXG                           E901
[ G] TSTRTS                           E91E
[ G] TSTTFR                           E8DD
[ G] UART1                            DF6B
[ G] UART2                            DF6D
[ G] URTEXT                           E266
[SG] utype                            1997
[ G] VECTXT                           E23C
[ G] WRDOUT                           E7B2
[ G] WRHEX                            ED38
[ G] WRHEX1                           ED36
[ G] WRHEXB                           ED26
[ G] WRHEXN                           ED42
[ G] WRHEXW                           ED2E
[ G] WRIMEM                           E1B1
[ G] WRITE                            F767
[ G] WRLIN                            E7D6
[ G] WRLND                            E7E2
[ G] WRLOOP                           E46D
[ G] WRLP1                            E481
[ G] WRMSG                            E7CC
[ G] WRNOK                            ED4C
[ G] WRPCRG                           EC0E
[ G] WRPR1                            EC11
[ G] XRLOOP                           E48C
[ G] XRLP1                            E494
[ G] XSAVPC                           EA74
[ G] XWLOOP                           E49C
[ G] XWLP1                            E4AC
