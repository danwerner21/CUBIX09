                      (     cubixzip.asm):00001         ;TITLE   "ZIP/6809-C INFOCOM, INC. --- INITIALIZATION"
                      (     cubixzip.asm):00002         
                      (     cubixzip.asm):00003         ; -------------------------------
                      (     cubixzip.asm):00004         ; ZIP/6809 VERSION C
                      (     cubixzip.asm):00005         ; Z-CODE INTERPRETER PROGRAM
                      (     cubixzip.asm):00006         ; FOR CUBIX
                      (     cubixzip.asm):00007         ; -------------------------------
                      (     cubixzip.asm):00008         
                      (     cubixzip.asm):00009         ; COMPANY PRIVATE -- NOT FOR DISTRIBUTION
                      (     cubixzip.asm):00010         
     0001             (     cubixzip.asm):00011         DEBUG           = 1                               ; ASSEMBLY FLAG
                      (     cubixzip.asm):00012         
                      (     cubixzip.asm):00013         ; -----------
                      (     cubixzip.asm):00014         ; ERROR CODES
                      (     cubixzip.asm):00015         ; -----------
                      (     cubixzip.asm):00016         
                      (     cubixzip.asm):00017         ; 00 -- INSUFFICIENT RAM
                      (     cubixzip.asm):00018         ; 01 -- ILLEGAL X-OP
                      (     cubixzip.asm):00019         ; 02 -- ILLEGAL 0-OP
                      (     cubixzip.asm):00020         ; 03 -- ILLEGAL 1-OP
                      (     cubixzip.asm):00021         ; 04 -- ILLEGAL 2-OP
                      (     cubixzip.asm):00022         ; 05 -- Z-STACK UNDERFLOW
                      (     cubixzip.asm):00023         ; 06 -- Z-STACK OVERFLOW
                      (     cubixzip.asm):00024         ; 07 -- ILLEGAL PROPERTY LENGTH (GETP)
                      (     cubixzip.asm):00025         ; 08 -- DIVISION BY ZERO
                      (     cubixzip.asm):00026         ; 09 -- ILLEGAL ARGUMENT COUNT (EQUAL?)
                      (     cubixzip.asm):00027         ; 10 -- ILLEGAL PROPERTY ID (PUTP)
                      (     cubixzip.asm):00028         ; 11 -- ILLEGAL PROPERTY LENGTH (PUTP)
                      (     cubixzip.asm):00029         ; 12 -- DISK ADDRESS OUT OF RANGE
                      (     cubixzip.asm):00030         ; 13 -- PARSER OVERFLOW
                      (     cubixzip.asm):00031         ; 14 -- DRIVE ACCESS
                      (     cubixzip.asm):00032         ; 15 -- Z-STACK DESTROYED
                      (     cubixzip.asm):00033         ; 16 -- ZIP NOT FULLY LOADED
                      (     cubixzip.asm):00034         
                      (     cubixzip.asm):00035                 ORG     $2000
                      (     cubixzip.asm):00036         
2000                  (     cubixzip.asm):00037         RS1:
2000 4F               (     cubixzip.asm):00038                 CLRA                                      ; USE PAGE ZERO
2001 1F8B             (     cubixzip.asm):00039                 TFR     A,DP                              ; AS THE DIRECT PAGE
2003 10CE21FE         (     cubixzip.asm):00040                 LDS     #MSTACK                           ; GIVE THE STACK A NEW HOME
2007 7E35F0           (     cubixzip.asm):00041                 JMP     COLD                              ; PERFORM ONE-TIME INITIALIZATION
200A                  (     cubixzip.asm):00042         RS1E:
200A                  (     cubixzip.asm):00043                 RMB     $100-(RS1E-RS1)
                      (     cubixzip.asm):00044         
                      (     cubixzip.asm):00045         
2100                  (     cubixzip.asm):00046         MSTART: ; START OF FREE PROGRAM RAM
                      (     cubixzip.asm):00047         
                      (     cubixzip.asm):00048                 INCLUDE eq.asm
                      (           eq.asm):00001         ;PAGE
                      (           eq.asm):00002         ;SBTTL "--- MEMORY ORGANIZATION ---"
                      (           eq.asm):00003         
     0100             (           eq.asm):00004         CFREQ           = $100
     1000             (           eq.asm):00005         BFREQ           = $1000
                      (           eq.asm):00006         
                      (           eq.asm):00007         
     00FF             (           eq.asm):00008         TRUE            = $FF
     0000             (           eq.asm):00009         FALSE           = 0
                      (           eq.asm):00010         
     0000             (           eq.asm):00011         DSTART          = 0                               ; START OF DIRECT-PAGE RAM
                      (           eq.asm):00012         
     21FE             (           eq.asm):00013         MSTACK          = MSTART+$FE                      ; TOP OF MACHINE STACK (254 BYTES)
     2200             (           eq.asm):00014         IOBUFF          = MSTART+$100                     ; 256-BYTE DISK I/O BUFFER
     2300             (           eq.asm):00015         ZSTACK          = MSTART+$200                     ; Z-STACK (255 WORDS)
     00FF             (           eq.asm):00016         ZSTAKL          = 255                             ; LENGTH OF Z-STACK IN WORDS
     24FE             (           eq.asm):00017         TOPSTA          = (2*ZSTAKL)+ZSTACK               ; TOP OF Z-STACK
     2500             (           eq.asm):00018         PTABLE          = MSTART+$400                     ; PAGING TABLE ($140 BYTES/$A0 WORDS)
     2650             (           eq.asm):00019         LRUMAP          = MSTART+$550                     ; TIMESTAMP MAP ($A0 BYTES)
     2700             (           eq.asm):00020         LOCALS          = MSTART+$600                     ; LOCAL VARIABLE STORAGE (32 BYTES)
     2740             (           eq.asm):00021         BUFSAV          = MSTART+$640                     ; I/O AUX BUFFER (32 BYTES)
     2800             (           eq.asm):00022         ZIP             = MSTART+$700                     ; START OF EXECUTABLE CODE
     3F00             (           eq.asm):00023         ZCODE           = ZIP+$1700                       ; START OF Z-CODE (ASSUME 5.75K ZIP)
     003F             (           eq.asm):00024         ZCODEHIGH       = (ZIP+$1700)/256                 ; START OF Z-CODE (ASSUME 5.75K ZIP)
     00DC             (           eq.asm):00025         MEMTOP          = $DC                             ; TOP PAGE OF AVAILABLE RAM
     DD00             (           eq.asm):00026         INFCB           = $DD00
                      (           eq.asm):00027         
                      (           eq.asm):00028         ; Z-CODE HEADER OFFSETS
                      (           eq.asm):00029         
     0000             (           eq.asm):00030         ZVERS           = 0                               ; VERSION BYTE
     0001             (           eq.asm):00031         ZMODE           = 1                               ; MODE SELECT BYTE
     0002             (           eq.asm):00032         ZID             = 2                               ; GAME ID WORD
     0004             (           eq.asm):00033         ZENDLD          = 4                               ; START OF NON-PRELOADED Z-CODE
     0006             (           eq.asm):00034         ZBEGIN          = 6                               ; EXECUTION ADDRESS
     0008             (           eq.asm):00035         ZVOCAB          = 8                               ; START OF VOCABULARY TABLE
     000A             (           eq.asm):00036         ZOBJEC          = 10                              ; START OF OBJECT TABLE
     000C             (           eq.asm):00037         ZGLOBA          = 12                              ; START OF GLOBAL VARIABLE TABLE
     000E             (           eq.asm):00038         ZPURBT          = 14                              ; START OF "PURE" Z-CODE
     0010             (           eq.asm):00039         ZSCRIP          = 16                              ; FLAG WORD
     0012             (           eq.asm):00040         ZSERIA          = 18                              ; 3-WORD ASCII SERIAL NUMBER
     0018             (           eq.asm):00041         ZFWORD          = 24                              ; START OF FWORDS TABLE
     001A             (           eq.asm):00042         ZLENTH          = 26                              ; LENGTH OF Z-PROGRAM IN WORDS
     001C             (           eq.asm):00043         ZCHKSM          = 28                              ; Z-CODE CHECKSUM WORD
                      (           eq.asm):00044         
                      (           eq.asm):00045         ;       SBTTL "--- ZIP D-PAGE VARIABLES ---"
                      (           eq.asm):00046         
     0000             (           eq.asm):00047         OPCODE          = DSTART                          ; CURRENT OPCODE
     0001             (           eq.asm):00048         ARGCNT          = OPCODE+1                        ; # ARGUMENTS
     0002             (           eq.asm):00049         ARG1            = OPCODE+2                        ; ARGUMENT #1 (WORD)
     0004             (           eq.asm):00050         ARG2            = OPCODE+4                        ; ARGUMENT #2 (WORD)
     0006             (           eq.asm):00051         ARG3            = OPCODE+6                        ; ARGUMENT #3 (WORD)
     0008             (           eq.asm):00052         ARG4            = OPCODE+8                        ; ARGUMENT #4 (WORD)
                      (           eq.asm):00053         
     000A             (           eq.asm):00054         LRU             = OPCODE+10                       ; (BYTE) LEAST RECENTLY USED PAGE INDEX
     000B             (           eq.asm):00055         ZPURE           = LRU+1                           ; (BYTE) 1ST VIRTUAL PAGE OF PURE Z-CODE
     000C             (           eq.asm):00056         PMAX            = LRU+2                           ; (BYTE) MAXIMUM # SWAPPING PAGES
     000D             (           eq.asm):00057         ZPAGE           = LRU+3                           ; (BYTE) CURRENT SWAPPING PAGE
     000E             (           eq.asm):00058         PAGE0           = LRU+4                           ; (BYTE) 1ST ABS PAGE OF SWAPPING SPACE
     000F             (           eq.asm):00059         TABTOP          = LRU+5                           ; (WORD) ADDRESS OF LAST P-TABLE ENTRY
     0011             (           eq.asm):00060         STAMP           = LRU+7                           ; (BYTE) CURRENT TIMESTAMP (BM 11/24/84)
     0012             (           eq.asm):00061         SWAP            = LRU+8                           ; (BYTE) EARLIEST BUFFER (BM 11/24/84)
                      (           eq.asm):00062         
     0013             (           eq.asm):00063         ZPCH            = LRU+9                           ; HIGHEST-ORDER BIT OF PC
     0014             (           eq.asm):00064         ZPCM            = ZPCH+1                          ; MIDDLE 8 BITS OF PC
     0015             (           eq.asm):00065         ZPCL            = ZPCH+2                          ; LOWER 8 BITS OF PC
     0016             (           eq.asm):00066         ZPCPNT          = ZPCH+3                          ; POINTER TO ACTUAL PC PAGE (WORD)
     0018             (           eq.asm):00067         ZPCFLG          = ZPCH+5                          ; FLAG: "TRUE" IF ZPCPNT VALID
                      (           eq.asm):00068         
     001A             (           eq.asm):00069         MPCH            = ZPCH+7                          ; HIGHEST-ORDER BIT OF MEM POINTER
     001B             (           eq.asm):00070         MPCM            = MPCH+1                          ; MIDDLE 8 BITS OF MEM POINTER
     001C             (           eq.asm):00071         MPCL            = MPCH+2                          ; LOW-ORDER 8 BITS OF MEMORY POINTER
     001D             (           eq.asm):00072         MPCPNT          = MPCH+3                          ; ACTUAL POINTER TO MEMORY (WORD)
     001F             (           eq.asm):00073         MPCFLG          = MPCH+5                          ; FLAG: "TRUE" IF MPCPNT VALID
                      (           eq.asm):00074         
     0021             (           eq.asm):00075         GLOBAL          = MPCH+7                          ; GLOBAL VARIABLE POINTER (WORD)
     0023             (           eq.asm):00076         VOCAB           = GLOBAL+2                        ; VOCAB TABLE POINTER (WORD)
     0025             (           eq.asm):00077         FWORDS          = GLOBAL+4                        ; FWORDS TABLE POINTER (WORD)
                      (           eq.asm):00078         
     0027             (           eq.asm):00079         OZSTAK          = GLOBAL+6                        ; ZSP SAVE REGISTER (FOR ZCALL)
                      (           eq.asm):00080         
     0029             (           eq.asm):00081         CSTEMP          = OZSTAK+2                        ; SET IF TEMP CHARSET IN EFFECT
     002A             (           eq.asm):00082         CSPERM          = CSTEMP+1                        ; CURRENT PERM CHARSET
     002B             (           eq.asm):00083         STBYTF          = CSTEMP+2                        ; 0=1ST, 1=2ND, 2=3RD, 0=LAST
                      (           eq.asm):00084         
     002C             (           eq.asm):00085         ZSTWRD          = CSTEMP+3                        ; WORD STORAGE (WORD)
     002E             (           eq.asm):00086         ZSTBUI          = ZSTWRD+2                        ; Z-STRING INPUT BUFFER (6 BYTES)
     0034             (           eq.asm):00087         ZSTBUO          = ZSTWRD+8                        ; Z-STRING OUTPUT BUFFER (6 BYTES)
     003A             (           eq.asm):00088         RTABP           = ZSTWRD+14                       ; RESULT TABLE POINTER
     003B             (           eq.asm):00089         STABP           = ZSTWRD+15                       ; SOURCE TABLE POINTER
     003C             (           eq.asm):00090         PZSTFO          = ZSTWRD+16                       ; FWORD TABLE BLOCK OFFSET
                      (           eq.asm):00091         
     003D             (           eq.asm):00092         VAL             = ZSTWRD+17                       ; VALUE RETURN REGISTER (WORD)
     003F             (           eq.asm):00093         TEMP            = VAL+2                           ; TEMPORARY REGISTER (WORD)
     0041             (           eq.asm):00094         TEMP2           = VAL+4                           ; ANOTHER TEMPORARY REGISTER (WORD)
     0043             (           eq.asm):00095         MASK            = VAL+6                           ; BIT-MASK REGISTER (WORD)
     0045             (           eq.asm):00096         SQUOT           = VAL+8                           ; SIGN OF QUOTIENT
     0046             (           eq.asm):00097         SREM            = VAL+9                           ; SIGN OF REMAINDER
     0047             (           eq.asm):00098         MTEMP           = VAL+10                          ; MATH TEMP REGISTER (WORD)
                      (           eq.asm):00099         
     0049             (           eq.asm):00100         DRIVE           = VAL+12                          ; DRIVE NUMBER
     004A             (           eq.asm):00101         DBUFF           = DRIVE+1                         ; DISK I/O BUFFER POINTER (WORD)
     004C             (           eq.asm):00102         DBLOCK          = DRIVE+3                         ; Z-BLOCK # (WORD)
     004E             (           eq.asm):00103         TRACK           = DRIVE+5                         ; TRACK/SECTOR ADDRESS (WORD)
                      (           eq.asm):00104         
     0050             (           eq.asm):00105         TIMEFL          = DRIVE+7                         ; "TRUE" IF TIME MODE
                      (           eq.asm):00106         
     0051             (           eq.asm):00107         CHRPNT          = TIMEFL+1                        ; I/O BUFFER INDEX
     0052             (           eq.asm):00108         CPSAV           = CHRPNT+1                        ; SAVE REGISTER FOR [CHRPNT]
     0053             (           eq.asm):00109         BINDEX          = CHRPNT+2                        ; BUFFER DISPLAY INDEX
     0054             (           eq.asm):00110         LINCNT          = CHRPNT+3                        ; # LINES DISPLAYED SINCE LAST USL
     0055             (           eq.asm):00111         IOCHAR          = CHRPNT+4                        ; CURRENT I/O CHARACTER
     0056             (           eq.asm):00112         GDRIVE          = CHRPNT+5                        ; GAME-SAVE DEFAULT DRIVE #
     0057             (           eq.asm):00113         GPOSIT          = CHRPNT+6                        ; GAME-SAVE DEFAULT POSITION
     0058             (           eq.asm):00114         RAND1           = CHRPNT+7                        ; RANDOM NUMBER REGISTER
     0059             (           eq.asm):00115         RAND2           = CHRPNT+8                        ; DITTO
     005A             (           eq.asm):00116         CYCLE           = CHRPNT+9                        ; TIMER FOR CURSOR BLINK (WORD)
     005C             (           eq.asm):00117         BLINK           = CHRPNT+11                       ; MASK FOR CURSOR BLINK
     005D             (           eq.asm):00118         CFLAG           = CHRPNT+12                       ; CURSOR ENABLE FLAG
     005E             (           eq.asm):00119         SCRIPT          = CHRPNT+13                       ; SCRIPTING ENABLE FLAG
     005F             (           eq.asm):00120         IHOLD           = CHRPNT+14                       ; INTERRUPT HOLD
     0060             (           eq.asm):00121         TPOSIT          = CHRPNT+15                       ; TEMP GAME POSITION
     0061             (           eq.asm):00122         TDRIVE          = CHRPNT+16                       ; TEMP GAME DRIVE
                      (           eq.asm):00123         
     0060             (           eq.asm):00124         ZPGTOP          = CHRPNT+15                       ; END OF DIRECT-PAGE VARIABLES
                      (     cubixzip.asm):00049                 INCLUDE warm.asm
                      (         warm.asm):00001         ;       PAGE
                      (         warm.asm):00002         ;       SBTTL "--- WARMSTART ROUTINE ---"
                      (         warm.asm):00003         
     00               (         warm.asm):00004                 SETDP   0
                      (         warm.asm):00005                 ORG     ZIP                               ; START OF EXECUTABLE CODE
                      (         warm.asm):00006         
                      (         warm.asm):00007         ; WARMSTART ENTRY
                      (         warm.asm):00008         
2800                  (         warm.asm):00009         START:
2800 10CE21FE         (         warm.asm):00010                 LDS     #MSTACK                           ; RESET MACHINE STACK
                      (         warm.asm):00011         
                      (         warm.asm):00012         
                      (         warm.asm):00013         ; TEST TO SEE IF ZIP IS ALL LOADED
                      (         warm.asm):00014         
2804 8E0003           (         warm.asm):00015                 LDX     #3
2807                  (         warm.asm):00016         TSTEND:
2807 A6893969         (         warm.asm):00017                 LDA     ENDTST-1,X
280B A189281B         (         warm.asm):00018                 CMPA    ENDCMP-1,X
280F 2606             (         warm.asm):00019                 BNE     ENDERR
2811 301F             (         warm.asm):00020                 LEAX    -1,X
2813 26F2             (         warm.asm):00021                 BNE     TSTEND
2815 2009             (         warm.asm):00022                 BRA     ENDOK
2817                  (         warm.asm):00023         ENDERR:
2817 8610             (         warm.asm):00024                 LDA     #16
2819 7E3629           (         warm.asm):00025                 JMP     ZERROR                            ;
                      (         warm.asm):00026         
281C                  (         warm.asm):00027         ENDCMP:
281C 454E4400         (         warm.asm):00028                 FCN     'END'
                      (         warm.asm):00029         
                      (         warm.asm):00030         ; CLEAR ALL DIRECT-PAGE VARIABLES
                      (         warm.asm):00031         
2820                  (         warm.asm):00032         ENDOK:
2820 8E0000           (         warm.asm):00033                 LDX     #DSTART
2823                  (         warm.asm):00034         ST0:
2823 6F80             (         warm.asm):00035                 CLR     ,X+
2825 8C0060           (         warm.asm):00036                 CMPX    #ZPGTOP
2828 25F9             (         warm.asm):00037                 BLO     ST0
                      (         warm.asm):00038         
282A 0C11             (         warm.asm):00039                 INC     STAMP                             ; INIT TIMESTAMP TO 1 (BM 11/24/84)
                      (         warm.asm):00040         
                      (         warm.asm):00041         ; RESET THE PAGING TABLE
                      (         warm.asm):00042         
282C 8E2500           (         warm.asm):00043                 LDX     #PTABLE
282F 86FF             (         warm.asm):00044                 LDA     #$FF
2831                  (         warm.asm):00045         ST1A:
2831 A780             (         warm.asm):00046                 STA     ,X+
2833 8C2640           (         warm.asm):00047                 CMPX    #PTABLE+$140
2836 25F9             (         warm.asm):00048                 BLO     ST1A
                      (         warm.asm):00049         
                      (         warm.asm):00050         ; CLEAR THE TIMESTAMP MAP (BM 11/24/84)
                      (         warm.asm):00051         
2838 8E2650           (         warm.asm):00052                 LDX     #LRUMAP
283B                  (         warm.asm):00053         ST1B:
283B 6F80             (         warm.asm):00054                 CLR     ,X+
283D 8C26F0           (         warm.asm):00055                 CMPX    #LRUMAP+$A0
2840 25F9             (         warm.asm):00056                 BLO     ST1B
                      (         warm.asm):00057         
2842 BD36BF           (         warm.asm):00058                 JSR     OPENGAMEDSK                     ; open the game file -- needs to be selected by now
2845 CC0000           (         warm.asm):00059                 LDD     #0
2848 DD4C             (         warm.asm):00060                 STD     DBLOCK
                      (         warm.asm):00061         
                      (         warm.asm):00062         ; GET THE FIRST SECTOR OF Z-CODE
                      (         warm.asm):00063         
284A CC3F00           (         warm.asm):00064                 LDD     #ZCODE                            ; POINT TO 1ST
284D DD4A             (         warm.asm):00065                 STD     DBUFF                             ; Z-CODE LOCATION
284F BD36CF           (         warm.asm):00066                 JSR     GETDSK                            ; FETCH BLOCK #0 FROM DRIVE 0
                      (         warm.asm):00067         
                      (         warm.asm):00068         ; EXTRACT GAME DATA FROM Z-CODE HEADER
                      (         warm.asm):00069         
2852 B63F04           (         warm.asm):00070                 LDA     ZCODE+ZENDLD                      ; GET MSB OF ENDLOAD POINTER
2855 4C               (         warm.asm):00071                 INCA                                      ; ADD ONE TO GET
2856 970B             (         warm.asm):00072                 STA     ZPURE                             ; 1ST PAGE IN "PURE" CODE
2858 8B3F             (         warm.asm):00073                 ADDA    #ZCODEHIGH                        ; ADD BASE ADDRESS TO GET
285A 970E             (         warm.asm):00074                 STA     PAGE0                             ; 1ST PAGE OF SWAPPING SPACE
                      (         warm.asm):00075         
285C C6DC             (         warm.asm):00076                 LDB     #MEMTOP                           ; TOP PAGE OF MEMORY
285E D00E             (         warm.asm):00077                 SUBB    PAGE0                             ; SUBTRACT ADDRESS OF PAGING BUFFER
2860 2304             (         warm.asm):00078                 BLS     NORAM
2862 C108             (         warm.asm):00079                 CMPB    #8
2864 2404             (         warm.asm):00080                 BHS     SETNP                             ; MUST HAVE AT LEAST 8 SWAPPING PAGES
                      (         warm.asm):00081         
                      (         warm.asm):00082         ; *** ERROR #0 -- INSUFFICIENT RAM ***
                      (         warm.asm):00083         
2866                  (         warm.asm):00084         NORAM:
2866 4F               (         warm.asm):00085                 CLRA
2867 BD3629           (         warm.asm):00086                 JSR     ZERROR
                      (         warm.asm):00087         
                      (         warm.asm):00088         ; [B] HAS # FREE SWAPPING PAGES
                      (         warm.asm):00089         
286A                  (         warm.asm):00090         SETNP:
286A C1A0             (         warm.asm):00091                 CMPB    #$A0                              ; MAKE SURE # PAGES
286C 2502             (         warm.asm):00092                 BLO     SETA0                             ; DOESN'T EXCEED
286E C6A0             (         warm.asm):00093                 LDB     #$A0                              ; $A0 (BM 11/24/84)
2870                  (         warm.asm):00094         SETA0:
2870 D70C             (         warm.asm):00095                 STB     PMAX                              ; SET MAXIMUM # FREE PAGES
2872 8E2500           (         warm.asm):00096                 LDX     #PTABLE                           ; ADD BASE ADDR OF P-TABLE
2875 3A               (         warm.asm):00097                 ABX                                       ; TO PAGING LIMIT
2876 3A               (         warm.asm):00098                 ABX                                       ; TWICE (FOR WORD-ALIGNMENT)
2877 9F0F             (         warm.asm):00099                 STX     TABTOP                            ; TO GET ADDR OF HIGHEST TABLE ENTRY
                      (         warm.asm):00100         
2879 B63F01           (         warm.asm):00101                 LDA     ZCODE+ZMODE                       ; GET MODE BYTE
287C 8A08             (         warm.asm):00102                 ORA     #%00001000                        ; SET THE "TANDY" ID BIT
287E B73F01           (         warm.asm):00103                 STA     ZCODE+ZMODE                       ; (WE DON'T WANT ANY DIRTY WORDS)
2881 8402             (         warm.asm):00104                 ANDA    #%00000010                        ; ISOLATE STAT-LINE FORMAT BIT
2883 9750             (         warm.asm):00105                 STA     TIMEFL                            ; 0=SCORE/MOVES, NZ=HOURS/MINUTES
                      (         warm.asm):00106         
2885 FC3F06           (         warm.asm):00107                 LDD     ZCODE+ZBEGIN                      ; GET START ADDRESS OF Z-CODE
2888 DD14             (         warm.asm):00108                 STD     ZPCM                              ; HIGH BITS AT ZPCH ALREADY CLEARED
                      (         warm.asm):00109         
288A FC3F0C           (         warm.asm):00110                 LDD     ZCODE+ZGLOBA                      ; GET RELATIVE ADDR OF GLOBAL TABLE
288D C33F00           (         warm.asm):00111                 ADDD    #ZCODE                            ; CONVERT TO ABSOLUTE ADDRESS
2890 DD21             (         warm.asm):00112                 STD     GLOBAL
                      (         warm.asm):00113         
2892 FC3F18           (         warm.asm):00114                 LDD     ZCODE+ZFWORD                      ; DO SAME FOR FWORDS TABLE
2895 C33F00           (         warm.asm):00115                 ADDD    #ZCODE
2898 DD25             (         warm.asm):00116                 STD     FWORDS
                      (         warm.asm):00117         
289A FC3F08           (         warm.asm):00118                 LDD     ZCODE+ZVOCAB                      ; AND VOCABULARY TABLE
289D C33F00           (         warm.asm):00119                 ADDD    #ZCODE
28A0 DD23             (         warm.asm):00120                 STD     VOCAB
                      (         warm.asm):00121         
                      (         warm.asm):00122         ; GRAB THE REST OF THE PRELOAD
                      (         warm.asm):00123         
28A2 960B             (         warm.asm):00124                 LDA     ZPURE                             ; GET # PAGES IN PRELOAD + 1
28A4 973F             (         warm.asm):00125                 STA     TEMP                              ; USE AS AN INDEX
28A6                  (         warm.asm):00126         LDPRE:
28A6 BD36CF           (         warm.asm):00127                 JSR     GETDSK                            ; GRAB THE BLOCK
28A9 0A3F             (         warm.asm):00128                 DEC     TEMP
28AB 26F9             (         warm.asm):00129                 BNE     LDPRE                             ; KEEP READING TILL DONE
                      (         warm.asm):00130         
28AD CE24FE           (         warm.asm):00131                 LDU     #TOPSTA                           ; INIT THE ZSP
28B0 DF27             (         warm.asm):00132                 STU     OZSTAK                            ; REMEMBER ITS POSITION
                      (         warm.asm):00133         
28B2 BD35CC           (         warm.asm):00134                 JSR     CLS                               ; CLEAR THE SCREEN
28B5 035E             (         warm.asm):00135                 COM     SCRIPT                            ; ENABLE SCRIPTING
                      (         warm.asm):00136         
28B7 B635A3           (         warm.asm):00137                 LDA     SFLAG                             ; SCRIPTING FLAG
28BA B73F11           (         warm.asm):00138                 STA     ZCODE+ZSCRIP+1
                      (         warm.asm):00139         
                      (         warm.asm):00140         ; FALL INTO MAIN LOOP
                      (     cubixzip.asm):00050         
                      (     cubixzip.asm):00051         ;TITLE "ZIP/6809-B INFOCOM, INC. --- MAINLINE"
                      (     cubixzip.asm):00052                 INCLUDE MAIN.ASM
                      (         MAIN.ASM):00001         ;       PAGE
                      (         MAIN.ASM):00002         ;       SBTTL "--- MAIN LOOP ---"
                      (         MAIN.ASM):00003         
28BD                  (         MAIN.ASM):00004         MLOOP:
28BD 0A59             (         MAIN.ASM):00005                 DEC     RAND2                             ; RANDOMNESS
28BF 0A59             (         MAIN.ASM):00006                 DEC     RAND2
                      (         MAIN.ASM):00007         
28C1 0F01             (         MAIN.ASM):00008                 CLR     ARGCNT                            ; RESET # ARGUMENTS
28C3 BD31A1           (         MAIN.ASM):00009                 JSR     NEXTPC                            ; GET NEXT Z-BYTE
28C6 9700             (         MAIN.ASM):00010                 STA     OPCODE                            ; SAVE OPCODE
                      (         MAIN.ASM):00011         
                      (         MAIN.ASM):00012                 IF      DEBUG = 1
28C8 C630             (         MAIN.ASM):00013                     LDB     #'0'
28CA BD396D           (         MAIN.ASM):00014                     JSR     DOBUG
28CD 9600             (         MAIN.ASM):00015                     LDA     OPCODE
                      (         MAIN.ASM):00016                 ENDIF
                      (         MAIN.ASM):00017         
28CF 102A00AD         (         MAIN.ASM):00018                 LBPL    OP2                               ; 2-OP IF POSITIVE
28D3 81B0             (         MAIN.ASM):00019                 CMPA    #176
28D5 2578             (         MAIN.ASM):00020                 BLO     OP1                               ; IT'S A 1-OP
28D7 81C0             (         MAIN.ASM):00021                 CMPA    #192
28D9 2564             (         MAIN.ASM):00022                 BLO     OP0                               ; IF NOT A 0-OP ...
                      (         MAIN.ASM):00023         
                      (         MAIN.ASM):00024         ; HANDLE AN X-OP
                      (         MAIN.ASM):00025         
28DB                  (         MAIN.ASM):00026         OPEXT:
28DB BD31A1           (         MAIN.ASM):00027                 JSR     NEXTPC                            ; GET ARGUMENT BYTE
28DE 9741             (         MAIN.ASM):00028                 STA     TEMP2                             ; HOLD IT HERE
28E0 0F42             (         MAIN.ASM):00029                 CLR     TEMP2+1                           ; INIT LOOP INDEX
28E2 2006             (         MAIN.ASM):00030                 BRA     OPX1
                      (         MAIN.ASM):00031         
28E4                  (         MAIN.ASM):00032         OPX0:
28E4 9641             (         MAIN.ASM):00033                 LDA     TEMP2                             ; GRAB ARG BYTE
28E6 48               (         MAIN.ASM):00034                 ASLA                                      ; SHIFT TO BITS 7 & 6
28E7 48               (         MAIN.ASM):00035                 ASLA
28E8 9741             (         MAIN.ASM):00036                 STA     TEMP2                             ; SAVE RESULT
                      (         MAIN.ASM):00037         
28EA                  (         MAIN.ASM):00038         OPX1:
28EA 84C0             (         MAIN.ASM):00039                 ANDA    #%11000000                        ; MASK OUT GARBAGE
28EC 2605             (         MAIN.ASM):00040                 BNE     OPX2
28EE BD29C0           (         MAIN.ASM):00041                 JSR     GETLNG                            ; 00 = LONG IMMEDIATE
28F1 2010             (         MAIN.ASM):00042                 BRA     OPXNXT
                      (         MAIN.ASM):00043         
28F3                  (         MAIN.ASM):00044         OPX2:
28F3 8140             (         MAIN.ASM):00045                 CMPA    #%01000000
28F5 2605             (         MAIN.ASM):00046                 BNE     OPX3
28F7 BD29B8           (         MAIN.ASM):00047                 JSR     GETSHT                            ; 01 = SHORT IMMEDIATE
28FA 2007             (         MAIN.ASM):00048                 BRA     OPXNXT
                      (         MAIN.ASM):00049         
28FC                  (         MAIN.ASM):00050         OPX3:
28FC 8180             (         MAIN.ASM):00051                 CMPA    #%10000000
28FE 2619             (         MAIN.ASM):00052                 BNE     OPX4                              ; 11 = NO MORE VARIABLES
2900 BD29D7           (         MAIN.ASM):00053                 JSR     GETVAR                            ; 10 = VARIABLE
                      (         MAIN.ASM):00054         
2903                  (         MAIN.ASM):00055         OPXNXT:
2903 D642             (         MAIN.ASM):00056                 LDB     TEMP2+1                           ; GET INDEX
2905 8E0002           (         MAIN.ASM):00057                 LDX     #ARG1                             ; BASE ADDR OF ARGS
2908 3A               (         MAIN.ASM):00058                 ABX                                       ; ADD OFFSET IN B
2909 DC3F             (         MAIN.ASM):00059                 LDD     TEMP                              ; GRAB THE ARGUMENT'S VALUE
290B ED84             (         MAIN.ASM):00060                 STD     ,X                                ; AND SAVE IT
290D 0C01             (         MAIN.ASM):00061                 INC     ARGCNT                            ; KEEP TRACK
290F 0C42             (         MAIN.ASM):00062                 INC     TEMP2+1                           ; UPDATE
2911 0C42             (         MAIN.ASM):00063                 INC     TEMP2+1                           ; ARGUMENT INDEX
2913 9642             (         MAIN.ASM):00064                 LDA     TEMP2+1                           ; DONE 4 ARGS YET?
2915 8108             (         MAIN.ASM):00065                 CMPA    #8
2917 25CB             (         MAIN.ASM):00066                 BLO     OPX0                              ; NO, KEEP GRABBING
                      (         MAIN.ASM):00067         
                      (         MAIN.ASM):00068         ; DISPATCH THE X-OP
                      (         MAIN.ASM):00069         
2919                  (         MAIN.ASM):00070         OPX4:
2919 D600             (         MAIN.ASM):00071                 LDB     OPCODE                            ; RETRIEVE THE OPCODE
291B C1E0             (         MAIN.ASM):00072                 CMPB    #224                              ; IS IT AN EXTENDED 2-OP?
291D 10250085         (         MAIN.ASM):00073                 LBLO    OP2EX                             ; YES, HANDLE LIKE A 2-OP
2921 C41F             (         MAIN.ASM):00074                 ANDB    #%00011111                        ; ELSE ISOLATE OP BITS
2923 C10C             (         MAIN.ASM):00075                 CMPB    #NOPSX                            ; COMPARE TO LEGAL # OF X-OPS
2925 2505             (         MAIN.ASM):00076                 BLO     DISPX                             ; CONTINUE IF OKAY
                      (         MAIN.ASM):00077         
                      (         MAIN.ASM):00078         ; *** ERROR #1 -- ILLEGAL X-OP ***
                      (         MAIN.ASM):00079         
2927 8601             (         MAIN.ASM):00080                 LDA     #1
2929 BD3629           (         MAIN.ASM):00081                 JSR     ZERROR
                      (         MAIN.ASM):00082         
292C                  (         MAIN.ASM):00083         DISPX:
292C 8E2B32           (         MAIN.ASM):00084                 LDX     #OPTX                             ; X-OP DISPATCH TABLE
292F                  (         MAIN.ASM):00085         DODIS:
292F 58               (         MAIN.ASM):00086                 ASLB                                      ; FORM A WORD-OFFSET INTO IT
2930 3A               (         MAIN.ASM):00087                 ABX                                       ; ADD THE OFFSET
                      (         MAIN.ASM):00088         
                      (         MAIN.ASM):00089                 IF      DEBUG
2931 3410             (         MAIN.ASM):00090                     PSHS    X
2933 C631             (         MAIN.ASM):00091                     LDB     #'1'
2935 BD396D           (         MAIN.ASM):00092                     JSR     DOBUG
2938 3510             (         MAIN.ASM):00093                     PULS    X
                      (         MAIN.ASM):00094                 ENDIF
                      (         MAIN.ASM):00095         
293A AD94             (         MAIN.ASM):00096                 JSR     [,X]                              ; HANDLE THE OPCODE
293C 7E28BD           (         MAIN.ASM):00097                 JMP     MLOOP                             ; AND GO BACK FOR ANOTHER
                      (         MAIN.ASM):00098         
                      (         MAIN.ASM):00099         ; HANDLE A 0-OP
                      (         MAIN.ASM):00100         
293F                  (         MAIN.ASM):00101         OP0:
293F 8E2AC4           (         MAIN.ASM):00102                 LDX     #OPT0                             ; 0-OP DISPATCH TABLE
2942 D600             (         MAIN.ASM):00103                 LDB     OPCODE                            ; FETCH OPCODE
2944 C40F             (         MAIN.ASM):00104                 ANDB    #%00001111                        ; ISOLATE OP BITS
2946 C10E             (         MAIN.ASM):00105                 CMPB    #NOPS0                            ; OPCODE OUT OF RANGE?
2948 25E5             (         MAIN.ASM):00106                 BLO     DODIS                             ; NO, GO DISPATCH IT
                      (         MAIN.ASM):00107         
                      (         MAIN.ASM):00108         ; *** ERROR #2 -- ILLEGAL 0-OP ***
                      (         MAIN.ASM):00109         
294A 8602             (         MAIN.ASM):00110                 LDA     #2
294C BD3629           (         MAIN.ASM):00111                 JSR     ZERROR
                      (         MAIN.ASM):00112         
                      (         MAIN.ASM):00113         ; HANDLE A 1-OP
                      (         MAIN.ASM):00114         
294F                  (         MAIN.ASM):00115         OP1:
294F 8430             (         MAIN.ASM):00116                 ANDA    #%00110000                        ; ISOLATE ARG BITS
2951 2605             (         MAIN.ASM):00117                 BNE     OP1A
2953 BD29C0           (         MAIN.ASM):00118                 JSR     GETLNG                            ; 00 = LONG IMMEDIATE
2956 2015             (         MAIN.ASM):00119                 BRA     OP1EX
                      (         MAIN.ASM):00120         
2958                  (         MAIN.ASM):00121         OP1A:
2958 8110             (         MAIN.ASM):00122                 CMPA    #%00010000
295A 2605             (         MAIN.ASM):00123                 BNE     OP1B
295C BD29B8           (         MAIN.ASM):00124                 JSR     GETSHT                            ; 01 = SHORT IMMEDIATE
295F 200C             (         MAIN.ASM):00125                 BRA     OP1EX
                      (         MAIN.ASM):00126         
2961                  (         MAIN.ASM):00127         OP1B:
2961 8120             (         MAIN.ASM):00128                 CMPA    #%00100000
2963 2705             (         MAIN.ASM):00129                 BEQ     OP1C
                      (         MAIN.ASM):00130         
                      (         MAIN.ASM):00131         ; *** ERROR #3 -- ILLEGAL 1-OP ***
                      (         MAIN.ASM):00132         
2965                  (         MAIN.ASM):00133         BADOP1:
2965 8603             (         MAIN.ASM):00134                 LDA     #3
2967 BD3629           (         MAIN.ASM):00135                 JSR     ZERROR
                      (         MAIN.ASM):00136         
296A                  (         MAIN.ASM):00137         OP1C:
296A BD29D7           (         MAIN.ASM):00138                 JSR     GETVAR                            ; 10 = VARIABLE
                      (         MAIN.ASM):00139         
296D                  (         MAIN.ASM):00140         OP1EX:
296D DC3F             (         MAIN.ASM):00141                 LDD     TEMP
296F DD02             (         MAIN.ASM):00142                 STD     ARG1                              ; GRAB THE ARGUMENT
2971 0C01             (         MAIN.ASM):00143                 INC     ARGCNT                            ; ONE ARGUMENT
2973 8E2AE0           (         MAIN.ASM):00144                 LDX     #OPT1                             ; ADDR OF 1-OP DISPATCH TABLE
2976 D600             (         MAIN.ASM):00145                 LDB     OPCODE                            ; RESTORE OPCODE
2978 C40F             (         MAIN.ASM):00146                 ANDB    #%00001111                        ; ISOLATE OP BITS
297A C110             (         MAIN.ASM):00147                 CMPB    #NOPS1                            ; IF OPCODE OUT OF RANGE,
297C 24E7             (         MAIN.ASM):00148                 BHS     BADOP1                            ; REPORT IT
297E 20AF             (         MAIN.ASM):00149                 BRA     DODIS                             ; ELSE DISPATCH THE 1-OP
                      (         MAIN.ASM):00150         
                      (         MAIN.ASM):00151         ; HANDLE A 2-OP
                      (         MAIN.ASM):00152         
2980                  (         MAIN.ASM):00153         OP2:
2980 8440             (         MAIN.ASM):00154                 ANDA    #%01000000                        ; ISOLATE 1ST ARG BIT
2982 2605             (         MAIN.ASM):00155                 BNE     OP2A
2984 BD29B8           (         MAIN.ASM):00156                 JSR     GETSHT                            ; 0 = SHORT IMMEDIATE
2987 2003             (         MAIN.ASM):00157                 BRA     OP2B
                      (         MAIN.ASM):00158         
2989                  (         MAIN.ASM):00159         OP2A:
2989 BD29D7           (         MAIN.ASM):00160                 JSR     GETVAR                            ; 1 = VARIABLE
                      (         MAIN.ASM):00161         
298C                  (         MAIN.ASM):00162         OP2B:
298C DC3F             (         MAIN.ASM):00163                 LDD     TEMP                              ; GRAB VALUE
298E DD02             (         MAIN.ASM):00164                 STD     ARG1                              ; SAVE IN ARG1
2990 0C01             (         MAIN.ASM):00165                 INC     ARGCNT
                      (         MAIN.ASM):00166         
2992 9600             (         MAIN.ASM):00167                 LDA     OPCODE                            ; RESTORE OPCODE
2994 8420             (         MAIN.ASM):00168                 ANDA    #%00100000                        ; ISOLATE 2ND ARG BIT
2996 2605             (         MAIN.ASM):00169                 BNE     OP2C
2998 BD29B8           (         MAIN.ASM):00170                 JSR     GETSHT                            ; 0 = SHORT IMMEDIATE
299B 2003             (         MAIN.ASM):00171                 BRA     OP2D
                      (         MAIN.ASM):00172         
299D                  (         MAIN.ASM):00173         OP2C:
299D BD29D7           (         MAIN.ASM):00174                 JSR     GETVAR                            ; 1 = VARIABLE
                      (         MAIN.ASM):00175         
29A0                  (         MAIN.ASM):00176         OP2D:
29A0 DC3F             (         MAIN.ASM):00177                 LDD     TEMP                              ; GRAB 2ND VALUE
29A2 DD04             (         MAIN.ASM):00178                 STD     ARG2                              ; STORE AS ARG2
29A4 0C01             (         MAIN.ASM):00179                 INC     ARGCNT
                      (         MAIN.ASM):00180         
29A6                  (         MAIN.ASM):00181         OP2EX:
29A6 8E2B00           (         MAIN.ASM):00182                 LDX     #OPT2                             ; ADDR OF 2-OP DISPATCH TABLE
29A9 D600             (         MAIN.ASM):00183                 LDB     OPCODE                            ; RESTORE YET AGAIN
29AB C41F             (         MAIN.ASM):00184                 ANDB    #%00011111                        ; ISOLATE OP BITS
29AD C119             (         MAIN.ASM):00185                 CMPB    #NOPS2                            ; OPCODE IN RANGE?
29AF 1025FF7C         (         MAIN.ASM):00186                 LBLO    DODIS                             ; YES, GO DISPATCH IT
                      (         MAIN.ASM):00187         
                      (         MAIN.ASM):00188         ; *** ERROR #4 -- ILLEGAL 2-OP ***
                      (         MAIN.ASM):00189         
29B3                  (         MAIN.ASM):00190         BADOP2:
29B3 8604             (         MAIN.ASM):00191                 LDA     #4
29B5 BD3629           (         MAIN.ASM):00192                 JSR     ZERROR
                      (     cubixzip.asm):00053                 INCLUDE SUBS.ASM
                      (         SUBS.ASM):00001         ;       PAGE
                      (         SUBS.ASM):00002         ;       SBTTL "--- MAIN LOOP SUPPORT ---"
                      (         SUBS.ASM):00003         
                      (         SUBS.ASM):00004         ; -----------------------
                      (         SUBS.ASM):00005         ; FETCH A SHORT IMMEDIATE
                      (         SUBS.ASM):00006         ; -----------------------
                      (         SUBS.ASM):00007         
29B8                  (         SUBS.ASM):00008         GETSHT:
29B8 BD31A1           (         SUBS.ASM):00009                 JSR     NEXTPC                            ; NEXT Z-BYTE IS
29BB 9740             (         SUBS.ASM):00010                 STA     TEMP+1                            ; THE LSB OF ARGUMENT
29BD 0F3F             (         SUBS.ASM):00011                 CLR     TEMP                              ; MSB IS ZERO
29BF 39               (         SUBS.ASM):00012                 RTS
                      (         SUBS.ASM):00013         
                      (         SUBS.ASM):00014         ; ----------------------
                      (         SUBS.ASM):00015         ; FETCH A LONG IMMEDIATE
                      (         SUBS.ASM):00016         ; ----------------------
                      (         SUBS.ASM):00017         
29C0                  (         SUBS.ASM):00018         GETLNG:
29C0 BD31A1           (         SUBS.ASM):00019                 JSR     NEXTPC                            ; NEXT Z-BYTE IS MSB
29C3 3402             (         SUBS.ASM):00020                 PSHS    A                                 ; SAVE ON STACK
29C5 BD31A1           (         SUBS.ASM):00021                 JSR     NEXTPC                            ; NOW GRAB LSB
29C8 9740             (         SUBS.ASM):00022                 STA     TEMP+1                            ; STORE IT
29CA 3502             (         SUBS.ASM):00023                 PULS    A                                 ; RETRIEVE MSB
29CC 973F             (         SUBS.ASM):00024                 STA     TEMP                              ; AND STORE IT
29CE 39               (         SUBS.ASM):00025                 RTS
                      (         SUBS.ASM):00026         
                      (         SUBS.ASM):00027         ; ----------------
                      (         SUBS.ASM):00028         ; FETCH A VARIABLE
                      (         SUBS.ASM):00029         ; ----------------
                      (         SUBS.ASM):00030         
                      (         SUBS.ASM):00031         ; GET WITHIN AN OPCODE
                      (         SUBS.ASM):00032         
29CF                  (         SUBS.ASM):00033         VARGET:
29CF 4D               (         SUBS.ASM):00034                 TSTA                                      ; IF NON-ZERO,
29D0 260B             (         SUBS.ASM):00035                 BNE     GETVR1                            ; ACCESS A VARIABLE
29D2 BD2A3C           (         SUBS.ASM):00036                 JSR     POPSTK                            ; ELSE TAKE VAR OFF STACK
29D5 205A             (         SUBS.ASM):00037                 BRA     PSHSTK                            ; WITHOUT ALTERING STACK
                      (         SUBS.ASM):00038         
29D7                  (         SUBS.ASM):00039         GETVAR:
29D7 BD31A1           (         SUBS.ASM):00040                 JSR     NEXTPC                            ; GRAB VAR-TYPE BYTE
29DA 4D               (         SUBS.ASM):00041                 TSTA                                      ; IF ZERO,
29DB 275F             (         SUBS.ASM):00042                 BEQ     POPSTK                            ; VALUE IS ON STACK
                      (         SUBS.ASM):00043         
                      (         SUBS.ASM):00044         ; IS VARIABLE LOCAL OR GLOBAL?
                      (         SUBS.ASM):00045         
29DD                  (         SUBS.ASM):00046         GETVR1:
29DD 8110             (         SUBS.ASM):00047                 CMPA    #16
29DF 240D             (         SUBS.ASM):00048                 BHS     GETVRG                            ; IT'S GLOBAL
                      (         SUBS.ASM):00049         
                      (         SUBS.ASM):00050         ; HANDLE A LOCAL VARIABLE
                      (         SUBS.ASM):00051         
29E1                  (         SUBS.ASM):00052         GETVRL:
29E1 4A               (         SUBS.ASM):00053                 DECA                                      ; FORM A ZERO-ALIGNED INDEX
29E2 48               (         SUBS.ASM):00054                 ASLA                                      ; WORD INDEX
29E3 8E2700           (         SUBS.ASM):00055                 LDX     #LOCALS                           ; INTO LOCAL VAR TABLE
29E6 1F89             (         SUBS.ASM):00056                 TFR     A,B                               ; MOVE AND
29E8                  (         SUBS.ASM):00057         GTVX:
29E8 3A               (         SUBS.ASM):00058                 ABX                                       ; ADD INDEXING OFFSET
29E9 EC84             (         SUBS.ASM):00059                 LDD     ,X                                ; FETCH VALUE
29EB DD3F             (         SUBS.ASM):00060                 STD     TEMP                              ; AND RETURN IT
29ED 39               (         SUBS.ASM):00061                 RTS
                      (         SUBS.ASM):00062         
                      (         SUBS.ASM):00063         ; HANDLE A GLOBAL VARIABLE
                      (         SUBS.ASM):00064         
29EE                  (         SUBS.ASM):00065         GETVRG:
29EE 8010             (         SUBS.ASM):00066                 SUBA    #16                               ; ZERO-ALIGN
29F0 9E21             (         SUBS.ASM):00067                 LDX     GLOBAL                            ; BASE OF GLOBAL VAR TABLE
29F2 1F89             (         SUBS.ASM):00068                 TFR     A,B                               ; CONVERT TO WORD-ALIGNED INDEX
29F4 3A               (         SUBS.ASM):00069                 ABX                                       ; BY ADDING OFFSET TWICE (CLEVER, EH?)
29F5 20F1             (         SUBS.ASM):00070                 BRA     GTVX                              ; 2ND ADD ABOVE
                      (         SUBS.ASM):00071         
                      (         SUBS.ASM):00072         ; --------------
                      (         SUBS.ASM):00073         ; RETURN A VALUE
                      (         SUBS.ASM):00074         ; --------------
                      (         SUBS.ASM):00075         
                      (         SUBS.ASM):00076         ; RETURN FROM WITHIN OPCODE
                      (         SUBS.ASM):00077         
29F7                  (         SUBS.ASM):00078         VARPUT:
29F7 4D               (         SUBS.ASM):00079                 TSTA                                      ; IF NON-ZERO
29F8 261D             (         SUBS.ASM):00080                 BNE     PUTVR1                            ; ACCESS A VARIABLE
29FA 3706             (         SUBS.ASM):00081                 PULU    D                                 ; ELSE FLUSH TOP ITEM OFF STACK
29FC 118324FE         (         SUBS.ASM):00082                 CMPU    #TOPSTA
2A00 2245             (         SUBS.ASM):00083                 BHI     UNDER                             ; WATCH FOR UNDERFLOW!
2A02 202D             (         SUBS.ASM):00084                 BRA     PSHSTK                            ; AND PUSH [TEMP] ONTO STACK
                      (         SUBS.ASM):00085         
                      (         SUBS.ASM):00086         ; RETURN A ZERO
                      (         SUBS.ASM):00087         
2A04                  (         SUBS.ASM):00088         RET0:
2A04 4F               (         SUBS.ASM):00089                 CLRA                                      ; CLEAR MSB
                      (         SUBS.ASM):00090         
                      (         SUBS.ASM):00091         ; RETURN BYTE IN [A]
                      (         SUBS.ASM):00092         
2A05                  (         SUBS.ASM):00093         PUTBYT:
2A05 9740             (         SUBS.ASM):00094                 STA     TEMP+1                            ; USE [A] AS LSB
2A07 0F3F             (         SUBS.ASM):00095                 CLR     TEMP                              ; ZERO MSB
                      (         SUBS.ASM):00096         
                      (         SUBS.ASM):00097         ; RETURN VALUE IN [TEMP]
                      (         SUBS.ASM):00098         
2A09                  (         SUBS.ASM):00099         PUTVAL:
2A09 9E3F             (         SUBS.ASM):00100                 LDX     TEMP                              ; GET VALUE IN [TEMP]
2A0B 3410             (         SUBS.ASM):00101                 PSHS    X                                 ; AND HOLD ON TO IT
2A0D BD31A1           (         SUBS.ASM):00102                 JSR     NEXTPC                            ; GET VAR-TYPE BYTE
2A10 3510             (         SUBS.ASM):00103                 PULS    X                                 ; RETRIEVE VALUE
2A12 9F3F             (         SUBS.ASM):00104                 STX     TEMP                              ; PUT IT BACK IN [TEMP]
2A14 4D               (         SUBS.ASM):00105                 TSTA                                      ; IF TYPE-BYTE IS ZERO,
2A15 271A             (         SUBS.ASM):00106                 BEQ     PSHSTK                            ; VALUE GOES TO THE STACK
                      (         SUBS.ASM):00107         
                      (         SUBS.ASM):00108         ; LOCAL OR GLOBAL?
                      (         SUBS.ASM):00109         
2A17                  (         SUBS.ASM):00110         PUTVR1:
2A17 8110             (         SUBS.ASM):00111                 CMPA    #16
2A19 240D             (         SUBS.ASM):00112                 BHS     PUTVLG                            ; IT'S GLOBAL
                      (         SUBS.ASM):00113         
                      (         SUBS.ASM):00114         ; HANDLE A LOCAL VARIABLE
                      (         SUBS.ASM):00115         
2A1B                  (         SUBS.ASM):00116         PUTVLL:
2A1B 4A               (         SUBS.ASM):00117                 DECA
2A1C 48               (         SUBS.ASM):00118                 ASLA
2A1D 1F89             (         SUBS.ASM):00119                 TFR     A,B
2A1F 8E2700           (         SUBS.ASM):00120                 LDX     #LOCALS                           ; INTO LOCAL VARIABLE TABLE
2A22                  (         SUBS.ASM):00121         PTVX:
2A22 3A               (         SUBS.ASM):00122                 ABX
2A23 DC3F             (         SUBS.ASM):00123                 LDD     TEMP
2A25 ED84             (         SUBS.ASM):00124                 STD     ,X
2A27 39               (         SUBS.ASM):00125                 RTS
                      (         SUBS.ASM):00126         
                      (         SUBS.ASM):00127         ; HANDLE A GLOBAL VARIABLE
                      (         SUBS.ASM):00128         
2A28                  (         SUBS.ASM):00129         PUTVLG:
2A28 8010             (         SUBS.ASM):00130                 SUBA    #16                               ; ZERO-ALIGN
2A2A 9E21             (         SUBS.ASM):00131                 LDX     GLOBAL                            ; BASE OF GLOBAL VAR TABLE
2A2C 1F89             (         SUBS.ASM):00132                 TFR     A,B                               ; FORM WORD-ALIGNED INDEX
2A2E 3A               (         SUBS.ASM):00133                 ABX                                       ; BY ADDING OFFSET TO BASE
2A2F 20F1             (         SUBS.ASM):00134                 BRA     PTVX                              ; TWICE
                      (         SUBS.ASM):00135         
                      (         SUBS.ASM):00136         ; --------------------
                      (         SUBS.ASM):00137         ; PUSH [TEMP] TO STACK
                      (         SUBS.ASM):00138         ; --------------------
                      (         SUBS.ASM):00139         
2A31                  (         SUBS.ASM):00140         PSHSTK:
2A31 DC3F             (         SUBS.ASM):00141                 LDD     TEMP
                      (         SUBS.ASM):00142         
                      (         SUBS.ASM):00143         ; PUSH [D] TO STACK
                      (         SUBS.ASM):00144         
2A33                  (         SUBS.ASM):00145         PSHDZ:
2A33 3606             (         SUBS.ASM):00146                 PSHU    D
2A35 11832300         (         SUBS.ASM):00147                 CMPU    #ZSTACK
2A39 2511             (         SUBS.ASM):00148                 BLO     OVER
2A3B 39               (         SUBS.ASM):00149                 RTS
                      (         SUBS.ASM):00150         
                      (         SUBS.ASM):00151         ; -------------------------
                      (         SUBS.ASM):00152         ; POP STACK, SAVE IN [TEMP]
                      (         SUBS.ASM):00153         ; -------------------------
                      (         SUBS.ASM):00154         
2A3C                  (         SUBS.ASM):00155         POPSTK:
2A3C 3706             (         SUBS.ASM):00156                 PULU    D                                 ; PULL A WORD
2A3E DD3F             (         SUBS.ASM):00157                 STD     TEMP                              ; SAVE IT IN [TEMP]
2A40 118324FE         (         SUBS.ASM):00158                 CMPU    #TOPSTA
2A44 2201             (         SUBS.ASM):00159                 BHI     UNDER
2A46 39               (         SUBS.ASM):00160                 RTS
                      (         SUBS.ASM):00161         
                      (         SUBS.ASM):00162         ; *** ERROR #5 -- Z-STACK UNDERFLOW ***
                      (         SUBS.ASM):00163         
2A47                  (         SUBS.ASM):00164         UNDER:
2A47 8605             (         SUBS.ASM):00165                 LDA     #5
2A49 7E3629           (         SUBS.ASM):00166                 JMP     ZERROR
                      (         SUBS.ASM):00167         
                      (         SUBS.ASM):00168         ; *** ERROR #6 -- Z-STACK OVERFLOW ***
                      (         SUBS.ASM):00169         
2A4C                  (         SUBS.ASM):00170         OVER:
2A4C 8606             (         SUBS.ASM):00171                 LDA     #6
2A4E 7E3629           (         SUBS.ASM):00172                 JMP     ZERROR
                      (         SUBS.ASM):00173         
                      (         SUBS.ASM):00174         ; ---------------
                      (         SUBS.ASM):00175         ; PREDICATE FAILS
                      (         SUBS.ASM):00176         ; ---------------
                      (         SUBS.ASM):00177         
2A51                  (         SUBS.ASM):00178         PREDF:
2A51 BD31A1           (         SUBS.ASM):00179                 JSR     NEXTPC                            ; GET 1ST BRANCH BYTE
2A54 4D               (         SUBS.ASM):00180                 TSTA                                      ; IF BIT 7 ISN'T SET,
2A55 2A0E             (         SUBS.ASM):00181                 BPL     PREDB                             ; DO THE BRANCH
                      (         SUBS.ASM):00182         
2A57                  (         SUBS.ASM):00183         PREDNB:
2A57 8440             (         SUBS.ASM):00184                 ANDA    #%01000000                        ; ELSE TEST BIT 6
2A59 2603             (         SUBS.ASM):00185                 BNE     PNBX                              ; ALL DONE IF SET
2A5B BD31A1           (         SUBS.ASM):00186                 JSR     NEXTPC                            ; ELSE SKIP OVER 2ND BRANCH BYTE
2A5E                  (         SUBS.ASM):00187         PNBX:
2A5E 39               (         SUBS.ASM):00188                 RTS                                       ; BEFORE LEAVING
                      (         SUBS.ASM):00189         
                      (         SUBS.ASM):00190         ; ------------------
                      (         SUBS.ASM):00191         ; PREDICATE SUCCEEDS
                      (         SUBS.ASM):00192         ; ------------------
                      (         SUBS.ASM):00193         
2A5F                  (         SUBS.ASM):00194         PREDS:
2A5F BD31A1           (         SUBS.ASM):00195                 JSR     NEXTPC
2A62 4D               (         SUBS.ASM):00196                 TSTA                                      ; IF BIT 7 IS SET,
2A63 2AF2             (         SUBS.ASM):00197                 BPL     PREDNB                            ; BRANCH ON PREDICATE FAILURE
                      (         SUBS.ASM):00198         
                      (         SUBS.ASM):00199         ; ----------------
                      (         SUBS.ASM):00200         ; PERFORM A BRANCH
                      (         SUBS.ASM):00201         ; ----------------
                      (         SUBS.ASM):00202         
2A65                  (         SUBS.ASM):00203         PREDB:
2A65 8540             (         SUBS.ASM):00204                 BITA    #%01000000                        ; LONG OR SHORT BRANCH?
2A67 2708             (         SUBS.ASM):00205                 BEQ     PREDLB                            ; LONG IF BIT 6 IS OFF
2A69 843F             (         SUBS.ASM):00206                 ANDA    #%00111111                        ; ELSE FORM SHORT OFFSET
2A6B 9740             (         SUBS.ASM):00207                 STA     TEMP+1                            ; USE AS LSB OF BRANCH OFFSET
2A6D 0F3F             (         SUBS.ASM):00208                 CLR     TEMP                              ; ZERO MSB OF OFFSET
2A6F 2013             (         SUBS.ASM):00209                 BRA     PREDB1                            ; AND DO THE BRANCH
                      (         SUBS.ASM):00210         
                      (         SUBS.ASM):00211         ; HANDLE A LONG BRANCH
                      (         SUBS.ASM):00212         
2A71                  (         SUBS.ASM):00213         PREDLB:
2A71 843F             (         SUBS.ASM):00214                 ANDA    #%00111111                        ; FORM MSB OF OFFSET
2A73 8520             (         SUBS.ASM):00215                 BITA    #%00100000                        ; CHECK SIGN OF 14-BIT VALUE
2A75 2702             (         SUBS.ASM):00216                 BEQ     DOB2                              ; IT'S POSITIVE
2A77 8AE0             (         SUBS.ASM):00217                 ORA     #%11100000                        ; ELSE EXTEND SIGN BITS
2A79                  (         SUBS.ASM):00218         DOB2:
2A79 3402             (         SUBS.ASM):00219                 PSHS    A                                 ; SAVE MSB OF BRANCH
2A7B BD31A1           (         SUBS.ASM):00220                 JSR     NEXTPC                            ; GRAB NEXT Z-BYTE
2A7E 9740             (         SUBS.ASM):00221                 STA     TEMP+1                            ; USE AS LSB OF BRANCH
2A80 3502             (         SUBS.ASM):00222                 PULS    A
2A82 973F             (         SUBS.ASM):00223                 STA     TEMP                              ; RETRIEVE MSB
                      (         SUBS.ASM):00224         
                      (         SUBS.ASM):00225         ; BRANCH TO Z-ADDRESS IN [TEMP]
                      (         SUBS.ASM):00226         
2A84                  (         SUBS.ASM):00227         PREDB1:
2A84 DC3F             (         SUBS.ASM):00228                 LDD     TEMP                              ; IF OFFSET IS ZERO,
2A86 102700C8         (         SUBS.ASM):00229                 LBEQ    ZRFALS                            ; DO AN "RFALSE"
2A8A 830001           (         SUBS.ASM):00230                 SUBD    #1                                ; IF OFFSET IS ONE,
2A8D 102700B9         (         SUBS.ASM):00231                 LBEQ    ZRTRUE                            ; DO AN "RTRUE"
                      (         SUBS.ASM):00232         
2A91                  (         SUBS.ASM):00233         PREDB3:
2A91 830001           (         SUBS.ASM):00234                 SUBD    #1                                ; D = OFFSET-2
2A94 DD3F             (         SUBS.ASM):00235                 STD     TEMP                              ; SAVE NEW OFFSET
                      (         SUBS.ASM):00236         
                      (         SUBS.ASM):00237         ; USE [VAL] TO HOLD TOP 9 BITS OF OFFSET
                      (         SUBS.ASM):00238         
2A96 973E             (         SUBS.ASM):00239                 STA     VAL+1
2A98 5F               (         SUBS.ASM):00240                 CLRB
2A99 48               (         SUBS.ASM):00241                 ASLA                                      ; EXTEND THE SIGN BIT
2A9A 59               (         SUBS.ASM):00242                 ROLB                                      ; SHIFT CARRY TO BIT 0 OF [B]
2A9B D73D             (         SUBS.ASM):00243                 STB     VAL                               ; SAVE AS UPPER BYTE OF OFFSET
                      (         SUBS.ASM):00244         
2A9D 9640             (         SUBS.ASM):00245                 LDA     TEMP+1                            ; GET LOW BYTE OF OFFSET
2A9F 1CFE             (         SUBS.ASM):00246                 ANDCC   #%11111110                        ; CLEAR CARRY
2AA1 9915             (         SUBS.ASM):00247                 ADCA    ZPCL                              ; ADD LOW BYTE OF CURRENT ZPC
2AA3 2406             (         SUBS.ASM):00248                 BCC     PDB0                              ; IF OVERFLOWED,
                      (         SUBS.ASM):00249         
2AA5 0C3E             (         SUBS.ASM):00250                 INC     VAL+1                             ; UPDATE
2AA7 2602             (         SUBS.ASM):00251                 BNE     PDB0                              ; UPPER
2AA9 0C3D             (         SUBS.ASM):00252                 INC     VAL                               ; 9 BITS
                      (         SUBS.ASM):00253         
2AAB                  (         SUBS.ASM):00254         PDB0:
2AAB 9715             (         SUBS.ASM):00255                 STA     ZPCL                              ; LOW-BYTES CALCED
                      (         SUBS.ASM):00256         
2AAD DC3D             (         SUBS.ASM):00257                 LDD     VAL                               ; IF 9 UPPER BITS ARE ZERO,
2AAF 2712             (         SUBS.ASM):00258                 BEQ     PDB1                              ; NO NEED TO CHANGE PAGES
                      (         SUBS.ASM):00259         
2AB1 963E             (         SUBS.ASM):00260                 LDA     VAL+1                             ; ELSE ADD MIDDLE BYTES
2AB3 1CFE             (         SUBS.ASM):00261                 ANDCC   #%11111110                        ; CLEAR CARRY
2AB5 9914             (         SUBS.ASM):00262                 ADCA    ZPCM
2AB7 9714             (         SUBS.ASM):00263                 STA     ZPCM
2AB9 963D             (         SUBS.ASM):00264                 LDA     VAL                               ; NOW ADD THE TOP BITS
2ABB 9913             (         SUBS.ASM):00265                 ADCA    ZPCH                              ; USING PREVIOUS CARRY
2ABD 8401             (         SUBS.ASM):00266                 ANDA    #%00000001                        ; ISOLATE BIT 0
2ABF 9713             (         SUBS.ASM):00267                 STA     ZPCH
2AC1 0F18             (         SUBS.ASM):00268                 CLR     ZPCFLG                            ; CHANGED PAGES
2AC3                  (         SUBS.ASM):00269         PDB1:
2AC3 39               (         SUBS.ASM):00270                 RTS
                      (     cubixzip.asm):00054                 INCLUDE DISPATCH.ASM
                      (     DISPATCH.ASM):00001         ;       PAGE
                      (     DISPATCH.ASM):00002         ;       SBTTL "--- OPCODE DISPATCH TABLES ---"
                      (     DISPATCH.ASM):00003         
                      (     DISPATCH.ASM):00004         ; 0-OPS
                      (     DISPATCH.ASM):00005         
2AC4                  (     DISPATCH.ASM):00006         OPT0:
2AC4 2B4A             (     DISPATCH.ASM):00007                 FDB     ZRTRUE                            ; 0
2AC6 2B52             (     DISPATCH.ASM):00008                 FDB     ZRFALS                            ; 1
2AC8 2B55             (     DISPATCH.ASM):00009                 FDB     ZPRI                              ; 2
2ACA 2B73             (     DISPATCH.ASM):00010                 FDB     ZPRR                              ; 3
2ACC 2B72             (     DISPATCH.ASM):00011                 FDB     ZNOOP                             ; 4
2ACE 3730             (     DISPATCH.ASM):00012                 FDB     ZSAVE                             ; 5
2AD0 3783             (     DISPATCH.ASM):00013                 FDB     ZREST                             ; 6
2AD2 35E2             (     DISPATCH.ASM):00014                 FDB     ZSTART                            ; 7
2AD4 2B7A             (     DISPATCH.ASM):00015                 FDB     ZRSTAK                            ; 8
2AD6 2A3C             (     DISPATCH.ASM):00016                 FDB     POPSTK                            ; 9
2AD8 3642             (     DISPATCH.ASM):00017                 FDB     ZQUIT                             ; 10
2ADA 3683             (     DISPATCH.ASM):00018                 FDB     ZCRLF                             ; 11
2ADC 36AC             (     DISPATCH.ASM):00019                 FDB     ZUSL                              ; 12
2ADE 2B82             (     DISPATCH.ASM):00020                 FDB     ZVER                              ; 13
                      (     DISPATCH.ASM):00021         
     000E             (     DISPATCH.ASM):00022         NOPS0           EQU 14                            ; NUMBER OF 0-OPS
                      (     DISPATCH.ASM):00023         
                      (     DISPATCH.ASM):00024         ; 1-OPS
                      (     DISPATCH.ASM):00025         
2AE0                  (     DISPATCH.ASM):00026         OPT1:
2AE0 2BCF             (     DISPATCH.ASM):00027                 FDB     ZZERO                             ; 0
2AE2 2BD8             (     DISPATCH.ASM):00028                 FDB     ZNEXT                             ; 1
2AE4 2BE1             (     DISPATCH.ASM):00029                 FDB     ZFIRST                            ; 2
2AE6 2BFF             (     DISPATCH.ASM):00030                 FDB     ZLOC                              ; 3
2AE8 2C0F             (     DISPATCH.ASM):00031                 FDB     ZPTSIZ                            ; 4
2AEA 2C21             (     DISPATCH.ASM):00032                 FDB     ZINC                              ; 5
2AEC 2C39             (     DISPATCH.ASM):00033                 FDB     ZDEC                              ; 6
2AEE 2C45             (     DISPATCH.ASM):00034                 FDB     ZPRB                              ; 7
2AF0 2965             (     DISPATCH.ASM):00035                 FDB     BADOP1                            ; 8 (UNDEFINED)
2AF2 2C4F             (     DISPATCH.ASM):00036                 FDB     ZREMOV                            ; 9
2AF4 2C8F             (     DISPATCH.ASM):00037                 FDB     ZPRD                              ; 10
2AF6 2CA3             (     DISPATCH.ASM):00038                 FDB     ZRET                              ; 11
2AF8 2CDD             (     DISPATCH.ASM):00039                 FDB     ZJUMP                             ; 12
2AFA 2CE7             (     DISPATCH.ASM):00040                 FDB     ZPRINT                            ; 13
2AFC 2CF1             (     DISPATCH.ASM):00041                 FDB     ZVALUE                            ; 14
2AFE 2CF9             (     DISPATCH.ASM):00042                 FDB     ZBCOM                             ; 15
                      (     DISPATCH.ASM):00043         
     0010             (     DISPATCH.ASM):00044         NOPS1           EQU 16                            ; NUMBER OF 1-OPS
                      (     DISPATCH.ASM):00045         
                      (     DISPATCH.ASM):00046         ; 2-OPS
                      (     DISPATCH.ASM):00047         
2B00                  (     DISPATCH.ASM):00048         OPT2:
2B00 29B3             (     DISPATCH.ASM):00049                 FDB     BADOP2                            ; 0 (UNDEFINED)
2B02 2F1E             (     DISPATCH.ASM):00050                 FDB     ZEQUAL                            ; 1
2B04 2D02             (     DISPATCH.ASM):00051                 FDB     ZLESS                             ; 2
2B06 2D0C             (     DISPATCH.ASM):00052                 FDB     ZGRTR                             ; 3
2B08 2D16             (     DISPATCH.ASM):00053                 FDB     ZDLESS                            ; 4
2B0A 2D1F             (     DISPATCH.ASM):00054                 FDB     ZIGRTR                            ; 5
2B0C 2D42             (     DISPATCH.ASM):00055                 FDB     ZIN                               ; 6
2B0E 2D52             (     DISPATCH.ASM):00056                 FDB     ZBTST                             ; 7
2B10 2D5F             (     DISPATCH.ASM):00057                 FDB     ZBOR                              ; 8
2B12 2D6A             (     DISPATCH.ASM):00058                 FDB     ZBAND                             ; 9
2B14 2D72             (     DISPATCH.ASM):00059                 FDB     ZFSETP                            ; 10
2B16 2D83             (     DISPATCH.ASM):00060                 FDB     ZFSET                             ; 11
2B18 2D91             (     DISPATCH.ASM):00061                 FDB     ZFCLR                             ; 12
2B1A 2DA1             (     DISPATCH.ASM):00062                 FDB     ZSET                              ; 13
2B1C 2DAA             (     DISPATCH.ASM):00063                 FDB     ZMOVE                             ; 14
2B1E 2DD0             (     DISPATCH.ASM):00064                 FDB     ZGET                              ; 15
2B20 2DE3             (     DISPATCH.ASM):00065                 FDB     ZGETB                             ; 16
2B22 2DF6             (     DISPATCH.ASM):00066                 FDB     ZGETP                             ; 17
2B24 2E3A             (     DISPATCH.ASM):00067                 FDB     ZGETPT                            ; 18
2B26 2E5E             (     DISPATCH.ASM):00068                 FDB     ZNEXTP                            ; 19
2B28 2E7E             (     DISPATCH.ASM):00069                 FDB     ZADD                              ; 20
2B2A 2E87             (     DISPATCH.ASM):00070                 FDB     ZSUB                              ; 21
2B2C 2E8D             (     DISPATCH.ASM):00071                 FDB     ZMUL                              ; 22
2B2E 2EAC             (     DISPATCH.ASM):00072                 FDB     ZDIV                              ; 23
2B30 2EB1             (     DISPATCH.ASM):00073                 FDB     ZMOD                              ; 24
                      (     DISPATCH.ASM):00074         
     0019             (     DISPATCH.ASM):00075         NOPS2           EQU 25                            ; NUMBER OF 2-OPS
                      (     DISPATCH.ASM):00076         
                      (     DISPATCH.ASM):00077         ; X-OPS
                      (     DISPATCH.ASM):00078         
2B32                  (     DISPATCH.ASM):00079         OPTX:
2B32 2F46             (     DISPATCH.ASM):00080                 FDB     ZCALL                             ; 0
2B34 2FB7             (     DISPATCH.ASM):00081                 FDB     ZPUT                              ; 1
2B36 2FC9             (     DISPATCH.ASM):00082                 FDB     ZPUTB                             ; 2
2B38 2FD7             (     DISPATCH.ASM):00083                 FDB     ZPUTP                             ; 3
2B3A 3076             (     DISPATCH.ASM):00084                 FDB     ZREAD                             ; 4
2B3C 300D             (     DISPATCH.ASM):00085                 FDB     ZPRC                              ; 5
2B3E 3012             (     DISPATCH.ASM):00086                 FDB     ZPRN                              ; 6
2B40 304D             (     DISPATCH.ASM):00087                 FDB     ZRAND                             ; 7
2B42 3069             (     DISPATCH.ASM):00088                 FDB     ZPUSH                             ; 8
2B44 306E             (     DISPATCH.ASM):00089                 FDB     ZPOP                              ; 9
2B46 2B72             (     DISPATCH.ASM):00090                 FDB     ZSPLIT                            ; 10
2B48 2B72             (     DISPATCH.ASM):00091                 FDB     ZSCRN                             ; 11
                      (     DISPATCH.ASM):00092         
     000C             (     DISPATCH.ASM):00093         NOPSX           EQU 12                            ; NUMBER OF X-OPS
                      (     cubixzip.asm):00055         
                      (     cubixzip.asm):00056         ;TITLE "ZIP/6809-B INFOCOM, INC. --- OPCODE EXECUTORS"
                      (     cubixzip.asm):00057                 INCLUDE OPS0.ASM
                      (         OPS0.ASM):00001         ;       PAGE
                      (         OPS0.ASM):00002         ;       SBTTL "--- 0-OPS ---"
                      (         OPS0.ASM):00003         
                      (         OPS0.ASM):00004         ; -----
                      (         OPS0.ASM):00005         ; RTRUE
                      (         OPS0.ASM):00006         ; -----
                      (         OPS0.ASM):00007         
                      (         OPS0.ASM):00008         ; Simulate a RETURN 1
                      (         OPS0.ASM):00009         
2B4A                  (         OPS0.ASM):00010         ZRTRUE:
2B4A C601             (         OPS0.ASM):00011                 LDB     #1
                      (         OPS0.ASM):00012         
2B4C                  (         OPS0.ASM):00013         ZRT:
2B4C 4F               (         OPS0.ASM):00014                 CLRA
2B4D DD02             (         OPS0.ASM):00015                 STD     ARG1                              ; SAVE VALUE HERE
2B4F 7E2CA3           (         OPS0.ASM):00016                 JMP     ZRET
                      (         OPS0.ASM):00017         
                      (         OPS0.ASM):00018         ; ------
                      (         OPS0.ASM):00019         ; RFALSE
                      (         OPS0.ASM):00020         ; ------
                      (         OPS0.ASM):00021         
                      (         OPS0.ASM):00022         ; Simulate a RETURN 0
                      (         OPS0.ASM):00023         
2B52                  (         OPS0.ASM):00024         ZRFALS:
2B52 5F               (         OPS0.ASM):00025                 CLRB
2B53 20F7             (         OPS0.ASM):00026                 BRA     ZRT
                      (         OPS0.ASM):00027         
                      (         OPS0.ASM):00028         ; ------
                      (         OPS0.ASM):00029         ; PRINTI
                      (         OPS0.ASM):00030         ; ------
                      (         OPS0.ASM):00031         
                      (         OPS0.ASM):00032         ; Print the Z-string immediately following the opcode
                      (         OPS0.ASM):00033         
2B55                  (         OPS0.ASM):00034         ZPRI:
2B55 9613             (         OPS0.ASM):00035                 LDA     ZPCH                              ; MOVE ZPC INTO MPC
2B57 971A             (         OPS0.ASM):00036                 STA     MPCH
2B59 DC14             (         OPS0.ASM):00037                 LDD     ZPCM
2B5B DD1B             (         OPS0.ASM):00038                 STD     MPCM
2B5D 0F1F             (         OPS0.ASM):00039                 CLR     MPCFLG                            ; ZERO MPC FLAG
                      (         OPS0.ASM):00040         
2B5F BD329D           (         OPS0.ASM):00041                 JSR     PZSTR                             ; PRINT THE STRING AT [MPC]
                      (         OPS0.ASM):00042         
2B62 961A             (         OPS0.ASM):00043                 LDA     MPCH                              ; UPDATE ZPC FROM MPC
2B64 9713             (         OPS0.ASM):00044                 STA     ZPCH
2B66 DC1B             (         OPS0.ASM):00045                 LDD     MPCM
2B68 DD14             (         OPS0.ASM):00046                 STD     ZPCM
2B6A 961F             (         OPS0.ASM):00047                 LDA     MPCFLG                            ; ALSO UPDATE FLAG
2B6C 9718             (         OPS0.ASM):00048                 STA     ZPCFLG
2B6E DC1D             (         OPS0.ASM):00049                 LDD     MPCPNT                            ; AND PAGE POINTER
2B70 DD16             (         OPS0.ASM):00050                 STD     ZPCPNT
                      (         OPS0.ASM):00051         
                      (         OPS0.ASM):00052         ; FALL THROUGH TO ...
                      (         OPS0.ASM):00053         
                      (         OPS0.ASM):00054         ; ----
                      (         OPS0.ASM):00055         ; NOOP
                      (         OPS0.ASM):00056         ; ----
                      (         OPS0.ASM):00057         
2B72                  (         OPS0.ASM):00058         ZNOOP:
2B72 39               (         OPS0.ASM):00059                 RTS
                      (         OPS0.ASM):00060         
                      (         OPS0.ASM):00061         ; ------
                      (         OPS0.ASM):00062         ; PRINTR
                      (         OPS0.ASM):00063         ; ------
                      (         OPS0.ASM):00064         
                      (         OPS0.ASM):00065         ; Execute a PRINTI, followed by CRLF and RTRUE
                      (         OPS0.ASM):00066         
2B73                  (         OPS0.ASM):00067         ZPRR:
2B73 8DE0             (         OPS0.ASM):00068                 BSR     ZPRI
2B75 BD3683           (         OPS0.ASM):00069                 JSR     ZCRLF
2B78 20D0             (         OPS0.ASM):00070                 BRA     ZRTRUE
                      (         OPS0.ASM):00071         
                      (         OPS0.ASM):00072         ; ------
                      (         OPS0.ASM):00073         ; RSTACK
                      (         OPS0.ASM):00074         ; ------
                      (         OPS0.ASM):00075         
                      (         OPS0.ASM):00076         ; Execute a RETURN, with CALL value on top of the stack
                      (         OPS0.ASM):00077         
2B7A                  (         OPS0.ASM):00078         ZRSTAK:
2B7A BD2A3C           (         OPS0.ASM):00079                 JSR     POPSTK
2B7D DD02             (         OPS0.ASM):00080                 STD     ARG1                              ; TOS WAS LEFT IN [D]
2B7F 7E2CA3           (         OPS0.ASM):00081                 JMP     ZRET
                      (         OPS0.ASM):00082         
                      (         OPS0.ASM):00083         ; ------
                      (         OPS0.ASM):00084         ; VERIFY
                      (         OPS0.ASM):00085         ; ------
                      (         OPS0.ASM):00086         
                      (         OPS0.ASM):00087         ; Verify the game code
                      (         OPS0.ASM):00088         
2B82                  (         OPS0.ASM):00089         ZVER:
2B82 BD366E           (         OPS0.ASM):00090                 JSR     VERNUM                            ; DISPLAY ZIP VERSION CODE
2B85 FC3F1A           (         OPS0.ASM):00091                 LDD     ZCODE+ZLENTH                      ; GET LENGTH OF Z-CODE
2B88 DD04             (         OPS0.ASM):00092                 STD     ARG2                              ; IN WORDS
                      (         OPS0.ASM):00093         
                      (         OPS0.ASM):00094         ; CLEAR VARIABLES
                      (         OPS0.ASM):00095         
2B8A 4F               (         OPS0.ASM):00096                 CLRA
2B8B 5F               (         OPS0.ASM):00097                 CLRB
2B8C DD02             (         OPS0.ASM):00098                 STD     ARG1
2B8E DD06             (         OPS0.ASM):00099                 STD     ARG3                              ; BIT 17 OF Z-CODE LENGTH
2B90 DD3F             (         OPS0.ASM):00100                 STD     TEMP                              ; BYTE COUNT
                      (         OPS0.ASM):00101         
                      (         OPS0.ASM):00102         ; CONVERT Z-CODE LENGTH TO BYTES
                      (         OPS0.ASM):00103         
2B92 0805             (         OPS0.ASM):00104                 ASL     ARG2+1                            ; BOTTOM 8 BITS
2B94 0904             (         OPS0.ASM):00105                 ROL     ARG2                              ; MIDDLE 8 BITS
2B96 0907             (         OPS0.ASM):00106                 ROL     ARG3+1                            ; 17TH BIT OF LENGTH
                      (         OPS0.ASM):00107         
2B98 8640             (         OPS0.ASM):00108                 LDA     #$40                              ; 1ST 64 BYTES
2B9A 9740             (         OPS0.ASM):00109                 STA     TEMP+1                            ; ARE NOT CHECKED
2B9C BD3285           (         OPS0.ASM):00110                 JSR     SETWRD                            ; [TEMP] POINTS TO FIRST BYTE
                      (         OPS0.ASM):00111         
2B9F 8606             (         OPS0.ASM):00112                 LDA     #ARG3                             ; PATCH [GETBYT] ROUTINE
2BA1 B731DC           (         OPS0.ASM):00113                 STA     PATCH                             ; SO PRELOAD WILL BE READ FROM DISK
                      (         OPS0.ASM):00114         
2BA4                  (         OPS0.ASM):00115         VSUM:
2BA4 BD31D2           (         OPS0.ASM):00116                 JSR     GETBYT                            ; GET A BYTE
2BA7 5F               (         OPS0.ASM):00117                 CLRB                                      ; CLEAR CARRY
2BA8 9903             (         OPS0.ASM):00118                 ADCA    ARG1+1                            ; ADD TO SUM
2BAA 9703             (         OPS0.ASM):00119                 STA     ARG1+1
2BAC 2402             (         OPS0.ASM):00120                 BCC     VSUM0
2BAE 0C02             (         OPS0.ASM):00121                 INC     ARG1
                      (         OPS0.ASM):00122         
2BB0                  (         OPS0.ASM):00123         VSUM0:
2BB0 DC1B             (         OPS0.ASM):00124                 LDD     MPCM                              ; END OF GAME YET?
2BB2 109304           (         OPS0.ASM):00125                 CMPD    ARG2
2BB5 26ED             (         OPS0.ASM):00126                 BNE     VSUM
                      (         OPS0.ASM):00127         
2BB7 961A             (         OPS0.ASM):00128                 LDA     MPCH                              ; ALSO CHECK TOP BIT
2BB9 9107             (         OPS0.ASM):00129                 CMPA    ARG3+1
2BBB 26E7             (         OPS0.ASM):00130                 BNE     VSUM
                      (         OPS0.ASM):00131         
2BBD 860B             (         OPS0.ASM):00132                 LDA     #ZPURE
2BBF B731DC           (         OPS0.ASM):00133                 STA     PATCH                             ; UNPATCH [GETBYT]
                      (         OPS0.ASM):00134         
2BC2 FC3F1C           (         OPS0.ASM):00135                 LDD     ZCODE+ZCHKSM                      ; GET CHECKSUM
2BC5 109302           (         OPS0.ASM):00136                 CMPD    ARG1                              ; SAME AS CALCULATED?
2BC8 1027FE93         (         OPS0.ASM):00137                 LBEQ    PREDS                             ; YES, PREDICATE SUCCEEDS
2BCC 7E2A51           (         OPS0.ASM):00138                 JMP     PREDF                             ; ELSE FAILURE ...
                      (     cubixzip.asm):00058                 INCLUDE OPS1.ASM
                      (         OPS1.ASM):00001         ;       PAGE
                      (         OPS1.ASM):00002         ;       SBTTL "--- 1-OPS ---"
                      (         OPS1.ASM):00003         
                      (         OPS1.ASM):00004         ; -----
                      (         OPS1.ASM):00005         ; ZERO?
                      (         OPS1.ASM):00006         ; -----
                      (         OPS1.ASM):00007         
                      (         OPS1.ASM):00008         ; Is arg1 equal to zero? [PRED]
                      (         OPS1.ASM):00009         
2BCF                  (         OPS1.ASM):00010         ZZERO:
2BCF DC02             (         OPS1.ASM):00011                 LDD     ARG1
2BD1 1027FE8A         (         OPS1.ASM):00012                 LBEQ    PREDS
2BD5 7E2A51           (         OPS1.ASM):00013                 JMP     PREDF
                      (         OPS1.ASM):00014         
                      (         OPS1.ASM):00015         ; -----
                      (         OPS1.ASM):00016         ; NEXT?
                      (         OPS1.ASM):00017         ; -----
                      (         OPS1.ASM):00018         
                      (         OPS1.ASM):00019         ; Return the NEXT pointer in object "arg1"; fail if
                      (         OPS1.ASM):00020         ; none left, and return zero [VALUE][PRED]
                      (         OPS1.ASM):00021         
2BD8                  (         OPS1.ASM):00022         ZNEXT:
2BD8 9603             (         OPS1.ASM):00023                 LDA     ARG1+1
2BDA BD34E7           (         OPS1.ASM):00024                 JSR     OBJLOC
2BDD C605             (         OPS1.ASM):00025                 LDB     #5                                ; SAME AS FIRST?
2BDF 2007             (         OPS1.ASM):00026                 BRA     FIRST1
                      (         OPS1.ASM):00027         
                      (         OPS1.ASM):00028         ; ------
                      (         OPS1.ASM):00029         ; FIRST?
                      (         OPS1.ASM):00030         ; ------
                      (         OPS1.ASM):00031         
                      (         OPS1.ASM):00032         ; Return the FIRST pointer in object "arg1"; fail if
                      (         OPS1.ASM):00033         ; none, and return zero [VALUE][PRED]
                      (         OPS1.ASM):00034         
2BE1                  (         OPS1.ASM):00035         ZFIRST:
2BE1 9603             (         OPS1.ASM):00036                 LDA     ARG1+1
2BE3 BD34E7           (         OPS1.ASM):00037                 JSR     OBJLOC
2BE6 C606             (         OPS1.ASM):00038                 LDB     #6
                      (         OPS1.ASM):00039         
2BE8                  (         OPS1.ASM):00040         FIRST1:
2BE8 9E3F             (         OPS1.ASM):00041                 LDX     TEMP
2BEA A685             (         OPS1.ASM):00042                 LDA     B,X                               ; FETCH SLOT
2BEC 9740             (         OPS1.ASM):00043                 STA     TEMP+1                            ; SAVE HERE
2BEE 3402             (         OPS1.ASM):00044                 PSHS    A                                 ; AND ON STACK
2BF0 0F3F             (         OPS1.ASM):00045                 CLR     TEMP                              ; ZERO MSB
2BF2 BD2A09           (         OPS1.ASM):00046                 JSR     PUTVAL
2BF5 3502             (         OPS1.ASM):00047                 PULS    A
2BF7 4D               (         OPS1.ASM):00048                 TSTA
2BF8 1027FE55         (         OPS1.ASM):00049                 LBEQ    PREDF                             ; FAILURE
2BFC 7E2A5F           (         OPS1.ASM):00050                 JMP     PREDS                             ; OR SUCCESS
                      (         OPS1.ASM):00051         
                      (         OPS1.ASM):00052         ; ---
                      (         OPS1.ASM):00053         ; LOC
                      (         OPS1.ASM):00054         ; ---
                      (         OPS1.ASM):00055         
                      (         OPS1.ASM):00056         ; Return the object containing object "arg1"; zero if none [VALUE]
                      (         OPS1.ASM):00057         
2BFF                  (         OPS1.ASM):00058         ZLOC:
2BFF 9603             (         OPS1.ASM):00059                 LDA     ARG1+1
2C01 BD34E7           (         OPS1.ASM):00060                 JSR     OBJLOC
2C04 9E3F             (         OPS1.ASM):00061                 LDX     TEMP
2C06 A604             (         OPS1.ASM):00062                 LDA     4,X
2C08 9740             (         OPS1.ASM):00063                 STA     TEMP+1
2C0A 0F3F             (         OPS1.ASM):00064                 CLR     TEMP
2C0C 7E2A09           (         OPS1.ASM):00065                 JMP     PUTVAL
                      (         OPS1.ASM):00066         
                      (         OPS1.ASM):00067         ; ------
                      (         OPS1.ASM):00068         ; PTSIZE
                      (         OPS1.ASM):00069         ; ------
                      (         OPS1.ASM):00070         
                      (         OPS1.ASM):00071         ; Return length of prop table "arg1" in bytes [VALUE]
                      (         OPS1.ASM):00072         
2C0F                  (         OPS1.ASM):00073         ZPTSIZ:
2C0F DC02             (         OPS1.ASM):00074                 LDD     ARG1
2C11 C33F00           (         OPS1.ASM):00075                 ADDD    #ZCODE
2C14 830001           (         OPS1.ASM):00076                 SUBD    #1
2C17 DD3F             (         OPS1.ASM):00077                 STD     TEMP
2C19 5F               (         OPS1.ASM):00078                 CLRB
2C1A BD34A1           (         OPS1.ASM):00079                 JSR     PROPL
2C1D 4C               (         OPS1.ASM):00080                 INCA
2C1E 7E2A05           (         OPS1.ASM):00081                 JMP     PUTBYT
                      (         OPS1.ASM):00082         
                      (         OPS1.ASM):00083         ; ---
                      (         OPS1.ASM):00084         ; INC
                      (         OPS1.ASM):00085         ; ---
                      (         OPS1.ASM):00086         
                      (         OPS1.ASM):00087         ; Increment arg1 [VALUE]
                      (         OPS1.ASM):00088         
2C21                  (         OPS1.ASM):00089         ZINC:
2C21 9603             (         OPS1.ASM):00090                 LDA     ARG1+1
2C23 BD29CF           (         OPS1.ASM):00091                 JSR     VARGET
2C26 DC3F             (         OPS1.ASM):00092                 LDD     TEMP
2C28 C30001           (         OPS1.ASM):00093                 ADDD    #1
2C2B                  (         OPS1.ASM):00094         ZINC1:
2C2B DD3F             (         OPS1.ASM):00095                 STD     TEMP
2C2D 3406             (         OPS1.ASM):00096                 PSHS    D
2C2F 9603             (         OPS1.ASM):00097                 LDA     ARG1+1
2C31 BD29F7           (         OPS1.ASM):00098                 JSR     VARPUT
2C34 3506             (         OPS1.ASM):00099                 PULS    D
2C36 DD3F             (         OPS1.ASM):00100                 STD     TEMP
2C38 39               (         OPS1.ASM):00101                 RTS
                      (         OPS1.ASM):00102         
                      (         OPS1.ASM):00103         ; ---
                      (         OPS1.ASM):00104         ; DEC
                      (         OPS1.ASM):00105         ; ---
                      (         OPS1.ASM):00106         
                      (         OPS1.ASM):00107         ; Decrement arg1 [VALUE]
                      (         OPS1.ASM):00108         
2C39                  (         OPS1.ASM):00109         ZDEC:
2C39 9603             (         OPS1.ASM):00110                 LDA     ARG1+1
2C3B BD29CF           (         OPS1.ASM):00111                 JSR     VARGET
2C3E DC3F             (         OPS1.ASM):00112                 LDD     TEMP
2C40 830001           (         OPS1.ASM):00113                 SUBD    #1
2C43 20E6             (         OPS1.ASM):00114                 BRA     ZINC1
                      (         OPS1.ASM):00115         
                      (         OPS1.ASM):00116         ; ------
                      (         OPS1.ASM):00117         ; PRINTB
                      (         OPS1.ASM):00118         ; ------
                      (         OPS1.ASM):00119         
                      (         OPS1.ASM):00120         ; PRINT the string pointed to by BYTE-pointer "arg1"
                      (         OPS1.ASM):00121         
2C45                  (         OPS1.ASM):00122         ZPRB:
2C45 DC02             (         OPS1.ASM):00123                 LDD     ARG1
2C47 DD3F             (         OPS1.ASM):00124                 STD     TEMP
2C49 BD3285           (         OPS1.ASM):00125                 JSR     SETWRD
2C4C 7E329D           (         OPS1.ASM):00126                 JMP     PZSTR
                      (         OPS1.ASM):00127         
                      (         OPS1.ASM):00128         ; ------
                      (         OPS1.ASM):00129         ; REMOVE
                      (         OPS1.ASM):00130         ; ------
                      (         OPS1.ASM):00131         
                      (         OPS1.ASM):00132         ; Move object "arg1" to pseudo-object #0
                      (         OPS1.ASM):00133         
2C4F                  (         OPS1.ASM):00134         ZREMOV:
2C4F 9603             (         OPS1.ASM):00135                 LDA     ARG1+1
2C51 BD34E7           (         OPS1.ASM):00136                 JSR     OBJLOC
2C54 9E3F             (         OPS1.ASM):00137                 LDX     TEMP
2C56 A604             (         OPS1.ASM):00138                 LDA     4,X
2C58 2734             (         OPS1.ASM):00139                 BEQ     REMVEX                            ; NO OBJECT
                      (         OPS1.ASM):00140         
2C5A 3410             (         OPS1.ASM):00141                 PSHS    X                                 ; SAVE [TEMP]
                      (         OPS1.ASM):00142         
2C5C BD34E7           (         OPS1.ASM):00143                 JSR     OBJLOC
2C5F 9E3F             (         OPS1.ASM):00144                 LDX     TEMP
2C61 A606             (         OPS1.ASM):00145                 LDA     6,X
2C63 9103             (         OPS1.ASM):00146                 CMPA    ARG1+1
2C65 260C             (         OPS1.ASM):00147                 BNE     REMVC1
                      (         OPS1.ASM):00148         
2C67 3510             (         OPS1.ASM):00149                 PULS    X                                 ; RETRIEVE FORMER [TEMP]
2C69 3410             (         OPS1.ASM):00150                 PSHS    X                                 ; SAVE COPY ON STACK
                      (         OPS1.ASM):00151         
2C6B A605             (         OPS1.ASM):00152                 LDA     5,X                               ; OLD [TEMP] IS IN [X]
2C6D 9E3F             (         OPS1.ASM):00153                 LDX     TEMP
2C6F A706             (         OPS1.ASM):00154                 STA     6,X
                      (         OPS1.ASM):00155         
2C71 2015             (         OPS1.ASM):00156                 BRA     REMVC2
                      (         OPS1.ASM):00157         
2C73                  (         OPS1.ASM):00158         REMVC1:
2C73 BD34E7           (         OPS1.ASM):00159                 JSR     OBJLOC
2C76 9E3F             (         OPS1.ASM):00160                 LDX     TEMP
2C78 A605             (         OPS1.ASM):00161                 LDA     5,X
2C7A 9103             (         OPS1.ASM):00162                 CMPA    ARG1+1
2C7C 26F5             (         OPS1.ASM):00163                 BNE     REMVC1
                      (         OPS1.ASM):00164         
2C7E 3510             (         OPS1.ASM):00165                 PULS    X
2C80 3410             (         OPS1.ASM):00166                 PSHS    X
                      (         OPS1.ASM):00167         
2C82 A605             (         OPS1.ASM):00168                 LDA     5,X
2C84 9E3F             (         OPS1.ASM):00169                 LDX     TEMP
2C86 A705             (         OPS1.ASM):00170                 STA     5,X
                      (         OPS1.ASM):00171         
2C88                  (         OPS1.ASM):00172         REMVC2:
2C88 3510             (         OPS1.ASM):00173                 PULS    X
2C8A 6F04             (         OPS1.ASM):00174                 CLR     4,X
2C8C 6F05             (         OPS1.ASM):00175                 CLR     5,X
                      (         OPS1.ASM):00176         
2C8E                  (         OPS1.ASM):00177         REMVEX:
2C8E 39               (         OPS1.ASM):00178                 RTS
                      (         OPS1.ASM):00179         
                      (         OPS1.ASM):00180         ; ------
                      (         OPS1.ASM):00181         ; PRINTD
                      (         OPS1.ASM):00182         ; ------
                      (         OPS1.ASM):00183         
                      (         OPS1.ASM):00184         ; Print short description of object "arg1"
                      (         OPS1.ASM):00185         
2C8F                  (         OPS1.ASM):00186         ZPRD:
2C8F 9603             (         OPS1.ASM):00187                 LDA     ARG1+1
                      (         OPS1.ASM):00188         
2C91                  (         OPS1.ASM):00189         PRNTDC:
2C91 BD34E7           (         OPS1.ASM):00190                 JSR     OBJLOC
2C94 9E3F             (         OPS1.ASM):00191                 LDX     TEMP
2C96 EC07             (         OPS1.ASM):00192                 LDD     7,X
2C98 C30001           (         OPS1.ASM):00193                 ADDD    #1                                ; INCREMENT
2C9B DD3F             (         OPS1.ASM):00194                 STD     TEMP                              ; AND SAVE
2C9D BD3285           (         OPS1.ASM):00195                 JSR     SETWRD
2CA0 7E329D           (         OPS1.ASM):00196                 JMP     PZSTR
                      (         OPS1.ASM):00197         
                      (         OPS1.ASM):00198         ; ------
                      (         OPS1.ASM):00199         ; RETURN
                      (         OPS1.ASM):00200         ; ------
                      (         OPS1.ASM):00201         
                      (         OPS1.ASM):00202         ; Return from a CALL with value "arg1"
                      (         OPS1.ASM):00203         
2CA3                  (         OPS1.ASM):00204         ZRET:
2CA3 DE27             (         OPS1.ASM):00205                 LDU     OZSTAK                            ; STAY IN SYNC!
2CA5 BD2A3C           (         OPS1.ASM):00206                 JSR     POPSTK                            ; POP # LOCALS
2CA8 D73D             (         OPS1.ASM):00207                 STB     VAL                               ; SAVE COUNT HERE
                      (         OPS1.ASM):00208         
2CAA 43               (         OPS1.ASM):00209                 COMA                                      ; COMPLEMENT [A]
2CAB 913D             (         OPS1.ASM):00210                 CMPA    VAL                               ; SHOULD BE OPPOSITE OF [B]
2CAD 2629             (         OPS1.ASM):00211                 BNE     RETERR                            ; IF NOT, STACK IS BAD (BM 11/24/84)
                      (         OPS1.ASM):00212         
2CAF 5D               (         OPS1.ASM):00213                 TSTB                                      ; CHECK # LOCALS
2CB0 270E             (         OPS1.ASM):00214                 BEQ     RET2                              ; SKIP IF NO LOCALS
                      (         OPS1.ASM):00215         
                      (         OPS1.ASM):00216         ; RESTORE LOCAL VARIABLES
                      (         OPS1.ASM):00217         
2CB2 8E2700           (         OPS1.ASM):00218                 LDX     #LOCALS                           ; SET UP A POINTER
2CB5 58               (         OPS1.ASM):00219                 ASLB                                      ; WORD-ALIGN THE INDEX
2CB6 3A               (         OPS1.ASM):00220                 ABX                                       ; [X] POINTS TO LAST LOCAL VAR
                      (         OPS1.ASM):00221         
2CB7                  (         OPS1.ASM):00222         RET1:
2CB7 BD2A3C           (         OPS1.ASM):00223                 JSR     POPSTK                            ; POP A VALUE ([X] UNAFFECTED)
2CBA ED83             (         OPS1.ASM):00224                 STD     ,--X                              ; SAVE IN [LOCALS], UPDATE INDEX
2CBC 0A3D             (         OPS1.ASM):00225                 DEC     VAL
2CBE 26F7             (         OPS1.ASM):00226                 BNE     RET1                              ; LOOP TILL ALL LOCALS POPPED
                      (         OPS1.ASM):00227         
                      (         OPS1.ASM):00228         ; RESTORE OTHER VARIABLES
                      (         OPS1.ASM):00229         
2CC0                  (         OPS1.ASM):00230         RET2:
2CC0 BD2A3C           (         OPS1.ASM):00231                 JSR     POPSTK
2CC3 DD13             (         OPS1.ASM):00232                 STD     ZPCH                              ; RESTORE TOP 9 BITS OF ZPC
2CC5 BD2A3C           (         OPS1.ASM):00233                 JSR     POPSTK
2CC8 D715             (         OPS1.ASM):00234                 STB     ZPCL                              ; RESTORE LOWER 8 BITS OF ZPC
2CCA BD2A3C           (         OPS1.ASM):00235                 JSR     POPSTK
2CCD DD27             (         OPS1.ASM):00236                 STD     OZSTAK                            ; AND OLD ZSP
2CCF 0F18             (         OPS1.ASM):00237                 CLR     ZPCFLG                            ; PC NO LONGER VALID
                      (         OPS1.ASM):00238         
2CD1 DC02             (         OPS1.ASM):00239                 LDD     ARG1
2CD3 DD3F             (         OPS1.ASM):00240                 STD     TEMP                              ; PASS THE RETURN VALUE
2CD5 7E2A09           (         OPS1.ASM):00241                 JMP     PUTVAL                            ; TO PUTVAL
                      (         OPS1.ASM):00242         
                      (         OPS1.ASM):00243         ; *** ERROR #15: Z-STACK DESTROYED ***
                      (         OPS1.ASM):00244         
2CD8                  (         OPS1.ASM):00245         RETERR:
2CD8 860F             (         OPS1.ASM):00246                 LDA     #15
2CDA 7E3629           (         OPS1.ASM):00247                 JMP     ZERROR
                      (         OPS1.ASM):00248         
                      (         OPS1.ASM):00249         ; ----
                      (         OPS1.ASM):00250         ; JUMP
                      (         OPS1.ASM):00251         ; ----
                      (         OPS1.ASM):00252         
                      (         OPS1.ASM):00253         ; Branch to location pointed to by 16-bit 2's-comp "arg1"
                      (         OPS1.ASM):00254         
2CDD                  (         OPS1.ASM):00255         ZJUMP:
2CDD DC02             (         OPS1.ASM):00256                 LDD     ARG1                              ; TREAT LIKE A BRANCH
2CDF 830001           (         OPS1.ASM):00257                 SUBD    #1                                ; THAT ALWAYS SUCCEEDS
2CE2 DD3F             (         OPS1.ASM):00258                 STD     TEMP
2CE4 7E2A91           (         OPS1.ASM):00259                 JMP     PREDB3
                      (         OPS1.ASM):00260         
                      (         OPS1.ASM):00261         ; -----
                      (         OPS1.ASM):00262         ; PRINT
                      (         OPS1.ASM):00263         ; -----
                      (         OPS1.ASM):00264         
                      (         OPS1.ASM):00265         ; Print the z-string pointed to by WORD-pointer "arg1"
                      (         OPS1.ASM):00266         
2CE7                  (         OPS1.ASM):00267         ZPRINT:
2CE7 DC02             (         OPS1.ASM):00268                 LDD     ARG1
2CE9 DD3F             (         OPS1.ASM):00269                 STD     TEMP                              ; TELL SETSTR
2CEB BD328E           (         OPS1.ASM):00270                 JSR     SETSTR                            ; WHERE THE STRING RESIDES
2CEE 7E329D           (         OPS1.ASM):00271                 JMP     PZSTR                             ; AND PRINT IT
                      (         OPS1.ASM):00272         
                      (         OPS1.ASM):00273         ; -----
                      (         OPS1.ASM):00274         ; VALUE
                      (         OPS1.ASM):00275         ; -----
                      (         OPS1.ASM):00276         
                      (         OPS1.ASM):00277         ; Return value of arg1 [VALUE]
                      (         OPS1.ASM):00278         
2CF1                  (         OPS1.ASM):00279         ZVALUE:
2CF1 9603             (         OPS1.ASM):00280                 LDA     ARG1+1                            ; GRAB VARIABLE ID
2CF3 BD29CF           (         OPS1.ASM):00281                 JSR     VARGET                            ; FETCH ITS VALUE
2CF6 7E2A09           (         OPS1.ASM):00282                 JMP     PUTVAL                            ; AND RETURN IT
                      (         OPS1.ASM):00283         
                      (         OPS1.ASM):00284         ; ----
                      (         OPS1.ASM):00285         ; BCOM
                      (         OPS1.ASM):00286         ; ----
                      (         OPS1.ASM):00287         
                      (         OPS1.ASM):00288         ; Complement arg1 [VALUE]
                      (         OPS1.ASM):00289         
2CF9                  (         OPS1.ASM):00290         ZBCOM:
2CF9 DC02             (         OPS1.ASM):00291                 LDD     ARG1                              ; GRAB ARGUMENT
2CFB 43               (         OPS1.ASM):00292                 COMA                                      ; COMPLEMENT MSB
2CFC 53               (         OPS1.ASM):00293                 COMB                                      ; AND LSB
2CFD DD3F             (         OPS1.ASM):00294                 STD     TEMP                              ; AND PASS TO PUTVAL
2CFF 7E2A09           (         OPS1.ASM):00295                 JMP     PUTVAL
                      (     cubixzip.asm):00059                 INCLUDE OPS2.ASM
                      (         OPS2.ASM):00001         ;       PAGE
                      (         OPS2.ASM):00002         ;       SBTTL "--- 2-OPS ---"
                      (         OPS2.ASM):00003         
                      (         OPS2.ASM):00004         ; -----
                      (         OPS2.ASM):00005         ; LESS?
                      (         OPS2.ASM):00006         ; -----
                      (         OPS2.ASM):00007         
                      (         OPS2.ASM):00008         ; Is arg1 less than arg2? [PRED]
                      (         OPS2.ASM):00009         
2D02                  (         OPS2.ASM):00010         ZLESS:
2D02 DC02             (         OPS2.ASM):00011                 LDD     ARG1
2D04 DD3F             (         OPS2.ASM):00012                 STD     TEMP
2D06 DC04             (         OPS2.ASM):00013                 LDD     ARG2
2D08 DD3D             (         OPS2.ASM):00014                 STD     VAL
2D0A 201E             (         OPS2.ASM):00015                 BRA     CEXIT
                      (         OPS2.ASM):00016         
                      (         OPS2.ASM):00017         ; -----
                      (         OPS2.ASM):00018         ; GRTR?
                      (         OPS2.ASM):00019         ; -----
                      (         OPS2.ASM):00020         
                      (         OPS2.ASM):00021         ; Is arg1 greater than arg2? [PRED]
                      (         OPS2.ASM):00022         
2D0C                  (         OPS2.ASM):00023         ZGRTR:
2D0C DC02             (         OPS2.ASM):00024                 LDD     ARG1
2D0E DD3D             (         OPS2.ASM):00025                 STD     VAL
2D10 DC04             (         OPS2.ASM):00026                 LDD     ARG2
2D12 DD3F             (         OPS2.ASM):00027                 STD     TEMP
2D14 2014             (         OPS2.ASM):00028                 BRA     CEXIT
                      (         OPS2.ASM):00029         
                      (         OPS2.ASM):00030         ; ------
                      (         OPS2.ASM):00031         ; DLESS?
                      (         OPS2.ASM):00032         ; ------
                      (         OPS2.ASM):00033         
                      (         OPS2.ASM):00034         ; Decrement variable "arg1"; succeed if new value
                      (         OPS2.ASM):00035         ; is less than arg2 [PRED]
                      (         OPS2.ASM):00036         
2D16                  (         OPS2.ASM):00037         ZDLESS:
2D16 BD2C39           (         OPS2.ASM):00038                 JSR     ZDEC                              ; DECREMENT THE VARIABLE
2D19 DC04             (         OPS2.ASM):00039                 LDD     ARG2
2D1B DD3D             (         OPS2.ASM):00040                 STD     VAL
2D1D 200B             (         OPS2.ASM):00041                 BRA     CEXIT                             ; AND COMPARE
                      (         OPS2.ASM):00042         
                      (         OPS2.ASM):00043         ; ------
                      (         OPS2.ASM):00044         ; IGRTR?
                      (         OPS2.ASM):00045         ; ------
                      (         OPS2.ASM):00046         
                      (         OPS2.ASM):00047         ; Increment variable "arg1"; succeed if new value is
                      (         OPS2.ASM):00048         ; greater than arg2 [PRED]
                      (         OPS2.ASM):00049         
2D1F                  (         OPS2.ASM):00050         ZIGRTR:
2D1F BD2C21           (         OPS2.ASM):00051                 JSR     ZINC                              ; INCREMENT THE VARIABLE
2D22 DC3F             (         OPS2.ASM):00052                 LDD     TEMP
2D24 DD3D             (         OPS2.ASM):00053                 STD     VAL
2D26 DC04             (         OPS2.ASM):00054                 LDD     ARG2
2D28 DD3F             (         OPS2.ASM):00055                 STD     TEMP
                      (         OPS2.ASM):00056         
2D2A                  (         OPS2.ASM):00057         CEXIT:
2D2A 8D05             (         OPS2.ASM):00058                 BSR     SCOMP
2D2C 2521             (         OPS2.ASM):00059                 BLO     POK
2D2E                  (         OPS2.ASM):00060         PBAD:
2D2E 7E2A51           (         OPS2.ASM):00061                 JMP     PREDF
                      (         OPS2.ASM):00062         
                      (         OPS2.ASM):00063         ; -----------------
                      (         OPS2.ASM):00064         ; SIGNED COMPARISON
                      (         OPS2.ASM):00065         ; -----------------
                      (         OPS2.ASM):00066         
2D31                  (         OPS2.ASM):00067         SCOMP:
2D31 963D             (         OPS2.ASM):00068                 LDA     VAL                               ; ARE ARGUMENTS
2D33 983F             (         OPS2.ASM):00069                 EORA    TEMP                              ; SIGNED THE SAME?
2D35 2A05             (         OPS2.ASM):00070                 BPL     SCMP                              ; YES, DO ORDINARY COMPARE
2D37 963D             (         OPS2.ASM):00071                 LDA     VAL                               ; ELSE COMPARE
2D39 913F             (         OPS2.ASM):00072                 CMPA    TEMP                              ; ONLY THE HIGH BYTES
2D3B 39               (         OPS2.ASM):00073                 RTS
                      (         OPS2.ASM):00074         
2D3C                  (         OPS2.ASM):00075         SCMP:
2D3C DC3F             (         OPS2.ASM):00076                 LDD     TEMP
2D3E 10933D           (         OPS2.ASM):00077                 CMPD    VAL
2D41 39               (         OPS2.ASM):00078                 RTS
                      (         OPS2.ASM):00079         
                      (         OPS2.ASM):00080         ; ---
                      (         OPS2.ASM):00081         ; IN?
                      (         OPS2.ASM):00082         ; ---
                      (         OPS2.ASM):00083         
                      (         OPS2.ASM):00084         ; Is object "arg1" contained in object "arg2?" [PRED]
                      (         OPS2.ASM):00085         
2D42                  (         OPS2.ASM):00086         ZIN:
2D42 9603             (         OPS2.ASM):00087                 LDA     ARG1+1
2D44 BD34E7           (         OPS2.ASM):00088                 JSR     OBJLOC
2D47 9E3F             (         OPS2.ASM):00089                 LDX     TEMP
2D49 9605             (         OPS2.ASM):00090                 LDA     ARG2+1
2D4B A104             (         OPS2.ASM):00091                 CMPA    4,X
2D4D 26DF             (         OPS2.ASM):00092                 BNE     PBAD
2D4F                  (         OPS2.ASM):00093         POK:
2D4F 7E2A5F           (         OPS2.ASM):00094                 JMP     PREDS
                      (         OPS2.ASM):00095         
                      (         OPS2.ASM):00096         ; ----
                      (         OPS2.ASM):00097         ; BTST
                      (         OPS2.ASM):00098         ; ----
                      (         OPS2.ASM):00099         
                      (         OPS2.ASM):00100         ; Is every "on" bit in arg1 also "on" in arg2? [PRED]
                      (         OPS2.ASM):00101         
2D52                  (         OPS2.ASM):00102         ZBTST:
2D52 DC04             (         OPS2.ASM):00103                 LDD     ARG2
2D54 9402             (         OPS2.ASM):00104                 ANDA    ARG1
2D56 D403             (         OPS2.ASM):00105                 ANDB    ARG1+1
2D58 109304           (         OPS2.ASM):00106                 CMPD    ARG2
2D5B 27F2             (         OPS2.ASM):00107                 BEQ     POK
2D5D 20CF             (         OPS2.ASM):00108                 BRA     PBAD
                      (         OPS2.ASM):00109         
                      (         OPS2.ASM):00110         ; ---
                      (         OPS2.ASM):00111         ; BOR
                      (         OPS2.ASM):00112         ; ---
                      (         OPS2.ASM):00113         
                      (         OPS2.ASM):00114         ; Return bitwise OR of arg1 and arg2 [VALUE]
                      (         OPS2.ASM):00115         
2D5F                  (         OPS2.ASM):00116         ZBOR:
2D5F DC02             (         OPS2.ASM):00117                 LDD     ARG1
2D61 9A04             (         OPS2.ASM):00118                 ORA     ARG2
2D63 DA05             (         OPS2.ASM):00119                 ORB     ARG2+1
2D65                  (         OPS2.ASM):00120         ZB0:
2D65 DD3F             (         OPS2.ASM):00121                 STD     TEMP
2D67 7E2A09           (         OPS2.ASM):00122                 JMP     PUTVAL
                      (         OPS2.ASM):00123         
                      (         OPS2.ASM):00124         ; ----
                      (         OPS2.ASM):00125         ; BAND
                      (         OPS2.ASM):00126         ; ----
                      (         OPS2.ASM):00127         
                      (         OPS2.ASM):00128         ; Return bitwise AND of arg1 and arg2 [VALUE]
                      (         OPS2.ASM):00129         
2D6A                  (         OPS2.ASM):00130         ZBAND:
2D6A DC02             (         OPS2.ASM):00131                 LDD     ARG1
2D6C 9404             (         OPS2.ASM):00132                 ANDA    ARG2
2D6E D405             (         OPS2.ASM):00133                 ANDB    ARG2+1
2D70 20F3             (         OPS2.ASM):00134                 BRA     ZB0
                      (         OPS2.ASM):00135         
                      (         OPS2.ASM):00136         ; -----
                      (         OPS2.ASM):00137         ; FSET?
                      (         OPS2.ASM):00138         ; -----
                      (         OPS2.ASM):00139         
                      (         OPS2.ASM):00140         ; Is flag "arg2" set in object "arg1?" [PRED]
                      (         OPS2.ASM):00141         
2D72                  (         OPS2.ASM):00142         ZFSETP:
2D72 BD34B9           (         OPS2.ASM):00143                 JSR     FLAGSU                            ; GET BIT
2D75 DC3D             (         OPS2.ASM):00144                 LDD     VAL
2D77 9443             (         OPS2.ASM):00145                 ANDA    MASK
2D79 973D             (         OPS2.ASM):00146                 STA     VAL
2D7B D444             (         OPS2.ASM):00147                 ANDB    MASK+1
2D7D DA3D             (         OPS2.ASM):00148                 ORB     VAL
2D7F 26CE             (         OPS2.ASM):00149                 BNE     POK                               ; BIT IS ON
2D81 20AB             (         OPS2.ASM):00150                 BRA     PBAD
                      (         OPS2.ASM):00151         
                      (         OPS2.ASM):00152         ; ----
                      (         OPS2.ASM):00153         ; FSET
                      (         OPS2.ASM):00154         ; ----
                      (         OPS2.ASM):00155         
                      (         OPS2.ASM):00156         ; Set flag "arg2" in object "arg1"
                      (         OPS2.ASM):00157         
2D83                  (         OPS2.ASM):00158         ZFSET:
2D83 BD34B9           (         OPS2.ASM):00159                 JSR     FLAGSU
2D86 9E3F             (         OPS2.ASM):00160                 LDX     TEMP                              ; ADDRESS OF FLAGS
2D88 DC3D             (         OPS2.ASM):00161                 LDD     VAL                               ; GRAB FLAGS
2D8A 9A43             (         OPS2.ASM):00162                 ORA     MASK                              ; SUPERIMPOSE THE
2D8C DA44             (         OPS2.ASM):00163                 ORB     MASK+1                            ; MASKING PATTERN
2D8E ED84             (         OPS2.ASM):00164                 STD     ,X                                ; AND REPLACE FLAG
2D90 39               (         OPS2.ASM):00165                 RTS
                      (         OPS2.ASM):00166         
                      (         OPS2.ASM):00167         ; ------
                      (         OPS2.ASM):00168         ; FCLEAR
                      (         OPS2.ASM):00169         ; ------
                      (         OPS2.ASM):00170         
                      (         OPS2.ASM):00171         ; Clear flag "arg2" in object "arg1"
                      (         OPS2.ASM):00172         
2D91                  (         OPS2.ASM):00173         ZFCLR:
2D91 BD34B9           (         OPS2.ASM):00174                 JSR     FLAGSU
2D94 9E3F             (         OPS2.ASM):00175                 LDX     TEMP                              ; ADDRESS OF OBJECT
2D96 DC43             (         OPS2.ASM):00176                 LDD     MASK                              ; GRAB THE MASK
2D98 43               (         OPS2.ASM):00177                 COMA                                      ; COMPLEMENT IT
2D99 53               (         OPS2.ASM):00178                 COMB
2D9A 943D             (         OPS2.ASM):00179                 ANDA    VAL                               ; SUPERIMPOSE FLAGS
2D9C D43E             (         OPS2.ASM):00180                 ANDB    VAL+1                             ; TO MASK OUT TARGET
2D9E ED84             (         OPS2.ASM):00181                 STD     ,X                                ; REPLACE THE FLAGS
2DA0 39               (         OPS2.ASM):00182                 RTS
                      (         OPS2.ASM):00183         
                      (         OPS2.ASM):00184         ; ---
                      (         OPS2.ASM):00185         ; SET
                      (         OPS2.ASM):00186         ; ---
                      (         OPS2.ASM):00187         
                      (         OPS2.ASM):00188         ; Set variable "arg1" equal to value "arg2"
                      (         OPS2.ASM):00189         
2DA1                  (         OPS2.ASM):00190         ZSET:
2DA1 DC04             (         OPS2.ASM):00191                 LDD     ARG2
2DA3 DD3F             (         OPS2.ASM):00192                 STD     TEMP
2DA5 9603             (         OPS2.ASM):00193                 LDA     ARG1+1
2DA7 7E29F7           (         OPS2.ASM):00194                 JMP     VARPUT
                      (         OPS2.ASM):00195         
                      (         OPS2.ASM):00196         ; ----
                      (         OPS2.ASM):00197         ; MOVE
                      (         OPS2.ASM):00198         ; ----
                      (         OPS2.ASM):00199         
                      (         OPS2.ASM):00200         ; Put object "arg1" into object "arg2"
                      (         OPS2.ASM):00201         
2DAA                  (         OPS2.ASM):00202         ZMOVE:
2DAA BD2C4F           (         OPS2.ASM):00203                 JSR     ZREMOV                            ; REMOVE OBJECT FIRST
2DAD 9603             (         OPS2.ASM):00204                 LDA     ARG1+1
2DAF BD34E7           (         OPS2.ASM):00205                 JSR     OBJLOC                            ; GET ADDRESS OF OBJECT
2DB2 9E3F             (         OPS2.ASM):00206                 LDX     TEMP                              ; PUT ADDRESS IN X
2DB4 3410             (         OPS2.ASM):00207                 PSHS    X                                 ; SAVE IT HERE TOO
2DB6 9605             (         OPS2.ASM):00208                 LDA     ARG2+1
2DB8 A704             (         OPS2.ASM):00209                 STA     4,X
                      (         OPS2.ASM):00210         
2DBA BD34E7           (         OPS2.ASM):00211                 JSR     OBJLOC
2DBD 9E3F             (         OPS2.ASM):00212                 LDX     TEMP
2DBF A606             (         OPS2.ASM):00213                 LDA     6,X
2DC1 973D             (         OPS2.ASM):00214                 STA     VAL                               ; HOLD HERE FOR A MOMENT
2DC3 9603             (         OPS2.ASM):00215                 LDA     ARG1+1
2DC5 A706             (         OPS2.ASM):00216                 STA     6,X
2DC7 3510             (         OPS2.ASM):00217                 PULS    X                                 ; RESTORE OLD [TEMP]
2DC9 963D             (         OPS2.ASM):00218                 LDA     VAL
2DCB 2702             (         OPS2.ASM):00219                 BEQ     ZMVEX
2DCD A705             (         OPS2.ASM):00220                 STA     5,X
2DCF                  (         OPS2.ASM):00221         ZMVEX:
2DCF 39               (         OPS2.ASM):00222                 RTS
                      (         OPS2.ASM):00223         
                      (         OPS2.ASM):00224         ; ---
                      (         OPS2.ASM):00225         ; GET
                      (         OPS2.ASM):00226         ; ---
                      (         OPS2.ASM):00227         
                      (         OPS2.ASM):00228         ; Return value of item "arg2" in WORD-table at "arg1" [VALUE]
                      (         OPS2.ASM):00229         
2DD0                  (         OPS2.ASM):00230         ZGET:
2DD0 0805             (         OPS2.ASM):00231                 ASL     ARG2+1
2DD2 0904             (         OPS2.ASM):00232                 ROL     ARG2                              ; WORD-ALIGN ARG2
2DD4 DC04             (         OPS2.ASM):00233                 LDD     ARG2
2DD6 D302             (         OPS2.ASM):00234                 ADDD    ARG1                              ; ADD OFFSET TO TABLE ADDRESS
2DD8 DD3F             (         OPS2.ASM):00235                 STD     TEMP
2DDA BD3285           (         OPS2.ASM):00236                 JSR     SETWRD
2DDD BD3198           (         OPS2.ASM):00237                 JSR     GETWRD
2DE0 7E2A09           (         OPS2.ASM):00238                 JMP     PUTVAL
                      (         OPS2.ASM):00239         
                      (         OPS2.ASM):00240         ; ----
                      (         OPS2.ASM):00241         ; GETB
                      (         OPS2.ASM):00242         ; ----
                      (         OPS2.ASM):00243         
                      (         OPS2.ASM):00244         ; Return value of item "arg2" in BYTE-table at "arg1" [VALUE]
                      (         OPS2.ASM):00245         
2DE3                  (         OPS2.ASM):00246         ZGETB:
2DE3 DC02             (         OPS2.ASM):00247                 LDD     ARG1
2DE5 D304             (         OPS2.ASM):00248                 ADDD    ARG2
2DE7 DD3F             (         OPS2.ASM):00249                 STD     TEMP
2DE9 BD3285           (         OPS2.ASM):00250                 JSR     SETWRD
2DEC BD31D2           (         OPS2.ASM):00251                 JSR     GETBYT
2DEF 9740             (         OPS2.ASM):00252                 STA     TEMP+1
2DF1 0F3F             (         OPS2.ASM):00253                 CLR     TEMP
2DF3 7E2A09           (         OPS2.ASM):00254                 JMP     PUTVAL
                      (         OPS2.ASM):00255         
                      (         OPS2.ASM):00256         ; ----
                      (         OPS2.ASM):00257         ; GETP
                      (         OPS2.ASM):00258         ; ----
                      (         OPS2.ASM):00259         
                      (         OPS2.ASM):00260         ; Return prop "arg2" of object "arg1"; if specified prop
                      (         OPS2.ASM):00261         ; doesn't exist, return prop'th element of default object [VALUE]
                      (         OPS2.ASM):00262         
2DF6                  (         OPS2.ASM):00263         ZGETP:
2DF6 BD3484           (         OPS2.ASM):00264                 JSR     PROPB                             ; GET POINTER TO PROPS
2DF9                  (         OPS2.ASM):00265         GETP1:
2DF9 BD3499           (         OPS2.ASM):00266                 JSR     PROPN
2DFC 9105             (         OPS2.ASM):00267                 CMPA    ARG2+1
2DFE 2718             (         OPS2.ASM):00268                 BEQ     GETP2
2E00 2505             (         OPS2.ASM):00269                 BLO     GETP3
                      (         OPS2.ASM):00270         
2E02 BD34AE           (         OPS2.ASM):00271                 JSR     PROPNX
2E05 20F2             (         OPS2.ASM):00272                 BRA     GETP1                             ; TRY AGAIN WITH NEXT PROP
                      (         OPS2.ASM):00273         
2E07                  (         OPS2.ASM):00274         GETP3:
2E07 FC3F0A           (         OPS2.ASM):00275                 LDD     ZCODE+ZOBJEC                      ; Z-ADDR OF OBJECT TABLE
2E0A C33F00           (         OPS2.ASM):00276                 ADDD    #ZCODE                            ; FORM THE ABSOLUTE ADDRESS
2E0D 1F01             (         OPS2.ASM):00277                 TFR     D,X                               ; USE AS AN INDEX
2E0F D605             (         OPS2.ASM):00278                 LDB     ARG2+1                            ; GET PROPERTY #
2E11 5A               (         OPS2.ASM):00279                 DECB
2E12 58               (         OPS2.ASM):00280                 ASLB
2E13 3A               (         OPS2.ASM):00281                 ABX                                       ; ADD TO TABLE ADDRESS
2E14 EC84             (         OPS2.ASM):00282                 LDD     ,X                                ; FETCH THE PROPERTY
2E16 201D             (         OPS2.ASM):00283                 BRA     ETPEX                             ; AND PASS IT ON
                      (         OPS2.ASM):00284         
2E18                  (         OPS2.ASM):00285         GETP2:
2E18 BD34A1           (         OPS2.ASM):00286                 JSR     PROPL
2E1B 5C               (         OPS2.ASM):00287                 INCB                                      ; SOMETHING SHOULD BE IN B!
2E1C 4D               (         OPS2.ASM):00288                 TSTA                                      ; AND IN A!
2E1D 2710             (         OPS2.ASM):00289                 BEQ     GETP2A
2E1F 8101             (         OPS2.ASM):00290                 CMPA    #1
2E21 2705             (         OPS2.ASM):00291                 BEQ     GETP2B
                      (         OPS2.ASM):00292         
                      (         OPS2.ASM):00293         ; *** ERROR #7: PROPERTY LENGTH ***
                      (         OPS2.ASM):00294         
2E23 8607             (         OPS2.ASM):00295                 LDA     #7
2E25 BD3629           (         OPS2.ASM):00296                 JSR     ZERROR
                      (         OPS2.ASM):00297         
2E28                  (         OPS2.ASM):00298         GETP2B:
2E28 9E3F             (         OPS2.ASM):00299                 LDX     TEMP
2E2A 3A               (         OPS2.ASM):00300                 ABX
2E2B EC84             (         OPS2.ASM):00301                 LDD     ,X
2E2D 2006             (         OPS2.ASM):00302                 BRA     ETPEX
                      (         OPS2.ASM):00303         
2E2F                  (         OPS2.ASM):00304         GETP2A:
2E2F 9E3F             (         OPS2.ASM):00305                 LDX     TEMP
2E31 3A               (         OPS2.ASM):00306                 ABX
2E32 E684             (         OPS2.ASM):00307                 LDB     ,X
2E34 4F               (         OPS2.ASM):00308                 CLRA
2E35                  (         OPS2.ASM):00309         ETPEX:
2E35 DD3F             (         OPS2.ASM):00310                 STD     TEMP
2E37 7E2A09           (         OPS2.ASM):00311                 JMP     PUTVAL
                      (         OPS2.ASM):00312         
                      (         OPS2.ASM):00313         ; -----
                      (         OPS2.ASM):00314         ; GETPT
                      (         OPS2.ASM):00315         ; -----
                      (         OPS2.ASM):00316         
                      (         OPS2.ASM):00317         ; Return a POINTER to prop table "arg2" in object "arg1" [VALUE]
                      (         OPS2.ASM):00318         
2E3A                  (         OPS2.ASM):00319         ZGETPT:
2E3A BD3484           (         OPS2.ASM):00320                 JSR     PROPB
2E3D                  (         OPS2.ASM):00321         GETPT1:
2E3D BD3499           (         OPS2.ASM):00322                 JSR     PROPN
2E40 9105             (         OPS2.ASM):00323                 CMPA    ARG2+1
2E42 2709             (         OPS2.ASM):00324                 BEQ     GETPT2
2E44 1025FBBC         (         OPS2.ASM):00325                 LBLO    RET0
2E48 BD34AE           (         OPS2.ASM):00326                 JSR     PROPNX                            ; TRY NEXT ENTRY
2E4B 20F0             (         OPS2.ASM):00327                 BRA     GETPT1
                      (         OPS2.ASM):00328         
2E4D                  (         OPS2.ASM):00329         GETPT2:
2E4D 0C40             (         OPS2.ASM):00330                 INC     TEMP+1
2E4F 2602             (         OPS2.ASM):00331                 BNE     GPT
2E51 0C3F             (         OPS2.ASM):00332                 INC     TEMP
2E53                  (         OPS2.ASM):00333         GPT:
2E53 4F               (         OPS2.ASM):00334                 CLRA                                      ; ADD OFFSET IN [B]
2E54 D33F             (         OPS2.ASM):00335                 ADDD    TEMP
2E56 833F00           (         OPS2.ASM):00336                 SUBD    #ZCODE                            ; CHANGE TO RELATIVE POINTER
2E59 DD3F             (         OPS2.ASM):00337                 STD     TEMP
2E5B 7E2A09           (         OPS2.ASM):00338                 JMP     PUTVAL
                      (         OPS2.ASM):00339         
                      (         OPS2.ASM):00340         ; -----
                      (         OPS2.ASM):00341         ; NEXTP
                      (         OPS2.ASM):00342         ; -----
                      (         OPS2.ASM):00343         
                      (         OPS2.ASM):00344         ; Return prop index number of the prop following prop "arg2"
                      (         OPS2.ASM):00345         ; in object "arg1"; return zero if last property; return
                      (         OPS2.ASM):00346         ; 1st prop # if arg2=0; error if no prop "arg2" in "arg1" [VALUE]
                      (         OPS2.ASM):00347         
2E5E                  (         OPS2.ASM):00348         ZNEXTP:
2E5E BD3484           (         OPS2.ASM):00349                 JSR     PROPB
2E61 9605             (         OPS2.ASM):00350                 LDA     ARG2+1
2E63 2713             (         OPS2.ASM):00351                 BEQ     NXTP2
                      (         OPS2.ASM):00352         
2E65                  (         OPS2.ASM):00353         NXTP1:
2E65 BD3499           (         OPS2.ASM):00354                 JSR     PROPN
2E68 9105             (         OPS2.ASM):00355                 CMPA    ARG2+1
2E6A 2709             (         OPS2.ASM):00356                 BEQ     NXTP3
2E6C 1025FB94         (         OPS2.ASM):00357                 LBCS    RET0
2E70 BD34AE           (         OPS2.ASM):00358                 JSR     PROPNX                            ; TRY NEXT ENTRY
2E73 20F0             (         OPS2.ASM):00359                 BRA     NXTP1
                      (         OPS2.ASM):00360         
2E75                  (         OPS2.ASM):00361         NXTP3:
2E75 BD34AE           (         OPS2.ASM):00362                 JSR     PROPNX
                      (         OPS2.ASM):00363         
2E78                  (         OPS2.ASM):00364         NXTP2:
2E78 BD3499           (         OPS2.ASM):00365                 JSR     PROPN
2E7B 7E2A05           (         OPS2.ASM):00366                 JMP     PUTBYT
                      (         OPS2.ASM):00367         
                      (         OPS2.ASM):00368         ; ---
                      (         OPS2.ASM):00369         ; ADD
                      (         OPS2.ASM):00370         ; ---
                      (         OPS2.ASM):00371         
                      (         OPS2.ASM):00372         ; Return (arg1+arg2) [VALUE]
                      (         OPS2.ASM):00373         
2E7E                  (         OPS2.ASM):00374         ZADD:
2E7E DC02             (         OPS2.ASM):00375                 LDD     ARG1
2E80 D304             (         OPS2.ASM):00376                 ADDD    ARG2
2E82                  (         OPS2.ASM):00377         MATH:
2E82 DD3F             (         OPS2.ASM):00378                 STD     TEMP
2E84 7E2A09           (         OPS2.ASM):00379                 JMP     PUTVAL
                      (         OPS2.ASM):00380         
                      (         OPS2.ASM):00381         ; ---
                      (         OPS2.ASM):00382         ; SUB
                      (         OPS2.ASM):00383         ; ---
                      (         OPS2.ASM):00384         
                      (         OPS2.ASM):00385         ; Return (arg1-arg2) [VALUE]
                      (         OPS2.ASM):00386         
2E87                  (         OPS2.ASM):00387         ZSUB:
2E87 DC02             (         OPS2.ASM):00388                 LDD     ARG1
2E89 9304             (         OPS2.ASM):00389                 SUBD    ARG2
2E8B 20F5             (         OPS2.ASM):00390                 BRA     MATH
                      (         OPS2.ASM):00391         
                      (         OPS2.ASM):00392         ; ---
                      (         OPS2.ASM):00393         ; MUL
                      (         OPS2.ASM):00394         ; ---
                      (         OPS2.ASM):00395         
                      (         OPS2.ASM):00396         ; Return (arg1*arg2) [VALUE]
                      (         OPS2.ASM):00397         
2E8D                  (         OPS2.ASM):00398         ZMUL:
2E8D 8E0011           (         OPS2.ASM):00399                 LDX     #17                               ; INIT LOOP INDEX
2E90 4F               (         OPS2.ASM):00400                 CLRA                                      ; CLEAR THE
2E91 5F               (         OPS2.ASM):00401                 CLRB                                      ; CARRY
2E92 DD47             (         OPS2.ASM):00402                 STD     MTEMP                             ; AND TEMP REGISTER
                      (         OPS2.ASM):00403         
2E94                  (         OPS2.ASM):00404         ZMLOOP:
2E94 0647             (         OPS2.ASM):00405                 ROR     MTEMP
2E96 0648             (         OPS2.ASM):00406                 ROR     MTEMP+1
2E98 0604             (         OPS2.ASM):00407                 ROR     ARG2                              ; SHIFT A BIT
2E9A 0605             (         OPS2.ASM):00408                 ROR     ARG2+1                            ; INTO POSITION
2E9C 2406             (         OPS2.ASM):00409                 BCC     ZMNEXT                            ; NO ADDITION IF BIT CLEAR
                      (         OPS2.ASM):00410         
2E9E DC02             (         OPS2.ASM):00411                 LDD     ARG1
2EA0 D347             (         OPS2.ASM):00412                 ADDD    MTEMP
2EA2 DD47             (         OPS2.ASM):00413                 STD     MTEMP
                      (         OPS2.ASM):00414         
2EA4                  (         OPS2.ASM):00415         ZMNEXT:
2EA4 301F             (         OPS2.ASM):00416                 LEAX    -1,X                              ; ALL BITS EXAMINED?
2EA6 26EC             (         OPS2.ASM):00417                 BNE     ZMLOOP                            ; NO, KEEP SHIFTING
                      (         OPS2.ASM):00418         
2EA8 DC04             (         OPS2.ASM):00419                 LDD     ARG2                              ; ELSE GRAB PRODUCT
2EAA 20D6             (         OPS2.ASM):00420                 BRA     MATH                              ; AND RETURN
                      (         OPS2.ASM):00421         
                      (         OPS2.ASM):00422         ; ---------
                      (         OPS2.ASM):00423         ; DIV & MOD
                      (         OPS2.ASM):00424         ; ---------
                      (         OPS2.ASM):00425         
                      (         OPS2.ASM):00426         ; DIV: Return quotient of int(arg1/arg2) [VALUE]
                      (         OPS2.ASM):00427         ; MOD: Return remainder of int(arg1/arg2) [VALUE]
                      (         OPS2.ASM):00428         
2EAC                  (         OPS2.ASM):00429         ZDIV:
2EAC 8D09             (         OPS2.ASM):00430                 BSR     DVINIT
2EAE 7E2A09           (         OPS2.ASM):00431                 JMP     PUTVAL                            ; AND SHIP OUT [TEMP]
                      (         OPS2.ASM):00432         
2EB1                  (         OPS2.ASM):00433         ZMOD:
2EB1 8D04             (         OPS2.ASM):00434                 BSR     DVINIT
2EB3 DC3D             (         OPS2.ASM):00435                 LDD     VAL                               ; RETURN THE
2EB5 20CB             (         OPS2.ASM):00436                 BRA     MATH                              ; REMAINDER IN [VAL]
                      (         OPS2.ASM):00437         
                      (         OPS2.ASM):00438         ; -----------
                      (         OPS2.ASM):00439         ; DIVIDE INIT
                      (         OPS2.ASM):00440         ; -----------
                      (         OPS2.ASM):00441         
2EB7                  (         OPS2.ASM):00442         DVINIT:
2EB7 DC02             (         OPS2.ASM):00443                 LDD     ARG1
2EB9 DD3F             (         OPS2.ASM):00444                 STD     TEMP
2EBB DC04             (         OPS2.ASM):00445                 LDD     ARG2
2EBD DD3D             (         OPS2.ASM):00446                 STD     VAL
                      (         OPS2.ASM):00447         
                      (         OPS2.ASM):00448         ; FALL THROUGH ...
                      (         OPS2.ASM):00449         
                      (         OPS2.ASM):00450         ; ---------------
                      (         OPS2.ASM):00451         ; SIGNED DIVISION
                      (         OPS2.ASM):00452         ; ---------------
                      (         OPS2.ASM):00453         
                      (         OPS2.ASM):00454         ; ENTRY: DIVIDEND IN [TEMP], DIVISOR IN [VAL]
                      (         OPS2.ASM):00455         ; EXIT: QUOTIENT IN [TEMP], REMAINDER IN [VAL]
                      (         OPS2.ASM):00456         
2EBF                  (         OPS2.ASM):00457         DIVIDE:
2EBF 963F             (         OPS2.ASM):00458                 LDA     TEMP                              ; SIGN OF REMAINDER
2EC1 9746             (         OPS2.ASM):00459                 STA     SREM                              ; IS ALWAYS SIGN OF DIVIDEND
2EC3 983D             (         OPS2.ASM):00460                 EORA    VAL                               ; SIGN OF QUOTIENT IS POSITIVE
2EC5 9745             (         OPS2.ASM):00461                 STA     SQUOT                             ; IF SIGNS OF TERMS ARE THE SAME
                      (         OPS2.ASM):00462         
2EC7 0D3F             (         OPS2.ASM):00463                 TST     TEMP                              ; IF DIVIDEND IS NEGATIVE,
2EC9 2A02             (         OPS2.ASM):00464                 BPL     TABS                              ; CALC ABSOLUTE VALUE
2ECB 8D19             (         OPS2.ASM):00465                 BSR     ABTEMP
                      (         OPS2.ASM):00466         
2ECD                  (         OPS2.ASM):00467         TABS:
2ECD 0D3D             (         OPS2.ASM):00468                 TST     VAL                               ; IF DIVISOR IS NEGATIVE,
2ECF 2A02             (         OPS2.ASM):00469                 BPL     DOUDIV                            ; DO THE SAME
2ED1 8D0C             (         OPS2.ASM):00470                 BSR     ABSVAL
                      (         OPS2.ASM):00471         
2ED3                  (         OPS2.ASM):00472         DOUDIV:
2ED3 8D18             (         OPS2.ASM):00473                 BSR     UDIV                              ; UNSIGNED DIVIDE
                      (         OPS2.ASM):00474         
2ED5 0D45             (         OPS2.ASM):00475                 TST     SQUOT
2ED7 2A02             (         OPS2.ASM):00476                 BPL     RFLIP
2ED9 8D0B             (         OPS2.ASM):00477                 BSR     ABTEMP
                      (         OPS2.ASM):00478         
2EDB                  (         OPS2.ASM):00479         RFLIP:
2EDB 0D46             (         OPS2.ASM):00480                 TST     SREM
2EDD 2A06             (         OPS2.ASM):00481                 BPL     DIVEX
                      (         OPS2.ASM):00482         
                      (         OPS2.ASM):00483         ; FALL THROUGH ...
                      (         OPS2.ASM):00484         
                      (         OPS2.ASM):00485         ; -------------
                      (         OPS2.ASM):00486         ; CALC ABS(VAL)
                      (         OPS2.ASM):00487         ; -------------
                      (         OPS2.ASM):00488         
2EDF                  (         OPS2.ASM):00489         ABSVAL:
2EDF 4F               (         OPS2.ASM):00490                 CLRA
2EE0 5F               (         OPS2.ASM):00491                 CLRB
2EE1 933D             (         OPS2.ASM):00492                 SUBD    VAL
2EE3 DD3D             (         OPS2.ASM):00493                 STD     VAL
                      (         OPS2.ASM):00494         
2EE5                  (         OPS2.ASM):00495         DIVEX:
2EE5 39               (         OPS2.ASM):00496                 RTS
                      (         OPS2.ASM):00497         
                      (         OPS2.ASM):00498         ; --------------
                      (         OPS2.ASM):00499         ; CALC ABS(TEMP)
                      (         OPS2.ASM):00500         ; --------------
                      (         OPS2.ASM):00501         
2EE6                  (         OPS2.ASM):00502         ABTEMP:
2EE6 4F               (         OPS2.ASM):00503                 CLRA
2EE7 5F               (         OPS2.ASM):00504                 CLRB
2EE8 933F             (         OPS2.ASM):00505                 SUBD    TEMP
2EEA DD3F             (         OPS2.ASM):00506                 STD     TEMP
2EEC 39               (         OPS2.ASM):00507                 RTS
                      (         OPS2.ASM):00508         
                      (         OPS2.ASM):00509         ; -----------------
                      (         OPS2.ASM):00510         ; UNSIGNED DIVISION
                      (         OPS2.ASM):00511         ; -----------------
                      (         OPS2.ASM):00512         
                      (         OPS2.ASM):00513         ; ENTRY: DIVIDEND IN [TEMP], DIVISOR IN [VAL]
                      (         OPS2.ASM):00514         ; EXIT: QUOTIENT IN [TEMP], REMAINDER IN [VAL]
                      (         OPS2.ASM):00515         
2EED                  (         OPS2.ASM):00516         UDIV:
2EED DC3D             (         OPS2.ASM):00517                 LDD     VAL
2EEF 2728             (         OPS2.ASM):00518                 BEQ     DIVERR                            ; CAN'T DIVIDE BY ZERO!
                      (         OPS2.ASM):00519         
2EF1 8E0010           (         OPS2.ASM):00520                 LDX     #16                               ; INIT LOOP INDEX
2EF4 4F               (         OPS2.ASM):00521                 CLRA                                      ; CLEAR THE
2EF5 5F               (         OPS2.ASM):00522                 CLRB                                      ; CARRY
2EF6 DD47             (         OPS2.ASM):00523                 STD     MTEMP                             ; AND HI-DIVIDEND REGISTER
                      (         OPS2.ASM):00524         
2EF8                  (         OPS2.ASM):00525         UDLOOP:
2EF8 0940             (         OPS2.ASM):00526                 ROL     TEMP+1
2EFA 093F             (         OPS2.ASM):00527                 ROL     TEMP
2EFC 0948             (         OPS2.ASM):00528                 ROL     MTEMP+1
2EFE 0947             (         OPS2.ASM):00529                 ROL     MTEMP
                      (         OPS2.ASM):00530         
2F00 DC47             (         OPS2.ASM):00531                 LDD     MTEMP                             ; IS DIVIDEND < DIVISOR?
2F02 933D             (         OPS2.ASM):00532                 SUBD    VAL
2F04 2505             (         OPS2.ASM):00533                 BCS     UDNEXT                            ; YES, CLEAR THE CARRY AND LOOP
2F06 DD47             (         OPS2.ASM):00534                 STD     MTEMP                             ; ELSE UPDATE DIVIDEND
2F08 43               (         OPS2.ASM):00535                 COMA                                      ; SET THE CARRY
2F09 2001             (         OPS2.ASM):00536                 BRA     DECX                              ; AND LOOP
                      (         OPS2.ASM):00537         
2F0B                  (         OPS2.ASM):00538         UDNEXT:
2F0B 4F               (         OPS2.ASM):00539                 CLRA                                      ; CLEAR CARRY
                      (         OPS2.ASM):00540         
2F0C                  (         OPS2.ASM):00541         DECX:
2F0C 301F             (         OPS2.ASM):00542                 LEAX    -1,X
2F0E 26E8             (         OPS2.ASM):00543                 BNE     UDLOOP
                      (         OPS2.ASM):00544         
2F10 0940             (         OPS2.ASM):00545                 ROL     TEMP+1                            ; SHIFT LAST CARRY INTO PLACE
2F12 093F             (         OPS2.ASM):00546                 ROL     TEMP
2F14 DC47             (         OPS2.ASM):00547                 LDD     MTEMP                             ; MOVE REMAINDER INTO
2F16 DD3D             (         OPS2.ASM):00548                 STD     VAL                               ; ITS RIGHTFUL PLACE
2F18 39               (         OPS2.ASM):00549                 RTS
                      (         OPS2.ASM):00550         
                      (         OPS2.ASM):00551         ; *** ERROR #8: DIVISION ***
                      (         OPS2.ASM):00552         
2F19                  (         OPS2.ASM):00553         DIVERR:
2F19 8608             (         OPS2.ASM):00554                 LDA     #8
2F1B BD3629           (         OPS2.ASM):00555                 JSR     ZERROR
                      (     cubixzip.asm):00060                 INCLUDE OPSX.ASM
                      (         OPSX.ASM):00001         ;       PAGE
                      (         OPSX.ASM):00002         ;       SBTTL "--- X-OPS ---"
                      (         OPSX.ASM):00003         
                      (         OPSX.ASM):00004         ; ------
                      (         OPSX.ASM):00005         ; EQUAL?
                      (         OPSX.ASM):00006         ; ------
                      (         OPSX.ASM):00007         
2F1E                  (         OPSX.ASM):00008         ZEQUAL:
2F1E 0A01             (         OPSX.ASM):00009                 DEC     ARGCNT
2F20 2605             (         OPSX.ASM):00010                 BNE     DOEQ
                      (         OPSX.ASM):00011         
                      (         OPSX.ASM):00012         ; *** ERROR #9: NOT ENOUGH "EQUAL?" ARGS ***
                      (         OPSX.ASM):00013         
2F22 8609             (         OPSX.ASM):00014                 LDA     #9
2F24 BD3629           (         OPSX.ASM):00015                 JSR     ZERROR
                      (         OPSX.ASM):00016         
2F27                  (         OPSX.ASM):00017         DOEQ:
2F27 DC02             (         OPSX.ASM):00018                 LDD     ARG1
2F29 109304           (         OPSX.ASM):00019                 CMPD    ARG2
2F2C 2715             (         OPSX.ASM):00020                 BEQ     EQOK
2F2E 0A01             (         OPSX.ASM):00021                 DEC     ARGCNT
2F30 270E             (         OPSX.ASM):00022                 BEQ     EQBAD
                      (         OPSX.ASM):00023         
2F32 109306           (         OPSX.ASM):00024                 CMPD    ARG3
2F35 270C             (         OPSX.ASM):00025                 BEQ     EQOK
2F37 0A01             (         OPSX.ASM):00026                 DEC     ARGCNT
2F39 2705             (         OPSX.ASM):00027                 BEQ     EQBAD
                      (         OPSX.ASM):00028         
2F3B 109308           (         OPSX.ASM):00029                 CMPD    ARG4
2F3E 2703             (         OPSX.ASM):00030                 BEQ     EQOK
2F40                  (         OPSX.ASM):00031         EQBAD:
2F40 7E2A51           (         OPSX.ASM):00032                 JMP     PREDF
                      (         OPSX.ASM):00033         
2F43                  (         OPSX.ASM):00034         EQOK:
2F43 7E2A5F           (         OPSX.ASM):00035                 JMP     PREDS
                      (         OPSX.ASM):00036         
                      (         OPSX.ASM):00037         ; ----
                      (         OPSX.ASM):00038         ; CALL
                      (         OPSX.ASM):00039         ; ----
                      (         OPSX.ASM):00040         
                      (         OPSX.ASM):00041         ; Branch to function pointed to by [arg1 * 2], passing
                      (         OPSX.ASM):00042         ; the optional parameters "arg2" thru "arg4" [VALUE]
                      (         OPSX.ASM):00043         
2F46                  (         OPSX.ASM):00044         ZCALL:
2F46 DC02             (         OPSX.ASM):00045                 LDD     ARG1                              ; DID FUNCTION = 0?
2F48 2603             (         OPSX.ASM):00046                 BNE     DOCALL                            ; NO, CONTINUE
2F4A 7E2E82           (         OPSX.ASM):00047                 JMP     MATH                              ; ELSE RETURN A ZERO
                      (         OPSX.ASM):00048         
2F4D                  (         OPSX.ASM):00049         DOCALL:
2F4D DC27             (         OPSX.ASM):00050                 LDD     OZSTAK                            ; ZSP FROM PREVIOUS ZCALL
2F4F BD2A33           (         OPSX.ASM):00051                 JSR     PSHDZ
2F52 D615             (         OPSX.ASM):00052                 LDB     ZPCL                              ; LOW 8 BITS OF ZPC
2F54 BD2A33           (         OPSX.ASM):00053                 JSR     PSHDZ                             ; SAVE TO Z-STACK
2F57 DC13             (         OPSX.ASM):00054                 LDD     ZPCH                              ; PUSH H & M PC
2F59 BD2A33           (         OPSX.ASM):00055                 JSR     PSHDZ
                      (         OPSX.ASM):00056         
                      (         OPSX.ASM):00057         ; MULTIPLY ARG1 BY 2; FORM 17-BIT ADDR
                      (         OPSX.ASM):00058         
2F5C 4F               (         OPSX.ASM):00059                 CLRA
2F5D 0803             (         OPSX.ASM):00060                 ASL     ARG1+1                            ; BOTTOM 8 BITS
2F5F 0902             (         OPSX.ASM):00061                 ROL     ARG1                              ; MIDDLE 8
2F61 49               (         OPSX.ASM):00062                 ROLA                                      ; TOP BIT
2F62 9713             (         OPSX.ASM):00063                 STA     ZPCH
2F64 DC02             (         OPSX.ASM):00064                 LDD     ARG1
2F66 DD14             (         OPSX.ASM):00065                 STD     ZPCM
2F68 0F18             (         OPSX.ASM):00066                 CLR     ZPCFLG                            ; [ZPC] HAS CHANGED ...
                      (         OPSX.ASM):00067         
2F6A BD31A1           (         OPSX.ASM):00068                 JSR     NEXTPC                            ; FETCH # NEW LOCALS
2F6D 9741             (         OPSX.ASM):00069                 STA     TEMP2                             ; SAVE IT HERE FOR INDEXING
2F6F 9742             (         OPSX.ASM):00070                 STA     TEMP2+1                           ; AND HERE FOR REFERENCE
2F71 271E             (         OPSX.ASM):00071                 BEQ     ZCALL2                            ; NO LOCALS IN THIS FUNCTION
                      (         OPSX.ASM):00072         
                      (         OPSX.ASM):00073         ; SAVE OLD LOCALS, REPLACE WITH NEW
                      (         OPSX.ASM):00074         
2F73 8E2700           (         OPSX.ASM):00075                 LDX     #LOCALS                           ; INIT POINTER
2F76                  (         OPSX.ASM):00076         ZCALL1:
2F76 EC84             (         OPSX.ASM):00077                 LDD     ,X                                ; GRAB AN OLD LOCAL
2F78 3410             (         OPSX.ASM):00078                 PSHS    X                                 ; SAVE THE POINTER
2F7A BD2A33           (         OPSX.ASM):00079                 JSR     PSHDZ                             ; PUSH OLD LOCAL TO Z-STACK
2F7D BD31A1           (         OPSX.ASM):00080                 JSR     NEXTPC                            ; GET MSB OF NEW LOCAL
2F80 3402             (         OPSX.ASM):00081                 PSHS    A                                 ; SAVE HERE
2F82 BD31A1           (         OPSX.ASM):00082                 JSR     NEXTPC                            ; NOW GET LSB
2F85 1F89             (         OPSX.ASM):00083                 TFR     A,B                               ; POSITION IT PROPERLY
2F87 3502             (         OPSX.ASM):00084                 PULS    A                                 ; RETRIEVE MSB
2F89 3510             (         OPSX.ASM):00085                 PULS    X                                 ; THIS IS WHERE IT GOES
2F8B ED81             (         OPSX.ASM):00086                 STD     ,X++                              ; STORE NEW LOCAL, UPDATE POINTER
2F8D 0A41             (         OPSX.ASM):00087                 DEC     TEMP2                             ; ANY MORE OLD LOCALS?
2F8F 26E5             (         OPSX.ASM):00088                 BNE     ZCALL1                            ; KEEP LOOPING TILL DONE
                      (         OPSX.ASM):00089         
2F91                  (         OPSX.ASM):00090         ZCALL2:
2F91 0A01             (         OPSX.ASM):00091                 DEC     ARGCNT                            ; EXTRA ARGUMENTS IN THIS CALL?
2F93 2717             (         OPSX.ASM):00092                 BEQ     ZCALL4                            ; NO ARGS TO PASS
                      (         OPSX.ASM):00093         
                      (         OPSX.ASM):00094         ; MOVE UP TO 3 ARGS TO LOCAL STORAGE
                      (         OPSX.ASM):00095         
2F95                  (         OPSX.ASM):00096         ZCALL3:
2F95 DC04             (         OPSX.ASM):00097                 LDD     ARG2
2F97 FD2700           (         OPSX.ASM):00098                 STD     LOCALS
2F9A 0A01             (         OPSX.ASM):00099                 DEC     ARGCNT
2F9C 270E             (         OPSX.ASM):00100                 BEQ     ZCALL4
2F9E DC06             (         OPSX.ASM):00101                 LDD     ARG3
2FA0 FD2702           (         OPSX.ASM):00102                 STD     LOCALS+2
2FA3 0A01             (         OPSX.ASM):00103                 DEC     ARGCNT
2FA5 2705             (         OPSX.ASM):00104                 BEQ     ZCALL4
2FA7 DC08             (         OPSX.ASM):00105                 LDD     ARG4
2FA9 FD2704           (         OPSX.ASM):00106                 STD     LOCALS+4
                      (         OPSX.ASM):00107         
2FAC                  (         OPSX.ASM):00108         ZCALL4:
2FAC D642             (         OPSX.ASM):00109                 LDB     TEMP2+1                           ; REMEMBER # LOCALS SAVED
2FAE 1F98             (         OPSX.ASM):00110                 TFR     B,A                               ; COPY INTO [A]
2FB0 43               (         OPSX.ASM):00111                 COMA                                      ; COMPLEMENT FOR ERROR CHECK (BM 11/24/84)
2FB1 BD2A33           (         OPSX.ASM):00112                 JSR     PSHDZ                             ; AND RETURN
2FB4 DF27             (         OPSX.ASM):00113                 STU     OZSTAK                            ; "THE WAY WE WERE ..."
2FB6 39               (         OPSX.ASM):00114                 RTS
                      (         OPSX.ASM):00115         
                      (         OPSX.ASM):00116         ; ---
                      (         OPSX.ASM):00117         ; PUT
                      (         OPSX.ASM):00118         ; ---
                      (         OPSX.ASM):00119         
                      (         OPSX.ASM):00120         ; Set item "arg2" in WORD-table "arg1" equal to "arg3"
                      (         OPSX.ASM):00121         
2FB7                  (         OPSX.ASM):00122         ZPUT:
2FB7 0805             (         OPSX.ASM):00123                 ASL     ARG2+1                            ; WORD-ALIGN
2FB9 0904             (         OPSX.ASM):00124                 ROL     ARG2                              ; ARG2
2FBB DC04             (         OPSX.ASM):00125                 LDD     ARG2
2FBD D302             (         OPSX.ASM):00126                 ADDD    ARG1                              ; ADD Z-ADDR OF TABLE
2FBF C33F00           (         OPSX.ASM):00127                 ADDD    #ZCODE                            ; FORM ABSOLUTE ADDRESS
2FC2 1F01             (         OPSX.ASM):00128                 TFR     D,X                               ; FOR USE AS AN INDEX
2FC4 DC06             (         OPSX.ASM):00129                 LDD     ARG3
2FC6 ED84             (         OPSX.ASM):00130                 STD     ,X
2FC8 39               (         OPSX.ASM):00131                 RTS
                      (         OPSX.ASM):00132         
                      (         OPSX.ASM):00133         ; ----
                      (         OPSX.ASM):00134         ; PUTB
                      (         OPSX.ASM):00135         ; ----
                      (         OPSX.ASM):00136         
                      (         OPSX.ASM):00137         ; Set item "arg2" in BYTE-table "arg1" equal to "arg3"
                      (         OPSX.ASM):00138         
2FC9                  (         OPSX.ASM):00139         ZPUTB:
2FC9 DC04             (         OPSX.ASM):00140                 LDD     ARG2
2FCB D302             (         OPSX.ASM):00141                 ADDD    ARG1
2FCD C33F00           (         OPSX.ASM):00142                 ADDD    #ZCODE
2FD0 1F01             (         OPSX.ASM):00143                 TFR     D,X
2FD2 9607             (         OPSX.ASM):00144                 LDA     ARG3+1
2FD4 A784             (         OPSX.ASM):00145                 STA     ,X
2FD6 39               (         OPSX.ASM):00146                 RTS
                      (         OPSX.ASM):00147         
                      (         OPSX.ASM):00148         ; ----
                      (         OPSX.ASM):00149         ; PUTP
                      (         OPSX.ASM):00150         ; ----
                      (         OPSX.ASM):00151         
                      (         OPSX.ASM):00152         ; Set property "arg2" in object "arg1" equal to "arg3"
                      (         OPSX.ASM):00153         
2FD7                  (         OPSX.ASM):00154         ZPUTP:
2FD7 BD3484           (         OPSX.ASM):00155                 JSR     PROPB
2FDA                  (         OPSX.ASM):00156         PUTP1:
2FDA BD3499           (         OPSX.ASM):00157                 JSR     PROPN
2FDD 9105             (         OPSX.ASM):00158                 CMPA    ARG2+1
2FDF 270C             (         OPSX.ASM):00159                 BEQ     PUTP2
2FE1 2405             (         OPSX.ASM):00160                 BHS     PTP
                      (         OPSX.ASM):00161         
                      (         OPSX.ASM):00162         ; *** ERROR #10: BAD PROPERTY NUMBER ***
                      (         OPSX.ASM):00163         
2FE3 860A             (         OPSX.ASM):00164                 LDA     #10
2FE5 BD3629           (         OPSX.ASM):00165                 JSR     ZERROR                            ; ERROR #7 (BAD PROPERTY #)
                      (         OPSX.ASM):00166         
2FE8                  (         OPSX.ASM):00167         PTP:
2FE8 BD34AE           (         OPSX.ASM):00168                 JSR     PROPNX                            ; NEXT ITEM
2FEB 20ED             (         OPSX.ASM):00169                 BRA     PUTP1
                      (         OPSX.ASM):00170         
2FED                  (         OPSX.ASM):00171         PUTP2:
2FED BD34A1           (         OPSX.ASM):00172                 JSR     PROPL
2FF0 5C               (         OPSX.ASM):00173                 INCB
2FF1 4D               (         OPSX.ASM):00174                 TSTA
2FF2 2711             (         OPSX.ASM):00175                 BEQ     PUTP2A
2FF4 8101             (         OPSX.ASM):00176                 CMPA    #1
2FF6 2705             (         OPSX.ASM):00177                 BEQ     PTP1
                      (         OPSX.ASM):00178         
                      (         OPSX.ASM):00179         ; *** ERROR #11: PROPERTY LENGTH ***
                      (         OPSX.ASM):00180         
2FF8 860B             (         OPSX.ASM):00181                 LDA     #11
2FFA BD3629           (         OPSX.ASM):00182                 JSR     ZERROR                            ; ERROR #8 (PROP TOO LONG)
                      (         OPSX.ASM):00183         
2FFD                  (         OPSX.ASM):00184         PTP1:
2FFD 9E3F             (         OPSX.ASM):00185                 LDX     TEMP
2FFF 3A               (         OPSX.ASM):00186                 ABX
3000 DC06             (         OPSX.ASM):00187                 LDD     ARG3
3002 ED84             (         OPSX.ASM):00188                 STD     ,X
3004 39               (         OPSX.ASM):00189                 RTS
                      (         OPSX.ASM):00190         
3005                  (         OPSX.ASM):00191         PUTP2A:
3005 9607             (         OPSX.ASM):00192                 LDA     ARG3+1
3007 9E3F             (         OPSX.ASM):00193                 LDX     TEMP
3009 3A               (         OPSX.ASM):00194                 ABX
300A A784             (         OPSX.ASM):00195                 STA     ,X
300C 39               (         OPSX.ASM):00196                 RTS
                      (         OPSX.ASM):00197         
                      (         OPSX.ASM):00198         ; ------
                      (         OPSX.ASM):00199         ; PRINTC
                      (         OPSX.ASM):00200         ; ------
                      (         OPSX.ASM):00201         
                      (         OPSX.ASM):00202         ; Print the character with ASCII value "arg1"
                      (         OPSX.ASM):00203         
300D                  (         OPSX.ASM):00204         ZPRC:
300D 9603             (         OPSX.ASM):00205                 LDA     ARG1+1
300F 7E3676           (         OPSX.ASM):00206                 JMP     COUT
                      (         OPSX.ASM):00207         
                      (         OPSX.ASM):00208         ; ------
                      (         OPSX.ASM):00209         ; PRINTN
                      (         OPSX.ASM):00210         ; ------
                      (         OPSX.ASM):00211         
                      (         OPSX.ASM):00212         ; Print "arg1" as a signed integer
                      (         OPSX.ASM):00213         
3012                  (         OPSX.ASM):00214         ZPRN:
3012 DC02             (         OPSX.ASM):00215                 LDD     ARG1
3014 DD3F             (         OPSX.ASM):00216                 STD     TEMP
                      (         OPSX.ASM):00217         
                      (         OPSX.ASM):00218         ; PRINT THE SIGNED VALUE IN [TEMP]
                      (         OPSX.ASM):00219         
3016                  (         OPSX.ASM):00220         NUMBER:
3016 DC3F             (         OPSX.ASM):00221                 LDD     TEMP
3018 2A08             (         OPSX.ASM):00222                 BPL     DIGCNT                            ; IF NUMBER IS NEGATIVE,
301A 862D             (         OPSX.ASM):00223                 LDA     #$2D                              ; START WITH A MINUS SIGN
301C BD3676           (         OPSX.ASM):00224                 JSR     COUT
301F BD2EE6           (         OPSX.ASM):00225                 JSR     ABTEMP                            ; GET ABS(TEMP)
                      (         OPSX.ASM):00226         
                      (         OPSX.ASM):00227         ; COUNT # OF DECIMAL DIGITS
                      (         OPSX.ASM):00228         
3022                  (         OPSX.ASM):00229         DIGCNT:
3022 0F43             (         OPSX.ASM):00230                 CLR     MASK                              ; RESET INDEX
3024                  (         OPSX.ASM):00231         DGC:
3024 DC3F             (         OPSX.ASM):00232                 LDD     TEMP                              ; CHECK QUOTIENT
3026 2710             (         OPSX.ASM):00233                 BEQ     PRNTN3                            ; SKIP IF ZERO
3028 CC000A           (         OPSX.ASM):00234                 LDD     #10
302B DD3D             (         OPSX.ASM):00235                 STD     VAL                               ; ELSE DIVIDE BY 10
302D BD2EED           (         OPSX.ASM):00236                 JSR     UDIV                              ; UNSIGNED DIVIDE
3030 963E             (         OPSX.ASM):00237                 LDA     VAL+1                             ; GET LSB OF REMAINDER
3032 3402             (         OPSX.ASM):00238                 PSHS    A                                 ; SAVE ON STACK
3034 0C43             (         OPSX.ASM):00239                 INC     MASK                              ; INCREMENT CHAR COUNT
3036 20EC             (         OPSX.ASM):00240                 BRA     DGC                               ; LOOP TILL ARG1=0
                      (         OPSX.ASM):00241         
3038                  (         OPSX.ASM):00242         PRNTN3:
3038 9643             (         OPSX.ASM):00243                 LDA     MASK
303A 270C             (         OPSX.ASM):00244                 BEQ     PZERO                             ; PRINT AT LEAST A "0"
303C                  (         OPSX.ASM):00245         PRNTN4:
303C 3502             (         OPSX.ASM):00246                 PULS    A                                 ; GET A CHAR
303E 8B30             (         OPSX.ASM):00247                 ADDA    #$30                              ; CONVERT TO ASCII NUMBER
3040 BD3676           (         OPSX.ASM):00248                 JSR     COUT
3043 0A43             (         OPSX.ASM):00249                 DEC     MASK                              ; OUT OF CHARS?
3045 26F5             (         OPSX.ASM):00250                 BNE     PRNTN4                            ; KEEP PRINTING TILL
3047 39               (         OPSX.ASM):00251                 RTS                                       ; DONE
                      (         OPSX.ASM):00252         
                      (         OPSX.ASM):00253         ; PRINT A ZERO
                      (         OPSX.ASM):00254         
3048                  (         OPSX.ASM):00255         PZERO:
3048 8630             (         OPSX.ASM):00256                 LDA     #$30                              ; ASCII "0"
304A 7E3676           (         OPSX.ASM):00257                 JMP     COUT
                      (         OPSX.ASM):00258         
                      (         OPSX.ASM):00259         ; ------
                      (         OPSX.ASM):00260         ; RANDOM
                      (         OPSX.ASM):00261         ; ------
                      (         OPSX.ASM):00262         
                      (         OPSX.ASM):00263         ; Return a random value between zero and "arg1" [VALUE]
                      (         OPSX.ASM):00264         
304D                  (         OPSX.ASM):00265         ZRAND:
304D DC02             (         OPSX.ASM):00266                 LDD     ARG1                              ; USE [ARG1]
304F DD3D             (         OPSX.ASM):00267                 STD     VAL                               ; AS THE DIVISOR
                      (         OPSX.ASM):00268         
3051 DC58             (         OPSX.ASM):00269                 LDD     RAND1                             ; GET A RANDOM #
3053 C3AA55           (         OPSX.ASM):00270                 ADDD    #$AA55                            ; DO WEIRD THINGS
3056 9759             (         OPSX.ASM):00271                 STA     RAND2                             ; SAVE AS
3058 D758             (         OPSX.ASM):00272                 STB     RAND1                             ; NEW SEED
305A 847F             (         OPSX.ASM):00273                 ANDA    #%01111111                        ; MAKE POSITIVE
305C DD3F             (         OPSX.ASM):00274                 STD     TEMP                              ; MAKE IT THE DIVIDEND
                      (         OPSX.ASM):00275         
305E BD2EBF           (         OPSX.ASM):00276                 JSR     DIVIDE                            ; UNSIGNED DIVIDE!
3061 DC3D             (         OPSX.ASM):00277                 LDD     VAL                               ; GET REMAINDER
3063 C30001           (         OPSX.ASM):00278                 ADDD    #1                                ; AT LEAST 1
3066 7E2E82           (         OPSX.ASM):00279                 JMP     MATH
                      (         OPSX.ASM):00280         
                      (         OPSX.ASM):00281         ; ----
                      (         OPSX.ASM):00282         ; PUSH
                      (         OPSX.ASM):00283         ; ----
                      (         OPSX.ASM):00284         
                      (         OPSX.ASM):00285         ; Push "arg1" onto the Z-stack
                      (         OPSX.ASM):00286         
3069                  (         OPSX.ASM):00287         ZPUSH:
3069 DC02             (         OPSX.ASM):00288                 LDD     ARG1
306B 7E2A33           (         OPSX.ASM):00289                 JMP     PSHDZ
                      (         OPSX.ASM):00290         
                      (         OPSX.ASM):00291         ; ---
                      (         OPSX.ASM):00292         ; POP
                      (         OPSX.ASM):00293         ; ---
                      (         OPSX.ASM):00294         
                      (         OPSX.ASM):00295         ; Pop a word off Z-stack and store in variable "arg1"
                      (         OPSX.ASM):00296         
306E                  (         OPSX.ASM):00297         ZPOP:
306E BD2A3C           (         OPSX.ASM):00298                 JSR     POPSTK
3071 9603             (         OPSX.ASM):00299                 LDA     ARG1+1                            ; GET VARIABLE ID
3073 7E29F7           (         OPSX.ASM):00300                 JMP     VARPUT
                      (         OPSX.ASM):00301         
                      (         OPSX.ASM):00302         ; -----
                      (         OPSX.ASM):00303         ; SPLIT
                      (         OPSX.ASM):00304         ; -----
                      (         OPSX.ASM):00305         
     2B72             (         OPSX.ASM):00306         ZSPLIT          EQU ZNOOP
                      (         OPSX.ASM):00307         
                      (         OPSX.ASM):00308         ; ------
                      (         OPSX.ASM):00309         ; SCREEN
                      (         OPSX.ASM):00310         ; ------
                      (         OPSX.ASM):00311         
     2B72             (         OPSX.ASM):00312         ZSCRN           EQU ZNOOP
                      (     cubixzip.asm):00061                 INCLUDE READ.ASM
                      (         READ.ASM):00001         ;       PAGE
                      (         READ.ASM):00002         ;       SBTTL "--- READ HANDLER ---"
                      (         READ.ASM):00003         
3076                  (         READ.ASM):00004         ZREAD:
3076 BD36AC           (         READ.ASM):00005                 JSR     ZUSL                              ; UPDATE STATUS LINE FIRST
                      (         READ.ASM):00006         
3079 DC02             (         READ.ASM):00007                 LDD     ARG1                              ; CALC ABSOLUTE ADDRESS
307B C33F00           (         READ.ASM):00008                 ADDD    #ZCODE                            ; OF READ BUFFERS
307E DD02             (         READ.ASM):00009                 STD     ARG1
3080 DC04             (         READ.ASM):00010                 LDD     ARG2
3082 C33F00           (         READ.ASM):00011                 ADDD    #ZCODE
3085 DD04             (         READ.ASM):00012                 STD     ARG2
                      (         READ.ASM):00013         
3087 BD353D           (         READ.ASM):00014                 JSR     INPUT                             ; READ LINE; RETURN LENGTH IN A
308A 9743             (         READ.ASM):00015                 STA     MASK                              ; # CHARS IN LINE
308C 0F44             (         READ.ASM):00016                 CLR     MASK+1                            ; # CHARS IN CURRENT WORD
                      (         READ.ASM):00017         
308E 9E04             (         READ.ASM):00018                 LDX     ARG2                              ; SET # OF WORDS READ
3090 6F01             (         READ.ASM):00019                 CLR     1,X                               ; TO ZERO
                      (         READ.ASM):00020         
3092 8601             (         READ.ASM):00021                 LDA     #1                                ; = 1
3094 973B             (         READ.ASM):00022                 STA     STABP                             ; INIT SOURCE TABLE POINTER
3096 4C               (         READ.ASM):00023                 INCA                                      ; = 2
3097 973A             (         READ.ASM):00024                 STA     RTABP                             ; AND RESULT TABLE POINTER
                      (         READ.ASM):00025         
3099                  (         READ.ASM):00026         READL:
3099 9E04             (         READ.ASM):00027                 LDX     ARG2
309B A680             (         READ.ASM):00028                 LDA     ,X+                               ; FETCH MAXIMUM # OF WORDS
309D A184             (         READ.ASM):00029                 CMPA    ,X                                ; COMPARE TO # WORDS READ
309F 2405             (         READ.ASM):00030                 BHS     RL1                               ; STILL ROOM
                      (         READ.ASM):00031         
                      (         READ.ASM):00032         ; *** ERROR #13 -- PARSER OVERFLOW ***
                      (         READ.ASM):00033         
30A1 860D             (         READ.ASM):00034                 LDA     #13
30A3 BD3629           (         READ.ASM):00035                 JSR     ZERROR
                      (         READ.ASM):00036         
30A6                  (         READ.ASM):00037         RL1:
30A6 DC43             (         READ.ASM):00038                 LDD     MASK                              ; OUT OF CHARS & WORDS?
30A8 2601             (         READ.ASM):00039                 BNE     RL2                               ; NOT YET
30AA                  (         READ.ASM):00040         RDEX:
30AA 39               (         READ.ASM):00041                 RTS                                       ; ELSE SCRAM
                      (         READ.ASM):00042         
30AB                  (         READ.ASM):00043         RL2:
30AB 9644             (         READ.ASM):00044                 LDA     MASK+1                            ; GET CHAR COUNT
30AD 8106             (         READ.ASM):00045                 CMPA    #6                                ; 6 CHARS DONE?
30AF 2503             (         READ.ASM):00046                 BLO     RL3                               ; NOT YET
30B1 BD3131           (         READ.ASM):00047                 JSR     FLUSHW                            ; ELSE FLUSH WORD
                      (         READ.ASM):00048         
30B4                  (         READ.ASM):00049         RL3:
30B4 9644             (         READ.ASM):00050                 LDA     MASK+1                            ; FIRST CHAR IN WORD?
30B6 2624             (         READ.ASM):00051                 BNE     READL2                            ; NOPE
                      (         READ.ASM):00052         
                      (         READ.ASM):00053         ; CLEAR OUT WORD BUFFER [ZSTBUI]
                      (         READ.ASM):00054         
30B8 5F               (         READ.ASM):00055                 CLRB                                      ; [A] IS ALREADY ZERO
30B9 DD2E             (         READ.ASM):00056                 STD     ZSTBUI
30BB DD30             (         READ.ASM):00057                 STD     ZSTBUI+2
30BD DD32             (         READ.ASM):00058                 STD     ZSTBUI+4
                      (         READ.ASM):00059         
30BF D63A             (         READ.ASM):00060                 LDB     RTABP
30C1 9E04             (         READ.ASM):00061                 LDX     ARG2
30C3 3A               (         READ.ASM):00062                 ABX
30C4 D63B             (         READ.ASM):00063                 LDB     STABP
30C6 E703             (         READ.ASM):00064                 STB     3,X                               ; STORE POSITION
                      (         READ.ASM):00065         
30C8 9E02             (         READ.ASM):00066                 LDX     ARG1
30CA A685             (         READ.ASM):00067                 LDA     B,X                               ; GRAB A CHAR FROM SOURCE BUFFER
30CC BD3153           (         READ.ASM):00068                 JSR     SIBRKP                            ; IS IT A SIB?
30CF 2529             (         READ.ASM):00069                 BCS     RSIBRK                            ; YES IF CARRY IS SET
30D1 BD314C           (         READ.ASM):00070                 JSR     NBRKP                             ; IS IT A "NORMAL" BREAK CHAR?
30D4 2406             (         READ.ASM):00071                 BCC     READL2                            ; NO, KEEP SCANNING
30D6 0C3B             (         READ.ASM):00072                 INC     STABP                             ; ELSE FLUSH STRANDED BREAK
30D8 0A43             (         READ.ASM):00073                 DEC     MASK                              ; UPDATE # OF CHARS IN LINE
30DA 20BD             (         READ.ASM):00074                 BRA     READL                             ; AND LOOP BACK
                      (         READ.ASM):00075         
30DC                  (         READ.ASM):00076         READL2:
30DC 9643             (         READ.ASM):00077                 LDA     MASK                              ; OUT OF CHARS?
30DE 2722             (         READ.ASM):00078                 BEQ     READL3                            ; SURE ENOUGH
30E0 D63B             (         READ.ASM):00079                 LDB     STABP
30E2 9E02             (         READ.ASM):00080                 LDX     ARG1
30E4 A685             (         READ.ASM):00081                 LDA     B,X                               ; ELSE GRAB NEXT CHAR
30E6 BD3148           (         READ.ASM):00082                 JSR     RBRKP                             ; IS IT A BREAK?
30E9 2517             (         READ.ASM):00083                 BCS     READL3                            ; YES IF CARRY SET
30EB D644             (         READ.ASM):00084                 LDB     MASK+1                            ; ELSE POINT TO
30ED 8E002E           (         READ.ASM):00085                 LDX     #ZSTBUI                           ; WORD BUFFER
30F0 A785             (         READ.ASM):00086                 STA     B,X                               ; STORE CHAR IN BUFFER
30F2 0A43             (         READ.ASM):00087                 DEC     MASK                              ; ONE LESS CHAR IN LINE
30F4 0C44             (         READ.ASM):00088                 INC     MASK+1                            ; ONE MORE IN RESULT
30F6 0C3B             (         READ.ASM):00089                 INC     STABP                             ; POINT TO NEXT CHAR
30F8 209F             (         READ.ASM):00090                 BRA     READL                             ; AND LOOP BACK
                      (         READ.ASM):00091         
30FA                  (         READ.ASM):00092         RSIBRK:
30FA 972E             (         READ.ASM):00093                 STA     ZSTBUI                            ; STORE THE SIB
30FC 0A43             (         READ.ASM):00094                 DEC     MASK                              ; UPDATE LINE-CHAR COUNT
30FE 0C44             (         READ.ASM):00095                 INC     MASK+1                            ; WORD-CHAR COUNT
3100 0C3B             (         READ.ASM):00096                 INC     STABP                             ; AND # CHARS IN WORD
                      (         READ.ASM):00097         
3102                  (         READ.ASM):00098         READL3:
3102 9644             (         READ.ASM):00099                 LDA     MASK+1                            ; ANY CHARS IN WORD?
3104 2793             (         READ.ASM):00100                 BEQ     READL                             ; APPARENTLY NOT
                      (         READ.ASM):00101         
3106 D63A             (         READ.ASM):00102                 LDB     RTABP                             ; POINT TO
3108 9E04             (         READ.ASM):00103                 LDX     ARG2                              ; IN THIS ENTRY
310A 3A               (         READ.ASM):00104                 ABX
310B 9644             (         READ.ASM):00105                 LDA     MASK+1                            ; FETCH ACTUAL WORD LENGTH
310D A702             (         READ.ASM):00106                 STA     2,X                               ; AND STORE IN 3RD BYTE
                      (         READ.ASM):00107         
310F 9643             (         READ.ASM):00108                 LDA     MASK
3111 3402             (         READ.ASM):00109                 PSHS    A                                 ; SAVE THIS
3113 BD338F           (         READ.ASM):00110                 JSR     CONZST                            ; CONVERT TO Z-STRING
3116 BD3163           (         READ.ASM):00111                 JSR     FINDW                             ; LOOK UP IN VOCABULARY
3119 3502             (         READ.ASM):00112                 PULS    A
311B 9743             (         READ.ASM):00113                 STA     MASK                              ; RESTORE
                      (         READ.ASM):00114         
311D 9E04             (         READ.ASM):00115                 LDX     ARG2
311F 6C01             (         READ.ASM):00116                 INC     1,X                               ; UPDATE # WORDS READ
3121 D63A             (         READ.ASM):00117                 LDB     RTABP                             ; POINT [X] TO 1ST BYTE
3123 3A               (         READ.ASM):00118                 ABX                                       ; IN CURRENT ENTRY
3124 CB04             (         READ.ASM):00119                 ADDB    #4
3126 D73A             (         READ.ASM):00120                 STB     RTABP                             ; POINT TO NEXT ENTRY
3128 DC3D             (         READ.ASM):00121                 LDD     VAL                               ; STORE [VAL] IN ENTRY
312A ED84             (         READ.ASM):00122                 STD     ,X
312C 0F44             (         READ.ASM):00123                 CLR     MASK+1                            ; RESET WORD-CHAR COUNT
312E 7E3099           (         READ.ASM):00124                 JMP     READL                             ; AND CONTINUE
                      (         READ.ASM):00125         
                      (         READ.ASM):00126         ; ----------
                      (         READ.ASM):00127         ; FLUSH WORD
                      (         READ.ASM):00128         ; ----------
                      (         READ.ASM):00129         
3131                  (         READ.ASM):00130         FLUSHW:
3131 9643             (         READ.ASM):00131                 LDA     MASK
3133 2712             (         READ.ASM):00132                 BEQ     FLEX
3135 D63B             (         READ.ASM):00133                 LDB     STABP
3137 9E02             (         READ.ASM):00134                 LDX     ARG1
3139 A685             (         READ.ASM):00135                 LDA     B,X
313B 8D0B             (         READ.ASM):00136                 BSR     RBRKP                             ; WORD BREAK?
313D 2508             (         READ.ASM):00137                 BCS     FLEX                              ; EXIT IF SO
313F 0A43             (         READ.ASM):00138                 DEC     MASK
3141 0C44             (         READ.ASM):00139                 INC     MASK+1
3143 0C3B             (         READ.ASM):00140                 INC     STABP
3145 20EA             (         READ.ASM):00141                 BRA     FLUSHW                            ; KEEP LOOPING
3147                  (         READ.ASM):00142         FLEX:
3147 39               (         READ.ASM):00143                 RTS
                      (         READ.ASM):00144         
                      (         READ.ASM):00145         ; ---------------
                      (         READ.ASM):00146         ; BREAK CHAR SCAN
                      (         READ.ASM):00147         ; ---------------
                      (         READ.ASM):00148         
3148                  (         READ.ASM):00149         RBRKP:
3148 8D09             (         READ.ASM):00150                 BSR     SIBRKP                            ; FIRST CHECK FOR SIBS
314A 2515             (         READ.ASM):00151                 BCS     FBRK                              ; EXIT IF MATCHED
                      (         READ.ASM):00152         
                      (         READ.ASM):00153         ; FALL THROUGH TO ...
                      (         READ.ASM):00154         
                      (         READ.ASM):00155         ; ----------------------
                      (         READ.ASM):00156         ; NORMAL BREAK CHAR SCAN
                      (         READ.ASM):00157         ; ----------------------
                      (         READ.ASM):00158         
314C                  (         READ.ASM):00159         NBRKP:
314C 8E3192           (         READ.ASM):00160                 LDX     #BRKTBL                           ; BASE OF BREAK CHAR TABLE
314F C605             (         READ.ASM):00161                 LDB     #NBRKS-1                          ; NUMBER OF NORMAL BREAK CHARS
3151 2005             (         READ.ASM):00162                 BRA     NBR1
                      (         READ.ASM):00163         
                      (         READ.ASM):00164         ; ------------------------------
                      (         READ.ASM):00165         ; SELF-INSERTING BREAK CHAR SCAN
                      (         READ.ASM):00166         ; ------------------------------
                      (         READ.ASM):00167         
3153                  (         READ.ASM):00168         SIBRKP:
3153 9E23             (         READ.ASM):00169                 LDX     VOCAB                             ; BASE ADDRESS OF VOCAB TABLE
3155 E680             (         READ.ASM):00170                 LDB     ,X+                               ; GET # SIB CHARS
3157 5A               (         READ.ASM):00171                 DECB                                      ; ZERO-ALIGN COUNT
                      (         READ.ASM):00172         
3158                  (         READ.ASM):00173         NBR1:
3158 A185             (         READ.ASM):00174                 CMPA    B,X
315A 2705             (         READ.ASM):00175                 BEQ     FBRK                              ; MATCHED!
315C 5A               (         READ.ASM):00176                 DECB
315D 2AF9             (         READ.ASM):00177                 BPL     NBR1                              ; KEEP LOOPING
315F 5F               (         READ.ASM):00178                 CLRB                                      ; NO MATCH, CLEAR CARRY
3160 39               (         READ.ASM):00179                 RTS
3161                  (         READ.ASM):00180         FBRK:
3161 53               (         READ.ASM):00181                 COMB                                      ; SET CARRY TO FLAG MATCH
3162 39               (         READ.ASM):00182                 RTS
                      (         READ.ASM):00183         
                      (         READ.ASM):00184         ; -----------------
                      (         READ.ASM):00185         ; VOCABULARY SEARCH
                      (         READ.ASM):00186         ; -----------------
                      (         READ.ASM):00187         
3163                  (         READ.ASM):00188         FINDW:
3163 9E23             (         READ.ASM):00189                 LDX     VOCAB                             ; BASE ADDR OF VOCAB TABLE
3165 E680             (         READ.ASM):00190                 LDB     ,X+                               ; GET # SIB BYTES
3167 3A               (         READ.ASM):00191                 ABX                                       ; AND SKIP OVER THEM
                      (         READ.ASM):00192         
3168 A680             (         READ.ASM):00193                 LDA     ,X+                               ; # BYTES PER TABLE ENTRY
316A 9744             (         READ.ASM):00194                 STA     MASK+1                            ; SAVE IT HERE
                      (         READ.ASM):00195         
316C EC81             (         READ.ASM):00196                 LDD     ,X++                              ; # OF ENTRIES IN TABLE
316E DD3D             (         READ.ASM):00197                 STD     VAL                               ; SAVE THAT TOO
                      (         READ.ASM):00198         
3170                  (         READ.ASM):00199         FWL1:
3170 EC84             (         READ.ASM):00200                 LDD     ,X                                ; CHECK FIRST Z-WORD
3172 109334           (         READ.ASM):00201                 CMPD    ZSTBUO
3175 2607             (         READ.ASM):00202                 BNE     WNEXT                             ; NO GOOD
3177 EC02             (         READ.ASM):00203                 LDD     2,X                               ; ELSE CHECK 2ND HALF
3179 109336           (         READ.ASM):00204                 CMPD    ZSTBUO+2
317C 270D             (         READ.ASM):00205                 BEQ     FWSUCC                            ; MATCHED!
                      (         READ.ASM):00206         
317E                  (         READ.ASM):00207         WNEXT:
317E D644             (         READ.ASM):00208                 LDB     MASK+1                            ; MOVE [X] UP TO
3180 3A               (         READ.ASM):00209                 ABX                                       ; NEXT TABLE ENTRY
3181 DC3D             (         READ.ASM):00210                 LDD     VAL
3183 830001           (         READ.ASM):00211                 SUBD    #1
3186 DD3D             (         READ.ASM):00212                 STD     VAL                               ; OUT OF ENTRIES YET?
3188 26E6             (         READ.ASM):00213                 BNE     FWL1                              ; NO, KEEP LOOKING
318A 39               (         READ.ASM):00214                 RTS                                       ; ELSE RETURN WITH [VAL]=0
                      (         READ.ASM):00215         
318B                  (         READ.ASM):00216         FWSUCC:
318B 3089C100         (         READ.ASM):00217                 LEAX    -ZCODE,X                          ; CONVERT TO Z-ADDRESS
318F 9F3D             (         READ.ASM):00218                 STX     VAL                               ; LEAVE RESULT IN [VAL]
3191 39               (         READ.ASM):00219                 RTS
                      (         READ.ASM):00220         
                      (         READ.ASM):00221         ; ------------------
                      (         READ.ASM):00222         ; NORMAL BREAK CHARS
                      (         READ.ASM):00223         ; ------------------
                      (         READ.ASM):00224         
3192                  (         READ.ASM):00225         BRKTBL:
3192 213F2C2E         (         READ.ASM):00226                 FCC     "!?,."
3196 0D               (         READ.ASM):00227                 FCB     EOL
3197 20               (         READ.ASM):00228                 FCB     SPACE
                      (         READ.ASM):00229         
     0006             (         READ.ASM):00230         NBRKS           EQU 6                             ; # NORMAL BREAK CHARS
                      (     cubixzip.asm):00062         
                      (     cubixzip.asm):00063         ;TITLE "ZIP/6809-B INFOCOM, INC. --- OPCODE SUPPORT"
                      (     cubixzip.asm):00064                 INCLUDE PAGING.ASM
                      (       PAGING.ASM):00001         ;       PAGE
                      (       PAGING.ASM):00002         ;       SBTTL   "--- TIMESTAMP PAGING ROUTINES (BM 11/24/84) ---"
                      (       PAGING.ASM):00003         
                      (       PAGING.ASM):00004         ; --------------------
                      (       PAGING.ASM):00005         ; FETCH A VIRTUAL WORD
                      (       PAGING.ASM):00006         ; --------------------
                      (       PAGING.ASM):00007         
3198                  (       PAGING.ASM):00008         GETWRD:
3198 8D38             (       PAGING.ASM):00009                 BSR     GETBYT
319A 973F             (       PAGING.ASM):00010                 STA     TEMP
319C 8D34             (       PAGING.ASM):00011                 BSR     GETBYT
319E 9740             (       PAGING.ASM):00012                 STA     TEMP+1
31A0 39               (       PAGING.ASM):00013                 RTS
                      (       PAGING.ASM):00014         
                      (       PAGING.ASM):00015         ; -----------------
                      (       PAGING.ASM):00016         ; FETCH NEXT Z-BYTE
                      (       PAGING.ASM):00017         ; -----------------
                      (       PAGING.ASM):00018         
31A1                  (       PAGING.ASM):00019         NEXTPC:
31A1 0D18             (       PAGING.ASM):00020                 TST     ZPCFLG                            ; IS [ZPCPNT] VALID?
31A3 2619             (       PAGING.ASM):00021                 BNE     NPC2                              ; YES, GET THE BYTE
                      (       PAGING.ASM):00022         
                      (       PAGING.ASM):00023         ; Z-PAGE HAS CHANGED!
                      (       PAGING.ASM):00024         
31A5 DC13             (       PAGING.ASM):00025                 LDD     ZPCH                              ; GET TOP 9 BITS OF [ZPC]
31A7 4D               (       PAGING.ASM):00026                 TSTA                                      ; IS TOP BIT CLEAR?
31A8 2608             (       PAGING.ASM):00027                 BNE     NPC0                              ; NO, PAGE MUST BE SWAPPED
                      (       PAGING.ASM):00028         
31AA D10B             (       PAGING.ASM):00029                 CMPB    ZPURE                             ; IS THIS PAGE PRELOADED?
31AC 2404             (       PAGING.ASM):00030                 BHS     NPC0                              ; NO, SWAP IT IN
                      (       PAGING.ASM):00031         
31AE CB3F             (       PAGING.ASM):00032                 ADDB    #ZCODEHIGH                        ; ELSE MAKE IT ABSOLUTE
31B0 2004             (       PAGING.ASM):00033                 BRA     NPC1                              ; AND CONTINUE
                      (       PAGING.ASM):00034         
31B2                  (       PAGING.ASM):00035         NPC0:
31B2 0F1F             (       PAGING.ASM):00036                 CLR     MPCFLG                            ; INVALIDATE [MPC] FOR SAFETY
31B4 8D4D             (       PAGING.ASM):00037                 BSR     PAGE                              ; RETURN BUFFER IN [B]
                      (       PAGING.ASM):00038         
31B6                  (       PAGING.ASM):00039         NPC1:
31B6 D716             (       PAGING.ASM):00040                 STB     ZPCPNT                            ; SET MSB OF BUFFER ADDRESS
31B8 0F17             (       PAGING.ASM):00041                 CLR     ZPCPNT+1                          ; CLEAR LSB
31BA 86FF             (       PAGING.ASM):00042                 LDA     #TRUE
31BC 9718             (       PAGING.ASM):00043                 STA     ZPCFLG                            ; VALIDATE [ZPC]
                      (       PAGING.ASM):00044         
31BE                  (       PAGING.ASM):00045         NPC2:
31BE D615             (       PAGING.ASM):00046                 LDB     ZPCL                              ; GET BYTE INDEX
31C0 9E16             (       PAGING.ASM):00047                 LDX     ZPCPNT                            ; AND PAGE ADDRESS
31C2 3A               (       PAGING.ASM):00048                 ABX                                       ; USE [ZPCL] AS OFFSET
31C3 A684             (       PAGING.ASM):00049                 LDA     ,X                                ; AND FETCH THE BYTE
                      (       PAGING.ASM):00050         
31C5 0C15             (       PAGING.ASM):00051                 INC     ZPCL                              ; POINT TO NEXT BYTE
31C7 2608             (       PAGING.ASM):00052                 BNE     NPC3                              ; CONTINUE IF NO OVERFLOW
                      (       PAGING.ASM):00053         
31C9 0F18             (       PAGING.ASM):00054                 CLR     ZPCFLG                            ; ELSE INVALIDATE [ZPC]
31CB 0C14             (       PAGING.ASM):00055                 INC     ZPCM                              ; AND POINT
31CD 2602             (       PAGING.ASM):00056                 BNE     NPC3                              ; TO THE
31CF 0C13             (       PAGING.ASM):00057                 INC     ZPCH                              ; NEXT Z-PAGE
                      (       PAGING.ASM):00058         
31D1                  (       PAGING.ASM):00059         NPC3:
31D1 39               (       PAGING.ASM):00060                 RTS                                       ; RETURN BYTE IN [A]
                      (       PAGING.ASM):00061         
                      (       PAGING.ASM):00062         ; ---------------------
                      (       PAGING.ASM):00063         ; GET NEXT VIRTUAL BYTE
                      (       PAGING.ASM):00064         ; ---------------------
                      (       PAGING.ASM):00065         
31D2                  (       PAGING.ASM):00066         GETBYT:
31D2 0D1F             (       PAGING.ASM):00067                 TST     MPCFLG                            ; IS [MPCPNT] VALID?
31D4 2619             (       PAGING.ASM):00068                 BNE     GTBT2                             ; YES, GET THE BYTE
                      (       PAGING.ASM):00069         
                      (       PAGING.ASM):00070         ; Z-PAGE HAS CHANGED!
                      (       PAGING.ASM):00071         
31D6 DC1A             (       PAGING.ASM):00072                 LDD     MPCH                              ; GET TOP 9 BITS OF [MPC]
31D8 4D               (       PAGING.ASM):00073                 TSTA                                      ; IS TOP BIT CLEAR?
31D9 2608             (       PAGING.ASM):00074                 BNE     GTBT0                             ; NO, PAGE MUST BE SWAPPED
                      (       PAGING.ASM):00075         
     31DC             (       PAGING.ASM):00076         PATCH           EQU pth+1                         ; PATCH POINT FOR "VERIFY"
31DB                  (       PAGING.ASM):00077         pth:
31DB D10B             (       PAGING.ASM):00078                 CMPB    ZPURE                             ; IS THIS PAGE PRELOADED?
31DD 2404             (       PAGING.ASM):00079                 BHS     GTBT0                             ; NO, SWAP IT IN
                      (       PAGING.ASM):00080         
31DF CB3F             (       PAGING.ASM):00081                 ADDB    #ZCODEHIGH                        ; ELSE MAKE IT ABSOLUTE
31E1 2004             (       PAGING.ASM):00082                 BRA     GTBT1                             ; AND CONTINUE
                      (       PAGING.ASM):00083         
31E3                  (       PAGING.ASM):00084         GTBT0:
31E3 0F18             (       PAGING.ASM):00085                 CLR     ZPCFLG                            ; INVALIDATE [ZPC] FOR SAFETY
31E5 8D1C             (       PAGING.ASM):00086                 BSR     PAGE                              ; RETURN BUFFER PAGE IN [B]
                      (       PAGING.ASM):00087         
31E7                  (       PAGING.ASM):00088         GTBT1:
31E7 D71D             (       PAGING.ASM):00089                 STB     MPCPNT                            ; SET MSB OF BUFFER ADDRESS
31E9 0F1E             (       PAGING.ASM):00090                 CLR     MPCPNT+1                          ; CLEAR LSB
31EB 86FF             (       PAGING.ASM):00091                 LDA     #TRUE
31ED 971F             (       PAGING.ASM):00092                 STA     MPCFLG                            ; VALIDATE [MPC]
                      (       PAGING.ASM):00093         
31EF                  (       PAGING.ASM):00094         GTBT2:
31EF D61C             (       PAGING.ASM):00095                 LDB     MPCL                              ; GET BYTE INDEX
31F1 9E1D             (       PAGING.ASM):00096                 LDX     MPCPNT                            ; AND PAGE ADDRESS
31F3 3A               (       PAGING.ASM):00097                 ABX                                       ; USE [MPCL] AS OFFSET
31F4 A684             (       PAGING.ASM):00098                 LDA     ,X                                ; AND FETCH THE BYTE
                      (       PAGING.ASM):00099         
31F6 0C1C             (       PAGING.ASM):00100                 INC     MPCL                              ; POINT TO NEXT BYTE
31F8 2608             (       PAGING.ASM):00101                 BNE     GTBT3                             ; CONTINUE IF NO OVERFLOW
                      (       PAGING.ASM):00102         
31FA 0F1F             (       PAGING.ASM):00103                 CLR     MPCFLG                            ; ELSE INVALIDATE [MPC]
31FC 0C1B             (       PAGING.ASM):00104                 INC     MPCM                              ; AND POINT
31FE 2602             (       PAGING.ASM):00105                 BNE     GTBT3                             ; TO THE
3200 0C1A             (       PAGING.ASM):00106                 INC     MPCH                              ; NEXT Z-PAGE
                      (       PAGING.ASM):00107         
3202                  (       PAGING.ASM):00108         GTBT3:
3202 39               (       PAGING.ASM):00109                 RTS                                       ; RETURN BYTE IN [A]
                      (       PAGING.ASM):00110         
                      (       PAGING.ASM):00111         ; -------------------------
                      (       PAGING.ASM):00112         ; LOCATE A SWAPPABLE Z-PAGE
                      (       PAGING.ASM):00113         ; -------------------------
                      (       PAGING.ASM):00114         
                      (       PAGING.ASM):00115         ; ENTRY: TARGET PAGE IN [D] (TOP 9 BITS)
                      (       PAGING.ASM):00116         ; EXIT: ABSOLUTE BUFFER PAGE IN [B]
                      (       PAGING.ASM):00117         
3203                  (       PAGING.ASM):00118         PAGE:
3203 DD4C             (       PAGING.ASM):00119                 STD     DBLOCK                            ; SAVE TARGET PAGE HERE
3205 0F0D             (       PAGING.ASM):00120                 CLR     ZPAGE                             ; CLEAR INDEX
3207 8E2500           (       PAGING.ASM):00121                 LDX     #PTABLE                           ; START AT BOTOM OF TABLE
320A                  (       PAGING.ASM):00122         PG0:
320A 10A381           (       PAGING.ASM):00123                 CMPD    ,X++                              ; FOUND IT?
320D 2720             (       PAGING.ASM):00124                 BEQ     PG1                               ; YES!
320F 0C0D             (       PAGING.ASM):00125                 INC     ZPAGE                             ; ELSE COUNT NEXT PAGE
3211 9C0F             (       PAGING.ASM):00126                 CMPX    TABTOP                            ; ANY BUFFERS LEFT?
3213 25F5             (       PAGING.ASM):00127                 BLO     PG0                               ; NO, KEEP SEARCHING
                      (       PAGING.ASM):00128         
                      (       PAGING.ASM):00129         ; SWAP IN THE TARGET PAGE
                      (       PAGING.ASM):00130         
3215 8D52             (       PAGING.ASM):00131                 BSR     EARLY                             ; FIND THE EARLIEST PAGE
3217 D612             (       PAGING.ASM):00132                 LDB     SWAP                              ; MOVE ITS INDEX
3219 D70D             (       PAGING.ASM):00133                 STB     ZPAGE                             ; INTO [ZPAGE]
                      (       PAGING.ASM):00134         
321B DB0E             (       PAGING.ASM):00135                 ADDB    PAGE0                             ; CALC ABSOLUTE PAGE OF BUFFER
321D D74A             (       PAGING.ASM):00136                 STB     DBUFF                             ; TELL DISK WHERE TO PUT DATA
321F 0F4B             (       PAGING.ASM):00137                 CLR     DBUFF+1                           ; CLEAR LSB
                      (       PAGING.ASM):00138         
3221 8E2500           (       PAGING.ASM):00139                 LDX     #PTABLE                           ; GET THE PAGING TABLE ADDRESS
3224 D60D             (       PAGING.ASM):00140                 LDB     ZPAGE                             ; AND THE BUFFER OFFSET
3226 3A               (       PAGING.ASM):00141                 ABX                                       ; ADD THE OFFSET
3227 3A               (       PAGING.ASM):00142                 ABX                                       ; TWICE FOR WORD ALIGNMENT
3228 DC4C             (       PAGING.ASM):00143                 LDD     DBLOCK                            ; RETRIEVE PAGE ID
322A ED84             (       PAGING.ASM):00144                 STD     ,X                                ; SPLICE IT INTO THE TABLE
                      (       PAGING.ASM):00145         
322C BD36CF           (       PAGING.ASM):00146                 JSR     GETDSK                            ; MOVE BLOCK [DBLOCK] TO [DBUFF]
                      (       PAGING.ASM):00147         
                      (       PAGING.ASM):00148         ; UPDATE THE TIMESTAMP
                      (       PAGING.ASM):00149         
322F                  (       PAGING.ASM):00150         PG1:
322F D60D             (       PAGING.ASM):00151                 LDB     ZPAGE                             ; GET BUFFER INDEX
3231 8E2650           (       PAGING.ASM):00152                 LDX     #LRUMAP                           ; CALC ADDRESS OF ENTRY
3234 3A               (       PAGING.ASM):00153                 ABX                                       ; IN TIMESTAMP MAP
3235 A684             (       PAGING.ASM):00154                 LDA     ,X                                ; GET BUFFER'S LAST STAMP
3237 9111             (       PAGING.ASM):00155                 CMPA    STAMP                             ; SAME AS CURRENT STAMP?
3239 2729             (       PAGING.ASM):00156                 BEQ     PG5                               ; EXIT IF SO
                      (       PAGING.ASM):00157         
323B 0C11             (       PAGING.ASM):00158                 INC     STAMP                             ; UPDATE [STAMP]
323D 261B             (       PAGING.ASM):00159                 BNE     PG4                               ; IF STAMP OVERFLOWS ...
                      (       PAGING.ASM):00160         
                      (       PAGING.ASM):00161         ; HANDLE STAMP OVERFLOW
                      (       PAGING.ASM):00162         
323F 8D28             (       PAGING.ASM):00163                 BSR     EARLY                             ; GET EARLIEST STAMP INTO [LRU]
                      (       PAGING.ASM):00164         
3241 8E2650           (       PAGING.ASM):00165                 LDX     #LRUMAP                           ; GET BASE ADDRESS OF STAMPS
3244 5F               (       PAGING.ASM):00166                 CLRB                                      ; INIT STAMP COUNTER
3245                  (       PAGING.ASM):00167         PG2:
3245 A684             (       PAGING.ASM):00168                 LDA     ,X                                ; GET A STAMP
3247 2704             (       PAGING.ASM):00169                 BEQ     PG3                               ; SKIP IF ALREADY ZERO
3249 900A             (       PAGING.ASM):00170                 SUBA    LRU                               ; ELSE SUBTRACT OFF EARLIEST STAMP
324B A784             (       PAGING.ASM):00171                 STA     ,X                                ; AND REPLACE IT
324D                  (       PAGING.ASM):00172         PG3:
324D 3001             (       PAGING.ASM):00173                 LEAX    +1,X                              ; INCREMENT BASE ADDRESS
324F 5C               (       PAGING.ASM):00174                 INCB                                      ; AND COUNTER
3250 D10C             (       PAGING.ASM):00175                 CMPB    PMAX                              ; OUT OF PAGES YET?
3252 25F1             (       PAGING.ASM):00176                 BLO     PG2                               ; LOOP TILL DONE
                      (       PAGING.ASM):00177         
3254 8600             (       PAGING.ASM):00178                 LDA     #0                                ; TURN BACK THE CLOCK
3256 900A             (       PAGING.ASM):00179                 SUBA    LRU                               ; ON [STAMP]
3258 9711             (       PAGING.ASM):00180                 STA     STAMP                             ; TO REFLECT TABLE FUDGING
                      (       PAGING.ASM):00181         
                      (       PAGING.ASM):00182         ; STAMP THE PAGE WITH CURRENT TIME
                      (       PAGING.ASM):00183         
325A                  (       PAGING.ASM):00184         PG4:
325A 8E2650           (       PAGING.ASM):00185                 LDX     #LRUMAP
325D D60D             (       PAGING.ASM):00186                 LDB     ZPAGE
325F 3A               (       PAGING.ASM):00187                 ABX
3260 9611             (       PAGING.ASM):00188                 LDA     STAMP
3262 A784             (       PAGING.ASM):00189                 STA     ,X
                      (       PAGING.ASM):00190         
3264                  (       PAGING.ASM):00191         PG5:
3264 D60D             (       PAGING.ASM):00192                 LDB     ZPAGE                             ; GET PAGE OFFSET
3266 DB0E             (       PAGING.ASM):00193                 ADDB    PAGE0                             ; MAKE IT ABSOLUTE
3268 39               (       PAGING.ASM):00194                 RTS                                       ; AND RETURN IT IN [B]
                      (       PAGING.ASM):00195         
                      (       PAGING.ASM):00196         ; -------------------------
                      (       PAGING.ASM):00197         ; LOCATE EARLIEST TIMESTAMP
                      (       PAGING.ASM):00198         ; -------------------------
                      (       PAGING.ASM):00199         
                      (       PAGING.ASM):00200         ; EXIT: [LRU] = EARLIEST STAMP READING
                      (       PAGING.ASM):00201         ;       [SWAP] = INDEX TO EARLIEST BUFFER
                      (       PAGING.ASM):00202         
3269                  (       PAGING.ASM):00203         EARLY:
3269 0F12             (       PAGING.ASM):00204                 CLR     SWAP                              ; RESET [SWAP]
326B B62650           (       PAGING.ASM):00205                 LDA     LRUMAP                            ; FETCH 1ST READING FOR COMPARISONS
326E 8E2651           (       PAGING.ASM):00206                 LDX     #LRUMAP+1                         ; POINT TO 2ND READING
3271 C601             (       PAGING.ASM):00207                 LDB     #1                                ; INIT BUFFER INDEX
3273                  (       PAGING.ASM):00208         EAR0:
3273 A184             (       PAGING.ASM):00209                 CMPA    ,X                                ; IS THIS STAMP EARLIER THAN [A]?
3275 2504             (       PAGING.ASM):00210                 BLO     EAR1                              ; NO, TRY NEXT
3277 A684             (       PAGING.ASM):00211                 LDA     ,X                                ; ELSE MAKE THIS READING THE "NEW" LOWEST
3279 D712             (       PAGING.ASM):00212                 STB     SWAP                              ; AND REMEMBER WHERE WE FOUND IT
327B                  (       PAGING.ASM):00213         EAR1:
327B 3001             (       PAGING.ASM):00214                 LEAX    +1,X                              ; UPDATE POINTER
327D 5C               (       PAGING.ASM):00215                 INCB                                      ; AND BUFFER INDEX
327E D10C             (       PAGING.ASM):00216                 CMPB    PMAX                              ; OUT OF BUFFERS YET?
3280 25F1             (       PAGING.ASM):00217                 BLO     EAR0                              ; LOOP TILL DONE
                      (       PAGING.ASM):00218         
3282 970A             (       PAGING.ASM):00219                 STA     LRU                               ; SAVE EARLIEST STAMP FOUND
3284 39               (       PAGING.ASM):00220                 RTS                                       ; AND RETURN
                      (       PAGING.ASM):00221         
                      (       PAGING.ASM):00222         ; ---------------------
                      (       PAGING.ASM):00223         ; POINT [MPC] TO [TEMP]
                      (       PAGING.ASM):00224         ; ---------------------
                      (       PAGING.ASM):00225         
3285                  (       PAGING.ASM):00226         SETWRD:
3285 DC3F             (       PAGING.ASM):00227                 LDD     TEMP
3287 DD1B             (       PAGING.ASM):00228                 STD     MPCM
3289 0F1A             (       PAGING.ASM):00229                 CLR     MPCH
328B 0F1F             (       PAGING.ASM):00230                 CLR     MPCFLG
328D 39               (       PAGING.ASM):00231                 RTS
                      (     cubixzip.asm):00065                 INCLUDE ZSTRING.ASM
                      (      ZSTRING.ASM):00001         ;       PAGE
                      (      ZSTRING.ASM):00002         ;       SBTTL "--- Z-STRING HANDLERS ---"
                      (      ZSTRING.ASM):00003         
                      (      ZSTRING.ASM):00004         ; -----------------
                      (      ZSTRING.ASM):00005         ; POINT TO Z-STRING
                      (      ZSTRING.ASM):00006         ; -----------------
                      (      ZSTRING.ASM):00007         
328E                  (      ZSTRING.ASM):00008         SETSTR:
328E 4F               (      ZSTRING.ASM):00009                 CLRA
328F 0840             (      ZSTRING.ASM):00010                 ASL     TEMP+1
3291 093F             (      ZSTRING.ASM):00011                 ROL     TEMP
3293 49               (      ZSTRING.ASM):00012                 ROLA
3294 971A             (      ZSTRING.ASM):00013                 STA     MPCH
3296 DC3F             (      ZSTRING.ASM):00014                 LDD     TEMP
3298 DD1B             (      ZSTRING.ASM):00015                 STD     MPCM
329A 0F1F             (      ZSTRING.ASM):00016                 CLR     MPCFLG
329C                  (      ZSTRING.ASM):00017         ZSTEX:
329C 39               (      ZSTRING.ASM):00018                 RTS
                      (      ZSTRING.ASM):00019         
                      (      ZSTRING.ASM):00020         ; --------------
                      (      ZSTRING.ASM):00021         ; PRINT Z-STRING
                      (      ZSTRING.ASM):00022         ; --------------
                      (      ZSTRING.ASM):00023         
329D                  (      ZSTRING.ASM):00024         PZSTR:
329D 0F2A             (      ZSTRING.ASM):00025                 CLR     CSPERM                            ; PERMANENT CHARSET
329F 0F2B             (      ZSTRING.ASM):00026                 CLR     STBYTF                            ; RESET STRING BYTE FLAG
32A1 86FF             (      ZSTRING.ASM):00027                 LDA     #$FF
32A3 9729             (      ZSTRING.ASM):00028                 STA     CSTEMP                            ; NO TEMP CHARSET ACTIVE
                      (      ZSTRING.ASM):00029         
32A5                  (      ZSTRING.ASM):00030         PZSTRL:
32A5 BD3357           (      ZSTRING.ASM):00031                 JSR     GETZCH                            ; GET A Z-CHARACTER
32A8 25F2             (      ZSTRING.ASM):00032                 BCS     ZSTEX                             ; END OF STRING IF CARRY SET
32AA 9743             (      ZSTRING.ASM):00033                 STA     MASK                              ; SAVE CHAR HERE
32AC 2741             (      ZSTRING.ASM):00034                 BEQ     PZSTRS                            ; O = SPACE CHAR
32AE 8104             (      ZSTRING.ASM):00035                 CMPA    #4                                ; IS THIS AN F-WORD?
32B0 2557             (      ZSTRING.ASM):00036                 BLO     PZSTRF                            ; APPARENTLY SO
32B2 8106             (      ZSTRING.ASM):00037                 CMPA    #6                                ; SHIFT CHAR?
32B4 253D             (      ZSTRING.ASM):00038                 BLO     PZSTRT                            ; YES, CHANGE CHARSET
                      (      ZSTRING.ASM):00039         
32B6 BD334B           (      ZSTRING.ASM):00040                 JSR     GETMOD
32B9 4D               (      ZSTRING.ASM):00041                 TSTA                                      ; IS THIS CHARSET 0?
32BA 2609             (      ZSTRING.ASM):00042                 BNE     PZSTR1                            ; NOPE
                      (      ZSTRING.ASM):00043         
                      (      ZSTRING.ASM):00044         ; PRINT LOWER-CASE CHAR (CHARSET 0)
                      (      ZSTRING.ASM):00045         
32BC 865B             (      ZSTRING.ASM):00046                 LDA     #$61-6                            ; ASCII "a" MINUS Z-OFFSET
32BE                  (      ZSTRING.ASM):00047         PZSTP0:
32BE 9B43             (      ZSTRING.ASM):00048                 ADDA    MASK                              ; ADD CHARACTER
32C0                  (      ZSTRING.ASM):00049         PZSTP1:
32C0 BD3676           (      ZSTRING.ASM):00050                 JSR     COUT                              ; PRINT RESULT
32C3 20E0             (      ZSTRING.ASM):00051                 BRA     PZSTRL                            ; AND FETCH ANOTHER Z-CHAR
                      (      ZSTRING.ASM):00052         
                      (      ZSTRING.ASM):00053         ; CHARSET 1 OR 2?
                      (      ZSTRING.ASM):00054         
32C5                  (      ZSTRING.ASM):00055         PZSTR1:
32C5 8101             (      ZSTRING.ASM):00056                 CMPA    #1                                ; SET 1?
32C7 2604             (      ZSTRING.ASM):00057                 BNE     PZSTR2                            ; NOPE, IT'S SET 2
                      (      ZSTRING.ASM):00058         
                      (      ZSTRING.ASM):00059         ; PRINT UPPER-CASE CHAR (CHARSET 1)
                      (      ZSTRING.ASM):00060         
32C9 863B             (      ZSTRING.ASM):00061                 LDA     #$41-6                            ; ASCII "A" MINUS Z-OFFSET
32CB 20F1             (      ZSTRING.ASM):00062                 BRA     PZSTP0                            ; AND SO ON ...
                      (      ZSTRING.ASM):00063         
                      (      ZSTRING.ASM):00064         ; DECODE/PRINT CHARSET 2
                      (      ZSTRING.ASM):00065         
32CD                  (      ZSTRING.ASM):00066         PZSTR2:
32CD D643             (      ZSTRING.ASM):00067                 LDB     MASK                              ; RETRIEVE Z-CHAR
32CF C006             (      ZSTRING.ASM):00068                 SUBB    #6                                ; CONVERT TO ZERO-ALIGNED INDEX
32D1 2707             (      ZSTRING.ASM):00069                 BEQ     PZSTRA                            ; IF ZERO, IT'S "DIRECT" ASCII
32D3 8E346A           (      ZSTRING.ASM):00070                 LDX     #CHRTBL                           ; ELSE GET BASE OF DECODE TABLE
32D6 A685             (      ZSTRING.ASM):00071                 LDA     B,X                               ; GET CHAR FROM TABLE
32D8 20E6             (      ZSTRING.ASM):00072                 BRA     PZSTP1                            ; AND PRINT IT!
                      (      ZSTRING.ASM):00073         
                      (      ZSTRING.ASM):00074         ; DECODE/PRINT A "DIRECT" ASCII CHAR
                      (      ZSTRING.ASM):00075         
32DA                  (      ZSTRING.ASM):00076         PZSTRA:
32DA BD3357           (      ZSTRING.ASM):00077                 JSR     GETZCH                            ; GET NEXT Z-BYTE
32DD 48               (      ZSTRING.ASM):00078                 ASLA                                      ; SHIFT INTO POSITION
32DE 48               (      ZSTRING.ASM):00079                 ASLA
32DF 48               (      ZSTRING.ASM):00080                 ASLA
32E0 48               (      ZSTRING.ASM):00081                 ASLA
32E1 48               (      ZSTRING.ASM):00082                 ASLA
32E2 9743             (      ZSTRING.ASM):00083                 STA     MASK                              ; SAVE MSB
32E4 BD3357           (      ZSTRING.ASM):00084                 JSR     GETZCH                            ; FETCH LSB
32E7 9744             (      ZSTRING.ASM):00085                 STA     MASK+1                            ; SAVE THAT, TOO
32E9 9643             (      ZSTRING.ASM):00086                 LDA     MASK                              ; GET MSB
32EB 9A44             (      ZSTRING.ASM):00087                 ORA     MASK+1                            ; SUPERIMPOSE LSB
32ED 20D1             (      ZSTRING.ASM):00088                 BRA     PZSTP1                            ; AND PRINT RESULT
                      (      ZSTRING.ASM):00089         
                      (      ZSTRING.ASM):00090         ; PRINT A SPACE
                      (      ZSTRING.ASM):00091         
32EF                  (      ZSTRING.ASM):00092         PZSTRS:
32EF 8620             (      ZSTRING.ASM):00093                 LDA     #$20
32F1 20CD             (      ZSTRING.ASM):00094                 BRA     PZSTP1
                      (      ZSTRING.ASM):00095         
                      (      ZSTRING.ASM):00096         ; CHANGE CHARACTER SETS
                      (      ZSTRING.ASM):00097         
32F3                  (      ZSTRING.ASM):00098         PZSTRT:
32F3 8003             (      ZSTRING.ASM):00099                 SUBA    #3                                ; CONVERT TO 1 OR 2
32F5 1F89             (      ZSTRING.ASM):00100                 TFR     A,B
32F7 8D52             (      ZSTRING.ASM):00101                 BSR     GETMOD
32F9 2604             (      ZSTRING.ASM):00102                 BNE     PZSTRP                            ; NO, DO PERMANENT SHIFT
32FB D729             (      ZSTRING.ASM):00103                 STB     CSTEMP                            ; JUST A TEMP-SHIFT
32FD 20A6             (      ZSTRING.ASM):00104                 BRA     PZSTRL
                      (      ZSTRING.ASM):00105         
32FF                  (      ZSTRING.ASM):00106         PZSTRP:
32FF D72A             (      ZSTRING.ASM):00107                 STB     CSPERM                            ; PERMANENT SHIFT
3301 912A             (      ZSTRING.ASM):00108                 CMPA    CSPERM                            ; NEW SET SAME AS OLD?
3303 27A0             (      ZSTRING.ASM):00109                 BEQ     PZSTRL                            ; YES, EXIT
3305 0F2A             (      ZSTRING.ASM):00110                 CLR     CSPERM                            ; ELSE BACK TO SET 0
3307 209C             (      ZSTRING.ASM):00111                 BRA     PZSTRL                            ; BEFORE FINISHING
                      (      ZSTRING.ASM):00112         
                      (      ZSTRING.ASM):00113         ; HANDLE AN F-WORD
                      (      ZSTRING.ASM):00114         
3309                  (      ZSTRING.ASM):00115         PZSTRF:
3309 4A               (      ZSTRING.ASM):00116                 DECA                                      ; CONVERT TO 0-2
330A C640             (      ZSTRING.ASM):00117                 LDB     #64                               ; TIMES 64
330C 3D               (      ZSTRING.ASM):00118                 MUL
330D D73C             (      ZSTRING.ASM):00119                 STB     PZSTFO                            ; SAVE FOR LATER
330F BD3357           (      ZSTRING.ASM):00120                 JSR     GETZCH                            ; GET F-WORD INDEX
3312 1F89             (      ZSTRING.ASM):00121                 TFR     A,B                               ; MOVE IT
3314 58               (      ZSTRING.ASM):00122                 ASLB                                      ; FORM WORD-ALIGNED INDEX
3315 DB3C             (      ZSTRING.ASM):00123                 ADDB    PZSTFO                            ; ADD OFFSET
3317 9E25             (      ZSTRING.ASM):00124                 LDX     FWORDS                            ; GET BASE ADDR OF FWORDS TABLE
3319 3A               (      ZSTRING.ASM):00125                 ABX                                       ; ADD THE OFFSET
331A EC84             (      ZSTRING.ASM):00126                 LDD     ,X                                ; GET THE FWORD POINTER
331C DD3F             (      ZSTRING.ASM):00127                 STD     TEMP                              ; AND SAVE IT
                      (      ZSTRING.ASM):00128         
                      (      ZSTRING.ASM):00129         ; SAVE THE STATE OF CURRENT Z-PRINT
                      (      ZSTRING.ASM):00130         
331E 961A             (      ZSTRING.ASM):00131                 LDA     MPCH
3320 3402             (      ZSTRING.ASM):00132                 PSHS    A
3322 962A             (      ZSTRING.ASM):00133                 LDA     CSPERM
3324 D62B             (      ZSTRING.ASM):00134                 LDB     STBYTF
3326 9E1B             (      ZSTRING.ASM):00135                 LDX     MPCM
3328 109E2C           (      ZSTRING.ASM):00136                 LDY     ZSTWRD
332B 3436             (      ZSTRING.ASM):00137                 PSHS    Y,X,B,A
                      (      ZSTRING.ASM):00138         
332D BD328E           (      ZSTRING.ASM):00139                 JSR     SETSTR                            ; PRINT THE F-WORD
3330 BD329D           (      ZSTRING.ASM):00140                 JSR     PZSTR                             ; POINTED TO BY [TEMP]
                      (      ZSTRING.ASM):00141         
                      (      ZSTRING.ASM):00142         ; RESTORE THE OLD Z-STRING
                      (      ZSTRING.ASM):00143         
3333 3536             (      ZSTRING.ASM):00144                 PULS    Y,X,B,A
3335 109F2C           (      ZSTRING.ASM):00145                 STY     ZSTWRD
3338 9F1B             (      ZSTRING.ASM):00146                 STX     MPCM
333A D72B             (      ZSTRING.ASM):00147                 STB     STBYTF
333C 972A             (      ZSTRING.ASM):00148                 STA     CSPERM
333E 3502             (      ZSTRING.ASM):00149                 PULS    A
3340 971A             (      ZSTRING.ASM):00150                 STA     MPCH
                      (      ZSTRING.ASM):00151         
3342 86FF             (      ZSTRING.ASM):00152                 LDA     #$FF
3344 9729             (      ZSTRING.ASM):00153                 STA     CSTEMP                            ; DISABLE TEMP CHARSET
3346 0F1F             (      ZSTRING.ASM):00154                 CLR     MPCFLG                            ; MPC HAS CHANGED!
3348 7E32A5           (      ZSTRING.ASM):00155                 JMP     PZSTRL                            ; CONTINUE INNOCENTLY
                      (      ZSTRING.ASM):00156         
                      (      ZSTRING.ASM):00157         ; ----------------------
                      (      ZSTRING.ASM):00158         ; RETURN CURRENT CHARSET
                      (      ZSTRING.ASM):00159         ; ----------------------
                      (      ZSTRING.ASM):00160         
334B                  (      ZSTRING.ASM):00161         GETMOD:
334B 9629             (      ZSTRING.ASM):00162                 LDA     CSTEMP
334D 2A03             (      ZSTRING.ASM):00163                 BPL     GM
334F 962A             (      ZSTRING.ASM):00164                 LDA     CSPERM
3351 39               (      ZSTRING.ASM):00165                 RTS
                      (      ZSTRING.ASM):00166         
3352                  (      ZSTRING.ASM):00167         GM:
3352 C6FF             (      ZSTRING.ASM):00168                 LDB     #$FF
3354 D729             (      ZSTRING.ASM):00169                 STB     CSTEMP
3356 39               (      ZSTRING.ASM):00170                 RTS
                      (      ZSTRING.ASM):00171         
                      (      ZSTRING.ASM):00172         ; ---------------
                      (      ZSTRING.ASM):00173         ; GET NEXT Z-CHAR
                      (      ZSTRING.ASM):00174         ; ---------------
                      (      ZSTRING.ASM):00175         
3357                  (      ZSTRING.ASM):00176         GETZCH:
3357 962B             (      ZSTRING.ASM):00177                 LDA     STBYTF                            ; WHICH BYTE?
3359 2A02             (      ZSTRING.ASM):00178                 BPL     GTZ0
335B 53               (      ZSTRING.ASM):00179                 COMB                                      ; SET CARRY
335C 39               (      ZSTRING.ASM):00180                 RTS                                       ; TO INDICATE "NO MORE CHARS"
                      (      ZSTRING.ASM):00181         
335D                  (      ZSTRING.ASM):00182         GTZ0:
335D 260F             (      ZSTRING.ASM):00183                 BNE     GETZH1                            ; NOT FIRST CHAR
335F 0C2B             (      ZSTRING.ASM):00184                 INC     STBYTF
3361 BD3198           (      ZSTRING.ASM):00185                 JSR     GETWRD
3364 DC3F             (      ZSTRING.ASM):00186                 LDD     TEMP
3366 DD2C             (      ZSTRING.ASM):00187                 STD     ZSTWRD
3368 44               (      ZSTRING.ASM):00188                 LSRA
3369 44               (      ZSTRING.ASM):00189                 LSRA
336A                  (      ZSTRING.ASM):00190         GTEXIT:
336A 841F             (      ZSTRING.ASM):00191                 ANDA    #%00011111
336C 5F               (      ZSTRING.ASM):00192                 CLRB                                      ; CLEAR CARRY
336D 39               (      ZSTRING.ASM):00193                 RTS
                      (      ZSTRING.ASM):00194         
336E                  (      ZSTRING.ASM):00195         GETZH1:
336E 4A               (      ZSTRING.ASM):00196                 DECA
336F 2614             (      ZSTRING.ASM):00197                 BNE     GETZH2                            ; MUST BE LAST CHAR
3371 8602             (      ZSTRING.ASM):00198                 LDA     #2
3373 972B             (      ZSTRING.ASM):00199                 STA     STBYTF
3375 DC2C             (      ZSTRING.ASM):00200                 LDD     ZSTWRD
3377 44               (      ZSTRING.ASM):00201                 LSRA
3378 56               (      ZSTRING.ASM):00202                 RORB
3379 962C             (      ZSTRING.ASM):00203                 LDA     ZSTWRD
337B 44               (      ZSTRING.ASM):00204                 LSRA
337C 44               (      ZSTRING.ASM):00205                 LSRA
337D 56               (      ZSTRING.ASM):00206                 RORB
337E 54               (      ZSTRING.ASM):00207                 LSRB
337F 54               (      ZSTRING.ASM):00208                 LSRB
3380 54               (      ZSTRING.ASM):00209                 LSRB
3381                  (      ZSTRING.ASM):00210         GETZH3:
3381 1F98             (      ZSTRING.ASM):00211                 TFR     B,A                               ; EXPECTED HERE
3383 20E5             (      ZSTRING.ASM):00212                 BRA     GTEXIT
                      (      ZSTRING.ASM):00213         
3385                  (      ZSTRING.ASM):00214         GETZH2:
3385 0F2B             (      ZSTRING.ASM):00215                 CLR     STBYTF
3387 DC2C             (      ZSTRING.ASM):00216                 LDD     ZSTWRD
3389 2AF6             (      ZSTRING.ASM):00217                 BPL     GETZH3
338B 032B             (      ZSTRING.ASM):00218                 COM     STBYTF                            ; INDICATE END OF STRING
338D 20F2             (      ZSTRING.ASM):00219                 BRA     GETZH3
                      (      ZSTRING.ASM):00220         
                      (      ZSTRING.ASM):00221         ; -------------------
                      (      ZSTRING.ASM):00222         ; CONVERT TO Z-STRING
                      (      ZSTRING.ASM):00223         ; -------------------
                      (      ZSTRING.ASM):00224         
338F                  (      ZSTRING.ASM):00225         CONZST:
338F CC0505           (      ZSTRING.ASM):00226                 LDD     #$0505                            ; FILL OUTPUT BUFFER
3392 DD34             (      ZSTRING.ASM):00227                 STD     ZSTBUO                            ; WITH PAD CHARS
3394 DD36             (      ZSTRING.ASM):00228                 STD     ZSTBUO+2
3396 DD38             (      ZSTRING.ASM):00229                 STD     ZSTBUO+4
                      (      ZSTRING.ASM):00230         
3398 4C               (      ZSTRING.ASM):00231                 INCA                                      ; = 6
3399 9743             (      ZSTRING.ASM):00232                 STA     MASK                              ; INIT CHAR COUNT
                      (      ZSTRING.ASM):00233         
339B 0F3D             (      ZSTRING.ASM):00234                 CLR     VAL                               ; RESET OUTPUT AND
339D 0F3F             (      ZSTRING.ASM):00235                 CLR     TEMP                              ; INPUT INDEXES
                      (      ZSTRING.ASM):00236         
339F                  (      ZSTRING.ASM):00237         CNZSL1:
339F D63F             (      ZSTRING.ASM):00238                 LDB     TEMP
33A1 0C3F             (      ZSTRING.ASM):00239                 INC     TEMP
33A3 8E002E           (      ZSTRING.ASM):00240                 LDX     #ZSTBUI                           ; POINT TO INPUT BUFFER
33A6 A685             (      ZSTRING.ASM):00241                 LDA     B,X                               ; GRAB NEXT CHAR
33A8 9744             (      ZSTRING.ASM):00242                 STA     MASK+1                            ; SAVE IT HERE
33AA 2604             (      ZSTRING.ASM):00243                 BNE     CNZSL2                            ; IF CHAR WAS ZERO,
33AC 8605             (      ZSTRING.ASM):00244                 LDA     #5                                ; USE A Z-PAD
33AE 2025             (      ZSTRING.ASM):00245                 BRA     CNZSLO
                      (      ZSTRING.ASM):00246         
33B0                  (      ZSTRING.ASM):00247         CNZSL2:
33B0 9644             (      ZSTRING.ASM):00248                 LDA     MASK+1
33B2 BD3430           (      ZSTRING.ASM):00249                 JSR     ZCHRCS                            ; WHICH CHARSET TO USE?
33B5 4D               (      ZSTRING.ASM):00250                 TSTA
33B6 2711             (      ZSTRING.ASM):00251                 BEQ     CNZSLC                            ; IF CHARSET 0, USE LOWER CASE
33B8 8B03             (      ZSTRING.ASM):00252                 ADDA    #3
33BA D63D             (      ZSTRING.ASM):00253                 LDB     VAL                               ; OUTPUT A TEMP SHIFT
33BC 8E0034           (      ZSTRING.ASM):00254                 LDX     #ZSTBUO
33BF A785             (      ZSTRING.ASM):00255                 STA     B,X
33C1 0C3D             (      ZSTRING.ASM):00256                 INC     VAL
33C3 0A43             (      ZSTRING.ASM):00257                 DEC     MASK
33C5 10270084         (      ZSTRING.ASM):00258                 LBEQ    CNZSLE
                      (      ZSTRING.ASM):00259         
33C9                  (      ZSTRING.ASM):00260         CNZSLC:
33C9 9644             (      ZSTRING.ASM):00261                 LDA     MASK+1
33CB BD3430           (      ZSTRING.ASM):00262                 JSR     ZCHRCS
33CE 4A               (      ZSTRING.ASM):00263                 DECA
33CF 2A13             (      ZSTRING.ASM):00264                 BPL     CNZSC1                            ; NOT CHARSET 0!
33D1 9644             (      ZSTRING.ASM):00265                 LDA     MASK+1
33D3 805B             (      ZSTRING.ASM):00266                 SUBA    #$61-6                            ; ASCII "a" MINUS 6
                      (      ZSTRING.ASM):00267         
33D5                  (      ZSTRING.ASM):00268         CNZSLO:
33D5 D63D             (      ZSTRING.ASM):00269                 LDB     VAL
33D7 8E0034           (      ZSTRING.ASM):00270                 LDX     #ZSTBUO
33DA A785             (      ZSTRING.ASM):00271                 STA     B,X
33DC 0C3D             (      ZSTRING.ASM):00272                 INC     VAL
33DE 0A43             (      ZSTRING.ASM):00273                 DEC     MASK
33E0 276B             (      ZSTRING.ASM):00274                 BEQ     CNZSLE                            ; ALL FINISHED
33E2 20BB             (      ZSTRING.ASM):00275                 BRA     CNZSL1                            ; ELSE LOOP BACK FOR MORE
                      (      ZSTRING.ASM):00276         
33E4                  (      ZSTRING.ASM):00277         CNZSC1:
33E4 2606             (      ZSTRING.ASM):00278                 BNE     CNZSC3                            ; MUST BE CHARSET 3
33E6 9644             (      ZSTRING.ASM):00279                 LDA     MASK+1
33E8 803B             (      ZSTRING.ASM):00280                 SUBA    #$41-6                            ; ASCII "A" MINUS 6
33EA 20E9             (      ZSTRING.ASM):00281                 BRA     CNZSLO
                      (      ZSTRING.ASM):00282         
33EC                  (      ZSTRING.ASM):00283         CNZSC3:
33EC 9644             (      ZSTRING.ASM):00284                 LDA     MASK+1
33EE BD341E           (      ZSTRING.ASM):00285                 JSR     CNZS2M                            ; IS IT IN TABLE?
33F1 26E2             (      ZSTRING.ASM):00286                 BNE     CNZSLO                            ; YES, OUTPUT THE CHAR
33F3 8606             (      ZSTRING.ASM):00287                 LDA     #6                                ; ELSE IT'S A "DIRECT" ASCII CHAR
33F5 D63D             (      ZSTRING.ASM):00288                 LDB     VAL
33F7 8E0034           (      ZSTRING.ASM):00289                 LDX     #ZSTBUO
33FA A785             (      ZSTRING.ASM):00290                 STA     B,X                               ; SEND "DIRECT" TO OUTPUT
33FC 0C3D             (      ZSTRING.ASM):00291                 INC     VAL
33FE 0A43             (      ZSTRING.ASM):00292                 DEC     MASK
3400 274B             (      ZSTRING.ASM):00293                 BEQ     CNZSLE                            ; NO MORE ROOM!
                      (      ZSTRING.ASM):00294         
                      (      ZSTRING.ASM):00295         ; CONVERT CHAR TO 2-BYTE DIRECT ASCII
                      (      ZSTRING.ASM):00296         
3402 9644             (      ZSTRING.ASM):00297                 LDA     MASK+1
3404 44               (      ZSTRING.ASM):00298                 LSRA
3405 44               (      ZSTRING.ASM):00299                 LSRA
3406 44               (      ZSTRING.ASM):00300                 LSRA
3407 44               (      ZSTRING.ASM):00301                 LSRA
3408 44               (      ZSTRING.ASM):00302                 LSRA
3409 8403             (      ZSTRING.ASM):00303                 ANDA    #%00000011
340B D63D             (      ZSTRING.ASM):00304                 LDB     VAL
340D 8E0034           (      ZSTRING.ASM):00305                 LDX     #ZSTBUO
3410 A785             (      ZSTRING.ASM):00306                 STA     B,X
3412 0C3D             (      ZSTRING.ASM):00307                 INC     VAL
3414 0A43             (      ZSTRING.ASM):00308                 DEC     MASK
3416 2735             (      ZSTRING.ASM):00309                 BEQ     CNZSLE                            ; NO MORE ROOM!
3418 9644             (      ZSTRING.ASM):00310                 LDA     MASK+1
341A 841F             (      ZSTRING.ASM):00311                 ANDA    #%00011111                        ; FORM 2ND Z-BYTE
341C 20B7             (      ZSTRING.ASM):00312                 BRA     CNZSLO                            ; AND OUTPUT IT
                      (      ZSTRING.ASM):00313         
                      (      ZSTRING.ASM):00314         ; ----------------------
                      (      ZSTRING.ASM):00315         ; SEARCH CHARSET 3 TABLE
                      (      ZSTRING.ASM):00316         ; ----------------------
                      (      ZSTRING.ASM):00317         
341E                  (      ZSTRING.ASM):00318         CNZS2M:
341E 8E346A           (      ZSTRING.ASM):00319                 LDX     #CHRTBL
3421 C619             (      ZSTRING.ASM):00320                 LDB     #25
3423                  (      ZSTRING.ASM):00321         CNLOOP:
3423 A185             (      ZSTRING.ASM):00322                 CMPA    B,X
3425 2704             (      ZSTRING.ASM):00323                 BEQ     CNOK
3427 5A               (      ZSTRING.ASM):00324                 DECB
3428 26F9             (      ZSTRING.ASM):00325                 BNE     CNLOOP
342A 39               (      ZSTRING.ASM):00326                 RTS                                       ; RETURN ZERO IN B IF NO MATCH
                      (      ZSTRING.ASM):00327         
342B                  (      ZSTRING.ASM):00328         CNOK:
342B 1F98             (      ZSTRING.ASM):00329                 TFR     B,A                               ; EXPECTED IN [A]
342D 8B06             (      ZSTRING.ASM):00330                 ADDA    #6                                ; CONVERT TO Z-CHAR
342F 39               (      ZSTRING.ASM):00331                 RTS
                      (      ZSTRING.ASM):00332         
                      (      ZSTRING.ASM):00333         ; -------------------------
                      (      ZSTRING.ASM):00334         ; DETERMINE CHARSET OF CHAR
                      (      ZSTRING.ASM):00335         ; -------------------------
                      (      ZSTRING.ASM):00336         
3430                  (      ZSTRING.ASM):00337         ZCHRCS:
3430 8161             (      ZSTRING.ASM):00338                 CMPA    #$61                              ; ASCII "a"
3432 2506             (      ZSTRING.ASM):00339                 BLO     ZCHR1
3434 817B             (      ZSTRING.ASM):00340                 CMPA    #$7B                              ; ASCII "z"+1
3436 2402             (      ZSTRING.ASM):00341                 BHS     ZCHR1
3438 4F               (      ZSTRING.ASM):00342                 CLRA                                      ; IT'S CHARSET 0
3439 39               (      ZSTRING.ASM):00343                 RTS
                      (      ZSTRING.ASM):00344         
343A                  (      ZSTRING.ASM):00345         ZCHR1:
343A 8141             (      ZSTRING.ASM):00346                 CMPA    #$41                              ; ASCII "A"
343C 2507             (      ZSTRING.ASM):00347                 BLO     ZCHR2
343E 815B             (      ZSTRING.ASM):00348                 CMPA    #$5B                              ; ASCII "Z"+1
3440 2403             (      ZSTRING.ASM):00349                 BHS     ZCHR2
3442 8601             (      ZSTRING.ASM):00350                 LDA     #1                                ; IT'S CHARSET 1
3444 39               (      ZSTRING.ASM):00351                 RTS
                      (      ZSTRING.ASM):00352         
3445                  (      ZSTRING.ASM):00353         ZCHR2:
3445 4D               (      ZSTRING.ASM):00354                 TSTA
3446 2704             (      ZSTRING.ASM):00355                 BEQ     ZCHRX                             ; EXIT IF ZERO
3448 2B02             (      ZSTRING.ASM):00356                 BMI     ZCHRX                             ; OR NEGATIVE
344A 8602             (      ZSTRING.ASM):00357                 LDA     #2                                ; ELSE IT'S CHARSET 2
344C                  (      ZSTRING.ASM):00358         ZCHRX:
344C 39               (      ZSTRING.ASM):00359                 RTS
                      (      ZSTRING.ASM):00360         
                      (      ZSTRING.ASM):00361         ; ---------------
                      (      ZSTRING.ASM):00362         ; CRUSH 6 Z-CHARS
                      (      ZSTRING.ASM):00363         ; ---------------
                      (      ZSTRING.ASM):00364         
344D                  (      ZSTRING.ASM):00365         CNZSLE:
344D DC34             (      ZSTRING.ASM):00366                 LDD     ZSTBUO                            ; HANDLE 1ST TRIPLET
344F 58               (      ZSTRING.ASM):00367                 ASLB
3450 58               (      ZSTRING.ASM):00368                 ASLB
3451 58               (      ZSTRING.ASM):00369                 ASLB
3452 58               (      ZSTRING.ASM):00370                 ASLB
3453 49               (      ZSTRING.ASM):00371                 ROLA
3454 58               (      ZSTRING.ASM):00372                 ASLB
3455 49               (      ZSTRING.ASM):00373                 ROLA
3456 DA36             (      ZSTRING.ASM):00374                 ORB     ZSTBUO+2
3458 DD34             (      ZSTRING.ASM):00375                 STD     ZSTBUO
                      (      ZSTRING.ASM):00376         
345A DC37             (      ZSTRING.ASM):00377                 LDD     ZSTBUO+3                          ; HANDLE 2ND TRIPLET
345C 58               (      ZSTRING.ASM):00378                 ASLB
345D 58               (      ZSTRING.ASM):00379                 ASLB
345E 58               (      ZSTRING.ASM):00380                 ASLB
345F 58               (      ZSTRING.ASM):00381                 ASLB
3460 49               (      ZSTRING.ASM):00382                 ROLA
3461 58               (      ZSTRING.ASM):00383                 ASLB
3462 49               (      ZSTRING.ASM):00384                 ROLA
3463 DA39             (      ZSTRING.ASM):00385                 ORB     ZSTBUO+5
3465 8A80             (      ZSTRING.ASM):00386                 ORA     #%10000000                        ; SET SIGN BIT OF LAST Z-BYTE
3467 DD36             (      ZSTRING.ASM):00387                 STD     ZSTBUO+2
3469 39               (      ZSTRING.ASM):00388                 RTS
                      (      ZSTRING.ASM):00389         
                      (      ZSTRING.ASM):00390         ; ----------------------
                      (      ZSTRING.ASM):00391         ; CHARSET 2 DECODE TABLE
                      (      ZSTRING.ASM):00392         ; ----------------------
                      (      ZSTRING.ASM):00393         
346A                  (      ZSTRING.ASM):00394         CHRTBL:
346A 00               (      ZSTRING.ASM):00395                 FCB     0                                 ; DUMMY BYTE
346B 0D               (      ZSTRING.ASM):00396                 FCB     $0D                               ; CARRIAGE RETURN
346C 3031323334353637 (      ZSTRING.ASM):00397                 FCC     "0123456789.,!?_#"
     38392E2C213F5F23
347C 27               (      ZSTRING.ASM):00398                 FCB     $27                               ; SINGLE QUOTE
347D 22               (      ZSTRING.ASM):00399                 FCB     $22                               ; DOUBLE QUOTE
347E 2F5C2D3A2829     (      ZSTRING.ASM):00400                 FCC     "/\-:()"
                      (     cubixzip.asm):00066                 INCLUDE OBJECTS.ASM
                      (      OBJECTS.ASM):00001         ;       PAGE
                      (      OBJECTS.ASM):00002         ;       SBTTL "--- OBJECT & PROPERTY HANDLERS ---"
                      (      OBJECTS.ASM):00003         
3484                  (      OBJECTS.ASM):00004         PROPB:
3484 9603             (      OBJECTS.ASM):00005                 LDA     ARG1+1
3486 BD34E7           (      OBJECTS.ASM):00006                 JSR     OBJLOC
3489 9E3F             (      OBJECTS.ASM):00007                 LDX     TEMP
348B EC07             (      OBJECTS.ASM):00008                 LDD     7,X
348D C33F00           (      OBJECTS.ASM):00009                 ADDD    #ZCODE
3490 DD3F             (      OBJECTS.ASM):00010                 STD     TEMP                              ; EXPECTED HERE
3492 1F01             (      OBJECTS.ASM):00011                 TFR     D,X
3494 E684             (      OBJECTS.ASM):00012                 LDB     ,X                                ; GET FIRST BYTE (LENGTH OF DESC)
3496 58               (      OBJECTS.ASM):00013                 ASLB                                      ; WORD-ALIGN IT
3497 5C               (      OBJECTS.ASM):00014                 INCB                                      ; AND POINT JUST PAST IT
3498 39               (      OBJECTS.ASM):00015                 RTS
                      (      OBJECTS.ASM):00016         
3499                  (      OBJECTS.ASM):00017         PROPN:
3499 9E3F             (      OBJECTS.ASM):00018                 LDX     TEMP
349B 3A               (      OBJECTS.ASM):00019                 ABX
349C A684             (      OBJECTS.ASM):00020                 LDA     ,X
349E 841F             (      OBJECTS.ASM):00021                 ANDA    #%00011111
34A0 39               (      OBJECTS.ASM):00022                 RTS
                      (      OBJECTS.ASM):00023         
34A1                  (      OBJECTS.ASM):00024         PROPL:
34A1 9E3F             (      OBJECTS.ASM):00025                 LDX     TEMP
34A3 3A               (      OBJECTS.ASM):00026                 ABX
34A4 A684             (      OBJECTS.ASM):00027                 LDA     ,X
34A6 46               (      OBJECTS.ASM):00028                 RORA
34A7 46               (      OBJECTS.ASM):00029                 RORA
34A8 46               (      OBJECTS.ASM):00030                 RORA
34A9 46               (      OBJECTS.ASM):00031                 RORA
34AA 46               (      OBJECTS.ASM):00032                 RORA
34AB 8407             (      OBJECTS.ASM):00033                 ANDA    #%00000111
34AD 39               (      OBJECTS.ASM):00034                 RTS
                      (      OBJECTS.ASM):00035         
34AE                  (      OBJECTS.ASM):00036         PROPNX:
34AE 8DF1             (      OBJECTS.ASM):00037                 BSR     PROPL
34B0 973D             (      OBJECTS.ASM):00038                 STA     VAL
34B2                  (      OBJECTS.ASM):00039         PPX:
34B2 5C               (      OBJECTS.ASM):00040                 INCB
34B3 0A3D             (      OBJECTS.ASM):00041                 DEC     VAL
34B5 2AFB             (      OBJECTS.ASM):00042                 BPL     PPX
34B7 5C               (      OBJECTS.ASM):00043                 INCB
34B8 39               (      OBJECTS.ASM):00044                 RTS
                      (      OBJECTS.ASM):00045         
34B9                  (      OBJECTS.ASM):00046         FLAGSU:
34B9 9603             (      OBJECTS.ASM):00047                 LDA     ARG1+1
34BB BD34E7           (      OBJECTS.ASM):00048                 JSR     OBJLOC
34BE 9605             (      OBJECTS.ASM):00049                 LDA     ARG2+1
34C0 8110             (      OBJECTS.ASM):00050                 CMPA    #16
34C2 2508             (      OBJECTS.ASM):00051                 BLO     FLGSU1
34C4 8010             (      OBJECTS.ASM):00052                 SUBA    #16
34C6 9E3F             (      OBJECTS.ASM):00053                 LDX     TEMP
34C8 3002             (      OBJECTS.ASM):00054                 LEAX    2,X
34CA 9F3F             (      OBJECTS.ASM):00055                 STX     TEMP
                      (      OBJECTS.ASM):00056         
34CC                  (      OBJECTS.ASM):00057         FLGSU1:
34CC 973E             (      OBJECTS.ASM):00058                 STA     VAL+1
34CE CC0001           (      OBJECTS.ASM):00059                 LDD     #1
34D1 DD43             (      OBJECTS.ASM):00060                 STD     MASK
34D3 C60F             (      OBJECTS.ASM):00061                 LDB     #15
34D5 D03E             (      OBJECTS.ASM):00062                 SUBB    VAL+1
                      (      OBJECTS.ASM):00063         
34D7                  (      OBJECTS.ASM):00064         FLGSU2:
34D7 2707             (      OBJECTS.ASM):00065                 BEQ     FLGSU3
34D9 0844             (      OBJECTS.ASM):00066                 ASL     MASK+1
34DB 0943             (      OBJECTS.ASM):00067                 ROL     MASK
34DD 5A               (      OBJECTS.ASM):00068                 DECB
34DE 20F7             (      OBJECTS.ASM):00069                 BRA     FLGSU2
                      (      OBJECTS.ASM):00070         
34E0                  (      OBJECTS.ASM):00071         FLGSU3:
34E0 9E3F             (      OBJECTS.ASM):00072                 LDX     TEMP
34E2 EC84             (      OBJECTS.ASM):00073                 LDD     ,X
34E4 DD3D             (      OBJECTS.ASM):00074                 STD     VAL
34E6 39               (      OBJECTS.ASM):00075                 RTS
                      (      OBJECTS.ASM):00076         
34E7                  (      OBJECTS.ASM):00077         OBJLOC:
34E7 C609             (      OBJECTS.ASM):00078                 LDB     #9                                ; NUMBER IN [A] TIMES 9
34E9 3D               (      OBJECTS.ASM):00079                 MUL
34EA C30035           (      OBJECTS.ASM):00080                 ADDD    #53                               ; PLUS 53
34ED F33F0A           (      OBJECTS.ASM):00081                 ADDD    ZCODE+ZOBJEC                      ; Z-ADDRESS OF OBJECT TABLE
34F0 C33F00           (      OBJECTS.ASM):00082                 ADDD    #ZCODE                            ; FORM ABSOLUTE ADDRESS
34F3 DD3F             (      OBJECTS.ASM):00083                 STD     TEMP
34F5 39               (      OBJECTS.ASM):00084                 RTS
                      (     cubixzip.asm):00067         
                      (     cubixzip.asm):00068         ;TITLE "ZIP/6809-B INFOCOM, INC. --- CUBIX DEPENDENT"
                      (     cubixzip.asm):00069                 INCLUDE IO.ASM
                      (           IO.ASM):00001         ;       PAGE
                      (           IO.ASM):00002         ;       SBTTL "--- OS EQUATES ---"
                      (           IO.ASM):00003         
     000D             (           IO.ASM):00004         EOL             EQU $0D                           ; END-OF-LINE CHARACTER
     0008             (           IO.ASM):00005         BS              EQU $08                           ; BACKSPACE CHARACTER
     0020             (           IO.ASM):00006         SPACE           EQU $20                           ; SPACE CHARACTER
                      (           IO.ASM):00007         
                      (           IO.ASM):00008         ;        PAGE
                      (           IO.ASM):00009         ;        SBTTL   "I/O PRIMITIVES"
                      (           IO.ASM):00010         
                      (           IO.ASM):00011         
                      (           IO.ASM):00012         
                      (           IO.ASM):00013         ; --------------------
                      (           IO.ASM):00014         ; ACCESS OS CHAR-PRINT
                      (           IO.ASM):00015         ; --------------------
                      (           IO.ASM):00016         
                      (           IO.ASM):00017         
34F6                  (           IO.ASM):00018         OUTCHR:
34F6 3477             (           IO.ASM):00019                 PSHS    A,B,X,Y,U,CC
34F8 3F               (           IO.ASM):00020                 SWI
34F9 21               (           IO.ASM):00021                 FCB     33                                ;DISPLAY
34FA 3577             (           IO.ASM):00022                 PULS    A,B,X,Y,U,CC
34FC 39               (           IO.ASM):00023                 RTS
                      (           IO.ASM):00024         
                      (           IO.ASM):00025         ; -----------------
                      (           IO.ASM):00026         ; READ A SINGLE KEY
                      (           IO.ASM):00027         ; -----------------
                      (           IO.ASM):00028         
                      (           IO.ASM):00029         ; EXIT: KEYCODE IN [A]
                      (           IO.ASM):00030         
34FD                  (           IO.ASM):00031         BADKEY:
34FD BD35D9           (           IO.ASM):00032                 JSR     BOOP                              ; RAZZ
3500 2002             (           IO.ASM):00033                 BRA     GK                                ; AND TRY AGAIN
                      (           IO.ASM):00034         
3502                  (           IO.ASM):00035         GETKEY:
3502 3475             (           IO.ASM):00036                 PSHS    U,X,Y,B,CC                        ; SAVE THESE
                      (           IO.ASM):00037         
                      (           IO.ASM):00038         
3504                  (           IO.ASM):00039         GK:
3504 3F               (           IO.ASM):00040                 SWI
3505 23               (           IO.ASM):00041                 FCB     35
3506 2708             (           IO.ASM):00042                 BEQ     KTEST                             ; got a key
3508 0C58             (           IO.ASM):00043                 INC     RAND1                             ; GENERATE RANDOMNESS
350A 2602             (           IO.ASM):00044                 BNE     >
350C 0C59             (           IO.ASM):00045                 INC     RAND2
                      (           IO.ASM):00046         !
350E 20F4             (           IO.ASM):00047                 BRA     GK
3510                  (           IO.ASM):00048         KTEST:
3510 3F               (           IO.ASM):00049                 SWI
3511 22               (           IO.ASM):00050                 FCB     34
3512 9755             (           IO.ASM):00051                 STA     IOCHAR                            ; STORE THE KEYPRESS
                      (           IO.ASM):00052         
                      (           IO.ASM):00053         
                      (           IO.ASM):00054         ; KEYCODE IN [A]
                      (           IO.ASM):00055         
3514                  (           IO.ASM):00056         QKEY:
3514 810D             (           IO.ASM):00057                 CMPA    #EOL                              ; "ENTER" IS FINE
3516 2718             (           IO.ASM):00058                 BEQ     CLICK
3518 8108             (           IO.ASM):00059                 CMPA    #BS                               ; SO IS "LEFT ARROW"
351A 2714             (           IO.ASM):00060                 BEQ     CLICK
                      (           IO.ASM):00061         
351C 8161             (           IO.ASM):00062                 CMPA    #$61                              ; LOWER-CASE ALPHA?
351E 2508             (           IO.ASM):00063                 BLO     PKICK                             ; NO, CHECK FOR OTHERS
3520 817B             (           IO.ASM):00064                 CMPA    #$7B                              ; NOTHING ABOVE "z" IS LEGAL
3522 24D9             (           IO.ASM):00065                 BHS     BADKEY
3524 8020             (           IO.ASM):00066                 SUBA    #$20                              ; CONVERT TO UPPER-CASE ALPHA
3526 2008             (           IO.ASM):00067                 BRA     CLICK
                      (           IO.ASM):00068         
3528                  (           IO.ASM):00069         PKICK:
3528 815B             (           IO.ASM):00070                 CMPA    #$5B                              ; NOTHING BETWEEN "Z" AND "a"
352A 24D1             (           IO.ASM):00071                 BHS     BADKEY                            ; IS LEGAL
352C 8120             (           IO.ASM):00072                 CMPA    #$20                              ; NOTHING BELOW "SPACE"
352E 25CD             (           IO.ASM):00073                 BLO     BADKEY                            ; IS LEGAL EITHER
                      (           IO.ASM):00074         
                      (           IO.ASM):00075         ; "CLICK" SOUND FOR KEYS
                      (           IO.ASM):00076         
3530                  (           IO.ASM):00077         CLICK:
3530 3575             (           IO.ASM):00078                 PULS    U,X,Y,B,CC                        ; RESTORE THINGS
3532 9655             (           IO.ASM):00079                 LDA     IOCHAR                            ; RETRIEVE THE KEYPRESS
3534 39               (           IO.ASM):00080                 RTS
                      (           IO.ASM):00081         
                      (           IO.ASM):00082         
                      (           IO.ASM):00083         ; DELAY FOR KEYCLICK
                      (           IO.ASM):00084         
3535                  (           IO.ASM):00085         CDELAY:
3535 8E0100           (           IO.ASM):00086                 LDX     #CFREQ
3538                  (           IO.ASM):00087         CDEL:
3538 301F             (           IO.ASM):00088                 LEAX    -1,X
353A 26FC             (           IO.ASM):00089                 BNE     CDEL
353C 39               (           IO.ASM):00090                 RTS
                      (           IO.ASM):00091         
                      (           IO.ASM):00092         ; -------------------
                      (           IO.ASM):00093         ; READ A LINE OF TEXT
                      (           IO.ASM):00094         ; -------------------
                      (           IO.ASM):00095         
                      (           IO.ASM):00096         ; ENTRY: [ARG1] HAS ADDRESS OF CHAR BUFFER
                      (           IO.ASM):00097         ;        LENGTH OF BUFFER IN 1ST BYTE
                      (           IO.ASM):00098         ; EXIT: # CHARS READ IN [A]
                      (           IO.ASM):00099         
353D                  (           IO.ASM):00100         INPUT:
353D 0F54             (           IO.ASM):00101                 CLR     LINCNT                            ; RESET LINE COUNTER
353F 9E02             (           IO.ASM):00102                 LDX     ARG1                              ; GET ADDRESS OF INPUT BUFFER
3541 E680             (           IO.ASM):00103                 LDB     ,X+                               ; GET MAX # CHARS
3543 C002             (           IO.ASM):00104                 SUBB    #2                                ; LEAVE A MARGIN FOR ERROR
3545 D753             (           IO.ASM):00105                 STB     BINDEX                            ; SAVE MAX # CHARS
                      (           IO.ASM):00106         
3547 5F               (           IO.ASM):00107                 CLRB                                      ; RESET       INDEX
3548                  (           IO.ASM):00108         INLOOP:
3548 BD3502           (           IO.ASM):00109                 JSR     GETKEY                            ; KEY IN [A] AND [IOCHAR]
354B 810D             (           IO.ASM):00110                 CMPA    #EOL                              ; IF EOL,
354D 2732             (           IO.ASM):00111                 BEQ     ENDLIN                            ; LINE IS DONE
354F 8108             (           IO.ASM):00112                 CMPA    #BS                               ; IF BACKSPACE,
3551 2725             (           IO.ASM):00113                 BEQ     GOBACK                            ; TAKE CARE OF IT
                      (           IO.ASM):00114         
3553 8141             (           IO.ASM):00115                 CMPA    #$41                              ; IF LOWER THAN ASCII "A,"
3555 2502             (           IO.ASM):00116                 BLO     SENDCH                            ; SEND THE CHARACTER
3557 8B20             (           IO.ASM):00117                 ADDA    #$20                              ; ELSE CONVERT TO LOWER-CASE
                      (           IO.ASM):00118         
3559                  (           IO.ASM):00119         SENDCH:
3559 A785             (           IO.ASM):00120                 STA     B,X                               ; SEND CHAR TO BUFFER
355B 5C               (           IO.ASM):00121                 INCB                                      ; UPDATE INDEX
355C                  (           IO.ASM):00122         TOSCR:
355C 9655             (           IO.ASM):00123                 LDA     IOCHAR                            ; RETRIEVE KEY CHAR
355E 8D44             (           IO.ASM):00124                 BSR     CHAR                              ; ECHO CHAR TO SCREEN
3560 D153             (           IO.ASM):00125                 CMPB    BINDEX                            ; BUFFER FILLED?
3562 2404             (           IO.ASM):00126                 BHS     NOMORE                            ; YES -- INSIST ON BS OR EOL
3564 C13D             (           IO.ASM):00127                 CMPB    #61                               ; 2 SCREEN LINES FILLED?
3566 25E0             (           IO.ASM):00128                 BLO     INLOOP                            ; NO, KEEP GOING
                      (           IO.ASM):00129         
                      (           IO.ASM):00130         ; LINE FULL; INSIST ON EOL OR BACKSPACE
                      (           IO.ASM):00131         
3568                  (           IO.ASM):00132         NOMORE:
3568 BD3502           (           IO.ASM):00133                 JSR     GETKEY                            ; GET NEXT KEY
356B 810D             (           IO.ASM):00134                 CMPA    #EOL                              ; IF EOL,
356D 2712             (           IO.ASM):00135                 BEQ     ENDLIN                            ; WE'RE FINE
356F 8108             (           IO.ASM):00136                 CMPA    #BS                               ; BACKSPACE
3571 2705             (           IO.ASM):00137                 BEQ     GOBACK                            ; IS OKAY TOO
3573 BD35D9           (           IO.ASM):00138                 JSR     BOOP
3576 20F0             (           IO.ASM):00139                 BRA     NOMORE                            ; ELSE PERSIST
                      (           IO.ASM):00140         
                      (           IO.ASM):00141         ; HANDLE BACKSPACE
                      (           IO.ASM):00142         
3578                  (           IO.ASM):00143         GOBACK:
3578 5A               (           IO.ASM):00144                 DECB                                      ; BACK UP CHAR COUNT
3579 2AE1             (           IO.ASM):00145                 BPL     TOSCR                             ; SEND TO SCREEN IF NO UNDERFLOW
357B 5F               (           IO.ASM):00146                 CLRB                                      ; ELSE RESET COUNT
357C BD35D9           (           IO.ASM):00147                 JSR     BOOP                              ; RAZZ
357F 20C7             (           IO.ASM):00148                 BRA     INLOOP                            ; AND TRY AGAIN
                      (           IO.ASM):00149         
                      (           IO.ASM):00150         ; HANDLE EOL
                      (           IO.ASM):00151         
3581                  (           IO.ASM):00152         ENDLIN:
3581 A785             (           IO.ASM):00153                 STA     B,X                               ; PUT EOL IN BUFFER
3583 8D1F             (           IO.ASM):00154                 BSR     CHAR                              ; AND ON SCREEN
3585 5C               (           IO.ASM):00155                 INCB                                      ; UPDATE CHAR COUNT
3586 D753             (           IO.ASM):00156                 STB     BINDEX                            ; SAVE IT HERE
                      (           IO.ASM):00157         
                      (           IO.ASM):00158         ; FALL THROUGH TO ...
                      (           IO.ASM):00159         
                      (           IO.ASM):00160         ; ---------------------
                      (           IO.ASM):00161         ; SCRIPT A LINE OF TEXT
                      (           IO.ASM):00162         ; ---------------------
                      (           IO.ASM):00163         
                      (           IO.ASM):00164         ; ENTRY: ADDRESS OF TEXT IN [X]
                      (           IO.ASM):00165         ;        LENGTH OF LINE IN [BINDEX]
                      (           IO.ASM):00166         
3588                  (           IO.ASM):00167         TOPRIN:
3588 0D5E             (           IO.ASM):00168                 TST     SCRIPT                            ; SCRIPTING ENABLED?
358A 2714             (           IO.ASM):00169                 BEQ     INPEX                             ; NO, EXIT IMMEDIATELY
358C B63F11           (           IO.ASM):00170                 LDA     ZCODE+ZSCRIP+1                    ; GET FLAGS BYTE
358F 8401             (           IO.ASM):00171                 ANDA    #1                                ; BIT 0 SET?
3591 270D             (           IO.ASM):00172                 BEQ     INPEX                             ; NO, IGNORE THE FOLLOWING
                      (           IO.ASM):00173         ;        LDA     #$FE                              ; ELSE
                      (           IO.ASM):00174         ;        STA     DEVNUM                            ; POINT TO PRINTER
3593 D653             (           IO.ASM):00175                 LDB     BINDEX                            ; START AT 1ST BUFFER CHAR
                      (           IO.ASM):00176         
                      (           IO.ASM):00177         
3595                  (           IO.ASM):00178         SCROUT:
3595 A680             (           IO.ASM):00179                 LDA     ,X+                               ; GRAB A CHAR FROM BUFFER
3597 3477             (           IO.ASM):00180                 PSHS    A,B,X,Y,U,CC
3599 3F               (           IO.ASM):00181                 SWI
359A 21               (           IO.ASM):00182                 FCB     33                                ;DISPLAY
359B 3577             (           IO.ASM):00183                 PULS    A,B,X,Y,U,CC
359D 5A               (           IO.ASM):00184                 DECB
359E 26F5             (           IO.ASM):00185                 BNE     SCROUT
35A0                  (           IO.ASM):00186         INPEX:
                      (           IO.ASM):00187         ;        CLR     DEVNUM                            ; POINT BACK TO SCREEN
35A0 9653             (           IO.ASM):00188                 LDA     BINDEX                            ; RETRIEVE # CHARS IN LINE
35A2 39               (           IO.ASM):00189                 RTS
                      (           IO.ASM):00190         
35A3                  (           IO.ASM):00191         SFLAG
35A3 00               (           IO.ASM):00192                 FCB     0                                 ; FLAG TO SAVE SCRIPT STATE
                      (           IO.ASM):00193         
                      (           IO.ASM):00194         
                      (           IO.ASM):00195         ; -------------------
                      (           IO.ASM):00196         ; PRINT A SINGLE CHAR
                      (           IO.ASM):00197         ; -------------------
                      (           IO.ASM):00198         
                      (           IO.ASM):00199         ; ENTRY: ASCII CODE IN [A]
                      (           IO.ASM):00200         
35A4                  (           IO.ASM):00201         CHAR:
35A4 9755             (           IO.ASM):00202                 STA     IOCHAR                            ; SAVE CHAR HERE
35A6 810D             (           IO.ASM):00203                 CMPA    #$0D
35A8 2707             (           IO.ASM):00204                 BEQ     >
35AA 3477             (           IO.ASM):00205                 PSHS    A,B,X,Y,U,CC
35AC 3F               (           IO.ASM):00206                 SWI
35AD 21               (           IO.ASM):00207                 FCB     33
35AE 3577             (           IO.ASM):00208                 PULS    A,B,X,Y,U,CC
35B0 39               (           IO.ASM):00209                 RTS
                      (           IO.ASM):00210         !
35B1 3477             (           IO.ASM):00211                 PSHS    A,B,X,Y,U,CC
35B3 3F               (           IO.ASM):00212                 SWI
35B4 21               (           IO.ASM):00213                 FCB     33
35B5 860A             (           IO.ASM):00214                 LDA     #$0A
35B7 3F               (           IO.ASM):00215                 SWI
35B8 21               (           IO.ASM):00216                 FCB     33
35B9 3577             (           IO.ASM):00217                 PULS    A,B,X,Y,U,CC
35BB 39               (           IO.ASM):00218                 RTS
                      (           IO.ASM):00219         
                      (           IO.ASM):00220         
                      (           IO.ASM):00221         
                      (           IO.ASM):00222         ; FALL THROUGH TO ...
                      (           IO.ASM):00223         
                      (           IO.ASM):00224         ; -------------
                      (           IO.ASM):00225         ; PRINT MESSAGE
                      (           IO.ASM):00226         ; -------------
                      (           IO.ASM):00227         
                      (           IO.ASM):00228         ; ENTRY: ADDRESS OF ASCII MESSAGE IN [X]
                      (           IO.ASM):00229         ;        LENGTH OF MESSAGE IN [B]
                      (           IO.ASM):00230         
35BC                  (           IO.ASM):00231         LINE:
35BC D753             (           IO.ASM):00232                 STB     BINDEX                            ; SAVE LENGTH
35BE 5F               (           IO.ASM):00233                 CLRB                                      ; INIT INDEX
                      (           IO.ASM):00234         
35BF                  (           IO.ASM):00235         LN:
35BF A685             (           IO.ASM):00236                 LDA     B,X                               ; GET A CHAR
35C1 BD35A4           (           IO.ASM):00237                 JSR     CHAR
35C4 5C               (           IO.ASM):00238                 INCB
35C5 D153             (           IO.ASM):00239                 CMPB    BINDEX
35C7 25F6             (           IO.ASM):00240                 BLO     LN
35C9 7E3588           (           IO.ASM):00241                 JMP     TOPRIN                            ; HANDLE SCRIPTING
                      (           IO.ASM):00242         
                      (           IO.ASM):00243         ; ----------------
                      (           IO.ASM):00244         ; CLEAR THE SCREEN
                      (           IO.ASM):00245         ; ----------------
                      (           IO.ASM):00246         
35CC                  (           IO.ASM):00247         CLS:
35CC 3477             (           IO.ASM):00248                 PSHS    A,B,X,Y,U,CC
35CE 3F               (           IO.ASM):00249                 SWI
35CF 18               (           IO.ASM):00250                 FCB     24                                ;String to OS
35D0 1B               (           IO.ASM):00251                 FCB     27
35D1 5B324A00         (           IO.ASM):00252                 FCN     '[2J'
35D5 3577             (           IO.ASM):00253                 PULS    A,B,X,Y,U,CC
35D7 39               (           IO.ASM):00254                 RTS
                      (           IO.ASM):00255         
                      (           IO.ASM):00256         ; --------------
                      (           IO.ASM):00257         ; SOUND HANDLERS
                      (           IO.ASM):00258         ; --------------
                      (           IO.ASM):00259         
35D8                  (           IO.ASM):00260         AINIT:
35D8 39               (           IO.ASM):00261                 RTS
                      (           IO.ASM):00262         
                      (           IO.ASM):00263         ; DO THE RAZZ
35D9                  (           IO.ASM):00264         BOOP:
                      (           IO.ASM):00265         
                      (           IO.ASM):00266         ; put sound boop here
                      (           IO.ASM):00267         
35D9 39               (           IO.ASM):00268                 RTS
                      (           IO.ASM):00269         
                      (           IO.ASM):00270         ; TIME DELAY
                      (           IO.ASM):00271         
35DA                  (           IO.ASM):00272         DELAY:
35DA 8E1000           (           IO.ASM):00273                 LDX     #BFREQ                            ; INIT FREQUENCY
35DD                  (           IO.ASM):00274         DELOOP:
35DD 301F             (           IO.ASM):00275                 LEAX    -1,X
35DF 26FC             (           IO.ASM):00276                 BNE     DELOOP
35E1 39               (           IO.ASM):00277                 RTS
                      (           IO.ASM):00278         
                      (           IO.ASM):00279         ;-----------------------------------------------------------------------------
                      (     cubixzip.asm):00070                 INCLUDE SCREEN.ASM
                      (       SCREEN.ASM):00001         ;       PAGE
                      (       SCREEN.ASM):00002         ;       SBTTL "--- SCREEN & PRINTER I/O ---"
                      (       SCREEN.ASM):00003         
                      (       SCREEN.ASM):00004         ; ------------
                      (       SCREEN.ASM):00005         ; RESTART GAME
                      (       SCREEN.ASM):00006         ; ------------
                      (       SCREEN.ASM):00007         
35E2                  (       SCREEN.ASM):00008         ZSTART:
35E2 BD3683           (       SCREEN.ASM):00009                 JSR     ZCRLF                             ; FLUSH OUTPUT BUFFER
35E5 0F5E             (       SCREEN.ASM):00010                 CLR     SCRIPT                            ; DISABLE SCRIPTING [ASK 5/28/85]
                      (       SCREEN.ASM):00011         ;       JSR     ENTER           ; "PRESS ANY KEY TO CONTINUE"[ASK 5/28/85]
35E7 B63F11           (       SCREEN.ASM):00012                 LDA     ZCODE+ZSCRIP+1
35EA B735A3           (       SCREEN.ASM):00013                 STA     SFLAG
35ED 7E35F2           (       SCREEN.ASM):00014                 JMP     LUKE                              ; SKIP SCRIPT DISABLE
                      (       SCREEN.ASM):00015         ; FALL THROUGH TO ...
                      (       SCREEN.ASM):00016         
                      (       SCREEN.ASM):00017         ; ---------
                      (       SCREEN.ASM):00018         ; COLDSTART
                      (       SCREEN.ASM):00019         ; ---------
                      (       SCREEN.ASM):00020         
35F0                  (       SCREEN.ASM):00021         COLD:
35F0 0F5E             (       SCREEN.ASM):00022                 CLR     SCRIPT                            ; DISABLE SCRIPTING
35F2                  (       SCREEN.ASM):00023         LUKE:
35F2 BD35CC           (       SCREEN.ASM):00024                 JSR     CLS                               ; A CLEAN SLATE
35F5 8E3600           (       SCREEN.ASM):00025                 LDX     #LOADM                            ;
35F8 C618             (       SCREEN.ASM):00026                 LDB     #LOADML
35FA BD389E           (       SCREEN.ASM):00027                 JSR     DLINE                             ; "LOADING GAME ..."
35FD 7E2800           (       SCREEN.ASM):00028                 JMP     START                             ; AND DO A WARMSTART
                      (       SCREEN.ASM):00029         
3600                  (       SCREEN.ASM):00030         LOADM:
3600 5448452053544F52 (       SCREEN.ASM):00031                 FCC     "THE STORY IS LOADING ..."
     59204953204C4F41
     44494E47202E2E2E
3618                  (       SCREEN.ASM):00032         loadlen:
     0018             (       SCREEN.ASM):00033         LOADML          EQU loadlen-LOADM
                      (       SCREEN.ASM):00034         
                      (       SCREEN.ASM):00035         ; -----
                      (       SCREEN.ASM):00036         ; ERROR
                      (       SCREEN.ASM):00037         ; -----
                      (       SCREEN.ASM):00038         
                      (       SCREEN.ASM):00039         ; ENTRY: ERROR CODE # IN [A]
                      (       SCREEN.ASM):00040         
3618                  (       SCREEN.ASM):00041         INTERR:
3618 0D               (       SCREEN.ASM):00042                 FCB     EOL
3619 494E5445524E414C (       SCREEN.ASM):00043                 FCC     "INTERNAL ERROR #"
     204552524F522023
3629                  (       SCREEN.ASM):00044         interrlen:
     0011             (       SCREEN.ASM):00045         IERRL           EQU interrlen-INTERR
                      (       SCREEN.ASM):00046         
3629                  (       SCREEN.ASM):00047         ZERROR:
3629 3402             (       SCREEN.ASM):00048                 PSHS    A                                 ; SAVE CODE #
362B BD3683           (       SCREEN.ASM):00049                 JSR     ZCRLF                             ; FLUSH BUFFER
362E 8E3618           (       SCREEN.ASM):00050                 LDX     #INTERR
3631 C611             (       SCREEN.ASM):00051                 LDB     #IERRL
3633 BD35BC           (       SCREEN.ASM):00052                 JSR     LINE                              ; "INTERNAL ERROR #"
3636 3502             (       SCREEN.ASM):00053                 PULS    A                                 ; RETRIEVE CODE #
3638 9740             (       SCREEN.ASM):00054                 STA     TEMP+1
363A 0F3F             (       SCREEN.ASM):00055                 CLR     TEMP
363C BD3016           (       SCREEN.ASM):00056                 JSR     NUMBER                            ; CONVERT ERROR CODE #
363F BD36A6           (       SCREEN.ASM):00057                 JSR     CR1                               ; AND SHOW IT
                      (       SCREEN.ASM):00058         
                      (       SCREEN.ASM):00059         ; FALL THROUGH TO ...
                      (       SCREEN.ASM):00060         
                      (       SCREEN.ASM):00061         ; ----
                      (       SCREEN.ASM):00062         ; QUIT
                      (       SCREEN.ASM):00063         ; ----
                      (       SCREEN.ASM):00064         
3642                  (       SCREEN.ASM):00065         ZQUIT:
3642 8E364E           (       SCREEN.ASM):00066                 LDX     #ENDSES
3645 C60F             (       SCREEN.ASM):00067                 LDB     #ENDSL
3647 BD35BC           (       SCREEN.ASM):00068                 JSR     LINE                              ; "END OF SESSION"
                      (       SCREEN.ASM):00069         
364A 3F               (       SCREEN.ASM):00070                 SWI
364B 00               (       SCREEN.ASM):00071                 FCB     00
                      (       SCREEN.ASM):00072         
                      (       SCREEN.ASM):00073         
364C                  (       SCREEN.ASM):00074         FREEZE:
364C 20FE             (       SCREEN.ASM):00075                 BRA     FREEZE                            ; STOP DEAD
                      (       SCREEN.ASM):00076         
364E                  (       SCREEN.ASM):00077         ENDSES:
364E 454E44204F462053 (       SCREEN.ASM):00078                 FCC     "END OF SESSION"
     455353494F4E
365C                  (       SCREEN.ASM):00079         VCODE:
365C 0D               (       SCREEN.ASM):00080                 FCB     EOL                               ; SHARED EOL CHAR
365D                  (       SCREEN.ASM):00081         endseslen:
     000F             (       SCREEN.ASM):00082         ENDSL           EQU endseslen-ENDSES
                      (       SCREEN.ASM):00083         
                      (       SCREEN.ASM):00084         ; --------------------------
                      (       SCREEN.ASM):00085         ; DISPLAY ZIP VERSION NUMBER
                      (       SCREEN.ASM):00086         ; --------------------------
                      (       SCREEN.ASM):00087         
365D 434F434F20322056 (       SCREEN.ASM):00088                 FCC     "COCO 2 VERSION C"
     455253494F4E2043
366D 0D               (       SCREEN.ASM):00089                 FCB     EOL
366E                  (       SCREEN.ASM):00090         vcodelen:
     0012             (       SCREEN.ASM):00091         VCODEL          EQU vcodelen-VCODE
                      (       SCREEN.ASM):00092         
366E                  (       SCREEN.ASM):00093         VERNUM:
366E 8E365C           (       SCREEN.ASM):00094                 LDX     #VCODE
3671 C612             (       SCREEN.ASM):00095                 LDB     #VCODEL
3673 7E35BC           (       SCREEN.ASM):00096                 JMP     LINE
                      (       SCREEN.ASM):00097         
                      (       SCREEN.ASM):00098         ; -----------------
                      (       SCREEN.ASM):00099         ; PRINT A CHARACTER
                      (       SCREEN.ASM):00100         ; -----------------
                      (       SCREEN.ASM):00101         
3676                  (       SCREEN.ASM):00102         COUT:
3676 810D             (       SCREEN.ASM):00103                 CMPA    #EOL                              ; IF THIS IS A CR,
3678 2709             (       SCREEN.ASM):00104                 BEQ     ZCRLF                             ; HANDLE AS SUCH
367A 7E34F6           (       SCREEN.ASM):00105                 JMP     OUTCHR
                      (       SCREEN.ASM):00106         
367D                  (       SCREEN.ASM):00107         MORES:
367D 5B6D6F72655D     (       SCREEN.ASM):00108                 FCC     "[more]"
3683                  (       SCREEN.ASM):00109         morlen:
     0006             (       SCREEN.ASM):00110         MOREL           EQU morlen-MORES
                      (       SCREEN.ASM):00111         
                      (       SCREEN.ASM):00112         ; ---------------
                      (       SCREEN.ASM):00113         ; CARRIAGE RETURN
                      (       SCREEN.ASM):00114         ; ---------------
                      (       SCREEN.ASM):00115         
3683                  (       SCREEN.ASM):00116         ZCRLF:
3683 0C54             (       SCREEN.ASM):00117                 INC     LINCNT                            ; NEW LINE GOING OUT
3685 9654             (       SCREEN.ASM):00118                 LDA     LINCNT
3687 8114             (       SCREEN.ASM):00119                 CMPA    #20                               ; 13 LINES SENT YET? (CHANGED TO 20)
3689 251B             (       SCREEN.ASM):00120                 BLO     CR1                               ; NO, KEEP GOING
                      (       SCREEN.ASM):00121         
368B 8D1F             (       SCREEN.ASM):00122                 BSR     ZUSL                              ; UPDATE STATUS LINE
                      (       SCREEN.ASM):00123         
368D 8E367D           (       SCREEN.ASM):00124                 LDX     #MORES                            ; "[MORE]"
3690 C606             (       SCREEN.ASM):00125                 LDB     #MOREL
3692 BD389E           (       SCREEN.ASM):00126                 JSR     DLINE
                      (       SCREEN.ASM):00127         
3695 0F5D             (       SCREEN.ASM):00128                 CLR     CFLAG                             ; NO CURSOR!
3697 BD3502           (       SCREEN.ASM):00129                 JSR     GETKEY                            ; GET A KEYPRESS
                      (       SCREEN.ASM):00130         
                      (       SCREEN.ASM):00131         
369A 8620             (       SCREEN.ASM):00132                 LDA     #SPACE                            ; ERASE "MORE" MESSAGE
369C C606             (       SCREEN.ASM):00133                 LDB     #MOREL                            ; WITH SPACES
369E                  (       SCREEN.ASM):00134         SPCS:
369E BD34F6           (       SCREEN.ASM):00135                 JSR     OUTCHR
36A1 5A               (       SCREEN.ASM):00136                 DECB
36A2 26FA             (       SCREEN.ASM):00137                 BNE     SPCS
                      (       SCREEN.ASM):00138         
36A4 0F54             (       SCREEN.ASM):00139                 CLR     LINCNT                            ; RESET LINE COUNTER
                      (       SCREEN.ASM):00140         
36A6                  (       SCREEN.ASM):00141         CR1:
36A6 860D             (       SCREEN.ASM):00142                 LDA     #$0D
36A8 BD35A4           (       SCREEN.ASM):00143                 JSR     CHAR
36AB 39               (       SCREEN.ASM):00144                 RTS                                       ; AND RETURN
                      (       SCREEN.ASM):00145         
                      (       SCREEN.ASM):00146         ; ------------------
                      (       SCREEN.ASM):00147         ; UPDATE STATUS LINE
                      (       SCREEN.ASM):00148         ; ------------------
                      (       SCREEN.ASM):00149         
36AC                  (       SCREEN.ASM):00150         ZUSL:
36AC 39               (       SCREEN.ASM):00151                 RTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADDED DDW
                      (       SCREEN.ASM):00152         ;       LDA     CHRPNT                            ; SAVE ALL Z-STRING VARS
                      (       SCREEN.ASM):00153         ;       LDB     STBYTF
                      (       SCREEN.ASM):00154         ;       LDY     ZSTWRD
                      (       SCREEN.ASM):00155         ;       PSHS    X,Y,D
                      (       SCREEN.ASM):00156         ;       LDA     MPCH                              ; HIGH BIT OF MPC
                      (       SCREEN.ASM):00157         ;       LDB     BINDEX
                      (       SCREEN.ASM):00158         ;       LDX     MPCM                              ; LOW BYTES OF MPC
                      (       SCREEN.ASM):00159         ;       LDY     CSTEMP                            ; TEMP & PERM TOGETHER!
                      (       SCREEN.ASM):00160         ;       PSHS    X,Y,D
                      (       SCREEN.ASM):00161         
                      (       SCREEN.ASM):00162         ;       LDY     #BUFSAV                           ; MOVE OUTPUT BUFFER
                      (       SCREEN.ASM):00163         ;       LDX     #BUFFER                           ; TO TEMPORARY STORAGE
                      (       SCREEN.ASM):00164         ;       LDB     #SPACE                            ; CLEAR [BUFFER] WITH SPACES
                      (       SCREEN.ASM):00165         ;USL1:
                      (       SCREEN.ASM):00166         ;       LDA     ,X
                      (       SCREEN.ASM):00167         ;       STB     ,X+
                      (       SCREEN.ASM):00168         ;       STA     ,Y+
                      (       SCREEN.ASM):00169         ;       CMPX    #BUFFER+32
                      (       SCREEN.ASM):00170         ;       BLO     ZUSL1
                      (       SCREEN.ASM):00171         
                      (       SCREEN.ASM):00172         
                      (       SCREEN.ASM):00173         ; DISPLAY ROOM NAME
                      (       SCREEN.ASM):00174         
                      (       SCREEN.ASM):00175         ;       CLR     CHRPNT                            ; RESET CHAR INDEX
                      (       SCREEN.ASM):00176         ;       CLR     SCRIPT                            ; DISABLE SCRIPTING
                      (       SCREEN.ASM):00177         
                      (       SCREEN.ASM):00178         ;       LDA     #$10                              ; GLOBAL VAR #0 (ROOM #)
                      (       SCREEN.ASM):00179          ;      JSR     VARGET
                      (       SCREEN.ASM):00180          ;      LDA     TEMP+1
                      (       SCREEN.ASM):00181          ;      JSR     PRNTDC                            ; GET SHORT DESC INTO [BUFFER]
                      (       SCREEN.ASM):00182         
                      (       SCREEN.ASM):00183          ;      LDA     #22                               ; ADVANCE BUFFER INDEX
                      (       SCREEN.ASM):00184          ;      STA     CHRPNT                            ; INTO SCORING POSITION
                      (       SCREEN.ASM):00185          ;      LDA     #SPACE                            ; PRINT A SPACE
                      (       SCREEN.ASM):00186          ;      JSR     COUT                              ; TO SEPARATE THINGS (BM 12/6/84)
                      (       SCREEN.ASM):00187         
                      (       SCREEN.ASM):00188           ;     LDA     #$11                              ; FETCH GLOBAL VARIABLE
                      (       SCREEN.ASM):00189           ;     JSR     VARGET                            ; #1 (SCORE/HOURS)
                      (       SCREEN.ASM):00190           ;     TST     TIMEFL                            ; TIME MODE?
                      (       SCREEN.ASM):00191           ;     BNE     PTIME                             ; YES IF NZ
                      (       SCREEN.ASM):00192         
                      (       SCREEN.ASM):00193         ; PRINT SCORE
                      (       SCREEN.ASM):00194         
                      (       SCREEN.ASM):00195            ;    JSR     NUMBER                            ; PRINT THE VALUE
                      (       SCREEN.ASM):00196            ;    LDA     #$2F                              ; ASCII SLASH
                      (       SCREEN.ASM):00197            ;    BRA     MOVEP
                      (       SCREEN.ASM):00198         
                      (       SCREEN.ASM):00199         ; PRINT TIME (HOURS)
                      (       SCREEN.ASM):00200         
                      (       SCREEN.ASM):00201         ;PTIME:
                      (       SCREEN.ASM):00202         ;       LDA     TEMP+1
                      (       SCREEN.ASM):00203         ;       BNE     PTIME1                            ; 00 IS REALLY 24
                      (       SCREEN.ASM):00204         ;       LDA     #24
                      (       SCREEN.ASM):00205         ;PTIME1:
                      (       SCREEN.ASM):00206         ;       CMPA    #12
                      (       SCREEN.ASM):00207         ;       BLE     PTIME2                            ; IF HOURS IS GREATER THAN 12,
                      (       SCREEN.ASM):00208         ;       SUBA    #12                               ; CONVERT TO 12-HOUR TIME
                      (       SCREEN.ASM):00209         ;       STA     TEMP+1
                      (       SCREEN.ASM):00210         ;PTIME2:
                      (       SCREEN.ASM):00211         ;        JSR     NUMBER                            ; SHOW HOURS VALUE
                      (       SCREEN.ASM):00212         ;        LDA     #$3A                              ; ASCII COLON
                      (       SCREEN.ASM):00213         ;
                      (       SCREEN.ASM):00214         ;MOVEP:
                      (       SCREEN.ASM):00215         ;        JSR     COUT                              ; SEND COLON (OR SLASH)
                      (       SCREEN.ASM):00216         ;        LDA     #$12                              ; GLOBAL VAR #2 (MOVES/MINUTES)
                      (       SCREEN.ASM):00217         ;        JSR     VARGET
                      (       SCREEN.ASM):00218         ;        TST     TIMEFL                            ; TIME MODE?
                      (       SCREEN.ASM):00219         ;        BEQ     PNUM                              ; NO, DO MOVES
                      (       SCREEN.ASM):00220         
                      (       SCREEN.ASM):00221         ; PRINT MINUTES
                      (       SCREEN.ASM):00222         
                      (       SCREEN.ASM):00223         ;        LDA     TEMP+1
                      (       SCREEN.ASM):00224         ;        CMPA    #10                               ; IF LESS THAN 10 MINUTES,
                      (       SCREEN.ASM):00225         ;        BHS     MOVEP1
                      (       SCREEN.ASM):00226         ;        LDA     #$30                              ; ADD ASCII ZERO FOR PADDING
                      (       SCREEN.ASM):00227         ;        JSR     COUT
                      (       SCREEN.ASM):00228         
                      (       SCREEN.ASM):00229         ;MOVEP1:
                      (       SCREEN.ASM):00230         ;        JSR     NUMBER                            ; SHOW MINUTES
                      (       SCREEN.ASM):00231         
                      (       SCREEN.ASM):00232         ; PRINT "AM/PM"
                      (       SCREEN.ASM):00233         
                      (       SCREEN.ASM):00234         ;        LDA     #SPACE                            ; SEPARATE TIMING
                      (       SCREEN.ASM):00235         ;        JSR     COUT                              ; FROM "AM/PM"
                      (       SCREEN.ASM):00236         ;        LDA     #$11                              ; GLOBAL #1 AGAIN
                      (       SCREEN.ASM):00237         ;        JSR     VARGET
                      (       SCREEN.ASM):00238         ;        LDA     TEMP+1
                      (       SCREEN.ASM):00239         ;        CMPA    #12                               ; PAST NOON?
                      (       SCREEN.ASM):00240         ;        BHS     USEPM                             ; YES, IT'S PM
                      (       SCREEN.ASM):00241         ;        LDA     #$41                              ; "A"
                      (       SCREEN.ASM):00242         ;        BRA     DOM
                      (       SCREEN.ASM):00243         ;USEPM:
                      (       SCREEN.ASM):00244         ;        LDA     #$50                              ; "P"
                      (       SCREEN.ASM):00245         ;DOM:
                      (       SCREEN.ASM):00246         ;        JSR     COUT
                      (       SCREEN.ASM):00247         ;        LDA     #$4D                              ; "M"
                      (       SCREEN.ASM):00248         ;        JSR     COUT
                      (       SCREEN.ASM):00249         ;        BRA     AHEAD                             ; DONE!
                      (       SCREEN.ASM):00250         
                      (       SCREEN.ASM):00251         ; PRINT # MOVES
                      (       SCREEN.ASM):00252         
                      (       SCREEN.ASM):00253         ;PNUM:
                      (       SCREEN.ASM):00254         ;        JSR     NUMBER                            ; SIMPLE, EH?
                      (       SCREEN.ASM):00255         ;
                      (       SCREEN.ASM):00256         ;AHEAD:
                      (       SCREEN.ASM):00257         ;        JSR     CR1                               ; DUMP BUFFER
                      (       SCREEN.ASM):00258         ;        BSR     INVERT                            ; INVERT STATUS LINE
                      (       SCREEN.ASM):00259         
                      (       SCREEN.ASM):00260         ;        LDY     #BUFSAV                           ; POINT TO "SAVE" BUFFER
                      (       SCREEN.ASM):00261         ;        LDX     #BUFFER                           ; POINT TO OUTPUT BUFFER
                      (       SCREEN.ASM):00262         ;USLEND:
                      (       SCREEN.ASM):00263         ;        LDA     ,Y+
                      (       SCREEN.ASM):00264         ;        STA     ,X+                               ; RESTORE PREVIOUS CONTENTS
                      (       SCREEN.ASM):00265         ;        CMPX    #BUFFER+32
                      (       SCREEN.ASM):00266         ;        BLO     USLEND
                      (       SCREEN.ASM):00267         
                      (       SCREEN.ASM):00268         ;        PULS    X,Y,D                             ; RESTORE EVERYTHING
                      (       SCREEN.ASM):00269         ;        STY     CSTEMP
                      (       SCREEN.ASM):00270         ;        STX     MPCM
                      (       SCREEN.ASM):00271         ;        STB     BINDEX
                      (       SCREEN.ASM):00272         ;        STA     MPCH
                      (       SCREEN.ASM):00273         ;        PULS    X,Y,D
                      (       SCREEN.ASM):00274         ;        STY     ZSTWRD
                      (       SCREEN.ASM):00275         ;        STB     STBYTF
                      (       SCREEN.ASM):00276         ;        STA     CHRPNT
                      (       SCREEN.ASM):00277         ;        COM     SCRIPT                            ; RE-ENABLE SCRIPTING
                      (       SCREEN.ASM):00278         ;        CLR     MPCFLG                            ; MPC NO LONGER VALID
                      (       SCREEN.ASM):00279         ;        RTS
                      (       SCREEN.ASM):00280         
                      (       SCREEN.ASM):00281         ; ------------------
                      (       SCREEN.ASM):00282         ; INVERT STATUS LINE
                      (       SCREEN.ASM):00283         ; ------------------
                      (       SCREEN.ASM):00284         
                      (       SCREEN.ASM):00285         ;INVERT:
                      (       SCREEN.ASM):00286         ;        RTS
                      (     cubixzip.asm):00071                 INCLUDE DISK.ASM
                      (         DISK.ASM):00001         ;       PAGE
                      (         DISK.ASM):00002         ;       SBTTL "--- DISK I/O ---"
                      (         DISK.ASM):00003         
                      (         DISK.ASM):00004         
                      (         DISK.ASM):00005         ; ------------------------
                      (         DISK.ASM):00006         ; READ A Z-BLOCK FROM DISK
                      (         DISK.ASM):00007         ; ------------------------
                      (         DISK.ASM):00008         
                      (         DISK.ASM):00009         ; ENTRY: DRIVE # (0 OR 1) IN [DRIVE]
                      (         DISK.ASM):00010         ;        BLOCK # IN [DBLOCK]
                      (         DISK.ASM):00011         ;        BUFFER ADDRESS IN [DBUFF]
36AD                  (         DISK.ASM):00012         INFILE:
36AD 413A5B5A49505D5A (         DISK.ASM):00013                 FCC     "A:[ZIP]ZIPTEST.Z3"               ; FSDIR(8)   DIRECTORY PREFIX
     4950544553542E5A
     33
36BE 00               (         DISK.ASM):00014                 FCB     00                                ; FSDRIVE(1) Drive Index (0-3)
                      (         DISK.ASM):00015         
                      (         DISK.ASM):00016         
36BF                  (         DISK.ASM):00017         OPENGAMEDSK:
36BF 108E36AD         (         DISK.ASM):00018                 LDY     #INFILE                           ; SET FILE NAME
36C3 3F               (         DISK.ASM):00019                 SWI
36C4 0A               (         DISK.ASM):00020                 FCB     10
36C5 102600B5         (         DISK.ASM):00021                 LBNE    DERR2                             ; FILE ERROR
36C9 CEDD00           (         DISK.ASM):00022                 LDU     #INFCB                            ; OPEN FILE
36CC 3F               (         DISK.ASM):00023                 SWI
36CD 37               (         DISK.ASM):00024                 FCB     55
36CE 39               (         DISK.ASM):00025                 RTS
                      (         DISK.ASM):00026         
36CF                  (         DISK.ASM):00027         GETDSK:
36CF 3476             (         DISK.ASM):00028                 PSHS    X,Y,U,D                           ; SAVE VARIABLES
36D1 CEDD00           (         DISK.ASM):00029                 LDU     #INFCB                            ; REWIND FILE
36D4 3F               (         DISK.ASM):00030                 SWI
36D5 3E               (         DISK.ASM):00031                 FCB     62
36D6 DC4C             (         DISK.ASM):00032                 LDD     DBLOCK                            ; GO TO DBLOCK POSITION
36D8 B73726           (         DISK.ASM):00033                 STA     DTEMP
                      (         DISK.ASM):00034         !
36DB 8100             (         DISK.ASM):00035                 CMPA    #$00                              ; HOW MANY BLOCKS OF $10000 DO WE NEED TO GET
36DD 2718             (         DISK.ASM):00036                 BEQ     GETDSK1                           ; NONE, SKIP
36DF CCFFFF           (         DISK.ASM):00037                 LDD     #$FFFF
36E2 CEDD00           (         DISK.ASM):00038                 LDU     #INFCB                            ;
36E5 3F               (         DISK.ASM):00039                 SWI
36E6 3F               (         DISK.ASM):00040                 FCB     63
36E7 CC0001           (         DISK.ASM):00041                 LDD     #1
36EA CEDD00           (         DISK.ASM):00042                 LDU     #INFCB                            ;
36ED 3F               (         DISK.ASM):00043                 SWI
36EE 3F               (         DISK.ASM):00044                 FCB     63
36EF 7A3726           (         DISK.ASM):00045                 DEC     DTEMP
36F2 B63726           (         DISK.ASM):00046                 LDA     DTEMP
36F5 20E4             (         DISK.ASM):00047                 BRA     <
36F7                  (         DISK.ASM):00048         GETDSK1:
36F7 DC4C             (         DISK.ASM):00049                 LDD     DBLOCK                            ; HOW MANY BLOCKS OF <$10000 DO WE NEED TO GET
36F9 1F98             (         DISK.ASM):00050                 TFR     B,A
36FB C600             (         DISK.ASM):00051                 LDB     #$00
36FD CEDD00           (         DISK.ASM):00052                 LDU     #INFCB                            ;
3700 3F               (         DISK.ASM):00053                 SWI
3701 3F               (         DISK.ASM):00054                 FCB     63
                      (         DISK.ASM):00055         ; READ 256 BYTES
3702 C600             (         DISK.ASM):00056                 LDB     #$00
3704 F73726           (         DISK.ASM):00057                 STB     DTEMP
                      (         DISK.ASM):00058         !
3707 3F               (         DISK.ASM):00059                 SWI
3708 3B               (         DISK.ASM):00060                 FCB     59
3709 9E4A             (         DISK.ASM):00061                 LDX     DBUFF
370B A784             (         DISK.ASM):00062                 STA     ,X
370D 0C4B             (         DISK.ASM):00063                 INC     DBUFF+1
370F 2602             (         DISK.ASM):00064                 BNE     BUFINC
3711 0C4A             (         DISK.ASM):00065                 INC     DBUFF
3713                  (         DISK.ASM):00066         BUFINC:
3713 7A3726           (         DISK.ASM):00067                 DEC     DTEMP
3716 F63726           (         DISK.ASM):00068                 LDB     DTEMP
3719 C100             (         DISK.ASM):00069                 CMPB    #$00
371B 26EA             (         DISK.ASM):00070                 BNE     <
371D 0C4D             (         DISK.ASM):00071                 INC     DBLOCK+1                          ; POINT TO NEXT Z-BLOCK
371F 2602             (         DISK.ASM):00072                 BNE     REND
3721 0C4C             (         DISK.ASM):00073                 INC     DBLOCK
3723                  (         DISK.ASM):00074         REND:
3723 3576             (         DISK.ASM):00075                 PULS    X,Y,U,D                           ; RESTORE VARIABLES
                      (         DISK.ASM):00076         ;        STX     VAL
                      (         DISK.ASM):00077         ;        STD     TEMP
3725 39               (         DISK.ASM):00078                 RTS
                      (         DISK.ASM):00079         
3726 00               (         DISK.ASM):00080         DTEMP   FCB     00
                      (         DISK.ASM):00081         
                      (         DISK.ASM):00082         
                      (         DISK.ASM):00083         ; -----------------
                      (         DISK.ASM):00084         ; SAVE/RESTORE INIT
                      (         DISK.ASM):00085         ; -----------------
                      (         DISK.ASM):00086         
3727                  (         DISK.ASM):00087         SAVRES:
3727 BD3683           (         DISK.ASM):00088                 JSR     ZCRLF                             ; FLUSH OUTPUT BUFFER
372A BD35CC           (         DISK.ASM):00089                 JSR     CLS
372D 0F5E             (         DISK.ASM):00090                 CLR     SCRIPT                            ; DISABLE SCRIPTING
372F 39               (         DISK.ASM):00091                 RTS
                      (         DISK.ASM):00092         
                      (         DISK.ASM):00093         ; ---------
                      (         DISK.ASM):00094         ; SAVE GAME
                      (         DISK.ASM):00095         ; ---------
                      (         DISK.ASM):00096         
3730                  (         DISK.ASM):00097         ZSAVE:
3730 8DF5             (         DISK.ASM):00098                 BSR     SAVRES                            ; INIT THINGS
3732 8E38B5           (         DISK.ASM):00099                 LDX     #SAV
3735 C604             (         DISK.ASM):00100                 LDB     #SAVL
3737 BD389E           (         DISK.ASM):00101                 JSR     DLINE                             ; "SAVE POSITION"
                      (         DISK.ASM):00102         
373A BD3822           (         DISK.ASM):00103                 JSR     PARAMS                            ; GET POSITION AND DRIVE
                      (         DISK.ASM):00104         
373D 8E3949           (         DISK.ASM):00105                 LDX     #SING
3740 C607             (         DISK.ASM):00106                 LDB     #SINGL
3742 BD389E           (         DISK.ASM):00107                 JSR     DLINE                             ; "SAVING"
3745 BD38A7           (         DISK.ASM):00108                 JSR     TIONP                             ; "POSITION X ..."
                      (         DISK.ASM):00109         
3748 8E2740           (         DISK.ASM):00110                 LDX     #BUFSAV                           ; POINT TO AUX BUFFER
374B FC3F02           (         DISK.ASM):00111                 LDD     ZCODE+ZID                         ; GET GAME ID CODE
374E ED81             (         DISK.ASM):00112                 STD     ,X++                              ; SAVE IN BUFFER
3750 DC27             (         DISK.ASM):00113                 LDD     OZSTAK                            ; OLD STACK POINTER
3752 ED81             (         DISK.ASM):00114                 STD     ,X++
3754 EF81             (         DISK.ASM):00115                 STU     ,X++                              ; AND CURRENT STACK POINTER
3756 9613             (         DISK.ASM):00116                 LDA     ZPCH                              ; HI BYTE OF ZPC
3758 A780             (         DISK.ASM):00117                 STA     ,X+
375A DC14             (         DISK.ASM):00118                 LDD     ZPCM                              ; LOW ZPC BYTES
375C ED84             (         DISK.ASM):00119                 STD     ,X
                      (         DISK.ASM):00120         
375E CC2700           (         DISK.ASM):00121                 LDD     #LOCALS
3761 DD4A             (         DISK.ASM):00122                 STD     DBUFF
                      (         DISK.ASM):00123         ;        BSR     DWRITE                            ; WRITE LOCAL/BUFFER PAGE
                      (         DISK.ASM):00124         
3763 CC2300           (         DISK.ASM):00125                 LDD     #ZSTACK                           ; SAVE CONTENTS
3766 DD4A             (         DISK.ASM):00126                 STD     DBUFF                             ; OF Z-STACK (2 PAGES)
                      (         DISK.ASM):00127         ;        BSR     DWRITE                            ; FIRST HALF
                      (         DISK.ASM):00128          ;       BSR     DWRITE                            ; 2ND HALF
                      (         DISK.ASM):00129         
                      (         DISK.ASM):00130         ; SAVE GAME PRELOAD
                      (         DISK.ASM):00131         
3768 CC3F00           (         DISK.ASM):00132                 LDD     #ZCODE                            ; START OF PRELOAD
376B DD4A             (         DISK.ASM):00133                 STD     DBUFF
376D B63F0E           (         DISK.ASM):00134                 LDA     ZCODE+ZPURBT                      ; SIZE OF PRELOAD (MSB, # PAGES)
3770 4C               (         DISK.ASM):00135                 INCA                                      ; ROUND UP
3771 973F             (         DISK.ASM):00136                 STA     TEMP                              ; USE [TEMP] AS INDEX
                      (         DISK.ASM):00137         
3773                  (         DISK.ASM):00138         LSAVE:
                      (         DISK.ASM):00139         ;        BSR     DWRITE                            ; SAVE A PAGE
3773 0A3F             (         DISK.ASM):00140                 DEC     TEMP                              ; SAVED ENTIRE PRELOAD YET?
3775 26FC             (         DISK.ASM):00141                 BNE     LSAVE                             ; NO, KEEP SAVING
3777 7E37F7           (         DISK.ASM):00142                 JMP     RESUME
                      (         DISK.ASM):00143         
                      (         DISK.ASM):00144         ; *** ERROR #12: DISK ADDRESS RANGE ***
                      (         DISK.ASM):00145         
377A                  (         DISK.ASM):00146         DSKERR:
377A 860C             (         DISK.ASM):00147                 LDA     #12
377C 2002             (         DISK.ASM):00148                 BRA     DSKEX
                      (         DISK.ASM):00149         
                      (         DISK.ASM):00150         ; *** ERROR #14: DISK ACCESS ***
                      (         DISK.ASM):00151         
377E                  (         DISK.ASM):00152         DERR2:
377E 860E             (         DISK.ASM):00153                 LDA     #14
3780                  (         DISK.ASM):00154         DSKEX:
3780 BD3629           (         DISK.ASM):00155                 JSR     ZERROR
                      (         DISK.ASM):00156         
                      (         DISK.ASM):00157         ; ------------
                      (         DISK.ASM):00158         ; RESTORE GAME
                      (         DISK.ASM):00159         ; ------------
                      (         DISK.ASM):00160         
3783                  (         DISK.ASM):00161         ZREST:
3783 BD3727           (         DISK.ASM):00162                 JSR     SAVRES
                      (         DISK.ASM):00163         
3786 8E38AE           (         DISK.ASM):00164                 LDX     #RES
3789 C607             (         DISK.ASM):00165                 LDB     #RESL
378B BD389E           (         DISK.ASM):00166                 JSR     DLINE                             ; "RESTORE POSITION"
                      (         DISK.ASM):00167         
378E BD3822           (         DISK.ASM):00168                 JSR     PARAMS
                      (         DISK.ASM):00169         
3791 8E3950           (         DISK.ASM):00170                 LDX     #RING
3794 C60A             (         DISK.ASM):00171                 LDB     #RINGL
3796 BD389E           (         DISK.ASM):00172                 JSR     DLINE                             ; "RESTORING"
3799 BD38A7           (         DISK.ASM):00173                 JSR     TIONP                             ; "POSITION X ..."
                      (         DISK.ASM):00174         
                      (         DISK.ASM):00175         ; SAVE LOCALS ON MACHINE STACK
                      (         DISK.ASM):00176         ; IN CASE OF ERROR
                      (         DISK.ASM):00177         
379C 8E2700           (         DISK.ASM):00178                 LDX     #LOCALS                           ; POINT TO LOCALS STORAGE
379F 9F4A             (         DISK.ASM):00179                 STX     DBUFF                             ; POINT TO 1ST PAGE TO RESTORE
37A1                  (         DISK.ASM):00180         LOCLP:
37A1 EC81             (         DISK.ASM):00181                 LDD     ,X++                              ; GRAB A LOCAL
37A3 3406             (         DISK.ASM):00182                 PSHS    D                                 ; AND PUSH IT
37A5 8C271E           (         DISK.ASM):00183                 CMPX    #LOCALS+30                        ; SAVED 15 LOCALS YET?
37A8 25F7             (         DISK.ASM):00184                 BLO     LOCLP                             ; NO, KEEP PUSHING
                      (         DISK.ASM):00185         
                      (         DISK.ASM):00186                ; JSR     DREAD                             ; RETRIEVE LOCALS/BUFFER PAGE
                      (         DISK.ASM):00187         
37AA FC2740           (         DISK.ASM):00188                 LDD     BUFSAV                            ; READ SAVED GAME ID
37AD 10B33F02         (         DISK.ASM):00189                 CMPD    ZCODE+ZID                         ; IF IT MATCHES CURRENT GAME ID,
37B1 2711             (         DISK.ASM):00190                 BEQ     VERSOK                            ; PROCEED WITH THE RESTORE
                      (         DISK.ASM):00191         
                      (         DISK.ASM):00192         ; WRONG SAVE DISK, ABORT RESTORE
                      (         DISK.ASM):00193         
37B3 8E271E           (         DISK.ASM):00194                 LDX     #LOCALS+30                        ; RESTORE PUSHED LOCALS
37B6                  (         DISK.ASM):00195         RESLP:
37B6 3506             (         DISK.ASM):00196                 PULS    D
37B8 ED83             (         DISK.ASM):00197                 STD     ,--X
37BA 8C2700           (         DISK.ASM):00198                 CMPX    #LOCALS
37BD 22F7             (         DISK.ASM):00199                 BHI     RESLP
37BF                  (         DISK.ASM):00200         ERRWP:
37BF 8D3B             (         DISK.ASM):00201                 BSR     TOBOOT                            ; PROMPT FOR GAME DISK
37C1 7E2A51           (         DISK.ASM):00202                 JMP     PREDF                             ; PREDICATE FAILS
                      (         DISK.ASM):00203         
37C4                  (         DISK.ASM):00204         VERSOK:
37C4 32E81E           (         DISK.ASM):00205                 LEAS    +30,S                             ; POP OLD LOCALS OFF STACK
37C7 FC3F10           (         DISK.ASM):00206                 LDD     ZCODE+ZSCRIP
37CA DD3D             (         DISK.ASM):00207                 STD     VAL                               ; SAVE FLAGS
                      (         DISK.ASM):00208         
37CC CC2300           (         DISK.ASM):00209                 LDD     #ZSTACK                           ; RETRIEVE
37CF DD4A             (         DISK.ASM):00210                 STD     DBUFF                             ; CONTENTS OF Z-STACK
                      (         DISK.ASM):00211               ;  JSR     DREAD
                      (         DISK.ASM):00212               ;  JSR     DREAD
                      (         DISK.ASM):00213         
37D1                  (         DISK.ASM):00214         DOREST:
37D1 CC3F00           (         DISK.ASM):00215                 LDD     #ZCODE                            ; NOW RETRIEVE
37D4 DD4A             (         DISK.ASM):00216                 STD     DBUFF                             ; 1ST PAGE OF PRELOAD
                      (         DISK.ASM):00217              ;   JSR     DREAD
                      (         DISK.ASM):00218         
37D6 B63F0E           (         DISK.ASM):00219                 LDA     ZCODE+ZPURBT                      ; DETERMINE # PAGES
37D9 973F             (         DISK.ASM):00220                 STA     TEMP                              ; TO RETRIEVE
                      (         DISK.ASM):00221         
37DB                  (         DISK.ASM):00222         LREST:
                      (         DISK.ASM):00223             ;    JSR     DREAD                             ; FETCH REMAINDER OF PRELOAD
37DB 0A3F             (         DISK.ASM):00224                 DEC     TEMP
37DD 26FC             (         DISK.ASM):00225                 BNE     LREST
                      (         DISK.ASM):00226         
                      (         DISK.ASM):00227         ; RESTORE STATE OF SAVED GAME
                      (         DISK.ASM):00228         
37DF 8E2742           (         DISK.ASM):00229                 LDX     #BUFSAV+2                         ; POINT TO SAVED VARIABLES
37E2 EC81             (         DISK.ASM):00230                 LDD     ,X++
37E4 DD27             (         DISK.ASM):00231                 STD     OZSTAK                            ; RESTORE OLD STACK POINTERS
37E6 EE81             (         DISK.ASM):00232                 LDU     ,X++
37E8 A680             (         DISK.ASM):00233                 LDA     ,X+
37EA 9713             (         DISK.ASM):00234                 STA     ZPCH                              ; HIGH BYTE OF ZPC
37EC EC84             (         DISK.ASM):00235                 LDD     ,X                                ; LOW BYTES OF ZPC
37EE DD14             (         DISK.ASM):00236                 STD     ZPCM
37F0 0F18             (         DISK.ASM):00237                 CLR     ZPCFLG                            ; PC HAS CHANGED!
                      (         DISK.ASM):00238         
37F2 DC3D             (         DISK.ASM):00239                 LDD     VAL                               ; RESTORE FLAGS
37F4 FD3F10           (         DISK.ASM):00240                 STD     ZCODE+ZSCRIP
                      (         DISK.ASM):00241         
                      (         DISK.ASM):00242         ; RESUME GAME AFTER SAVE OR RESTORE
                      (         DISK.ASM):00243         
37F7                  (         DISK.ASM):00244         RESUME:
37F7 8D03             (         DISK.ASM):00245                 BSR     TOBOOT                            ; PROMPT FOR GAME DISK
37F9 7E2A5F           (         DISK.ASM):00246                 JMP     PREDS                             ; PREDICATE SUCCEEDS
                      (         DISK.ASM):00247         
37FC                  (         DISK.ASM):00248         TOBOOT:
37FC 0F49             (         DISK.ASM):00249                 CLR     DRIVE                             ; BACK TO BOOT DRIVE
37FE 8E38D8           (         DISK.ASM):00250                 LDX     #GAME
3801 C61F             (         DISK.ASM):00251                 LDB     #GAMEL
3803 BD389E           (         DISK.ASM):00252                 JSR     DLINE                             ; "INSERT STORY DISK IN DRIVE 0,"
3806 BD380E           (         DISK.ASM):00253                 JSR     ENTER                             ; "PRESS <ENTER> TO CONTINUE"
3809 035E             (         DISK.ASM):00254                 COM     SCRIPT                            ; RE-ENABLE SCRIPTING
380B 7E35CC           (         DISK.ASM):00255                 JMP     CLS                               ; CLEAR SCREEN AND RETURN
                      (         DISK.ASM):00256         
                      (         DISK.ASM):00257         ; ---------------------------
                      (         DISK.ASM):00258         ; "PRESS <ENTER> TO CONTINUE"
                      (         DISK.ASM):00259         ; ---------------------------
                      (         DISK.ASM):00260         
380E                  (         DISK.ASM):00261         ENTER:
380E 8E38F7           (         DISK.ASM):00262                 LDX     #PRESS
3811 C61C             (         DISK.ASM):00263                 LDB     #PRESSL
3813 D75D             (         DISK.ASM):00264                 STB     CFLAG                             ; ENABLE CURSOR
3815 BD35BC           (         DISK.ASM):00265                 JSR     LINE                              ; "PRESS <ENTER> TO CONTINUE"
3818 BD3502           (         DISK.ASM):00266                 JSR     GETKEY                            ; GET A KEY
381B 0F5D             (         DISK.ASM):00267                 CLR     CFLAG                             ; DISABLE CURSOR
381D 860D             (         DISK.ASM):00268                 LDA     #EOL
381F 7E3676           (         DISK.ASM):00269                 JMP     COUT                              ; DO EOL AND RETURN
                      (         DISK.ASM):00270         
                      (         DISK.ASM):00271         ; --------------------------------
                      (         DISK.ASM):00272         ; PROMPT SEQUENCE FOR SAVE/RESTORE
                      (         DISK.ASM):00273         ; --------------------------------
                      (         DISK.ASM):00274         
3822                  (         DISK.ASM):00275         PARAMS:
3822 8E3913           (         DISK.ASM):00276                 LDX     #POSIT
3825 C618             (         DISK.ASM):00277                 LDB     #POSITL
3827 BD389E           (         DISK.ASM):00278                 JSR     DLINE                             ; "GAME ... POSITION 1-7 "
                      (         DISK.ASM):00279         
382A 86FF             (         DISK.ASM):00280                 LDA     #TRUE
382C 975D             (         DISK.ASM):00281                 STA     CFLAG                             ; ENABLE CURSOR
                      (         DISK.ASM):00282         
                      (         DISK.ASM):00283         ; GET POSITION
                      (         DISK.ASM):00284         
382E 9657             (         DISK.ASM):00285                 LDA     GPOSIT                            ; GET DEFAULT POSITION
3830 4C               (         DISK.ASM):00286                 INCA                                      ; 1-ALIGN IT
3831 BD3892           (         DISK.ASM):00287                 JSR     DODEF
                      (         DISK.ASM):00288         
3834                  (         DISK.ASM):00289         GETPOS:
3834 BD3502           (         DISK.ASM):00290                 JSR     GETKEY
3837 810D             (         DISK.ASM):00291                 CMPA    #EOL
3839 270B             (         DISK.ASM):00292                 BEQ     SETPOS
383B 8031             (         DISK.ASM):00293                 SUBA    #$31                              ; CONVERT "1-7" TO 0-6
383D 8107             (         DISK.ASM):00294                 CMPA    #7                                ; IF LOWER THAN "7"
383F 2507             (         DISK.ASM):00295                 BLO     POSSET                            ; SET NEW POSITION
3841 BD35D9           (         DISK.ASM):00296                 JSR     BOOP                              ; ELSE RAZZ
3844 20EE             (         DISK.ASM):00297                 BRA     GETPOS                            ; AND TRY AGAIN
                      (         DISK.ASM):00298         
3846                  (         DISK.ASM):00299         SETPOS:
3846 9657             (         DISK.ASM):00300                 LDA     GPOSIT                            ; USE DEFAULT
3848                  (         DISK.ASM):00301         POSSET:
3848 9757             (         DISK.ASM):00302                 STA     GPOSIT                            ; TEMP DEFAULT
384A 8B31             (         DISK.ASM):00303                 ADDA    #$31                              ; CONVERT TO ASCII
384C B73964           (         DISK.ASM):00304                 STA     PDO                               ; HERE TOO
384F BD34F6           (         DISK.ASM):00305                 JSR     OUTCHR                            ; AND SHOW CHOICE
                      (         DISK.ASM):00306         
                      (         DISK.ASM):00307         ; GET DRIVE #
                      (         DISK.ASM):00308         
3852 8E392B           (         DISK.ASM):00309                 LDX     #WDRIV
3855 C60E             (         DISK.ASM):00310                 LDB     #WDRIVL
3857 BD389E           (         DISK.ASM):00311                 JSR     DLINE                             ; "DRIVE 0 OR 1 "
                      (         DISK.ASM):00312         
385A 9656             (         DISK.ASM):00313                 LDA     GDRIVE
385C 8D34             (         DISK.ASM):00314                 BSR     DODEF                             ; SHOW DEFAULT
                      (         DISK.ASM):00315         
385E                  (         DISK.ASM):00316         GETDRV:
385E BD3502           (         DISK.ASM):00317                 JSR     GETKEY
3861 810D             (         DISK.ASM):00318                 CMPA    #EOL
3863 270B             (         DISK.ASM):00319                 BEQ     DRVSET
3865 8030             (         DISK.ASM):00320                 SUBA    #$30                              ; CONVERT TO ASCII
3867 8102             (         DISK.ASM):00321                 CMPA    #2
3869 2507             (         DISK.ASM):00322                 BLO     SETDRV
386B BD35D9           (         DISK.ASM):00323                 JSR     BOOP
386E 20EE             (         DISK.ASM):00324                 BRA     GETDRV                            ; DRIVE # NO GOOD
                      (         DISK.ASM):00325         
3870                  (         DISK.ASM):00326         DRVSET:
3870 9656             (         DISK.ASM):00327                 LDA     GDRIVE
3872                  (         DISK.ASM):00328         SETDRV:
3872 9749             (         DISK.ASM):00329                 STA     DRIVE                             ; NEW DEFAULT
3874 8B30             (         DISK.ASM):00330                 ADDA    #$30                              ; CONVERT TO ASCII
3876 B738D5           (         DISK.ASM):00331                 STA     GAMDRI                            ; FOR PROMPT
3879 BD34F6           (         DISK.ASM):00332                 JSR     OUTCHR                            ; SHOW CHOICE
                      (         DISK.ASM):00333         
387C 9657             (         DISK.ASM):00334                 LDA     GPOSIT                            ; MAKE IT THE NEW DEFAULT
387E C605             (         DISK.ASM):00335                 LDB     #5                                ; CALC BLOCK OFFSET (5 TRACKS/GAME)
3880 3D               (         DISK.ASM):00336                 MUL
3881 D74E             (         DISK.ASM):00337                 STB     TRACK                             ; TRACK ADDRESS
3883 C601             (         DISK.ASM):00338                 LDB     #1                                ; START ON SECTOR 1
3885 D74F             (         DISK.ASM):00339                 STB     TRACK+1                           ; SECTOR ADDRESS
                      (         DISK.ASM):00340         
3887 8E38B9           (         DISK.ASM):00341                 LDX     #INSERM
388A C61F             (         DISK.ASM):00342                 LDB     #INSERML
388C BD389E           (         DISK.ASM):00343                 JSR     DLINE                             ; "INSERT SAVE DISK IN DRIVE X,"
388F 7E380E           (         DISK.ASM):00344                 JMP     ENTER                             ; ETC.
                      (         DISK.ASM):00345         
                      (         DISK.ASM):00346         ; ------------
                      (         DISK.ASM):00347         ; SHOW DEFAULT
                      (         DISK.ASM):00348         ; ------------
                      (         DISK.ASM):00349         
3892                  (         DISK.ASM):00350         DODEF:
3892 8B30             (         DISK.ASM):00351                 ADDA    #$30                              ; CONVERT # TO ASCII
3894 B73945           (         DISK.ASM):00352                 STA     DEFNUM                            ; INSERT IN STRING
3897 8E3939           (         DISK.ASM):00353                 LDX     #DEFALT
389A C610             (         DISK.ASM):00354                 LDB     #DEFALL
389C D75D             (         DISK.ASM):00355                 STB     CFLAG                             ; ENABLE CURSOR
                      (         DISK.ASM):00356         
                      (         DISK.ASM):00357         ; FALL THROUGH TO ...
                      (         DISK.ASM):00358         
                      (         DISK.ASM):00359         ; --------------------
                      (         DISK.ASM):00360         ; DIRECT SCREEN OUTPUT
                      (         DISK.ASM):00361         ; --------------------
                      (         DISK.ASM):00362         
                      (         DISK.ASM):00363         ; ENTRY: SAME AS "LINE" ROUTINE
                      (         DISK.ASM):00364         
389E                  (         DISK.ASM):00365         DLINE:
389E A680             (         DISK.ASM):00366                 LDA     ,X+
38A0 BD34F6           (         DISK.ASM):00367                 JSR     OUTCHR
38A3 5A               (         DISK.ASM):00368                 DECB
38A4 26F8             (         DISK.ASM):00369                 BNE     DLINE
38A6 39               (         DISK.ASM):00370                 RTS
                      (         DISK.ASM):00371         
                      (         DISK.ASM):00372         ; ----------------------
                      (         DISK.ASM):00373         ; PRINT "POSITION X ..."
                      (         DISK.ASM):00374         ; ----------------------
                      (         DISK.ASM):00375         
38A7                  (         DISK.ASM):00376         TIONP:
38A7 8E395A           (         DISK.ASM):00377                 LDX     #PTION
38AA C610             (         DISK.ASM):00378                 LDB     #PTIONL
38AC 20F0             (         DISK.ASM):00379                 BRA     DLINE
                      (         DISK.ASM):00380         
                      (         DISK.ASM):00381         ; ---------------------
                      (         DISK.ASM):00382         ; TEXT FOR SAVE/RESTORE
                      (         DISK.ASM):00383         ; ---------------------
                      (         DISK.ASM):00384         
38AE                  (         DISK.ASM):00385         RES:
38AE 524553544F5245   (         DISK.ASM):00386                 FCC     "RESTORE"
38B5                  (         DISK.ASM):00387         reslen:
     0007             (         DISK.ASM):00388         RESL            EQU reslen-RES
                      (         DISK.ASM):00389         
38B5                  (         DISK.ASM):00390         SAV:
38B5 53415645         (         DISK.ASM):00391                 FCC     "SAVE"
38B9                  (         DISK.ASM):00392         savlen:
     0004             (         DISK.ASM):00393         SAVL            EQU savlen-SAV
                      (         DISK.ASM):00394         
38B9                  (         DISK.ASM):00395         INSERM:
38B9 0D               (         DISK.ASM):00396                 FCB     EOL
38BA 0D               (         DISK.ASM):00397                 FCB     EOL
38BB 494E534552542053 (         DISK.ASM):00398                 FCC     "INSERT SAVE DISK IN DRIVE "
     415645204449534B
     20494E2044524956
     4520
38D5                  (         DISK.ASM):00399         GAMDRI:
38D5 302E             (         DISK.ASM):00400                 FCC     "0."
38D7 0D               (         DISK.ASM):00401                 FCB     EOL
38D8                  (         DISK.ASM):00402         insermlen:
     001F             (         DISK.ASM):00403         INSERML         EQU insermlen-INSERM
                      (         DISK.ASM):00404         
38D8                  (         DISK.ASM):00405         GAME:
38D8 0D               (         DISK.ASM):00406                 FCB     EOL
38D9 494E534552542053 (         DISK.ASM):00407                 FCC     "INSERT STORY DISK IN DRIVE 0."
     544F525920444953
     4B20494E20445249
     564520302E
38F6 0D               (         DISK.ASM):00408                 FCB     EOL
38F7                  (         DISK.ASM):00409         gamelen:
     001F             (         DISK.ASM):00410         GAMEL           EQU gamelen-GAME
                      (         DISK.ASM):00411         
38F7                  (         DISK.ASM):00412         PRESS:
38F7 5052455353203C45 (         DISK.ASM):00413                 FCC     "PRESS <ENTER> TO CONTINUE."
     4E5445523E20544F
     20434F4E54494E55
     452E
3911 0D               (         DISK.ASM):00414                 FCB     EOL
3912 3E               (         DISK.ASM):00415                 FCC     ">"
3913                  (         DISK.ASM):00416         presslen:
     001C             (         DISK.ASM):00417         PRESSL          EQU presslen-PRESS
                      (         DISK.ASM):00418         
3913                  (         DISK.ASM):00419         POSIT:
3913 20504F534954494F (         DISK.ASM):00420                 FCC     " POSITION"
     4E
391C 0D               (         DISK.ASM):00421                 FCB     EOL
391D 0D               (         DISK.ASM):00422                 FCB     EOL
391E 504F534954494F4E (         DISK.ASM):00423                 FCC     "POSITION 1-7 "
     20312D3720
392B                  (         DISK.ASM):00424         positlen:
     0018             (         DISK.ASM):00425         POSITL          EQU positlen-POSIT
                      (         DISK.ASM):00426         
392B                  (         DISK.ASM):00427         WDRIV:
392B 0D               (         DISK.ASM):00428                 FCB     EOL
392C 4452495645203020 (         DISK.ASM):00429                 FCC     "DRIVE 0 OR 1 "
     4F52203120
3939                  (         DISK.ASM):00430         wdrivlen:
     000E             (         DISK.ASM):00431         WDRIVL          EQU wdrivlen-WDRIV
                      (         DISK.ASM):00432         
3939                  (         DISK.ASM):00433         DEFALT:
3939 2844454641554C54 (         DISK.ASM):00434                 FCC     "(DEFAULT IS "
     20495320
3945                  (         DISK.ASM):00435         DEFNUM:
3945 3029203E         (         DISK.ASM):00436                 FCC     "0) >"
3949                  (         DISK.ASM):00437         defalullen:
     0010             (         DISK.ASM):00438         DEFALL          EQU defalullen-DEFALT
                      (         DISK.ASM):00439         
3949                  (         DISK.ASM):00440         SING:
3949 0D               (         DISK.ASM):00441                 FCB     EOL
394A 534156494E47     (         DISK.ASM):00442                 FCC     "SAVING"
3950                  (         DISK.ASM):00443         sinlen:
     0007             (         DISK.ASM):00444         SINGL           EQU sinlen-SING
                      (         DISK.ASM):00445         
3950                  (         DISK.ASM):00446         RING:
3950 0D               (         DISK.ASM):00447                 FCB     EOL
3951 524553544F52494E (         DISK.ASM):00448                 FCC     "RESTORING"
     47
395A                  (         DISK.ASM):00449         ringlen:
     000A             (         DISK.ASM):00450         RINGL           EQU ringlen-RING
                      (         DISK.ASM):00451         
395A                  (         DISK.ASM):00452         PTION:
395A 20504F534954494F (         DISK.ASM):00453                 FCC     " POSITION "
     4E20
3964                  (         DISK.ASM):00454         PDO:
3964 31202E2E2E       (         DISK.ASM):00455                 FCC     "1 ..."
3969 0D               (         DISK.ASM):00456                 FCB     EOL
396A                  (         DISK.ASM):00457         ptionlen:
     0010             (         DISK.ASM):00458         PTIONL          EQU ptionlen-PTION
                      (         DISK.ASM):00459         
396A                  (         DISK.ASM):00460         ENDTST:
396A 454E44           (         DISK.ASM):00461                 FCC     "END"
                      (     cubixzip.asm):00072         
                      (     cubixzip.asm):00073         ;TITLE "ZIP/6809-B INFOCOM, INC."
                      (     cubixzip.asm):00074                 IF      DEBUG
                      (     cubixzip.asm):00075                     INCLUDE BUGGER.ASM
                      (       BUGGER.ASM):00001         ;       PAGE
                      (       BUGGER.ASM):00002         ;       SBTTL "--- DEBUGGER ---"
                      (       BUGGER.ASM):00003         
                      (       BUGGER.ASM):00004         ; --------
                      (       BUGGER.ASM):00005         ; DEBUGGER
                      (       BUGGER.ASM):00006         ; --------
                      (       BUGGER.ASM):00007         
                      (       BUGGER.ASM):00008         ; ENTRY: BREAKPOINT # IN [B]
                      (       BUGGER.ASM):00009         
396D                  (       BUGGER.ASM):00010         DOBUG:
396D 8642             (       BUGGER.ASM):00011                 LDA     #'B'                              ; "BUG:"
396F 3477             (       BUGGER.ASM):00012                 PSHS    A,B,X,Y,U,CC
3971 3F               (       BUGGER.ASM):00013                 SWI
3972 21               (       BUGGER.ASM):00014                 FCB     33                                ;DISPLAY
3973 3577             (       BUGGER.ASM):00015                 PULS    A,B,X,Y,U,CC
3975 8650             (       BUGGER.ASM):00016                 LDA     #'P'
3977 3477             (       BUGGER.ASM):00017                 PSHS    A,B,X,Y,U,CC
3979 3F               (       BUGGER.ASM):00018                 SWI
397A 21               (       BUGGER.ASM):00019                 FCB     33                                ;DISPLAY
397B 3577             (       BUGGER.ASM):00020                 PULS    A,B,X,Y,U,CC
397D BD39FA           (       BUGGER.ASM):00021                 JSR     COLON
                      (       BUGGER.ASM):00022         
3980 E780             (       BUGGER.ASM):00023                 STB     ,X+                               ; SHOW BREAKPOINT ID
3982 BD39FE           (       BUGGER.ASM):00024                 JSR     BUGSP                             ; SPACE
                      (       BUGGER.ASM):00025         
3985 9600             (       BUGGER.ASM):00026                 LDA     OPCODE
3987 2A10             (       BUGGER.ASM):00027                 BPL     P2OP                              ; 2-OP IF POSITIVE
3989 81B0             (       BUGGER.ASM):00028                 CMPA    #176
398B 2510             (       BUGGER.ASM):00029                 BLO     P1OP                              ; 1-OP
398D 81C0             (       BUGGER.ASM):00030                 CMPA    #192
398F 2510             (       BUGGER.ASM):00031                 BLO     POP0                              ; 0-OP
3991 81E0             (       BUGGER.ASM):00032                 CMPA    #224
3993 2510             (       BUGGER.ASM):00033                 BLO     POPE                              ; EXTENDED 2-OP
                      (       BUGGER.ASM):00034         
3995 8658             (       BUGGER.ASM):00035                 LDA     #'X'                              ; OR X-OP
3997 200E             (       BUGGER.ASM):00036                 BRA     POPC
                      (       BUGGER.ASM):00037         
3999                  (       BUGGER.ASM):00038         P2OP:
3999 8632             (       BUGGER.ASM):00039                 LDA     #'2'
399B 200A             (       BUGGER.ASM):00040                 BRA     POPC
                      (       BUGGER.ASM):00041         
399D                  (       BUGGER.ASM):00042         P1OP:
399D 8631             (       BUGGER.ASM):00043                 LDA     #'1'
399F 2006             (       BUGGER.ASM):00044                 BRA     POPC
                      (       BUGGER.ASM):00045         
39A1                  (       BUGGER.ASM):00046         POP0:
39A1 8630             (       BUGGER.ASM):00047                 LDA     #'0'
39A3 2002             (       BUGGER.ASM):00048                 BRA     POPC
                      (       BUGGER.ASM):00049         
39A5                  (       BUGGER.ASM):00050         POPE:
39A5 8645             (       BUGGER.ASM):00051                 LDA     #'E'
                      (       BUGGER.ASM):00052         
39A7                  (       BUGGER.ASM):00053         POPC:
39A7 3477             (       BUGGER.ASM):00054                     PSHS    A,B,X,Y,U,CC
39A9 3F               (       BUGGER.ASM):00055                 SWI
39AA 21               (       BUGGER.ASM):00056                 FCB     33                                ;DISPLAY
39AB 3577             (       BUGGER.ASM):00057                 PULS    A,B,X,Y,U,CC
                      (       BUGGER.ASM):00058         
                      (       BUGGER.ASM):00059         
39AD 862D             (       BUGGER.ASM):00060                 LDA     #'-'                              ; "-OP:"
39AF 3477             (       BUGGER.ASM):00061                    PSHS    A,B,X,Y,U,CC
39B1 3F               (       BUGGER.ASM):00062                 SWI
39B2 21               (       BUGGER.ASM):00063                 FCB     33                                ;DISPLAY
39B3 3577             (       BUGGER.ASM):00064                 PULS    A,B,X,Y,U,CC
                      (       BUGGER.ASM):00065                                ;DISPLAY
39B5 864F             (       BUGGER.ASM):00066                 LDA     #'O'
39B7 3477             (       BUGGER.ASM):00067                        PSHS    A,B,X,Y,U,CC
39B9 3F               (       BUGGER.ASM):00068                 SWI
39BA 21               (       BUGGER.ASM):00069                 FCB     33                                ;DISPLAY
39BB 3577             (       BUGGER.ASM):00070                 PULS    A,B,X,Y,U,CC
                      (       BUGGER.ASM):00071         
39BD 8650             (       BUGGER.ASM):00072                 LDA     #'P'
39BF 3477             (       BUGGER.ASM):00073                        PSHS    A,B,X,Y,U,CC
39C1 3F               (       BUGGER.ASM):00074                 SWI
39C2 21               (       BUGGER.ASM):00075                 FCB     33                                ;DISPLAY
39C3 3577             (       BUGGER.ASM):00076                 PULS    A,B,X,Y,U,CC
                      (       BUGGER.ASM):00077         
39C5 8D33             (       BUGGER.ASM):00078                 BSR     COLON
                      (       BUGGER.ASM):00079         
39C7 9600             (       BUGGER.ASM):00080                 LDA     OPCODE                            ; SHOW OPCODE
39C9 8D37             (       BUGGER.ASM):00081                 BSR     INHEX
39CB 8D31             (       BUGGER.ASM):00082                 BSR     BUGSP
                      (       BUGGER.ASM):00083         
39CD 8650             (       BUGGER.ASM):00084                 LDA     #'P'                              ; "PC:"
39CF 3477             (       BUGGER.ASM):00085                       PSHS    A,B,X,Y,U,CC
39D1 3F               (       BUGGER.ASM):00086                 SWI
39D2 21               (       BUGGER.ASM):00087                 FCB     33                                ;DISPLAY
39D3 3577             (       BUGGER.ASM):00088                 PULS    A,B,X,Y,U,CC
                      (       BUGGER.ASM):00089         
39D5 8643             (       BUGGER.ASM):00090                 LDA     #'C'
39D7 3477             (       BUGGER.ASM):00091                        PSHS    A,B,X,Y,U,CC
39D9 3F               (       BUGGER.ASM):00092                 SWI
39DA 21               (       BUGGER.ASM):00093                 FCB     33                                ;DISPLAY
39DB 3577             (       BUGGER.ASM):00094                 PULS    A,B,X,Y,U,CC
                      (       BUGGER.ASM):00095         
39DD 8D1B             (       BUGGER.ASM):00096                 BSR     COLON
                      (       BUGGER.ASM):00097         
39DF 0D13             (       BUGGER.ASM):00098                 TST     ZPCH                              ; IF ZPCH <> 0
39E1 2704             (       BUGGER.ASM):00099                 BEQ     DOBZ                              ; PRINT "0"
39E3 8631             (       BUGGER.ASM):00100                 LDA     #'1'                              ; ELSE PRINT "1"
39E5 2002             (       BUGGER.ASM):00101                 BRA     TOPPC
                      (       BUGGER.ASM):00102         
39E7                  (       BUGGER.ASM):00103         DOBZ:
39E7 8630             (       BUGGER.ASM):00104                 LDA     #'0'
39E9                  (       BUGGER.ASM):00105         TOPPC:
39E9 3477             (       BUGGER.ASM):00106                       PSHS    A,B,X,Y,U,CC
39EB 3F               (       BUGGER.ASM):00107                 SWI
39EC 21               (       BUGGER.ASM):00108                 FCB     33                                ;DISPLAY
39ED 3577             (       BUGGER.ASM):00109                 PULS    A,B,X,Y,U,CC
                      (       BUGGER.ASM):00110         
                      (       BUGGER.ASM):00111         
39EF 9614             (       BUGGER.ASM):00112                 LDA     ZPCM                              ; PRINT ZPCM & L
39F1 8D0F             (       BUGGER.ASM):00113                 BSR     INHEX
39F3 9615             (       BUGGER.ASM):00114                 LDA     ZPCL
39F5 8D0B             (       BUGGER.ASM):00115                 BSR     INHEX
39F7 8D05             (       BUGGER.ASM):00116                 BSR     BUGSP
                      (       BUGGER.ASM):00117         
39F9 39               (       BUGGER.ASM):00118                 RTS
                      (       BUGGER.ASM):00119         
                      (       BUGGER.ASM):00120         ; -------------
                      (       BUGGER.ASM):00121         ; PRINT A COLON
                      (       BUGGER.ASM):00122         ; -------------
                      (       BUGGER.ASM):00123         
39FA                  (       BUGGER.ASM):00124         COLON:
39FA 863A             (       BUGGER.ASM):00125                 LDA     #':'
39FC 2018             (       BUGGER.ASM):00126                 BRA     POOP
                      (       BUGGER.ASM):00127         
                      (       BUGGER.ASM):00128         ; -------------
                      (       BUGGER.ASM):00129         ; PRINT A SPACE
                      (       BUGGER.ASM):00130         ; -------------
                      (       BUGGER.ASM):00131         
39FE                  (       BUGGER.ASM):00132         BUGSP:
39FE 8620             (       BUGGER.ASM):00133                 LDA     #$20
3A00 2014             (       BUGGER.ASM):00134                 BRA     POOP
                      (       BUGGER.ASM):00135         
                      (       BUGGER.ASM):00136         ; ----------------
                      (       BUGGER.ASM):00137         ; PRINT [A] IN HEX
                      (       BUGGER.ASM):00138         ; ----------------
                      (       BUGGER.ASM):00139         
3A02                  (       BUGGER.ASM):00140         INHEX:
3A02 1F89             (       BUGGER.ASM):00141                 TFR     A,B
3A04 44               (       BUGGER.ASM):00142                 LSRA                                      ; SHIFT HIGH NIBBLE INTO PLACE
3A05 44               (       BUGGER.ASM):00143                 LSRA
3A06 44               (       BUGGER.ASM):00144                 LSRA
3A07 44               (       BUGGER.ASM):00145                 LSRA
                      (       BUGGER.ASM):00146         
3A08 8D02             (       BUGGER.ASM):00147                 BSR     TOASC                             ; CONVERT HIGH NIBBLE & SHOW
3A0A 1F98             (       BUGGER.ASM):00148                 TFR     B,A
                      (       BUGGER.ASM):00149         
3A0C                  (       BUGGER.ASM):00150         TOASC:
3A0C 840F             (       BUGGER.ASM):00151                 ANDA    #%00001111
3A0E 810A             (       BUGGER.ASM):00152                 CMPA    #10                               ; CONVERT LOW NIBBLE & SHOW
3A10 2502             (       BUGGER.ASM):00153                 BLO     IH1
3A12 8B07             (       BUGGER.ASM):00154                 ADDA    #7
3A14                  (       BUGGER.ASM):00155         IH1:
3A14 8B30             (       BUGGER.ASM):00156                 ADDA    #$30
                      (       BUGGER.ASM):00157         
3A16                  (       BUGGER.ASM):00158         POOP:
3A16 3477             (       BUGGER.ASM):00159                       PSHS    A,B,X,Y,U,CC
3A18 3F               (       BUGGER.ASM):00160                 SWI
3A19 21               (       BUGGER.ASM):00161                 FCB     33                                ;DISPLAY
3A1A 3577             (       BUGGER.ASM):00162                 PULS    A,B,X,Y,U,CC
                      (       BUGGER.ASM):00163         
3A1C 39               (       BUGGER.ASM):00164                 RTS
                      (     cubixzip.asm):00076                 ENDIF
                      (     cubixzip.asm):00077         
                      (     cubixzip.asm):00078                 END

Symbol Table:
[ G] ABSVAL                           2EDF
[ G] ABTEMP                           2EE6
[ G] AINIT                            35D8
[ G] ARG1                             0002
[ G] ARG2                             0004
[ G] ARG3                             0006
[ G] ARG4                             0008
[ G] ARGCNT                           0001
[ G] BADKEY                           34FD
[ G] BADOP1                           2965
[ G] BADOP2                           29B3
[ G] BFREQ                            1000
[ G] BINDEX                           0053
[ G] BLINK                            005C
[ G] BOOP                             35D9
[ G] BRKTBL                           3192
[ G] BS                               0008
[ G] BUFINC                           3713
[ G] BUFSAV                           2740
[ G] BUGSP                            39FE
[ G] CDEL                             3538
[ G] CDELAY                           3535
[ G] CEXIT                            2D2A
[ G] CFLAG                            005D
[ G] CFREQ                            0100
[ G] CHAR                             35A4
[ G] CHRPNT                           0051
[ G] CHRTBL                           346A
[ G] CLICK                            3530
[ G] CLS                              35CC
[ G] CNLOOP                           3423
[ G] CNOK                             342B
[ G] CNZS2M                           341E
[ G] CNZSC1                           33E4
[ G] CNZSC3                           33EC
[ G] CNZSL1                           339F
[ G] CNZSL2                           33B0
[ G] CNZSLC                           33C9
[ G] CNZSLE                           344D
[ G] CNZSLO                           33D5
[ G] COLD                             35F0
[ G] COLON                            39FA
[ G] CONZST                           338F
[ G] COUT                             3676
[ G] CPSAV                            0052
[ G] CR1                              36A6
[ G] CSPERM                           002A
[ G] CSTEMP                           0029
[ G] CYCLE                            005A
[ G] DBLOCK                           004C
[ G] DBUFF                            004A
[ G] DEBUG                            0001
[ G] DECX                             2F0C
[ G] DEFALL                           0010
[ G] DEFALT                           3939
[ G] defalullen                       3949
[ G] DEFNUM                           3945
[ G] DELAY                            35DA
[ G] DELOOP                           35DD
[ G] DERR2                            377E
[ G] DGC                              3024
[ G] DIGCNT                           3022
[ G] DISPX                            292C
[ G] DIVERR                           2F19
[ G] DIVEX                            2EE5
[ G] DIVIDE                           2EBF
[ G] DLINE                            389E
[ G] DOB2                             2A79
[ G] DOBUG                            396D
[ G] DOBZ                             39E7
[ G] DOCALL                           2F4D
[ G] DODEF                            3892
[ G] DODIS                            292F
[ G] DOEQ                             2F27
[ G] DOREST                           37D1
[ G] DOUDIV                           2ED3
[ G] DRIVE                            0049
[ G] DRVSET                           3870
[ G] DSKERR                           377A
[ G] DSKEX                            3780
[ G] DSTART                           0000
[ G] DTEMP                            3726
[ G] DVINIT                           2EB7
[ G] EAR0                             3273
[ G] EAR1                             327B
[ G] EARLY                            3269
[ G] ENDCMP                           281C
[ G] ENDERR                           2817
[ G] ENDLIN                           3581
[ G] ENDOK                            2820
[ G] ENDSES                           364E
[ G] endseslen                        365D
[ G] ENDSL                            000F
[ G] ENDTST                           396A
[ G] ENTER                            380E
[ G] EOL                              000D
[ G] EQBAD                            2F40
[ G] EQOK                             2F43
[ G] ERRWP                            37BF
[ G] ETPEX                            2E35
[ G] FALSE                            0000
[ G] FBRK                             3161
[ G] FINDW                            3163
[ G] FIRST1                           2BE8
[ G] FLAGSU                           34B9
[ G] FLEX                             3147
[ G] FLGSU1                           34CC
[ G] FLGSU2                           34D7
[ G] FLGSU3                           34E0
[ G] FLUSHW                           3131
[ G] FREEZE                           364C
[ G] FWL1                             3170
[ G] FWORDS                           0025
[ G] FWSUCC                           318B
[ G] GAMDRI                           38D5
[ G] GAME                             38D8
[ G] GAMEL                            001F
[ G] gamelen                          38F7
[ G] GDRIVE                           0056
[ G] GETBYT                           31D2
[ G] GETDRV                           385E
[ G] GETDSK                           36CF
[ G] GETDSK1                          36F7
[ G] GETKEY                           3502
[ G] GETLNG                           29C0
[ G] GETMOD                           334B
[ G] GETP1                            2DF9
[ G] GETP2                            2E18
[ G] GETP2A                           2E2F
[ G] GETP2B                           2E28
[ G] GETP3                            2E07
[ G] GETPOS                           3834
[ G] GETPT1                           2E3D
[ G] GETPT2                           2E4D
[ G] GETSHT                           29B8
[ G] GETVAR                           29D7
[ G] GETVR1                           29DD
[ G] GETVRG                           29EE
[ G] GETVRL                           29E1
[ G] GETWRD                           3198
[ G] GETZCH                           3357
[ G] GETZH1                           336E
[ G] GETZH2                           3385
[ G] GETZH3                           3381
[ G] GK                               3504
[ G] GLOBAL                           0021
[ G] GM                               3352
[ G] GOBACK                           3578
[ G] GPOSIT                           0057
[ G] GPT                              2E53
[ G] GTBT0                            31E3
[ G] GTBT1                            31E7
[ G] GTBT2                            31EF
[ G] GTBT3                            3202
[ G] GTEXIT                           336A
[ G] GTVX                             29E8
[ G] GTZ0                             335D
[ G] IERRL                            0011
[ G] IH1                              3A14
[ G] IHOLD                            005F
[ G] INFCB                            DD00
[ G] INFILE                           36AD
[ G] INHEX                            3A02
[ G] INLOOP                           3548
[ G] INPEX                            35A0
[ G] INPUT                            353D
[ G] INSERM                           38B9
[ G] INSERML                          001F
[ G] insermlen                        38D8
[ G] INTERR                           3618
[ G] interrlen                        3629
[ G] IOBUFF                           2200
[ G] IOCHAR                           0055
[ G] KTEST                            3510
[ G] LDPRE                            28A6
[ G] LINCNT                           0054
[ G] LINE                             35BC
[ G] LN                               35BF
[ G] loadlen                          3618
[ G] LOADM                            3600
[ G] LOADML                           0018
[ G] LOCALS                           2700
[ G] LOCLP                            37A1
[ G] LREST                            37DB
[ G] LRU                              000A
[ G] LRUMAP                           2650
[ G] LSAVE                            3773
[ G] LUKE                             35F2
[ G] MASK                             0043
[ G] MATH                             2E82
[ G] MEMTOP                           00DC
[ G] MLOOP                            28BD
[ G] MOREL                            0006
[ G] MORES                            367D
[ G] morlen                           3683
[ G] MPCFLG                           001F
[ G] MPCH                             001A
[ G] MPCL                             001C
[ G] MPCM                             001B
[ G] MPCPNT                           001D
[ G] MSTACK                           21FE
[ G] MSTART                           2100
[ G] MTEMP                            0047
[ G] NBR1                             3158
[ G] NBRKP                            314C
[ G] NBRKS                            0006
[ G] NEXTPC                           31A1
[ G] NOMORE                           3568
[ G] NOPS0                            000E
[ G] NOPS1                            0010
[ G] NOPS2                            0019
[ G] NOPSX                            000C
[ G] NORAM                            2866
[ G] NPC0                             31B2
[ G] NPC1                             31B6
[ G] NPC2                             31BE
[ G] NPC3                             31D1
[ G] NUMBER                           3016
[ G] NXTP1                            2E65
[ G] NXTP2                            2E78
[ G] NXTP3                            2E75
[ G] OBJLOC                           34E7
[ G] OP0                              293F
[ G] OP1                              294F
[ G] OP1A                             2958
[ G] OP1B                             2961
[ G] OP1C                             296A
[ G] OP1EX                            296D
[ G] OP2                              2980
[ G] OP2A                             2989
[ G] OP2B                             298C
[ G] OP2C                             299D
[ G] OP2D                             29A0
[ G] OP2EX                            29A6
[ G] OPCODE                           0000
[ G] OPENGAMEDSK                      36BF
[ G] OPEXT                            28DB
[ G] OPT0                             2AC4
[ G] OPT1                             2AE0
[ G] OPT2                             2B00
[ G] OPTX                             2B32
[ G] OPX0                             28E4
[ G] OPX1                             28EA
[ G] OPX2                             28F3
[ G] OPX3                             28FC
[ G] OPX4                             2919
[ G] OPXNXT                           2903
[ G] OUTCHR                           34F6
[ G] OVER                             2A4C
[ G] OZSTAK                           0027
[ G] P1OP                             399D
[ G] P2OP                             3999
[ G] PAGE                             3203
[ G] PAGE0                            000E
[ G] PARAMS                           3822
[ G] PATCH                            31DC
[ G] PBAD                             2D2E
[ G] PDB0                             2AAB
[ G] PDB1                             2AC3
[ G] PDO                              3964
[ G] PG0                              320A
[ G] PG1                              322F
[ G] PG2                              3245
[ G] PG3                              324D
[ G] PG4                              325A
[ G] PG5                              3264
[ G] PKICK                            3528
[ G] PMAX                             000C
[ G] PNBX                             2A5E
[ G] POK                              2D4F
[ G] POOP                             3A16
[ G] POP0                             39A1
[ G] POPC                             39A7
[ G] POPE                             39A5
[ G] POPSTK                           2A3C
[ G] POSIT                            3913
[ G] POSITL                           0018
[ G] positlen                         392B
[ G] POSSET                           3848
[ G] PPX                              34B2
[ G] PREDB                            2A65
[ G] PREDB1                           2A84
[ G] PREDB3                           2A91
[ G] PREDF                            2A51
[ G] PREDLB                           2A71
[ G] PREDNB                           2A57
[ G] PREDS                            2A5F
[ G] PRESS                            38F7
[ G] PRESSL                           001C
[ G] presslen                         3913
[ G] PRNTDC                           2C91
[ G] PRNTN3                           3038
[ G] PRNTN4                           303C
[ G] PROPB                            3484
[ G] PROPL                            34A1
[ G] PROPN                            3499
[ G] PROPNX                           34AE
[ G] PSHDZ                            2A33
[ G] PSHSTK                           2A31
[ G] PTABLE                           2500
[ G] pth                              31DB
[ G] PTION                            395A
[ G] PTIONL                           0010
[ G] ptionlen                         396A
[ G] PTP                              2FE8
[ G] PTP1                             2FFD
[ G] PTVX                             2A22
[ G] PUTBYT                           2A05
[ G] PUTP1                            2FDA
[ G] PUTP2                            2FED
[ G] PUTP2A                           3005
[ G] PUTVAL                           2A09
[ G] PUTVLG                           2A28
[ G] PUTVLL                           2A1B
[ G] PUTVR1                           2A17
[ G] PZERO                            3048
[ G] PZSTFO                           003C
[ G] PZSTP0                           32BE
[ G] PZSTP1                           32C0
[ G] PZSTR                            329D
[ G] PZSTR1                           32C5
[ G] PZSTR2                           32CD
[ G] PZSTRA                           32DA
[ G] PZSTRF                           3309
[ G] PZSTRL                           32A5
[ G] PZSTRP                           32FF
[ G] PZSTRS                           32EF
[ G] PZSTRT                           32F3
[ G] QKEY                             3514
[ G] RAND1                            0058
[ G] RAND2                            0059
[ G] RBRKP                            3148
[ G] RDEX                             30AA
[ G] READL                            3099
[ G] READL2                           30DC
[ G] READL3                           3102
[ G] REMVC1                           2C73
[ G] REMVC2                           2C88
[ G] REMVEX                           2C8E
[ G] REND                             3723
[ G] RES                              38AE
[ G] RESL                             0007
[ G] reslen                           38B5
[ G] RESLP                            37B6
[ G] RESUME                           37F7
[ G] RET0                             2A04
[ G] RET1                             2CB7
[ G] RET2                             2CC0
[ G] RETERR                           2CD8
[ G] RFLIP                            2EDB
[ G] RING                             3950
[ G] RINGL                            000A
[ G] ringlen                          395A
[ G] RL1                              30A6
[ G] RL2                              30AB
[ G] RL3                              30B4
[ G] RS1                              2000
[ G] RS1E                             200A
[ G] RSIBRK                           30FA
[ G] RTABP                            003A
[ G] SAV                              38B5
[ G] SAVL                             0004
[ G] savlen                           38B9
[ G] SAVRES                           3727
[ G] SCMP                             2D3C
[ G] SCOMP                            2D31
[ G] SCRIPT                           005E
[ G] SCROUT                           3595
[ G] SENDCH                           3559
[ G] SETA0                            2870
[ G] SETDRV                           3872
[ G] SETNP                            286A
[ G] SETPOS                           3846
[ G] SETSTR                           328E
[ G] SETWRD                           3285
[ G] SFLAG                            35A3
[ G] SIBRKP                           3153
[ G] SING                             3949
[ G] SINGL                            0007
[ G] sinlen                           3950
[ G] SPACE                            0020
[ G] SPCS                             369E
[ G] SQUOT                            0045
[ G] SREM                             0046
[ G] ST0                              2823
[ G] ST1A                             2831
[ G] ST1B                             283B
[ G] STABP                            003B
[ G] STAMP                            0011
[ G] START                            2800
[ G] STBYTF                           002B
[ G] SWAP                             0012
[ G] TABS                             2ECD
[ G] TABTOP                           000F
[ G] TDRIVE                           0061
[ G] TEMP                             003F
[ G] TEMP2                            0041
[ G] TIMEFL                           0050
[ G] TIONP                            38A7
[ G] TOASC                            3A0C
[ G] TOBOOT                           37FC
[ G] TOPPC                            39E9
[ G] TOPRIN                           3588
[ G] TOPSTA                           24FE
[ G] TOSCR                            355C
[ G] TPOSIT                           0060
[ G] TRACK                            004E
[ G] TRUE                             00FF
[ G] TSTEND                           2807
[ G] UDIV                             2EED
[ G] UDLOOP                           2EF8
[ G] UDNEXT                           2F0B
[ G] UNDER                            2A47
[ G] VAL                              003D
[ G] VARGET                           29CF
[ G] VARPUT                           29F7
[ G] VCODE                            365C
[ G] VCODEL                           0012
[ G] vcodelen                         366E
[ G] VERNUM                           366E
[ G] VERSOK                           37C4
[ G] VOCAB                            0023
[ G] VSUM                             2BA4
[ G] VSUM0                            2BB0
[ G] WDRIV                            392B
[ G] WDRIVL                           000E
[ G] wdrivlen                         3939
[ G] WNEXT                            317E
[ G] ZADD                             2E7E
[ G] ZB0                              2D65
[ G] ZBAND                            2D6A
[ G] ZBCOM                            2CF9
[ G] ZBEGIN                           0006
[ G] ZBOR                             2D5F
[ G] ZBTST                            2D52
[ G] ZCALL                            2F46
[ G] ZCALL1                           2F76
[ G] ZCALL2                           2F91
[ G] ZCALL3                           2F95
[ G] ZCALL4                           2FAC
[ G] ZCHKSM                           001C
[ G] ZCHR1                            343A
[ G] ZCHR2                            3445
[ G] ZCHRCS                           3430
[ G] ZCHRX                            344C
[ G] ZCODE                            3F00
[ G] ZCODEHIGH                        003F
[ G] ZCRLF                            3683
[ G] ZDEC                             2C39
[ G] ZDIV                             2EAC
[ G] ZDLESS                           2D16
[ G] ZENDLD                           0004
[ G] ZEQUAL                           2F1E
[ G] ZERROR                           3629
[ G] ZFCLR                            2D91
[ G] ZFIRST                           2BE1
[ G] ZFSET                            2D83
[ G] ZFSETP                           2D72
[ G] ZFWORD                           0018
[ G] ZGET                             2DD0
[ G] ZGETB                            2DE3
[ G] ZGETP                            2DF6
[ G] ZGETPT                           2E3A
[ G] ZGLOBA                           000C
[ G] ZGRTR                            2D0C
[ G] ZID                              0002
[ G] ZIGRTR                           2D1F
[ G] ZIN                              2D42
[ G] ZINC                             2C21
[ G] ZINC1                            2C2B
[ G] ZIP                              2800
[ G] ZJUMP                            2CDD
[ G] ZLENTH                           001A
[ G] ZLESS                            2D02
[ G] ZLOC                             2BFF
[ G] ZMLOOP                           2E94
[ G] ZMNEXT                           2EA4
[ G] ZMOD                             2EB1
[ G] ZMODE                            0001
[ G] ZMOVE                            2DAA
[ G] ZMUL                             2E8D
[ G] ZMVEX                            2DCF
[ G] ZNEXT                            2BD8
[ G] ZNEXTP                           2E5E
[ G] ZNOOP                            2B72
[ G] ZOBJEC                           000A
[ G] ZPAGE                            000D
[ G] ZPCFLG                           0018
[ G] ZPCH                             0013
[ G] ZPCL                             0015
[ G] ZPCM                             0014
[ G] ZPCPNT                           0016
[ G] ZPGTOP                           0060
[ G] ZPOP                             306E
[ G] ZPRB                             2C45
[ G] ZPRC                             300D
[ G] ZPRD                             2C8F
[ G] ZPRI                             2B55
[ G] ZPRINT                           2CE7
[ G] ZPRN                             3012
[ G] ZPRR                             2B73
[ G] ZPTSIZ                           2C0F
[ G] ZPURBT                           000E
[ G] ZPURE                            000B
[ G] ZPUSH                            3069
[ G] ZPUT                             2FB7
[ G] ZPUTB                            2FC9
[ G] ZPUTP                            2FD7
[ G] ZQUIT                            3642
[ G] ZRAND                            304D
[ G] ZREAD                            3076
[ G] ZREMOV                           2C4F
[ G] ZREST                            3783
[ G] ZRET                             2CA3
[ G] ZRFALS                           2B52
[ G] ZRSTAK                           2B7A
[ G] ZRT                              2B4C
[ G] ZRTRUE                           2B4A
[ G] ZSAVE                            3730
[ G] ZSCRIP                           0010
[ G] ZSCRN                            2B72
[ G] ZSERIA                           0012
[ G] ZSET                             2DA1
[ G] ZSPLIT                           2B72
[ G] ZSTACK                           2300
[ G] ZSTAKL                           00FF
[ G] ZSTART                           35E2
[ G] ZSTBUI                           002E
[ G] ZSTBUO                           0034
[ G] ZSTEX                            329C
[ G] ZSTWRD                           002C
[ G] ZSUB                             2E87
[ G] ZUSL                             36AC
[ G] ZVALUE                           2CF1
[ G] ZVER                             2B82
[ G] ZVERS                            0000
[ G] ZVOCAB                           0008
[ G] ZZERO                            2BCF
