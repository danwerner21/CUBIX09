                      (     cubixzip.asm):00001         ;TITLE   "ZIP/6809-C INFOCOM, INC. --- INITIALIZATION"
                      (     cubixzip.asm):00002         
                      (     cubixzip.asm):00003         ; -------------------------------
                      (     cubixzip.asm):00004         ; ZIP/6809 VERSION C
                      (     cubixzip.asm):00005         ; Z-CODE INTERPRETER PROGRAM
                      (     cubixzip.asm):00006         ; FOR CUBIX
                      (     cubixzip.asm):00007         ; -------------------------------
                      (     cubixzip.asm):00008         
                      (     cubixzip.asm):00009         ; COMPANY PRIVATE -- NOT FOR DISTRIBUTION
                      (     cubixzip.asm):00010         
     0000             (     cubixzip.asm):00011         DEBUG           = 0                               ; ASSEMBLY FLAG
                      (     cubixzip.asm):00012         
                      (     cubixzip.asm):00013         ; -----------
                      (     cubixzip.asm):00014         ; ERROR CODES
                      (     cubixzip.asm):00015         ; -----------
                      (     cubixzip.asm):00016         
                      (     cubixzip.asm):00017         ; 00 -- INSUFFICIENT RAM
                      (     cubixzip.asm):00018         ; 01 -- ILLEGAL X-OP
                      (     cubixzip.asm):00019         ; 02 -- ILLEGAL 0-OP
                      (     cubixzip.asm):00020         ; 03 -- ILLEGAL 1-OP
                      (     cubixzip.asm):00021         ; 04 -- ILLEGAL 2-OP
                      (     cubixzip.asm):00022         ; 05 -- Z-STACK UNDERFLOW
                      (     cubixzip.asm):00023         ; 06 -- Z-STACK OVERFLOW
                      (     cubixzip.asm):00024         ; 07 -- ILLEGAL PROPERTY LENGTH (GETP)
                      (     cubixzip.asm):00025         ; 08 -- DIVISION BY ZERO
                      (     cubixzip.asm):00026         ; 09 -- ILLEGAL ARGUMENT COUNT (EQUAL?)
                      (     cubixzip.asm):00027         ; 10 -- ILLEGAL PROPERTY ID (PUTP)
                      (     cubixzip.asm):00028         ; 11 -- ILLEGAL PROPERTY LENGTH (PUTP)
                      (     cubixzip.asm):00029         ; 12 -- DISK ADDRESS OUT OF RANGE
                      (     cubixzip.asm):00030         ; 13 -- PARSER OVERFLOW
                      (     cubixzip.asm):00031         ; 14 -- DRIVE ACCESS
                      (     cubixzip.asm):00032         ; 15 -- Z-STACK DESTROYED
                      (     cubixzip.asm):00033         ; 16 -- ZIP NOT FULLY LOADED
                      (     cubixzip.asm):00034         
                      (     cubixzip.asm):00035                 ORG     $2000
                      (     cubixzip.asm):00036         
2000                  (     cubixzip.asm):00037         RS1:
2000 4F               (     cubixzip.asm):00038                 CLRA                                      ; USE PAGE ZERO
2001 1F8B             (     cubixzip.asm):00039                 TFR     A,DP                              ; AS THE DIRECT PAGE
2003 10CE21FE         (     cubixzip.asm):00040                 LDS     #MSTACK                           ; GIVE THE STACK A NEW HOME
2007 7E362E           (     cubixzip.asm):00041                 JMP     COLD                              ; PERFORM ONE-TIME INITIALIZATION
200A                  (     cubixzip.asm):00042         RS1E:
200A                  (     cubixzip.asm):00043                 RMB     $100-(RS1E-RS1)
                      (     cubixzip.asm):00044         
                      (     cubixzip.asm):00045         
2100                  (     cubixzip.asm):00046         MSTART: ; START OF FREE PROGRAM RAM
                      (     cubixzip.asm):00047         
                      (     cubixzip.asm):00048                 INCLUDE eq.asm
                      (           eq.asm):00001         ;PAGE
                      (           eq.asm):00002         ;SBTTL "--- MEMORY ORGANIZATION ---"
                      (           eq.asm):00003         
     0100             (           eq.asm):00004         CFREQ           = $100
     1000             (           eq.asm):00005         BFREQ           = $1000
                      (           eq.asm):00006         
                      (           eq.asm):00007         
     00FF             (           eq.asm):00008         TRUE            = $FF
     0000             (           eq.asm):00009         FALSE           = 0
                      (           eq.asm):00010         
     0000             (           eq.asm):00011         DSTART          = 0                               ; START OF DIRECT-PAGE RAM
                      (           eq.asm):00012         
     21FE             (           eq.asm):00013         MSTACK          = MSTART+$FE                      ; TOP OF MACHINE STACK (254 BYTES)
     2200             (           eq.asm):00014         IOBUFF          = MSTART+$100                     ; 256-BYTE DISK I/O BUFFER
     2300             (           eq.asm):00015         ZSTACK          = MSTART+$200                     ; Z-STACK (255 WORDS)
     00FF             (           eq.asm):00016         ZSTAKL          = 255                             ; LENGTH OF Z-STACK IN WORDS
     24FE             (           eq.asm):00017         TOPSTA          = (2*ZSTAKL)+ZSTACK               ; TOP OF Z-STACK
     2500             (           eq.asm):00018         PTABLE          = MSTART+$400                     ; PAGING TABLE ($140 BYTES/$A0 WORDS)
     2650             (           eq.asm):00019         LRUMAP          = MSTART+$550                     ; TIMESTAMP MAP ($A0 BYTES)
     2700             (           eq.asm):00020         LOCALS          = MSTART+$600                     ; LOCAL VARIABLE STORAGE (32 BYTES)
     2740             (           eq.asm):00021         BUFSAV          = MSTART+$640                     ; I/O AUX BUFFER (32 BYTES)
     2800             (           eq.asm):00022         ZIP             = MSTART+$700                     ; START OF EXECUTABLE CODE
     3F00             (           eq.asm):00023         ZCODE           = ZIP+$1700                       ; START OF Z-CODE (ASSUME 5.75K ZIP)
     003F             (           eq.asm):00024         ZCODEHIGH       = (ZIP+$1700)/256                 ; START OF Z-CODE (ASSUME 5.75K ZIP)
     00CF             (           eq.asm):00025         MEMTOP          = $CF                             ; TOP PAGE OF AVAILABLE RAM
     D000             (           eq.asm):00026         SAVFCB          = $D000
     DBB0             (           eq.asm):00027         BUFFER          = $DBB0
     DB60             (           eq.asm):00028         OBUFSAV         = $DB60
     DC00             (           eq.asm):00029         INFCB           = $DC00
                      (           eq.asm):00030         
                      (           eq.asm):00031         ; Z-CODE HEADER OFFSETS
                      (           eq.asm):00032         
     0000             (           eq.asm):00033         ZVERS           = 0                               ; VERSION BYTE
     0001             (           eq.asm):00034         ZMODE           = 1                               ; MODE SELECT BYTE
     0002             (           eq.asm):00035         ZID             = 2                               ; GAME ID WORD
     0004             (           eq.asm):00036         ZENDLD          = 4                               ; START OF NON-PRELOADED Z-CODE
     0006             (           eq.asm):00037         ZBEGIN          = 6                               ; EXECUTION ADDRESS
     0008             (           eq.asm):00038         ZVOCAB          = 8                               ; START OF VOCABULARY TABLE
     000A             (           eq.asm):00039         ZOBJEC          = 10                              ; START OF OBJECT TABLE
     000C             (           eq.asm):00040         ZGLOBA          = 12                              ; START OF GLOBAL VARIABLE TABLE
     000E             (           eq.asm):00041         ZPURBT          = 14                              ; START OF "PURE" Z-CODE
     0010             (           eq.asm):00042         ZSCRIP          = 16                              ; FLAG WORD
     0012             (           eq.asm):00043         ZSERIA          = 18                              ; 3-WORD ASCII SERIAL NUMBER
     0018             (           eq.asm):00044         ZFWORD          = 24                              ; START OF FWORDS TABLE
     001A             (           eq.asm):00045         ZLENTH          = 26                              ; LENGTH OF Z-PROGRAM IN WORDS
     001C             (           eq.asm):00046         ZCHKSM          = 28                              ; Z-CODE CHECKSUM WORD
                      (           eq.asm):00047         
                      (           eq.asm):00048         ;       SBTTL "--- ZIP D-PAGE VARIABLES ---"
                      (           eq.asm):00049         
     0000             (           eq.asm):00050         OPCODE          = DSTART                          ; CURRENT OPCODE
     0001             (           eq.asm):00051         ARGCNT          = OPCODE+1                        ; # ARGUMENTS
     0002             (           eq.asm):00052         ARG1            = OPCODE+2                        ; ARGUMENT #1 (WORD)
     0004             (           eq.asm):00053         ARG2            = OPCODE+4                        ; ARGUMENT #2 (WORD)
     0006             (           eq.asm):00054         ARG3            = OPCODE+6                        ; ARGUMENT #3 (WORD)
     0008             (           eq.asm):00055         ARG4            = OPCODE+8                        ; ARGUMENT #4 (WORD)
                      (           eq.asm):00056         
     000A             (           eq.asm):00057         LRU             = OPCODE+10                       ; (BYTE) LEAST RECENTLY USED PAGE INDEX
     000B             (           eq.asm):00058         ZPURE           = LRU+1                           ; (BYTE) 1ST VIRTUAL PAGE OF PURE Z-CODE
     000C             (           eq.asm):00059         PMAX            = LRU+2                           ; (BYTE) MAXIMUM # SWAPPING PAGES
     000D             (           eq.asm):00060         ZPAGE           = LRU+3                           ; (BYTE) CURRENT SWAPPING PAGE
     000E             (           eq.asm):00061         PAGE0           = LRU+4                           ; (BYTE) 1ST ABS PAGE OF SWAPPING SPACE
     000F             (           eq.asm):00062         TABTOP          = LRU+5                           ; (WORD) ADDRESS OF LAST P-TABLE ENTRY
     0011             (           eq.asm):00063         STAMP           = LRU+7                           ; (BYTE) CURRENT TIMESTAMP (BM 11/24/84)
     0012             (           eq.asm):00064         SWAP            = LRU+8                           ; (BYTE) EARLIEST BUFFER (BM 11/24/84)
                      (           eq.asm):00065         
     0013             (           eq.asm):00066         ZPCH            = LRU+9                           ; HIGHEST-ORDER BIT OF PC
     0014             (           eq.asm):00067         ZPCM            = ZPCH+1                          ; MIDDLE 8 BITS OF PC
     0015             (           eq.asm):00068         ZPCL            = ZPCH+2                          ; LOWER 8 BITS OF PC
     0016             (           eq.asm):00069         ZPCPNT          = ZPCH+3                          ; POINTER TO ACTUAL PC PAGE (WORD)
     0018             (           eq.asm):00070         ZPCFLG          = ZPCH+5                          ; FLAG: "TRUE" IF ZPCPNT VALID
                      (           eq.asm):00071         
     001A             (           eq.asm):00072         MPCH            = ZPCH+7                          ; HIGHEST-ORDER BIT OF MEM POINTER
     001B             (           eq.asm):00073         MPCM            = MPCH+1                          ; MIDDLE 8 BITS OF MEM POINTER
     001C             (           eq.asm):00074         MPCL            = MPCH+2                          ; LOW-ORDER 8 BITS OF MEMORY POINTER
     001D             (           eq.asm):00075         MPCPNT          = MPCH+3                          ; ACTUAL POINTER TO MEMORY (WORD)
     001F             (           eq.asm):00076         MPCFLG          = MPCH+5                          ; FLAG: "TRUE" IF MPCPNT VALID
                      (           eq.asm):00077         
     0021             (           eq.asm):00078         GLOBAL          = MPCH+7                          ; GLOBAL VARIABLE POINTER (WORD)
     0023             (           eq.asm):00079         VOCAB           = GLOBAL+2                        ; VOCAB TABLE POINTER (WORD)
     0025             (           eq.asm):00080         FWORDS          = GLOBAL+4                        ; FWORDS TABLE POINTER (WORD)
                      (           eq.asm):00081         
     0027             (           eq.asm):00082         OZSTAK          = GLOBAL+6                        ; ZSP SAVE REGISTER (FOR ZCALL)
                      (           eq.asm):00083         
     0029             (           eq.asm):00084         CSTEMP          = OZSTAK+2                        ; SET IF TEMP CHARSET IN EFFECT
     002A             (           eq.asm):00085         CSPERM          = CSTEMP+1                        ; CURRENT PERM CHARSET
     002B             (           eq.asm):00086         STBYTF          = CSTEMP+2                        ; 0=1ST, 1=2ND, 2=3RD, 0=LAST
                      (           eq.asm):00087         
     002C             (           eq.asm):00088         ZSTWRD          = CSTEMP+3                        ; WORD STORAGE (WORD)
     002E             (           eq.asm):00089         ZSTBUI          = ZSTWRD+2                        ; Z-STRING INPUT BUFFER (6 BYTES)
     0034             (           eq.asm):00090         ZSTBUO          = ZSTWRD+8                        ; Z-STRING OUTPUT BUFFER (6 BYTES)
     003A             (           eq.asm):00091         RTABP           = ZSTWRD+14                       ; RESULT TABLE POINTER
     003B             (           eq.asm):00092         STABP           = ZSTWRD+15                       ; SOURCE TABLE POINTER
     003C             (           eq.asm):00093         PZSTFO          = ZSTWRD+16                       ; FWORD TABLE BLOCK OFFSET
                      (           eq.asm):00094         
     003D             (           eq.asm):00095         VAL             = ZSTWRD+17                       ; VALUE RETURN REGISTER (WORD)
     003F             (           eq.asm):00096         TEMP            = VAL+2                           ; TEMPORARY REGISTER (WORD)
     0041             (           eq.asm):00097         TEMP2           = VAL+4                           ; ANOTHER TEMPORARY REGISTER (WORD)
     0043             (           eq.asm):00098         MASK            = VAL+6                           ; BIT-MASK REGISTER (WORD)
     0045             (           eq.asm):00099         SQUOT           = VAL+8                           ; SIGN OF QUOTIENT
     0046             (           eq.asm):00100         SREM            = VAL+9                           ; SIGN OF REMAINDER
     0047             (           eq.asm):00101         MTEMP           = VAL+10                          ; MATH TEMP REGISTER (WORD)
                      (           eq.asm):00102         
     0049             (           eq.asm):00103         DRIVE           = VAL+12                          ; DRIVE NUMBER
     004A             (           eq.asm):00104         DBUFF           = DRIVE+1                         ; DISK I/O BUFFER POINTER (WORD)
     004C             (           eq.asm):00105         DBLOCK          = DRIVE+3                         ; Z-BLOCK # (WORD)
     004E             (           eq.asm):00106         TRACK           = DRIVE+5                         ; TRACK/SECTOR ADDRESS (WORD)
                      (           eq.asm):00107         
     0050             (           eq.asm):00108         TIMEFL          = DRIVE+7                         ; "TRUE" IF TIME MODE
                      (           eq.asm):00109         
     0051             (           eq.asm):00110         CHRPNT          = TIMEFL+1                        ; I/O BUFFER INDEX
     0052             (           eq.asm):00111         CPSAV           = CHRPNT+1                        ; SAVE REGISTER FOR [CHRPNT]
     0053             (           eq.asm):00112         BINDEX          = CHRPNT+2                        ; BUFFER DISPLAY INDEX
     0054             (           eq.asm):00113         LINCNT          = CHRPNT+3                        ; # LINES DISPLAYED SINCE LAST USL
     0055             (           eq.asm):00114         IOCHAR          = CHRPNT+4                        ; CURRENT I/O CHARACTER
     0056             (           eq.asm):00115         GDRIVE          = CHRPNT+5                        ; GAME-SAVE DEFAULT DRIVE #
     0057             (           eq.asm):00116         GPOSIT          = CHRPNT+6                        ; GAME-SAVE DEFAULT POSITION
     0058             (           eq.asm):00117         RAND1           = CHRPNT+7                        ; RANDOM NUMBER REGISTER
     0059             (           eq.asm):00118         RAND2           = CHRPNT+8                        ; DITTO
     005A             (           eq.asm):00119         CYCLE           = CHRPNT+9                        ; TIMER FOR CURSOR BLINK (WORD)
     005C             (           eq.asm):00120         BLINK           = CHRPNT+11                       ; MASK FOR CURSOR BLINK
     005D             (           eq.asm):00121         CFLAG           = CHRPNT+12                       ; CURSOR ENABLE FLAG
     005E             (           eq.asm):00122         SCRIPT          = CHRPNT+13                       ; SCRIPTING ENABLE FLAG
     005F             (           eq.asm):00123         IHOLD           = CHRPNT+14                       ; INTERRUPT HOLD
     0060             (           eq.asm):00124         TPOSIT          = CHRPNT+15                       ; TEMP GAME POSITION
     0061             (           eq.asm):00125         TDRIVE          = CHRPNT+16                       ; TEMP GAME DRIVE
                      (           eq.asm):00126         
     0060             (           eq.asm):00127         ZPGTOP          = CHRPNT+15                       ; END OF DIRECT-PAGE VARIABLES
                      (     cubixzip.asm):00049                 INCLUDE warm.asm
                      (         warm.asm):00001         ;       PAGE
                      (         warm.asm):00002         ;       SBTTL "--- WARMSTART ROUTINE ---"
                      (         warm.asm):00003         
     00               (         warm.asm):00004                 SETDP   0
                      (         warm.asm):00005                 ORG     ZIP                               ; START OF EXECUTABLE CODE
                      (         warm.asm):00006         
                      (         warm.asm):00007         ; WARMSTART ENTRY
                      (         warm.asm):00008         
2800                  (         warm.asm):00009         START:
2800 10CE21FE         (         warm.asm):00010                 LDS     #MSTACK                           ; RESET MACHINE STACK
                      (         warm.asm):00011         
                      (         warm.asm):00012         
                      (         warm.asm):00013         ; TEST TO SEE IF ZIP IS ALL LOADED
                      (         warm.asm):00014         
2804 8E0003           (         warm.asm):00015                 LDX     #3
2807                  (         warm.asm):00016         TSTEND:
2807 A6893A90         (         warm.asm):00017                 LDA     ENDTST-1,X
280B A189281B         (         warm.asm):00018                 CMPA    ENDCMP-1,X
280F 2606             (         warm.asm):00019                 BNE     ENDERR
2811 301F             (         warm.asm):00020                 LEAX    -1,X
2813 26F2             (         warm.asm):00021                 BNE     TSTEND
2815 2009             (         warm.asm):00022                 BRA     ENDOK
2817                  (         warm.asm):00023         ENDERR:
2817 8610             (         warm.asm):00024                 LDA     #16
2819 7E367A           (         warm.asm):00025                 JMP     ZERROR                            ;
                      (         warm.asm):00026         
281C                  (         warm.asm):00027         ENDCMP:
281C 454E4400         (         warm.asm):00028                 FCN     'END'
                      (         warm.asm):00029         
                      (         warm.asm):00030         ; CLEAR ALL DIRECT-PAGE VARIABLES
                      (         warm.asm):00031         
2820                  (         warm.asm):00032         ENDOK:
2820 8E0000           (         warm.asm):00033                 LDX     #DSTART
2823                  (         warm.asm):00034         ST0:
2823 6F80             (         warm.asm):00035                 CLR     ,X+
2825 8C0060           (         warm.asm):00036                 CMPX    #ZPGTOP
2828 25F9             (         warm.asm):00037                 BLO     ST0
                      (         warm.asm):00038         
282A 0C11             (         warm.asm):00039                 INC     STAMP                             ; INIT TIMESTAMP TO 1 (BM 11/24/84)
                      (         warm.asm):00040         
                      (         warm.asm):00041         ; RESET THE PAGING TABLE
                      (         warm.asm):00042         
282C 8E2500           (         warm.asm):00043                 LDX     #PTABLE
282F 86FF             (         warm.asm):00044                 LDA     #$FF
2831                  (         warm.asm):00045         ST1A:
2831 A780             (         warm.asm):00046                 STA     ,X+
2833 8C2640           (         warm.asm):00047                 CMPX    #PTABLE+$140
2836 25F9             (         warm.asm):00048                 BLO     ST1A
                      (         warm.asm):00049         
                      (         warm.asm):00050         ; CLEAR THE TIMESTAMP MAP (BM 11/24/84)
                      (         warm.asm):00051         
2838 8E2650           (         warm.asm):00052                 LDX     #LRUMAP
283B                  (         warm.asm):00053         ST1B:
283B 6F80             (         warm.asm):00054                 CLR     ,X+
283D 8C26F0           (         warm.asm):00055                 CMPX    #LRUMAP+$A0
2840 25F9             (         warm.asm):00056                 BLO     ST1B
                      (         warm.asm):00057         
2842 BD3834           (         warm.asm):00058                 JSR     OPENGAMEDSK                       ; open the game file -- needs to be selected by now
2845 CC0000           (         warm.asm):00059                 LDD     #0
2848 DD4C             (         warm.asm):00060                 STD     DBLOCK
                      (         warm.asm):00061         
                      (         warm.asm):00062         ; GET THE FIRST SECTOR OF Z-CODE
                      (         warm.asm):00063         
284A CC3F00           (         warm.asm):00064                 LDD     #ZCODE                            ; POINT TO 1ST
284D DD4A             (         warm.asm):00065                 STD     DBUFF                             ; Z-CODE LOCATION
284F BD3840           (         warm.asm):00066                 JSR     GETDSK                            ; FETCH BLOCK #0 FROM DRIVE 0
                      (         warm.asm):00067         
                      (         warm.asm):00068         ; EXTRACT GAME DATA FROM Z-CODE HEADER
                      (         warm.asm):00069         
2852 B63F04           (         warm.asm):00070                 LDA     ZCODE+ZENDLD                      ; GET MSB OF ENDLOAD POINTER
2855 4C               (         warm.asm):00071                 INCA                                      ; ADD ONE TO GET
2856 970B             (         warm.asm):00072                 STA     ZPURE                             ; 1ST PAGE IN "PURE" CODE
2858 8B3F             (         warm.asm):00073                 ADDA    #ZCODEHIGH                        ; ADD BASE ADDRESS TO GET
285A 970E             (         warm.asm):00074                 STA     PAGE0                             ; 1ST PAGE OF SWAPPING SPACE
                      (         warm.asm):00075         
285C C6CF             (         warm.asm):00076                 LDB     #MEMTOP                           ; TOP PAGE OF MEMORY
285E D00E             (         warm.asm):00077                 SUBB    PAGE0                             ; SUBTRACT ADDRESS OF PAGING BUFFER
2860 2304             (         warm.asm):00078                 BLS     NORAM
2862 C108             (         warm.asm):00079                 CMPB    #8
2864 2404             (         warm.asm):00080                 BHS     SETNP                             ; MUST HAVE AT LEAST 8 SWAPPING PAGES
                      (         warm.asm):00081         
                      (         warm.asm):00082         ; *** ERROR #0 -- INSUFFICIENT RAM ***
                      (         warm.asm):00083         
2866                  (         warm.asm):00084         NORAM:
2866 4F               (         warm.asm):00085                 CLRA
2867 BD367A           (         warm.asm):00086                 JSR     ZERROR
                      (         warm.asm):00087         
                      (         warm.asm):00088         ; [B] HAS # FREE SWAPPING PAGES
                      (         warm.asm):00089         
286A                  (         warm.asm):00090         SETNP:
286A C190             (         warm.asm):00091                 CMPB    #$90                              ; MAKE SURE # PAGES
286C 2502             (         warm.asm):00092                 BLO     SETA0                             ; DOESN'T EXCEED
286E C690             (         warm.asm):00093                 LDB     #$90                              ; $90
2870                  (         warm.asm):00094         SETA0:
2870 D70C             (         warm.asm):00095                 STB     PMAX                              ; SET MAXIMUM # FREE PAGES
2872 8E2500           (         warm.asm):00096                 LDX     #PTABLE                           ; ADD BASE ADDR OF P-TABLE
2875 3A               (         warm.asm):00097                 ABX                                       ; TO PAGING LIMIT
2876 3A               (         warm.asm):00098                 ABX                                       ; TWICE (FOR WORD-ALIGNMENT)
2877 9F0F             (         warm.asm):00099                 STX     TABTOP                            ; TO GET ADDR OF HIGHEST TABLE ENTRY
                      (         warm.asm):00100         
2879 B63F01           (         warm.asm):00101                 LDA     ZCODE+ZMODE                       ; GET MODE BYTE
287C B73F01           (         warm.asm):00102                 STA     ZCODE+ZMODE                       ; (WE DON'T WANT ANY DIRTY WORDS)
287F 8402             (         warm.asm):00103                 ANDA    #%00000010                        ; ISOLATE STAT-LINE FORMAT BIT
2881 9750             (         warm.asm):00104                 STA     TIMEFL                            ; 0=SCORE/MOVES, NZ=HOURS/MINUTES
                      (         warm.asm):00105         
2883 FC3F06           (         warm.asm):00106                 LDD     ZCODE+ZBEGIN                      ; GET START ADDRESS OF Z-CODE
2886 DD14             (         warm.asm):00107                 STD     ZPCM                              ; HIGH BITS AT ZPCH ALREADY CLEARED
                      (         warm.asm):00108         
2888 FC3F0C           (         warm.asm):00109                 LDD     ZCODE+ZGLOBA                      ; GET RELATIVE ADDR OF GLOBAL TABLE
288B C33F00           (         warm.asm):00110                 ADDD    #ZCODE                            ; CONVERT TO ABSOLUTE ADDRESS
288E DD21             (         warm.asm):00111                 STD     GLOBAL
                      (         warm.asm):00112         
2890 FC3F18           (         warm.asm):00113                 LDD     ZCODE+ZFWORD                      ; DO SAME FOR FWORDS TABLE
2893 C33F00           (         warm.asm):00114                 ADDD    #ZCODE
2896 DD25             (         warm.asm):00115                 STD     FWORDS
                      (         warm.asm):00116         
2898 FC3F08           (         warm.asm):00117                 LDD     ZCODE+ZVOCAB                      ; AND VOCABULARY TABLE
289B C33F00           (         warm.asm):00118                 ADDD    #ZCODE
289E DD23             (         warm.asm):00119                 STD     VOCAB
                      (         warm.asm):00120         
                      (         warm.asm):00121         ; GRAB THE REST OF THE PRELOAD
                      (         warm.asm):00122         
28A0 960B             (         warm.asm):00123                 LDA     ZPURE                             ; GET # PAGES IN PRELOAD + 1
28A2 973F             (         warm.asm):00124                 STA     TEMP                              ; USE AS AN INDEX
28A4                  (         warm.asm):00125         LDPRE:
28A4 BD3840           (         warm.asm):00126                 JSR     GETDSK                            ; GRAB THE BLOCK
28A7 0A3F             (         warm.asm):00127                 DEC     TEMP
28A9 26F9             (         warm.asm):00128                 BNE     LDPRE                             ; KEEP READING TILL DONE
                      (         warm.asm):00129         
28AB CE24FE           (         warm.asm):00130                 LDU     #TOPSTA                           ; INIT THE ZSP
28AE DF27             (         warm.asm):00131                 STU     OZSTAK                            ; REMEMBER ITS POSITION
                      (         warm.asm):00132         
28B0 BD35C2           (         warm.asm):00133                 JSR     CLS                               ; CLEAR THE SCREEN
28B3 035E             (         warm.asm):00134                 COM     SCRIPT                            ; ENABLE SCRIPTING
                      (         warm.asm):00135         
28B5 B63594           (         warm.asm):00136                 LDA     SFLAG                             ; SCRIPTING FLAG
28B8 B73F11           (         warm.asm):00137                 STA     ZCODE+ZSCRIP+1
                      (         warm.asm):00138         
                      (         warm.asm):00139         ; FALL INTO MAIN LOOP
                      (     cubixzip.asm):00050         
                      (     cubixzip.asm):00051         ;TITLE "ZIP/6809-B INFOCOM, INC. --- MAINLINE"
                      (     cubixzip.asm):00052                 INCLUDE MAIN.ASM
                      (         MAIN.ASM):00001         ;       PAGE
                      (         MAIN.ASM):00002         ;       SBTTL "--- MAIN LOOP ---"
                      (         MAIN.ASM):00003         
28BB                  (         MAIN.ASM):00004         MLOOP:
28BB 0A59             (         MAIN.ASM):00005                 DEC     RAND2                             ; RANDOMNESS
28BD 0A59             (         MAIN.ASM):00006                 DEC     RAND2
                      (         MAIN.ASM):00007         
28BF 0F01             (         MAIN.ASM):00008                 CLR     ARGCNT                            ; RESET # ARGUMENTS
28C1 BD318F           (         MAIN.ASM):00009                 JSR     NEXTPC                            ; GET NEXT Z-BYTE
28C4 9700             (         MAIN.ASM):00010                 STA     OPCODE                            ; SAVE OPCODE
                      (         MAIN.ASM):00011         
                      (         MAIN.ASM):00012                 IF      DEBUG = 1
                      (         MAIN.ASM):00013                     LDB     #'0'
                      (         MAIN.ASM):00014                     JSR     DOBUG
                      (         MAIN.ASM):00015                     LDA     OPCODE
                      (         MAIN.ASM):00016                 ENDIF
                      (         MAIN.ASM):00017         
28C6 102A00A4         (         MAIN.ASM):00018                 LBPL    OP2                               ; 2-OP IF POSITIVE
28CA 81B0             (         MAIN.ASM):00019                 CMPA    #176
28CC 256F             (         MAIN.ASM):00020                 BLO     OP1                               ; IT'S A 1-OP
28CE 81C0             (         MAIN.ASM):00021                 CMPA    #192
28D0 255B             (         MAIN.ASM):00022                 BLO     OP0                               ; IF NOT A 0-OP ...
                      (         MAIN.ASM):00023         
                      (         MAIN.ASM):00024         ; HANDLE AN X-OP
                      (         MAIN.ASM):00025         
28D2                  (         MAIN.ASM):00026         OPEXT:
28D2 BD318F           (         MAIN.ASM):00027                 JSR     NEXTPC                            ; GET ARGUMENT BYTE
28D5 9741             (         MAIN.ASM):00028                 STA     TEMP2                             ; HOLD IT HERE
28D7 0F42             (         MAIN.ASM):00029                 CLR     TEMP2+1                           ; INIT LOOP INDEX
28D9 2006             (         MAIN.ASM):00030                 BRA     OPX1
                      (         MAIN.ASM):00031         
28DB                  (         MAIN.ASM):00032         OPX0:
28DB 9641             (         MAIN.ASM):00033                 LDA     TEMP2                             ; GRAB ARG BYTE
28DD 48               (         MAIN.ASM):00034                 ASLA                                      ; SHIFT TO BITS 7 & 6
28DE 48               (         MAIN.ASM):00035                 ASLA
28DF 9741             (         MAIN.ASM):00036                 STA     TEMP2                             ; SAVE RESULT
                      (         MAIN.ASM):00037         
28E1                  (         MAIN.ASM):00038         OPX1:
28E1 84C0             (         MAIN.ASM):00039                 ANDA    #%11000000                        ; MASK OUT GARBAGE
28E3 2605             (         MAIN.ASM):00040                 BNE     OPX2
28E5 BD29AE           (         MAIN.ASM):00041                 JSR     GETLNG                            ; 00 = LONG IMMEDIATE
28E8 2010             (         MAIN.ASM):00042                 BRA     OPXNXT
                      (         MAIN.ASM):00043         
28EA                  (         MAIN.ASM):00044         OPX2:
28EA 8140             (         MAIN.ASM):00045                 CMPA    #%01000000
28EC 2605             (         MAIN.ASM):00046                 BNE     OPX3
28EE BD29A6           (         MAIN.ASM):00047                 JSR     GETSHT                            ; 01 = SHORT IMMEDIATE
28F1 2007             (         MAIN.ASM):00048                 BRA     OPXNXT
                      (         MAIN.ASM):00049         
28F3                  (         MAIN.ASM):00050         OPX3:
28F3 8180             (         MAIN.ASM):00051                 CMPA    #%10000000
28F5 2619             (         MAIN.ASM):00052                 BNE     OPX4                              ; 11 = NO MORE VARIABLES
28F7 BD29C5           (         MAIN.ASM):00053                 JSR     GETVAR                            ; 10 = VARIABLE
                      (         MAIN.ASM):00054         
28FA                  (         MAIN.ASM):00055         OPXNXT:
28FA D642             (         MAIN.ASM):00056                 LDB     TEMP2+1                           ; GET INDEX
28FC 8E0002           (         MAIN.ASM):00057                 LDX     #ARG1                             ; BASE ADDR OF ARGS
28FF 3A               (         MAIN.ASM):00058                 ABX                                       ; ADD OFFSET IN B
2900 DC3F             (         MAIN.ASM):00059                 LDD     TEMP                              ; GRAB THE ARGUMENT'S VALUE
2902 ED84             (         MAIN.ASM):00060                 STD     ,X                                ; AND SAVE IT
2904 0C01             (         MAIN.ASM):00061                 INC     ARGCNT                            ; KEEP TRACK
2906 0C42             (         MAIN.ASM):00062                 INC     TEMP2+1                           ; UPDATE
2908 0C42             (         MAIN.ASM):00063                 INC     TEMP2+1                           ; ARGUMENT INDEX
290A 9642             (         MAIN.ASM):00064                 LDA     TEMP2+1                           ; DONE 4 ARGS YET?
290C 8108             (         MAIN.ASM):00065                 CMPA    #8
290E 25CB             (         MAIN.ASM):00066                 BLO     OPX0                              ; NO, KEEP GRABBING
                      (         MAIN.ASM):00067         
                      (         MAIN.ASM):00068         ; DISPATCH THE X-OP
                      (         MAIN.ASM):00069         
2910                  (         MAIN.ASM):00070         OPX4:
2910 D600             (         MAIN.ASM):00071                 LDB     OPCODE                            ; RETRIEVE THE OPCODE
2912 C1E0             (         MAIN.ASM):00072                 CMPB    #224                              ; IS IT AN EXTENDED 2-OP?
2914 1025007C         (         MAIN.ASM):00073                 LBLO    OP2EX                             ; YES, HANDLE LIKE A 2-OP
2918 C41F             (         MAIN.ASM):00074                 ANDB    #%00011111                        ; ELSE ISOLATE OP BITS
291A C10C             (         MAIN.ASM):00075                 CMPB    #NOPSX                            ; COMPARE TO LEGAL # OF X-OPS
291C 2505             (         MAIN.ASM):00076                 BLO     DISPX                             ; CONTINUE IF OKAY
                      (         MAIN.ASM):00077         
                      (         MAIN.ASM):00078         ; *** ERROR #1 -- ILLEGAL X-OP ***
                      (         MAIN.ASM):00079         
291E 8601             (         MAIN.ASM):00080                 LDA     #1
2920 BD367A           (         MAIN.ASM):00081                 JSR     ZERROR
                      (         MAIN.ASM):00082         
2923                  (         MAIN.ASM):00083         DISPX:
2923 8E2B20           (         MAIN.ASM):00084                 LDX     #OPTX                             ; X-OP DISPATCH TABLE
2926                  (         MAIN.ASM):00085         DODIS:
2926 58               (         MAIN.ASM):00086                 ASLB                                      ; FORM A WORD-OFFSET INTO IT
2927 3A               (         MAIN.ASM):00087                 ABX                                       ; ADD THE OFFSET
                      (         MAIN.ASM):00088         
                      (         MAIN.ASM):00089                 IF      DEBUG
                      (         MAIN.ASM):00090                     PSHS    X
                      (         MAIN.ASM):00091                     LDB     #'1'
                      (         MAIN.ASM):00092                     JSR     DOBUG
                      (         MAIN.ASM):00093                     PULS    X
                      (         MAIN.ASM):00094                 ENDIF
                      (         MAIN.ASM):00095         
2928 AD94             (         MAIN.ASM):00096                 JSR     [,X]                              ; HANDLE THE OPCODE
292A 7E28BB           (         MAIN.ASM):00097                 JMP     MLOOP                             ; AND GO BACK FOR ANOTHER
                      (         MAIN.ASM):00098         
                      (         MAIN.ASM):00099         ; HANDLE A 0-OP
                      (         MAIN.ASM):00100         
292D                  (         MAIN.ASM):00101         OP0:
292D 8E2AB2           (         MAIN.ASM):00102                 LDX     #OPT0                             ; 0-OP DISPATCH TABLE
2930 D600             (         MAIN.ASM):00103                 LDB     OPCODE                            ; FETCH OPCODE
2932 C40F             (         MAIN.ASM):00104                 ANDB    #%00001111                        ; ISOLATE OP BITS
2934 C10E             (         MAIN.ASM):00105                 CMPB    #NOPS0                            ; OPCODE OUT OF RANGE?
2936 25EE             (         MAIN.ASM):00106                 BLO     DODIS                             ; NO, GO DISPATCH IT
                      (         MAIN.ASM):00107         
                      (         MAIN.ASM):00108         ; *** ERROR #2 -- ILLEGAL 0-OP ***
                      (         MAIN.ASM):00109         
2938 8602             (         MAIN.ASM):00110                 LDA     #2
293A BD367A           (         MAIN.ASM):00111                 JSR     ZERROR
                      (         MAIN.ASM):00112         
                      (         MAIN.ASM):00113         ; HANDLE A 1-OP
                      (         MAIN.ASM):00114         
293D                  (         MAIN.ASM):00115         OP1:
293D 8430             (         MAIN.ASM):00116                 ANDA    #%00110000                        ; ISOLATE ARG BITS
293F 2605             (         MAIN.ASM):00117                 BNE     OP1A
2941 BD29AE           (         MAIN.ASM):00118                 JSR     GETLNG                            ; 00 = LONG IMMEDIATE
2944 2015             (         MAIN.ASM):00119                 BRA     OP1EX
                      (         MAIN.ASM):00120         
2946                  (         MAIN.ASM):00121         OP1A:
2946 8110             (         MAIN.ASM):00122                 CMPA    #%00010000
2948 2605             (         MAIN.ASM):00123                 BNE     OP1B
294A BD29A6           (         MAIN.ASM):00124                 JSR     GETSHT                            ; 01 = SHORT IMMEDIATE
294D 200C             (         MAIN.ASM):00125                 BRA     OP1EX
                      (         MAIN.ASM):00126         
294F                  (         MAIN.ASM):00127         OP1B:
294F 8120             (         MAIN.ASM):00128                 CMPA    #%00100000
2951 2705             (         MAIN.ASM):00129                 BEQ     OP1C
                      (         MAIN.ASM):00130         
                      (         MAIN.ASM):00131         ; *** ERROR #3 -- ILLEGAL 1-OP ***
                      (         MAIN.ASM):00132         
2953                  (         MAIN.ASM):00133         BADOP1:
2953 8603             (         MAIN.ASM):00134                 LDA     #3
2955 BD367A           (         MAIN.ASM):00135                 JSR     ZERROR
                      (         MAIN.ASM):00136         
2958                  (         MAIN.ASM):00137         OP1C:
2958 BD29C5           (         MAIN.ASM):00138                 JSR     GETVAR                            ; 10 = VARIABLE
                      (         MAIN.ASM):00139         
295B                  (         MAIN.ASM):00140         OP1EX:
295B DC3F             (         MAIN.ASM):00141                 LDD     TEMP
295D DD02             (         MAIN.ASM):00142                 STD     ARG1                              ; GRAB THE ARGUMENT
295F 0C01             (         MAIN.ASM):00143                 INC     ARGCNT                            ; ONE ARGUMENT
2961 8E2ACE           (         MAIN.ASM):00144                 LDX     #OPT1                             ; ADDR OF 1-OP DISPATCH TABLE
2964 D600             (         MAIN.ASM):00145                 LDB     OPCODE                            ; RESTORE OPCODE
2966 C40F             (         MAIN.ASM):00146                 ANDB    #%00001111                        ; ISOLATE OP BITS
2968 C110             (         MAIN.ASM):00147                 CMPB    #NOPS1                            ; IF OPCODE OUT OF RANGE,
296A 24E7             (         MAIN.ASM):00148                 BHS     BADOP1                            ; REPORT IT
296C 20B8             (         MAIN.ASM):00149                 BRA     DODIS                             ; ELSE DISPATCH THE 1-OP
                      (         MAIN.ASM):00150         
                      (         MAIN.ASM):00151         ; HANDLE A 2-OP
                      (         MAIN.ASM):00152         
296E                  (         MAIN.ASM):00153         OP2:
296E 8440             (         MAIN.ASM):00154                 ANDA    #%01000000                        ; ISOLATE 1ST ARG BIT
2970 2605             (         MAIN.ASM):00155                 BNE     OP2A
2972 BD29A6           (         MAIN.ASM):00156                 JSR     GETSHT                            ; 0 = SHORT IMMEDIATE
2975 2003             (         MAIN.ASM):00157                 BRA     OP2B
                      (         MAIN.ASM):00158         
2977                  (         MAIN.ASM):00159         OP2A:
2977 BD29C5           (         MAIN.ASM):00160                 JSR     GETVAR                            ; 1 = VARIABLE
                      (         MAIN.ASM):00161         
297A                  (         MAIN.ASM):00162         OP2B:
297A DC3F             (         MAIN.ASM):00163                 LDD     TEMP                              ; GRAB VALUE
297C DD02             (         MAIN.ASM):00164                 STD     ARG1                              ; SAVE IN ARG1
297E 0C01             (         MAIN.ASM):00165                 INC     ARGCNT
                      (         MAIN.ASM):00166         
2980 9600             (         MAIN.ASM):00167                 LDA     OPCODE                            ; RESTORE OPCODE
2982 8420             (         MAIN.ASM):00168                 ANDA    #%00100000                        ; ISOLATE 2ND ARG BIT
2984 2605             (         MAIN.ASM):00169                 BNE     OP2C
2986 BD29A6           (         MAIN.ASM):00170                 JSR     GETSHT                            ; 0 = SHORT IMMEDIATE
2989 2003             (         MAIN.ASM):00171                 BRA     OP2D
                      (         MAIN.ASM):00172         
298B                  (         MAIN.ASM):00173         OP2C:
298B BD29C5           (         MAIN.ASM):00174                 JSR     GETVAR                            ; 1 = VARIABLE
                      (         MAIN.ASM):00175         
298E                  (         MAIN.ASM):00176         OP2D:
298E DC3F             (         MAIN.ASM):00177                 LDD     TEMP                              ; GRAB 2ND VALUE
2990 DD04             (         MAIN.ASM):00178                 STD     ARG2                              ; STORE AS ARG2
2992 0C01             (         MAIN.ASM):00179                 INC     ARGCNT
                      (         MAIN.ASM):00180         
2994                  (         MAIN.ASM):00181         OP2EX:
2994 8E2AEE           (         MAIN.ASM):00182                 LDX     #OPT2                             ; ADDR OF 2-OP DISPATCH TABLE
2997 D600             (         MAIN.ASM):00183                 LDB     OPCODE                            ; RESTORE YET AGAIN
2999 C41F             (         MAIN.ASM):00184                 ANDB    #%00011111                        ; ISOLATE OP BITS
299B C119             (         MAIN.ASM):00185                 CMPB    #NOPS2                            ; OPCODE IN RANGE?
299D 1025FF85         (         MAIN.ASM):00186                 LBLO    DODIS                             ; YES, GO DISPATCH IT
                      (         MAIN.ASM):00187         
                      (         MAIN.ASM):00188         ; *** ERROR #4 -- ILLEGAL 2-OP ***
                      (         MAIN.ASM):00189         
29A1                  (         MAIN.ASM):00190         BADOP2:
29A1 8604             (         MAIN.ASM):00191                 LDA     #4
29A3 BD367A           (         MAIN.ASM):00192                 JSR     ZERROR
                      (     cubixzip.asm):00053                 INCLUDE SUBS.ASM
                      (         SUBS.ASM):00001         ;       PAGE
                      (         SUBS.ASM):00002         ;       SBTTL "--- MAIN LOOP SUPPORT ---"
                      (         SUBS.ASM):00003         
                      (         SUBS.ASM):00004         ; -----------------------
                      (         SUBS.ASM):00005         ; FETCH A SHORT IMMEDIATE
                      (         SUBS.ASM):00006         ; -----------------------
                      (         SUBS.ASM):00007         
29A6                  (         SUBS.ASM):00008         GETSHT:
29A6 BD318F           (         SUBS.ASM):00009                 JSR     NEXTPC                            ; NEXT Z-BYTE IS
29A9 9740             (         SUBS.ASM):00010                 STA     TEMP+1                            ; THE LSB OF ARGUMENT
29AB 0F3F             (         SUBS.ASM):00011                 CLR     TEMP                              ; MSB IS ZERO
29AD 39               (         SUBS.ASM):00012                 RTS
                      (         SUBS.ASM):00013         
                      (         SUBS.ASM):00014         ; ----------------------
                      (         SUBS.ASM):00015         ; FETCH A LONG IMMEDIATE
                      (         SUBS.ASM):00016         ; ----------------------
                      (         SUBS.ASM):00017         
29AE                  (         SUBS.ASM):00018         GETLNG:
29AE BD318F           (         SUBS.ASM):00019                 JSR     NEXTPC                            ; NEXT Z-BYTE IS MSB
29B1 3402             (         SUBS.ASM):00020                 PSHS    A                                 ; SAVE ON STACK
29B3 BD318F           (         SUBS.ASM):00021                 JSR     NEXTPC                            ; NOW GRAB LSB
29B6 9740             (         SUBS.ASM):00022                 STA     TEMP+1                            ; STORE IT
29B8 3502             (         SUBS.ASM):00023                 PULS    A                                 ; RETRIEVE MSB
29BA 973F             (         SUBS.ASM):00024                 STA     TEMP                              ; AND STORE IT
29BC 39               (         SUBS.ASM):00025                 RTS
                      (         SUBS.ASM):00026         
                      (         SUBS.ASM):00027         ; ----------------
                      (         SUBS.ASM):00028         ; FETCH A VARIABLE
                      (         SUBS.ASM):00029         ; ----------------
                      (         SUBS.ASM):00030         
                      (         SUBS.ASM):00031         ; GET WITHIN AN OPCODE
                      (         SUBS.ASM):00032         
29BD                  (         SUBS.ASM):00033         VARGET:
29BD 4D               (         SUBS.ASM):00034                 TSTA                                      ; IF NON-ZERO,
29BE 260B             (         SUBS.ASM):00035                 BNE     GETVR1                            ; ACCESS A VARIABLE
29C0 BD2A2A           (         SUBS.ASM):00036                 JSR     POPSTK                            ; ELSE TAKE VAR OFF STACK
29C3 205A             (         SUBS.ASM):00037                 BRA     PSHSTK                            ; WITHOUT ALTERING STACK
                      (         SUBS.ASM):00038         
29C5                  (         SUBS.ASM):00039         GETVAR:
29C5 BD318F           (         SUBS.ASM):00040                 JSR     NEXTPC                            ; GRAB VAR-TYPE BYTE
29C8 4D               (         SUBS.ASM):00041                 TSTA                                      ; IF ZERO,
29C9 275F             (         SUBS.ASM):00042                 BEQ     POPSTK                            ; VALUE IS ON STACK
                      (         SUBS.ASM):00043         
                      (         SUBS.ASM):00044         ; IS VARIABLE LOCAL OR GLOBAL?
                      (         SUBS.ASM):00045         
29CB                  (         SUBS.ASM):00046         GETVR1:
29CB 8110             (         SUBS.ASM):00047                 CMPA    #16
29CD 240D             (         SUBS.ASM):00048                 BHS     GETVRG                            ; IT'S GLOBAL
                      (         SUBS.ASM):00049         
                      (         SUBS.ASM):00050         ; HANDLE A LOCAL VARIABLE
                      (         SUBS.ASM):00051         
29CF                  (         SUBS.ASM):00052         GETVRL:
29CF 4A               (         SUBS.ASM):00053                 DECA                                      ; FORM A ZERO-ALIGNED INDEX
29D0 48               (         SUBS.ASM):00054                 ASLA                                      ; WORD INDEX
29D1 8E2700           (         SUBS.ASM):00055                 LDX     #LOCALS                           ; INTO LOCAL VAR TABLE
29D4 1F89             (         SUBS.ASM):00056                 TFR     A,B                               ; MOVE AND
29D6                  (         SUBS.ASM):00057         GTVX:
29D6 3A               (         SUBS.ASM):00058                 ABX                                       ; ADD INDEXING OFFSET
29D7 EC84             (         SUBS.ASM):00059                 LDD     ,X                                ; FETCH VALUE
29D9 DD3F             (         SUBS.ASM):00060                 STD     TEMP                              ; AND RETURN IT
29DB 39               (         SUBS.ASM):00061                 RTS
                      (         SUBS.ASM):00062         
                      (         SUBS.ASM):00063         ; HANDLE A GLOBAL VARIABLE
                      (         SUBS.ASM):00064         
29DC                  (         SUBS.ASM):00065         GETVRG:
29DC 8010             (         SUBS.ASM):00066                 SUBA    #16                               ; ZERO-ALIGN
29DE 9E21             (         SUBS.ASM):00067                 LDX     GLOBAL                            ; BASE OF GLOBAL VAR TABLE
29E0 1F89             (         SUBS.ASM):00068                 TFR     A,B                               ; CONVERT TO WORD-ALIGNED INDEX
29E2 3A               (         SUBS.ASM):00069                 ABX                                       ; BY ADDING OFFSET TWICE (CLEVER, EH?)
29E3 20F1             (         SUBS.ASM):00070                 BRA     GTVX                              ; 2ND ADD ABOVE
                      (         SUBS.ASM):00071         
                      (         SUBS.ASM):00072         ; --------------
                      (         SUBS.ASM):00073         ; RETURN A VALUE
                      (         SUBS.ASM):00074         ; --------------
                      (         SUBS.ASM):00075         
                      (         SUBS.ASM):00076         ; RETURN FROM WITHIN OPCODE
                      (         SUBS.ASM):00077         
29E5                  (         SUBS.ASM):00078         VARPUT:
29E5 4D               (         SUBS.ASM):00079                 TSTA                                      ; IF NON-ZERO
29E6 261D             (         SUBS.ASM):00080                 BNE     PUTVR1                            ; ACCESS A VARIABLE
29E8 3706             (         SUBS.ASM):00081                 PULU    D                                 ; ELSE FLUSH TOP ITEM OFF STACK
29EA 118324FE         (         SUBS.ASM):00082                 CMPU    #TOPSTA
29EE 2245             (         SUBS.ASM):00083                 BHI     UNDER                             ; WATCH FOR UNDERFLOW!
29F0 202D             (         SUBS.ASM):00084                 BRA     PSHSTK                            ; AND PUSH [TEMP] ONTO STACK
                      (         SUBS.ASM):00085         
                      (         SUBS.ASM):00086         ; RETURN A ZERO
                      (         SUBS.ASM):00087         
29F2                  (         SUBS.ASM):00088         RET0:
29F2 4F               (         SUBS.ASM):00089                 CLRA                                      ; CLEAR MSB
                      (         SUBS.ASM):00090         
                      (         SUBS.ASM):00091         ; RETURN BYTE IN [A]
                      (         SUBS.ASM):00092         
29F3                  (         SUBS.ASM):00093         PUTBYT:
29F3 9740             (         SUBS.ASM):00094                 STA     TEMP+1                            ; USE [A] AS LSB
29F5 0F3F             (         SUBS.ASM):00095                 CLR     TEMP                              ; ZERO MSB
                      (         SUBS.ASM):00096         
                      (         SUBS.ASM):00097         ; RETURN VALUE IN [TEMP]
                      (         SUBS.ASM):00098         
29F7                  (         SUBS.ASM):00099         PUTVAL:
29F7 9E3F             (         SUBS.ASM):00100                 LDX     TEMP                              ; GET VALUE IN [TEMP]
29F9 3410             (         SUBS.ASM):00101                 PSHS    X                                 ; AND HOLD ON TO IT
29FB BD318F           (         SUBS.ASM):00102                 JSR     NEXTPC                            ; GET VAR-TYPE BYTE
29FE 3510             (         SUBS.ASM):00103                 PULS    X                                 ; RETRIEVE VALUE
2A00 9F3F             (         SUBS.ASM):00104                 STX     TEMP                              ; PUT IT BACK IN [TEMP]
2A02 4D               (         SUBS.ASM):00105                 TSTA                                      ; IF TYPE-BYTE IS ZERO,
2A03 271A             (         SUBS.ASM):00106                 BEQ     PSHSTK                            ; VALUE GOES TO THE STACK
                      (         SUBS.ASM):00107         
                      (         SUBS.ASM):00108         ; LOCAL OR GLOBAL?
                      (         SUBS.ASM):00109         
2A05                  (         SUBS.ASM):00110         PUTVR1:
2A05 8110             (         SUBS.ASM):00111                 CMPA    #16
2A07 240D             (         SUBS.ASM):00112                 BHS     PUTVLG                            ; IT'S GLOBAL
                      (         SUBS.ASM):00113         
                      (         SUBS.ASM):00114         ; HANDLE A LOCAL VARIABLE
                      (         SUBS.ASM):00115         
2A09                  (         SUBS.ASM):00116         PUTVLL:
2A09 4A               (         SUBS.ASM):00117                 DECA
2A0A 48               (         SUBS.ASM):00118                 ASLA
2A0B 1F89             (         SUBS.ASM):00119                 TFR     A,B
2A0D 8E2700           (         SUBS.ASM):00120                 LDX     #LOCALS                           ; INTO LOCAL VARIABLE TABLE
2A10                  (         SUBS.ASM):00121         PTVX:
2A10 3A               (         SUBS.ASM):00122                 ABX
2A11 DC3F             (         SUBS.ASM):00123                 LDD     TEMP
2A13 ED84             (         SUBS.ASM):00124                 STD     ,X
2A15 39               (         SUBS.ASM):00125                 RTS
                      (         SUBS.ASM):00126         
                      (         SUBS.ASM):00127         ; HANDLE A GLOBAL VARIABLE
                      (         SUBS.ASM):00128         
2A16                  (         SUBS.ASM):00129         PUTVLG:
2A16 8010             (         SUBS.ASM):00130                 SUBA    #16                               ; ZERO-ALIGN
2A18 9E21             (         SUBS.ASM):00131                 LDX     GLOBAL                            ; BASE OF GLOBAL VAR TABLE
2A1A 1F89             (         SUBS.ASM):00132                 TFR     A,B                               ; FORM WORD-ALIGNED INDEX
2A1C 3A               (         SUBS.ASM):00133                 ABX                                       ; BY ADDING OFFSET TO BASE
2A1D 20F1             (         SUBS.ASM):00134                 BRA     PTVX                              ; TWICE
                      (         SUBS.ASM):00135         
                      (         SUBS.ASM):00136         ; --------------------
                      (         SUBS.ASM):00137         ; PUSH [TEMP] TO STACK
                      (         SUBS.ASM):00138         ; --------------------
                      (         SUBS.ASM):00139         
2A1F                  (         SUBS.ASM):00140         PSHSTK:
2A1F DC3F             (         SUBS.ASM):00141                 LDD     TEMP
                      (         SUBS.ASM):00142         
                      (         SUBS.ASM):00143         ; PUSH [D] TO STACK
                      (         SUBS.ASM):00144         
2A21                  (         SUBS.ASM):00145         PSHDZ:
2A21 3606             (         SUBS.ASM):00146                 PSHU    D
2A23 11832300         (         SUBS.ASM):00147                 CMPU    #ZSTACK
2A27 2511             (         SUBS.ASM):00148                 BLO     OVER
2A29 39               (         SUBS.ASM):00149                 RTS
                      (         SUBS.ASM):00150         
                      (         SUBS.ASM):00151         ; -------------------------
                      (         SUBS.ASM):00152         ; POP STACK, SAVE IN [TEMP]
                      (         SUBS.ASM):00153         ; -------------------------
                      (         SUBS.ASM):00154         
2A2A                  (         SUBS.ASM):00155         POPSTK:
2A2A 3706             (         SUBS.ASM):00156                 PULU    D                                 ; PULL A WORD
2A2C DD3F             (         SUBS.ASM):00157                 STD     TEMP                              ; SAVE IT IN [TEMP]
2A2E 118324FE         (         SUBS.ASM):00158                 CMPU    #TOPSTA
2A32 2201             (         SUBS.ASM):00159                 BHI     UNDER
2A34 39               (         SUBS.ASM):00160                 RTS
                      (         SUBS.ASM):00161         
                      (         SUBS.ASM):00162         ; *** ERROR #5 -- Z-STACK UNDERFLOW ***
                      (         SUBS.ASM):00163         
2A35                  (         SUBS.ASM):00164         UNDER:
2A35 8605             (         SUBS.ASM):00165                 LDA     #5
2A37 7E367A           (         SUBS.ASM):00166                 JMP     ZERROR
                      (         SUBS.ASM):00167         
                      (         SUBS.ASM):00168         ; *** ERROR #6 -- Z-STACK OVERFLOW ***
                      (         SUBS.ASM):00169         
2A3A                  (         SUBS.ASM):00170         OVER:
2A3A 8606             (         SUBS.ASM):00171                 LDA     #6
2A3C 7E367A           (         SUBS.ASM):00172                 JMP     ZERROR
                      (         SUBS.ASM):00173         
                      (         SUBS.ASM):00174         ; ---------------
                      (         SUBS.ASM):00175         ; PREDICATE FAILS
                      (         SUBS.ASM):00176         ; ---------------
                      (         SUBS.ASM):00177         
2A3F                  (         SUBS.ASM):00178         PREDF:
2A3F BD318F           (         SUBS.ASM):00179                 JSR     NEXTPC                            ; GET 1ST BRANCH BYTE
2A42 4D               (         SUBS.ASM):00180                 TSTA                                      ; IF BIT 7 ISN'T SET,
2A43 2A0E             (         SUBS.ASM):00181                 BPL     PREDB                             ; DO THE BRANCH
                      (         SUBS.ASM):00182         
2A45                  (         SUBS.ASM):00183         PREDNB:
2A45 8440             (         SUBS.ASM):00184                 ANDA    #%01000000                        ; ELSE TEST BIT 6
2A47 2603             (         SUBS.ASM):00185                 BNE     PNBX                              ; ALL DONE IF SET
2A49 BD318F           (         SUBS.ASM):00186                 JSR     NEXTPC                            ; ELSE SKIP OVER 2ND BRANCH BYTE
2A4C                  (         SUBS.ASM):00187         PNBX:
2A4C 39               (         SUBS.ASM):00188                 RTS                                       ; BEFORE LEAVING
                      (         SUBS.ASM):00189         
                      (         SUBS.ASM):00190         ; ------------------
                      (         SUBS.ASM):00191         ; PREDICATE SUCCEEDS
                      (         SUBS.ASM):00192         ; ------------------
                      (         SUBS.ASM):00193         
2A4D                  (         SUBS.ASM):00194         PREDS:
2A4D BD318F           (         SUBS.ASM):00195                 JSR     NEXTPC
2A50 4D               (         SUBS.ASM):00196                 TSTA                                      ; IF BIT 7 IS SET,
2A51 2AF2             (         SUBS.ASM):00197                 BPL     PREDNB                            ; BRANCH ON PREDICATE FAILURE
                      (         SUBS.ASM):00198         
                      (         SUBS.ASM):00199         ; ----------------
                      (         SUBS.ASM):00200         ; PERFORM A BRANCH
                      (         SUBS.ASM):00201         ; ----------------
                      (         SUBS.ASM):00202         
2A53                  (         SUBS.ASM):00203         PREDB:
2A53 8540             (         SUBS.ASM):00204                 BITA    #%01000000                        ; LONG OR SHORT BRANCH?
2A55 2708             (         SUBS.ASM):00205                 BEQ     PREDLB                            ; LONG IF BIT 6 IS OFF
2A57 843F             (         SUBS.ASM):00206                 ANDA    #%00111111                        ; ELSE FORM SHORT OFFSET
2A59 9740             (         SUBS.ASM):00207                 STA     TEMP+1                            ; USE AS LSB OF BRANCH OFFSET
2A5B 0F3F             (         SUBS.ASM):00208                 CLR     TEMP                              ; ZERO MSB OF OFFSET
2A5D 2013             (         SUBS.ASM):00209                 BRA     PREDB1                            ; AND DO THE BRANCH
                      (         SUBS.ASM):00210         
                      (         SUBS.ASM):00211         ; HANDLE A LONG BRANCH
                      (         SUBS.ASM):00212         
2A5F                  (         SUBS.ASM):00213         PREDLB:
2A5F 843F             (         SUBS.ASM):00214                 ANDA    #%00111111                        ; FORM MSB OF OFFSET
2A61 8520             (         SUBS.ASM):00215                 BITA    #%00100000                        ; CHECK SIGN OF 14-BIT VALUE
2A63 2702             (         SUBS.ASM):00216                 BEQ     DOB2                              ; IT'S POSITIVE
2A65 8AE0             (         SUBS.ASM):00217                 ORA     #%11100000                        ; ELSE EXTEND SIGN BITS
2A67                  (         SUBS.ASM):00218         DOB2:
2A67 3402             (         SUBS.ASM):00219                 PSHS    A                                 ; SAVE MSB OF BRANCH
2A69 BD318F           (         SUBS.ASM):00220                 JSR     NEXTPC                            ; GRAB NEXT Z-BYTE
2A6C 9740             (         SUBS.ASM):00221                 STA     TEMP+1                            ; USE AS LSB OF BRANCH
2A6E 3502             (         SUBS.ASM):00222                 PULS    A
2A70 973F             (         SUBS.ASM):00223                 STA     TEMP                              ; RETRIEVE MSB
                      (         SUBS.ASM):00224         
                      (         SUBS.ASM):00225         ; BRANCH TO Z-ADDRESS IN [TEMP]
                      (         SUBS.ASM):00226         
2A72                  (         SUBS.ASM):00227         PREDB1:
2A72 DC3F             (         SUBS.ASM):00228                 LDD     TEMP                              ; IF OFFSET IS ZERO,
2A74 102700C8         (         SUBS.ASM):00229                 LBEQ    ZRFALS                            ; DO AN "RFALSE"
2A78 830001           (         SUBS.ASM):00230                 SUBD    #1                                ; IF OFFSET IS ONE,
2A7B 102700B9         (         SUBS.ASM):00231                 LBEQ    ZRTRUE                            ; DO AN "RTRUE"
                      (         SUBS.ASM):00232         
2A7F                  (         SUBS.ASM):00233         PREDB3:
2A7F 830001           (         SUBS.ASM):00234                 SUBD    #1                                ; D = OFFSET-2
2A82 DD3F             (         SUBS.ASM):00235                 STD     TEMP                              ; SAVE NEW OFFSET
                      (         SUBS.ASM):00236         
                      (         SUBS.ASM):00237         ; USE [VAL] TO HOLD TOP 9 BITS OF OFFSET
                      (         SUBS.ASM):00238         
2A84 973E             (         SUBS.ASM):00239                 STA     VAL+1
2A86 5F               (         SUBS.ASM):00240                 CLRB
2A87 48               (         SUBS.ASM):00241                 ASLA                                      ; EXTEND THE SIGN BIT
2A88 59               (         SUBS.ASM):00242                 ROLB                                      ; SHIFT CARRY TO BIT 0 OF [B]
2A89 D73D             (         SUBS.ASM):00243                 STB     VAL                               ; SAVE AS UPPER BYTE OF OFFSET
                      (         SUBS.ASM):00244         
2A8B 9640             (         SUBS.ASM):00245                 LDA     TEMP+1                            ; GET LOW BYTE OF OFFSET
2A8D 1CFE             (         SUBS.ASM):00246                 ANDCC   #%11111110                        ; CLEAR CARRY
2A8F 9915             (         SUBS.ASM):00247                 ADCA    ZPCL                              ; ADD LOW BYTE OF CURRENT ZPC
2A91 2406             (         SUBS.ASM):00248                 BCC     PDB0                              ; IF OVERFLOWED,
                      (         SUBS.ASM):00249         
2A93 0C3E             (         SUBS.ASM):00250                 INC     VAL+1                             ; UPDATE
2A95 2602             (         SUBS.ASM):00251                 BNE     PDB0                              ; UPPER
2A97 0C3D             (         SUBS.ASM):00252                 INC     VAL                               ; 9 BITS
                      (         SUBS.ASM):00253         
2A99                  (         SUBS.ASM):00254         PDB0:
2A99 9715             (         SUBS.ASM):00255                 STA     ZPCL                              ; LOW-BYTES CALCED
                      (         SUBS.ASM):00256         
2A9B DC3D             (         SUBS.ASM):00257                 LDD     VAL                               ; IF 9 UPPER BITS ARE ZERO,
2A9D 2712             (         SUBS.ASM):00258                 BEQ     PDB1                              ; NO NEED TO CHANGE PAGES
                      (         SUBS.ASM):00259         
2A9F 963E             (         SUBS.ASM):00260                 LDA     VAL+1                             ; ELSE ADD MIDDLE BYTES
2AA1 1CFE             (         SUBS.ASM):00261                 ANDCC   #%11111110                        ; CLEAR CARRY
2AA3 9914             (         SUBS.ASM):00262                 ADCA    ZPCM
2AA5 9714             (         SUBS.ASM):00263                 STA     ZPCM
2AA7 963D             (         SUBS.ASM):00264                 LDA     VAL                               ; NOW ADD THE TOP BITS
2AA9 9913             (         SUBS.ASM):00265                 ADCA    ZPCH                              ; USING PREVIOUS CARRY
2AAB 8401             (         SUBS.ASM):00266                 ANDA    #%00000001                        ; ISOLATE BIT 0
2AAD 9713             (         SUBS.ASM):00267                 STA     ZPCH
2AAF 0F18             (         SUBS.ASM):00268                 CLR     ZPCFLG                            ; CHANGED PAGES
2AB1                  (         SUBS.ASM):00269         PDB1:
2AB1 39               (         SUBS.ASM):00270                 RTS
                      (     cubixzip.asm):00054                 INCLUDE DISPATCH.ASM
                      (     DISPATCH.ASM):00001         ;       PAGE
                      (     DISPATCH.ASM):00002         ;       SBTTL "--- OPCODE DISPATCH TABLES ---"
                      (     DISPATCH.ASM):00003         
                      (     DISPATCH.ASM):00004         ; 0-OPS
                      (     DISPATCH.ASM):00005         
2AB2                  (     DISPATCH.ASM):00006         OPT0:
2AB2 2B38             (     DISPATCH.ASM):00007                 FDB     ZRTRUE                            ; 0
2AB4 2B40             (     DISPATCH.ASM):00008                 FDB     ZRFALS                            ; 1
2AB6 2B43             (     DISPATCH.ASM):00009                 FDB     ZPRI                              ; 2
2AB8 2B61             (     DISPATCH.ASM):00010                 FDB     ZPRR                              ; 3
2ABA 2B60             (     DISPATCH.ASM):00011                 FDB     ZNOOP                             ; 4
2ABC 38AF             (     DISPATCH.ASM):00012                 FDB     ZSAVE                             ; 5
2ABE 3955             (     DISPATCH.ASM):00013                 FDB     ZREST                             ; 6
2AC0 3623             (     DISPATCH.ASM):00014                 FDB     ZSTART                            ; 7
2AC2 2B68             (     DISPATCH.ASM):00015                 FDB     ZRSTAK                            ; 8
2AC4 2A2A             (     DISPATCH.ASM):00016                 FDB     POPSTK                            ; 9
2AC6 3693             (     DISPATCH.ASM):00017                 FDB     ZQUIT                             ; 10
2AC8 371F             (     DISPATCH.ASM):00018                 FDB     ZCRLF                             ; 11
2ACA 375A             (     DISPATCH.ASM):00019                 FDB     ZUSL                              ; 12
2ACC 2B70             (     DISPATCH.ASM):00020                 FDB     ZVER                              ; 13
                      (     DISPATCH.ASM):00021         
     000E             (     DISPATCH.ASM):00022         NOPS0           EQU 14                            ; NUMBER OF 0-OPS
                      (     DISPATCH.ASM):00023         
                      (     DISPATCH.ASM):00024         ; 1-OPS
                      (     DISPATCH.ASM):00025         
2ACE                  (     DISPATCH.ASM):00026         OPT1:
2ACE 2BBD             (     DISPATCH.ASM):00027                 FDB     ZZERO                             ; 0
2AD0 2BC6             (     DISPATCH.ASM):00028                 FDB     ZNEXT                             ; 1
2AD2 2BCF             (     DISPATCH.ASM):00029                 FDB     ZFIRST                            ; 2
2AD4 2BED             (     DISPATCH.ASM):00030                 FDB     ZLOC                              ; 3
2AD6 2BFD             (     DISPATCH.ASM):00031                 FDB     ZPTSIZ                            ; 4
2AD8 2C0F             (     DISPATCH.ASM):00032                 FDB     ZINC                              ; 5
2ADA 2C27             (     DISPATCH.ASM):00033                 FDB     ZDEC                              ; 6
2ADC 2C33             (     DISPATCH.ASM):00034                 FDB     ZPRB                              ; 7
2ADE 2953             (     DISPATCH.ASM):00035                 FDB     BADOP1                            ; 8 (UNDEFINED)
2AE0 2C3D             (     DISPATCH.ASM):00036                 FDB     ZREMOV                            ; 9
2AE2 2C7D             (     DISPATCH.ASM):00037                 FDB     ZPRD                              ; 10
2AE4 2C91             (     DISPATCH.ASM):00038                 FDB     ZRET                              ; 11
2AE6 2CCB             (     DISPATCH.ASM):00039                 FDB     ZJUMP                             ; 12
2AE8 2CD5             (     DISPATCH.ASM):00040                 FDB     ZPRINT                            ; 13
2AEA 2CDF             (     DISPATCH.ASM):00041                 FDB     ZVALUE                            ; 14
2AEC 2CE7             (     DISPATCH.ASM):00042                 FDB     ZBCOM                             ; 15
                      (     DISPATCH.ASM):00043         
     0010             (     DISPATCH.ASM):00044         NOPS1           EQU 16                            ; NUMBER OF 1-OPS
                      (     DISPATCH.ASM):00045         
                      (     DISPATCH.ASM):00046         ; 2-OPS
                      (     DISPATCH.ASM):00047         
2AEE                  (     DISPATCH.ASM):00048         OPT2:
2AEE 29A1             (     DISPATCH.ASM):00049                 FDB     BADOP2                            ; 0 (UNDEFINED)
2AF0 2F0C             (     DISPATCH.ASM):00050                 FDB     ZEQUAL                            ; 1
2AF2 2CF0             (     DISPATCH.ASM):00051                 FDB     ZLESS                             ; 2
2AF4 2CFA             (     DISPATCH.ASM):00052                 FDB     ZGRTR                             ; 3
2AF6 2D04             (     DISPATCH.ASM):00053                 FDB     ZDLESS                            ; 4
2AF8 2D0D             (     DISPATCH.ASM):00054                 FDB     ZIGRTR                            ; 5
2AFA 2D30             (     DISPATCH.ASM):00055                 FDB     ZIN                               ; 6
2AFC 2D40             (     DISPATCH.ASM):00056                 FDB     ZBTST                             ; 7
2AFE 2D4D             (     DISPATCH.ASM):00057                 FDB     ZBOR                              ; 8
2B00 2D58             (     DISPATCH.ASM):00058                 FDB     ZBAND                             ; 9
2B02 2D60             (     DISPATCH.ASM):00059                 FDB     ZFSETP                            ; 10
2B04 2D71             (     DISPATCH.ASM):00060                 FDB     ZFSET                             ; 11
2B06 2D7F             (     DISPATCH.ASM):00061                 FDB     ZFCLR                             ; 12
2B08 2D8F             (     DISPATCH.ASM):00062                 FDB     ZSET                              ; 13
2B0A 2D98             (     DISPATCH.ASM):00063                 FDB     ZMOVE                             ; 14
2B0C 2DBE             (     DISPATCH.ASM):00064                 FDB     ZGET                              ; 15
2B0E 2DD1             (     DISPATCH.ASM):00065                 FDB     ZGETB                             ; 16
2B10 2DE4             (     DISPATCH.ASM):00066                 FDB     ZGETP                             ; 17
2B12 2E28             (     DISPATCH.ASM):00067                 FDB     ZGETPT                            ; 18
2B14 2E4C             (     DISPATCH.ASM):00068                 FDB     ZNEXTP                            ; 19
2B16 2E6C             (     DISPATCH.ASM):00069                 FDB     ZADD                              ; 20
2B18 2E75             (     DISPATCH.ASM):00070                 FDB     ZSUB                              ; 21
2B1A 2E7B             (     DISPATCH.ASM):00071                 FDB     ZMUL                              ; 22
2B1C 2E9A             (     DISPATCH.ASM):00072                 FDB     ZDIV                              ; 23
2B1E 2E9F             (     DISPATCH.ASM):00073                 FDB     ZMOD                              ; 24
                      (     DISPATCH.ASM):00074         
     0019             (     DISPATCH.ASM):00075         NOPS2           EQU 25                            ; NUMBER OF 2-OPS
                      (     DISPATCH.ASM):00076         
                      (     DISPATCH.ASM):00077         ; X-OPS
                      (     DISPATCH.ASM):00078         
2B20                  (     DISPATCH.ASM):00079         OPTX:
2B20 2F34             (     DISPATCH.ASM):00080                 FDB     ZCALL                             ; 0
2B22 2FA5             (     DISPATCH.ASM):00081                 FDB     ZPUT                              ; 1
2B24 2FB7             (     DISPATCH.ASM):00082                 FDB     ZPUTB                             ; 2
2B26 2FC5             (     DISPATCH.ASM):00083                 FDB     ZPUTP                             ; 3
2B28 3064             (     DISPATCH.ASM):00084                 FDB     ZREAD                             ; 4
2B2A 2FFB             (     DISPATCH.ASM):00085                 FDB     ZPRC                              ; 5
2B2C 3000             (     DISPATCH.ASM):00086                 FDB     ZPRN                              ; 6
2B2E 303B             (     DISPATCH.ASM):00087                 FDB     ZRAND                             ; 7
2B30 3057             (     DISPATCH.ASM):00088                 FDB     ZPUSH                             ; 8
2B32 305C             (     DISPATCH.ASM):00089                 FDB     ZPOP                              ; 9
2B34 2B60             (     DISPATCH.ASM):00090                 FDB     ZSPLIT                            ; 10
2B36 2B60             (     DISPATCH.ASM):00091                 FDB     ZSCRN                             ; 11
                      (     DISPATCH.ASM):00092         
     000C             (     DISPATCH.ASM):00093         NOPSX           EQU 12                            ; NUMBER OF X-OPS
                      (     cubixzip.asm):00055         
                      (     cubixzip.asm):00056         ;TITLE "ZIP/6809-B INFOCOM, INC. --- OPCODE EXECUTORS"
                      (     cubixzip.asm):00057                 INCLUDE OPS0.ASM
                      (         OPS0.ASM):00001         ;       PAGE
                      (         OPS0.ASM):00002         ;       SBTTL "--- 0-OPS ---"
                      (         OPS0.ASM):00003         
                      (         OPS0.ASM):00004         ; -----
                      (         OPS0.ASM):00005         ; RTRUE
                      (         OPS0.ASM):00006         ; -----
                      (         OPS0.ASM):00007         
                      (         OPS0.ASM):00008         ; Simulate a RETURN 1
                      (         OPS0.ASM):00009         
2B38                  (         OPS0.ASM):00010         ZRTRUE:
2B38 C601             (         OPS0.ASM):00011                 LDB     #1
                      (         OPS0.ASM):00012         
2B3A                  (         OPS0.ASM):00013         ZRT:
2B3A 4F               (         OPS0.ASM):00014                 CLRA
2B3B DD02             (         OPS0.ASM):00015                 STD     ARG1                              ; SAVE VALUE HERE
2B3D 7E2C91           (         OPS0.ASM):00016                 JMP     ZRET
                      (         OPS0.ASM):00017         
                      (         OPS0.ASM):00018         ; ------
                      (         OPS0.ASM):00019         ; RFALSE
                      (         OPS0.ASM):00020         ; ------
                      (         OPS0.ASM):00021         
                      (         OPS0.ASM):00022         ; Simulate a RETURN 0
                      (         OPS0.ASM):00023         
2B40                  (         OPS0.ASM):00024         ZRFALS:
2B40 5F               (         OPS0.ASM):00025                 CLRB
2B41 20F7             (         OPS0.ASM):00026                 BRA     ZRT
                      (         OPS0.ASM):00027         
                      (         OPS0.ASM):00028         ; ------
                      (         OPS0.ASM):00029         ; PRINTI
                      (         OPS0.ASM):00030         ; ------
                      (         OPS0.ASM):00031         
                      (         OPS0.ASM):00032         ; Print the Z-string immediately following the opcode
                      (         OPS0.ASM):00033         
2B43                  (         OPS0.ASM):00034         ZPRI:
2B43 9613             (         OPS0.ASM):00035                 LDA     ZPCH                              ; MOVE ZPC INTO MPC
2B45 971A             (         OPS0.ASM):00036                 STA     MPCH
2B47 DC14             (         OPS0.ASM):00037                 LDD     ZPCM
2B49 DD1B             (         OPS0.ASM):00038                 STD     MPCM
2B4B 0F1F             (         OPS0.ASM):00039                 CLR     MPCFLG                            ; ZERO MPC FLAG
                      (         OPS0.ASM):00040         
2B4D BD328B           (         OPS0.ASM):00041                 JSR     PZSTR                             ; PRINT THE STRING AT [MPC]
                      (         OPS0.ASM):00042         
2B50 961A             (         OPS0.ASM):00043                 LDA     MPCH                              ; UPDATE ZPC FROM MPC
2B52 9713             (         OPS0.ASM):00044                 STA     ZPCH
2B54 DC1B             (         OPS0.ASM):00045                 LDD     MPCM
2B56 DD14             (         OPS0.ASM):00046                 STD     ZPCM
2B58 961F             (         OPS0.ASM):00047                 LDA     MPCFLG                            ; ALSO UPDATE FLAG
2B5A 9718             (         OPS0.ASM):00048                 STA     ZPCFLG
2B5C DC1D             (         OPS0.ASM):00049                 LDD     MPCPNT                            ; AND PAGE POINTER
2B5E DD16             (         OPS0.ASM):00050                 STD     ZPCPNT
                      (         OPS0.ASM):00051         
                      (         OPS0.ASM):00052         ; FALL THROUGH TO ...
                      (         OPS0.ASM):00053         
                      (         OPS0.ASM):00054         ; ----
                      (         OPS0.ASM):00055         ; NOOP
                      (         OPS0.ASM):00056         ; ----
                      (         OPS0.ASM):00057         
2B60                  (         OPS0.ASM):00058         ZNOOP:
2B60 39               (         OPS0.ASM):00059                 RTS
                      (         OPS0.ASM):00060         
                      (         OPS0.ASM):00061         ; ------
                      (         OPS0.ASM):00062         ; PRINTR
                      (         OPS0.ASM):00063         ; ------
                      (         OPS0.ASM):00064         
                      (         OPS0.ASM):00065         ; Execute a PRINTI, followed by CRLF and RTRUE
                      (         OPS0.ASM):00066         
2B61                  (         OPS0.ASM):00067         ZPRR:
2B61 8DE0             (         OPS0.ASM):00068                 BSR     ZPRI
2B63 BD371F           (         OPS0.ASM):00069                 JSR     ZCRLF
2B66 20D0             (         OPS0.ASM):00070                 BRA     ZRTRUE
                      (         OPS0.ASM):00071         
                      (         OPS0.ASM):00072         ; ------
                      (         OPS0.ASM):00073         ; RSTACK
                      (         OPS0.ASM):00074         ; ------
                      (         OPS0.ASM):00075         
                      (         OPS0.ASM):00076         ; Execute a RETURN, with CALL value on top of the stack
                      (         OPS0.ASM):00077         
2B68                  (         OPS0.ASM):00078         ZRSTAK:
2B68 BD2A2A           (         OPS0.ASM):00079                 JSR     POPSTK
2B6B DD02             (         OPS0.ASM):00080                 STD     ARG1                              ; TOS WAS LEFT IN [D]
2B6D 7E2C91           (         OPS0.ASM):00081                 JMP     ZRET
                      (         OPS0.ASM):00082         
                      (         OPS0.ASM):00083         ; ------
                      (         OPS0.ASM):00084         ; VERIFY
                      (         OPS0.ASM):00085         ; ------
                      (         OPS0.ASM):00086         
                      (         OPS0.ASM):00087         ; Verify the game code
                      (         OPS0.ASM):00088         
2B70                  (         OPS0.ASM):00089         ZVER:
2B70 BD36C1           (         OPS0.ASM):00090                 JSR     VERNUM                            ; DISPLAY ZIP VERSION CODE
2B73 FC3F1A           (         OPS0.ASM):00091                 LDD     ZCODE+ZLENTH                      ; GET LENGTH OF Z-CODE
2B76 DD04             (         OPS0.ASM):00092                 STD     ARG2                              ; IN WORDS
                      (         OPS0.ASM):00093         
                      (         OPS0.ASM):00094         ; CLEAR VARIABLES
                      (         OPS0.ASM):00095         
2B78 4F               (         OPS0.ASM):00096                 CLRA
2B79 5F               (         OPS0.ASM):00097                 CLRB
2B7A DD02             (         OPS0.ASM):00098                 STD     ARG1
2B7C DD06             (         OPS0.ASM):00099                 STD     ARG3                              ; BIT 17 OF Z-CODE LENGTH
2B7E DD3F             (         OPS0.ASM):00100                 STD     TEMP                              ; BYTE COUNT
                      (         OPS0.ASM):00101         
                      (         OPS0.ASM):00102         ; CONVERT Z-CODE LENGTH TO BYTES
                      (         OPS0.ASM):00103         
2B80 0805             (         OPS0.ASM):00104                 ASL     ARG2+1                            ; BOTTOM 8 BITS
2B82 0904             (         OPS0.ASM):00105                 ROL     ARG2                              ; MIDDLE 8 BITS
2B84 0907             (         OPS0.ASM):00106                 ROL     ARG3+1                            ; 17TH BIT OF LENGTH
                      (         OPS0.ASM):00107         
2B86 8640             (         OPS0.ASM):00108                 LDA     #$40                              ; 1ST 64 BYTES
2B88 9740             (         OPS0.ASM):00109                 STA     TEMP+1                            ; ARE NOT CHECKED
2B8A BD3273           (         OPS0.ASM):00110                 JSR     SETWRD                            ; [TEMP] POINTS TO FIRST BYTE
                      (         OPS0.ASM):00111         
2B8D 8606             (         OPS0.ASM):00112                 LDA     #ARG3                             ; PATCH [GETBYT] ROUTINE
2B8F B731CA           (         OPS0.ASM):00113                 STA     PATCH                             ; SO PRELOAD WILL BE READ FROM DISK
                      (         OPS0.ASM):00114         
2B92                  (         OPS0.ASM):00115         VSUM:
2B92 BD31C0           (         OPS0.ASM):00116                 JSR     GETBYT                            ; GET A BYTE
2B95 5F               (         OPS0.ASM):00117                 CLRB                                      ; CLEAR CARRY
2B96 9903             (         OPS0.ASM):00118                 ADCA    ARG1+1                            ; ADD TO SUM
2B98 9703             (         OPS0.ASM):00119                 STA     ARG1+1
2B9A 2402             (         OPS0.ASM):00120                 BCC     VSUM0
2B9C 0C02             (         OPS0.ASM):00121                 INC     ARG1
                      (         OPS0.ASM):00122         
2B9E                  (         OPS0.ASM):00123         VSUM0:
2B9E DC1B             (         OPS0.ASM):00124                 LDD     MPCM                              ; END OF GAME YET?
2BA0 109304           (         OPS0.ASM):00125                 CMPD    ARG2
2BA3 26ED             (         OPS0.ASM):00126                 BNE     VSUM
                      (         OPS0.ASM):00127         
2BA5 961A             (         OPS0.ASM):00128                 LDA     MPCH                              ; ALSO CHECK TOP BIT
2BA7 9107             (         OPS0.ASM):00129                 CMPA    ARG3+1
2BA9 26E7             (         OPS0.ASM):00130                 BNE     VSUM
                      (         OPS0.ASM):00131         
2BAB 860B             (         OPS0.ASM):00132                 LDA     #ZPURE
2BAD B731CA           (         OPS0.ASM):00133                 STA     PATCH                             ; UNPATCH [GETBYT]
                      (         OPS0.ASM):00134         
2BB0 FC3F1C           (         OPS0.ASM):00135                 LDD     ZCODE+ZCHKSM                      ; GET CHECKSUM
2BB3 109302           (         OPS0.ASM):00136                 CMPD    ARG1                              ; SAME AS CALCULATED?
2BB6 1027FE93         (         OPS0.ASM):00137                 LBEQ    PREDS                             ; YES, PREDICATE SUCCEEDS
2BBA 7E2A3F           (         OPS0.ASM):00138                 JMP     PREDF                             ; ELSE FAILURE ...
                      (     cubixzip.asm):00058                 INCLUDE OPS1.ASM
                      (         OPS1.ASM):00001         ;       PAGE
                      (         OPS1.ASM):00002         ;       SBTTL "--- 1-OPS ---"
                      (         OPS1.ASM):00003         
                      (         OPS1.ASM):00004         ; -----
                      (         OPS1.ASM):00005         ; ZERO?
                      (         OPS1.ASM):00006         ; -----
                      (         OPS1.ASM):00007         
                      (         OPS1.ASM):00008         ; Is arg1 equal to zero? [PRED]
                      (         OPS1.ASM):00009         
2BBD                  (         OPS1.ASM):00010         ZZERO:
2BBD DC02             (         OPS1.ASM):00011                 LDD     ARG1
2BBF 1027FE8A         (         OPS1.ASM):00012                 LBEQ    PREDS
2BC3 7E2A3F           (         OPS1.ASM):00013                 JMP     PREDF
                      (         OPS1.ASM):00014         
                      (         OPS1.ASM):00015         ; -----
                      (         OPS1.ASM):00016         ; NEXT?
                      (         OPS1.ASM):00017         ; -----
                      (         OPS1.ASM):00018         
                      (         OPS1.ASM):00019         ; Return the NEXT pointer in object "arg1"; fail if
                      (         OPS1.ASM):00020         ; none left, and return zero [VALUE][PRED]
                      (         OPS1.ASM):00021         
2BC6                  (         OPS1.ASM):00022         ZNEXT:
2BC6 9603             (         OPS1.ASM):00023                 LDA     ARG1+1
2BC8 BD34D5           (         OPS1.ASM):00024                 JSR     OBJLOC
2BCB C605             (         OPS1.ASM):00025                 LDB     #5                                ; SAME AS FIRST?
2BCD 2007             (         OPS1.ASM):00026                 BRA     FIRST1
                      (         OPS1.ASM):00027         
                      (         OPS1.ASM):00028         ; ------
                      (         OPS1.ASM):00029         ; FIRST?
                      (         OPS1.ASM):00030         ; ------
                      (         OPS1.ASM):00031         
                      (         OPS1.ASM):00032         ; Return the FIRST pointer in object "arg1"; fail if
                      (         OPS1.ASM):00033         ; none, and return zero [VALUE][PRED]
                      (         OPS1.ASM):00034         
2BCF                  (         OPS1.ASM):00035         ZFIRST:
2BCF 9603             (         OPS1.ASM):00036                 LDA     ARG1+1
2BD1 BD34D5           (         OPS1.ASM):00037                 JSR     OBJLOC
2BD4 C606             (         OPS1.ASM):00038                 LDB     #6
                      (         OPS1.ASM):00039         
2BD6                  (         OPS1.ASM):00040         FIRST1:
2BD6 9E3F             (         OPS1.ASM):00041                 LDX     TEMP
2BD8 A685             (         OPS1.ASM):00042                 LDA     B,X                               ; FETCH SLOT
2BDA 9740             (         OPS1.ASM):00043                 STA     TEMP+1                            ; SAVE HERE
2BDC 3402             (         OPS1.ASM):00044                 PSHS    A                                 ; AND ON STACK
2BDE 0F3F             (         OPS1.ASM):00045                 CLR     TEMP                              ; ZERO MSB
2BE0 BD29F7           (         OPS1.ASM):00046                 JSR     PUTVAL
2BE3 3502             (         OPS1.ASM):00047                 PULS    A
2BE5 4D               (         OPS1.ASM):00048                 TSTA
2BE6 1027FE55         (         OPS1.ASM):00049                 LBEQ    PREDF                             ; FAILURE
2BEA 7E2A4D           (         OPS1.ASM):00050                 JMP     PREDS                             ; OR SUCCESS
                      (         OPS1.ASM):00051         
                      (         OPS1.ASM):00052         ; ---
                      (         OPS1.ASM):00053         ; LOC
                      (         OPS1.ASM):00054         ; ---
                      (         OPS1.ASM):00055         
                      (         OPS1.ASM):00056         ; Return the object containing object "arg1"; zero if none [VALUE]
                      (         OPS1.ASM):00057         
2BED                  (         OPS1.ASM):00058         ZLOC:
2BED 9603             (         OPS1.ASM):00059                 LDA     ARG1+1
2BEF BD34D5           (         OPS1.ASM):00060                 JSR     OBJLOC
2BF2 9E3F             (         OPS1.ASM):00061                 LDX     TEMP
2BF4 A604             (         OPS1.ASM):00062                 LDA     4,X
2BF6 9740             (         OPS1.ASM):00063                 STA     TEMP+1
2BF8 0F3F             (         OPS1.ASM):00064                 CLR     TEMP
2BFA 7E29F7           (         OPS1.ASM):00065                 JMP     PUTVAL
                      (         OPS1.ASM):00066         
                      (         OPS1.ASM):00067         ; ------
                      (         OPS1.ASM):00068         ; PTSIZE
                      (         OPS1.ASM):00069         ; ------
                      (         OPS1.ASM):00070         
                      (         OPS1.ASM):00071         ; Return length of prop table "arg1" in bytes [VALUE]
                      (         OPS1.ASM):00072         
2BFD                  (         OPS1.ASM):00073         ZPTSIZ:
2BFD DC02             (         OPS1.ASM):00074                 LDD     ARG1
2BFF C33F00           (         OPS1.ASM):00075                 ADDD    #ZCODE
2C02 830001           (         OPS1.ASM):00076                 SUBD    #1
2C05 DD3F             (         OPS1.ASM):00077                 STD     TEMP
2C07 5F               (         OPS1.ASM):00078                 CLRB
2C08 BD348F           (         OPS1.ASM):00079                 JSR     PROPL
2C0B 4C               (         OPS1.ASM):00080                 INCA
2C0C 7E29F3           (         OPS1.ASM):00081                 JMP     PUTBYT
                      (         OPS1.ASM):00082         
                      (         OPS1.ASM):00083         ; ---
                      (         OPS1.ASM):00084         ; INC
                      (         OPS1.ASM):00085         ; ---
                      (         OPS1.ASM):00086         
                      (         OPS1.ASM):00087         ; Increment arg1 [VALUE]
                      (         OPS1.ASM):00088         
2C0F                  (         OPS1.ASM):00089         ZINC:
2C0F 9603             (         OPS1.ASM):00090                 LDA     ARG1+1
2C11 BD29BD           (         OPS1.ASM):00091                 JSR     VARGET
2C14 DC3F             (         OPS1.ASM):00092                 LDD     TEMP
2C16 C30001           (         OPS1.ASM):00093                 ADDD    #1
2C19                  (         OPS1.ASM):00094         ZINC1:
2C19 DD3F             (         OPS1.ASM):00095                 STD     TEMP
2C1B 3406             (         OPS1.ASM):00096                 PSHS    D
2C1D 9603             (         OPS1.ASM):00097                 LDA     ARG1+1
2C1F BD29E5           (         OPS1.ASM):00098                 JSR     VARPUT
2C22 3506             (         OPS1.ASM):00099                 PULS    D
2C24 DD3F             (         OPS1.ASM):00100                 STD     TEMP
2C26 39               (         OPS1.ASM):00101                 RTS
                      (         OPS1.ASM):00102         
                      (         OPS1.ASM):00103         ; ---
                      (         OPS1.ASM):00104         ; DEC
                      (         OPS1.ASM):00105         ; ---
                      (         OPS1.ASM):00106         
                      (         OPS1.ASM):00107         ; Decrement arg1 [VALUE]
                      (         OPS1.ASM):00108         
2C27                  (         OPS1.ASM):00109         ZDEC:
2C27 9603             (         OPS1.ASM):00110                 LDA     ARG1+1
2C29 BD29BD           (         OPS1.ASM):00111                 JSR     VARGET
2C2C DC3F             (         OPS1.ASM):00112                 LDD     TEMP
2C2E 830001           (         OPS1.ASM):00113                 SUBD    #1
2C31 20E6             (         OPS1.ASM):00114                 BRA     ZINC1
                      (         OPS1.ASM):00115         
                      (         OPS1.ASM):00116         ; ------
                      (         OPS1.ASM):00117         ; PRINTB
                      (         OPS1.ASM):00118         ; ------
                      (         OPS1.ASM):00119         
                      (         OPS1.ASM):00120         ; PRINT the string pointed to by BYTE-pointer "arg1"
                      (         OPS1.ASM):00121         
2C33                  (         OPS1.ASM):00122         ZPRB:
2C33 DC02             (         OPS1.ASM):00123                 LDD     ARG1
2C35 DD3F             (         OPS1.ASM):00124                 STD     TEMP
2C37 BD3273           (         OPS1.ASM):00125                 JSR     SETWRD
2C3A 7E328B           (         OPS1.ASM):00126                 JMP     PZSTR
                      (         OPS1.ASM):00127         
                      (         OPS1.ASM):00128         ; ------
                      (         OPS1.ASM):00129         ; REMOVE
                      (         OPS1.ASM):00130         ; ------
                      (         OPS1.ASM):00131         
                      (         OPS1.ASM):00132         ; Move object "arg1" to pseudo-object #0
                      (         OPS1.ASM):00133         
2C3D                  (         OPS1.ASM):00134         ZREMOV:
2C3D 9603             (         OPS1.ASM):00135                 LDA     ARG1+1
2C3F BD34D5           (         OPS1.ASM):00136                 JSR     OBJLOC
2C42 9E3F             (         OPS1.ASM):00137                 LDX     TEMP
2C44 A604             (         OPS1.ASM):00138                 LDA     4,X
2C46 2734             (         OPS1.ASM):00139                 BEQ     REMVEX                            ; NO OBJECT
                      (         OPS1.ASM):00140         
2C48 3410             (         OPS1.ASM):00141                 PSHS    X                                 ; SAVE [TEMP]
                      (         OPS1.ASM):00142         
2C4A BD34D5           (         OPS1.ASM):00143                 JSR     OBJLOC
2C4D 9E3F             (         OPS1.ASM):00144                 LDX     TEMP
2C4F A606             (         OPS1.ASM):00145                 LDA     6,X
2C51 9103             (         OPS1.ASM):00146                 CMPA    ARG1+1
2C53 260C             (         OPS1.ASM):00147                 BNE     REMVC1
                      (         OPS1.ASM):00148         
2C55 3510             (         OPS1.ASM):00149                 PULS    X                                 ; RETRIEVE FORMER [TEMP]
2C57 3410             (         OPS1.ASM):00150                 PSHS    X                                 ; SAVE COPY ON STACK
                      (         OPS1.ASM):00151         
2C59 A605             (         OPS1.ASM):00152                 LDA     5,X                               ; OLD [TEMP] IS IN [X]
2C5B 9E3F             (         OPS1.ASM):00153                 LDX     TEMP
2C5D A706             (         OPS1.ASM):00154                 STA     6,X
                      (         OPS1.ASM):00155         
2C5F 2015             (         OPS1.ASM):00156                 BRA     REMVC2
                      (         OPS1.ASM):00157         
2C61                  (         OPS1.ASM):00158         REMVC1:
2C61 BD34D5           (         OPS1.ASM):00159                 JSR     OBJLOC
2C64 9E3F             (         OPS1.ASM):00160                 LDX     TEMP
2C66 A605             (         OPS1.ASM):00161                 LDA     5,X
2C68 9103             (         OPS1.ASM):00162                 CMPA    ARG1+1
2C6A 26F5             (         OPS1.ASM):00163                 BNE     REMVC1
                      (         OPS1.ASM):00164         
2C6C 3510             (         OPS1.ASM):00165                 PULS    X
2C6E 3410             (         OPS1.ASM):00166                 PSHS    X
                      (         OPS1.ASM):00167         
2C70 A605             (         OPS1.ASM):00168                 LDA     5,X
2C72 9E3F             (         OPS1.ASM):00169                 LDX     TEMP
2C74 A705             (         OPS1.ASM):00170                 STA     5,X
                      (         OPS1.ASM):00171         
2C76                  (         OPS1.ASM):00172         REMVC2:
2C76 3510             (         OPS1.ASM):00173                 PULS    X
2C78 6F04             (         OPS1.ASM):00174                 CLR     4,X
2C7A 6F05             (         OPS1.ASM):00175                 CLR     5,X
                      (         OPS1.ASM):00176         
2C7C                  (         OPS1.ASM):00177         REMVEX:
2C7C 39               (         OPS1.ASM):00178                 RTS
                      (         OPS1.ASM):00179         
                      (         OPS1.ASM):00180         ; ------
                      (         OPS1.ASM):00181         ; PRINTD
                      (         OPS1.ASM):00182         ; ------
                      (         OPS1.ASM):00183         
                      (         OPS1.ASM):00184         ; Print short description of object "arg1"
                      (         OPS1.ASM):00185         
2C7D                  (         OPS1.ASM):00186         ZPRD:
2C7D 9603             (         OPS1.ASM):00187                 LDA     ARG1+1
                      (         OPS1.ASM):00188         
2C7F                  (         OPS1.ASM):00189         PRNTDC:
2C7F BD34D5           (         OPS1.ASM):00190                 JSR     OBJLOC
2C82 9E3F             (         OPS1.ASM):00191                 LDX     TEMP
2C84 EC07             (         OPS1.ASM):00192                 LDD     7,X
2C86 C30001           (         OPS1.ASM):00193                 ADDD    #1                                ; INCREMENT
2C89 DD3F             (         OPS1.ASM):00194                 STD     TEMP                              ; AND SAVE
2C8B BD3273           (         OPS1.ASM):00195                 JSR     SETWRD
2C8E 7E328B           (         OPS1.ASM):00196                 JMP     PZSTR
                      (         OPS1.ASM):00197         
                      (         OPS1.ASM):00198         ; ------
                      (         OPS1.ASM):00199         ; RETURN
                      (         OPS1.ASM):00200         ; ------
                      (         OPS1.ASM):00201         
                      (         OPS1.ASM):00202         ; Return from a CALL with value "arg1"
                      (         OPS1.ASM):00203         
2C91                  (         OPS1.ASM):00204         ZRET:
2C91 DE27             (         OPS1.ASM):00205                 LDU     OZSTAK                            ; STAY IN SYNC!
2C93 BD2A2A           (         OPS1.ASM):00206                 JSR     POPSTK                            ; POP # LOCALS
2C96 D73D             (         OPS1.ASM):00207                 STB     VAL                               ; SAVE COUNT HERE
                      (         OPS1.ASM):00208         
2C98 43               (         OPS1.ASM):00209                 COMA                                      ; COMPLEMENT [A]
2C99 913D             (         OPS1.ASM):00210                 CMPA    VAL                               ; SHOULD BE OPPOSITE OF [B]
2C9B 2629             (         OPS1.ASM):00211                 BNE     RETERR                            ; IF NOT, STACK IS BAD (BM 11/24/84)
                      (         OPS1.ASM):00212         
2C9D 5D               (         OPS1.ASM):00213                 TSTB                                      ; CHECK # LOCALS
2C9E 270E             (         OPS1.ASM):00214                 BEQ     RET2                              ; SKIP IF NO LOCALS
                      (         OPS1.ASM):00215         
                      (         OPS1.ASM):00216         ; RESTORE LOCAL VARIABLES
                      (         OPS1.ASM):00217         
2CA0 8E2700           (         OPS1.ASM):00218                 LDX     #LOCALS                           ; SET UP A POINTER
2CA3 58               (         OPS1.ASM):00219                 ASLB                                      ; WORD-ALIGN THE INDEX
2CA4 3A               (         OPS1.ASM):00220                 ABX                                       ; [X] POINTS TO LAST LOCAL VAR
                      (         OPS1.ASM):00221         
2CA5                  (         OPS1.ASM):00222         RET1:
2CA5 BD2A2A           (         OPS1.ASM):00223                 JSR     POPSTK                            ; POP A VALUE ([X] UNAFFECTED)
2CA8 ED83             (         OPS1.ASM):00224                 STD     ,--X                              ; SAVE IN [LOCALS], UPDATE INDEX
2CAA 0A3D             (         OPS1.ASM):00225                 DEC     VAL
2CAC 26F7             (         OPS1.ASM):00226                 BNE     RET1                              ; LOOP TILL ALL LOCALS POPPED
                      (         OPS1.ASM):00227         
                      (         OPS1.ASM):00228         ; RESTORE OTHER VARIABLES
                      (         OPS1.ASM):00229         
2CAE                  (         OPS1.ASM):00230         RET2:
2CAE BD2A2A           (         OPS1.ASM):00231                 JSR     POPSTK
2CB1 DD13             (         OPS1.ASM):00232                 STD     ZPCH                              ; RESTORE TOP 9 BITS OF ZPC
2CB3 BD2A2A           (         OPS1.ASM):00233                 JSR     POPSTK
2CB6 D715             (         OPS1.ASM):00234                 STB     ZPCL                              ; RESTORE LOWER 8 BITS OF ZPC
2CB8 BD2A2A           (         OPS1.ASM):00235                 JSR     POPSTK
2CBB DD27             (         OPS1.ASM):00236                 STD     OZSTAK                            ; AND OLD ZSP
2CBD 0F18             (         OPS1.ASM):00237                 CLR     ZPCFLG                            ; PC NO LONGER VALID
                      (         OPS1.ASM):00238         
2CBF DC02             (         OPS1.ASM):00239                 LDD     ARG1
2CC1 DD3F             (         OPS1.ASM):00240                 STD     TEMP                              ; PASS THE RETURN VALUE
2CC3 7E29F7           (         OPS1.ASM):00241                 JMP     PUTVAL                            ; TO PUTVAL
                      (         OPS1.ASM):00242         
                      (         OPS1.ASM):00243         ; *** ERROR #15: Z-STACK DESTROYED ***
                      (         OPS1.ASM):00244         
2CC6                  (         OPS1.ASM):00245         RETERR:
2CC6 860F             (         OPS1.ASM):00246                 LDA     #15
2CC8 7E367A           (         OPS1.ASM):00247                 JMP     ZERROR
                      (         OPS1.ASM):00248         
                      (         OPS1.ASM):00249         ; ----
                      (         OPS1.ASM):00250         ; JUMP
                      (         OPS1.ASM):00251         ; ----
                      (         OPS1.ASM):00252         
                      (         OPS1.ASM):00253         ; Branch to location pointed to by 16-bit 2's-comp "arg1"
                      (         OPS1.ASM):00254         
2CCB                  (         OPS1.ASM):00255         ZJUMP:
2CCB DC02             (         OPS1.ASM):00256                 LDD     ARG1                              ; TREAT LIKE A BRANCH
2CCD 830001           (         OPS1.ASM):00257                 SUBD    #1                                ; THAT ALWAYS SUCCEEDS
2CD0 DD3F             (         OPS1.ASM):00258                 STD     TEMP
2CD2 7E2A7F           (         OPS1.ASM):00259                 JMP     PREDB3
                      (         OPS1.ASM):00260         
                      (         OPS1.ASM):00261         ; -----
                      (         OPS1.ASM):00262         ; PRINT
                      (         OPS1.ASM):00263         ; -----
                      (         OPS1.ASM):00264         
                      (         OPS1.ASM):00265         ; Print the z-string pointed to by WORD-pointer "arg1"
                      (         OPS1.ASM):00266         
2CD5                  (         OPS1.ASM):00267         ZPRINT:
2CD5 DC02             (         OPS1.ASM):00268                 LDD     ARG1
2CD7 DD3F             (         OPS1.ASM):00269                 STD     TEMP                              ; TELL SETSTR
2CD9 BD327C           (         OPS1.ASM):00270                 JSR     SETSTR                            ; WHERE THE STRING RESIDES
2CDC 7E328B           (         OPS1.ASM):00271                 JMP     PZSTR                             ; AND PRINT IT
                      (         OPS1.ASM):00272         
                      (         OPS1.ASM):00273         ; -----
                      (         OPS1.ASM):00274         ; VALUE
                      (         OPS1.ASM):00275         ; -----
                      (         OPS1.ASM):00276         
                      (         OPS1.ASM):00277         ; Return value of arg1 [VALUE]
                      (         OPS1.ASM):00278         
2CDF                  (         OPS1.ASM):00279         ZVALUE:
2CDF 9603             (         OPS1.ASM):00280                 LDA     ARG1+1                            ; GRAB VARIABLE ID
2CE1 BD29BD           (         OPS1.ASM):00281                 JSR     VARGET                            ; FETCH ITS VALUE
2CE4 7E29F7           (         OPS1.ASM):00282                 JMP     PUTVAL                            ; AND RETURN IT
                      (         OPS1.ASM):00283         
                      (         OPS1.ASM):00284         ; ----
                      (         OPS1.ASM):00285         ; BCOM
                      (         OPS1.ASM):00286         ; ----
                      (         OPS1.ASM):00287         
                      (         OPS1.ASM):00288         ; Complement arg1 [VALUE]
                      (         OPS1.ASM):00289         
2CE7                  (         OPS1.ASM):00290         ZBCOM:
2CE7 DC02             (         OPS1.ASM):00291                 LDD     ARG1                              ; GRAB ARGUMENT
2CE9 43               (         OPS1.ASM):00292                 COMA                                      ; COMPLEMENT MSB
2CEA 53               (         OPS1.ASM):00293                 COMB                                      ; AND LSB
2CEB DD3F             (         OPS1.ASM):00294                 STD     TEMP                              ; AND PASS TO PUTVAL
2CED 7E29F7           (         OPS1.ASM):00295                 JMP     PUTVAL
                      (     cubixzip.asm):00059                 INCLUDE OPS2.ASM
                      (         OPS2.ASM):00001         ;       PAGE
                      (         OPS2.ASM):00002         ;       SBTTL "--- 2-OPS ---"
                      (         OPS2.ASM):00003         
                      (         OPS2.ASM):00004         ; -----
                      (         OPS2.ASM):00005         ; LESS?
                      (         OPS2.ASM):00006         ; -----
                      (         OPS2.ASM):00007         
                      (         OPS2.ASM):00008         ; Is arg1 less than arg2? [PRED]
                      (         OPS2.ASM):00009         
2CF0                  (         OPS2.ASM):00010         ZLESS:
2CF0 DC02             (         OPS2.ASM):00011                 LDD     ARG1
2CF2 DD3F             (         OPS2.ASM):00012                 STD     TEMP
2CF4 DC04             (         OPS2.ASM):00013                 LDD     ARG2
2CF6 DD3D             (         OPS2.ASM):00014                 STD     VAL
2CF8 201E             (         OPS2.ASM):00015                 BRA     CEXIT
                      (         OPS2.ASM):00016         
                      (         OPS2.ASM):00017         ; -----
                      (         OPS2.ASM):00018         ; GRTR?
                      (         OPS2.ASM):00019         ; -----
                      (         OPS2.ASM):00020         
                      (         OPS2.ASM):00021         ; Is arg1 greater than arg2? [PRED]
                      (         OPS2.ASM):00022         
2CFA                  (         OPS2.ASM):00023         ZGRTR:
2CFA DC02             (         OPS2.ASM):00024                 LDD     ARG1
2CFC DD3D             (         OPS2.ASM):00025                 STD     VAL
2CFE DC04             (         OPS2.ASM):00026                 LDD     ARG2
2D00 DD3F             (         OPS2.ASM):00027                 STD     TEMP
2D02 2014             (         OPS2.ASM):00028                 BRA     CEXIT
                      (         OPS2.ASM):00029         
                      (         OPS2.ASM):00030         ; ------
                      (         OPS2.ASM):00031         ; DLESS?
                      (         OPS2.ASM):00032         ; ------
                      (         OPS2.ASM):00033         
                      (         OPS2.ASM):00034         ; Decrement variable "arg1"; succeed if new value
                      (         OPS2.ASM):00035         ; is less than arg2 [PRED]
                      (         OPS2.ASM):00036         
2D04                  (         OPS2.ASM):00037         ZDLESS:
2D04 BD2C27           (         OPS2.ASM):00038                 JSR     ZDEC                              ; DECREMENT THE VARIABLE
2D07 DC04             (         OPS2.ASM):00039                 LDD     ARG2
2D09 DD3D             (         OPS2.ASM):00040                 STD     VAL
2D0B 200B             (         OPS2.ASM):00041                 BRA     CEXIT                             ; AND COMPARE
                      (         OPS2.ASM):00042         
                      (         OPS2.ASM):00043         ; ------
                      (         OPS2.ASM):00044         ; IGRTR?
                      (         OPS2.ASM):00045         ; ------
                      (         OPS2.ASM):00046         
                      (         OPS2.ASM):00047         ; Increment variable "arg1"; succeed if new value is
                      (         OPS2.ASM):00048         ; greater than arg2 [PRED]
                      (         OPS2.ASM):00049         
2D0D                  (         OPS2.ASM):00050         ZIGRTR:
2D0D BD2C0F           (         OPS2.ASM):00051                 JSR     ZINC                              ; INCREMENT THE VARIABLE
2D10 DC3F             (         OPS2.ASM):00052                 LDD     TEMP
2D12 DD3D             (         OPS2.ASM):00053                 STD     VAL
2D14 DC04             (         OPS2.ASM):00054                 LDD     ARG2
2D16 DD3F             (         OPS2.ASM):00055                 STD     TEMP
                      (         OPS2.ASM):00056         
2D18                  (         OPS2.ASM):00057         CEXIT:
2D18 8D05             (         OPS2.ASM):00058                 BSR     SCOMP
2D1A 2521             (         OPS2.ASM):00059                 BLO     POK
2D1C                  (         OPS2.ASM):00060         PBAD:
2D1C 7E2A3F           (         OPS2.ASM):00061                 JMP     PREDF
                      (         OPS2.ASM):00062         
                      (         OPS2.ASM):00063         ; -----------------
                      (         OPS2.ASM):00064         ; SIGNED COMPARISON
                      (         OPS2.ASM):00065         ; -----------------
                      (         OPS2.ASM):00066         
2D1F                  (         OPS2.ASM):00067         SCOMP:
2D1F 963D             (         OPS2.ASM):00068                 LDA     VAL                               ; ARE ARGUMENTS
2D21 983F             (         OPS2.ASM):00069                 EORA    TEMP                              ; SIGNED THE SAME?
2D23 2A05             (         OPS2.ASM):00070                 BPL     SCMP                              ; YES, DO ORDINARY COMPARE
2D25 963D             (         OPS2.ASM):00071                 LDA     VAL                               ; ELSE COMPARE
2D27 913F             (         OPS2.ASM):00072                 CMPA    TEMP                              ; ONLY THE HIGH BYTES
2D29 39               (         OPS2.ASM):00073                 RTS
                      (         OPS2.ASM):00074         
2D2A                  (         OPS2.ASM):00075         SCMP:
2D2A DC3F             (         OPS2.ASM):00076                 LDD     TEMP
2D2C 10933D           (         OPS2.ASM):00077                 CMPD    VAL
2D2F 39               (         OPS2.ASM):00078                 RTS
                      (         OPS2.ASM):00079         
                      (         OPS2.ASM):00080         ; ---
                      (         OPS2.ASM):00081         ; IN?
                      (         OPS2.ASM):00082         ; ---
                      (         OPS2.ASM):00083         
                      (         OPS2.ASM):00084         ; Is object "arg1" contained in object "arg2?" [PRED]
                      (         OPS2.ASM):00085         
2D30                  (         OPS2.ASM):00086         ZIN:
2D30 9603             (         OPS2.ASM):00087                 LDA     ARG1+1
2D32 BD34D5           (         OPS2.ASM):00088                 JSR     OBJLOC
2D35 9E3F             (         OPS2.ASM):00089                 LDX     TEMP
2D37 9605             (         OPS2.ASM):00090                 LDA     ARG2+1
2D39 A104             (         OPS2.ASM):00091                 CMPA    4,X
2D3B 26DF             (         OPS2.ASM):00092                 BNE     PBAD
2D3D                  (         OPS2.ASM):00093         POK:
2D3D 7E2A4D           (         OPS2.ASM):00094                 JMP     PREDS
                      (         OPS2.ASM):00095         
                      (         OPS2.ASM):00096         ; ----
                      (         OPS2.ASM):00097         ; BTST
                      (         OPS2.ASM):00098         ; ----
                      (         OPS2.ASM):00099         
                      (         OPS2.ASM):00100         ; Is every "on" bit in arg1 also "on" in arg2? [PRED]
                      (         OPS2.ASM):00101         
2D40                  (         OPS2.ASM):00102         ZBTST:
2D40 DC04             (         OPS2.ASM):00103                 LDD     ARG2
2D42 9402             (         OPS2.ASM):00104                 ANDA    ARG1
2D44 D403             (         OPS2.ASM):00105                 ANDB    ARG1+1
2D46 109304           (         OPS2.ASM):00106                 CMPD    ARG2
2D49 27F2             (         OPS2.ASM):00107                 BEQ     POK
2D4B 20CF             (         OPS2.ASM):00108                 BRA     PBAD
                      (         OPS2.ASM):00109         
                      (         OPS2.ASM):00110         ; ---
                      (         OPS2.ASM):00111         ; BOR
                      (         OPS2.ASM):00112         ; ---
                      (         OPS2.ASM):00113         
                      (         OPS2.ASM):00114         ; Return bitwise OR of arg1 and arg2 [VALUE]
                      (         OPS2.ASM):00115         
2D4D                  (         OPS2.ASM):00116         ZBOR:
2D4D DC02             (         OPS2.ASM):00117                 LDD     ARG1
2D4F 9A04             (         OPS2.ASM):00118                 ORA     ARG2
2D51 DA05             (         OPS2.ASM):00119                 ORB     ARG2+1
2D53                  (         OPS2.ASM):00120         ZB0:
2D53 DD3F             (         OPS2.ASM):00121                 STD     TEMP
2D55 7E29F7           (         OPS2.ASM):00122                 JMP     PUTVAL
                      (         OPS2.ASM):00123         
                      (         OPS2.ASM):00124         ; ----
                      (         OPS2.ASM):00125         ; BAND
                      (         OPS2.ASM):00126         ; ----
                      (         OPS2.ASM):00127         
                      (         OPS2.ASM):00128         ; Return bitwise AND of arg1 and arg2 [VALUE]
                      (         OPS2.ASM):00129         
2D58                  (         OPS2.ASM):00130         ZBAND:
2D58 DC02             (         OPS2.ASM):00131                 LDD     ARG1
2D5A 9404             (         OPS2.ASM):00132                 ANDA    ARG2
2D5C D405             (         OPS2.ASM):00133                 ANDB    ARG2+1
2D5E 20F3             (         OPS2.ASM):00134                 BRA     ZB0
                      (         OPS2.ASM):00135         
                      (         OPS2.ASM):00136         ; -----
                      (         OPS2.ASM):00137         ; FSET?
                      (         OPS2.ASM):00138         ; -----
                      (         OPS2.ASM):00139         
                      (         OPS2.ASM):00140         ; Is flag "arg2" set in object "arg1?" [PRED]
                      (         OPS2.ASM):00141         
2D60                  (         OPS2.ASM):00142         ZFSETP:
2D60 BD34A7           (         OPS2.ASM):00143                 JSR     FLAGSU                            ; GET BIT
2D63 DC3D             (         OPS2.ASM):00144                 LDD     VAL
2D65 9443             (         OPS2.ASM):00145                 ANDA    MASK
2D67 973D             (         OPS2.ASM):00146                 STA     VAL
2D69 D444             (         OPS2.ASM):00147                 ANDB    MASK+1
2D6B DA3D             (         OPS2.ASM):00148                 ORB     VAL
2D6D 26CE             (         OPS2.ASM):00149                 BNE     POK                               ; BIT IS ON
2D6F 20AB             (         OPS2.ASM):00150                 BRA     PBAD
                      (         OPS2.ASM):00151         
                      (         OPS2.ASM):00152         ; ----
                      (         OPS2.ASM):00153         ; FSET
                      (         OPS2.ASM):00154         ; ----
                      (         OPS2.ASM):00155         
                      (         OPS2.ASM):00156         ; Set flag "arg2" in object "arg1"
                      (         OPS2.ASM):00157         
2D71                  (         OPS2.ASM):00158         ZFSET:
2D71 BD34A7           (         OPS2.ASM):00159                 JSR     FLAGSU
2D74 9E3F             (         OPS2.ASM):00160                 LDX     TEMP                              ; ADDRESS OF FLAGS
2D76 DC3D             (         OPS2.ASM):00161                 LDD     VAL                               ; GRAB FLAGS
2D78 9A43             (         OPS2.ASM):00162                 ORA     MASK                              ; SUPERIMPOSE THE
2D7A DA44             (         OPS2.ASM):00163                 ORB     MASK+1                            ; MASKING PATTERN
2D7C ED84             (         OPS2.ASM):00164                 STD     ,X                                ; AND REPLACE FLAG
2D7E 39               (         OPS2.ASM):00165                 RTS
                      (         OPS2.ASM):00166         
                      (         OPS2.ASM):00167         ; ------
                      (         OPS2.ASM):00168         ; FCLEAR
                      (         OPS2.ASM):00169         ; ------
                      (         OPS2.ASM):00170         
                      (         OPS2.ASM):00171         ; Clear flag "arg2" in object "arg1"
                      (         OPS2.ASM):00172         
2D7F                  (         OPS2.ASM):00173         ZFCLR:
2D7F BD34A7           (         OPS2.ASM):00174                 JSR     FLAGSU
2D82 9E3F             (         OPS2.ASM):00175                 LDX     TEMP                              ; ADDRESS OF OBJECT
2D84 DC43             (         OPS2.ASM):00176                 LDD     MASK                              ; GRAB THE MASK
2D86 43               (         OPS2.ASM):00177                 COMA                                      ; COMPLEMENT IT
2D87 53               (         OPS2.ASM):00178                 COMB
2D88 943D             (         OPS2.ASM):00179                 ANDA    VAL                               ; SUPERIMPOSE FLAGS
2D8A D43E             (         OPS2.ASM):00180                 ANDB    VAL+1                             ; TO MASK OUT TARGET
2D8C ED84             (         OPS2.ASM):00181                 STD     ,X                                ; REPLACE THE FLAGS
2D8E 39               (         OPS2.ASM):00182                 RTS
                      (         OPS2.ASM):00183         
                      (         OPS2.ASM):00184         ; ---
                      (         OPS2.ASM):00185         ; SET
                      (         OPS2.ASM):00186         ; ---
                      (         OPS2.ASM):00187         
                      (         OPS2.ASM):00188         ; Set variable "arg1" equal to value "arg2"
                      (         OPS2.ASM):00189         
2D8F                  (         OPS2.ASM):00190         ZSET:
2D8F DC04             (         OPS2.ASM):00191                 LDD     ARG2
2D91 DD3F             (         OPS2.ASM):00192                 STD     TEMP
2D93 9603             (         OPS2.ASM):00193                 LDA     ARG1+1
2D95 7E29E5           (         OPS2.ASM):00194                 JMP     VARPUT
                      (         OPS2.ASM):00195         
                      (         OPS2.ASM):00196         ; ----
                      (         OPS2.ASM):00197         ; MOVE
                      (         OPS2.ASM):00198         ; ----
                      (         OPS2.ASM):00199         
                      (         OPS2.ASM):00200         ; Put object "arg1" into object "arg2"
                      (         OPS2.ASM):00201         
2D98                  (         OPS2.ASM):00202         ZMOVE:
2D98 BD2C3D           (         OPS2.ASM):00203                 JSR     ZREMOV                            ; REMOVE OBJECT FIRST
2D9B 9603             (         OPS2.ASM):00204                 LDA     ARG1+1
2D9D BD34D5           (         OPS2.ASM):00205                 JSR     OBJLOC                            ; GET ADDRESS OF OBJECT
2DA0 9E3F             (         OPS2.ASM):00206                 LDX     TEMP                              ; PUT ADDRESS IN X
2DA2 3410             (         OPS2.ASM):00207                 PSHS    X                                 ; SAVE IT HERE TOO
2DA4 9605             (         OPS2.ASM):00208                 LDA     ARG2+1
2DA6 A704             (         OPS2.ASM):00209                 STA     4,X
                      (         OPS2.ASM):00210         
2DA8 BD34D5           (         OPS2.ASM):00211                 JSR     OBJLOC
2DAB 9E3F             (         OPS2.ASM):00212                 LDX     TEMP
2DAD A606             (         OPS2.ASM):00213                 LDA     6,X
2DAF 973D             (         OPS2.ASM):00214                 STA     VAL                               ; HOLD HERE FOR A MOMENT
2DB1 9603             (         OPS2.ASM):00215                 LDA     ARG1+1
2DB3 A706             (         OPS2.ASM):00216                 STA     6,X
2DB5 3510             (         OPS2.ASM):00217                 PULS    X                                 ; RESTORE OLD [TEMP]
2DB7 963D             (         OPS2.ASM):00218                 LDA     VAL
2DB9 2702             (         OPS2.ASM):00219                 BEQ     ZMVEX
2DBB A705             (         OPS2.ASM):00220                 STA     5,X
2DBD                  (         OPS2.ASM):00221         ZMVEX:
2DBD 39               (         OPS2.ASM):00222                 RTS
                      (         OPS2.ASM):00223         
                      (         OPS2.ASM):00224         ; ---
                      (         OPS2.ASM):00225         ; GET
                      (         OPS2.ASM):00226         ; ---
                      (         OPS2.ASM):00227         
                      (         OPS2.ASM):00228         ; Return value of item "arg2" in WORD-table at "arg1" [VALUE]
                      (         OPS2.ASM):00229         
2DBE                  (         OPS2.ASM):00230         ZGET:
2DBE 0805             (         OPS2.ASM):00231                 ASL     ARG2+1
2DC0 0904             (         OPS2.ASM):00232                 ROL     ARG2                              ; WORD-ALIGN ARG2
2DC2 DC04             (         OPS2.ASM):00233                 LDD     ARG2
2DC4 D302             (         OPS2.ASM):00234                 ADDD    ARG1                              ; ADD OFFSET TO TABLE ADDRESS
2DC6 DD3F             (         OPS2.ASM):00235                 STD     TEMP
2DC8 BD3273           (         OPS2.ASM):00236                 JSR     SETWRD
2DCB BD3186           (         OPS2.ASM):00237                 JSR     GETWRD
2DCE 7E29F7           (         OPS2.ASM):00238                 JMP     PUTVAL
                      (         OPS2.ASM):00239         
                      (         OPS2.ASM):00240         ; ----
                      (         OPS2.ASM):00241         ; GETB
                      (         OPS2.ASM):00242         ; ----
                      (         OPS2.ASM):00243         
                      (         OPS2.ASM):00244         ; Return value of item "arg2" in BYTE-table at "arg1" [VALUE]
                      (         OPS2.ASM):00245         
2DD1                  (         OPS2.ASM):00246         ZGETB:
2DD1 DC02             (         OPS2.ASM):00247                 LDD     ARG1
2DD3 D304             (         OPS2.ASM):00248                 ADDD    ARG2
2DD5 DD3F             (         OPS2.ASM):00249                 STD     TEMP
2DD7 BD3273           (         OPS2.ASM):00250                 JSR     SETWRD
2DDA BD31C0           (         OPS2.ASM):00251                 JSR     GETBYT
2DDD 9740             (         OPS2.ASM):00252                 STA     TEMP+1
2DDF 0F3F             (         OPS2.ASM):00253                 CLR     TEMP
2DE1 7E29F7           (         OPS2.ASM):00254                 JMP     PUTVAL
                      (         OPS2.ASM):00255         
                      (         OPS2.ASM):00256         ; ----
                      (         OPS2.ASM):00257         ; GETP
                      (         OPS2.ASM):00258         ; ----
                      (         OPS2.ASM):00259         
                      (         OPS2.ASM):00260         ; Return prop "arg2" of object "arg1"; if specified prop
                      (         OPS2.ASM):00261         ; doesn't exist, return prop'th element of default object [VALUE]
                      (         OPS2.ASM):00262         
2DE4                  (         OPS2.ASM):00263         ZGETP:
2DE4 BD3472           (         OPS2.ASM):00264                 JSR     PROPB                             ; GET POINTER TO PROPS
2DE7                  (         OPS2.ASM):00265         GETP1:
2DE7 BD3487           (         OPS2.ASM):00266                 JSR     PROPN
2DEA 9105             (         OPS2.ASM):00267                 CMPA    ARG2+1
2DEC 2718             (         OPS2.ASM):00268                 BEQ     GETP2
2DEE 2505             (         OPS2.ASM):00269                 BLO     GETP3
                      (         OPS2.ASM):00270         
2DF0 BD349C           (         OPS2.ASM):00271                 JSR     PROPNX
2DF3 20F2             (         OPS2.ASM):00272                 BRA     GETP1                             ; TRY AGAIN WITH NEXT PROP
                      (         OPS2.ASM):00273         
2DF5                  (         OPS2.ASM):00274         GETP3:
2DF5 FC3F0A           (         OPS2.ASM):00275                 LDD     ZCODE+ZOBJEC                      ; Z-ADDR OF OBJECT TABLE
2DF8 C33F00           (         OPS2.ASM):00276                 ADDD    #ZCODE                            ; FORM THE ABSOLUTE ADDRESS
2DFB 1F01             (         OPS2.ASM):00277                 TFR     D,X                               ; USE AS AN INDEX
2DFD D605             (         OPS2.ASM):00278                 LDB     ARG2+1                            ; GET PROPERTY #
2DFF 5A               (         OPS2.ASM):00279                 DECB
2E00 58               (         OPS2.ASM):00280                 ASLB
2E01 3A               (         OPS2.ASM):00281                 ABX                                       ; ADD TO TABLE ADDRESS
2E02 EC84             (         OPS2.ASM):00282                 LDD     ,X                                ; FETCH THE PROPERTY
2E04 201D             (         OPS2.ASM):00283                 BRA     ETPEX                             ; AND PASS IT ON
                      (         OPS2.ASM):00284         
2E06                  (         OPS2.ASM):00285         GETP2:
2E06 BD348F           (         OPS2.ASM):00286                 JSR     PROPL
2E09 5C               (         OPS2.ASM):00287                 INCB                                      ; SOMETHING SHOULD BE IN B!
2E0A 4D               (         OPS2.ASM):00288                 TSTA                                      ; AND IN A!
2E0B 2710             (         OPS2.ASM):00289                 BEQ     GETP2A
2E0D 8101             (         OPS2.ASM):00290                 CMPA    #1
2E0F 2705             (         OPS2.ASM):00291                 BEQ     GETP2B
                      (         OPS2.ASM):00292         
                      (         OPS2.ASM):00293         ; *** ERROR #7: PROPERTY LENGTH ***
                      (         OPS2.ASM):00294         
2E11 8607             (         OPS2.ASM):00295                 LDA     #7
2E13 BD367A           (         OPS2.ASM):00296                 JSR     ZERROR
                      (         OPS2.ASM):00297         
2E16                  (         OPS2.ASM):00298         GETP2B:
2E16 9E3F             (         OPS2.ASM):00299                 LDX     TEMP
2E18 3A               (         OPS2.ASM):00300                 ABX
2E19 EC84             (         OPS2.ASM):00301                 LDD     ,X
2E1B 2006             (         OPS2.ASM):00302                 BRA     ETPEX
                      (         OPS2.ASM):00303         
2E1D                  (         OPS2.ASM):00304         GETP2A:
2E1D 9E3F             (         OPS2.ASM):00305                 LDX     TEMP
2E1F 3A               (         OPS2.ASM):00306                 ABX
2E20 E684             (         OPS2.ASM):00307                 LDB     ,X
2E22 4F               (         OPS2.ASM):00308                 CLRA
2E23                  (         OPS2.ASM):00309         ETPEX:
2E23 DD3F             (         OPS2.ASM):00310                 STD     TEMP
2E25 7E29F7           (         OPS2.ASM):00311                 JMP     PUTVAL
                      (         OPS2.ASM):00312         
                      (         OPS2.ASM):00313         ; -----
                      (         OPS2.ASM):00314         ; GETPT
                      (         OPS2.ASM):00315         ; -----
                      (         OPS2.ASM):00316         
                      (         OPS2.ASM):00317         ; Return a POINTER to prop table "arg2" in object "arg1" [VALUE]
                      (         OPS2.ASM):00318         
2E28                  (         OPS2.ASM):00319         ZGETPT:
2E28 BD3472           (         OPS2.ASM):00320                 JSR     PROPB
2E2B                  (         OPS2.ASM):00321         GETPT1:
2E2B BD3487           (         OPS2.ASM):00322                 JSR     PROPN
2E2E 9105             (         OPS2.ASM):00323                 CMPA    ARG2+1
2E30 2709             (         OPS2.ASM):00324                 BEQ     GETPT2
2E32 1025FBBC         (         OPS2.ASM):00325                 LBLO    RET0
2E36 BD349C           (         OPS2.ASM):00326                 JSR     PROPNX                            ; TRY NEXT ENTRY
2E39 20F0             (         OPS2.ASM):00327                 BRA     GETPT1
                      (         OPS2.ASM):00328         
2E3B                  (         OPS2.ASM):00329         GETPT2:
2E3B 0C40             (         OPS2.ASM):00330                 INC     TEMP+1
2E3D 2602             (         OPS2.ASM):00331                 BNE     GPT
2E3F 0C3F             (         OPS2.ASM):00332                 INC     TEMP
2E41                  (         OPS2.ASM):00333         GPT:
2E41 4F               (         OPS2.ASM):00334                 CLRA                                      ; ADD OFFSET IN [B]
2E42 D33F             (         OPS2.ASM):00335                 ADDD    TEMP
2E44 833F00           (         OPS2.ASM):00336                 SUBD    #ZCODE                            ; CHANGE TO RELATIVE POINTER
2E47 DD3F             (         OPS2.ASM):00337                 STD     TEMP
2E49 7E29F7           (         OPS2.ASM):00338                 JMP     PUTVAL
                      (         OPS2.ASM):00339         
                      (         OPS2.ASM):00340         ; -----
                      (         OPS2.ASM):00341         ; NEXTP
                      (         OPS2.ASM):00342         ; -----
                      (         OPS2.ASM):00343         
                      (         OPS2.ASM):00344         ; Return prop index number of the prop following prop "arg2"
                      (         OPS2.ASM):00345         ; in object "arg1"; return zero if last property; return
                      (         OPS2.ASM):00346         ; 1st prop # if arg2=0; error if no prop "arg2" in "arg1" [VALUE]
                      (         OPS2.ASM):00347         
2E4C                  (         OPS2.ASM):00348         ZNEXTP:
2E4C BD3472           (         OPS2.ASM):00349                 JSR     PROPB
2E4F 9605             (         OPS2.ASM):00350                 LDA     ARG2+1
2E51 2713             (         OPS2.ASM):00351                 BEQ     NXTP2
                      (         OPS2.ASM):00352         
2E53                  (         OPS2.ASM):00353         NXTP1:
2E53 BD3487           (         OPS2.ASM):00354                 JSR     PROPN
2E56 9105             (         OPS2.ASM):00355                 CMPA    ARG2+1
2E58 2709             (         OPS2.ASM):00356                 BEQ     NXTP3
2E5A 1025FB94         (         OPS2.ASM):00357                 LBCS    RET0
2E5E BD349C           (         OPS2.ASM):00358                 JSR     PROPNX                            ; TRY NEXT ENTRY
2E61 20F0             (         OPS2.ASM):00359                 BRA     NXTP1
                      (         OPS2.ASM):00360         
2E63                  (         OPS2.ASM):00361         NXTP3:
2E63 BD349C           (         OPS2.ASM):00362                 JSR     PROPNX
                      (         OPS2.ASM):00363         
2E66                  (         OPS2.ASM):00364         NXTP2:
2E66 BD3487           (         OPS2.ASM):00365                 JSR     PROPN
2E69 7E29F3           (         OPS2.ASM):00366                 JMP     PUTBYT
                      (         OPS2.ASM):00367         
                      (         OPS2.ASM):00368         ; ---
                      (         OPS2.ASM):00369         ; ADD
                      (         OPS2.ASM):00370         ; ---
                      (         OPS2.ASM):00371         
                      (         OPS2.ASM):00372         ; Return (arg1+arg2) [VALUE]
                      (         OPS2.ASM):00373         
2E6C                  (         OPS2.ASM):00374         ZADD:
2E6C DC02             (         OPS2.ASM):00375                 LDD     ARG1
2E6E D304             (         OPS2.ASM):00376                 ADDD    ARG2
2E70                  (         OPS2.ASM):00377         MATH:
2E70 DD3F             (         OPS2.ASM):00378                 STD     TEMP
2E72 7E29F7           (         OPS2.ASM):00379                 JMP     PUTVAL
                      (         OPS2.ASM):00380         
                      (         OPS2.ASM):00381         ; ---
                      (         OPS2.ASM):00382         ; SUB
                      (         OPS2.ASM):00383         ; ---
                      (         OPS2.ASM):00384         
                      (         OPS2.ASM):00385         ; Return (arg1-arg2) [VALUE]
                      (         OPS2.ASM):00386         
2E75                  (         OPS2.ASM):00387         ZSUB:
2E75 DC02             (         OPS2.ASM):00388                 LDD     ARG1
2E77 9304             (         OPS2.ASM):00389                 SUBD    ARG2
2E79 20F5             (         OPS2.ASM):00390                 BRA     MATH
                      (         OPS2.ASM):00391         
                      (         OPS2.ASM):00392         ; ---
                      (         OPS2.ASM):00393         ; MUL
                      (         OPS2.ASM):00394         ; ---
                      (         OPS2.ASM):00395         
                      (         OPS2.ASM):00396         ; Return (arg1*arg2) [VALUE]
                      (         OPS2.ASM):00397         
2E7B                  (         OPS2.ASM):00398         ZMUL:
2E7B 8E0011           (         OPS2.ASM):00399                 LDX     #17                               ; INIT LOOP INDEX
2E7E 4F               (         OPS2.ASM):00400                 CLRA                                      ; CLEAR THE
2E7F 5F               (         OPS2.ASM):00401                 CLRB                                      ; CARRY
2E80 DD47             (         OPS2.ASM):00402                 STD     MTEMP                             ; AND TEMP REGISTER
                      (         OPS2.ASM):00403         
2E82                  (         OPS2.ASM):00404         ZMLOOP:
2E82 0647             (         OPS2.ASM):00405                 ROR     MTEMP
2E84 0648             (         OPS2.ASM):00406                 ROR     MTEMP+1
2E86 0604             (         OPS2.ASM):00407                 ROR     ARG2                              ; SHIFT A BIT
2E88 0605             (         OPS2.ASM):00408                 ROR     ARG2+1                            ; INTO POSITION
2E8A 2406             (         OPS2.ASM):00409                 BCC     ZMNEXT                            ; NO ADDITION IF BIT CLEAR
                      (         OPS2.ASM):00410         
2E8C DC02             (         OPS2.ASM):00411                 LDD     ARG1
2E8E D347             (         OPS2.ASM):00412                 ADDD    MTEMP
2E90 DD47             (         OPS2.ASM):00413                 STD     MTEMP
                      (         OPS2.ASM):00414         
2E92                  (         OPS2.ASM):00415         ZMNEXT:
2E92 301F             (         OPS2.ASM):00416                 LEAX    -1,X                              ; ALL BITS EXAMINED?
2E94 26EC             (         OPS2.ASM):00417                 BNE     ZMLOOP                            ; NO, KEEP SHIFTING
                      (         OPS2.ASM):00418         
2E96 DC04             (         OPS2.ASM):00419                 LDD     ARG2                              ; ELSE GRAB PRODUCT
2E98 20D6             (         OPS2.ASM):00420                 BRA     MATH                              ; AND RETURN
                      (         OPS2.ASM):00421         
                      (         OPS2.ASM):00422         ; ---------
                      (         OPS2.ASM):00423         ; DIV & MOD
                      (         OPS2.ASM):00424         ; ---------
                      (         OPS2.ASM):00425         
                      (         OPS2.ASM):00426         ; DIV: Return quotient of int(arg1/arg2) [VALUE]
                      (         OPS2.ASM):00427         ; MOD: Return remainder of int(arg1/arg2) [VALUE]
                      (         OPS2.ASM):00428         
2E9A                  (         OPS2.ASM):00429         ZDIV:
2E9A 8D09             (         OPS2.ASM):00430                 BSR     DVINIT
2E9C 7E29F7           (         OPS2.ASM):00431                 JMP     PUTVAL                            ; AND SHIP OUT [TEMP]
                      (         OPS2.ASM):00432         
2E9F                  (         OPS2.ASM):00433         ZMOD:
2E9F 8D04             (         OPS2.ASM):00434                 BSR     DVINIT
2EA1 DC3D             (         OPS2.ASM):00435                 LDD     VAL                               ; RETURN THE
2EA3 20CB             (         OPS2.ASM):00436                 BRA     MATH                              ; REMAINDER IN [VAL]
                      (         OPS2.ASM):00437         
                      (         OPS2.ASM):00438         ; -----------
                      (         OPS2.ASM):00439         ; DIVIDE INIT
                      (         OPS2.ASM):00440         ; -----------
                      (         OPS2.ASM):00441         
2EA5                  (         OPS2.ASM):00442         DVINIT:
2EA5 DC02             (         OPS2.ASM):00443                 LDD     ARG1
2EA7 DD3F             (         OPS2.ASM):00444                 STD     TEMP
2EA9 DC04             (         OPS2.ASM):00445                 LDD     ARG2
2EAB DD3D             (         OPS2.ASM):00446                 STD     VAL
                      (         OPS2.ASM):00447         
                      (         OPS2.ASM):00448         ; FALL THROUGH ...
                      (         OPS2.ASM):00449         
                      (         OPS2.ASM):00450         ; ---------------
                      (         OPS2.ASM):00451         ; SIGNED DIVISION
                      (         OPS2.ASM):00452         ; ---------------
                      (         OPS2.ASM):00453         
                      (         OPS2.ASM):00454         ; ENTRY: DIVIDEND IN [TEMP], DIVISOR IN [VAL]
                      (         OPS2.ASM):00455         ; EXIT: QUOTIENT IN [TEMP], REMAINDER IN [VAL]
                      (         OPS2.ASM):00456         
2EAD                  (         OPS2.ASM):00457         DIVIDE:
2EAD 963F             (         OPS2.ASM):00458                 LDA     TEMP                              ; SIGN OF REMAINDER
2EAF 9746             (         OPS2.ASM):00459                 STA     SREM                              ; IS ALWAYS SIGN OF DIVIDEND
2EB1 983D             (         OPS2.ASM):00460                 EORA    VAL                               ; SIGN OF QUOTIENT IS POSITIVE
2EB3 9745             (         OPS2.ASM):00461                 STA     SQUOT                             ; IF SIGNS OF TERMS ARE THE SAME
                      (         OPS2.ASM):00462         
2EB5 0D3F             (         OPS2.ASM):00463                 TST     TEMP                              ; IF DIVIDEND IS NEGATIVE,
2EB7 2A02             (         OPS2.ASM):00464                 BPL     TABS                              ; CALC ABSOLUTE VALUE
2EB9 8D19             (         OPS2.ASM):00465                 BSR     ABTEMP
                      (         OPS2.ASM):00466         
2EBB                  (         OPS2.ASM):00467         TABS:
2EBB 0D3D             (         OPS2.ASM):00468                 TST     VAL                               ; IF DIVISOR IS NEGATIVE,
2EBD 2A02             (         OPS2.ASM):00469                 BPL     DOUDIV                            ; DO THE SAME
2EBF 8D0C             (         OPS2.ASM):00470                 BSR     ABSVAL
                      (         OPS2.ASM):00471         
2EC1                  (         OPS2.ASM):00472         DOUDIV:
2EC1 8D18             (         OPS2.ASM):00473                 BSR     UDIV                              ; UNSIGNED DIVIDE
                      (         OPS2.ASM):00474         
2EC3 0D45             (         OPS2.ASM):00475                 TST     SQUOT
2EC5 2A02             (         OPS2.ASM):00476                 BPL     RFLIP
2EC7 8D0B             (         OPS2.ASM):00477                 BSR     ABTEMP
                      (         OPS2.ASM):00478         
2EC9                  (         OPS2.ASM):00479         RFLIP:
2EC9 0D46             (         OPS2.ASM):00480                 TST     SREM
2ECB 2A06             (         OPS2.ASM):00481                 BPL     DIVEX
                      (         OPS2.ASM):00482         
                      (         OPS2.ASM):00483         ; FALL THROUGH ...
                      (         OPS2.ASM):00484         
                      (         OPS2.ASM):00485         ; -------------
                      (         OPS2.ASM):00486         ; CALC ABS(VAL)
                      (         OPS2.ASM):00487         ; -------------
                      (         OPS2.ASM):00488         
2ECD                  (         OPS2.ASM):00489         ABSVAL:
2ECD 4F               (         OPS2.ASM):00490                 CLRA
2ECE 5F               (         OPS2.ASM):00491                 CLRB
2ECF 933D             (         OPS2.ASM):00492                 SUBD    VAL
2ED1 DD3D             (         OPS2.ASM):00493                 STD     VAL
                      (         OPS2.ASM):00494         
2ED3                  (         OPS2.ASM):00495         DIVEX:
2ED3 39               (         OPS2.ASM):00496                 RTS
                      (         OPS2.ASM):00497         
                      (         OPS2.ASM):00498         ; --------------
                      (         OPS2.ASM):00499         ; CALC ABS(TEMP)
                      (         OPS2.ASM):00500         ; --------------
                      (         OPS2.ASM):00501         
2ED4                  (         OPS2.ASM):00502         ABTEMP:
2ED4 4F               (         OPS2.ASM):00503                 CLRA
2ED5 5F               (         OPS2.ASM):00504                 CLRB
2ED6 933F             (         OPS2.ASM):00505                 SUBD    TEMP
2ED8 DD3F             (         OPS2.ASM):00506                 STD     TEMP
2EDA 39               (         OPS2.ASM):00507                 RTS
                      (         OPS2.ASM):00508         
                      (         OPS2.ASM):00509         ; -----------------
                      (         OPS2.ASM):00510         ; UNSIGNED DIVISION
                      (         OPS2.ASM):00511         ; -----------------
                      (         OPS2.ASM):00512         
                      (         OPS2.ASM):00513         ; ENTRY: DIVIDEND IN [TEMP], DIVISOR IN [VAL]
                      (         OPS2.ASM):00514         ; EXIT: QUOTIENT IN [TEMP], REMAINDER IN [VAL]
                      (         OPS2.ASM):00515         
2EDB                  (         OPS2.ASM):00516         UDIV:
2EDB DC3D             (         OPS2.ASM):00517                 LDD     VAL
2EDD 2728             (         OPS2.ASM):00518                 BEQ     DIVERR                            ; CAN'T DIVIDE BY ZERO!
                      (         OPS2.ASM):00519         
2EDF 8E0010           (         OPS2.ASM):00520                 LDX     #16                               ; INIT LOOP INDEX
2EE2 4F               (         OPS2.ASM):00521                 CLRA                                      ; CLEAR THE
2EE3 5F               (         OPS2.ASM):00522                 CLRB                                      ; CARRY
2EE4 DD47             (         OPS2.ASM):00523                 STD     MTEMP                             ; AND HI-DIVIDEND REGISTER
                      (         OPS2.ASM):00524         
2EE6                  (         OPS2.ASM):00525         UDLOOP:
2EE6 0940             (         OPS2.ASM):00526                 ROL     TEMP+1
2EE8 093F             (         OPS2.ASM):00527                 ROL     TEMP
2EEA 0948             (         OPS2.ASM):00528                 ROL     MTEMP+1
2EEC 0947             (         OPS2.ASM):00529                 ROL     MTEMP
                      (         OPS2.ASM):00530         
2EEE DC47             (         OPS2.ASM):00531                 LDD     MTEMP                             ; IS DIVIDEND < DIVISOR?
2EF0 933D             (         OPS2.ASM):00532                 SUBD    VAL
2EF2 2505             (         OPS2.ASM):00533                 BCS     UDNEXT                            ; YES, CLEAR THE CARRY AND LOOP
2EF4 DD47             (         OPS2.ASM):00534                 STD     MTEMP                             ; ELSE UPDATE DIVIDEND
2EF6 43               (         OPS2.ASM):00535                 COMA                                      ; SET THE CARRY
2EF7 2001             (         OPS2.ASM):00536                 BRA     DECX                              ; AND LOOP
                      (         OPS2.ASM):00537         
2EF9                  (         OPS2.ASM):00538         UDNEXT:
2EF9 4F               (         OPS2.ASM):00539                 CLRA                                      ; CLEAR CARRY
                      (         OPS2.ASM):00540         
2EFA                  (         OPS2.ASM):00541         DECX:
2EFA 301F             (         OPS2.ASM):00542                 LEAX    -1,X
2EFC 26E8             (         OPS2.ASM):00543                 BNE     UDLOOP
                      (         OPS2.ASM):00544         
2EFE 0940             (         OPS2.ASM):00545                 ROL     TEMP+1                            ; SHIFT LAST CARRY INTO PLACE
2F00 093F             (         OPS2.ASM):00546                 ROL     TEMP
2F02 DC47             (         OPS2.ASM):00547                 LDD     MTEMP                             ; MOVE REMAINDER INTO
2F04 DD3D             (         OPS2.ASM):00548                 STD     VAL                               ; ITS RIGHTFUL PLACE
2F06 39               (         OPS2.ASM):00549                 RTS
                      (         OPS2.ASM):00550         
                      (         OPS2.ASM):00551         ; *** ERROR #8: DIVISION ***
                      (         OPS2.ASM):00552         
2F07                  (         OPS2.ASM):00553         DIVERR:
2F07 8608             (         OPS2.ASM):00554                 LDA     #8
2F09 BD367A           (         OPS2.ASM):00555                 JSR     ZERROR
                      (     cubixzip.asm):00060                 INCLUDE OPSX.ASM
                      (         OPSX.ASM):00001         ;       PAGE
                      (         OPSX.ASM):00002         ;       SBTTL "--- X-OPS ---"
                      (         OPSX.ASM):00003         
                      (         OPSX.ASM):00004         ; ------
                      (         OPSX.ASM):00005         ; EQUAL?
                      (         OPSX.ASM):00006         ; ------
                      (         OPSX.ASM):00007         
2F0C                  (         OPSX.ASM):00008         ZEQUAL:
2F0C 0A01             (         OPSX.ASM):00009                 DEC     ARGCNT
2F0E 2605             (         OPSX.ASM):00010                 BNE     DOEQ
                      (         OPSX.ASM):00011         
                      (         OPSX.ASM):00012         ; *** ERROR #9: NOT ENOUGH "EQUAL?" ARGS ***
                      (         OPSX.ASM):00013         
2F10 8609             (         OPSX.ASM):00014                 LDA     #9
2F12 BD367A           (         OPSX.ASM):00015                 JSR     ZERROR
                      (         OPSX.ASM):00016         
2F15                  (         OPSX.ASM):00017         DOEQ:
2F15 DC02             (         OPSX.ASM):00018                 LDD     ARG1
2F17 109304           (         OPSX.ASM):00019                 CMPD    ARG2
2F1A 2715             (         OPSX.ASM):00020                 BEQ     EQOK
2F1C 0A01             (         OPSX.ASM):00021                 DEC     ARGCNT
2F1E 270E             (         OPSX.ASM):00022                 BEQ     EQBAD
                      (         OPSX.ASM):00023         
2F20 109306           (         OPSX.ASM):00024                 CMPD    ARG3
2F23 270C             (         OPSX.ASM):00025                 BEQ     EQOK
2F25 0A01             (         OPSX.ASM):00026                 DEC     ARGCNT
2F27 2705             (         OPSX.ASM):00027                 BEQ     EQBAD
                      (         OPSX.ASM):00028         
2F29 109308           (         OPSX.ASM):00029                 CMPD    ARG4
2F2C 2703             (         OPSX.ASM):00030                 BEQ     EQOK
2F2E                  (         OPSX.ASM):00031         EQBAD:
2F2E 7E2A3F           (         OPSX.ASM):00032                 JMP     PREDF
                      (         OPSX.ASM):00033         
2F31                  (         OPSX.ASM):00034         EQOK:
2F31 7E2A4D           (         OPSX.ASM):00035                 JMP     PREDS
                      (         OPSX.ASM):00036         
                      (         OPSX.ASM):00037         ; ----
                      (         OPSX.ASM):00038         ; CALL
                      (         OPSX.ASM):00039         ; ----
                      (         OPSX.ASM):00040         
                      (         OPSX.ASM):00041         ; Branch to function pointed to by [arg1 * 2], passing
                      (         OPSX.ASM):00042         ; the optional parameters "arg2" thru "arg4" [VALUE]
                      (         OPSX.ASM):00043         
2F34                  (         OPSX.ASM):00044         ZCALL:
2F34 DC02             (         OPSX.ASM):00045                 LDD     ARG1                              ; DID FUNCTION = 0?
2F36 2603             (         OPSX.ASM):00046                 BNE     DOCALL                            ; NO, CONTINUE
2F38 7E2E70           (         OPSX.ASM):00047                 JMP     MATH                              ; ELSE RETURN A ZERO
                      (         OPSX.ASM):00048         
2F3B                  (         OPSX.ASM):00049         DOCALL:
2F3B DC27             (         OPSX.ASM):00050                 LDD     OZSTAK                            ; ZSP FROM PREVIOUS ZCALL
2F3D BD2A21           (         OPSX.ASM):00051                 JSR     PSHDZ
2F40 D615             (         OPSX.ASM):00052                 LDB     ZPCL                              ; LOW 8 BITS OF ZPC
2F42 BD2A21           (         OPSX.ASM):00053                 JSR     PSHDZ                             ; SAVE TO Z-STACK
2F45 DC13             (         OPSX.ASM):00054                 LDD     ZPCH                              ; PUSH H & M PC
2F47 BD2A21           (         OPSX.ASM):00055                 JSR     PSHDZ
                      (         OPSX.ASM):00056         
                      (         OPSX.ASM):00057         ; MULTIPLY ARG1 BY 2; FORM 17-BIT ADDR
                      (         OPSX.ASM):00058         
2F4A 4F               (         OPSX.ASM):00059                 CLRA
2F4B 0803             (         OPSX.ASM):00060                 ASL     ARG1+1                            ; BOTTOM 8 BITS
2F4D 0902             (         OPSX.ASM):00061                 ROL     ARG1                              ; MIDDLE 8
2F4F 49               (         OPSX.ASM):00062                 ROLA                                      ; TOP BIT
2F50 9713             (         OPSX.ASM):00063                 STA     ZPCH
2F52 DC02             (         OPSX.ASM):00064                 LDD     ARG1
2F54 DD14             (         OPSX.ASM):00065                 STD     ZPCM
2F56 0F18             (         OPSX.ASM):00066                 CLR     ZPCFLG                            ; [ZPC] HAS CHANGED ...
                      (         OPSX.ASM):00067         
2F58 BD318F           (         OPSX.ASM):00068                 JSR     NEXTPC                            ; FETCH # NEW LOCALS
2F5B 9741             (         OPSX.ASM):00069                 STA     TEMP2                             ; SAVE IT HERE FOR INDEXING
2F5D 9742             (         OPSX.ASM):00070                 STA     TEMP2+1                           ; AND HERE FOR REFERENCE
2F5F 271E             (         OPSX.ASM):00071                 BEQ     ZCALL2                            ; NO LOCALS IN THIS FUNCTION
                      (         OPSX.ASM):00072         
                      (         OPSX.ASM):00073         ; SAVE OLD LOCALS, REPLACE WITH NEW
                      (         OPSX.ASM):00074         
2F61 8E2700           (         OPSX.ASM):00075                 LDX     #LOCALS                           ; INIT POINTER
2F64                  (         OPSX.ASM):00076         ZCALL1:
2F64 EC84             (         OPSX.ASM):00077                 LDD     ,X                                ; GRAB AN OLD LOCAL
2F66 3410             (         OPSX.ASM):00078                 PSHS    X                                 ; SAVE THE POINTER
2F68 BD2A21           (         OPSX.ASM):00079                 JSR     PSHDZ                             ; PUSH OLD LOCAL TO Z-STACK
2F6B BD318F           (         OPSX.ASM):00080                 JSR     NEXTPC                            ; GET MSB OF NEW LOCAL
2F6E 3402             (         OPSX.ASM):00081                 PSHS    A                                 ; SAVE HERE
2F70 BD318F           (         OPSX.ASM):00082                 JSR     NEXTPC                            ; NOW GET LSB
2F73 1F89             (         OPSX.ASM):00083                 TFR     A,B                               ; POSITION IT PROPERLY
2F75 3502             (         OPSX.ASM):00084                 PULS    A                                 ; RETRIEVE MSB
2F77 3510             (         OPSX.ASM):00085                 PULS    X                                 ; THIS IS WHERE IT GOES
2F79 ED81             (         OPSX.ASM):00086                 STD     ,X++                              ; STORE NEW LOCAL, UPDATE POINTER
2F7B 0A41             (         OPSX.ASM):00087                 DEC     TEMP2                             ; ANY MORE OLD LOCALS?
2F7D 26E5             (         OPSX.ASM):00088                 BNE     ZCALL1                            ; KEEP LOOPING TILL DONE
                      (         OPSX.ASM):00089         
2F7F                  (         OPSX.ASM):00090         ZCALL2:
2F7F 0A01             (         OPSX.ASM):00091                 DEC     ARGCNT                            ; EXTRA ARGUMENTS IN THIS CALL?
2F81 2717             (         OPSX.ASM):00092                 BEQ     ZCALL4                            ; NO ARGS TO PASS
                      (         OPSX.ASM):00093         
                      (         OPSX.ASM):00094         ; MOVE UP TO 3 ARGS TO LOCAL STORAGE
                      (         OPSX.ASM):00095         
2F83                  (         OPSX.ASM):00096         ZCALL3:
2F83 DC04             (         OPSX.ASM):00097                 LDD     ARG2
2F85 FD2700           (         OPSX.ASM):00098                 STD     LOCALS
2F88 0A01             (         OPSX.ASM):00099                 DEC     ARGCNT
2F8A 270E             (         OPSX.ASM):00100                 BEQ     ZCALL4
2F8C DC06             (         OPSX.ASM):00101                 LDD     ARG3
2F8E FD2702           (         OPSX.ASM):00102                 STD     LOCALS+2
2F91 0A01             (         OPSX.ASM):00103                 DEC     ARGCNT
2F93 2705             (         OPSX.ASM):00104                 BEQ     ZCALL4
2F95 DC08             (         OPSX.ASM):00105                 LDD     ARG4
2F97 FD2704           (         OPSX.ASM):00106                 STD     LOCALS+4
                      (         OPSX.ASM):00107         
2F9A                  (         OPSX.ASM):00108         ZCALL4:
2F9A D642             (         OPSX.ASM):00109                 LDB     TEMP2+1                           ; REMEMBER # LOCALS SAVED
2F9C 1F98             (         OPSX.ASM):00110                 TFR     B,A                               ; COPY INTO [A]
2F9E 43               (         OPSX.ASM):00111                 COMA                                      ; COMPLEMENT FOR ERROR CHECK (BM 11/24/84)
2F9F BD2A21           (         OPSX.ASM):00112                 JSR     PSHDZ                             ; AND RETURN
2FA2 DF27             (         OPSX.ASM):00113                 STU     OZSTAK                            ; "THE WAY WE WERE ..."
2FA4 39               (         OPSX.ASM):00114                 RTS
                      (         OPSX.ASM):00115         
                      (         OPSX.ASM):00116         ; ---
                      (         OPSX.ASM):00117         ; PUT
                      (         OPSX.ASM):00118         ; ---
                      (         OPSX.ASM):00119         
                      (         OPSX.ASM):00120         ; Set item "arg2" in WORD-table "arg1" equal to "arg3"
                      (         OPSX.ASM):00121         
2FA5                  (         OPSX.ASM):00122         ZPUT:
2FA5 0805             (         OPSX.ASM):00123                 ASL     ARG2+1                            ; WORD-ALIGN
2FA7 0904             (         OPSX.ASM):00124                 ROL     ARG2                              ; ARG2
2FA9 DC04             (         OPSX.ASM):00125                 LDD     ARG2
2FAB D302             (         OPSX.ASM):00126                 ADDD    ARG1                              ; ADD Z-ADDR OF TABLE
2FAD C33F00           (         OPSX.ASM):00127                 ADDD    #ZCODE                            ; FORM ABSOLUTE ADDRESS
2FB0 1F01             (         OPSX.ASM):00128                 TFR     D,X                               ; FOR USE AS AN INDEX
2FB2 DC06             (         OPSX.ASM):00129                 LDD     ARG3
2FB4 ED84             (         OPSX.ASM):00130                 STD     ,X
2FB6 39               (         OPSX.ASM):00131                 RTS
                      (         OPSX.ASM):00132         
                      (         OPSX.ASM):00133         ; ----
                      (         OPSX.ASM):00134         ; PUTB
                      (         OPSX.ASM):00135         ; ----
                      (         OPSX.ASM):00136         
                      (         OPSX.ASM):00137         ; Set item "arg2" in BYTE-table "arg1" equal to "arg3"
                      (         OPSX.ASM):00138         
2FB7                  (         OPSX.ASM):00139         ZPUTB:
2FB7 DC04             (         OPSX.ASM):00140                 LDD     ARG2
2FB9 D302             (         OPSX.ASM):00141                 ADDD    ARG1
2FBB C33F00           (         OPSX.ASM):00142                 ADDD    #ZCODE
2FBE 1F01             (         OPSX.ASM):00143                 TFR     D,X
2FC0 9607             (         OPSX.ASM):00144                 LDA     ARG3+1
2FC2 A784             (         OPSX.ASM):00145                 STA     ,X
2FC4 39               (         OPSX.ASM):00146                 RTS
                      (         OPSX.ASM):00147         
                      (         OPSX.ASM):00148         ; ----
                      (         OPSX.ASM):00149         ; PUTP
                      (         OPSX.ASM):00150         ; ----
                      (         OPSX.ASM):00151         
                      (         OPSX.ASM):00152         ; Set property "arg2" in object "arg1" equal to "arg3"
                      (         OPSX.ASM):00153         
2FC5                  (         OPSX.ASM):00154         ZPUTP:
2FC5 BD3472           (         OPSX.ASM):00155                 JSR     PROPB
2FC8                  (         OPSX.ASM):00156         PUTP1:
2FC8 BD3487           (         OPSX.ASM):00157                 JSR     PROPN
2FCB 9105             (         OPSX.ASM):00158                 CMPA    ARG2+1
2FCD 270C             (         OPSX.ASM):00159                 BEQ     PUTP2
2FCF 2405             (         OPSX.ASM):00160                 BHS     PTP
                      (         OPSX.ASM):00161         
                      (         OPSX.ASM):00162         ; *** ERROR #10: BAD PROPERTY NUMBER ***
                      (         OPSX.ASM):00163         
2FD1 860A             (         OPSX.ASM):00164                 LDA     #10
2FD3 BD367A           (         OPSX.ASM):00165                 JSR     ZERROR                            ; ERROR #7 (BAD PROPERTY #)
                      (         OPSX.ASM):00166         
2FD6                  (         OPSX.ASM):00167         PTP:
2FD6 BD349C           (         OPSX.ASM):00168                 JSR     PROPNX                            ; NEXT ITEM
2FD9 20ED             (         OPSX.ASM):00169                 BRA     PUTP1
                      (         OPSX.ASM):00170         
2FDB                  (         OPSX.ASM):00171         PUTP2:
2FDB BD348F           (         OPSX.ASM):00172                 JSR     PROPL
2FDE 5C               (         OPSX.ASM):00173                 INCB
2FDF 4D               (         OPSX.ASM):00174                 TSTA
2FE0 2711             (         OPSX.ASM):00175                 BEQ     PUTP2A
2FE2 8101             (         OPSX.ASM):00176                 CMPA    #1
2FE4 2705             (         OPSX.ASM):00177                 BEQ     PTP1
                      (         OPSX.ASM):00178         
                      (         OPSX.ASM):00179         ; *** ERROR #11: PROPERTY LENGTH ***
                      (         OPSX.ASM):00180         
2FE6 860B             (         OPSX.ASM):00181                 LDA     #11
2FE8 BD367A           (         OPSX.ASM):00182                 JSR     ZERROR                            ; ERROR #8 (PROP TOO LONG)
                      (         OPSX.ASM):00183         
2FEB                  (         OPSX.ASM):00184         PTP1:
2FEB 9E3F             (         OPSX.ASM):00185                 LDX     TEMP
2FED 3A               (         OPSX.ASM):00186                 ABX
2FEE DC06             (         OPSX.ASM):00187                 LDD     ARG3
2FF0 ED84             (         OPSX.ASM):00188                 STD     ,X
2FF2 39               (         OPSX.ASM):00189                 RTS
                      (         OPSX.ASM):00190         
2FF3                  (         OPSX.ASM):00191         PUTP2A:
2FF3 9607             (         OPSX.ASM):00192                 LDA     ARG3+1
2FF5 9E3F             (         OPSX.ASM):00193                 LDX     TEMP
2FF7 3A               (         OPSX.ASM):00194                 ABX
2FF8 A784             (         OPSX.ASM):00195                 STA     ,X
2FFA 39               (         OPSX.ASM):00196                 RTS
                      (         OPSX.ASM):00197         
                      (         OPSX.ASM):00198         ; ------
                      (         OPSX.ASM):00199         ; PRINTC
                      (         OPSX.ASM):00200         ; ------
                      (         OPSX.ASM):00201         
                      (         OPSX.ASM):00202         ; Print the character with ASCII value "arg1"
                      (         OPSX.ASM):00203         
2FFB                  (         OPSX.ASM):00204         ZPRC:
2FFB 9603             (         OPSX.ASM):00205                 LDA     ARG1+1
2FFD 7E36C9           (         OPSX.ASM):00206                 JMP     COUT
                      (         OPSX.ASM):00207         
                      (         OPSX.ASM):00208         ; ------
                      (         OPSX.ASM):00209         ; PRINTN
                      (         OPSX.ASM):00210         ; ------
                      (         OPSX.ASM):00211         
                      (         OPSX.ASM):00212         ; Print "arg1" as a signed integer
                      (         OPSX.ASM):00213         
3000                  (         OPSX.ASM):00214         ZPRN:
3000 DC02             (         OPSX.ASM):00215                 LDD     ARG1
3002 DD3F             (         OPSX.ASM):00216                 STD     TEMP
                      (         OPSX.ASM):00217         
                      (         OPSX.ASM):00218         ; PRINT THE SIGNED VALUE IN [TEMP]
                      (         OPSX.ASM):00219         
3004                  (         OPSX.ASM):00220         NUMBER:
3004 DC3F             (         OPSX.ASM):00221                 LDD     TEMP
3006 2A08             (         OPSX.ASM):00222                 BPL     DIGCNT                            ; IF NUMBER IS NEGATIVE,
3008 862D             (         OPSX.ASM):00223                 LDA     #$2D                              ; START WITH A MINUS SIGN
300A BD36C9           (         OPSX.ASM):00224                 JSR     COUT
300D BD2ED4           (         OPSX.ASM):00225                 JSR     ABTEMP                            ; GET ABS(TEMP)
                      (         OPSX.ASM):00226         
                      (         OPSX.ASM):00227         ; COUNT # OF DECIMAL DIGITS
                      (         OPSX.ASM):00228         
3010                  (         OPSX.ASM):00229         DIGCNT:
3010 0F43             (         OPSX.ASM):00230                 CLR     MASK                              ; RESET INDEX
3012                  (         OPSX.ASM):00231         DGC:
3012 DC3F             (         OPSX.ASM):00232                 LDD     TEMP                              ; CHECK QUOTIENT
3014 2710             (         OPSX.ASM):00233                 BEQ     PRNTN3                            ; SKIP IF ZERO
3016 CC000A           (         OPSX.ASM):00234                 LDD     #10
3019 DD3D             (         OPSX.ASM):00235                 STD     VAL                               ; ELSE DIVIDE BY 10
301B BD2EDB           (         OPSX.ASM):00236                 JSR     UDIV                              ; UNSIGNED DIVIDE
301E 963E             (         OPSX.ASM):00237                 LDA     VAL+1                             ; GET LSB OF REMAINDER
3020 3402             (         OPSX.ASM):00238                 PSHS    A                                 ; SAVE ON STACK
3022 0C43             (         OPSX.ASM):00239                 INC     MASK                              ; INCREMENT CHAR COUNT
3024 20EC             (         OPSX.ASM):00240                 BRA     DGC                               ; LOOP TILL ARG1=0
                      (         OPSX.ASM):00241         
3026                  (         OPSX.ASM):00242         PRNTN3:
3026 9643             (         OPSX.ASM):00243                 LDA     MASK
3028 270C             (         OPSX.ASM):00244                 BEQ     PZERO                             ; PRINT AT LEAST A "0"
302A                  (         OPSX.ASM):00245         PRNTN4:
302A 3502             (         OPSX.ASM):00246                 PULS    A                                 ; GET A CHAR
302C 8B30             (         OPSX.ASM):00247                 ADDA    #$30                              ; CONVERT TO ASCII NUMBER
302E BD36C9           (         OPSX.ASM):00248                 JSR     COUT
3031 0A43             (         OPSX.ASM):00249                 DEC     MASK                              ; OUT OF CHARS?
3033 26F5             (         OPSX.ASM):00250                 BNE     PRNTN4                            ; KEEP PRINTING TILL
3035 39               (         OPSX.ASM):00251                 RTS                                       ; DONE
                      (         OPSX.ASM):00252         
                      (         OPSX.ASM):00253         ; PRINT A ZERO
                      (         OPSX.ASM):00254         
3036                  (         OPSX.ASM):00255         PZERO:
3036 8630             (         OPSX.ASM):00256                 LDA     #$30                              ; ASCII "0"
3038 7E36C9           (         OPSX.ASM):00257                 JMP     COUT
                      (         OPSX.ASM):00258         
                      (         OPSX.ASM):00259         ; ------
                      (         OPSX.ASM):00260         ; RANDOM
                      (         OPSX.ASM):00261         ; ------
                      (         OPSX.ASM):00262         
                      (         OPSX.ASM):00263         ; Return a random value between zero and "arg1" [VALUE]
                      (         OPSX.ASM):00264         
303B                  (         OPSX.ASM):00265         ZRAND:
303B DC02             (         OPSX.ASM):00266                 LDD     ARG1                              ; USE [ARG1]
303D DD3D             (         OPSX.ASM):00267                 STD     VAL                               ; AS THE DIVISOR
                      (         OPSX.ASM):00268         
303F DC58             (         OPSX.ASM):00269                 LDD     RAND1                             ; GET A RANDOM #
3041 C3AA55           (         OPSX.ASM):00270                 ADDD    #$AA55                            ; DO WEIRD THINGS
3044 9759             (         OPSX.ASM):00271                 STA     RAND2                             ; SAVE AS
3046 D758             (         OPSX.ASM):00272                 STB     RAND1                             ; NEW SEED
3048 847F             (         OPSX.ASM):00273                 ANDA    #%01111111                        ; MAKE POSITIVE
304A DD3F             (         OPSX.ASM):00274                 STD     TEMP                              ; MAKE IT THE DIVIDEND
                      (         OPSX.ASM):00275         
304C BD2EAD           (         OPSX.ASM):00276                 JSR     DIVIDE                            ; UNSIGNED DIVIDE!
304F DC3D             (         OPSX.ASM):00277                 LDD     VAL                               ; GET REMAINDER
3051 C30001           (         OPSX.ASM):00278                 ADDD    #1                                ; AT LEAST 1
3054 7E2E70           (         OPSX.ASM):00279                 JMP     MATH
                      (         OPSX.ASM):00280         
                      (         OPSX.ASM):00281         ; ----
                      (         OPSX.ASM):00282         ; PUSH
                      (         OPSX.ASM):00283         ; ----
                      (         OPSX.ASM):00284         
                      (         OPSX.ASM):00285         ; Push "arg1" onto the Z-stack
                      (         OPSX.ASM):00286         
3057                  (         OPSX.ASM):00287         ZPUSH:
3057 DC02             (         OPSX.ASM):00288                 LDD     ARG1
3059 7E2A21           (         OPSX.ASM):00289                 JMP     PSHDZ
                      (         OPSX.ASM):00290         
                      (         OPSX.ASM):00291         ; ---
                      (         OPSX.ASM):00292         ; POP
                      (         OPSX.ASM):00293         ; ---
                      (         OPSX.ASM):00294         
                      (         OPSX.ASM):00295         ; Pop a word off Z-stack and store in variable "arg1"
                      (         OPSX.ASM):00296         
305C                  (         OPSX.ASM):00297         ZPOP:
305C BD2A2A           (         OPSX.ASM):00298                 JSR     POPSTK
305F 9603             (         OPSX.ASM):00299                 LDA     ARG1+1                            ; GET VARIABLE ID
3061 7E29E5           (         OPSX.ASM):00300                 JMP     VARPUT
                      (         OPSX.ASM):00301         
                      (         OPSX.ASM):00302         ; -----
                      (         OPSX.ASM):00303         ; SPLIT
                      (         OPSX.ASM):00304         ; -----
                      (         OPSX.ASM):00305         
     2B60             (         OPSX.ASM):00306         ZSPLIT          EQU ZNOOP
                      (         OPSX.ASM):00307         
                      (         OPSX.ASM):00308         ; ------
                      (         OPSX.ASM):00309         ; SCREEN
                      (         OPSX.ASM):00310         ; ------
                      (         OPSX.ASM):00311         
     2B60             (         OPSX.ASM):00312         ZSCRN           EQU ZNOOP
                      (     cubixzip.asm):00061                 INCLUDE READ.ASM
                      (         READ.ASM):00001         ;       PAGE
                      (         READ.ASM):00002         ;       SBTTL "--- READ HANDLER ---"
                      (         READ.ASM):00003         
3064                  (         READ.ASM):00004         ZREAD:
3064 BD375A           (         READ.ASM):00005                 JSR     ZUSL                              ; UPDATE STATUS LINE FIRST
                      (         READ.ASM):00006         
3067 DC02             (         READ.ASM):00007                 LDD     ARG1                              ; CALC ABSOLUTE ADDRESS
3069 C33F00           (         READ.ASM):00008                 ADDD    #ZCODE                            ; OF READ BUFFERS
306C DD02             (         READ.ASM):00009                 STD     ARG1
306E DC04             (         READ.ASM):00010                 LDD     ARG2
3070 C33F00           (         READ.ASM):00011                 ADDD    #ZCODE
3073 DD04             (         READ.ASM):00012                 STD     ARG2
                      (         READ.ASM):00013         
3075 BD352B           (         READ.ASM):00014                 JSR     INPUT                             ; READ LINE; RETURN LENGTH IN A
3078 9743             (         READ.ASM):00015                 STA     MASK                              ; # CHARS IN LINE
307A 0F44             (         READ.ASM):00016                 CLR     MASK+1                            ; # CHARS IN CURRENT WORD
                      (         READ.ASM):00017         
307C 9E04             (         READ.ASM):00018                 LDX     ARG2                              ; SET # OF WORDS READ
307E 6F01             (         READ.ASM):00019                 CLR     1,X                               ; TO ZERO
                      (         READ.ASM):00020         
3080 8601             (         READ.ASM):00021                 LDA     #1                                ; = 1
3082 973B             (         READ.ASM):00022                 STA     STABP                             ; INIT SOURCE TABLE POINTER
3084 4C               (         READ.ASM):00023                 INCA                                      ; = 2
3085 973A             (         READ.ASM):00024                 STA     RTABP                             ; AND RESULT TABLE POINTER
                      (         READ.ASM):00025         
3087                  (         READ.ASM):00026         READL:
3087 9E04             (         READ.ASM):00027                 LDX     ARG2
3089 A680             (         READ.ASM):00028                 LDA     ,X+                               ; FETCH MAXIMUM # OF WORDS
308B A184             (         READ.ASM):00029                 CMPA    ,X                                ; COMPARE TO # WORDS READ
308D 2405             (         READ.ASM):00030                 BHS     RL1                               ; STILL ROOM
                      (         READ.ASM):00031         
                      (         READ.ASM):00032         ; *** ERROR #13 -- PARSER OVERFLOW ***
                      (         READ.ASM):00033         
308F 860D             (         READ.ASM):00034                 LDA     #13
3091 BD367A           (         READ.ASM):00035                 JSR     ZERROR
                      (         READ.ASM):00036         
3094                  (         READ.ASM):00037         RL1:
3094 DC43             (         READ.ASM):00038                 LDD     MASK                              ; OUT OF CHARS & WORDS?
3096 2601             (         READ.ASM):00039                 BNE     RL2                               ; NOT YET
3098                  (         READ.ASM):00040         RDEX:
3098 39               (         READ.ASM):00041                 RTS                                       ; ELSE SCRAM
                      (         READ.ASM):00042         
3099                  (         READ.ASM):00043         RL2:
3099 9644             (         READ.ASM):00044                 LDA     MASK+1                            ; GET CHAR COUNT
309B 8106             (         READ.ASM):00045                 CMPA    #6                                ; 6 CHARS DONE?
309D 2503             (         READ.ASM):00046                 BLO     RL3                               ; NOT YET
309F BD311F           (         READ.ASM):00047                 JSR     FLUSHW                            ; ELSE FLUSH WORD
                      (         READ.ASM):00048         
30A2                  (         READ.ASM):00049         RL3:
30A2 9644             (         READ.ASM):00050                 LDA     MASK+1                            ; FIRST CHAR IN WORD?
30A4 2624             (         READ.ASM):00051                 BNE     READL2                            ; NOPE
                      (         READ.ASM):00052         
                      (         READ.ASM):00053         ; CLEAR OUT WORD BUFFER [ZSTBUI]
                      (         READ.ASM):00054         
30A6 5F               (         READ.ASM):00055                 CLRB                                      ; [A] IS ALREADY ZERO
30A7 DD2E             (         READ.ASM):00056                 STD     ZSTBUI
30A9 DD30             (         READ.ASM):00057                 STD     ZSTBUI+2
30AB DD32             (         READ.ASM):00058                 STD     ZSTBUI+4
                      (         READ.ASM):00059         
30AD D63A             (         READ.ASM):00060                 LDB     RTABP
30AF 9E04             (         READ.ASM):00061                 LDX     ARG2
30B1 3A               (         READ.ASM):00062                 ABX
30B2 D63B             (         READ.ASM):00063                 LDB     STABP
30B4 E703             (         READ.ASM):00064                 STB     3,X                               ; STORE POSITION
                      (         READ.ASM):00065         
30B6 9E02             (         READ.ASM):00066                 LDX     ARG1
30B8 A685             (         READ.ASM):00067                 LDA     B,X                               ; GRAB A CHAR FROM SOURCE BUFFER
30BA BD3141           (         READ.ASM):00068                 JSR     SIBRKP                            ; IS IT A SIB?
30BD 2529             (         READ.ASM):00069                 BCS     RSIBRK                            ; YES IF CARRY IS SET
30BF BD313A           (         READ.ASM):00070                 JSR     NBRKP                             ; IS IT A "NORMAL" BREAK CHAR?
30C2 2406             (         READ.ASM):00071                 BCC     READL2                            ; NO, KEEP SCANNING
30C4 0C3B             (         READ.ASM):00072                 INC     STABP                             ; ELSE FLUSH STRANDED BREAK
30C6 0A43             (         READ.ASM):00073                 DEC     MASK                              ; UPDATE # OF CHARS IN LINE
30C8 20BD             (         READ.ASM):00074                 BRA     READL                             ; AND LOOP BACK
                      (         READ.ASM):00075         
30CA                  (         READ.ASM):00076         READL2:
30CA 9643             (         READ.ASM):00077                 LDA     MASK                              ; OUT OF CHARS?
30CC 2722             (         READ.ASM):00078                 BEQ     READL3                            ; SURE ENOUGH
30CE D63B             (         READ.ASM):00079                 LDB     STABP
30D0 9E02             (         READ.ASM):00080                 LDX     ARG1
30D2 A685             (         READ.ASM):00081                 LDA     B,X                               ; ELSE GRAB NEXT CHAR
30D4 BD3136           (         READ.ASM):00082                 JSR     RBRKP                             ; IS IT A BREAK?
30D7 2517             (         READ.ASM):00083                 BCS     READL3                            ; YES IF CARRY SET
30D9 D644             (         READ.ASM):00084                 LDB     MASK+1                            ; ELSE POINT TO
30DB 8E002E           (         READ.ASM):00085                 LDX     #ZSTBUI                           ; WORD BUFFER
30DE A785             (         READ.ASM):00086                 STA     B,X                               ; STORE CHAR IN BUFFER
30E0 0A43             (         READ.ASM):00087                 DEC     MASK                              ; ONE LESS CHAR IN LINE
30E2 0C44             (         READ.ASM):00088                 INC     MASK+1                            ; ONE MORE IN RESULT
30E4 0C3B             (         READ.ASM):00089                 INC     STABP                             ; POINT TO NEXT CHAR
30E6 209F             (         READ.ASM):00090                 BRA     READL                             ; AND LOOP BACK
                      (         READ.ASM):00091         
30E8                  (         READ.ASM):00092         RSIBRK:
30E8 972E             (         READ.ASM):00093                 STA     ZSTBUI                            ; STORE THE SIB
30EA 0A43             (         READ.ASM):00094                 DEC     MASK                              ; UPDATE LINE-CHAR COUNT
30EC 0C44             (         READ.ASM):00095                 INC     MASK+1                            ; WORD-CHAR COUNT
30EE 0C3B             (         READ.ASM):00096                 INC     STABP                             ; AND # CHARS IN WORD
                      (         READ.ASM):00097         
30F0                  (         READ.ASM):00098         READL3:
30F0 9644             (         READ.ASM):00099                 LDA     MASK+1                            ; ANY CHARS IN WORD?
30F2 2793             (         READ.ASM):00100                 BEQ     READL                             ; APPARENTLY NOT
                      (         READ.ASM):00101         
30F4 D63A             (         READ.ASM):00102                 LDB     RTABP                             ; POINT TO
30F6 9E04             (         READ.ASM):00103                 LDX     ARG2                              ; IN THIS ENTRY
30F8 3A               (         READ.ASM):00104                 ABX
30F9 9644             (         READ.ASM):00105                 LDA     MASK+1                            ; FETCH ACTUAL WORD LENGTH
30FB A702             (         READ.ASM):00106                 STA     2,X                               ; AND STORE IN 3RD BYTE
                      (         READ.ASM):00107         
30FD 9643             (         READ.ASM):00108                 LDA     MASK
30FF 3402             (         READ.ASM):00109                 PSHS    A                                 ; SAVE THIS
3101 BD337D           (         READ.ASM):00110                 JSR     CONZST                            ; CONVERT TO Z-STRING
3104 BD3151           (         READ.ASM):00111                 JSR     FINDW                             ; LOOK UP IN VOCABULARY
3107 3502             (         READ.ASM):00112                 PULS    A
3109 9743             (         READ.ASM):00113                 STA     MASK                              ; RESTORE
                      (         READ.ASM):00114         
310B 9E04             (         READ.ASM):00115                 LDX     ARG2
310D 6C01             (         READ.ASM):00116                 INC     1,X                               ; UPDATE # WORDS READ
310F D63A             (         READ.ASM):00117                 LDB     RTABP                             ; POINT [X] TO 1ST BYTE
3111 3A               (         READ.ASM):00118                 ABX                                       ; IN CURRENT ENTRY
3112 CB04             (         READ.ASM):00119                 ADDB    #4
3114 D73A             (         READ.ASM):00120                 STB     RTABP                             ; POINT TO NEXT ENTRY
3116 DC3D             (         READ.ASM):00121                 LDD     VAL                               ; STORE [VAL] IN ENTRY
3118 ED84             (         READ.ASM):00122                 STD     ,X
311A 0F44             (         READ.ASM):00123                 CLR     MASK+1                            ; RESET WORD-CHAR COUNT
311C 7E3087           (         READ.ASM):00124                 JMP     READL                             ; AND CONTINUE
                      (         READ.ASM):00125         
                      (         READ.ASM):00126         ; ----------
                      (         READ.ASM):00127         ; FLUSH WORD
                      (         READ.ASM):00128         ; ----------
                      (         READ.ASM):00129         
311F                  (         READ.ASM):00130         FLUSHW:
311F 9643             (         READ.ASM):00131                 LDA     MASK
3121 2712             (         READ.ASM):00132                 BEQ     FLEX
3123 D63B             (         READ.ASM):00133                 LDB     STABP
3125 9E02             (         READ.ASM):00134                 LDX     ARG1
3127 A685             (         READ.ASM):00135                 LDA     B,X
3129 8D0B             (         READ.ASM):00136                 BSR     RBRKP                             ; WORD BREAK?
312B 2508             (         READ.ASM):00137                 BCS     FLEX                              ; EXIT IF SO
312D 0A43             (         READ.ASM):00138                 DEC     MASK
312F 0C44             (         READ.ASM):00139                 INC     MASK+1
3131 0C3B             (         READ.ASM):00140                 INC     STABP
3133 20EA             (         READ.ASM):00141                 BRA     FLUSHW                            ; KEEP LOOPING
3135                  (         READ.ASM):00142         FLEX:
3135 39               (         READ.ASM):00143                 RTS
                      (         READ.ASM):00144         
                      (         READ.ASM):00145         ; ---------------
                      (         READ.ASM):00146         ; BREAK CHAR SCAN
                      (         READ.ASM):00147         ; ---------------
                      (         READ.ASM):00148         
3136                  (         READ.ASM):00149         RBRKP:
3136 8D09             (         READ.ASM):00150                 BSR     SIBRKP                            ; FIRST CHECK FOR SIBS
3138 2515             (         READ.ASM):00151                 BCS     FBRK                              ; EXIT IF MATCHED
                      (         READ.ASM):00152         
                      (         READ.ASM):00153         ; FALL THROUGH TO ...
                      (         READ.ASM):00154         
                      (         READ.ASM):00155         ; ----------------------
                      (         READ.ASM):00156         ; NORMAL BREAK CHAR SCAN
                      (         READ.ASM):00157         ; ----------------------
                      (         READ.ASM):00158         
313A                  (         READ.ASM):00159         NBRKP:
313A 8E3180           (         READ.ASM):00160                 LDX     #BRKTBL                           ; BASE OF BREAK CHAR TABLE
313D C605             (         READ.ASM):00161                 LDB     #NBRKS-1                          ; NUMBER OF NORMAL BREAK CHARS
313F 2005             (         READ.ASM):00162                 BRA     NBR1
                      (         READ.ASM):00163         
                      (         READ.ASM):00164         ; ------------------------------
                      (         READ.ASM):00165         ; SELF-INSERTING BREAK CHAR SCAN
                      (         READ.ASM):00166         ; ------------------------------
                      (         READ.ASM):00167         
3141                  (         READ.ASM):00168         SIBRKP:
3141 9E23             (         READ.ASM):00169                 LDX     VOCAB                             ; BASE ADDRESS OF VOCAB TABLE
3143 E680             (         READ.ASM):00170                 LDB     ,X+                               ; GET # SIB CHARS
3145 5A               (         READ.ASM):00171                 DECB                                      ; ZERO-ALIGN COUNT
                      (         READ.ASM):00172         
3146                  (         READ.ASM):00173         NBR1:
3146 A185             (         READ.ASM):00174                 CMPA    B,X
3148 2705             (         READ.ASM):00175                 BEQ     FBRK                              ; MATCHED!
314A 5A               (         READ.ASM):00176                 DECB
314B 2AF9             (         READ.ASM):00177                 BPL     NBR1                              ; KEEP LOOPING
314D 5F               (         READ.ASM):00178                 CLRB                                      ; NO MATCH, CLEAR CARRY
314E 39               (         READ.ASM):00179                 RTS
314F                  (         READ.ASM):00180         FBRK:
314F 53               (         READ.ASM):00181                 COMB                                      ; SET CARRY TO FLAG MATCH
3150 39               (         READ.ASM):00182                 RTS
                      (         READ.ASM):00183         
                      (         READ.ASM):00184         ; -----------------
                      (         READ.ASM):00185         ; VOCABULARY SEARCH
                      (         READ.ASM):00186         ; -----------------
                      (         READ.ASM):00187         
3151                  (         READ.ASM):00188         FINDW:
3151 9E23             (         READ.ASM):00189                 LDX     VOCAB                             ; BASE ADDR OF VOCAB TABLE
3153 E680             (         READ.ASM):00190                 LDB     ,X+                               ; GET # SIB BYTES
3155 3A               (         READ.ASM):00191                 ABX                                       ; AND SKIP OVER THEM
                      (         READ.ASM):00192         
3156 A680             (         READ.ASM):00193                 LDA     ,X+                               ; # BYTES PER TABLE ENTRY
3158 9744             (         READ.ASM):00194                 STA     MASK+1                            ; SAVE IT HERE
                      (         READ.ASM):00195         
315A EC81             (         READ.ASM):00196                 LDD     ,X++                              ; # OF ENTRIES IN TABLE
315C DD3D             (         READ.ASM):00197                 STD     VAL                               ; SAVE THAT TOO
                      (         READ.ASM):00198         
315E                  (         READ.ASM):00199         FWL1:
315E EC84             (         READ.ASM):00200                 LDD     ,X                                ; CHECK FIRST Z-WORD
3160 109334           (         READ.ASM):00201                 CMPD    ZSTBUO
3163 2607             (         READ.ASM):00202                 BNE     WNEXT                             ; NO GOOD
3165 EC02             (         READ.ASM):00203                 LDD     2,X                               ; ELSE CHECK 2ND HALF
3167 109336           (         READ.ASM):00204                 CMPD    ZSTBUO+2
316A 270D             (         READ.ASM):00205                 BEQ     FWSUCC                            ; MATCHED!
                      (         READ.ASM):00206         
316C                  (         READ.ASM):00207         WNEXT:
316C D644             (         READ.ASM):00208                 LDB     MASK+1                            ; MOVE [X] UP TO
316E 3A               (         READ.ASM):00209                 ABX                                       ; NEXT TABLE ENTRY
316F DC3D             (         READ.ASM):00210                 LDD     VAL
3171 830001           (         READ.ASM):00211                 SUBD    #1
3174 DD3D             (         READ.ASM):00212                 STD     VAL                               ; OUT OF ENTRIES YET?
3176 26E6             (         READ.ASM):00213                 BNE     FWL1                              ; NO, KEEP LOOKING
3178 39               (         READ.ASM):00214                 RTS                                       ; ELSE RETURN WITH [VAL]=0
                      (         READ.ASM):00215         
3179                  (         READ.ASM):00216         FWSUCC:
3179 3089C100         (         READ.ASM):00217                 LEAX    -ZCODE,X                          ; CONVERT TO Z-ADDRESS
317D 9F3D             (         READ.ASM):00218                 STX     VAL                               ; LEAVE RESULT IN [VAL]
317F 39               (         READ.ASM):00219                 RTS
                      (         READ.ASM):00220         
                      (         READ.ASM):00221         ; ------------------
                      (         READ.ASM):00222         ; NORMAL BREAK CHARS
                      (         READ.ASM):00223         ; ------------------
                      (         READ.ASM):00224         
3180                  (         READ.ASM):00225         BRKTBL:
3180 213F2C2E         (         READ.ASM):00226                 FCC     "!?,."
3184 0D               (         READ.ASM):00227                 FCB     EOL
3185 20               (         READ.ASM):00228                 FCB     SPACE
                      (         READ.ASM):00229         
     0006             (         READ.ASM):00230         NBRKS           EQU 6                             ; # NORMAL BREAK CHARS
                      (     cubixzip.asm):00062         
                      (     cubixzip.asm):00063         ;TITLE "ZIP/6809-B INFOCOM, INC. --- OPCODE SUPPORT"
                      (     cubixzip.asm):00064                 INCLUDE PAGING.ASM
                      (       PAGING.ASM):00001         ;       PAGE
                      (       PAGING.ASM):00002         ;       SBTTL   "--- TIMESTAMP PAGING ROUTINES (BM 11/24/84) ---"
                      (       PAGING.ASM):00003         
                      (       PAGING.ASM):00004         ; --------------------
                      (       PAGING.ASM):00005         ; FETCH A VIRTUAL WORD
                      (       PAGING.ASM):00006         ; --------------------
                      (       PAGING.ASM):00007         
3186                  (       PAGING.ASM):00008         GETWRD:
3186 8D38             (       PAGING.ASM):00009                 BSR     GETBYT
3188 973F             (       PAGING.ASM):00010                 STA     TEMP
318A 8D34             (       PAGING.ASM):00011                 BSR     GETBYT
318C 9740             (       PAGING.ASM):00012                 STA     TEMP+1
318E 39               (       PAGING.ASM):00013                 RTS
                      (       PAGING.ASM):00014         
                      (       PAGING.ASM):00015         ; -----------------
                      (       PAGING.ASM):00016         ; FETCH NEXT Z-BYTE
                      (       PAGING.ASM):00017         ; -----------------
                      (       PAGING.ASM):00018         
318F                  (       PAGING.ASM):00019         NEXTPC:
318F 0D18             (       PAGING.ASM):00020                 TST     ZPCFLG                            ; IS [ZPCPNT] VALID?
3191 2619             (       PAGING.ASM):00021                 BNE     NPC2                              ; YES, GET THE BYTE
                      (       PAGING.ASM):00022         
                      (       PAGING.ASM):00023         ; Z-PAGE HAS CHANGED!
                      (       PAGING.ASM):00024         
3193 DC13             (       PAGING.ASM):00025                 LDD     ZPCH                              ; GET TOP 9 BITS OF [ZPC]
3195 4D               (       PAGING.ASM):00026                 TSTA                                      ; IS TOP BIT CLEAR?
3196 2608             (       PAGING.ASM):00027                 BNE     NPC0                              ; NO, PAGE MUST BE SWAPPED
                      (       PAGING.ASM):00028         
3198 D10B             (       PAGING.ASM):00029                 CMPB    ZPURE                             ; IS THIS PAGE PRELOADED?
319A 2404             (       PAGING.ASM):00030                 BHS     NPC0                              ; NO, SWAP IT IN
                      (       PAGING.ASM):00031         
319C CB3F             (       PAGING.ASM):00032                 ADDB    #ZCODEHIGH                        ; ELSE MAKE IT ABSOLUTE
319E 2004             (       PAGING.ASM):00033                 BRA     NPC1                              ; AND CONTINUE
                      (       PAGING.ASM):00034         
31A0                  (       PAGING.ASM):00035         NPC0:
31A0 0F1F             (       PAGING.ASM):00036                 CLR     MPCFLG                            ; INVALIDATE [MPC] FOR SAFETY
31A2 8D4D             (       PAGING.ASM):00037                 BSR     PAGE                              ; RETURN BUFFER IN [B]
                      (       PAGING.ASM):00038         
31A4                  (       PAGING.ASM):00039         NPC1:
31A4 D716             (       PAGING.ASM):00040                 STB     ZPCPNT                            ; SET MSB OF BUFFER ADDRESS
31A6 0F17             (       PAGING.ASM):00041                 CLR     ZPCPNT+1                          ; CLEAR LSB
31A8 86FF             (       PAGING.ASM):00042                 LDA     #TRUE
31AA 9718             (       PAGING.ASM):00043                 STA     ZPCFLG                            ; VALIDATE [ZPC]
                      (       PAGING.ASM):00044         
31AC                  (       PAGING.ASM):00045         NPC2:
31AC D615             (       PAGING.ASM):00046                 LDB     ZPCL                              ; GET BYTE INDEX
31AE 9E16             (       PAGING.ASM):00047                 LDX     ZPCPNT                            ; AND PAGE ADDRESS
31B0 3A               (       PAGING.ASM):00048                 ABX                                       ; USE [ZPCL] AS OFFSET
31B1 A684             (       PAGING.ASM):00049                 LDA     ,X                                ; AND FETCH THE BYTE
                      (       PAGING.ASM):00050         
31B3 0C15             (       PAGING.ASM):00051                 INC     ZPCL                              ; POINT TO NEXT BYTE
31B5 2608             (       PAGING.ASM):00052                 BNE     NPC3                              ; CONTINUE IF NO OVERFLOW
                      (       PAGING.ASM):00053         
31B7 0F18             (       PAGING.ASM):00054                 CLR     ZPCFLG                            ; ELSE INVALIDATE [ZPC]
31B9 0C14             (       PAGING.ASM):00055                 INC     ZPCM                              ; AND POINT
31BB 2602             (       PAGING.ASM):00056                 BNE     NPC3                              ; TO THE
31BD 0C13             (       PAGING.ASM):00057                 INC     ZPCH                              ; NEXT Z-PAGE
                      (       PAGING.ASM):00058         
31BF                  (       PAGING.ASM):00059         NPC3:
31BF 39               (       PAGING.ASM):00060                 RTS                                       ; RETURN BYTE IN [A]
                      (       PAGING.ASM):00061         
                      (       PAGING.ASM):00062         ; ---------------------
                      (       PAGING.ASM):00063         ; GET NEXT VIRTUAL BYTE
                      (       PAGING.ASM):00064         ; ---------------------
                      (       PAGING.ASM):00065         
31C0                  (       PAGING.ASM):00066         GETBYT:
31C0 0D1F             (       PAGING.ASM):00067                 TST     MPCFLG                            ; IS [MPCPNT] VALID?
31C2 2619             (       PAGING.ASM):00068                 BNE     GTBT2                             ; YES, GET THE BYTE
                      (       PAGING.ASM):00069         
                      (       PAGING.ASM):00070         ; Z-PAGE HAS CHANGED!
                      (       PAGING.ASM):00071         
31C4 DC1A             (       PAGING.ASM):00072                 LDD     MPCH                              ; GET TOP 9 BITS OF [MPC]
31C6 4D               (       PAGING.ASM):00073                 TSTA                                      ; IS TOP BIT CLEAR?
31C7 2608             (       PAGING.ASM):00074                 BNE     GTBT0                             ; NO, PAGE MUST BE SWAPPED
                      (       PAGING.ASM):00075         
     31CA             (       PAGING.ASM):00076         PATCH           EQU pth+1                         ; PATCH POINT FOR "VERIFY"
31C9                  (       PAGING.ASM):00077         pth:
31C9 D10B             (       PAGING.ASM):00078                 CMPB    ZPURE                             ; IS THIS PAGE PRELOADED?
31CB 2404             (       PAGING.ASM):00079                 BHS     GTBT0                             ; NO, SWAP IT IN
                      (       PAGING.ASM):00080         
31CD CB3F             (       PAGING.ASM):00081                 ADDB    #ZCODEHIGH                        ; ELSE MAKE IT ABSOLUTE
31CF 2004             (       PAGING.ASM):00082                 BRA     GTBT1                             ; AND CONTINUE
                      (       PAGING.ASM):00083         
31D1                  (       PAGING.ASM):00084         GTBT0:
31D1 0F18             (       PAGING.ASM):00085                 CLR     ZPCFLG                            ; INVALIDATE [ZPC] FOR SAFETY
31D3 8D1C             (       PAGING.ASM):00086                 BSR     PAGE                              ; RETURN BUFFER PAGE IN [B]
                      (       PAGING.ASM):00087         
31D5                  (       PAGING.ASM):00088         GTBT1:
31D5 D71D             (       PAGING.ASM):00089                 STB     MPCPNT                            ; SET MSB OF BUFFER ADDRESS
31D7 0F1E             (       PAGING.ASM):00090                 CLR     MPCPNT+1                          ; CLEAR LSB
31D9 86FF             (       PAGING.ASM):00091                 LDA     #TRUE
31DB 971F             (       PAGING.ASM):00092                 STA     MPCFLG                            ; VALIDATE [MPC]
                      (       PAGING.ASM):00093         
31DD                  (       PAGING.ASM):00094         GTBT2:
31DD D61C             (       PAGING.ASM):00095                 LDB     MPCL                              ; GET BYTE INDEX
31DF 9E1D             (       PAGING.ASM):00096                 LDX     MPCPNT                            ; AND PAGE ADDRESS
31E1 3A               (       PAGING.ASM):00097                 ABX                                       ; USE [MPCL] AS OFFSET
31E2 A684             (       PAGING.ASM):00098                 LDA     ,X                                ; AND FETCH THE BYTE
                      (       PAGING.ASM):00099         
31E4 0C1C             (       PAGING.ASM):00100                 INC     MPCL                              ; POINT TO NEXT BYTE
31E6 2608             (       PAGING.ASM):00101                 BNE     GTBT3                             ; CONTINUE IF NO OVERFLOW
                      (       PAGING.ASM):00102         
31E8 0F1F             (       PAGING.ASM):00103                 CLR     MPCFLG                            ; ELSE INVALIDATE [MPC]
31EA 0C1B             (       PAGING.ASM):00104                 INC     MPCM                              ; AND POINT
31EC 2602             (       PAGING.ASM):00105                 BNE     GTBT3                             ; TO THE
31EE 0C1A             (       PAGING.ASM):00106                 INC     MPCH                              ; NEXT Z-PAGE
                      (       PAGING.ASM):00107         
31F0                  (       PAGING.ASM):00108         GTBT3:
31F0 39               (       PAGING.ASM):00109                 RTS                                       ; RETURN BYTE IN [A]
                      (       PAGING.ASM):00110         
                      (       PAGING.ASM):00111         ; -------------------------
                      (       PAGING.ASM):00112         ; LOCATE A SWAPPABLE Z-PAGE
                      (       PAGING.ASM):00113         ; -------------------------
                      (       PAGING.ASM):00114         
                      (       PAGING.ASM):00115         ; ENTRY: TARGET PAGE IN [D] (TOP 9 BITS)
                      (       PAGING.ASM):00116         ; EXIT: ABSOLUTE BUFFER PAGE IN [B]
                      (       PAGING.ASM):00117         
31F1                  (       PAGING.ASM):00118         PAGE:
31F1 DD4C             (       PAGING.ASM):00119                 STD     DBLOCK                            ; SAVE TARGET PAGE HERE
31F3 0F0D             (       PAGING.ASM):00120                 CLR     ZPAGE                             ; CLEAR INDEX
31F5 8E2500           (       PAGING.ASM):00121                 LDX     #PTABLE                           ; START AT BOTOM OF TABLE
31F8                  (       PAGING.ASM):00122         PG0:
31F8 10A381           (       PAGING.ASM):00123                 CMPD    ,X++                              ; FOUND IT?
31FB 2720             (       PAGING.ASM):00124                 BEQ     PG1                               ; YES!
31FD 0C0D             (       PAGING.ASM):00125                 INC     ZPAGE                             ; ELSE COUNT NEXT PAGE
31FF 9C0F             (       PAGING.ASM):00126                 CMPX    TABTOP                            ; ANY BUFFERS LEFT?
3201 25F5             (       PAGING.ASM):00127                 BLO     PG0                               ; NO, KEEP SEARCHING
                      (       PAGING.ASM):00128         
                      (       PAGING.ASM):00129         ; SWAP IN THE TARGET PAGE
                      (       PAGING.ASM):00130         
3203 8D52             (       PAGING.ASM):00131                 BSR     EARLY                             ; FIND THE EARLIEST PAGE
3205 D612             (       PAGING.ASM):00132                 LDB     SWAP                              ; MOVE ITS INDEX
3207 D70D             (       PAGING.ASM):00133                 STB     ZPAGE                             ; INTO [ZPAGE]
                      (       PAGING.ASM):00134         
3209 DB0E             (       PAGING.ASM):00135                 ADDB    PAGE0                             ; CALC ABSOLUTE PAGE OF BUFFER
320B D74A             (       PAGING.ASM):00136                 STB     DBUFF                             ; TELL DISK WHERE TO PUT DATA
320D 0F4B             (       PAGING.ASM):00137                 CLR     DBUFF+1                           ; CLEAR LSB
                      (       PAGING.ASM):00138         
320F 8E2500           (       PAGING.ASM):00139                 LDX     #PTABLE                           ; GET THE PAGING TABLE ADDRESS
3212 D60D             (       PAGING.ASM):00140                 LDB     ZPAGE                             ; AND THE BUFFER OFFSET
3214 3A               (       PAGING.ASM):00141                 ABX                                       ; ADD THE OFFSET
3215 3A               (       PAGING.ASM):00142                 ABX                                       ; TWICE FOR WORD ALIGNMENT
3216 DC4C             (       PAGING.ASM):00143                 LDD     DBLOCK                            ; RETRIEVE PAGE ID
3218 ED84             (       PAGING.ASM):00144                 STD     ,X                                ; SPLICE IT INTO THE TABLE
                      (       PAGING.ASM):00145         
321A BD3840           (       PAGING.ASM):00146                 JSR     GETDSK                            ; MOVE BLOCK [DBLOCK] TO [DBUFF]
                      (       PAGING.ASM):00147         
                      (       PAGING.ASM):00148         ; UPDATE THE TIMESTAMP
                      (       PAGING.ASM):00149         
321D                  (       PAGING.ASM):00150         PG1:
321D D60D             (       PAGING.ASM):00151                 LDB     ZPAGE                             ; GET BUFFER INDEX
321F 8E2650           (       PAGING.ASM):00152                 LDX     #LRUMAP                           ; CALC ADDRESS OF ENTRY
3222 3A               (       PAGING.ASM):00153                 ABX                                       ; IN TIMESTAMP MAP
3223 A684             (       PAGING.ASM):00154                 LDA     ,X                                ; GET BUFFER'S LAST STAMP
3225 9111             (       PAGING.ASM):00155                 CMPA    STAMP                             ; SAME AS CURRENT STAMP?
3227 2729             (       PAGING.ASM):00156                 BEQ     PG5                               ; EXIT IF SO
                      (       PAGING.ASM):00157         
3229 0C11             (       PAGING.ASM):00158                 INC     STAMP                             ; UPDATE [STAMP]
322B 261B             (       PAGING.ASM):00159                 BNE     PG4                               ; IF STAMP OVERFLOWS ...
                      (       PAGING.ASM):00160         
                      (       PAGING.ASM):00161         ; HANDLE STAMP OVERFLOW
                      (       PAGING.ASM):00162         
322D 8D28             (       PAGING.ASM):00163                 BSR     EARLY                             ; GET EARLIEST STAMP INTO [LRU]
                      (       PAGING.ASM):00164         
322F 8E2650           (       PAGING.ASM):00165                 LDX     #LRUMAP                           ; GET BASE ADDRESS OF STAMPS
3232 5F               (       PAGING.ASM):00166                 CLRB                                      ; INIT STAMP COUNTER
3233                  (       PAGING.ASM):00167         PG2:
3233 A684             (       PAGING.ASM):00168                 LDA     ,X                                ; GET A STAMP
3235 2704             (       PAGING.ASM):00169                 BEQ     PG3                               ; SKIP IF ALREADY ZERO
3237 900A             (       PAGING.ASM):00170                 SUBA    LRU                               ; ELSE SUBTRACT OFF EARLIEST STAMP
3239 A784             (       PAGING.ASM):00171                 STA     ,X                                ; AND REPLACE IT
323B                  (       PAGING.ASM):00172         PG3:
323B 3001             (       PAGING.ASM):00173                 LEAX    +1,X                              ; INCREMENT BASE ADDRESS
323D 5C               (       PAGING.ASM):00174                 INCB                                      ; AND COUNTER
323E D10C             (       PAGING.ASM):00175                 CMPB    PMAX                              ; OUT OF PAGES YET?
3240 25F1             (       PAGING.ASM):00176                 BLO     PG2                               ; LOOP TILL DONE
                      (       PAGING.ASM):00177         
3242 8600             (       PAGING.ASM):00178                 LDA     #0                                ; TURN BACK THE CLOCK
3244 900A             (       PAGING.ASM):00179                 SUBA    LRU                               ; ON [STAMP]
3246 9711             (       PAGING.ASM):00180                 STA     STAMP                             ; TO REFLECT TABLE FUDGING
                      (       PAGING.ASM):00181         
                      (       PAGING.ASM):00182         ; STAMP THE PAGE WITH CURRENT TIME
                      (       PAGING.ASM):00183         
3248                  (       PAGING.ASM):00184         PG4:
3248 8E2650           (       PAGING.ASM):00185                 LDX     #LRUMAP
324B D60D             (       PAGING.ASM):00186                 LDB     ZPAGE
324D 3A               (       PAGING.ASM):00187                 ABX
324E 9611             (       PAGING.ASM):00188                 LDA     STAMP
3250 A784             (       PAGING.ASM):00189                 STA     ,X
                      (       PAGING.ASM):00190         
3252                  (       PAGING.ASM):00191         PG5:
3252 D60D             (       PAGING.ASM):00192                 LDB     ZPAGE                             ; GET PAGE OFFSET
3254 DB0E             (       PAGING.ASM):00193                 ADDB    PAGE0                             ; MAKE IT ABSOLUTE
3256 39               (       PAGING.ASM):00194                 RTS                                       ; AND RETURN IT IN [B]
                      (       PAGING.ASM):00195         
                      (       PAGING.ASM):00196         ; -------------------------
                      (       PAGING.ASM):00197         ; LOCATE EARLIEST TIMESTAMP
                      (       PAGING.ASM):00198         ; -------------------------
                      (       PAGING.ASM):00199         
                      (       PAGING.ASM):00200         ; EXIT: [LRU] = EARLIEST STAMP READING
                      (       PAGING.ASM):00201         ;       [SWAP] = INDEX TO EARLIEST BUFFER
                      (       PAGING.ASM):00202         
3257                  (       PAGING.ASM):00203         EARLY:
3257 0F12             (       PAGING.ASM):00204                 CLR     SWAP                              ; RESET [SWAP]
3259 B62650           (       PAGING.ASM):00205                 LDA     LRUMAP                            ; FETCH 1ST READING FOR COMPARISONS
325C 8E2651           (       PAGING.ASM):00206                 LDX     #LRUMAP+1                         ; POINT TO 2ND READING
325F C601             (       PAGING.ASM):00207                 LDB     #1                                ; INIT BUFFER INDEX
3261                  (       PAGING.ASM):00208         EAR0:
3261 A184             (       PAGING.ASM):00209                 CMPA    ,X                                ; IS THIS STAMP EARLIER THAN [A]?
3263 2504             (       PAGING.ASM):00210                 BLO     EAR1                              ; NO, TRY NEXT
3265 A684             (       PAGING.ASM):00211                 LDA     ,X                                ; ELSE MAKE THIS READING THE "NEW" LOWEST
3267 D712             (       PAGING.ASM):00212                 STB     SWAP                              ; AND REMEMBER WHERE WE FOUND IT
3269                  (       PAGING.ASM):00213         EAR1:
3269 3001             (       PAGING.ASM):00214                 LEAX    +1,X                              ; UPDATE POINTER
326B 5C               (       PAGING.ASM):00215                 INCB                                      ; AND BUFFER INDEX
326C D10C             (       PAGING.ASM):00216                 CMPB    PMAX                              ; OUT OF BUFFERS YET?
326E 25F1             (       PAGING.ASM):00217                 BLO     EAR0                              ; LOOP TILL DONE
                      (       PAGING.ASM):00218         
3270 970A             (       PAGING.ASM):00219                 STA     LRU                               ; SAVE EARLIEST STAMP FOUND
3272 39               (       PAGING.ASM):00220                 RTS                                       ; AND RETURN
                      (       PAGING.ASM):00221         
                      (       PAGING.ASM):00222         ; ---------------------
                      (       PAGING.ASM):00223         ; POINT [MPC] TO [TEMP]
                      (       PAGING.ASM):00224         ; ---------------------
                      (       PAGING.ASM):00225         
3273                  (       PAGING.ASM):00226         SETWRD:
3273 DC3F             (       PAGING.ASM):00227                 LDD     TEMP
3275 DD1B             (       PAGING.ASM):00228                 STD     MPCM
3277 0F1A             (       PAGING.ASM):00229                 CLR     MPCH
3279 0F1F             (       PAGING.ASM):00230                 CLR     MPCFLG
327B 39               (       PAGING.ASM):00231                 RTS
                      (     cubixzip.asm):00065                 INCLUDE ZSTRING.ASM
                      (      ZSTRING.ASM):00001         ;       PAGE
                      (      ZSTRING.ASM):00002         ;       SBTTL "--- Z-STRING HANDLERS ---"
                      (      ZSTRING.ASM):00003         
                      (      ZSTRING.ASM):00004         ; -----------------
                      (      ZSTRING.ASM):00005         ; POINT TO Z-STRING
                      (      ZSTRING.ASM):00006         ; -----------------
                      (      ZSTRING.ASM):00007         
327C                  (      ZSTRING.ASM):00008         SETSTR:
327C 4F               (      ZSTRING.ASM):00009                 CLRA
327D 0840             (      ZSTRING.ASM):00010                 ASL     TEMP+1
327F 093F             (      ZSTRING.ASM):00011                 ROL     TEMP
3281 49               (      ZSTRING.ASM):00012                 ROLA
3282 971A             (      ZSTRING.ASM):00013                 STA     MPCH
3284 DC3F             (      ZSTRING.ASM):00014                 LDD     TEMP
3286 DD1B             (      ZSTRING.ASM):00015                 STD     MPCM
3288 0F1F             (      ZSTRING.ASM):00016                 CLR     MPCFLG
328A                  (      ZSTRING.ASM):00017         ZSTEX:
328A 39               (      ZSTRING.ASM):00018                 RTS
                      (      ZSTRING.ASM):00019         
                      (      ZSTRING.ASM):00020         ; --------------
                      (      ZSTRING.ASM):00021         ; PRINT Z-STRING
                      (      ZSTRING.ASM):00022         ; --------------
                      (      ZSTRING.ASM):00023         
328B                  (      ZSTRING.ASM):00024         PZSTR:
328B 0F2A             (      ZSTRING.ASM):00025                 CLR     CSPERM                            ; PERMANENT CHARSET
328D 0F2B             (      ZSTRING.ASM):00026                 CLR     STBYTF                            ; RESET STRING BYTE FLAG
328F 86FF             (      ZSTRING.ASM):00027                 LDA     #$FF
3291 9729             (      ZSTRING.ASM):00028                 STA     CSTEMP                            ; NO TEMP CHARSET ACTIVE
                      (      ZSTRING.ASM):00029         
3293                  (      ZSTRING.ASM):00030         PZSTRL:
3293 BD3345           (      ZSTRING.ASM):00031                 JSR     GETZCH                            ; GET A Z-CHARACTER
3296 25F2             (      ZSTRING.ASM):00032                 BCS     ZSTEX                             ; END OF STRING IF CARRY SET
3298 9743             (      ZSTRING.ASM):00033                 STA     MASK                              ; SAVE CHAR HERE
329A 2741             (      ZSTRING.ASM):00034                 BEQ     PZSTRS                            ; O = SPACE CHAR
329C 8104             (      ZSTRING.ASM):00035                 CMPA    #4                                ; IS THIS AN F-WORD?
329E 2557             (      ZSTRING.ASM):00036                 BLO     PZSTRF                            ; APPARENTLY SO
32A0 8106             (      ZSTRING.ASM):00037                 CMPA    #6                                ; SHIFT CHAR?
32A2 253D             (      ZSTRING.ASM):00038                 BLO     PZSTRT                            ; YES, CHANGE CHARSET
                      (      ZSTRING.ASM):00039         
32A4 BD3339           (      ZSTRING.ASM):00040                 JSR     GETMOD
32A7 4D               (      ZSTRING.ASM):00041                 TSTA                                      ; IS THIS CHARSET 0?
32A8 2609             (      ZSTRING.ASM):00042                 BNE     PZSTR1                            ; NOPE
                      (      ZSTRING.ASM):00043         
                      (      ZSTRING.ASM):00044         ; PRINT LOWER-CASE CHAR (CHARSET 0)
                      (      ZSTRING.ASM):00045         
32AA 865B             (      ZSTRING.ASM):00046                 LDA     #$61-6                            ; ASCII "a" MINUS Z-OFFSET
32AC                  (      ZSTRING.ASM):00047         PZSTP0:
32AC 9B43             (      ZSTRING.ASM):00048                 ADDA    MASK                              ; ADD CHARACTER
32AE                  (      ZSTRING.ASM):00049         PZSTP1:
32AE BD36C9           (      ZSTRING.ASM):00050                 JSR     COUT                              ; PRINT RESULT
32B1 20E0             (      ZSTRING.ASM):00051                 BRA     PZSTRL                            ; AND FETCH ANOTHER Z-CHAR
                      (      ZSTRING.ASM):00052         
                      (      ZSTRING.ASM):00053         ; CHARSET 1 OR 2?
                      (      ZSTRING.ASM):00054         
32B3                  (      ZSTRING.ASM):00055         PZSTR1:
32B3 8101             (      ZSTRING.ASM):00056                 CMPA    #1                                ; SET 1?
32B5 2604             (      ZSTRING.ASM):00057                 BNE     PZSTR2                            ; NOPE, IT'S SET 2
                      (      ZSTRING.ASM):00058         
                      (      ZSTRING.ASM):00059         ; PRINT UPPER-CASE CHAR (CHARSET 1)
                      (      ZSTRING.ASM):00060         
32B7 863B             (      ZSTRING.ASM):00061                 LDA     #$41-6                            ; ASCII "A" MINUS Z-OFFSET
32B9 20F1             (      ZSTRING.ASM):00062                 BRA     PZSTP0                            ; AND SO ON ...
                      (      ZSTRING.ASM):00063         
                      (      ZSTRING.ASM):00064         ; DECODE/PRINT CHARSET 2
                      (      ZSTRING.ASM):00065         
32BB                  (      ZSTRING.ASM):00066         PZSTR2:
32BB D643             (      ZSTRING.ASM):00067                 LDB     MASK                              ; RETRIEVE Z-CHAR
32BD C006             (      ZSTRING.ASM):00068                 SUBB    #6                                ; CONVERT TO ZERO-ALIGNED INDEX
32BF 2707             (      ZSTRING.ASM):00069                 BEQ     PZSTRA                            ; IF ZERO, IT'S "DIRECT" ASCII
32C1 8E3458           (      ZSTRING.ASM):00070                 LDX     #CHRTBL                           ; ELSE GET BASE OF DECODE TABLE
32C4 A685             (      ZSTRING.ASM):00071                 LDA     B,X                               ; GET CHAR FROM TABLE
32C6 20E6             (      ZSTRING.ASM):00072                 BRA     PZSTP1                            ; AND PRINT IT!
                      (      ZSTRING.ASM):00073         
                      (      ZSTRING.ASM):00074         ; DECODE/PRINT A "DIRECT" ASCII CHAR
                      (      ZSTRING.ASM):00075         
32C8                  (      ZSTRING.ASM):00076         PZSTRA:
32C8 BD3345           (      ZSTRING.ASM):00077                 JSR     GETZCH                            ; GET NEXT Z-BYTE
32CB 48               (      ZSTRING.ASM):00078                 ASLA                                      ; SHIFT INTO POSITION
32CC 48               (      ZSTRING.ASM):00079                 ASLA
32CD 48               (      ZSTRING.ASM):00080                 ASLA
32CE 48               (      ZSTRING.ASM):00081                 ASLA
32CF 48               (      ZSTRING.ASM):00082                 ASLA
32D0 9743             (      ZSTRING.ASM):00083                 STA     MASK                              ; SAVE MSB
32D2 BD3345           (      ZSTRING.ASM):00084                 JSR     GETZCH                            ; FETCH LSB
32D5 9744             (      ZSTRING.ASM):00085                 STA     MASK+1                            ; SAVE THAT, TOO
32D7 9643             (      ZSTRING.ASM):00086                 LDA     MASK                              ; GET MSB
32D9 9A44             (      ZSTRING.ASM):00087                 ORA     MASK+1                            ; SUPERIMPOSE LSB
32DB 20D1             (      ZSTRING.ASM):00088                 BRA     PZSTP1                            ; AND PRINT RESULT
                      (      ZSTRING.ASM):00089         
                      (      ZSTRING.ASM):00090         ; PRINT A SPACE
                      (      ZSTRING.ASM):00091         
32DD                  (      ZSTRING.ASM):00092         PZSTRS:
32DD 8620             (      ZSTRING.ASM):00093                 LDA     #$20
32DF 20CD             (      ZSTRING.ASM):00094                 BRA     PZSTP1
                      (      ZSTRING.ASM):00095         
                      (      ZSTRING.ASM):00096         ; CHANGE CHARACTER SETS
                      (      ZSTRING.ASM):00097         
32E1                  (      ZSTRING.ASM):00098         PZSTRT:
32E1 8003             (      ZSTRING.ASM):00099                 SUBA    #3                                ; CONVERT TO 1 OR 2
32E3 1F89             (      ZSTRING.ASM):00100                 TFR     A,B
32E5 8D52             (      ZSTRING.ASM):00101                 BSR     GETMOD
32E7 2604             (      ZSTRING.ASM):00102                 BNE     PZSTRP                            ; NO, DO PERMANENT SHIFT
32E9 D729             (      ZSTRING.ASM):00103                 STB     CSTEMP                            ; JUST A TEMP-SHIFT
32EB 20A6             (      ZSTRING.ASM):00104                 BRA     PZSTRL
                      (      ZSTRING.ASM):00105         
32ED                  (      ZSTRING.ASM):00106         PZSTRP:
32ED D72A             (      ZSTRING.ASM):00107                 STB     CSPERM                            ; PERMANENT SHIFT
32EF 912A             (      ZSTRING.ASM):00108                 CMPA    CSPERM                            ; NEW SET SAME AS OLD?
32F1 27A0             (      ZSTRING.ASM):00109                 BEQ     PZSTRL                            ; YES, EXIT
32F3 0F2A             (      ZSTRING.ASM):00110                 CLR     CSPERM                            ; ELSE BACK TO SET 0
32F5 209C             (      ZSTRING.ASM):00111                 BRA     PZSTRL                            ; BEFORE FINISHING
                      (      ZSTRING.ASM):00112         
                      (      ZSTRING.ASM):00113         ; HANDLE AN F-WORD
                      (      ZSTRING.ASM):00114         
32F7                  (      ZSTRING.ASM):00115         PZSTRF:
32F7 4A               (      ZSTRING.ASM):00116                 DECA                                      ; CONVERT TO 0-2
32F8 C640             (      ZSTRING.ASM):00117                 LDB     #64                               ; TIMES 64
32FA 3D               (      ZSTRING.ASM):00118                 MUL
32FB D73C             (      ZSTRING.ASM):00119                 STB     PZSTFO                            ; SAVE FOR LATER
32FD BD3345           (      ZSTRING.ASM):00120                 JSR     GETZCH                            ; GET F-WORD INDEX
3300 1F89             (      ZSTRING.ASM):00121                 TFR     A,B                               ; MOVE IT
3302 58               (      ZSTRING.ASM):00122                 ASLB                                      ; FORM WORD-ALIGNED INDEX
3303 DB3C             (      ZSTRING.ASM):00123                 ADDB    PZSTFO                            ; ADD OFFSET
3305 9E25             (      ZSTRING.ASM):00124                 LDX     FWORDS                            ; GET BASE ADDR OF FWORDS TABLE
3307 3A               (      ZSTRING.ASM):00125                 ABX                                       ; ADD THE OFFSET
3308 EC84             (      ZSTRING.ASM):00126                 LDD     ,X                                ; GET THE FWORD POINTER
330A DD3F             (      ZSTRING.ASM):00127                 STD     TEMP                              ; AND SAVE IT
                      (      ZSTRING.ASM):00128         
                      (      ZSTRING.ASM):00129         ; SAVE THE STATE OF CURRENT Z-PRINT
                      (      ZSTRING.ASM):00130         
330C 961A             (      ZSTRING.ASM):00131                 LDA     MPCH
330E 3402             (      ZSTRING.ASM):00132                 PSHS    A
3310 962A             (      ZSTRING.ASM):00133                 LDA     CSPERM
3312 D62B             (      ZSTRING.ASM):00134                 LDB     STBYTF
3314 9E1B             (      ZSTRING.ASM):00135                 LDX     MPCM
3316 109E2C           (      ZSTRING.ASM):00136                 LDY     ZSTWRD
3319 3436             (      ZSTRING.ASM):00137                 PSHS    Y,X,B,A
                      (      ZSTRING.ASM):00138         
331B BD327C           (      ZSTRING.ASM):00139                 JSR     SETSTR                            ; PRINT THE F-WORD
331E BD328B           (      ZSTRING.ASM):00140                 JSR     PZSTR                             ; POINTED TO BY [TEMP]
                      (      ZSTRING.ASM):00141         
                      (      ZSTRING.ASM):00142         ; RESTORE THE OLD Z-STRING
                      (      ZSTRING.ASM):00143         
3321 3536             (      ZSTRING.ASM):00144                 PULS    Y,X,B,A
3323 109F2C           (      ZSTRING.ASM):00145                 STY     ZSTWRD
3326 9F1B             (      ZSTRING.ASM):00146                 STX     MPCM
3328 D72B             (      ZSTRING.ASM):00147                 STB     STBYTF
332A 972A             (      ZSTRING.ASM):00148                 STA     CSPERM
332C 3502             (      ZSTRING.ASM):00149                 PULS    A
332E 971A             (      ZSTRING.ASM):00150                 STA     MPCH
                      (      ZSTRING.ASM):00151         
3330 86FF             (      ZSTRING.ASM):00152                 LDA     #$FF
3332 9729             (      ZSTRING.ASM):00153                 STA     CSTEMP                            ; DISABLE TEMP CHARSET
3334 0F1F             (      ZSTRING.ASM):00154                 CLR     MPCFLG                            ; MPC HAS CHANGED!
3336 7E3293           (      ZSTRING.ASM):00155                 JMP     PZSTRL                            ; CONTINUE INNOCENTLY
                      (      ZSTRING.ASM):00156         
                      (      ZSTRING.ASM):00157         ; ----------------------
                      (      ZSTRING.ASM):00158         ; RETURN CURRENT CHARSET
                      (      ZSTRING.ASM):00159         ; ----------------------
                      (      ZSTRING.ASM):00160         
3339                  (      ZSTRING.ASM):00161         GETMOD:
3339 9629             (      ZSTRING.ASM):00162                 LDA     CSTEMP
333B 2A03             (      ZSTRING.ASM):00163                 BPL     GM
333D 962A             (      ZSTRING.ASM):00164                 LDA     CSPERM
333F 39               (      ZSTRING.ASM):00165                 RTS
                      (      ZSTRING.ASM):00166         
3340                  (      ZSTRING.ASM):00167         GM:
3340 C6FF             (      ZSTRING.ASM):00168                 LDB     #$FF
3342 D729             (      ZSTRING.ASM):00169                 STB     CSTEMP
3344 39               (      ZSTRING.ASM):00170                 RTS
                      (      ZSTRING.ASM):00171         
                      (      ZSTRING.ASM):00172         ; ---------------
                      (      ZSTRING.ASM):00173         ; GET NEXT Z-CHAR
                      (      ZSTRING.ASM):00174         ; ---------------
                      (      ZSTRING.ASM):00175         
3345                  (      ZSTRING.ASM):00176         GETZCH:
3345 962B             (      ZSTRING.ASM):00177                 LDA     STBYTF                            ; WHICH BYTE?
3347 2A02             (      ZSTRING.ASM):00178                 BPL     GTZ0
3349 53               (      ZSTRING.ASM):00179                 COMB                                      ; SET CARRY
334A 39               (      ZSTRING.ASM):00180                 RTS                                       ; TO INDICATE "NO MORE CHARS"
                      (      ZSTRING.ASM):00181         
334B                  (      ZSTRING.ASM):00182         GTZ0:
334B 260F             (      ZSTRING.ASM):00183                 BNE     GETZH1                            ; NOT FIRST CHAR
334D 0C2B             (      ZSTRING.ASM):00184                 INC     STBYTF
334F BD3186           (      ZSTRING.ASM):00185                 JSR     GETWRD
3352 DC3F             (      ZSTRING.ASM):00186                 LDD     TEMP
3354 DD2C             (      ZSTRING.ASM):00187                 STD     ZSTWRD
3356 44               (      ZSTRING.ASM):00188                 LSRA
3357 44               (      ZSTRING.ASM):00189                 LSRA
3358                  (      ZSTRING.ASM):00190         GTEXIT:
3358 841F             (      ZSTRING.ASM):00191                 ANDA    #%00011111
335A 5F               (      ZSTRING.ASM):00192                 CLRB                                      ; CLEAR CARRY
335B 39               (      ZSTRING.ASM):00193                 RTS
                      (      ZSTRING.ASM):00194         
335C                  (      ZSTRING.ASM):00195         GETZH1:
335C 4A               (      ZSTRING.ASM):00196                 DECA
335D 2614             (      ZSTRING.ASM):00197                 BNE     GETZH2                            ; MUST BE LAST CHAR
335F 8602             (      ZSTRING.ASM):00198                 LDA     #2
3361 972B             (      ZSTRING.ASM):00199                 STA     STBYTF
3363 DC2C             (      ZSTRING.ASM):00200                 LDD     ZSTWRD
3365 44               (      ZSTRING.ASM):00201                 LSRA
3366 56               (      ZSTRING.ASM):00202                 RORB
3367 962C             (      ZSTRING.ASM):00203                 LDA     ZSTWRD
3369 44               (      ZSTRING.ASM):00204                 LSRA
336A 44               (      ZSTRING.ASM):00205                 LSRA
336B 56               (      ZSTRING.ASM):00206                 RORB
336C 54               (      ZSTRING.ASM):00207                 LSRB
336D 54               (      ZSTRING.ASM):00208                 LSRB
336E 54               (      ZSTRING.ASM):00209                 LSRB
336F                  (      ZSTRING.ASM):00210         GETZH3:
336F 1F98             (      ZSTRING.ASM):00211                 TFR     B,A                               ; EXPECTED HERE
3371 20E5             (      ZSTRING.ASM):00212                 BRA     GTEXIT
                      (      ZSTRING.ASM):00213         
3373                  (      ZSTRING.ASM):00214         GETZH2:
3373 0F2B             (      ZSTRING.ASM):00215                 CLR     STBYTF
3375 DC2C             (      ZSTRING.ASM):00216                 LDD     ZSTWRD
3377 2AF6             (      ZSTRING.ASM):00217                 BPL     GETZH3
3379 032B             (      ZSTRING.ASM):00218                 COM     STBYTF                            ; INDICATE END OF STRING
337B 20F2             (      ZSTRING.ASM):00219                 BRA     GETZH3
                      (      ZSTRING.ASM):00220         
                      (      ZSTRING.ASM):00221         ; -------------------
                      (      ZSTRING.ASM):00222         ; CONVERT TO Z-STRING
                      (      ZSTRING.ASM):00223         ; -------------------
                      (      ZSTRING.ASM):00224         
337D                  (      ZSTRING.ASM):00225         CONZST:
337D CC0505           (      ZSTRING.ASM):00226                 LDD     #$0505                            ; FILL OUTPUT BUFFER
3380 DD34             (      ZSTRING.ASM):00227                 STD     ZSTBUO                            ; WITH PAD CHARS
3382 DD36             (      ZSTRING.ASM):00228                 STD     ZSTBUO+2
3384 DD38             (      ZSTRING.ASM):00229                 STD     ZSTBUO+4
                      (      ZSTRING.ASM):00230         
3386 4C               (      ZSTRING.ASM):00231                 INCA                                      ; = 6
3387 9743             (      ZSTRING.ASM):00232                 STA     MASK                              ; INIT CHAR COUNT
                      (      ZSTRING.ASM):00233         
3389 0F3D             (      ZSTRING.ASM):00234                 CLR     VAL                               ; RESET OUTPUT AND
338B 0F3F             (      ZSTRING.ASM):00235                 CLR     TEMP                              ; INPUT INDEXES
                      (      ZSTRING.ASM):00236         
338D                  (      ZSTRING.ASM):00237         CNZSL1:
338D D63F             (      ZSTRING.ASM):00238                 LDB     TEMP
338F 0C3F             (      ZSTRING.ASM):00239                 INC     TEMP
3391 8E002E           (      ZSTRING.ASM):00240                 LDX     #ZSTBUI                           ; POINT TO INPUT BUFFER
3394 A685             (      ZSTRING.ASM):00241                 LDA     B,X                               ; GRAB NEXT CHAR
3396 9744             (      ZSTRING.ASM):00242                 STA     MASK+1                            ; SAVE IT HERE
3398 2604             (      ZSTRING.ASM):00243                 BNE     CNZSL2                            ; IF CHAR WAS ZERO,
339A 8605             (      ZSTRING.ASM):00244                 LDA     #5                                ; USE A Z-PAD
339C 2025             (      ZSTRING.ASM):00245                 BRA     CNZSLO
                      (      ZSTRING.ASM):00246         
339E                  (      ZSTRING.ASM):00247         CNZSL2:
339E 9644             (      ZSTRING.ASM):00248                 LDA     MASK+1
33A0 BD341E           (      ZSTRING.ASM):00249                 JSR     ZCHRCS                            ; WHICH CHARSET TO USE?
33A3 4D               (      ZSTRING.ASM):00250                 TSTA
33A4 2711             (      ZSTRING.ASM):00251                 BEQ     CNZSLC                            ; IF CHARSET 0, USE LOWER CASE
33A6 8B03             (      ZSTRING.ASM):00252                 ADDA    #3
33A8 D63D             (      ZSTRING.ASM):00253                 LDB     VAL                               ; OUTPUT A TEMP SHIFT
33AA 8E0034           (      ZSTRING.ASM):00254                 LDX     #ZSTBUO
33AD A785             (      ZSTRING.ASM):00255                 STA     B,X
33AF 0C3D             (      ZSTRING.ASM):00256                 INC     VAL
33B1 0A43             (      ZSTRING.ASM):00257                 DEC     MASK
33B3 10270084         (      ZSTRING.ASM):00258                 LBEQ    CNZSLE
                      (      ZSTRING.ASM):00259         
33B7                  (      ZSTRING.ASM):00260         CNZSLC:
33B7 9644             (      ZSTRING.ASM):00261                 LDA     MASK+1
33B9 BD341E           (      ZSTRING.ASM):00262                 JSR     ZCHRCS
33BC 4A               (      ZSTRING.ASM):00263                 DECA
33BD 2A13             (      ZSTRING.ASM):00264                 BPL     CNZSC1                            ; NOT CHARSET 0!
33BF 9644             (      ZSTRING.ASM):00265                 LDA     MASK+1
33C1 805B             (      ZSTRING.ASM):00266                 SUBA    #$61-6                            ; ASCII "a" MINUS 6
                      (      ZSTRING.ASM):00267         
33C3                  (      ZSTRING.ASM):00268         CNZSLO:
33C3 D63D             (      ZSTRING.ASM):00269                 LDB     VAL
33C5 8E0034           (      ZSTRING.ASM):00270                 LDX     #ZSTBUO
33C8 A785             (      ZSTRING.ASM):00271                 STA     B,X
33CA 0C3D             (      ZSTRING.ASM):00272                 INC     VAL
33CC 0A43             (      ZSTRING.ASM):00273                 DEC     MASK
33CE 276B             (      ZSTRING.ASM):00274                 BEQ     CNZSLE                            ; ALL FINISHED
33D0 20BB             (      ZSTRING.ASM):00275                 BRA     CNZSL1                            ; ELSE LOOP BACK FOR MORE
                      (      ZSTRING.ASM):00276         
33D2                  (      ZSTRING.ASM):00277         CNZSC1:
33D2 2606             (      ZSTRING.ASM):00278                 BNE     CNZSC3                            ; MUST BE CHARSET 3
33D4 9644             (      ZSTRING.ASM):00279                 LDA     MASK+1
33D6 803B             (      ZSTRING.ASM):00280                 SUBA    #$41-6                            ; ASCII "A" MINUS 6
33D8 20E9             (      ZSTRING.ASM):00281                 BRA     CNZSLO
                      (      ZSTRING.ASM):00282         
33DA                  (      ZSTRING.ASM):00283         CNZSC3:
33DA 9644             (      ZSTRING.ASM):00284                 LDA     MASK+1
33DC BD340C           (      ZSTRING.ASM):00285                 JSR     CNZS2M                            ; IS IT IN TABLE?
33DF 26E2             (      ZSTRING.ASM):00286                 BNE     CNZSLO                            ; YES, OUTPUT THE CHAR
33E1 8606             (      ZSTRING.ASM):00287                 LDA     #6                                ; ELSE IT'S A "DIRECT" ASCII CHAR
33E3 D63D             (      ZSTRING.ASM):00288                 LDB     VAL
33E5 8E0034           (      ZSTRING.ASM):00289                 LDX     #ZSTBUO
33E8 A785             (      ZSTRING.ASM):00290                 STA     B,X                               ; SEND "DIRECT" TO OUTPUT
33EA 0C3D             (      ZSTRING.ASM):00291                 INC     VAL
33EC 0A43             (      ZSTRING.ASM):00292                 DEC     MASK
33EE 274B             (      ZSTRING.ASM):00293                 BEQ     CNZSLE                            ; NO MORE ROOM!
                      (      ZSTRING.ASM):00294         
                      (      ZSTRING.ASM):00295         ; CONVERT CHAR TO 2-BYTE DIRECT ASCII
                      (      ZSTRING.ASM):00296         
33F0 9644             (      ZSTRING.ASM):00297                 LDA     MASK+1
33F2 44               (      ZSTRING.ASM):00298                 LSRA
33F3 44               (      ZSTRING.ASM):00299                 LSRA
33F4 44               (      ZSTRING.ASM):00300                 LSRA
33F5 44               (      ZSTRING.ASM):00301                 LSRA
33F6 44               (      ZSTRING.ASM):00302                 LSRA
33F7 8403             (      ZSTRING.ASM):00303                 ANDA    #%00000011
33F9 D63D             (      ZSTRING.ASM):00304                 LDB     VAL
33FB 8E0034           (      ZSTRING.ASM):00305                 LDX     #ZSTBUO
33FE A785             (      ZSTRING.ASM):00306                 STA     B,X
3400 0C3D             (      ZSTRING.ASM):00307                 INC     VAL
3402 0A43             (      ZSTRING.ASM):00308                 DEC     MASK
3404 2735             (      ZSTRING.ASM):00309                 BEQ     CNZSLE                            ; NO MORE ROOM!
3406 9644             (      ZSTRING.ASM):00310                 LDA     MASK+1
3408 841F             (      ZSTRING.ASM):00311                 ANDA    #%00011111                        ; FORM 2ND Z-BYTE
340A 20B7             (      ZSTRING.ASM):00312                 BRA     CNZSLO                            ; AND OUTPUT IT
                      (      ZSTRING.ASM):00313         
                      (      ZSTRING.ASM):00314         ; ----------------------
                      (      ZSTRING.ASM):00315         ; SEARCH CHARSET 3 TABLE
                      (      ZSTRING.ASM):00316         ; ----------------------
                      (      ZSTRING.ASM):00317         
340C                  (      ZSTRING.ASM):00318         CNZS2M:
340C 8E3458           (      ZSTRING.ASM):00319                 LDX     #CHRTBL
340F C619             (      ZSTRING.ASM):00320                 LDB     #25
3411                  (      ZSTRING.ASM):00321         CNLOOP:
3411 A185             (      ZSTRING.ASM):00322                 CMPA    B,X
3413 2704             (      ZSTRING.ASM):00323                 BEQ     CNOK
3415 5A               (      ZSTRING.ASM):00324                 DECB
3416 26F9             (      ZSTRING.ASM):00325                 BNE     CNLOOP
3418 39               (      ZSTRING.ASM):00326                 RTS                                       ; RETURN ZERO IN B IF NO MATCH
                      (      ZSTRING.ASM):00327         
3419                  (      ZSTRING.ASM):00328         CNOK:
3419 1F98             (      ZSTRING.ASM):00329                 TFR     B,A                               ; EXPECTED IN [A]
341B 8B06             (      ZSTRING.ASM):00330                 ADDA    #6                                ; CONVERT TO Z-CHAR
341D 39               (      ZSTRING.ASM):00331                 RTS
                      (      ZSTRING.ASM):00332         
                      (      ZSTRING.ASM):00333         ; -------------------------
                      (      ZSTRING.ASM):00334         ; DETERMINE CHARSET OF CHAR
                      (      ZSTRING.ASM):00335         ; -------------------------
                      (      ZSTRING.ASM):00336         
341E                  (      ZSTRING.ASM):00337         ZCHRCS:
341E 8161             (      ZSTRING.ASM):00338                 CMPA    #$61                              ; ASCII "a"
3420 2506             (      ZSTRING.ASM):00339                 BLO     ZCHR1
3422 817B             (      ZSTRING.ASM):00340                 CMPA    #$7B                              ; ASCII "z"+1
3424 2402             (      ZSTRING.ASM):00341                 BHS     ZCHR1
3426 4F               (      ZSTRING.ASM):00342                 CLRA                                      ; IT'S CHARSET 0
3427 39               (      ZSTRING.ASM):00343                 RTS
                      (      ZSTRING.ASM):00344         
3428                  (      ZSTRING.ASM):00345         ZCHR1:
3428 8141             (      ZSTRING.ASM):00346                 CMPA    #$41                              ; ASCII "A"
342A 2507             (      ZSTRING.ASM):00347                 BLO     ZCHR2
342C 815B             (      ZSTRING.ASM):00348                 CMPA    #$5B                              ; ASCII "Z"+1
342E 2403             (      ZSTRING.ASM):00349                 BHS     ZCHR2
3430 8601             (      ZSTRING.ASM):00350                 LDA     #1                                ; IT'S CHARSET 1
3432 39               (      ZSTRING.ASM):00351                 RTS
                      (      ZSTRING.ASM):00352         
3433                  (      ZSTRING.ASM):00353         ZCHR2:
3433 4D               (      ZSTRING.ASM):00354                 TSTA
3434 2704             (      ZSTRING.ASM):00355                 BEQ     ZCHRX                             ; EXIT IF ZERO
3436 2B02             (      ZSTRING.ASM):00356                 BMI     ZCHRX                             ; OR NEGATIVE
3438 8602             (      ZSTRING.ASM):00357                 LDA     #2                                ; ELSE IT'S CHARSET 2
343A                  (      ZSTRING.ASM):00358         ZCHRX:
343A 39               (      ZSTRING.ASM):00359                 RTS
                      (      ZSTRING.ASM):00360         
                      (      ZSTRING.ASM):00361         ; ---------------
                      (      ZSTRING.ASM):00362         ; CRUSH 6 Z-CHARS
                      (      ZSTRING.ASM):00363         ; ---------------
                      (      ZSTRING.ASM):00364         
343B                  (      ZSTRING.ASM):00365         CNZSLE:
343B DC34             (      ZSTRING.ASM):00366                 LDD     ZSTBUO                            ; HANDLE 1ST TRIPLET
343D 58               (      ZSTRING.ASM):00367                 ASLB
343E 58               (      ZSTRING.ASM):00368                 ASLB
343F 58               (      ZSTRING.ASM):00369                 ASLB
3440 58               (      ZSTRING.ASM):00370                 ASLB
3441 49               (      ZSTRING.ASM):00371                 ROLA
3442 58               (      ZSTRING.ASM):00372                 ASLB
3443 49               (      ZSTRING.ASM):00373                 ROLA
3444 DA36             (      ZSTRING.ASM):00374                 ORB     ZSTBUO+2
3446 DD34             (      ZSTRING.ASM):00375                 STD     ZSTBUO
                      (      ZSTRING.ASM):00376         
3448 DC37             (      ZSTRING.ASM):00377                 LDD     ZSTBUO+3                          ; HANDLE 2ND TRIPLET
344A 58               (      ZSTRING.ASM):00378                 ASLB
344B 58               (      ZSTRING.ASM):00379                 ASLB
344C 58               (      ZSTRING.ASM):00380                 ASLB
344D 58               (      ZSTRING.ASM):00381                 ASLB
344E 49               (      ZSTRING.ASM):00382                 ROLA
344F 58               (      ZSTRING.ASM):00383                 ASLB
3450 49               (      ZSTRING.ASM):00384                 ROLA
3451 DA39             (      ZSTRING.ASM):00385                 ORB     ZSTBUO+5
3453 8A80             (      ZSTRING.ASM):00386                 ORA     #%10000000                        ; SET SIGN BIT OF LAST Z-BYTE
3455 DD36             (      ZSTRING.ASM):00387                 STD     ZSTBUO+2
3457 39               (      ZSTRING.ASM):00388                 RTS
                      (      ZSTRING.ASM):00389         
                      (      ZSTRING.ASM):00390         ; ----------------------
                      (      ZSTRING.ASM):00391         ; CHARSET 2 DECODE TABLE
                      (      ZSTRING.ASM):00392         ; ----------------------
                      (      ZSTRING.ASM):00393         
3458                  (      ZSTRING.ASM):00394         CHRTBL:
3458 00               (      ZSTRING.ASM):00395                 FCB     0                                 ; DUMMY BYTE
3459 0D               (      ZSTRING.ASM):00396                 FCB     $0D                               ; CARRIAGE RETURN
345A 3031323334353637 (      ZSTRING.ASM):00397                 FCC     "0123456789.,!?_#"
     38392E2C213F5F23
346A 27               (      ZSTRING.ASM):00398                 FCB     $27                               ; SINGLE QUOTE
346B 22               (      ZSTRING.ASM):00399                 FCB     $22                               ; DOUBLE QUOTE
346C 2F5C2D3A2829     (      ZSTRING.ASM):00400                 FCC     "/\-:()"
                      (     cubixzip.asm):00066                 INCLUDE OBJECTS.ASM
                      (      OBJECTS.ASM):00001         ;       PAGE
                      (      OBJECTS.ASM):00002         ;       SBTTL "--- OBJECT & PROPERTY HANDLERS ---"
                      (      OBJECTS.ASM):00003         
3472                  (      OBJECTS.ASM):00004         PROPB:
3472 9603             (      OBJECTS.ASM):00005                 LDA     ARG1+1
3474 BD34D5           (      OBJECTS.ASM):00006                 JSR     OBJLOC
3477 9E3F             (      OBJECTS.ASM):00007                 LDX     TEMP
3479 EC07             (      OBJECTS.ASM):00008                 LDD     7,X
347B C33F00           (      OBJECTS.ASM):00009                 ADDD    #ZCODE
347E DD3F             (      OBJECTS.ASM):00010                 STD     TEMP                              ; EXPECTED HERE
3480 1F01             (      OBJECTS.ASM):00011                 TFR     D,X
3482 E684             (      OBJECTS.ASM):00012                 LDB     ,X                                ; GET FIRST BYTE (LENGTH OF DESC)
3484 58               (      OBJECTS.ASM):00013                 ASLB                                      ; WORD-ALIGN IT
3485 5C               (      OBJECTS.ASM):00014                 INCB                                      ; AND POINT JUST PAST IT
3486 39               (      OBJECTS.ASM):00015                 RTS
                      (      OBJECTS.ASM):00016         
3487                  (      OBJECTS.ASM):00017         PROPN:
3487 9E3F             (      OBJECTS.ASM):00018                 LDX     TEMP
3489 3A               (      OBJECTS.ASM):00019                 ABX
348A A684             (      OBJECTS.ASM):00020                 LDA     ,X
348C 841F             (      OBJECTS.ASM):00021                 ANDA    #%00011111
348E 39               (      OBJECTS.ASM):00022                 RTS
                      (      OBJECTS.ASM):00023         
348F                  (      OBJECTS.ASM):00024         PROPL:
348F 9E3F             (      OBJECTS.ASM):00025                 LDX     TEMP
3491 3A               (      OBJECTS.ASM):00026                 ABX
3492 A684             (      OBJECTS.ASM):00027                 LDA     ,X
3494 46               (      OBJECTS.ASM):00028                 RORA
3495 46               (      OBJECTS.ASM):00029                 RORA
3496 46               (      OBJECTS.ASM):00030                 RORA
3497 46               (      OBJECTS.ASM):00031                 RORA
3498 46               (      OBJECTS.ASM):00032                 RORA
3499 8407             (      OBJECTS.ASM):00033                 ANDA    #%00000111
349B 39               (      OBJECTS.ASM):00034                 RTS
                      (      OBJECTS.ASM):00035         
349C                  (      OBJECTS.ASM):00036         PROPNX:
349C 8DF1             (      OBJECTS.ASM):00037                 BSR     PROPL
349E 973D             (      OBJECTS.ASM):00038                 STA     VAL
34A0                  (      OBJECTS.ASM):00039         PPX:
34A0 5C               (      OBJECTS.ASM):00040                 INCB
34A1 0A3D             (      OBJECTS.ASM):00041                 DEC     VAL
34A3 2AFB             (      OBJECTS.ASM):00042                 BPL     PPX
34A5 5C               (      OBJECTS.ASM):00043                 INCB
34A6 39               (      OBJECTS.ASM):00044                 RTS
                      (      OBJECTS.ASM):00045         
34A7                  (      OBJECTS.ASM):00046         FLAGSU:
34A7 9603             (      OBJECTS.ASM):00047                 LDA     ARG1+1
34A9 BD34D5           (      OBJECTS.ASM):00048                 JSR     OBJLOC
34AC 9605             (      OBJECTS.ASM):00049                 LDA     ARG2+1
34AE 8110             (      OBJECTS.ASM):00050                 CMPA    #16
34B0 2508             (      OBJECTS.ASM):00051                 BLO     FLGSU1
34B2 8010             (      OBJECTS.ASM):00052                 SUBA    #16
34B4 9E3F             (      OBJECTS.ASM):00053                 LDX     TEMP
34B6 3002             (      OBJECTS.ASM):00054                 LEAX    2,X
34B8 9F3F             (      OBJECTS.ASM):00055                 STX     TEMP
                      (      OBJECTS.ASM):00056         
34BA                  (      OBJECTS.ASM):00057         FLGSU1:
34BA 973E             (      OBJECTS.ASM):00058                 STA     VAL+1
34BC CC0001           (      OBJECTS.ASM):00059                 LDD     #1
34BF DD43             (      OBJECTS.ASM):00060                 STD     MASK
34C1 C60F             (      OBJECTS.ASM):00061                 LDB     #15
34C3 D03E             (      OBJECTS.ASM):00062                 SUBB    VAL+1
                      (      OBJECTS.ASM):00063         
34C5                  (      OBJECTS.ASM):00064         FLGSU2:
34C5 2707             (      OBJECTS.ASM):00065                 BEQ     FLGSU3
34C7 0844             (      OBJECTS.ASM):00066                 ASL     MASK+1
34C9 0943             (      OBJECTS.ASM):00067                 ROL     MASK
34CB 5A               (      OBJECTS.ASM):00068                 DECB
34CC 20F7             (      OBJECTS.ASM):00069                 BRA     FLGSU2
                      (      OBJECTS.ASM):00070         
34CE                  (      OBJECTS.ASM):00071         FLGSU3:
34CE 9E3F             (      OBJECTS.ASM):00072                 LDX     TEMP
34D0 EC84             (      OBJECTS.ASM):00073                 LDD     ,X
34D2 DD3D             (      OBJECTS.ASM):00074                 STD     VAL
34D4 39               (      OBJECTS.ASM):00075                 RTS
                      (      OBJECTS.ASM):00076         
34D5                  (      OBJECTS.ASM):00077         OBJLOC:
34D5 C609             (      OBJECTS.ASM):00078                 LDB     #9                                ; NUMBER IN [A] TIMES 9
34D7 3D               (      OBJECTS.ASM):00079                 MUL
34D8 C30035           (      OBJECTS.ASM):00080                 ADDD    #53                               ; PLUS 53
34DB F33F0A           (      OBJECTS.ASM):00081                 ADDD    ZCODE+ZOBJEC                      ; Z-ADDRESS OF OBJECT TABLE
34DE C33F00           (      OBJECTS.ASM):00082                 ADDD    #ZCODE                            ; FORM ABSOLUTE ADDRESS
34E1 DD3F             (      OBJECTS.ASM):00083                 STD     TEMP
34E3 39               (      OBJECTS.ASM):00084                 RTS
                      (     cubixzip.asm):00067         
                      (     cubixzip.asm):00068         ;TITLE "ZIP/6809-B INFOCOM, INC. --- CUBIX DEPENDENT"
                      (     cubixzip.asm):00069                 INCLUDE IO.ASM
                      (           IO.ASM):00001         ;       PAGE
                      (           IO.ASM):00002         ;       SBTTL "--- OS EQUATES ---"
                      (           IO.ASM):00003         
     000D             (           IO.ASM):00004         EOL             EQU $0D                           ; END-OF-LINE CHARACTER
     0008             (           IO.ASM):00005         BS              EQU $08                           ; BACKSPACE CHARACTER
     0020             (           IO.ASM):00006         SPACE           EQU $20                           ; SPACE CHARACTER
                      (           IO.ASM):00007         
                      (           IO.ASM):00008         ;        PAGE
                      (           IO.ASM):00009         ;        SBTTL   "I/O PRIMITIVES"
                      (           IO.ASM):00010         
                      (           IO.ASM):00011         
                      (           IO.ASM):00012         
                      (           IO.ASM):00013         ; --------------------
                      (           IO.ASM):00014         ; ACCESS OS CHAR-PRINT
                      (           IO.ASM):00015         ; --------------------
                      (           IO.ASM):00016         
                      (           IO.ASM):00017         
34E4                  (           IO.ASM):00018         OUTCHR:
34E4 3477             (           IO.ASM):00019                 PSHS    A,B,X,Y,U,CC
34E6 3F               (           IO.ASM):00020                 SWI
34E7 21               (           IO.ASM):00021                 FCB     33                                ;DISPLAY
34E8 3577             (           IO.ASM):00022                 PULS    A,B,X,Y,U,CC
34EA 39               (           IO.ASM):00023                 RTS
                      (           IO.ASM):00024         
                      (           IO.ASM):00025         ; -----------------
                      (           IO.ASM):00026         ; READ A SINGLE KEY
                      (           IO.ASM):00027         ; -----------------
                      (           IO.ASM):00028         
                      (           IO.ASM):00029         ; EXIT: KEYCODE IN [A]
                      (           IO.ASM):00030         
34EB                  (           IO.ASM):00031         BADKEY:
34EB BD361A           (           IO.ASM):00032                 JSR     BOOP                              ; RAZZ
34EE 2002             (           IO.ASM):00033                 BRA     GK                                ; AND TRY AGAIN
                      (           IO.ASM):00034         
34F0                  (           IO.ASM):00035         GETKEY:
34F0 3475             (           IO.ASM):00036                 PSHS    U,X,Y,B,CC                        ; SAVE THESE
34F2                  (           IO.ASM):00037         GK:
34F2 3F               (           IO.ASM):00038                 SWI
34F3 23               (           IO.ASM):00039                 FCB     35
34F4 2708             (           IO.ASM):00040                 BEQ     KTEST                             ; got a key
34F6 0C58             (           IO.ASM):00041                 INC     RAND1                             ; GENERATE RANDOMNESS
34F8 2602             (           IO.ASM):00042                 BNE     >
34FA 0C59             (           IO.ASM):00043                 INC     RAND2
                      (           IO.ASM):00044         !
34FC 20F4             (           IO.ASM):00045                 BRA     GK
34FE                  (           IO.ASM):00046         KTEST:
34FE 9755             (           IO.ASM):00047                 STA     IOCHAR                            ; STORE THE KEYPRESS
                      (           IO.ASM):00048         
                      (           IO.ASM):00049         ; KEYCODE IN [A]
                      (           IO.ASM):00050         
3500                  (           IO.ASM):00051         QKEY:
3500 810D             (           IO.ASM):00052                 CMPA    #EOL                              ; "ENTER" IS FINE
3502 271A             (           IO.ASM):00053                 BEQ     CLICK
3504 8108             (           IO.ASM):00054                 CMPA    #BS                               ; SO IS "LEFT ARROW"
3506 2716             (           IO.ASM):00055                 BEQ     CLICK
                      (           IO.ASM):00056         
3508 8161             (           IO.ASM):00057                 CMPA    #$61                              ; LOWER-CASE ALPHA?
350A 250A             (           IO.ASM):00058                 BLO     PKICK                             ; NO, CHECK FOR OTHERS
350C 817B             (           IO.ASM):00059                 CMPA    #$7B                              ; NOTHING ABOVE "z" IS LEGAL
350E 24DB             (           IO.ASM):00060                 BHS     BADKEY
3510 8020             (           IO.ASM):00061                 SUBA    #$20                              ; CONVERT TO UPPER-CASE ALPHA
3512 9755             (           IO.ASM):00062                 STA     IOCHAR                            ; STORE THE KEYPRESS
3514 2008             (           IO.ASM):00063                 BRA     CLICK
                      (           IO.ASM):00064         
3516                  (           IO.ASM):00065         PKICK:
3516 815B             (           IO.ASM):00066                 CMPA    #$5B                              ; NOTHING BETWEEN "Z" AND "a"
3518 24D1             (           IO.ASM):00067                 BHS     BADKEY                            ; IS LEGAL
351A 8120             (           IO.ASM):00068                 CMPA    #$20                              ; NOTHING BELOW "SPACE"
351C 25CD             (           IO.ASM):00069                 BLO     BADKEY                            ; IS LEGAL EITHER
                      (           IO.ASM):00070         
                      (           IO.ASM):00071         ; "CLICK" SOUND FOR KEYS
                      (           IO.ASM):00072         
351E                  (           IO.ASM):00073         CLICK:
351E 3575             (           IO.ASM):00074                 PULS    U,X,Y,B,CC                        ; RESTORE THINGS
3520 9655             (           IO.ASM):00075                 LDA     IOCHAR                            ; RETRIEVE THE KEYPRESS
3522 39               (           IO.ASM):00076                 RTS
                      (           IO.ASM):00077         
                      (           IO.ASM):00078         
                      (           IO.ASM):00079         ; DELAY FOR KEYCLICK
                      (           IO.ASM):00080         
3523                  (           IO.ASM):00081         CDELAY:
3523 8E0100           (           IO.ASM):00082                 LDX     #CFREQ
3526                  (           IO.ASM):00083         CDEL:
3526 301F             (           IO.ASM):00084                 LEAX    -1,X
3528 26FC             (           IO.ASM):00085                 BNE     CDEL
352A 39               (           IO.ASM):00086                 RTS
                      (           IO.ASM):00087         
                      (           IO.ASM):00088         ; -------------------
                      (           IO.ASM):00089         ; READ A LINE OF TEXT
                      (           IO.ASM):00090         ; -------------------
                      (           IO.ASM):00091         
                      (           IO.ASM):00092         ; ENTRY: [ARG1] HAS ADDRESS OF CHAR BUFFER
                      (           IO.ASM):00093         ;        LENGTH OF BUFFER IN 1ST BYTE
                      (           IO.ASM):00094         ; EXIT: # CHARS READ IN [A]
                      (           IO.ASM):00095         
352B                  (           IO.ASM):00096         INPUT:
352B BD3750           (           IO.ASM):00097                 JSR     LINOUT                            ; FLUSH OUTPUT BUFFER
352E 0F54             (           IO.ASM):00098                 CLR     LINCNT                            ; RESET LINE COUNTER
3530 9E02             (           IO.ASM):00099                 LDX     ARG1                              ; GET ADDRESS OF INPUT BUFFER
3532 E680             (           IO.ASM):00100                 LDB     ,X+                               ; GET MAX # CHARS
3534 C002             (           IO.ASM):00101                 SUBB    #2                                ; LEAVE A MARGIN FOR ERROR
3536 D753             (           IO.ASM):00102                 STB     BINDEX                            ; SAVE MAX # CHARS
                      (           IO.ASM):00103         
3538 5F               (           IO.ASM):00104                 CLRB                                      ; RESET       INDEX
3539                  (           IO.ASM):00105         INLOOP:
3539 BD34F0           (           IO.ASM):00106                 JSR     GETKEY                            ; KEY IN [A] AND [IOCHAR]
353C 810D             (           IO.ASM):00107                 CMPA    #EOL                              ; IF EOL,
353E 2732             (           IO.ASM):00108                 BEQ     ENDLIN                            ; LINE IS DONE
3540 8108             (           IO.ASM):00109                 CMPA    #BS                               ; IF BACKSPACE,
3542 2725             (           IO.ASM):00110                 BEQ     GOBACK                            ; TAKE CARE OF IT
                      (           IO.ASM):00111         
3544 8141             (           IO.ASM):00112                 CMPA    #$41                              ; IF LOWER THAN ASCII "A,"
3546 2502             (           IO.ASM):00113                 BLO     SENDCH                            ; SEND THE CHARACTER
3548 8B20             (           IO.ASM):00114                 ADDA    #$20                              ; ELSE CONVERT TO LOWER-CASE
                      (           IO.ASM):00115         
354A                  (           IO.ASM):00116         SENDCH:
354A A785             (           IO.ASM):00117                 STA     B,X                               ; SEND CHAR TO BUFFER
354C 5C               (           IO.ASM):00118                 INCB                                      ; UPDATE INDEX
354D                  (           IO.ASM):00119         TOSCR:
354D 9655             (           IO.ASM):00120                 LDA     IOCHAR                            ; RETRIEVE KEY CHAR
354F 8D44             (           IO.ASM):00121                 BSR     CHAR                              ; ECHO CHAR TO SCREEN
3551 D153             (           IO.ASM):00122                 CMPB    BINDEX                            ; BUFFER FILLED?
3553 2404             (           IO.ASM):00123                 BHS     NOMORE                            ; YES -- INSIST ON BS OR EOL
3555 C13D             (           IO.ASM):00124                 CMPB    #61                               ; 2 SCREEN LINES FILLED?
3557 25E0             (           IO.ASM):00125                 BLO     INLOOP                            ; NO, KEEP GOING
                      (           IO.ASM):00126         
                      (           IO.ASM):00127         ; LINE FULL; INSIST ON EOL OR BACKSPACE
                      (           IO.ASM):00128         
3559                  (           IO.ASM):00129         NOMORE:
3559 BD34F0           (           IO.ASM):00130                 JSR     GETKEY                            ; GET NEXT KEY
355C 810D             (           IO.ASM):00131                 CMPA    #EOL                              ; IF EOL,
355E 2712             (           IO.ASM):00132                 BEQ     ENDLIN                            ; WE'RE FINE
3560 8108             (           IO.ASM):00133                 CMPA    #BS                               ; BACKSPACE
3562 2705             (           IO.ASM):00134                 BEQ     GOBACK                            ; IS OKAY TOO
3564 BD361A           (           IO.ASM):00135                 JSR     BOOP
3567 20F0             (           IO.ASM):00136                 BRA     NOMORE                            ; ELSE PERSIST
                      (           IO.ASM):00137         
                      (           IO.ASM):00138         ; HANDLE BACKSPACE
                      (           IO.ASM):00139         
3569                  (           IO.ASM):00140         GOBACK:
3569 5A               (           IO.ASM):00141                 DECB                                      ; BACK UP CHAR COUNT
356A 2AE1             (           IO.ASM):00142                 BPL     TOSCR                             ; SEND TO SCREEN IF NO UNDERFLOW
356C 5F               (           IO.ASM):00143                 CLRB                                      ; ELSE RESET COUNT
356D BD361A           (           IO.ASM):00144                 JSR     BOOP                              ; RAZZ
3570 20C7             (           IO.ASM):00145                 BRA     INLOOP                            ; AND TRY AGAIN
                      (           IO.ASM):00146         
                      (           IO.ASM):00147         ; HANDLE EOL
                      (           IO.ASM):00148         
3572                  (           IO.ASM):00149         ENDLIN:
3572 A785             (           IO.ASM):00150                 STA     B,X                               ; PUT EOL IN BUFFER
3574 8D1F             (           IO.ASM):00151                 BSR     CHAR                              ; AND ON SCREEN
3576 5C               (           IO.ASM):00152                 INCB                                      ; UPDATE CHAR COUNT
3577 D753             (           IO.ASM):00153                 STB     BINDEX                            ; SAVE IT HERE
                      (           IO.ASM):00154         
                      (           IO.ASM):00155         ; FALL THROUGH TO ...
                      (           IO.ASM):00156         
                      (           IO.ASM):00157         ; ---------------------
                      (           IO.ASM):00158         ; SCRIPT A LINE OF TEXT
                      (           IO.ASM):00159         ; ---------------------
                      (           IO.ASM):00160         
                      (           IO.ASM):00161         ; ENTRY: ADDRESS OF TEXT IN [X]
                      (           IO.ASM):00162         ;        LENGTH OF LINE IN [BINDEX]
                      (           IO.ASM):00163         
3579                  (           IO.ASM):00164         TOPRIN:
3579 0D5E             (           IO.ASM):00165                 TST     SCRIPT                            ; SCRIPTING ENABLED?
357B 2714             (           IO.ASM):00166                 BEQ     INPEX                             ; NO, EXIT IMMEDIATELY
357D B63F11           (           IO.ASM):00167                 LDA     ZCODE+ZSCRIP+1                    ; GET FLAGS BYTE
3580 8401             (           IO.ASM):00168                 ANDA    #1                                ; BIT 0 SET?
3582 270D             (           IO.ASM):00169                 BEQ     INPEX                             ; NO, IGNORE THE FOLLOWING
                      (           IO.ASM):00170         ;        LDA     #$FE                              ; ELSE
                      (           IO.ASM):00171         ;        STA     DEVNUM                            ; POINT TO PRINTER
3584 D653             (           IO.ASM):00172                 LDB     BINDEX                            ; START AT 1ST BUFFER CHAR
                      (           IO.ASM):00173         
                      (           IO.ASM):00174         
3586                  (           IO.ASM):00175         SCROUT:
3586 A680             (           IO.ASM):00176                 LDA     ,X+                               ; GRAB A CHAR FROM BUFFER
3588 3477             (           IO.ASM):00177                 PSHS    A,B,X,Y,U,CC
358A 3F               (           IO.ASM):00178                 SWI
358B 21               (           IO.ASM):00179                 FCB     33                                ;DISPLAY
358C 3577             (           IO.ASM):00180                 PULS    A,B,X,Y,U,CC
358E 5A               (           IO.ASM):00181                 DECB
358F 26F5             (           IO.ASM):00182                 BNE     SCROUT
3591                  (           IO.ASM):00183         INPEX:
                      (           IO.ASM):00184         ;        CLR     DEVNUM                            ; POINT BACK TO SCREEN
3591 9653             (           IO.ASM):00185                 LDA     BINDEX                            ; RETRIEVE # CHARS IN LINE
3593 39               (           IO.ASM):00186                 RTS
                      (           IO.ASM):00187         
3594                  (           IO.ASM):00188         SFLAG
3594 00               (           IO.ASM):00189                 FCB     0                                 ; FLAG TO SAVE SCRIPT STATE
                      (           IO.ASM):00190         
                      (           IO.ASM):00191         
                      (           IO.ASM):00192         ; -------------------
                      (           IO.ASM):00193         ; PRINT A SINGLE CHAR
                      (           IO.ASM):00194         ; -------------------
                      (           IO.ASM):00195         
                      (           IO.ASM):00196         ; ENTRY: ASCII CODE IN [A]
                      (           IO.ASM):00197         
3595                  (           IO.ASM):00198         CHAR:
3595 9755             (           IO.ASM):00199                 STA     IOCHAR                            ; SAVE CHAR HERE
3597 810D             (           IO.ASM):00200                 CMPA    #$0D
3599 2707             (           IO.ASM):00201                 BEQ     >
359B 3477             (           IO.ASM):00202                 PSHS    A,B,X,Y,U,CC
359D 3F               (           IO.ASM):00203                 SWI
359E 21               (           IO.ASM):00204                 FCB     33
359F 3577             (           IO.ASM):00205                 PULS    A,B,X,Y,U,CC
35A1 39               (           IO.ASM):00206                 RTS
                      (           IO.ASM):00207         !
35A2 3477             (           IO.ASM):00208                 PSHS    A,B,X,Y,U,CC
35A4 3F               (           IO.ASM):00209                 SWI
35A5 21               (           IO.ASM):00210                 FCB     33
35A6 860A             (           IO.ASM):00211                 LDA     #$0A
35A8 3F               (           IO.ASM):00212                 SWI
35A9 21               (           IO.ASM):00213                 FCB     33
35AA 3577             (           IO.ASM):00214                 PULS    A,B,X,Y,U,CC
35AC 39               (           IO.ASM):00215                 RTS
                      (           IO.ASM):00216         
                      (           IO.ASM):00217         ; --------------------------
                      (           IO.ASM):00218         ; PRINT CONTENTS OF [BUFFER]
                      (           IO.ASM):00219         ; --------------------------
                      (           IO.ASM):00220         
35AD                  (           IO.ASM):00221                 BUFOUT:
35AD D651             (           IO.ASM):00222                 LDB     CHRPNT                            ; # CHARS IN BUFFER
35AF 8EDBB0           (           IO.ASM):00223                 LDX     #BUFFER                           ; BUFFER ADDRESS
                      (           IO.ASM):00224         
                      (           IO.ASM):00225         
                      (           IO.ASM):00226         ; FALL THROUGH TO ...
                      (           IO.ASM):00227         
                      (           IO.ASM):00228         ; -------------
                      (           IO.ASM):00229         ; PRINT MESSAGE
                      (           IO.ASM):00230         ; -------------
                      (           IO.ASM):00231         
                      (           IO.ASM):00232         ; ENTRY: ADDRESS OF ASCII MESSAGE IN [X]
                      (           IO.ASM):00233         ;        LENGTH OF MESSAGE IN [B]
                      (           IO.ASM):00234         
35B2                  (           IO.ASM):00235         LINE:
35B2 D753             (           IO.ASM):00236                 STB     BINDEX                            ; SAVE LENGTH
35B4 5F               (           IO.ASM):00237                 CLRB                                      ; INIT INDEX
                      (           IO.ASM):00238         
35B5                  (           IO.ASM):00239         LN:
35B5 A685             (           IO.ASM):00240                 LDA     B,X                               ; GET A CHAR
35B7 BD3595           (           IO.ASM):00241                 JSR     CHAR
35BA 5C               (           IO.ASM):00242                 INCB
35BB D153             (           IO.ASM):00243                 CMPB    BINDEX
35BD 25F6             (           IO.ASM):00244                 BLO     LN
35BF 7E3579           (           IO.ASM):00245                 JMP     TOPRIN                            ; HANDLE SCRIPTING
                      (           IO.ASM):00246         
                      (           IO.ASM):00247         ; ----------------
                      (           IO.ASM):00248         ; CLEAR THE SCREEN
                      (           IO.ASM):00249         ; ----------------
                      (           IO.ASM):00250         
35C2                  (           IO.ASM):00251         CLS:
35C2 3477             (           IO.ASM):00252                 PSHS    A,B,X,Y,U,CC
35C4 3F               (           IO.ASM):00253                 SWI
35C5 18               (           IO.ASM):00254                 FCB     24                                ;String to OS
35C6 1B               (           IO.ASM):00255                 FCB     27
35C7 5B324A00         (           IO.ASM):00256                 FCN     '[2J'
35CB 3577             (           IO.ASM):00257                 PULS    A,B,X,Y,U,CC
35CD BD3609           (           IO.ASM):00258                 JSR     MOVECURSOR
35D0 0F54             (           IO.ASM):00259                 CLR     LINCNT          ; RESET LINE COUNTER
35D2 0F51             (           IO.ASM):00260                 CLR     CHRPNT          ; AND CHAR INDEX
35D4 39               (           IO.ASM):00261                 RTS
                      (           IO.ASM):00262         
                      (           IO.ASM):00263         
                      (           IO.ASM):00264         
35D5                  (           IO.ASM):00265         BOLD:
35D5 3477             (           IO.ASM):00266                 PSHS    A,B,X,Y,U,CC
35D7 3F               (           IO.ASM):00267                 SWI
35D8 18               (           IO.ASM):00268                 FCB     24                                ;String to OS
35D9 1B               (           IO.ASM):00269                 FCB     27
35DA 5B316D00         (           IO.ASM):00270                 FCN     '[1m'
35DE 3577             (           IO.ASM):00271                 PULS    A,B,X,Y,U,CC
35E0 39               (           IO.ASM):00272                 RTS
                      (           IO.ASM):00273         
35E1                  (           IO.ASM):00274         UNBOLD:
35E1 3477             (           IO.ASM):00275                 PSHS    A,B,X,Y,U,CC
35E3 3F               (           IO.ASM):00276                 SWI
35E4 18               (           IO.ASM):00277                 FCB     24                                ;String to OS
35E5 1B               (           IO.ASM):00278                 FCB     27
35E6 5B306D00         (           IO.ASM):00279                 FCN     '[0m'
35EA 3577             (           IO.ASM):00280                 PULS    A,B,X,Y,U,CC
35EC 39               (           IO.ASM):00281                 RTS
                      (           IO.ASM):00282         
35ED                  (           IO.ASM):00283         REVERSE:
35ED 3477             (           IO.ASM):00284                 PSHS    A,B,X,Y,U,CC
35EF 3F               (           IO.ASM):00285                 SWI
35F0 18               (           IO.ASM):00286                 FCB     24                                ;String to OS
35F1 1B               (           IO.ASM):00287                 FCB     27
35F2 5B376D00         (           IO.ASM):00288                 FCN     '[7m'
35F6 3577             (           IO.ASM):00289                 PULS    A,B,X,Y,U,CC
35F8 39               (           IO.ASM):00290                 RTS
                      (           IO.ASM):00291         
35F9                  (           IO.ASM):00292         HOME:
35F9 3477             (           IO.ASM):00293                 PSHS    A,B,X,Y,U,CC
35FB 3F               (           IO.ASM):00294                 SWI
35FC 18               (           IO.ASM):00295                 FCB     24                                ;String to OS
35FD 1B               (           IO.ASM):00296                 FCB     27
35FE 5B30303B30304800 (           IO.ASM):00297                 FCN     '[00;00H'
3606 3577             (           IO.ASM):00298                 PULS    A,B,X,Y,U,CC
3608 39               (           IO.ASM):00299                 RTS
                      (           IO.ASM):00300         
3609                  (           IO.ASM):00301         MOVECURSOR:
3609 3477             (           IO.ASM):00302                 PSHS    A,B,X,Y,U,CC
360B 3F               (           IO.ASM):00303                 SWI
360C 18               (           IO.ASM):00304                 FCB     24                                ;String to OS
360D 1B               (           IO.ASM):00305                 FCB     27
360E 5B32343B30304800 (           IO.ASM):00306                 FCN     '[24;00H'
3616 3577             (           IO.ASM):00307                 PULS    A,B,X,Y,U,CC
3618 39               (           IO.ASM):00308                 RTS
                      (           IO.ASM):00309         ; --------------
                      (           IO.ASM):00310         ; SOUND HANDLERS
                      (           IO.ASM):00311         ; --------------
                      (           IO.ASM):00312         
3619                  (           IO.ASM):00313         AINIT:
3619 39               (           IO.ASM):00314                 RTS
                      (           IO.ASM):00315         
                      (           IO.ASM):00316         ; DO THE RAZZ
361A                  (           IO.ASM):00317         BOOP:
                      (           IO.ASM):00318         
                      (           IO.ASM):00319         ; put sound boop here
                      (           IO.ASM):00320         
361A 39               (           IO.ASM):00321                 RTS
                      (           IO.ASM):00322         
                      (           IO.ASM):00323         ; TIME DELAY
                      (           IO.ASM):00324         
361B                  (           IO.ASM):00325         DELAY:
361B 8E1000           (           IO.ASM):00326                 LDX     #BFREQ                            ; INIT FREQUENCY
361E                  (           IO.ASM):00327         DELOOP:
361E 301F             (           IO.ASM):00328                 LEAX    -1,X
3620 26FC             (           IO.ASM):00329                 BNE     DELOOP
3622 39               (           IO.ASM):00330                 RTS
                      (           IO.ASM):00331         
                      (           IO.ASM):00332         ;-----------------------------------------------------------------------------
                      (     cubixzip.asm):00070                 INCLUDE SCREEN.ASM
                      (       SCREEN.ASM):00001         ;       PAGE
                      (       SCREEN.ASM):00002         ;       SBTTL "--- SCREEN & PRINTER I/O ---"
                      (       SCREEN.ASM):00003         
                      (       SCREEN.ASM):00004         ; ------------
                      (       SCREEN.ASM):00005         ; RESTART GAME
                      (       SCREEN.ASM):00006         ; ------------
                      (       SCREEN.ASM):00007         
3623                  (       SCREEN.ASM):00008         ZSTART:
3623 BD371F           (       SCREEN.ASM):00009                 JSR     ZCRLF                             ; FLUSH OUTPUT BUFFER
3626 0F5E             (       SCREEN.ASM):00010                 CLR     SCRIPT                            ; DISABLE SCRIPTING [ASK 5/28/85]
3628 B63F11           (       SCREEN.ASM):00011                 LDA     ZCODE+ZSCRIP+1
362B B73594           (       SCREEN.ASM):00012                 STA     SFLAG
                      (       SCREEN.ASM):00013         ; FALL THROUGH TO ...
                      (       SCREEN.ASM):00014         
                      (       SCREEN.ASM):00015         ; ---------
                      (       SCREEN.ASM):00016         ; COLDSTART
                      (       SCREEN.ASM):00017         ; ---------
                      (       SCREEN.ASM):00018         
362E                  (       SCREEN.ASM):00019         COLD:
362E 0F5E             (       SCREEN.ASM):00020                 CLR     SCRIPT                            ; DISABLE SCRIPTING
3630 BD35C2           (       SCREEN.ASM):00021                 JSR     CLS                               ; A CLEAN SLATE
3633 BD35D5           (       SCREEN.ASM):00022                 JSR     BOLD
3636 8E3644           (       SCREEN.ASM):00023                 LDX     #LOADM                            ;
3639 C625             (       SCREEN.ASM):00024                 LDB     #LOADML
363B BD3A4E           (       SCREEN.ASM):00025                 JSR     DLINE                             ; "LOADING GAME ..."
363E BD35E1           (       SCREEN.ASM):00026                 JSR     UNBOLD
3641 7E2800           (       SCREEN.ASM):00027                 JMP     START                             ; AND DO A WARMSTART
                      (       SCREEN.ASM):00028         
3644                  (       SCREEN.ASM):00029         LOADM:
3644 1B               (       SCREEN.ASM):00030                 FCB     27
3645 5B31303B31304820 (       SCREEN.ASM):00031                 FCC     "[10;10H "
364D 5448452053544F52 (       SCREEN.ASM):00032                 FCC     "THE STORY IS LOADING ..."
     59204953204C4F41
     44494E47202E2E2E
3665 0D0D0D0D         (       SCREEN.ASM):00033                 FCB     13,13,13,13
3669                  (       SCREEN.ASM):00034         loadlen:
     0025             (       SCREEN.ASM):00035         LOADML          EQU loadlen-LOADM
                      (       SCREEN.ASM):00036         
                      (       SCREEN.ASM):00037         ; -----
                      (       SCREEN.ASM):00038         ; ERROR
                      (       SCREEN.ASM):00039         ; -----
                      (       SCREEN.ASM):00040         
                      (       SCREEN.ASM):00041         ; ENTRY: ERROR CODE # IN [A]
                      (       SCREEN.ASM):00042         
3669                  (       SCREEN.ASM):00043         INTERR:
3669 0D               (       SCREEN.ASM):00044                 FCB     EOL
366A 494E5445524E414C (       SCREEN.ASM):00045                 FCC     "INTERNAL ERROR #"
     204552524F522023
367A                  (       SCREEN.ASM):00046         interrlen:
     0011             (       SCREEN.ASM):00047         IERRL           EQU interrlen-INTERR
                      (       SCREEN.ASM):00048         
367A                  (       SCREEN.ASM):00049         ZERROR:
367A 3402             (       SCREEN.ASM):00050                 PSHS    A                                 ; SAVE CODE #
367C BD371F           (       SCREEN.ASM):00051                 JSR     ZCRLF                             ; FLUSH BUFFER
367F 8E3669           (       SCREEN.ASM):00052                 LDX     #INTERR
3682 C611             (       SCREEN.ASM):00053                 LDB     #IERRL
3684 BD35B2           (       SCREEN.ASM):00054                 JSR     LINE                              ; "INTERNAL ERROR #"
3687 3502             (       SCREEN.ASM):00055                 PULS    A                                 ; RETRIEVE CODE #
3689 9740             (       SCREEN.ASM):00056                 STA     TEMP+1
368B 0F3F             (       SCREEN.ASM):00057                 CLR     TEMP
368D BD3004           (       SCREEN.ASM):00058                 JSR     NUMBER                            ; CONVERT ERROR CODE #
3690 BD3745           (       SCREEN.ASM):00059                 JSR     CR1                               ; AND SHOW IT
                      (       SCREEN.ASM):00060         
                      (       SCREEN.ASM):00061         ; FALL THROUGH TO ...
                      (       SCREEN.ASM):00062         
                      (       SCREEN.ASM):00063         ; ----
                      (       SCREEN.ASM):00064         ; QUIT
                      (       SCREEN.ASM):00065         ; ----
                      (       SCREEN.ASM):00066         
3693                  (       SCREEN.ASM):00067         ZQUIT:
3693 8E369F           (       SCREEN.ASM):00068                 LDX     #ENDSES
3696 C60F             (       SCREEN.ASM):00069                 LDB     #ENDSL
3698 BD35B2           (       SCREEN.ASM):00070                 JSR     LINE                              ; "END OF SESSION"
                      (       SCREEN.ASM):00071         
369B 3F               (       SCREEN.ASM):00072                 SWI
369C 00               (       SCREEN.ASM):00073                 FCB     00
                      (       SCREEN.ASM):00074         
                      (       SCREEN.ASM):00075         
369D                  (       SCREEN.ASM):00076         FREEZE:
369D 20FE             (       SCREEN.ASM):00077                 BRA     FREEZE                            ; STOP DEAD
                      (       SCREEN.ASM):00078         
369F                  (       SCREEN.ASM):00079         ENDSES:
369F 454E44204F462053 (       SCREEN.ASM):00080                 FCC     "END OF SESSION"
     455353494F4E
36AD                  (       SCREEN.ASM):00081         VCODE:
36AD 0D               (       SCREEN.ASM):00082                 FCB     EOL                               ; SHARED EOL CHAR
36AE                  (       SCREEN.ASM):00083         endseslen:
     000F             (       SCREEN.ASM):00084         ENDSL           EQU endseslen-ENDSES
                      (       SCREEN.ASM):00085         
                      (       SCREEN.ASM):00086         ; --------------------------
                      (       SCREEN.ASM):00087         ; DISPLAY ZIP VERSION NUMBER
                      (       SCREEN.ASM):00088         ; --------------------------
                      (       SCREEN.ASM):00089         
36AE 3638303920435542 (       SCREEN.ASM):00090                 FCC     "6809 CUBIX VERSION"
     4958205645525349
     4F4E
36C0 0D               (       SCREEN.ASM):00091                 FCB     EOL
36C1                  (       SCREEN.ASM):00092         vcodelen:
     0014             (       SCREEN.ASM):00093         VCODEL          EQU vcodelen-VCODE
                      (       SCREEN.ASM):00094         
36C1                  (       SCREEN.ASM):00095         VERNUM:
36C1 8E36AD           (       SCREEN.ASM):00096                 LDX     #VCODE
36C4 C614             (       SCREEN.ASM):00097                 LDB     #VCODEL
36C6 7E35B2           (       SCREEN.ASM):00098                 JMP     LINE
                      (       SCREEN.ASM):00099         
                      (       SCREEN.ASM):00100         ; -----------------
                      (       SCREEN.ASM):00101         ; PRINT A CHARACTER
                      (       SCREEN.ASM):00102         ; -----------------
36C9                  (       SCREEN.ASM):00103         COUT:
36C9 8EDBB0           (       SCREEN.ASM):00104                 LDX     #BUFFER                           ; POINT TO I/O BUFFER
36CC D651             (       SCREEN.ASM):00105                 LDB     CHRPNT                            ; GET LINE INDEX
36CE 810D             (       SCREEN.ASM):00106                 CMPA    #EOL                              ; IF THIS IS A CR,
36D0 274D             (       SCREEN.ASM):00107                 BEQ     ZCRLF                             ; HANDLE AS SUCH
36D2 8120             (       SCREEN.ASM):00108                 CMPA    #SPACE                            ; IGNORE OTHER CONTROLS
36D4 2508             (       SCREEN.ASM):00109                 BLO     COUT1
                      (       SCREEN.ASM):00110         
36D6 A785             (       SCREEN.ASM):00111                 STA     B,X                               ; SEND CHAR TO BUFFER
36D8 C14F             (       SCREEN.ASM):00112                 CMPB    #79                               ; END OF SCREEN LINE?
36DA 2403             (       SCREEN.ASM):00113                 BHS     FLUSH                             ; YES, SO FLUSH CURRENT BUFFER
36DC 0C51             (       SCREEN.ASM):00114                 INC     CHRPNT                            ; ELSE UPDATE INDEX
36DE                  (       SCREEN.ASM):00115         COUT1:
36DE 39               (       SCREEN.ASM):00116                 RTS                                       ; AND LEAVE
                      (       SCREEN.ASM):00117         
                      (       SCREEN.ASM):00118         ; FLUSH CONTENTS OF [BUFFER]
                      (       SCREEN.ASM):00119         
36DF                  (       SCREEN.ASM):00120         FLUSH:
36DF 8620             (       SCREEN.ASM):00121                 LDA     #SPACE
36E1                  (       SCREEN.ASM):00122         FLUSH1:
36E1 A185             (       SCREEN.ASM):00123                 CMPA    B,X                               ; FIND LAST SPACE CHAR
36E3 2705             (       SCREEN.ASM):00124                 BEQ     FLUSH2                            ; IN CURRENT LINE
36E5 5A               (       SCREEN.ASM):00125                 DECB
36E6 26F9             (       SCREEN.ASM):00126                 BNE     FLUSH1                            ; KEEP SCANNING
36E8 C64F             (       SCREEN.ASM):00127                 LDB     #79                               ; SEND ENTIRE LINE IF NONE FOUND
                      (       SCREEN.ASM):00128         
36EA                  (       SCREEN.ASM):00129         FLUSH2:
36EA D752             (       SCREEN.ASM):00130                 STB     CPSAV                             ; SAVE
36EC D751             (       SCREEN.ASM):00131                 STB     CHRPNT                            ; # CHARS IN LINE
36EE BD371F           (       SCREEN.ASM):00132                 JSR     ZCRLF                             ; OUTPUT 1ST PART OF LINE
                      (       SCREEN.ASM):00133         
                      (       SCREEN.ASM):00134         ; START NEW LINE WITH REMAINDER OF OLD
                      (       SCREEN.ASM):00135         
36F1                  (       SCREEN.ASM):00136         FLUSH3:
36F1 0C52             (       SCREEN.ASM):00137                 INC     CPSAV                             ; GET 1ST CHAR
36F3 D652             (       SCREEN.ASM):00138                 LDB     CPSAV                             ; OF REMAINDER
36F5 C14F             (       SCREEN.ASM):00139                 CMPB    #79                               ; END OF LINE YET?
36F7 2301             (       SCREEN.ASM):00140                 BLS     FLUSH4                            ; NO, MOVE IT FORWARD
36F9 39               (       SCREEN.ASM):00141                 RTS                                       ; ELSE WE'RE DONE HERE
                      (       SCREEN.ASM):00142         
36FA                  (       SCREEN.ASM):00143         FLUSH4:
36FA 8EDBB0           (       SCREEN.ASM):00144                 LDX     #BUFFER                           ; POINT TO BUFFER
36FD A685             (       SCREEN.ASM):00145                 LDA     B,X                               ; GET OLD CHAR
36FF D651             (       SCREEN.ASM):00146                 LDB     CHRPNT                            ; THIS WAS RESET BY CRLF
3701 A785             (       SCREEN.ASM):00147                 STA     B,X                               ; MOVE TO START OF BUFFER
3703 0C51             (       SCREEN.ASM):00148                 INC     CHRPNT                            ; NEXT POSITION
3705 20EA             (       SCREEN.ASM):00149                 BRA     FLUSH3                            ; KEEP MOVING
                      (       SCREEN.ASM):00150         
3707                  (       SCREEN.ASM):00151         MORES:
3707 5B6D6F72655D     (       SCREEN.ASM):00152                 FCC     "[more]"
370D                  (       SCREEN.ASM):00153         morlen:
     0006             (       SCREEN.ASM):00154         MOREL           EQU morlen-MORES
370D                  (       SCREEN.ASM):00155         MCLR:
370D 080808080808     (       SCREEN.ASM):00156                 FCB     08,08,08,08,08,08
3713 202020202020     (       SCREEN.ASM):00157                 FCC     "      "
3719 080808080808     (       SCREEN.ASM):00158                 FCB     08,08,08,08,08,08
371F                  (       SCREEN.ASM):00159         mclrlen:
     0012             (       SCREEN.ASM):00160         MCLRL           EQU mclrlen-MCLR
                      (       SCREEN.ASM):00161         
                      (       SCREEN.ASM):00162         
                      (       SCREEN.ASM):00163         ; ---------------
                      (       SCREEN.ASM):00164         ; CARRIAGE RETURN
                      (       SCREEN.ASM):00165         ; ---------------
371F                  (       SCREEN.ASM):00166         ZCRLF:
371F 0C54             (       SCREEN.ASM):00167                 INC     LINCNT                            ; NEW LINE GOING OUT
3721 9654             (       SCREEN.ASM):00168                 LDA     LINCNT
3723 810D             (       SCREEN.ASM):00169                 CMPA    #13                               ; 13 LINES SENT YET?
3725 251E             (       SCREEN.ASM):00170                 BLO     CR1                               ; NO, KEEP GOING
                      (       SCREEN.ASM):00171         
3727 BD375A           (       SCREEN.ASM):00172                 JSR     ZUSL                              ; UPDATE STATUS LINE
                      (       SCREEN.ASM):00173         
372A BD35D5           (       SCREEN.ASM):00174                 JSR     BOLD
372D 8E3707           (       SCREEN.ASM):00175                 LDX     #MORES                            ; "[MORE]"
3730 C606             (       SCREEN.ASM):00176                 LDB     #MOREL
3732 BD3A4E           (       SCREEN.ASM):00177                 JSR     DLINE
3735 BD35E1           (       SCREEN.ASM):00178                 JSR     UNBOLD
                      (       SCREEN.ASM):00179         
3738 BD34F0           (       SCREEN.ASM):00180                 JSR     GETKEY                            ; GET A KEYPRESS
                      (       SCREEN.ASM):00181         
373B 8E370D           (       SCREEN.ASM):00182                 LDX     #MCLR                             ; CLEAR LINE
373E C612             (       SCREEN.ASM):00183                 LDB     #MCLRL
3740 BD3A4E           (       SCREEN.ASM):00184                 JSR     DLINE
                      (       SCREEN.ASM):00185         
3743 0F54             (       SCREEN.ASM):00186                 CLR     LINCNT                            ; RESET LINE COUNTER
                      (       SCREEN.ASM):00187         
3745                  (       SCREEN.ASM):00188         CR1:
3745 D651             (       SCREEN.ASM):00189                 LDB     CHRPNT
3747 8EDBB0           (       SCREEN.ASM):00190                 LDX     #BUFFER
374A 860D             (       SCREEN.ASM):00191                 LDA     #EOL                              ; INSTALL AN EOL
374C A785             (       SCREEN.ASM):00192                 STA     B,X                               ; AT END OF CURRENT LINE
374E 0C51             (       SCREEN.ASM):00193                 INC     CHRPNT                            ; ADD IT TO CHAR COUNT
                      (       SCREEN.ASM):00194         
3750                  (       SCREEN.ASM):00195         LINOUT:
3750 0D51             (       SCREEN.ASM):00196                 TST     CHRPNT                            ; IF NO CHARS IN BUFFER
3752 2705             (       SCREEN.ASM):00197                 BEQ     SCDONE                            ; DON'T PRINT ANYTHING
3754                  (       SCREEN.ASM):00198         OUTPUT:
3754 BD35AD           (       SCREEN.ASM):00199                 JSR     BUFOUT                            ; ELSE DISPLAY BUFFER
3757 0F51             (       SCREEN.ASM):00200                 CLR     CHRPNT                            ; RESET CHAR INDEX
3759                  (       SCREEN.ASM):00201         SCDONE:
3759 39               (       SCREEN.ASM):00202                 RTS                                       ; AND RETURN
                      (       SCREEN.ASM):00203         
                      (       SCREEN.ASM):00204         ; ------------------
                      (       SCREEN.ASM):00205         ; UPDATE STATUS LINE
                      (       SCREEN.ASM):00206         ; ------------------
                      (       SCREEN.ASM):00207         
375A                  (       SCREEN.ASM):00208         ZUSL:
375A 9651             (       SCREEN.ASM):00209                 LDA     CHRPNT                            ; SAVE ALL Z-STRING VARS
375C D62B             (       SCREEN.ASM):00210                 LDB     STBYTF
375E 109E2C           (       SCREEN.ASM):00211                 LDY     ZSTWRD
3761 3436             (       SCREEN.ASM):00212                 PSHS    X,Y,D
3763 961A             (       SCREEN.ASM):00213                 LDA     MPCH                              ; HIGH BIT OF MPC
3765 D653             (       SCREEN.ASM):00214                 LDB     BINDEX
3767 9E1B             (       SCREEN.ASM):00215                 LDX     MPCM                              ; LOW BYTES OF MPC
3769 109E29           (       SCREEN.ASM):00216                 LDY     CSTEMP                            ; TEMP & PERM TOGETHER!
376C 3436             (       SCREEN.ASM):00217                 PSHS    X,Y,D
                      (       SCREEN.ASM):00218         
376E 108EDB60         (       SCREEN.ASM):00219                 LDY     #OBUFSAV                          ; MOVE OUTPUT BUFFER
3772 8EDBB0           (       SCREEN.ASM):00220                 LDX     #BUFFER                           ; TO TEMPORARY STORAGE
3775 C620             (       SCREEN.ASM):00221                 LDB     #SPACE                            ; CLEAR [BUFFER] WITH SPACES
3777                  (       SCREEN.ASM):00222         ZUSL1:
3777 A684             (       SCREEN.ASM):00223                 LDA     ,X
3779 E780             (       SCREEN.ASM):00224                 STB     ,X+
377B A7A0             (       SCREEN.ASM):00225                 STA     ,Y+
377D 8CDC00           (       SCREEN.ASM):00226                 CMPX    #BUFFER+80
3780 25F5             (       SCREEN.ASM):00227                 BLO     ZUSL1
                      (       SCREEN.ASM):00228         
                      (       SCREEN.ASM):00229         ; DISPLAY ROOM NAME
                      (       SCREEN.ASM):00230         
3782 0F51             (       SCREEN.ASM):00231                 CLR     CHRPNT                            ; RESET CHAR INDEX
3784 0F5E             (       SCREEN.ASM):00232                 CLR     SCRIPT                            ; DISABLE SCRIPTING
                      (       SCREEN.ASM):00233         
3786 8610             (       SCREEN.ASM):00234                 LDA     #$10                              ; GLOBAL VAR #0 (ROOM #)
3788 BD29BD           (       SCREEN.ASM):00235                 JSR     VARGET
378B 9640             (       SCREEN.ASM):00236                 LDA     TEMP+1
378D BD2C7F           (       SCREEN.ASM):00237                 JSR     PRNTDC                            ; GET SHORT DESC INTO [BUFFER]
                      (       SCREEN.ASM):00238         
3790 8628             (       SCREEN.ASM):00239                 LDA     #40                               ; ADVANCE BUFFER INDEX
3792 9751             (       SCREEN.ASM):00240                 STA     CHRPNT                            ; INTO SCORING POSITION
3794 8620             (       SCREEN.ASM):00241                 LDA     #SPACE                            ; PRINT A SPACE
3796 BD36C9           (       SCREEN.ASM):00242                 JSR     COUT                              ; TO SEPARATE THINGS (BM 12/6/84)
                      (       SCREEN.ASM):00243         
3799 8611             (       SCREEN.ASM):00244                 LDA     #$11                              ; FETCH GLOBAL VARIABLE
379B BD29BD           (       SCREEN.ASM):00245                 JSR     VARGET                            ; #1 (SCORE/HOURS)
379E 0D50             (       SCREEN.ASM):00246                 TST     TIMEFL                            ; TIME MODE?
37A0 2607             (       SCREEN.ASM):00247                 BNE     PTIME                             ; YES IF NZ
                      (       SCREEN.ASM):00248         
                      (       SCREEN.ASM):00249         ; PRINT SCORE
                      (       SCREEN.ASM):00250         
37A2 BD3004           (       SCREEN.ASM):00251                 JSR     NUMBER                            ; PRINT THE VALUE
37A5 862F             (       SCREEN.ASM):00252                 LDA     #$2F                              ; ASCII SLASH
37A7 2013             (       SCREEN.ASM):00253                 BRA     MOVEP
                      (       SCREEN.ASM):00254         
                      (       SCREEN.ASM):00255         ; PRINT TIME (HOURS)
                      (       SCREEN.ASM):00256         
37A9                  (       SCREEN.ASM):00257         PTIME:
37A9 9640             (       SCREEN.ASM):00258                 LDA     TEMP+1
37AB 2602             (       SCREEN.ASM):00259                 BNE     PTIME1                            ; 00 IS REALLY 24
37AD 8618             (       SCREEN.ASM):00260                 LDA     #24
37AF                  (       SCREEN.ASM):00261         PTIME1:
37AF 810C             (       SCREEN.ASM):00262                 CMPA    #12
37B1 2F04             (       SCREEN.ASM):00263                 BLE     PTIME2                            ; IF HOURS IS GREATER THAN 12,
37B3 800C             (       SCREEN.ASM):00264                 SUBA    #12                               ; CONVERT TO 12-HOUR TIME
37B5 9740             (       SCREEN.ASM):00265                 STA     TEMP+1
37B7                  (       SCREEN.ASM):00266         PTIME2:
37B7 BD3004           (       SCREEN.ASM):00267                 JSR     NUMBER                            ; SHOW HOURS VALUE
37BA 863A             (       SCREEN.ASM):00268                 LDA     #$3A                              ; ASCII COLON
                      (       SCREEN.ASM):00269         
37BC                  (       SCREEN.ASM):00270         MOVEP:
37BC BD36C9           (       SCREEN.ASM):00271                 JSR     COUT                              ; SEND COLON (OR SLASH)
37BF 8612             (       SCREEN.ASM):00272                 LDA     #$12                              ; GLOBAL VAR #2 (MOVES/MINUTES)
37C1 BD29BD           (       SCREEN.ASM):00273                 JSR     VARGET
37C4 0D50             (       SCREEN.ASM):00274                 TST     TIMEFL                            ; TIME MODE?
37C6 272E             (       SCREEN.ASM):00275                 BEQ     PNUM                              ; NO, DO MOVES
                      (       SCREEN.ASM):00276         
                      (       SCREEN.ASM):00277         ; PRINT MINUTES
                      (       SCREEN.ASM):00278         
37C8 9640             (       SCREEN.ASM):00279                 LDA     TEMP+1
37CA 810A             (       SCREEN.ASM):00280                 CMPA    #10                               ; IF LESS THAN 10 MINUTES,
37CC 2405             (       SCREEN.ASM):00281                 BHS     MOVEP1
37CE 8630             (       SCREEN.ASM):00282                 LDA     #$30                              ; ADD ASCII ZERO FOR PADDING
37D0 BD36C9           (       SCREEN.ASM):00283                 JSR     COUT
                      (       SCREEN.ASM):00284         
37D3                  (       SCREEN.ASM):00285         MOVEP1:
37D3 BD3004           (       SCREEN.ASM):00286                 JSR     NUMBER                            ; SHOW MINUTES
                      (       SCREEN.ASM):00287         
                      (       SCREEN.ASM):00288         ; PRINT "AM/PM"
                      (       SCREEN.ASM):00289         
37D6 8620             (       SCREEN.ASM):00290                 LDA     #SPACE                            ; SEPARATE TIMING
37D8 BD36C9           (       SCREEN.ASM):00291                 JSR     COUT                              ; FROM "AM/PM"
37DB 8611             (       SCREEN.ASM):00292                 LDA     #$11                              ; GLOBAL #1 AGAIN
37DD BD29BD           (       SCREEN.ASM):00293                 JSR     VARGET
37E0 9640             (       SCREEN.ASM):00294                 LDA     TEMP+1
37E2 810C             (       SCREEN.ASM):00295                 CMPA    #12                               ; PAST NOON?
37E4 2404             (       SCREEN.ASM):00296                 BHS     USEPM                             ; YES, IT'S PM
37E6 8641             (       SCREEN.ASM):00297                 LDA     #$41                              ; "A"
37E8 2002             (       SCREEN.ASM):00298                 BRA     DOM
37EA                  (       SCREEN.ASM):00299         USEPM:
37EA 8650             (       SCREEN.ASM):00300                 LDA     #$50                              ; "P"
37EC                  (       SCREEN.ASM):00301         DOM:
37EC BD36C9           (       SCREEN.ASM):00302                 JSR     COUT
37EF 864D             (       SCREEN.ASM):00303                 LDA     #$4D                              ; "M"
37F1 BD36C9           (       SCREEN.ASM):00304                 JSR     COUT
37F4 2003             (       SCREEN.ASM):00305                 BRA     AHEAD                             ; DONE!
                      (       SCREEN.ASM):00306         
                      (       SCREEN.ASM):00307         ; PRINT # MOVES
                      (       SCREEN.ASM):00308         
37F6                  (       SCREEN.ASM):00309         PNUM:
37F6 BD3004           (       SCREEN.ASM):00310                 JSR     NUMBER                            ; SIMPLE, EH?
                      (       SCREEN.ASM):00311         
37F9                  (       SCREEN.ASM):00312         AHEAD:
37F9 BD35F9           (       SCREEN.ASM):00313                 JSR     HOME
37FC BD35ED           (       SCREEN.ASM):00314                 JSR     REVERSE
37FF BD3745           (       SCREEN.ASM):00315                 JSR     CR1                               ; DUMP BUFFER
3802 BD35E1           (       SCREEN.ASM):00316                 JSR     UNBOLD
                      (       SCREEN.ASM):00317         
3805 108EDB60         (       SCREEN.ASM):00318                 LDY     #OBUFSAV                          ; POINT TO "SAVE" BUFFER
3809 8EDBB0           (       SCREEN.ASM):00319                 LDX     #BUFFER                           ; POINT TO OUTPUT BUFFER
380C                  (       SCREEN.ASM):00320         USLEND:
380C A6A0             (       SCREEN.ASM):00321                 LDA     ,Y+
380E A780             (       SCREEN.ASM):00322                 STA     ,X+                               ; RESTORE PREVIOUS CONTENTS
3810 8CDBFF           (       SCREEN.ASM):00323                 CMPX    #BUFFER+79
3813 25F7             (       SCREEN.ASM):00324                 BLO     USLEND
                      (       SCREEN.ASM):00325         
                      (       SCREEN.ASM):00326         
3815 3536             (       SCREEN.ASM):00327                 PULS    X,Y,D                             ; RESTORE EVERYTHING
3817 109F29           (       SCREEN.ASM):00328                 STY     CSTEMP
381A 9F1B             (       SCREEN.ASM):00329                 STX     MPCM
381C D753             (       SCREEN.ASM):00330                 STB     BINDEX
381E 971A             (       SCREEN.ASM):00331                 STA     MPCH
3820 3536             (       SCREEN.ASM):00332                 PULS    X,Y,D
3822 109F2C           (       SCREEN.ASM):00333                 STY     ZSTWRD
3825 D72B             (       SCREEN.ASM):00334                 STB     STBYTF
3827 9751             (       SCREEN.ASM):00335                 STA     CHRPNT
3829 035E             (       SCREEN.ASM):00336                 COM     SCRIPT                            ; RE-ENABLE SCRIPTING
382B 0F1F             (       SCREEN.ASM):00337                 CLR     MPCFLG                            ; MPC NO LONGER VALID
382D BD35E1           (       SCREEN.ASM):00338                 JSR     UNBOLD
3830 BD3609           (       SCREEN.ASM):00339                 JSR     MOVECURSOR
3833 39               (       SCREEN.ASM):00340                 RTS
                      (     cubixzip.asm):00071                 INCLUDE DISK.ASM
                      (         DISK.ASM):00001         ;       PAGE
                      (         DISK.ASM):00002         ;       SBTTL "--- DISK I/O ---"
                      (         DISK.ASM):00003         
                      (         DISK.ASM):00004         
                      (         DISK.ASM):00005         ; ------------------------
                      (         DISK.ASM):00006         ; READ A Z-BLOCK FROM DISK
                      (         DISK.ASM):00007         ; ------------------------
                      (         DISK.ASM):00008         
                      (         DISK.ASM):00009         ; ENTRY: DRIVE # (0 OR 1) IN [DRIVE]
                      (         DISK.ASM):00010         ;        BLOCK # IN [DBLOCK]
                      (         DISK.ASM):00011         ;        BUFFER ADDRESS IN [DBUFF]
3834                  (         DISK.ASM):00012         OPENGAMEDSK:
3834 3F               (         DISK.ASM):00013                 SWI
3835 0A               (         DISK.ASM):00014                 FCB     10
3836 10260116         (         DISK.ASM):00015                 LBNE    DERR2                             ; FILE ERROR
383A CEDC00           (         DISK.ASM):00016                 LDU     #INFCB                            ; OPEN FILE
383D 3F               (         DISK.ASM):00017                 SWI
383E 37               (         DISK.ASM):00018                 FCB     55
383F 39               (         DISK.ASM):00019                 RTS
3840                  (         DISK.ASM):00020         GETDSK:
3840 3476             (         DISK.ASM):00021                 PSHS    X,Y,U,D                           ; SAVE VARIABLES
3842 CEDC00           (         DISK.ASM):00022                 LDU     #INFCB                            ; REWIND FILE
3845 3F               (         DISK.ASM):00023                 SWI
3846 3E               (         DISK.ASM):00024                 FCB     62
3847 DC4C             (         DISK.ASM):00025                 LDD     DBLOCK                            ; GO TO DBLOCK POSITION
3849 B738A8           (         DISK.ASM):00026                 STA     DTEMP
                      (         DISK.ASM):00027         !
384C 8100             (         DISK.ASM):00028                 CMPA    #$00                              ; HOW MANY BLOCKS OF $10000 DO WE NEED TO GET
384E 2718             (         DISK.ASM):00029                 BEQ     GETDSK1                           ; NONE, SKIP
3850 CCFFFF           (         DISK.ASM):00030                 LDD     #$FFFF
3853 CEDC00           (         DISK.ASM):00031                 LDU     #INFCB                            ;
3856 3F               (         DISK.ASM):00032                 SWI
3857 3F               (         DISK.ASM):00033                 FCB     63
3858 CC0001           (         DISK.ASM):00034                 LDD     #1
385B CEDC00           (         DISK.ASM):00035                 LDU     #INFCB                            ;
385E 3F               (         DISK.ASM):00036                 SWI
385F 3F               (         DISK.ASM):00037                 FCB     63
3860 7A38A8           (         DISK.ASM):00038                 DEC     DTEMP
3863 B638A8           (         DISK.ASM):00039                 LDA     DTEMP
3866 20E4             (         DISK.ASM):00040                 BRA     <
3868                  (         DISK.ASM):00041         GETDSK1:
3868 DC4C             (         DISK.ASM):00042                 LDD     DBLOCK                            ; HOW MANY BLOCKS OF <$10000 DO WE NEED TO GET
386A 1F98             (         DISK.ASM):00043                 TFR     B,A
386C C600             (         DISK.ASM):00044                 LDB     #$00
386E CEDC00           (         DISK.ASM):00045                 LDU     #INFCB                            ;
3871 3F               (         DISK.ASM):00046                 SWI
3872 3F               (         DISK.ASM):00047                 FCB     63
3873 3F               (         DISK.ASM):00048                 SWI
3874 3B               (         DISK.ASM):00049                 FCB     59
                      (         DISK.ASM):00050         ; READ 256 BYTES
3875 DC4C             (         DISK.ASM):00051                 LDD     DBLOCK
3877 C401             (         DISK.ASM):00052                 ANDB    #01
3879 1F98             (         DISK.ASM):00053                 TFR     B,A
387B C600             (         DISK.ASM):00054                 LDB     #$00
387D F738A8           (         DISK.ASM):00055                 STB     DTEMP
3880 C3DC0A           (         DISK.ASM):00056                 ADDD    #INFCB+10
3883 1F02             (         DISK.ASM):00057                 TFR     D,Y                               ; D SHOULD CONTAIN START ADDRESS IN BUFFER
                      (         DISK.ASM):00058         !
3885 1F21             (         DISK.ASM):00059                 TFR     Y,X
3887 A680             (         DISK.ASM):00060                 LDA     ,X+                               ; GET BYTE
3889 1F12             (         DISK.ASM):00061                 TFR     X,Y
388B 9E4A             (         DISK.ASM):00062                 LDX     DBUFF
388D A784             (         DISK.ASM):00063                 STA     ,X
388F 0C4B             (         DISK.ASM):00064                 INC     DBUFF+1
3891 2602             (         DISK.ASM):00065                 BNE     BUFINC
3893 0C4A             (         DISK.ASM):00066                 INC     DBUFF
3895                  (         DISK.ASM):00067         BUFINC:
3895 7A38A8           (         DISK.ASM):00068                 DEC     DTEMP
3898 F638A8           (         DISK.ASM):00069                 LDB     DTEMP
389B C100             (         DISK.ASM):00070                 CMPB    #$00
389D 26E6             (         DISK.ASM):00071                 BNE     <
389F 0C4D             (         DISK.ASM):00072                 INC     DBLOCK+1                          ; POINT TO NEXT Z-BLOCK
38A1 2602             (         DISK.ASM):00073                 BNE     REND
38A3 0C4C             (         DISK.ASM):00074                 INC     DBLOCK
38A5                  (         DISK.ASM):00075         REND:
38A5 3576             (         DISK.ASM):00076                 PULS    X,Y,U,D                           ; RESTORE VARIABLES
                      (         DISK.ASM):00077         ;        STX     VAL
                      (         DISK.ASM):00078         ;        STD     TEMP
38A7 39               (         DISK.ASM):00079                 RTS
                      (         DISK.ASM):00080         
38A8                  (         DISK.ASM):00081         DTEMP
38A8 00               (         DISK.ASM):00082                 FCB     00
                      (         DISK.ASM):00083         
                      (         DISK.ASM):00084         
                      (         DISK.ASM):00085         ; -----------------
                      (         DISK.ASM):00086         ; SAVE/RESTORE INIT
                      (         DISK.ASM):00087         ; -----------------
                      (         DISK.ASM):00088         
38A9                  (         DISK.ASM):00089         SAVRES:
38A9 BD371F           (         DISK.ASM):00090                 JSR     ZCRLF                             ; FLUSH OUTPUT BUFFER
38AC 0F5E             (         DISK.ASM):00091                 CLR     SCRIPT                            ; DISABLE SCRIPTING
38AE 39               (         DISK.ASM):00092                 RTS
                      (         DISK.ASM):00093         
                      (         DISK.ASM):00094         ; ---------
                      (         DISK.ASM):00095         ; SAVE GAME
                      (         DISK.ASM):00096         ; ---------
                      (         DISK.ASM):00097         
38AF                  (         DISK.ASM):00098         ZSAVE:
38AF 8DF8             (         DISK.ASM):00099                 BSR     SAVRES                            ; INIT THINGS
38B1 3F               (         DISK.ASM):00100                 SWI
38B2 18               (         DISK.ASM):00101                 FCB     24                                ;String to OS
38B3 0D               (         DISK.ASM):00102                 FCB     13
38B4 454E544552204649 (         DISK.ASM):00103                 FCN     'ENTER FILENAME:'
     4C454E414D453A00
38C4 3F               (         DISK.ASM):00104                 SWI
38C5 03               (         DISK.ASM):00105                 FCB     3                                 ; GET FILENAME
38C6 3F               (         DISK.ASM):00106                 SWI
38C7 0B               (         DISK.ASM):00107                 FCB     11
38C8 2669             (         DISK.ASM):00108                 BNE     DSKABORT
38CA CC5341           (         DISK.ASM):00109                 LDD     #$5341                            ;'SA' GET FIRST PORTION
38CD ED84             (         DISK.ASM):00110                 STD     ,X                                ;SAVE IT
38CF 8656             (         DISK.ASM):00111                 LDA     #'V'                              ;LAST CHAR
38D1 A702             (         DISK.ASM):00112                 STA     2,X                               ;WRITE IT
38D3 CED000           (         DISK.ASM):00113                 LDU     #SAVFCB                           ; OPEN FILE FOR WRITE/CREATE
38D6 3F               (         DISK.ASM):00114                 SWI
38D7 47               (         DISK.ASM):00115                 FCB     71
38D8 CED000           (         DISK.ASM):00116                 LDU     #SAVFCB                           ; OPEN FILE FOR WRITE/CREATE
38DB 3F               (         DISK.ASM):00117                 SWI
38DC 38               (         DISK.ASM):00118                 FCB     56
                      (         DISK.ASM):00119         
38DD 8E3A7E           (         DISK.ASM):00120                 LDX     #SING
38E0 C608             (         DISK.ASM):00121                 LDB     #SINGL
38E2 BD3A4E           (         DISK.ASM):00122                 JSR     DLINE                             ; "SAVING"
                      (         DISK.ASM):00123         
38E5 8E2740           (         DISK.ASM):00124                 LDX     #BUFSAV                           ; POINT TO AUX BUFFER
38E8 FC3F02           (         DISK.ASM):00125                 LDD     ZCODE+ZID                         ; GET GAME ID CODE
38EB ED81             (         DISK.ASM):00126                 STD     ,X++                              ; SAVE IN BUFFER
38ED DC27             (         DISK.ASM):00127                 LDD     OZSTAK                            ; OLD STACK POINTER
38EF ED81             (         DISK.ASM):00128                 STD     ,X++
38F1 EF81             (         DISK.ASM):00129                 STU     ,X++                              ; AND CURRENT STACK POINTER
38F3 9613             (         DISK.ASM):00130                 LDA     ZPCH                              ; HI BYTE OF ZPC
38F5 A780             (         DISK.ASM):00131                 STA     ,X+
38F7 DC14             (         DISK.ASM):00132                 LDD     ZPCM                              ; LOW ZPC BYTES
38F9 ED84             (         DISK.ASM):00133                 STD     ,X
                      (         DISK.ASM):00134         
38FB 8E2700           (         DISK.ASM):00135                 LDX     #LOCALS                           ; (SAVE 512 BYTES -- MORE THAN NEEDED, BUT  . . .)
38FE CED000           (         DISK.ASM):00136                 LDU     #SAVFCB
3901 3F               (         DISK.ASM):00137                 SWI
3902 3C               (         DISK.ASM):00138                 FCB     60
                      (         DISK.ASM):00139         
3903 8E2300           (         DISK.ASM):00140                 LDX     #ZSTACK                           ; SAVE CONTENTS OF STACK (512 BYTES)
3906 CED000           (         DISK.ASM):00141                 LDU     #SAVFCB
3909 3F               (         DISK.ASM):00142                 SWI
390A 3C               (         DISK.ASM):00143                 FCB     60
                      (         DISK.ASM):00144         
                      (         DISK.ASM):00145         ; SAVE GAME PRELOAD
                      (         DISK.ASM):00146         
390B 8E3F00           (         DISK.ASM):00147                 LDX     #ZCODE                            ; START OF PRELOAD
390E B63F0E           (         DISK.ASM):00148                 LDA     ZCODE+ZPURBT                      ; SIZE OF PRELOAD (MSB, # PAGES)
3911 1CFE             (         DISK.ASM):00149                 CLC                                       ; DIVIDE BY 2
3913 46               (         DISK.ASM):00150                 RORA                                      ;
3914 4C               (         DISK.ASM):00151                 INCA                                      ; ROUND UP
3915 973F             (         DISK.ASM):00152                 STA     TEMP                              ; USE [TEMP] AS INDEX
                      (         DISK.ASM):00153         
3917                  (         DISK.ASM):00154         LSAVE:
3917 3410             (         DISK.ASM):00155                 PSHS    X
3919 CED000           (         DISK.ASM):00156                 LDU     #SAVFCB
391C 3F               (         DISK.ASM):00157                 SWI
391D 3C               (         DISK.ASM):00158                 FCB     60
391E 3510             (         DISK.ASM):00159                 PULS    X
3920 1F10             (         DISK.ASM):00160                 TFR     X,D
3922 C30200           (         DISK.ASM):00161                 ADDD    #$200
3925 1F01             (         DISK.ASM):00162                 TFR     D,X
3927 0A3F             (         DISK.ASM):00163                 DEC     TEMP                              ; SAVED ENTIRE PRELOAD YET?
3929 26EC             (         DISK.ASM):00164                 BNE     LSAVE                             ; NO, KEEP SAVING
392B CED000           (         DISK.ASM):00165                 LDU     #SAVFCB
392E 3F               (         DISK.ASM):00166                 SWI
392F 39               (         DISK.ASM):00167                 FCB     57                                ; CLOSE FILE
                      (         DISK.ASM):00168         
3930 7E3A2F           (         DISK.ASM):00169                 JMP     RESUME
                      (         DISK.ASM):00170         
                      (         DISK.ASM):00171         
3933                  (         DISK.ASM):00172         DSKABORT:
3933 3F               (         DISK.ASM):00173                 SWI
3934 18               (         DISK.ASM):00174                 FCB     24                                ;String to OS
3935 0D               (         DISK.ASM):00175                 FCB     13
3936 4F5045524154494F (         DISK.ASM):00176                 FCN     'OPERATION ABORTED.'
     4E2041424F525445
     442E00
3949 7E3A2F           (         DISK.ASM):00177                 JMP     RESUME
                      (         DISK.ASM):00178         
                      (         DISK.ASM):00179         ; *** ERROR #12: DISK ADDRESS RANGE ***
                      (         DISK.ASM):00180         
394C                  (         DISK.ASM):00181         DSKERR:
394C 860C             (         DISK.ASM):00182                 LDA     #12
394E 2002             (         DISK.ASM):00183                 BRA     DSKEX
                      (         DISK.ASM):00184         
                      (         DISK.ASM):00185         ; *** ERROR #14: DISK ACCESS ***
                      (         DISK.ASM):00186         
3950                  (         DISK.ASM):00187         DERR2:
3950 860E             (         DISK.ASM):00188                 LDA     #14
3952                  (         DISK.ASM):00189         DSKEX:
3952 BD367A           (         DISK.ASM):00190                 JSR     ZERROR
                      (         DISK.ASM):00191         
                      (         DISK.ASM):00192         ; ------------
                      (         DISK.ASM):00193         ; RESTORE GAME
                      (         DISK.ASM):00194         ; ------------
                      (         DISK.ASM):00195         
3955                  (         DISK.ASM):00196         ZREST:
3955 BD38A9           (         DISK.ASM):00197                 JSR     SAVRES
3958 3F               (         DISK.ASM):00198                 SWI
3959 18               (         DISK.ASM):00199                 FCB     24                                ;String to OS
395A 0D               (         DISK.ASM):00200                 FCB     13
395B 454E544552204649 (         DISK.ASM):00201                 FCN     'ENTER FILENAME:'
     4C454E414D453A00
396B 3F               (         DISK.ASM):00202                 SWI
396C 03               (         DISK.ASM):00203                 FCB     3                                 ; GET FILENAME
396D 3F               (         DISK.ASM):00204                 SWI
396E 0B               (         DISK.ASM):00205                 FCB     11
396F 26C2             (         DISK.ASM):00206                 BNE     DSKABORT
3971 CC5341           (         DISK.ASM):00207                 LDD     #$5341                            ;'SA' GET FIRST PORTION
3974 ED84             (         DISK.ASM):00208                 STD     ,X                                ;SAVE IT
3976 8656             (         DISK.ASM):00209                 LDA     #'V'                              ;LAST CHAR
3978 A702             (         DISK.ASM):00210                 STA     2,X                               ;WRITE IT
397A CED000           (         DISK.ASM):00211                 LDU     #SAVFCB                           ; OPEN FILE
397D 3F               (         DISK.ASM):00212                 SWI
397E 37               (         DISK.ASM):00213                 FCB     55
397F 26B2             (         DISK.ASM):00214                 BNE     DSKABORT
3981 3F               (         DISK.ASM):00215                 SWI
3982 3B               (         DISK.ASM):00216                 FCB     59
3983 8E3A86           (         DISK.ASM):00217                 LDX     #RING
3986 C60B             (         DISK.ASM):00218                 LDB     #RINGL
3988 BD3A4E           (         DISK.ASM):00219                 JSR     DLINE                             ; "RESTORING"
                      (         DISK.ASM):00220         
                      (         DISK.ASM):00221         ; SAVE LOCALS ON MACHINE STACK
                      (         DISK.ASM):00222         ; IN CASE OF ERROR
                      (         DISK.ASM):00223         
398B 8E2700           (         DISK.ASM):00224                 LDX     #LOCALS                           ; POINT TO LOCALS STORAGE
398E 9F4A             (         DISK.ASM):00225                 STX     DBUFF                             ; POINT TO 1ST PAGE TO RESTORE
3990                  (         DISK.ASM):00226         LOCLP:
3990 EC81             (         DISK.ASM):00227                 LDD     ,X++                              ; GRAB A LOCAL
3992 3406             (         DISK.ASM):00228                 PSHS    D                                 ; AND PUSH IT
3994 8C271E           (         DISK.ASM):00229                 CMPX    #LOCALS+30                        ; SAVED 15 LOCALS YET?
3997 25F7             (         DISK.ASM):00230                 BLO     LOCLP                             ; NO, KEEP PUSHING
                      (         DISK.ASM):00231         
3999 8ED00A           (         DISK.ASM):00232                 LDX     #SAVFCB+10                        ; RETRIEVE LOCALS/BUFFER PAGE
399C 108E2700         (         DISK.ASM):00233                 LDY     #LOCALS
39A0 C600             (         DISK.ASM):00234                 LDB     #00
                      (         DISK.ASM):00235         !
39A2 A680             (         DISK.ASM):00236                 LDA     ,X+
39A4 A7A0             (         DISK.ASM):00237                 STA     ,Y+
39A6 5C               (         DISK.ASM):00238                 INCB
39A7 26F9             (         DISK.ASM):00239                 BNE     <
                      (         DISK.ASM):00240         
39A9 FC2740           (         DISK.ASM):00241                 LDD     BUFSAV                            ; READ SAVED GAME ID
39AC 10B33F02         (         DISK.ASM):00242                 CMPD    ZCODE+ZID                         ; IF IT MATCHES CURRENT GAME ID,
39B0 2711             (         DISK.ASM):00243                 BEQ     VERSOK                            ; PROCEED WITH THE RESTORE
                      (         DISK.ASM):00244         
                      (         DISK.ASM):00245         ; WRONG SAVE DISK, ABORT RESTORE
                      (         DISK.ASM):00246         
39B2 8E271E           (         DISK.ASM):00247                 LDX     #LOCALS+30                        ; RESTORE PUSHED LOCALS
39B5                  (         DISK.ASM):00248         RESLP:
39B5 3506             (         DISK.ASM):00249                 PULS    D
39B7 ED83             (         DISK.ASM):00250                 STD     ,--X
39B9 8C2700           (         DISK.ASM):00251                 CMPX    #LOCALS
39BC 22F7             (         DISK.ASM):00252                 BHI     RESLP
39BE                  (         DISK.ASM):00253         ERRWP:
39BE 8D74             (         DISK.ASM):00254                 BSR     TOBOOT                            ; PROMPT FOR GAME DISK
39C0 7E2A3F           (         DISK.ASM):00255                 JMP     PREDF                             ; PREDICATE FAILS
                      (         DISK.ASM):00256         
39C3                  (         DISK.ASM):00257         VERSOK:
                      (         DISK.ASM):00258         
39C3 32E81E           (         DISK.ASM):00259                 LEAS    +30,S                             ; POP OLD LOCALS OFF STACK
39C6 FC3F10           (         DISK.ASM):00260                 LDD     ZCODE+ZSCRIP
39C9 DD3D             (         DISK.ASM):00261                 STD     VAL                               ; SAVE FLAGS
                      (         DISK.ASM):00262         
39CB CC0200           (         DISK.ASM):00263                 LDD     #$200                             ; begin game load
39CE CED000           (         DISK.ASM):00264                 LDU     #SAVFCB
39D1 3F               (         DISK.ASM):00265                 SWI
39D2 40               (         DISK.ASM):00266                 FCB     64
39D3 1026FF5C         (         DISK.ASM):00267                 LBNE    DSKABORT
                      (         DISK.ASM):00268         
39D7 8E2300           (         DISK.ASM):00269                 LDX     #ZSTACK                           ; RETRIEVE
39DA DD4A             (         DISK.ASM):00270                 STD     DBUFF                             ; CONTENTS OF Z-STACK (512 bytes)
39DC CED000           (         DISK.ASM):00271                 LDU     #SAVFCB
39DF 3F               (         DISK.ASM):00272                 SWI
39E0 3A               (         DISK.ASM):00273                 FCB     58
39E1 1026FF4E         (         DISK.ASM):00274                 LBNE    DSKABORT
                      (         DISK.ASM):00275         
39E5                  (         DISK.ASM):00276         DOREST:
39E5 8E3F00           (         DISK.ASM):00277                 LDX     #ZCODE                            ; NOW RETRIEVE
39E8 DD4A             (         DISK.ASM):00278                 STD     DBUFF                             ; 1ST TWO PAGES OF PRELOAD
39EA CED000           (         DISK.ASM):00279                 LDU     #SAVFCB
39ED 3F               (         DISK.ASM):00280                 SWI
39EE 3A               (         DISK.ASM):00281                 FCB     58
39EF 1026FF40         (         DISK.ASM):00282                 LBNE    DSKABORT
39F3 1F10             (         DISK.ASM):00283                 TFR     X,D
39F5 C30200           (         DISK.ASM):00284                 ADDD    #$200
39F8 1F01             (         DISK.ASM):00285                 TFR     D,X
39FA B63F0E           (         DISK.ASM):00286                 LDA     ZCODE+ZPURBT                      ; DETERMINE # PAGES
39FD 1CFE             (         DISK.ASM):00287                 CLC
39FF 46               (         DISK.ASM):00288                 RORA
3A00 4C               (         DISK.ASM):00289                 INCA
3A01 973F             (         DISK.ASM):00290                 STA     TEMP                              ; TO RETRIEVE
                      (         DISK.ASM):00291         
3A03                  (         DISK.ASM):00292         LREST:
3A03 3410             (         DISK.ASM):00293                 PSHS    X
3A05 CED000           (         DISK.ASM):00294                 LDU     #SAVFCB
3A08 3F               (         DISK.ASM):00295                 SWI
3A09 3A               (         DISK.ASM):00296                 FCB     58
3A0A 3510             (         DISK.ASM):00297                 PULS    X
3A0C 1F10             (         DISK.ASM):00298                 TFR     X,D
3A0E C30200           (         DISK.ASM):00299                 ADDD    #$200
3A11 1F01             (         DISK.ASM):00300                 TFR     D,X
3A13 0A3F             (         DISK.ASM):00301                 DEC     TEMP
3A15 26EC             (         DISK.ASM):00302                 BNE     LREST
                      (         DISK.ASM):00303         
                      (         DISK.ASM):00304         ; RESTORE STATE OF SAVED GAME
                      (         DISK.ASM):00305         
3A17 8E2742           (         DISK.ASM):00306                 LDX     #BUFSAV+2                         ; POINT TO SAVED VARIABLES
3A1A EC81             (         DISK.ASM):00307                 LDD     ,X++
3A1C DD27             (         DISK.ASM):00308                 STD     OZSTAK                            ; RESTORE OLD STACK POINTERS
3A1E EE81             (         DISK.ASM):00309                 LDU     ,X++
3A20 A680             (         DISK.ASM):00310                 LDA     ,X+
3A22 9713             (         DISK.ASM):00311                 STA     ZPCH                              ; HIGH BYTE OF ZPC
3A24 EC84             (         DISK.ASM):00312                 LDD     ,X                                ; LOW BYTES OF ZPC
3A26 DD14             (         DISK.ASM):00313                 STD     ZPCM
3A28 0F18             (         DISK.ASM):00314                 CLR     ZPCFLG                            ; PC HAS CHANGED!
                      (         DISK.ASM):00315         
3A2A DC3D             (         DISK.ASM):00316                 LDD     VAL                               ; RESTORE FLAGS
3A2C FD3F10           (         DISK.ASM):00317                 STD     ZCODE+ZSCRIP
                      (         DISK.ASM):00318         
                      (         DISK.ASM):00319         ; RESUME GAME AFTER SAVE OR RESTORE
                      (         DISK.ASM):00320         
3A2F                  (         DISK.ASM):00321         RESUME:
3A2F 8D03             (         DISK.ASM):00322                 BSR     TOBOOT                            ; PROMPT FOR GAME DISK
3A31 7E2A4D           (         DISK.ASM):00323                 JMP     PREDS                             ; PREDICATE SUCCEEDS
                      (         DISK.ASM):00324         
3A34                  (         DISK.ASM):00325         TOBOOT:
3A34 BD3A3A           (         DISK.ASM):00326                 JSR     ENTER                             ; "PRESS <ENTER> TO CONTINUE"
3A37 035E             (         DISK.ASM):00327                 COM     SCRIPT                            ; RE-ENABLE SCRIPTING
3A39 39               (         DISK.ASM):00328                 RTS
                      (         DISK.ASM):00329         ; ---------------------------
                      (         DISK.ASM):00330         ; "PRESS <ENTER> TO CONTINUE"
                      (         DISK.ASM):00331         ; ---------------------------
                      (         DISK.ASM):00332         
3A3A                  (         DISK.ASM):00333         ENTER:
3A3A 8E3A62           (         DISK.ASM):00334                 LDX     #PRESS
3A3D C61C             (         DISK.ASM):00335                 LDB     #PRESSL
3A3F D75D             (         DISK.ASM):00336                 STB     CFLAG                             ; ENABLE CURSOR
3A41 BD35B2           (         DISK.ASM):00337                 JSR     LINE                              ; "PRESS <ENTER> TO CONTINUE"
3A44 BD34F0           (         DISK.ASM):00338                 JSR     GETKEY                            ; GET A KEY
3A47 0F5D             (         DISK.ASM):00339                 CLR     CFLAG                             ; DISABLE CURSOR
3A49 860D             (         DISK.ASM):00340                 LDA     #EOL
3A4B 7E36C9           (         DISK.ASM):00341                 JMP     COUT                              ; DO EOL AND RETURN
                      (         DISK.ASM):00342         
                      (         DISK.ASM):00343         
                      (         DISK.ASM):00344         
                      (         DISK.ASM):00345         ; FALL THROUGH TO ...
                      (         DISK.ASM):00346         
                      (         DISK.ASM):00347         ; --------------------
                      (         DISK.ASM):00348         ; DIRECT SCREEN OUTPUT
                      (         DISK.ASM):00349         ; --------------------
                      (         DISK.ASM):00350         
                      (         DISK.ASM):00351         ; ENTRY: SAME AS "LINE" ROUTINE
                      (         DISK.ASM):00352         
3A4E                  (         DISK.ASM):00353         DLINE:
3A4E A680             (         DISK.ASM):00354                 LDA     ,X+
3A50 BD34E4           (         DISK.ASM):00355                 JSR     OUTCHR
3A53 5A               (         DISK.ASM):00356                 DECB
3A54 26F8             (         DISK.ASM):00357                 BNE     DLINE
3A56 39               (         DISK.ASM):00358                 RTS
                      (         DISK.ASM):00359         
                      (         DISK.ASM):00360         
                      (         DISK.ASM):00361         ; ---------------------
                      (         DISK.ASM):00362         ; TEXT FOR SAVE/RESTORE
                      (         DISK.ASM):00363         ; ---------------------
                      (         DISK.ASM):00364         
3A57                  (         DISK.ASM):00365         RES:
3A57 524553544F5245   (         DISK.ASM):00366                 FCC     "RESTORE"
3A5E                  (         DISK.ASM):00367         reslen:
     0007             (         DISK.ASM):00368         RESL            EQU reslen-RES
                      (         DISK.ASM):00369         
3A5E                  (         DISK.ASM):00370         SAV:
3A5E 53415645         (         DISK.ASM):00371                 FCC     "SAVE"
3A62                  (         DISK.ASM):00372         savlen:
     0004             (         DISK.ASM):00373         SAVL            EQU savlen-SAV
                      (         DISK.ASM):00374         
                      (         DISK.ASM):00375         
3A62                  (         DISK.ASM):00376         PRESS:
3A62 5052455353203C45 (         DISK.ASM):00377                 FCC     "PRESS <ENTER> TO CONTINUE."
     4E5445523E20544F
     20434F4E54494E55
     452E
3A7C 0D               (         DISK.ASM):00378                 FCB     EOL
3A7D 3E               (         DISK.ASM):00379                 FCC     ">"
3A7E                  (         DISK.ASM):00380         presslen:
     001C             (         DISK.ASM):00381         PRESSL          EQU presslen-PRESS
                      (         DISK.ASM):00382         
                      (         DISK.ASM):00383         
3A7E                  (         DISK.ASM):00384         SING:
3A7E 0D               (         DISK.ASM):00385                 FCB     EOL
3A7F 534156494E47     (         DISK.ASM):00386                 FCC     "SAVING"
3A85 0D               (         DISK.ASM):00387                 FCB     EOL
3A86                  (         DISK.ASM):00388         sinlen:
     0008             (         DISK.ASM):00389         SINGL           EQU sinlen-SING
                      (         DISK.ASM):00390         
3A86                  (         DISK.ASM):00391         RING:
3A86 0D               (         DISK.ASM):00392                 FCB     EOL
3A87 524553544F52494E (         DISK.ASM):00393                 FCC     "RESTORING"
     47
3A90 0D               (         DISK.ASM):00394                 FCB     EOL
3A91                  (         DISK.ASM):00395         ringlen:
     000B             (         DISK.ASM):00396         RINGL           EQU ringlen-RING
                      (         DISK.ASM):00397         
3A91                  (         DISK.ASM):00398         ENDTST:
3A91 454E44           (         DISK.ASM):00399                 FCC     "END"
                      (     cubixzip.asm):00072         
                      (     cubixzip.asm):00073         ;TITLE "ZIP/6809-B INFOCOM, INC."
                      (     cubixzip.asm):00074                 IF      DEBUG
                      (     cubixzip.asm):00075                     INCLUDE BUGGER.ASM
                      (     cubixzip.asm):00076                 ENDIF
                      (     cubixzip.asm):00077         
                      (     cubixzip.asm):00078                 END

Symbol Table:
[ G] ABSVAL                           2ECD
[ G] ABTEMP                           2ED4
[ G] AHEAD                            37F9
[ G] AINIT                            3619
[ G] ARG1                             0002
[ G] ARG2                             0004
[ G] ARG3                             0006
[ G] ARG4                             0008
[ G] ARGCNT                           0001
[ G] BADKEY                           34EB
[ G] BADOP1                           2953
[ G] BADOP2                           29A1
[ G] BFREQ                            1000
[ G] BINDEX                           0053
[ G] BLINK                            005C
[ G] BOLD                             35D5
[ G] BOOP                             361A
[ G] BRKTBL                           3180
[ G] BS                               0008
[ G] BUFFER                           DBB0
[ G] BUFINC                           3895
[ G] BUFOUT                           35AD
[ G] BUFSAV                           2740
[ G] CDEL                             3526
[ G] CDELAY                           3523
[ G] CEXIT                            2D18
[ G] CFLAG                            005D
[ G] CFREQ                            0100
[ G] CHAR                             3595
[ G] CHRPNT                           0051
[ G] CHRTBL                           3458
[ G] CLICK                            351E
[ G] CLS                              35C2
[ G] CNLOOP                           3411
[ G] CNOK                             3419
[ G] CNZS2M                           340C
[ G] CNZSC1                           33D2
[ G] CNZSC3                           33DA
[ G] CNZSL1                           338D
[ G] CNZSL2                           339E
[ G] CNZSLC                           33B7
[ G] CNZSLE                           343B
[ G] CNZSLO                           33C3
[ G] COLD                             362E
[ G] CONZST                           337D
[ G] COUT                             36C9
[ G] COUT1                            36DE
[ G] CPSAV                            0052
[ G] CR1                              3745
[ G] CSPERM                           002A
[ G] CSTEMP                           0029
[ G] CYCLE                            005A
[ G] DBLOCK                           004C
[ G] DBUFF                            004A
[ G] DEBUG                            0000
[ G] DECX                             2EFA
[ G] DELAY                            361B
[ G] DELOOP                           361E
[ G] DERR2                            3950
[ G] DGC                              3012
[ G] DIGCNT                           3010
[ G] DISPX                            2923
[ G] DIVERR                           2F07
[ G] DIVEX                            2ED3
[ G] DIVIDE                           2EAD
[ G] DLINE                            3A4E
[ G] DOB2                             2A67
[ G] DOCALL                           2F3B
[ G] DODIS                            2926
[ G] DOEQ                             2F15
[ G] DOM                              37EC
[ G] DOREST                           39E5
[ G] DOUDIV                           2EC1
[ G] DRIVE                            0049
[ G] DSKABORT                         3933
[ G] DSKERR                           394C
[ G] DSKEX                            3952
[ G] DSTART                           0000
[ G] DTEMP                            38A8
[ G] DVINIT                           2EA5
[ G] EAR0                             3261
[ G] EAR1                             3269
[ G] EARLY                            3257
[ G] ENDCMP                           281C
[ G] ENDERR                           2817
[ G] ENDLIN                           3572
[ G] ENDOK                            2820
[ G] ENDSES                           369F
[ G] endseslen                        36AE
[ G] ENDSL                            000F
[ G] ENDTST                           3A91
[ G] ENTER                            3A3A
[ G] EOL                              000D
[ G] EQBAD                            2F2E
[ G] EQOK                             2F31
[ G] ERRWP                            39BE
[ G] ETPEX                            2E23
[ G] FALSE                            0000
[ G] FBRK                             314F
[ G] FINDW                            3151
[ G] FIRST1                           2BD6
[ G] FLAGSU                           34A7
[ G] FLEX                             3135
[ G] FLGSU1                           34BA
[ G] FLGSU2                           34C5
[ G] FLGSU3                           34CE
[ G] FLUSH                            36DF
[ G] FLUSH1                           36E1
[ G] FLUSH2                           36EA
[ G] FLUSH3                           36F1
[ G] FLUSH4                           36FA
[ G] FLUSHW                           311F
[ G] FREEZE                           369D
[ G] FWL1                             315E
[ G] FWORDS                           0025
[ G] FWSUCC                           3179
[ G] GDRIVE                           0056
[ G] GETBYT                           31C0
[ G] GETDSK                           3840
[ G] GETDSK1                          3868
[ G] GETKEY                           34F0
[ G] GETLNG                           29AE
[ G] GETMOD                           3339
[ G] GETP1                            2DE7
[ G] GETP2                            2E06
[ G] GETP2A                           2E1D
[ G] GETP2B                           2E16
[ G] GETP3                            2DF5
[ G] GETPT1                           2E2B
[ G] GETPT2                           2E3B
[ G] GETSHT                           29A6
[ G] GETVAR                           29C5
[ G] GETVR1                           29CB
[ G] GETVRG                           29DC
[ G] GETVRL                           29CF
[ G] GETWRD                           3186
[ G] GETZCH                           3345
[ G] GETZH1                           335C
[ G] GETZH2                           3373
[ G] GETZH3                           336F
[ G] GK                               34F2
[ G] GLOBAL                           0021
[ G] GM                               3340
[ G] GOBACK                           3569
[ G] GPOSIT                           0057
[ G] GPT                              2E41
[ G] GTBT0                            31D1
[ G] GTBT1                            31D5
[ G] GTBT2                            31DD
[ G] GTBT3                            31F0
[ G] GTEXIT                           3358
[ G] GTVX                             29D6
[ G] GTZ0                             334B
[ G] HOME                             35F9
[ G] IERRL                            0011
[ G] IHOLD                            005F
[ G] INFCB                            DC00
[ G] INLOOP                           3539
[ G] INPEX                            3591
[ G] INPUT                            352B
[ G] INTERR                           3669
[ G] interrlen                        367A
[ G] IOBUFF                           2200
[ G] IOCHAR                           0055
[ G] KTEST                            34FE
[ G] LDPRE                            28A4
[ G] LINCNT                           0054
[ G] LINE                             35B2
[ G] LINOUT                           3750
[ G] LN                               35B5
[ G] loadlen                          3669
[ G] LOADM                            3644
[ G] LOADML                           0025
[ G] LOCALS                           2700
[ G] LOCLP                            3990
[ G] LREST                            3A03
[ G] LRU                              000A
[ G] LRUMAP                           2650
[ G] LSAVE                            3917
[ G] MASK                             0043
[ G] MATH                             2E70
[ G] MCLR                             370D
[ G] MCLRL                            0012
[ G] mclrlen                          371F
[ G] MEMTOP                           00CF
[ G] MLOOP                            28BB
[ G] MOREL                            0006
[ G] MORES                            3707
[ G] morlen                           370D
[ G] MOVECURSOR                       3609
[ G] MOVEP                            37BC
[ G] MOVEP1                           37D3
[ G] MPCFLG                           001F
[ G] MPCH                             001A
[ G] MPCL                             001C
[ G] MPCM                             001B
[ G] MPCPNT                           001D
[ G] MSTACK                           21FE
[ G] MSTART                           2100
[ G] MTEMP                            0047
[ G] NBR1                             3146
[ G] NBRKP                            313A
[ G] NBRKS                            0006
[ G] NEXTPC                           318F
[ G] NOMORE                           3559
[ G] NOPS0                            000E
[ G] NOPS1                            0010
[ G] NOPS2                            0019
[ G] NOPSX                            000C
[ G] NORAM                            2866
[ G] NPC0                             31A0
[ G] NPC1                             31A4
[ G] NPC2                             31AC
[ G] NPC3                             31BF
[ G] NUMBER                           3004
[ G] NXTP1                            2E53
[ G] NXTP2                            2E66
[ G] NXTP3                            2E63
[ G] OBJLOC                           34D5
[ G] OBUFSAV                          DB60
[ G] OP0                              292D
[ G] OP1                              293D
[ G] OP1A                             2946
[ G] OP1B                             294F
[ G] OP1C                             2958
[ G] OP1EX                            295B
[ G] OP2                              296E
[ G] OP2A                             2977
[ G] OP2B                             297A
[ G] OP2C                             298B
[ G] OP2D                             298E
[ G] OP2EX                            2994
[ G] OPCODE                           0000
[ G] OPENGAMEDSK                      3834
[ G] OPEXT                            28D2
[ G] OPT0                             2AB2
[ G] OPT1                             2ACE
[ G] OPT2                             2AEE
[ G] OPTX                             2B20
[ G] OPX0                             28DB
[ G] OPX1                             28E1
[ G] OPX2                             28EA
[ G] OPX3                             28F3
[ G] OPX4                             2910
[ G] OPXNXT                           28FA
[ G] OUTCHR                           34E4
[ G] OUTPUT                           3754
[ G] OVER                             2A3A
[ G] OZSTAK                           0027
[ G] PAGE                             31F1
[ G] PAGE0                            000E
[ G] PATCH                            31CA
[ G] PBAD                             2D1C
[ G] PDB0                             2A99
[ G] PDB1                             2AB1
[ G] PG0                              31F8
[ G] PG1                              321D
[ G] PG2                              3233
[ G] PG3                              323B
[ G] PG4                              3248
[ G] PG5                              3252
[ G] PKICK                            3516
[ G] PMAX                             000C
[ G] PNBX                             2A4C
[ G] PNUM                             37F6
[ G] POK                              2D3D
[ G] POPSTK                           2A2A
[ G] PPX                              34A0
[ G] PREDB                            2A53
[ G] PREDB1                           2A72
[ G] PREDB3                           2A7F
[ G] PREDF                            2A3F
[ G] PREDLB                           2A5F
[ G] PREDNB                           2A45
[ G] PREDS                            2A4D
[ G] PRESS                            3A62
[ G] PRESSL                           001C
[ G] presslen                         3A7E
[ G] PRNTDC                           2C7F
[ G] PRNTN3                           3026
[ G] PRNTN4                           302A
[ G] PROPB                            3472
[ G] PROPL                            348F
[ G] PROPN                            3487
[ G] PROPNX                           349C
[ G] PSHDZ                            2A21
[ G] PSHSTK                           2A1F
[ G] PTABLE                           2500
[ G] pth                              31C9
[ G] PTIME                            37A9
[ G] PTIME1                           37AF
[ G] PTIME2                           37B7
[ G] PTP                              2FD6
[ G] PTP1                             2FEB
[ G] PTVX                             2A10
[ G] PUTBYT                           29F3
[ G] PUTP1                            2FC8
[ G] PUTP2                            2FDB
[ G] PUTP2A                           2FF3
[ G] PUTVAL                           29F7
[ G] PUTVLG                           2A16
[ G] PUTVLL                           2A09
[ G] PUTVR1                           2A05
[ G] PZERO                            3036
[ G] PZSTFO                           003C
[ G] PZSTP0                           32AC
[ G] PZSTP1                           32AE
[ G] PZSTR                            328B
[ G] PZSTR1                           32B3
[ G] PZSTR2                           32BB
[ G] PZSTRA                           32C8
[ G] PZSTRF                           32F7
[ G] PZSTRL                           3293
[ G] PZSTRP                           32ED
[ G] PZSTRS                           32DD
[ G] PZSTRT                           32E1
[ G] QKEY                             3500
[ G] RAND1                            0058
[ G] RAND2                            0059
[ G] RBRKP                            3136
[ G] RDEX                             3098
[ G] READL                            3087
[ G] READL2                           30CA
[ G] READL3                           30F0
[ G] REMVC1                           2C61
[ G] REMVC2                           2C76
[ G] REMVEX                           2C7C
[ G] REND                             38A5
[ G] RES                              3A57
[ G] RESL                             0007
[ G] reslen                           3A5E
[ G] RESLP                            39B5
[ G] RESUME                           3A2F
[ G] RET0                             29F2
[ G] RET1                             2CA5
[ G] RET2                             2CAE
[ G] RETERR                           2CC6
[ G] REVERSE                          35ED
[ G] RFLIP                            2EC9
[ G] RING                             3A86
[ G] RINGL                            000B
[ G] ringlen                          3A91
[ G] RL1                              3094
[ G] RL2                              3099
[ G] RL3                              30A2
[ G] RS1                              2000
[ G] RS1E                             200A
[ G] RSIBRK                           30E8
[ G] RTABP                            003A
[ G] SAV                              3A5E
[ G] SAVFCB                           D000
[ G] SAVL                             0004
[ G] savlen                           3A62
[ G] SAVRES                           38A9
[ G] SCDONE                           3759
[ G] SCMP                             2D2A
[ G] SCOMP                            2D1F
[ G] SCRIPT                           005E
[ G] SCROUT                           3586
[ G] SENDCH                           354A
[ G] SETA0                            2870
[ G] SETNP                            286A
[ G] SETSTR                           327C
[ G] SETWRD                           3273
[ G] SFLAG                            3594
[ G] SIBRKP                           3141
[ G] SING                             3A7E
[ G] SINGL                            0008
[ G] sinlen                           3A86
[ G] SPACE                            0020
[ G] SQUOT                            0045
[ G] SREM                             0046
[ G] ST0                              2823
[ G] ST1A                             2831
[ G] ST1B                             283B
[ G] STABP                            003B
[ G] STAMP                            0011
[ G] START                            2800
[ G] STBYTF                           002B
[ G] SWAP                             0012
[ G] TABS                             2EBB
[ G] TABTOP                           000F
[ G] TDRIVE                           0061
[ G] TEMP                             003F
[ G] TEMP2                            0041
[ G] TIMEFL                           0050
[ G] TOBOOT                           3A34
[ G] TOPRIN                           3579
[ G] TOPSTA                           24FE
[ G] TOSCR                            354D
[ G] TPOSIT                           0060
[ G] TRACK                            004E
[ G] TRUE                             00FF
[ G] TSTEND                           2807
[ G] UDIV                             2EDB
[ G] UDLOOP                           2EE6
[ G] UDNEXT                           2EF9
[ G] UNBOLD                           35E1
[ G] UNDER                            2A35
[ G] USEPM                            37EA
[ G] USLEND                           380C
[ G] VAL                              003D
[ G] VARGET                           29BD
[ G] VARPUT                           29E5
[ G] VCODE                            36AD
[ G] VCODEL                           0014
[ G] vcodelen                         36C1
[ G] VERNUM                           36C1
[ G] VERSOK                           39C3
[ G] VOCAB                            0023
[ G] VSUM                             2B92
[ G] VSUM0                            2B9E
[ G] WNEXT                            316C
[ G] ZADD                             2E6C
[ G] ZB0                              2D53
[ G] ZBAND                            2D58
[ G] ZBCOM                            2CE7
[ G] ZBEGIN                           0006
[ G] ZBOR                             2D4D
[ G] ZBTST                            2D40
[ G] ZCALL                            2F34
[ G] ZCALL1                           2F64
[ G] ZCALL2                           2F7F
[ G] ZCALL3                           2F83
[ G] ZCALL4                           2F9A
[ G] ZCHKSM                           001C
[ G] ZCHR1                            3428
[ G] ZCHR2                            3433
[ G] ZCHRCS                           341E
[ G] ZCHRX                            343A
[ G] ZCODE                            3F00
[ G] ZCODEHIGH                        003F
[ G] ZCRLF                            371F
[ G] ZDEC                             2C27
[ G] ZDIV                             2E9A
[ G] ZDLESS                           2D04
[ G] ZENDLD                           0004
[ G] ZEQUAL                           2F0C
[ G] ZERROR                           367A
[ G] ZFCLR                            2D7F
[ G] ZFIRST                           2BCF
[ G] ZFSET                            2D71
[ G] ZFSETP                           2D60
[ G] ZFWORD                           0018
[ G] ZGET                             2DBE
[ G] ZGETB                            2DD1
[ G] ZGETP                            2DE4
[ G] ZGETPT                           2E28
[ G] ZGLOBA                           000C
[ G] ZGRTR                            2CFA
[ G] ZID                              0002
[ G] ZIGRTR                           2D0D
[ G] ZIN                              2D30
[ G] ZINC                             2C0F
[ G] ZINC1                            2C19
[ G] ZIP                              2800
[ G] ZJUMP                            2CCB
[ G] ZLENTH                           001A
[ G] ZLESS                            2CF0
[ G] ZLOC                             2BED
[ G] ZMLOOP                           2E82
[ G] ZMNEXT                           2E92
[ G] ZMOD                             2E9F
[ G] ZMODE                            0001
[ G] ZMOVE                            2D98
[ G] ZMUL                             2E7B
[ G] ZMVEX                            2DBD
[ G] ZNEXT                            2BC6
[ G] ZNEXTP                           2E4C
[ G] ZNOOP                            2B60
[ G] ZOBJEC                           000A
[ G] ZPAGE                            000D
[ G] ZPCFLG                           0018
[ G] ZPCH                             0013
[ G] ZPCL                             0015
[ G] ZPCM                             0014
[ G] ZPCPNT                           0016
[ G] ZPGTOP                           0060
[ G] ZPOP                             305C
[ G] ZPRB                             2C33
[ G] ZPRC                             2FFB
[ G] ZPRD                             2C7D
[ G] ZPRI                             2B43
[ G] ZPRINT                           2CD5
[ G] ZPRN                             3000
[ G] ZPRR                             2B61
[ G] ZPTSIZ                           2BFD
[ G] ZPURBT                           000E
[ G] ZPURE                            000B
[ G] ZPUSH                            3057
[ G] ZPUT                             2FA5
[ G] ZPUTB                            2FB7
[ G] ZPUTP                            2FC5
[ G] ZQUIT                            3693
[ G] ZRAND                            303B
[ G] ZREAD                            3064
[ G] ZREMOV                           2C3D
[ G] ZREST                            3955
[ G] ZRET                             2C91
[ G] ZRFALS                           2B40
[ G] ZRSTAK                           2B68
[ G] ZRT                              2B3A
[ G] ZRTRUE                           2B38
[ G] ZSAVE                            38AF
[ G] ZSCRIP                           0010
[ G] ZSCRN                            2B60
[ G] ZSERIA                           0012
[ G] ZSET                             2D8F
[ G] ZSPLIT                           2B60
[ G] ZSTACK                           2300
[ G] ZSTAKL                           00FF
[ G] ZSTART                           3623
[ G] ZSTBUI                           002E
[ G] ZSTBUO                           0034
[ G] ZSTEX                            328A
[ G] ZSTWRD                           002C
[ G] ZSUB                             2E75
[ G] ZUSL                             375A
[ G] ZUSL1                            3777
[ G] ZVALUE                           2CDF
[ G] ZVER                             2B70
[ G] ZVERS                            0000
[ G] ZVOCAB                           0008
[ G] ZZERO                            2BBD
