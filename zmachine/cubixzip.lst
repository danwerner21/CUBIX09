                      (     cubixzip.asm):00001         ;TITLE   "ZIP/6809-C INFOCOM, INC. --- INITIALIZATION"
                      (     cubixzip.asm):00002         
                      (     cubixzip.asm):00003         ; -------------------------------
                      (     cubixzip.asm):00004         ; ZIP/6809 VERSION C
                      (     cubixzip.asm):00005         ; Z-CODE INTERPRETER PROGRAM
                      (     cubixzip.asm):00006         ; FOR CUBIX
                      (     cubixzip.asm):00007         ; -------------------------------
                      (     cubixzip.asm):00008         
                      (     cubixzip.asm):00009         ; COMPANY PRIVATE -- NOT FOR DISTRIBUTION
                      (     cubixzip.asm):00010         
     0000             (     cubixzip.asm):00011         DEBUG           = 0                               ; ASSEMBLY FLAG
                      (     cubixzip.asm):00012         
                      (     cubixzip.asm):00013         ; -----------
                      (     cubixzip.asm):00014         ; ERROR CODES
                      (     cubixzip.asm):00015         ; -----------
                      (     cubixzip.asm):00016         
                      (     cubixzip.asm):00017         ; 00 -- INSUFFICIENT RAM
                      (     cubixzip.asm):00018         ; 01 -- ILLEGAL X-OP
                      (     cubixzip.asm):00019         ; 02 -- ILLEGAL 0-OP
                      (     cubixzip.asm):00020         ; 03 -- ILLEGAL 1-OP
                      (     cubixzip.asm):00021         ; 04 -- ILLEGAL 2-OP
                      (     cubixzip.asm):00022         ; 05 -- Z-STACK UNDERFLOW
                      (     cubixzip.asm):00023         ; 06 -- Z-STACK OVERFLOW
                      (     cubixzip.asm):00024         ; 07 -- ILLEGAL PROPERTY LENGTH (GETP)
                      (     cubixzip.asm):00025         ; 08 -- DIVISION BY ZERO
                      (     cubixzip.asm):00026         ; 09 -- ILLEGAL ARGUMENT COUNT (EQUAL?)
                      (     cubixzip.asm):00027         ; 10 -- ILLEGAL PROPERTY ID (PUTP)
                      (     cubixzip.asm):00028         ; 11 -- ILLEGAL PROPERTY LENGTH (PUTP)
                      (     cubixzip.asm):00029         ; 12 -- DISK ADDRESS OUT OF RANGE
                      (     cubixzip.asm):00030         ; 13 -- PARSER OVERFLOW
                      (     cubixzip.asm):00031         ; 14 -- DRIVE ACCESS
                      (     cubixzip.asm):00032         ; 15 -- Z-STACK DESTROYED
                      (     cubixzip.asm):00033         ; 16 -- ZIP NOT FULLY LOADED
                      (     cubixzip.asm):00034         
                      (     cubixzip.asm):00035                 ORG     $2000
                      (     cubixzip.asm):00036         
2000 4F               (     cubixzip.asm):00037                 CLRA                                      ; USE PAGE ZERO
2001 1F8B             (     cubixzip.asm):00038                 TFR     A,DP                              ; AS THE DIRECT PAGE
2003 10CE2108         (     cubixzip.asm):00039                 LDS     #MSTACK                           ; GIVE THE STACK A NEW HOME
2007 7E34D3           (     cubixzip.asm):00040                 JMP     COLD                              ; PERFORM ONE-TIME INITIALIZATION
                      (     cubixzip.asm):00041         
200A                  (     cubixzip.asm):00042         MSTART: ; START OF FREE PROGRAM RAM
                      (     cubixzip.asm):00043         
                      (     cubixzip.asm):00044                 INCLUDE eq.asm
                      (           eq.asm):00001         ;PAGE
                      (           eq.asm):00002         ;SBTTL "--- MEMORY ORGANIZATION ---"
                      (           eq.asm):00003         
     0100             (           eq.asm):00004         CFREQ           = $100
     1000             (           eq.asm):00005         BFREQ           = $1000
                      (           eq.asm):00006         
                      (           eq.asm):00007         
     00FF             (           eq.asm):00008         TRUE            = $FF
     0000             (           eq.asm):00009         FALSE           = 0
                      (           eq.asm):00010         
     0000             (           eq.asm):00011         DSTART          = 0                               ; START OF DIRECT-PAGE RAM
                      (           eq.asm):00012         
     2108             (           eq.asm):00013         MSTACK          = MSTART+$FE                      ; TOP OF MACHINE STACK (254 BYTES)
     210A             (           eq.asm):00014         IOBUFF          = MSTART+$100                     ; 256-BYTE DISK I/O BUFFER
     220A             (           eq.asm):00015         ZSTACK          = MSTART+$200                     ; Z-STACK (255 WORDS)
     00FF             (           eq.asm):00016         ZSTAKL          = 255                             ; LENGTH OF Z-STACK IN WORDS
     2408             (           eq.asm):00017         TOPSTA          = (2*ZSTAKL)+ZSTACK               ; TOP OF Z-STACK
     240A             (           eq.asm):00018         PTABLE          = MSTART+$400                     ; PAGING TABLE ($140 BYTES/$A0 WORDS)
     255A             (           eq.asm):00019         LRUMAP          = MSTART+$550                     ; TIMESTAMP MAP ($A0 BYTES)
     260A             (           eq.asm):00020         LOCALS          = MSTART+$600                     ; LOCAL VARIABLE STORAGE (32 BYTES)
     262A             (           eq.asm):00021         BUFFER          = MSTART+$620                     ; I/O LINE BUFFER (32 BYTES)
     264A             (           eq.asm):00022         BUFSAV          = MSTART+$640                     ; I/O AUX BUFFER (32 BYTES)
     270A             (           eq.asm):00023         ZIP             = MSTART+$700                     ; START OF EXECUTABLE CODE
     3E0A             (           eq.asm):00024         ZCODE           = ZIP+$1700                       ; START OF Z-CODE (ASSUME 5.75K ZIP)
     003E             (           eq.asm):00025         ZCODEHIGH       = (ZIP+$1700)/256                 ; START OF Z-CODE (ASSUME 5.75K ZIP)
     00DC             (           eq.asm):00026         MEMTOP          = $DC                             ; TOP PAGE OF AVAILABLE RAM
     DD00             (           eq.asm):00027         INFCB           = $DD00
                      (           eq.asm):00028         
                      (           eq.asm):00029         ; Z-CODE HEADER OFFSETS
                      (           eq.asm):00030         
     0000             (           eq.asm):00031         ZVERS           = 0                               ; VERSION BYTE
     0001             (           eq.asm):00032         ZMODE           = 1                               ; MODE SELECT BYTE
     0002             (           eq.asm):00033         ZID             = 2                               ; GAME ID WORD
     0004             (           eq.asm):00034         ZENDLD          = 4                               ; START OF NON-PRELOADED Z-CODE
     0006             (           eq.asm):00035         ZBEGIN          = 6                               ; EXECUTION ADDRESS
     0008             (           eq.asm):00036         ZVOCAB          = 8                               ; START OF VOCABULARY TABLE
     000A             (           eq.asm):00037         ZOBJEC          = 10                              ; START OF OBJECT TABLE
     000C             (           eq.asm):00038         ZGLOBA          = 12                              ; START OF GLOBAL VARIABLE TABLE
     000E             (           eq.asm):00039         ZPURBT          = 14                              ; START OF "PURE" Z-CODE
     0010             (           eq.asm):00040         ZSCRIP          = 16                              ; FLAG WORD
     0012             (           eq.asm):00041         ZSERIA          = 18                              ; 3-WORD ASCII SERIAL NUMBER
     0018             (           eq.asm):00042         ZFWORD          = 24                              ; START OF FWORDS TABLE
     001A             (           eq.asm):00043         ZLENTH          = 26                              ; LENGTH OF Z-PROGRAM IN WORDS
     001C             (           eq.asm):00044         ZCHKSM          = 28                              ; Z-CODE CHECKSUM WORD
                      (           eq.asm):00045         
                      (           eq.asm):00046         ;       SBTTL "--- ZIP D-PAGE VARIABLES ---"
                      (           eq.asm):00047         
     0000             (           eq.asm):00048         OPCODE          = DSTART                          ; CURRENT OPCODE
     0001             (           eq.asm):00049         ARGCNT          = OPCODE+1                        ; # ARGUMENTS
     0002             (           eq.asm):00050         ARG1            = OPCODE+2                        ; ARGUMENT #1 (WORD)
     0004             (           eq.asm):00051         ARG2            = OPCODE+4                        ; ARGUMENT #2 (WORD)
     0006             (           eq.asm):00052         ARG3            = OPCODE+6                        ; ARGUMENT #3 (WORD)
     0008             (           eq.asm):00053         ARG4            = OPCODE+8                        ; ARGUMENT #4 (WORD)
                      (           eq.asm):00054         
     000A             (           eq.asm):00055         LRU             = OPCODE+10                       ; (BYTE) LEAST RECENTLY USED PAGE INDEX
     000B             (           eq.asm):00056         ZPURE           = LRU+1                           ; (BYTE) 1ST VIRTUAL PAGE OF PURE Z-CODE
     000C             (           eq.asm):00057         PMAX            = LRU+2                           ; (BYTE) MAXIMUM # SWAPPING PAGES
     000D             (           eq.asm):00058         ZPAGE           = LRU+3                           ; (BYTE) CURRENT SWAPPING PAGE
     000E             (           eq.asm):00059         PAGE0           = LRU+4                           ; (BYTE) 1ST ABS PAGE OF SWAPPING SPACE
     000F             (           eq.asm):00060         TABTOP          = LRU+5                           ; (WORD) ADDRESS OF LAST P-TABLE ENTRY
     0011             (           eq.asm):00061         STAMP           = LRU+7                           ; (BYTE) CURRENT TIMESTAMP (BM 11/24/84)
     0012             (           eq.asm):00062         SWAP            = LRU+8                           ; (BYTE) EARLIEST BUFFER (BM 11/24/84)
                      (           eq.asm):00063         
     0013             (           eq.asm):00064         ZPCH            = LRU+9                           ; HIGHEST-ORDER BIT OF PC
     0014             (           eq.asm):00065         ZPCM            = ZPCH+1                          ; MIDDLE 8 BITS OF PC
     0015             (           eq.asm):00066         ZPCL            = ZPCH+2                          ; LOWER 8 BITS OF PC
     0016             (           eq.asm):00067         ZPCPNT          = ZPCH+3                          ; POINTER TO ACTUAL PC PAGE (WORD)
     0018             (           eq.asm):00068         ZPCFLG          = ZPCH+5                          ; FLAG: "TRUE" IF ZPCPNT VALID
                      (           eq.asm):00069         
     001A             (           eq.asm):00070         MPCH            = ZPCH+7                          ; HIGHEST-ORDER BIT OF MEM POINTER
     001B             (           eq.asm):00071         MPCM            = MPCH+1                          ; MIDDLE 8 BITS OF MEM POINTER
     001C             (           eq.asm):00072         MPCL            = MPCH+2                          ; LOW-ORDER 8 BITS OF MEMORY POINTER
     001D             (           eq.asm):00073         MPCPNT          = MPCH+3                          ; ACTUAL POINTER TO MEMORY (WORD)
     001F             (           eq.asm):00074         MPCFLG          = MPCH+5                          ; FLAG: "TRUE" IF MPCPNT VALID
                      (           eq.asm):00075         
     0021             (           eq.asm):00076         GLOBAL          = MPCH+7                          ; GLOBAL VARIABLE POINTER (WORD)
     0023             (           eq.asm):00077         VOCAB           = GLOBAL+2                        ; VOCAB TABLE POINTER (WORD)
     0025             (           eq.asm):00078         FWORDS          = GLOBAL+4                        ; FWORDS TABLE POINTER (WORD)
                      (           eq.asm):00079         
     0027             (           eq.asm):00080         OZSTAK          = GLOBAL+6                        ; ZSP SAVE REGISTER (FOR ZCALL)
                      (           eq.asm):00081         
     0029             (           eq.asm):00082         CSTEMP          = OZSTAK+2                        ; SET IF TEMP CHARSET IN EFFECT
     002A             (           eq.asm):00083         CSPERM          = CSTEMP+1                        ; CURRENT PERM CHARSET
     002B             (           eq.asm):00084         STBYTF          = CSTEMP+2                        ; 0=1ST, 1=2ND, 2=3RD, 0=LAST
                      (           eq.asm):00085         
     002C             (           eq.asm):00086         ZSTWRD          = CSTEMP+3                        ; WORD STORAGE (WORD)
     002E             (           eq.asm):00087         ZSTBUI          = ZSTWRD+2                        ; Z-STRING INPUT BUFFER (6 BYTES)
     0034             (           eq.asm):00088         ZSTBUO          = ZSTWRD+8                        ; Z-STRING OUTPUT BUFFER (6 BYTES)
     003A             (           eq.asm):00089         RTABP           = ZSTWRD+14                       ; RESULT TABLE POINTER
     003B             (           eq.asm):00090         STABP           = ZSTWRD+15                       ; SOURCE TABLE POINTER
     003C             (           eq.asm):00091         PZSTFO          = ZSTWRD+16                       ; FWORD TABLE BLOCK OFFSET
                      (           eq.asm):00092         
     003D             (           eq.asm):00093         VAL             = ZSTWRD+17                       ; VALUE RETURN REGISTER (WORD)
     003F             (           eq.asm):00094         TEMP            = VAL+2                           ; TEMPORARY REGISTER (WORD)
     0041             (           eq.asm):00095         TEMP2           = VAL+4                           ; ANOTHER TEMPORARY REGISTER (WORD)
     0043             (           eq.asm):00096         MASK            = VAL+6                           ; BIT-MASK REGISTER (WORD)
     0045             (           eq.asm):00097         SQUOT           = VAL+8                           ; SIGN OF QUOTIENT
     0046             (           eq.asm):00098         SREM            = VAL+9                           ; SIGN OF REMAINDER
     0047             (           eq.asm):00099         MTEMP           = VAL+10                          ; MATH TEMP REGISTER (WORD)
                      (           eq.asm):00100         
     0049             (           eq.asm):00101         DRIVE           = VAL+12                          ; DRIVE NUMBER
     004A             (           eq.asm):00102         DBUFF           = DRIVE+1                         ; DISK I/O BUFFER POINTER (WORD)
     004C             (           eq.asm):00103         DBLOCK          = DRIVE+3                         ; Z-BLOCK # (WORD)
     004E             (           eq.asm):00104         TRACK           = DRIVE+5                         ; TRACK/SECTOR ADDRESS (WORD)
                      (           eq.asm):00105         
     0050             (           eq.asm):00106         TIMEFL          = DRIVE+7                         ; "TRUE" IF TIME MODE
                      (           eq.asm):00107         
     0051             (           eq.asm):00108         CHRPNT          = TIMEFL+1                        ; I/O BUFFER INDEX
     0052             (           eq.asm):00109         CPSAV           = CHRPNT+1                        ; SAVE REGISTER FOR [CHRPNT]
     0053             (           eq.asm):00110         BINDEX          = CHRPNT+2                        ; BUFFER DISPLAY INDEX
     0054             (           eq.asm):00111         LINCNT          = CHRPNT+3                        ; # LINES DISPLAYED SINCE LAST USL
     0055             (           eq.asm):00112         IOCHAR          = CHRPNT+4                        ; CURRENT I/O CHARACTER
     0056             (           eq.asm):00113         GDRIVE          = CHRPNT+5                        ; GAME-SAVE DEFAULT DRIVE #
     0057             (           eq.asm):00114         GPOSIT          = CHRPNT+6                        ; GAME-SAVE DEFAULT POSITION
     0058             (           eq.asm):00115         RAND1           = CHRPNT+7                        ; RANDOM NUMBER REGISTER
     0059             (           eq.asm):00116         RAND2           = CHRPNT+8                        ; DITTO
     005A             (           eq.asm):00117         CYCLE           = CHRPNT+9                        ; TIMER FOR CURSOR BLINK (WORD)
     005C             (           eq.asm):00118         BLINK           = CHRPNT+11                       ; MASK FOR CURSOR BLINK
     005D             (           eq.asm):00119         CFLAG           = CHRPNT+12                       ; CURSOR ENABLE FLAG
     005E             (           eq.asm):00120         SCRIPT          = CHRPNT+13                       ; SCRIPTING ENABLE FLAG
     005F             (           eq.asm):00121         IHOLD           = CHRPNT+14                       ; INTERRUPT HOLD
     0060             (           eq.asm):00122         TPOSIT          = CHRPNT+15                       ; TEMP GAME POSITION
     0061             (           eq.asm):00123         TDRIVE          = CHRPNT+16                       ; TEMP GAME DRIVE
                      (           eq.asm):00124         
     0060             (           eq.asm):00125         ZPGTOP          = CHRPNT+15                       ; END OF DIRECT-PAGE VARIABLES
                      (     cubixzip.asm):00045                 INCLUDE warm.asm
                      (         warm.asm):00001         ;       PAGE
                      (         warm.asm):00002         ;       SBTTL "--- WARMSTART ROUTINE ---"
                      (         warm.asm):00003         
     00               (         warm.asm):00004                 SETDP   0
                      (         warm.asm):00005                 ORG     ZIP                               ; START OF EXECUTABLE CODE
                      (         warm.asm):00006         
                      (         warm.asm):00007         ; WARMSTART ENTRY
                      (         warm.asm):00008         
270A                  (         warm.asm):00009         START:
270A 10CE2108         (         warm.asm):00010                 LDS     #MSTACK                           ; RESET MACHINE STACK
                      (         warm.asm):00011         
                      (         warm.asm):00012         
                      (         warm.asm):00013         ; TEST TO SEE IF ZIP IS ALL LOADED
                      (         warm.asm):00014         
270E 8E0003           (         warm.asm):00015                 LDX     #3
2711                  (         warm.asm):00016         TSTEND:
2711 A6893962         (         warm.asm):00017                 LDA     ENDTST-1,X
2715 A1892725         (         warm.asm):00018                 CMPA    ENDCMP-1,X
2719 2606             (         warm.asm):00019                 BNE     ENDERR
271B 301F             (         warm.asm):00020                 LEAX    -1,X
271D 26F2             (         warm.asm):00021                 BNE     TSTEND
271F 2009             (         warm.asm):00022                 BRA     ENDOK
2721                  (         warm.asm):00023         ENDERR:
2721 8610             (         warm.asm):00024                 LDA     #16
2723 7E350C           (         warm.asm):00025                 JMP     ZERROR                            ;
                      (         warm.asm):00026         
2726                  (         warm.asm):00027         ENDCMP:
2726 454E4400         (         warm.asm):00028                 FCN     'END'
                      (         warm.asm):00029         
                      (         warm.asm):00030         ; CLEAR ALL DIRECT-PAGE VARIABLES
                      (         warm.asm):00031         
272A                  (         warm.asm):00032         ENDOK:
272A 8E0000           (         warm.asm):00033                 LDX     #DSTART
272D                  (         warm.asm):00034         ST0:
272D 6F80             (         warm.asm):00035                 CLR     ,X+
272F 8C0060           (         warm.asm):00036                 CMPX    #ZPGTOP
2732 25F9             (         warm.asm):00037                 BLO     ST0
                      (         warm.asm):00038         
2734 0C11             (         warm.asm):00039                 INC     STAMP                             ; INIT TIMESTAMP TO 1 (BM 11/24/84)
                      (         warm.asm):00040         
                      (         warm.asm):00041         ; RESET THE PAGING TABLE
                      (         warm.asm):00042         
2736 8E240A           (         warm.asm):00043                 LDX     #PTABLE
2739 86FF             (         warm.asm):00044                 LDA     #$FF
273B                  (         warm.asm):00045         ST1A:
273B A780             (         warm.asm):00046                 STA     ,X+
273D 8C254A           (         warm.asm):00047                 CMPX    #PTABLE+$140
2740 25F9             (         warm.asm):00048                 BLO     ST1A
                      (         warm.asm):00049         
                      (         warm.asm):00050         ; CLEAR THE TIMESTAMP MAP (BM 11/24/84)
                      (         warm.asm):00051         
2742 8E255A           (         warm.asm):00052                 LDX     #LRUMAP
2745                  (         warm.asm):00053         ST1B:
2745 6F80             (         warm.asm):00054                 CLR     ,X+
2747 8C25FA           (         warm.asm):00055                 CMPX    #LRUMAP+$A0
274A 25F9             (         warm.asm):00056                 BLO     ST1B
                      (         warm.asm):00057         
274C BD36B5           (         warm.asm):00058                 JSR     OPENGAMEDSK                     ; open the game file -- needs to be selected by now
274F CC0000           (         warm.asm):00059                 LDD     #0
2752 DD4C             (         warm.asm):00060                 STD     DBLOCK
                      (         warm.asm):00061         
                      (         warm.asm):00062         ; GET THE FIRST SECTOR OF Z-CODE
                      (         warm.asm):00063         
2754 CC3E0A           (         warm.asm):00064                 LDD     #ZCODE                            ; POINT TO 1ST
2757 DD4A             (         warm.asm):00065                 STD     DBUFF                             ; Z-CODE LOCATION
2759 BD36C5           (         warm.asm):00066                 JSR     GETDSK                            ; FETCH BLOCK #0 FROM DRIVE 0
                      (         warm.asm):00067         
                      (         warm.asm):00068         ; EXTRACT GAME DATA FROM Z-CODE HEADER
                      (         warm.asm):00069         
275C B63E0E           (         warm.asm):00070                 LDA     ZCODE+ZENDLD                      ; GET MSB OF ENDLOAD POINTER
275F 4C               (         warm.asm):00071                 INCA                                      ; ADD ONE TO GET
2760 970B             (         warm.asm):00072                 STA     ZPURE                             ; 1ST PAGE IN "PURE" CODE
2762 8B3E             (         warm.asm):00073                 ADDA    #ZCODEHIGH                        ; ADD BASE ADDRESS TO GET
2764 970E             (         warm.asm):00074                 STA     PAGE0                             ; 1ST PAGE OF SWAPPING SPACE
                      (         warm.asm):00075         
2766 C6DC             (         warm.asm):00076                 LDB     #MEMTOP                           ; TOP PAGE OF MEMORY
2768 D00E             (         warm.asm):00077                 SUBB    PAGE0                             ; SUBTRACT ADDRESS OF PAGING BUFFER
276A 2304             (         warm.asm):00078                 BLS     NORAM
276C C108             (         warm.asm):00079                 CMPB    #8
276E 2404             (         warm.asm):00080                 BHS     SETNP                             ; MUST HAVE AT LEAST 8 SWAPPING PAGES
                      (         warm.asm):00081         
                      (         warm.asm):00082         ; *** ERROR #0 -- INSUFFICIENT RAM ***
                      (         warm.asm):00083         
2770                  (         warm.asm):00084         NORAM:
2770 4F               (         warm.asm):00085                 CLRA
2771 BD350C           (         warm.asm):00086                 JSR     ZERROR
                      (         warm.asm):00087         
                      (         warm.asm):00088         ; [B] HAS # FREE SWAPPING PAGES
                      (         warm.asm):00089         
2774                  (         warm.asm):00090         SETNP:
2774 C1A0             (         warm.asm):00091                 CMPB    #$A0                              ; MAKE SURE # PAGES
2776 2502             (         warm.asm):00092                 BLO     SETA0                             ; DOESN'T EXCEED
2778 C6A0             (         warm.asm):00093                 LDB     #$A0                              ; $A0 (BM 11/24/84)
277A                  (         warm.asm):00094         SETA0:
277A D70C             (         warm.asm):00095                 STB     PMAX                              ; SET MAXIMUM # FREE PAGES
277C 8E240A           (         warm.asm):00096                 LDX     #PTABLE                           ; ADD BASE ADDR OF P-TABLE
277F 3A               (         warm.asm):00097                 ABX                                       ; TO PAGING LIMIT
2780 3A               (         warm.asm):00098                 ABX                                       ; TWICE (FOR WORD-ALIGNMENT)
2781 9F0F             (         warm.asm):00099                 STX     TABTOP                            ; TO GET ADDR OF HIGHEST TABLE ENTRY
                      (         warm.asm):00100         
2783 B63E0B           (         warm.asm):00101                 LDA     ZCODE+ZMODE                       ; GET MODE BYTE
2786 8A08             (         warm.asm):00102                 ORA     #%00001000                        ; SET THE "TANDY" ID BIT
2788 B73E0B           (         warm.asm):00103                 STA     ZCODE+ZMODE                       ; (WE DON'T WANT ANY DIRTY WORDS)
278B 8402             (         warm.asm):00104                 ANDA    #%00000010                        ; ISOLATE STAT-LINE FORMAT BIT
278D 9750             (         warm.asm):00105                 STA     TIMEFL                            ; 0=SCORE/MOVES, NZ=HOURS/MINUTES
                      (         warm.asm):00106         
278F FC3E10           (         warm.asm):00107                 LDD     ZCODE+ZBEGIN                      ; GET START ADDRESS OF Z-CODE
2792 DD14             (         warm.asm):00108                 STD     ZPCM                              ; HIGH BITS AT ZPCH ALREADY CLEARED
                      (         warm.asm):00109         
2794 FC3E16           (         warm.asm):00110                 LDD     ZCODE+ZGLOBA                      ; GET RELATIVE ADDR OF GLOBAL TABLE
2797 C33E0A           (         warm.asm):00111                 ADDD    #ZCODE                            ; CONVERT TO ABSOLUTE ADDRESS
279A DD21             (         warm.asm):00112                 STD     GLOBAL
                      (         warm.asm):00113         
279C FC3E22           (         warm.asm):00114                 LDD     ZCODE+ZFWORD                      ; DO SAME FOR FWORDS TABLE
279F C33E0A           (         warm.asm):00115                 ADDD    #ZCODE
27A2 DD25             (         warm.asm):00116                 STD     FWORDS
                      (         warm.asm):00117         
27A4 FC3E12           (         warm.asm):00118                 LDD     ZCODE+ZVOCAB                      ; AND VOCABULARY TABLE
27A7 C33E0A           (         warm.asm):00119                 ADDD    #ZCODE
27AA DD23             (         warm.asm):00120                 STD     VOCAB
                      (         warm.asm):00121         
                      (         warm.asm):00122         ; GRAB THE REST OF THE PRELOAD
                      (         warm.asm):00123         
27AC 960B             (         warm.asm):00124                 LDA     ZPURE                             ; GET # PAGES IN PRELOAD + 1
27AE 973F             (         warm.asm):00125                 STA     TEMP                              ; USE AS AN INDEX
27B0                  (         warm.asm):00126         LDPRE:
27B0 BD36C5           (         warm.asm):00127                 JSR     GETDSK                            ; GRAB THE BLOCK
27B3 0A3F             (         warm.asm):00128                 DEC     TEMP
27B5 26F9             (         warm.asm):00129                 BNE     LDPRE                             ; KEEP READING TILL DONE
                      (         warm.asm):00130         
27B7 CE2408           (         warm.asm):00131                 LDU     #TOPSTA                           ; INIT THE ZSP
27BA DF27             (         warm.asm):00132                 STU     OZSTAK                            ; REMEMBER ITS POSITION
                      (         warm.asm):00133         
27BC BD34B3           (         warm.asm):00134                 JSR     CLS                               ; CLEAR THE SCREEN
27BF 035E             (         warm.asm):00135                 COM     SCRIPT                            ; ENABLE SCRIPTING
                      (         warm.asm):00136         
27C1 B63498           (         warm.asm):00137                 LDA     SFLAG                             ; SCRIPTING FLAG
27C4 B73E1B           (         warm.asm):00138                 STA     ZCODE+ZSCRIP+1
                      (         warm.asm):00139         
                      (         warm.asm):00140         ; FALL INTO MAIN LOOP
                      (     cubixzip.asm):00046         
                      (     cubixzip.asm):00047         ;TITLE "ZIP/6809-B INFOCOM, INC. --- MAINLINE"
                      (     cubixzip.asm):00048                 INCLUDE MAIN.ASM
                      (         MAIN.ASM):00001         ;       PAGE
                      (         MAIN.ASM):00002         ;       SBTTL "--- MAIN LOOP ---"
                      (         MAIN.ASM):00003         
27C7                  (         MAIN.ASM):00004         MLOOP:
27C7 0A59             (         MAIN.ASM):00005                 DEC     RAND2                             ; RANDOMNESS
27C9 0A59             (         MAIN.ASM):00006                 DEC     RAND2
                      (         MAIN.ASM):00007         
27CB 0F01             (         MAIN.ASM):00008                 CLR     ARGCNT                            ; RESET # ARGUMENTS
27CD BD309B           (         MAIN.ASM):00009                 JSR     NEXTPC                            ; GET NEXT Z-BYTE
27D0 9700             (         MAIN.ASM):00010                 STA     OPCODE                            ; SAVE OPCODE
                      (         MAIN.ASM):00011         
                      (         MAIN.ASM):00012                 IF      DEBUG = 1
                      (         MAIN.ASM):00013                     LDB     #'0'
                      (         MAIN.ASM):00014                     JSR     DOBUG
                      (         MAIN.ASM):00015                     LDA     OPCODE
                      (         MAIN.ASM):00016                 ENDIF
                      (         MAIN.ASM):00017         
27D2 102A00A4         (         MAIN.ASM):00018                 LBPL    OP2                               ; 2-OP IF POSITIVE
27D6 81B0             (         MAIN.ASM):00019                 CMPA    #176
27D8 256F             (         MAIN.ASM):00020                 BLO     OP1                               ; IT'S A 1-OP
27DA 81C0             (         MAIN.ASM):00021                 CMPA    #192
27DC 255B             (         MAIN.ASM):00022                 BLO     OP0                               ; IF NOT A 0-OP ...
                      (         MAIN.ASM):00023         
                      (         MAIN.ASM):00024         ; HANDLE AN X-OP
                      (         MAIN.ASM):00025         
27DE                  (         MAIN.ASM):00026         OPEXT:
27DE BD309B           (         MAIN.ASM):00027                 JSR     NEXTPC                            ; GET ARGUMENT BYTE
27E1 9741             (         MAIN.ASM):00028                 STA     TEMP2                             ; HOLD IT HERE
27E3 0F42             (         MAIN.ASM):00029                 CLR     TEMP2+1                           ; INIT LOOP INDEX
27E5 2006             (         MAIN.ASM):00030                 BRA     OPX1
                      (         MAIN.ASM):00031         
27E7                  (         MAIN.ASM):00032         OPX0:
27E7 9641             (         MAIN.ASM):00033                 LDA     TEMP2                             ; GRAB ARG BYTE
27E9 48               (         MAIN.ASM):00034                 ASLA                                      ; SHIFT TO BITS 7 & 6
27EA 48               (         MAIN.ASM):00035                 ASLA
27EB 9741             (         MAIN.ASM):00036                 STA     TEMP2                             ; SAVE RESULT
                      (         MAIN.ASM):00037         
27ED                  (         MAIN.ASM):00038         OPX1:
27ED 84C0             (         MAIN.ASM):00039                 ANDA    #%11000000                        ; MASK OUT GARBAGE
27EF 2605             (         MAIN.ASM):00040                 BNE     OPX2
27F1 BD28BA           (         MAIN.ASM):00041                 JSR     GETLNG                            ; 00 = LONG IMMEDIATE
27F4 2010             (         MAIN.ASM):00042                 BRA     OPXNXT
                      (         MAIN.ASM):00043         
27F6                  (         MAIN.ASM):00044         OPX2:
27F6 8140             (         MAIN.ASM):00045                 CMPA    #%01000000
27F8 2605             (         MAIN.ASM):00046                 BNE     OPX3
27FA BD28B2           (         MAIN.ASM):00047                 JSR     GETSHT                            ; 01 = SHORT IMMEDIATE
27FD 2007             (         MAIN.ASM):00048                 BRA     OPXNXT
                      (         MAIN.ASM):00049         
27FF                  (         MAIN.ASM):00050         OPX3:
27FF 8180             (         MAIN.ASM):00051                 CMPA    #%10000000
2801 2619             (         MAIN.ASM):00052                 BNE     OPX4                              ; 11 = NO MORE VARIABLES
2803 BD28D1           (         MAIN.ASM):00053                 JSR     GETVAR                            ; 10 = VARIABLE
                      (         MAIN.ASM):00054         
2806                  (         MAIN.ASM):00055         OPXNXT:
2806 D642             (         MAIN.ASM):00056                 LDB     TEMP2+1                           ; GET INDEX
2808 8E0002           (         MAIN.ASM):00057                 LDX     #ARG1                             ; BASE ADDR OF ARGS
280B 3A               (         MAIN.ASM):00058                 ABX                                       ; ADD OFFSET IN B
280C DC3F             (         MAIN.ASM):00059                 LDD     TEMP                              ; GRAB THE ARGUMENT'S VALUE
280E ED84             (         MAIN.ASM):00060                 STD     ,X                                ; AND SAVE IT
2810 0C01             (         MAIN.ASM):00061                 INC     ARGCNT                            ; KEEP TRACK
2812 0C42             (         MAIN.ASM):00062                 INC     TEMP2+1                           ; UPDATE
2814 0C42             (         MAIN.ASM):00063                 INC     TEMP2+1                           ; ARGUMENT INDEX
2816 9642             (         MAIN.ASM):00064                 LDA     TEMP2+1                           ; DONE 4 ARGS YET?
2818 8108             (         MAIN.ASM):00065                 CMPA    #8
281A 25CB             (         MAIN.ASM):00066                 BLO     OPX0                              ; NO, KEEP GRABBING
                      (         MAIN.ASM):00067         
                      (         MAIN.ASM):00068         ; DISPATCH THE X-OP
                      (         MAIN.ASM):00069         
281C                  (         MAIN.ASM):00070         OPX4:
281C D600             (         MAIN.ASM):00071                 LDB     OPCODE                            ; RETRIEVE THE OPCODE
281E C1E0             (         MAIN.ASM):00072                 CMPB    #224                              ; IS IT AN EXTENDED 2-OP?
2820 1025007C         (         MAIN.ASM):00073                 LBLO    OP2EX                             ; YES, HANDLE LIKE A 2-OP
2824 C41F             (         MAIN.ASM):00074                 ANDB    #%00011111                        ; ELSE ISOLATE OP BITS
2826 C10C             (         MAIN.ASM):00075                 CMPB    #NOPSX                            ; COMPARE TO LEGAL # OF X-OPS
2828 2505             (         MAIN.ASM):00076                 BLO     DISPX                             ; CONTINUE IF OKAY
                      (         MAIN.ASM):00077         
                      (         MAIN.ASM):00078         ; *** ERROR #1 -- ILLEGAL X-OP ***
                      (         MAIN.ASM):00079         
282A 8601             (         MAIN.ASM):00080                 LDA     #1
282C BD350C           (         MAIN.ASM):00081                 JSR     ZERROR
                      (         MAIN.ASM):00082         
282F                  (         MAIN.ASM):00083         DISPX:
282F 8E2A2C           (         MAIN.ASM):00084                 LDX     #OPTX                             ; X-OP DISPATCH TABLE
2832                  (         MAIN.ASM):00085         DODIS:
2832 58               (         MAIN.ASM):00086                 ASLB                                      ; FORM A WORD-OFFSET INTO IT
2833 3A               (         MAIN.ASM):00087                 ABX                                       ; ADD THE OFFSET
                      (         MAIN.ASM):00088         
                      (         MAIN.ASM):00089                 IF      DEBUG
                      (         MAIN.ASM):00090                     PSHS    X
                      (         MAIN.ASM):00091                     LDB     #'1'
                      (         MAIN.ASM):00092                     JSR     DOBUG
                      (         MAIN.ASM):00093                     PULS    X
                      (         MAIN.ASM):00094                 ENDIF
                      (         MAIN.ASM):00095         
2834 AD94             (         MAIN.ASM):00096                 JSR     [,X]                              ; HANDLE THE OPCODE
2836 7E27C7           (         MAIN.ASM):00097                 JMP     MLOOP                             ; AND GO BACK FOR ANOTHER
                      (         MAIN.ASM):00098         
                      (         MAIN.ASM):00099         ; HANDLE A 0-OP
                      (         MAIN.ASM):00100         
2839                  (         MAIN.ASM):00101         OP0:
2839 8E29BE           (         MAIN.ASM):00102                 LDX     #OPT0                             ; 0-OP DISPATCH TABLE
283C D600             (         MAIN.ASM):00103                 LDB     OPCODE                            ; FETCH OPCODE
283E C40F             (         MAIN.ASM):00104                 ANDB    #%00001111                        ; ISOLATE OP BITS
2840 C10E             (         MAIN.ASM):00105                 CMPB    #NOPS0                            ; OPCODE OUT OF RANGE?
2842 25EE             (         MAIN.ASM):00106                 BLO     DODIS                             ; NO, GO DISPATCH IT
                      (         MAIN.ASM):00107         
                      (         MAIN.ASM):00108         ; *** ERROR #2 -- ILLEGAL 0-OP ***
                      (         MAIN.ASM):00109         
2844 8602             (         MAIN.ASM):00110                 LDA     #2
2846 BD350C           (         MAIN.ASM):00111                 JSR     ZERROR
                      (         MAIN.ASM):00112         
                      (         MAIN.ASM):00113         ; HANDLE A 1-OP
                      (         MAIN.ASM):00114         
2849                  (         MAIN.ASM):00115         OP1:
2849 8430             (         MAIN.ASM):00116                 ANDA    #%00110000                        ; ISOLATE ARG BITS
284B 2605             (         MAIN.ASM):00117                 BNE     OP1A
284D BD28BA           (         MAIN.ASM):00118                 JSR     GETLNG                            ; 00 = LONG IMMEDIATE
2850 2015             (         MAIN.ASM):00119                 BRA     OP1EX
                      (         MAIN.ASM):00120         
2852                  (         MAIN.ASM):00121         OP1A:
2852 8110             (         MAIN.ASM):00122                 CMPA    #%00010000
2854 2605             (         MAIN.ASM):00123                 BNE     OP1B
2856 BD28B2           (         MAIN.ASM):00124                 JSR     GETSHT                            ; 01 = SHORT IMMEDIATE
2859 200C             (         MAIN.ASM):00125                 BRA     OP1EX
                      (         MAIN.ASM):00126         
285B                  (         MAIN.ASM):00127         OP1B:
285B 8120             (         MAIN.ASM):00128                 CMPA    #%00100000
285D 2705             (         MAIN.ASM):00129                 BEQ     OP1C
                      (         MAIN.ASM):00130         
                      (         MAIN.ASM):00131         ; *** ERROR #3 -- ILLEGAL 1-OP ***
                      (         MAIN.ASM):00132         
285F                  (         MAIN.ASM):00133         BADOP1:
285F 8603             (         MAIN.ASM):00134                 LDA     #3
2861 BD350C           (         MAIN.ASM):00135                 JSR     ZERROR
                      (         MAIN.ASM):00136         
2864                  (         MAIN.ASM):00137         OP1C:
2864 BD28D1           (         MAIN.ASM):00138                 JSR     GETVAR                            ; 10 = VARIABLE
                      (         MAIN.ASM):00139         
2867                  (         MAIN.ASM):00140         OP1EX:
2867 DC3F             (         MAIN.ASM):00141                 LDD     TEMP
2869 DD02             (         MAIN.ASM):00142                 STD     ARG1                              ; GRAB THE ARGUMENT
286B 0C01             (         MAIN.ASM):00143                 INC     ARGCNT                            ; ONE ARGUMENT
286D 8E29DA           (         MAIN.ASM):00144                 LDX     #OPT1                             ; ADDR OF 1-OP DISPATCH TABLE
2870 D600             (         MAIN.ASM):00145                 LDB     OPCODE                            ; RESTORE OPCODE
2872 C40F             (         MAIN.ASM):00146                 ANDB    #%00001111                        ; ISOLATE OP BITS
2874 C110             (         MAIN.ASM):00147                 CMPB    #NOPS1                            ; IF OPCODE OUT OF RANGE,
2876 24E7             (         MAIN.ASM):00148                 BHS     BADOP1                            ; REPORT IT
2878 20B8             (         MAIN.ASM):00149                 BRA     DODIS                             ; ELSE DISPATCH THE 1-OP
                      (         MAIN.ASM):00150         
                      (         MAIN.ASM):00151         ; HANDLE A 2-OP
                      (         MAIN.ASM):00152         
287A                  (         MAIN.ASM):00153         OP2:
287A 8440             (         MAIN.ASM):00154                 ANDA    #%01000000                        ; ISOLATE 1ST ARG BIT
287C 2605             (         MAIN.ASM):00155                 BNE     OP2A
287E BD28B2           (         MAIN.ASM):00156                 JSR     GETSHT                            ; 0 = SHORT IMMEDIATE
2881 2003             (         MAIN.ASM):00157                 BRA     OP2B
                      (         MAIN.ASM):00158         
2883                  (         MAIN.ASM):00159         OP2A:
2883 BD28D1           (         MAIN.ASM):00160                 JSR     GETVAR                            ; 1 = VARIABLE
                      (         MAIN.ASM):00161         
2886                  (         MAIN.ASM):00162         OP2B:
2886 DC3F             (         MAIN.ASM):00163                 LDD     TEMP                              ; GRAB VALUE
2888 DD02             (         MAIN.ASM):00164                 STD     ARG1                              ; SAVE IN ARG1
288A 0C01             (         MAIN.ASM):00165                 INC     ARGCNT
                      (         MAIN.ASM):00166         
288C 9600             (         MAIN.ASM):00167                 LDA     OPCODE                            ; RESTORE OPCODE
288E 8420             (         MAIN.ASM):00168                 ANDA    #%00100000                        ; ISOLATE 2ND ARG BIT
2890 2605             (         MAIN.ASM):00169                 BNE     OP2C
2892 BD28B2           (         MAIN.ASM):00170                 JSR     GETSHT                            ; 0 = SHORT IMMEDIATE
2895 2003             (         MAIN.ASM):00171                 BRA     OP2D
                      (         MAIN.ASM):00172         
2897                  (         MAIN.ASM):00173         OP2C:
2897 BD28D1           (         MAIN.ASM):00174                 JSR     GETVAR                            ; 1 = VARIABLE
                      (         MAIN.ASM):00175         
289A                  (         MAIN.ASM):00176         OP2D:
289A DC3F             (         MAIN.ASM):00177                 LDD     TEMP                              ; GRAB 2ND VALUE
289C DD04             (         MAIN.ASM):00178                 STD     ARG2                              ; STORE AS ARG2
289E 0C01             (         MAIN.ASM):00179                 INC     ARGCNT
                      (         MAIN.ASM):00180         
28A0                  (         MAIN.ASM):00181         OP2EX:
28A0 8E29FA           (         MAIN.ASM):00182                 LDX     #OPT2                             ; ADDR OF 2-OP DISPATCH TABLE
28A3 D600             (         MAIN.ASM):00183                 LDB     OPCODE                            ; RESTORE YET AGAIN
28A5 C41F             (         MAIN.ASM):00184                 ANDB    #%00011111                        ; ISOLATE OP BITS
28A7 C119             (         MAIN.ASM):00185                 CMPB    #NOPS2                            ; OPCODE IN RANGE?
28A9 1025FF85         (         MAIN.ASM):00186                 LBLO    DODIS                             ; YES, GO DISPATCH IT
                      (         MAIN.ASM):00187         
                      (         MAIN.ASM):00188         ; *** ERROR #4 -- ILLEGAL 2-OP ***
                      (         MAIN.ASM):00189         
28AD                  (         MAIN.ASM):00190         BADOP2:
28AD 8604             (         MAIN.ASM):00191                 LDA     #4
28AF BD350C           (         MAIN.ASM):00192                 JSR     ZERROR
                      (     cubixzip.asm):00049                 INCLUDE SUBS.ASM
                      (         SUBS.ASM):00001         ;       PAGE
                      (         SUBS.ASM):00002         ;       SBTTL "--- MAIN LOOP SUPPORT ---"
                      (         SUBS.ASM):00003         
                      (         SUBS.ASM):00004         ; -----------------------
                      (         SUBS.ASM):00005         ; FETCH A SHORT IMMEDIATE
                      (         SUBS.ASM):00006         ; -----------------------
                      (         SUBS.ASM):00007         
28B2                  (         SUBS.ASM):00008         GETSHT:
28B2 BD309B           (         SUBS.ASM):00009                 JSR     NEXTPC                            ; NEXT Z-BYTE IS
28B5 9740             (         SUBS.ASM):00010                 STA     TEMP+1                            ; THE LSB OF ARGUMENT
28B7 0F3F             (         SUBS.ASM):00011                 CLR     TEMP                              ; MSB IS ZERO
28B9 39               (         SUBS.ASM):00012                 RTS
                      (         SUBS.ASM):00013         
                      (         SUBS.ASM):00014         ; ----------------------
                      (         SUBS.ASM):00015         ; FETCH A LONG IMMEDIATE
                      (         SUBS.ASM):00016         ; ----------------------
                      (         SUBS.ASM):00017         
28BA                  (         SUBS.ASM):00018         GETLNG:
28BA BD309B           (         SUBS.ASM):00019                 JSR     NEXTPC                            ; NEXT Z-BYTE IS MSB
28BD 3402             (         SUBS.ASM):00020                 PSHS    A                                 ; SAVE ON STACK
28BF BD309B           (         SUBS.ASM):00021                 JSR     NEXTPC                            ; NOW GRAB LSB
28C2 9740             (         SUBS.ASM):00022                 STA     TEMP+1                            ; STORE IT
28C4 3502             (         SUBS.ASM):00023                 PULS    A                                 ; RETRIEVE MSB
28C6 973F             (         SUBS.ASM):00024                 STA     TEMP                              ; AND STORE IT
28C8 39               (         SUBS.ASM):00025                 RTS
                      (         SUBS.ASM):00026         
                      (         SUBS.ASM):00027         ; ----------------
                      (         SUBS.ASM):00028         ; FETCH A VARIABLE
                      (         SUBS.ASM):00029         ; ----------------
                      (         SUBS.ASM):00030         
                      (         SUBS.ASM):00031         ; GET WITHIN AN OPCODE
                      (         SUBS.ASM):00032         
28C9                  (         SUBS.ASM):00033         VARGET:
28C9 4D               (         SUBS.ASM):00034                 TSTA                                      ; IF NON-ZERO,
28CA 260B             (         SUBS.ASM):00035                 BNE     GETVR1                            ; ACCESS A VARIABLE
28CC BD2936           (         SUBS.ASM):00036                 JSR     POPSTK                            ; ELSE TAKE VAR OFF STACK
28CF 205A             (         SUBS.ASM):00037                 BRA     PSHSTK                            ; WITHOUT ALTERING STACK
                      (         SUBS.ASM):00038         
28D1                  (         SUBS.ASM):00039         GETVAR:
28D1 BD309B           (         SUBS.ASM):00040                 JSR     NEXTPC                            ; GRAB VAR-TYPE BYTE
28D4 4D               (         SUBS.ASM):00041                 TSTA                                      ; IF ZERO,
28D5 275F             (         SUBS.ASM):00042                 BEQ     POPSTK                            ; VALUE IS ON STACK
                      (         SUBS.ASM):00043         
                      (         SUBS.ASM):00044         ; IS VARIABLE LOCAL OR GLOBAL?
                      (         SUBS.ASM):00045         
28D7                  (         SUBS.ASM):00046         GETVR1:
28D7 8110             (         SUBS.ASM):00047                 CMPA    #16
28D9 240D             (         SUBS.ASM):00048                 BHS     GETVRG                            ; IT'S GLOBAL
                      (         SUBS.ASM):00049         
                      (         SUBS.ASM):00050         ; HANDLE A LOCAL VARIABLE
                      (         SUBS.ASM):00051         
28DB                  (         SUBS.ASM):00052         GETVRL:
28DB 4A               (         SUBS.ASM):00053                 DECA                                      ; FORM A ZERO-ALIGNED INDEX
28DC 48               (         SUBS.ASM):00054                 ASLA                                      ; WORD INDEX
28DD 8E260A           (         SUBS.ASM):00055                 LDX     #LOCALS                           ; INTO LOCAL VAR TABLE
28E0 1F89             (         SUBS.ASM):00056                 TFR     A,B                               ; MOVE AND
28E2                  (         SUBS.ASM):00057         GTVX:
28E2 3A               (         SUBS.ASM):00058                 ABX                                       ; ADD INDEXING OFFSET
28E3 EC84             (         SUBS.ASM):00059                 LDD     ,X                                ; FETCH VALUE
28E5 DD3F             (         SUBS.ASM):00060                 STD     TEMP                              ; AND RETURN IT
28E7 39               (         SUBS.ASM):00061                 RTS
                      (         SUBS.ASM):00062         
                      (         SUBS.ASM):00063         ; HANDLE A GLOBAL VARIABLE
                      (         SUBS.ASM):00064         
28E8                  (         SUBS.ASM):00065         GETVRG:
28E8 8010             (         SUBS.ASM):00066                 SUBA    #16                               ; ZERO-ALIGN
28EA 9E21             (         SUBS.ASM):00067                 LDX     GLOBAL                            ; BASE OF GLOBAL VAR TABLE
28EC 1F89             (         SUBS.ASM):00068                 TFR     A,B                               ; CONVERT TO WORD-ALIGNED INDEX
28EE 3A               (         SUBS.ASM):00069                 ABX                                       ; BY ADDING OFFSET TWICE (CLEVER, EH?)
28EF 20F1             (         SUBS.ASM):00070                 BRA     GTVX                              ; 2ND ADD ABOVE
                      (         SUBS.ASM):00071         
                      (         SUBS.ASM):00072         ; --------------
                      (         SUBS.ASM):00073         ; RETURN A VALUE
                      (         SUBS.ASM):00074         ; --------------
                      (         SUBS.ASM):00075         
                      (         SUBS.ASM):00076         ; RETURN FROM WITHIN OPCODE
                      (         SUBS.ASM):00077         
28F1                  (         SUBS.ASM):00078         VARPUT:
28F1 4D               (         SUBS.ASM):00079                 TSTA                                      ; IF NON-ZERO
28F2 261D             (         SUBS.ASM):00080                 BNE     PUTVR1                            ; ACCESS A VARIABLE
28F4 3706             (         SUBS.ASM):00081                 PULU    D                                 ; ELSE FLUSH TOP ITEM OFF STACK
28F6 11832408         (         SUBS.ASM):00082                 CMPU    #TOPSTA
28FA 2245             (         SUBS.ASM):00083                 BHI     UNDER                             ; WATCH FOR UNDERFLOW!
28FC 202D             (         SUBS.ASM):00084                 BRA     PSHSTK                            ; AND PUSH [TEMP] ONTO STACK
                      (         SUBS.ASM):00085         
                      (         SUBS.ASM):00086         ; RETURN A ZERO
                      (         SUBS.ASM):00087         
28FE                  (         SUBS.ASM):00088         RET0:
28FE 4F               (         SUBS.ASM):00089                 CLRA                                      ; CLEAR MSB
                      (         SUBS.ASM):00090         
                      (         SUBS.ASM):00091         ; RETURN BYTE IN [A]
                      (         SUBS.ASM):00092         
28FF                  (         SUBS.ASM):00093         PUTBYT:
28FF 9740             (         SUBS.ASM):00094                 STA     TEMP+1                            ; USE [A] AS LSB
2901 0F3F             (         SUBS.ASM):00095                 CLR     TEMP                              ; ZERO MSB
                      (         SUBS.ASM):00096         
                      (         SUBS.ASM):00097         ; RETURN VALUE IN [TEMP]
                      (         SUBS.ASM):00098         
2903                  (         SUBS.ASM):00099         PUTVAL:
2903 9E3F             (         SUBS.ASM):00100                 LDX     TEMP                              ; GET VALUE IN [TEMP]
2905 3410             (         SUBS.ASM):00101                 PSHS    X                                 ; AND HOLD ON TO IT
2907 BD309B           (         SUBS.ASM):00102                 JSR     NEXTPC                            ; GET VAR-TYPE BYTE
290A 3510             (         SUBS.ASM):00103                 PULS    X                                 ; RETRIEVE VALUE
290C 9F3F             (         SUBS.ASM):00104                 STX     TEMP                              ; PUT IT BACK IN [TEMP]
290E 4D               (         SUBS.ASM):00105                 TSTA                                      ; IF TYPE-BYTE IS ZERO,
290F 271A             (         SUBS.ASM):00106                 BEQ     PSHSTK                            ; VALUE GOES TO THE STACK
                      (         SUBS.ASM):00107         
                      (         SUBS.ASM):00108         ; LOCAL OR GLOBAL?
                      (         SUBS.ASM):00109         
2911                  (         SUBS.ASM):00110         PUTVR1:
2911 8110             (         SUBS.ASM):00111                 CMPA    #16
2913 240D             (         SUBS.ASM):00112                 BHS     PUTVLG                            ; IT'S GLOBAL
                      (         SUBS.ASM):00113         
                      (         SUBS.ASM):00114         ; HANDLE A LOCAL VARIABLE
                      (         SUBS.ASM):00115         
2915                  (         SUBS.ASM):00116         PUTVLL:
2915 4A               (         SUBS.ASM):00117                 DECA
2916 48               (         SUBS.ASM):00118                 ASLA
2917 1F89             (         SUBS.ASM):00119                 TFR     A,B
2919 8E260A           (         SUBS.ASM):00120                 LDX     #LOCALS                           ; INTO LOCAL VARIABLE TABLE
291C                  (         SUBS.ASM):00121         PTVX:
291C 3A               (         SUBS.ASM):00122                 ABX
291D DC3F             (         SUBS.ASM):00123                 LDD     TEMP
291F ED84             (         SUBS.ASM):00124                 STD     ,X
2921 39               (         SUBS.ASM):00125                 RTS
                      (         SUBS.ASM):00126         
                      (         SUBS.ASM):00127         ; HANDLE A GLOBAL VARIABLE
                      (         SUBS.ASM):00128         
2922                  (         SUBS.ASM):00129         PUTVLG:
2922 8010             (         SUBS.ASM):00130                 SUBA    #16                               ; ZERO-ALIGN
2924 9E21             (         SUBS.ASM):00131                 LDX     GLOBAL                            ; BASE OF GLOBAL VAR TABLE
2926 1F89             (         SUBS.ASM):00132                 TFR     A,B                               ; FORM WORD-ALIGNED INDEX
2928 3A               (         SUBS.ASM):00133                 ABX                                       ; BY ADDING OFFSET TO BASE
2929 20F1             (         SUBS.ASM):00134                 BRA     PTVX                              ; TWICE
                      (         SUBS.ASM):00135         
                      (         SUBS.ASM):00136         ; --------------------
                      (         SUBS.ASM):00137         ; PUSH [TEMP] TO STACK
                      (         SUBS.ASM):00138         ; --------------------
                      (         SUBS.ASM):00139         
292B                  (         SUBS.ASM):00140         PSHSTK:
292B DC3F             (         SUBS.ASM):00141                 LDD     TEMP
                      (         SUBS.ASM):00142         
                      (         SUBS.ASM):00143         ; PUSH [D] TO STACK
                      (         SUBS.ASM):00144         
292D                  (         SUBS.ASM):00145         PSHDZ:
292D 3606             (         SUBS.ASM):00146                 PSHU    D
292F 1183220A         (         SUBS.ASM):00147                 CMPU    #ZSTACK
2933 2511             (         SUBS.ASM):00148                 BLO     OVER
2935 39               (         SUBS.ASM):00149                 RTS
                      (         SUBS.ASM):00150         
                      (         SUBS.ASM):00151         ; -------------------------
                      (         SUBS.ASM):00152         ; POP STACK, SAVE IN [TEMP]
                      (         SUBS.ASM):00153         ; -------------------------
                      (         SUBS.ASM):00154         
2936                  (         SUBS.ASM):00155         POPSTK:
2936 3706             (         SUBS.ASM):00156                 PULU    D                                 ; PULL A WORD
2938 DD3F             (         SUBS.ASM):00157                 STD     TEMP                              ; SAVE IT IN [TEMP]
293A 11832408         (         SUBS.ASM):00158                 CMPU    #TOPSTA
293E 2201             (         SUBS.ASM):00159                 BHI     UNDER
2940 39               (         SUBS.ASM):00160                 RTS
                      (         SUBS.ASM):00161         
                      (         SUBS.ASM):00162         ; *** ERROR #5 -- Z-STACK UNDERFLOW ***
                      (         SUBS.ASM):00163         
2941                  (         SUBS.ASM):00164         UNDER:
2941 8605             (         SUBS.ASM):00165                 LDA     #5
2943 7E350C           (         SUBS.ASM):00166                 JMP     ZERROR
                      (         SUBS.ASM):00167         
                      (         SUBS.ASM):00168         ; *** ERROR #6 -- Z-STACK OVERFLOW ***
                      (         SUBS.ASM):00169         
2946                  (         SUBS.ASM):00170         OVER:
2946 8606             (         SUBS.ASM):00171                 LDA     #6
2948 7E350C           (         SUBS.ASM):00172                 JMP     ZERROR
                      (         SUBS.ASM):00173         
                      (         SUBS.ASM):00174         ; ---------------
                      (         SUBS.ASM):00175         ; PREDICATE FAILS
                      (         SUBS.ASM):00176         ; ---------------
                      (         SUBS.ASM):00177         
294B                  (         SUBS.ASM):00178         PREDF:
294B BD309B           (         SUBS.ASM):00179                 JSR     NEXTPC                            ; GET 1ST BRANCH BYTE
294E 4D               (         SUBS.ASM):00180                 TSTA                                      ; IF BIT 7 ISN'T SET,
294F 2A0E             (         SUBS.ASM):00181                 BPL     PREDB                             ; DO THE BRANCH
                      (         SUBS.ASM):00182         
2951                  (         SUBS.ASM):00183         PREDNB:
2951 8440             (         SUBS.ASM):00184                 ANDA    #%01000000                        ; ELSE TEST BIT 6
2953 2603             (         SUBS.ASM):00185                 BNE     PNBX                              ; ALL DONE IF SET
2955 BD309B           (         SUBS.ASM):00186                 JSR     NEXTPC                            ; ELSE SKIP OVER 2ND BRANCH BYTE
2958                  (         SUBS.ASM):00187         PNBX:
2958 39               (         SUBS.ASM):00188                 RTS                                       ; BEFORE LEAVING
                      (         SUBS.ASM):00189         
                      (         SUBS.ASM):00190         ; ------------------
                      (         SUBS.ASM):00191         ; PREDICATE SUCCEEDS
                      (         SUBS.ASM):00192         ; ------------------
                      (         SUBS.ASM):00193         
2959                  (         SUBS.ASM):00194         PREDS:
2959 BD309B           (         SUBS.ASM):00195                 JSR     NEXTPC
295C 4D               (         SUBS.ASM):00196                 TSTA                                      ; IF BIT 7 IS SET,
295D 2AF2             (         SUBS.ASM):00197                 BPL     PREDNB                            ; BRANCH ON PREDICATE FAILURE
                      (         SUBS.ASM):00198         
                      (         SUBS.ASM):00199         ; ----------------
                      (         SUBS.ASM):00200         ; PERFORM A BRANCH
                      (         SUBS.ASM):00201         ; ----------------
                      (         SUBS.ASM):00202         
295F                  (         SUBS.ASM):00203         PREDB:
295F 8540             (         SUBS.ASM):00204                 BITA    #%01000000                        ; LONG OR SHORT BRANCH?
2961 2708             (         SUBS.ASM):00205                 BEQ     PREDLB                            ; LONG IF BIT 6 IS OFF
2963 843F             (         SUBS.ASM):00206                 ANDA    #%00111111                        ; ELSE FORM SHORT OFFSET
2965 9740             (         SUBS.ASM):00207                 STA     TEMP+1                            ; USE AS LSB OF BRANCH OFFSET
2967 0F3F             (         SUBS.ASM):00208                 CLR     TEMP                              ; ZERO MSB OF OFFSET
2969 2013             (         SUBS.ASM):00209                 BRA     PREDB1                            ; AND DO THE BRANCH
                      (         SUBS.ASM):00210         
                      (         SUBS.ASM):00211         ; HANDLE A LONG BRANCH
                      (         SUBS.ASM):00212         
296B                  (         SUBS.ASM):00213         PREDLB:
296B 843F             (         SUBS.ASM):00214                 ANDA    #%00111111                        ; FORM MSB OF OFFSET
296D 8520             (         SUBS.ASM):00215                 BITA    #%00100000                        ; CHECK SIGN OF 14-BIT VALUE
296F 2702             (         SUBS.ASM):00216                 BEQ     DOB2                              ; IT'S POSITIVE
2971 8AE0             (         SUBS.ASM):00217                 ORA     #%11100000                        ; ELSE EXTEND SIGN BITS
2973                  (         SUBS.ASM):00218         DOB2:
2973 3402             (         SUBS.ASM):00219                 PSHS    A                                 ; SAVE MSB OF BRANCH
2975 BD309B           (         SUBS.ASM):00220                 JSR     NEXTPC                            ; GRAB NEXT Z-BYTE
2978 9740             (         SUBS.ASM):00221                 STA     TEMP+1                            ; USE AS LSB OF BRANCH
297A 3502             (         SUBS.ASM):00222                 PULS    A
297C 973F             (         SUBS.ASM):00223                 STA     TEMP                              ; RETRIEVE MSB
                      (         SUBS.ASM):00224         
                      (         SUBS.ASM):00225         ; BRANCH TO Z-ADDRESS IN [TEMP]
                      (         SUBS.ASM):00226         
297E                  (         SUBS.ASM):00227         PREDB1:
297E DC3F             (         SUBS.ASM):00228                 LDD     TEMP                              ; IF OFFSET IS ZERO,
2980 102700C8         (         SUBS.ASM):00229                 LBEQ    ZRFALS                            ; DO AN "RFALSE"
2984 830001           (         SUBS.ASM):00230                 SUBD    #1                                ; IF OFFSET IS ONE,
2987 102700B9         (         SUBS.ASM):00231                 LBEQ    ZRTRUE                            ; DO AN "RTRUE"
                      (         SUBS.ASM):00232         
298B                  (         SUBS.ASM):00233         PREDB3:
298B 830001           (         SUBS.ASM):00234                 SUBD    #1                                ; D = OFFSET-2
298E DD3F             (         SUBS.ASM):00235                 STD     TEMP                              ; SAVE NEW OFFSET
                      (         SUBS.ASM):00236         
                      (         SUBS.ASM):00237         ; USE [VAL] TO HOLD TOP 9 BITS OF OFFSET
                      (         SUBS.ASM):00238         
2990 973E             (         SUBS.ASM):00239                 STA     VAL+1
2992 5F               (         SUBS.ASM):00240                 CLRB
2993 48               (         SUBS.ASM):00241                 ASLA                                      ; EXTEND THE SIGN BIT
2994 59               (         SUBS.ASM):00242                 ROLB                                      ; SHIFT CARRY TO BIT 0 OF [B]
2995 D73D             (         SUBS.ASM):00243                 STB     VAL                               ; SAVE AS UPPER BYTE OF OFFSET
                      (         SUBS.ASM):00244         
2997 9640             (         SUBS.ASM):00245                 LDA     TEMP+1                            ; GET LOW BYTE OF OFFSET
2999 1CFE             (         SUBS.ASM):00246                 ANDCC   #%11111110                        ; CLEAR CARRY
299B 9915             (         SUBS.ASM):00247                 ADCA    ZPCL                              ; ADD LOW BYTE OF CURRENT ZPC
299D 2406             (         SUBS.ASM):00248                 BCC     PDB0                              ; IF OVERFLOWED,
                      (         SUBS.ASM):00249         
299F 0C3E             (         SUBS.ASM):00250                 INC     VAL+1                             ; UPDATE
29A1 2602             (         SUBS.ASM):00251                 BNE     PDB0                              ; UPPER
29A3 0C3D             (         SUBS.ASM):00252                 INC     VAL                               ; 9 BITS
                      (         SUBS.ASM):00253         
29A5                  (         SUBS.ASM):00254         PDB0:
29A5 9715             (         SUBS.ASM):00255                 STA     ZPCL                              ; LOW-BYTES CALCED
                      (         SUBS.ASM):00256         
29A7 DC3D             (         SUBS.ASM):00257                 LDD     VAL                               ; IF 9 UPPER BITS ARE ZERO,
29A9 2712             (         SUBS.ASM):00258                 BEQ     PDB1                              ; NO NEED TO CHANGE PAGES
                      (         SUBS.ASM):00259         
29AB 963E             (         SUBS.ASM):00260                 LDA     VAL+1                             ; ELSE ADD MIDDLE BYTES
29AD 1CFE             (         SUBS.ASM):00261                 ANDCC   #%11111110                        ; CLEAR CARRY
29AF 9914             (         SUBS.ASM):00262                 ADCA    ZPCM
29B1 9714             (         SUBS.ASM):00263                 STA     ZPCM
29B3 963D             (         SUBS.ASM):00264                 LDA     VAL                               ; NOW ADD THE TOP BITS
29B5 9913             (         SUBS.ASM):00265                 ADCA    ZPCH                              ; USING PREVIOUS CARRY
29B7 8401             (         SUBS.ASM):00266                 ANDA    #%00000001                        ; ISOLATE BIT 0
29B9 9713             (         SUBS.ASM):00267                 STA     ZPCH
29BB 0F18             (         SUBS.ASM):00268                 CLR     ZPCFLG                            ; CHANGED PAGES
29BD                  (         SUBS.ASM):00269         PDB1:
29BD 39               (         SUBS.ASM):00270                 RTS
                      (     cubixzip.asm):00050                 INCLUDE DISPATCH.ASM
                      (     DISPATCH.ASM):00001         ;       PAGE
                      (     DISPATCH.ASM):00002         ;       SBTTL "--- OPCODE DISPATCH TABLES ---"
                      (     DISPATCH.ASM):00003         
                      (     DISPATCH.ASM):00004         ; 0-OPS
                      (     DISPATCH.ASM):00005         
29BE                  (     DISPATCH.ASM):00006         OPT0:
29BE 2A44             (     DISPATCH.ASM):00007                 FDB     ZRTRUE                            ; 0
29C0 2A4C             (     DISPATCH.ASM):00008                 FDB     ZRFALS                            ; 1
29C2 2A4F             (     DISPATCH.ASM):00009                 FDB     ZPRI                              ; 2
29C4 2A6D             (     DISPATCH.ASM):00010                 FDB     ZPRR                              ; 3
29C6 2A6C             (     DISPATCH.ASM):00011                 FDB     ZNOOP                             ; 4
29C8 3726             (     DISPATCH.ASM):00012                 FDB     ZSAVE                             ; 5
29CA 3779             (     DISPATCH.ASM):00013                 FDB     ZREST                             ; 6
29CC 34C5             (     DISPATCH.ASM):00014                 FDB     ZSTART                            ; 7
29CE 2A74             (     DISPATCH.ASM):00015                 FDB     ZRSTAK                            ; 8
29D0 2936             (     DISPATCH.ASM):00016                 FDB     POPSTK                            ; 9
29D2 3525             (     DISPATCH.ASM):00017                 FDB     ZQUIT                             ; 10
29D4 359D             (     DISPATCH.ASM):00018                 FDB     ZCRLF                             ; 11
29D6 35D5             (     DISPATCH.ASM):00019                 FDB     ZUSL                              ; 12
29D8 2A7C             (     DISPATCH.ASM):00020                 FDB     ZVER                              ; 13
                      (     DISPATCH.ASM):00021         
     000E             (     DISPATCH.ASM):00022         NOPS0           EQU 14                            ; NUMBER OF 0-OPS
                      (     DISPATCH.ASM):00023         
                      (     DISPATCH.ASM):00024         ; 1-OPS
                      (     DISPATCH.ASM):00025         
29DA                  (     DISPATCH.ASM):00026         OPT1:
29DA 2AC9             (     DISPATCH.ASM):00027                 FDB     ZZERO                             ; 0
29DC 2AD2             (     DISPATCH.ASM):00028                 FDB     ZNEXT                             ; 1
29DE 2ADB             (     DISPATCH.ASM):00029                 FDB     ZFIRST                            ; 2
29E0 2AF9             (     DISPATCH.ASM):00030                 FDB     ZLOC                              ; 3
29E2 2B09             (     DISPATCH.ASM):00031                 FDB     ZPTSIZ                            ; 4
29E4 2B1B             (     DISPATCH.ASM):00032                 FDB     ZINC                              ; 5
29E6 2B33             (     DISPATCH.ASM):00033                 FDB     ZDEC                              ; 6
29E8 2B3F             (     DISPATCH.ASM):00034                 FDB     ZPRB                              ; 7
29EA 285F             (     DISPATCH.ASM):00035                 FDB     BADOP1                            ; 8 (UNDEFINED)
29EC 2B49             (     DISPATCH.ASM):00036                 FDB     ZREMOV                            ; 9
29EE 2B89             (     DISPATCH.ASM):00037                 FDB     ZPRD                              ; 10
29F0 2B9D             (     DISPATCH.ASM):00038                 FDB     ZRET                              ; 11
29F2 2BD7             (     DISPATCH.ASM):00039                 FDB     ZJUMP                             ; 12
29F4 2BE1             (     DISPATCH.ASM):00040                 FDB     ZPRINT                            ; 13
29F6 2BEB             (     DISPATCH.ASM):00041                 FDB     ZVALUE                            ; 14
29F8 2BF3             (     DISPATCH.ASM):00042                 FDB     ZBCOM                             ; 15
                      (     DISPATCH.ASM):00043         
     0010             (     DISPATCH.ASM):00044         NOPS1           EQU 16                            ; NUMBER OF 1-OPS
                      (     DISPATCH.ASM):00045         
                      (     DISPATCH.ASM):00046         ; 2-OPS
                      (     DISPATCH.ASM):00047         
29FA                  (     DISPATCH.ASM):00048         OPT2:
29FA 28AD             (     DISPATCH.ASM):00049                 FDB     BADOP2                            ; 0 (UNDEFINED)
29FC 2E18             (     DISPATCH.ASM):00050                 FDB     ZEQUAL                            ; 1
29FE 2BFC             (     DISPATCH.ASM):00051                 FDB     ZLESS                             ; 2
2A00 2C06             (     DISPATCH.ASM):00052                 FDB     ZGRTR                             ; 3
2A02 2C10             (     DISPATCH.ASM):00053                 FDB     ZDLESS                            ; 4
2A04 2C19             (     DISPATCH.ASM):00054                 FDB     ZIGRTR                            ; 5
2A06 2C3C             (     DISPATCH.ASM):00055                 FDB     ZIN                               ; 6
2A08 2C4C             (     DISPATCH.ASM):00056                 FDB     ZBTST                             ; 7
2A0A 2C59             (     DISPATCH.ASM):00057                 FDB     ZBOR                              ; 8
2A0C 2C64             (     DISPATCH.ASM):00058                 FDB     ZBAND                             ; 9
2A0E 2C6C             (     DISPATCH.ASM):00059                 FDB     ZFSETP                            ; 10
2A10 2C7D             (     DISPATCH.ASM):00060                 FDB     ZFSET                             ; 11
2A12 2C8B             (     DISPATCH.ASM):00061                 FDB     ZFCLR                             ; 12
2A14 2C9B             (     DISPATCH.ASM):00062                 FDB     ZSET                              ; 13
2A16 2CA4             (     DISPATCH.ASM):00063                 FDB     ZMOVE                             ; 14
2A18 2CCA             (     DISPATCH.ASM):00064                 FDB     ZGET                              ; 15
2A1A 2CDD             (     DISPATCH.ASM):00065                 FDB     ZGETB                             ; 16
2A1C 2CF0             (     DISPATCH.ASM):00066                 FDB     ZGETP                             ; 17
2A1E 2D34             (     DISPATCH.ASM):00067                 FDB     ZGETPT                            ; 18
2A20 2D58             (     DISPATCH.ASM):00068                 FDB     ZNEXTP                            ; 19
2A22 2D78             (     DISPATCH.ASM):00069                 FDB     ZADD                              ; 20
2A24 2D81             (     DISPATCH.ASM):00070                 FDB     ZSUB                              ; 21
2A26 2D87             (     DISPATCH.ASM):00071                 FDB     ZMUL                              ; 22
2A28 2DA6             (     DISPATCH.ASM):00072                 FDB     ZDIV                              ; 23
2A2A 2DAB             (     DISPATCH.ASM):00073                 FDB     ZMOD                              ; 24
                      (     DISPATCH.ASM):00074         
     0019             (     DISPATCH.ASM):00075         NOPS2           EQU 25                            ; NUMBER OF 2-OPS
                      (     DISPATCH.ASM):00076         
                      (     DISPATCH.ASM):00077         ; X-OPS
                      (     DISPATCH.ASM):00078         
2A2C                  (     DISPATCH.ASM):00079         OPTX:
2A2C 2E40             (     DISPATCH.ASM):00080                 FDB     ZCALL                             ; 0
2A2E 2EB1             (     DISPATCH.ASM):00081                 FDB     ZPUT                              ; 1
2A30 2EC3             (     DISPATCH.ASM):00082                 FDB     ZPUTB                             ; 2
2A32 2ED1             (     DISPATCH.ASM):00083                 FDB     ZPUTP                             ; 3
2A34 2F70             (     DISPATCH.ASM):00084                 FDB     ZREAD                             ; 4
2A36 2F07             (     DISPATCH.ASM):00085                 FDB     ZPRC                              ; 5
2A38 2F0C             (     DISPATCH.ASM):00086                 FDB     ZPRN                              ; 6
2A3A 2F47             (     DISPATCH.ASM):00087                 FDB     ZRAND                             ; 7
2A3C 2F63             (     DISPATCH.ASM):00088                 FDB     ZPUSH                             ; 8
2A3E 2F68             (     DISPATCH.ASM):00089                 FDB     ZPOP                              ; 9
2A40 2A6C             (     DISPATCH.ASM):00090                 FDB     ZSPLIT                            ; 10
2A42 2A6C             (     DISPATCH.ASM):00091                 FDB     ZSCRN                             ; 11
                      (     DISPATCH.ASM):00092         
     000C             (     DISPATCH.ASM):00093         NOPSX           EQU 12                            ; NUMBER OF X-OPS
                      (     cubixzip.asm):00051         
                      (     cubixzip.asm):00052         ;TITLE "ZIP/6809-B INFOCOM, INC. --- OPCODE EXECUTORS"
                      (     cubixzip.asm):00053                 INCLUDE OPS0.ASM
                      (         OPS0.ASM):00001         ;       PAGE
                      (         OPS0.ASM):00002         ;       SBTTL "--- 0-OPS ---"
                      (         OPS0.ASM):00003         
                      (         OPS0.ASM):00004         ; -----
                      (         OPS0.ASM):00005         ; RTRUE
                      (         OPS0.ASM):00006         ; -----
                      (         OPS0.ASM):00007         
                      (         OPS0.ASM):00008         ; Simulate a RETURN 1
                      (         OPS0.ASM):00009         
2A44                  (         OPS0.ASM):00010         ZRTRUE:
2A44 C601             (         OPS0.ASM):00011                 LDB     #1
                      (         OPS0.ASM):00012         
2A46                  (         OPS0.ASM):00013         ZRT:
2A46 4F               (         OPS0.ASM):00014                 CLRA
2A47 DD02             (         OPS0.ASM):00015                 STD     ARG1                              ; SAVE VALUE HERE
2A49 7E2B9D           (         OPS0.ASM):00016                 JMP     ZRET
                      (         OPS0.ASM):00017         
                      (         OPS0.ASM):00018         ; ------
                      (         OPS0.ASM):00019         ; RFALSE
                      (         OPS0.ASM):00020         ; ------
                      (         OPS0.ASM):00021         
                      (         OPS0.ASM):00022         ; Simulate a RETURN 0
                      (         OPS0.ASM):00023         
2A4C                  (         OPS0.ASM):00024         ZRFALS:
2A4C 5F               (         OPS0.ASM):00025                 CLRB
2A4D 20F7             (         OPS0.ASM):00026                 BRA     ZRT
                      (         OPS0.ASM):00027         
                      (         OPS0.ASM):00028         ; ------
                      (         OPS0.ASM):00029         ; PRINTI
                      (         OPS0.ASM):00030         ; ------
                      (         OPS0.ASM):00031         
                      (         OPS0.ASM):00032         ; Print the Z-string immediately following the opcode
                      (         OPS0.ASM):00033         
2A4F                  (         OPS0.ASM):00034         ZPRI:
2A4F 9613             (         OPS0.ASM):00035                 LDA     ZPCH                              ; MOVE ZPC INTO MPC
2A51 971A             (         OPS0.ASM):00036                 STA     MPCH
2A53 DC14             (         OPS0.ASM):00037                 LDD     ZPCM
2A55 DD1B             (         OPS0.ASM):00038                 STD     MPCM
2A57 0F1F             (         OPS0.ASM):00039                 CLR     MPCFLG                            ; ZERO MPC FLAG
                      (         OPS0.ASM):00040         
2A59 BD3197           (         OPS0.ASM):00041                 JSR     PZSTR                             ; PRINT THE STRING AT [MPC]
                      (         OPS0.ASM):00042         
2A5C 961A             (         OPS0.ASM):00043                 LDA     MPCH                              ; UPDATE ZPC FROM MPC
2A5E 9713             (         OPS0.ASM):00044                 STA     ZPCH
2A60 DC1B             (         OPS0.ASM):00045                 LDD     MPCM
2A62 DD14             (         OPS0.ASM):00046                 STD     ZPCM
2A64 961F             (         OPS0.ASM):00047                 LDA     MPCFLG                            ; ALSO UPDATE FLAG
2A66 9718             (         OPS0.ASM):00048                 STA     ZPCFLG
2A68 DC1D             (         OPS0.ASM):00049                 LDD     MPCPNT                            ; AND PAGE POINTER
2A6A DD16             (         OPS0.ASM):00050                 STD     ZPCPNT
                      (         OPS0.ASM):00051         
                      (         OPS0.ASM):00052         ; FALL THROUGH TO ...
                      (         OPS0.ASM):00053         
                      (         OPS0.ASM):00054         ; ----
                      (         OPS0.ASM):00055         ; NOOP
                      (         OPS0.ASM):00056         ; ----
                      (         OPS0.ASM):00057         
2A6C                  (         OPS0.ASM):00058         ZNOOP:
2A6C 39               (         OPS0.ASM):00059                 RTS
                      (         OPS0.ASM):00060         
                      (         OPS0.ASM):00061         ; ------
                      (         OPS0.ASM):00062         ; PRINTR
                      (         OPS0.ASM):00063         ; ------
                      (         OPS0.ASM):00064         
                      (         OPS0.ASM):00065         ; Execute a PRINTI, followed by CRLF and RTRUE
                      (         OPS0.ASM):00066         
2A6D                  (         OPS0.ASM):00067         ZPRR:
2A6D 8DE0             (         OPS0.ASM):00068                 BSR     ZPRI
2A6F BD359D           (         OPS0.ASM):00069                 JSR     ZCRLF
2A72 20D0             (         OPS0.ASM):00070                 BRA     ZRTRUE
                      (         OPS0.ASM):00071         
                      (         OPS0.ASM):00072         ; ------
                      (         OPS0.ASM):00073         ; RSTACK
                      (         OPS0.ASM):00074         ; ------
                      (         OPS0.ASM):00075         
                      (         OPS0.ASM):00076         ; Execute a RETURN, with CALL value on top of the stack
                      (         OPS0.ASM):00077         
2A74                  (         OPS0.ASM):00078         ZRSTAK:
2A74 BD2936           (         OPS0.ASM):00079                 JSR     POPSTK
2A77 DD02             (         OPS0.ASM):00080                 STD     ARG1                              ; TOS WAS LEFT IN [D]
2A79 7E2B9D           (         OPS0.ASM):00081                 JMP     ZRET
                      (         OPS0.ASM):00082         
                      (         OPS0.ASM):00083         ; ------
                      (         OPS0.ASM):00084         ; VERIFY
                      (         OPS0.ASM):00085         ; ------
                      (         OPS0.ASM):00086         
                      (         OPS0.ASM):00087         ; Verify the game code
                      (         OPS0.ASM):00088         
2A7C                  (         OPS0.ASM):00089         ZVER:
2A7C BD3551           (         OPS0.ASM):00090                 JSR     VERNUM                            ; DISPLAY ZIP VERSION CODE
2A7F FC3E24           (         OPS0.ASM):00091                 LDD     ZCODE+ZLENTH                      ; GET LENGTH OF Z-CODE
2A82 DD04             (         OPS0.ASM):00092                 STD     ARG2                              ; IN WORDS
                      (         OPS0.ASM):00093         
                      (         OPS0.ASM):00094         ; CLEAR VARIABLES
                      (         OPS0.ASM):00095         
2A84 4F               (         OPS0.ASM):00096                 CLRA
2A85 5F               (         OPS0.ASM):00097                 CLRB
2A86 DD02             (         OPS0.ASM):00098                 STD     ARG1
2A88 DD06             (         OPS0.ASM):00099                 STD     ARG3                              ; BIT 17 OF Z-CODE LENGTH
2A8A DD3F             (         OPS0.ASM):00100                 STD     TEMP                              ; BYTE COUNT
                      (         OPS0.ASM):00101         
                      (         OPS0.ASM):00102         ; CONVERT Z-CODE LENGTH TO BYTES
                      (         OPS0.ASM):00103         
2A8C 0805             (         OPS0.ASM):00104                 ASL     ARG2+1                            ; BOTTOM 8 BITS
2A8E 0904             (         OPS0.ASM):00105                 ROL     ARG2                              ; MIDDLE 8 BITS
2A90 0907             (         OPS0.ASM):00106                 ROL     ARG3+1                            ; 17TH BIT OF LENGTH
                      (         OPS0.ASM):00107         
2A92 8640             (         OPS0.ASM):00108                 LDA     #$40                              ; 1ST 64 BYTES
2A94 9740             (         OPS0.ASM):00109                 STA     TEMP+1                            ; ARE NOT CHECKED
2A96 BD317F           (         OPS0.ASM):00110                 JSR     SETWRD                            ; [TEMP] POINTS TO FIRST BYTE
                      (         OPS0.ASM):00111         
2A99 8606             (         OPS0.ASM):00112                 LDA     #ARG3                             ; PATCH [GETBYT] ROUTINE
2A9B B730D6           (         OPS0.ASM):00113                 STA     PATCH                             ; SO PRELOAD WILL BE READ FROM DISK
                      (         OPS0.ASM):00114         
2A9E                  (         OPS0.ASM):00115         VSUM:
2A9E BD30CC           (         OPS0.ASM):00116                 JSR     GETBYT                            ; GET A BYTE
2AA1 5F               (         OPS0.ASM):00117                 CLRB                                      ; CLEAR CARRY
2AA2 9903             (         OPS0.ASM):00118                 ADCA    ARG1+1                            ; ADD TO SUM
2AA4 9703             (         OPS0.ASM):00119                 STA     ARG1+1
2AA6 2402             (         OPS0.ASM):00120                 BCC     VSUM0
2AA8 0C02             (         OPS0.ASM):00121                 INC     ARG1
                      (         OPS0.ASM):00122         
2AAA                  (         OPS0.ASM):00123         VSUM0:
2AAA DC1B             (         OPS0.ASM):00124                 LDD     MPCM                              ; END OF GAME YET?
2AAC 109304           (         OPS0.ASM):00125                 CMPD    ARG2
2AAF 26ED             (         OPS0.ASM):00126                 BNE     VSUM
                      (         OPS0.ASM):00127         
2AB1 961A             (         OPS0.ASM):00128                 LDA     MPCH                              ; ALSO CHECK TOP BIT
2AB3 9107             (         OPS0.ASM):00129                 CMPA    ARG3+1
2AB5 26E7             (         OPS0.ASM):00130                 BNE     VSUM
                      (         OPS0.ASM):00131         
2AB7 860B             (         OPS0.ASM):00132                 LDA     #ZPURE
2AB9 B730D6           (         OPS0.ASM):00133                 STA     PATCH                             ; UNPATCH [GETBYT]
                      (         OPS0.ASM):00134         
2ABC FC3E26           (         OPS0.ASM):00135                 LDD     ZCODE+ZCHKSM                      ; GET CHECKSUM
2ABF 109302           (         OPS0.ASM):00136                 CMPD    ARG1                              ; SAME AS CALCULATED?
2AC2 1027FE93         (         OPS0.ASM):00137                 LBEQ    PREDS                             ; YES, PREDICATE SUCCEEDS
2AC6 7E294B           (         OPS0.ASM):00138                 JMP     PREDF                             ; ELSE FAILURE ...
                      (     cubixzip.asm):00054                 INCLUDE OPS1.ASM
                      (         OPS1.ASM):00001         ;       PAGE
                      (         OPS1.ASM):00002         ;       SBTTL "--- 1-OPS ---"
                      (         OPS1.ASM):00003         
                      (         OPS1.ASM):00004         ; -----
                      (         OPS1.ASM):00005         ; ZERO?
                      (         OPS1.ASM):00006         ; -----
                      (         OPS1.ASM):00007         
                      (         OPS1.ASM):00008         ; Is arg1 equal to zero? [PRED]
                      (         OPS1.ASM):00009         
2AC9                  (         OPS1.ASM):00010         ZZERO:
2AC9 DC02             (         OPS1.ASM):00011                 LDD     ARG1
2ACB 1027FE8A         (         OPS1.ASM):00012                 LBEQ    PREDS
2ACF 7E294B           (         OPS1.ASM):00013                 JMP     PREDF
                      (         OPS1.ASM):00014         
                      (         OPS1.ASM):00015         ; -----
                      (         OPS1.ASM):00016         ; NEXT?
                      (         OPS1.ASM):00017         ; -----
                      (         OPS1.ASM):00018         
                      (         OPS1.ASM):00019         ; Return the NEXT pointer in object "arg1"; fail if
                      (         OPS1.ASM):00020         ; none left, and return zero [VALUE][PRED]
                      (         OPS1.ASM):00021         
2AD2                  (         OPS1.ASM):00022         ZNEXT:
2AD2 9603             (         OPS1.ASM):00023                 LDA     ARG1+1
2AD4 BD33E1           (         OPS1.ASM):00024                 JSR     OBJLOC
2AD7 C605             (         OPS1.ASM):00025                 LDB     #5                                ; SAME AS FIRST?
2AD9 2007             (         OPS1.ASM):00026                 BRA     FIRST1
                      (         OPS1.ASM):00027         
                      (         OPS1.ASM):00028         ; ------
                      (         OPS1.ASM):00029         ; FIRST?
                      (         OPS1.ASM):00030         ; ------
                      (         OPS1.ASM):00031         
                      (         OPS1.ASM):00032         ; Return the FIRST pointer in object "arg1"; fail if
                      (         OPS1.ASM):00033         ; none, and return zero [VALUE][PRED]
                      (         OPS1.ASM):00034         
2ADB                  (         OPS1.ASM):00035         ZFIRST:
2ADB 9603             (         OPS1.ASM):00036                 LDA     ARG1+1
2ADD BD33E1           (         OPS1.ASM):00037                 JSR     OBJLOC
2AE0 C606             (         OPS1.ASM):00038                 LDB     #6
                      (         OPS1.ASM):00039         
2AE2                  (         OPS1.ASM):00040         FIRST1:
2AE2 9E3F             (         OPS1.ASM):00041                 LDX     TEMP
2AE4 A685             (         OPS1.ASM):00042                 LDA     B,X                               ; FETCH SLOT
2AE6 9740             (         OPS1.ASM):00043                 STA     TEMP+1                            ; SAVE HERE
2AE8 3402             (         OPS1.ASM):00044                 PSHS    A                                 ; AND ON STACK
2AEA 0F3F             (         OPS1.ASM):00045                 CLR     TEMP                              ; ZERO MSB
2AEC BD2903           (         OPS1.ASM):00046                 JSR     PUTVAL
2AEF 3502             (         OPS1.ASM):00047                 PULS    A
2AF1 4D               (         OPS1.ASM):00048                 TSTA
2AF2 1027FE55         (         OPS1.ASM):00049                 LBEQ    PREDF                             ; FAILURE
2AF6 7E2959           (         OPS1.ASM):00050                 JMP     PREDS                             ; OR SUCCESS
                      (         OPS1.ASM):00051         
                      (         OPS1.ASM):00052         ; ---
                      (         OPS1.ASM):00053         ; LOC
                      (         OPS1.ASM):00054         ; ---
                      (         OPS1.ASM):00055         
                      (         OPS1.ASM):00056         ; Return the object containing object "arg1"; zero if none [VALUE]
                      (         OPS1.ASM):00057         
2AF9                  (         OPS1.ASM):00058         ZLOC:
2AF9 9603             (         OPS1.ASM):00059                 LDA     ARG1+1
2AFB BD33E1           (         OPS1.ASM):00060                 JSR     OBJLOC
2AFE 9E3F             (         OPS1.ASM):00061                 LDX     TEMP
2B00 A604             (         OPS1.ASM):00062                 LDA     4,X
2B02 9740             (         OPS1.ASM):00063                 STA     TEMP+1
2B04 0F3F             (         OPS1.ASM):00064                 CLR     TEMP
2B06 7E2903           (         OPS1.ASM):00065                 JMP     PUTVAL
                      (         OPS1.ASM):00066         
                      (         OPS1.ASM):00067         ; ------
                      (         OPS1.ASM):00068         ; PTSIZE
                      (         OPS1.ASM):00069         ; ------
                      (         OPS1.ASM):00070         
                      (         OPS1.ASM):00071         ; Return length of prop table "arg1" in bytes [VALUE]
                      (         OPS1.ASM):00072         
2B09                  (         OPS1.ASM):00073         ZPTSIZ:
2B09 DC02             (         OPS1.ASM):00074                 LDD     ARG1
2B0B C33E0A           (         OPS1.ASM):00075                 ADDD    #ZCODE
2B0E 830001           (         OPS1.ASM):00076                 SUBD    #1
2B11 DD3F             (         OPS1.ASM):00077                 STD     TEMP
2B13 5F               (         OPS1.ASM):00078                 CLRB
2B14 BD339B           (         OPS1.ASM):00079                 JSR     PROPL
2B17 4C               (         OPS1.ASM):00080                 INCA
2B18 7E28FF           (         OPS1.ASM):00081                 JMP     PUTBYT
                      (         OPS1.ASM):00082         
                      (         OPS1.ASM):00083         ; ---
                      (         OPS1.ASM):00084         ; INC
                      (         OPS1.ASM):00085         ; ---
                      (         OPS1.ASM):00086         
                      (         OPS1.ASM):00087         ; Increment arg1 [VALUE]
                      (         OPS1.ASM):00088         
2B1B                  (         OPS1.ASM):00089         ZINC:
2B1B 9603             (         OPS1.ASM):00090                 LDA     ARG1+1
2B1D BD28C9           (         OPS1.ASM):00091                 JSR     VARGET
2B20 DC3F             (         OPS1.ASM):00092                 LDD     TEMP
2B22 C30001           (         OPS1.ASM):00093                 ADDD    #1
2B25                  (         OPS1.ASM):00094         ZINC1:
2B25 DD3F             (         OPS1.ASM):00095                 STD     TEMP
2B27 3406             (         OPS1.ASM):00096                 PSHS    D
2B29 9603             (         OPS1.ASM):00097                 LDA     ARG1+1
2B2B BD28F1           (         OPS1.ASM):00098                 JSR     VARPUT
2B2E 3506             (         OPS1.ASM):00099                 PULS    D
2B30 DD3F             (         OPS1.ASM):00100                 STD     TEMP
2B32 39               (         OPS1.ASM):00101                 RTS
                      (         OPS1.ASM):00102         
                      (         OPS1.ASM):00103         ; ---
                      (         OPS1.ASM):00104         ; DEC
                      (         OPS1.ASM):00105         ; ---
                      (         OPS1.ASM):00106         
                      (         OPS1.ASM):00107         ; Decrement arg1 [VALUE]
                      (         OPS1.ASM):00108         
2B33                  (         OPS1.ASM):00109         ZDEC:
2B33 9603             (         OPS1.ASM):00110                 LDA     ARG1+1
2B35 BD28C9           (         OPS1.ASM):00111                 JSR     VARGET
2B38 DC3F             (         OPS1.ASM):00112                 LDD     TEMP
2B3A 830001           (         OPS1.ASM):00113                 SUBD    #1
2B3D 20E6             (         OPS1.ASM):00114                 BRA     ZINC1
                      (         OPS1.ASM):00115         
                      (         OPS1.ASM):00116         ; ------
                      (         OPS1.ASM):00117         ; PRINTB
                      (         OPS1.ASM):00118         ; ------
                      (         OPS1.ASM):00119         
                      (         OPS1.ASM):00120         ; PRINT the string pointed to by BYTE-pointer "arg1"
                      (         OPS1.ASM):00121         
2B3F                  (         OPS1.ASM):00122         ZPRB:
2B3F DC02             (         OPS1.ASM):00123                 LDD     ARG1
2B41 DD3F             (         OPS1.ASM):00124                 STD     TEMP
2B43 BD317F           (         OPS1.ASM):00125                 JSR     SETWRD
2B46 7E3197           (         OPS1.ASM):00126                 JMP     PZSTR
                      (         OPS1.ASM):00127         
                      (         OPS1.ASM):00128         ; ------
                      (         OPS1.ASM):00129         ; REMOVE
                      (         OPS1.ASM):00130         ; ------
                      (         OPS1.ASM):00131         
                      (         OPS1.ASM):00132         ; Move object "arg1" to pseudo-object #0
                      (         OPS1.ASM):00133         
2B49                  (         OPS1.ASM):00134         ZREMOV:
2B49 9603             (         OPS1.ASM):00135                 LDA     ARG1+1
2B4B BD33E1           (         OPS1.ASM):00136                 JSR     OBJLOC
2B4E 9E3F             (         OPS1.ASM):00137                 LDX     TEMP
2B50 A604             (         OPS1.ASM):00138                 LDA     4,X
2B52 2734             (         OPS1.ASM):00139                 BEQ     REMVEX                            ; NO OBJECT
                      (         OPS1.ASM):00140         
2B54 3410             (         OPS1.ASM):00141                 PSHS    X                                 ; SAVE [TEMP]
                      (         OPS1.ASM):00142         
2B56 BD33E1           (         OPS1.ASM):00143                 JSR     OBJLOC
2B59 9E3F             (         OPS1.ASM):00144                 LDX     TEMP
2B5B A606             (         OPS1.ASM):00145                 LDA     6,X
2B5D 9103             (         OPS1.ASM):00146                 CMPA    ARG1+1
2B5F 260C             (         OPS1.ASM):00147                 BNE     REMVC1
                      (         OPS1.ASM):00148         
2B61 3510             (         OPS1.ASM):00149                 PULS    X                                 ; RETRIEVE FORMER [TEMP]
2B63 3410             (         OPS1.ASM):00150                 PSHS    X                                 ; SAVE COPY ON STACK
                      (         OPS1.ASM):00151         
2B65 A605             (         OPS1.ASM):00152                 LDA     5,X                               ; OLD [TEMP] IS IN [X]
2B67 9E3F             (         OPS1.ASM):00153                 LDX     TEMP
2B69 A706             (         OPS1.ASM):00154                 STA     6,X
                      (         OPS1.ASM):00155         
2B6B 2015             (         OPS1.ASM):00156                 BRA     REMVC2
                      (         OPS1.ASM):00157         
2B6D                  (         OPS1.ASM):00158         REMVC1:
2B6D BD33E1           (         OPS1.ASM):00159                 JSR     OBJLOC
2B70 9E3F             (         OPS1.ASM):00160                 LDX     TEMP
2B72 A605             (         OPS1.ASM):00161                 LDA     5,X
2B74 9103             (         OPS1.ASM):00162                 CMPA    ARG1+1
2B76 26F5             (         OPS1.ASM):00163                 BNE     REMVC1
                      (         OPS1.ASM):00164         
2B78 3510             (         OPS1.ASM):00165                 PULS    X
2B7A 3410             (         OPS1.ASM):00166                 PSHS    X
                      (         OPS1.ASM):00167         
2B7C A605             (         OPS1.ASM):00168                 LDA     5,X
2B7E 9E3F             (         OPS1.ASM):00169                 LDX     TEMP
2B80 A705             (         OPS1.ASM):00170                 STA     5,X
                      (         OPS1.ASM):00171         
2B82                  (         OPS1.ASM):00172         REMVC2:
2B82 3510             (         OPS1.ASM):00173                 PULS    X
2B84 6F04             (         OPS1.ASM):00174                 CLR     4,X
2B86 6F05             (         OPS1.ASM):00175                 CLR     5,X
                      (         OPS1.ASM):00176         
2B88                  (         OPS1.ASM):00177         REMVEX:
2B88 39               (         OPS1.ASM):00178                 RTS
                      (         OPS1.ASM):00179         
                      (         OPS1.ASM):00180         ; ------
                      (         OPS1.ASM):00181         ; PRINTD
                      (         OPS1.ASM):00182         ; ------
                      (         OPS1.ASM):00183         
                      (         OPS1.ASM):00184         ; Print short description of object "arg1"
                      (         OPS1.ASM):00185         
2B89                  (         OPS1.ASM):00186         ZPRD:
2B89 9603             (         OPS1.ASM):00187                 LDA     ARG1+1
                      (         OPS1.ASM):00188         
2B8B                  (         OPS1.ASM):00189         PRNTDC:
2B8B BD33E1           (         OPS1.ASM):00190                 JSR     OBJLOC
2B8E 9E3F             (         OPS1.ASM):00191                 LDX     TEMP
2B90 EC07             (         OPS1.ASM):00192                 LDD     7,X
2B92 C30001           (         OPS1.ASM):00193                 ADDD    #1                                ; INCREMENT
2B95 DD3F             (         OPS1.ASM):00194                 STD     TEMP                              ; AND SAVE
2B97 BD317F           (         OPS1.ASM):00195                 JSR     SETWRD
2B9A 7E3197           (         OPS1.ASM):00196                 JMP     PZSTR
                      (         OPS1.ASM):00197         
                      (         OPS1.ASM):00198         ; ------
                      (         OPS1.ASM):00199         ; RETURN
                      (         OPS1.ASM):00200         ; ------
                      (         OPS1.ASM):00201         
                      (         OPS1.ASM):00202         ; Return from a CALL with value "arg1"
                      (         OPS1.ASM):00203         
2B9D                  (         OPS1.ASM):00204         ZRET:
2B9D DE27             (         OPS1.ASM):00205                 LDU     OZSTAK                            ; STAY IN SYNC!
2B9F BD2936           (         OPS1.ASM):00206                 JSR     POPSTK                            ; POP # LOCALS
2BA2 D73D             (         OPS1.ASM):00207                 STB     VAL                               ; SAVE COUNT HERE
                      (         OPS1.ASM):00208         
2BA4 43               (         OPS1.ASM):00209                 COMA                                      ; COMPLEMENT [A]
2BA5 913D             (         OPS1.ASM):00210                 CMPA    VAL                               ; SHOULD BE OPPOSITE OF [B]
2BA7 2629             (         OPS1.ASM):00211                 BNE     RETERR                            ; IF NOT, STACK IS BAD (BM 11/24/84)
                      (         OPS1.ASM):00212         
2BA9 5D               (         OPS1.ASM):00213                 TSTB                                      ; CHECK # LOCALS
2BAA 270E             (         OPS1.ASM):00214                 BEQ     RET2                              ; SKIP IF NO LOCALS
                      (         OPS1.ASM):00215         
                      (         OPS1.ASM):00216         ; RESTORE LOCAL VARIABLES
                      (         OPS1.ASM):00217         
2BAC 8E260A           (         OPS1.ASM):00218                 LDX     #LOCALS                           ; SET UP A POINTER
2BAF 58               (         OPS1.ASM):00219                 ASLB                                      ; WORD-ALIGN THE INDEX
2BB0 3A               (         OPS1.ASM):00220                 ABX                                       ; [X] POINTS TO LAST LOCAL VAR
                      (         OPS1.ASM):00221         
2BB1                  (         OPS1.ASM):00222         RET1:
2BB1 BD2936           (         OPS1.ASM):00223                 JSR     POPSTK                            ; POP A VALUE ([X] UNAFFECTED)
2BB4 ED83             (         OPS1.ASM):00224                 STD     ,--X                              ; SAVE IN [LOCALS], UPDATE INDEX
2BB6 0A3D             (         OPS1.ASM):00225                 DEC     VAL
2BB8 26F7             (         OPS1.ASM):00226                 BNE     RET1                              ; LOOP TILL ALL LOCALS POPPED
                      (         OPS1.ASM):00227         
                      (         OPS1.ASM):00228         ; RESTORE OTHER VARIABLES
                      (         OPS1.ASM):00229         
2BBA                  (         OPS1.ASM):00230         RET2:
2BBA BD2936           (         OPS1.ASM):00231                 JSR     POPSTK
2BBD DD13             (         OPS1.ASM):00232                 STD     ZPCH                              ; RESTORE TOP 9 BITS OF ZPC
2BBF BD2936           (         OPS1.ASM):00233                 JSR     POPSTK
2BC2 D715             (         OPS1.ASM):00234                 STB     ZPCL                              ; RESTORE LOWER 8 BITS OF ZPC
2BC4 BD2936           (         OPS1.ASM):00235                 JSR     POPSTK
2BC7 DD27             (         OPS1.ASM):00236                 STD     OZSTAK                            ; AND OLD ZSP
2BC9 0F18             (         OPS1.ASM):00237                 CLR     ZPCFLG                            ; PC NO LONGER VALID
                      (         OPS1.ASM):00238         
2BCB DC02             (         OPS1.ASM):00239                 LDD     ARG1
2BCD DD3F             (         OPS1.ASM):00240                 STD     TEMP                              ; PASS THE RETURN VALUE
2BCF 7E2903           (         OPS1.ASM):00241                 JMP     PUTVAL                            ; TO PUTVAL
                      (         OPS1.ASM):00242         
                      (         OPS1.ASM):00243         ; *** ERROR #15: Z-STACK DESTROYED ***
                      (         OPS1.ASM):00244         
2BD2                  (         OPS1.ASM):00245         RETERR:
2BD2 860F             (         OPS1.ASM):00246                 LDA     #15
2BD4 7E350C           (         OPS1.ASM):00247                 JMP     ZERROR
                      (         OPS1.ASM):00248         
                      (         OPS1.ASM):00249         ; ----
                      (         OPS1.ASM):00250         ; JUMP
                      (         OPS1.ASM):00251         ; ----
                      (         OPS1.ASM):00252         
                      (         OPS1.ASM):00253         ; Branch to location pointed to by 16-bit 2's-comp "arg1"
                      (         OPS1.ASM):00254         
2BD7                  (         OPS1.ASM):00255         ZJUMP:
2BD7 DC02             (         OPS1.ASM):00256                 LDD     ARG1                              ; TREAT LIKE A BRANCH
2BD9 830001           (         OPS1.ASM):00257                 SUBD    #1                                ; THAT ALWAYS SUCCEEDS
2BDC DD3F             (         OPS1.ASM):00258                 STD     TEMP
2BDE 7E298B           (         OPS1.ASM):00259                 JMP     PREDB3
                      (         OPS1.ASM):00260         
                      (         OPS1.ASM):00261         ; -----
                      (         OPS1.ASM):00262         ; PRINT
                      (         OPS1.ASM):00263         ; -----
                      (         OPS1.ASM):00264         
                      (         OPS1.ASM):00265         ; Print the z-string pointed to by WORD-pointer "arg1"
                      (         OPS1.ASM):00266         
2BE1                  (         OPS1.ASM):00267         ZPRINT:
2BE1 DC02             (         OPS1.ASM):00268                 LDD     ARG1
2BE3 DD3F             (         OPS1.ASM):00269                 STD     TEMP                              ; TELL SETSTR
2BE5 BD3188           (         OPS1.ASM):00270                 JSR     SETSTR                            ; WHERE THE STRING RESIDES
2BE8 7E3197           (         OPS1.ASM):00271                 JMP     PZSTR                             ; AND PRINT IT
                      (         OPS1.ASM):00272         
                      (         OPS1.ASM):00273         ; -----
                      (         OPS1.ASM):00274         ; VALUE
                      (         OPS1.ASM):00275         ; -----
                      (         OPS1.ASM):00276         
                      (         OPS1.ASM):00277         ; Return value of arg1 [VALUE]
                      (         OPS1.ASM):00278         
2BEB                  (         OPS1.ASM):00279         ZVALUE:
2BEB 9603             (         OPS1.ASM):00280                 LDA     ARG1+1                            ; GRAB VARIABLE ID
2BED BD28C9           (         OPS1.ASM):00281                 JSR     VARGET                            ; FETCH ITS VALUE
2BF0 7E2903           (         OPS1.ASM):00282                 JMP     PUTVAL                            ; AND RETURN IT
                      (         OPS1.ASM):00283         
                      (         OPS1.ASM):00284         ; ----
                      (         OPS1.ASM):00285         ; BCOM
                      (         OPS1.ASM):00286         ; ----
                      (         OPS1.ASM):00287         
                      (         OPS1.ASM):00288         ; Complement arg1 [VALUE]
                      (         OPS1.ASM):00289         
2BF3                  (         OPS1.ASM):00290         ZBCOM:
2BF3 DC02             (         OPS1.ASM):00291                 LDD     ARG1                              ; GRAB ARGUMENT
2BF5 43               (         OPS1.ASM):00292                 COMA                                      ; COMPLEMENT MSB
2BF6 53               (         OPS1.ASM):00293                 COMB                                      ; AND LSB
2BF7 DD3F             (         OPS1.ASM):00294                 STD     TEMP                              ; AND PASS TO PUTVAL
2BF9 7E2903           (         OPS1.ASM):00295                 JMP     PUTVAL
                      (     cubixzip.asm):00055                 INCLUDE OPS2.ASM
                      (         OPS2.ASM):00001         ;       PAGE
                      (         OPS2.ASM):00002         ;       SBTTL "--- 2-OPS ---"
                      (         OPS2.ASM):00003         
                      (         OPS2.ASM):00004         ; -----
                      (         OPS2.ASM):00005         ; LESS?
                      (         OPS2.ASM):00006         ; -----
                      (         OPS2.ASM):00007         
                      (         OPS2.ASM):00008         ; Is arg1 less than arg2? [PRED]
                      (         OPS2.ASM):00009         
2BFC                  (         OPS2.ASM):00010         ZLESS:
2BFC DC02             (         OPS2.ASM):00011                 LDD     ARG1
2BFE DD3F             (         OPS2.ASM):00012                 STD     TEMP
2C00 DC04             (         OPS2.ASM):00013                 LDD     ARG2
2C02 DD3D             (         OPS2.ASM):00014                 STD     VAL
2C04 201E             (         OPS2.ASM):00015                 BRA     CEXIT
                      (         OPS2.ASM):00016         
                      (         OPS2.ASM):00017         ; -----
                      (         OPS2.ASM):00018         ; GRTR?
                      (         OPS2.ASM):00019         ; -----
                      (         OPS2.ASM):00020         
                      (         OPS2.ASM):00021         ; Is arg1 greater than arg2? [PRED]
                      (         OPS2.ASM):00022         
2C06                  (         OPS2.ASM):00023         ZGRTR:
2C06 DC02             (         OPS2.ASM):00024                 LDD     ARG1
2C08 DD3D             (         OPS2.ASM):00025                 STD     VAL
2C0A DC04             (         OPS2.ASM):00026                 LDD     ARG2
2C0C DD3F             (         OPS2.ASM):00027                 STD     TEMP
2C0E 2014             (         OPS2.ASM):00028                 BRA     CEXIT
                      (         OPS2.ASM):00029         
                      (         OPS2.ASM):00030         ; ------
                      (         OPS2.ASM):00031         ; DLESS?
                      (         OPS2.ASM):00032         ; ------
                      (         OPS2.ASM):00033         
                      (         OPS2.ASM):00034         ; Decrement variable "arg1"; succeed if new value
                      (         OPS2.ASM):00035         ; is less than arg2 [PRED]
                      (         OPS2.ASM):00036         
2C10                  (         OPS2.ASM):00037         ZDLESS:
2C10 BD2B33           (         OPS2.ASM):00038                 JSR     ZDEC                              ; DECREMENT THE VARIABLE
2C13 DC04             (         OPS2.ASM):00039                 LDD     ARG2
2C15 DD3D             (         OPS2.ASM):00040                 STD     VAL
2C17 200B             (         OPS2.ASM):00041                 BRA     CEXIT                             ; AND COMPARE
                      (         OPS2.ASM):00042         
                      (         OPS2.ASM):00043         ; ------
                      (         OPS2.ASM):00044         ; IGRTR?
                      (         OPS2.ASM):00045         ; ------
                      (         OPS2.ASM):00046         
                      (         OPS2.ASM):00047         ; Increment variable "arg1"; succeed if new value is
                      (         OPS2.ASM):00048         ; greater than arg2 [PRED]
                      (         OPS2.ASM):00049         
2C19                  (         OPS2.ASM):00050         ZIGRTR:
2C19 BD2B1B           (         OPS2.ASM):00051                 JSR     ZINC                              ; INCREMENT THE VARIABLE
2C1C DC3F             (         OPS2.ASM):00052                 LDD     TEMP
2C1E DD3D             (         OPS2.ASM):00053                 STD     VAL
2C20 DC04             (         OPS2.ASM):00054                 LDD     ARG2
2C22 DD3F             (         OPS2.ASM):00055                 STD     TEMP
                      (         OPS2.ASM):00056         
2C24                  (         OPS2.ASM):00057         CEXIT:
2C24 8D05             (         OPS2.ASM):00058                 BSR     SCOMP
2C26 2521             (         OPS2.ASM):00059                 BLO     POK
2C28                  (         OPS2.ASM):00060         PBAD:
2C28 7E294B           (         OPS2.ASM):00061                 JMP     PREDF
                      (         OPS2.ASM):00062         
                      (         OPS2.ASM):00063         ; -----------------
                      (         OPS2.ASM):00064         ; SIGNED COMPARISON
                      (         OPS2.ASM):00065         ; -----------------
                      (         OPS2.ASM):00066         
2C2B                  (         OPS2.ASM):00067         SCOMP:
2C2B 963D             (         OPS2.ASM):00068                 LDA     VAL                               ; ARE ARGUMENTS
2C2D 983F             (         OPS2.ASM):00069                 EORA    TEMP                              ; SIGNED THE SAME?
2C2F 2A05             (         OPS2.ASM):00070                 BPL     SCMP                              ; YES, DO ORDINARY COMPARE
2C31 963D             (         OPS2.ASM):00071                 LDA     VAL                               ; ELSE COMPARE
2C33 913F             (         OPS2.ASM):00072                 CMPA    TEMP                              ; ONLY THE HIGH BYTES
2C35 39               (         OPS2.ASM):00073                 RTS
                      (         OPS2.ASM):00074         
2C36                  (         OPS2.ASM):00075         SCMP:
2C36 DC3F             (         OPS2.ASM):00076                 LDD     TEMP
2C38 10933D           (         OPS2.ASM):00077                 CMPD    VAL
2C3B 39               (         OPS2.ASM):00078                 RTS
                      (         OPS2.ASM):00079         
                      (         OPS2.ASM):00080         ; ---
                      (         OPS2.ASM):00081         ; IN?
                      (         OPS2.ASM):00082         ; ---
                      (         OPS2.ASM):00083         
                      (         OPS2.ASM):00084         ; Is object "arg1" contained in object "arg2?" [PRED]
                      (         OPS2.ASM):00085         
2C3C                  (         OPS2.ASM):00086         ZIN:
2C3C 9603             (         OPS2.ASM):00087                 LDA     ARG1+1
2C3E BD33E1           (         OPS2.ASM):00088                 JSR     OBJLOC
2C41 9E3F             (         OPS2.ASM):00089                 LDX     TEMP
2C43 9605             (         OPS2.ASM):00090                 LDA     ARG2+1
2C45 A104             (         OPS2.ASM):00091                 CMPA    4,X
2C47 26DF             (         OPS2.ASM):00092                 BNE     PBAD
2C49                  (         OPS2.ASM):00093         POK:
2C49 7E2959           (         OPS2.ASM):00094                 JMP     PREDS
                      (         OPS2.ASM):00095         
                      (         OPS2.ASM):00096         ; ----
                      (         OPS2.ASM):00097         ; BTST
                      (         OPS2.ASM):00098         ; ----
                      (         OPS2.ASM):00099         
                      (         OPS2.ASM):00100         ; Is every "on" bit in arg1 also "on" in arg2? [PRED]
                      (         OPS2.ASM):00101         
2C4C                  (         OPS2.ASM):00102         ZBTST:
2C4C DC04             (         OPS2.ASM):00103                 LDD     ARG2
2C4E 9402             (         OPS2.ASM):00104                 ANDA    ARG1
2C50 D403             (         OPS2.ASM):00105                 ANDB    ARG1+1
2C52 109304           (         OPS2.ASM):00106                 CMPD    ARG2
2C55 27F2             (         OPS2.ASM):00107                 BEQ     POK
2C57 20CF             (         OPS2.ASM):00108                 BRA     PBAD
                      (         OPS2.ASM):00109         
                      (         OPS2.ASM):00110         ; ---
                      (         OPS2.ASM):00111         ; BOR
                      (         OPS2.ASM):00112         ; ---
                      (         OPS2.ASM):00113         
                      (         OPS2.ASM):00114         ; Return bitwise OR of arg1 and arg2 [VALUE]
                      (         OPS2.ASM):00115         
2C59                  (         OPS2.ASM):00116         ZBOR:
2C59 DC02             (         OPS2.ASM):00117                 LDD     ARG1
2C5B 9A04             (         OPS2.ASM):00118                 ORA     ARG2
2C5D DA05             (         OPS2.ASM):00119                 ORB     ARG2+1
2C5F                  (         OPS2.ASM):00120         ZB0:
2C5F DD3F             (         OPS2.ASM):00121                 STD     TEMP
2C61 7E2903           (         OPS2.ASM):00122                 JMP     PUTVAL
                      (         OPS2.ASM):00123         
                      (         OPS2.ASM):00124         ; ----
                      (         OPS2.ASM):00125         ; BAND
                      (         OPS2.ASM):00126         ; ----
                      (         OPS2.ASM):00127         
                      (         OPS2.ASM):00128         ; Return bitwise AND of arg1 and arg2 [VALUE]
                      (         OPS2.ASM):00129         
2C64                  (         OPS2.ASM):00130         ZBAND:
2C64 DC02             (         OPS2.ASM):00131                 LDD     ARG1
2C66 9404             (         OPS2.ASM):00132                 ANDA    ARG2
2C68 D405             (         OPS2.ASM):00133                 ANDB    ARG2+1
2C6A 20F3             (         OPS2.ASM):00134                 BRA     ZB0
                      (         OPS2.ASM):00135         
                      (         OPS2.ASM):00136         ; -----
                      (         OPS2.ASM):00137         ; FSET?
                      (         OPS2.ASM):00138         ; -----
                      (         OPS2.ASM):00139         
                      (         OPS2.ASM):00140         ; Is flag "arg2" set in object "arg1?" [PRED]
                      (         OPS2.ASM):00141         
2C6C                  (         OPS2.ASM):00142         ZFSETP:
2C6C BD33B3           (         OPS2.ASM):00143                 JSR     FLAGSU                            ; GET BIT
2C6F DC3D             (         OPS2.ASM):00144                 LDD     VAL
2C71 9443             (         OPS2.ASM):00145                 ANDA    MASK
2C73 973D             (         OPS2.ASM):00146                 STA     VAL
2C75 D444             (         OPS2.ASM):00147                 ANDB    MASK+1
2C77 DA3D             (         OPS2.ASM):00148                 ORB     VAL
2C79 26CE             (         OPS2.ASM):00149                 BNE     POK                               ; BIT IS ON
2C7B 20AB             (         OPS2.ASM):00150                 BRA     PBAD
                      (         OPS2.ASM):00151         
                      (         OPS2.ASM):00152         ; ----
                      (         OPS2.ASM):00153         ; FSET
                      (         OPS2.ASM):00154         ; ----
                      (         OPS2.ASM):00155         
                      (         OPS2.ASM):00156         ; Set flag "arg2" in object "arg1"
                      (         OPS2.ASM):00157         
2C7D                  (         OPS2.ASM):00158         ZFSET:
2C7D BD33B3           (         OPS2.ASM):00159                 JSR     FLAGSU
2C80 9E3F             (         OPS2.ASM):00160                 LDX     TEMP                              ; ADDRESS OF FLAGS
2C82 DC3D             (         OPS2.ASM):00161                 LDD     VAL                               ; GRAB FLAGS
2C84 9A43             (         OPS2.ASM):00162                 ORA     MASK                              ; SUPERIMPOSE THE
2C86 DA44             (         OPS2.ASM):00163                 ORB     MASK+1                            ; MASKING PATTERN
2C88 ED84             (         OPS2.ASM):00164                 STD     ,X                                ; AND REPLACE FLAG
2C8A 39               (         OPS2.ASM):00165                 RTS
                      (         OPS2.ASM):00166         
                      (         OPS2.ASM):00167         ; ------
                      (         OPS2.ASM):00168         ; FCLEAR
                      (         OPS2.ASM):00169         ; ------
                      (         OPS2.ASM):00170         
                      (         OPS2.ASM):00171         ; Clear flag "arg2" in object "arg1"
                      (         OPS2.ASM):00172         
2C8B                  (         OPS2.ASM):00173         ZFCLR:
2C8B BD33B3           (         OPS2.ASM):00174                 JSR     FLAGSU
2C8E 9E3F             (         OPS2.ASM):00175                 LDX     TEMP                              ; ADDRESS OF OBJECT
2C90 DC43             (         OPS2.ASM):00176                 LDD     MASK                              ; GRAB THE MASK
2C92 43               (         OPS2.ASM):00177                 COMA                                      ; COMPLEMENT IT
2C93 53               (         OPS2.ASM):00178                 COMB
2C94 943D             (         OPS2.ASM):00179                 ANDA    VAL                               ; SUPERIMPOSE FLAGS
2C96 D43E             (         OPS2.ASM):00180                 ANDB    VAL+1                             ; TO MASK OUT TARGET
2C98 ED84             (         OPS2.ASM):00181                 STD     ,X                                ; REPLACE THE FLAGS
2C9A 39               (         OPS2.ASM):00182                 RTS
                      (         OPS2.ASM):00183         
                      (         OPS2.ASM):00184         ; ---
                      (         OPS2.ASM):00185         ; SET
                      (         OPS2.ASM):00186         ; ---
                      (         OPS2.ASM):00187         
                      (         OPS2.ASM):00188         ; Set variable "arg1" equal to value "arg2"
                      (         OPS2.ASM):00189         
2C9B                  (         OPS2.ASM):00190         ZSET:
2C9B DC04             (         OPS2.ASM):00191                 LDD     ARG2
2C9D DD3F             (         OPS2.ASM):00192                 STD     TEMP
2C9F 9603             (         OPS2.ASM):00193                 LDA     ARG1+1
2CA1 7E28F1           (         OPS2.ASM):00194                 JMP     VARPUT
                      (         OPS2.ASM):00195         
                      (         OPS2.ASM):00196         ; ----
                      (         OPS2.ASM):00197         ; MOVE
                      (         OPS2.ASM):00198         ; ----
                      (         OPS2.ASM):00199         
                      (         OPS2.ASM):00200         ; Put object "arg1" into object "arg2"
                      (         OPS2.ASM):00201         
2CA4                  (         OPS2.ASM):00202         ZMOVE:
2CA4 BD2B49           (         OPS2.ASM):00203                 JSR     ZREMOV                            ; REMOVE OBJECT FIRST
2CA7 9603             (         OPS2.ASM):00204                 LDA     ARG1+1
2CA9 BD33E1           (         OPS2.ASM):00205                 JSR     OBJLOC                            ; GET ADDRESS OF OBJECT
2CAC 9E3F             (         OPS2.ASM):00206                 LDX     TEMP                              ; PUT ADDRESS IN X
2CAE 3410             (         OPS2.ASM):00207                 PSHS    X                                 ; SAVE IT HERE TOO
2CB0 9605             (         OPS2.ASM):00208                 LDA     ARG2+1
2CB2 A704             (         OPS2.ASM):00209                 STA     4,X
                      (         OPS2.ASM):00210         
2CB4 BD33E1           (         OPS2.ASM):00211                 JSR     OBJLOC
2CB7 9E3F             (         OPS2.ASM):00212                 LDX     TEMP
2CB9 A606             (         OPS2.ASM):00213                 LDA     6,X
2CBB 973D             (         OPS2.ASM):00214                 STA     VAL                               ; HOLD HERE FOR A MOMENT
2CBD 9603             (         OPS2.ASM):00215                 LDA     ARG1+1
2CBF A706             (         OPS2.ASM):00216                 STA     6,X
2CC1 3510             (         OPS2.ASM):00217                 PULS    X                                 ; RESTORE OLD [TEMP]
2CC3 963D             (         OPS2.ASM):00218                 LDA     VAL
2CC5 2702             (         OPS2.ASM):00219                 BEQ     ZMVEX
2CC7 A705             (         OPS2.ASM):00220                 STA     5,X
2CC9                  (         OPS2.ASM):00221         ZMVEX:
2CC9 39               (         OPS2.ASM):00222                 RTS
                      (         OPS2.ASM):00223         
                      (         OPS2.ASM):00224         ; ---
                      (         OPS2.ASM):00225         ; GET
                      (         OPS2.ASM):00226         ; ---
                      (         OPS2.ASM):00227         
                      (         OPS2.ASM):00228         ; Return value of item "arg2" in WORD-table at "arg1" [VALUE]
                      (         OPS2.ASM):00229         
2CCA                  (         OPS2.ASM):00230         ZGET:
2CCA 0805             (         OPS2.ASM):00231                 ASL     ARG2+1
2CCC 0904             (         OPS2.ASM):00232                 ROL     ARG2                              ; WORD-ALIGN ARG2
2CCE DC04             (         OPS2.ASM):00233                 LDD     ARG2
2CD0 D302             (         OPS2.ASM):00234                 ADDD    ARG1                              ; ADD OFFSET TO TABLE ADDRESS
2CD2 DD3F             (         OPS2.ASM):00235                 STD     TEMP
2CD4 BD317F           (         OPS2.ASM):00236                 JSR     SETWRD
2CD7 BD3092           (         OPS2.ASM):00237                 JSR     GETWRD
2CDA 7E2903           (         OPS2.ASM):00238                 JMP     PUTVAL
                      (         OPS2.ASM):00239         
                      (         OPS2.ASM):00240         ; ----
                      (         OPS2.ASM):00241         ; GETB
                      (         OPS2.ASM):00242         ; ----
                      (         OPS2.ASM):00243         
                      (         OPS2.ASM):00244         ; Return value of item "arg2" in BYTE-table at "arg1" [VALUE]
                      (         OPS2.ASM):00245         
2CDD                  (         OPS2.ASM):00246         ZGETB:
2CDD DC02             (         OPS2.ASM):00247                 LDD     ARG1
2CDF D304             (         OPS2.ASM):00248                 ADDD    ARG2
2CE1 DD3F             (         OPS2.ASM):00249                 STD     TEMP
2CE3 BD317F           (         OPS2.ASM):00250                 JSR     SETWRD
2CE6 BD30CC           (         OPS2.ASM):00251                 JSR     GETBYT
2CE9 9740             (         OPS2.ASM):00252                 STA     TEMP+1
2CEB 0F3F             (         OPS2.ASM):00253                 CLR     TEMP
2CED 7E2903           (         OPS2.ASM):00254                 JMP     PUTVAL
                      (         OPS2.ASM):00255         
                      (         OPS2.ASM):00256         ; ----
                      (         OPS2.ASM):00257         ; GETP
                      (         OPS2.ASM):00258         ; ----
                      (         OPS2.ASM):00259         
                      (         OPS2.ASM):00260         ; Return prop "arg2" of object "arg1"; if specified prop
                      (         OPS2.ASM):00261         ; doesn't exist, return prop'th element of default object [VALUE]
                      (         OPS2.ASM):00262         
2CF0                  (         OPS2.ASM):00263         ZGETP:
2CF0 BD337E           (         OPS2.ASM):00264                 JSR     PROPB                             ; GET POINTER TO PROPS
2CF3                  (         OPS2.ASM):00265         GETP1:
2CF3 BD3393           (         OPS2.ASM):00266                 JSR     PROPN
2CF6 9105             (         OPS2.ASM):00267                 CMPA    ARG2+1
2CF8 2718             (         OPS2.ASM):00268                 BEQ     GETP2
2CFA 2505             (         OPS2.ASM):00269                 BLO     GETP3
                      (         OPS2.ASM):00270         
2CFC BD33A8           (         OPS2.ASM):00271                 JSR     PROPNX
2CFF 20F2             (         OPS2.ASM):00272                 BRA     GETP1                             ; TRY AGAIN WITH NEXT PROP
                      (         OPS2.ASM):00273         
2D01                  (         OPS2.ASM):00274         GETP3:
2D01 FC3E14           (         OPS2.ASM):00275                 LDD     ZCODE+ZOBJEC                      ; Z-ADDR OF OBJECT TABLE
2D04 C33E0A           (         OPS2.ASM):00276                 ADDD    #ZCODE                            ; FORM THE ABSOLUTE ADDRESS
2D07 1F01             (         OPS2.ASM):00277                 TFR     D,X                               ; USE AS AN INDEX
2D09 D605             (         OPS2.ASM):00278                 LDB     ARG2+1                            ; GET PROPERTY #
2D0B 5A               (         OPS2.ASM):00279                 DECB
2D0C 58               (         OPS2.ASM):00280                 ASLB
2D0D 3A               (         OPS2.ASM):00281                 ABX                                       ; ADD TO TABLE ADDRESS
2D0E EC84             (         OPS2.ASM):00282                 LDD     ,X                                ; FETCH THE PROPERTY
2D10 201D             (         OPS2.ASM):00283                 BRA     ETPEX                             ; AND PASS IT ON
                      (         OPS2.ASM):00284         
2D12                  (         OPS2.ASM):00285         GETP2:
2D12 BD339B           (         OPS2.ASM):00286                 JSR     PROPL
2D15 5C               (         OPS2.ASM):00287                 INCB                                      ; SOMETHING SHOULD BE IN B!
2D16 4D               (         OPS2.ASM):00288                 TSTA                                      ; AND IN A!
2D17 2710             (         OPS2.ASM):00289                 BEQ     GETP2A
2D19 8101             (         OPS2.ASM):00290                 CMPA    #1
2D1B 2705             (         OPS2.ASM):00291                 BEQ     GETP2B
                      (         OPS2.ASM):00292         
                      (         OPS2.ASM):00293         ; *** ERROR #7: PROPERTY LENGTH ***
                      (         OPS2.ASM):00294         
2D1D 8607             (         OPS2.ASM):00295                 LDA     #7
2D1F BD350C           (         OPS2.ASM):00296                 JSR     ZERROR
                      (         OPS2.ASM):00297         
2D22                  (         OPS2.ASM):00298         GETP2B:
2D22 9E3F             (         OPS2.ASM):00299                 LDX     TEMP
2D24 3A               (         OPS2.ASM):00300                 ABX
2D25 EC84             (         OPS2.ASM):00301                 LDD     ,X
2D27 2006             (         OPS2.ASM):00302                 BRA     ETPEX
                      (         OPS2.ASM):00303         
2D29                  (         OPS2.ASM):00304         GETP2A:
2D29 9E3F             (         OPS2.ASM):00305                 LDX     TEMP
2D2B 3A               (         OPS2.ASM):00306                 ABX
2D2C E684             (         OPS2.ASM):00307                 LDB     ,X
2D2E 4F               (         OPS2.ASM):00308                 CLRA
2D2F                  (         OPS2.ASM):00309         ETPEX:
2D2F DD3F             (         OPS2.ASM):00310                 STD     TEMP
2D31 7E2903           (         OPS2.ASM):00311                 JMP     PUTVAL
                      (         OPS2.ASM):00312         
                      (         OPS2.ASM):00313         ; -----
                      (         OPS2.ASM):00314         ; GETPT
                      (         OPS2.ASM):00315         ; -----
                      (         OPS2.ASM):00316         
                      (         OPS2.ASM):00317         ; Return a POINTER to prop table "arg2" in object "arg1" [VALUE]
                      (         OPS2.ASM):00318         
2D34                  (         OPS2.ASM):00319         ZGETPT:
2D34 BD337E           (         OPS2.ASM):00320                 JSR     PROPB
2D37                  (         OPS2.ASM):00321         GETPT1:
2D37 BD3393           (         OPS2.ASM):00322                 JSR     PROPN
2D3A 9105             (         OPS2.ASM):00323                 CMPA    ARG2+1
2D3C 2709             (         OPS2.ASM):00324                 BEQ     GETPT2
2D3E 1025FBBC         (         OPS2.ASM):00325                 LBLO    RET0
2D42 BD33A8           (         OPS2.ASM):00326                 JSR     PROPNX                            ; TRY NEXT ENTRY
2D45 20F0             (         OPS2.ASM):00327                 BRA     GETPT1
                      (         OPS2.ASM):00328         
2D47                  (         OPS2.ASM):00329         GETPT2:
2D47 0C40             (         OPS2.ASM):00330                 INC     TEMP+1
2D49 2602             (         OPS2.ASM):00331                 BNE     GPT
2D4B 0C3F             (         OPS2.ASM):00332                 INC     TEMP
2D4D                  (         OPS2.ASM):00333         GPT:
2D4D 4F               (         OPS2.ASM):00334                 CLRA                                      ; ADD OFFSET IN [B]
2D4E D33F             (         OPS2.ASM):00335                 ADDD    TEMP
2D50 833E0A           (         OPS2.ASM):00336                 SUBD    #ZCODE                            ; CHANGE TO RELATIVE POINTER
2D53 DD3F             (         OPS2.ASM):00337                 STD     TEMP
2D55 7E2903           (         OPS2.ASM):00338                 JMP     PUTVAL
                      (         OPS2.ASM):00339         
                      (         OPS2.ASM):00340         ; -----
                      (         OPS2.ASM):00341         ; NEXTP
                      (         OPS2.ASM):00342         ; -----
                      (         OPS2.ASM):00343         
                      (         OPS2.ASM):00344         ; Return prop index number of the prop following prop "arg2"
                      (         OPS2.ASM):00345         ; in object "arg1"; return zero if last property; return
                      (         OPS2.ASM):00346         ; 1st prop # if arg2=0; error if no prop "arg2" in "arg1" [VALUE]
                      (         OPS2.ASM):00347         
2D58                  (         OPS2.ASM):00348         ZNEXTP:
2D58 BD337E           (         OPS2.ASM):00349                 JSR     PROPB
2D5B 9605             (         OPS2.ASM):00350                 LDA     ARG2+1
2D5D 2713             (         OPS2.ASM):00351                 BEQ     NXTP2
                      (         OPS2.ASM):00352         
2D5F                  (         OPS2.ASM):00353         NXTP1:
2D5F BD3393           (         OPS2.ASM):00354                 JSR     PROPN
2D62 9105             (         OPS2.ASM):00355                 CMPA    ARG2+1
2D64 2709             (         OPS2.ASM):00356                 BEQ     NXTP3
2D66 1025FB94         (         OPS2.ASM):00357                 LBCS    RET0
2D6A BD33A8           (         OPS2.ASM):00358                 JSR     PROPNX                            ; TRY NEXT ENTRY
2D6D 20F0             (         OPS2.ASM):00359                 BRA     NXTP1
                      (         OPS2.ASM):00360         
2D6F                  (         OPS2.ASM):00361         NXTP3:
2D6F BD33A8           (         OPS2.ASM):00362                 JSR     PROPNX
                      (         OPS2.ASM):00363         
2D72                  (         OPS2.ASM):00364         NXTP2:
2D72 BD3393           (         OPS2.ASM):00365                 JSR     PROPN
2D75 7E28FF           (         OPS2.ASM):00366                 JMP     PUTBYT
                      (         OPS2.ASM):00367         
                      (         OPS2.ASM):00368         ; ---
                      (         OPS2.ASM):00369         ; ADD
                      (         OPS2.ASM):00370         ; ---
                      (         OPS2.ASM):00371         
                      (         OPS2.ASM):00372         ; Return (arg1+arg2) [VALUE]
                      (         OPS2.ASM):00373         
2D78                  (         OPS2.ASM):00374         ZADD:
2D78 DC02             (         OPS2.ASM):00375                 LDD     ARG1
2D7A D304             (         OPS2.ASM):00376                 ADDD    ARG2
2D7C                  (         OPS2.ASM):00377         MATH:
2D7C DD3F             (         OPS2.ASM):00378                 STD     TEMP
2D7E 7E2903           (         OPS2.ASM):00379                 JMP     PUTVAL
                      (         OPS2.ASM):00380         
                      (         OPS2.ASM):00381         ; ---
                      (         OPS2.ASM):00382         ; SUB
                      (         OPS2.ASM):00383         ; ---
                      (         OPS2.ASM):00384         
                      (         OPS2.ASM):00385         ; Return (arg1-arg2) [VALUE]
                      (         OPS2.ASM):00386         
2D81                  (         OPS2.ASM):00387         ZSUB:
2D81 DC02             (         OPS2.ASM):00388                 LDD     ARG1
2D83 9304             (         OPS2.ASM):00389                 SUBD    ARG2
2D85 20F5             (         OPS2.ASM):00390                 BRA     MATH
                      (         OPS2.ASM):00391         
                      (         OPS2.ASM):00392         ; ---
                      (         OPS2.ASM):00393         ; MUL
                      (         OPS2.ASM):00394         ; ---
                      (         OPS2.ASM):00395         
                      (         OPS2.ASM):00396         ; Return (arg1*arg2) [VALUE]
                      (         OPS2.ASM):00397         
2D87                  (         OPS2.ASM):00398         ZMUL:
2D87 8E0011           (         OPS2.ASM):00399                 LDX     #17                               ; INIT LOOP INDEX
2D8A 4F               (         OPS2.ASM):00400                 CLRA                                      ; CLEAR THE
2D8B 5F               (         OPS2.ASM):00401                 CLRB                                      ; CARRY
2D8C DD47             (         OPS2.ASM):00402                 STD     MTEMP                             ; AND TEMP REGISTER
                      (         OPS2.ASM):00403         
2D8E                  (         OPS2.ASM):00404         ZMLOOP:
2D8E 0647             (         OPS2.ASM):00405                 ROR     MTEMP
2D90 0648             (         OPS2.ASM):00406                 ROR     MTEMP+1
2D92 0604             (         OPS2.ASM):00407                 ROR     ARG2                              ; SHIFT A BIT
2D94 0605             (         OPS2.ASM):00408                 ROR     ARG2+1                            ; INTO POSITION
2D96 2406             (         OPS2.ASM):00409                 BCC     ZMNEXT                            ; NO ADDITION IF BIT CLEAR
                      (         OPS2.ASM):00410         
2D98 DC02             (         OPS2.ASM):00411                 LDD     ARG1
2D9A D347             (         OPS2.ASM):00412                 ADDD    MTEMP
2D9C DD47             (         OPS2.ASM):00413                 STD     MTEMP
                      (         OPS2.ASM):00414         
2D9E                  (         OPS2.ASM):00415         ZMNEXT:
2D9E 301F             (         OPS2.ASM):00416                 LEAX    -1,X                              ; ALL BITS EXAMINED?
2DA0 26EC             (         OPS2.ASM):00417                 BNE     ZMLOOP                            ; NO, KEEP SHIFTING
                      (         OPS2.ASM):00418         
2DA2 DC04             (         OPS2.ASM):00419                 LDD     ARG2                              ; ELSE GRAB PRODUCT
2DA4 20D6             (         OPS2.ASM):00420                 BRA     MATH                              ; AND RETURN
                      (         OPS2.ASM):00421         
                      (         OPS2.ASM):00422         ; ---------
                      (         OPS2.ASM):00423         ; DIV & MOD
                      (         OPS2.ASM):00424         ; ---------
                      (         OPS2.ASM):00425         
                      (         OPS2.ASM):00426         ; DIV: Return quotient of int(arg1/arg2) [VALUE]
                      (         OPS2.ASM):00427         ; MOD: Return remainder of int(arg1/arg2) [VALUE]
                      (         OPS2.ASM):00428         
2DA6                  (         OPS2.ASM):00429         ZDIV:
2DA6 8D09             (         OPS2.ASM):00430                 BSR     DVINIT
2DA8 7E2903           (         OPS2.ASM):00431                 JMP     PUTVAL                            ; AND SHIP OUT [TEMP]
                      (         OPS2.ASM):00432         
2DAB                  (         OPS2.ASM):00433         ZMOD:
2DAB 8D04             (         OPS2.ASM):00434                 BSR     DVINIT
2DAD DC3D             (         OPS2.ASM):00435                 LDD     VAL                               ; RETURN THE
2DAF 20CB             (         OPS2.ASM):00436                 BRA     MATH                              ; REMAINDER IN [VAL]
                      (         OPS2.ASM):00437         
                      (         OPS2.ASM):00438         ; -----------
                      (         OPS2.ASM):00439         ; DIVIDE INIT
                      (         OPS2.ASM):00440         ; -----------
                      (         OPS2.ASM):00441         
2DB1                  (         OPS2.ASM):00442         DVINIT:
2DB1 DC02             (         OPS2.ASM):00443                 LDD     ARG1
2DB3 DD3F             (         OPS2.ASM):00444                 STD     TEMP
2DB5 DC04             (         OPS2.ASM):00445                 LDD     ARG2
2DB7 DD3D             (         OPS2.ASM):00446                 STD     VAL
                      (         OPS2.ASM):00447         
                      (         OPS2.ASM):00448         ; FALL THROUGH ...
                      (         OPS2.ASM):00449         
                      (         OPS2.ASM):00450         ; ---------------
                      (         OPS2.ASM):00451         ; SIGNED DIVISION
                      (         OPS2.ASM):00452         ; ---------------
                      (         OPS2.ASM):00453         
                      (         OPS2.ASM):00454         ; ENTRY: DIVIDEND IN [TEMP], DIVISOR IN [VAL]
                      (         OPS2.ASM):00455         ; EXIT: QUOTIENT IN [TEMP], REMAINDER IN [VAL]
                      (         OPS2.ASM):00456         
2DB9                  (         OPS2.ASM):00457         DIVIDE:
2DB9 963F             (         OPS2.ASM):00458                 LDA     TEMP                              ; SIGN OF REMAINDER
2DBB 9746             (         OPS2.ASM):00459                 STA     SREM                              ; IS ALWAYS SIGN OF DIVIDEND
2DBD 983D             (         OPS2.ASM):00460                 EORA    VAL                               ; SIGN OF QUOTIENT IS POSITIVE
2DBF 9745             (         OPS2.ASM):00461                 STA     SQUOT                             ; IF SIGNS OF TERMS ARE THE SAME
                      (         OPS2.ASM):00462         
2DC1 0D3F             (         OPS2.ASM):00463                 TST     TEMP                              ; IF DIVIDEND IS NEGATIVE,
2DC3 2A02             (         OPS2.ASM):00464                 BPL     TABS                              ; CALC ABSOLUTE VALUE
2DC5 8D19             (         OPS2.ASM):00465                 BSR     ABTEMP
                      (         OPS2.ASM):00466         
2DC7                  (         OPS2.ASM):00467         TABS:
2DC7 0D3D             (         OPS2.ASM):00468                 TST     VAL                               ; IF DIVISOR IS NEGATIVE,
2DC9 2A02             (         OPS2.ASM):00469                 BPL     DOUDIV                            ; DO THE SAME
2DCB 8D0C             (         OPS2.ASM):00470                 BSR     ABSVAL
                      (         OPS2.ASM):00471         
2DCD                  (         OPS2.ASM):00472         DOUDIV:
2DCD 8D18             (         OPS2.ASM):00473                 BSR     UDIV                              ; UNSIGNED DIVIDE
                      (         OPS2.ASM):00474         
2DCF 0D45             (         OPS2.ASM):00475                 TST     SQUOT
2DD1 2A02             (         OPS2.ASM):00476                 BPL     RFLIP
2DD3 8D0B             (         OPS2.ASM):00477                 BSR     ABTEMP
                      (         OPS2.ASM):00478         
2DD5                  (         OPS2.ASM):00479         RFLIP:
2DD5 0D46             (         OPS2.ASM):00480                 TST     SREM
2DD7 2A06             (         OPS2.ASM):00481                 BPL     DIVEX
                      (         OPS2.ASM):00482         
                      (         OPS2.ASM):00483         ; FALL THROUGH ...
                      (         OPS2.ASM):00484         
                      (         OPS2.ASM):00485         ; -------------
                      (         OPS2.ASM):00486         ; CALC ABS(VAL)
                      (         OPS2.ASM):00487         ; -------------
                      (         OPS2.ASM):00488         
2DD9                  (         OPS2.ASM):00489         ABSVAL:
2DD9 4F               (         OPS2.ASM):00490                 CLRA
2DDA 5F               (         OPS2.ASM):00491                 CLRB
2DDB 933D             (         OPS2.ASM):00492                 SUBD    VAL
2DDD DD3D             (         OPS2.ASM):00493                 STD     VAL
                      (         OPS2.ASM):00494         
2DDF                  (         OPS2.ASM):00495         DIVEX:
2DDF 39               (         OPS2.ASM):00496                 RTS
                      (         OPS2.ASM):00497         
                      (         OPS2.ASM):00498         ; --------------
                      (         OPS2.ASM):00499         ; CALC ABS(TEMP)
                      (         OPS2.ASM):00500         ; --------------
                      (         OPS2.ASM):00501         
2DE0                  (         OPS2.ASM):00502         ABTEMP:
2DE0 4F               (         OPS2.ASM):00503                 CLRA
2DE1 5F               (         OPS2.ASM):00504                 CLRB
2DE2 933F             (         OPS2.ASM):00505                 SUBD    TEMP
2DE4 DD3F             (         OPS2.ASM):00506                 STD     TEMP
2DE6 39               (         OPS2.ASM):00507                 RTS
                      (         OPS2.ASM):00508         
                      (         OPS2.ASM):00509         ; -----------------
                      (         OPS2.ASM):00510         ; UNSIGNED DIVISION
                      (         OPS2.ASM):00511         ; -----------------
                      (         OPS2.ASM):00512         
                      (         OPS2.ASM):00513         ; ENTRY: DIVIDEND IN [TEMP], DIVISOR IN [VAL]
                      (         OPS2.ASM):00514         ; EXIT: QUOTIENT IN [TEMP], REMAINDER IN [VAL]
                      (         OPS2.ASM):00515         
2DE7                  (         OPS2.ASM):00516         UDIV:
2DE7 DC3D             (         OPS2.ASM):00517                 LDD     VAL
2DE9 2728             (         OPS2.ASM):00518                 BEQ     DIVERR                            ; CAN'T DIVIDE BY ZERO!
                      (         OPS2.ASM):00519         
2DEB 8E0010           (         OPS2.ASM):00520                 LDX     #16                               ; INIT LOOP INDEX
2DEE 4F               (         OPS2.ASM):00521                 CLRA                                      ; CLEAR THE
2DEF 5F               (         OPS2.ASM):00522                 CLRB                                      ; CARRY
2DF0 DD47             (         OPS2.ASM):00523                 STD     MTEMP                             ; AND HI-DIVIDEND REGISTER
                      (         OPS2.ASM):00524         
2DF2                  (         OPS2.ASM):00525         UDLOOP:
2DF2 0940             (         OPS2.ASM):00526                 ROL     TEMP+1
2DF4 093F             (         OPS2.ASM):00527                 ROL     TEMP
2DF6 0948             (         OPS2.ASM):00528                 ROL     MTEMP+1
2DF8 0947             (         OPS2.ASM):00529                 ROL     MTEMP
                      (         OPS2.ASM):00530         
2DFA DC47             (         OPS2.ASM):00531                 LDD     MTEMP                             ; IS DIVIDEND < DIVISOR?
2DFC 933D             (         OPS2.ASM):00532                 SUBD    VAL
2DFE 2505             (         OPS2.ASM):00533                 BCS     UDNEXT                            ; YES, CLEAR THE CARRY AND LOOP
2E00 DD47             (         OPS2.ASM):00534                 STD     MTEMP                             ; ELSE UPDATE DIVIDEND
2E02 43               (         OPS2.ASM):00535                 COMA                                      ; SET THE CARRY
2E03 2001             (         OPS2.ASM):00536                 BRA     DECX                              ; AND LOOP
                      (         OPS2.ASM):00537         
2E05                  (         OPS2.ASM):00538         UDNEXT:
2E05 4F               (         OPS2.ASM):00539                 CLRA                                      ; CLEAR CARRY
                      (         OPS2.ASM):00540         
2E06                  (         OPS2.ASM):00541         DECX:
2E06 301F             (         OPS2.ASM):00542                 LEAX    -1,X
2E08 26E8             (         OPS2.ASM):00543                 BNE     UDLOOP
                      (         OPS2.ASM):00544         
2E0A 0940             (         OPS2.ASM):00545                 ROL     TEMP+1                            ; SHIFT LAST CARRY INTO PLACE
2E0C 093F             (         OPS2.ASM):00546                 ROL     TEMP
2E0E DC47             (         OPS2.ASM):00547                 LDD     MTEMP                             ; MOVE REMAINDER INTO
2E10 DD3D             (         OPS2.ASM):00548                 STD     VAL                               ; ITS RIGHTFUL PLACE
2E12 39               (         OPS2.ASM):00549                 RTS
                      (         OPS2.ASM):00550         
                      (         OPS2.ASM):00551         ; *** ERROR #8: DIVISION ***
                      (         OPS2.ASM):00552         
2E13                  (         OPS2.ASM):00553         DIVERR:
2E13 8608             (         OPS2.ASM):00554                 LDA     #8
2E15 BD350C           (         OPS2.ASM):00555                 JSR     ZERROR
                      (     cubixzip.asm):00056                 INCLUDE OPSX.ASM
                      (         OPSX.ASM):00001         ;       PAGE
                      (         OPSX.ASM):00002         ;       SBTTL "--- X-OPS ---"
                      (         OPSX.ASM):00003         
                      (         OPSX.ASM):00004         ; ------
                      (         OPSX.ASM):00005         ; EQUAL?
                      (         OPSX.ASM):00006         ; ------
                      (         OPSX.ASM):00007         
2E18                  (         OPSX.ASM):00008         ZEQUAL:
2E18 0A01             (         OPSX.ASM):00009                 DEC     ARGCNT
2E1A 2605             (         OPSX.ASM):00010                 BNE     DOEQ
                      (         OPSX.ASM):00011         
                      (         OPSX.ASM):00012         ; *** ERROR #9: NOT ENOUGH "EQUAL?" ARGS ***
                      (         OPSX.ASM):00013         
2E1C 8609             (         OPSX.ASM):00014                 LDA     #9
2E1E BD350C           (         OPSX.ASM):00015                 JSR     ZERROR
                      (         OPSX.ASM):00016         
2E21                  (         OPSX.ASM):00017         DOEQ:
2E21 DC02             (         OPSX.ASM):00018                 LDD     ARG1
2E23 109304           (         OPSX.ASM):00019                 CMPD    ARG2
2E26 2715             (         OPSX.ASM):00020                 BEQ     EQOK
2E28 0A01             (         OPSX.ASM):00021                 DEC     ARGCNT
2E2A 270E             (         OPSX.ASM):00022                 BEQ     EQBAD
                      (         OPSX.ASM):00023         
2E2C 109306           (         OPSX.ASM):00024                 CMPD    ARG3
2E2F 270C             (         OPSX.ASM):00025                 BEQ     EQOK
2E31 0A01             (         OPSX.ASM):00026                 DEC     ARGCNT
2E33 2705             (         OPSX.ASM):00027                 BEQ     EQBAD
                      (         OPSX.ASM):00028         
2E35 109308           (         OPSX.ASM):00029                 CMPD    ARG4
2E38 2703             (         OPSX.ASM):00030                 BEQ     EQOK
2E3A                  (         OPSX.ASM):00031         EQBAD:
2E3A 7E294B           (         OPSX.ASM):00032                 JMP     PREDF
                      (         OPSX.ASM):00033         
2E3D                  (         OPSX.ASM):00034         EQOK:
2E3D 7E2959           (         OPSX.ASM):00035                 JMP     PREDS
                      (         OPSX.ASM):00036         
                      (         OPSX.ASM):00037         ; ----
                      (         OPSX.ASM):00038         ; CALL
                      (         OPSX.ASM):00039         ; ----
                      (         OPSX.ASM):00040         
                      (         OPSX.ASM):00041         ; Branch to function pointed to by [arg1 * 2], passing
                      (         OPSX.ASM):00042         ; the optional parameters "arg2" thru "arg4" [VALUE]
                      (         OPSX.ASM):00043         
2E40                  (         OPSX.ASM):00044         ZCALL:
2E40 DC02             (         OPSX.ASM):00045                 LDD     ARG1                              ; DID FUNCTION = 0?
2E42 2603             (         OPSX.ASM):00046                 BNE     DOCALL                            ; NO, CONTINUE
2E44 7E2D7C           (         OPSX.ASM):00047                 JMP     MATH                              ; ELSE RETURN A ZERO
                      (         OPSX.ASM):00048         
2E47                  (         OPSX.ASM):00049         DOCALL:
2E47 DC27             (         OPSX.ASM):00050                 LDD     OZSTAK                            ; ZSP FROM PREVIOUS ZCALL
2E49 BD292D           (         OPSX.ASM):00051                 JSR     PSHDZ
2E4C D615             (         OPSX.ASM):00052                 LDB     ZPCL                              ; LOW 8 BITS OF ZPC
2E4E BD292D           (         OPSX.ASM):00053                 JSR     PSHDZ                             ; SAVE TO Z-STACK
2E51 DC13             (         OPSX.ASM):00054                 LDD     ZPCH                              ; PUSH H & M PC
2E53 BD292D           (         OPSX.ASM):00055                 JSR     PSHDZ
                      (         OPSX.ASM):00056         
                      (         OPSX.ASM):00057         ; MULTIPLY ARG1 BY 2; FORM 17-BIT ADDR
                      (         OPSX.ASM):00058         
2E56 4F               (         OPSX.ASM):00059                 CLRA
2E57 0803             (         OPSX.ASM):00060                 ASL     ARG1+1                            ; BOTTOM 8 BITS
2E59 0902             (         OPSX.ASM):00061                 ROL     ARG1                              ; MIDDLE 8
2E5B 49               (         OPSX.ASM):00062                 ROLA                                      ; TOP BIT
2E5C 9713             (         OPSX.ASM):00063                 STA     ZPCH
2E5E DC02             (         OPSX.ASM):00064                 LDD     ARG1
2E60 DD14             (         OPSX.ASM):00065                 STD     ZPCM
2E62 0F18             (         OPSX.ASM):00066                 CLR     ZPCFLG                            ; [ZPC] HAS CHANGED ...
                      (         OPSX.ASM):00067         
2E64 BD309B           (         OPSX.ASM):00068                 JSR     NEXTPC                            ; FETCH # NEW LOCALS
2E67 9741             (         OPSX.ASM):00069                 STA     TEMP2                             ; SAVE IT HERE FOR INDEXING
2E69 9742             (         OPSX.ASM):00070                 STA     TEMP2+1                           ; AND HERE FOR REFERENCE
2E6B 271E             (         OPSX.ASM):00071                 BEQ     ZCALL2                            ; NO LOCALS IN THIS FUNCTION
                      (         OPSX.ASM):00072         
                      (         OPSX.ASM):00073         ; SAVE OLD LOCALS, REPLACE WITH NEW
                      (         OPSX.ASM):00074         
2E6D 8E260A           (         OPSX.ASM):00075                 LDX     #LOCALS                           ; INIT POINTER
2E70                  (         OPSX.ASM):00076         ZCALL1:
2E70 EC84             (         OPSX.ASM):00077                 LDD     ,X                                ; GRAB AN OLD LOCAL
2E72 3410             (         OPSX.ASM):00078                 PSHS    X                                 ; SAVE THE POINTER
2E74 BD292D           (         OPSX.ASM):00079                 JSR     PSHDZ                             ; PUSH OLD LOCAL TO Z-STACK
2E77 BD309B           (         OPSX.ASM):00080                 JSR     NEXTPC                            ; GET MSB OF NEW LOCAL
2E7A 3402             (         OPSX.ASM):00081                 PSHS    A                                 ; SAVE HERE
2E7C BD309B           (         OPSX.ASM):00082                 JSR     NEXTPC                            ; NOW GET LSB
2E7F 1F89             (         OPSX.ASM):00083                 TFR     A,B                               ; POSITION IT PROPERLY
2E81 3502             (         OPSX.ASM):00084                 PULS    A                                 ; RETRIEVE MSB
2E83 3510             (         OPSX.ASM):00085                 PULS    X                                 ; THIS IS WHERE IT GOES
2E85 ED81             (         OPSX.ASM):00086                 STD     ,X++                              ; STORE NEW LOCAL, UPDATE POINTER
2E87 0A41             (         OPSX.ASM):00087                 DEC     TEMP2                             ; ANY MORE OLD LOCALS?
2E89 26E5             (         OPSX.ASM):00088                 BNE     ZCALL1                            ; KEEP LOOPING TILL DONE
                      (         OPSX.ASM):00089         
2E8B                  (         OPSX.ASM):00090         ZCALL2:
2E8B 0A01             (         OPSX.ASM):00091                 DEC     ARGCNT                            ; EXTRA ARGUMENTS IN THIS CALL?
2E8D 2717             (         OPSX.ASM):00092                 BEQ     ZCALL4                            ; NO ARGS TO PASS
                      (         OPSX.ASM):00093         
                      (         OPSX.ASM):00094         ; MOVE UP TO 3 ARGS TO LOCAL STORAGE
                      (         OPSX.ASM):00095         
2E8F                  (         OPSX.ASM):00096         ZCALL3:
2E8F DC04             (         OPSX.ASM):00097                 LDD     ARG2
2E91 FD260A           (         OPSX.ASM):00098                 STD     LOCALS
2E94 0A01             (         OPSX.ASM):00099                 DEC     ARGCNT
2E96 270E             (         OPSX.ASM):00100                 BEQ     ZCALL4
2E98 DC06             (         OPSX.ASM):00101                 LDD     ARG3
2E9A FD260C           (         OPSX.ASM):00102                 STD     LOCALS+2
2E9D 0A01             (         OPSX.ASM):00103                 DEC     ARGCNT
2E9F 2705             (         OPSX.ASM):00104                 BEQ     ZCALL4
2EA1 DC08             (         OPSX.ASM):00105                 LDD     ARG4
2EA3 FD260E           (         OPSX.ASM):00106                 STD     LOCALS+4
                      (         OPSX.ASM):00107         
2EA6                  (         OPSX.ASM):00108         ZCALL4:
2EA6 D642             (         OPSX.ASM):00109                 LDB     TEMP2+1                           ; REMEMBER # LOCALS SAVED
2EA8 1F98             (         OPSX.ASM):00110                 TFR     B,A                               ; COPY INTO [A]
2EAA 43               (         OPSX.ASM):00111                 COMA                                      ; COMPLEMENT FOR ERROR CHECK (BM 11/24/84)
2EAB BD292D           (         OPSX.ASM):00112                 JSR     PSHDZ                             ; AND RETURN
2EAE DF27             (         OPSX.ASM):00113                 STU     OZSTAK                            ; "THE WAY WE WERE ..."
2EB0 39               (         OPSX.ASM):00114                 RTS
                      (         OPSX.ASM):00115         
                      (         OPSX.ASM):00116         ; ---
                      (         OPSX.ASM):00117         ; PUT
                      (         OPSX.ASM):00118         ; ---
                      (         OPSX.ASM):00119         
                      (         OPSX.ASM):00120         ; Set item "arg2" in WORD-table "arg1" equal to "arg3"
                      (         OPSX.ASM):00121         
2EB1                  (         OPSX.ASM):00122         ZPUT:
2EB1 0805             (         OPSX.ASM):00123                 ASL     ARG2+1                            ; WORD-ALIGN
2EB3 0904             (         OPSX.ASM):00124                 ROL     ARG2                              ; ARG2
2EB5 DC04             (         OPSX.ASM):00125                 LDD     ARG2
2EB7 D302             (         OPSX.ASM):00126                 ADDD    ARG1                              ; ADD Z-ADDR OF TABLE
2EB9 C33E0A           (         OPSX.ASM):00127                 ADDD    #ZCODE                            ; FORM ABSOLUTE ADDRESS
2EBC 1F01             (         OPSX.ASM):00128                 TFR     D,X                               ; FOR USE AS AN INDEX
2EBE DC06             (         OPSX.ASM):00129                 LDD     ARG3
2EC0 ED84             (         OPSX.ASM):00130                 STD     ,X
2EC2 39               (         OPSX.ASM):00131                 RTS
                      (         OPSX.ASM):00132         
                      (         OPSX.ASM):00133         ; ----
                      (         OPSX.ASM):00134         ; PUTB
                      (         OPSX.ASM):00135         ; ----
                      (         OPSX.ASM):00136         
                      (         OPSX.ASM):00137         ; Set item "arg2" in BYTE-table "arg1" equal to "arg3"
                      (         OPSX.ASM):00138         
2EC3                  (         OPSX.ASM):00139         ZPUTB:
2EC3 DC04             (         OPSX.ASM):00140                 LDD     ARG2
2EC5 D302             (         OPSX.ASM):00141                 ADDD    ARG1
2EC7 C33E0A           (         OPSX.ASM):00142                 ADDD    #ZCODE
2ECA 1F01             (         OPSX.ASM):00143                 TFR     D,X
2ECC 9607             (         OPSX.ASM):00144                 LDA     ARG3+1
2ECE A784             (         OPSX.ASM):00145                 STA     ,X
2ED0 39               (         OPSX.ASM):00146                 RTS
                      (         OPSX.ASM):00147         
                      (         OPSX.ASM):00148         ; ----
                      (         OPSX.ASM):00149         ; PUTP
                      (         OPSX.ASM):00150         ; ----
                      (         OPSX.ASM):00151         
                      (         OPSX.ASM):00152         ; Set property "arg2" in object "arg1" equal to "arg3"
                      (         OPSX.ASM):00153         
2ED1                  (         OPSX.ASM):00154         ZPUTP:
2ED1 BD337E           (         OPSX.ASM):00155                 JSR     PROPB
2ED4                  (         OPSX.ASM):00156         PUTP1:
2ED4 BD3393           (         OPSX.ASM):00157                 JSR     PROPN
2ED7 9105             (         OPSX.ASM):00158                 CMPA    ARG2+1
2ED9 270C             (         OPSX.ASM):00159                 BEQ     PUTP2
2EDB 2405             (         OPSX.ASM):00160                 BHS     PTP
                      (         OPSX.ASM):00161         
                      (         OPSX.ASM):00162         ; *** ERROR #10: BAD PROPERTY NUMBER ***
                      (         OPSX.ASM):00163         
2EDD 860A             (         OPSX.ASM):00164                 LDA     #10
2EDF BD350C           (         OPSX.ASM):00165                 JSR     ZERROR                            ; ERROR #7 (BAD PROPERTY #)
                      (         OPSX.ASM):00166         
2EE2                  (         OPSX.ASM):00167         PTP:
2EE2 BD33A8           (         OPSX.ASM):00168                 JSR     PROPNX                            ; NEXT ITEM
2EE5 20ED             (         OPSX.ASM):00169                 BRA     PUTP1
                      (         OPSX.ASM):00170         
2EE7                  (         OPSX.ASM):00171         PUTP2:
2EE7 BD339B           (         OPSX.ASM):00172                 JSR     PROPL
2EEA 5C               (         OPSX.ASM):00173                 INCB
2EEB 4D               (         OPSX.ASM):00174                 TSTA
2EEC 2711             (         OPSX.ASM):00175                 BEQ     PUTP2A
2EEE 8101             (         OPSX.ASM):00176                 CMPA    #1
2EF0 2705             (         OPSX.ASM):00177                 BEQ     PTP1
                      (         OPSX.ASM):00178         
                      (         OPSX.ASM):00179         ; *** ERROR #11: PROPERTY LENGTH ***
                      (         OPSX.ASM):00180         
2EF2 860B             (         OPSX.ASM):00181                 LDA     #11
2EF4 BD350C           (         OPSX.ASM):00182                 JSR     ZERROR                            ; ERROR #8 (PROP TOO LONG)
                      (         OPSX.ASM):00183         
2EF7                  (         OPSX.ASM):00184         PTP1:
2EF7 9E3F             (         OPSX.ASM):00185                 LDX     TEMP
2EF9 3A               (         OPSX.ASM):00186                 ABX
2EFA DC06             (         OPSX.ASM):00187                 LDD     ARG3
2EFC ED84             (         OPSX.ASM):00188                 STD     ,X
2EFE 39               (         OPSX.ASM):00189                 RTS
                      (         OPSX.ASM):00190         
2EFF                  (         OPSX.ASM):00191         PUTP2A:
2EFF 9607             (         OPSX.ASM):00192                 LDA     ARG3+1
2F01 9E3F             (         OPSX.ASM):00193                 LDX     TEMP
2F03 3A               (         OPSX.ASM):00194                 ABX
2F04 A784             (         OPSX.ASM):00195                 STA     ,X
2F06 39               (         OPSX.ASM):00196                 RTS
                      (         OPSX.ASM):00197         
                      (         OPSX.ASM):00198         ; ------
                      (         OPSX.ASM):00199         ; PRINTC
                      (         OPSX.ASM):00200         ; ------
                      (         OPSX.ASM):00201         
                      (         OPSX.ASM):00202         ; Print the character with ASCII value "arg1"
                      (         OPSX.ASM):00203         
2F07                  (         OPSX.ASM):00204         ZPRC:
2F07 9603             (         OPSX.ASM):00205                 LDA     ARG1+1
2F09 7E3559           (         OPSX.ASM):00206                 JMP     COUT
                      (         OPSX.ASM):00207         
                      (         OPSX.ASM):00208         ; ------
                      (         OPSX.ASM):00209         ; PRINTN
                      (         OPSX.ASM):00210         ; ------
                      (         OPSX.ASM):00211         
                      (         OPSX.ASM):00212         ; Print "arg1" as a signed integer
                      (         OPSX.ASM):00213         
2F0C                  (         OPSX.ASM):00214         ZPRN:
2F0C DC02             (         OPSX.ASM):00215                 LDD     ARG1
2F0E DD3F             (         OPSX.ASM):00216                 STD     TEMP
                      (         OPSX.ASM):00217         
                      (         OPSX.ASM):00218         ; PRINT THE SIGNED VALUE IN [TEMP]
                      (         OPSX.ASM):00219         
2F10                  (         OPSX.ASM):00220         NUMBER:
2F10 DC3F             (         OPSX.ASM):00221                 LDD     TEMP
2F12 2A08             (         OPSX.ASM):00222                 BPL     DIGCNT                            ; IF NUMBER IS NEGATIVE,
2F14 862D             (         OPSX.ASM):00223                 LDA     #$2D                              ; START WITH A MINUS SIGN
2F16 BD3559           (         OPSX.ASM):00224                 JSR     COUT
2F19 BD2DE0           (         OPSX.ASM):00225                 JSR     ABTEMP                            ; GET ABS(TEMP)
                      (         OPSX.ASM):00226         
                      (         OPSX.ASM):00227         ; COUNT # OF DECIMAL DIGITS
                      (         OPSX.ASM):00228         
2F1C                  (         OPSX.ASM):00229         DIGCNT:
2F1C 0F43             (         OPSX.ASM):00230                 CLR     MASK                              ; RESET INDEX
2F1E                  (         OPSX.ASM):00231         DGC:
2F1E DC3F             (         OPSX.ASM):00232                 LDD     TEMP                              ; CHECK QUOTIENT
2F20 2710             (         OPSX.ASM):00233                 BEQ     PRNTN3                            ; SKIP IF ZERO
2F22 CC000A           (         OPSX.ASM):00234                 LDD     #10
2F25 DD3D             (         OPSX.ASM):00235                 STD     VAL                               ; ELSE DIVIDE BY 10
2F27 BD2DE7           (         OPSX.ASM):00236                 JSR     UDIV                              ; UNSIGNED DIVIDE
2F2A 963E             (         OPSX.ASM):00237                 LDA     VAL+1                             ; GET LSB OF REMAINDER
2F2C 3402             (         OPSX.ASM):00238                 PSHS    A                                 ; SAVE ON STACK
2F2E 0C43             (         OPSX.ASM):00239                 INC     MASK                              ; INCREMENT CHAR COUNT
2F30 20EC             (         OPSX.ASM):00240                 BRA     DGC                               ; LOOP TILL ARG1=0
                      (         OPSX.ASM):00241         
2F32                  (         OPSX.ASM):00242         PRNTN3:
2F32 9643             (         OPSX.ASM):00243                 LDA     MASK
2F34 270C             (         OPSX.ASM):00244                 BEQ     PZERO                             ; PRINT AT LEAST A "0"
2F36                  (         OPSX.ASM):00245         PRNTN4:
2F36 3502             (         OPSX.ASM):00246                 PULS    A                                 ; GET A CHAR
2F38 8B30             (         OPSX.ASM):00247                 ADDA    #$30                              ; CONVERT TO ASCII NUMBER
2F3A BD3559           (         OPSX.ASM):00248                 JSR     COUT
2F3D 0A43             (         OPSX.ASM):00249                 DEC     MASK                              ; OUT OF CHARS?
2F3F 26F5             (         OPSX.ASM):00250                 BNE     PRNTN4                            ; KEEP PRINTING TILL
2F41 39               (         OPSX.ASM):00251                 RTS                                       ; DONE
                      (         OPSX.ASM):00252         
                      (         OPSX.ASM):00253         ; PRINT A ZERO
                      (         OPSX.ASM):00254         
2F42                  (         OPSX.ASM):00255         PZERO:
2F42 8630             (         OPSX.ASM):00256                 LDA     #$30                              ; ASCII "0"
2F44 7E3559           (         OPSX.ASM):00257                 JMP     COUT
                      (         OPSX.ASM):00258         
                      (         OPSX.ASM):00259         ; ------
                      (         OPSX.ASM):00260         ; RANDOM
                      (         OPSX.ASM):00261         ; ------
                      (         OPSX.ASM):00262         
                      (         OPSX.ASM):00263         ; Return a random value between zero and "arg1" [VALUE]
                      (         OPSX.ASM):00264         
2F47                  (         OPSX.ASM):00265         ZRAND:
2F47 DC02             (         OPSX.ASM):00266                 LDD     ARG1                              ; USE [ARG1]
2F49 DD3D             (         OPSX.ASM):00267                 STD     VAL                               ; AS THE DIVISOR
                      (         OPSX.ASM):00268         
2F4B DC58             (         OPSX.ASM):00269                 LDD     RAND1                             ; GET A RANDOM #
2F4D C3AA55           (         OPSX.ASM):00270                 ADDD    #$AA55                            ; DO WEIRD THINGS
2F50 9759             (         OPSX.ASM):00271                 STA     RAND2                             ; SAVE AS
2F52 D758             (         OPSX.ASM):00272                 STB     RAND1                             ; NEW SEED
2F54 847F             (         OPSX.ASM):00273                 ANDA    #%01111111                        ; MAKE POSITIVE
2F56 DD3F             (         OPSX.ASM):00274                 STD     TEMP                              ; MAKE IT THE DIVIDEND
                      (         OPSX.ASM):00275         
2F58 BD2DB9           (         OPSX.ASM):00276                 JSR     DIVIDE                            ; UNSIGNED DIVIDE!
2F5B DC3D             (         OPSX.ASM):00277                 LDD     VAL                               ; GET REMAINDER
2F5D C30001           (         OPSX.ASM):00278                 ADDD    #1                                ; AT LEAST 1
2F60 7E2D7C           (         OPSX.ASM):00279                 JMP     MATH
                      (         OPSX.ASM):00280         
                      (         OPSX.ASM):00281         ; ----
                      (         OPSX.ASM):00282         ; PUSH
                      (         OPSX.ASM):00283         ; ----
                      (         OPSX.ASM):00284         
                      (         OPSX.ASM):00285         ; Push "arg1" onto the Z-stack
                      (         OPSX.ASM):00286         
2F63                  (         OPSX.ASM):00287         ZPUSH:
2F63 DC02             (         OPSX.ASM):00288                 LDD     ARG1
2F65 7E292D           (         OPSX.ASM):00289                 JMP     PSHDZ
                      (         OPSX.ASM):00290         
                      (         OPSX.ASM):00291         ; ---
                      (         OPSX.ASM):00292         ; POP
                      (         OPSX.ASM):00293         ; ---
                      (         OPSX.ASM):00294         
                      (         OPSX.ASM):00295         ; Pop a word off Z-stack and store in variable "arg1"
                      (         OPSX.ASM):00296         
2F68                  (         OPSX.ASM):00297         ZPOP:
2F68 BD2936           (         OPSX.ASM):00298                 JSR     POPSTK
2F6B 9603             (         OPSX.ASM):00299                 LDA     ARG1+1                            ; GET VARIABLE ID
2F6D 7E28F1           (         OPSX.ASM):00300                 JMP     VARPUT
                      (         OPSX.ASM):00301         
                      (         OPSX.ASM):00302         ; -----
                      (         OPSX.ASM):00303         ; SPLIT
                      (         OPSX.ASM):00304         ; -----
                      (         OPSX.ASM):00305         
     2A6C             (         OPSX.ASM):00306         ZSPLIT          EQU ZNOOP
                      (         OPSX.ASM):00307         
                      (         OPSX.ASM):00308         ; ------
                      (         OPSX.ASM):00309         ; SCREEN
                      (         OPSX.ASM):00310         ; ------
                      (         OPSX.ASM):00311         
     2A6C             (         OPSX.ASM):00312         ZSCRN           EQU ZNOOP
                      (     cubixzip.asm):00057                 INCLUDE READ.ASM
                      (         READ.ASM):00001         ;       PAGE
                      (         READ.ASM):00002         ;       SBTTL "--- READ HANDLER ---"
                      (         READ.ASM):00003         
2F70                  (         READ.ASM):00004         ZREAD:
2F70 BD35D5           (         READ.ASM):00005                 JSR     ZUSL                              ; UPDATE STATUS LINE FIRST
                      (         READ.ASM):00006         
2F73 DC02             (         READ.ASM):00007                 LDD     ARG1                              ; CALC ABSOLUTE ADDRESS
2F75 C33E0A           (         READ.ASM):00008                 ADDD    #ZCODE                            ; OF READ BUFFERS
2F78 DD02             (         READ.ASM):00009                 STD     ARG1
2F7A DC04             (         READ.ASM):00010                 LDD     ARG2
2F7C C33E0A           (         READ.ASM):00011                 ADDD    #ZCODE
2F7F DD04             (         READ.ASM):00012                 STD     ARG2
                      (         READ.ASM):00013         
2F81 BD3433           (         READ.ASM):00014                 JSR     INPUT                             ; READ LINE; RETURN LENGTH IN A
2F84 9743             (         READ.ASM):00015                 STA     MASK                              ; # CHARS IN LINE
2F86 0F44             (         READ.ASM):00016                 CLR     MASK+1                            ; # CHARS IN CURRENT WORD
                      (         READ.ASM):00017         
2F88 9E04             (         READ.ASM):00018                 LDX     ARG2                              ; SET # OF WORDS READ
2F8A 6F01             (         READ.ASM):00019                 CLR     1,X                               ; TO ZERO
                      (         READ.ASM):00020         
2F8C 8601             (         READ.ASM):00021                 LDA     #1                                ; = 1
2F8E 973B             (         READ.ASM):00022                 STA     STABP                             ; INIT SOURCE TABLE POINTER
2F90 4C               (         READ.ASM):00023                 INCA                                      ; = 2
2F91 973A             (         READ.ASM):00024                 STA     RTABP                             ; AND RESULT TABLE POINTER
                      (         READ.ASM):00025         
2F93                  (         READ.ASM):00026         READL:
2F93 9E04             (         READ.ASM):00027                 LDX     ARG2
2F95 A680             (         READ.ASM):00028                 LDA     ,X+                               ; FETCH MAXIMUM # OF WORDS
2F97 A184             (         READ.ASM):00029                 CMPA    ,X                                ; COMPARE TO # WORDS READ
2F99 2405             (         READ.ASM):00030                 BHS     RL1                               ; STILL ROOM
                      (         READ.ASM):00031         
                      (         READ.ASM):00032         ; *** ERROR #13 -- PARSER OVERFLOW ***
                      (         READ.ASM):00033         
2F9B 860D             (         READ.ASM):00034                 LDA     #13
2F9D BD350C           (         READ.ASM):00035                 JSR     ZERROR
                      (         READ.ASM):00036         
2FA0                  (         READ.ASM):00037         RL1:
2FA0 DC43             (         READ.ASM):00038                 LDD     MASK                              ; OUT OF CHARS & WORDS?
2FA2 2601             (         READ.ASM):00039                 BNE     RL2                               ; NOT YET
2FA4                  (         READ.ASM):00040         RDEX:
2FA4 39               (         READ.ASM):00041                 RTS                                       ; ELSE SCRAM
                      (         READ.ASM):00042         
2FA5                  (         READ.ASM):00043         RL2:
2FA5 9644             (         READ.ASM):00044                 LDA     MASK+1                            ; GET CHAR COUNT
2FA7 8106             (         READ.ASM):00045                 CMPA    #6                                ; 6 CHARS DONE?
2FA9 2503             (         READ.ASM):00046                 BLO     RL3                               ; NOT YET
2FAB BD302B           (         READ.ASM):00047                 JSR     FLUSHW                            ; ELSE FLUSH WORD
                      (         READ.ASM):00048         
2FAE                  (         READ.ASM):00049         RL3:
2FAE 9644             (         READ.ASM):00050                 LDA     MASK+1                            ; FIRST CHAR IN WORD?
2FB0 2624             (         READ.ASM):00051                 BNE     READL2                            ; NOPE
                      (         READ.ASM):00052         
                      (         READ.ASM):00053         ; CLEAR OUT WORD BUFFER [ZSTBUI]
                      (         READ.ASM):00054         
2FB2 5F               (         READ.ASM):00055                 CLRB                                      ; [A] IS ALREADY ZERO
2FB3 DD2E             (         READ.ASM):00056                 STD     ZSTBUI
2FB5 DD30             (         READ.ASM):00057                 STD     ZSTBUI+2
2FB7 DD32             (         READ.ASM):00058                 STD     ZSTBUI+4
                      (         READ.ASM):00059         
2FB9 D63A             (         READ.ASM):00060                 LDB     RTABP
2FBB 9E04             (         READ.ASM):00061                 LDX     ARG2
2FBD 3A               (         READ.ASM):00062                 ABX
2FBE D63B             (         READ.ASM):00063                 LDB     STABP
2FC0 E703             (         READ.ASM):00064                 STB     3,X                               ; STORE POSITION
                      (         READ.ASM):00065         
2FC2 9E02             (         READ.ASM):00066                 LDX     ARG1
2FC4 A685             (         READ.ASM):00067                 LDA     B,X                               ; GRAB A CHAR FROM SOURCE BUFFER
2FC6 BD304D           (         READ.ASM):00068                 JSR     SIBRKP                            ; IS IT A SIB?
2FC9 2529             (         READ.ASM):00069                 BCS     RSIBRK                            ; YES IF CARRY IS SET
2FCB BD3046           (         READ.ASM):00070                 JSR     NBRKP                             ; IS IT A "NORMAL" BREAK CHAR?
2FCE 2406             (         READ.ASM):00071                 BCC     READL2                            ; NO, KEEP SCANNING
2FD0 0C3B             (         READ.ASM):00072                 INC     STABP                             ; ELSE FLUSH STRANDED BREAK
2FD2 0A43             (         READ.ASM):00073                 DEC     MASK                              ; UPDATE # OF CHARS IN LINE
2FD4 20BD             (         READ.ASM):00074                 BRA     READL                             ; AND LOOP BACK
                      (         READ.ASM):00075         
2FD6                  (         READ.ASM):00076         READL2:
2FD6 9643             (         READ.ASM):00077                 LDA     MASK                              ; OUT OF CHARS?
2FD8 2722             (         READ.ASM):00078                 BEQ     READL3                            ; SURE ENOUGH
2FDA D63B             (         READ.ASM):00079                 LDB     STABP
2FDC 9E02             (         READ.ASM):00080                 LDX     ARG1
2FDE A685             (         READ.ASM):00081                 LDA     B,X                               ; ELSE GRAB NEXT CHAR
2FE0 BD3042           (         READ.ASM):00082                 JSR     RBRKP                             ; IS IT A BREAK?
2FE3 2517             (         READ.ASM):00083                 BCS     READL3                            ; YES IF CARRY SET
2FE5 D644             (         READ.ASM):00084                 LDB     MASK+1                            ; ELSE POINT TO
2FE7 8E002E           (         READ.ASM):00085                 LDX     #ZSTBUI                           ; WORD BUFFER
2FEA A785             (         READ.ASM):00086                 STA     B,X                               ; STORE CHAR IN BUFFER
2FEC 0A43             (         READ.ASM):00087                 DEC     MASK                              ; ONE LESS CHAR IN LINE
2FEE 0C44             (         READ.ASM):00088                 INC     MASK+1                            ; ONE MORE IN RESULT
2FF0 0C3B             (         READ.ASM):00089                 INC     STABP                             ; POINT TO NEXT CHAR
2FF2 209F             (         READ.ASM):00090                 BRA     READL                             ; AND LOOP BACK
                      (         READ.ASM):00091         
2FF4                  (         READ.ASM):00092         RSIBRK:
2FF4 972E             (         READ.ASM):00093                 STA     ZSTBUI                            ; STORE THE SIB
2FF6 0A43             (         READ.ASM):00094                 DEC     MASK                              ; UPDATE LINE-CHAR COUNT
2FF8 0C44             (         READ.ASM):00095                 INC     MASK+1                            ; WORD-CHAR COUNT
2FFA 0C3B             (         READ.ASM):00096                 INC     STABP                             ; AND # CHARS IN WORD
                      (         READ.ASM):00097         
2FFC                  (         READ.ASM):00098         READL3:
2FFC 9644             (         READ.ASM):00099                 LDA     MASK+1                            ; ANY CHARS IN WORD?
2FFE 2793             (         READ.ASM):00100                 BEQ     READL                             ; APPARENTLY NOT
                      (         READ.ASM):00101         
3000 D63A             (         READ.ASM):00102                 LDB     RTABP                             ; POINT TO
3002 9E04             (         READ.ASM):00103                 LDX     ARG2                              ; IN THIS ENTRY
3004 3A               (         READ.ASM):00104                 ABX
3005 9644             (         READ.ASM):00105                 LDA     MASK+1                            ; FETCH ACTUAL WORD LENGTH
3007 A702             (         READ.ASM):00106                 STA     2,X                               ; AND STORE IN 3RD BYTE
                      (         READ.ASM):00107         
3009 9643             (         READ.ASM):00108                 LDA     MASK
300B 3402             (         READ.ASM):00109                 PSHS    A                                 ; SAVE THIS
300D BD3289           (         READ.ASM):00110                 JSR     CONZST                            ; CONVERT TO Z-STRING
3010 BD305D           (         READ.ASM):00111                 JSR     FINDW                             ; LOOK UP IN VOCABULARY
3013 3502             (         READ.ASM):00112                 PULS    A
3015 9743             (         READ.ASM):00113                 STA     MASK                              ; RESTORE
                      (         READ.ASM):00114         
3017 9E04             (         READ.ASM):00115                 LDX     ARG2
3019 6C01             (         READ.ASM):00116                 INC     1,X                               ; UPDATE # WORDS READ
301B D63A             (         READ.ASM):00117                 LDB     RTABP                             ; POINT [X] TO 1ST BYTE
301D 3A               (         READ.ASM):00118                 ABX                                       ; IN CURRENT ENTRY
301E CB04             (         READ.ASM):00119                 ADDB    #4
3020 D73A             (         READ.ASM):00120                 STB     RTABP                             ; POINT TO NEXT ENTRY
3022 DC3D             (         READ.ASM):00121                 LDD     VAL                               ; STORE [VAL] IN ENTRY
3024 ED84             (         READ.ASM):00122                 STD     ,X
3026 0F44             (         READ.ASM):00123                 CLR     MASK+1                            ; RESET WORD-CHAR COUNT
3028 7E2F93           (         READ.ASM):00124                 JMP     READL                             ; AND CONTINUE
                      (         READ.ASM):00125         
                      (         READ.ASM):00126         ; ----------
                      (         READ.ASM):00127         ; FLUSH WORD
                      (         READ.ASM):00128         ; ----------
                      (         READ.ASM):00129         
302B                  (         READ.ASM):00130         FLUSHW:
302B 9643             (         READ.ASM):00131                 LDA     MASK
302D 2712             (         READ.ASM):00132                 BEQ     FLEX
302F D63B             (         READ.ASM):00133                 LDB     STABP
3031 9E02             (         READ.ASM):00134                 LDX     ARG1
3033 A685             (         READ.ASM):00135                 LDA     B,X
3035 8D0B             (         READ.ASM):00136                 BSR     RBRKP                             ; WORD BREAK?
3037 2508             (         READ.ASM):00137                 BCS     FLEX                              ; EXIT IF SO
3039 0A43             (         READ.ASM):00138                 DEC     MASK
303B 0C44             (         READ.ASM):00139                 INC     MASK+1
303D 0C3B             (         READ.ASM):00140                 INC     STABP
303F 20EA             (         READ.ASM):00141                 BRA     FLUSHW                            ; KEEP LOOPING
3041                  (         READ.ASM):00142         FLEX:
3041 39               (         READ.ASM):00143                 RTS
                      (         READ.ASM):00144         
                      (         READ.ASM):00145         ; ---------------
                      (         READ.ASM):00146         ; BREAK CHAR SCAN
                      (         READ.ASM):00147         ; ---------------
                      (         READ.ASM):00148         
3042                  (         READ.ASM):00149         RBRKP:
3042 8D09             (         READ.ASM):00150                 BSR     SIBRKP                            ; FIRST CHECK FOR SIBS
3044 2515             (         READ.ASM):00151                 BCS     FBRK                              ; EXIT IF MATCHED
                      (         READ.ASM):00152         
                      (         READ.ASM):00153         ; FALL THROUGH TO ...
                      (         READ.ASM):00154         
                      (         READ.ASM):00155         ; ----------------------
                      (         READ.ASM):00156         ; NORMAL BREAK CHAR SCAN
                      (         READ.ASM):00157         ; ----------------------
                      (         READ.ASM):00158         
3046                  (         READ.ASM):00159         NBRKP:
3046 8E308C           (         READ.ASM):00160                 LDX     #BRKTBL                           ; BASE OF BREAK CHAR TABLE
3049 C605             (         READ.ASM):00161                 LDB     #NBRKS-1                          ; NUMBER OF NORMAL BREAK CHARS
304B 2005             (         READ.ASM):00162                 BRA     NBR1
                      (         READ.ASM):00163         
                      (         READ.ASM):00164         ; ------------------------------
                      (         READ.ASM):00165         ; SELF-INSERTING BREAK CHAR SCAN
                      (         READ.ASM):00166         ; ------------------------------
                      (         READ.ASM):00167         
304D                  (         READ.ASM):00168         SIBRKP:
304D 9E23             (         READ.ASM):00169                 LDX     VOCAB                             ; BASE ADDRESS OF VOCAB TABLE
304F E680             (         READ.ASM):00170                 LDB     ,X+                               ; GET # SIB CHARS
3051 5A               (         READ.ASM):00171                 DECB                                      ; ZERO-ALIGN COUNT
                      (         READ.ASM):00172         
3052                  (         READ.ASM):00173         NBR1:
3052 A185             (         READ.ASM):00174                 CMPA    B,X
3054 2705             (         READ.ASM):00175                 BEQ     FBRK                              ; MATCHED!
3056 5A               (         READ.ASM):00176                 DECB
3057 2AF9             (         READ.ASM):00177                 BPL     NBR1                              ; KEEP LOOPING
3059 5F               (         READ.ASM):00178                 CLRB                                      ; NO MATCH, CLEAR CARRY
305A 39               (         READ.ASM):00179                 RTS
305B                  (         READ.ASM):00180         FBRK:
305B 53               (         READ.ASM):00181                 COMB                                      ; SET CARRY TO FLAG MATCH
305C 39               (         READ.ASM):00182                 RTS
                      (         READ.ASM):00183         
                      (         READ.ASM):00184         ; -----------------
                      (         READ.ASM):00185         ; VOCABULARY SEARCH
                      (         READ.ASM):00186         ; -----------------
                      (         READ.ASM):00187         
305D                  (         READ.ASM):00188         FINDW:
305D 9E23             (         READ.ASM):00189                 LDX     VOCAB                             ; BASE ADDR OF VOCAB TABLE
305F E680             (         READ.ASM):00190                 LDB     ,X+                               ; GET # SIB BYTES
3061 3A               (         READ.ASM):00191                 ABX                                       ; AND SKIP OVER THEM
                      (         READ.ASM):00192         
3062 A680             (         READ.ASM):00193                 LDA     ,X+                               ; # BYTES PER TABLE ENTRY
3064 9744             (         READ.ASM):00194                 STA     MASK+1                            ; SAVE IT HERE
                      (         READ.ASM):00195         
3066 EC81             (         READ.ASM):00196                 LDD     ,X++                              ; # OF ENTRIES IN TABLE
3068 DD3D             (         READ.ASM):00197                 STD     VAL                               ; SAVE THAT TOO
                      (         READ.ASM):00198         
306A                  (         READ.ASM):00199         FWL1:
306A EC84             (         READ.ASM):00200                 LDD     ,X                                ; CHECK FIRST Z-WORD
306C 109334           (         READ.ASM):00201                 CMPD    ZSTBUO
306F 2607             (         READ.ASM):00202                 BNE     WNEXT                             ; NO GOOD
3071 EC02             (         READ.ASM):00203                 LDD     2,X                               ; ELSE CHECK 2ND HALF
3073 109336           (         READ.ASM):00204                 CMPD    ZSTBUO+2
3076 270D             (         READ.ASM):00205                 BEQ     FWSUCC                            ; MATCHED!
                      (         READ.ASM):00206         
3078                  (         READ.ASM):00207         WNEXT:
3078 D644             (         READ.ASM):00208                 LDB     MASK+1                            ; MOVE [X] UP TO
307A 3A               (         READ.ASM):00209                 ABX                                       ; NEXT TABLE ENTRY
307B DC3D             (         READ.ASM):00210                 LDD     VAL
307D 830001           (         READ.ASM):00211                 SUBD    #1
3080 DD3D             (         READ.ASM):00212                 STD     VAL                               ; OUT OF ENTRIES YET?
3082 26E6             (         READ.ASM):00213                 BNE     FWL1                              ; NO, KEEP LOOKING
3084 39               (         READ.ASM):00214                 RTS                                       ; ELSE RETURN WITH [VAL]=0
                      (         READ.ASM):00215         
3085                  (         READ.ASM):00216         FWSUCC:
3085 3089C1F6         (         READ.ASM):00217                 LEAX    -ZCODE,X                          ; CONVERT TO Z-ADDRESS
3089 9F3D             (         READ.ASM):00218                 STX     VAL                               ; LEAVE RESULT IN [VAL]
308B 39               (         READ.ASM):00219                 RTS
                      (         READ.ASM):00220         
                      (         READ.ASM):00221         ; ------------------
                      (         READ.ASM):00222         ; NORMAL BREAK CHARS
                      (         READ.ASM):00223         ; ------------------
                      (         READ.ASM):00224         
308C                  (         READ.ASM):00225         BRKTBL:
308C 213F2C2E         (         READ.ASM):00226                 FCC     "!?,."
3090 0D               (         READ.ASM):00227                 FCB     EOL
3091 20               (         READ.ASM):00228                 FCB     SPACE
                      (         READ.ASM):00229         
     0006             (         READ.ASM):00230         NBRKS           EQU 6                             ; # NORMAL BREAK CHARS
                      (     cubixzip.asm):00058         
                      (     cubixzip.asm):00059         ;TITLE "ZIP/6809-B INFOCOM, INC. --- OPCODE SUPPORT"
                      (     cubixzip.asm):00060                 INCLUDE PAGING.ASM
                      (       PAGING.ASM):00001         ;       PAGE
                      (       PAGING.ASM):00002         ;       SBTTL   "--- TIMESTAMP PAGING ROUTINES (BM 11/24/84) ---"
                      (       PAGING.ASM):00003         
                      (       PAGING.ASM):00004         ; --------------------
                      (       PAGING.ASM):00005         ; FETCH A VIRTUAL WORD
                      (       PAGING.ASM):00006         ; --------------------
                      (       PAGING.ASM):00007         
3092                  (       PAGING.ASM):00008         GETWRD:
3092 8D38             (       PAGING.ASM):00009                 BSR     GETBYT
3094 973F             (       PAGING.ASM):00010                 STA     TEMP
3096 8D34             (       PAGING.ASM):00011                 BSR     GETBYT
3098 9740             (       PAGING.ASM):00012                 STA     TEMP+1
309A 39               (       PAGING.ASM):00013                 RTS
                      (       PAGING.ASM):00014         
                      (       PAGING.ASM):00015         ; -----------------
                      (       PAGING.ASM):00016         ; FETCH NEXT Z-BYTE
                      (       PAGING.ASM):00017         ; -----------------
                      (       PAGING.ASM):00018         
309B                  (       PAGING.ASM):00019         NEXTPC:
309B 0D18             (       PAGING.ASM):00020                 TST     ZPCFLG                            ; IS [ZPCPNT] VALID?
309D 2619             (       PAGING.ASM):00021                 BNE     NPC2                              ; YES, GET THE BYTE
                      (       PAGING.ASM):00022         
                      (       PAGING.ASM):00023         ; Z-PAGE HAS CHANGED!
                      (       PAGING.ASM):00024         
309F DC13             (       PAGING.ASM):00025                 LDD     ZPCH                              ; GET TOP 9 BITS OF [ZPC]
30A1 4D               (       PAGING.ASM):00026                 TSTA                                      ; IS TOP BIT CLEAR?
30A2 2608             (       PAGING.ASM):00027                 BNE     NPC0                              ; NO, PAGE MUST BE SWAPPED
                      (       PAGING.ASM):00028         
30A4 D10B             (       PAGING.ASM):00029                 CMPB    ZPURE                             ; IS THIS PAGE PRELOADED?
30A6 2404             (       PAGING.ASM):00030                 BHS     NPC0                              ; NO, SWAP IT IN
                      (       PAGING.ASM):00031         
30A8 CB3E             (       PAGING.ASM):00032                 ADDB    #ZCODEHIGH                        ; ELSE MAKE IT ABSOLUTE
30AA 2004             (       PAGING.ASM):00033                 BRA     NPC1                              ; AND CONTINUE
                      (       PAGING.ASM):00034         
30AC                  (       PAGING.ASM):00035         NPC0:
30AC 0F1F             (       PAGING.ASM):00036                 CLR     MPCFLG                            ; INVALIDATE [MPC] FOR SAFETY
30AE 8D4D             (       PAGING.ASM):00037                 BSR     PAGE                              ; RETURN BUFFER IN [B]
                      (       PAGING.ASM):00038         
30B0                  (       PAGING.ASM):00039         NPC1:
30B0 D716             (       PAGING.ASM):00040                 STB     ZPCPNT                            ; SET MSB OF BUFFER ADDRESS
30B2 0F17             (       PAGING.ASM):00041                 CLR     ZPCPNT+1                          ; CLEAR LSB
30B4 86FF             (       PAGING.ASM):00042                 LDA     #TRUE
30B6 9718             (       PAGING.ASM):00043                 STA     ZPCFLG                            ; VALIDATE [ZPC]
                      (       PAGING.ASM):00044         
30B8                  (       PAGING.ASM):00045         NPC2:
30B8 D615             (       PAGING.ASM):00046                 LDB     ZPCL                              ; GET BYTE INDEX
30BA 9E16             (       PAGING.ASM):00047                 LDX     ZPCPNT                            ; AND PAGE ADDRESS
30BC 3A               (       PAGING.ASM):00048                 ABX                                       ; USE [ZPCL] AS OFFSET
30BD A684             (       PAGING.ASM):00049                 LDA     ,X                                ; AND FETCH THE BYTE
                      (       PAGING.ASM):00050         
30BF 0C15             (       PAGING.ASM):00051                 INC     ZPCL                              ; POINT TO NEXT BYTE
30C1 2608             (       PAGING.ASM):00052                 BNE     NPC3                              ; CONTINUE IF NO OVERFLOW
                      (       PAGING.ASM):00053         
30C3 0F18             (       PAGING.ASM):00054                 CLR     ZPCFLG                            ; ELSE INVALIDATE [ZPC]
30C5 0C14             (       PAGING.ASM):00055                 INC     ZPCM                              ; AND POINT
30C7 2602             (       PAGING.ASM):00056                 BNE     NPC3                              ; TO THE
30C9 0C13             (       PAGING.ASM):00057                 INC     ZPCH                              ; NEXT Z-PAGE
                      (       PAGING.ASM):00058         
30CB                  (       PAGING.ASM):00059         NPC3:
30CB 39               (       PAGING.ASM):00060                 RTS                                       ; RETURN BYTE IN [A]
                      (       PAGING.ASM):00061         
                      (       PAGING.ASM):00062         ; ---------------------
                      (       PAGING.ASM):00063         ; GET NEXT VIRTUAL BYTE
                      (       PAGING.ASM):00064         ; ---------------------
                      (       PAGING.ASM):00065         
30CC                  (       PAGING.ASM):00066         GETBYT:
30CC 0D1F             (       PAGING.ASM):00067                 TST     MPCFLG                            ; IS [MPCPNT] VALID?
30CE 2619             (       PAGING.ASM):00068                 BNE     GTBT2                             ; YES, GET THE BYTE
                      (       PAGING.ASM):00069         
                      (       PAGING.ASM):00070         ; Z-PAGE HAS CHANGED!
                      (       PAGING.ASM):00071         
30D0 DC1A             (       PAGING.ASM):00072                 LDD     MPCH                              ; GET TOP 9 BITS OF [MPC]
30D2 4D               (       PAGING.ASM):00073                 TSTA                                      ; IS TOP BIT CLEAR?
30D3 2608             (       PAGING.ASM):00074                 BNE     GTBT0                             ; NO, PAGE MUST BE SWAPPED
                      (       PAGING.ASM):00075         
     30D6             (       PAGING.ASM):00076         PATCH           EQU pth+1                         ; PATCH POINT FOR "VERIFY"
30D5                  (       PAGING.ASM):00077         pth:
30D5 D10B             (       PAGING.ASM):00078                 CMPB    ZPURE                             ; IS THIS PAGE PRELOADED?
30D7 2404             (       PAGING.ASM):00079                 BHS     GTBT0                             ; NO, SWAP IT IN
                      (       PAGING.ASM):00080         
30D9 CB3E             (       PAGING.ASM):00081                 ADDB    #ZCODEHIGH                        ; ELSE MAKE IT ABSOLUTE
30DB 2004             (       PAGING.ASM):00082                 BRA     GTBT1                             ; AND CONTINUE
                      (       PAGING.ASM):00083         
30DD                  (       PAGING.ASM):00084         GTBT0:
30DD 0F18             (       PAGING.ASM):00085                 CLR     ZPCFLG                            ; INVALIDATE [ZPC] FOR SAFETY
30DF 8D1C             (       PAGING.ASM):00086                 BSR     PAGE                              ; RETURN BUFFER PAGE IN [B]
                      (       PAGING.ASM):00087         
30E1                  (       PAGING.ASM):00088         GTBT1:
30E1 D71D             (       PAGING.ASM):00089                 STB     MPCPNT                            ; SET MSB OF BUFFER ADDRESS
30E3 0F1E             (       PAGING.ASM):00090                 CLR     MPCPNT+1                          ; CLEAR LSB
30E5 86FF             (       PAGING.ASM):00091                 LDA     #TRUE
30E7 971F             (       PAGING.ASM):00092                 STA     MPCFLG                            ; VALIDATE [MPC]
                      (       PAGING.ASM):00093         
30E9                  (       PAGING.ASM):00094         GTBT2:
30E9 D61C             (       PAGING.ASM):00095                 LDB     MPCL                              ; GET BYTE INDEX
30EB 9E1D             (       PAGING.ASM):00096                 LDX     MPCPNT                            ; AND PAGE ADDRESS
30ED 3A               (       PAGING.ASM):00097                 ABX                                       ; USE [MPCL] AS OFFSET
30EE A684             (       PAGING.ASM):00098                 LDA     ,X                                ; AND FETCH THE BYTE
                      (       PAGING.ASM):00099         
30F0 0C1C             (       PAGING.ASM):00100                 INC     MPCL                              ; POINT TO NEXT BYTE
30F2 2608             (       PAGING.ASM):00101                 BNE     GTBT3                             ; CONTINUE IF NO OVERFLOW
                      (       PAGING.ASM):00102         
30F4 0F1F             (       PAGING.ASM):00103                 CLR     MPCFLG                            ; ELSE INVALIDATE [MPC]
30F6 0C1B             (       PAGING.ASM):00104                 INC     MPCM                              ; AND POINT
30F8 2602             (       PAGING.ASM):00105                 BNE     GTBT3                             ; TO THE
30FA 0C1A             (       PAGING.ASM):00106                 INC     MPCH                              ; NEXT Z-PAGE
                      (       PAGING.ASM):00107         
30FC                  (       PAGING.ASM):00108         GTBT3:
30FC 39               (       PAGING.ASM):00109                 RTS                                       ; RETURN BYTE IN [A]
                      (       PAGING.ASM):00110         
                      (       PAGING.ASM):00111         ; -------------------------
                      (       PAGING.ASM):00112         ; LOCATE A SWAPPABLE Z-PAGE
                      (       PAGING.ASM):00113         ; -------------------------
                      (       PAGING.ASM):00114         
                      (       PAGING.ASM):00115         ; ENTRY: TARGET PAGE IN [D] (TOP 9 BITS)
                      (       PAGING.ASM):00116         ; EXIT: ABSOLUTE BUFFER PAGE IN [B]
                      (       PAGING.ASM):00117         
30FD                  (       PAGING.ASM):00118         PAGE:
30FD DD4C             (       PAGING.ASM):00119                 STD     DBLOCK                            ; SAVE TARGET PAGE HERE
30FF 0F0D             (       PAGING.ASM):00120                 CLR     ZPAGE                             ; CLEAR INDEX
3101 8E240A           (       PAGING.ASM):00121                 LDX     #PTABLE                           ; START AT BOTOM OF TABLE
3104                  (       PAGING.ASM):00122         PG0:
3104 10A381           (       PAGING.ASM):00123                 CMPD    ,X++                              ; FOUND IT?
3107 2720             (       PAGING.ASM):00124                 BEQ     PG1                               ; YES!
3109 0C0D             (       PAGING.ASM):00125                 INC     ZPAGE                             ; ELSE COUNT NEXT PAGE
310B 9C0F             (       PAGING.ASM):00126                 CMPX    TABTOP                            ; ANY BUFFERS LEFT?
310D 25F5             (       PAGING.ASM):00127                 BLO     PG0                               ; NO, KEEP SEARCHING
                      (       PAGING.ASM):00128         
                      (       PAGING.ASM):00129         ; SWAP IN THE TARGET PAGE
                      (       PAGING.ASM):00130         
310F 8D52             (       PAGING.ASM):00131                 BSR     EARLY                             ; FIND THE EARLIEST PAGE
3111 D612             (       PAGING.ASM):00132                 LDB     SWAP                              ; MOVE ITS INDEX
3113 D70D             (       PAGING.ASM):00133                 STB     ZPAGE                             ; INTO [ZPAGE]
                      (       PAGING.ASM):00134         
3115 DB0E             (       PAGING.ASM):00135                 ADDB    PAGE0                             ; CALC ABSOLUTE PAGE OF BUFFER
3117 D74A             (       PAGING.ASM):00136                 STB     DBUFF                             ; TELL DISK WHERE TO PUT DATA
3119 0F4B             (       PAGING.ASM):00137                 CLR     DBUFF+1                           ; CLEAR LSB
                      (       PAGING.ASM):00138         
311B 8E240A           (       PAGING.ASM):00139                 LDX     #PTABLE                           ; GET THE PAGING TABLE ADDRESS
311E D60D             (       PAGING.ASM):00140                 LDB     ZPAGE                             ; AND THE BUFFER OFFSET
3120 3A               (       PAGING.ASM):00141                 ABX                                       ; ADD THE OFFSET
3121 3A               (       PAGING.ASM):00142                 ABX                                       ; TWICE FOR WORD ALIGNMENT
3122 DC4C             (       PAGING.ASM):00143                 LDD     DBLOCK                            ; RETRIEVE PAGE ID
3124 ED84             (       PAGING.ASM):00144                 STD     ,X                                ; SPLICE IT INTO THE TABLE
                      (       PAGING.ASM):00145         
3126 BD36C5           (       PAGING.ASM):00146                 JSR     GETDSK                            ; MOVE BLOCK [DBLOCK] TO [DBUFF]
                      (       PAGING.ASM):00147         
                      (       PAGING.ASM):00148         ; UPDATE THE TIMESTAMP
                      (       PAGING.ASM):00149         
3129                  (       PAGING.ASM):00150         PG1:
3129 D60D             (       PAGING.ASM):00151                 LDB     ZPAGE                             ; GET BUFFER INDEX
312B 8E255A           (       PAGING.ASM):00152                 LDX     #LRUMAP                           ; CALC ADDRESS OF ENTRY
312E 3A               (       PAGING.ASM):00153                 ABX                                       ; IN TIMESTAMP MAP
312F A684             (       PAGING.ASM):00154                 LDA     ,X                                ; GET BUFFER'S LAST STAMP
3131 9111             (       PAGING.ASM):00155                 CMPA    STAMP                             ; SAME AS CURRENT STAMP?
3133 2729             (       PAGING.ASM):00156                 BEQ     PG5                               ; EXIT IF SO
                      (       PAGING.ASM):00157         
3135 0C11             (       PAGING.ASM):00158                 INC     STAMP                             ; UPDATE [STAMP]
3137 261B             (       PAGING.ASM):00159                 BNE     PG4                               ; IF STAMP OVERFLOWS ...
                      (       PAGING.ASM):00160         
                      (       PAGING.ASM):00161         ; HANDLE STAMP OVERFLOW
                      (       PAGING.ASM):00162         
3139 8D28             (       PAGING.ASM):00163                 BSR     EARLY                             ; GET EARLIEST STAMP INTO [LRU]
                      (       PAGING.ASM):00164         
313B 8E255A           (       PAGING.ASM):00165                 LDX     #LRUMAP                           ; GET BASE ADDRESS OF STAMPS
313E 5F               (       PAGING.ASM):00166                 CLRB                                      ; INIT STAMP COUNTER
313F                  (       PAGING.ASM):00167         PG2:
313F A684             (       PAGING.ASM):00168                 LDA     ,X                                ; GET A STAMP
3141 2704             (       PAGING.ASM):00169                 BEQ     PG3                               ; SKIP IF ALREADY ZERO
3143 900A             (       PAGING.ASM):00170                 SUBA    LRU                               ; ELSE SUBTRACT OFF EARLIEST STAMP
3145 A784             (       PAGING.ASM):00171                 STA     ,X                                ; AND REPLACE IT
3147                  (       PAGING.ASM):00172         PG3:
3147 3001             (       PAGING.ASM):00173                 LEAX    +1,X                              ; INCREMENT BASE ADDRESS
3149 5C               (       PAGING.ASM):00174                 INCB                                      ; AND COUNTER
314A D10C             (       PAGING.ASM):00175                 CMPB    PMAX                              ; OUT OF PAGES YET?
314C 25F1             (       PAGING.ASM):00176                 BLO     PG2                               ; LOOP TILL DONE
                      (       PAGING.ASM):00177         
314E 8600             (       PAGING.ASM):00178                 LDA     #0                                ; TURN BACK THE CLOCK
3150 900A             (       PAGING.ASM):00179                 SUBA    LRU                               ; ON [STAMP]
3152 9711             (       PAGING.ASM):00180                 STA     STAMP                             ; TO REFLECT TABLE FUDGING
                      (       PAGING.ASM):00181         
                      (       PAGING.ASM):00182         ; STAMP THE PAGE WITH CURRENT TIME
                      (       PAGING.ASM):00183         
3154                  (       PAGING.ASM):00184         PG4:
3154 8E255A           (       PAGING.ASM):00185                 LDX     #LRUMAP
3157 D60D             (       PAGING.ASM):00186                 LDB     ZPAGE
3159 3A               (       PAGING.ASM):00187                 ABX
315A 9611             (       PAGING.ASM):00188                 LDA     STAMP
315C A784             (       PAGING.ASM):00189                 STA     ,X
                      (       PAGING.ASM):00190         
315E                  (       PAGING.ASM):00191         PG5:
315E D60D             (       PAGING.ASM):00192                 LDB     ZPAGE                             ; GET PAGE OFFSET
3160 DB0E             (       PAGING.ASM):00193                 ADDB    PAGE0                             ; MAKE IT ABSOLUTE
3162 39               (       PAGING.ASM):00194                 RTS                                       ; AND RETURN IT IN [B]
                      (       PAGING.ASM):00195         
                      (       PAGING.ASM):00196         ; -------------------------
                      (       PAGING.ASM):00197         ; LOCATE EARLIEST TIMESTAMP
                      (       PAGING.ASM):00198         ; -------------------------
                      (       PAGING.ASM):00199         
                      (       PAGING.ASM):00200         ; EXIT: [LRU] = EARLIEST STAMP READING
                      (       PAGING.ASM):00201         ;       [SWAP] = INDEX TO EARLIEST BUFFER
                      (       PAGING.ASM):00202         
3163                  (       PAGING.ASM):00203         EARLY:
3163 0F12             (       PAGING.ASM):00204                 CLR     SWAP                              ; RESET [SWAP]
3165 B6255A           (       PAGING.ASM):00205                 LDA     LRUMAP                            ; FETCH 1ST READING FOR COMPARISONS
3168 8E255B           (       PAGING.ASM):00206                 LDX     #LRUMAP+1                         ; POINT TO 2ND READING
316B C601             (       PAGING.ASM):00207                 LDB     #1                                ; INIT BUFFER INDEX
316D                  (       PAGING.ASM):00208         EAR0:
316D A184             (       PAGING.ASM):00209                 CMPA    ,X                                ; IS THIS STAMP EARLIER THAN [A]?
316F 2504             (       PAGING.ASM):00210                 BLO     EAR1                              ; NO, TRY NEXT
3171 A684             (       PAGING.ASM):00211                 LDA     ,X                                ; ELSE MAKE THIS READING THE "NEW" LOWEST
3173 D712             (       PAGING.ASM):00212                 STB     SWAP                              ; AND REMEMBER WHERE WE FOUND IT
3175                  (       PAGING.ASM):00213         EAR1:
3175 3001             (       PAGING.ASM):00214                 LEAX    +1,X                              ; UPDATE POINTER
3177 5C               (       PAGING.ASM):00215                 INCB                                      ; AND BUFFER INDEX
3178 D10C             (       PAGING.ASM):00216                 CMPB    PMAX                              ; OUT OF BUFFERS YET?
317A 25F1             (       PAGING.ASM):00217                 BLO     EAR0                              ; LOOP TILL DONE
                      (       PAGING.ASM):00218         
317C 970A             (       PAGING.ASM):00219                 STA     LRU                               ; SAVE EARLIEST STAMP FOUND
317E 39               (       PAGING.ASM):00220                 RTS                                       ; AND RETURN
                      (       PAGING.ASM):00221         
                      (       PAGING.ASM):00222         ; ---------------------
                      (       PAGING.ASM):00223         ; POINT [MPC] TO [TEMP]
                      (       PAGING.ASM):00224         ; ---------------------
                      (       PAGING.ASM):00225         
317F                  (       PAGING.ASM):00226         SETWRD:
317F DC3F             (       PAGING.ASM):00227                 LDD     TEMP
3181 DD1B             (       PAGING.ASM):00228                 STD     MPCM
3183 0F1A             (       PAGING.ASM):00229                 CLR     MPCH
3185 0F1F             (       PAGING.ASM):00230                 CLR     MPCFLG
3187 39               (       PAGING.ASM):00231                 RTS
                      (     cubixzip.asm):00061                 INCLUDE ZSTRING.ASM
                      (      ZSTRING.ASM):00001         ;       PAGE
                      (      ZSTRING.ASM):00002         ;       SBTTL "--- Z-STRING HANDLERS ---"
                      (      ZSTRING.ASM):00003         
                      (      ZSTRING.ASM):00004         ; -----------------
                      (      ZSTRING.ASM):00005         ; POINT TO Z-STRING
                      (      ZSTRING.ASM):00006         ; -----------------
                      (      ZSTRING.ASM):00007         
3188                  (      ZSTRING.ASM):00008         SETSTR:
3188 4F               (      ZSTRING.ASM):00009                 CLRA
3189 0840             (      ZSTRING.ASM):00010                 ASL     TEMP+1
318B 093F             (      ZSTRING.ASM):00011                 ROL     TEMP
318D 49               (      ZSTRING.ASM):00012                 ROLA
318E 971A             (      ZSTRING.ASM):00013                 STA     MPCH
3190 DC3F             (      ZSTRING.ASM):00014                 LDD     TEMP
3192 DD1B             (      ZSTRING.ASM):00015                 STD     MPCM
3194 0F1F             (      ZSTRING.ASM):00016                 CLR     MPCFLG
3196                  (      ZSTRING.ASM):00017         ZSTEX:
3196 39               (      ZSTRING.ASM):00018                 RTS
                      (      ZSTRING.ASM):00019         
                      (      ZSTRING.ASM):00020         ; --------------
                      (      ZSTRING.ASM):00021         ; PRINT Z-STRING
                      (      ZSTRING.ASM):00022         ; --------------
                      (      ZSTRING.ASM):00023         
3197                  (      ZSTRING.ASM):00024         PZSTR:
3197 0F2A             (      ZSTRING.ASM):00025                 CLR     CSPERM                            ; PERMANENT CHARSET
3199 0F2B             (      ZSTRING.ASM):00026                 CLR     STBYTF                            ; RESET STRING BYTE FLAG
319B 86FF             (      ZSTRING.ASM):00027                 LDA     #$FF
319D 9729             (      ZSTRING.ASM):00028                 STA     CSTEMP                            ; NO TEMP CHARSET ACTIVE
                      (      ZSTRING.ASM):00029         
319F                  (      ZSTRING.ASM):00030         PZSTRL:
319F BD3251           (      ZSTRING.ASM):00031                 JSR     GETZCH                            ; GET A Z-CHARACTER
31A2 25F2             (      ZSTRING.ASM):00032                 BCS     ZSTEX                             ; END OF STRING IF CARRY SET
31A4 9743             (      ZSTRING.ASM):00033                 STA     MASK                              ; SAVE CHAR HERE
31A6 2741             (      ZSTRING.ASM):00034                 BEQ     PZSTRS                            ; O = SPACE CHAR
31A8 8104             (      ZSTRING.ASM):00035                 CMPA    #4                                ; IS THIS AN F-WORD?
31AA 2557             (      ZSTRING.ASM):00036                 BLO     PZSTRF                            ; APPARENTLY SO
31AC 8106             (      ZSTRING.ASM):00037                 CMPA    #6                                ; SHIFT CHAR?
31AE 253D             (      ZSTRING.ASM):00038                 BLO     PZSTRT                            ; YES, CHANGE CHARSET
                      (      ZSTRING.ASM):00039         
31B0 BD3245           (      ZSTRING.ASM):00040                 JSR     GETMOD
31B3 4D               (      ZSTRING.ASM):00041                 TSTA                                      ; IS THIS CHARSET 0?
31B4 2609             (      ZSTRING.ASM):00042                 BNE     PZSTR1                            ; NOPE
                      (      ZSTRING.ASM):00043         
                      (      ZSTRING.ASM):00044         ; PRINT LOWER-CASE CHAR (CHARSET 0)
                      (      ZSTRING.ASM):00045         
31B6 865B             (      ZSTRING.ASM):00046                 LDA     #$61-6                            ; ASCII "a" MINUS Z-OFFSET
31B8                  (      ZSTRING.ASM):00047         PZSTP0:
31B8 9B43             (      ZSTRING.ASM):00048                 ADDA    MASK                              ; ADD CHARACTER
31BA                  (      ZSTRING.ASM):00049         PZSTP1:
31BA BD3559           (      ZSTRING.ASM):00050                 JSR     COUT                              ; PRINT RESULT
31BD 20E0             (      ZSTRING.ASM):00051                 BRA     PZSTRL                            ; AND FETCH ANOTHER Z-CHAR
                      (      ZSTRING.ASM):00052         
                      (      ZSTRING.ASM):00053         ; CHARSET 1 OR 2?
                      (      ZSTRING.ASM):00054         
31BF                  (      ZSTRING.ASM):00055         PZSTR1:
31BF 8101             (      ZSTRING.ASM):00056                 CMPA    #1                                ; SET 1?
31C1 2604             (      ZSTRING.ASM):00057                 BNE     PZSTR2                            ; NOPE, IT'S SET 2
                      (      ZSTRING.ASM):00058         
                      (      ZSTRING.ASM):00059         ; PRINT UPPER-CASE CHAR (CHARSET 1)
                      (      ZSTRING.ASM):00060         
31C3 863B             (      ZSTRING.ASM):00061                 LDA     #$41-6                            ; ASCII "A" MINUS Z-OFFSET
31C5 20F1             (      ZSTRING.ASM):00062                 BRA     PZSTP0                            ; AND SO ON ...
                      (      ZSTRING.ASM):00063         
                      (      ZSTRING.ASM):00064         ; DECODE/PRINT CHARSET 2
                      (      ZSTRING.ASM):00065         
31C7                  (      ZSTRING.ASM):00066         PZSTR2:
31C7 D643             (      ZSTRING.ASM):00067                 LDB     MASK                              ; RETRIEVE Z-CHAR
31C9 C006             (      ZSTRING.ASM):00068                 SUBB    #6                                ; CONVERT TO ZERO-ALIGNED INDEX
31CB 2707             (      ZSTRING.ASM):00069                 BEQ     PZSTRA                            ; IF ZERO, IT'S "DIRECT" ASCII
31CD 8E3364           (      ZSTRING.ASM):00070                 LDX     #CHRTBL                           ; ELSE GET BASE OF DECODE TABLE
31D0 A685             (      ZSTRING.ASM):00071                 LDA     B,X                               ; GET CHAR FROM TABLE
31D2 20E6             (      ZSTRING.ASM):00072                 BRA     PZSTP1                            ; AND PRINT IT!
                      (      ZSTRING.ASM):00073         
                      (      ZSTRING.ASM):00074         ; DECODE/PRINT A "DIRECT" ASCII CHAR
                      (      ZSTRING.ASM):00075         
31D4                  (      ZSTRING.ASM):00076         PZSTRA:
31D4 BD3251           (      ZSTRING.ASM):00077                 JSR     GETZCH                            ; GET NEXT Z-BYTE
31D7 48               (      ZSTRING.ASM):00078                 ASLA                                      ; SHIFT INTO POSITION
31D8 48               (      ZSTRING.ASM):00079                 ASLA
31D9 48               (      ZSTRING.ASM):00080                 ASLA
31DA 48               (      ZSTRING.ASM):00081                 ASLA
31DB 48               (      ZSTRING.ASM):00082                 ASLA
31DC 9743             (      ZSTRING.ASM):00083                 STA     MASK                              ; SAVE MSB
31DE BD3251           (      ZSTRING.ASM):00084                 JSR     GETZCH                            ; FETCH LSB
31E1 9744             (      ZSTRING.ASM):00085                 STA     MASK+1                            ; SAVE THAT, TOO
31E3 9643             (      ZSTRING.ASM):00086                 LDA     MASK                              ; GET MSB
31E5 9A44             (      ZSTRING.ASM):00087                 ORA     MASK+1                            ; SUPERIMPOSE LSB
31E7 20D1             (      ZSTRING.ASM):00088                 BRA     PZSTP1                            ; AND PRINT RESULT
                      (      ZSTRING.ASM):00089         
                      (      ZSTRING.ASM):00090         ; PRINT A SPACE
                      (      ZSTRING.ASM):00091         
31E9                  (      ZSTRING.ASM):00092         PZSTRS:
31E9 8620             (      ZSTRING.ASM):00093                 LDA     #$20
31EB 20CD             (      ZSTRING.ASM):00094                 BRA     PZSTP1
                      (      ZSTRING.ASM):00095         
                      (      ZSTRING.ASM):00096         ; CHANGE CHARACTER SETS
                      (      ZSTRING.ASM):00097         
31ED                  (      ZSTRING.ASM):00098         PZSTRT:
31ED 8003             (      ZSTRING.ASM):00099                 SUBA    #3                                ; CONVERT TO 1 OR 2
31EF 1F89             (      ZSTRING.ASM):00100                 TFR     A,B
31F1 8D52             (      ZSTRING.ASM):00101                 BSR     GETMOD
31F3 2604             (      ZSTRING.ASM):00102                 BNE     PZSTRP                            ; NO, DO PERMANENT SHIFT
31F5 D729             (      ZSTRING.ASM):00103                 STB     CSTEMP                            ; JUST A TEMP-SHIFT
31F7 20A6             (      ZSTRING.ASM):00104                 BRA     PZSTRL
                      (      ZSTRING.ASM):00105         
31F9                  (      ZSTRING.ASM):00106         PZSTRP:
31F9 D72A             (      ZSTRING.ASM):00107                 STB     CSPERM                            ; PERMANENT SHIFT
31FB 912A             (      ZSTRING.ASM):00108                 CMPA    CSPERM                            ; NEW SET SAME AS OLD?
31FD 27A0             (      ZSTRING.ASM):00109                 BEQ     PZSTRL                            ; YES, EXIT
31FF 0F2A             (      ZSTRING.ASM):00110                 CLR     CSPERM                            ; ELSE BACK TO SET 0
3201 209C             (      ZSTRING.ASM):00111                 BRA     PZSTRL                            ; BEFORE FINISHING
                      (      ZSTRING.ASM):00112         
                      (      ZSTRING.ASM):00113         ; HANDLE AN F-WORD
                      (      ZSTRING.ASM):00114         
3203                  (      ZSTRING.ASM):00115         PZSTRF:
3203 4A               (      ZSTRING.ASM):00116                 DECA                                      ; CONVERT TO 0-2
3204 C640             (      ZSTRING.ASM):00117                 LDB     #64                               ; TIMES 64
3206 3D               (      ZSTRING.ASM):00118                 MUL
3207 D73C             (      ZSTRING.ASM):00119                 STB     PZSTFO                            ; SAVE FOR LATER
3209 BD3251           (      ZSTRING.ASM):00120                 JSR     GETZCH                            ; GET F-WORD INDEX
320C 1F89             (      ZSTRING.ASM):00121                 TFR     A,B                               ; MOVE IT
320E 58               (      ZSTRING.ASM):00122                 ASLB                                      ; FORM WORD-ALIGNED INDEX
320F DB3C             (      ZSTRING.ASM):00123                 ADDB    PZSTFO                            ; ADD OFFSET
3211 9E25             (      ZSTRING.ASM):00124                 LDX     FWORDS                            ; GET BASE ADDR OF FWORDS TABLE
3213 3A               (      ZSTRING.ASM):00125                 ABX                                       ; ADD THE OFFSET
3214 EC84             (      ZSTRING.ASM):00126                 LDD     ,X                                ; GET THE FWORD POINTER
3216 DD3F             (      ZSTRING.ASM):00127                 STD     TEMP                              ; AND SAVE IT
                      (      ZSTRING.ASM):00128         
                      (      ZSTRING.ASM):00129         ; SAVE THE STATE OF CURRENT Z-PRINT
                      (      ZSTRING.ASM):00130         
3218 961A             (      ZSTRING.ASM):00131                 LDA     MPCH
321A 3402             (      ZSTRING.ASM):00132                 PSHS    A
321C 962A             (      ZSTRING.ASM):00133                 LDA     CSPERM
321E D62B             (      ZSTRING.ASM):00134                 LDB     STBYTF
3220 9E1B             (      ZSTRING.ASM):00135                 LDX     MPCM
3222 109E2C           (      ZSTRING.ASM):00136                 LDY     ZSTWRD
3225 3436             (      ZSTRING.ASM):00137                 PSHS    Y,X,B,A
                      (      ZSTRING.ASM):00138         
3227 BD3188           (      ZSTRING.ASM):00139                 JSR     SETSTR                            ; PRINT THE F-WORD
322A BD3197           (      ZSTRING.ASM):00140                 JSR     PZSTR                             ; POINTED TO BY [TEMP]
                      (      ZSTRING.ASM):00141         
                      (      ZSTRING.ASM):00142         ; RESTORE THE OLD Z-STRING
                      (      ZSTRING.ASM):00143         
322D 3536             (      ZSTRING.ASM):00144                 PULS    Y,X,B,A
322F 109F2C           (      ZSTRING.ASM):00145                 STY     ZSTWRD
3232 9F1B             (      ZSTRING.ASM):00146                 STX     MPCM
3234 D72B             (      ZSTRING.ASM):00147                 STB     STBYTF
3236 972A             (      ZSTRING.ASM):00148                 STA     CSPERM
3238 3502             (      ZSTRING.ASM):00149                 PULS    A
323A 971A             (      ZSTRING.ASM):00150                 STA     MPCH
                      (      ZSTRING.ASM):00151         
323C 86FF             (      ZSTRING.ASM):00152                 LDA     #$FF
323E 9729             (      ZSTRING.ASM):00153                 STA     CSTEMP                            ; DISABLE TEMP CHARSET
3240 0F1F             (      ZSTRING.ASM):00154                 CLR     MPCFLG                            ; MPC HAS CHANGED!
3242 7E319F           (      ZSTRING.ASM):00155                 JMP     PZSTRL                            ; CONTINUE INNOCENTLY
                      (      ZSTRING.ASM):00156         
                      (      ZSTRING.ASM):00157         ; ----------------------
                      (      ZSTRING.ASM):00158         ; RETURN CURRENT CHARSET
                      (      ZSTRING.ASM):00159         ; ----------------------
                      (      ZSTRING.ASM):00160         
3245                  (      ZSTRING.ASM):00161         GETMOD:
3245 9629             (      ZSTRING.ASM):00162                 LDA     CSTEMP
3247 2A03             (      ZSTRING.ASM):00163                 BPL     GM
3249 962A             (      ZSTRING.ASM):00164                 LDA     CSPERM
324B 39               (      ZSTRING.ASM):00165                 RTS
                      (      ZSTRING.ASM):00166         
324C                  (      ZSTRING.ASM):00167         GM:
324C C6FF             (      ZSTRING.ASM):00168                 LDB     #$FF
324E D729             (      ZSTRING.ASM):00169                 STB     CSTEMP
3250 39               (      ZSTRING.ASM):00170                 RTS
                      (      ZSTRING.ASM):00171         
                      (      ZSTRING.ASM):00172         ; ---------------
                      (      ZSTRING.ASM):00173         ; GET NEXT Z-CHAR
                      (      ZSTRING.ASM):00174         ; ---------------
                      (      ZSTRING.ASM):00175         
3251                  (      ZSTRING.ASM):00176         GETZCH:
3251 962B             (      ZSTRING.ASM):00177                 LDA     STBYTF                            ; WHICH BYTE?
3253 2A02             (      ZSTRING.ASM):00178                 BPL     GTZ0
3255 53               (      ZSTRING.ASM):00179                 COMB                                      ; SET CARRY
3256 39               (      ZSTRING.ASM):00180                 RTS                                       ; TO INDICATE "NO MORE CHARS"
                      (      ZSTRING.ASM):00181         
3257                  (      ZSTRING.ASM):00182         GTZ0:
3257 260F             (      ZSTRING.ASM):00183                 BNE     GETZH1                            ; NOT FIRST CHAR
3259 0C2B             (      ZSTRING.ASM):00184                 INC     STBYTF
325B BD3092           (      ZSTRING.ASM):00185                 JSR     GETWRD
325E DC3F             (      ZSTRING.ASM):00186                 LDD     TEMP
3260 DD2C             (      ZSTRING.ASM):00187                 STD     ZSTWRD
3262 44               (      ZSTRING.ASM):00188                 LSRA
3263 44               (      ZSTRING.ASM):00189                 LSRA
3264                  (      ZSTRING.ASM):00190         GTEXIT:
3264 841F             (      ZSTRING.ASM):00191                 ANDA    #%00011111
3266 5F               (      ZSTRING.ASM):00192                 CLRB                                      ; CLEAR CARRY
3267 39               (      ZSTRING.ASM):00193                 RTS
                      (      ZSTRING.ASM):00194         
3268                  (      ZSTRING.ASM):00195         GETZH1:
3268 4A               (      ZSTRING.ASM):00196                 DECA
3269 2614             (      ZSTRING.ASM):00197                 BNE     GETZH2                            ; MUST BE LAST CHAR
326B 8602             (      ZSTRING.ASM):00198                 LDA     #2
326D 972B             (      ZSTRING.ASM):00199                 STA     STBYTF
326F DC2C             (      ZSTRING.ASM):00200                 LDD     ZSTWRD
3271 44               (      ZSTRING.ASM):00201                 LSRA
3272 56               (      ZSTRING.ASM):00202                 RORB
3273 962C             (      ZSTRING.ASM):00203                 LDA     ZSTWRD
3275 44               (      ZSTRING.ASM):00204                 LSRA
3276 44               (      ZSTRING.ASM):00205                 LSRA
3277 56               (      ZSTRING.ASM):00206                 RORB
3278 54               (      ZSTRING.ASM):00207                 LSRB
3279 54               (      ZSTRING.ASM):00208                 LSRB
327A 54               (      ZSTRING.ASM):00209                 LSRB
327B                  (      ZSTRING.ASM):00210         GETZH3:
327B 1F98             (      ZSTRING.ASM):00211                 TFR     B,A                               ; EXPECTED HERE
327D 20E5             (      ZSTRING.ASM):00212                 BRA     GTEXIT
                      (      ZSTRING.ASM):00213         
327F                  (      ZSTRING.ASM):00214         GETZH2:
327F 0F2B             (      ZSTRING.ASM):00215                 CLR     STBYTF
3281 DC2C             (      ZSTRING.ASM):00216                 LDD     ZSTWRD
3283 2AF6             (      ZSTRING.ASM):00217                 BPL     GETZH3
3285 032B             (      ZSTRING.ASM):00218                 COM     STBYTF                            ; INDICATE END OF STRING
3287 20F2             (      ZSTRING.ASM):00219                 BRA     GETZH3
                      (      ZSTRING.ASM):00220         
                      (      ZSTRING.ASM):00221         ; -------------------
                      (      ZSTRING.ASM):00222         ; CONVERT TO Z-STRING
                      (      ZSTRING.ASM):00223         ; -------------------
                      (      ZSTRING.ASM):00224         
3289                  (      ZSTRING.ASM):00225         CONZST:
3289 CC0505           (      ZSTRING.ASM):00226                 LDD     #$0505                            ; FILL OUTPUT BUFFER
328C DD34             (      ZSTRING.ASM):00227                 STD     ZSTBUO                            ; WITH PAD CHARS
328E DD36             (      ZSTRING.ASM):00228                 STD     ZSTBUO+2
3290 DD38             (      ZSTRING.ASM):00229                 STD     ZSTBUO+4
                      (      ZSTRING.ASM):00230         
3292 4C               (      ZSTRING.ASM):00231                 INCA                                      ; = 6
3293 9743             (      ZSTRING.ASM):00232                 STA     MASK                              ; INIT CHAR COUNT
                      (      ZSTRING.ASM):00233         
3295 0F3D             (      ZSTRING.ASM):00234                 CLR     VAL                               ; RESET OUTPUT AND
3297 0F3F             (      ZSTRING.ASM):00235                 CLR     TEMP                              ; INPUT INDEXES
                      (      ZSTRING.ASM):00236         
3299                  (      ZSTRING.ASM):00237         CNZSL1:
3299 D63F             (      ZSTRING.ASM):00238                 LDB     TEMP
329B 0C3F             (      ZSTRING.ASM):00239                 INC     TEMP
329D 8E002E           (      ZSTRING.ASM):00240                 LDX     #ZSTBUI                           ; POINT TO INPUT BUFFER
32A0 A685             (      ZSTRING.ASM):00241                 LDA     B,X                               ; GRAB NEXT CHAR
32A2 9744             (      ZSTRING.ASM):00242                 STA     MASK+1                            ; SAVE IT HERE
32A4 2604             (      ZSTRING.ASM):00243                 BNE     CNZSL2                            ; IF CHAR WAS ZERO,
32A6 8605             (      ZSTRING.ASM):00244                 LDA     #5                                ; USE A Z-PAD
32A8 2025             (      ZSTRING.ASM):00245                 BRA     CNZSLO
                      (      ZSTRING.ASM):00246         
32AA                  (      ZSTRING.ASM):00247         CNZSL2:
32AA 9644             (      ZSTRING.ASM):00248                 LDA     MASK+1
32AC BD332A           (      ZSTRING.ASM):00249                 JSR     ZCHRCS                            ; WHICH CHARSET TO USE?
32AF 4D               (      ZSTRING.ASM):00250                 TSTA
32B0 2711             (      ZSTRING.ASM):00251                 BEQ     CNZSLC                            ; IF CHARSET 0, USE LOWER CASE
32B2 8B03             (      ZSTRING.ASM):00252                 ADDA    #3
32B4 D63D             (      ZSTRING.ASM):00253                 LDB     VAL                               ; OUTPUT A TEMP SHIFT
32B6 8E0034           (      ZSTRING.ASM):00254                 LDX     #ZSTBUO
32B9 A785             (      ZSTRING.ASM):00255                 STA     B,X
32BB 0C3D             (      ZSTRING.ASM):00256                 INC     VAL
32BD 0A43             (      ZSTRING.ASM):00257                 DEC     MASK
32BF 10270084         (      ZSTRING.ASM):00258                 LBEQ    CNZSLE
                      (      ZSTRING.ASM):00259         
32C3                  (      ZSTRING.ASM):00260         CNZSLC:
32C3 9644             (      ZSTRING.ASM):00261                 LDA     MASK+1
32C5 BD332A           (      ZSTRING.ASM):00262                 JSR     ZCHRCS
32C8 4A               (      ZSTRING.ASM):00263                 DECA
32C9 2A13             (      ZSTRING.ASM):00264                 BPL     CNZSC1                            ; NOT CHARSET 0!
32CB 9644             (      ZSTRING.ASM):00265                 LDA     MASK+1
32CD 805B             (      ZSTRING.ASM):00266                 SUBA    #$61-6                            ; ASCII "a" MINUS 6
                      (      ZSTRING.ASM):00267         
32CF                  (      ZSTRING.ASM):00268         CNZSLO:
32CF D63D             (      ZSTRING.ASM):00269                 LDB     VAL
32D1 8E0034           (      ZSTRING.ASM):00270                 LDX     #ZSTBUO
32D4 A785             (      ZSTRING.ASM):00271                 STA     B,X
32D6 0C3D             (      ZSTRING.ASM):00272                 INC     VAL
32D8 0A43             (      ZSTRING.ASM):00273                 DEC     MASK
32DA 276B             (      ZSTRING.ASM):00274                 BEQ     CNZSLE                            ; ALL FINISHED
32DC 20BB             (      ZSTRING.ASM):00275                 BRA     CNZSL1                            ; ELSE LOOP BACK FOR MORE
                      (      ZSTRING.ASM):00276         
32DE                  (      ZSTRING.ASM):00277         CNZSC1:
32DE 2606             (      ZSTRING.ASM):00278                 BNE     CNZSC3                            ; MUST BE CHARSET 3
32E0 9644             (      ZSTRING.ASM):00279                 LDA     MASK+1
32E2 803B             (      ZSTRING.ASM):00280                 SUBA    #$41-6                            ; ASCII "A" MINUS 6
32E4 20E9             (      ZSTRING.ASM):00281                 BRA     CNZSLO
                      (      ZSTRING.ASM):00282         
32E6                  (      ZSTRING.ASM):00283         CNZSC3:
32E6 9644             (      ZSTRING.ASM):00284                 LDA     MASK+1
32E8 BD3318           (      ZSTRING.ASM):00285                 JSR     CNZS2M                            ; IS IT IN TABLE?
32EB 26E2             (      ZSTRING.ASM):00286                 BNE     CNZSLO                            ; YES, OUTPUT THE CHAR
32ED 8606             (      ZSTRING.ASM):00287                 LDA     #6                                ; ELSE IT'S A "DIRECT" ASCII CHAR
32EF D63D             (      ZSTRING.ASM):00288                 LDB     VAL
32F1 8E0034           (      ZSTRING.ASM):00289                 LDX     #ZSTBUO
32F4 A785             (      ZSTRING.ASM):00290                 STA     B,X                               ; SEND "DIRECT" TO OUTPUT
32F6 0C3D             (      ZSTRING.ASM):00291                 INC     VAL
32F8 0A43             (      ZSTRING.ASM):00292                 DEC     MASK
32FA 274B             (      ZSTRING.ASM):00293                 BEQ     CNZSLE                            ; NO MORE ROOM!
                      (      ZSTRING.ASM):00294         
                      (      ZSTRING.ASM):00295         ; CONVERT CHAR TO 2-BYTE DIRECT ASCII
                      (      ZSTRING.ASM):00296         
32FC 9644             (      ZSTRING.ASM):00297                 LDA     MASK+1
32FE 44               (      ZSTRING.ASM):00298                 LSRA
32FF 44               (      ZSTRING.ASM):00299                 LSRA
3300 44               (      ZSTRING.ASM):00300                 LSRA
3301 44               (      ZSTRING.ASM):00301                 LSRA
3302 44               (      ZSTRING.ASM):00302                 LSRA
3303 8403             (      ZSTRING.ASM):00303                 ANDA    #%00000011
3305 D63D             (      ZSTRING.ASM):00304                 LDB     VAL
3307 8E0034           (      ZSTRING.ASM):00305                 LDX     #ZSTBUO
330A A785             (      ZSTRING.ASM):00306                 STA     B,X
330C 0C3D             (      ZSTRING.ASM):00307                 INC     VAL
330E 0A43             (      ZSTRING.ASM):00308                 DEC     MASK
3310 2735             (      ZSTRING.ASM):00309                 BEQ     CNZSLE                            ; NO MORE ROOM!
3312 9644             (      ZSTRING.ASM):00310                 LDA     MASK+1
3314 841F             (      ZSTRING.ASM):00311                 ANDA    #%00011111                        ; FORM 2ND Z-BYTE
3316 20B7             (      ZSTRING.ASM):00312                 BRA     CNZSLO                            ; AND OUTPUT IT
                      (      ZSTRING.ASM):00313         
                      (      ZSTRING.ASM):00314         ; ----------------------
                      (      ZSTRING.ASM):00315         ; SEARCH CHARSET 3 TABLE
                      (      ZSTRING.ASM):00316         ; ----------------------
                      (      ZSTRING.ASM):00317         
3318                  (      ZSTRING.ASM):00318         CNZS2M:
3318 8E3364           (      ZSTRING.ASM):00319                 LDX     #CHRTBL
331B C619             (      ZSTRING.ASM):00320                 LDB     #25
331D                  (      ZSTRING.ASM):00321         CNLOOP:
331D A185             (      ZSTRING.ASM):00322                 CMPA    B,X
331F 2704             (      ZSTRING.ASM):00323                 BEQ     CNOK
3321 5A               (      ZSTRING.ASM):00324                 DECB
3322 26F9             (      ZSTRING.ASM):00325                 BNE     CNLOOP
3324 39               (      ZSTRING.ASM):00326                 RTS                                       ; RETURN ZERO IN B IF NO MATCH
                      (      ZSTRING.ASM):00327         
3325                  (      ZSTRING.ASM):00328         CNOK:
3325 1F98             (      ZSTRING.ASM):00329                 TFR     B,A                               ; EXPECTED IN [A]
3327 8B06             (      ZSTRING.ASM):00330                 ADDA    #6                                ; CONVERT TO Z-CHAR
3329 39               (      ZSTRING.ASM):00331                 RTS
                      (      ZSTRING.ASM):00332         
                      (      ZSTRING.ASM):00333         ; -------------------------
                      (      ZSTRING.ASM):00334         ; DETERMINE CHARSET OF CHAR
                      (      ZSTRING.ASM):00335         ; -------------------------
                      (      ZSTRING.ASM):00336         
332A                  (      ZSTRING.ASM):00337         ZCHRCS:
332A 8161             (      ZSTRING.ASM):00338                 CMPA    #$61                              ; ASCII "a"
332C 2506             (      ZSTRING.ASM):00339                 BLO     ZCHR1
332E 817B             (      ZSTRING.ASM):00340                 CMPA    #$7B                              ; ASCII "z"+1
3330 2402             (      ZSTRING.ASM):00341                 BHS     ZCHR1
3332 4F               (      ZSTRING.ASM):00342                 CLRA                                      ; IT'S CHARSET 0
3333 39               (      ZSTRING.ASM):00343                 RTS
                      (      ZSTRING.ASM):00344         
3334                  (      ZSTRING.ASM):00345         ZCHR1:
3334 8141             (      ZSTRING.ASM):00346                 CMPA    #$41                              ; ASCII "A"
3336 2507             (      ZSTRING.ASM):00347                 BLO     ZCHR2
3338 815B             (      ZSTRING.ASM):00348                 CMPA    #$5B                              ; ASCII "Z"+1
333A 2403             (      ZSTRING.ASM):00349                 BHS     ZCHR2
333C 8601             (      ZSTRING.ASM):00350                 LDA     #1                                ; IT'S CHARSET 1
333E 39               (      ZSTRING.ASM):00351                 RTS
                      (      ZSTRING.ASM):00352         
333F                  (      ZSTRING.ASM):00353         ZCHR2:
333F 4D               (      ZSTRING.ASM):00354                 TSTA
3340 2704             (      ZSTRING.ASM):00355                 BEQ     ZCHRX                             ; EXIT IF ZERO
3342 2B02             (      ZSTRING.ASM):00356                 BMI     ZCHRX                             ; OR NEGATIVE
3344 8602             (      ZSTRING.ASM):00357                 LDA     #2                                ; ELSE IT'S CHARSET 2
3346                  (      ZSTRING.ASM):00358         ZCHRX:
3346 39               (      ZSTRING.ASM):00359                 RTS
                      (      ZSTRING.ASM):00360         
                      (      ZSTRING.ASM):00361         ; ---------------
                      (      ZSTRING.ASM):00362         ; CRUSH 6 Z-CHARS
                      (      ZSTRING.ASM):00363         ; ---------------
                      (      ZSTRING.ASM):00364         
3347                  (      ZSTRING.ASM):00365         CNZSLE:
3347 DC34             (      ZSTRING.ASM):00366                 LDD     ZSTBUO                            ; HANDLE 1ST TRIPLET
3349 58               (      ZSTRING.ASM):00367                 ASLB
334A 58               (      ZSTRING.ASM):00368                 ASLB
334B 58               (      ZSTRING.ASM):00369                 ASLB
334C 58               (      ZSTRING.ASM):00370                 ASLB
334D 49               (      ZSTRING.ASM):00371                 ROLA
334E 58               (      ZSTRING.ASM):00372                 ASLB
334F 49               (      ZSTRING.ASM):00373                 ROLA
3350 DA36             (      ZSTRING.ASM):00374                 ORB     ZSTBUO+2
3352 DD34             (      ZSTRING.ASM):00375                 STD     ZSTBUO
                      (      ZSTRING.ASM):00376         
3354 DC37             (      ZSTRING.ASM):00377                 LDD     ZSTBUO+3                          ; HANDLE 2ND TRIPLET
3356 58               (      ZSTRING.ASM):00378                 ASLB
3357 58               (      ZSTRING.ASM):00379                 ASLB
3358 58               (      ZSTRING.ASM):00380                 ASLB
3359 58               (      ZSTRING.ASM):00381                 ASLB
335A 49               (      ZSTRING.ASM):00382                 ROLA
335B 58               (      ZSTRING.ASM):00383                 ASLB
335C 49               (      ZSTRING.ASM):00384                 ROLA
335D DA39             (      ZSTRING.ASM):00385                 ORB     ZSTBUO+5
335F 8A80             (      ZSTRING.ASM):00386                 ORA     #%10000000                        ; SET SIGN BIT OF LAST Z-BYTE
3361 DD36             (      ZSTRING.ASM):00387                 STD     ZSTBUO+2
3363 39               (      ZSTRING.ASM):00388                 RTS
                      (      ZSTRING.ASM):00389         
                      (      ZSTRING.ASM):00390         ; ----------------------
                      (      ZSTRING.ASM):00391         ; CHARSET 2 DECODE TABLE
                      (      ZSTRING.ASM):00392         ; ----------------------
                      (      ZSTRING.ASM):00393         
3364                  (      ZSTRING.ASM):00394         CHRTBL:
3364 00               (      ZSTRING.ASM):00395                 FCB     0                                 ; DUMMY BYTE
3365 0D               (      ZSTRING.ASM):00396                 FCB     $0D                               ; CARRIAGE RETURN
3366 3031323334353637 (      ZSTRING.ASM):00397                 FCC     "0123456789.,!?_#"
     38392E2C213F5F23
3376 27               (      ZSTRING.ASM):00398                 FCB     $27                               ; SINGLE QUOTE
3377 22               (      ZSTRING.ASM):00399                 FCB     $22                               ; DOUBLE QUOTE
3378 2F5C2D3A2829     (      ZSTRING.ASM):00400                 FCC     "/\-:()"
                      (     cubixzip.asm):00062                 INCLUDE OBJECTS.ASM
                      (      OBJECTS.ASM):00001         ;       PAGE
                      (      OBJECTS.ASM):00002         ;       SBTTL "--- OBJECT & PROPERTY HANDLERS ---"
                      (      OBJECTS.ASM):00003         
337E                  (      OBJECTS.ASM):00004         PROPB:
337E 9603             (      OBJECTS.ASM):00005                 LDA     ARG1+1
3380 BD33E1           (      OBJECTS.ASM):00006                 JSR     OBJLOC
3383 9E3F             (      OBJECTS.ASM):00007                 LDX     TEMP
3385 EC07             (      OBJECTS.ASM):00008                 LDD     7,X
3387 C33E0A           (      OBJECTS.ASM):00009                 ADDD    #ZCODE
338A DD3F             (      OBJECTS.ASM):00010                 STD     TEMP                              ; EXPECTED HERE
338C 1F01             (      OBJECTS.ASM):00011                 TFR     D,X
338E E684             (      OBJECTS.ASM):00012                 LDB     ,X                                ; GET FIRST BYTE (LENGTH OF DESC)
3390 58               (      OBJECTS.ASM):00013                 ASLB                                      ; WORD-ALIGN IT
3391 5C               (      OBJECTS.ASM):00014                 INCB                                      ; AND POINT JUST PAST IT
3392 39               (      OBJECTS.ASM):00015                 RTS
                      (      OBJECTS.ASM):00016         
3393                  (      OBJECTS.ASM):00017         PROPN:
3393 9E3F             (      OBJECTS.ASM):00018                 LDX     TEMP
3395 3A               (      OBJECTS.ASM):00019                 ABX
3396 A684             (      OBJECTS.ASM):00020                 LDA     ,X
3398 841F             (      OBJECTS.ASM):00021                 ANDA    #%00011111
339A 39               (      OBJECTS.ASM):00022                 RTS
                      (      OBJECTS.ASM):00023         
339B                  (      OBJECTS.ASM):00024         PROPL:
339B 9E3F             (      OBJECTS.ASM):00025                 LDX     TEMP
339D 3A               (      OBJECTS.ASM):00026                 ABX
339E A684             (      OBJECTS.ASM):00027                 LDA     ,X
33A0 46               (      OBJECTS.ASM):00028                 RORA
33A1 46               (      OBJECTS.ASM):00029                 RORA
33A2 46               (      OBJECTS.ASM):00030                 RORA
33A3 46               (      OBJECTS.ASM):00031                 RORA
33A4 46               (      OBJECTS.ASM):00032                 RORA
33A5 8407             (      OBJECTS.ASM):00033                 ANDA    #%00000111
33A7 39               (      OBJECTS.ASM):00034                 RTS
                      (      OBJECTS.ASM):00035         
33A8                  (      OBJECTS.ASM):00036         PROPNX:
33A8 8DF1             (      OBJECTS.ASM):00037                 BSR     PROPL
33AA 973D             (      OBJECTS.ASM):00038                 STA     VAL
33AC                  (      OBJECTS.ASM):00039         PPX:
33AC 5C               (      OBJECTS.ASM):00040                 INCB
33AD 0A3D             (      OBJECTS.ASM):00041                 DEC     VAL
33AF 2AFB             (      OBJECTS.ASM):00042                 BPL     PPX
33B1 5C               (      OBJECTS.ASM):00043                 INCB
33B2 39               (      OBJECTS.ASM):00044                 RTS
                      (      OBJECTS.ASM):00045         
33B3                  (      OBJECTS.ASM):00046         FLAGSU:
33B3 9603             (      OBJECTS.ASM):00047                 LDA     ARG1+1
33B5 BD33E1           (      OBJECTS.ASM):00048                 JSR     OBJLOC
33B8 9605             (      OBJECTS.ASM):00049                 LDA     ARG2+1
33BA 8110             (      OBJECTS.ASM):00050                 CMPA    #16
33BC 2508             (      OBJECTS.ASM):00051                 BLO     FLGSU1
33BE 8010             (      OBJECTS.ASM):00052                 SUBA    #16
33C0 9E3F             (      OBJECTS.ASM):00053                 LDX     TEMP
33C2 3002             (      OBJECTS.ASM):00054                 LEAX    2,X
33C4 9F3F             (      OBJECTS.ASM):00055                 STX     TEMP
                      (      OBJECTS.ASM):00056         
33C6                  (      OBJECTS.ASM):00057         FLGSU1:
33C6 973E             (      OBJECTS.ASM):00058                 STA     VAL+1
33C8 CC0001           (      OBJECTS.ASM):00059                 LDD     #1
33CB DD43             (      OBJECTS.ASM):00060                 STD     MASK
33CD C60F             (      OBJECTS.ASM):00061                 LDB     #15
33CF D03E             (      OBJECTS.ASM):00062                 SUBB    VAL+1
                      (      OBJECTS.ASM):00063         
33D1                  (      OBJECTS.ASM):00064         FLGSU2:
33D1 2707             (      OBJECTS.ASM):00065                 BEQ     FLGSU3
33D3 0844             (      OBJECTS.ASM):00066                 ASL     MASK+1
33D5 0943             (      OBJECTS.ASM):00067                 ROL     MASK
33D7 5A               (      OBJECTS.ASM):00068                 DECB
33D8 20F7             (      OBJECTS.ASM):00069                 BRA     FLGSU2
                      (      OBJECTS.ASM):00070         
33DA                  (      OBJECTS.ASM):00071         FLGSU3:
33DA 9E3F             (      OBJECTS.ASM):00072                 LDX     TEMP
33DC EC84             (      OBJECTS.ASM):00073                 LDD     ,X
33DE DD3D             (      OBJECTS.ASM):00074                 STD     VAL
33E0 39               (      OBJECTS.ASM):00075                 RTS
                      (      OBJECTS.ASM):00076         
33E1                  (      OBJECTS.ASM):00077         OBJLOC:
33E1 C609             (      OBJECTS.ASM):00078                 LDB     #9                                ; NUMBER IN [A] TIMES 9
33E3 3D               (      OBJECTS.ASM):00079                 MUL
33E4 C30035           (      OBJECTS.ASM):00080                 ADDD    #53                               ; PLUS 53
33E7 F33E14           (      OBJECTS.ASM):00081                 ADDD    ZCODE+ZOBJEC                      ; Z-ADDRESS OF OBJECT TABLE
33EA C33E0A           (      OBJECTS.ASM):00082                 ADDD    #ZCODE                            ; FORM ABSOLUTE ADDRESS
33ED DD3F             (      OBJECTS.ASM):00083                 STD     TEMP
33EF 39               (      OBJECTS.ASM):00084                 RTS
                      (     cubixzip.asm):00063         
                      (     cubixzip.asm):00064         ;TITLE "ZIP/6809-B INFOCOM, INC. --- CUBIX DEPENDENT"
                      (     cubixzip.asm):00065                 INCLUDE IO.ASM
                      (           IO.ASM):00001         ;       PAGE
                      (           IO.ASM):00002         ;       SBTTL "--- OS EQUATES ---"
                      (           IO.ASM):00003         
     000D             (           IO.ASM):00004         EOL             EQU $0D                           ; END-OF-LINE CHARACTER
     0008             (           IO.ASM):00005         BS              EQU $08                           ; BACKSPACE CHARACTER
     0020             (           IO.ASM):00006         SPACE           EQU $20                           ; SPACE CHARACTER
                      (           IO.ASM):00007         
                      (           IO.ASM):00008         ;        PAGE
                      (           IO.ASM):00009         ;        SBTTL   "I/O PRIMITIVES"
                      (           IO.ASM):00010         
                      (           IO.ASM):00011         
                      (           IO.ASM):00012         
                      (           IO.ASM):00013         ; --------------------
                      (           IO.ASM):00014         ; ACCESS OS CHAR-PRINT
                      (           IO.ASM):00015         ; --------------------
                      (           IO.ASM):00016         
                      (           IO.ASM):00017         
33F0                  (           IO.ASM):00018         OUTCHR:
33F0 3F               (           IO.ASM):00019                 SWI
33F1 21               (           IO.ASM):00020                 FCB     33                                ;DISPLAY
33F2 39               (           IO.ASM):00021                 RTS
                      (           IO.ASM):00022         
                      (           IO.ASM):00023         ; -----------------
                      (           IO.ASM):00024         ; READ A SINGLE KEY
                      (           IO.ASM):00025         ; -----------------
                      (           IO.ASM):00026         
                      (           IO.ASM):00027         ; EXIT: KEYCODE IN [A]
                      (           IO.ASM):00028         
33F3                  (           IO.ASM):00029         BADKEY:
33F3 BD34BC           (           IO.ASM):00030                 JSR     BOOP                              ; RAZZ
33F6 2002             (           IO.ASM):00031                 BRA     GK                                ; AND TRY AGAIN
                      (           IO.ASM):00032         
33F8                  (           IO.ASM):00033         GETKEY:
33F8 3474             (           IO.ASM):00034                 PSHS    U,X,Y,B                           ; SAVE THESE
                      (           IO.ASM):00035         
                      (           IO.ASM):00036         
33FA                  (           IO.ASM):00037         GK:
33FA 3F               (           IO.ASM):00038                 SWI
33FB 23               (           IO.ASM):00039                 FCB     35
33FC 2708             (           IO.ASM):00040                 BEQ     KTEST                             ; got a key
33FE 0C58             (           IO.ASM):00041                 INC     RAND1                             ; GENERATE RANDOMNESS
3400 2602             (           IO.ASM):00042                 BNE     >
3402 0C59             (           IO.ASM):00043                 INC     RAND2
                      (           IO.ASM):00044         !
3404 20F4             (           IO.ASM):00045                 BRA     GK
3406                  (           IO.ASM):00046         KTEST:
3406 3F               (           IO.ASM):00047                 SWI
3407 22               (           IO.ASM):00048                 FCB     34
3408 9755             (           IO.ASM):00049                 STA     IOCHAR                            ; STORE THE KEYPRESS
                      (           IO.ASM):00050         
                      (           IO.ASM):00051         
                      (           IO.ASM):00052         ; KEYCODE IN [A]
                      (           IO.ASM):00053         
340A                  (           IO.ASM):00054         QKEY:
340A 810D             (           IO.ASM):00055                 CMPA    #EOL                              ; "ENTER" IS FINE
340C 2718             (           IO.ASM):00056                 BEQ     CLICK
340E 8108             (           IO.ASM):00057                 CMPA    #BS                               ; SO IS "LEFT ARROW"
3410 2714             (           IO.ASM):00058                 BEQ     CLICK
                      (           IO.ASM):00059         
3412 8161             (           IO.ASM):00060                 CMPA    #$61                              ; LOWER-CASE ALPHA?
3414 2508             (           IO.ASM):00061                 BLO     PKICK                             ; NO, CHECK FOR OTHERS
3416 817B             (           IO.ASM):00062                 CMPA    #$7B                              ; NOTHING ABOVE "z" IS LEGAL
3418 24D9             (           IO.ASM):00063                 BHS     BADKEY
341A 8020             (           IO.ASM):00064                 SUBA    #$20                              ; CONVERT TO UPPER-CASE ALPHA
341C 2008             (           IO.ASM):00065                 BRA     CLICK
                      (           IO.ASM):00066         
341E                  (           IO.ASM):00067         PKICK:
341E 815B             (           IO.ASM):00068                 CMPA    #$5B                              ; NOTHING BETWEEN "Z" AND "a"
3420 24D1             (           IO.ASM):00069                 BHS     BADKEY                            ; IS LEGAL
3422 8120             (           IO.ASM):00070                 CMPA    #$20                              ; NOTHING BELOW "SPACE"
3424 25CD             (           IO.ASM):00071                 BLO     BADKEY                            ; IS LEGAL EITHER
                      (           IO.ASM):00072         
                      (           IO.ASM):00073         ; "CLICK" SOUND FOR KEYS
                      (           IO.ASM):00074         
3426                  (           IO.ASM):00075         CLICK:
3426 3574             (           IO.ASM):00076                 PULS    U,X,Y,B                           ; RESTORE THINGS
3428 9655             (           IO.ASM):00077                 LDA     IOCHAR                            ; RETRIEVE THE KEYPRESS
342A 39               (           IO.ASM):00078                 RTS
                      (           IO.ASM):00079         
                      (           IO.ASM):00080         
                      (           IO.ASM):00081         ; DELAY FOR KEYCLICK
                      (           IO.ASM):00082         
342B                  (           IO.ASM):00083         CDELAY:
342B 8E0100           (           IO.ASM):00084                 LDX     #CFREQ
342E                  (           IO.ASM):00085         CDEL:
342E 301F             (           IO.ASM):00086                 LEAX    -1,X
3430 26FC             (           IO.ASM):00087                 BNE     CDEL
3432 39               (           IO.ASM):00088                 RTS
                      (           IO.ASM):00089         
                      (           IO.ASM):00090         ; -------------------
                      (           IO.ASM):00091         ; READ A LINE OF TEXT
                      (           IO.ASM):00092         ; -------------------
                      (           IO.ASM):00093         
                      (           IO.ASM):00094         ; ENTRY: [ARG1] HAS ADDRESS OF CHAR BUFFER
                      (           IO.ASM):00095         ;        LENGTH OF BUFFER IN 1ST BYTE
                      (           IO.ASM):00096         ; EXIT: # CHARS READ IN [A]
                      (           IO.ASM):00097         
3433                  (           IO.ASM):00098         INPUT:
3433 BD35CB           (           IO.ASM):00099                 JSR     LINOUT                            ; FLUSH OUTPUT BUFFER
3436 0F54             (           IO.ASM):00100                 CLR     LINCNT                            ; RESET LINE COUNTER
3438 9E02             (           IO.ASM):00101                 LDX     ARG1                              ; GET ADDRESS OF INPUT BUFFER
343A E680             (           IO.ASM):00102                 LDB     ,X+                               ; GET MAX # CHARS
343C C002             (           IO.ASM):00103                 SUBB    #2                                ; LEAVE A MARGIN FOR ERROR
343E D753             (           IO.ASM):00104                 STB     BINDEX                            ; SAVE MAX # CHARS
                      (           IO.ASM):00105         
3440 5F               (           IO.ASM):00106                 CLRB                                      ; RESET       INDEX
3441                  (           IO.ASM):00107         INLOOP:
3441 BD33F8           (           IO.ASM):00108                 JSR     GETKEY                            ; KEY IN [A] AND [IOCHAR]
3444 810D             (           IO.ASM):00109                 CMPA    #EOL                              ; IF EOL,
3446 2732             (           IO.ASM):00110                 BEQ     ENDLIN                            ; LINE IS DONE
3448 8108             (           IO.ASM):00111                 CMPA    #BS                               ; IF BACKSPACE,
344A 2725             (           IO.ASM):00112                 BEQ     GOBACK                            ; TAKE CARE OF IT
                      (           IO.ASM):00113         
344C 8141             (           IO.ASM):00114                 CMPA    #$41                              ; IF LOWER THAN ASCII "A,"
344E 2502             (           IO.ASM):00115                 BLO     SENDCH                            ; SEND THE CHARACTER
3450 8B20             (           IO.ASM):00116                 ADDA    #$20                              ; ELSE CONVERT TO LOWER-CASE
                      (           IO.ASM):00117         
3452                  (           IO.ASM):00118         SENDCH:
3452 A785             (           IO.ASM):00119                 STA     B,X                               ; SEND CHAR TO BUFFER
3454 5C               (           IO.ASM):00120                 INCB                                      ; UPDATE INDEX
3455                  (           IO.ASM):00121         TOSCR:
3455 9655             (           IO.ASM):00122                 LDA     IOCHAR                            ; RETRIEVE KEY CHAR
3457 8D40             (           IO.ASM):00123                 BSR     CHAR                              ; ECHO CHAR TO SCREEN
3459 D153             (           IO.ASM):00124                 CMPB    BINDEX                            ; BUFFER FILLED?
345B 2404             (           IO.ASM):00125                 BHS     NOMORE                            ; YES -- INSIST ON BS OR EOL
345D C13D             (           IO.ASM):00126                 CMPB    #61                               ; 2 SCREEN LINES FILLED?
345F 25E0             (           IO.ASM):00127                 BLO     INLOOP                            ; NO, KEEP GOING
                      (           IO.ASM):00128         
                      (           IO.ASM):00129         ; LINE FULL; INSIST ON EOL OR BACKSPACE
                      (           IO.ASM):00130         
3461                  (           IO.ASM):00131         NOMORE:
3461 BD33F8           (           IO.ASM):00132                 JSR     GETKEY                            ; GET NEXT KEY
3464 810D             (           IO.ASM):00133                 CMPA    #EOL                              ; IF EOL,
3466 2712             (           IO.ASM):00134                 BEQ     ENDLIN                            ; WE'RE FINE
3468 8108             (           IO.ASM):00135                 CMPA    #BS                               ; BACKSPACE
346A 2705             (           IO.ASM):00136                 BEQ     GOBACK                            ; IS OKAY TOO
346C BD34BC           (           IO.ASM):00137                 JSR     BOOP
346F 20F0             (           IO.ASM):00138                 BRA     NOMORE                            ; ELSE PERSIST
                      (           IO.ASM):00139         
                      (           IO.ASM):00140         ; HANDLE BACKSPACE
                      (           IO.ASM):00141         
3471                  (           IO.ASM):00142         GOBACK:
3471 5A               (           IO.ASM):00143                 DECB                                      ; BACK UP CHAR COUNT
3472 2AE1             (           IO.ASM):00144                 BPL     TOSCR                             ; SEND TO SCREEN IF NO UNDERFLOW
3474 5F               (           IO.ASM):00145                 CLRB                                      ; ELSE RESET COUNT
3475 BD34BC           (           IO.ASM):00146                 JSR     BOOP                              ; RAZZ
3478 20C7             (           IO.ASM):00147                 BRA     INLOOP                            ; AND TRY AGAIN
                      (           IO.ASM):00148         
                      (           IO.ASM):00149         ; HANDLE EOL
                      (           IO.ASM):00150         
347A                  (           IO.ASM):00151         ENDLIN:
347A A785             (           IO.ASM):00152                 STA     B,X                               ; PUT EOL IN BUFFER
347C 8D1B             (           IO.ASM):00153                 BSR     CHAR                              ; AND ON SCREEN
347E 5C               (           IO.ASM):00154                 INCB                                      ; UPDATE CHAR COUNT
347F D753             (           IO.ASM):00155                 STB     BINDEX                            ; SAVE IT HERE
                      (           IO.ASM):00156         
                      (           IO.ASM):00157         ; FALL THROUGH TO ...
                      (           IO.ASM):00158         
                      (           IO.ASM):00159         ; ---------------------
                      (           IO.ASM):00160         ; SCRIPT A LINE OF TEXT
                      (           IO.ASM):00161         ; ---------------------
                      (           IO.ASM):00162         
                      (           IO.ASM):00163         ; ENTRY: ADDRESS OF TEXT IN [X]
                      (           IO.ASM):00164         ;        LENGTH OF LINE IN [BINDEX]
                      (           IO.ASM):00165         
3481                  (           IO.ASM):00166         TOPRIN:
3481 0D5E             (           IO.ASM):00167                 TST     SCRIPT                            ; SCRIPTING ENABLED?
3483 2710             (           IO.ASM):00168                 BEQ     INPEX                             ; NO, EXIT IMMEDIATELY
3485 B63E1B           (           IO.ASM):00169                 LDA     ZCODE+ZSCRIP+1                    ; GET FLAGS BYTE
3488 8401             (           IO.ASM):00170                 ANDA    #1                                ; BIT 0 SET?
348A 2709             (           IO.ASM):00171                 BEQ     INPEX                             ; NO, IGNORE THE FOLLOWING
                      (           IO.ASM):00172         ;        LDA     #$FE                              ; ELSE
                      (           IO.ASM):00173         ;        STA     DEVNUM                            ; POINT TO PRINTER
348C D653             (           IO.ASM):00174                 LDB     BINDEX                            ; START AT 1ST BUFFER CHAR
                      (           IO.ASM):00175         
                      (           IO.ASM):00176         
348E                  (           IO.ASM):00177         SCROUT:
348E A680             (           IO.ASM):00178                 LDA     ,X+                               ; GRAB A CHAR FROM BUFFER
3490 3F               (           IO.ASM):00179                 SWI
3491 21               (           IO.ASM):00180                 FCB     33                                ;DISPLAY
3492 5A               (           IO.ASM):00181                 DECB
3493 26F9             (           IO.ASM):00182                 BNE     SCROUT
3495                  (           IO.ASM):00183         INPEX:
                      (           IO.ASM):00184         ;        CLR     DEVNUM                            ; POINT BACK TO SCREEN
3495 9653             (           IO.ASM):00185                 LDA     BINDEX                            ; RETRIEVE # CHARS IN LINE
3497 39               (           IO.ASM):00186                 RTS
                      (           IO.ASM):00187         
3498                  (           IO.ASM):00188         SFLAG
3498 00               (           IO.ASM):00189                 FCB     0                                 ; FLAG TO SAVE SCRIPT STATE
                      (           IO.ASM):00190         
                      (           IO.ASM):00191         
                      (           IO.ASM):00192         ; -------------------
                      (           IO.ASM):00193         ; PRINT A SINGLE CHAR
                      (           IO.ASM):00194         ; -------------------
                      (           IO.ASM):00195         
                      (           IO.ASM):00196         ; ENTRY: ASCII CODE IN [A]
                      (           IO.ASM):00197         
3499                  (           IO.ASM):00198         CHAR:
3499 9755             (           IO.ASM):00199                 STA     IOCHAR                            ; SAVE CHAR HERE
349B 3F               (           IO.ASM):00200                 SWI
349C 21               (           IO.ASM):00201                 FCB     33
349D 39               (           IO.ASM):00202                 RTS
                      (           IO.ASM):00203         
                      (           IO.ASM):00204         
                      (           IO.ASM):00205         ; --------------------------
                      (           IO.ASM):00206         ; PRINT CONTENTS OF [BUFFER]
                      (           IO.ASM):00207         ; --------------------------
                      (           IO.ASM):00208         
349E                  (           IO.ASM):00209         BUFOUT:
349E D651             (           IO.ASM):00210                 LDB     CHRPNT                            ; # CHARS IN BUFFER
34A0 8E262A           (           IO.ASM):00211                 LDX     #BUFFER                           ; BUFFER ADDRESS
                      (           IO.ASM):00212         
                      (           IO.ASM):00213         ; FALL THROUGH TO ...
                      (           IO.ASM):00214         
                      (           IO.ASM):00215         ; -------------
                      (           IO.ASM):00216         ; PRINT MESSAGE
                      (           IO.ASM):00217         ; -------------
                      (           IO.ASM):00218         
                      (           IO.ASM):00219         ; ENTRY: ADDRESS OF ASCII MESSAGE IN [X]
                      (           IO.ASM):00220         ;        LENGTH OF MESSAGE IN [B]
                      (           IO.ASM):00221         
34A3                  (           IO.ASM):00222         LINE:
34A3 D753             (           IO.ASM):00223                 STB     BINDEX                            ; SAVE LENGTH
34A5 5F               (           IO.ASM):00224                 CLRB                                      ; INIT INDEX
                      (           IO.ASM):00225         
34A6                  (           IO.ASM):00226         LN:
34A6 A685             (           IO.ASM):00227                 LDA     B,X                               ; GET A CHAR
34A8 BD3499           (           IO.ASM):00228                 JSR     CHAR
34AB 5C               (           IO.ASM):00229                 INCB
34AC D153             (           IO.ASM):00230                 CMPB    BINDEX
34AE 25F6             (           IO.ASM):00231                 BLO     LN
34B0 7E3481           (           IO.ASM):00232                 JMP     TOPRIN                            ; HANDLE SCRIPTING
                      (           IO.ASM):00233         
                      (           IO.ASM):00234         ; ----------------
                      (           IO.ASM):00235         ; CLEAR THE SCREEN
                      (           IO.ASM):00236         ; ----------------
                      (           IO.ASM):00237         
34B3                  (           IO.ASM):00238         CLS:
34B3 3F               (           IO.ASM):00239                 SWI
34B4 18               (           IO.ASM):00240                 FCB     24                                ;String to OS
34B5 1B               (           IO.ASM):00241                 FCB     27
34B6 5B324A00         (           IO.ASM):00242                 FCN     '[2J'
34BA 39               (           IO.ASM):00243                 RTS
                      (           IO.ASM):00244         
                      (           IO.ASM):00245         ; --------------
                      (           IO.ASM):00246         ; SOUND HANDLERS
                      (           IO.ASM):00247         ; --------------
                      (           IO.ASM):00248         
34BB                  (           IO.ASM):00249         AINIT:
34BB 39               (           IO.ASM):00250                 RTS
                      (           IO.ASM):00251         
                      (           IO.ASM):00252         ; DO THE RAZZ
34BC                  (           IO.ASM):00253         BOOP:
                      (           IO.ASM):00254         
                      (           IO.ASM):00255         ; put sound boop here
                      (           IO.ASM):00256         
34BC 39               (           IO.ASM):00257                 RTS
                      (           IO.ASM):00258         
                      (           IO.ASM):00259         ; TIME DELAY
                      (           IO.ASM):00260         
34BD                  (           IO.ASM):00261         DELAY:
34BD 8E1000           (           IO.ASM):00262                 LDX     #BFREQ                            ; INIT FREQUENCY
34C0                  (           IO.ASM):00263         DELOOP:
34C0 301F             (           IO.ASM):00264                 LEAX    -1,X
34C2 26FC             (           IO.ASM):00265                 BNE     DELOOP
34C4 39               (           IO.ASM):00266                 RTS
                      (           IO.ASM):00267         
                      (           IO.ASM):00268         ;-----------------------------------------------------------------------------
                      (     cubixzip.asm):00066                 INCLUDE SCREEN.ASM
                      (       SCREEN.ASM):00001         ;       PAGE
                      (       SCREEN.ASM):00002         ;       SBTTL "--- SCREEN & PRINTER I/O ---"
                      (       SCREEN.ASM):00003         
                      (       SCREEN.ASM):00004         ; ------------
                      (       SCREEN.ASM):00005         ; RESTART GAME
                      (       SCREEN.ASM):00006         ; ------------
                      (       SCREEN.ASM):00007         
34C5                  (       SCREEN.ASM):00008         ZSTART:
34C5 BD359D           (       SCREEN.ASM):00009                 JSR     ZCRLF                             ; FLUSH OUTPUT BUFFER
34C8 0F5E             (       SCREEN.ASM):00010                 CLR     SCRIPT                            ; DISABLE SCRIPTING [ASK 5/28/85]
                      (       SCREEN.ASM):00011         ;       JSR     ENTER           ; "PRESS ANY KEY TO CONTINUE"[ASK 5/28/85]
34CA B63E1B           (       SCREEN.ASM):00012                 LDA     ZCODE+ZSCRIP+1
34CD B73498           (       SCREEN.ASM):00013                 STA     SFLAG
34D0 7E34D5           (       SCREEN.ASM):00014                 JMP     LUKE                              ; SKIP SCRIPT DISABLE
                      (       SCREEN.ASM):00015         ; FALL THROUGH TO ...
                      (       SCREEN.ASM):00016         
                      (       SCREEN.ASM):00017         ; ---------
                      (       SCREEN.ASM):00018         ; COLDSTART
                      (       SCREEN.ASM):00019         ; ---------
                      (       SCREEN.ASM):00020         
34D3                  (       SCREEN.ASM):00021         COLD:
34D3 0F5E             (       SCREEN.ASM):00022                 CLR     SCRIPT                            ; DISABLE SCRIPTING
34D5                  (       SCREEN.ASM):00023         LUKE:
34D5 BD34B3           (       SCREEN.ASM):00024                 JSR     CLS                               ; A CLEAN SLATE
34D8 8E34E3           (       SCREEN.ASM):00025                 LDX     #LOADM                            ;
34DB C618             (       SCREEN.ASM):00026                 LDB     #LOADML
34DD BD3897           (       SCREEN.ASM):00027                 JSR     DLINE                             ; "LOADING GAME ..."
34E0 7E270A           (       SCREEN.ASM):00028                 JMP     START                             ; AND DO A WARMSTART
                      (       SCREEN.ASM):00029         
34E3                  (       SCREEN.ASM):00030         LOADM:
34E3 5448452053544F52 (       SCREEN.ASM):00031                 FCC     "THE STORY IS LOADING ..."
     59204953204C4F41
     44494E47202E2E2E
34FB                  (       SCREEN.ASM):00032         loadlen:
     0018             (       SCREEN.ASM):00033         LOADML          EQU loadlen-LOADM
                      (       SCREEN.ASM):00034         
                      (       SCREEN.ASM):00035         ; -----
                      (       SCREEN.ASM):00036         ; ERROR
                      (       SCREEN.ASM):00037         ; -----
                      (       SCREEN.ASM):00038         
                      (       SCREEN.ASM):00039         ; ENTRY: ERROR CODE # IN [A]
                      (       SCREEN.ASM):00040         
34FB                  (       SCREEN.ASM):00041         INTERR:
34FB 0D               (       SCREEN.ASM):00042                 FCB     EOL
34FC 494E5445524E414C (       SCREEN.ASM):00043                 FCC     "INTERNAL ERROR #"
     204552524F522023
350C                  (       SCREEN.ASM):00044         interrlen:
     0011             (       SCREEN.ASM):00045         IERRL           EQU interrlen-INTERR
                      (       SCREEN.ASM):00046         
350C                  (       SCREEN.ASM):00047         ZERROR:
350C 3402             (       SCREEN.ASM):00048                 PSHS    A                                 ; SAVE CODE #
350E BD359D           (       SCREEN.ASM):00049                 JSR     ZCRLF                             ; FLUSH BUFFER
3511 8E34FB           (       SCREEN.ASM):00050                 LDX     #INTERR
3514 C611             (       SCREEN.ASM):00051                 LDB     #IERRL
3516 BD34A3           (       SCREEN.ASM):00052                 JSR     LINE                              ; "INTERNAL ERROR #"
3519 3502             (       SCREEN.ASM):00053                 PULS    A                                 ; RETRIEVE CODE #
351B 9740             (       SCREEN.ASM):00054                 STA     TEMP+1
351D 0F3F             (       SCREEN.ASM):00055                 CLR     TEMP
351F BD2F10           (       SCREEN.ASM):00056                 JSR     NUMBER                            ; CONVERT ERROR CODE #
3522 BD35C0           (       SCREEN.ASM):00057                 JSR     CR1                               ; AND SHOW IT
                      (       SCREEN.ASM):00058         
                      (       SCREEN.ASM):00059         ; FALL THROUGH TO ...
                      (       SCREEN.ASM):00060         
                      (       SCREEN.ASM):00061         ; ----
                      (       SCREEN.ASM):00062         ; QUIT
                      (       SCREEN.ASM):00063         ; ----
                      (       SCREEN.ASM):00064         
3525                  (       SCREEN.ASM):00065         ZQUIT:
3525 8E3531           (       SCREEN.ASM):00066                 LDX     #ENDSES
3528 C60F             (       SCREEN.ASM):00067                 LDB     #ENDSL
352A BD34A3           (       SCREEN.ASM):00068                 JSR     LINE                              ; "END OF SESSION"
                      (       SCREEN.ASM):00069         
352D 3F               (       SCREEN.ASM):00070                 SWI
352E 00               (       SCREEN.ASM):00071                 FCB     00
                      (       SCREEN.ASM):00072         
                      (       SCREEN.ASM):00073         
352F                  (       SCREEN.ASM):00074         FREEZE:
352F 20FE             (       SCREEN.ASM):00075                 BRA     FREEZE                            ; STOP DEAD
                      (       SCREEN.ASM):00076         
3531                  (       SCREEN.ASM):00077         ENDSES:
3531 454E44204F462053 (       SCREEN.ASM):00078                 FCC     "END OF SESSION"
     455353494F4E
353F                  (       SCREEN.ASM):00079         VCODE:
353F 0D               (       SCREEN.ASM):00080                 FCB     EOL                               ; SHARED EOL CHAR
3540                  (       SCREEN.ASM):00081         endseslen:
     000F             (       SCREEN.ASM):00082         ENDSL           EQU endseslen-ENDSES
                      (       SCREEN.ASM):00083         
                      (       SCREEN.ASM):00084         ; --------------------------
                      (       SCREEN.ASM):00085         ; DISPLAY ZIP VERSION NUMBER
                      (       SCREEN.ASM):00086         ; --------------------------
                      (       SCREEN.ASM):00087         
3540 434F434F20322056 (       SCREEN.ASM):00088                 FCC     "COCO 2 VERSION C"
     455253494F4E2043
3550 0D               (       SCREEN.ASM):00089                 FCB     EOL
3551                  (       SCREEN.ASM):00090         vcodelen:
     0012             (       SCREEN.ASM):00091         VCODEL          EQU vcodelen-VCODE
                      (       SCREEN.ASM):00092         
3551                  (       SCREEN.ASM):00093         VERNUM:
3551 8E353F           (       SCREEN.ASM):00094                 LDX     #VCODE
3554 C612             (       SCREEN.ASM):00095                 LDB     #VCODEL
3556 7E34A3           (       SCREEN.ASM):00096                 JMP     LINE
                      (       SCREEN.ASM):00097         
                      (       SCREEN.ASM):00098         ; -----------------
                      (       SCREEN.ASM):00099         ; PRINT A CHARACTER
                      (       SCREEN.ASM):00100         ; -----------------
                      (       SCREEN.ASM):00101         
3559                  (       SCREEN.ASM):00102         COUT:
3559 8E262A           (       SCREEN.ASM):00103                 LDX     #BUFFER                           ; POINT TO I/O BUFFER
355C D651             (       SCREEN.ASM):00104                 LDB     CHRPNT                            ; GET LINE INDEX
355E 810D             (       SCREEN.ASM):00105                 CMPA    #EOL                              ; IF THIS IS A CR,
3560 273B             (       SCREEN.ASM):00106                 BEQ     ZCRLF                             ; HANDLE AS SUCH
3562 8120             (       SCREEN.ASM):00107                 CMPA    #SPACE                            ; IGNORE OTHER CONTROLS
3564 2508             (       SCREEN.ASM):00108                 BLO     COUT1
                      (       SCREEN.ASM):00109         
3566 A785             (       SCREEN.ASM):00110                 STA     B,X                               ; SEND CHAR TO BUFFER
3568 C11F             (       SCREEN.ASM):00111                 CMPB    #31                               ; END OF SCREEN LINE?
356A 2403             (       SCREEN.ASM):00112                 BHS     FLUSH                             ; YES, SO FLUSH CURRENT BUFFER
356C 0C51             (       SCREEN.ASM):00113                 INC     CHRPNT                            ; ELSE UPDATE INDEX
356E                  (       SCREEN.ASM):00114         COUT1:
356E 39               (       SCREEN.ASM):00115                 RTS                                       ; AND LEAVE
                      (       SCREEN.ASM):00116         
                      (       SCREEN.ASM):00117         ; FLUSH CONTENTS OF [BUFFER]
                      (       SCREEN.ASM):00118         
356F                  (       SCREEN.ASM):00119         FLUSH:
356F 8620             (       SCREEN.ASM):00120                 LDA     #SPACE
3571                  (       SCREEN.ASM):00121         FLUSH1:
3571 A185             (       SCREEN.ASM):00122                 CMPA    B,X                               ; FIND LAST SPACE CHAR
3573 2705             (       SCREEN.ASM):00123                 BEQ     FLUSH2                            ; IN CURRENT LINE
3575 5A               (       SCREEN.ASM):00124                 DECB
3576 26F9             (       SCREEN.ASM):00125                 BNE     FLUSH1                            ; KEEP SCANNING
3578 C61F             (       SCREEN.ASM):00126                 LDB     #31                               ; SEND ENTIRE LINE IF NONE FOUND
                      (       SCREEN.ASM):00127         
357A                  (       SCREEN.ASM):00128         FLUSH2:
357A D752             (       SCREEN.ASM):00129                 STB     CPSAV                             ; SAVE
357C D751             (       SCREEN.ASM):00130                 STB     CHRPNT                            ; # CHARS IN LINE
357E BD359D           (       SCREEN.ASM):00131                 JSR     ZCRLF                             ; OUTPUT 1ST PART OF LINE
                      (       SCREEN.ASM):00132         
                      (       SCREEN.ASM):00133         ; START NEW LINE WITH REMAINDER OF OLD
                      (       SCREEN.ASM):00134         
3581                  (       SCREEN.ASM):00135         FLUSH3:
3581 0C52             (       SCREEN.ASM):00136                 INC     CPSAV                             ; GET 1ST CHAR
3583 D652             (       SCREEN.ASM):00137                 LDB     CPSAV                             ; OF REMAINDER
3585 C11F             (       SCREEN.ASM):00138                 CMPB    #31                               ; END OF LINE YET?
3587 2301             (       SCREEN.ASM):00139                 BLS     FLUSH4                            ; NO, MOVE IT FORWARD
3589 39               (       SCREEN.ASM):00140                 RTS                                       ; ELSE WE'RE DONE HERE
                      (       SCREEN.ASM):00141         
358A                  (       SCREEN.ASM):00142         FLUSH4:
358A 8E262A           (       SCREEN.ASM):00143                 LDX     #BUFFER                           ; POINT TO BUFFER
358D A685             (       SCREEN.ASM):00144                 LDA     B,X                               ; GET OLD CHAR
358F D651             (       SCREEN.ASM):00145                 LDB     CHRPNT                            ; THIS WAS RESET BY CRLF
3591 A785             (       SCREEN.ASM):00146                 STA     B,X                               ; MOVE TO START OF BUFFER
3593 0C51             (       SCREEN.ASM):00147                 INC     CHRPNT                            ; NEXT POSITION
3595 20EA             (       SCREEN.ASM):00148                 BRA     FLUSH3                            ; KEEP MOVING
                      (       SCREEN.ASM):00149         
3597                  (       SCREEN.ASM):00150         MORES:
3597 5B6D6F72655D     (       SCREEN.ASM):00151                 FCC     "[more]"
359D                  (       SCREEN.ASM):00152         morlen:
     0006             (       SCREEN.ASM):00153         MOREL           EQU morlen-MORES
                      (       SCREEN.ASM):00154         
                      (       SCREEN.ASM):00155         ; ---------------
                      (       SCREEN.ASM):00156         ; CARRIAGE RETURN
                      (       SCREEN.ASM):00157         ; ---------------
                      (       SCREEN.ASM):00158         
359D                  (       SCREEN.ASM):00159         ZCRLF:
359D 0C54             (       SCREEN.ASM):00160                 INC     LINCNT                            ; NEW LINE GOING OUT
359F 9654             (       SCREEN.ASM):00161                 LDA     LINCNT
35A1 810D             (       SCREEN.ASM):00162                 CMPA    #13                               ; 13 LINES SENT YET?
35A3 251B             (       SCREEN.ASM):00163                 BLO     CR1                               ; NO, KEEP GOING
                      (       SCREEN.ASM):00164         
35A5 8D2E             (       SCREEN.ASM):00165                 BSR     ZUSL                              ; UPDATE STATUS LINE
                      (       SCREEN.ASM):00166         
35A7 8E3597           (       SCREEN.ASM):00167                 LDX     #MORES                            ; "[MORE]"
35AA C606             (       SCREEN.ASM):00168                 LDB     #MOREL
35AC BD3897           (       SCREEN.ASM):00169                 JSR     DLINE
                      (       SCREEN.ASM):00170         
35AF 0F5D             (       SCREEN.ASM):00171                 CLR     CFLAG                             ; NO CURSOR!
35B1 BD33F8           (       SCREEN.ASM):00172                 JSR     GETKEY                            ; GET A KEYPRESS
                      (       SCREEN.ASM):00173         
                      (       SCREEN.ASM):00174         
35B4 8620             (       SCREEN.ASM):00175                 LDA     #SPACE                            ; ERASE "MORE" MESSAGE
35B6 C606             (       SCREEN.ASM):00176                 LDB     #MOREL                            ; WITH SPACES
35B8                  (       SCREEN.ASM):00177         SPCS:
35B8 BD33F0           (       SCREEN.ASM):00178                 JSR     OUTCHR
35BB 5A               (       SCREEN.ASM):00179                 DECB
35BC 26FA             (       SCREEN.ASM):00180                 BNE     SPCS
                      (       SCREEN.ASM):00181         
35BE 0F54             (       SCREEN.ASM):00182                 CLR     LINCNT                            ; RESET LINE COUNTER
                      (       SCREEN.ASM):00183         
35C0                  (       SCREEN.ASM):00184         CR1:
35C0 D651             (       SCREEN.ASM):00185                 LDB     CHRPNT
35C2 8E262A           (       SCREEN.ASM):00186                 LDX     #BUFFER
35C5 860D             (       SCREEN.ASM):00187                 LDA     #EOL                              ; INSTALL AN EOL
35C7 A785             (       SCREEN.ASM):00188                 STA     B,X                               ; AT END OF CURRENT LINE
35C9 0C51             (       SCREEN.ASM):00189                 INC     CHRPNT                            ; ADD IT TO CHAR COUNT
                      (       SCREEN.ASM):00190         
35CB                  (       SCREEN.ASM):00191         LINOUT:
35CB 0D51             (       SCREEN.ASM):00192                 TST     CHRPNT                            ; IF NO CHARS IN BUFFER
35CD 2705             (       SCREEN.ASM):00193                 BEQ     SCDONE                            ; DON'T PRINT ANYTHING
35CF                  (       SCREEN.ASM):00194         OUTPUT:
35CF BD349E           (       SCREEN.ASM):00195                 JSR     BUFOUT                            ; ELSE DISPLAY BUFFER
35D2 0F51             (       SCREEN.ASM):00196                 CLR     CHRPNT                            ; RESET CHAR INDEX
35D4                  (       SCREEN.ASM):00197         SCDONE:
35D4 39               (       SCREEN.ASM):00198                 RTS                                       ; AND RETURN
                      (       SCREEN.ASM):00199         
                      (       SCREEN.ASM):00200         ; ------------------
                      (       SCREEN.ASM):00201         ; UPDATE STATUS LINE
                      (       SCREEN.ASM):00202         ; ------------------
                      (       SCREEN.ASM):00203         
35D5                  (       SCREEN.ASM):00204         ZUSL:
35D5 9651             (       SCREEN.ASM):00205                 LDA     CHRPNT                            ; SAVE ALL Z-STRING VARS
35D7 D62B             (       SCREEN.ASM):00206                 LDB     STBYTF
35D9 109E2C           (       SCREEN.ASM):00207                 LDY     ZSTWRD
35DC 3436             (       SCREEN.ASM):00208                 PSHS    X,Y,D
35DE 961A             (       SCREEN.ASM):00209                 LDA     MPCH                              ; HIGH BIT OF MPC
35E0 D653             (       SCREEN.ASM):00210                 LDB     BINDEX
35E2 9E1B             (       SCREEN.ASM):00211                 LDX     MPCM                              ; LOW BYTES OF MPC
35E4 109E29           (       SCREEN.ASM):00212                 LDY     CSTEMP                            ; TEMP & PERM TOGETHER!
35E7 3436             (       SCREEN.ASM):00213                 PSHS    X,Y,D
                      (       SCREEN.ASM):00214         
35E9 108E264A         (       SCREEN.ASM):00215                 LDY     #BUFSAV                           ; MOVE OUTPUT BUFFER
35ED 8E262A           (       SCREEN.ASM):00216                 LDX     #BUFFER                           ; TO TEMPORARY STORAGE
35F0 C620             (       SCREEN.ASM):00217                 LDB     #SPACE                            ; CLEAR [BUFFER] WITH SPACES
35F2                  (       SCREEN.ASM):00218         ZUSL1:
35F2 A684             (       SCREEN.ASM):00219                 LDA     ,X
35F4 E780             (       SCREEN.ASM):00220                 STB     ,X+
35F6 A7A0             (       SCREEN.ASM):00221                 STA     ,Y+
35F8 8C264A           (       SCREEN.ASM):00222                 CMPX    #BUFFER+32
35FB 25F5             (       SCREEN.ASM):00223                 BLO     ZUSL1
                      (       SCREEN.ASM):00224         
                      (       SCREEN.ASM):00225         
                      (       SCREEN.ASM):00226         ; DISPLAY ROOM NAME
                      (       SCREEN.ASM):00227         
35FD 0F51             (       SCREEN.ASM):00228                 CLR     CHRPNT                            ; RESET CHAR INDEX
35FF 0F5E             (       SCREEN.ASM):00229                 CLR     SCRIPT                            ; DISABLE SCRIPTING
                      (       SCREEN.ASM):00230         
3601 8610             (       SCREEN.ASM):00231                 LDA     #$10                              ; GLOBAL VAR #0 (ROOM #)
3603 BD28C9           (       SCREEN.ASM):00232                 JSR     VARGET
3606 9640             (       SCREEN.ASM):00233                 LDA     TEMP+1
3608 BD2B8B           (       SCREEN.ASM):00234                 JSR     PRNTDC                            ; GET SHORT DESC INTO [BUFFER]
                      (       SCREEN.ASM):00235         
360B 8616             (       SCREEN.ASM):00236                 LDA     #22                               ; ADVANCE BUFFER INDEX
360D 9751             (       SCREEN.ASM):00237                 STA     CHRPNT                            ; INTO SCORING POSITION
360F 8620             (       SCREEN.ASM):00238                 LDA     #SPACE                            ; PRINT A SPACE
3611 BD3559           (       SCREEN.ASM):00239                 JSR     COUT                              ; TO SEPARATE THINGS (BM 12/6/84)
                      (       SCREEN.ASM):00240         
3614 8611             (       SCREEN.ASM):00241                 LDA     #$11                              ; FETCH GLOBAL VARIABLE
3616 BD28C9           (       SCREEN.ASM):00242                 JSR     VARGET                            ; #1 (SCORE/HOURS)
3619 0D50             (       SCREEN.ASM):00243                 TST     TIMEFL                            ; TIME MODE?
361B 2607             (       SCREEN.ASM):00244                 BNE     PTIME                             ; YES IF NZ
                      (       SCREEN.ASM):00245         
                      (       SCREEN.ASM):00246         ; PRINT SCORE
                      (       SCREEN.ASM):00247         
361D BD2F10           (       SCREEN.ASM):00248                 JSR     NUMBER                            ; PRINT THE VALUE
3620 862F             (       SCREEN.ASM):00249                 LDA     #$2F                              ; ASCII SLASH
3622 2013             (       SCREEN.ASM):00250                 BRA     MOVEP
                      (       SCREEN.ASM):00251         
                      (       SCREEN.ASM):00252         ; PRINT TIME (HOURS)
                      (       SCREEN.ASM):00253         
3624                  (       SCREEN.ASM):00254         PTIME:
3624 9640             (       SCREEN.ASM):00255                 LDA     TEMP+1
3626 2602             (       SCREEN.ASM):00256                 BNE     PTIME1                            ; 00 IS REALLY 24
3628 8618             (       SCREEN.ASM):00257                 LDA     #24
362A                  (       SCREEN.ASM):00258         PTIME1:
362A 810C             (       SCREEN.ASM):00259                 CMPA    #12
362C 2F04             (       SCREEN.ASM):00260                 BLE     PTIME2                            ; IF HOURS IS GREATER THAN 12,
362E 800C             (       SCREEN.ASM):00261                 SUBA    #12                               ; CONVERT TO 12-HOUR TIME
3630 9740             (       SCREEN.ASM):00262                 STA     TEMP+1
3632                  (       SCREEN.ASM):00263         PTIME2:
3632 BD2F10           (       SCREEN.ASM):00264                 JSR     NUMBER                            ; SHOW HOURS VALUE
3635 863A             (       SCREEN.ASM):00265                 LDA     #$3A                              ; ASCII COLON
                      (       SCREEN.ASM):00266         
3637                  (       SCREEN.ASM):00267         MOVEP:
3637 BD3559           (       SCREEN.ASM):00268                 JSR     COUT                              ; SEND COLON (OR SLASH)
363A 8612             (       SCREEN.ASM):00269                 LDA     #$12                              ; GLOBAL VAR #2 (MOVES/MINUTES)
363C BD28C9           (       SCREEN.ASM):00270                 JSR     VARGET
363F 0D50             (       SCREEN.ASM):00271                 TST     TIMEFL                            ; TIME MODE?
3641 272E             (       SCREEN.ASM):00272                 BEQ     PNUM                              ; NO, DO MOVES
                      (       SCREEN.ASM):00273         
                      (       SCREEN.ASM):00274         ; PRINT MINUTES
                      (       SCREEN.ASM):00275         
3643 9640             (       SCREEN.ASM):00276                 LDA     TEMP+1
3645 810A             (       SCREEN.ASM):00277                 CMPA    #10                               ; IF LESS THAN 10 MINUTES,
3647 2405             (       SCREEN.ASM):00278                 BHS     MOVEP1
3649 8630             (       SCREEN.ASM):00279                 LDA     #$30                              ; ADD ASCII ZERO FOR PADDING
364B BD3559           (       SCREEN.ASM):00280                 JSR     COUT
                      (       SCREEN.ASM):00281         
364E                  (       SCREEN.ASM):00282         MOVEP1:
364E BD2F10           (       SCREEN.ASM):00283                 JSR     NUMBER                            ; SHOW MINUTES
                      (       SCREEN.ASM):00284         
                      (       SCREEN.ASM):00285         ; PRINT "AM/PM"
                      (       SCREEN.ASM):00286         
3651 8620             (       SCREEN.ASM):00287                 LDA     #SPACE                            ; SEPARATE TIMING
3653 BD3559           (       SCREEN.ASM):00288                 JSR     COUT                              ; FROM "AM/PM"
3656 8611             (       SCREEN.ASM):00289                 LDA     #$11                              ; GLOBAL #1 AGAIN
3658 BD28C9           (       SCREEN.ASM):00290                 JSR     VARGET
365B 9640             (       SCREEN.ASM):00291                 LDA     TEMP+1
365D 810C             (       SCREEN.ASM):00292                 CMPA    #12                               ; PAST NOON?
365F 2404             (       SCREEN.ASM):00293                 BHS     USEPM                             ; YES, IT'S PM
3661 8641             (       SCREEN.ASM):00294                 LDA     #$41                              ; "A"
3663 2002             (       SCREEN.ASM):00295                 BRA     DOM
3665                  (       SCREEN.ASM):00296         USEPM:
3665 8650             (       SCREEN.ASM):00297                 LDA     #$50                              ; "P"
3667                  (       SCREEN.ASM):00298         DOM:
3667 BD3559           (       SCREEN.ASM):00299                 JSR     COUT
366A 864D             (       SCREEN.ASM):00300                 LDA     #$4D                              ; "M"
366C BD3559           (       SCREEN.ASM):00301                 JSR     COUT
366F 2003             (       SCREEN.ASM):00302                 BRA     AHEAD                             ; DONE!
                      (       SCREEN.ASM):00303         
                      (       SCREEN.ASM):00304         ; PRINT # MOVES
                      (       SCREEN.ASM):00305         
3671                  (       SCREEN.ASM):00306         PNUM:
3671 BD2F10           (       SCREEN.ASM):00307                 JSR     NUMBER                            ; SIMPLE, EH?
                      (       SCREEN.ASM):00308         
3674                  (       SCREEN.ASM):00309         AHEAD:
3674 BD35C0           (       SCREEN.ASM):00310                 JSR     CR1                               ; DUMP BUFFER
3677 8D29             (       SCREEN.ASM):00311                 BSR     INVERT                            ; INVERT STATUS LINE
                      (       SCREEN.ASM):00312         
3679 108E264A         (       SCREEN.ASM):00313                 LDY     #BUFSAV                           ; POINT TO "SAVE" BUFFER
367D 8E262A           (       SCREEN.ASM):00314                 LDX     #BUFFER                           ; POINT TO OUTPUT BUFFER
3680                  (       SCREEN.ASM):00315         USLEND:
3680 A6A0             (       SCREEN.ASM):00316                 LDA     ,Y+
3682 A780             (       SCREEN.ASM):00317                 STA     ,X+                               ; RESTORE PREVIOUS CONTENTS
3684 8C264A           (       SCREEN.ASM):00318                 CMPX    #BUFFER+32
3687 25F7             (       SCREEN.ASM):00319                 BLO     USLEND
                      (       SCREEN.ASM):00320         
3689 3536             (       SCREEN.ASM):00321                 PULS    X,Y,D                             ; RESTORE EVERYTHING
368B 109F29           (       SCREEN.ASM):00322                 STY     CSTEMP
368E 9F1B             (       SCREEN.ASM):00323                 STX     MPCM
3690 D753             (       SCREEN.ASM):00324                 STB     BINDEX
3692 971A             (       SCREEN.ASM):00325                 STA     MPCH
3694 3536             (       SCREEN.ASM):00326                 PULS    X,Y,D
3696 109F2C           (       SCREEN.ASM):00327                 STY     ZSTWRD
3699 D72B             (       SCREEN.ASM):00328                 STB     STBYTF
369B 9751             (       SCREEN.ASM):00329                 STA     CHRPNT
369D 035E             (       SCREEN.ASM):00330                 COM     SCRIPT                            ; RE-ENABLE SCRIPTING
369F 0F1F             (       SCREEN.ASM):00331                 CLR     MPCFLG                            ; MPC NO LONGER VALID
36A1 39               (       SCREEN.ASM):00332                 RTS
                      (       SCREEN.ASM):00333         
                      (       SCREEN.ASM):00334         ; ------------------
                      (       SCREEN.ASM):00335         ; INVERT STATUS LINE
                      (       SCREEN.ASM):00336         ; ------------------
                      (       SCREEN.ASM):00337         
36A2                  (       SCREEN.ASM):00338         INVERT:
36A2 39               (       SCREEN.ASM):00339                 RTS
                      (     cubixzip.asm):00067                 INCLUDE DISK.ASM
                      (         DISK.ASM):00001         ;       PAGE
                      (         DISK.ASM):00002         ;       SBTTL "--- DISK I/O ---"
                      (         DISK.ASM):00003         
                      (         DISK.ASM):00004         
                      (         DISK.ASM):00005         ; ------------------------
                      (         DISK.ASM):00006         ; READ A Z-BLOCK FROM DISK
                      (         DISK.ASM):00007         ; ------------------------
                      (         DISK.ASM):00008         
                      (         DISK.ASM):00009         ; ENTRY: DRIVE # (0 OR 1) IN [DRIVE]
                      (         DISK.ASM):00010         ;        BLOCK # IN [DBLOCK]
                      (         DISK.ASM):00011         ;        BUFFER ADDRESS IN [DBUFF]
36A3                  (         DISK.ASM):00012         INFILE:
36A3 413A5B5A49505D5A (         DISK.ASM):00013                 FCC     "A:[ZIP]ZIPTEST.Z3"               ; FSDIR(8)   DIRECTORY PREFIX
     4950544553542E5A
     33
36B4 00               (         DISK.ASM):00014                 FCB     00                                ; FSDRIVE(1) Drive Index (0-3)
                      (         DISK.ASM):00015         
                      (         DISK.ASM):00016         
36B5                  (         DISK.ASM):00017         OPENGAMEDSK:
36B5 108E36A3         (         DISK.ASM):00018                 LDY     #INFILE                           ; SET FILE NAME
36B9 3F               (         DISK.ASM):00019                 SWI
36BA 0A               (         DISK.ASM):00020                 FCB     10
36BB 102600B5         (         DISK.ASM):00021                 LBNE    DERR2                             ; FILE ERROR
36BF CEDD00           (         DISK.ASM):00022                 LDU     #INFCB                            ; OPEN FILE
36C2 3F               (         DISK.ASM):00023                 SWI
36C3 37               (         DISK.ASM):00024                 FCB     55
36C4 39               (         DISK.ASM):00025                 RTS
                      (         DISK.ASM):00026         
36C5                  (         DISK.ASM):00027         GETDSK:
36C5 3476             (         DISK.ASM):00028                 PSHS    X,Y,U,D                           ; SAVE VARIABLES
36C7 CEDD00           (         DISK.ASM):00029                 LDU     #INFCB                            ; REWIND FILE
36CA 3F               (         DISK.ASM):00030                 SWI
36CB 3E               (         DISK.ASM):00031                 FCB     62
36CC DC4C             (         DISK.ASM):00032                 LDD     DBLOCK                            ; GO TO DBLOCK POSITION
36CE B7371C           (         DISK.ASM):00033                 STA     DTEMP
                      (         DISK.ASM):00034         !
36D1 8100             (         DISK.ASM):00035                 CMPA    #$00                              ; HOW MANY BLOCKS OF $10000 DO WE NEED TO GET
36D3 2718             (         DISK.ASM):00036                 BEQ     GETDSK1                           ; NONE, SKIP
36D5 CCFFFF           (         DISK.ASM):00037                 LDD     #$FFFF
36D8 CEDD00           (         DISK.ASM):00038                 LDU     #INFCB                            ;
36DB 3F               (         DISK.ASM):00039                 SWI
36DC 3F               (         DISK.ASM):00040                 FCB     63
36DD CC0001           (         DISK.ASM):00041                 LDD     #1
36E0 CEDD00           (         DISK.ASM):00042                 LDU     #INFCB                            ;
36E3 3F               (         DISK.ASM):00043                 SWI
36E4 3F               (         DISK.ASM):00044                 FCB     63
36E5 7A371C           (         DISK.ASM):00045                 DEC     DTEMP
36E8 B6371C           (         DISK.ASM):00046                 LDA     DTEMP
36EB 20E4             (         DISK.ASM):00047                 BRA     <
36ED                  (         DISK.ASM):00048         GETDSK1:
36ED DC4C             (         DISK.ASM):00049                 LDD     DBLOCK                            ; HOW MANY BLOCKS OF <$10000 DO WE NEED TO GET
36EF 1F98             (         DISK.ASM):00050                 TFR     B,A
36F1 C600             (         DISK.ASM):00051                 LDB     #$00
36F3 CEDD00           (         DISK.ASM):00052                 LDU     #INFCB                            ;
36F6 3F               (         DISK.ASM):00053                 SWI
36F7 3F               (         DISK.ASM):00054                 FCB     63
                      (         DISK.ASM):00055         ; READ 256 BYTES
36F8 C600             (         DISK.ASM):00056                 LDB     #$00
36FA F7371C           (         DISK.ASM):00057                 STB     DTEMP
                      (         DISK.ASM):00058         !
36FD 3F               (         DISK.ASM):00059                 SWI
36FE 3B               (         DISK.ASM):00060                 FCB     59
36FF 9E4A             (         DISK.ASM):00061                 LDX     DBUFF
3701 A784             (         DISK.ASM):00062                 STA     ,X
3703 0C4B             (         DISK.ASM):00063                 INC     DBUFF+1
3705 2602             (         DISK.ASM):00064                 BNE     BUFINC
3707 0C4A             (         DISK.ASM):00065                 INC     DBUFF
3709                  (         DISK.ASM):00066         BUFINC:
3709 7A371C           (         DISK.ASM):00067                 DEC     DTEMP
370C F6371C           (         DISK.ASM):00068                 LDB     DTEMP
370F C100             (         DISK.ASM):00069                 CMPB    #$00
3711 26EA             (         DISK.ASM):00070                 BNE     <
3713 0C4D             (         DISK.ASM):00071                 INC     DBLOCK+1                          ; POINT TO NEXT Z-BLOCK
3715 2602             (         DISK.ASM):00072                 BNE     REND
3717 0C4C             (         DISK.ASM):00073                 INC     DBLOCK
3719                  (         DISK.ASM):00074         REND:
3719 3576             (         DISK.ASM):00075                 PULS    X,Y,U,D                           ; RESTORE VARIABLES
                      (         DISK.ASM):00076         ;        STX     VAL
                      (         DISK.ASM):00077         ;        STD     TEMP
371B 39               (         DISK.ASM):00078                 RTS
                      (         DISK.ASM):00079         
371C 00               (         DISK.ASM):00080         DTEMP   FCB     00
                      (         DISK.ASM):00081         
                      (         DISK.ASM):00082         
                      (         DISK.ASM):00083         ; -----------------
                      (         DISK.ASM):00084         ; SAVE/RESTORE INIT
                      (         DISK.ASM):00085         ; -----------------
                      (         DISK.ASM):00086         
371D                  (         DISK.ASM):00087         SAVRES:
371D BD359D           (         DISK.ASM):00088                 JSR     ZCRLF                             ; FLUSH OUTPUT BUFFER
3720 BD34B3           (         DISK.ASM):00089                 JSR     CLS
3723 0F5E             (         DISK.ASM):00090                 CLR     SCRIPT                            ; DISABLE SCRIPTING
3725 39               (         DISK.ASM):00091                 RTS
                      (         DISK.ASM):00092         
                      (         DISK.ASM):00093         ; ---------
                      (         DISK.ASM):00094         ; SAVE GAME
                      (         DISK.ASM):00095         ; ---------
                      (         DISK.ASM):00096         
3726                  (         DISK.ASM):00097         ZSAVE:
3726 8DF5             (         DISK.ASM):00098                 BSR     SAVRES                            ; INIT THINGS
3728 8E38AE           (         DISK.ASM):00099                 LDX     #SAV
372B C604             (         DISK.ASM):00100                 LDB     #SAVL
372D BD3897           (         DISK.ASM):00101                 JSR     DLINE                             ; "SAVE POSITION"
                      (         DISK.ASM):00102         
3730 BD3818           (         DISK.ASM):00103                 JSR     PARAMS                            ; GET POSITION AND DRIVE
                      (         DISK.ASM):00104         
3733 8E3942           (         DISK.ASM):00105                 LDX     #SING
3736 C607             (         DISK.ASM):00106                 LDB     #SINGL
3738 BD3897           (         DISK.ASM):00107                 JSR     DLINE                             ; "SAVING"
373B BD38A0           (         DISK.ASM):00108                 JSR     TIONP                             ; "POSITION X ..."
                      (         DISK.ASM):00109         
373E 8E264A           (         DISK.ASM):00110                 LDX     #BUFSAV                           ; POINT TO AUX BUFFER
3741 FC3E0C           (         DISK.ASM):00111                 LDD     ZCODE+ZID                         ; GET GAME ID CODE
3744 ED81             (         DISK.ASM):00112                 STD     ,X++                              ; SAVE IN BUFFER
3746 DC27             (         DISK.ASM):00113                 LDD     OZSTAK                            ; OLD STACK POINTER
3748 ED81             (         DISK.ASM):00114                 STD     ,X++
374A EF81             (         DISK.ASM):00115                 STU     ,X++                              ; AND CURRENT STACK POINTER
374C 9613             (         DISK.ASM):00116                 LDA     ZPCH                              ; HI BYTE OF ZPC
374E A780             (         DISK.ASM):00117                 STA     ,X+
3750 DC14             (         DISK.ASM):00118                 LDD     ZPCM                              ; LOW ZPC BYTES
3752 ED84             (         DISK.ASM):00119                 STD     ,X
                      (         DISK.ASM):00120         
3754 CC260A           (         DISK.ASM):00121                 LDD     #LOCALS
3757 DD4A             (         DISK.ASM):00122                 STD     DBUFF
                      (         DISK.ASM):00123         ;        BSR     DWRITE                            ; WRITE LOCAL/BUFFER PAGE
                      (         DISK.ASM):00124         
3759 CC220A           (         DISK.ASM):00125                 LDD     #ZSTACK                           ; SAVE CONTENTS
375C DD4A             (         DISK.ASM):00126                 STD     DBUFF                             ; OF Z-STACK (2 PAGES)
                      (         DISK.ASM):00127         ;        BSR     DWRITE                            ; FIRST HALF
                      (         DISK.ASM):00128          ;       BSR     DWRITE                            ; 2ND HALF
                      (         DISK.ASM):00129         
                      (         DISK.ASM):00130         ; SAVE GAME PRELOAD
                      (         DISK.ASM):00131         
375E CC3E0A           (         DISK.ASM):00132                 LDD     #ZCODE                            ; START OF PRELOAD
3761 DD4A             (         DISK.ASM):00133                 STD     DBUFF
3763 B63E18           (         DISK.ASM):00134                 LDA     ZCODE+ZPURBT                      ; SIZE OF PRELOAD (MSB, # PAGES)
3766 4C               (         DISK.ASM):00135                 INCA                                      ; ROUND UP
3767 973F             (         DISK.ASM):00136                 STA     TEMP                              ; USE [TEMP] AS INDEX
                      (         DISK.ASM):00137         
3769                  (         DISK.ASM):00138         LSAVE:
                      (         DISK.ASM):00139         ;        BSR     DWRITE                            ; SAVE A PAGE
3769 0A3F             (         DISK.ASM):00140                 DEC     TEMP                              ; SAVED ENTIRE PRELOAD YET?
376B 26FC             (         DISK.ASM):00141                 BNE     LSAVE                             ; NO, KEEP SAVING
376D 7E37ED           (         DISK.ASM):00142                 JMP     RESUME
                      (         DISK.ASM):00143         
                      (         DISK.ASM):00144         ; *** ERROR #12: DISK ADDRESS RANGE ***
                      (         DISK.ASM):00145         
3770                  (         DISK.ASM):00146         DSKERR:
3770 860C             (         DISK.ASM):00147                 LDA     #12
3772 2002             (         DISK.ASM):00148                 BRA     DSKEX
                      (         DISK.ASM):00149         
                      (         DISK.ASM):00150         ; *** ERROR #14: DISK ACCESS ***
                      (         DISK.ASM):00151         
3774                  (         DISK.ASM):00152         DERR2:
3774 860E             (         DISK.ASM):00153                 LDA     #14
3776                  (         DISK.ASM):00154         DSKEX:
3776 BD350C           (         DISK.ASM):00155                 JSR     ZERROR
                      (         DISK.ASM):00156         
                      (         DISK.ASM):00157         ; ------------
                      (         DISK.ASM):00158         ; RESTORE GAME
                      (         DISK.ASM):00159         ; ------------
                      (         DISK.ASM):00160         
3779                  (         DISK.ASM):00161         ZREST:
3779 BD371D           (         DISK.ASM):00162                 JSR     SAVRES
                      (         DISK.ASM):00163         
377C 8E38A7           (         DISK.ASM):00164                 LDX     #RES
377F C607             (         DISK.ASM):00165                 LDB     #RESL
3781 BD3897           (         DISK.ASM):00166                 JSR     DLINE                             ; "RESTORE POSITION"
                      (         DISK.ASM):00167         
3784 BD3818           (         DISK.ASM):00168                 JSR     PARAMS
                      (         DISK.ASM):00169         
3787 8E3949           (         DISK.ASM):00170                 LDX     #RING
378A C60A             (         DISK.ASM):00171                 LDB     #RINGL
378C BD3897           (         DISK.ASM):00172                 JSR     DLINE                             ; "RESTORING"
378F BD38A0           (         DISK.ASM):00173                 JSR     TIONP                             ; "POSITION X ..."
                      (         DISK.ASM):00174         
                      (         DISK.ASM):00175         ; SAVE LOCALS ON MACHINE STACK
                      (         DISK.ASM):00176         ; IN CASE OF ERROR
                      (         DISK.ASM):00177         
3792 8E260A           (         DISK.ASM):00178                 LDX     #LOCALS                           ; POINT TO LOCALS STORAGE
3795 9F4A             (         DISK.ASM):00179                 STX     DBUFF                             ; POINT TO 1ST PAGE TO RESTORE
3797                  (         DISK.ASM):00180         LOCLP:
3797 EC81             (         DISK.ASM):00181                 LDD     ,X++                              ; GRAB A LOCAL
3799 3406             (         DISK.ASM):00182                 PSHS    D                                 ; AND PUSH IT
379B 8C2628           (         DISK.ASM):00183                 CMPX    #LOCALS+30                        ; SAVED 15 LOCALS YET?
379E 25F7             (         DISK.ASM):00184                 BLO     LOCLP                             ; NO, KEEP PUSHING
                      (         DISK.ASM):00185         
                      (         DISK.ASM):00186                ; JSR     DREAD                             ; RETRIEVE LOCALS/BUFFER PAGE
                      (         DISK.ASM):00187         
37A0 FC264A           (         DISK.ASM):00188                 LDD     BUFSAV                            ; READ SAVED GAME ID
37A3 10B33E0C         (         DISK.ASM):00189                 CMPD    ZCODE+ZID                         ; IF IT MATCHES CURRENT GAME ID,
37A7 2711             (         DISK.ASM):00190                 BEQ     VERSOK                            ; PROCEED WITH THE RESTORE
                      (         DISK.ASM):00191         
                      (         DISK.ASM):00192         ; WRONG SAVE DISK, ABORT RESTORE
                      (         DISK.ASM):00193         
37A9 8E2628           (         DISK.ASM):00194                 LDX     #LOCALS+30                        ; RESTORE PUSHED LOCALS
37AC                  (         DISK.ASM):00195         RESLP:
37AC 3506             (         DISK.ASM):00196                 PULS    D
37AE ED83             (         DISK.ASM):00197                 STD     ,--X
37B0 8C260A           (         DISK.ASM):00198                 CMPX    #LOCALS
37B3 22F7             (         DISK.ASM):00199                 BHI     RESLP
37B5                  (         DISK.ASM):00200         ERRWP:
37B5 8D3B             (         DISK.ASM):00201                 BSR     TOBOOT                            ; PROMPT FOR GAME DISK
37B7 7E294B           (         DISK.ASM):00202                 JMP     PREDF                             ; PREDICATE FAILS
                      (         DISK.ASM):00203         
37BA                  (         DISK.ASM):00204         VERSOK:
37BA 32E81E           (         DISK.ASM):00205                 LEAS    +30,S                             ; POP OLD LOCALS OFF STACK
37BD FC3E1A           (         DISK.ASM):00206                 LDD     ZCODE+ZSCRIP
37C0 DD3D             (         DISK.ASM):00207                 STD     VAL                               ; SAVE FLAGS
                      (         DISK.ASM):00208         
37C2 CC220A           (         DISK.ASM):00209                 LDD     #ZSTACK                           ; RETRIEVE
37C5 DD4A             (         DISK.ASM):00210                 STD     DBUFF                             ; CONTENTS OF Z-STACK
                      (         DISK.ASM):00211               ;  JSR     DREAD
                      (         DISK.ASM):00212               ;  JSR     DREAD
                      (         DISK.ASM):00213         
37C7                  (         DISK.ASM):00214         DOREST:
37C7 CC3E0A           (         DISK.ASM):00215                 LDD     #ZCODE                            ; NOW RETRIEVE
37CA DD4A             (         DISK.ASM):00216                 STD     DBUFF                             ; 1ST PAGE OF PRELOAD
                      (         DISK.ASM):00217              ;   JSR     DREAD
                      (         DISK.ASM):00218         
37CC B63E18           (         DISK.ASM):00219                 LDA     ZCODE+ZPURBT                      ; DETERMINE # PAGES
37CF 973F             (         DISK.ASM):00220                 STA     TEMP                              ; TO RETRIEVE
                      (         DISK.ASM):00221         
37D1                  (         DISK.ASM):00222         LREST:
                      (         DISK.ASM):00223             ;    JSR     DREAD                             ; FETCH REMAINDER OF PRELOAD
37D1 0A3F             (         DISK.ASM):00224                 DEC     TEMP
37D3 26FC             (         DISK.ASM):00225                 BNE     LREST
                      (         DISK.ASM):00226         
                      (         DISK.ASM):00227         ; RESTORE STATE OF SAVED GAME
                      (         DISK.ASM):00228         
37D5 8E264C           (         DISK.ASM):00229                 LDX     #BUFSAV+2                         ; POINT TO SAVED VARIABLES
37D8 EC81             (         DISK.ASM):00230                 LDD     ,X++
37DA DD27             (         DISK.ASM):00231                 STD     OZSTAK                            ; RESTORE OLD STACK POINTERS
37DC EE81             (         DISK.ASM):00232                 LDU     ,X++
37DE A680             (         DISK.ASM):00233                 LDA     ,X+
37E0 9713             (         DISK.ASM):00234                 STA     ZPCH                              ; HIGH BYTE OF ZPC
37E2 EC84             (         DISK.ASM):00235                 LDD     ,X                                ; LOW BYTES OF ZPC
37E4 DD14             (         DISK.ASM):00236                 STD     ZPCM
37E6 0F18             (         DISK.ASM):00237                 CLR     ZPCFLG                            ; PC HAS CHANGED!
                      (         DISK.ASM):00238         
37E8 DC3D             (         DISK.ASM):00239                 LDD     VAL                               ; RESTORE FLAGS
37EA FD3E1A           (         DISK.ASM):00240                 STD     ZCODE+ZSCRIP
                      (         DISK.ASM):00241         
                      (         DISK.ASM):00242         ; RESUME GAME AFTER SAVE OR RESTORE
                      (         DISK.ASM):00243         
37ED                  (         DISK.ASM):00244         RESUME:
37ED 8D03             (         DISK.ASM):00245                 BSR     TOBOOT                            ; PROMPT FOR GAME DISK
37EF 7E2959           (         DISK.ASM):00246                 JMP     PREDS                             ; PREDICATE SUCCEEDS
                      (         DISK.ASM):00247         
37F2                  (         DISK.ASM):00248         TOBOOT:
37F2 0F49             (         DISK.ASM):00249                 CLR     DRIVE                             ; BACK TO BOOT DRIVE
37F4 8E38D1           (         DISK.ASM):00250                 LDX     #GAME
37F7 C61F             (         DISK.ASM):00251                 LDB     #GAMEL
37F9 BD3897           (         DISK.ASM):00252                 JSR     DLINE                             ; "INSERT STORY DISK IN DRIVE 0,"
37FC BD3804           (         DISK.ASM):00253                 JSR     ENTER                             ; "PRESS <ENTER> TO CONTINUE"
37FF 035E             (         DISK.ASM):00254                 COM     SCRIPT                            ; RE-ENABLE SCRIPTING
3801 7E34B3           (         DISK.ASM):00255                 JMP     CLS                               ; CLEAR SCREEN AND RETURN
                      (         DISK.ASM):00256         
                      (         DISK.ASM):00257         ; ---------------------------
                      (         DISK.ASM):00258         ; "PRESS <ENTER> TO CONTINUE"
                      (         DISK.ASM):00259         ; ---------------------------
                      (         DISK.ASM):00260         
3804                  (         DISK.ASM):00261         ENTER:
3804 8E38F0           (         DISK.ASM):00262                 LDX     #PRESS
3807 C61C             (         DISK.ASM):00263                 LDB     #PRESSL
3809 D75D             (         DISK.ASM):00264                 STB     CFLAG                             ; ENABLE CURSOR
380B BD34A3           (         DISK.ASM):00265                 JSR     LINE                              ; "PRESS <ENTER> TO CONTINUE"
380E BD33F8           (         DISK.ASM):00266                 JSR     GETKEY                            ; GET A KEY
3811 0F5D             (         DISK.ASM):00267                 CLR     CFLAG                             ; DISABLE CURSOR
3813 860D             (         DISK.ASM):00268                 LDA     #EOL
3815 7E3559           (         DISK.ASM):00269                 JMP     COUT                              ; DO EOL AND RETURN
                      (         DISK.ASM):00270         
                      (         DISK.ASM):00271         ; --------------------------------
                      (         DISK.ASM):00272         ; PROMPT SEQUENCE FOR SAVE/RESTORE
                      (         DISK.ASM):00273         ; --------------------------------
                      (         DISK.ASM):00274         
3818                  (         DISK.ASM):00275         PARAMS:
3818 8E390C           (         DISK.ASM):00276                 LDX     #POSIT
381B C618             (         DISK.ASM):00277                 LDB     #POSITL
381D BD3897           (         DISK.ASM):00278                 JSR     DLINE                             ; "GAME ... POSITION 1-7 "
3820 BD36A2           (         DISK.ASM):00279                 JSR     INVERT                            ; FLIP STATUS LINE
                      (         DISK.ASM):00280         
3823 86FF             (         DISK.ASM):00281                 LDA     #TRUE
3825 975D             (         DISK.ASM):00282                 STA     CFLAG                             ; ENABLE CURSOR
                      (         DISK.ASM):00283         
                      (         DISK.ASM):00284         ; GET POSITION
                      (         DISK.ASM):00285         
3827 9657             (         DISK.ASM):00286                 LDA     GPOSIT                            ; GET DEFAULT POSITION
3829 4C               (         DISK.ASM):00287                 INCA                                      ; 1-ALIGN IT
382A BD388B           (         DISK.ASM):00288                 JSR     DODEF
                      (         DISK.ASM):00289         
382D                  (         DISK.ASM):00290         GETPOS:
382D BD33F8           (         DISK.ASM):00291                 JSR     GETKEY
3830 810D             (         DISK.ASM):00292                 CMPA    #EOL
3832 270B             (         DISK.ASM):00293                 BEQ     SETPOS
3834 8031             (         DISK.ASM):00294                 SUBA    #$31                              ; CONVERT "1-7" TO 0-6
3836 8107             (         DISK.ASM):00295                 CMPA    #7                                ; IF LOWER THAN "7"
3838 2507             (         DISK.ASM):00296                 BLO     POSSET                            ; SET NEW POSITION
383A BD34BC           (         DISK.ASM):00297                 JSR     BOOP                              ; ELSE RAZZ
383D 20EE             (         DISK.ASM):00298                 BRA     GETPOS                            ; AND TRY AGAIN
                      (         DISK.ASM):00299         
383F                  (         DISK.ASM):00300         SETPOS:
383F 9657             (         DISK.ASM):00301                 LDA     GPOSIT                            ; USE DEFAULT
3841                  (         DISK.ASM):00302         POSSET:
3841 9757             (         DISK.ASM):00303                 STA     GPOSIT                            ; TEMP DEFAULT
3843 8B31             (         DISK.ASM):00304                 ADDA    #$31                              ; CONVERT TO ASCII
3845 B7395D           (         DISK.ASM):00305                 STA     PDO                               ; HERE TOO
3848 BD33F0           (         DISK.ASM):00306                 JSR     OUTCHR                            ; AND SHOW CHOICE
                      (         DISK.ASM):00307         
                      (         DISK.ASM):00308         ; GET DRIVE #
                      (         DISK.ASM):00309         
384B 8E3924           (         DISK.ASM):00310                 LDX     #WDRIV
384E C60E             (         DISK.ASM):00311                 LDB     #WDRIVL
3850 BD3897           (         DISK.ASM):00312                 JSR     DLINE                             ; "DRIVE 0 OR 1 "
                      (         DISK.ASM):00313         
3853 9656             (         DISK.ASM):00314                 LDA     GDRIVE
3855 8D34             (         DISK.ASM):00315                 BSR     DODEF                             ; SHOW DEFAULT
                      (         DISK.ASM):00316         
3857                  (         DISK.ASM):00317         GETDRV:
3857 BD33F8           (         DISK.ASM):00318                 JSR     GETKEY
385A 810D             (         DISK.ASM):00319                 CMPA    #EOL
385C 270B             (         DISK.ASM):00320                 BEQ     DRVSET
385E 8030             (         DISK.ASM):00321                 SUBA    #$30                              ; CONVERT TO ASCII
3860 8102             (         DISK.ASM):00322                 CMPA    #2
3862 2507             (         DISK.ASM):00323                 BLO     SETDRV
3864 BD34BC           (         DISK.ASM):00324                 JSR     BOOP
3867 20EE             (         DISK.ASM):00325                 BRA     GETDRV                            ; DRIVE # NO GOOD
                      (         DISK.ASM):00326         
3869                  (         DISK.ASM):00327         DRVSET:
3869 9656             (         DISK.ASM):00328                 LDA     GDRIVE
386B                  (         DISK.ASM):00329         SETDRV:
386B 9749             (         DISK.ASM):00330                 STA     DRIVE                             ; NEW DEFAULT
386D 8B30             (         DISK.ASM):00331                 ADDA    #$30                              ; CONVERT TO ASCII
386F B738CE           (         DISK.ASM):00332                 STA     GAMDRI                            ; FOR PROMPT
3872 BD33F0           (         DISK.ASM):00333                 JSR     OUTCHR                            ; SHOW CHOICE
                      (         DISK.ASM):00334         
3875 9657             (         DISK.ASM):00335                 LDA     GPOSIT                            ; MAKE IT THE NEW DEFAULT
3877 C605             (         DISK.ASM):00336                 LDB     #5                                ; CALC BLOCK OFFSET (5 TRACKS/GAME)
3879 3D               (         DISK.ASM):00337                 MUL
387A D74E             (         DISK.ASM):00338                 STB     TRACK                             ; TRACK ADDRESS
387C C601             (         DISK.ASM):00339                 LDB     #1                                ; START ON SECTOR 1
387E D74F             (         DISK.ASM):00340                 STB     TRACK+1                           ; SECTOR ADDRESS
                      (         DISK.ASM):00341         
3880 8E38B2           (         DISK.ASM):00342                 LDX     #INSERM
3883 C61F             (         DISK.ASM):00343                 LDB     #INSERML
3885 BD3897           (         DISK.ASM):00344                 JSR     DLINE                             ; "INSERT SAVE DISK IN DRIVE X,"
3888 7E3804           (         DISK.ASM):00345                 JMP     ENTER                             ; ETC.
                      (         DISK.ASM):00346         
                      (         DISK.ASM):00347         ; ------------
                      (         DISK.ASM):00348         ; SHOW DEFAULT
                      (         DISK.ASM):00349         ; ------------
                      (         DISK.ASM):00350         
388B                  (         DISK.ASM):00351         DODEF:
388B 8B30             (         DISK.ASM):00352                 ADDA    #$30                              ; CONVERT # TO ASCII
388D B7393E           (         DISK.ASM):00353                 STA     DEFNUM                            ; INSERT IN STRING
3890 8E3932           (         DISK.ASM):00354                 LDX     #DEFALT
3893 C610             (         DISK.ASM):00355                 LDB     #DEFALL
3895 D75D             (         DISK.ASM):00356                 STB     CFLAG                             ; ENABLE CURSOR
                      (         DISK.ASM):00357         
                      (         DISK.ASM):00358         ; FALL THROUGH TO ...
                      (         DISK.ASM):00359         
                      (         DISK.ASM):00360         ; --------------------
                      (         DISK.ASM):00361         ; DIRECT SCREEN OUTPUT
                      (         DISK.ASM):00362         ; --------------------
                      (         DISK.ASM):00363         
                      (         DISK.ASM):00364         ; ENTRY: SAME AS "LINE" ROUTINE
                      (         DISK.ASM):00365         
3897                  (         DISK.ASM):00366         DLINE:
3897 A680             (         DISK.ASM):00367                 LDA     ,X+
3899 BD33F0           (         DISK.ASM):00368                 JSR     OUTCHR
389C 5A               (         DISK.ASM):00369                 DECB
389D 26F8             (         DISK.ASM):00370                 BNE     DLINE
389F 39               (         DISK.ASM):00371                 RTS
                      (         DISK.ASM):00372         
                      (         DISK.ASM):00373         ; ----------------------
                      (         DISK.ASM):00374         ; PRINT "POSITION X ..."
                      (         DISK.ASM):00375         ; ----------------------
                      (         DISK.ASM):00376         
38A0                  (         DISK.ASM):00377         TIONP:
38A0 8E3953           (         DISK.ASM):00378                 LDX     #PTION
38A3 C610             (         DISK.ASM):00379                 LDB     #PTIONL
38A5 20F0             (         DISK.ASM):00380                 BRA     DLINE
                      (         DISK.ASM):00381         
                      (         DISK.ASM):00382         ; ---------------------
                      (         DISK.ASM):00383         ; TEXT FOR SAVE/RESTORE
                      (         DISK.ASM):00384         ; ---------------------
                      (         DISK.ASM):00385         
38A7                  (         DISK.ASM):00386         RES:
38A7 524553544F5245   (         DISK.ASM):00387                 FCC     "RESTORE"
38AE                  (         DISK.ASM):00388         reslen:
     0007             (         DISK.ASM):00389         RESL            EQU reslen-RES
                      (         DISK.ASM):00390         
38AE                  (         DISK.ASM):00391         SAV:
38AE 53415645         (         DISK.ASM):00392                 FCC     "SAVE"
38B2                  (         DISK.ASM):00393         savlen:
     0004             (         DISK.ASM):00394         SAVL            EQU savlen-SAV
                      (         DISK.ASM):00395         
38B2                  (         DISK.ASM):00396         INSERM:
38B2 0D               (         DISK.ASM):00397                 FCB     EOL
38B3 0D               (         DISK.ASM):00398                 FCB     EOL
38B4 494E534552542053 (         DISK.ASM):00399                 FCC     "INSERT SAVE DISK IN DRIVE "
     415645204449534B
     20494E2044524956
     4520
38CE                  (         DISK.ASM):00400         GAMDRI:
38CE 302E             (         DISK.ASM):00401                 FCC     "0."
38D0 0D               (         DISK.ASM):00402                 FCB     EOL
38D1                  (         DISK.ASM):00403         insermlen:
     001F             (         DISK.ASM):00404         INSERML         EQU insermlen-INSERM
                      (         DISK.ASM):00405         
38D1                  (         DISK.ASM):00406         GAME:
38D1 0D               (         DISK.ASM):00407                 FCB     EOL
38D2 494E534552542053 (         DISK.ASM):00408                 FCC     "INSERT STORY DISK IN DRIVE 0."
     544F525920444953
     4B20494E20445249
     564520302E
38EF 0D               (         DISK.ASM):00409                 FCB     EOL
38F0                  (         DISK.ASM):00410         gamelen:
     001F             (         DISK.ASM):00411         GAMEL           EQU gamelen-GAME
                      (         DISK.ASM):00412         
38F0                  (         DISK.ASM):00413         PRESS:
38F0 5052455353203C45 (         DISK.ASM):00414                 FCC     "PRESS <ENTER> TO CONTINUE."
     4E5445523E20544F
     20434F4E54494E55
     452E
390A 0D               (         DISK.ASM):00415                 FCB     EOL
390B 3E               (         DISK.ASM):00416                 FCC     ">"
390C                  (         DISK.ASM):00417         presslen:
     001C             (         DISK.ASM):00418         PRESSL          EQU presslen-PRESS
                      (         DISK.ASM):00419         
390C                  (         DISK.ASM):00420         POSIT:
390C 20504F534954494F (         DISK.ASM):00421                 FCC     " POSITION"
     4E
3915 0D               (         DISK.ASM):00422                 FCB     EOL
3916 0D               (         DISK.ASM):00423                 FCB     EOL
3917 504F534954494F4E (         DISK.ASM):00424                 FCC     "POSITION 1-7 "
     20312D3720
3924                  (         DISK.ASM):00425         positlen:
     0018             (         DISK.ASM):00426         POSITL          EQU positlen-POSIT
                      (         DISK.ASM):00427         
3924                  (         DISK.ASM):00428         WDRIV:
3924 0D               (         DISK.ASM):00429                 FCB     EOL
3925 4452495645203020 (         DISK.ASM):00430                 FCC     "DRIVE 0 OR 1 "
     4F52203120
3932                  (         DISK.ASM):00431         wdrivlen:
     000E             (         DISK.ASM):00432         WDRIVL          EQU wdrivlen-WDRIV
                      (         DISK.ASM):00433         
3932                  (         DISK.ASM):00434         DEFALT:
3932 2844454641554C54 (         DISK.ASM):00435                 FCC     "(DEFAULT IS "
     20495320
393E                  (         DISK.ASM):00436         DEFNUM:
393E 3029203E         (         DISK.ASM):00437                 FCC     "0) >"
3942                  (         DISK.ASM):00438         defalullen:
     0010             (         DISK.ASM):00439         DEFALL          EQU defalullen-DEFALT
                      (         DISK.ASM):00440         
3942                  (         DISK.ASM):00441         SING:
3942 0D               (         DISK.ASM):00442                 FCB     EOL
3943 534156494E47     (         DISK.ASM):00443                 FCC     "SAVING"
3949                  (         DISK.ASM):00444         sinlen:
     0007             (         DISK.ASM):00445         SINGL           EQU sinlen-SING
                      (         DISK.ASM):00446         
3949                  (         DISK.ASM):00447         RING:
3949 0D               (         DISK.ASM):00448                 FCB     EOL
394A 524553544F52494E (         DISK.ASM):00449                 FCC     "RESTORING"
     47
3953                  (         DISK.ASM):00450         ringlen:
     000A             (         DISK.ASM):00451         RINGL           EQU ringlen-RING
                      (         DISK.ASM):00452         
3953                  (         DISK.ASM):00453         PTION:
3953 20504F534954494F (         DISK.ASM):00454                 FCC     " POSITION "
     4E20
395D                  (         DISK.ASM):00455         PDO:
395D 31202E2E2E       (         DISK.ASM):00456                 FCC     "1 ..."
3962 0D               (         DISK.ASM):00457                 FCB     EOL
3963                  (         DISK.ASM):00458         ptionlen:
     0010             (         DISK.ASM):00459         PTIONL          EQU ptionlen-PTION
                      (         DISK.ASM):00460         
3963                  (         DISK.ASM):00461         ENDTST:
3963 454E44           (         DISK.ASM):00462                 FCC     "END"
                      (     cubixzip.asm):00068         
                      (     cubixzip.asm):00069         ;TITLE "ZIP/6809-B INFOCOM, INC."
                      (     cubixzip.asm):00070                 IF      DEBUG
                      (     cubixzip.asm):00071                     INCLUDE BUGGER.ASM
                      (     cubixzip.asm):00072                 ENDIF
                      (     cubixzip.asm):00073         
                      (     cubixzip.asm):00074                 END

Symbol Table:
[ G] ABSVAL                           2DD9
[ G] ABTEMP                           2DE0
[ G] AHEAD                            3674
[ G] AINIT                            34BB
[ G] ARG1                             0002
[ G] ARG2                             0004
[ G] ARG3                             0006
[ G] ARG4                             0008
[ G] ARGCNT                           0001
[ G] BADKEY                           33F3
[ G] BADOP1                           285F
[ G] BADOP2                           28AD
[ G] BFREQ                            1000
[ G] BINDEX                           0053
[ G] BLINK                            005C
[ G] BOOP                             34BC
[ G] BRKTBL                           308C
[ G] BS                               0008
[ G] BUFFER                           262A
[ G] BUFINC                           3709
[ G] BUFOUT                           349E
[ G] BUFSAV                           264A
[ G] CDEL                             342E
[ G] CDELAY                           342B
[ G] CEXIT                            2C24
[ G] CFLAG                            005D
[ G] CFREQ                            0100
[ G] CHAR                             3499
[ G] CHRPNT                           0051
[ G] CHRTBL                           3364
[ G] CLICK                            3426
[ G] CLS                              34B3
[ G] CNLOOP                           331D
[ G] CNOK                             3325
[ G] CNZS2M                           3318
[ G] CNZSC1                           32DE
[ G] CNZSC3                           32E6
[ G] CNZSL1                           3299
[ G] CNZSL2                           32AA
[ G] CNZSLC                           32C3
[ G] CNZSLE                           3347
[ G] CNZSLO                           32CF
[ G] COLD                             34D3
[ G] CONZST                           3289
[ G] COUT                             3559
[ G] COUT1                            356E
[ G] CPSAV                            0052
[ G] CR1                              35C0
[ G] CSPERM                           002A
[ G] CSTEMP                           0029
[ G] CYCLE                            005A
[ G] DBLOCK                           004C
[ G] DBUFF                            004A
[ G] DEBUG                            0000
[ G] DECX                             2E06
[ G] DEFALL                           0010
[ G] DEFALT                           3932
[ G] defalullen                       3942
[ G] DEFNUM                           393E
[ G] DELAY                            34BD
[ G] DELOOP                           34C0
[ G] DERR2                            3774
[ G] DGC                              2F1E
[ G] DIGCNT                           2F1C
[ G] DISPX                            282F
[ G] DIVERR                           2E13
[ G] DIVEX                            2DDF
[ G] DIVIDE                           2DB9
[ G] DLINE                            3897
[ G] DOB2                             2973
[ G] DOCALL                           2E47
[ G] DODEF                            388B
[ G] DODIS                            2832
[ G] DOEQ                             2E21
[ G] DOM                              3667
[ G] DOREST                           37C7
[ G] DOUDIV                           2DCD
[ G] DRIVE                            0049
[ G] DRVSET                           3869
[ G] DSKERR                           3770
[ G] DSKEX                            3776
[ G] DSTART                           0000
[ G] DTEMP                            371C
[ G] DVINIT                           2DB1
[ G] EAR0                             316D
[ G] EAR1                             3175
[ G] EARLY                            3163
[ G] ENDCMP                           2726
[ G] ENDERR                           2721
[ G] ENDLIN                           347A
[ G] ENDOK                            272A
[ G] ENDSES                           3531
[ G] endseslen                        3540
[ G] ENDSL                            000F
[ G] ENDTST                           3963
[ G] ENTER                            3804
[ G] EOL                              000D
[ G] EQBAD                            2E3A
[ G] EQOK                             2E3D
[ G] ERRWP                            37B5
[ G] ETPEX                            2D2F
[ G] FALSE                            0000
[ G] FBRK                             305B
[ G] FINDW                            305D
[ G] FIRST1                           2AE2
[ G] FLAGSU                           33B3
[ G] FLEX                             3041
[ G] FLGSU1                           33C6
[ G] FLGSU2                           33D1
[ G] FLGSU3                           33DA
[ G] FLUSH                            356F
[ G] FLUSH1                           3571
[ G] FLUSH2                           357A
[ G] FLUSH3                           3581
[ G] FLUSH4                           358A
[ G] FLUSHW                           302B
[ G] FREEZE                           352F
[ G] FWL1                             306A
[ G] FWORDS                           0025
[ G] FWSUCC                           3085
[ G] GAMDRI                           38CE
[ G] GAME                             38D1
[ G] GAMEL                            001F
[ G] gamelen                          38F0
[ G] GDRIVE                           0056
[ G] GETBYT                           30CC
[ G] GETDRV                           3857
[ G] GETDSK                           36C5
[ G] GETDSK1                          36ED
[ G] GETKEY                           33F8
[ G] GETLNG                           28BA
[ G] GETMOD                           3245
[ G] GETP1                            2CF3
[ G] GETP2                            2D12
[ G] GETP2A                           2D29
[ G] GETP2B                           2D22
[ G] GETP3                            2D01
[ G] GETPOS                           382D
[ G] GETPT1                           2D37
[ G] GETPT2                           2D47
[ G] GETSHT                           28B2
[ G] GETVAR                           28D1
[ G] GETVR1                           28D7
[ G] GETVRG                           28E8
[ G] GETVRL                           28DB
[ G] GETWRD                           3092
[ G] GETZCH                           3251
[ G] GETZH1                           3268
[ G] GETZH2                           327F
[ G] GETZH3                           327B
[ G] GK                               33FA
[ G] GLOBAL                           0021
[ G] GM                               324C
[ G] GOBACK                           3471
[ G] GPOSIT                           0057
[ G] GPT                              2D4D
[ G] GTBT0                            30DD
[ G] GTBT1                            30E1
[ G] GTBT2                            30E9
[ G] GTBT3                            30FC
[ G] GTEXIT                           3264
[ G] GTVX                             28E2
[ G] GTZ0                             3257
[ G] IERRL                            0011
[ G] IHOLD                            005F
[ G] INFCB                            DD00
[ G] INFILE                           36A3
[ G] INLOOP                           3441
[ G] INPEX                            3495
[ G] INPUT                            3433
[ G] INSERM                           38B2
[ G] INSERML                          001F
[ G] insermlen                        38D1
[ G] INTERR                           34FB
[ G] interrlen                        350C
[ G] INVERT                           36A2
[ G] IOBUFF                           210A
[ G] IOCHAR                           0055
[ G] KTEST                            3406
[ G] LDPRE                            27B0
[ G] LINCNT                           0054
[ G] LINE                             34A3
[ G] LINOUT                           35CB
[ G] LN                               34A6
[ G] loadlen                          34FB
[ G] LOADM                            34E3
[ G] LOADML                           0018
[ G] LOCALS                           260A
[ G] LOCLP                            3797
[ G] LREST                            37D1
[ G] LRU                              000A
[ G] LRUMAP                           255A
[ G] LSAVE                            3769
[ G] LUKE                             34D5
[ G] MASK                             0043
[ G] MATH                             2D7C
[ G] MEMTOP                           00DC
[ G] MLOOP                            27C7
[ G] MOREL                            0006
[ G] MORES                            3597
[ G] morlen                           359D
[ G] MOVEP                            3637
[ G] MOVEP1                           364E
[ G] MPCFLG                           001F
[ G] MPCH                             001A
[ G] MPCL                             001C
[ G] MPCM                             001B
[ G] MPCPNT                           001D
[ G] MSTACK                           2108
[ G] MSTART                           200A
[ G] MTEMP                            0047
[ G] NBR1                             3052
[ G] NBRKP                            3046
[ G] NBRKS                            0006
[ G] NEXTPC                           309B
[ G] NOMORE                           3461
[ G] NOPS0                            000E
[ G] NOPS1                            0010
[ G] NOPS2                            0019
[ G] NOPSX                            000C
[ G] NORAM                            2770
[ G] NPC0                             30AC
[ G] NPC1                             30B0
[ G] NPC2                             30B8
[ G] NPC3                             30CB
[ G] NUMBER                           2F10
[ G] NXTP1                            2D5F
[ G] NXTP2                            2D72
[ G] NXTP3                            2D6F
[ G] OBJLOC                           33E1
[ G] OP0                              2839
[ G] OP1                              2849
[ G] OP1A                             2852
[ G] OP1B                             285B
[ G] OP1C                             2864
[ G] OP1EX                            2867
[ G] OP2                              287A
[ G] OP2A                             2883
[ G] OP2B                             2886
[ G] OP2C                             2897
[ G] OP2D                             289A
[ G] OP2EX                            28A0
[ G] OPCODE                           0000
[ G] OPENGAMEDSK                      36B5
[ G] OPEXT                            27DE
[ G] OPT0                             29BE
[ G] OPT1                             29DA
[ G] OPT2                             29FA
[ G] OPTX                             2A2C
[ G] OPX0                             27E7
[ G] OPX1                             27ED
[ G] OPX2                             27F6
[ G] OPX3                             27FF
[ G] OPX4                             281C
[ G] OPXNXT                           2806
[ G] OUTCHR                           33F0
[ G] OUTPUT                           35CF
[ G] OVER                             2946
[ G] OZSTAK                           0027
[ G] PAGE                             30FD
[ G] PAGE0                            000E
[ G] PARAMS                           3818
[ G] PATCH                            30D6
[ G] PBAD                             2C28
[ G] PDB0                             29A5
[ G] PDB1                             29BD
[ G] PDO                              395D
[ G] PG0                              3104
[ G] PG1                              3129
[ G] PG2                              313F
[ G] PG3                              3147
[ G] PG4                              3154
[ G] PG5                              315E
[ G] PKICK                            341E
[ G] PMAX                             000C
[ G] PNBX                             2958
[ G] PNUM                             3671
[ G] POK                              2C49
[ G] POPSTK                           2936
[ G] POSIT                            390C
[ G] POSITL                           0018
[ G] positlen                         3924
[ G] POSSET                           3841
[ G] PPX                              33AC
[ G] PREDB                            295F
[ G] PREDB1                           297E
[ G] PREDB3                           298B
[ G] PREDF                            294B
[ G] PREDLB                           296B
[ G] PREDNB                           2951
[ G] PREDS                            2959
[ G] PRESS                            38F0
[ G] PRESSL                           001C
[ G] presslen                         390C
[ G] PRNTDC                           2B8B
[ G] PRNTN3                           2F32
[ G] PRNTN4                           2F36
[ G] PROPB                            337E
[ G] PROPL                            339B
[ G] PROPN                            3393
[ G] PROPNX                           33A8
[ G] PSHDZ                            292D
[ G] PSHSTK                           292B
[ G] PTABLE                           240A
[ G] pth                              30D5
[ G] PTIME                            3624
[ G] PTIME1                           362A
[ G] PTIME2                           3632
[ G] PTION                            3953
[ G] PTIONL                           0010
[ G] ptionlen                         3963
[ G] PTP                              2EE2
[ G] PTP1                             2EF7
[ G] PTVX                             291C
[ G] PUTBYT                           28FF
[ G] PUTP1                            2ED4
[ G] PUTP2                            2EE7
[ G] PUTP2A                           2EFF
[ G] PUTVAL                           2903
[ G] PUTVLG                           2922
[ G] PUTVLL                           2915
[ G] PUTVR1                           2911
[ G] PZERO                            2F42
[ G] PZSTFO                           003C
[ G] PZSTP0                           31B8
[ G] PZSTP1                           31BA
[ G] PZSTR                            3197
[ G] PZSTR1                           31BF
[ G] PZSTR2                           31C7
[ G] PZSTRA                           31D4
[ G] PZSTRF                           3203
[ G] PZSTRL                           319F
[ G] PZSTRP                           31F9
[ G] PZSTRS                           31E9
[ G] PZSTRT                           31ED
[ G] QKEY                             340A
[ G] RAND1                            0058
[ G] RAND2                            0059
[ G] RBRKP                            3042
[ G] RDEX                             2FA4
[ G] READL                            2F93
[ G] READL2                           2FD6
[ G] READL3                           2FFC
[ G] REMVC1                           2B6D
[ G] REMVC2                           2B82
[ G] REMVEX                           2B88
[ G] REND                             3719
[ G] RES                              38A7
[ G] RESL                             0007
[ G] reslen                           38AE
[ G] RESLP                            37AC
[ G] RESUME                           37ED
[ G] RET0                             28FE
[ G] RET1                             2BB1
[ G] RET2                             2BBA
[ G] RETERR                           2BD2
[ G] RFLIP                            2DD5
[ G] RING                             3949
[ G] RINGL                            000A
[ G] ringlen                          3953
[ G] RL1                              2FA0
[ G] RL2                              2FA5
[ G] RL3                              2FAE
[ G] RSIBRK                           2FF4
[ G] RTABP                            003A
[ G] SAV                              38AE
[ G] SAVL                             0004
[ G] savlen                           38B2
[ G] SAVRES                           371D
[ G] SCDONE                           35D4
[ G] SCMP                             2C36
[ G] SCOMP                            2C2B
[ G] SCRIPT                           005E
[ G] SCROUT                           348E
[ G] SENDCH                           3452
[ G] SETA0                            277A
[ G] SETDRV                           386B
[ G] SETNP                            2774
[ G] SETPOS                           383F
[ G] SETSTR                           3188
[ G] SETWRD                           317F
[ G] SFLAG                            3498
[ G] SIBRKP                           304D
[ G] SING                             3942
[ G] SINGL                            0007
[ G] sinlen                           3949
[ G] SPACE                            0020
[ G] SPCS                             35B8
[ G] SQUOT                            0045
[ G] SREM                             0046
[ G] ST0                              272D
[ G] ST1A                             273B
[ G] ST1B                             2745
[ G] STABP                            003B
[ G] STAMP                            0011
[ G] START                            270A
[ G] STBYTF                           002B
[ G] SWAP                             0012
[ G] TABS                             2DC7
[ G] TABTOP                           000F
[ G] TDRIVE                           0061
[ G] TEMP                             003F
[ G] TEMP2                            0041
[ G] TIMEFL                           0050
[ G] TIONP                            38A0
[ G] TOBOOT                           37F2
[ G] TOPRIN                           3481
[ G] TOPSTA                           2408
[ G] TOSCR                            3455
[ G] TPOSIT                           0060
[ G] TRACK                            004E
[ G] TRUE                             00FF
[ G] TSTEND                           2711
[ G] UDIV                             2DE7
[ G] UDLOOP                           2DF2
[ G] UDNEXT                           2E05
[ G] UNDER                            2941
[ G] USEPM                            3665
[ G] USLEND                           3680
[ G] VAL                              003D
[ G] VARGET                           28C9
[ G] VARPUT                           28F1
[ G] VCODE                            353F
[ G] VCODEL                           0012
[ G] vcodelen                         3551
[ G] VERNUM                           3551
[ G] VERSOK                           37BA
[ G] VOCAB                            0023
[ G] VSUM                             2A9E
[ G] VSUM0                            2AAA
[ G] WDRIV                            3924
[ G] WDRIVL                           000E
[ G] wdrivlen                         3932
[ G] WNEXT                            3078
[ G] ZADD                             2D78
[ G] ZB0                              2C5F
[ G] ZBAND                            2C64
[ G] ZBCOM                            2BF3
[ G] ZBEGIN                           0006
[ G] ZBOR                             2C59
[ G] ZBTST                            2C4C
[ G] ZCALL                            2E40
[ G] ZCALL1                           2E70
[ G] ZCALL2                           2E8B
[ G] ZCALL3                           2E8F
[ G] ZCALL4                           2EA6
[ G] ZCHKSM                           001C
[ G] ZCHR1                            3334
[ G] ZCHR2                            333F
[ G] ZCHRCS                           332A
[ G] ZCHRX                            3346
[ G] ZCODE                            3E0A
[ G] ZCODEHIGH                        003E
[ G] ZCRLF                            359D
[ G] ZDEC                             2B33
[ G] ZDIV                             2DA6
[ G] ZDLESS                           2C10
[ G] ZENDLD                           0004
[ G] ZEQUAL                           2E18
[ G] ZERROR                           350C
[ G] ZFCLR                            2C8B
[ G] ZFIRST                           2ADB
[ G] ZFSET                            2C7D
[ G] ZFSETP                           2C6C
[ G] ZFWORD                           0018
[ G] ZGET                             2CCA
[ G] ZGETB                            2CDD
[ G] ZGETP                            2CF0
[ G] ZGETPT                           2D34
[ G] ZGLOBA                           000C
[ G] ZGRTR                            2C06
[ G] ZID                              0002
[ G] ZIGRTR                           2C19
[ G] ZIN                              2C3C
[ G] ZINC                             2B1B
[ G] ZINC1                            2B25
[ G] ZIP                              270A
[ G] ZJUMP                            2BD7
[ G] ZLENTH                           001A
[ G] ZLESS                            2BFC
[ G] ZLOC                             2AF9
[ G] ZMLOOP                           2D8E
[ G] ZMNEXT                           2D9E
[ G] ZMOD                             2DAB
[ G] ZMODE                            0001
[ G] ZMOVE                            2CA4
[ G] ZMUL                             2D87
[ G] ZMVEX                            2CC9
[ G] ZNEXT                            2AD2
[ G] ZNEXTP                           2D58
[ G] ZNOOP                            2A6C
[ G] ZOBJEC                           000A
[ G] ZPAGE                            000D
[ G] ZPCFLG                           0018
[ G] ZPCH                             0013
[ G] ZPCL                             0015
[ G] ZPCM                             0014
[ G] ZPCPNT                           0016
[ G] ZPGTOP                           0060
[ G] ZPOP                             2F68
[ G] ZPRB                             2B3F
[ G] ZPRC                             2F07
[ G] ZPRD                             2B89
[ G] ZPRI                             2A4F
[ G] ZPRINT                           2BE1
[ G] ZPRN                             2F0C
[ G] ZPRR                             2A6D
[ G] ZPTSIZ                           2B09
[ G] ZPURBT                           000E
[ G] ZPURE                            000B
[ G] ZPUSH                            2F63
[ G] ZPUT                             2EB1
[ G] ZPUTB                            2EC3
[ G] ZPUTP                            2ED1
[ G] ZQUIT                            3525
[ G] ZRAND                            2F47
[ G] ZREAD                            2F70
[ G] ZREMOV                           2B49
[ G] ZREST                            3779
[ G] ZRET                             2B9D
[ G] ZRFALS                           2A4C
[ G] ZRSTAK                           2A74
[ G] ZRT                              2A46
[ G] ZRTRUE                           2A44
[ G] ZSAVE                            3726
[ G] ZSCRIP                           0010
[ G] ZSCRN                            2A6C
[ G] ZSERIA                           0012
[ G] ZSET                             2C9B
[ G] ZSPLIT                           2A6C
[ G] ZSTACK                           220A
[ G] ZSTAKL                           00FF
[ G] ZSTART                           34C5
[ G] ZSTBUI                           002E
[ G] ZSTBUO                           0034
[ G] ZSTEX                            3196
[ G] ZSTWRD                           002C
[ G] ZSUB                             2D81
[ G] ZUSL                             35D5
[ G] ZUSL1                            35F2
[ G] ZVALUE                           2BEB
[ G] ZVER                             2A7C
[ G] ZVERS                            0000
[ G] ZVOCAB                           0008
[ G] ZZERO                            2AC9
