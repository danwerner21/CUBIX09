                      (        cubix.asm):00001         ;       title   CUBIX 6809 Operating System
                      (        cubix.asm):00002         ;*
                      (        cubix.asm):00003         ;* CUBIX Operating System for the 6809
                      (        cubix.asm):00004         ;*
                      (        cubix.asm):00005         ;* Copyright 1983-2005 Dave Dunfield
                      (        cubix.asm):00006         ;* All rights reserved.
                      (        cubix.asm):00007         ;*
                      (        cubix.asm):00008         
                      (        cubix.asm):00009                 IFDEF   6809PC
                      (        cubix.asm):00010         ;* MEMORY LOCATIONS FOR DUODYNE
     E000             (        cubix.asm):00011         ROM             EQU $E000                         ; OS FIRMWARE
     0400             (        cubix.asm):00012         RAM             EQU $0400                         ; OS LOCAL STORAGE (1K)
     2000             (        cubix.asm):00013         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
     DFFF             (        cubix.asm):00014         USREND          EQU ROM-1                         ; RAMTEST STOPS HERE
                      (        cubix.asm):00015                 ENDIF
                      (        cubix.asm):00016         
                      (        cubix.asm):00017                 IFDEF   duodyne
                      (        cubix.asm):00018         ;* MEMORY LOCATIONS FOR DUODYNE
0000                  (        cubix.asm):00019         ROM             EQU $E000                         ; OS FIRMWARE
0000                  (        cubix.asm):00020         RAM             EQU $1000                         ; OS LOCAL STORAGE (1K)
0000                  (        cubix.asm):00021         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
0000                  (        cubix.asm):00022         USREND          EQU ROM-257                       ; RAMTEST STOPS HERE
                      (        cubix.asm):00023                 ENDIF
                      (        cubix.asm):00024         
                      (        cubix.asm):00025                 IFDEF   nhyodyne
                      (        cubix.asm):00026         ;* MEMORY LOCATIONS FOR NHYODYNE
0000                  (        cubix.asm):00027         ROM             EQU $E000                         ; OS FORMWARE
0000                  (        cubix.asm):00028         RAM             EQU ROM-1024                      ; OS LOCAL STORAGE
0000                  (        cubix.asm):00029         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
0000                  (        cubix.asm):00030         USREND          EQU ROM-1                         ; RAMTEST STOPS HERE
                      (        cubix.asm):00031                 ENDIF
                      (        cubix.asm):00032         
                      (        cubix.asm):00033         ;* MISC CONSTANTS
     0008             (        cubix.asm):00034         NDEV            EQU 8                             ; NUMBER OF SERIAL DEVICES SUPPORTED
     0004             (        cubix.asm):00035         NDSK            EQU 4                             ; # OF DISK DRIVES SUPPORTED
     0000             (        cubix.asm):00036         DIRSEC          EQU 0                             ; DIRECTORY STARTS HERE
     0001             (        cubix.asm):00037         LNKSEC          EQU 1                             ; STARTING LINK SECTOR ON DISK
     00F0             (        cubix.asm):00038         DEFATR          EQU %11110000                     ; DEFAULT FILE ATTRIBUTES
                      (        cubix.asm):00039         ;* RETURN CODES
     0001             (        cubix.asm):00040         RCBOP           EQU 1                             ; BAD OPERAND
     0002             (        cubix.asm):00041         RCNOTF          EQU 2                             ; FILE NOT FOUND
     0003             (        cubix.asm):00042         RCPRO           EQU 3                             ; FILE PROTECTION VIOLATION
     0004             (        cubix.asm):00043         RCORE           EQU 4                             ; NOT OPEN FOR READ
     0005             (        cubix.asm):00044         RCOWE           EQU 5                             ; NOT OPEN FOR WRITE
     0006             (        cubix.asm):00045         RCEOF           EQU 6                             ; END OF FILE ENCOUNTERED
     0007             (        cubix.asm):00046         RCEXI           EQU 7                             ; FILE ALREADY EXISTS
     0008             (        cubix.asm):00047         RCNOS           EQU 8                             ; NO DISK SPACE AVAILABLE
     0009             (        cubix.asm):00048         RCDSK           EQU 9                             ; DISK ERROR
     000A             (        cubix.asm):00049         RCDEV           EQU 10                            ; INVALID DEVICE
     000B             (        cubix.asm):00050         RCDNL           EQU 11                            ; DOWNLOAD FAILURE
     00FF             (        cubix.asm):00051         RCCMD           EQU 255                           ; BAD COMMAND
                      (        cubix.asm):00052         ;* FILE PERMISSIONS
     0080             (        cubix.asm):00053         RPERM           EQU %10000000                     ; READ PERMISSION
     0040             (        cubix.asm):00054         WPERM           EQU %01000000                     ; WRITE PERMISSION
     0020             (        cubix.asm):00055         EPERM           EQU %00100000                     ; EXECUTE PERMISSION
     0010             (        cubix.asm):00056         DPERM           EQU %00010000                     ; DELETE PERMISSION
                      (        cubix.asm):00057         ;* DISK CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00058                 ORG     0
0000                  (        cubix.asm):00059         DRIVE
0000                  (        cubix.asm):00060                 RMB     1                                 ; DRIVE ID
0001                  (        cubix.asm):00061         NCYL
0001                  (        cubix.asm):00062                 RMB     1                                 ; # TRACKS
0002                  (        cubix.asm):00063         NHEAD
0002                  (        cubix.asm):00064                 RMB     1                                 ; # HEADS
0003                  (        cubix.asm):00065         NSEC
0003                  (        cubix.asm):00066                 RMB     1                                 ; # SECTORS/TRACK
0004                  (        cubix.asm):00067         CYL
0004                  (        cubix.asm):00068                 RMB     1                                 ; CURRENT CYLINDER
0005                  (        cubix.asm):00069         HEAD
0005                  (        cubix.asm):00070                 RMB     1                                 ; CURRENT HEAD
0006                  (        cubix.asm):00071         SEC
0006                  (        cubix.asm):00072                 RMB     1                                 ; CURRENT SECTOR
     0007             (        cubix.asm):00073         CSIZE           EQU *
                      (        cubix.asm):00074         ;* DIRECTORY ENTRY DESCRIPTION
                      (        cubix.asm):00075                 ORG     0
0000                  (        cubix.asm):00076         DPREFIX
0000                  (        cubix.asm):00077                 RMB     8                                 ; DIRECTORY PREFIX
0008                  (        cubix.asm):00078         DNAME
0008                  (        cubix.asm):00079                 RMB     8                                 ; FILENAME
0010                  (        cubix.asm):00080         DTYPE
0010                  (        cubix.asm):00081                 RMB     3                                 ; FILETYPE
0013                  (        cubix.asm):00082         DDADR
0013                  (        cubix.asm):00083                 RMB     2                                 ; DISK ADDRESS
0015                  (        cubix.asm):00084         DRADR
0015                  (        cubix.asm):00085                 RMB     2                                 ; RUN ADDRESS
0017                  (        cubix.asm):00086         DATTR
0017                  (        cubix.asm):00087                 RMB     1                                 ; FILE ATTRIBUTES
                      (        cubix.asm):00088         ;* FILE CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00089                 ORG     0
0000                  (        cubix.asm):00090         OTYPE
0000                  (        cubix.asm):00091                 RMB     1                                 ; TYPE OF OPEN (READ/WRITE ETC.)
0001                  (        cubix.asm):00092         ODRIVE
0001                  (        cubix.asm):00093                 RMB     1                                 ; DRIVE FILE IS ON
0002                  (        cubix.asm):00094         OFIRST
0002                  (        cubix.asm):00095                 RMB     2                                 ; FIRST SECTOR IN ILE
0004                  (        cubix.asm):00096         OSECTOR
0004                  (        cubix.asm):00097                 RMB     2                                 ; SECTOR BEING READ/WRITTEN
0006                  (        cubix.asm):00098         OLSTSEC
0006                  (        cubix.asm):00099                 RMB     2                                 ; LAST SECTOR READ/WRITTEN
0008                  (        cubix.asm):00100         OOFFSET
0008                  (        cubix.asm):00101                 RMB     2                                 ; OFFSET INTO SERIAL BUFFER
     000A             (        cubix.asm):00102         OSIZ            EQU *
                      (        cubix.asm):00103         ;* RAM VARIABLES
                      (        cubix.asm):00104                 ORG     RAM
0400                  (        cubix.asm):00105         INBUFF
0400                  (        cubix.asm):00106                 RMB     80                                ; INPUT BUFFER
     0450             (        cubix.asm):00107         IRAM            EQU *                             ; START OF INITIALIZED RAM
0450                  (        cubix.asm):00108         DCTRL
0450                  (        cubix.asm):00109                 RMB     CSIZE*NDSK                        ; DRIVE CONTROL BLOCKS
046C                  (        cubix.asm):00110         CONIN
046C                  (        cubix.asm):00111                 RMB     1                                 ; SELECTED CONSOLE INPUT
046D                  (        cubix.asm):00112         CONOUT
046D                  (        cubix.asm):00113                 RMB     1                                 ; SELECTED CONSOLE OUTPUT
                      (        cubix.asm):00114         ;* DITAB MARKS START OF VECTOR TABLE
                      (        cubix.asm):00115         ;* SERIAL DEVICE DRIVERS
046E                  (        cubix.asm):00116         DITAB
046E                  (        cubix.asm):00117                 RMB     NDEV*2                            ; DEVICE INPUT DRIVERS
047E                  (        cubix.asm):00118         DOTAB
047E                  (        cubix.asm):00119                 RMB     NDEV*2                            ; DEVICE OUTPUT DRIVERS
                      (        cubix.asm):00120         ;* DISK DRIVERS
048E                  (        cubix.asm):00121         XHOME
048E                  (        cubix.asm):00122                 RMB     2                                 ; DISK HOME HEAD ROUTINE
0490                  (        cubix.asm):00123         XRDSEC
0490                  (        cubix.asm):00124                 RMB     2                                 ; DISK READ SECTOR ROUTINE
0492                  (        cubix.asm):00125         XWRSEC
0492                  (        cubix.asm):00126                 RMB     2                                 ; DISK WRITE SECTOR ROUTINE
0494                  (        cubix.asm):00127         XFORMAT
0494                  (        cubix.asm):00128                 RMB     2                                 ; DISK FORMAT ROUTINE
                      (        cubix.asm):00129         ;* MACHINE VECTORS
0496                  (        cubix.asm):00130         SWIVEC
0496                  (        cubix.asm):00131                 RMB     2                                 ; SWI HANDLER VECTOR
0498                  (        cubix.asm):00132         SWI2VEC
0498                  (        cubix.asm):00133                 RMB     2                                 ; SWI2 INTERRUPT VECTOR
049A                  (        cubix.asm):00134         SWI3VEC
049A                  (        cubix.asm):00135                 RMB     2                                 ; SWI3 INTERRUPT VECTOR
049C                  (        cubix.asm):00136         IRQVEC
049C                  (        cubix.asm):00137                 RMB     2                                 ; IRQ HANDLER VECTOR
049E                  (        cubix.asm):00138         FIRQVEC
049E                  (        cubix.asm):00139                 RMB     2                                 ; FIRQ HANDLER VECTOR
04A0                  (        cubix.asm):00140         NMIVEC
04A0                  (        cubix.asm):00141                 RMB     2                                 ; NMI HANDLER VECTOR
                      (        cubix.asm):00142         ;* MSGFLG MARKS START OF FLAG TABLES
04A2                  (        cubix.asm):00143         MSGFLG
04A2                  (        cubix.asm):00144                 RMB     1                                 ; MESSAGE ENABLED FLAG
04A3                  (        cubix.asm):00145         DBGFLG
04A3                  (        cubix.asm):00146                 RMB     1                                 ; DEBUG FLAG
04A4                  (        cubix.asm):00147         TRCFLG
04A4                  (        cubix.asm):00148                 RMB     1                                 ; TRACE ENABLED FLAG
     0003             (        cubix.asm):00149         NUMFLG          EQU 3                             ; # FLAGS SUPPORTED
                      (        cubix.asm):00150         ;* DEFAULT DIRECTORY
04A5                  (        cubix.asm):00151         DEFDRV
04A5                  (        cubix.asm):00152                 RMB     1                                 ; DEFAULT DRIVE
04A6                  (        cubix.asm):00153         DEFDIR
04A6                  (        cubix.asm):00154                 RMB     8                                 ; DEFAULT DIRECTORY
                      (        cubix.asm):00155         ;* SYSTEM DIRECTORY
04AE                  (        cubix.asm):00156         SYSDRV
04AE                  (        cubix.asm):00157                 RMB     1                                 ; SYSTEM DRIVE
04AF                  (        cubix.asm):00158         SYSDIR
04AF                  (        cubix.asm):00159                 RMB     8                                 ; SYSTEM DIRECTORY
04B7                  (        cubix.asm):00160         DRIVEMAP
04B7                  (        cubix.asm):00161                 RMB     8                                 ; DRIVE MAPPINGS
                      (        cubix.asm):00162         ;* NON-INITIALIZED GLOBAL RAM
04BF                  (        cubix.asm):00163         FDRIVE
04BF                  (        cubix.asm):00164                 RMB     1                                 ; CURRENT DISK DRIVE
04C0                  (        cubix.asm):00165         PREFIX
04C0                  (        cubix.asm):00166                 RMB     8                                 ; DIRECTORY PREFIX
04C8                  (        cubix.asm):00167         FNAME
04C8                  (        cubix.asm):00168                 RMB     8                                 ; FILENAME
04D0                  (        cubix.asm):00169         FTYPE
04D0                  (        cubix.asm):00170                 RMB     3                                 ; FILETYPE
04D3                  (        cubix.asm):00171         TEMP
04D3                  (        cubix.asm):00172                 RMB     2                                 ; TEMPORARY STORAGE
04D5                  (        cubix.asm):00173         TEMP1
04D5                  (        cubix.asm):00174                 RMB     2                                 ; MORE TEMPORARY STORAGE
04D7                  (        cubix.asm):00175         TEMP2
04D7                  (        cubix.asm):00176                 RMB     2                                 ;STILL MORE
04D9                  (        cubix.asm):00177         TEMP3
04D9                  (        cubix.asm):00178                 RMB     2                                 ;STILL MORE
04DB                  (        cubix.asm):00179         TEMP4
04DB                  (        cubix.asm):00180                 RMB     2                                 ;STILL MORE
04DD                  (        cubix.asm):00181         SAVB
04DD                  (        cubix.asm):00182                 RMB     1                                 ;CALLERS 'B' REGISTER
04DE                  (        cubix.asm):00183         SAVX
04DE                  (        cubix.asm):00184                 RMB     2                                 ;CALLERS 'X' REGISTER
04E0                  (        cubix.asm):00185         SAVY
04E0                  (        cubix.asm):00186                 RMB     2                                 ;CALLERS 'Y' REGISTER
04E2                  (        cubix.asm):00187         SAVDRV
04E2                  (        cubix.asm):00188                 RMB     1                                 ;CALLERS ACTIVE DRIVE
04E3                  (        cubix.asm):00189         SAVSTK
04E3                  (        cubix.asm):00190                 RMB     2                                 ;CALLERS STACK POINTER
04E5                  (        cubix.asm):00191         WRKCHG
04E5                  (        cubix.asm):00192                 RMB     1                                 ;WORK SECTOR CHANGED
04E6                  (        cubix.asm):00193         WRKDRV
04E6                  (        cubix.asm):00194                 RMB     1                                 ;CURRENT WORK SECTOR DRIVE
04E7                  (        cubix.asm):00195         WRKSEC
04E7                  (        cubix.asm):00196                 RMB     2                                 ;CURRENT WORK SECTOR
04E9                  (        cubix.asm):00197         CMDDRV
04E9                  (        cubix.asm):00198                 RMB     1                                 ;CURRENT COMMAND FILE DRIVE
04EA                  (        cubix.asm):00199         CMDSEC
04EA                  (        cubix.asm):00200                 RMB     2                                 ;CURRENTLY OPEN COMMAND FILE SECTOR
04EC                  (        cubix.asm):00201         CMDOFF
04EC                  (        cubix.asm):00202                 RMB     2                                 ;OFFSET INTO COMMAND FILE SECTOR
04EE                  (        cubix.asm):00203         CMDSTK
04EE                  (        cubix.asm):00204                 RMB     2                                 ;COMMAND PROCESSOR STACK PTR
04F0                  (        cubix.asm):00205         CMDRC
04F0                  (        cubix.asm):00206                 RMB     1                                 ;COMMAND FILE RETURN CODES
04F1                  (        cubix.asm):00207         OLDSTK
04F1                  (        cubix.asm):00208                 RMB     2                                 ;STACK FROM BEFORE TEMP ENTRY
04F3                  (        cubix.asm):00209         SDRIVE
04F3                  (        cubix.asm):00210                 RMB     1                                 ;CURRENTLY SELECTED DRIVE
04F4                  (        cubix.asm):00211         ERRCNT
04F4                  (        cubix.asm):00212                 RMB     1                                 ;DISK ERROR RETRY COUNT
04F5                  (        cubix.asm):00213         CMDBUF
04F5                  (        cubix.asm):00214                 RMB     80                                ;COMMAND BUFFER PARAMETER SAVE AREA
     0600             (        cubix.asm):00215         STACK           EQU RAM+512                       ;SYSTEM STACK
     0600             (        cubix.asm):00216         WRKSPC          EQU STACK                         ;WORK AREA
                      (        cubix.asm):00217         ;*
                      (        cubix.asm):00218                 ORG     ROM
                      (        cubix.asm):00219         ;* MISC FIXED CONSTANTS
E000                  (        cubix.asm):00220         ROMCHK
E000 FFFF             (        cubix.asm):00221                 FDB     $FFFF                             ;BLANK SPACE TO INSERT CHECKSUM
                      (        cubix.asm):00222                 IFDEF   test
                      (        cubix.asm):00223                 LDD     #ssr
                      (        cubix.asm):00224                 STD     >tvector
                      (        cubix.asm):00225                 JMP     begin
                      (        cubix.asm):00226                 ENDIF
E002                  (        cubix.asm):00227         MBASE
E002 2000             (        cubix.asm):00228                 FDB     USRRAM                            ;BASE MEMORY ADDRESS
                      (        cubix.asm):00229         ;*
                      (        cubix.asm):00230         ;* HARDWARE INITIALIZATION ROUTINE
                      (        cubix.asm):00231         ;*
E004                  (        cubix.asm):00232         DOINIT
E004 108E0450         (        cubix.asm):00233                 LDY     #IRAM                             ;POINT TO INITIALIZED RAM
E008 7EF997           (        cubix.asm):00234                 JMP     HWINIT                            ;INIT HARDWARE
                      (        cubix.asm):00235         ;*
                      (        cubix.asm):00236         ;* APPLICATION PROGRAM INTERFACE
                      (        cubix.asm):00237         ;*
E00B                  (        cubix.asm):00238         SSR
E00B F704DD           (        cubix.asm):00239                 STB     >SAVB                             ;APPLICS SAVED 'B'
E00E BF04DE           (        cubix.asm):00240                 STX     >SAVX                             ;APPLICS SAVED 'X'
E011 10BF04E0         (        cubix.asm):00241                 STY     >SAVY                             ;APPLICS SAVED 'Y'
E015 F604F3           (        cubix.asm):00242                 LDB     >SDRIVE                           ;GET DOS DRIVE
E018 F704E2           (        cubix.asm):00243                 STB     >SAVDRV                           ;SET SAVED DRIVE
E01B 316A             (        cubix.asm):00244                 LEAY    10,S                              ;ADDR OF SAVED PC
E01D AEA4             (        cubix.asm):00245                 LDX     ,Y                                ;GET IT
E01F E680             (        cubix.asm):00246                 LDB     ,X+                               ;GET OPERAND BYTE
E021 AFA4             (        cubix.asm):00247                 STX     ,Y                                ;SAVE UPDATED PC
E023 C171             (        cubix.asm):00248                 CMPB    #NUMSSR                           ;IS IT A VALID CALL #
E025 2437             (        cubix.asm):00249                 BHS     INVSSR                            ;INVALID CALL
E027 58               (        cubix.asm):00250                 ASLB                                      ;DOUBLE FOR TWO BYTE ENTRIES
E028 8EF8B5           (        cubix.asm):00251                 LDX     #SSRTAB                           ;OFFSET TO IT
E02B 3A               (        cubix.asm):00252                 ABX                                       ;UNSIGNED ADD
E02C EC84             (        cubix.asm):00253                 LDD     ,X                                ;GET ADDRESS
E02E FD04D3           (        cubix.asm):00254                 STD     >TEMP                             ;SAVE SO WE CAN EXEC
E031 10BF04E3         (        cubix.asm):00255                 STY     >SAVSTK                           ;SAVE STACK POINTER
E035 B604A3           (        cubix.asm):00256                 LDA     >DBGFLG                           ;DEBUGGING?
E038 2606             (        cubix.asm):00257                 BNE     DBGSSR                            ;YES, OUTPUT DATA
E03A 357F             (        cubix.asm):00258                 PULS    CC,A,B,DP,X,Y,U                   ;RESTORE APPLICS REGS
E03C 6E9F04D3         (        cubix.asm):00259                 JMP     [TEMP]                            ;EXECUTE SYSTEM CALL
E040                  (        cubix.asm):00260         DBGSSR
E040 BDE54E           (        cubix.asm):00261                 JSR     WRLIN                             ;OUTPUT LINE
E043 53535220         (        cubix.asm):00262                 FCC     'SSR '
E047 00               (        cubix.asm):00263                 FCB     $00
E048 AEA4             (        cubix.asm):00264                 LDX     ,Y                                ;RECOVER PC
E04A E61F             (        cubix.asm):00265                 LDB     -1,X                              ;GET NUMBER BACK
E04C BDE47D           (        cubix.asm):00266                 JSR     WRDEC8                            ;OUTPUT
E04F BDE54E           (        cubix.asm):00267                 JSR     WRLIN
E052 202D20           (        cubix.asm):00268                 FCC     ' - '
E055 00               (        cubix.asm):00269                 FCB     $00
E056 357F             (        cubix.asm):00270                 PULS    CC,A,B,DP,X,Y,U
E058 8D33             (        cubix.asm):00271                 BSR     DMPREG1                           ;DISPLAY REGS
E05A 6E9F04D3         (        cubix.asm):00272                 JMP     [TEMP]
E05E                  (        cubix.asm):00273         INVSSR
E05E 1F24             (        cubix.asm):00274                 TFR     Y,S                               ;FIX STACK
E060 BDE54E           (        cubix.asm):00275                 JSR     WRLIN                             ;OUTPUT LINE
E063 496E76616C696420 (        cubix.asm):00276                 FCC     'Invalid SSR '
     53535220
E06F 00               (        cubix.asm):00277                 FCB     $00
E070 BDE47D           (        cubix.asm):00278                 JSR     WRDEC8                            ;OUTPUT
E073 BDE54E           (        cubix.asm):00279                 JSR     WRLIN                             ;OUTPUT LINE
E076 2061742024       (        cubix.asm):00280                 FCC     ' at $'
E07B 00               (        cubix.asm):00281                 FCB     $00
E07C ECE1             (        cubix.asm):00282                 LDD     ,S++                              ;GET ADDR
E07E 830002           (        cubix.asm):00283                 SUBD    #2                                ;BACK TO ADDRESS
E081 BDE545           (        cubix.asm):00284                 JSR     WRHEXW                            ;OUTPUT
E084 BDE588           (        cubix.asm):00285                 JSR     LFCR                              ;NEW LINE
E087 7EE1C6           (        cubix.asm):00286                 JMP     DOSKCM                            ;RE-ENTER, INSURE NO COMMAND
E08A                  (        cubix.asm):00287         DMPREG
E08A 8D01             (        cubix.asm):00288                 BSR     DMPREG1                           ;BSR SO PC ON STACK,4
E08C 39               (        cubix.asm):00289                 RTS
                      (        cubix.asm):00290         ;* DEBUG ROUTINE
E08D                  (        cubix.asm):00291         DMPREG1
E08D 3407             (        cubix.asm):00292                 PSHS    CC,A,B                            ;SAVE REGS
E08F BDE54E           (        cubix.asm):00293                 JSR     WRLIN                             ;OUTPUT MESSAGE
E092 50433D           (        cubix.asm):00294                 FCC     'PC='
E095 00               (        cubix.asm):00295                 FCB     $00
E096 EC65             (        cubix.asm):00296                 LDD     5,S                               ;GET PC
E098 830002           (        cubix.asm):00297                 SUBD    #2                                ;BACK UP TO SSR ADDRESS
E09B BDE545           (        cubix.asm):00298                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E09E BDE54E           (        cubix.asm):00299                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0A1 2043433D         (        cubix.asm):00300                 FCC     ' CC='
E0A5 00               (        cubix.asm):00301                 FCB     $00
E0A6 A6E4             (        cubix.asm):00302                 LDA     ,S                                ;GET CONDITION CODE
E0A8 BDE55A           (        cubix.asm):00303                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0AB BDE54E           (        cubix.asm):00304                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0AE 2044503D         (        cubix.asm):00305                 FCC     ' DP='
E0B2 00               (        cubix.asm):00306                 FCB     $00
E0B3 1FB8             (        cubix.asm):00307                 TFR     DP,A                              ;GET DIRECT PAGE
E0B5 BDE55A           (        cubix.asm):00308                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0B8 BDE54E           (        cubix.asm):00309                 JSR     WRLIN                             ;OUTPUT MESSAHE
E0BB 20413D           (        cubix.asm):00310                 FCC     ' A='
E0BE 00               (        cubix.asm):00311                 FCB     $00
E0BF A661             (        cubix.asm):00312                 LDA     1,S                               ;GET SAVED 'A'
E0C1 BDE55A           (        cubix.asm):00313                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0C4 BDE54E           (        cubix.asm):00314                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0C7 20423D           (        cubix.asm):00315                 FCC     ' B='
E0CA 00               (        cubix.asm):00316                 FCB     $00
E0CB A662             (        cubix.asm):00317                 LDA     2,S                               ;GET SAVED 'B'
E0CD BDE55A           (        cubix.asm):00318                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0D0 BDE54E           (        cubix.asm):00319                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0D3 20583D           (        cubix.asm):00320                 FCC     ' X='
E0D6 00               (        cubix.asm):00321                 FCB     $00
E0D7 1F10             (        cubix.asm):00322                 TFR     X,D                               ;GET 'X'
E0D9 BDE545           (        cubix.asm):00323                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0DC BDE54E           (        cubix.asm):00324                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0DF 20593D           (        cubix.asm):00325                 FCC     ' Y='
E0E2 00               (        cubix.asm):00326                 FCB     $00
E0E3 1F20             (        cubix.asm):00327                 TFR     Y,D                               ;GET 'Y'
E0E5 BDE545           (        cubix.asm):00328                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0E8 BDE54E           (        cubix.asm):00329                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0EB 20553D           (        cubix.asm):00330                 FCC     ' U='
E0EE 00               (        cubix.asm):00331                 FCB     $00
E0EF 1F30             (        cubix.asm):00332                 TFR     U,D                               ;GET 'U'
E0F1 BDE545           (        cubix.asm):00333                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0F4 BDE54E           (        cubix.asm):00334                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0F7 20533D           (        cubix.asm):00335                 FCC     ' S='
E0FA 00               (        cubix.asm):00336                 FCB     $00
E0FB 1F40             (        cubix.asm):00337                 TFR     S,D                               ;GET 'S'
E0FD C30007           (        cubix.asm):00338                 ADDD    #7                                ;DISCOUNT WHAT WE STACKED
E100 BDE545           (        cubix.asm):00339                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E103 BDE588           (        cubix.asm):00340                 JSR     LFCR                              ;OUTPUT NEW LINE
E106 3587             (        cubix.asm):00341                 PULS    CC,A,B,PC                         ;RESTORE & RETURN
                      (        cubix.asm):00342         ;*
                      (        cubix.asm):00343         ;* ZERO WORK RAM & INIT HARDWARE DEVICES
                      (        cubix.asm):00344         ;*
E108                  (        cubix.asm):00345         BEGIN
                      (        cubix.asm):00346         
E108 10CE0600         (        cubix.asm):00347                 LDS     #STACK                            ;SET UP SYSTEM STACK
E10C 8E0400           (        cubix.asm):00348                 LDX     #RAM                              ;POINT TO START OF RAM
E10F                  (        cubix.asm):00349         BEG1
E10F 6F80             (        cubix.asm):00350                 CLR     ,X+                               ;ZERO IT
E111 8C0600           (        cubix.asm):00351                 CMPX    #STACK                            ;AT END?
E114 25F9             (        cubix.asm):00352                 BLO     BEG1                              ;CONTINUE
E116 BDE004           (        cubix.asm):00353                 JSR     DOINIT                            ;INITIALIZE HARDWARE
E119 BDE625           (        cubix.asm):00354                 JSR     PURGE1                            ;INITIALIZE WORK SECTOR
E11C 7F04F4           (        cubix.asm):00355                 CLR     >ERRCNT                           ;INDICATE NO ERRORS
                      (        cubix.asm):00356         
                      (        cubix.asm):00357         ;        IFNDEF  test
                      (        cubix.asm):00358         ;;* PERFORM CHECKSUM TEST OF ROM
                      (        cubix.asm):00359         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00360         ;        FCC     'ROM... '
                      (        cubix.asm):00361         ;        LDX     #ROMCHK+2                         ;CHECKSUM STARTS HERE
                      (        cubix.asm):00362         ;        CLRA                                      ;ZERO HIGH
                      (        cubix.asm):00363         ;        CLRB                                      ;ZERO LOW
                      (        cubix.asm):00364         ;ROMT1
                      (        cubix.asm):00365         ;        ADDB    ,X+                               ;ADD IN ONE BYTE
                      (        cubix.asm):00366         ;        ADCA    #0                                ;INSURE HIGH INCREMENTS
                      (        cubix.asm):00367         ;        CMPX    #0                                ;AT END OF ROM?
                      (        cubix.asm):00368         ;        BNE     ROMT1                             ;NO, KEEP TRYING
                      (        cubix.asm):00369         ;        CMPD    >ROMCHK                           ;DOES CHECKSUM MATCH?
                      (        cubix.asm):00370         ;        BEQ     ROMT2                             ;YES, ITS OK
                      (        cubix.asm):00371         ;;* ROM TEST FAILED
                      (        cubix.asm):00372         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00373         ;        FCC     'Failed'
                      (        cubix.asm):00374         ;        DEC     >ERRCNT                           ;SET FLAG, INDICATE ERROR
                      (        cubix.asm):00375         ;        BRA     ROMT3
                      (        cubix.asm):00376         ;* ROM TEST PASSED
                      (        cubix.asm):00377         ;ROMT2
                      (        cubix.asm):00378         ;        BSR     SPASS                             ;DISPLAY PASSED MESSAGE
                      (        cubix.asm):00379         ;        ENDIF
                      (        cubix.asm):00380         ;;* PERFORM WALKING BIT TEST OF RAM
                      (        cubix.asm):00381         ;ROMT3
                      (        cubix.asm):00382         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00383         ;        FCC     'RAM... '
                      (        cubix.asm):00384         ;        LDX     >MBASE                            ;GET BASE RAM ADDRESS
                      (        cubix.asm):00385         ;RAMT1
                      (        cubix.asm):00386         ;        LDA     ,X                                ;GET ORIGINAL DATA BYTE
                      (        cubix.asm):00387         ;        LDB     #%10000000                        ;BEGIN WITH LEFTMOST BIT
                      (        cubix.asm):00388         ;RAMT2
                      (        cubix.asm):00389         ;        STB     ,X                                ;WRITE TEST PATTERN
                      (        cubix.asm):00390         ;        CMPB    ,X                                ;DOES IT MATCH
                      (        cubix.asm):00391         ;        BNE     RAMT5                             ;NO, FAILED
                      (        cubix.asm):00392         ;        LSRB                                      ;SHIFT BIT
                      (        cubix.asm):00393         ;        BNE     RAMT2                             ;DO NEXT BIT
                      (        cubix.asm):00394         ;        STA     ,X+                               ;RESTORE ORIGINAL DATA
                      (        cubix.asm):00395         ;;* ON EVEN PAGE BOUNDARYS, TEST FOR ABORT KEY
                      (        cubix.asm):00396         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00397         ;        TSTB                                      ;EVEN BOUNDARY?
                      (        cubix.asm):00398         ;        BNE     RAMT3                             ;NO, DON'T TEST
                      (        cubix.asm):00399         ;        JSR     TSTCHR                            ;ANY CHARACTERS RECEIVED?
                      (        cubix.asm):00400         ;        CMPA    #$1B                              ;ESCAPE ABORTS?
                      (        cubix.asm):00401         ;        BEQ     RAMT4                             ;ABORT RAM TEST
                      (        cubix.asm):00402         ;;* CONTINUE TILL AT END OF USER RAM
                      (        cubix.asm):00403         ;RAMT3
                      (        cubix.asm):00404         ;        CMPX    #USREND                           ;ARE WE OVER?
                      (        cubix.asm):00405         ;        BLO     RAMT1                             ;NO, ITS OK
                      (        cubix.asm):00406         ;;* FINISHED, RAM TEST PASSED
                      (        cubix.asm):00407         ;        BSR     SPASS                             ;INDICATE SUCCESS
                      (        cubix.asm):00408         ;        BRA     HELLO                             ;AND PROCEED
                      (        cubix.asm):00409         ;* DISPLAY 'PASSED' MESSAGE
                      (        cubix.asm):00410         ;SPASS
                      (        cubix.asm):00411         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00412         ;        FCC     'Passed'
                      (        cubix.asm):00413         ;        RTS
                      (        cubix.asm):00414         ;;* RAM TEST ABORTED BY ESCAPE
                      (        cubix.asm):00415         ;RAMT4
                      (        cubix.asm):00416         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00417         ;        FCC     'Aborted'
                      (        cubix.asm):00418         ;        BRA     RAMT6                             ;AND CONTINUE
                      (        cubix.asm):00419         ;;* RAM TEST FAILED,
                      (        cubix.asm):00420         ;RAMT5
                      (        cubix.asm):00421         ;        STA     ,X                                ;RESAVE OLD VALUE
                      (        cubix.asm):00422         ;        JSR     WRLIN                             ;OUTPUT FAILED MESSAGE
                      (        cubix.asm):00423         ;        FCC     'Failed at $'
                      (        cubix.asm):00424         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00425         ;        JSR     WRHEXW                            ;DISPLAY IN HEX
                      (        cubix.asm):00426         ;        JSR     LFCR                              ;NEW LINE
                      (        cubix.asm):00427         ;RAMT6
                      (        cubix.asm):00428         ;        DEC     >ERRCNT                           ;INDICATE ERRORS
                      (        cubix.asm):00429         ;* ISSUE HEARALD MESSAGE & START THE BALL ROLLING
E11F                  (        cubix.asm):00430         HELLO
E11F BDE57E           (        cubix.asm):00431                 JSR     WRMSG
E122 0A               (        cubix.asm):00432                 FCB     $0A
E123 4355424958207665 (        cubix.asm):00433                 FCC     'CUBIX version 1.5'
     7273696F6E20312E
     35
E134 0A0D0A           (        cubix.asm):00434                 FCB     $0A,$0D,$0A
E137 436F707972696768 (        cubix.asm):00435                 FCC     'Copyright 1983-2005 Dave Dunfield'
     7420313938332D32
     3030352044617665
     2044756E6669656C
     64
E158 0A0D             (        cubix.asm):00436                 FCB     $0A,$0D
E15A 416C6C2072696768 (        cubix.asm):00437                 FCC     'All rights reserved'
     7473207265736572
     766564
E16D 0A0D00           (        cubix.asm):00438                 FCB     $0A,$0D,0
                      (        cubix.asm):00439         
                      (        cubix.asm):00440         ;* IF NO ERRORS, EXECUTE THE STARTUP FILE
E170 B604F4           (        cubix.asm):00441                 LDA     >ERRCNT                           ;GET ERROR FLAG
E173 2618             (        cubix.asm):00442                 BNE     CMD                               ;ERRORS, DO NOT EXECUTE
E175 108EF761         (        cubix.asm):00443                 LDY     #IPLFILE                          ;POINT TO IPL FILE
E179 BDE377           (        cubix.asm):00444                 JSR     GETNAM                            ;GET FILE NAME
E17C CEE18D           (        cubix.asm):00445                 LDU     #CMD                              ;ADDRESS TO RETURN TO
E17F 3440             (        cubix.asm):00446                 PSHS    U                                 ;SAVE ON STACK (FAKE JSR)
E181 10FF04E3         (        cubix.asm):00447                 STS     >SAVSTK                           ;SAVE STACK INCASE ERROR
E185 BDE692           (        cubix.asm):00448                 JSR     LOCDIR                            ;LOCATE FILE IN DIRECTORY
E188 2603             (        cubix.asm):00449                 BNE     CMD                               ;NOT FOUND, REPORT ERROR
E18A 7EE25B           (        cubix.asm):00450                 JMP     EXE3                              ;EXECUTE FILE
                      (        cubix.asm):00451         ;*
                      (        cubix.asm):00452         ;* COMMAND INTERPRETER
                      (        cubix.asm):00453         ;*
E18D                  (        cubix.asm):00454         CMD
E18D 10CE0600         (        cubix.asm):00455                 LDS     #STACK                            ;SET UP STACK
E191 BDE633           (        cubix.asm):00456                 JSR     WRTST                             ;WRITE OUT WORK SECTOR IF MODIFIED
E194 BDE4A5           (        cubix.asm):00457                 JSR     GLINE                             ;GET LINE OF INPUT
E197 8D34             (        cubix.asm):00458                 BSR     EXECMD                            ;EXECUTE COMMAND
E199                  (        cubix.asm):00459         RCRET
E199 27F2             (        cubix.asm):00460                 BEQ     CMD                               ;NO RETURN CODE TO DISPLAY
E19B 1F89             (        cubix.asm):00461                 TFR     A,B                               ;WRITE IT
E19D BDE54E           (        cubix.asm):00462                 JSR     WRLIN                             ;OUTPUT MESSAGE
E1A0 52633D           (        cubix.asm):00463                 FCC     'Rc='
E1A3 00               (        cubix.asm):00464                 FCB     $00
E1A4 BDE47D           (        cubix.asm):00465                 JSR     WRDEC8                            ;OUTPUT IN DECIMAL
E1A7 BDE588           (        cubix.asm):00466                 JSR     LFCR                              ;NEW LINE
E1AA 20E1             (        cubix.asm):00467                 BRA     CMD                               ;GET NEXT COMMAND
                      (        cubix.asm):00468         ;* RE-ENTRY POINT
E1AC                  (        cubix.asm):00469         REENT
E1AC 3401             (        cubix.asm):00470                 PSHS    CC                                ;SAVE CC
E1AE 8E0000           (        cubix.asm):00471                 LDX     #0                                ;GET A ZERO
E1B1 BF04F1           (        cubix.asm):00472                 STX     >OLDSTK                           ;CLEAR RETURN STACK
E1B4 BE04EE           (        cubix.asm):00473                 LDX     >CMDSTK                           ;GET CMD STACK
E1B7 2604             (        cubix.asm):00474                 BNE     CMDGO                             ;KEEP IT GOING
E1B9 3501             (        cubix.asm):00475                 PULS    CC                                ;RESTORE CC
E1BB 20DC             (        cubix.asm):00476                 BRA     RCRET                             ;AND CONTINUE
E1BD                  (        cubix.asm):00477         CMDGO
E1BD 3501             (        cubix.asm):00478                 PULS    CC
E1BF 7EF5D0           (        cubix.asm):00479                 JMP     CMDRET                            ;RETURN TO COMMAND
                      (        cubix.asm):00480         ;* TEMPORARY DOS ENTRY
E1C2                  (        cubix.asm):00481         TMPENT
E1C2 10FF04F1         (        cubix.asm):00482                 STS     >OLDSTK                           ;SAVE OLD STACK
E1C6                  (        cubix.asm):00483         DOSKCM
E1C6 4F               (        cubix.asm):00484                 CLRA
E1C7 5F               (        cubix.asm):00485                 CLRB
E1C8 FD04EE           (        cubix.asm):00486                 STD     >CMDSTK                           ;ZERO COMAND STACK
E1CB 20C0             (        cubix.asm):00487                 BRA     CMD                               ;CONTINUE
                      (        cubix.asm):00488         ;*
                      (        cubix.asm):00489         ;* EXECUTE DOS COMMAND(Y)
                      (        cubix.asm):00490         ;*
E1CD                  (        cubix.asm):00491         EXECMD
E1CD 10FF04E3         (        cubix.asm):00492                 STS     >SAVSTK                           ;SAVE STACK POINTER
E1D1 B604F3           (        cubix.asm):00493                 LDA     >SDRIVE                           ;GET DISK DRIVE
E1D4 B704E2           (        cubix.asm):00494                 STA     >SAVDRV                           ;SAVE SELECTED DRIVE
E1D7 BDE4DC           (        cubix.asm):00495                 JSR     SKIP                              ;LOOK FOR NULL COMMAND
E1DA 271A             (        cubix.asm):00496                 BEQ     NULCMD                            ;DON'T EXECUTE NULL
E1DC 10BF04D7         (        cubix.asm):00497                 STY     >TEMP2                            ;SAVED POINTER TO COMMAND
E1E0 8140             (        cubix.asm):00498                 CMPA    #'@'                              ;EXECUTE COMMAND FILE?
E1E2 102712D9         (        cubix.asm):00499                 LBEQ    COMFIL                            ;DO IT
E1E6 8EF843           (        cubix.asm):00500                 LDX     #CMDNAM                           ;POINT TO COMMAND TABLE
E1E9 BDE505           (        cubix.asm):00501                 JSR     TLOOK                             ;LOOK FOR IT
E1EC C10E             (        cubix.asm):00502                 CMPB    #NUMCMD                           ;IS IT OVER?
E1EE 2434             (        cubix.asm):00503                 BHS     EXE                               ;YES, TRY USER DEFINED
E1F0 58               (        cubix.asm):00504                 ASLB                                      ;TWO BYTE ENTRIES
E1F1 8EF899           (        cubix.asm):00505                 LDX     #CMDADR                           ;GET COMMAND ADDRESSES
E1F4 6E95             (        cubix.asm):00506                 JMP     [B,X]                             ;EXECUTE COMMAND
E1F6                  (        cubix.asm):00507         NULCMD
E1F6 39               (        cubix.asm):00508                 RTS
                      (        cubix.asm):00509         ;*
                      (        cubix.asm):00510         ;* RUN COMMAND
                      (        cubix.asm):00511         ;*
E1F7                  (        cubix.asm):00512         RUN
E1F7 BDE296           (        cubix.asm):00513                 JSR     GETSNA                            ;GET FILENAME
E1FA                  (        cubix.asm):00514         RUN1
E1FA 8645             (        cubix.asm):00515                 LDA     #'E'                              ;GET TYPE
E1FC C658             (        cubix.asm):00516                 LDB     #'X'                              ;GET TYPE
E1FE ED81             (        cubix.asm):00517                 STD     ,X++                              ;SAVE IT
E200 A784             (        cubix.asm):00518                 STA     ,X                                ;WRITE IT
E202 BDE659           (        cubix.asm):00519                 JSR     LOCERR                            ;DOES IT EXIST
                      (        cubix.asm):00520         ;* FILE HAS BEEN FOUND, EXECUTE
E205                  (        cubix.asm):00521         RUN2
E205 A68817           (        cubix.asm):00522                 LDA     DATTR,X                           ;GET ATTRIBUTES
E208 8520             (        cubix.asm):00523                 BITA    #EPERM                            ;CAN WE EXECUTE?
E20A 102706A4         (        cubix.asm):00524                 LBEQ    PROERR                            ;NO, REPORT ERROR
E20E EC8813           (        cubix.asm):00525                 LDD     DDADR,X                           ;GET DISK ADDRESS
E211 AE8815           (        cubix.asm):00526                 LDX     DRADR,X                           ;GET RUN ADDRESS
E214 BF04D5           (        cubix.asm):00527                 STX     >TEMP1                            ;SAVE
E217 BDEEBF           (        cubix.asm):00528                 JSR     LCHAIN                            ;LOAD THE CHAIN
E21A F604F3           (        cubix.asm):00529                 LDB     >SDRIVE                           ;GET OUR CURRENT DRIVE
E21D BDE4DC           (        cubix.asm):00530                 JSR     SKIP                              ;SKIP TO COMMANDS
E220 6E9F04D5         (        cubix.asm):00531                 JMP     [TEMP1]                           ;PASS CONTROL TO HIM
                      (        cubix.asm):00532         ;*
                      (        cubix.asm):00533         ;* COMMAND WAS NOT RECOGNIZED, SEARCH SYSTEM DIRECTORY LOOKING
                      (        cubix.asm):00534         ;* FOR FILE WITH NAME MATCHING COMMAND.
                      (        cubix.asm):00535         ;*
E224                  (        cubix.asm):00536         EXE
E224 7F04D5           (        cubix.asm):00537                 CLR     >TEMP1                            ;INDICATE IMPLIED RUN
E227 8E04AE           (        cubix.asm):00538                 LDX     #SYSDRV                           ;PT TO SYSTEM DIRECTORY (& DRIVE)
E22A BDE3B3           (        cubix.asm):00539                 JSR     GETDIR1                           ;GET DIR & DRIVE
E22D 8D6F             (        cubix.asm):00540                 BSR     NAMGET                            ;GET NAME
E22F 862A             (        cubix.asm):00541                 LDA     #'*'                              ;WILDCARD
E231 A784             (        cubix.asm):00542                 STA     ,X                                ;SAVE TYPE
E233 B604BF           (        cubix.asm):00543                 LDA     >FDRIVE                           ;GET FILENAME DRIVE
E236 B704F3           (        cubix.asm):00544                 STA     >SDRIVE                           ;SELECT DRIVE
E239 CC0000           (        cubix.asm):00545                 LDD     #DIRSEC                           ;GET DIRECTORY SECTOR
E23C                  (        cubix.asm):00546         EXE1
E23C BDE5FC           (        cubix.asm):00547                 JSR     RDWRK                             ;READ A WORK SECTOR
E23F                  (        cubix.asm):00548         EXE2
E23F BDE323           (        cubix.asm):00549                 JSR     COMNAM                            ;DOES IT MATCH
E242 2717             (        cubix.asm):00550                 BEQ     EXE3                              ;YES, IT DOES
                      (        cubix.asm):00551         ;* NAMES DON'T MATCH, ADVANCE TO NEXT ENTRY
E244 308820           (        cubix.asm):00552                 LEAX    32,X                              ;NEXT
E247 8C0800           (        cubix.asm):00553                 CMPX    #WRKSPC+512                       ;OVER?
E24A 25F3             (        cubix.asm):00554                 BLO     EXE2                              ;NO, KEEP LOOKING
E24C FC04E7           (        cubix.asm):00555                 LDD     >WRKSEC                           ;GET SECTOR
E24F BDE5DF           (        cubix.asm):00556                 JSR     FNDLNK                            ;LOCATE LINK
E252 26E8             (        cubix.asm):00557                 BNE     EXE1                              ;READ IT & LOOK
                      (        cubix.asm):00558         ;* COMMAND IS INVALID, REPORT ERROR
E254                  (        cubix.asm):00559         BADCMD
E254 8EF76B           (        cubix.asm):00560                 LDX     #UNCMD                            ;PT TO MESSAGE
E257 86FF             (        cubix.asm):00561                 LDA     #RCCMD                            ;GET RC
E259 2062             (        cubix.asm):00562                 BRA     ERRMRC                            ;REPORT ERROR
                      (        cubix.asm):00563         ;* COMMAND MATCHES FILENAME, CHECK TYPE FOR EXECUTE
E25B                  (        cubix.asm):00564         EXE3
E25B A68812           (        cubix.asm):00565                 LDA     DTYPE+2,X                         ;GET TYPE
E25E B704D2           (        cubix.asm):00566                 STA     >FTYPE+2                          ;SAVE IT
E261 EC8810           (        cubix.asm):00567                 LDD     DTYPE,X                           ;GET REST OF TYPE
E264 FD04D0           (        cubix.asm):00568                 STD     >FTYPE                            ;SAVE IT
                      (        cubix.asm):00569         ;* WE HAVE FOUND EXECUTABLE FILE
E267 10834000         (        cubix.asm):00570                 CMPD    #'@'*256                          ;IS IT A COMMAND FILE?
E26B 10271265         (        cubix.asm):00571                 LBEQ    COMGO                             ;YES, EXECUTE
E26F 8145             (        cubix.asm):00572                 CMPA    #'E'                              ;'EX'?
E271 2609             (        cubix.asm):00573                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E273 C158             (        cubix.asm):00574                 CMPB    #'X'                              ;'EX'?
E275 2605             (        cubix.asm):00575                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E277 A18812           (        cubix.asm):00576                 CMPA    DTYPE+2,X                         ;INSURE ITS 'EXE'
E27A 2789             (        cubix.asm):00577                 BEQ     RUN2                              ;YES, EXECUTE
                      (        cubix.asm):00578         ;* UNKNOWN FILETYPE, TRY FOR USER COMMAND PROCESSOR
E27C                  (        cubix.asm):00579         EXE4
E27C 1F12             (        cubix.asm):00580                 TFR     X,Y                               ;'Y' POINTS TO DIR ENTRY
E27E 8E04C8           (        cubix.asm):00581                 LDX     #FNAME                            ;POINT TO TYPE
E281 ED81             (        cubix.asm):00582                 STD     ,X++                              ;SAVE IT
E283 A6A812           (        cubix.asm):00583                 LDA     DTYPE+2,Y                         ;GET LAST CHR
E286 A780             (        cubix.asm):00584                 STA     ,X+                               ;SAVE IT
E288                  (        cubix.asm):00585         EXE5
E288 6F80             (        cubix.asm):00586                 CLR     ,X+                               ;CLEAR IT
E28A 8C04D0           (        cubix.asm):00587                 CMPX    #FNAME+8                          ;OVER?
E28D 25F9             (        cubix.asm):00588                 BLO     EXE5                              ;ALL OUT
E28F 10BE04D7         (        cubix.asm):00589                 LDY     >TEMP2                            ;RESTORE COMMAND POINTER
E293 7EE1FA           (        cubix.asm):00590                 JMP     RUN1                              ;TRY THIS ONE
                      (        cubix.asm):00591         ;*
                      (        cubix.asm):00592         ;* GET FILENAME WITHOUT TYPE, NORMAL DEFAULT
                      (        cubix.asm):00593         ;*
E296                  (        cubix.asm):00594         GETSNA
E296 BDE3B0           (        cubix.asm):00595                 JSR     GETDIR                            ;GET DIRECTORY
E299                  (        cubix.asm):00596         GETSN0
E299 86FF             (        cubix.asm):00597                 LDA     #$FF                              ;FLAG
E29B B704D5           (        cubix.asm):00598                 STA     >TEMP1                            ;SET IT
E29E                  (        cubix.asm):00599         NAMGET
E29E C608             (        cubix.asm):00600                 LDB     #8                                ;MAX EIGHT CHARS
E2A0                  (        cubix.asm):00601         GETSN1
E2A0 BDE4E9           (        cubix.asm):00602                 JSR     TSTERM                            ;TERMINATOR?
E2A3 2706             (        cubix.asm):00603                 BEQ     GOPAD                             ;YES, QUIT
E2A5 812F             (        cubix.asm):00604                 CMPA    #'/'                              ;SPECIAL TERMINATOR
E2A7 2605             (        cubix.asm):00605                 BNE     GETSN2
E2A9 313F             (        cubix.asm):00606                 LEAY    -1,Y                              ;BACKUP TO SLASH
E2AB                  (        cubix.asm):00607         GOPAD
E2AB 7EE3A9           (        cubix.asm):00608                 JMP     PAD
E2AE                  (        cubix.asm):00609         GETSN2
E2AE A780             (        cubix.asm):00610                 STA     ,X+                               ;SAVE IT
E2B0 5A               (        cubix.asm):00611                 DECB                                      ;BACKUP
E2B1 2AED             (        cubix.asm):00612                 BPL     GETSN1                            ;MORE
E2B3 7D04D5           (        cubix.asm):00613                 TST     >TEMP1                            ;WERE WE 'RUN'ING
E2B6 279C             (        cubix.asm):00614                 BEQ     BADCMD                            ;NO,
                      (        cubix.asm):00615         ;*
                      (        cubix.asm):00616         ;* INVALID OPERAND
                      (        cubix.asm):00617         ;*
E2B8                  (        cubix.asm):00618         BADOPR
E2B8 8EF780           (        cubix.asm):00619                 LDX     #BADOPM                           ;MESSAGE
E2BB 8601             (        cubix.asm):00620                 LDA     #RCBOP                            ;RETURN CODE
                      (        cubix.asm):00621         ;*
                      (        cubix.asm):00622         ;* ISSUE ERROR MESSAGE & RETURN TO CALLER WITH RETURN CODE
                      (        cubix.asm):00623         ;*
E2BD                  (        cubix.asm):00624         ERRMRC
E2BD 3401             (        cubix.asm):00625                 PSHS    CC                                ;SAVE IT
                      (        cubix.asm):00626         ;* VERIFY CONSOLE DEVICE IS VALID & RESET IF NOT
E2BF F6046D           (        cubix.asm):00627                 LDB     >CONOUT                           ;GET OUTPUT
E2C2 C108             (        cubix.asm):00628                 CMPB    #NDEV                             ;IN RANGE
E2C4 240A             (        cubix.asm):00629                 BHS     ERRM1                             ;NO - ERROR
E2C6 108E047E         (        cubix.asm):00630                 LDY     #DOTAB                            ;POINT TO TABLE
E2CA 58               (        cubix.asm):00631                 ASLB                                      ;X2
E2CB 10AEA5           (        cubix.asm):00632                 LDY     B,Y                               ;INSTALLED?
E2CE 2605             (        cubix.asm):00633                 BNE     ERRM2                             ;YES, ITS OK
E2D0                  (        cubix.asm):00634         ERRM1
E2D0 C601             (        cubix.asm):00635                 LDB     #1                                ;DEFAULT DEVICE
E2D2 F7046D           (        cubix.asm):00636                 STB     >CONOUT                           ;RESET INPUT
E2D5                  (        cubix.asm):00637         ERRM2
E2D5 F6046C           (        cubix.asm):00638                 LDB     >CONIN                            ;GET INPUT
E2D8 C108             (        cubix.asm):00639                 CMPB    #NDEV                             ;IN RANGE
E2DA 240A             (        cubix.asm):00640                 BHS     ERRM3                             ;NO - ERROR
E2DC 108E046E         (        cubix.asm):00641                 LDY     #DITAB                            ;POINT TO TABLE
E2E0 58               (        cubix.asm):00642                 ASLB                                      ;X2
E2E1 10AEA5           (        cubix.asm):00643                 LDY     B,Y                               ;INSTALLED?
E2E4 2605             (        cubix.asm):00644                 BNE     ERRM4                             ;YES, ITS OK
E2E6                  (        cubix.asm):00645         ERRM3
E2E6 C601             (        cubix.asm):00646                 LDB     #1                                ;DEFAULT DEVICE
E2E8 F7046C           (        cubix.asm):00647                 STB     >CONIN                            ;RESET INPUT
E2EB                  (        cubix.asm):00648         ERRM4
E2EB 7D04A2           (        cubix.asm):00649                 TST     >MSGFLG                           ;ARE MESSAGES ENABLED
E2EE 2706             (        cubix.asm):00650                 BEQ     NOEMSG                            ;NO, DON'T OUTPUT
E2F0 BDE574           (        cubix.asm):00651                 JSR     WRSTR                             ;OUTPUT
E2F3 BDE588           (        cubix.asm):00652                 JSR     LFCR                              ;NEW LINE
E2F6                  (        cubix.asm):00653         NOEMSG
E2F6 3501             (        cubix.asm):00654                 PULS    CC                                ;RESTORE CC
                      (        cubix.asm):00655         ;* RETURN TO CALLER WITH NO ERROR MESSAGE
E2F8                  (        cubix.asm):00656         ERRRET
E2F8 3401             (        cubix.asm):00657                 PSHS    CC                                ;SAVE CC
E2FA F604E2           (        cubix.asm):00658                 LDB     >SAVDRV                           ;GET SAVED DRIVE
E2FD F704F3           (        cubix.asm):00659                 STB     >SDRIVE                           ;RESET SELECTED DRIVE
E300 BE04DE           (        cubix.asm):00660                 LDX     >SAVX                             ;RESTORE 'X'
E303 10BE04E0         (        cubix.asm):00661                 LDY     >SAVY                             ;RESTORE 'Y'
E307 F604DD           (        cubix.asm):00662                 LDB     >SAVB                             ;RESTORE 'B'
E30A 3501             (        cubix.asm):00663                 PULS    CC                                ;RESTORE CONDITION CODES
E30C 2705             (        cubix.asm):00664                 BEQ     ZERORC                            ;ITS ZERO
E30E 10FE04E3         (        cubix.asm):00665                 LDS     >SAVSTK                           ;GET SAVED SP
E312 39               (        cubix.asm):00666                 RTS
E313                  (        cubix.asm):00667         ZERORC
E313 10FE04E3         (        cubix.asm):00668                 LDS     >SAVSTK                           ;GET STACK
E317 1A04             (        cubix.asm):00669                 ORCC    #%00000100                        ;SET 'Z'
E319 39               (        cubix.asm):00670                 RTS
                      (        cubix.asm):00671         ;*
                      (        cubix.asm):00672         ;* GET FILE WITHOUT TYPE, DEFAULT TO SYSTEM
                      (        cubix.asm):00673         ;*
E31A                  (        cubix.asm):00674         GETSYS
E31A 8E04AE           (        cubix.asm):00675                 LDX     #SYSDRV                           ;DEFAULT IS SYSTEM
                      (        cubix.asm):00676         ;*
                      (        cubix.asm):00677         ;* GET FILENAME WITHOUR TYPE, DEFAULT(X)
                      (        cubix.asm):00678         ;*
E31D                  (        cubix.asm):00679         GETSDI
E31D BDE3B3           (        cubix.asm):00680                 JSR     GETDIR1                           ;GET NAME
E320 7EE299           (        cubix.asm):00681                 JMP     GETSN0                            ;GET FILENAME
                      (        cubix.asm):00682         ;*
                      (        cubix.asm):00683         ;* COMPARES NAME(X) TO SAVED FILENAME
                      (        cubix.asm):00684         ;*
E323                  (        cubix.asm):00685         COMNAM
E323 3436             (        cubix.asm):00686                 PSHS    A,B,X,Y                           ;SAVE REGS
E325 108E04C0         (        cubix.asm):00687                 LDY     #PREFIX                           ;POINT TO SAVED
E329 A684             (        cubix.asm):00688                 LDA     ,X                                ;INSURE NAME IS NOT NULL
E32B 2603             (        cubix.asm):00689                 BNE     NOTNUL                            ;ITS NOT,
E32D 4A               (        cubix.asm):00690                 DECA                                      ;GET FF
E32E 2010             (        cubix.asm):00691                 BRA     CEND                              ;QUIT
E330                  (        cubix.asm):00692         NOTNUL
E330 C608             (        cubix.asm):00693                 LDB     #8                                ;EIGHT CHARS NI PREFIX
E332 8D0E             (        cubix.asm):00694                 BSR     COMX                              ;COMPARE
E334 260A             (        cubix.asm):00695                 BNE     CEND                              ;NOT SAME, EXIT
E336 C608             (        cubix.asm):00696                 LDB     #8                                ;EIGHT CHARS IN NAME
E338 8D08             (        cubix.asm):00697                 BSR     COMX                              ;COMPARE
E33A 2604             (        cubix.asm):00698                 BNE     CEND                              ;NOT SAME
E33C C603             (        cubix.asm):00699                 LDB     #3                                ;THREE CHARS IN TYPE
E33E 8D02             (        cubix.asm):00700                 BSR     COMX                              ;COMPARE
E340                  (        cubix.asm):00701         CEND
E340 35B6             (        cubix.asm):00702                 PULS    A,B,X,Y,PC                        ;GO HOME
E342                  (        cubix.asm):00703         COMX
E342 A6A0             (        cubix.asm):00704                 LDA     ,Y+                               ;GET CHAR FROM SAVED
E344 812A             (        cubix.asm):00705                 CMPA    #'*'                              ;WILDCARD?
E346 2708             (        cubix.asm):00706                 BEQ     RNXT                              ;RETURN WITH TRUE
E348 A180             (        cubix.asm):00707                 CMPA    ,X+                               ;DOES IT MATCH
E34A 2606             (        cubix.asm):00708                 BNE     RNXT1                             ;NO, FAIL
E34C 5A               (        cubix.asm):00709                 DECB                                      ;BACKUP
E34D 26F3             (        cubix.asm):00710                 BNE     COMX                              ;OK
E34F 39               (        cubix.asm):00711                 RTS
E350                  (        cubix.asm):00712         RNXT
E350 3001             (        cubix.asm):00713                 LEAX    1,X
E352                  (        cubix.asm):00714         RNXT1
E352 5A               (        cubix.asm):00715                 DECB                                      ;REDUCE COUNT
E353 2704             (        cubix.asm):00716                 BEQ     BRET                              ;DONE, QUIT
E355 3121             (        cubix.asm):00717                 LEAY    1,Y                               ;ADVANCE
E357 20F7             (        cubix.asm):00718                 BRA     RNXT                              ;AND CONTINUE
E359                  (        cubix.asm):00719         BRET
E359 812A             (        cubix.asm):00720                 CMPA    #'*'                              ;WUZ IT WILDCARD
E35B 39               (        cubix.asm):00721                 RTS
                      (        cubix.asm):00722         ;*
                      (        cubix.asm):00723         ;* TEST SAVED FILENAME FOR VALIDITY AS A SINGLE FILE
                      (        cubix.asm):00724         ;*
E35C                  (        cubix.asm):00725         VALID
E35C 3416             (        cubix.asm):00726                 PSHS    A,B,X                             ;SAVE REGS
E35E C613             (        cubix.asm):00727                 LDB     #19                               ;LENGTH OF NAME
E360 8E04C0           (        cubix.asm):00728                 LDX     #PREFIX                           ;POINT TO NAME
E363                  (        cubix.asm):00729         VALTST
E363 A680             (        cubix.asm):00730                 LDA     ,X+                               ;GETCHAR
E365 812A             (        cubix.asm):00731                 CMPA    #'*'                              ;WILDCARD
E367 2704             (        cubix.asm):00732                 BEQ     RETNZ                             ;INVALID
E369 5A               (        cubix.asm):00733                 DECB                                      ;BACKUP
E36A 26F7             (        cubix.asm):00734                 BNE     VALTST                            ;CONTINUE
E36C 4F               (        cubix.asm):00735                 CLRA                                      ;ZERO RETURN CODE
E36D                  (        cubix.asm):00736         RETNZ
E36D 4D               (        cubix.asm):00737                 TSTA                                      ;SET 'Z' FLAG
E36E 3596             (        cubix.asm):00738                 PULS    A,B,X,PC
                      (        cubix.asm):00739         ;*
                      (        cubix.asm):00740         ;* GET FILENAME & INSURE ITS VALID
                      (        cubix.asm):00741         ;*
E370                  (        cubix.asm):00742         GETVAL
E370 8D05             (        cubix.asm):00743                 BSR     GETNAM                            ;GET FILENAME
E372 8DE8             (        cubix.asm):00744                 BSR     VALID                             ;TEST FOR VALID
E374 2620             (        cubix.asm):00745                 BNE     BADOP2                            ;INVALID, ERROR
E376 39               (        cubix.asm):00746                 RTS
                      (        cubix.asm):00747         ;*
                      (        cubix.asm):00748         ;* GET A FILENAME FROM INPUT LINE
                      (        cubix.asm):00749         ;*
E377                  (        cubix.asm):00750         GETNAM
E377 8D37             (        cubix.asm):00751                 BSR     GETDIR                            ;GET DRIVE & DIRECTORY
E379                  (        cubix.asm):00752         GFNAM
E379 C608             (        cubix.asm):00753                 LDB     #8                                ;EIGHT CHARS/NAME
E37B                  (        cubix.asm):00754         GF1
E37B 8D26             (        cubix.asm):00755                 BSR     VALCHR                            ;GET CHAR
E37D 812E             (        cubix.asm):00756                 CMPA    #'.'                              ;SEPERATOR?
E37F 2707             (        cubix.asm):00757                 BEQ     GFTYP                             ;YES
E381 A780             (        cubix.asm):00758                 STA     ,X+                               ;SAVE IT
E383 5A               (        cubix.asm):00759                 DECB                                      ;BACKUP
E384 2AF5             (        cubix.asm):00760                 BPL     GF1                               ;KEEP GOING
E386 200E             (        cubix.asm):00761                 BRA     BADOP2                            ;ERROR
E388                  (        cubix.asm):00762         GFTYP
E388 8D1F             (        cubix.asm):00763                 BSR     PAD                               ;PAD FILENAME
E38A C603             (        cubix.asm):00764                 LDB     #3                                ;THREE CHARS/TYPE
E38C                  (        cubix.asm):00765         GF2
E38C BDE4E9           (        cubix.asm):00766                 JSR     TSTERM                            ;GET CHAR
E38F 2708             (        cubix.asm):00767                 BEQ     GF3                               ;HIT END
E391 A780             (        cubix.asm):00768                 STA     ,X+                               ;SAVE IT
E393 5A               (        cubix.asm):00769                 DECB                                      ;REDUCE COUNT
E394 2AF6             (        cubix.asm):00770                 BPL     GF2                               ;KEEP GOING
E396                  (        cubix.asm):00771         BADOP2
E396 7EE2B8           (        cubix.asm):00772                 JMP     BADOPR                            ;ERROR
E399                  (        cubix.asm):00773         GF3
E399 8D0E             (        cubix.asm):00774                 BSR     PAD                               ;ZERO IT
E39B BDE4DC           (        cubix.asm):00775                 JSR     SKIP                              ;TO NEXT
E39E 8E04C0           (        cubix.asm):00776                 LDX     #PREFIX                           ;POINT TO IT
E3A1 4F               (        cubix.asm):00777                 CLRA                                      ;ZERO RC
E3A2 39               (        cubix.asm):00778                 RTS
                      (        cubix.asm):00779         ;* ABORT IF CHARACTER INVALID
E3A3                  (        cubix.asm):00780         VALCHR
E3A3 BDE4E9           (        cubix.asm):00781                 JSR     TSTERM                            ;TEST FOR CHAR OK
E3A6 27EE             (        cubix.asm):00782                 BEQ     BADOP2                            ;INVALID
E3A8 39               (        cubix.asm):00783                 RTS
                      (        cubix.asm):00784         ;* PADS NAME WITH BLANKS UNTILL 'B' IS ZERO
E3A9                  (        cubix.asm):00785         PAD
E3A9 5A               (        cubix.asm):00786                 DECB                                      ;BACKUP COUNT
E3AA 2B51             (        cubix.asm):00787                 BMI     GETD5                             ;THATS ALL
E3AC 6F80             (        cubix.asm):00788                 CLR     ,X+                               ;CLEAR IT
E3AE 20F9             (        cubix.asm):00789                 BRA     PAD
                      (        cubix.asm):00790         ;*
                      (        cubix.asm):00791         ;* GETS A DRIVE AND DIRECTORY FROM THE INPUT LINE
                      (        cubix.asm):00792         ;*
E3B0                  (        cubix.asm):00793         GETDIR
E3B0 8E04A5           (        cubix.asm):00794                 LDX     #DEFDRV                           ;PT TO IT
E3B3                  (        cubix.asm):00795         GETDIR1
E3B3 A680             (        cubix.asm):00796                 LDA     ,X+                               ;GET DEFAULT DRIVE
E3B5 B704BF           (        cubix.asm):00797                 STA     >FDRIVE                           ;SET IT
E3B8 BDE4DC           (        cubix.asm):00798                 JSR     SKIP                              ;ADVANCE
E3BB 270B             (        cubix.asm):00799                 BEQ     GETD1                             ;END OF LINE, NO DRIVE SPEC
E3BD E621             (        cubix.asm):00800                 LDB     1,Y                               ;GET NEXT CHAR
E3BF C13A             (        cubix.asm):00801                 CMPB    #':'                              ;IS IT A DRIVE SPEC?
E3C1 2605             (        cubix.asm):00802                 BNE     GETD1                             ;NO, IGNORE IT
E3C3 8D3D             (        cubix.asm):00803                 BSR     GETDRV1                           ;GET DRIVE ID
E3C5 B704BF           (        cubix.asm):00804                 STA     >FDRIVE                           ;SET DRIVE ID
E3C8                  (        cubix.asm):00805         GETD1
E3C8 3420             (        cubix.asm):00806                 PSHS    Y                                 ;SAVE
E3CA 1F12             (        cubix.asm):00807                 TFR     X,Y                               ;SET UP PTR TO DEFAULT
E3CC 8E04C0           (        cubix.asm):00808                 LDX     #PREFIX                           ;POINT TO PREFIX
E3CF C608             (        cubix.asm):00809                 LDB     #8                                ;MOVE EIGHT
E3D1                  (        cubix.asm):00810         GETD2
E3D1 A6A0             (        cubix.asm):00811                 LDA     ,Y+                               ;GET FROM DEFAULT
E3D3 A780             (        cubix.asm):00812                 STA     ,X+                               ;SAVE IN NAME
E3D5 5A               (        cubix.asm):00813                 DECB                                      ;REDUCE COUNT
E3D6 26F9             (        cubix.asm):00814                 BNE     GETD2                             ;MOVE EM ALL
E3D8 3520             (        cubix.asm):00815                 PULS    Y                                 ;RESTORE
E3DA A6A4             (        cubix.asm):00816                 LDA     ,Y                                ;GET CHAR
E3DC 815B             (        cubix.asm):00817                 CMPA    #'['                              ;DIRECTORY ID
E3DE 261D             (        cubix.asm):00818                 BNE     GETD5                             ;NO, SKIP IT
E3E0 8E04C0           (        cubix.asm):00819                 LDX     #PREFIX                           ;POINT TO PREFIX
E3E3 3121             (        cubix.asm):00820                 LEAY    1,Y                               ;ADVANCE
E3E5 C608             (        cubix.asm):00821                 LDB     #8                                ;UP TO EIGHT CHARS
E3E7                  (        cubix.asm):00822         GETD3
E3E7 BDE3A3           (        cubix.asm):00823                 JSR     VALCHR                            ;GET CHAR, INSURE VALID
E3EA 815D             (        cubix.asm):00824                 CMPA    #']'                              ;CLOSING?
E3EC 2708             (        cubix.asm):00825                 BEQ     GETD4                             ;YES
E3EE A780             (        cubix.asm):00826                 STA     ,X+                               ;SAVE IT
E3F0 5A               (        cubix.asm):00827                 DECB                                      ;BACKUP
E3F1 2AF4             (        cubix.asm):00828                 BPL     GETD3                             ;KEEP GOING
E3F3                  (        cubix.asm):00829         BADOP1
E3F3 7EE2B8           (        cubix.asm):00830                 JMP     BADOPR
E3F6                  (        cubix.asm):00831         GETD4
E3F6 8DB1             (        cubix.asm):00832                 BSR     PAD                               ;PAD WITH BLANKS
E3F8 7D04C0           (        cubix.asm):00833                 TST     >PREFIX                           ;IS IT NULL
E3FB 27F6             (        cubix.asm):00834                 BEQ     BADOP1                            ;INVALID
E3FD                  (        cubix.asm):00835         GETD5
E3FD 4F               (        cubix.asm):00836                 CLRA
E3FE 39               (        cubix.asm):00837                 RTS
                      (        cubix.asm):00838         ;* GET A DRIVE & RETURN IN A
E3FF                  (        cubix.asm):00839         GETDRV
E3FF BDE4DC           (        cubix.asm):00840                 JSR     SKIP                              ;ADVANCE TO OPERAND
E402                  (        cubix.asm):00841         GETDRV1
E402 ECA1             (        cubix.asm):00842                 LDD     ,Y++                              ;GET DATA
E404 C13A             (        cubix.asm):00843                 CMPB    #':'                              ;COLON
E406 26EB             (        cubix.asm):00844                 BNE     BADOP1                            ;NO
E408 8041             (        cubix.asm):00845                 SUBA    #'A'                              ;CONVERT
E40A 8104             (        cubix.asm):00846                 CMPA    #4                                ;IN RANGE
E40C 24E5             (        cubix.asm):00847                 BHS     BADOP1                            ;NO
E40E 1A04             (        cubix.asm):00848                 ORCC    #4                                ;SET 'Z'
E410 39               (        cubix.asm):00849                 RTS
                      (        cubix.asm):00850         ;*
                      (        cubix.asm):00851         ;* GETS A VALUE (DECIMAL OR HEX) FROM INPUT LINE
                      (        cubix.asm):00852         ;*
E411                  (        cubix.asm):00853         GETNUM
E411 BDE4DC           (        cubix.asm):00854                 JSR     SKIP                              ;SKIP TO DATA
E414 27DD             (        cubix.asm):00855                 BEQ     BADOP1                            ;INVALID
E416 8124             (        cubix.asm):00856                 CMPA    #'$'                              ;HEX?
E418 2643             (        cubix.asm):00857                 BNE     GETDV                             ;NO, GET DECIMAL
E41A 3121             (        cubix.asm):00858                 LEAY    1,Y                               ;ADVANCE TO NEXT
                      (        cubix.asm):00859         ;*
                      (        cubix.asm):00860         ;* GETS A 16 BIT HEX NUMBER FOR X FROM THE INPUT LINE.
                      (        cubix.asm):00861         ;*
E41C                  (        cubix.asm):00862         GETHEX
E41C BDE4DC           (        cubix.asm):00863                 JSR     SKIP                              ;GET CHARACTER
E41F 27D2             (        cubix.asm):00864                 BEQ     BADOP1                            ;INDICATE BAD OPERAND
E421                  (        cubix.asm):00865         GETHV
E421 8E0000           (        cubix.asm):00866                 LDX     #0                                ;START WITH ZERO
E424                  (        cubix.asm):00867         GETL1
E424 BDE4E9           (        cubix.asm):00868                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E427 2728             (        cubix.asm):00869                 BEQ     HEXEND                            ;IF SO, THIS IS IT
E429 8030             (        cubix.asm):00870                 SUBA    #'0'                              ;CONVERT TO BINARY
E42B 810A             (        cubix.asm):00871                 CMPA    #10                               ;TEST FOR > '9'
E42D 250A             (        cubix.asm):00872                 BLO     DIGOK                             ;IF NOT, DIGIT IS OK
E42F 8111             (        cubix.asm):00873                 CMPA    #$11                              ;TEST FOR < 'A'
E431 2DC0             (        cubix.asm):00874                 BLT     BADOP1                            ;OPERAND IS INVALID
E433 8007             (        cubix.asm):00875                 SUBA    #7                                ;CONVERT TO ASCII
E435 8110             (        cubix.asm):00876                 CMPA    #$10                              ;TEST FOR 0-F
E437 24BA             (        cubix.asm):00877                 BHS     BADOP1                            ;IF NOT, DIGIT IS BAD
E439                  (        cubix.asm):00878         DIGOK
E439 B704D4           (        cubix.asm):00879                 STA     >TEMP+1                           ;SAVE FOR LATER
E43C 8605             (        cubix.asm):00880                 LDA     #5                                ;SHIFT FOUR TIMES
E43E B704D3           (        cubix.asm):00881                 STA     >TEMP                             ;SAVE COUNTER
E441                  (        cubix.asm):00882         DSHFT
E441 1F10             (        cubix.asm):00883                 TFR     X,D                               ;COPY TO X
E443 308B             (        cubix.asm):00884                 LEAX    D,X                               ;MULTIPLY BY 2, = 1 BIT SHIFT
E445 7A04D3           (        cubix.asm):00885                 DEC     >TEMP                             ;REDUCE COUNT
E448 26F7             (        cubix.asm):00886                 BNE     DSHFT                             ;KEEP SHIFTING
E44A FA04D4           (        cubix.asm):00887                 ORB     >TEMP+1                           ;STICK ON EXTRA DIGIT
E44D 1F01             (        cubix.asm):00888                 TFR     D,X                               ;COPY BACK TO X
E44F 20D3             (        cubix.asm):00889                 BRA     GETL1                             ;GET NEXT DIGIT
E451                  (        cubix.asm):00890         HEXEND
E451 BDE4DC           (        cubix.asm):00891                 JSR     SKIP                              ;ADVANCE TO NEXT OPERAND
E454 4F               (        cubix.asm):00892                 CLRA                                      ;INDICATE ZERO RETURN CODE
E455 39               (        cubix.asm):00893                 RTS
                      (        cubix.asm):00894         ;*
                      (        cubix.asm):00895         ;* GETS A DECIMAL NUMBER FROM THE TERMINAL.
                      (        cubix.asm):00896         ;*
E456                  (        cubix.asm):00897         GETDEC
E456 BDE4DC           (        cubix.asm):00898                 JSR     SKIP                              ;SKIP TO START OF OPERAND.
E459 1027FE5B         (        cubix.asm):00899                 LBEQ    BADOPR                            ;IF INVALID, GO BACK.
E45D                  (        cubix.asm):00900         GETDV
E45D 8E0000           (        cubix.asm):00901                 LDX     #0                                ;START WITH ZERO.
E460                  (        cubix.asm):00902         DECDIG
E460 BDE4E9           (        cubix.asm):00903                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E463 27EC             (        cubix.asm):00904                 BEQ     HEXEND                            ;IF THATS ALL, FORGET IT.
E465 8030             (        cubix.asm):00905                 SUBA    #'0'                              ;CONVERT TO BINARY.
E467 8109             (        cubix.asm):00906                 CMPA    #9                                ;TEST FOR INVALID.
E469 1022FE4B         (        cubix.asm):00907                 LBHI    BADOPR                            ;AGAIN, INVALID OPERAND.
E46D 3402             (        cubix.asm):00908                 PSHS    A                                 ;SAVE ACC.
E46F CC000A           (        cubix.asm):00909                 LDD     #10                               ;MUL BY 10
E472 BDF6F0           (        cubix.asm):00910                 JSR     MUL16                             ;D=D*X
E475 EBE0             (        cubix.asm):00911                 ADDB    ,S+                               ;ADD IN DIGIT
E477 8900             (        cubix.asm):00912                 ADCA    #0                                ;INSURE HIGH GOES
E479 1F01             (        cubix.asm):00913                 TFR     D,X                               ;COPY TO RESULT
E47B 20E3             (        cubix.asm):00914                 BRA     DECDIG                            ;GET NEXT
                      (        cubix.asm):00915         ;*
E47D                  (        cubix.asm):00916         WRDEC8
E47D 4F               (        cubix.asm):00917                 CLRA                                      ;DISPLAY 8 BIT BUMBER (B) IN DECIMAL
                      (        cubix.asm):00918         ;*
                      (        cubix.asm):00919         ;* DISPLAYS 16 BIT NUMBER IN D AS A DECIMAL NUMBER,
                      (        cubix.asm):00920         ;*
E47E                  (        cubix.asm):00921         WRDEC
E47E 3436             (        cubix.asm):00922                 PSHS    A,B,X,Y                           ;SAVE X-Y REGISTERS
E480 108E0000         (        cubix.asm):00923                 LDY     #0                                ;START WITH ZERO CHARACTERS
E484 1F01             (        cubix.asm):00924                 TFR     D,X                               ;SET UP STARTING VALUE
E486                  (        cubix.asm):00925         WRDE1
E486 CC000A           (        cubix.asm):00926                 LDD     #10                               ;DIVIDE BY 10
E489 BDF710           (        cubix.asm):00927                 JSR     DIV16                             ;X=X/D, D=REMAINDER
E48C 3404             (        cubix.asm):00928                 PSHS    B                                 ;SAVE REMAINDER
E48E 3121             (        cubix.asm):00929                 LEAY    1,Y                               ;INDICATE ANOTHER ON STACK
E490 8C0000           (        cubix.asm):00930                 CMPX    #0                                ;ANY MORE?
E493 26F1             (        cubix.asm):00931                 BNE     WRDE1                             ;NO, CONTINUE
E495                  (        cubix.asm):00932         WRDE2
E495 3502             (        cubix.asm):00933                 PULS    A                                 ;GET DIGIT BACK
E497 8B30             (        cubix.asm):00934                 ADDA    #'0'                              ;CONVERT TO PRINTABLE FORM
E499 BDE59A           (        cubix.asm):00935                 JSR     PUTCHR                            ;DISPLAY DECIMAL DIGIT
E49C 313F             (        cubix.asm):00936                 LEAY    -1,Y                              ;REDUCE COUNT
E49E 26F5             (        cubix.asm):00937                 BNE     WRDE2                             ;IF NOT END, CONTINUE DISPLAYING
E4A0 35B6             (        cubix.asm):00938                 PULS    A,B,X,Y,PC                        ;RESTORE INDEX REG'S
                      (        cubix.asm):00939         ;*
                      (        cubix.asm):00940         ;* GETS AND BUFFERS A LINE FROM THE TERMINAL, ON EXIT, Y REGISTER
                      (        cubix.asm):00941         ;* POINTS TO LINE IN BUFFER.
                      (        cubix.asm):00942         ;*
E4A2                  (        cubix.asm):00943         GLFCR
E4A2 BDE588           (        cubix.asm):00944                 JSR     LFCR                              ;START A NEW LINE
E4A5                  (        cubix.asm):00945         GLINE
E4A5 862A             (        cubix.asm):00946                 LDA     #'*'                              ;GET PROMPT CHARACTER
E4A7 BDE59A           (        cubix.asm):00947                 JSR     PUTCHR                            ;DISPLAY
E4AA                  (        cubix.asm):00948         GLNOP
E4AA 108E0400         (        cubix.asm):00949                 LDY     #INBUFF                           ;POINT TO INPUT BUFFER
E4AE                  (        cubix.asm):00950         GLINE1
E4AE 1F20             (        cubix.asm):00951                 TFR     Y,D                               ;GET POINTER INTO BUFFER
E4B0 C150             (        cubix.asm):00952                 CMPB    #80                               ;TEST FOR OVER LIMIT
E4B2 22EE             (        cubix.asm):00953                 BHI     GLFCR                             ;INDICATE ERROR
E4B4 BDE5DA           (        cubix.asm):00954                 JSR     GETCHR                            ;GET CHARACTER FROM CONSOLE
E4B7 817F             (        cubix.asm):00955                 CMPA    #$7F                              ;TEST FOR DELETE
E4B9 2704             (        cubix.asm):00956                 BEQ     GLINE2                            ;YES, PERFORM DELETE
E4BB 8108             (        cubix.asm):00957                 CMPA    #8                                ;TEST FOR BACKSPACE
E4BD 260B             (        cubix.asm):00958                 BNE     GLINE3                            ;DON'T DELETE
E4BF                  (        cubix.asm):00959         GLINE2
E4BF 313F             (        cubix.asm):00960                 LEAY    -1,Y                              ;DELETE A CHARACTER
E4C1 BDE54E           (        cubix.asm):00961                 JSR     WRLIN                             ;OUTPUT MESSAGE
E4C4 08200800         (        cubix.asm):00962                 FCB     8,' ',8,0                         ;WIPE PREVIOUS CHARACTER
E4C8 20E4             (        cubix.asm):00963                 BRA     GLINE1                            ;GET NEXT CHARACTER
E4CA                  (        cubix.asm):00964         GLINE3
E4CA BDE59A           (        cubix.asm):00965                 JSR     PUTCHR                            ;ECHO CHARACTER
E4CD 8D2B             (        cubix.asm):00966                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E4CF A7A0             (        cubix.asm):00967                 STA     ,Y+                               ;SAVE IN BUFFER
E4D1 810D             (        cubix.asm):00968                 CMPA    #$0D                              ;TEST FOR END OF LINE
E4D3 26D9             (        cubix.asm):00969                 BNE     GLINE1                            ;GET NEXT CHARACTER
E4D5 108E0400         (        cubix.asm):00970                 LDY     #INBUFF                           ;POINT TO BUFFER
E4D9 7EE588           (        cubix.asm):00971                 JMP     LFCR                              ;START A NEW LINE
                      (        cubix.asm):00972         ;*
                      (        cubix.asm):00973         ;* SKIPS TO NEXT NON-BLANK CHARACTER IN INPUT LINE. AND TESTS IT FOR <CR>.
                      (        cubix.asm):00974         ;*
E4DC                  (        cubix.asm):00975         SKIP
E4DC A6A0             (        cubix.asm):00976                 LDA     ,Y+                               ;GET CHARACTER
E4DE 8120             (        cubix.asm):00977                 CMPA    #' '                              ;TEST FOR BLANK
E4E0 27FA             (        cubix.asm):00978                 BEQ     SKIP                              ;IF SO, KEEP LOOKING
E4E2 6DA2             (        cubix.asm):00979                 TST     ,-Y                               ;BACKUP & TEST FOR ZERO
E4E4 2702             (        cubix.asm):00980                 BEQ     SKRTS                             ;YES, END WITH 'Z' SET
E4E6 810D             (        cubix.asm):00981                 CMPA    #$0D                              ;TEST FOR CARRIAGE RETURN
E4E8                  (        cubix.asm):00982         SKRTS
E4E8 39               (        cubix.asm):00983                 RTS
                      (        cubix.asm):00984         ;*
                      (        cubix.asm):00985         ;* TESTS FOR VALID TERMINATOR CHARACTERS.
                      (        cubix.asm):00986         ;*
E4E9                  (        cubix.asm):00987         TSTERM
E4E9 A6A0             (        cubix.asm):00988                 LDA     ,Y+                               ;GET CHARACTER AND ADVANCE
E4EB 2708             (        cubix.asm):00989                 BEQ     TSTE1                             ;IF NULL, INDICATE TERMINATOR
E4ED 8120             (        cubix.asm):00990                 CMPA    #' '                              ;TEST FOR SPACE
E4EF 2708             (        cubix.asm):00991                 BEQ     TRET                              ;IF SO, QUIT
E4F1 810D             (        cubix.asm):00992                 CMPA    #$0D                              ;IS IT A CARRIAGE RETURN
E4F3 2604             (        cubix.asm):00993                 BNE     TRET                              ;IF NOT, DON'T BACK UP
E4F5                  (        cubix.asm):00994         TSTE1
E4F5 313F             (        cubix.asm):00995                 LEAY    -1,Y                              ;BACK UP SO WE DON'T GO BEYOND
E4F7 1A04             (        cubix.asm):00996                 ORCC    #%00000100                        ;SET 'Z'
E4F9                  (        cubix.asm):00997         TRET
E4F9 39               (        cubix.asm):00998                 RTS
                      (        cubix.asm):00999         ;*
                      (        cubix.asm):01000         ;* CONVERT THE CHARACTER IN 'A' TO UPPER CASE
                      (        cubix.asm):01001         ;*
E4FA                  (        cubix.asm):01002         TOUPPER
E4FA 8161             (        cubix.asm):01003                 CMPA    #'A'+$20                          ;ALREADY UPPERCASE?
E4FC 25FB             (        cubix.asm):01004                 BLO     TRET                              ;YES, ITS OK
E4FE 817A             (        cubix.asm):01005                 CMPA    #'Z'+$20                          ;ALREADY UPPERCASE?
E500 22F7             (        cubix.asm):01006                 BHI     TRET                              ;YES, ITS OK
E502 845F             (        cubix.asm):01007                 ANDA    #%01011111                        ;CONVERT TO UPPERCASE
E504 39               (        cubix.asm):01008                 RTS
                      (        cubix.asm):01009         ;*
                      (        cubix.asm):01010         ;* LOOKS UP WORD(Y) IN TABLE(X). INDEX OF COMMAND IN TABLE IS
                      (        cubix.asm):01011         ;* RETURNED IN THE B REGISTER, WITH ZERO BEING THE FIRST COMMAND.
                      (        cubix.asm):01012         ;* FOR INFORMATION ON THE COMMAND TABLE FORMAT, SEE COMMAND TABLE.
                      (        cubix.asm):01013         ;*
E505                  (        cubix.asm):01014         TLOOK
E505 5F               (        cubix.asm):01015                 CLRB                                      ;START WITH ZERO ENTRY
E506 8DD4             (        cubix.asm):01016                 BSR     SKIP                              ;SKIP LEADING BLANKS
E508                  (        cubix.asm):01017         TLOOK1
E508 A680             (        cubix.asm):01018                 LDA     ,X+                               ;GET CHAR FROM FILE
E50A 2AFC             (        cubix.asm):01019                 BPL     TLOOK1                            ;ADVANCE TO CONTROL BYTE
E50C 301F             (        cubix.asm):01020                 LEAX    -1,X                              ;BACKUP TO IT
E50E 3420             (        cubix.asm):01021                 PSHS    Y                                 ;SAVE POSITION
E510 847F             (        cubix.asm):01022                 ANDA    #$7F                              ;REMOVE FLAG BIT
E512 272C             (        cubix.asm):01023                 BEQ     TLOOK6                            ;END OF TABLE ENCOUNTERED
E514 B704D3           (        cubix.asm):01024                 STA     >TEMP                             ;SAVE FOR LATER REF
E517                  (        cubix.asm):01025         TLOOK2
E517 3001             (        cubix.asm):01026                 LEAX    1,X                               ;ADVANCE IN TABLE
E519 7A04D3           (        cubix.asm):01027                 DEC     >TEMP                             ;REDUCE COUNT
E51C A684             (        cubix.asm):01028                 LDA     ,X                                ;GET CHAR
E51E 8DDA             (        cubix.asm):01029                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E520 B704D4           (        cubix.asm):01030                 STA     >TEMP+1                           ;SAVE FOR LATER
E523 8DC4             (        cubix.asm):01031                 BSR     TSTERM                            ;TEST FOR TERMINATOR
E525 2714             (        cubix.asm):01032                 BEQ     TLOOK5                            ;IF SO, TEST IT
E527 B104D4           (        cubix.asm):01033                 CMPA    >TEMP+1                           ;TEST FOR SAME AS TABLE ENTRY
E52A 27EB             (        cubix.asm):01034                 BEQ     TLOOK2                            ;IF SO, IT'S OK
E52C 812F             (        cubix.asm):01035                 CMPA    #'/'                              ;SLASH?
E52E 2709             (        cubix.asm):01036                 BEQ     TLOOK4                            ;YES, ACCEPT IT
E530 813D             (        cubix.asm):01037                 CMPA    #'='                              ;EQUALS?
E532 2705             (        cubix.asm):01038                 BEQ     TLOOK4                            ;ACCEPT IT AS WELL
                      (        cubix.asm):01039         ;* THIS ENTRY NOT FOUND, SKIP TO NEXT ONE
E534                  (        cubix.asm):01040         TLOOK3
E534 3520             (        cubix.asm):01041                 PULS    Y                                 ;RESTORE COMMAND POINTER
E536 5C               (        cubix.asm):01042                 INCB                                      ;INC. INDICATOR
E537 20CF             (        cubix.asm):01043                 BRA     TLOOK1                            ;TRY NEXT ENTRY
E539                  (        cubix.asm):01044         TLOOK4
E539 313F             (        cubix.asm):01045                 LEAY    -1,Y                              ;BACKUP TO SPECIAL CHAR
E53B                  (        cubix.asm):01046         TLOOK5
E53B BA04D3           (        cubix.asm):01047                 ORA     >TEMP                             ;TEST FOR MINIMUM NUMBER OF CHARS
E53E 2AF4             (        cubix.asm):01048                 BPL     TLOOK3                            ;IF NOT, SKIP THIS COMMAND
E540                  (        cubix.asm):01049         TLOOK6
E540 8D9A             (        cubix.asm):01050                 BSR     SKIP                              ;SKIP TO OPERANDS
E542 5D               (        cubix.asm):01051                 TSTB                                      ;SET FLAG IS ZERO
E543 3590             (        cubix.asm):01052                 PULS    X,PC                              ;CLEAN UP STACK
                      (        cubix.asm):01053         ;*
                      (        cubix.asm):01054         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (        cubix.asm):01055         ;*
E545                  (        cubix.asm):01056         WRHEXW
E545 8D13             (        cubix.asm):01057                 BSR     WRHEX                             ;OUTPUT
E547 1E89             (        cubix.asm):01058                 EXG     A,B                               ;SWAP
E549 8D0F             (        cubix.asm):01059                 BSR     WRHEX                             ;OUTPUT
E54B 1E89             (        cubix.asm):01060                 EXG     A,B                               ;BACK
E54D 39               (        cubix.asm):01061                 RTS
                      (        cubix.asm):01062         ;*
                      (        cubix.asm):01063         ;* WRITE MESSAGE, NO CARRIAGE RETURN AT END
                      (        cubix.asm):01064         ;*
E54E                  (        cubix.asm):01065         WRLIN
E54E 3410             (        cubix.asm):01066                 PSHS    X                                 ;SAVE X
E550 AE62             (        cubix.asm):01067                 LDX     2,S                               ;GET ADDRESS BACK
E552 8D20             (        cubix.asm):01068                 BSR     WRSTR                             ;OUTPUT
E554 AF62             (        cubix.asm):01069                 STX     2,S                               ;RESAVE
E556 1A04             (        cubix.asm):01070                 ORCC    #%00000100                        ;ZERO RETURN CODE
E558 3590             (        cubix.asm):01071                 PULS    X,PC
                      (        cubix.asm):01072         ;*
                      (        cubix.asm):01073         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (        cubix.asm):01074         ;*
E55A                  (        cubix.asm):01075         WRHEX
E55A 3402             (        cubix.asm):01076                 PSHS    A                                 ;SAVE IT
E55C 44               (        cubix.asm):01077                 LSRA                                      ;SHIFT
E55D 44               (        cubix.asm):01078                 LSRA                                      ;HIGH NIBBLE
E55E 44               (        cubix.asm):01079                 LSRA                                      ;INTO
E55F 44               (        cubix.asm):01080                 LSRA                                      ;LOW NIBBLE
E560 8D06             (        cubix.asm):01081                 BSR     HOUT                              ;HIGH
E562 A6E4             (        cubix.asm):01082                 LDA     ,S                                ;GET LOW
E564 8D02             (        cubix.asm):01083                 BSR     HOUT                              ;OUTPUT
E566 3582             (        cubix.asm):01084                 PULS    A,PC                              ;RESTORE IT
                      (        cubix.asm):01085         ;* OUTPUT NIBBLE IN HEX
E568                  (        cubix.asm):01086         HOUT
E568 840F             (        cubix.asm):01087                 ANDA    #%00001111                        ;REMOVE HIGH
E56A 8B30             (        cubix.asm):01088                 ADDA    #'0'                              ;CONVERT
E56C 8139             (        cubix.asm):01089                 CMPA    #'9'                              ;OK?
E56E 232A             (        cubix.asm):01090                 BLS     PUTCHR                            ;OK, OUTPUT
E570 8B07             (        cubix.asm):01091                 ADDA    #7                                ;CONVERT TO 'A'-'F'
E572 2026             (        cubix.asm):01092                 BRA     PUTCHR                            ;OUTPUT
                      (        cubix.asm):01093         ;*
                      (        cubix.asm):01094         ;* WRITE STRING(X) TO CONSOLE
                      (        cubix.asm):01095         ;*
E574                  (        cubix.asm):01096         WRSTR
E574 3402             (        cubix.asm):01097                 PSHS    A                                 ;SAVE A
E576                  (        cubix.asm):01098         WRST1
E576 A680             (        cubix.asm):01099                 LDA     ,X+                               ;GET CHAR
E578 271E             (        cubix.asm):01100                 BEQ     WRST2                             ;END, QUIT
E57A 8D1E             (        cubix.asm):01101                 BSR     PUTCHR                            ;OUTPUT
E57C 20F8             (        cubix.asm):01102                 BRA     WRST1                             ;CONTINUE
                      (        cubix.asm):01103         ;*
                      (        cubix.asm):01104         ;* OUTPUT MESSAGE TO CONSOLE
                      (        cubix.asm):01105         ;*
E57E                  (        cubix.asm):01106         WRMSG
E57E 3410             (        cubix.asm):01107                 PSHS    X                                 ;SAVE X
E580 AE62             (        cubix.asm):01108                 LDX     2,S                               ;GET RETURN ADDRESS
E582 8DF0             (        cubix.asm):01109                 BSR     WRSTR                             ;OUTPUT STRING
E584 AF62             (        cubix.asm):01110                 STX     2,S                               ;RESAVE NEW RETURN ADDR
E586 3510             (        cubix.asm):01111                 PULS    X                                 ;RESTORE X
                      (        cubix.asm):01112         ;*
                      (        cubix.asm):01113         ;* OUTPUT LFCR TO CONSOLE
                      (        cubix.asm):01114         ;*
E588                  (        cubix.asm):01115         LFCR
E588 3402             (        cubix.asm):01116                 PSHS    A                                 ;SAVE IT
E58A 860A             (        cubix.asm):01117                 LDA     #$0A                              ;GET LF
E58C 8D0C             (        cubix.asm):01118                 BSR     PUTCHR                            ;OUTPUT
E58E 860D             (        cubix.asm):01119                 LDA     #$0D                              ;GET CR
E590 2004             (        cubix.asm):01120                 BRA     SPC1                              ;CONTINUE
                      (        cubix.asm):01121         ;*
                      (        cubix.asm):01122         ;* OUTPUT SPACE TO CONSOLE
                      (        cubix.asm):01123         ;*
E592                  (        cubix.asm):01124         SPACE
E592 3402             (        cubix.asm):01125                 PSHS    A                                 ;SAVE ACCA
E594 8620             (        cubix.asm):01126                 LDA     #' '                              ;GET SPACE
E596                  (        cubix.asm):01127         SPC1
E596 8D02             (        cubix.asm):01128                 BSR     PUTCHR                            ;OUTPUT
E598                  (        cubix.asm):01129         WRST2
E598 3582             (        cubix.asm):01130                 PULS    A,PC                              ;RESTORE
                      (        cubix.asm):01131         ;*
                      (        cubix.asm):01132         ;* WRITE CHARACTER(A) TO CONSOLE DEVICE
                      (        cubix.asm):01133         ;*
E59A                  (        cubix.asm):01134         PUTCHR
E59A 3416             (        cubix.asm):01135                 PSHS    A,B,X                             ;SAVE REGS
E59C F6046D           (        cubix.asm):01136                 LDB     >CONOUT                           ;GET CONSOLE OUTPUT DEVICE
E59F 2002             (        cubix.asm):01137                 BRA     WRDEV1                            ;PROCEDE WITH OUTPUT
                      (        cubix.asm):01138         ;*
                      (        cubix.asm):01139         ;* WRITE CHARACTER(A) TO DEVICE(B)
                      (        cubix.asm):01140         ;*
E5A1                  (        cubix.asm):01141         WRDEV
E5A1 3416             (        cubix.asm):01142                 PSHS    A,B,X                             ;SAVE REGS
E5A3                  (        cubix.asm):01143         WRDEV1
E5A3 C108             (        cubix.asm):01144                 CMPB    #NDEV                             ;CHECK FOR IN RANGE
E5A5 240D             (        cubix.asm):01145                 BHS     BADDEV                            ;INDICATE INVALID
E5A7 8E047E           (        cubix.asm):01146                 LDX     #DOTAB                            ;POINT TO STATUS TABLE
E5AA 58               (        cubix.asm):01147                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E5AB AE85             (        cubix.asm):01148                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E5AD 2705             (        cubix.asm):01149                 BEQ     BADDEV                            ;INDICATE INVALID DEVICE
E5AF AD84             (        cubix.asm):01150                 JSR     ,X                                ;EXECUTE OUTPUT DRIVER
E5B1 4F               (        cubix.asm):01151                 CLRA                                      ;ZERO RETURN CODE
E5B2 3596             (        cubix.asm):01152                 PULS    A,B,X,PC                          ;RESTORE & RETURN
                      (        cubix.asm):01153         ;*
                      (        cubix.asm):01154         ;* BAD DEVICE SPECIFIED
                      (        cubix.asm):01155         ;*
E5B4                  (        cubix.asm):01156         BADDEV
E5B4 8EF81E           (        cubix.asm):01157                 LDX     #DEVMSG                           ;POINT TO DEVICE MESSAGE
E5B7 860A             (        cubix.asm):01158                 LDA     #RCDEV                            ;BAD DEVICE RETURN CODE
E5B9 7EE2BD           (        cubix.asm):01159                 JMP     ERRMRC                            ;EXIT WITH ERROR
                      (        cubix.asm):01160         ;*
                      (        cubix.asm):01161         ;* READ A CHARACTER FROM DEVICE (B)
                      (        cubix.asm):01162         ;*
E5BC                  (        cubix.asm):01163         RDDEV
E5BC 8D03             (        cubix.asm):01164                 BSR     TSTDEV                            ;TEST FOR CHAR
E5BE 26FC             (        cubix.asm):01165                 BNE     RDDEV                             ;WAIT FOR IT
E5C0 39               (        cubix.asm):01166                 RTS
                      (        cubix.asm):01167         ;*
                      (        cubix.asm):01168         ;* TEST FOR CHARACTER FROM DEVICE(B)
                      (        cubix.asm):01169         ;*
E5C1                  (        cubix.asm):01170         TSTDEV
E5C1 3414             (        cubix.asm):01171                 PSHS    B,X                               ;SAVE REGS
E5C3                  (        cubix.asm):01172         TSTDE1
E5C3 C108             (        cubix.asm):01173                 CMPB    #NDEV                             ;DEVICE IN RANGE?
E5C5 24ED             (        cubix.asm):01174                 BHS     BADDEV                            ;INDICATE INVALUD
E5C7 8E046E           (        cubix.asm):01175                 LDX     #DITAB                            ;POINT TO STATUS TABLE
E5CA 58               (        cubix.asm):01176                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E5CB AE85             (        cubix.asm):01177                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E5CD 27E5             (        cubix.asm):01178                 BEQ     BADDEV                            ;INDICATE INVALID
E5CF AD84             (        cubix.asm):01179                 JSR     ,X                                ;EXECUTE INPUT DRIVER
E5D1 3594             (        cubix.asm):01180                 PULS    B,X,PC                            ;RESTORE & RETURN
                      (        cubix.asm):01181         ;*
                      (        cubix.asm):01182         ;* TEST FOR A CHARACTER FROM THE CONSOLE DEVICE
                      (        cubix.asm):01183         ;*
E5D3                  (        cubix.asm):01184         TSTCHR
E5D3 3414             (        cubix.asm):01185                 PSHS    B,X                               ;SAVE REGS
E5D5 F6046C           (        cubix.asm):01186                 LDB     >CONIN                            ;GET INPUT DEVICE
E5D8 20E9             (        cubix.asm):01187                 BRA     TSTDE1                            ;AND CONTINUE
                      (        cubix.asm):01188         ;*
                      (        cubix.asm):01189         ;* READ A CHARACTER FROM CONSOLE
                      (        cubix.asm):01190         ;*
E5DA                  (        cubix.asm):01191         GETCHR
E5DA 8DF7             (        cubix.asm):01192                 BSR     TSTCHR                            ;TEST FOR CHAR
E5DC 26FC             (        cubix.asm):01193                 BNE     GETCHR                            ;INDICATE NONE
E5DE 39               (        cubix.asm):01194                 RTS
                      (        cubix.asm):01195         ;*
                      (        cubix.asm):01196         ;* INCLUDE ALL OTHER SUB-SYSTEMS
                      (        cubix.asm):01197         ;*
                      (        cubix.asm):01198                 INCLUDE filesys.os                        ;FILE SYSTEM MANAGMENT
                      (       filesys.os):00001         ;*
                      (       filesys.os):00002         ;* CUBIX File System management routines
                      (       filesys.os):00003         ;*
                      (       filesys.os):00004         ;* LOCATE NEXT WORK SECTOR IN CHAIN
                      (       filesys.os):00005         ;*
E5DF                  (       filesys.os):00006         FNDLNK
E5DF 3402             (       filesys.os):00007                 PSHS    A
E5E1 58               (       filesys.os):00008                 LSLB                                      ;DOUBLE FOR
E5E2 49               (       filesys.os):00009                 ROLA                                      ;TWO BYTE ID'S
E5E3 8401             (       filesys.os):00010                 ANDA    #$01                              ;MASK OFF BITS (512/SECTOR)
E5E5 C30600           (       filesys.os):00011                 ADDD    #WRKSPC                           ;POINT TO WORKSPACE
E5E8 1F01             (       filesys.os):00012                 TFR     D,X                               ;SET UP POINTER
E5EA 3504             (       filesys.os):00013                 PULS    B                                 ;RESTORE HIGH ID
E5EC CB01             (       filesys.os):00014                 ADDB    #LNKSEC                           ;ADVANCE TO LINK SECTOR
E5EE 4F               (       filesys.os):00015                 CLRA                                      ;ZERO HIGH
E5EF 3410             (       filesys.os):00016                 PSHS    X                                 ;SAVE PTR
E5F1 8D09             (       filesys.os):00017                 BSR     RDWRK                             ;READ WORK SECTOR
E5F3 3510             (       filesys.os):00018                 PULS    X                                 ;RESTORE
E5F5 EC84             (       filesys.os):00019                 LDD     ,X                                ;GET DATA
E5F7 1083FFFF         (       filesys.os):00020                 CMPD    #$FFFF                            ;END OF FILE?
E5FB                  (       filesys.os):00021         GRTS
E5FB 39               (       filesys.os):00022                 RTS
                      (       filesys.os):00023         ;*
                      (       filesys.os):00024         ;* READ WORK SECTOR FROM DISK
                      (       filesys.os):00025         ;*
E5FC                  (       filesys.os):00026         RDWRK
E5FC 3402             (       filesys.os):00027                 PSHS    A                                 ;SAVE ACCA
E5FE 8E0600           (       filesys.os):00028                 LDX     #WRKSPC                           ;POINT TO IT
E601 B604F3           (       filesys.os):00029                 LDA     >SDRIVE                           ;CURRENT DRIVE
E604 B104E6           (       filesys.os):00030                 CMPA    >WRKDRV                           ;ARE WE ON IT?
E607 2608             (       filesys.os):00031                 BNE     RDW1                              ;WRITE IT CHANGED
E609 A6E4             (       filesys.os):00032                 LDA     ,S                                ;RESTORE SECTOR ID
E60B 10B304E7         (       filesys.os):00033                 CMPD    >WRKSEC                           ;DO WE ALREADY HAVE IT?
E60F 2710             (       filesys.os):00034                 BEQ     RRTS                              ;YES, ITS OK
E611                  (       filesys.os):00035         RDW1
E611 8D20             (       filesys.os):00036                 BSR     WRTST                             ;WRITE IF NESSARY
E613 B604F3           (       filesys.os):00037                 LDA     >SDRIVE                           ;GET DRIVE
E616 B704E6           (       filesys.os):00038                 STA     >WRKDRV                           ;SET WORK DRIVE
E619 A6E4             (       filesys.os):00039                 LDA     ,S                                ;RESTORE SECTOR ID
E61B FD04E7           (       filesys.os):00040                 STD     >WRKSEC                           ;SET IT UP
E61E BDEAE4           (       filesys.os):00041                 JSR     RDISK                             ;READ DISK
E621                  (       filesys.os):00042         RRTS
E621 3582             (       filesys.os):00043                 PULS    A,PC
                      (       filesys.os):00044         ;*
                      (       filesys.os):00045         ;* PURGE OPEN WORK SECTOR, INSURE IT GETS WRITTEN. SET
                      (       filesys.os):00046         ;* SAVED SECTOR TO $FFFF, SO WE FORCE NEW READ
                      (       filesys.os):00047         ;*
E623                  (       filesys.os):00048         PURGE
E623 8D0E             (       filesys.os):00049                 BSR     WRTST                             ;WRITE IF NESSARY
E625                  (       filesys.os):00050         PURGE1
E625 3406             (       filesys.os):00051                 PSHS    A,B                               ;SAVE REGISTERS
E627 CCFFFF           (       filesys.os):00052                 LDD     #$FFFF                            ;GET NON-EXISTANT
E62A FD04E7           (       filesys.os):00053                 STD     >WRKSEC                           ;SET WORK SECTOR
E62D B704E6           (       filesys.os):00054                 STA     >WRKDRV                           ;SET WORK DRIVE
E630 4F               (       filesys.os):00055                 CLRA    SET 'Z'
E631 3586             (       filesys.os):00056                 PULS    A,B,PC
                      (       filesys.os):00057         ;*
                      (       filesys.os):00058         ;* WRITE WORK SECTOR IF IT HAS BEEN CHANGED
                      (       filesys.os):00059         ;*
E633                  (       filesys.os):00060         WRTST
E633 7D04E5           (       filesys.os):00061                 TST     >WRKCHG                           ;HAS IT CHANGED?
E636 27C3             (       filesys.os):00062                 BEQ     GRTS                              ;NO, SKIP IT
                      (       filesys.os):00063         ;*
                      (       filesys.os):00064         ;* WRITE WORK SECTOR BACK TO DISK
                      (       filesys.os):00065         ;*
E638                  (       filesys.os):00066         WRWRK
E638 3416             (       filesys.os):00067                 PSHS    A,B,X                             ;SAVE REGS
E63A B604F3           (       filesys.os):00068                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E63D 3402             (       filesys.os):00069                 PSHS    A                                 ;SAVE IT
E63F B604E6           (       filesys.os):00070                 LDA     >WRKDRV                           ;GET WORK DRIVE
E642 B704F3           (       filesys.os):00071                 STA     >SDRIVE                           ;SET IT UP
E645 FC04E7           (       filesys.os):00072                 LDD     >WRKSEC                           ;GET ID
E648 8E0600           (       filesys.os):00073                 LDX     #WRKSPC                           ;POINT TO WORKSPACE
E64B BDEB17           (       filesys.os):00074                 JSR     WDISK                             ;WRITE IT
E64E 7F04E5           (       filesys.os):00075                 CLR     >WRKCHG                           ;INDICTE FRESH
E651 3502             (       filesys.os):00076                 PULS    A                                 ;RESTORE DRIVE
E653 B704F3           (       filesys.os):00077                 STA     >SDRIVE                           ;RESAVE
E656 4F               (       filesys.os):00078                 CLRA                                      ;ZERO RETURN
E657 3596             (       filesys.os):00079                 PULS    A,B,X,PC
                      (       filesys.os):00080         ;*
                      (       filesys.os):00081         ;* LOCATE  FILE, ISSUE ERROR MESSAGE IF NOT FOUND
                      (       filesys.os):00082         ;*
E659                  (       filesys.os):00083         LOCERR
                      (       filesys.os):00084         
E659 8D37             (       filesys.os):00085                 BSR     LOCDIR                            ;LOOK IT UP
E65B 2758             (       filesys.os):00086                 BEQ     FILFND                            ;FINE, RETURN
                      (       filesys.os):00087         
                      (       filesys.os):00088         ;* ATTEMPT TO OPEN FILE FAILED, NOT FOUND
E65D                  (       filesys.os):00089         NOTFND
E65D 108EF79B         (       filesys.os):00090                 LDY     #NOTMSG                           ;INDICATE NOT FOUND
E661 8602             (       filesys.os):00091                 LDA     #RCNOTF                           ;NOT FOUND RC
                      (       filesys.os):00092         ;* PROCESS FOR FILE RELATED ERRORS
E663                  (       filesys.os):00093         FILERR
E663 3403             (       filesys.os):00094                 PSHS    A,CC                              ;SAVE A & CC
E665 7D04A2           (       filesys.os):00095                 TST     >MSGFLG                           ;MESSAGES ENABLED
E668 2721             (       filesys.os):00096                 BEQ     NOFMSG                            ;NO, SKIP IT
E66A BDE54E           (       filesys.os):00097                 JSR     WRLIN                             ;OUTPUT MESSAGE
E66D 4572726F72207072 (       filesys.os):00098                 FCC     'Error processing file: '
     6F63657373696E67
     2066696C653A20
E684 00               (       filesys.os):00099                 FCB     $00
E685 BDE6D7           (       filesys.os):00100                 JSR     SHOSAV                            ;DISPLAY IT
E688 BDE588           (       filesys.os):00101                 JSR     LFCR
E68B                  (       filesys.os):00102         NOFMSG
E68B 1F21             (       filesys.os):00103                 TFR     Y,X                               ;COPY IT
E68D 3503             (       filesys.os):00104                 PULS    A,CC                              ;RESTORE CONDITIONS
E68F 7EE2BD           (       filesys.os):00105                 JMP     ERRMRC                            ;OUTPUT MESSAGE
                      (       filesys.os):00106         ;*
                      (       filesys.os):00107         ;* LOCATE A FILE IN THE DIRECTORY, LEAVES 'X' POINTING AT IT
                      (       filesys.os):00108         ;*
E692                  (       filesys.os):00109         LOCDIR
E692 B604BF           (       filesys.os):00110                 LDA     >FDRIVE                           ;GET FILES DRIVE ID
E695 B704F3           (       filesys.os):00111                 STA     >SDRIVE                           ;SAVE IT
E698 CC0000           (       filesys.os):00112                 LDD     #DIRSEC                           ;STARTING SECTOR OF DIR
E69B                  (       filesys.os):00113         LOCSEC
E69B BDE5FC           (       filesys.os):00114                 JSR     RDWRK                             ;READ IT
E69E                  (       filesys.os):00115         LOCFIL
                      (       filesys.os):00116         
E69E BDE323           (       filesys.os):00117                 JSR     COMNAM                            ;DOES IT MATCH
E6A1 2712             (       filesys.os):00118                 BEQ     FILFND                            ;YES
E6A3 308820           (       filesys.os):00119                 LEAX    32,X                              ;ADVANCE TO NEXT
E6A6 8C0800           (       filesys.os):00120                 CMPX    #WRKSPC+512                       ;OVER?
E6A9 25F3             (       filesys.os):00121                 BLO     LOCFIL                            ;KEEP LOOKING
E6AB FC04E7           (       filesys.os):00122                 LDD     >WRKSEC                           ;GET SECTOR
E6AE BDE5DF           (       filesys.os):00123                 JSR     FNDLNK                            ;GET ITS LINK
E6B1 26E8             (       filesys.os):00124                 BNE     LOCSEC                            ;MORE TO FIND
E6B3 8602             (       filesys.os):00125                 LDA     #RCNOTF                           ;FILE NOT FOUND
E6B5                  (       filesys.os):00126         FILFND
E6B5 39               (       filesys.os):00127                 RTS
                      (       filesys.os):00128         ;*
                      (       filesys.os):00129         ;* DISPLAY DIRECTORY USING SAVED FILENAME AS A MASK
                      (       filesys.os):00130         ;*
E6B6                  (       filesys.os):00131         DISDIR
E6B6 8DA1             (       filesys.os):00132                 BSR     LOCERR                            ;LOCATE FILE
E6B8                  (       filesys.os):00133         SHOME
E6B8 8D30             (       filesys.os):00134                 BSR     SHONAM                            ;OUTPUT NAME
E6BA BDE588           (       filesys.os):00135                 JSR     LFCR                              ;NEW LINE
E6BD                  (       filesys.os):00136         NOSHO
E6BD 308820           (       filesys.os):00137                 LEAX    32,X                              ;NEXT ENTRY
E6C0 8C0800           (       filesys.os):00138                 CMPX    #WRKSPC+512                       ;OVER?
E6C3 250B             (       filesys.os):00139                 BLO     SHOFIL                            ;MORE TO GO
E6C5 FC04E7           (       filesys.os):00140                 LDD     >WRKSEC                           ;GET WORKSECTOR
E6C8 BDE5DF           (       filesys.os):00141                 JSR     FNDLNK                            ;LOCATE LINK
E6CB 27E8             (       filesys.os):00142                 BEQ     FILFND                            ;NO, QUIT
E6CD BDE5FC           (       filesys.os):00143                 JSR     RDWRK                             ;READ NEW SECTOR
E6D0                  (       filesys.os):00144         SHOFIL
E6D0 BDE323           (       filesys.os):00145                 JSR     COMNAM                            ;DOES IT MATCH?
E6D3 26E8             (       filesys.os):00146                 BNE     NOSHO                             ;DON'T OUTPUT
E6D5 20E1             (       filesys.os):00147                 BRA     SHOME                             ;DISPLAY IT
                      (       filesys.os):00148         
                      (       filesys.os):00149         ;*
                      (       filesys.os):00150         ;* SHOW SAVED FILENAME
                      (       filesys.os):00151         ;*
E6D7                  (       filesys.os):00152         SHOSAV
E6D7 3416             (       filesys.os):00153                 PSHS    A,B,X                             ;SAVE REGS
E6D9 8E04BF           (       filesys.os):00154                 LDX     #FDRIVE                           ;POINT TO IT
E6DC A680             (       filesys.os):00155                 LDA     ,X+                               ;GET DRIVE ID
E6DE 8B41             (       filesys.os):00156                 ADDA    #'A'                              ;OFFSET
E6E0 BDE59A           (       filesys.os):00157                 JSR     PUTCHR
E6E3 863A             (       filesys.os):00158                 LDA     #':'
E6E5 BDE59A           (       filesys.os):00159                 JSR     PUTCHR
E6E8 2002             (       filesys.os):00160                 BRA     SHON1                             ;DISPLAY IT
                      (       filesys.os):00161         ;*
                      (       filesys.os):00162         ;* DISPLAYS FILENAME(X) IN DIRECTORY FORMAT
                      (       filesys.os):00163         ;*
E6EA                  (       filesys.os):00164         SHONAM
E6EA 3416             (       filesys.os):00165                 PSHS    A,B,X                             ;SAVE REGISTERS
E6EC                  (       filesys.os):00166         SHON1
E6EC 865B             (       filesys.os):00167                 LDA     #'['                              ;OPENING BRACKET
E6EE BDE59A           (       filesys.os):00168                 JSR     PUTCHR                            ;OUTPUT
E6F1 8D12             (       filesys.os):00169                 BSR     DISP8                             ;DISPLAY IT
E6F3 865D             (       filesys.os):00170                 LDA     #']'                              ;CLOSING BRACKET
E6F5 BDE59A           (       filesys.os):00171                 JSR     PUTCHR                            ;OUTPUT
E6F8 8D0B             (       filesys.os):00172                 BSR     DISP8                             ;DISPLAY NAME
E6FA 862E             (       filesys.os):00173                 LDA     #'.'
E6FC BDE59A           (       filesys.os):00174                 JSR     PUTCHR
E6FF C603             (       filesys.os):00175                 LDB     #3                                ;TYPE IS THREE
E701 8D04             (       filesys.os):00176                 BSR     DISPX
E703 3596             (       filesys.os):00177                 PULS    A,B,X,PC
E705                  (       filesys.os):00178         DISP8
E705 C608             (       filesys.os):00179                 LDB     #8                                ;8 CHARS FOR PREFIX AND TYPE
E707                  (       filesys.os):00180         DISPX
E707 A680             (       filesys.os):00181                 LDA     ,X+                               ;GET CHAR
E709 2703             (       filesys.os):00182                 BEQ     SHRT                              ;SHORT, ADVANCE
E70B BDE59A           (       filesys.os):00183                 JSR     PUTCHR                            ;DISPLAY
E70E                  (       filesys.os):00184         SHRT
E70E 5A               (       filesys.os):00185                 DECB                                      ;REDUCE COUNT
E70F 26F6             (       filesys.os):00186                 BNE     DISPX                             ;KEEP GOING
E711 39               (       filesys.os):00187                 RTS
                      (       filesys.os):00188         ;*
                      (       filesys.os):00189         ;* CALCULATE DRIVE SIZE IN 'D'
                      (       filesys.os):00190         ;*
E712                  (       filesys.os):00191         CURSIZ
E712 B604F3           (       filesys.os):00192                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E715                  (       filesys.os):00193         DRVSIZ
E715 3450             (       filesys.os):00194                 PSHS    X,U
E717 BDEB0E           (       filesys.os):00195                 JSR     GETCTL1                           ;GET CONTROL BLOCK
E71A E643             (       filesys.os):00196                 LDB     NSEC,U                            ;GET # SECS/TRACK
E71C A642             (       filesys.os):00197                 LDA     NHEAD,U                           ;GET # HEADS
E71E 3D               (       filesys.os):00198                 MUL                                       ;GET SECS/CYLINDER
E71F 1F01             (       filesys.os):00199                 TFR     D,X
E721 4F               (       filesys.os):00200                 CLRA
E722 E641             (       filesys.os):00201                 LDB     NCYL,U                            ;GET # CYLINDERS
E724 BDF6F0           (       filesys.os):00202                 JSR     MUL16                             ;
E727 35D0             (       filesys.os):00203                 PULS    X,U,PC                            ;RETURN
                      (       filesys.os):00204         ;*
                      (       filesys.os):00205         ;* CREATES A FILE
                      (       filesys.os):00206         ;*
E729                  (       filesys.os):00207         CREATE
E729 BDE35C           (       filesys.os):00208                 JSR     VALID                             ;OK AS SINGLE FLE
E72C 1026FB88         (       filesys.os):00209                 LBNE    BADOPR                            ;NO, INVALID
E730 BDE692           (       filesys.os):00210                 JSR     LOCDIR                            ;LOOK FOR IT
E733 2609             (       filesys.os):00211                 BNE     CRE1                              ;ITS OK
                      (       filesys.os):00212         ;* FILE ALREADY EXISTS
E735                  (       filesys.os):00213         FEXISTS
E735 108EF7AA         (       filesys.os):00214                 LDY     #EXIMSG                           ;FILE EXISTS
E739 8607             (       filesys.os):00215                 LDA     #RCEXI                            ;EXISTS
E73B 7EE663           (       filesys.os):00216                 JMP     FILERR                            ;INDICATE ERROR
E73E                  (       filesys.os):00217         CRE1
E73E 8D6F             (       filesys.os):00218                 BSR     FRESEC                            ;ALLOCATE A SECTOR
E740 FD04D5           (       filesys.os):00219                 STD     >TEMP1                            ;SAVE IT
E743 CC0000           (       filesys.os):00220                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
E746                  (       filesys.os):00221         CRE2
E746 BDE5FC           (       filesys.os):00222                 JSR     RDWRK                             ;READ WORK SECTOR
E749 C610             (       filesys.os):00223                 LDB     #16                               ;ENTRIES/SECTOR
E74B                  (       filesys.os):00224         CRE3
E74B 6D84             (       filesys.os):00225                 TST     ,X                                ;IS IT FREE?
E74D 2732             (       filesys.os):00226                 BEQ     CRE6                              ;YES, PUT IT HERE
E74F 308820           (       filesys.os):00227                 LEAX    32,X                              ;ADVANCE TO NEXT
E752 5A               (       filesys.os):00228                 DECB                                      ;REDUCE COUNT
E753 26F6             (       filesys.os):00229                 BNE     CRE3                              ;KEEP LOOKING
E755 FC04E7           (       filesys.os):00230                 LDD     >WRKSEC                           ;GET DIRECTORY SEC ID
E758 BDE5DF           (       filesys.os):00231                 JSR     FNDLNK                            ;FIND LINK
E75B 26E9             (       filesys.os):00232                 BNE     CRE2                              ;AND KEEP GOING
E75D FC04D5           (       filesys.os):00233                 LDD     >TEMP1                            ;GET OUR FREE SECTOR
E760 ED84             (       filesys.os):00234                 STD     ,X                                ;POINT DIRECTORY AT IT
E762 BDE7A6           (       filesys.os):00235                 JSR     CHGWRK                            ;INDICATE WE CHANGED
E765 3406             (       filesys.os):00236                 PSHS    A,B                               ;SAVE ID
E767 8D46             (       filesys.os):00237                 BSR     FRESEC                            ;GET FREE
E769 FD04D5           (       filesys.os):00238                 STD     >TEMP1                            ;SAVE NEW FREE
E76C BDE638           (       filesys.os):00239                 JSR     WRWRK                             ;WRITE WORK SECTOR
E76F 3506             (       filesys.os):00240                 PULS    A,B                               ;RESTORE DIRECTORY SECTOR ID
E771 FD04E7           (       filesys.os):00241                 STD     >WRKSEC                           ;INDICATE CURRENT WORKSECTOR
E774 8E0600           (       filesys.os):00242                 LDX     #WRKSPC                           ;PT TO IT
E777                  (       filesys.os):00243         CRE5
E777 6F80             (       filesys.os):00244                 CLR     ,X+                               ;CLEAR IT
E779 8C0800           (       filesys.os):00245                 CMPX    #WRKSPC+512                       ;ARE WE OVER
E77C 25F9             (       filesys.os):00246                 BLO     CRE5                              ;DO ALL
E77E 8E0600           (       filesys.os):00247                 LDX     #WRKSPC                           ;PT TO IT AGAIN
E781                  (       filesys.os):00248         CRE6
E781 3420             (       filesys.os):00249                 PSHS    Y                                 ;SAVE
E783 108E04C0         (       filesys.os):00250                 LDY     #PREFIX                           ;PT TO SAVED NAME
E787 C613             (       filesys.os):00251                 LDB     #19                               ;19 CHARS IN NAME
E789                  (       filesys.os):00252         CRE7
E789 A6A0             (       filesys.os):00253                 LDA     ,Y+                               ;GET CHAR
E78B A780             (       filesys.os):00254                 STA     ,X+                               ;SAVE IN ENTRY
E78D 5A               (       filesys.os):00255                 DECB                                      ;REDUCE COUNT
E78E 26F9             (       filesys.os):00256                 BNE     CRE7                              ;CONTINUE
E790 3520             (       filesys.os):00257                 PULS    Y                                 ;RESTORE
E792 3088ED           (       filesys.os):00258                 LEAX    -19,X                             ;BACK TO START
E795 FC04DB           (       filesys.os):00259                 LDD     >TEMP4                            ;GET LOAD ADDRESS
E798 ED8815           (       filesys.os):00260                 STD     DRADR,X                           ;SET IT,
E79B 86F0             (       filesys.os):00261                 LDA     #DEFATR                           ;GET DEF ATTRIBUTES
E79D A78817           (       filesys.os):00262                 STA     DATTR,X                           ;SET THEM
E7A0 FC04D5           (       filesys.os):00263                 LDD     >TEMP1                            ;GET DISK ADDRESS
E7A3 ED8813           (       filesys.os):00264                 STD     DDADR,X                           ;SET IT
                      (       filesys.os):00265         ;*
                      (       filesys.os):00266         ;* SET WORK SECTOR CHANGED FLAG
                      (       filesys.os):00267         ;*
E7A6                  (       filesys.os):00268         CHGWRK
E7A6 7F04E5           (       filesys.os):00269                 CLR     >WRKCHG
E7A9 7A04E5           (       filesys.os):00270                 DEC     >WRKCHG                           ;SET IT
E7AC 1A04             (       filesys.os):00271                 ORCC    #4                                ;SET 'Z'
E7AE 39               (       filesys.os):00272                 RTS
                      (       filesys.os):00273         ;*
                      (       filesys.os):00274         ;* LOCATE A FREE SECTOR ON THE DISK, CLAIM IT AND SET
                      (       filesys.os):00275         ;* FLAG TO $FFFF (END OF FILE). ATEMPT TO ALLOCATE IN SECTOR
                      (       filesys.os):00276         ;* WHICH AS ALREADY LOADED IN ORDER TO REDUCE DISK I/O.
                      (       filesys.os):00277         ;*
E7AF                  (       filesys.os):00278         FRESEC
E7AF BDE712           (       filesys.os):00279                 JSR     CURSIZ                            ;CALCULATE SIZE OF DISK
E7B2 FD04D3           (       filesys.os):00280                 STD     >TEMP                             ;SAVE IT
E7B5 830001           (       filesys.os):00281                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
E7B8 8B01             (       filesys.os):00282                 ADDA    #LNKSEC                           ;COMPUTE LARGEST LINK SECTOR # (D/256+LNK)
E7BA 3402             (       filesys.os):00283                 PSHS    A                                 ;SAVE
E7BC 7D04E7           (       filesys.os):00284                 TST     >WRKSEC                           ;LOW?
E7BF 260E             (       filesys.os):00285                 BNE     FRES1                             ;NO LINK IN CORE
E7C1 F604E8           (       filesys.os):00286                 LDB     >WRKSEC+1                         ;GET SECTOR ID
E7C4 B104E8           (       filesys.os):00287                 CMPA    >WRKSEC+1                         ;IS IT IN RANGE?
E7C7 2506             (       filesys.os):00288                 BLO     FRES1                             ;NO LINK IN CORE
E7C9 C101             (       filesys.os):00289                 CMPB    #LNKSEC                           ;IN RANGE?
E7CB 2502             (       filesys.os):00290                 BLO     FRES1                             ;NO LINK IN CORE
E7CD 8D11             (       filesys.os):00291                 BSR     FNDFRE                            ;LOOK FOR IT
E7CF                  (       filesys.os):00292         FRES1
E7CF C601             (       filesys.os):00293                 LDB     #LNKSEC                           ;LOOK IN FIRST
E7D1                  (       filesys.os):00294         FRES2
E7D1 8D0D             (       filesys.os):00295                 BSR     FNDFRE                            ;LOOK FOR IT
E7D3 5C               (       filesys.os):00296                 INCB    ADVANCE
E7D4 E1E4             (       filesys.os):00297                 CMPB    ,S                                ;ARE WE OVER?
E7D6 23F9             (       filesys.os):00298                 BLS     FRES2                             ;NO, LEEP GOING
                      (       filesys.os):00299         ;* NO DISK SPACE AVAILABLE
E7D8                  (       filesys.os):00300         NOSPAC
E7D8 8EF7BE           (       filesys.os):00301                 LDX     #NOSMSG                           ;NO SPACE
E7DB 8608             (       filesys.os):00302                 LDA     #RCNOS                            ;RETURN CODE
E7DD 7EE2BD           (       filesys.os):00303                 JMP     ERRMRC                            ;REPORT ERROR
                      (       filesys.os):00304         ;* LOOK FOR FREE SECTOR
E7E0                  (       filesys.os):00305         FNDFRE
E7E0 4F               (       filesys.os):00306                 CLRA                                      ;HIGH ADDRESS TO ZERO
E7E1 3434             (       filesys.os):00307                 PSHS    B,X,Y                             ;SAVE REGS
E7E3 BDE5FC           (       filesys.os):00308                 JSR     RDWRK                             ;READ WORK SECTOR
E7E6                  (       filesys.os):00309         FNDF1
E7E6 EC81             (       filesys.os):00310                 LDD     ,X++                              ;IS IT FREE
E7E8 2707             (       filesys.os):00311                 BEQ     FNDF3                             ;YES
E7EA 8C0800           (       filesys.os):00312                 CMPX    #WRKSPC+512                       ;OVER?
E7ED 25F7             (       filesys.os):00313                 BLO     FNDF1                             ;NO, KEEP LOOKING
E7EF                  (       filesys.os):00314         FNDF2
E7EF 35B4             (       filesys.os):00315                 PULS    B,X,Y,PC                          ;GO HOME
E7F1                  (       filesys.os):00316         FNDF3
E7F1 1F10             (       filesys.os):00317                 TFR     X,D                               ;GET VALUE
E7F3 830602           (       filesys.os):00318                 SUBD    #WRKSPC+2                         ;CONVERT TO BYTE OFFSET
E7F6 44               (       filesys.os):00319                 LSRA                                      ;CONVERT ADDRESS IN WS
E7F7 56               (       filesys.os):00320                 RORB                                      ;TO SECTOR # IN WS
E7F8 A6E4             (       filesys.os):00321                 LDA     ,S                                ;GET SECTOR ID BACK
E7FA 8001             (       filesys.os):00322                 SUBA    #LNKSEC                           ;CONVERT TO PURE SECTOR #
E7FC 10B304D3         (       filesys.os):00323                 CMPD    >TEMP                             ;WITHIN DISK SIZE?
E800 24ED             (       filesys.os):00324                 BHS     FNDF2                             ;NO, RETURN WITH BAD NEWS
E802 3261             (       filesys.os):00325                 LEAS    1,S                               ;SKIP SAVED 'B' REGISTER
E804 108EFFFF         (       filesys.os):00326                 LDY     #$FFFF                            ;GET SECTOR IN USE FLAG
E808 10AF1E           (       filesys.os):00327                 STY     -2,X                              ;WRITE IT
E80B 3530             (       filesys.os):00328                 PULS    X,Y                               ;RESTORE REGS
E80D 3263             (       filesys.os):00329                 LEAS    3,S                               ;CLEAR UP STACK
E80F 2095             (       filesys.os):00330                 BRA     CHGWRK                            ;INDICATE CHANGED
                      (       filesys.os):00331         ;*
                      (       filesys.os):00332         ;* OPEN A FILE FOR READ
                      (       filesys.os):00333         ;*
E811                  (       filesys.os):00334         OPENR
E811 3414             (       filesys.os):00335                 PSHS    B,X                               ;SAVE REGS
E813 BDE8A8           (       filesys.os):00336                 JSR     LOCRED                            ;DOES IT EXIST
E816 EC8813           (       filesys.os):00337                 LDD     DDADR,X                           ;GET DISK ADDRESS
E819 ED42             (       filesys.os):00338                 STD     OFIRST,U                          ;SAVE IT
E81B ED44             (       filesys.os):00339                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E81D 4F               (       filesys.os):00340                 CLRA
E81E 5F               (       filesys.os):00341                 CLRB                                      ;ZERO OFFSET
E81F ED48             (       filesys.os):00342                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E821 ED46             (       filesys.os):00343                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E823 F604BF           (       filesys.os):00344                 LDB     >FDRIVE                           ;GET FILE DRIVE
E826 8601             (       filesys.os):00345                 LDA     #1                                ;INDICATE FILE OPEN/READ
E828 EDC4             (       filesys.os):00346                 STD     OTYPE,U                           ;INDICATE
E82A B604E2           (       filesys.os):00347                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E82D B704F3           (       filesys.os):00348                 STA     >SDRIVE                           ;RESET IT
E830 4F               (       filesys.os):00349                 CLRA                                      ;ZERO RC
E831 3594             (       filesys.os):00350                 PULS    B,X,PC
                      (       filesys.os):00351         ;*
                      (       filesys.os):00352         ;* READ CHARACTER FROM FILE
                      (       filesys.os):00353         ;*
E833                  (       filesys.os):00354         READC
E833 3414             (       filesys.os):00355                 PSHS    B,X                               ;SAVE REGS
E835 304A             (       filesys.os):00356                 LEAX    OSIZ,U                            ;OFFSET TO DATA
E837 A641             (       filesys.os):00357                 LDA     ODRIVE,U                          ;GET DRIVE
E839 B704F3           (       filesys.os):00358                 STA     >SDRIVE                           ;SELECT
E83C EC48             (       filesys.os):00359                 LDD     OOFFSET,U                         ;GET OFFSET
E83E 2612             (       filesys.os):00360                 BNE     REC1                              ;NON-ZERO, ITS OK
E840 A6C4             (       filesys.os):00361                 LDA     OTYPE,U                           ;GET OPEN TYPE
E842 4A               (       filesys.os):00362                 DECA                                      ;OPEN FOR READ?
E843 2676             (       filesys.os):00363                 BNE     ORERR                             ;NO, REPORT ERROR
E845 EC44             (       filesys.os):00364                 LDD     OSECTOR,U                         ;GET SECTOR
E847 1083FFFF         (       filesys.os):00365                 CMPD    #$FFFF                            ;END OF FILE?
E84B 2776             (       filesys.os):00366                 BEQ     EOF                               ;YES, REPORT ERROR
E84D BDEAE4           (       filesys.os):00367                 JSR     RDISK                             ;READ IT IN
E850 EC48             (       filesys.os):00368                 LDD     OOFFSET,U                         ;RESTORE OFFSET
E852                  (       filesys.os):00369         REC1
E852 308B             (       filesys.os):00370                 LEAX    D,X                               ;OFFSET TO CHAR
E854 C30001           (       filesys.os):00371                 ADDD    #1                                ;ADVANCE
E857 10830200         (       filesys.os):00372                 CMPD    #512                              ;ARE WE OVER
E85B 250F             (       filesys.os):00373                 BLO     REC2                              ;NO, ITS OK
E85D 3410             (       filesys.os):00374                 PSHS    X                                 ;SAVE 'X'
E85F EC44             (       filesys.os):00375                 LDD     OSECTOR,U                         ;GET SECTOR
E861 ED46             (       filesys.os):00376                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E863 BDE5DF           (       filesys.os):00377                 JSR     FNDLNK                            ;LOOK UP ITS LINK
E866 ED44             (       filesys.os):00378                 STD     OSECTOR,U                         ;SAVE NEW SECTOR
E868 3510             (       filesys.os):00379                 PULS    X                                 ;RESTORE PTR TO CAHR
E86A 4F               (       filesys.os):00380                 CLRA
E86B 5F               (       filesys.os):00381                 CLRB
E86C                  (       filesys.os):00382         REC2
E86C ED48             (       filesys.os):00383                 STD     OOFFSET,U                         ;NEW OFFSET
E86E B604E2           (       filesys.os):00384                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E871 B704F3           (       filesys.os):00385                 STA     >SDRIVE                           ;RESET IT
E874 A680             (       filesys.os):00386                 LDA     ,X+                               ;GET CHARACTER
E876 81FF             (       filesys.os):00387                 CMPA    #$FF                              ;END OF FILE?
E878 2749             (       filesys.os):00388                 BEQ     EOF                               ;YES
E87A 1A04             (       filesys.os):00389                 ORCC    #4                                ;INDICATE SUCESS
E87C 3594             (       filesys.os):00390                 PULS    B,X,PC
                      (       filesys.os):00391         ;*
                      (       filesys.os):00392         ;* READ A BLOCK FROM A FILE
                      (       filesys.os):00393         ;*
E87E                  (       filesys.os):00394         READB
E87E 3414             (       filesys.os):00395                 PSHS    B,X                               ;SAVE REGS
E880 A6C4             (       filesys.os):00396                 LDA     OTYPE,U                           ;GET OPEN TYPE
E882 4A               (       filesys.os):00397                 DECA                                      ;OPEN READ?
E883 2636             (       filesys.os):00398                 BNE     ORERR                             ;NO, REPORT ERROR
E885 A641             (       filesys.os):00399                 LDA     ODRIVE,U
E887 B704F3           (       filesys.os):00400                 STA     >SDRIVE                           ;SET DRIVE
E88A EC44             (       filesys.os):00401                 LDD     OSECTOR,U
E88C 1083FFFF         (       filesys.os):00402                 CMPD    #$FFFF                            ;END OF FILE?
E890 2731             (       filesys.os):00403                 BEQ     EOF
E892 ED46             (       filesys.os):00404                 STD     OLSTSEC,U                         ;SAVE LAST
E894 BDEAE4           (       filesys.os):00405                 JSR     RDISK                             ;READ IT
E897 BDE5DF           (       filesys.os):00406                 JSR     FNDLNK                            ;FIND ITS LINK
E89A ED44             (       filesys.os):00407                 STD     OSECTOR,U                         ;RESAVE
E89C B604E2           (       filesys.os):00408                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E89F B704F3           (       filesys.os):00409                 STA     >SDRIVE                           ;RESET SYSTEM DRIVE
E8A2 4F               (       filesys.os):00410                 CLRA
E8A3 5F               (       filesys.os):00411                 CLRB
E8A4 ED48             (       filesys.os):00412                 STD     OOFFSET,U                         ;CLEAR OFFSET
E8A6 3594             (       filesys.os):00413                 PULS    B,X,PC
                      (       filesys.os):00414         ;*
                      (       filesys.os):00415         ;* LOOK UP FILE WITH INTENT TO READ
                      (       filesys.os):00416         ;*
E8A8                  (       filesys.os):00417         LOCRED
E8A8 BDE659           (       filesys.os):00418                 JSR     LOCERR                            ;FIND IT
E8AB A68817           (       filesys.os):00419                 LDA     DATTR,X                           ;GET ATTRS
E8AE 8580             (       filesys.os):00420                 BITA    #RPERM                            ;CAN WE READ?
E8B0 2635             (       filesys.os):00421                 BNE     CLOC2                             ;YES, ITS OK
                      (       filesys.os):00422         ;* FILE PROTECTON VIOLATION
E8B2                  (       filesys.os):00423         PROERR
E8B2 108EF804         (       filesys.os):00424                 LDY     #PROMSG                           ;MESSAGE
E8B6 8603             (       filesys.os):00425                 LDA     #RCPRO                            ;PROTECTION VIOLATION
E8B8 7EE663           (       filesys.os):00426                 JMP     FILERR                            ;FILE ERROR
                      (       filesys.os):00427         ;* ATTEMPT TO READ FILE NOT OPEN FOR READ
E8BB                  (       filesys.os):00428         ORERR
E8BB 8EF7D5           (       filesys.os):00429                 LDX     #OREMSG
E8BE 8604             (       filesys.os):00430                 LDA     #RCORE
E8C0 7EE2BD           (       filesys.os):00431                 JMP     ERRMRC
                      (       filesys.os):00432         ;* ATTEMPT TO READ PAST EOF
E8C3                  (       filesys.os):00433         EOF
E8C3 8606             (       filesys.os):00434                 LDA     #RCEOF
E8C5 7EE2F8           (       filesys.os):00435                 JMP     ERRRET
                      (       filesys.os):00436         ;*
                      (       filesys.os):00437         ;* REWIND A FILE
                      (       filesys.os):00438         ;*
E8C8                  (       filesys.os):00439         REWIND
E8C8 3406             (       filesys.os):00440                 PSHS    A,B                               ;SAVE REGS
E8CA EC42             (       filesys.os):00441                 LDD     OFIRST,U                          ;GET FIRST SECTOR ID
E8CC ED44             (       filesys.os):00442                 STD     OSECTOR,U                         ;POINT TO IT
E8CE 4F               (       filesys.os):00443                 CLRA
E8CF 5F               (       filesys.os):00444                 CLRB
E8D0 ED48             (       filesys.os):00445                 STD     OOFFSET,U                         ;SET OFFSET
E8D2 ED46             (       filesys.os):00446                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E8D4 3586             (       filesys.os):00447                 PULS    A,B,PC
                      (       filesys.os):00448         ;*
                      (       filesys.os):00449         ;* LOOKUP A FILE WITH INTENT TO WRITE
                      (       filesys.os):00450         ;*
E8D6                  (       filesys.os):00451         LOCWRI
E8D6 BDE692           (       filesys.os):00452                 JSR     LOCDIR                            ;LOOK FOR IT
E8D9 2705             (       filesys.os):00453                 BEQ     CLOC1                             ;IT EXISTS
E8DB BDE729           (       filesys.os):00454                 JSR     CREATE                            ;CREATE IT
E8DE 2007             (       filesys.os):00455                 BRA     CLOC2                             ;AND RETURN
E8E0                  (       filesys.os):00456         CLOC1
E8E0 A68817           (       filesys.os):00457                 LDA     DATTR,X                           ;GET ATTRIBUTES
E8E3 8540             (       filesys.os):00458                 BITA    #WPERM                            ;CAN WE WRITE?
E8E5 27CB             (       filesys.os):00459                 BEQ     PROERR                            ;PROTECTON VIOLATION
E8E7                  (       filesys.os):00460         CLOC2
E8E7 FC04E7           (       filesys.os):00461                 LDD     >WRKSEC                           ;GET DIRECTORY SECT
E8EA 1A04             (       filesys.os):00462                 ORCC    #$04                              ;SET 'Z'
E8EC 39               (       filesys.os):00463                 RTS
                      (       filesys.os):00464         ;*
                      (       filesys.os):00465         ;* OPEN A FILE FOR WRITE
                      (       filesys.os):00466         ;*
E8ED                  (       filesys.os):00467         OPENW
E8ED 3414             (       filesys.os):00468                 PSHS    B,X                               ;SAVE REGS
E8EF 8DE5             (       filesys.os):00469                 BSR     LOCWRI                            ;DOES IT EXIST
E8F1 EC8813           (       filesys.os):00470                 LDD     DDADR,X                           ;GET DISK ADDRESS
E8F4 ED42             (       filesys.os):00471                 STD     OFIRST,U                          ;SAVE IT
E8F6 ED44             (       filesys.os):00472                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E8F8 4F               (       filesys.os):00473                 CLRA
E8F9 5F               (       filesys.os):00474                 CLRB                                      ;ZERO OFFSET
E8FA ED48             (       filesys.os):00475                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E8FC ED46             (       filesys.os):00476                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST SECTOR
E8FE B604BF           (       filesys.os):00477                 LDA     >FDRIVE                           ;GET FILE DRIVE
E901 A741             (       filesys.os):00478                 STA     ODRIVE,U                          ;SET IT UP
E903 8602             (       filesys.os):00479                 LDA     #2                                ;INDICATE FILE OPEN/WRITE
E905 A7C4             (       filesys.os):00480                 STA     OTYPE,U                           ;INDICATE
E907 B604E2           (       filesys.os):00481                 LDA     >SAVDRV
E90A B704F3           (       filesys.os):00482                 STA     >SDRIVE
E90D 4F               (       filesys.os):00483                 CLRA    ZERO RC
E90E 3594             (       filesys.os):00484                 PULS    B,X,PC
                      (       filesys.os):00485         ;*
                      (       filesys.os):00486         ;* WRITE CHARACTER TO A FILE
                      (       filesys.os):00487         ;*
E910                  (       filesys.os):00488         WRITEC
E910 3416             (       filesys.os):00489                 PSHS    A,B,X                             ;SAVE REGS
E912 304A             (       filesys.os):00490                 LEAX    OSIZ,U                            ;POINT TO DATA
E914 EC48             (       filesys.os):00491                 LDD     OOFFSET,U                         ;GET OFFSET
E916 10830200         (       filesys.os):00492                 CMPD    #512                              ;ARE WE OVER?
E91A 2504             (       filesys.os):00493                 BLO     WRC1                              ;NO, ITS OK
E91C 8D19             (       filesys.os):00494                 BSR     WRITEB                            ;OUTPUT THE BLOCK
E91E EC48             (       filesys.os):00495                 LDD     OOFFSET,U                         ;GET OFFSET
E920                  (       filesys.os):00496         WRC1
E920 308B             (       filesys.os):00497                 LEAX    D,X                               ;POINT TO CHAR
E922 C30001           (       filesys.os):00498                 ADDD    #1                                ;INCREMENT
E925 ED48             (       filesys.os):00499                 STD     OOFFSET,U                         ;RESAVE
E927 A6E4             (       filesys.os):00500                 LDA     ,S                                ;GET CHAR BACK
E929 A784             (       filesys.os):00501                 STA     ,X                                ;WRITE IN BUFFER
E92B 1A04             (       filesys.os):00502                 ORCC    #4                                ;INDICATE SUCESS
E92D 3596             (       filesys.os):00503                 PULS    A,B,X,PC
                      (       filesys.os):00504         ;* ATTEMPT TO WRITE FILE NOT OPEN FOR WRITE
E92F                  (       filesys.os):00505         OWERR
E92F 8EF7EC           (       filesys.os):00506                 LDX     #OWEMSG
E932 8605             (       filesys.os):00507                 LDA     #RCOWE
E934 7EE2BD           (       filesys.os):00508                 JMP     ERRMRC
                      (       filesys.os):00509         ;*
                      (       filesys.os):00510         ;* WRITE A BLOCK TO A FILE
                      (       filesys.os):00511         ;*
E937                  (       filesys.os):00512         WRITEB
E937 3414             (       filesys.os):00513                 PSHS    B,X                               ;SAVE REGS
E939 A6C4             (       filesys.os):00514                 LDA     OTYPE,U                           ;GET TYPE
E93B 8102             (       filesys.os):00515                 CMPA    #2                                ;WRITE?
E93D 26F0             (       filesys.os):00516                 BNE     OWERR                             ;NO, INVALID
E93F A641             (       filesys.os):00517                 LDA     ODRIVE,U                          ;GET DRIVE
E941 B704F3           (       filesys.os):00518                 STA     >SDRIVE                           ;SELECT DRIVE
E944 EC44             (       filesys.os):00519                 LDD     OSECTOR,U                         ;GET SECTOR
E946 1083FFFF         (       filesys.os):00520                 CMPD    #$FFFF                            ;ARE WE PAST END?
E94A 2613             (       filesys.os):00521                 BNE     WRB1                              ;NO, ITS OK
E94C BDE7AF           (       filesys.os):00522                 JSR     FRESEC                            ;GET A SECTOR
E94F 3406             (       filesys.os):00523                 PSHS    A,B                               ;SAVE IT
E951 EC46             (       filesys.os):00524                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
E953 BDE5DF           (       filesys.os):00525                 JSR     FNDLNK                            ;GET ITS LINK
E956 3506             (       filesys.os):00526                 PULS    A,B                               ;RESTORE
E958 ED84             (       filesys.os):00527                 STD     ,X                                ;SAVE IT
E95A BDE7A6           (       filesys.os):00528                 JSR     CHGWRK                            ;INDICATE SECTOR CHANGED
E95D AE61             (       filesys.os):00529                 LDX     1,S                               ;RESTORE MEMORY POINTER
E95F                  (       filesys.os):00530         WRB1
E95F ED46             (       filesys.os):00531                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E961 BDEB17           (       filesys.os):00532                 JSR     WDISK                             ;WRITE THE SECTOR
E964 BDE5DF           (       filesys.os):00533                 JSR     FNDLNK                            ;LOCATE LINK
E967 ED44             (       filesys.os):00534                 STD     OSECTOR,U                         ;SAVE ID OF NEXT SECTOR
E969 B604E2           (       filesys.os):00535                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E96C B704F3           (       filesys.os):00536                 STA     >SDRIVE                           ;RESET DRIVE ID
E96F 4F               (       filesys.os):00537                 CLRA
E970 5F               (       filesys.os):00538                 CLRB
E971 ED48             (       filesys.os):00539                 STD     OOFFSET,U                         ;INDICATE NO CHAR WRITE
E973 3594             (       filesys.os):00540                 PULS    B,X,PC
                      (       filesys.os):00541         ;*
                      (       filesys.os):00542         ;* CLOSE OPEN FILE
                      (       filesys.os):00543         ;*
E975                  (       filesys.os):00544         CLOSE
E975 3414             (       filesys.os):00545                 PSHS    B,X                               ;SAVE REGS
E977 A6C4             (       filesys.os):00546                 LDA     OTYPE,U                           ;GET TYPE
E979 8102             (       filesys.os):00547                 CMPA    #2                                ;OPEN FOR WRITE?
E97B 2639             (       filesys.os):00548                 BNE     CLO4                              ;NO, SKIP IT
                      (       filesys.os):00549         ;* UPDATE LAST SECTOR IF ANY DATA, OR FIRST IN FILE
E97D A641             (       filesys.os):00550                 LDA     ODRIVE,U                          ;GET DRIVE ID
E97F B704F3           (       filesys.os):00551                 STA     >SDRIVE                           ;SELECT IT
E982 EC48             (       filesys.os):00552                 LDD     OOFFSET,U                         ;DATA IN LAST SECT?
E984 2604             (       filesys.os):00553                 BNE     CLO0                              ;YES, WRITE IT
E986 AE46             (       filesys.os):00554                 LDX     OLSTSEC,U                         ;GET SECTOR
E988 2617             (       filesys.os):00555                 BNE     CLO3                              ;IS A LAST, OK
                      (       filesys.os):00556         ;* CLEAR REMAINING SECTOR TO ZERO
E98A                  (       filesys.os):00557         CLO0
E98A 304A             (       filesys.os):00558                 LEAX    OSIZ,U                            ;PT TO AREA
E98C 308B             (       filesys.os):00559                 LEAX    D,X                               ;ADVANCE TO DATA AREA
E98E                  (       filesys.os):00560         CLO1
E98E 10830200         (       filesys.os):00561                 CMPD    #512                              ;ARE WE OVER?
E992 2409             (       filesys.os):00562                 BHS     CLO2                              ;YES, STOP
E994 6F84             (       filesys.os):00563                 CLR     ,X                                ;SET TO ZERO
E996 6380             (       filesys.os):00564                 COM     ,X+                               ;& CONVERT TO FF
E998 C30001           (       filesys.os):00565                 ADDD    #1                                ;ADVANCE
E99B 20F1             (       filesys.os):00566                 BRA     CLO1                              ;AND CONTINUE
                      (       filesys.os):00567         ;* WRITE IT TO THE DISK
E99D                  (       filesys.os):00568         CLO2
E99D 304A             (       filesys.os):00569                 LEAX    OSIZ,U                            ;OFFSET AGAIN
E99F 8D96             (       filesys.os):00570                 BSR     WRITEB                            ;WRITE IT
                      (       filesys.os):00571         ;* MARK LAST SECTOR WRITTEN AS EOF
E9A1                  (       filesys.os):00572         CLO3
E9A1 EC46             (       filesys.os):00573                 LDD     OLSTSEC,U                         ;ITS NOW LAST ONE
E9A3 BDE5DF           (       filesys.os):00574                 JSR     FNDLNK                            ;GET ITS LINK
E9A6 CCFFFF           (       filesys.os):00575                 LDD     #$FFFF                            ;EOF MARKER
E9A9 ED84             (       filesys.os):00576                 STD     ,X                                ;WRITE IT
                      (       filesys.os):00577         ;* IF NOT LAST SECTOR IN FILE, RELEASE REST
E9AB EC44             (       filesys.os):00578                 LDD     OSECTOR,U                         ;GET SECTOR
E9AD 1083FFFF         (       filesys.os):00579                 CMPD    #$FFFF                            ;LAST ONE IN FILE?
E9B1 2703             (       filesys.os):00580                 BEQ     CLO4                              ;IS OK
E9B3 BDEE10           (       filesys.os):00581                 JSR     UNCHAIN                           ;REMOVE SECTOR LINKS
E9B6                  (       filesys.os):00582         CLO4
E9B6 6FC4             (       filesys.os):00583                 CLR     OTYPE,U                           ;INDICATE FILE IS CLOSED
E9B8 B604E2           (       filesys.os):00584                 LDA     >SAVDRV                           ;RESET DRIVE
E9BB B704F3           (       filesys.os):00585                 STA     >SDRIVE
E9BE 4F               (       filesys.os):00586                 CLRA
E9BF 3594             (       filesys.os):00587                 PULS    B,X,PC                            ;GO HOME
                      (       filesys.os):00588         ;*
                      (       filesys.os):00589         ;* SEEK ABSOLUTE FROM START OF FILE
                      (       filesys.os):00590         ;*
E9C1                  (       filesys.os):00591         SEEKABS
E9C1 BDE8C8           (       filesys.os):00592                 JSR     REWIND                            ;BACK TO START
                      (       filesys.os):00593         ;*
                      (       filesys.os):00594         ;* SEEK FORWARD RELATIVE
                      (       filesys.os):00595         ;*
E9C4                  (       filesys.os):00596         SEEKREL
E9C4 3416             (       filesys.os):00597                 PSHS    A,B,X                             ;SAVE SECTOR ID
E9C6 E6C4             (       filesys.os):00598                 LDB     OTYPE,U                           ;GET TYPE
E9C8 5A               (       filesys.os):00599                 DECB                                      ;OPEN FOR READ?
E9C9 1026FEEE         (       filesys.os):00600                 LBNE    ORERR                             ;NO, REPORT ERROR
E9CD A641             (       filesys.os):00601                 LDA     ODRIVE,U                          ;GET DRIVE
E9CF B704F3           (       filesys.os):00602                 STA     >SDRIVE                           ;SELECT IT
E9D2 EC48             (       filesys.os):00603                 LDD     OOFFSET,U                         ;GET OFFSET?
E9D4 E3E4             (       filesys.os):00604                 ADDD    ,S                                ;ADD OFFSET
                      (       filesys.os):00605         ;* ADVANCE TILL WE ARE ON CORRECT SECTOR
E9D6                  (       filesys.os):00606         SEEK1
E9D6 10830200         (       filesys.os):00607                 CMPD    #512                              ;ARE WE OVER?
E9DA 251A             (       filesys.os):00608                 BLO     SEEK2                             ;NO, SET OFFSET & EXIT
E9DC 3406             (       filesys.os):00609                 PSHS    A,B                               ;SAVE ID
E9DE EC44             (       filesys.os):00610                 LDD     OSECTOR,U                         ;GET NEXT SECTOR
E9E0 1083FFFF         (       filesys.os):00611                 CMPD    #$FFFF                            ;END OF FILE?
E9E4 1027FEDB         (       filesys.os):00612                 LBEQ    EOF                               ;ERROR
E9E8 ED46             (       filesys.os):00613                 STD     OLSTSEC,U                         ;SET AS OLD
E9EA BDE5DF           (       filesys.os):00614                 JSR     FNDLNK                            ;LOOKUP LINK
E9ED ED44             (       filesys.os):00615                 STD     OSECTOR,U                         ;SAVE PTR TO NEXT
E9EF 3506             (       filesys.os):00616                 PULS    A,B                               ;RESTORE IT
E9F1 830200           (       filesys.os):00617                 SUBD    #512                              ;INDICATE WE ADVANCED
E9F4 20E0             (       filesys.os):00618                 BRA     SEEK1                             ;CONTINUE
                      (       filesys.os):00619         ;* SKIPPED SECTORS, IF NON-ZERO OFFSET, READ IN DATA
E9F6                  (       filesys.os):00620         SEEK2
E9F6 ED48             (       filesys.os):00621                 STD     OOFFSET,U                         ;SET OFFSET
E9F8 270F             (       filesys.os):00622                 BEQ     SEEK3                             ;ZERO, DON'T READ DATA
E9FA EC44             (       filesys.os):00623                 LDD     OSECTOR,U                         ;GET SECTOR
E9FC 1083FFFF         (       filesys.os):00624                 CMPD    #$FFFF                            ;EOF?
EA00 1027FEBF         (       filesys.os):00625                 LBEQ    EOF                               ;YES, ERROR
EA04 304A             (       filesys.os):00626                 LEAX    OSIZ,U                            ;ADVANCE TO DATA
EA06 BDEAE4           (       filesys.os):00627                 JSR     RDISK                             ;READ A BLOCK
EA09                  (       filesys.os):00628         SEEK3
EA09 B604E2           (       filesys.os):00629                 LDA     >SAVDRV                           ;GET DRIVE
EA0C B704F3           (       filesys.os):00630                 STA     >SDRIVE                           ;SET IT
EA0F 4F               (       filesys.os):00631                 CLRA    ZERO RC
EA10 3596             (       filesys.os):00632                 PULS    A,B,X,PC                          ;BACK TO END
                      (       filesys.os):00633         ;*
                      (       filesys.os):00634         ;* REPORT POSITION IN FILE
                      (       filesys.os):00635         ;*
EA12                  (       filesys.os):00636         FTELL
EA12 3430             (       filesys.os):00637                 PSHS    X,Y                               ;SAVE REGS
EA14 A641             (       filesys.os):00638                 LDA     ODRIVE,U                          ;GET DRIVE
EA16 B704F3           (       filesys.os):00639                 STA     >SDRIVE                           ;SELECT IT
EA19 108E0000         (       filesys.os):00640                 LDY     #0                                ;START AT POSITION ZERO
EA1D EC42             (       filesys.os):00641                 LDD     OFIRST,U                          ;GET ID OF FIRST
EA1F                  (       filesys.os):00642         FTEL1
EA1F 10A344           (       filesys.os):00643                 CMPD    OSECTOR,U                         ;ARE WE THERE?
EA22 2709             (       filesys.os):00644                 BEQ     FTEL2                             ;YES
EA24 31A90200         (       filesys.os):00645                 LEAY    512,Y                             ;ADVANCE 1 SECTOR SIZE
EA28 BDE5DF           (       filesys.os):00646                 JSR     FNDLNK                            ;LOCATE LINK
EA2B 26F2             (       filesys.os):00647                 BNE     FTEL1                             ;TRY THIS ONE
EA2D                  (       filesys.os):00648         FTEL2
EA2D EC48             (       filesys.os):00649                 LDD     OOFFSET,U                         ;GET OFFSET
EA2F 3420             (       filesys.os):00650                 PSHS    Y                                 ;SAVE 'Y'
EA31 E3E1             (       filesys.os):00651                 ADDD    ,S++                              ;INCLUDE IN RESULT
EA33 3402             (       filesys.os):00652                 PSHS    A
EA35 B604E2           (       filesys.os):00653                 LDA     >SAVDRV                           ;GET DRIVE
EA38 B704F3           (       filesys.os):00654                 STA     >SDRIVE
EA3B 4F               (       filesys.os):00655                 CLRA    'Z' RC
EA3C 35B2             (       filesys.os):00656                 PULS    A,X,Y,PC
                      (       filesys.os):00657         ;*
                      (       filesys.os):00658         ;* SUSPEND FILE OPERATION
                      (       filesys.os):00659         ;*
EA3E                  (       filesys.os):00660         SUSPEND
EA3E 3506             (       filesys.os):00661                 PULS    A,B                               ;GET PC FROM STACK
EA40 FD04DB           (       filesys.os):00662                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EA43 EC46             (       filesys.os):00663                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
EA45 AE48             (       filesys.os):00664                 LDX     OOFFSET,U                         ;GET OFFSET
EA47 10AE42           (       filesys.os):00665                 LDY     OFIRST,U                          ;GET FIRST SECT
EA4A 3436             (       filesys.os):00666                 PSHS    A,B,X,Y                           ;SAVE IT
EA4C ECC4             (       filesys.os):00667                 LDD     OTYPE,U                           ;GET TYPE&DRIVE
EA4E 3406             (       filesys.os):00668                 PSHS    A,B                               ;SAVE IT
EA50 8102             (       filesys.os):00669                 CMPA    #2                                ;WUZ IT WRITE?
EA52 262D             (       filesys.os):00670                 BNE     SUSP2                             ;DON'T SAVE
EA54 8C0000           (       filesys.os):00671                 CMPX    #0                                ;ZERO OFFSET
                      (       filesys.os):00672         
EA57 2728             (       filesys.os):00673                 BEQ     SUSP2                             ;DON'T SAVE
                      (       filesys.os):00674         ;* CHARACTER WRITE, WITH NON-ZERO OFFSET
EA59 A641             (       filesys.os):00675                 LDA     ODRIVE,U                          ;GET DRIVE
EA5B B704F3           (       filesys.os):00676                 STA     >SDRIVE                           ;SELECT IT
EA5E EC44             (       filesys.os):00677                 LDD     OSECTOR,U                         ;GET SECTOR
EA60 1083FFFF         (       filesys.os):00678                 CMPD    #$FFFF                            ;OK TO WRITE?
EA64 2610             (       filesys.os):00679                 BNE     SUSP1                             ;ITS OK
EA66 BDE7AF           (       filesys.os):00680                 JSR     FRESEC                            ;GRAB A SECTOR
EA69 3406             (       filesys.os):00681                 PSHS    A,B                               ;SAVE ID
EA6B EC46             (       filesys.os):00682                 LDD     OLSTSEC,U                         ;GET LAST
EA6D BDE5DF           (       filesys.os):00683                 JSR     FNDLNK                            ;GET ITS LINK
EA70 3506             (       filesys.os):00684                 PULS    A,B                               ;RESTORE ID OF FREE
EA72 ED84             (       filesys.os):00685                 STD     ,X                                ;SET IT
EA74 ED44             (       filesys.os):00686                 STD     OSECTOR,U                         ;SET UP NEW SECTOR
EA76                  (       filesys.os):00687         SUSP1
EA76 304A             (       filesys.os):00688                 LEAX    OSIZ,U                            ;SET UP PTR
EA78 BDEB17           (       filesys.os):00689                 JSR     WDISK                             ;OUTPUT SECTOR TO DISK
EA7B B604E2           (       filesys.os):00690                 LDA     >SAVDRV                           ;GET DRIVE
EA7E B704F3           (       filesys.os):00691                 STA     >SDRIVE                           ;RESET IT
EA81                  (       filesys.os):00692         SUSP2
EA81 BE04DE           (       filesys.os):00693                 LDX     >SAVX                             ;RESTORE X
EA84 10BE04E0         (       filesys.os):00694                 LDY     >SAVY                             ;RESTORE Y
EA88 F604DD           (       filesys.os):00695                 LDB     >SAVB                             ;RESTORE B
EA8B 4F               (       filesys.os):00696                 CLRA    ZERO RC
EA8C 6E9F04DB         (       filesys.os):00697                 JMP     [TEMP4]                           ;GOT FOR TI
                      (       filesys.os):00698         ;*
                      (       filesys.os):00699         ;* RESUME FILE OPERATION
                      (       filesys.os):00700         ;*
EA90                  (       filesys.os):00701         RESUME
EA90 3506             (       filesys.os):00702                 PULS    A,B                               ;GET PC
EA92 FD04DB           (       filesys.os):00703                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EA95 3506             (       filesys.os):00704                 PULS    A,B                               ;RESTORE REGS
EA97 EDC4             (       filesys.os):00705                 STD     OTYPE,U                           ;RESTORE TYPE
EA99 F704F3           (       filesys.os):00706                 STB     >SDRIVE                           ;SELECT DRIVE
EA9C 3536             (       filesys.os):00707                 PULS    A,B,X,Y                           ;RESTORE REST
EA9E AF48             (       filesys.os):00708                 STX     OOFFSET,U                         ;SET OFFSET
EAA0 10AF42           (       filesys.os):00709                 STY     OFIRST,U                          ;SET FIRST
                      (       filesys.os):00710         ;* IF OLSTSEC IS ZERO, NO READ/WRITE TO DISK YET, OSECTOR IS FIRST IN FILE
EAA3 ED46             (       filesys.os):00711                 STD     OLSTSEC,U                         ;RESET LAST SECTOR
EAA5 2605             (       filesys.os):00712                 BNE     RESU1                             ;ITS OK
EAA7 10AF44           (       filesys.os):00713                 STY     OSECTOR,U                         ;SET CURRENT SECTOR
EAAA 2005             (       filesys.os):00714                 BRA     RESU2                             ;CONTINUE
                      (       filesys.os):00715         ;* ELSE OSECTOR IS NEXT AFTER OLSTSEC
EAAC                  (       filesys.os):00716         RESU1
EAAC BDE5DF           (       filesys.os):00717                 JSR     FNDLNK                            ;GET LINK
EAAF ED44             (       filesys.os):00718                 STD     OSECTOR,U                         ;SET UP NEXT SECTOR
                      (       filesys.os):00719         ;* CHECK FOR ACTUAL SECTOR IN MEMORY
EAB1                  (       filesys.os):00720         RESU2
EAB1 EC48             (       filesys.os):00721                 LDD     OOFFSET,U                         ;CHAR OPERATIONS?
EAB3 2707             (       filesys.os):00722                 BEQ     RESU3                             ;NO, ALL IS OK
                      (       filesys.os):00723         ;* NON-ZERO OFFSET, SECTOR MUST BE READ INTO RAM
EAB5 EC44             (       filesys.os):00724                 LDD     OSECTOR,U                         ;GET SECTOR
EAB7 304A             (       filesys.os):00725                 LEAX    OSIZ,U                            ;ADVANCE TO BUFFER
EAB9 BDEAE4           (       filesys.os):00726                 JSR     RDISK                             ;READ IN SECTOR
EABC                  (       filesys.os):00727         RESU3
EABC B604E2           (       filesys.os):00728                 LDA     >SAVDRV                           ;RESTORE DRIVE
EABF B704F3           (       filesys.os):00729                 STA     >SDRIVE                           ;RESET IT
EAC2 20B2             (       filesys.os):00730                 BRA     SUSP1                             ;RETURN TO CALLER
                      (       filesys.os):00731         ;*
                      (       filesys.os):00732         ;* CALCULATE CYLINDER, SECTOR, AND HEAD FROM ABSOLUTE SECTOR NUMBER
                      (       filesys.os):00733         ;*
EAC4                  (       filesys.os):00734         SECTOR
EAC4 3416             (       filesys.os):00735                 PSHS    A,B,X                             ;SAVE SECTOR ID
EAC6 1F01             (       filesys.os):00736                 TFR     D,X                               ;SECT ID IN 'X'
EAC8 A643             (       filesys.os):00737                 LDA     NSEC,U                            ;GET SECTORS/TRACK
EACA E642             (       filesys.os):00738                 LDB     NHEAD,U                           ;GET # HEADS
EACC 3D               (       filesys.os):00739                 MUL                                       ;CALCULATE SECTORS/CYLINDER
EACD BDF710           (       filesys.os):00740                 JSR     DIV16                             ;X=CYLINDER ID, D=SECTOR IN CYLINDER
EAD0 6F45             (       filesys.os):00741                 CLR     HEAD,U                            ;ASSUME HEAD 0
EAD2                  (       filesys.os):00742         SEC1
EAD2 E143             (       filesys.os):00743                 CMPB    NSEC,U                            ;WHICH HEAD?
EAD4 2506             (       filesys.os):00744                 BLO     SEC2                              ;ASSUMPTION CORRECT
EAD6 E043             (       filesys.os):00745                 SUBB    NSEC,U                            ;CONVERT
EAD8 6C45             (       filesys.os):00746                 INC     HEAD,U                            ;ADVANCE TO NEXT HEAD
EADA 20F6             (       filesys.os):00747                 BRA     SEC1                              ;TRY AGAIN
EADC                  (       filesys.os):00748         SEC2
EADC E746             (       filesys.os):00749                 STB     SEC,U                             ;INDICATE SECTOR
EADE 1F10             (       filesys.os):00750                 TFR     X,D                               ;GET CYLINDER ID
EAE0 E744             (       filesys.os):00751                 STB     CYL,U                             ;SAVE CYLINDER ID
EAE2 3596             (       filesys.os):00752                 PULS    A,B,X,PC
                      (       filesys.os):00753         ;*
                      (       filesys.os):00754         ;* READ SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00755         ;*
EAE4                  (       filesys.os):00756         RDISK
EAE4 3476             (       filesys.os):00757                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EAE6 7F04F4           (       filesys.os):00758                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EAE9 8D20             (       filesys.os):00759                 BSR     GETCTL                            ;SET UP 'U'
EAEB                  (       filesys.os):00760         RTRY1
EAEB ECE4             (       filesys.os):00761                 LDD     ,S                                ;GET SECTOR
EAED 8DD5             (       filesys.os):00762                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EAEF                  (       filesys.os):00763         RTRY2
EAEF AE62             (       filesys.os):00764                 LDX     2,S                               ;RESTORE 'X'
EAF1 BDF741           (       filesys.os):00765                 JSR     RDSEC                             ;ATTEMPT READ
EAF4 2713             (       filesys.os):00766                 BEQ     RDONE                             ;SUCESS, ITS OK
EAF6 7C04F4           (       filesys.os):00767                 INC     >ERRCNT                           ;ADVANCE
EAF9 F604F4           (       filesys.os):00768                 LDB     >ERRCNT                           ;GET VALUE
EAFC C105             (       filesys.os):00769                 CMPB    #5                                ;TOO MANY ERRORS?
EAFE 273C             (       filesys.os):00770                 BEQ     HDE                               ;YES, SKIP IT
EB00 C103             (       filesys.os):00771                 CMPB    #3                                ;TIME FOR RE-SEEK?
EB02 26EB             (       filesys.os):00772                 BNE     RTRY2                             ;NO, DON'T RE-SEEK
EB04 BDF737           (       filesys.os):00773                 JSR     HOME                              ;RECALIBRATE
EB07 20E2             (       filesys.os):00774                 BRA     RTRY1                             ;AND RESEEK
EB09                  (       filesys.os):00775         RDONE
EB09 35F6             (       filesys.os):00776                 PULS    A,B,X,Y,U,PC
                      (       filesys.os):00777         ;*
                      (       filesys.os):00778         ;* GET DRIVE(A) CONTROL BLOCK IN 'D' & 'U'
                      (       filesys.os):00779         ;*
EB0B                  (       filesys.os):00780         GETCTL
EB0B B604F3           (       filesys.os):00781                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
EB0E                  (       filesys.os):00782         GETCTL1
EB0E C607             (       filesys.os):00783                 LDB     #CSIZE                            ;SIZE OF EACH BLOCK
EB10 3D               (       filesys.os):00784                 MUL                                       ;CALCULATE OFFSET
EB11 C30450           (       filesys.os):00785                 ADDD    #DCTRL                            ;OFFSET TO DATA AREA
EB14 1F03             (       filesys.os):00786                 TFR     D,U                               ;SET UP U
EB16 39               (       filesys.os):00787                 RTS
                      (       filesys.os):00788         ;*
                      (       filesys.os):00789         ;* WRITE SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00790         ;*
EB17                  (       filesys.os):00791         WDISK
EB17 3476             (       filesys.os):00792                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EB19 7F04F4           (       filesys.os):00793                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EB1C 8DED             (       filesys.os):00794                 BSR     GETCTL                            ;SET UP 'U'
EB1E                  (       filesys.os):00795         WTRY1
EB1E ECE4             (       filesys.os):00796                 LDD     ,S                                ;GET SECTOR
EB20 8DA2             (       filesys.os):00797                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EB22                  (       filesys.os):00798         WTRY2
EB22 AE62             (       filesys.os):00799                 LDX     2,S                               ;RESTORE 'X'
EB24 BDF745           (       filesys.os):00800                 JSR     WRSEC                             ;ATTEMPT WRITE
EB27 27E0             (       filesys.os):00801                 BEQ     RDONE                             ;SUCCESS, ITS OK
EB29 7C04F4           (       filesys.os):00802                 INC     >ERRCNT                           ;ADVANCE
EB2C F604F4           (       filesys.os):00803                 LDB     >ERRCNT                           ;GET VALUE
EB2F C105             (       filesys.os):00804                 CMPB    #5                                ;TOO MANY ERRORS?
EB31 2709             (       filesys.os):00805                 BEQ     HDE                               ;YES, SKIP IT
EB33 C103             (       filesys.os):00806                 CMPB    #3                                ;TIME FOR RE-SEEK
EB35 26EB             (       filesys.os):00807                 BNE     WTRY2                             ;NO, DON'T RE-SEEK
EB37 BDF737           (       filesys.os):00808                 JSR     HOME                              ;RECALIBRATE
EB3A 20E2             (       filesys.os):00809                 BRA     WTRY1                             ;AND RESEEK
                      (       filesys.os):00810         ;* REPORT DISK ERROR
EB3C                  (       filesys.os):00811         HDE
EB3C B704D3           (       filesys.os):00812                 STA     >TEMP                             ;SAVE ERROR CODE
EB3F 3576             (       filesys.os):00813                 PULS    A,B,X,Y,U                         ;RESTORE REGS CUZ 'U' NOT SAVED
EB41 10B304E7         (       filesys.os):00814                 CMPD    >WRKSEC                           ;WAS IT WORK SECTOR?
EB45 2612             (       filesys.os):00815                 BNE     HDE1                              ;NO, ITS NOT
EB47 3402             (       filesys.os):00816                 PSHS    A                                 ;SAVE A
EB49 B604F3           (       filesys.os):00817                 LDA     >SDRIVE                           ;GET CURRENT DRIVE
EB4C B104E6           (       filesys.os):00818                 CMPA    >WRKDRV                           ;ON WORK DRIVE?
EB4F 3502             (       filesys.os):00819                 PULS    A                                 ;RESTORE A
EB51 2606             (       filesys.os):00820                 BNE     HDE1                              ;NOT WORK DRIVE
EB53 BDE625           (       filesys.os):00821                 JSR     PURGE1                            ;INSURE NO WORK SECTOR IN CORE
EB56 7F04E5           (       filesys.os):00822                 CLR     >WRKCHG                           ;INSURE NO UPDATE RECORDED
EB59                  (       filesys.os):00823         HDE1
EB59 BDE54E           (       filesys.os):00824                 JSR     WRLIN                             ;OUTPUT STRING
EB5C 4572726F72206163 (       filesys.os):00825                 FCC     'Error accessing block '
     63657373696E6720
     626C6F636B20
EB72 00               (       filesys.os):00826                 FCB     $00
EB73 BDE47E           (       filesys.os):00827                 JSR     WRDEC                             ;DISPLAY BLOCK
EB76 BDE54E           (       filesys.os):00828                 JSR     WRLIN                             ;OUTPUT STRING
EB79 206F6E2064726976 (       filesys.os):00829                 FCC     ' on drive: '
     653A20
EB84 00               (       filesys.os):00830                 FCB     $00
EB85 B604F3           (       filesys.os):00831                 LDA     >SDRIVE                           ;GET DRIVE ID
EB88 8B41             (       filesys.os):00832                 ADDA    #'A'                              ;OFFSET
EB8A BDE59A           (       filesys.os):00833                 JSR     PUTCHR
EB8D BDE588           (       filesys.os):00834                 JSR     LFCR                              ;NEW LINE
EB90 8EEBAD           (       filesys.os):00835                 LDX     #DETAB                            ;PT TO TABLE
EB93                  (       filesys.os):00836         HDE2
EB93 7A04D3           (       filesys.os):00837                 DEC     >TEMP                             ;REDUCE ERROR COUNT
EB96 270A             (       filesys.os):00838                 BEQ     HDE4                              ;THIS IS IT
EB98                  (       filesys.os):00839         HDE3
EB98 A680             (       filesys.os):00840                 LDA     ,X+                               ;GET CHAR
EB9A 26FC             (       filesys.os):00841                 BNE     HDE3                              ;KEEP LOOKING
EB9C A684             (       filesys.os):00842                 LDA     ,X                                ;MORE?
EB9E 26F3             (       filesys.os):00843                 BNE     HDE2                              ;NO, ERROR
EBA0 3001             (       filesys.os):00844                 LEAX    1,X                               ;SKIP MARKER
EBA2                  (       filesys.os):00845         HDE4
EBA2 BDE574           (       filesys.os):00846                 JSR     WRSTR                             ;OUTPUT STRING
EBA5 BDE588           (       filesys.os):00847                 JSR     LFCR                              ;NEW LINE
EBA8 8609             (       filesys.os):00848                 LDA     #RCDSK                            ;INDICATE DISK ERROR
EBAA 7EE2F8           (       filesys.os):00849                 JMP     ERRRET                            ;RETURN
                      (       filesys.os):00850         ;* DISK ERROR MESSAGES
EBAD                  (       filesys.os):00851         DETAB
EBAD 4469736B20666F72 (       filesys.os):00852                 FCC     'Disk format error'
     6D6174206572726F
     72
EBBE 00               (       filesys.os):00853                 FCB     $00
EBBF 4261642073656374 (       filesys.os):00854                 FCC     'Bad sector'
     6F72
EBC9 00               (       filesys.os):00855                 FCB     $00
EBCA 536563746F72206E (       filesys.os):00856                 FCC     'Sector not found'
     6F7420666F756E64
EBDA 00               (       filesys.os):00857                 FCB     $00
EBDB 4469736B20777269 (       filesys.os):00858                 FCC     'Disk write protected'
     74652070726F7465
     63746564
EBEF 00               (       filesys.os):00859                 FCB     $00
EBF0 00               (       filesys.os):00860                 FCB     0                                 ;END OF TABLE
EBF1 4469736B20737973 (       filesys.os):00861                 FCC     'Disk system error'
     74656D206572726F
     72
EC02 00               (       filesys.os):00862                 FCB     $00
                      (        cubix.asm):01199                 INCLUDE command.os                        ;INTERNAL COMMANDS
                      (       command.os):00001         ;*
                      (       command.os):00002         ;* CUBIX Internal (built in) command handlers
                      (       command.os):00003         ;*
                      (       command.os):00004         ;* FORMAT COMMAND
                      (       command.os):00005         ;*
EC03                  (       command.os):00006         INIT
EC03 BDE623           (       command.os):00007                 JSR     PURGE                             ;INSURE NO DISK I/O IN PROG
EC06 BDE3FF           (       command.os):00008                 JSR     GETDRV                            ;GET DRIVE ID
EC09 B704F3           (       command.os):00009                 STA     >SDRIVE                           ;SELECT IT
EC0C BDEB0B           (       command.os):00010                 JSR     GETCTL                            ;PT 'U' TO CTRL BLOCK
EC0F CC0203           (       command.os):00011                 LDD     #$0203                            ;DEFAULT INTERLEAVE & ALLOCATION
EC12 FD04DB           (       command.os):00012                 STD     >TEMP4                            ;SAVE IT
                      (       command.os):00013         ;* GET FORMAT OPERANDS
EC15                  (       command.os):00014         INI00
EC15 BDE4DC           (       command.os):00015                 JSR     SKIP                              ;ANY MORE OPERANDS?
EC18 2728             (       command.os):00016                 BEQ     INI1                              ;NO, THTS ALL
EC1A 8EF45A           (       command.os):00017                 LDX     #INITAB                           ;POINT TO TABLE
EC1D BDF115           (       command.os):00018                 JSR     TLOOKE                            ;GET DATA
EC20 3404             (       command.os):00019                 PSHS    B                                 ;SAVE ID
EC22 BDE411           (       command.os):00020                 JSR     GETNUM                            ;GET VALUE
EC25 3502             (       command.os):00021                 PULS    A                                 ;RESTORE A
EC27 4D               (       command.os):00022                 TSTA                                      ;INTERLEAVE?
EC28 2605             (       command.os):00023                 BNE     INI01                             ;NO
EC2A F704DB           (       command.os):00024                 STB     >TEMP4                            ;SAVE INTERLEAVE
EC2D 20E6             (       command.os):00025                 BRA     INI00                             ;TRY FOR NEXT
EC2F                  (       command.os):00026         INI01
EC2F 4A               (       command.os):00027                 DECA    DIRECTORY?
EC30 2605             (       command.os):00028                 BNE     INI02                             ;NO, USE STANDARD OPTIONS
EC32 F704DC           (       command.os):00029                 STB     >TEMP4+1                          ;SET DIRECTORY ALLOCATION
EC35 20DE             (       command.os):00030                 BRA     INI00                             ;TRY FOR NEXT
EC37                  (       command.os):00031         INI02
EC37 4A               (       command.os):00032                 DECA    CONVERT
EC38 8103             (       command.os):00033                 CMPA    #3                                ;IN RANGE?
EC3A 1022F67A         (       command.os):00034                 LBHI    BADOPR                            ;NO, REPORT ERROR
EC3E E7C6             (       command.os):00035                 STB     A,U                               ;SET UP DRIVE
EC40 20D3             (       command.os):00036                 BRA     INI00                             ;TRY FOR NEXT
                      (       command.os):00037         ;* DISPLAY FORMAT
EC42                  (       command.os):00038         INI1
EC42 BDE54E           (       command.os):00039                 JSR     WRLIN
EC45 466F726D61747469 (       command.os):00040                 FCC     'Formatting '
     6E6720
EC50 00               (       command.os):00041                 FCB     $00
EC51 B604F3           (       command.os):00042                 LDA     >SDRIVE
EC54 BDF262           (       command.os):00043                 JSR     SHODRV                            ;SHOW THE DISK
EC57 8EF45A           (       command.os):00044                 LDX     #INITAB                           ;POINT TO TABLE
EC5A 4F               (       command.os):00045                 CLRA                                      ;DISPLAY INTERLEAVE
EC5B F604DB           (       command.os):00046                 LDB     >TEMP4                            ;GET INTERLEAVE FACTOR
EC5E BDF2A1           (       command.os):00047                 JSR     SHODRB                            ;DISPLAY IT
EC61 8601             (       command.os):00048                 LDA     #1                                ;DISPLAY DIRECTORY EXTENSION
EC63 F604DC           (       command.os):00049                 LDB     >TEMP4+1                          ;GET DIRECTORY EXTENSION
EC66 BDF29B           (       command.os):00050                 JSR     SHODRA                            ;DISPLAY IT
EC69 BDE54E           (       command.os):00051                 JSR     WRLIN                             ;MESSAGE
EC6C 0A0D             (       command.os):00052                 FCB     $0A,$0D                           ;NEW LINE
EC6E 4F6B3F20         (       command.os):00053                 FCC     'Ok? '
EC72 00               (       command.os):00054                 FCB     $00
EC73 BDE5DA           (       command.os):00055                 JSR     GETCHR
EC76 BDE59A           (       command.os):00056                 JSR     PUTCHR                            ;ECHO
EC79 84DF             (       command.os):00057                 ANDA    #$DF                              ;GET IT
EC7B 8159             (       command.os):00058                 CMPA    #'Y'
EC7D 1026F907         (       command.os):00059                 LBNE    LFCR
EC81 BDE588           (       command.os):00060                 JSR     LFCR                              ;NEW LINE
                      (       command.os):00061         ;* FORMAT PHYSICAL DISK
EC84 B604DB           (       command.os):00062                 LDA     >TEMP4                            ;GET INTERLEAVE FACTOR
EC87 BDF733           (       command.os):00063                 JSR     FORMAT                            ;FORMAT THE DISK
EC8A B604DC           (       command.os):00064                 LDA     >TEMP4+1                          ;GET DIRECTORY ALLOC
EC8D B704DB           (       command.os):00065                 STA     >TEMP4                            ;LOCAL COPY OF DIR ALLOC
                      (       command.os):00066         ;* SET UP DIRECTORY & LINK TABLE ON DISK
EC90 8E0600           (       command.os):00067                 LDX     #WRKSPC                           ;POINT TO IT
EC93                  (       command.os):00068         INI2
EC93 6F80             (       command.os):00069                 CLR     ,X+                               ;CLEAR ONE
EC95 8C0800           (       command.os):00070                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
EC98 25F9             (       command.os):00071                 BLO     INI2                              ;NO, KEEP CLEARING
                      (       command.os):00072         ;* WRITE BASE DIRECTORY SECTOR
EC9A 8E0600           (       command.os):00073                 LDX     #WRKSPC                           ;PT BACK TO IT
EC9D CC0000           (       command.os):00074                 LDD     #DIRSEC                           ;DIRECTORY SECTOR
ECA0 BDEB17           (       command.os):00075                 JSR     WDISK                             ;WRITE DIRECTORY (NO FILES)
                      (       command.os):00076         ;* WRITE NON-BASE LINK SECTORS
ECA3 BDE712           (       command.os):00077                 JSR     CURSIZ                            ;GET SIZE OF CURRENT DRIVE
ECA6 830001           (       command.os):00078                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
ECA9 1F89             (       command.os):00079                 TFR     A,B                               ;COPY A&B = D/256(ENTRIES/LINKSEC)
ECAB FD04D9           (       command.os):00080                 STD     >TEMP3                            ;SAVE FOR LATER
ECAE CC0002           (       command.os):00081                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
ECB1 7C04DA           (       command.os):00082                 INC     >TEMP3+1                          ;bump COUNT
ECB4 7C04DB           (       command.os):00083                 INC     >TEMP4                            ;bump COUNT
ECB7                  (       command.os):00084         INI3
ECB7 7A04DA           (       command.os):00085                 DEC     >TEMP3+1                          ;REDUCE COUNT
ECBA 2708             (       command.os):00086                 BEQ     INI4                              ;END
ECBC BDEB17           (       command.os):00087                 JSR     WDISK                             ;WRITE IT
ECBF C30001           (       command.os):00088                 ADDD    #1                                ;NEXT SECTOR
ECC2 20F3             (       command.os):00089                 BRA     INI3                              ;KEEP GOING
                      (       command.os):00090         ;* WRITE NON-BASE DIRECTORY SECTORS
ECC4                  (       command.os):00091         INI4
ECC4 7A04DB           (       command.os):00092                 DEC     >TEMP4                            ;BACKUP
ECC7 2708             (       command.os):00093                 BEQ     INI5                              ;THATS ALL
ECC9 BDEB17           (       command.os):00094                 JSR     WDISK                             ;WRITE IT
ECCC C30001           (       command.os):00095                 ADDD    #1                                ;NEXT ONE
ECCF 20F3             (       command.os):00096                 BRA     INI4                              ;DO EM ALL
                      (       command.os):00097         ;* WRITE BASE LINK SECTOR
ECD1                  (       command.os):00098         INI5
ECD1 CCFFFF           (       command.os):00099                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECD4 ED84             (       command.os):00100                 STD     DIRSEC*2,X                        ;SET DIRECTORY FREE
ECD6 3002             (       command.os):00101                 LEAX    LNKSEC*2,X                        ;OFFSET TO IT
ECD8 108E01FE         (       command.os):00102                 LDY     #$0200-LNKSEC*2
ECDC CC0002           (       command.os):00103                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
ECDF 7C04D9           (       command.os):00104                 INC     >TEMP3                            ;INC COUNT to adjust loop
ECE2                  (       command.os):00105         INI6
ECE2 7A04D9           (       command.os):00106                 DEC     >TEMP3                            ;REDUCE COUNT
ECE5 270B             (       command.os):00107                 BEQ     INI7                              ;END
ECE7 ED81             (       command.os):00108                 STD     ,X++                              ;WRITE IT OUT
ECE9 313F             (       command.os):00109                 DEY
ECEB 313F             (       command.os):00110                 DEY
ECED C30001           (       command.os):00111                 ADDD    #1                                ;ADVANCE
ECF0 20F0             (       command.os):00112                 BRA     INI6                              ;DO EM ALL
ECF2                  (       command.os):00113         INI7
ECF2 3406             (       command.os):00114                 PSHS    A,B                               ;SAVE SECTOR ID
ECF4 7D04DC           (       command.os):00115                 TST     >TEMP4+1                          ;ANY ADDITIONAL DIR?
ECF7 2703             (       command.os):00116                 BEQ     INI8                              ;NO
ECF9 FD0600           (       command.os):00117                 STD     >2*DIRSEC+WRKSPC                  ;SET IT
ECFC                  (       command.os):00118         INI8
ECFC CCFFFF           (       command.os):00119                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECFF ED81             (       command.os):00120                 STD     ,X++                              ;CLOSE OFF LINKS
ED01 313F             (       command.os):00121                 DEY
ED03 313F             (       command.os):00122                 DEY
ED05 CC0001           (       command.os):00123                 LDD     #LNKSEC
ED08 FD04D9           (       command.os):00124                 STD     >TEMP3
ED0B 3506             (       command.os):00125                 PULS    A,B                               ;RESTORE SECTOR ID
ED0D 7C04DC           (       command.os):00126                 INC     >TEMP4+1                          ;BUMP COUNT
ED10                  (       command.os):00127         INI9
                      (       command.os):00128         ; if we have crossed the sector boundry, it is important to write the sector, reset x, and continue . . .
ED10 108C0000         (       command.os):00129                 CMPY    #0
ED14 2602             (       command.os):00130                 BNE     INI9A
ED16 8D1E             (       command.os):00131                 BSR     INI11
ED18                  (       command.os):00132         INI9A:
ED18 7A04DC           (       command.os):00133                 DEC     >TEMP4+1                          ;REDUCE COUNT
ED1B 270B             (       command.os):00134                 BEQ     INI10                             ;EXIT
ED1D C30001           (       command.os):00135                 ADDD    #1                                ;NEXT SECTOR
ED20 ED81             (       command.os):00136                 STD     ,X++                              ;SET LINK FOR DIRECTORY
ED22 313F             (       command.os):00137                 DEY
ED24 313F             (       command.os):00138                 DEY
ED26 20E8             (       command.os):00139                 BRA     INI9                              ;DO EM ALL
ED28                  (       command.os):00140         INI10
ED28 CCFFFF           (       command.os):00141                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ED2B ED1E             (       command.os):00142                 STD     -2,X                              ;CLOSE OFF DIRECTORY
ED2D 8E0600           (       command.os):00143                 LDX     #WRKSPC                           ;RESET
ED30 FC04D9           (       command.os):00144                 LDD     >TEMP3                            ;PT TO IT
ED33 7EEB17           (       command.os):00145                 JMP     WDISK                             ;WRITE TO DISK
ED36                  (       command.os):00146         INI11:
ED36 3406             (       command.os):00147                 PSHS    d
ED38 8E0600           (       command.os):00148                 LDX     #WRKSPC
ED3B FC04D9           (       command.os):00149                 LDD     >TEMP3                            ;PT TO IT
ED3E BDEB17           (       command.os):00150                 JSR     WDISK                             ;WRITE TO DISK
                      (       command.os):00151         ;
ED41 108E0200         (       command.os):00152                 LDY     #$0200
                      (       command.os):00153         !
ED45 4F               (       command.os):00154                 CLRA
ED46 A780             (       command.os):00155                 STA     ,x+
ED48 313F             (       command.os):00156                 DEY
ED4A 26F9             (       command.os):00157                 BNE     <
                      (       command.os):00158         ;
ED4C 7C04DA           (       command.os):00159                 INC     >TEMP3+1
ED4F 8E0600           (       command.os):00160                 LDX     #WRKSPC
ED52 108E0200         (       command.os):00161                 LDY     #$0200
ED56 3506             (       command.os):00162                 PULS    D
ED58 39               (       command.os):00163                 RTS
                      (       command.os):00164         ;*
                      (       command.os):00165         ;* READ DISK COMMAND
                      (       command.os):00166         ;*
ED59                  (       command.os):00167         CREAD
ED59 BDE3FF           (       command.os):00168                 JSR     GETDRV
ED5C B704F3           (       command.os):00169                 STA     >SDRIVE
ED5F BDE411           (       command.os):00170                 JSR     GETNUM                            ;GET SECTOR ID
ED62 3410             (       command.os):00171                 PSHS    X                                 ;SAVE
ED64 BDE41C           (       command.os):00172                 JSR     GETHEX                            ;GET MEMORY ADDRESS
ED67 3410             (       command.os):00173                 PSHS    X                                 ;SAVE
ED69 8E0001           (       command.os):00174                 LDX     #1                                ;DEFAULT TO ONE
ED6C BDE4DC           (       command.os):00175                 JSR     SKIP                              ;ADVANCE
ED6F 2703             (       command.os):00176                 BEQ     CRD1                              ;NO MORE
ED71 BDE411           (       command.os):00177                 JSR     GETNUM                            ;GET # SECTORS
ED74                  (       command.os):00178         CRD1
ED74 1F12             (       command.os):00179                 TFR     X,Y                               ;SET UP COUNTER
ED76 3510             (       command.os):00180                 PULS    X                                 ;RESTORE MEM ADDR
ED78 3506             (       command.os):00181                 PULS    A,B                               ;RESTORE SECTOR ID
ED7A                  (       command.os):00182         CRD2
ED7A BDEAE4           (       command.os):00183                 JSR     RDISK                             ;READ IT
ED7D 30890200         (       command.os):00184                 LEAX    512,X                             ;NEXT LOCATION
ED81 C30001           (       command.os):00185                 ADDD    #1                                ;NEXT SECTOR
ED84 313F             (       command.os):00186                 LEAY    -1,Y                              ;REDUCE COUNT
ED86 26F2             (       command.os):00187                 BNE     CRD2
ED88 39               (       command.os):00188                 RTS
                      (       command.os):00189         ;*
                      (       command.os):00190         ;* WRITE DISK COMMAND
                      (       command.os):00191         ;*
ED89                  (       command.os):00192         CWRITE
ED89 BDE3FF           (       command.os):00193                 JSR     GETDRV
ED8C B704F3           (       command.os):00194                 STA     >SDRIVE
ED8F BDE411           (       command.os):00195                 JSR     GETNUM                            ;GET SECTOR ID
ED92 3410             (       command.os):00196                 PSHS    X                                 ;SAVE
ED94 BDE41C           (       command.os):00197                 JSR     GETHEX                            ;GET MEMORY ADDRESS
ED97 3410             (       command.os):00198                 PSHS    X                                 ;SAVE
ED99 8E0001           (       command.os):00199                 LDX     #1                                ;DEFAULT TO ONE
ED9C BDE4DC           (       command.os):00200                 JSR     SKIP                              ;ADVANCE
ED9F 2703             (       command.os):00201                 BEQ     CWR1                              ;NO MORE
EDA1 BDE411           (       command.os):00202                 JSR     GETNUM                            ;GET # SECTORS
EDA4                  (       command.os):00203         CWR1
EDA4 1F12             (       command.os):00204                 TFR     X,Y                               ;SET UP COUNTER
EDA6 3510             (       command.os):00205                 PULS    X                                 ;RESTORE MEM ADDR
EDA8 3506             (       command.os):00206                 PULS    A,B                               ;RESTORE SECTOR ID
EDAA                  (       command.os):00207         CWR2
EDAA BDEB17           (       command.os):00208                 JSR     WDISK                             ;WRITE IT
EDAD 30890200         (       command.os):00209                 LEAX    512,X                             ;NEXT LOCATION
EDB1 C30001           (       command.os):00210                 ADDD    #1                                ;NEXT SECTOR
EDB4 313F             (       command.os):00211                 LEAY    -1,Y                              ;REDUCE COUNT
EDB6 26F2             (       command.os):00212                 BNE     CWR2
EDB8 39               (       command.os):00213                 RTS
                      (       command.os):00214         ;*
                      (       command.os):00215         ;* 'FILES' COMMAND, DISPLAY DISK DIRECTORY
                      (       command.os):00216         ;*
EDB9                  (       command.os):00217         FILES
EDB9 8E04C0           (       command.os):00218                 LDX     #PREFIX                           ;POINT TO FILENAME
EDBC C613             (       command.os):00219                 LDB     #19                               ;CLEAR 19 CHARS
EDBE                  (       command.os):00220         FIL1
EDBE 6F80             (       command.os):00221                 CLR     ,X+
EDC0 5A               (       command.os):00222                 DECB
EDC1 26FB             (       command.os):00223                 BNE     FIL1
EDC3 862A             (       command.os):00224                 LDA     #'*'                              ;WILDCARD
EDC5 B704C8           (       command.os):00225                 STA     >PREFIX+8
EDC8 B704D0           (       command.os):00226                 STA     >PREFIX+16
EDCB 3420             (       command.os):00227                 PSHS    Y                                 ;SAVE CMD PTR
EDCD BDE3B0           (       command.os):00228                 JSR     GETDIR                            ;GET DIRECTORY NAME
EDD0 BDE4E9           (       command.os):00229                 JSR     TSTERM                            ;ANY MORE?
EDD3 3520             (       command.os):00230                 PULS    Y                                 ;RESTORE Y
EDD5 2703             (       command.os):00231                 BEQ     FIL2                              ;NO, DISPAY
EDD7 BDE377           (       command.os):00232                 JSR     GETNAM                            ;GET FULL FILE PATTERN
EDDA                  (       command.os):00233         FIL2
EDDA 7EE6B6           (       command.os):00234                 JMP     DISDIR                            ;OUTPUT IT
                      (       command.os):00235         ;*
                      (       command.os):00236         ;* 'CREATE' COMMAND, CREATE A FILE
                      (       command.os):00237         ;*
EDDD                  (       command.os):00238         CREFIL
EDDD FCE002           (       command.os):00239                 LDD     >MBASE                            ;DEFAULT LOAD ADDRESS
EDE0 FD04DB           (       command.os):00240                 STD     >TEMP4                            ;SAVE IT
EDE3 BDE370           (       command.os):00241                 JSR     GETVAL                            ;GET FILENAME
EDE6 BDE4DC           (       command.os):00242                 JSR     SKIP                              ;MORE OPERANDS?
EDE9 2706             (       command.os):00243                 BEQ     CREF1                             ;NO, SKIP IT
EDEB BDE41C           (       command.os):00244                 JSR     GETHEX                            ;GET VALUE
EDEE BF04DB           (       command.os):00245                 STX     >TEMP4                            ;SAVE IT
EDF1                  (       command.os):00246         CREF1
EDF1 7EE729           (       command.os):00247                 JMP     CREATE                            ;MAKE THE FILE
                      (       command.os):00248         ;*
                      (       command.os):00249         ;* 'DELETE' COMMAND
                      (       command.os):00250         ;*
EDF4                  (       command.os):00251         DELFIL
EDF4 BDE377           (       command.os):00252                 JSR     GETNAM                            ;GET FILENAME
EDF7                  (       command.os):00253         DELETE
EDF7 BDE659           (       command.os):00254                 JSR     LOCERR                            ;LOOK IT UP
EDFA BDE35C           (       command.os):00255                 JSR     VALID                             ;VALID AS A SINGLE?
EDFD 262C             (       command.os):00256                 BNE     MULDEL                            ;NO.
EDFF A68817           (       command.os):00257                 LDA     DATTR,X                           ;GET ATTRIBUTES
EE02 8510             (       command.os):00258                 BITA    #DPERM                            ;CAN WE DELETE
EE04 1027FAAA         (       command.os):00259                 LBEQ    PROERR                            ;NO, REPORT ERROR
EE08 6F84             (       command.os):00260                 CLR     ,X                                ;INDICATE THIS ENTRY FREE
EE0A BDE7A6           (       command.os):00261                 JSR     CHGWRK                            ;MARK IT AS CHANGED
EE0D EC8813           (       command.os):00262                 LDD     DDADR,X                           ;GET DISK ADDRESS
                      (       command.os):00263         ;* RELEASE ALL CAHINED SECTORS
EE10                  (       command.os):00264         UNCHAIN
EE10 BDE5DF           (       command.os):00265                 JSR     FNDLNK                            ;LOCATE ITS LINK
EE13 270F             (       command.os):00266                 BEQ     UNC1                              ;LAST ONE
EE15 10830000         (       command.os):00267                 CMPD    #0                                ;DID WE GET LOOSE SOMEHOW
EE19 2709             (       command.os):00268                 BEQ     UNC1                              ;STOP
EE1B 6F84             (       command.os):00269                 CLR     ,X                                ;ZERO THE ENTRY...
EE1D 6F01             (       command.os):00270                 CLR     1,X                               ;MAKEING IT FREE
EE1F BDE7A6           (       command.os):00271                 JSR     CHGWRK                            ;INDICATE WE CHANGED
EE22 20EC             (       command.os):00272                 BRA     UNCHAIN                           ;CONTINUE
EE24                  (       command.os):00273         UNC1
EE24 6F84             (       command.os):00274                 CLR     ,X
EE26 6F01             (       command.os):00275                 CLR     1,X
EE28 7EE7A6           (       command.os):00276                 JMP     CHGWRK                            ;END OF DELETE
                      (       command.os):00277         ;* FILENAME CONTAINED WILDCARDS, PROMPT FOR EACH FILE
EE2B                  (       command.os):00278         MULDEL
EE2B CC0000           (       command.os):00279                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
EE2E                  (       command.os):00280         MULD1
EE2E BDE5FC           (       command.os):00281                 JSR     RDWRK                             ;READ WORK SECTOR
EE31                  (       command.os):00282         MULD2
EE31 BDE323           (       command.os):00283                 JSR     COMNAM                            ;IS THIS ONE?
EE34 2654             (       command.os):00284                 BNE     MULD3                             ;NO
EE36 BDE6EA           (       command.os):00285                 JSR     SHONAM                            ;DISPLAY
EE39 A68817           (       command.os):00286                 LDA     DATTR,X                           ;GET ATTRIBUTES
EE3C 8510             (       command.os):00287                 BITA    #DPERM                            ;CAN WE DELETE
EE3E 2610             (       command.os):00288                 BNE     MULD5                             ;YES WE CAN
EE40 BDE57E           (       command.os):00289                 JSR     WRMSG                             ;OUTPUT MESSAGE
EE43 2050726F74656374 (       command.os):00290                 FCC     ' Protected'
     6564
EE4D 00               (       command.os):00291                 FCB     $00
EE4E 203A             (       command.os):00292                 BRA     MULD3
EE50                  (       command.os):00293         MULD5
EE50 BDE54E           (       command.os):00294                 JSR     WRLIN                             ;OUTPUT MESSAGE
EE53 2028592F4E2F5129 (       command.os):00295                 FCC     ' (Y/N/Q)?'
     3F
EE5C 00               (       command.os):00296                 FCB     $00
EE5D BDE5DA           (       command.os):00297                 JSR     GETCHR                            ;GET CHAR
EE60 BDE59A           (       command.os):00298                 JSR     PUTCHR                            ;ECHO
EE63 BDE588           (       command.os):00299                 JSR     LFCR                              ;NEW LINE
EE66 84DF             (       command.os):00300                 ANDA    #$DF                              ;CONVERT TO UPPER
EE68 8151             (       command.os):00301                 CMPA    #'Q'                              ;QUIT?
EE6A 272E             (       command.os):00302                 BEQ     MULD4
EE6C 8159             (       command.os):00303                 CMPA    #'Y'                              ;DO WE KILL?
EE6E 261A             (       command.os):00304                 BNE     MULD3                             ;NO
EE70 6F84             (       command.os):00305                 CLR     ,X                                ;ZAP IT
EE72 BDE7A6           (       command.os):00306                 JSR     CHGWRK                            ;INDICATE CHANGED
EE75 3414             (       command.os):00307                 PSHS    B,X                               ;SAVE REGS
EE77 FC04E7           (       command.os):00308                 LDD     >WRKSEC                           ;GET WORK SECTOR
EE7A FD04D5           (       command.os):00309                 STD     >TEMP1                            ;SAVE
EE7D EC8813           (       command.os):00310                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE80 8D8E             (       command.os):00311                 BSR     UNCHAIN                           ;RELEASE
EE82 FC04D5           (       command.os):00312                 LDD     >TEMP1                            ;GET SECTOR BACK
EE85 BDE5FC           (       command.os):00313                 JSR     RDWRK                             ;RE-READ
EE88 3514             (       command.os):00314                 PULS    B,X
EE8A                  (       command.os):00315         MULD3
EE8A 308820           (       command.os):00316                 LEAX    32,X                              ;ADVANCE TO NEXT
EE8D 8C0800           (       command.os):00317                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
EE90 259F             (       command.os):00318                 BLO     MULD2                             ;NO
EE92 FC04E7           (       command.os):00319                 LDD     >WRKSEC                           ;GET SECTOR ID
EE95 BDE5DF           (       command.os):00320                 JSR     FNDLNK                            ;LOOK FOR LINK
EE98 2694             (       command.os):00321                 BNE     MULD1
EE9A                  (       command.os):00322         MULD4
EE9A 39               (       command.os):00323                 RTS
                      (       command.os):00324         ;*
                      (       command.os):00325         ;* BINARY LOAD A FILE AT MEMORY(X)
                      (       command.os):00326         ;*
EE9B                  (       command.os):00327         BLOAD
EE9B 3410             (       command.os):00328                 PSHS    X                                 ;SAVE ADDRESS
EE9D BDE8A8           (       command.os):00329                 JSR     LOCRED                            ;LOOKUP FILE
EEA0 EC8813           (       command.os):00330                 LDD     DDADR,X                           ;GET DISK ADDRESS
EEA3 3510             (       command.os):00331                 PULS    X                                 ;RESTORE MEMORY ADDRESS
EEA5 2018             (       command.os):00332                 BRA     LCHAIN                            ;LOAD IN THE CHAIN
                      (       command.os):00333         ;*
                      (       command.os):00334         ;* 'LOAD' COMMAND, LOADS A FILE INTO MEMORY
                      (       command.os):00335         ;*
EEA7                  (       command.os):00336         LODFIL
EEA7 BDE370           (       command.os):00337                 JSR     GETVAL                            ;GET FILENAME
EEAA BDE8A8           (       command.os):00338                 JSR     LOCRED                            ;INSURE IT EXISTS
EEAD EC8813           (       command.os):00339                 LDD     DDADR,X                           ;GET DISK ADDRESS
EEB0 3406             (       command.os):00340                 PSHS    A,B                               ;SAVE
EEB2 AE8815           (       command.os):00341                 LDX     DRADR,X                           ;GET RUN ADDRESS
EEB5 BDE4DC           (       command.os):00342                 JSR     SKIP                              ;ANY MORE OPERANDS
EEB8 2703             (       command.os):00343                 BEQ     LODF1                             ;NO, CONTINUE
EEBA BDE41C           (       command.os):00344                 JSR     GETHEX                            ;GET ADDRESS
EEBD                  (       command.os):00345         LODF1
EEBD 3506             (       command.os):00346                 PULS    A,B                               ;RESTORE DISK ADDR
                      (       command.os):00347         ;* LOAD A CHAIN OF SECTORS
EEBF                  (       command.os):00348         LCHAIN
EEBF BDEAE4           (       command.os):00349                 JSR     RDISK                             ;READ DISK
EEC2 30890200         (       command.os):00350                 LEAX    512,X                             ;MOVE TO NEXT ADDRESS
EEC6 3410             (       command.os):00351                 PSHS    X                                 ;SAVE PTR
EEC8 BDE5DF           (       command.os):00352                 JSR     FNDLNK                            ;LOOKUP LINK
EECB 3510             (       command.os):00353                 PULS    X                                 ;RESTORE
EECD 26F0             (       command.os):00354                 BNE     LCHAIN                            ;KEEP GOING
EECF                  (       command.os):00355         OKRET
EECF 39               (       command.os):00356                 RTS
                      (       command.os):00357         ;*
                      (       command.os):00358         ;* BINARY SAVE OF A FILE FROM MEMORY(X) FOR # SECTORS(D)
                      (       command.os):00359         ;*
EED0                  (       command.os):00360         BSAVE
EED0 BF04DB           (       command.os):00361                 STX     >TEMP4                            ;SET LOAD ADDRESS
EED3 FD04D9           (       command.os):00362                 STD     >TEMP3                            ;SAVE # SECTORS
EED6 200F             (       command.os):00363                 BRA     SAVF1                             ;PERFORM SAVE
                      (       command.os):00364         ;*
                      (       command.os):00365         ;* 'SAVE' COMMAND, SAVES A FILE AS A BLOCK
                      (       command.os):00366         ;*
EED8                  (       command.os):00367         SAVFIL
EED8 BDE370           (       command.os):00368                 JSR     GETVAL                            ;GET FILENAME
EEDB BDE41C           (       command.os):00369                 JSR     GETHEX                            ;GET START ADDRESS
EEDE BF04DB           (       command.os):00370                 STX     >TEMP4                            ;SET UP DEFAULT LOAD-ADR
EEE1 BDE411           (       command.os):00371                 JSR     GETNUM                            ;GET # SECTORS
EEE4 BF04D9           (       command.os):00372                 STX     >TEMP3                            ;SAVE LENGTH
EEE7                  (       command.os):00373         SAVF1
EEE7 7D04DA           (       command.os):00374                 TST     >TEMP3+1                          ;TEST FOR INVALID LENMGTH
EEEA 1027F3CA         (       command.os):00375                 LBEQ    BADOPR                            ;INVALID
EEEE BDE8D6           (       command.os):00376                 JSR     LOCWRI                            ;OPEN FILE, WE WILL WRITE IT
EEF1 EC8813           (       command.os):00377                 LDD     DDADR,X                           ;GET DISK ADDRESS
EEF4                  (       command.os):00378         SAVF2
EEF4 FD04D7           (       command.os):00379                 STD     >TEMP2                            ;SAVE SECTOR ID
EEF7 BE04DB           (       command.os):00380                 LDX     >TEMP4                            ;GET LOAD ADDRESS
EEFA BDEB17           (       command.os):00381                 JSR     WDISK                             ;WRITE THE SECTOR
                      (       command.os):00382         
EEFD 30890200         (       command.os):00383                 LEAX    512,X                             ;ADVANCE 1 BLOCK
EF01 BF04DB           (       command.os):00384                 STX     >TEMP4                            ;NEW LOAD ADDRESS
EF04 FC04D7           (       command.os):00385                 LDD     >TEMP2                            ;GET OPEN SECTOR
EF07 7A04DA           (       command.os):00386                 DEC     >TEMP3+1                          ;REDUCE NUMBER
EF0A 2719             (       command.os):00387                 BEQ     SAVF3                             ;QUIT IF DONE
EF0C BDE5DF           (       command.os):00388                 JSR     FNDLNK                            ;LOOK UP ITS LINK
EF0F 26E3             (       command.os):00389                 BNE     SAVF2                             ;THERE IS SPACE, ITS OK
EF11 BDE7AF           (       command.os):00390                 JSR     FRESEC                            ;GET A FREE SECTOR
EF14 3406             (       command.os):00391                 PSHS    A,B                               ;SAVE ID
EF16 FC04D7           (       command.os):00392                 LDD     >TEMP2                            ;GET OPEN SECTOR
EF19 BDE5DF           (       command.os):00393                 JSR     FNDLNK                            ;GET LINK BACK
EF1C 3506             (       command.os):00394                 PULS    A,B                               ;GET NEW SECT BACK
EF1E ED84             (       command.os):00395                 STD     ,X                                ;SET LINK CHAIN
EF20 BDE7A6           (       command.os):00396                 JSR     CHGWRK                            ;INDICATE CHANGED
EF23 20CF             (       command.os):00397                 BRA     SAVF2                             ;WRITE NEXT SECTOR
EF25                  (       command.os):00398         SAVF3
EF25 BDE5DF           (       command.os):00399                 JSR     FNDLNK                            ;LOK UP LINK
EF28 27A5             (       command.os):00400                 BEQ     OKRET                             ;NO FURTHER LINKS
EF2A 3406             (       command.os):00401                 PSHS    A,B                               ;SAVE REGS
EF2C CCFFFF           (       command.os):00402                 LDD     #$FFFF                            ;GET END OF FILE MARKER
EF2F ED84             (       command.os):00403                 STD     ,X                                ;MARK SECTOR
EF31 B704E5           (       command.os):00404                 STA     >WRKCHG                           ;INDICATE CHANGED
EF34 3506             (       command.os):00405                 PULS    A,B                               ;GET CHAINED SECTOR BACK
EF36 7EEE10           (       command.os):00406                 JMP     UNCHAIN                           ;SET IT FREE
                      (       command.os):00407         ;*
                      (       command.os):00408         ;* 'RETURN' COMMAND
                      (       command.os):00409         ;*
EF39                  (       command.os):00410         RETURN
EF39 FC04F1           (       command.os):00411                 LDD     >OLDSTK                           ;GET OLD STACK
EF3C 2704             (       command.os):00412                 BEQ     NOSUSP                            ;NONE, SKIP IT
EF3E 1F04             (       command.os):00413                 TFR     D,S                               ;SET UP STACK
EF40 4F               (       command.os):00414                 CLRA                                      ;ZERO IT
EF41 39               (       command.os):00415                 RTS
EF42                  (       command.os):00416         NOSUSP
EF42 BDE57E           (       command.os):00417                 JSR     WRMSG                             ;OUTPUT MESSAGE
EF45 4E6F207375737065 (       command.os):00418                 FCC     'No suspended program'
     6E6465642070726F
     6772616D
EF59 00               (       command.os):00419                 FCB     $00
EF5A 10FE04E3         (       command.os):00420                 LDS     >SAVSTK                           ;RESTORE STACK
EF5E                  (       command.os):00421         DNLRTS
EF5E 4F               (       command.os):00422                 CLRA                                      ;ZERO RC
EF5F 39               (       command.os):00423                 RTS
                      (       command.os):00424         ;*
                      (       command.os):00425         ;* 'DOWNLOAD' COMMAND
                      (       command.os):00426         ;*
EF60                  (       command.os):00427         DNLD
EF60 BDF14E           (       command.os):00428                 JSR     GETDEV                            ;GET DEVICE ID
EF63 F704D7           (       command.os):00429                 STB     >TEMP2                            ;SAVE IT
EF66 7F04DA           (       command.os):00430                 CLR     >TEMP3+1                          ;ZERO COUNT
EF69 CCFFFF           (       command.os):00431                 LDD     #$FFFF                            ;INIT LOW ADDR
EF6C FD04DB           (       command.os):00432                 STD     >TEMP4                            ;SAVE LOW ADDRESS
EF6F 4F               (       command.os):00433                 CLRA
EF70 5F               (       command.os):00434                 CLRB
EF71 3406             (       command.os):00435                 PSHS    A,B                               ;SAVE HIGH ADDR
EF73                  (       command.os):00436         DNL0
EF73 860D             (       command.os):00437                 LDA     #$0D
EF75 BDE59A           (       command.os):00438                 JSR     PUTCHR                            ;OUTPUT
EF78 B604DA           (       command.os):00439                 LDA     >TEMP3+1
EF7B BDE55A           (       command.os):00440                 JSR     WRHEX                             ;OUTPUT IN HEX
EF7E 7C04DA           (       command.os):00441                 INC     >TEMP3+1
EF81 8D28             (       command.os):00442                 BSR     DNL1                              ;DOWNLOAD RECORD
EF83 2608             (       command.os):00443                 BNE     DNLEND                            ;END, QUIT
EF85 ACE4             (       command.os):00444                 CMPX    ,S                                ;HIGEST YET?
EF87 23EA             (       command.os):00445                 BLS     DNL0                              ;NO, SKIP
EF89 AFE4             (       command.os):00446                 STX     ,S                                ;SAVE HIGH
EF8B 20E6             (       command.os):00447                 BRA     DNL0                              ;OK, KEEP GOING
EF8D                  (       command.os):00448         DNLEND
EF8D BDE588           (       command.os):00449                 JSR     LFCR                              ;NEW LINE
EF90 3506             (       command.os):00450                 PULS    A,B                               ;GET HIGEST
EF92 B304DB           (       command.os):00451                 SUBD    >TEMP4                            ;CALCULATE SIZE
EF95 830001           (       command.os):00452                 SUBD    #1                                ;CONVERT
EF98 44               (       command.os):00453                 LSRA                                      ;/512, CONVERT TO # SECTORS
EF99 4C               (       command.os):00454                 INCA    CONVERT
EF9A B704DA           (       command.os):00455                 STA     >TEMP3+1                          ;SAVE LENGTH
EF9D BDE4DC           (       command.os):00456                 JSR     SKIP                              ;OPERAND?
EFA0 27BC             (       command.os):00457                 BEQ     DNLRTS                            ;NO FILE TO SAVE INTO
EFA2 BDE370           (       command.os):00458                 JSR     GETVAL                            ;GET FILENAME
EFA5 7EEEE7           (       command.os):00459                 JMP     SAVF1                             ;PERFORM SAVE
                      (       command.os):00460         ;* DOWNLOAD A RECORD FROM A DEVICE
EFA8                  (       command.os):00461         DNLDEV
EFA8 B704D7           (       command.os):00462                 STA     >TEMP2                            ;SAVE DEVICE ID
EFAB                  (       command.os):00463         DNL1
EFAB 8D5B             (       command.os):00464                 BSR     RDDLC                             ;GET CHAR
EFAD 8153             (       command.os):00465                 CMPA    #'S'                              ;START OF RECORD?
EFAF 26FA             (       command.os):00466                 BNE     DNL1                              ;NO
EFB1 8D55             (       command.os):00467                 BSR     RDDLC                             ;GET NEXT CHAR
EFB3 8130             (       command.os):00468                 CMPA    #'0'                              ;HEADER?
EFB5 27F4             (       command.os):00469                 BEQ     DNL1                              ;IGNORE
EFB7 8139             (       command.os):00470                 CMPA    #'9'                              ;END OF FILE
EFB9 2603             (       command.os):00471                 BNE     DNL2                              ;YES, END OF FILE
EFBB 8606             (       command.os):00472                 LDA     #RCEOF
EFBD 39               (       command.os):00473                 RTS
EFBE                  (       command.os):00474         DNL2
EFBE 8131             (       command.os):00475                 CMPA    #'1'                              ;DATA RECORD
EFC0 263E             (       command.os):00476                 BNE     LODERR                            ;INVALID
EFC2 8D4A             (       command.os):00477                 BSR     GETBYT                            ;GET LENGTH
EFC4 B704D8           (       command.os):00478                 STA     >TEMP2+1                          ;START CKSUM
EFC7 8003             (       command.os):00479                 SUBA    #3                                ;CONVERT
EFC9 B704D9           (       command.os):00480                 STA     >TEMP3                            ;SAVE LENGTH
EFCC 8D40             (       command.os):00481                 BSR     GETBYT                            ;GET HIGH ADDR
EFCE 3402             (       command.os):00482                 PSHS    A                                 ;SAVE
EFD0 8D3C             (       command.os):00483                 BSR     GETBYT                            ;GET LOW ADDR
EFD2 1F89             (       command.os):00484                 TFR     A,B                               ;SAVE
EFD4 ABE4             (       command.os):00485                 ADDA    ,S                                ;ADD HIGH
EFD6 BB04D8           (       command.os):00486                 ADDA    >TEMP2+1                          ;& CKSUM
EFD9 B704D8           (       command.os):00487                 STA     >TEMP2+1                          ;RESAVE
EFDC 3502             (       command.os):00488                 PULS    A                                 ;RESTORE
EFDE 1F01             (       command.os):00489                 TFR     D,X                               ;SET UP PTR
EFE0 10B304DB         (       command.os):00490                 CMPD    >TEMP4                            ;HIGHER?
EFE4 2403             (       command.os):00491                 BHS     DNL3                              ;YES
EFE6 FD04DB           (       command.os):00492                 STD     >TEMP4                            ;NEW VALUE
EFE9                  (       command.os):00493         DNL3
EFE9 8D23             (       command.os):00494                 BSR     GETBYT                            ;GET BYTE
EFEB A780             (       command.os):00495                 STA     ,X+                               ;SAVE IT
EFED BB04D8           (       command.os):00496                 ADDA    >TEMP2+1                          ;INCL CKSUM
EFF0 B704D8           (       command.os):00497                 STA     >TEMP2+1                          ;RESAVE CKSUM
EFF3 7A04D9           (       command.os):00498                 DEC     >TEMP3                            ;REDUCE LENGTH
EFF6 26F1             (       command.os):00499                 BNE     DNL3                              ;GET FULL REC.
EFF8 8D14             (       command.os):00500                 BSR     GETBYT                            ;GET CKSUM
EFFA BB04D8           (       command.os):00501                 ADDA    >TEMP2+1                          ;+ CALC CKSUM
EFFD 4C               (       command.os):00502                 INCA    TEST FOR OK
EFFE 271A             (       command.os):00503                 BEQ     DNL4                              ;YES, GET NEXT REC
F000                  (       command.os):00504         LODERR
F000 8EF82D           (       command.os):00505                 LDX     #DNLMSG                           ;PT TO ERROR MESSAGE
F003 860B             (       command.os):00506                 LDA     #RCDNL                            ;RETURN CODE
F005 7EE2BD           (       command.os):00507                 JMP     ERRMRC                            ;RETURN
F008                  (       command.os):00508         RDDLC
F008 F604D7           (       command.os):00509                 LDB     >TEMP2                            ;GET DEV
F00B 7EE5BC           (       command.os):00510                 JMP     RDDEV                             ;GET CHAR
F00E                  (       command.os):00511         GETBYT
F00E 8D0B             (       command.os):00512                 BSR     GETNIB                            ;GET IT
F010 48               (       command.os):00513                 LSLA
F011 48               (       command.os):00514                 LSLA
F012 48               (       command.os):00515                 LSLA
F013 48               (       command.os):00516                 LSLA
F014 3402             (       command.os):00517                 PSHS    A
F016 8D03             (       command.os):00518                 BSR     GETNIB
F018 AAE0             (       command.os):00519                 ORA     ,S+
F01A                  (       command.os):00520         DNL4
F01A 39               (       command.os):00521                 RTS
F01B                  (       command.os):00522         GETNIB
F01B 8DEB             (       command.os):00523                 BSR     RDDLC                             ;GET CHAR
F01D 8030             (       command.os):00524                 SUBA    #'0'                              ;CONVERT
F01F 8109             (       command.os):00525                 CMPA    #9                                ;OK?
F021 230A             (       command.os):00526                 BLS     GETN1                             ;YES
F023 8111             (       command.os):00527                 CMPA    #$11                              ;<A
F025 25D9             (       command.os):00528                 BLO     LODERR                            ;INVALID
F027 8007             (       command.os):00529                 SUBA    #7                                ;CONVERT
F029 8110             (       command.os):00530                 CMPA    #$10                              ;IN RANGE
F02B 24D3             (       command.os):00531                 BHS     LODERR                            ;INVALID
F02D                  (       command.os):00532         GETN1
F02D 39               (       command.os):00533                 RTS
                      (       command.os):00534         ;*
                      (       command.os):00535         ;* 'CONNECT' COMMAND
                      (       command.os):00536         ;*
F02E                  (       command.os):00537         CNCT
F02E BDF14E           (       command.os):00538                 JSR     GETDEV                            ;GET DEVICE
F031 F704D7           (       command.os):00539                 STB     >TEMP2                            ;SAVE
F034                  (       command.os):00540         CNC1
F034 BDE5D3           (       command.os):00541                 JSR     TSTCHR                            ;TEST FOR CHAR FROM CONSOLE
F037 260C             (       command.os):00542                 BNE     CNC2                              ;NO, NONE
F039 811B             (       command.os):00543                 CMPA    #$1B                              ;ESCAPE?
F03B 1027F549         (       command.os):00544                 LBEQ    LFCR                              ;IF SO, EXIT
F03F F604D7           (       command.os):00545                 LDB     >TEMP2                            ;GET DEVICE BACK
F042 BDE5A1           (       command.os):00546                 JSR     WRDEV                             ;OUTPUT TO DEVICE
F045                  (       command.os):00547         CNC2
F045 F604D7           (       command.os):00548                 LDB     >TEMP2                            ;GET DEVICE ID
F048 BDE5C1           (       command.os):00549                 JSR     TSTDEV                            ;TEST FOR CHARACTER
F04B 26E7             (       command.os):00550                 BNE     CNC1                              ;NO CHAR RECEIVED
F04D BDE59A           (       command.os):00551                 JSR     PUTCHR                            ;WRITE TO CONSOLE
F050 20E2             (       command.os):00552                 BRA     CNC1                              ;CONTINUE
                      (       command.os):00553         ;*
                      (       command.os):00554         ;* 'SET' COMMAND
                      (       command.os):00555         ;*
F052                  (       command.os):00556         SET
F052 8EF3D2           (       command.os):00557                 LDX     #SETTAB                           ;POINT TO TABLE
F055 BDE505           (       command.os):00558                 JSR     TLOOK                             ;LOOK IT UP
F058 BDE4DC           (       command.os):00559                 JSR     SKIP                              ;ADVANCE
F05B 2777             (       command.os):00560                 BEQ     BADOP3                            ;INVALID
F05D 8EF415           (       command.os):00561                 LDX     #SETADR
F060 58               (       command.os):00562                 ASLB
F061 6E95             (       command.os):00563                 JMP     [B,X]
                      (       command.os):00564         ;* SET DEFAULT
F063                  (       command.os):00565         SET0
F063 BDE3B0           (       command.os):00566                 JSR     GETDIR                            ;GET DEFAULT DIR
F066 BDE4DC           (       command.os):00567                 JSR     SKIP                              ;ANY MORE INFO
F069 2669             (       command.os):00568                 BNE     BADOP3
F06B                  (       command.os):00569         SETDEF
F06B 3436             (       command.os):00570                 PSHS    A,B,X,Y                           ;SAVE REGS
F06D 8E04A5           (       command.os):00571                 LDX     #DEFDRV                           ;POINT TO DEFAULT
F070 2010             (       command.os):00572                 BRA     MOVDIR                            ;MOVE IT
                      (       command.os):00573         ;* SET COMMAND
F072                  (       command.os):00574         SET1
F072 8E04AE           (       command.os):00575                 LDX     #SYSDRV                           ;DEFAULT FROM SYSTEM
F075 BDE3B3           (       command.os):00576                 JSR     GETDIR1                           ;GET DIR
F078 BDE4DC           (       command.os):00577                 JSR     SKIP
F07B 2657             (       command.os):00578                 BNE     BADOP3
F07D                  (       command.os):00579         SETCMD
F07D 3436             (       command.os):00580                 PSHS    A,B,X,Y                           ;SAVE REGS
F07F 8E04AE           (       command.os):00581                 LDX     #SYSDRV                           ;POINT TO IT
F082                  (       command.os):00582         MOVDIR
F082 108E04BF         (       command.os):00583                 LDY     #FDRIVE                           ;POINT TO FILENAME
F086 C609             (       command.os):00584                 LDB     #9                                ;MOVE 9 CHARS
F088                  (       command.os):00585         MOVD1
F088 A6A0             (       command.os):00586                 LDA     ,Y+                               ;GET 1
F08A A780             (       command.os):00587                 STA     ,X+                               ;SAVE IT
F08C 5A               (       command.os):00588                 DECB
F08D 26F9             (       command.os):00589                 BNE     MOVD1                             ;CONTINUE
F08F 35B6             (       command.os):00590                 PULS    A,B,X,Y,PC
                      (       command.os):00591         ;* SET FILE
F091                  (       command.os):00592         SET2
F091 BDE370           (       command.os):00593                 JSR     GETVAL                            ;GET NAME
F094 BDE659           (       command.os):00594                 JSR     LOCERR                            ;LOOK IT UP
F097                  (       command.os):00595         SETF0
F097 3410             (       command.os):00596                 PSHS    X                                 ;SAVE PTR
F099 8EF441           (       command.os):00597                 LDX     #SFTAB                            ;PT TO TABLE
F09C BDF115           (       command.os):00598                 JSR     TLOOKE                            ;LOOK IT UP
F09F 5D               (       command.os):00599                 TSTB                                      ;IS IT SET LOADADDRESS
F0A0 260C             (       command.os):00600                 BNE     SETF1                             ;NO, TRY SOMETHING ELSE
F0A2 BDE41C           (       command.os):00601                 JSR     GETHEX                            ;GET ADDRESS
F0A5 1F10             (       command.os):00602                 TFR     X,D                               ;COPY
F0A7 3510             (       command.os):00603                 PULS    X                                 ;RESTORE
F0A9 ED8815           (       command.os):00604                 STD     DRADR,X                           ;SAVE
F0AC 200A             (       command.os):00605                 BRA     SETF2                             ;TEST FOR END
F0AE                  (       command.os):00606         SETF1
F0AE 5A               (       command.os):00607                 DECB
F0AF 2623             (       command.os):00608                 BNE     BADOP3
F0B1 8D0D             (       command.os):00609                 BSR     GETATR                            ;GET ATTRIBUTES
F0B3 3510             (       command.os):00610                 PULS    X                                 ;RESTORE
F0B5 A78817           (       command.os):00611                 STA     DATTR,X                           ;SAVE
F0B8                  (       command.os):00612         SETF2
F0B8 BDE4DC           (       command.os):00613                 JSR     SKIP                              ;ADVANCE
F0BB 26DA             (       command.os):00614                 BNE     SETF0
F0BD 7EE7A6           (       command.os):00615                 JMP     CHGWRK                            ;INDICATE WE CHANGED
                      (       command.os):00616         ;* GET FILE ATTRIBUTES FROM COMMAND LINE
F0C0                  (       command.os):00617         GETATR
F0C0 4F               (       command.os):00618                 CLRA    CLEAR IT
F0C1 3416             (       command.os):00619                 PSHS    A,B,X                             ;SAVE ON STACK
F0C3                  (       command.os):00620         GETA1
F0C3 8EF0DF           (       command.os):00621                 LDX     #ATRTAB                           ;POINT TO TABLE
F0C6 BDE4E9           (       command.os):00622                 JSR     TSTERM                            ;GET CHARACTER
F0C9 2712             (       command.os):00623                 BEQ     GETA4                             ;END
F0CB C680             (       command.os):00624                 LDB     #%10000000                        ;START WITH FIRST ATTR
F0CD                  (       command.os):00625         GETA2
F0CD A180             (       command.os):00626                 CMPA    ,X+                               ;IS THIS IT?
F0CF 2706             (       command.os):00627                 BEQ     GETA3                             ;YES
F0D1 54               (       command.os):00628                 LSRB                                      ;SHIFT IT
F0D2 26F9             (       command.os):00629                 BNE     GETA2                             ;MORE
F0D4                  (       command.os):00630         BADOP3
F0D4 7EE2B8           (       command.os):00631                 JMP     BADOPR                            ;REPORT ERROR
F0D7                  (       command.os):00632         GETA3
F0D7 EAE4             (       command.os):00633                 ORB     ,S                                ;INCLUDE IN ATTRIBUTES
F0D9 E7E4             (       command.os):00634                 STB     ,S                                ;RESAVE
F0DB 20E6             (       command.os):00635                 BRA     GETA1                             ;AND CONTINUE
F0DD                  (       command.os):00636         GETA4
F0DD 3596             (       command.os):00637                 PULS    A,B,X,PC                          ;RESTORE REGS
F0DF                  (       command.os):00638         ATRTAB
F0DF 525745443F3F3F3F (       command.os):00639                 FCC     'RWED????'                        ;AVAILABLE ATTRIBUTE BITS
                      (       command.os):00640         ;*
                      (       command.os):00641         ;* SET DRIVE COMMAND
                      (       command.os):00642         ;*
F0E7                  (       command.os):00643         SET3
F0E7 BDE623           (       command.os):00644                 JSR     PURGE                             ;INSURE ALL WRITTEN
F0EA BDE3FF           (       command.os):00645                 JSR     GETDRV                            ;GET DRIVE ID
F0ED B704F3           (       command.os):00646                 STA     >SDRIVE                           ;SELECT IT
F0F0 BDEB0B           (       command.os):00647                 JSR     GETCTL                            ;GET CTRL BLOCK
F0F3 3420             (       command.os):00648                 PSHS    Y                                 ;SAVE CMD POINTER
F0F5 BDF737           (       command.os):00649                 JSR     HOME                              ;HOME HEAD
F0F8 3520             (       command.os):00650                 PULS    Y                                 ;RESTORE CMD POINTER
F0FA                  (       command.os):00651         CHGDRV
F0FA 8EF479           (       command.os):00652                 LDX     #SDTAB                            ;POINT TO TABLE
F0FD BDF115           (       command.os):00653                 JSR     TLOOKE                            ;LOOK FOR IT
F100 3404             (       command.os):00654                 PSHS    B                                 ;SAVE
F102 BDE411           (       command.os):00655                 JSR     GETNUM                            ;GET IT
F105 1F10             (       command.os):00656                 TFR     X,D                               ;GET NUMBER
F107 3502             (       command.os):00657                 PULS    A                                 ;RESTORE
F109 8103             (       command.os):00658                 CMPA    #3                                ;VALID?
F10B 22C7             (       command.os):00659                 BHI     BADOP3                            ;ERROR
F10D E7C6             (       command.os):00660                 STB     A,U                               ;SET IT
F10F BDE4DC           (       command.os):00661                 JSR     SKIP                              ;AT END?
F112 26E6             (       command.os):00662                 BNE     CHGDRV                            ;NO
F114 39               (       command.os):00663                 RTS
                      (       command.os):00664         ;*
                      (       command.os):00665         ;* LOOKUP TABLE ENTRY & INSURE IT ENDS WITH '='
                      (       command.os):00666         ;*
F115                  (       command.os):00667         TLOOKE
F115 BDE505           (       command.os):00668                 JSR     TLOOK                             ;LOOKUP ENTRY
F118 A6A0             (       command.os):00669                 LDA     ,Y+                               ;GET NEXT CHAR
F11A 813D             (       command.os):00670                 CMPA    #'='                              ;IS IT EQUALS?
F11C 26B6             (       command.os):00671                 BNE     BADOP3                            ;REPORT ERROR
F11E 39               (       command.os):00672                 RTS
                      (       command.os):00673         ;*
                      (       command.os):00674         ;* SET MEMORY
                      (       command.os):00675         ;*
F11F                  (       command.os):00676         SET4
F11F BDE41C           (       command.os):00677                 JSR     GETHEX                            ;GET ADDRESS
F122                  (       command.os):00678         ST1
F122 3410             (       command.os):00679                 PSHS    X                                 ;SAVE ADDR
F124 BDE41C           (       command.os):00680                 JSR     GETHEX                            ;GET DATA
F127 1F10             (       command.os):00681                 TFR     X,D                               ;SAVE IT
F129 3510             (       command.os):00682                 PULS    X                                 ;RECOVER
F12B E780             (       command.os):00683                 STB     ,X+                               ;SAVE IT
F12D BDE4DC           (       command.os):00684                 JSR     SKIP                              ;END OF LINE?
F130 26F0             (       command.os):00685                 BNE     ST1                               ;CONTINUE
F132 39               (       command.os):00686                 RTS
                      (       command.os):00687         ;* SET CONSOLE
F133                  (       command.os):00688         SET5
F133 8EF4A8           (       command.os):00689                 LDX     #IOTAB                            ;POINT TO TABLE
F136 BDF115           (       command.os):00690                 JSR     TLOOKE                            ;LOOK IT UP
F139 C102             (       command.os):00691                 CMPB    #2                                ;OVER?
F13B 2497             (       command.os):00692                 BHS     BADOP3                            ;INVALID
F13D 3404             (       command.os):00693                 PSHS    B                                 ;SAVE ID
F13F 8D0D             (       command.os):00694                 BSR     GETDEV                            ;GET DEVICE NUMBER
F141 3502             (       command.os):00695                 PULS    A                                 ;GET ID BACK
F143 8E046C           (       command.os):00696                 LDX     #CONIN
F146 E786             (       command.os):00697                 STB     A,X                               ;SET IT
F148 BDE4DC           (       command.os):00698                 JSR     SKIP
F14B 26E6             (       command.os):00699                 BNE     SET5
F14D 39               (       command.os):00700                 RTS
                      (       command.os):00701         ;* GET A DEVICE ID FROM THE CONSOLE
F14E                  (       command.os):00702         GETDEV
F14E BDE411           (       command.os):00703                 JSR     GETNUM                            ;GET DECIMAL NUMBER
F151 8C0008           (       command.os):00704                 CMPX    #NDEV                             ;IS IT OVER THE LIMIT
F154 1024F45C         (       command.os):00705                 LBHS    BADDEV                            ;YES, REPORT ERROR
F158 1F10             (       command.os):00706                 TFR     X,D                               ;'B' = DEVICE ID
F15A 39               (       command.os):00707                 RTS
                      (       command.os):00708         ;* SET FLAG ON/OFF
F15B                  (       command.os):00709         STFLAG
F15B 54               (       command.os):00710                 LSRB                                      ;CONVERT BACK
F15C 3404             (       command.os):00711                 PSHS    B                                 ;SAVE
F15E 8EF4A0           (       command.os):00712                 LDX     #OOTAB                            ;PT TO IT
F161 BDE505           (       command.os):00713                 JSR     TLOOK                             ;LOOKUP IN TABLE
F164 3502             (       command.os):00714                 PULS    A                                 ;RESTORE VECT NUM
F166 5D               (       command.os):00715                 TSTB                                      ;IS IT OFF?
F167 270B             (       command.os):00716                 BEQ     CLRFLG                            ;YES, CLEAR IT
F169 5A               (       command.os):00717                 DECB                                      ;IS IT ON
F16A 1026F14A         (       command.os):00718                 LBNE    BADOPR                            ;NO, ITS INVALID
                      (       command.os):00719         ;* SET AN OS FLAG
F16E                  (       command.os):00720         SETFLG
F16E 3414             (       command.os):00721                 PSHS    B,X
F170 C6FF             (       command.os):00722                 LDB     #$FF
F172 2003             (       command.os):00723                 BRA     GOFLG
                      (       command.os):00724         ;* CLEAR A OS FLAG
F174                  (       command.os):00725         CLRFLG
F174 3414             (       command.os):00726                 PSHS    B,X
F176 5F               (       command.os):00727                 CLRB
F177                  (       command.os):00728         GOFLG
F177 8103             (       command.os):00729                 CMPA    #NUMFLG
F179 1024F13B         (       command.os):00730                 LBHS    BADOPR
F17D 8E04A2           (       command.os):00731                 LDX     #MSGFLG
F180 3086             (       command.os):00732                 LEAX    A,X
F182 A684             (       command.os):00733                 LDA     ,X
F184 E784             (       command.os):00734                 STB     ,X
F186 1A04             (       command.os):00735                 ORCC    #4
F188 3594             (       command.os):00736                 PULS    B,X,PC
                      (       command.os):00737         ;*
                      (       command.os):00738         ;* SHOW COMMAND
                      (       command.os):00739         ;*
F18A                  (       command.os):00740         SHOW
F18A 8EF3D2           (       command.os):00741                 LDX     #SETTAB                           ;POINT TO IT
F18D BDE505           (       command.os):00742                 JSR     TLOOK                             ;LOOK FOR IT
F190 58               (       command.os):00743                 LSLB
F191 8EF42B           (       command.os):00744                 LDX     #SHOADR
F194 6E95             (       command.os):00745                 JMP     [B,X]
                      (       command.os):00746         ;* SHOW DEFAULT
F196                  (       command.os):00747         SHOW0
F196 8E04A5           (       command.os):00748                 LDX     #DEFDRV                           ;PT TO IT
F199 2003             (       command.os):00749                 BRA     SDCMD                             ;SHOW IT
F19B                  (       command.os):00750         SHOW1
F19B 8E04AE           (       command.os):00751                 LDX     #SYSDRV                           ;PT TO IT
F19E                  (       command.os):00752         SDCMD
F19E A680             (       command.os):00753                 LDA     ,X+                               ;GET DRIVE ID
F1A0 8B41             (       command.os):00754                 ADDA    #'A'                              ;CONVERT
F1A2 BDE59A           (       command.os):00755                 JSR     PUTCHR
F1A5 BDE54E           (       command.os):00756                 JSR     WRLIN
F1A8 3A5B             (       command.os):00757                 FCC     ':['
F1AA 00               (       command.os):00758                 FCB     $00
F1AB C608             (       command.os):00759                 LDB     #8
F1AD                  (       command.os):00760         SDC1
F1AD A680             (       command.os):00761                 LDA     ,X+
F1AF 2703             (       command.os):00762                 BEQ     SDC2
F1B1 BDE59A           (       command.os):00763                 JSR     PUTCHR
F1B4                  (       command.os):00764         SDC2
F1B4 5A               (       command.os):00765                 DECB
F1B5 26F6             (       command.os):00766                 BNE     SDC1
F1B7 865D             (       command.os):00767                 LDA     #']'
F1B9 BDE59A           (       command.os):00768                 JSR     PUTCHR
F1BC 7EE588           (       command.os):00769                 JMP     LFCR                              ;EXIT
                      (       command.os):00770         ;* SHOW FILE
F1BF                  (       command.os):00771         SHOW2
F1BF BDE370           (       command.os):00772                 JSR     GETVAL                            ;GET NAME
F1C2 BDE659           (       command.os):00773                 JSR     LOCERR                            ;LOOK IT UP
F1C5 BDE54E           (       command.os):00774                 JSR     WRLIN
F1C8 46696C653A20     (       command.os):00775                 FCC     'File: '
F1CE 00               (       command.os):00776                 FCB     $00
F1CF BDE6EA           (       command.os):00777                 JSR     SHONAM                            ;OUTPUT
F1D2 BDE54E           (       command.os):00778                 JSR     WRLIN
F1D5 0A0D             (       command.os):00779                 FCB     $0A,$0D
F1D7 4469736B20616464 (       command.os):00780                 FCC     'Disk address='
     726573733D
F1E4 00               (       command.os):00781                 FCB     $00
F1E5 EC8813           (       command.os):00782                 LDD     DDADR,X
F1E8 BDE47E           (       command.os):00783                 JSR     WRDEC
F1EB BDE54E           (       command.os):00784                 JSR     WRLIN
F1EE 2C204C6F61642061 (       command.os):00785                 FCC     ', Load address=$'
     6464726573733D24
F1FE 00               (       command.os):00786                 FCB     $00
F1FF EC8815           (       command.os):00787                 LDD     DRADR,X
F202 BDE545           (       command.os):00788                 JSR     WRHEXW
F205 BDE54E           (       command.os):00789                 JSR     WRLIN
F208 2C2050726F746563 (       command.os):00790                 FCC     ', Protection='
     74696F6E3D
F215 00               (       command.os):00791                 FCB     $00
F216 E68817           (       command.os):00792                 LDB     DATTR,X
F219 108EF0DF         (       command.os):00793                 LDY     #ATRTAB
F21D                  (       command.os):00794         SH21
F21D A6A0             (       command.os):00795                 LDA     ,Y+
F21F 58               (       command.os):00796                 LSLB
F220 2403             (       command.os):00797                 BCC     SH22
F222 BDE59A           (       command.os):00798                 JSR     PUTCHR
F225                  (       command.os):00799         SH22
F225 5D               (       command.os):00800                 TSTB
F226 26F5             (       command.os):00801                 BNE     SH21
F228 BDE588           (       command.os):00802                 JSR     LFCR
F22B 108E0000         (       command.os):00803                 LDY     #0                                ;0 BLOCKS
F22F EC8813           (       command.os):00804                 LDD     DDADR,X
F232                  (       command.os):00805         SH23
F232 3121             (       command.os):00806                 LEAY    1,Y                               ;ADVANCE
F234 BDE5DF           (       command.os):00807                 JSR     FNDLNK                            ;LOOK UP LINK
F237 26F9             (       command.os):00808                 BNE     SH23                              ;FIND EM ALL
F239 BDE54E           (       command.os):00809                 JSR     WRLIN
F23C 46696C6520636F6E (       command.os):00810                 FCC     'File contains '
     7461696E7320
F24A 00               (       command.os):00811                 FCB     $00
F24B 1F20             (       command.os):00812                 TFR     Y,D
F24D BDE47E           (       command.os):00813                 JSR     WRDEC
F250 BDE57E           (       command.os):00814                 JSR     WRMSG
F253 20626C6F636B2873 (       command.os):00815                 FCC     ' block(s).'
     292E
F25D 00               (       command.os):00816                 FCB     $00
F25E 39               (       command.os):00817                 RTS
                      (       command.os):00818         ;* SHOW DISK FORMAT
F25F                  (       command.os):00819         SHOW3
F25F BDE3FF           (       command.os):00820                 JSR     GETDRV
F262                  (       command.os):00821         SHODRV
F262 3442             (       command.os):00822                 PSHS    A,U                               ;SAVE REGISTERS
F264 BDEB0E           (       command.os):00823                 JSR     GETCTL1                           ;GET DRIVE CONTROL BLOCK
F267 BDE54E           (       command.os):00824                 JSR     WRLIN                             ;OUTPUT MESSAGE
F26A 44726976653A20   (       command.os):00825                 FCC     'Drive: '
F271 00               (       command.os):00826                 FCB     $00
F272 A6E4             (       command.os):00827                 LDA     ,S                                ;GET DRIVE ID
F274 8B41             (       command.os):00828                 ADDA    #'A'                              ;CONVERT TO DRIVE ID
F276 BDE59A           (       command.os):00829                 JSR     PUTCHR                            ;OUTPUT IT
F279 BDE588           (       command.os):00830                 JSR     LFCR                              ;NEW LINE
F27C 8EF479           (       command.os):00831                 LDX     #SDTAB                            ;POINT TO TABLE
F27F 4F               (       command.os):00832                 CLRA                                      ;DISPLAY ADDRESS
F280 E6C4             (       command.os):00833                 LDB     DRIVE,U                           ;GET DRIVE ID
F282 8D1D             (       command.os):00834                 BSR     SHODRB                            ;DISPLAY IT
F284 8601             (       command.os):00835                 LDA     #1                                ;DISPLAY CYLINDERS
F286 E641             (       command.os):00836                 LDB     NCYL,U                            ;GET # CYLINDERS
F288 8D11             (       command.os):00837                 BSR     SHODRA                            ;DISPLAY IT
F28A 8602             (       command.os):00838                 LDA     #2                                ;DISPLAY HEADS
F28C E642             (       command.os):00839                 LDB     NHEAD,U                           ;GET # HEADS
F28E 8D0B             (       command.os):00840                 BSR     SHODRA                            ;DISPLAY IT
F290 8603             (       command.os):00841                 LDA     #3                                ;DISPLAY SECTORS/TRACK
F292 E643             (       command.os):00842                 LDB     NSEC,U                            ;GET # SECTORS/TRACK
F294 8D05             (       command.os):00843                 BSR     SHODRA                            ;DISPLAY IT
F296 3542             (       command.os):00844                 PULS    A,U                               ;RESTORE REGS
F298 7EE588           (       command.os):00845                 JMP     LFCR                              ;NEW LINE
                      (       command.os):00846         
F29B                  (       command.os):00847         SHODRA
F29B BDE54E           (       command.os):00848                 JSR     WRLIN                             ;OUTPUT MESSAGE
F29E 2C20             (       command.os):00849                 FCC     ', '                              ;STRING
F2A0 00               (       command.os):00850                 FCB     $00
F2A1                  (       command.os):00851         SHODRB
F2A1 8D08             (       command.os):00852                 BSR     SHOTAB                            ;DISPLAY TABLE ENTRY
F2A3 863D             (       command.os):00853                 LDA     #'='                              ;GET FOLLOWING '='
F2A5 BDE59A           (       command.os):00854                 JSR     PUTCHR                            ;OUTPUT IT
F2A8 7EE47D           (       command.os):00855                 JMP     WRDEC8                            ;AND DISPLAY VALUE
                      (       command.os):00856         ;*
                      (       command.os):00857         ;* DISPLAY ENTRY(A) IN TABLE(X)
                      (       command.os):00858         ;*
F2AB                  (       command.os):00859         SHOTAB
F2AB 3414             (       command.os):00860                 PSHS    B,X                               ;SAVE REGS
F2AD 4C               (       command.os):00861                 INCA                                      ;ADVANCE FOR COUNT
F2AE                  (       command.os):00862         SHOT1
F2AE E680             (       command.os):00863                 LDB     ,X+                               ;GET CHAR FROM TABLE
F2B0 2AFC             (       command.os):00864                 BPL     SHOT1                             ;NOT FLAG, KEEP LOOKING
F2B2 C47F             (       command.os):00865                 ANDB    #%01111111                        ;IS IT LAST ONE?
F2B4 270F             (       command.os):00866                 BEQ     SHOT4                             ;YES, RETURN NOT-FOUND
F2B6 4A               (       command.os):00867                 DECA                                      ;IS THIS IT?
F2B7 26F5             (       command.os):00868                 BNE     SHOT1                             ;NO, KEEP LOOKING
F2B9                  (       command.os):00869         SHOT2
F2B9 A680             (       command.os):00870                 LDA     ,X+                               ;GET CHAR
F2BB 2B05             (       command.os):00871                 BMI     SHOT3                             ;END, EXIT
F2BD BDE59A           (       command.os):00872                 JSR     PUTCHR                            ;DISPLAY
F2C0 20F7             (       command.os):00873                 BRA     SHOT2                             ;DO NEXT
F2C2                  (       command.os):00874         SHOT3
F2C2 4F               (       command.os):00875                 CLRA    ZERO RC
F2C3 3594             (       command.os):00876                 PULS    B,X,PC
F2C5                  (       command.os):00877         SHOT4
F2C5 8601             (       command.os):00878                 LDA     #RCBOP                            ;INVALID OPERAND PASSED
F2C7 3594             (       command.os):00879                 PULS    B,X,PC                            ;RETURN
                      (       command.os):00880         ;* SHOW CONSOLE I/O ASSIGNMENTS
F2C9                  (       command.os):00881         SHOW5
F2C9 8EF4A8           (       command.os):00882                 LDX     #IOTAB                            ;POINT TO TABLE
F2CC 4F               (       command.os):00883                 CLRA                                      ;DISPLAY INPUT
F2CD F6046C           (       command.os):00884                 LDB     >CONIN                            ;GET INPUT
F2D0 8DCF             (       command.os):00885                 BSR     SHODRB                            ;DISPLAY IT
F2D2 8601             (       command.os):00886                 LDA     #1                                ;DISPLAY OUTPUT
F2D4 F6046D           (       command.os):00887                 LDB     >CONOUT                           ;GET OUTPUT
F2D7 8DC2             (       command.os):00888                 BSR     SHODRA                            ;DISPLAY IT
F2D9 7EE588           (       command.os):00889                 JMP     LFCR                              ;NEW LINE
                      (       command.os):00890         ;* DISPLAY FLAGS
F2DC                  (       command.os):00891         SHFLAG
F2DC 54               (       command.os):00892                 LSRB
F2DD 1F98             (       command.os):00893                 TFR     B,A                               ;COPY
F2DF 8EF3D2           (       command.os):00894                 LDX     #SETTAB                           ;POINT TO TABLE
F2E2 8DC7             (       command.os):00895                 BSR     SHOTAB                            ;DISPLAY IT
F2E4 863D             (       command.os):00896                 LDA     #'='                              ;GET EQUALS SIGN
F2E6 BDE59A           (       command.os):00897                 JSR     PUTCHR                            ;OUTPUT IT
F2E9 8E04A2           (       command.os):00898                 LDX     #MSGFLG                           ;PT TO AREA
F2EC A685             (       command.os):00899                 LDA     B,X                               ;GET FLAG VALUE
F2EE 2702             (       command.os):00900                 BEQ     SHOOFF                            ;OFF, SHOW IT
F2F0 8601             (       command.os):00901                 LDA     #1                                ;CONVERT TO ON
F2F2                  (       command.os):00902         SHOOFF
F2F2 8EF4A0           (       command.os):00903                 LDX     #OOTAB                            ;POINT TO ON/OFF TABLE
F2F5 8DB4             (       command.os):00904                 BSR     SHOTAB                            ;OUTPUT TABLE ENTRY
F2F7 7EE588           (       command.os):00905                 JMP     LFCR                              ;NEW LINE & EXIT
                      (       command.os):00906         ;*
                      (       command.os):00907         ;* SHOW MEMORY COMAND
                      (       command.os):00908         ;*
F2FA                  (       command.os):00909         SHOW4
F2FA BDE41C           (       command.os):00910                 JSR     GETHEX                            ;     GET STARTING ADDRESS
F2FD 3410             (       command.os):00911                 PSHS    X                                 ;SAVE IT
F2FF BDE4DC           (       command.os):00912                 JSR     SKIP                              ;     MORE OPERANDS?
F302 2703             (       command.os):00913                 BEQ     EX1                               ;NO, THATS IT
F304 BDE41C           (       command.os):00914                 JSR     GETHEX                            ;     GET ENDING ADDRESS
F307                  (       command.os):00915         EX1
F307 BF04D5           (       command.os):00916                 STX     >TEMP1                            ;     SAVE ADDR
F30A 3510             (       command.os):00917                 PULS    X                                 ;GET STARTING BACK
F30C                  (       command.os):00918         EX2
F30C 1F10             (       command.os):00919                 TFR     X,D                               ;GET ADDRESS
F30E BDE545           (       command.os):00920                 JSR     WRHEXW                            ;     DISPLAY
F311 C610             (       command.os):00921                 LDB     #16                               ;16 BYTES/LINE
F313                  (       command.os):00922         EX3
F313 C503             (       command.os):00923                 BITB    #3                                ;BOUNDARY?
F315 2603             (       command.os):00924                 BNE     EX4
F317 BDE592           (       command.os):00925                 JSR     SPACE                             ;EXTRA SPACE
F31A                  (       command.os):00926         EX4
F31A BDE592           (       command.os):00927                 JSR     SPACE                             ;OUTPUT SPACE
F31D A680             (       command.os):00928                 LDA     ,X+                               ;GET DATA
F31F BDE55A           (       command.os):00929                 JSR     WRHEX                             ;OUTPUT
F322 5A               (       command.os):00930                 DECB                                      ;BACKUP COUNT
F323 26EE             (       command.os):00931                 BNE     EX3                               ;DO EM ALL
F325 C604             (       command.os):00932                 LDB     #4
F327                  (       command.os):00933         EX5
F327 BDE592           (       command.os):00934                 JSR     SPACE                             ;MORE SPACES
F32A 5A               (       command.os):00935                 DECB
F32B 26FA             (       command.os):00936                 BNE     EX5
F32D 3010             (       command.os):00937                 LEAX    -16,X                             ;BACKUP
F32F C610             (       command.os):00938                 LDB     #16
F331                  (       command.os):00939         EX6
F331 A680             (       command.os):00940                 LDA     ,X+
F333 8120             (       command.os):00941                 CMPA    #' '                              ;SPACE?
F335 2504             (       command.os):00942                 BLO     EX7
F337 817F             (       command.os):00943                 CMPA    #$7F                              ;DELETE
F339 2502             (       command.os):00944                 BLO     EX8                               ;OK
F33B                  (       command.os):00945         EX7
F33B 862E             (       command.os):00946                 LDA     #'.'                              ;INDICATE BAD
F33D                  (       command.os):00947         EX8
F33D BDE59A           (       command.os):00948                 JSR     PUTCHR                            ;OUTPUT
F340 5A               (       command.os):00949                 DECB    BACKUP
F341 26EE             (       command.os):00950                 BNE     EX6                               ;CONTINUE
F343 BDE588           (       command.os):00951                 JSR     LFCR                              ;NEW LINE
F346 BDE5D3           (       command.os):00952                 JSR     TSTCHR
F349 2705             (       command.os):00953                 BEQ     EX9
F34B BC04D5           (       command.os):00954                 CMPX    >TEMP1                            ;PAST END?
F34E 23BC             (       command.os):00955                 BLS     EX2                               ;NO, KEEP GOING
F350                  (       command.os):00956         EX9
F350 4F               (       command.os):00957                 CLRA
F351 39               (       command.os):00958                 RTS
                      (       command.os):00959         ;* SHOW FREE
F352                  (       command.os):00960         SHOW6
F352 BDE3FF           (       command.os):00961                 JSR     GETDRV                            ;GET DRIVE ID
F355 B704F3           (       command.os):00962                 STA     >SDRIVE                           ;SELECT IT
F358 8D3E             (       command.os):00963                 BSR     CALFRE                            ;CALCULATE SIZE & FREE
F35A BDE54E           (       command.os):00964                 JSR     WRLIN                             ;OUTPUT MESSAGE
F35D 447269766520     (       command.os):00965                 FCC     'Drive '
F363 00               (       command.os):00966                 FCB     $00
F364 B604F3           (       command.os):00967                 LDA     >SDRIVE                           ;GET DRIVE ID
F367 8B41             (       command.os):00968                 ADDA    #'A'                              ;CONVERT TO PRINTABLE
F369 BDE59A           (       command.os):00969                 JSR     PUTCHR                            ;DISPLAY
F36C BDE54E           (       command.os):00970                 JSR     WRLIN                             ;OUTPUT MESSAGE
F36F 2068617320       (       command.os):00971                 FCC     ' has '
F374 00               (       command.os):00972                 FCB     $00
F375 FC04D7           (       command.os):00973                 LDD     >TEMP2                            ;GET DISK SIZE
F378 BDE47E           (       command.os):00974                 JSR     WRDEC                             ;DISPLAY IN DECIMAL
F37B BDE54E           (       command.os):00975                 JSR     WRLIN                             ;OUTPUT MESSAGE
F37E 20626C6F636B732C (       command.os):00976                 FCC     ' blocks, '
     20
F387 00               (       command.os):00977                 FCB     $00
F388 FC04D5           (       command.os):00978                 LDD     >TEMP1                            ;GET FREE BLOCKS
F38B BDE47E           (       command.os):00979                 JSR     WRDEC                             ;OUTPUT IN DECIMAL
F38E BDE57E           (       command.os):00980                 JSR     WRMSG                             ;OUTPUT MESSAGE
F391 2066726565       (       command.os):00981                 FCC     ' free'
F396 00               (       command.os):00982                 FCB     $00
F397 39               (       command.os):00983                 RTS
                      (       command.os):00984         ;*
                      (       command.os):00985         ;* CALCULATE # FREE SECTORS ON DISK
                      (       command.os):00986         ;*
F398                  (       command.os):00987         CALFRE
F398 3430             (       command.os):00988                 PSHS    X,Y
F39A BDE712           (       command.os):00989                 JSR     CURSIZ                            ;GET DRIVE SIZE
F39D FD04D7           (       command.os):00990                 STD     >TEMP2                            ;SAVE # BLOCKS
F3A0 1F02             (       command.os):00991                 TFR     D,Y                               ;SAVE IT
F3A2 4F               (       command.os):00992                 CLRA
F3A3 5F               (       command.os):00993                 CLRB
F3A4 FD04D5           (       command.os):00994                 STD     >TEMP1                            ;SAVE COUNT
F3A7 C601             (       command.os):00995                 LDB     #LNKSEC                           ;GET LINK SECTORS
F3A9                  (       command.os):00996         DISF1
F3A9 FD04D3           (       command.os):00997                 STD     >TEMP                             ;CURRENT SECTOR
F3AC BDE5FC           (       command.os):00998                 JSR     RDWRK                             ;READ IT
F3AF                  (       command.os):00999         DISF2
F3AF EC81             (       command.os):01000                 LDD     ,X++                              ;GET SECTOR ID
F3B1 2607             (       command.os):01001                 BNE     DISF3                             ;USED
F3B3 5C               (       command.os):01002                 INCB                                      ;GET A ONE
F3B4 F304D5           (       command.os):01003                 ADDD    >TEMP1                            ;ADVANCE COUNT
F3B7 FD04D5           (       command.os):01004                 STD     >TEMP1                            ;RESAVE COUNT
F3BA                  (       command.os):01005         DISF3
F3BA 313F             (       command.os):01006                 LEAY    -1,Y                              ;REDUCE BY ONE
F3BC 270D             (       command.os):01007                 BEQ     DISF4                             ;ALL DONE
F3BE 8C0800           (       command.os):01008                 CMPX    #WRKSPC+512                       ;ARE WE OVER
F3C1 25EC             (       command.os):01009                 BLO     DISF2                             ;NO, ITS OK
F3C3 FC04D3           (       command.os):01010                 LDD     >TEMP                             ;GET SECTOR
F3C6 C30001           (       command.os):01011                 ADDD    #1                                ;ADVANCE
F3C9 20DE             (       command.os):01012                 BRA     DISF1
F3CB                  (       command.os):01013         DISF4
F3CB FC04D5           (       command.os):01014                 LDD     >TEMP1                            ;RECOVER IT
F3CE 1A04             (       command.os):01015                 ORCC    #4
F3D0 35B0             (       command.os):01016                 PULS    X,Y,PC
                      (       command.os):01017         ;* 'SET' OPERAND TABLES
F3D2                  (       command.os):01018         SETTAB
F3D2 83               (       command.os):01019                 FCB     $83
F3D3 4D657373616765   (       command.os):01020                 FCC     'Message'
F3DA 83               (       command.os):01021                 FCB     $83
F3DB 4465627567       (       command.os):01022                 FCC     'Debug'
F3E0 82               (       command.os):01023                 FCB     $82
F3E1 5472616365       (       command.os):01024                 FCC     'Trace'
F3E6 83               (       command.os):01025                 FCB     $83
F3E7 44454641554C54   (       command.os):01026                 FCC     'DEFAULT'
F3EE 82               (       command.os):01027                 FCB     $82
F3EF 53595354454D     (       command.os):01028                 FCC     'SYSTEM'
F3F5 82               (       command.os):01029                 FCB     $82
F3F6 46494C45         (       command.os):01030                 FCC     'FILE'
F3FA 82               (       command.os):01031                 FCB     $82
F3FB 4452495645       (       command.os):01032                 FCC     'DRIVE'
F400 83               (       command.os):01033                 FCB     $83
F401 4D454D4F5259     (       command.os):01034                 FCC     'MEMORY'
F407 82               (       command.os):01035                 FCB     $82
F408 434F4E534F4C45   (       command.os):01036                 FCC     'CONSOLE'
F40F 82               (       command.os):01037                 FCB     $82
F410 46524545         (       command.os):01038                 FCC     'FREE'
F414 80               (       command.os):01039                 FCB     $80
                      (       command.os):01040         ;* 'SET' OPERAND HANDLERS
F415                  (       command.os):01041         SETADR
F415 F15B             (       command.os):01042                 FDB     STFLAG                            ;MESSAGE
F417 F15B             (       command.os):01043                 FDB     STFLAG                            ;DEBUG
F419 F15B             (       command.os):01044                 FDB     STFLAG                            ;TRACE
F41B F063             (       command.os):01045                 FDB     SET0                              ;DEFAULT
F41D F072             (       command.os):01046                 FDB     SET1                              ;SYSTEM
F41F F091             (       command.os):01047                 FDB     SET2                              ;FILE
F421 F0E7             (       command.os):01048                 FDB     SET3                              ;DRIVE
F423 F11F             (       command.os):01049                 FDB     SET4                              ;MEMORY
F425 F133             (       command.os):01050                 FDB     SET5                              ;CONSOLE
F427 E2B8             (       command.os):01051                 FDB     BADOPR                            ;FREE
F429 E2B8             (       command.os):01052                 FDB     BADOPR                            ;INVALID
                      (       command.os):01053         ;* 'SHOW' OPERAND HANDLERS
F42B                  (       command.os):01054         SHOADR
F42B F2DC             (       command.os):01055                 FDB     SHFLAG                            ;MESSAGE
F42D F2DC             (       command.os):01056                 FDB     SHFLAG                            ;DEBUG
F42F F2DC             (       command.os):01057                 FDB     SHFLAG                            ;TRACE
F431 F196             (       command.os):01058                 FDB     SHOW0                             ;DEFAULT
F433 F19B             (       command.os):01059                 FDB     SHOW1                             ;SYSTEM
F435 F1BF             (       command.os):01060                 FDB     SHOW2                             ;FILE
F437 F25F             (       command.os):01061                 FDB     SHOW3                             ;DRIVE
F439 F2FA             (       command.os):01062                 FDB     SHOW4                             ;MEMORY
F43B F2C9             (       command.os):01063                 FDB     SHOW5                             ;CONSOLE
F43D F352             (       command.os):01064                 FDB     SHOW6                             ;FREE
F43F E2B8             (       command.os):01065                 FDB     BADOPR                            ;INVALID
                      (       command.os):01066         ;* 'SET FILE' OPTIONS
F441                  (       command.os):01067         SFTAB
F441 81               (       command.os):01068                 FCB     $81
F442 4C4F41445F414444 (       command.os):01069                 FCC     'LOAD_ADDRESS'
     52455353
F44E 81               (       command.os):01070                 FCB     $81
F44F 50524F5445435449 (       command.os):01071                 FCC     'PROTECTION'
     4F4E
F459 80               (       command.os):01072                 FCB     $80
                      (       command.os):01073         ;* 'INITIALIZE' OPTIONS
F45A                  (       command.os):01074         INITAB
F45A 81               (       command.os):01075                 FCB     $81
F45B 496E7465726C6561 (       command.os):01076                 FCC     'Interleave'
     7665
F465 81               (       command.os):01077                 FCB     $81
F466 4469726563746F72 (       command.os):01078                 FCC     'Directory extension'
     7920657874656E73
     696F6E
                      (       command.os):01079         ;* 'SET DISK' OPTIONS
F479                  (       command.os):01080         SDTAB
F479 81               (       command.os):01081                 FCB     $81
F47A 41646472657373   (       command.os):01082                 FCC     'Address'
F481 81               (       command.os):01083                 FCB     $81
F482 43796C696E646572 (       command.os):01084                 FCC     'Cylinders'
     73
F48B 81               (       command.os):01085                 FCB     $81
F48C 4865616473       (       command.os):01086                 FCC     'Heads'
F491 81               (       command.os):01087                 FCB     $81
F492 536563746F72732F (       command.os):01088                 FCC     'Sectors/Track'
     547261636B
F49F 80               (       command.os):01089                 FCB     $80
                      (       command.os):01090         ;* FLAG ON/OFF TABLE
F4A0                  (       command.os):01091         OOTAB
F4A0 82               (       command.os):01092                 FCB     $82
F4A1 4F4646           (       command.os):01093                 FCC     'OFF'
F4A4 82               (       command.os):01094                 FCB     $82
F4A5 4F4E             (       command.os):01095                 FCC     'ON'
F4A7 80               (       command.os):01096                 FCB     $80
                      (       command.os):01097         ;* 'SET CONSOLE' OPTIONS
F4A8                  (       command.os):01098         IOTAB
F4A8 81               (       command.os):01099                 FCB     $81
F4A9 496E707574       (       command.os):01100                 FCC     'Input'
F4AE 81               (       command.os):01101                 FCB     $81
F4AF 4F7574707574     (       command.os):01102                 FCC     'Output'
F4B5 80               (       command.os):01103                 FCB     $80
                      (        cubix.asm):01200                 INCLUDE comfile.os                        ;BATCH FILE PROCESSOR
                      (       comfile.os):00001         ;*
                      (       comfile.os):00002         ;* CUBIX Command (batch) file processor
                      (       comfile.os):00003         ;*
                      (       comfile.os):00004         ;* END OF FILE ON COMMAND FILE
F4B6                  (       comfile.os):00005         CMDEOF
F4B6 3506             (       comfile.os):00006                 PULS    A,B
F4B8 FD04EE           (       comfile.os):00007                 STD     >CMDSTK
F4BB B604F0           (       comfile.os):00008                 LDA     >CMDRC
F4BE 39               (       comfile.os):00009                 RTS
                      (       comfile.os):00010         ;*
                      (       comfile.os):00011         ;* COMMAND FILE PROCESSOR
                      (       comfile.os):00012         ;*
F4BF                  (       comfile.os):00013         COMFIL
F4BF 3121             (       comfile.os):00014                 LEAY    1,Y                               ;SKIP '@'
F4C1 B704D5           (       comfile.os):00015                 STA     >TEMP1                            ;INDICATE NOT IMPLIED
F4C4                  (       comfile.os):00016         CMDEX
F4C4 BDE3B0           (       comfile.os):00017                 JSR     GETDIR                            ;GET DIRECTORY
F4C7 BDE29E           (       comfile.os):00018                 JSR     NAMGET                            ;GET NAME
F4CA CC4000           (       comfile.os):00019                 LDD     #$4000                            ;'@'
F4CD ED81             (       comfile.os):00020                 STD     ,X++                              ;SET IT
F4CF 6F80             (       comfile.os):00021                 CLR     ,X+                               ;ZERO LAST
F4D1 BDE659           (       comfile.os):00022                 JSR     LOCERR                            ;LOOK IT UP
                      (       comfile.os):00023         ;* START UP COMMAND FILE DIR ENT(X)
F4D4                  (       comfile.os):00024         COMGO
F4D4 A68817           (       comfile.os):00025                 LDA     DATTR,X                           ;GET PROTS
F4D7 8520             (       comfile.os):00026                 BITA    #EPERM                            ;CAN WE EXECUTE?
F4D9 1027F3D5         (       comfile.os):00027                 LBEQ    PROERR                            ;NO, ERROR
F4DD B604BF           (       comfile.os):00028                 LDA     >FDRIVE                           ;GET COMMAND FILE DRIVE
F4E0 B704E9           (       comfile.os):00029                 STA     >CMDDRV                           ;SAVE IT
F4E3 EC8813           (       comfile.os):00030                 LDD     DDADR,X                           ;GET ADDRESS
F4E6 FD04EA           (       comfile.os):00031                 STD     >CMDSEC                           ;SAVE COMMAND SECTOR
F4E9 4F               (       comfile.os):00032                 CLRA
F4EA 5F               (       comfile.os):00033                 CLRB
F4EB FD04EC           (       comfile.os):00034                 STD     >CMDOFF                           ;SAVE COMMAND FILE OFFSET
F4EE FC04EE           (       comfile.os):00035                 LDD     >CMDSTK                           ;GET COMMAND STACK
F4F1 3406             (       comfile.os):00036                 PSHS    A,B                               ;SAVE OLD STACK
F4F3 7F04F0           (       comfile.os):00037                 CLR     >CMDRC                            ;CLEAR RETURN CODE
F4F6 10BE04D7         (       comfile.os):00038                 LDY     >TEMP2                            ;RESTORE COMMAND LINE POINTER
F4FA BDF5F9           (       comfile.os):00039                 JSR     SAVPRM                            ;SAVE PARAMETERS
F4FD                  (       comfile.os):00040         NEWLIN
F4FD 8E0400           (       comfile.os):00041                 LDX     #INBUFF                           ;PT TO BUFFER
F500                  (       comfile.os):00042         REDCHR
F500 BDF66D           (       comfile.os):00043                 JSR     RCCHR                             ;READ CHAR FROM CMD FILE
F503 27B1             (       comfile.os):00044                 BEQ     CMDEOF                            ;END OF FILE
F505 813F             (       comfile.os):00045                 CMPA    #'?'                              ;PARM?
F507 262D             (       comfile.os):00046                 BNE     NOMAC                             ;NOPE
F509 BDF66D           (       comfile.os):00047                 JSR     RCCHR                             ;GET CHAR
F50C 8030             (       comfile.os):00048                 SUBA    #'0'                              ;CONVERT
F50E 8109             (       comfile.os):00049                 CMPA    #9                                ;OVER
F510 2308             (       comfile.os):00050                 BLS     PAROK                             ;OK
F512 C63F             (       comfile.os):00051                 LDB     #'?'
F514 E780             (       comfile.os):00052                 STB     ,X+
F516 8B30             (       comfile.os):00053                 ADDA    #'0'
F518 201C             (       comfile.os):00054                 BRA     NOMAC                             ;NOT VAR
                      (       comfile.os):00055         ;* PARAMETER SUB TO PERFORM
F51A                  (       comfile.os):00056         PAROK
F51A 1F89             (       comfile.os):00057                 TFR     A,B                               ;COPY
F51C 108E04F5         (       comfile.os):00058                 LDY     #CMDBUF                           ;POINT TO BUFFER
F520                  (       comfile.os):00059         PAR1
F520 BDE4DC           (       comfile.os):00060                 JSR     SKIP                              ;ADVANCE
F523 5A               (       comfile.os):00061                 DECB                                      ;REDUCE COUNT
F524 2B07             (       comfile.os):00062                 BMI     PAR3                              ;WE HAVE IT
F526                  (       comfile.os):00063         PAR2
F526 BDE4E9           (       comfile.os):00064                 JSR     TSTERM                            ;KEEP LOOKING
F529 26FB             (       comfile.os):00065                 BNE     PAR2                              ;KEEP LOOKING
F52B 20F3             (       comfile.os):00066                 BRA     PAR1                              ;CONTINUE
F52D                  (       comfile.os):00067         PAR3
F52D BDE4E9           (       comfile.os):00068                 JSR     TSTERM                            ;IS THIS
F530 27CE             (       comfile.os):00069                 BEQ     REDCHR                            ;YES, QUIT
F532 A780             (       comfile.os):00070                 STA     ,X+                               ;SAVE
F534 20F7             (       comfile.os):00071                 BRA     PAR3
                      (       comfile.os):00072         ;* EXECUTE COMMAND
F536                  (       comfile.os):00073         NOMAC
F536 A780             (       comfile.os):00074                 STA     ,X+                               ;CLEAR IT
F538 810D             (       comfile.os):00075                 CMPA    #$0D                              ;END OF LINE?
F53A 26C4             (       comfile.os):00076                 BNE     REDCHR
F53C 108E0400         (       comfile.os):00077                 LDY     #INBUFF                           ;POINT TO BUFFER
F540 7D04A4           (       comfile.os):00078                 TST     >TRCFLG                           ;TEST FOR TRACE ON
F543 2717             (       comfile.os):00079                 BEQ     GOCMD                             ;NO, DON'T TRACE
F545 862A             (       comfile.os):00080                 LDA     #'*'
F547 BDE59A           (       comfile.os):00081                 JSR     PUTCHR                            ;FAKE DOS PROMPT
F54A 1F21             (       comfile.os):00082                 TFR     Y,X                               ;COPY
F54C                  (       comfile.os):00083         TRAC1
F54C A680             (       comfile.os):00084                 LDA     ,X+
F54E 2709             (       comfile.os):00085                 BEQ     TRAC2
F550 810D             (       comfile.os):00086                 CMPA    #$0D
F552 2705             (       comfile.os):00087                 BEQ     TRAC2
F554 BDE59A           (       comfile.os):00088                 JSR     PUTCHR
F557 20F3             (       comfile.os):00089                 BRA     TRAC1
F559                  (       comfile.os):00090         TRAC2
F559 BDE588           (       comfile.os):00091                 JSR     LFCR
F55C                  (       comfile.os):00092         GOCMD
F55C BDE4DC           (       comfile.os):00093                 JSR     SKIP                              ;ADVANCE
F55F 813F             (       comfile.os):00094                 CMPA    #'?'                              ;COMMAND CODE
F561 2659             (       comfile.os):00095                 BNE     EXDCOM                            ;NO, SKIP IT
F563 ECA1             (       comfile.os):00096                 LDD     ,Y++                              ;GET OPERAND
F565 BDE4DC           (       comfile.os):00097                 JSR     SKIP
                      (       comfile.os):00098         ;* '?O' OUTPUT LINE
F568 C14F             (       comfile.os):00099                 CMPB    #'O'                              ;OUTPUT?
F56A 2704             (       comfile.os):00100                 BEQ     CMPR
                      (       comfile.os):00101         ;* '?P' ONTPUT LINE - CR
F56C C150             (       comfile.os):00102                 CMPB    #'P'                              ;PRINT?
F56E 2616             (       comfile.os):00103                 BNE     RCOND                             ;CONDITIONAL
F570                  (       comfile.os):00104         CMPR
F570 A6A0             (       comfile.os):00105                 LDA     ,Y+                               ;GET LINE
F572 2709             (       comfile.os):00106                 BEQ     CMPR1
F574 810D             (       comfile.os):00107                 CMPA    #$0D
F576 2705             (       comfile.os):00108                 BEQ     CMPR1
F578 BDE59A           (       comfile.os):00109                 JSR     PUTCHR
F57B 20F3             (       comfile.os):00110                 BRA     CMPR
F57D                  (       comfile.os):00111         CMPR1
F57D C14F             (       comfile.os):00112                 CMPB    #'O'                              ;OUTPUT?
F57F 2766             (       comfile.os):00113                 BEQ     CMDRT1                            ;NO LFCR
F581 BDE588           (       comfile.os):00114                 JSR     LFCR
F584 2061             (       comfile.os):00115                 BRA     CMDRT1                            ;BACK
                      (       comfile.os):00116         ;* '?F' EXECUTE ON LAST COMMAND FAILED
F586                  (       comfile.os):00117         RCOND
F586 C146             (       comfile.os):00118                 CMPB    #'F'                              ;?F?
F588 2607             (       comfile.os):00119                 BNE     RSUCC                             ;NO
F58A B604F0           (       comfile.os):00120                 LDA     >CMDRC                            ;GET RC
F58D 2758             (       comfile.os):00121                 BEQ     CMDRT1                            ;RETURN
F58F 20CB             (       comfile.os):00122                 BRA     GOCMD                             ;EXECUTE THIS
                      (       comfile.os):00123         ;* '?S' EXECUTE ON LAST COMMAND SUCESSFUL
F591                  (       comfile.os):00124         RSUCC
F591 C153             (       comfile.os):00125                 CMPB    #'S'                              ;?S?
F593 2603             (       comfile.os):00126                 BNE     CSRC                              ;NO, TRY EXIT
F595 5F               (       comfile.os):00127                 CLRB
F596 2009             (       comfile.os):00128                 BRA     TSTRET                            ;PEFORM TEST
                      (       comfile.os):00129         ;* '?R' EXECUTE ON SPECIFIC RETURN CODE
F598                  (       comfile.os):00130         CSRC
F598 C152             (       comfile.os):00131                 CMPB    #'R'                              ;?R?
F59A 260C             (       comfile.os):00132                 BNE     CEXIT                             ;TRY EXIT
F59C BDE411           (       comfile.os):00133                 JSR     GETNUM                            ;GET VALUE
F59F 1F10             (       comfile.os):00134                 TFR     X,D                               ;COPY
F5A1                  (       comfile.os):00135         TSTRET
F5A1 F104F0           (       comfile.os):00136                 CMPB    >CMDRC                            ;WUZ THIS IT?
F5A4 2641             (       comfile.os):00137                 BNE     CMDRT1                            ;NO, DONT EXECUTE
F5A6 20B4             (       comfile.os):00138                 BRA     GOCMD                             ;DO IT
                      (       comfile.os):00139         ;* '?E' EXIT COMMAND FILE
F5A8                  (       comfile.os):00140         CEXIT
F5A8 C145             (       comfile.os):00141                 CMPB    #'E'                              ;EXIT
F5AA 263E             (       comfile.os):00142                 BNE     CMDIN                             ;NO, TRY SET VARIABLES
F5AC BDE4DC           (       comfile.os):00143                 JSR     SKIP                              ;ANY OPERANDS
F5AF 2708             (       comfile.os):00144                 BEQ     CEXI                              ;NO
F5B1 BDE411           (       comfile.os):00145                 JSR     GETNUM                            ;GT VALUE
F5B4 1F10             (       comfile.os):00146                 TFR     X,D                               ;COPY
F5B6 F704F0           (       comfile.os):00147                 STB     >CMDRC                            ;SET IT
F5B9                  (       comfile.os):00148         CEXI
F5B9 7EF4B6           (       comfile.os):00149                 JMP     CMDEOF                            ;END OF FILE
                      (       comfile.os):00150         ;* EXECUTE DOS COMMAND
F5BC                  (       comfile.os):00151         EXDCOM
F5BC BE04EC           (       comfile.os):00152                 LDX     >CMDOFF                           ;GET OFFSET
F5BF FC04EA           (       comfile.os):00153                 LDD     >CMDSEC                           ;GET SECTOR
F5C2 3416             (       comfile.os):00154                 PSHS    A,B,X                             ;SAVE
F5C4 B604E9           (       comfile.os):00155                 LDA     >CMDDRV                           ;GET DRIVE
F5C7 3402             (       comfile.os):00156                 PSHS    A                                 ;SAVE
F5C9 10FF04EE         (       comfile.os):00157                 STS     >CMDSTK                           ;SET STACK
F5CD BDE1CD           (       comfile.os):00158                 JSR     EXECMD                            ;EXECUTE
F5D0                  (       comfile.os):00159         CMDRET
F5D0 2601             (       comfile.os):00160                 BNE     CMDRT0
F5D2 4F               (       comfile.os):00161                 CLRA
F5D3                  (       comfile.os):00162         CMDRT0
F5D3 B704F0           (       comfile.os):00163                 STA     >CMDRC                            ;SET RC
F5D6 10FE04EE         (       comfile.os):00164                 LDS     >CMDSTK                           ;GET STACK
F5DA 3502             (       comfile.os):00165                 PULS    A                                 ;RESTORE DRIVE
F5DC B704E9           (       comfile.os):00166                 STA     >CMDDRV                           ;RESAVE
F5DF 3516             (       comfile.os):00167                 PULS    A,B,X                             ;RESTORE VARS
F5E1 FD04EA           (       comfile.os):00168                 STD     >CMDSEC                           ;RESET SECTOR
F5E4 BF04EC           (       comfile.os):00169                 STX     >CMDOFF                           ;RESET OFFSET
F5E7                  (       comfile.os):00170         CMDRT1
F5E7 7EF4FD           (       comfile.os):00171                 JMP     NEWLIN                            ;LFCR & RETURN
                      (       comfile.os):00172         ;* '?=' SET COMMAND FILE VARIABLES
F5EA                  (       comfile.os):00173         CMDIN
F5EA C13D             (       comfile.os):00174                 CMPB    #'='
F5EC 2707             (       comfile.os):00175                 BEQ     SETVAR                            ;SET THEM
                      (       comfile.os):00176         ;* '?I' INPUT NEW PARMS
F5EE C149             (       comfile.os):00177                 CMPB    #'I'                              ;NEW PARMS?
F5F0 2618             (       comfile.os):00178                 BNE     CHAIN                             ;NO, TRY CHAIN
F5F2 BDE4A5           (       comfile.os):00179                 JSR     GLINE                             ;GET LINE
F5F5                  (       comfile.os):00180         SETVAR
F5F5 8D02             (       comfile.os):00181                 BSR     SAVPRM                            ;SAVE THEM
F5F7 20EE             (       comfile.os):00182                 BRA     CMDRT1                            ;CONTINUE
                      (       comfile.os):00183         ;* SAVE COMMAND LINE PARAMETERS IN BUFFER
F5F9                  (       comfile.os):00184         SAVPRM
F5F9 3410             (       comfile.os):00185                 PSHS    X                                 ;SAVE REGS
F5FB 8E04F5           (       comfile.os):00186                 LDX     #CMDBUF                           ;POINT TO IT
F5FE                  (       comfile.os):00187         SAVP1
F5FE A6A0             (       comfile.os):00188                 LDA     ,Y+                               ;GET IT
F600 A780             (       comfile.os):00189                 STA     ,X+                               ;WRITE IT
F602 2704             (       comfile.os):00190                 BEQ     SAVP2                             ;END
F604 810D             (       comfile.os):00191                 CMPA    #$0D                              ;OK?
F606 26F6             (       comfile.os):00192                 BNE     SAVP1                             ;KEEP GOING
F608                  (       comfile.os):00193         SAVP2
F608 3590             (       comfile.os):00194                 PULS    X,PC                              ;GO HOME
                      (       comfile.os):00195         ;* '?@' CHAIN TO NEW CMD FILE
F60A                  (       comfile.os):00196         CHAIN
F60A C140             (       comfile.os):00197                 CMPB    #'@'
F60C 2608             (       comfile.os):00198                 BNE     CMDSKP
F60E 3506             (       comfile.os):00199                 PULS    A,B                               ;RESTORE STACK
F610 FD04EE           (       comfile.os):00200                 STD     >CMDSTK                           ;RESET SAVED STACK
F613 7EF4C4           (       comfile.os):00201                 JMP     CMDEX                             ;EXECUTE IT
                      (       comfile.os):00202         ;* '?A' ADVANCE LINES
F616                  (       comfile.os):00203         CMDSKP
F616 C141             (       comfile.os):00204                 CMPB    #'A'                              ;?A?
F618 2613             (       comfile.os):00205                 BNE     CMDKEY                            ;CONTINUE
F61A BDE411           (       comfile.os):00206                 JSR     GETNUM                            ;GET # TO SKIP
F61D 3001             (       comfile.os):00207                 LEAX    1,X                               ;ADVANCE
F61F                  (       comfile.os):00208         LOCLP
F61F 301F             (       comfile.os):00209                 LEAX    -1,X                              ;REDUCE COUNT
F621 27C4             (       comfile.os):00210                 BEQ     CMDRT1                            ;NEW LINE
F623                  (       comfile.os):00211         LOCCR
F623 8D48             (       comfile.os):00212                 BSR     RCCHR                             ;READ A CHAR
F625 2792             (       comfile.os):00213                 BEQ     CEXI                              ;END OF FILE
F627 810D             (       comfile.os):00214                 CMPA    #$0D                              ;END OF LINE?
F629 26F8             (       comfile.os):00215                 BNE     LOCCR                             ;NO, KEEP LOOKING
F62B 20F2             (       comfile.os):00216                 BRA     LOCLP                             ;DO THEM ALL
                      (       comfile.os):00217         ;* '?K' READ SINGLE KEY
F62D                  (       comfile.os):00218         CMDKEY
F62D C14B             (       comfile.os):00219                 CMPB    #'K'                              ;?K?
F62F 2608             (       comfile.os):00220                 BNE     CMDCMP                            ;NO, TRY COMPARE
F631 BDE5DA           (       comfile.os):00221                 JSR     GETCHR                            ;GET SINGLE KEY
F634 B704F0           (       comfile.os):00222                 STA     >CMDRC                            ;SAVE RETURN CODE
F637 2031             (       comfile.os):00223                 BRA     CMDRT2                            ;EXIT
                      (       comfile.os):00224         ;* '??' COMPARE STRINGS
F639                  (       comfile.os):00225         CMDCMP
F639 C13F             (       comfile.os):00226                 CMPB    #'?'                              ;???
F63B 262D             (       comfile.os):00227                 BNE     CMDRT2                            ;IGNORE
F63D BDE4DC           (       comfile.os):00228                 JSR     SKIP                              ;TEST FOR EOL
F640 2716             (       comfile.os):00229                 BEQ     CMDC3                             ;FAIL
F642 1F21             (       comfile.os):00230                 TFR     Y,X                               ;SAVE PTR
F644                  (       comfile.os):00231         CMDC1
F644 A6A0             (       comfile.os):00232                 LDA     ,Y+                               ;GET CHAR
F646 810D             (       comfile.os):00233                 CMPA    #$0D                              ;CR?
F648 270E             (       comfile.os):00234                 BEQ     CMDC3                             ;FAIL
F64A 8120             (       comfile.os):00235                 CMPA    #' '                              ;SPACE?
F64C 26F6             (       comfile.os):00236                 BNE     CMDC1                             ;KEEP LOOKING
F64E                  (       comfile.os):00237         CMDC2
F64E A680             (       comfile.os):00238                 LDA     ,X+                               ;GET CHAR
F650 8120             (       comfile.os):00239                 CMPA    #' '                              ;SPACE?
F652 2708             (       comfile.os):00240                 BEQ     CMDC4                             ;END
F654 A1A0             (       comfile.os):00241                 CMPA    ,Y+                               ;ARE THEY SAME?
F656 27F6             (       comfile.os):00242                 BEQ     CMDC2                             ;YES, A-OK
F658                  (       comfile.os):00243         CMDC3
F658 86FF             (       comfile.os):00244                 LDA     #255                              ;RETURN CODE
F65A 200B             (       comfile.os):00245                 BRA     CMDC6                             ;QUIT
F65C                  (       comfile.os):00246         CMDC4
F65C A6A0             (       comfile.os):00247                 LDA     ,Y+                               ;GET CHAR FROM SOURCE
F65E 810D             (       comfile.os):00248                 CMPA    #$0D                              ;PASS?
F660 2704             (       comfile.os):00249                 BEQ     CMDC5                             ;YES
F662 8120             (       comfile.os):00250                 CMPA    #' '                              ;SPACE
F664 26F2             (       comfile.os):00251                 BNE     CMDC3                             ;NO, FAIL
F666                  (       comfile.os):00252         CMDC5
F666 4F               (       comfile.os):00253                 CLRA                                      ;ZERO RETURN CODE
F667                  (       comfile.os):00254         CMDC6
F667 B704F0           (       comfile.os):00255                 STA     >CMDRC                            ;SAVE RETURN CODE
F66A                  (       comfile.os):00256         CMDRT2
F66A 7EF4FD           (       comfile.os):00257                 JMP     NEWLIN                            ;NEXT LINE
                      (       comfile.os):00258         ;* READ A CHARACTER FROM THE COMMAND FILE
F66D                  (       comfile.os):00259         RCCHR
F66D 3410             (       comfile.os):00260                 PSHS    X                                 ;SAVE X
F66F B604E9           (       comfile.os):00261                 LDA     >CMDDRV                           ;GET CMD FILE DRIVE
F672 B704F3           (       comfile.os):00262                 STA     >SDRIVE                           ;SET DRIVE
F675 FC04EC           (       comfile.os):00263                 LDD     >CMDOFF                           ;GET OFFSET
F678                  (       comfile.os):00264         RCC1
F678 10830200         (       comfile.os):00265                 CMPD    #512                              ;OVER?
F67C 250D             (       comfile.os):00266                 BLO     RCC2                              ;ITS OK
F67E FC04EA           (       comfile.os):00267                 LDD     >CMDSEC                           ;GET SECTOR
F681 BDE5DF           (       comfile.os):00268                 JSR     FNDLNK                            ;LOOK UP LINK
F684 271E             (       comfile.os):00269                 BEQ     RCC3                              ;END
F686 FD04EA           (       comfile.os):00270                 STD     >CMDSEC                           ;RESAVE
F689 4F               (       comfile.os):00271                 CLRA    ZERO OFFSET
F68A 5F               (       comfile.os):00272                 CLRB    FOR READ
F68B                  (       comfile.os):00273         RCC2
F68B 8E0600           (       comfile.os):00274                 LDX     #WRKSPC                           ;POINT TO IT
F68E 308B             (       comfile.os):00275                 LEAX    D,X                               ;OFFSET
F690 C30001           (       comfile.os):00276                 ADDD    #1                                ;ADVANCE
F693 FD04EC           (       comfile.os):00277                 STD     >CMDOFF                           ;RESAVE
F696 3410             (       comfile.os):00278                 PSHS    X                                 ;SAVE REGS
F698 FC04EA           (       comfile.os):00279                 LDD     >CMDSEC                           ;GET SECTOR
F69B BDE5FC           (       comfile.os):00280                 JSR     RDWRK                             ;READ IT
F69E 3510             (       comfile.os):00281                 PULS    X                                 ;RESTORE
F6A0 A680             (       comfile.os):00282                 LDA     ,X+                               ;GET CHAR
F6A2 81FF             (       comfile.os):00283                 CMPA    #$FF                              ;END OF FILE
F6A4                  (       comfile.os):00284         RCC3
F6A4 3590             (       comfile.os):00285                 PULS    X,PC
                      (        cubix.asm):01201         ;*
                      (        cubix.asm):01202         ;* MISC SYSTEM CALLS
                      (        cubix.asm):01203         ;*
                      (        cubix.asm):01204         ;* QUERY CONSOLE INPUT DEVICE
F6A6                  (        cubix.asm):01205         REDIN
F6A6 B6046C           (        cubix.asm):01206                 LDA     >CONIN                            ;LOAD DEVICE INPUT VECTOR
F6A9 2020             (        cubix.asm):01207                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01208         ;* QUERY CONSOLE OUTPUT DEVICE
F6AB                  (        cubix.asm):01209         REDOUT
F6AB B6046D           (        cubix.asm):01210                 LDA     >CONOUT                           ;LOAD DEVICE OUTPUT VECTOR
F6AE 201B             (        cubix.asm):01211                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01212         ;* SET CONSOLE INPUT DEVICE
F6B0                  (        cubix.asm):01213         SETIN
F6B0 3404             (        cubix.asm):01214                 PSHS    B                                 ;SAVE REGISTER
F6B2 F6046C           (        cubix.asm):01215                 LDB     >CONIN                            ;LOAD OLD INPUT DEVICE
F6B5 B7046C           (        cubix.asm):01216                 STA     >CONIN                            ;SAVE NEW INPUT DEVICE
F6B8 2008             (        cubix.asm):01217                 BRA     REEXG                             ;SWAP & RETURN
                      (        cubix.asm):01218         ;* SET CONSOLE OUTPUT DEVICE
F6BA                  (        cubix.asm):01219         SETOUT
F6BA 3404             (        cubix.asm):01220                 PSHS    B                                 ;SAVE REGISTER
F6BC F6046D           (        cubix.asm):01221                 LDB     >CONOUT                           ;LOAD OLD OUTPUT DEVICE
F6BF B7046D           (        cubix.asm):01222                 STA     >CONOUT                           ;SAVE NEW OUTPUT DEVICE
F6C2                  (        cubix.asm):01223         REEXG
F6C2 1F98             (        cubix.asm):01224                 TFR     B,A                               ;COPY OLD DEVICE ID TO 'A'
F6C4 1A04             (        cubix.asm):01225                 ORCC    #4                                ;SET 'Z' CODE
F6C6 3584             (        cubix.asm):01226                 PULS    B,PC                              ;RESTORE & RETURN
                      (        cubix.asm):01227         ;* SELECT DISK DRIVE
F6C8                  (        cubix.asm):01228         SELDRV
F6C8 B704F3           (        cubix.asm):01229                 STA     >SDRIVE                           ;SELECT ACTIVE DISK DRIVE
F6CB                  (        cubix.asm):01230         RETZ
F6CB 1A04             (        cubix.asm):01231                 ORCC    #4                                ;SET 'Z' CODE
F6CD 39               (        cubix.asm):01232                 RTS
                      (        cubix.asm):01233         ;* QUERY DEVICE VECTOR
F6CE                  (        cubix.asm):01234         QVECT
F6CE 3440             (        cubix.asm):01235                 PSHS    U                                 ;SAVE REGISTER
F6D0 CE046E           (        cubix.asm):01236                 LDU     #DITAB                            ;POINT TO TABLE
F6D3 48               (        cubix.asm):01237                 LSLA                                      ;X2 FOR WORD ENTRIES
F6D4 ECC6             (        cubix.asm):01238                 LDD     A,U                               ;GET VECTOR
F6D6 200C             (        cubix.asm):01239                 BRA     RETZ1                             ;AND EXIT
                      (        cubix.asm):01240         ;* SET DEVICE VECTOR
F6D8                  (        cubix.asm):01241         SVECT
F6D8 3440             (        cubix.asm):01242                 PSHS    U                                 ;SAVE REGISTER
F6DA CE046E           (        cubix.asm):01243                 LDU     #DITAB                            ;POINT TO TABLE
F6DD 48               (        cubix.asm):01244                 LSLA                                      ;X2  FOR WORD ENTRIES
F6DE 33C6             (        cubix.asm):01245                 LEAU    A,U                               ;OFFSET TO ENTRY
F6E0 ECC4             (        cubix.asm):01246                 LDD     ,U                                ;GET OLD VECTOR VALUE
F6E2 AFC4             (        cubix.asm):01247                 STX     ,U                                ;SET NEW VECTOR VALUE
F6E4                  (        cubix.asm):01248         RETZ1
F6E4 1A04             (        cubix.asm):01249                 ORCC    #4                                ;SET 'Z' CODE
F6E6 35C0             (        cubix.asm):01250                 PULS    U,PC                              ;RESTORE & RETURN
F6E8                  (        cubix.asm):01251         GETDRVTBL                                         ;SSR 111-GET DRIVE TABLE
F6E8 CC04B7           (        cubix.asm):01252                 LDD     #DRIVEMAP
F6EB 39               (        cubix.asm):01253                 RTS
F6EC                  (        cubix.asm):01254         GETDRVPTBL                                        ;SSR 112-GET DRIVE PARAMETER TABLE
F6EC CC0450           (        cubix.asm):01255                 LDD     #DCTRL
F6EF 39               (        cubix.asm):01256                 RTS
                      (        cubix.asm):01257         ;*
                      (        cubix.asm):01258         ;* PERFORMS 16 BIT MULTIPLICATION (D=X*D)
                      (        cubix.asm):01259         ;*
F6F0                  (        cubix.asm):01260         MUL16
F6F0 3416             (        cubix.asm):01261                 PSHS    D,X                               ;SAVE PARAMETERS
F6F2 A661             (        cubix.asm):01262                 LDA     1,S
F6F4 E663             (        cubix.asm):01263                 LDB     3,S
F6F6 3D               (        cubix.asm):01264                 MUL
F6F7 3406             (        cubix.asm):01265                 PSHS    A,B                               ;RESAVE
F6F9 A662             (        cubix.asm):01266                 LDA     2,S
F6FB E665             (        cubix.asm):01267                 LDB     5,S
F6FD 3D               (        cubix.asm):01268                 MUL
F6FE EBE4             (        cubix.asm):01269                 ADDB    ,S
F700 E7E4             (        cubix.asm):01270                 STB     ,S
F702 A663             (        cubix.asm):01271                 LDA     3,S
F704 E664             (        cubix.asm):01272                 LDB     4,S
F706 3D               (        cubix.asm):01273                 MUL
F707 EBE4             (        cubix.asm):01274                 ADDB    ,S
F709 E7E4             (        cubix.asm):01275                 STB     ,S
F70B 3506             (        cubix.asm):01276                 PULS    A,B                               ;GET RESULT
F70D 3264             (        cubix.asm):01277                 LEAS    4,S                               ;SKIP CRAP
F70F 39               (        cubix.asm):01278                 RTS
                      (        cubix.asm):01279         ;*
                      (        cubix.asm):01280         ;* PERFORMS 16 BIT DIVISION. (X=X/D, D=REMAINDER)
                      (        cubix.asm):01281         ;*
F710                  (        cubix.asm):01282         DIV16
F710 3416             (        cubix.asm):01283                 PSHS    D,X
F712 CC0000           (        cubix.asm):01284                 LDD     #0
F715 8E0011           (        cubix.asm):01285                 LDX     #17
F718                  (        cubix.asm):01286         DIV1
F718 1CFE             (        cubix.asm):01287                 ANDCC   #$FE
F71A                  (        cubix.asm):01288         DIV2
F71A 6963             (        cubix.asm):01289                 ROL     3,S
F71C 6962             (        cubix.asm):01290                 ROL     2,S
F71E 301F             (        cubix.asm):01291                 LEAX    -1,X
F720 270D             (        cubix.asm):01292                 BEQ     DIV3
F722 59               (        cubix.asm):01293                 ROLB
F723 49               (        cubix.asm):01294                 ROLA
F724 10A3E4           (        cubix.asm):01295                 CMPD    ,S
F727 25EF             (        cubix.asm):01296                 BLO     DIV1
F729 A3E4             (        cubix.asm):01297                 SUBD    ,S
F72B 1A01             (        cubix.asm):01298                 ORCC    #1
F72D 20EB             (        cubix.asm):01299                 BRA     DIV2
F72F                  (        cubix.asm):01300         DIV3
F72F 3262             (        cubix.asm):01301                 LEAS    2,S
F731 3590             (        cubix.asm):01302                 PULS    X,PC
                      (        cubix.asm):01303         ;* DISK DRIVERS
F733                  (        cubix.asm):01304         FORMAT
F733 AD9F0494         (        cubix.asm):01305                 JSR     [XFORMAT]
F737                  (        cubix.asm):01306         HOME
F737 6F44             (        cubix.asm):01307                 CLR     CYL,U                             ;CYLINDER 0
F739 6F45             (        cubix.asm):01308                 CLR     HEAD,U                            ;HEAD 0
F73B 6F46             (        cubix.asm):01309                 CLR     SEC,U                             ;SECTOR 0
F73D 6E9F048E         (        cubix.asm):01310                 JMP     [XHOME]
F741                  (        cubix.asm):01311         RDSEC
F741 6E9F0490         (        cubix.asm):01312                 JMP     [XRDSEC]
F745                  (        cubix.asm):01313         WRSEC
F745 6E9F0492         (        cubix.asm):01314                 JMP     [XWRSEC]
                      (        cubix.asm):01315         ;* INTERRUPT HANDLERS
F749                  (        cubix.asm):01316         SWI
F749 6E9F0496         (        cubix.asm):01317                 JMP     [SWIVEC]
F74D                  (        cubix.asm):01318         SWI2
F74D 6E9F0498         (        cubix.asm):01319                 JMP     [SWI2VEC]
F751                  (        cubix.asm):01320         SWI3
F751 6E9F049A         (        cubix.asm):01321                 JMP     [SWI3VEC]
F755                  (        cubix.asm):01322         IRQ
F755 6E9F049C         (        cubix.asm):01323                 JMP     [IRQVEC]
F759                  (        cubix.asm):01324         FIRQ
F759 6E9F049E         (        cubix.asm):01325                 JMP     [FIRQVEC]
F75D                  (        cubix.asm):01326         NMI
F75D 6E9F04A0         (        cubix.asm):01327                 JMP     [NMIVEC]
                      (        cubix.asm):01328         ;* STRINGS & MESSAGES
F761                  (        cubix.asm):01329         IPLFILE
F761 535441525455502E (        cubix.asm):01330                 FCC     'STARTUP.*'
     2A
F76A 00               (        cubix.asm):01331                 FCB     $00
F76B                  (        cubix.asm):01332         UNCMD
F76B 556E7265636F676E (        cubix.asm):01333                 FCC     'Unrecognized command'
     697A656420636F6D
     6D616E64
F77F 00               (        cubix.asm):01334                 FCB     $00
F780                  (        cubix.asm):01335         BADOPM
F780 4F706572616E6420 (        cubix.asm):01336                 FCC     'Operand missing or invalid'
     6D697373696E6720
     6F7220696E76616C
     6964
F79A 00               (        cubix.asm):01337                 FCB     $00
F79B                  (        cubix.asm):01338         NOTMSG
F79B 46696C65206E6F74 (        cubix.asm):01339                 FCC     'File not found'
     20666F756E64
F7A9 00               (        cubix.asm):01340                 FCB     $00
F7AA                  (        cubix.asm):01341         EXIMSG
F7AA 46696C6520616C72 (        cubix.asm):01342                 FCC     'File already exists'
     6561647920657869
     737473
F7BD 00               (        cubix.asm):01343                 FCB     $00
F7BE                  (        cubix.asm):01344         NOSMSG
F7BE 496E737566666963 (        cubix.asm):01345                 FCC     'Insufficent disk space'
     656E74206469736B
     207370616365
F7D4 00               (        cubix.asm):01346                 FCB     $00
F7D5                  (        cubix.asm):01347         OREMSG
F7D5 46696C65206E6F74 (        cubix.asm):01348                 FCC     'File not open for read'
     206F70656E20666F
     722072656164
F7EB 00               (        cubix.asm):01349                 FCB     $00
F7EC                  (        cubix.asm):01350         OWEMSG
F7EC 46696C65206E6F74 (        cubix.asm):01351                 FCC     'File not open for write'
     206F70656E20666F
     72207772697465
F803 00               (        cubix.asm):01352                 FCB     $00
F804                  (        cubix.asm):01353         PROMSG
F804 46696C652070726F (        cubix.asm):01354                 FCC     'File protection violation'
     74656374696F6E20
     76696F6C6174696F
     6E
F81D 00               (        cubix.asm):01355                 FCB     $00
F81E                  (        cubix.asm):01356         DEVMSG
F81E 496E76616C696420 (        cubix.asm):01357                 FCC     'Invalid device'
     646576696365
F82C 00               (        cubix.asm):01358                 FCB     $00
F82D                  (        cubix.asm):01359         DNLMSG
F82D 446F776E6C6F6164 (        cubix.asm):01360                 FCC     'Download format error'
     20666F726D617420
     6572726F72
F842 00               (        cubix.asm):01361                 FCB     $00
                      (        cubix.asm):01362         ;* COMMAND NAME TABLE
F843                  (        cubix.asm):01363         CMDNAM
F843 84               (        cubix.asm):01364                 FCB     $84
F844 464F524D4154     (        cubix.asm):01365                 FCC     'FORMAT'
F84A 82               (        cubix.asm):01366                 FCB     $82
F84B 52454144         (        cubix.asm):01367                 FCC     'READ'
F84F 82               (        cubix.asm):01368                 FCB     $82
F850 5752495445       (        cubix.asm):01369                 FCC     'WRITE'
F855 82               (        cubix.asm):01370                 FCB     $82
F856 46494C4553       (        cubix.asm):01371                 FCC     'FILES'
F85B 82               (        cubix.asm):01372                 FCB     $82
F85C 435245415445     (        cubix.asm):01373                 FCC     'CREATE'
F862 83               (        cubix.asm):01374                 FCB     $83
F863 44454C455445     (        cubix.asm):01375                 FCC     'DELETE'
F869 82               (        cubix.asm):01376                 FCB     $82
F86A 4C4F4144         (        cubix.asm):01377                 FCC     'LOAD'
F86E 82               (        cubix.asm):01378                 FCB     $82
F86F 53415645         (        cubix.asm):01379                 FCC     'SAVE'
F873 82               (        cubix.asm):01380                 FCB     $82
F874 52554E           (        cubix.asm):01381                 FCC     'RUN'
F877 82               (        cubix.asm):01382                 FCB     $82
F878 52455455524E     (        cubix.asm):01383                 FCC     'RETURN'
F87E 82               (        cubix.asm):01384                 FCB     $82
F87F 534554           (        cubix.asm):01385                 FCC     'SET'
F882 82               (        cubix.asm):01386                 FCB     $82
F883 53484F57         (        cubix.asm):01387                 FCC     'SHOW'
F887 82               (        cubix.asm):01388                 FCB     $82
F888 444F574E4C4F4144 (        cubix.asm):01389                 FCC     'DOWNLOAD'
F890 82               (        cubix.asm):01390                 FCB     $82
F891 434F4E4E454354   (        cubix.asm):01391                 FCC     'CONNECT'
F898 80               (        cubix.asm):01392                 FCB     $80
                      (        cubix.asm):01393         ;* COMMAND ADDRESS TABLE
F899                  (        cubix.asm):01394         CMDADR
F899 EC03             (        cubix.asm):01395                 FDB     INIT
F89B ED59             (        cubix.asm):01396                 FDB     CREAD
F89D ED89             (        cubix.asm):01397                 FDB     CWRITE
F89F EDB9             (        cubix.asm):01398                 FDB     FILES
F8A1 EDDD             (        cubix.asm):01399                 FDB     CREFIL
F8A3 EDF4             (        cubix.asm):01400                 FDB     DELFIL
F8A5 EEA7             (        cubix.asm):01401                 FDB     LODFIL
F8A7 EED8             (        cubix.asm):01402                 FDB     SAVFIL
F8A9 E1F7             (        cubix.asm):01403                 FDB     RUN
F8AB EF39             (        cubix.asm):01404                 FDB     RETURN
F8AD F052             (        cubix.asm):01405                 FDB     SET
F8AF F18A             (        cubix.asm):01406                 FDB     SHOW
F8B1 EF60             (        cubix.asm):01407                 FDB     DNLD
F8B3 F02E             (        cubix.asm):01408                 FDB     CNCT
     000E             (        cubix.asm):01409         NUMCMD          EQU (*-CMDADR)/2                  ;NUMBER OF COMMANDS
                      (        cubix.asm):01410         ;* APPLICATION PROGRAM INTERFACE ADDRESS TABLE
F8B5                  (        cubix.asm):01411         SSRTAB
F8B5 E1AC             (        cubix.asm):01412                 FDB     REENT                             ;00-DOS RE-ENTRY
                      (        cubix.asm):01413         ;* PARAM. & LINE INPUT
F8B7 E4A5             (        cubix.asm):01414                 FDB     GLINE                             ;01-GET LINE/PROMPT
F8B9 E4A2             (        cubix.asm):01415                 FDB     GLFCR                             ;02-GET LINE/NEW LINE
F8BB E4AA             (        cubix.asm):01416                 FDB     GLNOP                             ;03-GET LINE/NO PROMPT
F8BD E4DC             (        cubix.asm):01417                 FDB     SKIP                              ;04-SKIP TO NEXT NON-BLANK, 'Z' IF EOL
F8BF E4E9             (        cubix.asm):01418                 FDB     TSTERM                            ;05-GET CHR(Y+), TEST FOR TERMINATOR
F8C1 E456             (        cubix.asm):01419                 FDB     GETDEC                            ;06-GET DECIMAL NUMBER
F8C3 E41C             (        cubix.asm):01420                 FDB     GETHEX                            ;07-GET HEX NUMBER
F8C5 E411             (        cubix.asm):01421                 FDB     GETNUM                            ;08-GET DECIMAL OR HEX VALUE
F8C7 E377             (        cubix.asm):01422                 FDB     GETNAM                            ;09-GET FILENAME
F8C9 E370             (        cubix.asm):01423                 FDB     GETVAL                            ;10-GET & INSURE SINGLE FILE
F8CB E296             (        cubix.asm):01424                 FDB     GETSNA                            ;11-GET FILENAME/NO TYPE
F8CD E31A             (        cubix.asm):01425                 FDB     GETSYS                            ;12-GET FILENAME/NO TYPE/DEFAULT SYSTEM
F8CF E31D             (        cubix.asm):01426                 FDB     GETSDI                            ;13-GET FILENAME/NO TYPE/DEFAULT(X)
F8D1 E3B0             (        cubix.asm):01427                 FDB     GETDIR                            ;14-GET DIRECTORY NAME
F8D3 E3B3             (        cubix.asm):01428                 FDB     GETDIR1                           ;15-GET DIRECTORY, DEFAULT(X)
F8D5 E3FF             (        cubix.asm):01429                 FDB     GETDRV                            ;16-GET DRIVE ID
F8D7 F0C0             (        cubix.asm):01430                 FDB     GETATR                            ;17-GET ATTRIBUTES
F8D9 E505             (        cubix.asm):01431                 FDB     TLOOK                             ;18-TABLE LOOKUP
F8DB E323             (        cubix.asm):01432                 FDB     COMNAM                            ;19-COMPARE NAMES
F8DD E35C             (        cubix.asm):01433                 FDB     VALID                             ;20-TEST FOR VALID AS SINGLE?
                      (        cubix.asm):01434         ;* CONSOLE OUTPUT
F8DF E592             (        cubix.asm):01435                 FDB     SPACE                             ;21-OUTPUT SPACE
F8E1 E588             (        cubix.asm):01436                 FDB     LFCR                              ;22-OUTPUT LFCR
F8E3 E574             (        cubix.asm):01437                 FDB     WRSTR                             ;23-OUTPUT STRING(X)
F8E5 E54E             (        cubix.asm):01438                 FDB     WRLIN                             ;24-OUTPUT STRING(PC)/NO LFCR
F8E7 E57E             (        cubix.asm):01439                 FDB     WRMSG                             ;25-OUTPUT STRING(PC)/LFCR
F8E9 E47E             (        cubix.asm):01440                 FDB     WRDEC                             ;26-OUTPUT WORD(D) DECIMAL
F8EB E545             (        cubix.asm):01441                 FDB     WRHEXW                            ;27-OUTPUT WORD(D) IN HEX
F8ED E55A             (        cubix.asm):01442                 FDB     WRHEX                             ;28-OUTPUT BYTE(A) IN HEX
F8EF E568             (        cubix.asm):01443                 FDB     HOUT                              ;29-OUTPUT NIBBLE(A) IN HEX
F8F1 E6D7             (        cubix.asm):01444                 FDB     SHOSAV                            ;30-DISPLAY SAVED FILENAME
F8F3 E6EA             (        cubix.asm):01445                 FDB     SHONAM                            ;31-DISPLAY FILENAME(X)
F8F5 F2AB             (        cubix.asm):01446                 FDB     SHOTAB                            ;32-SHOW TABLE(X) ENTRY(A)
                      (        cubix.asm):01447         ;* SERIAL DEVICE I/O
F8F7 E59A             (        cubix.asm):01448                 FDB     PUTCHR                            ;33-OUTPUT CHAR(A)
F8F9 E5DA             (        cubix.asm):01449                 FDB     GETCHR                            ;34-GET A CHAR
F8FB E5D3             (        cubix.asm):01450                 FDB     TSTCHR                            ;35-TEST FOR CHAR
F8FD E5A1             (        cubix.asm):01451                 FDB     WRDEV                             ;36-OUTPUT CHAR(A) TO DEVICE(B)
F8FF E5BC             (        cubix.asm):01452                 FDB     RDDEV                             ;37-GET CHAR FROM DEVICE(B)
F901 E5C1             (        cubix.asm):01453                 FDB     TSTDEV                            ;38-TEST FOR CHAR FROM DEV(B)
F903 F6A6             (        cubix.asm):01454                 FDB     REDIN                             ;39-READ INPUT DEVICE NUMBER
F905 F6AB             (        cubix.asm):01455                 FDB     REDOUT                            ;40-READ OUTPUT DEVICE NUMBER
F907 F6B0             (        cubix.asm):01456                 FDB     SETIN                             ;41-SET INPUT DEVICE
F909 F6BA             (        cubix.asm):01457                 FDB     SETOUT                            ;42-SET OUTPUT DEVICE
                      (        cubix.asm):01458         ;* CANNED ERROR MESSAGES
F90B E2B8             (        cubix.asm):01459                 FDB     BADOPR                            ;43-OPERAND MISSING OR INVALID
F90D E65D             (        cubix.asm):01460                 FDB     NOTFND                            ;44-FILE NOT FOUND
F90F E8B2             (        cubix.asm):01461                 FDB     PROERR                            ;45-PROTECTION VIOLATION
F911 E8BB             (        cubix.asm):01462                 FDB     ORERR                             ;46-FILE NOT OPEN FOR READ
F913 E92F             (        cubix.asm):01463                 FDB     OWERR                             ;47-FILE NOT OPEN FOR WRITE
F915 E735             (        cubix.asm):01464                 FDB     FEXISTS                           ;48-FILE ALREADY EXISTS
F917 E7D8             (        cubix.asm):01465                 FDB     NOSPAC                            ;49-INSUFFICENT DISK SPACE
F919 E5B4             (        cubix.asm):01466                 FDB     BADDEV                            ;50-INVALID DEVICE
F91B F000             (        cubix.asm):01467                 FDB     LODERR                            ;51-DOWNLOAD FORMAT ERROR
F91D E663             (        cubix.asm):01468                 FDB     FILERR                            ;52-ISSUE ERROR MSG(Y) FOR SAVED FILE
                      (        cubix.asm):01469         ;* FILE I/O
F91F EE9B             (        cubix.asm):01470                 FDB     BLOAD                             ;53-LOAD COMPLETE FILE TO MEMORY
F921 EED0             (        cubix.asm):01471                 FDB     BSAVE                             ;54-SAVE COMPLETE FILE FROM MEMORY
F923 E811             (        cubix.asm):01472                 FDB     OPENR                             ;55-OPEN A FILE FOR READ
F925 E8ED             (        cubix.asm):01473                 FDB     OPENW                             ;56-OPEN A FILE FOR WRITE
F927 E975             (        cubix.asm):01474                 FDB     CLOSE                             ;57-CLOSE A FILE
F929 E87E             (        cubix.asm):01475                 FDB     READB                             ;58-READ BLOCK FROM FILE
F92B E833             (        cubix.asm):01476                 FDB     READC                             ;59-READ CHAR FROM FILE
F92D E937             (        cubix.asm):01477                 FDB     WRITEB                            ;60-WRITE A BLOCK TO FILE
F92F E910             (        cubix.asm):01478                 FDB     WRITEC                            ;61-WRITE A CHAR TO FILE
F931 E8C8             (        cubix.asm):01479                 FDB     REWIND                            ;62-RESET FILE TO BEGINNING
F933 E9C4             (        cubix.asm):01480                 FDB     SEEKREL                           ;63-SEEK RELATIVE POSITION IN FILE
F935 E9C1             (        cubix.asm):01481                 FDB     SEEKABS                           ;64-SEEK ABSOLUTE LOCATION IN FILE
F937 EA12             (        cubix.asm):01482                 FDB     FTELL                             ;65-RETURN POSITION IN FILE
F939 EA3E             (        cubix.asm):01483                 FDB     SUSPEND                           ;66-SUSPEND FILE OPERATIONS
F93B EA90             (        cubix.asm):01484                 FDB     RESUME                            ;67-RESUME FILE OPERATIONS
                      (        cubix.asm):01485         ;* FILE SYSTEM MAINTAINENCE
F93D E692             (        cubix.asm):01486                 FDB     LOCDIR                            ;68-LOCATE FILE IN DIRECTORY, NO ERROR/MESSAGE
F93F E659             (        cubix.asm):01487                 FDB     LOCERR                            ;69-LOCATE FILE IN DIR/ISSUE ERROR IF NOT FOUND
F941 E8A8             (        cubix.asm):01488                 FDB     LOCRED                            ;70-LOCATE FILE WITH INTENT TO READ
F943 E8D6             (        cubix.asm):01489                 FDB     LOCWRI                            ;71-LOCATE FILE WITH INTENT TO WRITE
F945 E729             (        cubix.asm):01490                 FDB     CREATE                            ;72-CREATE A FILE
F947 EDF7             (        cubix.asm):01491                 FDB     DELETE                            ;73-DELETE A FILE
F949 F06B             (        cubix.asm):01492                 FDB     SETDEF                            ;74-SET DEFAULT DIRECTORY
F94B F07D             (        cubix.asm):01493                 FDB     SETCMD                            ;75-SET COMMAND DIRECTORY
F94D F6C8             (        cubix.asm):01494                 FDB     SELDRV                            ;76-SET CURRENT OS DRIVE
F94F E5DF             (        cubix.asm):01495                 FDB     FNDLNK                            ;77-LOCATE LINK FOR SECTOR
F951 EEBF             (        cubix.asm):01496                 FDB     LCHAIN                            ;78-LOAD CHAIN OF SECTOR TO MEMORY
F953 E7AF             (        cubix.asm):01497                 FDB     FRESEC                            ;79-ALLOCATE A FREE SECTOR
F955 EE10             (        cubix.asm):01498                 FDB     UNCHAIN                           ;80-RELEASE SECTOR CHAIN
F957 E715             (        cubix.asm):01499                 FDB     DRVSIZ                            ;81-CALCULATE SIZE OF DISK(A)
F959 E712             (        cubix.asm):01500                 FDB     CURSIZ                            ;82-CALCULATE SIZE OF CURRENT DISK
F95B F398             (        cubix.asm):01501                 FDB     CALFRE                            ;83-CALCULATE # FREE SECTORS ON DISK
F95D E5FC             (        cubix.asm):01502                 FDB     RDWRK                             ;84-READ WORK SECTOR INTO DOS
F95F E7A6             (        cubix.asm):01503                 FDB     CHGWRK                            ;85-INDICATE WORK SECTOR CHANGED
F961 E633             (        cubix.asm):01504                 FDB     WRTST                             ;86-WRITE WORK SECTOR IF UPDATED
F963 E638             (        cubix.asm):01505                 FDB     WRWRK                             ;87-WRITE WORK SECTOR UNCONDITIONALLY
F965 E623             (        cubix.asm):01506                 FDB     PURGE                             ;88-CLEAR WORK SECTOR & FORCE READ
F967 EB0E             (        cubix.asm):01507                 FDB     GETCTL1                           ;89-GET CONTROL BLOCK
F969 EB0B             (        cubix.asm):01508                 FDB     GETCTL                            ;90-GET CTRL BLK FOR SELECTED
F96B EAC4             (        cubix.asm):01509                 FDB     SECTOR                            ;91-SET UP CTRL-BLOCK FROM DISK ID
F96D EAE4             (        cubix.asm):01510                 FDB     RDISK                             ;92-READ SECTOR(D) TO MEM(X) FROM DISK
F96F EB17             (        cubix.asm):01511                 FDB     WDISK                             ;93-WRITE SECTOR(D) FROM MEM(X) TO DISK
F971 E6B6             (        cubix.asm):01512                 FDB     DISDIR                            ;94-DISPLAY DISK DIRECTORY
                      (        cubix.asm):01513         ;* DIRECT DISK ACCESS
F973 E004             (        cubix.asm):01514                 FDB     DOINIT                            ;95-INIT HARDWARE
F975 F737             (        cubix.asm):01515                 FDB     HOME                              ;96-HOME HEAD ON DISK
F977 F741             (        cubix.asm):01516                 FDB     RDSEC                             ;97-READ SECTOR FROM TRACK
F979 F745             (        cubix.asm):01517                 FDB     WRSEC                             ;98-WRITE SECTOR FROM TRACK
F97B F733             (        cubix.asm):01518                 FDB     FORMAT                            ;99-FORMAT DISK
                      (        cubix.asm):01519         ;* MISC DOS ROUTINES
F97D E1CD             (        cubix.asm):01520                 FDB     EXECMD                            ;100-EXECUTE DOS COMMAND
F97F E1C2             (        cubix.asm):01521                 FDB     TMPENT                            ;101-TEMPORARY DOS ENTRY
F981 F6CE             (        cubix.asm):01522                 FDB     QVECT                             ;102-QUERY DEVICE VECTOR
F983 F6D8             (        cubix.asm):01523                 FDB     SVECT                             ;103-SET DEVICE VECTOR
F985 F16E             (        cubix.asm):01524                 FDB     SETFLG                            ;104-SET FLAG
F987 F174             (        cubix.asm):01525                 FDB     CLRFLG                            ;105-CLEAR FLAG
F989 F5F9             (        cubix.asm):01526                 FDB     SAVPRM                            ;106-SET COMMAND FILE PARAMETERS
F98B F6F0             (        cubix.asm):01527                 FDB     MUL16                             ;107-16 BIT MULTIPLY (D=X*D)
F98D F710             (        cubix.asm):01528                 FDB     DIV16                             ;108-16 BIT DIVISION (X=X/D, D=REMAINDER)
F98F E08A             (        cubix.asm):01529                 FDB     DMPREG                            ;109-DISPLAY REGISTERS
F991 EFA8             (        cubix.asm):01530                 FDB     DNLDEV                            ;110-DOWNLOAD FROM DEVICE
F993 F6E8             (        cubix.asm):01531                 FDB     GETDRVTBL                         ;111-GET DRIVE TABLE
F995 F6EC             (        cubix.asm):01532                 FDB     GETDRVPTBL                        ;112-GET DRIVE PARAMETER TABLE
     0071             (        cubix.asm):01533         NUMSSR          EQU (*-SSRTAB)/2                  ;# SSR'S IMPLEMENTED
                      (        cubix.asm):01534         ;*
                      (        cubix.asm):01535         ;* HARDWARE DEPENDANT I/O DRIVERS
                      (        cubix.asm):01536         ;*
                      (        cubix.asm):01537                 IFDEF   nhyodyne
                      (        cubix.asm):01538                 INCLUDE ../nhyodyne/drivers.asm
                      (        cubix.asm):01539                 ENDIF
                      (        cubix.asm):01540                 IFDEF   duodyne
                      (        cubix.asm):01541                 INCLUDE ../duodyne/drivers.asm
                      (        cubix.asm):01542                 ENDIF
                      (        cubix.asm):01543                 IFDEF   6809PC
                      (        cubix.asm):01544                 INCLUDE ../6809PC/drivers.asm
                      (../6809PC/drivers):00001         ;       TITLE   I/O DRIVERS
                      (../6809PC/drivers):00002         ;***************************************************************
                      (../6809PC/drivers):00003         ;*     I/O drivers for the CUBIX operating system.             *
                      (../6809PC/drivers):00004         ;***************************************************************
                      (../6809PC/drivers):00005         ;*
                      (../6809PC/drivers):00006         ;* CUBIX SYSTEM ADDRESSES
                      (../6809PC/drivers):00007         ;*
                      (../6809PC/drivers):00008                 INCLUDE cubix_values.asm
                      ( cubix_values.asm):00001         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00002         ;
                      ( cubix_values.asm):00003         ;       6809PC Cubix System storage locations
                      ( cubix_values.asm):00004         ;
                      ( cubix_values.asm):00005         ;  DWERNER 5/17/2025    Initial
                      ( cubix_values.asm):00006         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00007         ; $0000-$00FF DRIVER/PAGER STACK
                      ( cubix_values.asm):00008         ; $0100-$01FF OS Driver Storage
     0100             ( cubix_values.asm):00009         CONSOLEDEVICE   = $0100                           ; (BYTE)
     0101             ( cubix_values.asm):00010         farpointer      = $0101
     0103             ( cubix_values.asm):00011         DISKERROR       = $0103
     0104             ( cubix_values.asm):00012         CURRENTDEVICE   = $0104
     0105             ( cubix_values.asm):00013         CURRENTSLICE    = $0105
     0106             ( cubix_values.asm):00014         CURRENTCYL      = $0106
     0107             ( cubix_values.asm):00015         CURRENTSEC      = $0107
     0108             ( cubix_values.asm):00016         CURRENTHEAD     = $0108
     0109             ( cubix_values.asm):00017         PAGER_D         = $0109
     010B             ( cubix_values.asm):00018         PAGER_X         = $010B
     010D             ( cubix_values.asm):00019         PAGER_Y         = $010D
     010F             ( cubix_values.asm):00020         PAGER_S         = $010F
     0111             ( cubix_values.asm):00021         PAGER_U         = $0111
                      ( cubix_values.asm):00022         
                      ( cubix_values.asm):00023         
                      ( cubix_values.asm):00024         ; $200-$3FF Host Buffer Driver Storage
     0200             ( cubix_values.asm):00025         HSTBUF          = $0200
                      ( cubix_values.asm):00026         ; $400-$7FF OS LOCAL STORAGE
                      ( cubix_values.asm):00027         ; $1000-$1FFF Hardware Access Window
     1000             ( cubix_values.asm):00028         CUBIX_IO_BASE   = $1000                           ; BIOS DEFAULT IO LOCATION
                      ( cubix_values.asm):00029         ; $2000-$DFFF User RAM
                      ( cubix_values.asm):00030         ; $E000-$FFFF CUBIX
                      ( cubix_values.asm):00031         
     C100             ( cubix_values.asm):00032         BANKED_DRIVER_DISPATCHER = $C100
                      (../6809PC/drivers):00009         ;*
                      (../6809PC/drivers):00010         ;* DISK CONTROL BLOCK FORMAT
                      (../6809PC/drivers):00011         ;*
                      (../6809PC/drivers):00012         ;       ORG     0
                      (../6809PC/drivers):00013         ;DRIVE  RMB     1               DRIVE ID (ADDRESS)
                      (../6809PC/drivers):00014         ;NCYL   RMB     1               NUMBER OF CYLINDERS
                      (../6809PC/drivers):00015         ;NHEAD  RMB     1               NUMBER OF HEADS
                      (../6809PC/drivers):00016         ;NSEC   RMB     1               NUMBER OF SECTORS/TRACK
                      (../6809PC/drivers):00017         ;CYL    RMB     1               CURRENT CYLINDER
                      (../6809PC/drivers):00018         ;HEAD   RMB     1               CURRENT HEAD
                      (../6809PC/drivers):00019         ;SEC    RMB     1               CURRENT SECTOR
                      (../6809PC/drivers):00020         ;*
                      (../6809PC/drivers):00021         ;*
                      (../6809PC/drivers):00022         ;* INITIALIZE SYSTEM HARDWARE. ON ENTRY 'Y'
                      (../6809PC/drivers):00023         ;* POINTS TO SYSTEM TABLE TO BE FILLED IN.
                      (../6809PC/drivers):00024         ;*
                      (../6809PC/drivers):00025         ;* INITIALIZE CUBIX SYSTEM TABLE
F997                  (../6809PC/drivers):00026         HWINIT
F997 8EFF09           (../6809PC/drivers):00027                 LDX     #RITAB                            ;POINT TO OUR TABLE
F99A C66F             (../6809PC/drivers):00028                 LDB     #RISIZ                            ;SIZE OF TABLE
F99C                  (../6809PC/drivers):00029         HWIN1
F99C A680             (../6809PC/drivers):00030                 LDA     ,X+                               ;GET A BYTE FROM TABLE
F99E A7A0             (../6809PC/drivers):00031                 STA     ,Y+                               ;WRITE IT TO CUBIX RAM
F9A0 5A               (../6809PC/drivers):00032                 DECB                                      ;REDUCE COUNT
F9A1 26F9             (../6809PC/drivers):00033                 BNE     HWIN1                             ;MOVE ENTIRE TABLE
                      (../6809PC/drivers):00034         
F9A3 8600             (../6809PC/drivers):00035                 LDA     #00
F9A5 B70100           (../6809PC/drivers):00036                 STA     CONSOLEDEVICE                     ; set console device for driver output
                      (../6809PC/drivers):00037         
                      (../6809PC/drivers):00038         ;
F9A8 BDE57E           (../6809PC/drivers):00039                 JSR     WRMSG
F9AB 0A               (../6809PC/drivers):00040                 FCB     $0A
F9AC 5F5F5F5F5F5F5F5F (../6809PC/drivers):00041                 FCC     '______________________________________________________________________'
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F
F9F2 0D0A0D0A         (../6809PC/drivers):00042                 FCB     $0D,$0A,$0D,$0A
F9F6 4375626978202D2D (../6809PC/drivers):00043                 FCC     'Cubix -- detecting hardware'
     2064657465637469
     6E67206861726477
     617265
FA11 0D0A             (../6809PC/drivers):00044                 FCB     $0D,$0A
FA13 5F5F5F5F5F5F5F5F (../6809PC/drivers):00045                 FCC     '______________________________________________________________________'
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F
FA59 00               (../6809PC/drivers):00046                 FCB     0
                      (../6809PC/drivers):00047         ;
FA5A C602             (../6809PC/drivers):00048                 LDB     #02                               ;INIT SERIAL PORT
FA5C BDFB68           (../6809PC/drivers):00049                 JSR     MD_PAGERA
                      (../6809PC/drivers):00050         ;
                      (../6809PC/drivers):00051         ;        LDB     #18                               ;INIT Floppy
                      (../6809PC/drivers):00052         ;        JSR     MD_PAGERA
                      (../6809PC/drivers):00053         ;
FA5F C615             (../6809PC/drivers):00054                 LDB     #21                               ;INIT IDE
FA61 BDFB68           (../6809PC/drivers):00055                 JSR     MD_PAGERA
                      (../6809PC/drivers):00056         ;
                      (../6809PC/drivers):00057         ;        LDB     #27                               ;INIT DSKY/NG
                      (../6809PC/drivers):00058         ;        JSR     MD_PAGERA
                      (../6809PC/drivers):00059         ;
                      (../6809PC/drivers):00060         ;        LDB     #37                               ;INIT FRONT PANEL
                      (../6809PC/drivers):00061         ;        JSR     MD_PAGERA
                      (../6809PC/drivers):00062         ;
                      (../6809PC/drivers):00063         ;        LDB     #40                               ;INIT I2C
                      (../6809PC/drivers):00064         ;        JSR     MD_PAGERA
                      (../6809PC/drivers):00065         ;
                      (../6809PC/drivers):00066         ;       LDB     #24                               ;INIT FP SD
                      (../6809PC/drivers):00067         ;       JSR     MD_PAGERA
                      (../6809PC/drivers):00068         ;
                      (../6809PC/drivers):00069         ;       LDB     #44                               ;Init Front Panel Display
                      (../6809PC/drivers):00070         ;       JSR     MD_PAGERA
                      (../6809PC/drivers):00071         ;
                      (../6809PC/drivers):00072         ;       LDB     #45                               ;Clear Front Panel Display
                      (../6809PC/drivers):00073         ;       JSR     MD_PAGERA
                      (../6809PC/drivers):00074         ;
FA64 BDE57E           (../6809PC/drivers):00075                 JSR     WRMSG
FA67 5F5F5F5F5F5F5F5F (../6809PC/drivers):00076                 FCC     '______________________________________________________________________'
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F5F5F
     5F5F5F5F5F5F
FAAD 00               (../6809PC/drivers):00077                 FCB     0
                      (../6809PC/drivers):00078         ;
FAAE 39               (../6809PC/drivers):00079                 RTS
                      (../6809PC/drivers):00080         
FAAF                  (../6809PC/drivers):00081         WRSER:
FAAF C600             (../6809PC/drivers):00082                 LDB     #00                               ;WRITE SERIAL PORT
FAB1 7EFB68           (../6809PC/drivers):00083                 JMP     MD_PAGERA
                      (../6809PC/drivers):00084         
FAB4                  (../6809PC/drivers):00085         RDSER:
FAB4 C601             (../6809PC/drivers):00086                 LDB     #01                               ;READ SERIAL PORT
FAB6 BDFB68           (../6809PC/drivers):00087                 JSR     MD_PAGERA
FAB9 81FF             (../6809PC/drivers):00088                 CMPA    #$FF
FABB 2703             (../6809PC/drivers):00089                 BEQ     >
FABD 1A04             (../6809PC/drivers):00090                 ORCC    #%00000100                        ; SET 'Z'
FABF 39               (../6809PC/drivers):00091                 RTS
                      (../6809PC/drivers):00092         !
FAC0 86FF             (../6809PC/drivers):00093                 LDA     #$FF                              ; CLEAR 'Z'
FAC2 39               (../6809PC/drivers):00094                 RTS                                       ;
                      (../6809PC/drivers):00095         ;
                      (../6809PC/drivers):00096         
                      (../6809PC/drivers):00097         ;* NULL DEVICE DRIVERS
FAC3                  (../6809PC/drivers):00098         RDNULL
FAC3 86FF             (../6809PC/drivers):00099                 LDA     #$FF                              ;INDICATE NO CHARACTER
FAC5                  (../6809PC/drivers):00100         WRNULL
FAC5 39               (../6809PC/drivers):00101                 RTS     IGNORE OPERATION
                      (../6809PC/drivers):00102         
                      (../6809PC/drivers):00103         ;*
                      (../6809PC/drivers):00104         ;* FORMAT DISK ('U' POINTS TO DCB), INTERLEAVE FACTOR IN 'A'
                      (../6809PC/drivers):00105         ;*
FAC6                  (../6809PC/drivers):00106         DFORMAT
                      (../6809PC/drivers):00107         ;*      LDAA    DRIVE,U                 ; GET DRIVE
                      (../6809PC/drivers):00108         ;*      CMPA    #$01                    ; DRIVE B?
                      (../6809PC/drivers):00109         ;*      BNE     NOTFDB                  ;
                      (../6809PC/drivers):00110         ;*      JMP     FORMFL                  ; DIRECT ATTACHED FLOPPY FORMAT
                      (../6809PC/drivers):00111         ;*NOTFDB:
FAC6 39               (../6809PC/drivers):00112                 RTS
                      (../6809PC/drivers):00113         
                      (../6809PC/drivers):00114         ;*
                      (../6809PC/drivers):00115         ;* HOME HEAD ON DRIVE ('U' POINTS TO DCB)
                      (../6809PC/drivers):00116         ;*
FAC7                  (../6809PC/drivers):00117         DHOME
FAC7 39               (../6809PC/drivers):00118                 RTS
                      (../6809PC/drivers):00119         
                      (../6809PC/drivers):00120         
                      (../6809PC/drivers):00121         ;*
                      (../6809PC/drivers):00122         ;* READ A SECTOR, FROM DISK ('U' POINTS TO DCB) TO MEMORY(X)
                      (../6809PC/drivers):00123         ;*
FAC8                  (../6809PC/drivers):00124         DRDSEC
FAC8 BDFB41           (../6809PC/drivers):00125                 JSR     DECODEDRIVE
FACB 84F0             (../6809PC/drivers):00126                 ANDA    #$F0
FACD 8110             (../6809PC/drivers):00127                 CMPA    #$10                              ; FLOPPY?
FACF 260D             (../6809PC/drivers):00128                 BNE     >                                 ;
FAD1 C613             (../6809PC/drivers):00129                 LDB     #19                               ;Floppy_READ_SECTOR
FAD3 BDFB68           (../6809PC/drivers):00130                 JSR     MD_PAGERA
FAD6 8D18             (../6809PC/drivers):00131                 BSR     CPYHOSTBUF
FAD8 B60103           (../6809PC/drivers):00132                 LDA     DISKERROR                         ; GET ERROR CONDITION
FADB 8100             (../6809PC/drivers):00133                 CMPA    #$00
FADD 39               (../6809PC/drivers):00134                 RTS
                      (../6809PC/drivers):00135         !
FADE 8120             (../6809PC/drivers):00136                 CMPA    #$20                              ; IDE?
FAE0 260D             (../6809PC/drivers):00137                 BNE     >                                 ;
FAE2 C616             (../6809PC/drivers):00138                 LDB     #22                               ;IDE_READ_SECTOR
FAE4 BDFB68           (../6809PC/drivers):00139                 JSR     MD_PAGERA
FAE7 8D07             (../6809PC/drivers):00140                 BSR     CPYHOSTBUF
FAE9 B60103           (../6809PC/drivers):00141                 LDA     DISKERROR                         ; GET ERROR CONDITION
FAEC 8100             (../6809PC/drivers):00142                 CMPA    #$00
FAEE 39               (../6809PC/drivers):00143                 RTS
                      (../6809PC/drivers):00144         !
FAEF 39               (../6809PC/drivers):00145                 RTS
FAF0                  (../6809PC/drivers):00146         CPYHOSTBUF:
FAF0 3420             (../6809PC/drivers):00147                 PSHS    Y
FAF2 108E0000         (../6809PC/drivers):00148                 LDY     #$0000
                      (../6809PC/drivers):00149         !
FAF6 A6A90200         (../6809PC/drivers):00150                 LDA     HSTBUF,Y
FAFA A780             (../6809PC/drivers):00151                 STA     ,X+
FAFC 3121             (../6809PC/drivers):00152                 INY
                      (../6809PC/drivers):00153         
FAFE 108C0200         (../6809PC/drivers):00154                 CMPY    #$0200
FB02 26F2             (../6809PC/drivers):00155                 BNE     <
FB04 3520             (../6809PC/drivers):00156                 PULS    Y
FB06 39               (../6809PC/drivers):00157                 RTS
                      (../6809PC/drivers):00158         ;*
                      (../6809PC/drivers):00159         ;* WRITE A SECTOR TO DISK ('U' POINTS TO DCB) FROM MEMORY(X)
                      (../6809PC/drivers):00160         ;*
                      (../6809PC/drivers):00161         
FB07                  (../6809PC/drivers):00162         DWRSEC
                      (../6809PC/drivers):00163         ; START BY POPULATING THE HOST BUFFER
FB07 3420             (../6809PC/drivers):00164                 PSHS    Y
FB09 108E0000         (../6809PC/drivers):00165                 LDY     #$0000
                      (../6809PC/drivers):00166         !
FB0D A680             (../6809PC/drivers):00167                 LDA     ,X+
FB0F A7A90200         (../6809PC/drivers):00168                 STA     HSTBUF,Y
FB13 3121             (../6809PC/drivers):00169                 INY
FB15 108C0200         (../6809PC/drivers):00170                 CMPY    #$0200
FB19 26F2             (../6809PC/drivers):00171                 BNE     <
FB1B 3520             (../6809PC/drivers):00172                 PULS    Y
                      (../6809PC/drivers):00173         ; NOW DO SOME DRIVE MAGIC
FB1D BDFB41           (../6809PC/drivers):00174                 JSR     DECODEDRIVE
FB20 84F0             (../6809PC/drivers):00175                 ANDA    #$F0
FB22 8110             (../6809PC/drivers):00176                 CMPA    #$10                              ; FLOPPY?
FB24 260B             (../6809PC/drivers):00177                 BNE     >                                 ;
FB26 C614             (../6809PC/drivers):00178                 LDB     #20                               ;floppy_WRITE_SECTOR
FB28 BDFB68           (../6809PC/drivers):00179                 JSR     MD_PAGERA
FB2B B60103           (../6809PC/drivers):00180                 LDA     DISKERROR                         ; GET ERROR CONDITION
FB2E 8100             (../6809PC/drivers):00181                 CMPA    #$00
FB30 39               (../6809PC/drivers):00182                 RTS
                      (../6809PC/drivers):00183         !
FB31 8120             (../6809PC/drivers):00184                 CMPA    #$20                              ; IDE?
FB33 260B             (../6809PC/drivers):00185                 BNE     >                                 ;
FB35 C617             (../6809PC/drivers):00186                 LDB     #23                               ;IDE_WRITE_SECTOR
FB37 BDFB68           (../6809PC/drivers):00187                 JSR     MD_PAGERA
FB3A B60103           (../6809PC/drivers):00188                 LDA     DISKERROR                         ; GET ERROR CONDITION
FB3D 8100             (../6809PC/drivers):00189                 CMPA    #$00
FB3F 39               (../6809PC/drivers):00190                 RTS
                      (../6809PC/drivers):00191         !
FB40 39               (../6809PC/drivers):00192                 RTS
                      (../6809PC/drivers):00193         
FB41                  (../6809PC/drivers):00194         DECODEDRIVE:
FB41 3420             (../6809PC/drivers):00195                 PSHS    y
FB43 A645             (../6809PC/drivers):00196                 LDA     HEAD,U
FB45 B70108           (../6809PC/drivers):00197                 STA     CURRENTHEAD
FB48 A644             (../6809PC/drivers):00198                 LDA     CYL,U
FB4A B70106           (../6809PC/drivers):00199                 STA     CURRENTCYL
FB4D A646             (../6809PC/drivers):00200                 LDA     SEC,U
FB4F B70107           (../6809PC/drivers):00201                 STA     CURRENTSEC
FB52 4F               (../6809PC/drivers):00202                 CLRA
FB53 E6C4             (../6809PC/drivers):00203                 LDB     DRIVE,U                           ; GET DRIVE
FB55 58               (../6809PC/drivers):00204                 ASLB                                      ; a=a*2
FB56 1F02             (../6809PC/drivers):00205                 TFR     D,Y
FB58 A6A904B7         (../6809PC/drivers):00206                 LDA     DRIVEMAP,Y
FB5C E6A904B8         (../6809PC/drivers):00207                 LDB     DRIVEMAP+1,Y
FB60 B70104           (../6809PC/drivers):00208                 STA     CURRENTDEVICE
FB63 F70105           (../6809PC/drivers):00209                 STB     CURRENTSLICE
FB66 35A0             (../6809PC/drivers):00210                 PULS    y,pc
                      (../6809PC/drivers):00211         
                      (../6809PC/drivers):00212                 INCLUDE ../6809PC/cubix_pager.asm
                      (../6809PC/cubix_p):00001         ;__pager_________________________________________________________________________________________________________________________
                      (../6809PC/cubix_p):00002         ;
                      (../6809PC/cubix_p):00003         ;       Duodyne Memory page management code
                      (../6809PC/cubix_p):00004         ;
                      (../6809PC/cubix_p):00005         ;       Entry points:
                      (../6809PC/cubix_p):00006         ;               PAGER_INIT          - called during OS init
                      (../6809PC/cubix_p):00007         ;________________________________________________________________________________________________________________________________
                      (../6809PC/cubix_p):00008         ;
                      (../6809PC/cubix_p):00009         ;  The 6809PC has a flexible hardware MMU. There are 64 programmable task contexts, each with 16 4K banks ($BXXX).
                      (../6809PC/cubix_p):00010         ;  The MMU has several Registers.
                      (../6809PC/cubix_p):00011         ;     $xFE0- Write only-Task Register, Sets which context is active, when the mmu is enabled (0-63)
                      (../6809PC/cubix_p):00012         ;     $xFE1- Write only-Setup Register, Sets which context is being setup (exposed in the edit window) (0-63)
                      (../6809PC/cubix_p):00013         ;     $xFE2- Write only-Enable Register 0=MMU Disabled, 1=MMU Enabled
                      (../6809PC/cubix_p):00014         ;     $xFE4- Read Only- Active Task Register (only lower 6 bits)
                      (../6809PC/cubix_p):00015         ;     $xFE6- Read Only- hit ISA TC Bit
                      (../6809PC/cubix_p):00016         ;     $xFE7- Read Only- Current IO Page (only lower 4 bits)
                      (../6809PC/cubix_p):00017         ;
                      (../6809PC/cubix_p):00018         ;     $xfDx- read or write task edit window
                      (../6809PC/cubix_p):00019         ;
                      (../6809PC/cubix_p):00020         ;________________________________________________________________________________________________________________________________
                      (../6809PC/cubix_p):00021         ;
                      (../6809PC/cubix_p):00022         ; MMU
                      (../6809PC/cubix_p):00023         ;
                      (../6809PC/cubix_p):00024         ; SETUP:
                      (../6809PC/cubix_p):00025         ;       TASK 0, NORMAL OPERATION
                      (../6809PC/cubix_p):00026         ;               0: 00 RAM page 00XXX
                      (../6809PC/cubix_p):00027         ;               1: 0E IO SHADOW (RAM PAGE 0EXXXX)
                      (../6809PC/cubix_p):00028         ;               2: 02 RAM page 02XXX
                      (../6809PC/cubix_p):00029         ;               3: 03 RAM page 03XXX
                      (../6809PC/cubix_p):00030         ;               4: 04 RAM page 04XXX
                      (../6809PC/cubix_p):00031         ;               5: 05 RAM page 05XXX
                      (../6809PC/cubix_p):00032         ;               6: 06 RAM page 06XXX
                      (../6809PC/cubix_p):00033         ;               7: 07 RAM page 07XXX
                      (../6809PC/cubix_p):00034         ;               8: 08 RAM page 08XXX
                      (../6809PC/cubix_p):00035         ;               9: 09 RAM page 09XXX
                      (../6809PC/cubix_p):00036         ;               A: 0A RAM page 0AXXX
                      (../6809PC/cubix_p):00037         ;               B: 0B RAM page 0BXXX
                      (../6809PC/cubix_p):00038         ;               C: 0C RAM page 0CXXX
                      (../6809PC/cubix_p):00039         ;               D: 0D RAM page 0DXXX
                      (../6809PC/cubix_p):00040         ;               E: 10 RAM page 10XXX
                      (../6809PC/cubix_p):00041         ;               F: 11 RAM page 11XXX
                      (../6809PC/cubix_p):00042         ;
                      (../6809PC/cubix_p):00043         ;       TASK 1, ADDITIONAL DRIVERS PAGED INTO C000-D000
                      (../6809PC/cubix_p):00044         ;               0: 00 RAM page 00XXX
                      (../6809PC/cubix_p):00045         ;               1: 0E IO SHADOW (RAM PAGE 0EXXXX)
                      (../6809PC/cubix_p):00046         ;               2: 02 RAM page 02XXX
                      (../6809PC/cubix_p):00047         ;               3: 03 RAM page 03XXX
                      (../6809PC/cubix_p):00048         ;               4: 04 RAM page 04XXX
                      (../6809PC/cubix_p):00049         ;               5: 05 RAM page 05XXX
                      (../6809PC/cubix_p):00050         ;               6: 06 RAM page 06XXX
                      (../6809PC/cubix_p):00051         ;               7: 07 RAM page 07XXX
                      (../6809PC/cubix_p):00052         ;               8: 08 RAM page 08XXX
                      (../6809PC/cubix_p):00053         ;               9: 09 RAM page 09XXX
                      (../6809PC/cubix_p):00054         ;               A: 0A RAM page 0AXXX
                      (../6809PC/cubix_p):00055         ;               B: 0B RAM page 0BXXX
                      (../6809PC/cubix_p):00056         ;               C: 12 RAM page 12XXX
                      (../6809PC/cubix_p):00057         ;               D: 13 RAM page 13XXX
                      (../6809PC/cubix_p):00058         ;               E: 10 RAM page 10XXX
                      (../6809PC/cubix_p):00059         ;               F: 11 RAM page 11XXX
                      (../6809PC/cubix_p):00060         ;
                      (../6809PC/cubix_p):00061         ;       TASKS 2-63 -- OPEN FOR OS/USER USE
                      (../6809PC/cubix_p):00062         ;_______________________________________________________________
                      (../6809PC/cubix_p):00063         
                      (../6809PC/cubix_p):00064         
     1FE0             (../6809PC/cubix_p):00065         MMU_ACT_TASK    = $FE0+CUBIX_IO_BASE
     1FE1             (../6809PC/cubix_p):00066         MMU_MAP_SETUP   = $FE1+CUBIX_IO_BASE
     1FE2             (../6809PC/cubix_p):00067         MMU_ENABLE      = $FE2+CUBIX_IO_BASE
     1FE2             (../6809PC/cubix_p):00068         MMU_TASK_EDIT   = $FE2+CUBIX_IO_BASE
                      (../6809PC/cubix_p):00069         
                      (../6809PC/cubix_p):00070         
                      (../6809PC/cubix_p):00071         ; CODE FOR PAGER OPERATIONS
FB68                  (../6809PC/cubix_p):00072         MD_PAGERA:
                      (../6809PC/cubix_p):00073         
                      (../6809PC/cubix_p):00074         
                      (../6809PC/cubix_p):00075         
                      (../6809PC/cubix_p):00076         ; CODE TO CALL A "FAR FUNCTION"
                      (../6809PC/cubix_p):00077         ; THIS CHANGES PAGES AND THEN CALLS THE DISPATCHER
FB68 FD0109           (../6809PC/cubix_p):00078                 STD     >PAGER_D                          ; SAVE 'D'
FB6B BF010B           (../6809PC/cubix_p):00079                 STX     >PAGER_X                          ; SAVE 'X'
FB6E 10BF010D         (../6809PC/cubix_p):00080                 STY     >PAGER_Y                          ; SAVE 'Y'
FB72 FF0111           (../6809PC/cubix_p):00081                 STU     >PAGER_U                          ; SAVE 'U'
FB75 10FF010F         (../6809PC/cubix_p):00082                 STS     >PAGER_S                          ; SAVE STACK
                      (../6809PC/cubix_p):00083         
FB79 10CE00FF         (../6809PC/cubix_p):00084                 LDS     #PAGER_STACK                      ; SET TEMP STACK
                      (../6809PC/cubix_p):00085         
FB7D 8601             (../6809PC/cubix_p):00086                 LDA     #$01
FB7F B71FE0           (../6809PC/cubix_p):00087                 STA     MMU_ACT_TASK                      ; SET ACTIVE TASK TO 01
                      (../6809PC/cubix_p):00088         
FB82 BDC100           (../6809PC/cubix_p):00089                 JSR     BANKED_DRIVER_DISPATCHER
                      (../6809PC/cubix_p):00090         
FB85 8600             (../6809PC/cubix_p):00091                 LDA     #$00
FB87 B71FE0           (../6809PC/cubix_p):00092                 STA     MMU_ACT_TASK                      ; SET ACTIVE TASK TO 00
                      (../6809PC/cubix_p):00093         
FB8A 10FE010F         (../6809PC/cubix_p):00094                 LDS     >PAGER_S                          ; RESTORE STACK
FB8E BE010B           (../6809PC/cubix_p):00095                 LDX     >PAGER_X                          ; RESTORE 'X'
FB91 10BE010D         (../6809PC/cubix_p):00096                 LDY     >PAGER_Y                          ; RESTORE 'Y'
FB95 FE0111           (../6809PC/cubix_p):00097                 LDU     >PAGER_U                          ; RESTORE 'U'
FB98 FC0109           (../6809PC/cubix_p):00098                 LDD     >PAGER_D                          ; RESTORE 'D'
FB9B 39               (../6809PC/cubix_p):00099                 RTS
                      (../6809PC/cubix_p):00100         
     00FF             (../6809PC/cubix_p):00101         PAGER_STACK     = $00FF
                      (../6809PC/drivers):00213         
                      (../6809PC/drivers):00214                 ORG     $FF00
                      (../6809PC/drivers):00215         ;
                      (../6809PC/drivers):00216         ; DISK COMMAND BLOCK
                      (../6809PC/drivers):00217         ;
                      (../6809PC/drivers):00218         ;* IGNORE ANY UNUSED INTERRUPTS
FF00                  (../6809PC/drivers):00219         IGNORE
FF00 3B               (../6809PC/drivers):00220                 RTI
                      (../6809PC/drivers):00221         ;* RESULT CODES FOR FDC OPERATIONS
FF01                  (../6809PC/drivers):00222         RESTAB
FF01 0300020000030401 (../6809PC/drivers):00223                 FCB     3,0,2,0,0,3,4,1
                      (../6809PC/drivers):00224         ;*
                      (../6809PC/drivers):00225         ;* INITIALIZATION TABLE FOR CUBIX RAM
                      (../6809PC/drivers):00226         ;*
     FF09             (../6809PC/drivers):00227         RITAB           EQU *
                      (../6809PC/drivers):00228         ;* DEFAULT DRIVE CHARACTISTICS
FF09 00FF01FF000000   (../6809PC/drivers):00229                 FCB     0,255,1,255,0,0,0                 ;ADR 0, 255 CYL, 1 HEAD, 255 SEC/TRK
FF10 01FF01FF000000   (../6809PC/drivers):00230                 FCB     1,255,1,255,0,0,0                 ;ADR 1, 255 CYL, 1 HEAD, 255 SEC/TRK
FF17 02FF01FF000000   (../6809PC/drivers):00231                 FCB     2,255,1,255,0,0,0                 ;ADR 2, 255 CYL, 1 HEAD, 255 SEC/TRK
FF1E 03FF01FF000000   (../6809PC/drivers):00232                 FCB     3,255,1,255,0,0,0                 ;ADR 3, 80 CYL, 2 HEAD, 9 SEC/TRK
                      (../6809PC/drivers):00233         ;* CONSOLE DEVICE ASSIGNMENTS
FF25 01               (../6809PC/drivers):00234                 FCB     1                                 ;CONSOLE INPUT DEVICE
FF26 01               (../6809PC/drivers):00235                 FCB     1                                 ;CONSOLE OUTPUT DEVICE
                      (../6809PC/drivers):00236         ;* SERIAL DEVICE DRIVERS
FF27 FAC3FAB400000000 (../6809PC/drivers):00237                 FDB     RDNULL,RDSER,0,0,0,0,0,0
     0000000000000000
FF37 FAC5FAAF00000000 (../6809PC/drivers):00238                 FDB     WRNULL,WRSER,0,0,0,0,0,0
     0000000000000000
                      (../6809PC/drivers):00239         ;* DISK DEVICE DRIVERS
FF47 FAC7FAC8FB07FAC6 (../6809PC/drivers):00240                 FDB     DHOME,DRDSEC,DWRSEC,DFORMAT
                      (../6809PC/drivers):00241         ;* 6809 HARDWARE VECTORS
FF4F E00B             (../6809PC/drivers):00242                 FDB     SSR                               ;SWI VECTOR (USED FOR SSRS)
FF51 FF00             (../6809PC/drivers):00243                 FDB     IGNORE                            ;SWI2 VECTOR
FF53 FF00             (../6809PC/drivers):00244                 FDB     IGNORE                            ;SWI3 VECTOR
FF55 FF00             (../6809PC/drivers):00245                 FDB     IGNORE                            ;IRQ  VECTOR
FF57 FF00             (../6809PC/drivers):00246                 FDB     IGNORE                            ;FIRQ VECTOR
FF59 FF00             (../6809PC/drivers):00247                 FDB     IGNORE                            ;NMI VECTOR
                      (../6809PC/drivers):00248         ;* MISC FLAGS & VARIABLES
FF5B FF               (../6809PC/drivers):00249                 FCB     $FF                               ;ERROR MESSAGES ENABLED
FF5C 00               (../6809PC/drivers):00250                 FCB     0                                 ;TRACE DISABLED
FF5D 00               (../6809PC/drivers):00251                 FCB     0                                 ;DEBUG DISABLED
FF5E 00               (../6809PC/drivers):00252                 FCB     0                                 ;DEFAULT DRIVE (A)
FF5F 4D41494E         (../6809PC/drivers):00253                 FCC     'MAIN'                            ;DEFAULT DIRECTORY
FF63 00000000         (../6809PC/drivers):00254                 FCB     0,0,0,0                           ;(FILLER)
FF67 00               (../6809PC/drivers):00255                 FCB     0                                 ;SYSTEM DRIVE (A)
FF68 53595354454D     (../6809PC/drivers):00256                 FCC     'SYSTEM'                          ;SYSTEM DIRECTORY
FF6E 0000             (../6809PC/drivers):00257                 FCB     0,0                               ;(FILLER)
                      (../6809PC/drivers):00258         ; DRIVE MAPPING TABLE
FF70 2000             (../6809PC/drivers):00259                 FCB     $20,$00                           ; TABLE IS DRIVE TYPE, SLICE OFFSET
FF72 2001             (../6809PC/drivers):00260                 FCB     $20,$01                           ; DRIVE IDS ARE $00=NONE, $1x=FLOPPY, $2X=xt-CF-IDE
FF74 2002             (../6809PC/drivers):00261                 FCB     $20,$02                           ; LOW NIBBLE IS DEVICE ADDRESS (Device address+$20 for FPSD)
FF76 2003             (../6809PC/drivers):00262                 FCB     $20,$03                           ; SLICE OFFSET IS THE UPPER 8 BITS OF THE DRIVE LBA ADDRESS
                      (../6809PC/drivers):00263         ; ALLOWING IDE DRIVES TO HOST UP TO 256 VIRTUAL DRIVES PER PHYSICAL DRIVE
     006F             (../6809PC/drivers):00264         RISIZ           EQU *-RITAB                       ;SIZE OF INITILAIZED RAM
                      (../6809PC/drivers):00265         ;
                      (        cubix.asm):01545                 ENDIF
                      (        cubix.asm):01546         
                      (        cubix.asm):01547         ;*
                      (        cubix.asm):01548         ;* INTERRUPT VECTORS
                      (        cubix.asm):01549         ;*
                      (        cubix.asm):01550                 IFNDEF  test
                      (        cubix.asm):01551                 ORG     $FFF2                             ;VECTORS GO HERE
FFF2 F751             (        cubix.asm):01552                 FDB     SWI3
FFF4 F74D             (        cubix.asm):01553                 FDB     SWI2
FFF6 F759             (        cubix.asm):01554                 FDB     FIRQ
FFF8 F755             (        cubix.asm):01555                 FDB     IRQ
FFFA F749             (        cubix.asm):01556                 FDB     SWI
FFFC F75D             (        cubix.asm):01557                 FDB     NMI
FFFE E108             (        cubix.asm):01558                 FDB     BEGIN                             ;RESET - COLD START OF SYSTEM
                      (        cubix.asm):01559                 ENDIF

Symbol Table:
[SG] 6809PC                           0001
[ G] ATRTAB                           F0DF
[ G] BADCMD                           E254
[ G] BADDEV                           E5B4
[ G] BADOP1                           E3F3
[ G] BADOP2                           E396
[ G] BADOP3                           F0D4
[ G] BADOPM                           F780
[ G] BADOPR                           E2B8
[ G] BANKED_DRIVER_DISPATCHER         C100
[ G] BEG1                             E10F
[ G] BEGIN                            E108
[ G] BLOAD                            EE9B
[ G] BRET                             E359
[ G] BSAVE                            EED0
[ G] CALFRE                           F398
[ G] CEND                             E340
[ G] CEXI                             F5B9
[ G] CEXIT                            F5A8
[ G] CHAIN                            F60A
[ G] CHGDRV                           F0FA
[ G] CHGWRK                           E7A6
[ G] CLO0                             E98A
[ G] CLO1                             E98E
[ G] CLO2                             E99D
[ G] CLO3                             E9A1
[ G] CLO4                             E9B6
[ G] CLOC1                            E8E0
[ G] CLOC2                            E8E7
[ G] CLOSE                            E975
[ G] CLRFLG                           F174
[ G] CMD                              E18D
[ G] CMDADR                           F899
[ G] CMDBUF                           04F5
[ G] CMDC1                            F644
[ G] CMDC2                            F64E
[ G] CMDC3                            F658
[ G] CMDC4                            F65C
[ G] CMDC5                            F666
[ G] CMDC6                            F667
[ G] CMDCMP                           F639
[ G] CMDDRV                           04E9
[ G] CMDEOF                           F4B6
[ G] CMDEX                            F4C4
[ G] CMDGO                            E1BD
[ G] CMDIN                            F5EA
[ G] CMDKEY                           F62D
[ G] CMDNAM                           F843
[ G] CMDOFF                           04EC
[ G] CMDRC                            04F0
[ G] CMDRET                           F5D0
[ G] CMDRT0                           F5D3
[ G] CMDRT1                           F5E7
[ G] CMDRT2                           F66A
[ G] CMDSEC                           04EA
[ G] CMDSKP                           F616
[ G] CMDSTK                           04EE
[ G] CMPR                             F570
[ G] CMPR1                            F57D
[ G] CNC1                             F034
[ G] CNC2                             F045
[ G] CNCT                             F02E
[ G] COMFIL                           F4BF
[ G] COMGO                            F4D4
[ G] COMNAM                           E323
[ G] COMX                             E342
[ G] CONIN                            046C
[ G] CONOUT                           046D
[ G] CONSOLEDEVICE                    0100
[ G] CPYHOSTBUF                       FAF0
[ G] CRD1                             ED74
[ G] CRD2                             ED7A
[ G] CRE1                             E73E
[ G] CRE2                             E746
[ G] CRE3                             E74B
[ G] CRE5                             E777
[ G] CRE6                             E781
[ G] CRE7                             E789
[ G] CREAD                            ED59
[ G] CREATE                           E729
[ G] CREF1                            EDF1
[ G] CREFIL                           EDDD
[ G] CSIZE                            0007
[ G] CSRC                             F598
[ G] CUBIX_IO_BASE                    1000
[ G] CURRENTCYL                       0106
[ G] CURRENTDEVICE                    0104
[ G] CURRENTHEAD                      0108
[ G] CURRENTSEC                       0107
[ G] CURRENTSLICE                     0105
[ G] CURSIZ                           E712
[ G] CWR1                             EDA4
[ G] CWR2                             EDAA
[ G] CWRITE                           ED89
[ G] CYL                              0004
[ G] DATTR                            0017
[ G] DBGFLG                           04A3
[ G] DBGSSR                           E040
[ G] DCTRL                            0450
[ G] DDADR                            0013
[ G] DECDIG                           E460
[ G] DECODEDRIVE                      FB41
[ G] DEFATR                           00F0
[ G] DEFDIR                           04A6
[ G] DEFDRV                           04A5
[ G] DELETE                           EDF7
[ G] DELFIL                           EDF4
[ G] DETAB                            EBAD
[ G] DEVMSG                           F81E
[ G] DFORMAT                          FAC6
[ G] DHOME                            FAC7
[ G] DIGOK                            E439
[ G] DIRSEC                           0000
[ G] DISDIR                           E6B6
[ G] DISF1                            F3A9
[ G] DISF2                            F3AF
[ G] DISF3                            F3BA
[ G] DISF4                            F3CB
[ G] DISKERROR                        0103
[ G] DISP8                            E705
[ G] DISPX                            E707
[SG] dist                             0001
[ G] DITAB                            046E
[ G] DIV1                             F718
[ G] DIV16                            F710
[ G] DIV2                             F71A
[ G] DIV3                             F72F
[ G] DMPREG                           E08A
[ G] DMPREG1                          E08D
[ G] DNAME                            0008
[ G] DNL0                             EF73
[ G] DNL1                             EFAB
[ G] DNL2                             EFBE
[ G] DNL3                             EFE9
[ G] DNL4                             F01A
[ G] DNLD                             EF60
[ G] DNLDEV                           EFA8
[ G] DNLEND                           EF8D
[ G] DNLMSG                           F82D
[ G] DNLRTS                           EF5E
[ G] DOINIT                           E004
[ G] DOSKCM                           E1C6
[ G] DOTAB                            047E
[ G] DPERM                            0010
[ G] DPREFIX                          0000
[ G] DRADR                            0015
[ G] DRDSEC                           FAC8
[ G] DRIVE                            0000
[ G] DRIVEMAP                         04B7
[ G] DRVSIZ                           E715
[ G] DSHFT                            E441
[ G] DTYPE                            0010
[ G] DWRSEC                           FB07
[ G] EOF                              E8C3
[ G] EPERM                            0020
[ G] ERRCNT                           04F4
[ G] ERRM1                            E2D0
[ G] ERRM2                            E2D5
[ G] ERRM3                            E2E6
[ G] ERRM4                            E2EB
[ G] ERRMRC                           E2BD
[ G] ERRRET                           E2F8
[ G] EX1                              F307
[ G] EX2                              F30C
[ G] EX3                              F313
[ G] EX4                              F31A
[ G] EX5                              F327
[ G] EX6                              F331
[ G] EX7                              F33B
[ G] EX8                              F33D
[ G] EX9                              F350
[ G] EXDCOM                           F5BC
[ G] EXE                              E224
[ G] EXE1                             E23C
[ G] EXE2                             E23F
[ G] EXE3                             E25B
[ G] EXE4                             E27C
[ G] EXE5                             E288
[ G] EXECMD                           E1CD
[ G] EXIMSG                           F7AA
[ G] farpointer                       0101
[ G] FDRIVE                           04BF
[ G] FEXISTS                          E735
[ G] FIL1                             EDBE
[ G] FIL2                             EDDA
[ G] FILERR                           E663
[ G] FILES                            EDB9
[ G] FILFND                           E6B5
[ G] FIRQ                             F759
[ G] FIRQVEC                          049E
[ G] FNAME                            04C8
[ G] FNDF1                            E7E6
[ G] FNDF2                            E7EF
[ G] FNDF3                            E7F1
[ G] FNDFRE                           E7E0
[ G] FNDLNK                           E5DF
[ G] FORMAT                           F733
[ G] FRES1                            E7CF
[ G] FRES2                            E7D1
[ G] FRESEC                           E7AF
[ G] FTEL1                            EA1F
[ G] FTEL2                            EA2D
[ G] FTELL                            EA12
[ G] FTYPE                            04D0
[ G] GETA1                            F0C3
[ G] GETA2                            F0CD
[ G] GETA3                            F0D7
[ G] GETA4                            F0DD
[ G] GETATR                           F0C0
[ G] GETBYT                           F00E
[ G] GETCHR                           E5DA
[ G] GETCTL                           EB0B
[ G] GETCTL1                          EB0E
[ G] GETD1                            E3C8
[ G] GETD2                            E3D1
[ G] GETD3                            E3E7
[ G] GETD4                            E3F6
[ G] GETD5                            E3FD
[ G] GETDEC                           E456
[ G] GETDEV                           F14E
[ G] GETDIR                           E3B0
[ G] GETDIR1                          E3B3
[ G] GETDRV                           E3FF
[ G] GETDRV1                          E402
[ G] GETDRVPTBL                       F6EC
[ G] GETDRVTBL                        F6E8
[ G] GETDV                            E45D
[ G] GETHEX                           E41C
[ G] GETHV                            E421
[ G] GETL1                            E424
[ G] GETN1                            F02D
[ G] GETNAM                           E377
[ G] GETNIB                           F01B
[ G] GETNUM                           E411
[ G] GETSDI                           E31D
[ G] GETSN0                           E299
[ G] GETSN1                           E2A0
[ G] GETSN2                           E2AE
[ G] GETSNA                           E296
[ G] GETSYS                           E31A
[ G] GETVAL                           E370
[ G] GF1                              E37B
[ G] GF2                              E38C
[ G] GF3                              E399
[ G] GFNAM                            E379
[ G] GFTYP                            E388
[ G] GLFCR                            E4A2
[ G] GLINE                            E4A5
[ G] GLINE1                           E4AE
[ G] GLINE2                           E4BF
[ G] GLINE3                           E4CA
[ G] GLNOP                            E4AA
[ G] GOCMD                            F55C
[ G] GOFLG                            F177
[ G] GOPAD                            E2AB
[ G] GRTS                             E5FB
[ G] HDE                              EB3C
[ G] HDE1                             EB59
[ G] HDE2                             EB93
[ G] HDE3                             EB98
[ G] HDE4                             EBA2
[ G] HEAD                             0005
[ G] HELLO                            E11F
[ G] HEXEND                           E451
[ G] HOME                             F737
[ G] HOUT                             E568
[ G] HSTBUF                           0200
[ G] HWIN1                            F99C
[ G] HWINIT                           F997
[ G] IGNORE                           FF00
[ G] INBUFF                           0400
[ G] INI00                            EC15
[ G] INI01                            EC2F
[ G] INI02                            EC37
[ G] INI1                             EC42
[ G] INI10                            ED28
[ G] INI11                            ED36
[ G] INI2                             EC93
[ G] INI3                             ECB7
[ G] INI4                             ECC4
[ G] INI5                             ECD1
[ G] INI6                             ECE2
[ G] INI7                             ECF2
[ G] INI8                             ECFC
[ G] INI9                             ED10
[ G] INI9A                            ED18
[ G] INIT                             EC03
[ G] INITAB                           F45A
[ G] INVSSR                           E05E
[ G] IOTAB                            F4A8
[ G] IPLFILE                          F761
[ G] IRAM                             0450
[ G] IRQ                              F755
[ G] IRQVEC                           049C
[ G] LCHAIN                           EEBF
[ G] LFCR                             E588
[ G] LNKSEC                           0001
[ G] LOCCR                            F623
[ G] LOCDIR                           E692
[ G] LOCERR                           E659
[ G] LOCFIL                           E69E
[ G] LOCLP                            F61F
[ G] LOCRED                           E8A8
[ G] LOCSEC                           E69B
[ G] LOCWRI                           E8D6
[ G] LODERR                           F000
[ G] LODF1                            EEBD
[ G] LODFIL                           EEA7
[ G] MBASE                            E002
[ G] MD_PAGERA                        FB68
[ G] MMU_ACT_TASK                     1FE0
[ G] MMU_ENABLE                       1FE2
[ G] MMU_MAP_SETUP                    1FE1
[ G] MMU_TASK_EDIT                    1FE2
[ G] MOVD1                            F088
[ G] MOVDIR                           F082
[ G] MSGFLG                           04A2
[ G] MUL16                            F6F0
[ G] MULD1                            EE2E
[ G] MULD2                            EE31
[ G] MULD3                            EE8A
[ G] MULD4                            EE9A
[ G] MULD5                            EE50
[ G] MULDEL                           EE2B
[ G] NAMGET                           E29E
[ G] NCYL                             0001
[ G] NDEV                             0008
[ G] NDSK                             0004
[ G] NEWLIN                           F4FD
[ G] NHEAD                            0002
[ G] NMI                              F75D
[ G] NMIVEC                           04A0
[ G] NOEMSG                           E2F6
[ G] NOFMSG                           E68B
[ G] NOMAC                            F536
[ G] NOSHO                            E6BD
[ G] NOSMSG                           F7BE
[ G] NOSPAC                           E7D8
[ G] NOSUSP                           EF42
[ G] NOTFND                           E65D
[ G] NOTMSG                           F79B
[ G] NOTNUL                           E330
[ G] NSEC                             0003
[ G] NULCMD                           E1F6
[ G] NUMCMD                           000E
[ G] NUMFLG                           0003
[ G] NUMSSR                           0071
[ G] ODRIVE                           0001
[ G] OFIRST                           0002
[ G] OKRET                            EECF
[ G] OLDSTK                           04F1
[ G] OLSTSEC                          0006
[ G] OOFFSET                          0008
[ G] OOTAB                            F4A0
[ G] OPENR                            E811
[ G] OPENW                            E8ED
[ G] OREMSG                           F7D5
[ G] ORERR                            E8BB
[ G] OSECTOR                          0004
[ G] OSIZ                             000A
[ G] OTYPE                            0000
[ G] OWEMSG                           F7EC
[ G] OWERR                            E92F
[ G] PAD                              E3A9
[ G] PAGER_D                          0109
[ G] PAGER_S                          010F
[ G] PAGER_STACK                      00FF
[ G] PAGER_U                          0111
[ G] PAGER_X                          010B
[ G] PAGER_Y                          010D
[ G] PAR1                             F520
[ G] PAR2                             F526
[ G] PAR3                             F52D
[ G] PAROK                            F51A
[ G] PREFIX                           04C0
[ G] PROERR                           E8B2
[ G] PROMSG                           F804
[ G] PURGE                            E623
[ G] PURGE1                           E625
[ G] PUTCHR                           E59A
[ G] QVECT                            F6CE
[ G] RAM                              0400
[ G] RCBOP                            0001
[ G] RCC1                             F678
[ G] RCC2                             F68B
[ G] RCC3                             F6A4
[ G] RCCHR                            F66D
[ G] RCCMD                            00FF
[ G] RCDEV                            000A
[ G] RCDNL                            000B
[ G] RCDSK                            0009
[ G] RCEOF                            0006
[ G] RCEXI                            0007
[ G] RCNOS                            0008
[ G] RCNOTF                           0002
[ G] RCOND                            F586
[ G] RCORE                            0004
[ G] RCOWE                            0005
[ G] RCPRO                            0003
[ G] RCRET                            E199
[ G] RDDEV                            E5BC
[ G] RDDLC                            F008
[ G] RDISK                            EAE4
[ G] RDNULL                           FAC3
[ G] RDONE                            EB09
[ G] RDSEC                            F741
[ G] RDSER                            FAB4
[ G] RDW1                             E611
[ G] RDWRK                            E5FC
[ G] READB                            E87E
[ G] READC                            E833
[ G] REC1                             E852
[ G] REC2                             E86C
[ G] REDCHR                           F500
[ G] REDIN                            F6A6
[ G] REDOUT                           F6AB
[ G] REENT                            E1AC
[ G] REEXG                            F6C2
[ G] RESTAB                           FF01
[ G] RESU1                            EAAC
[ G] RESU2                            EAB1
[ G] RESU3                            EABC
[ G] RESUME                           EA90
[ G] RETNZ                            E36D
[ G] RETURN                           EF39
[ G] RETZ                             F6CB
[ G] RETZ1                            F6E4
[ G] REWIND                           E8C8
[ G] RISIZ                            006F
[ G] RITAB                            FF09
[ G] RNXT                             E350
[ G] RNXT1                            E352
[ G] ROM                              E000
[ G] ROMCHK                           E000
[ G] RPERM                            0080
[ G] RRTS                             E621
[ G] RSUCC                            F591
[ G] RTRY1                            EAEB
[ G] RTRY2                            EAEF
[ G] RUN                              E1F7
[ G] RUN1                             E1FA
[ G] RUN2                             E205
[ G] SAVB                             04DD
[ G] SAVDRV                           04E2
[ G] SAVF1                            EEE7
[ G] SAVF2                            EEF4
[ G] SAVF3                            EF25
[ G] SAVFIL                           EED8
[ G] SAVP1                            F5FE
[ G] SAVP2                            F608
[ G] SAVPRM                           F5F9
[ G] SAVSTK                           04E3
[ G] SAVX                             04DE
[ G] SAVY                             04E0
[ G] SDC1                             F1AD
[ G] SDC2                             F1B4
[ G] SDCMD                            F19E
[ G] SDRIVE                           04F3
[ G] SDTAB                            F479
[ G] SEC                              0006
[ G] SEC1                             EAD2
[ G] SEC2                             EADC
[ G] SECTOR                           EAC4
[ G] SEEK1                            E9D6
[ G] SEEK2                            E9F6
[ G] SEEK3                            EA09
[ G] SEEKABS                          E9C1
[ G] SEEKREL                          E9C4
[ G] SELDRV                           F6C8
[ G] SET                              F052
[ G] SET0                             F063
[ G] SET1                             F072
[ G] SET2                             F091
[ G] SET3                             F0E7
[ G] SET4                             F11F
[ G] SET5                             F133
[ G] SETADR                           F415
[ G] SETCMD                           F07D
[ G] SETDEF                           F06B
[ G] SETF0                            F097
[ G] SETF1                            F0AE
[ G] SETF2                            F0B8
[ G] SETFLG                           F16E
[ G] SETIN                            F6B0
[ G] SETOUT                           F6BA
[ G] SETTAB                           F3D2
[ G] SETVAR                           F5F5
[ G] SFTAB                            F441
[ G] SH21                             F21D
[ G] SH22                             F225
[ G] SH23                             F232
[ G] SHFLAG                           F2DC
[ G] SHOADR                           F42B
[ G] SHODRA                           F29B
[ G] SHODRB                           F2A1
[ G] SHODRV                           F262
[ G] SHOFIL                           E6D0
[ G] SHOME                            E6B8
[ G] SHON1                            E6EC
[ G] SHONAM                           E6EA
[ G] SHOOFF                           F2F2
[ G] SHOSAV                           E6D7
[ G] SHOT1                            F2AE
[ G] SHOT2                            F2B9
[ G] SHOT3                            F2C2
[ G] SHOT4                            F2C5
[ G] SHOTAB                           F2AB
[ G] SHOW                             F18A
[ G] SHOW0                            F196
[ G] SHOW1                            F19B
[ G] SHOW2                            F1BF
[ G] SHOW3                            F25F
[ G] SHOW4                            F2FA
[ G] SHOW5                            F2C9
[ G] SHOW6                            F352
[ G] SHRT                             E70E
[ G] SKIP                             E4DC
[ G] SKRTS                            E4E8
[ G] SPACE                            E592
[ G] SPC1                             E596
[ G] SSR                              E00B
[ G] SSRTAB                           F8B5
[ G] ST1                              F122
[ G] STACK                            0600
[ G] STFLAG                           F15B
[ G] SUSP1                            EA76
[ G] SUSP2                            EA81
[ G] SUSPEND                          EA3E
[ G] SVECT                            F6D8
[ G] SWI                              F749
[ G] SWI2                             F74D
[ G] SWI2VEC                          0498
[ G] SWI3                             F751
[ G] SWI3VEC                          049A
[ G] SWIVEC                           0496
[ G] SYSDIR                           04AF
[ G] SYSDRV                           04AE
[ G] TEMP                             04D3
[ G] TEMP1                            04D5
[ G] TEMP2                            04D7
[ G] TEMP3                            04D9
[ G] TEMP4                            04DB
[ G] TLOOK                            E505
[ G] TLOOK1                           E508
[ G] TLOOK2                           E517
[ G] TLOOK3                           E534
[ G] TLOOK4                           E539
[ G] TLOOK5                           E53B
[ G] TLOOK6                           E540
[ G] TLOOKE                           F115
[ G] TMPENT                           E1C2
[ G] TOUPPER                          E4FA
[ G] TRAC1                            F54C
[ G] TRAC2                            F559
[ G] TRCFLG                           04A4
[ G] TRET                             E4F9
[ G] TSTCHR                           E5D3
[ G] TSTDE1                           E5C3
[ G] TSTDEV                           E5C1
[ G] TSTE1                            E4F5
[ G] TSTERM                           E4E9
[ G] TSTRET                           F5A1
[ G] UNC1                             EE24
[ G] UNCHAIN                          EE10
[ G] UNCMD                            F76B
[ G] USREND                           DFFF
[ G] USRRAM                           2000
[ G] VALCHR                           E3A3
[ G] VALID                            E35C
[ G] VALTST                           E363
[ G] WDISK                            EB17
[ G] WPERM                            0040
[ G] WRB1                             E95F
[ G] WRC1                             E920
[ G] WRDE1                            E486
[ G] WRDE2                            E495
[ G] WRDEC                            E47E
[ G] WRDEC8                           E47D
[ G] WRDEV                            E5A1
[ G] WRDEV1                           E5A3
[ G] WRHEX                            E55A
[ G] WRHEXW                           E545
[ G] WRITEB                           E937
[ G] WRITEC                           E910
[ G] WRKCHG                           04E5
[ G] WRKDRV                           04E6
[ G] WRKSEC                           04E7
[ G] WRKSPC                           0600
[ G] WRLIN                            E54E
[ G] WRMSG                            E57E
[ G] WRNULL                           FAC5
[ G] WRSEC                            F745
[ G] WRSER                            FAAF
[ G] WRST1                            E576
[ G] WRST2                            E598
[ G] WRSTR                            E574
[ G] WRTST                            E633
[ G] WRWRK                            E638
[ G] WTRY1                            EB1E
[ G] WTRY2                            EB22
[ G] XFORMAT                          0494
[ G] XHOME                            048E
[ G] XRDSEC                           0490
[ G] XWRSEC                           0492
[ G] ZERORC                           E313
