                      (        cubix.asm):00001         ;       title   CUBIX 6809 Operating System
                      (        cubix.asm):00002         ;*
                      (        cubix.asm):00003         ;* CUBIX Operating System for the 6809
                      (        cubix.asm):00004         ;*
                      (        cubix.asm):00005         ;* Copyright 1983-2005 Dave Dunfield
                      (        cubix.asm):00006         ;* All rights reserved.
                      (        cubix.asm):00007         ;*
                      (        cubix.asm):00008         ;* asmode=dist OR demo
                      (        cubix.asm):00009         
                      (        cubix.asm):00010                 IFDEF   dist
                      (        cubix.asm):00011         ;* MEMORY LOCATIONS FOR DISTRIBUTION (NON-PORTED) ROM
     E000             (        cubix.asm):00012         ROM             EQU $E000                         ; OS FIRMWARE
     DC00             (        cubix.asm):00013         RAM             EQU ROM-1024                      ; OS LOCAL STORAGE (1K)
     2000             (        cubix.asm):00014         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
     DFFF             (        cubix.asm):00015         USREND          EQU ROM-1                         ; RAMTEST STOPS HERE
                      (        cubix.asm):00016                 ENDIF
                      (        cubix.asm):00017                 IFDEF   demo
                      (        cubix.asm):00018         ;* MEMORY LOCATIONS FOR THE DEMO SYSTEM USING EXAMPLE DRIVERS
0000                  (        cubix.asm):00019         ROM             EQU $E000                         ; OS FORMWARE
0000                  (        cubix.asm):00020         RAM             EQU ROM-1024                      ; OS LOCAL STORAGE
0000                  (        cubix.asm):00021         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
0000                  (        cubix.asm):00022         USREND          EQU ROM-1                         ; RAMTEST STOPS HERE
0000                  (        cubix.asm):00023         dr_file         SET sample.sys
                      (        cubix.asm):00024                 ENDIF
                      (        cubix.asm):00025         ;* MISC CONSTANTS
     0008             (        cubix.asm):00026         NDEV            EQU 8                             ; NUMBER OF SERIAL DEVICES SUPPORTED
     0004             (        cubix.asm):00027         NDSK            EQU 4                             ; # OF DISK DRIVES SUPPORTED
     0000             (        cubix.asm):00028         DIRSEC          EQU 0                             ; DIRECTORY STARTS HERE
     0001             (        cubix.asm):00029         LNKSEC          EQU 1                             ; STARTING LINK SECTOR ON DISK
     00F0             (        cubix.asm):00030         DEFATR          EQU %11110000                     ; DEFAULT FILE ATTRIBUTES
                      (        cubix.asm):00031         ;* RETURN CODES
     0001             (        cubix.asm):00032         RCBOP           EQU 1                             ; BAD OPERAND
     0002             (        cubix.asm):00033         RCNOTF          EQU 2                             ; FILE NOT FOUND
     0003             (        cubix.asm):00034         RCPRO           EQU 3                             ; FILE PROTECTION VIOLATION
     0004             (        cubix.asm):00035         RCORE           EQU 4                             ; NOT OPEN FOR READ
     0005             (        cubix.asm):00036         RCOWE           EQU 5                             ; NOT OPEN FOR WRITE
     0006             (        cubix.asm):00037         RCEOF           EQU 6                             ; END OF FILE ENCOUNTERED
     0007             (        cubix.asm):00038         RCEXI           EQU 7                             ; FILE ALREADY EXISTS
     0008             (        cubix.asm):00039         RCNOS           EQU 8                             ; NO DISK SPACE AVAILABLE
     0009             (        cubix.asm):00040         RCDSK           EQU 9                             ; DISK ERROR
     000A             (        cubix.asm):00041         RCDEV           EQU 10                            ; INVALID DEVICE
     000B             (        cubix.asm):00042         RCDNL           EQU 11                            ; DOWNLOAD FAILURE
     00FF             (        cubix.asm):00043         RCCMD           EQU 255                           ; BAD COMMAND
                      (        cubix.asm):00044         ;* FILE PERMISSIONS
     0080             (        cubix.asm):00045         RPERM           EQU %10000000                     ; READ PERMISSION
     0040             (        cubix.asm):00046         WPERM           EQU %01000000                     ; WRITE PERMISSION
     0020             (        cubix.asm):00047         EPERM           EQU %00100000                     ; EXECUTE PERMISSION
     0010             (        cubix.asm):00048         DPERM           EQU %00010000                     ; DELETE PERMISSION
                      (        cubix.asm):00049         ;* DISK CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00050                 ORG     0
0000                  (        cubix.asm):00051         DRIVE
0000                  (        cubix.asm):00052                 RMB     1                                 ; DRIVE ID
0001                  (        cubix.asm):00053         NCYL
0001                  (        cubix.asm):00054                 RMB     1                                 ; # TRACKS
0002                  (        cubix.asm):00055         NHEAD
0002                  (        cubix.asm):00056                 RMB     1                                 ; # HEADS
0003                  (        cubix.asm):00057         NSEC
0003                  (        cubix.asm):00058                 RMB     1                                 ; # SECTORS/TRACK
0004                  (        cubix.asm):00059         CYL
0004                  (        cubix.asm):00060                 RMB     1                                 ; CURRENT CYLINDER
0005                  (        cubix.asm):00061         HEAD
0005                  (        cubix.asm):00062                 RMB     1                                 ; CURRENT HEAD
0006                  (        cubix.asm):00063         SEC
0006                  (        cubix.asm):00064                 RMB     1                                 ; CURRENT SECTOR
     0007             (        cubix.asm):00065         CSIZE           EQU *
                      (        cubix.asm):00066         ;* DIRECTORY ENTRY DESCRIPTION
                      (        cubix.asm):00067                 ORG     0
0000                  (        cubix.asm):00068         DPREFIX
0000                  (        cubix.asm):00069                 RMB     8                                 ; DIRECTORY PREFIX
0008                  (        cubix.asm):00070         DNAME
0008                  (        cubix.asm):00071                 RMB     8                                 ; FILENAME
0010                  (        cubix.asm):00072         DTYPE
0010                  (        cubix.asm):00073                 RMB     3                                 ; FILETYPE
0013                  (        cubix.asm):00074         DDADR
0013                  (        cubix.asm):00075                 RMB     2                                 ; DISK ADDRESS
0015                  (        cubix.asm):00076         DRADR
0015                  (        cubix.asm):00077                 RMB     2                                 ; RUN ADDRESS
0017                  (        cubix.asm):00078         DATTR
0017                  (        cubix.asm):00079                 RMB     1                                 ; FILE ATTRIBUTES
                      (        cubix.asm):00080         ;* FILE CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00081                 ORG     0
0000                  (        cubix.asm):00082         OTYPE
0000                  (        cubix.asm):00083                 RMB     1                                 ; TYPE OF OPEN (READ/WRITE ETC.)
0001                  (        cubix.asm):00084         ODRIVE
0001                  (        cubix.asm):00085                 RMB     1                                 ; DRIVE FILE IS ON
0002                  (        cubix.asm):00086         OFIRST
0002                  (        cubix.asm):00087                 RMB     2                                 ; FIRST SECTOR IN ILE
0004                  (        cubix.asm):00088         OSECTOR
0004                  (        cubix.asm):00089                 RMB     2                                 ; SECTOR BEING READ/WRITTEN
0006                  (        cubix.asm):00090         OLSTSEC
0006                  (        cubix.asm):00091                 RMB     2                                 ; LAST SECTOR READ/WRITTEN
0008                  (        cubix.asm):00092         OOFFSET
0008                  (        cubix.asm):00093                 RMB     2                                 ; OFFSET INTO SERIAL BUFFER
     000A             (        cubix.asm):00094         OSIZ            EQU *
                      (        cubix.asm):00095         ;* RAM VARIABLES
                      (        cubix.asm):00096                 ORG     RAM
DC00                  (        cubix.asm):00097         INBUFF
DC00                  (        cubix.asm):00098                 RMB     80                                ; INPUT BUFFER
     DC50             (        cubix.asm):00099         IRAM            EQU *                             ; START OF INITIALIZED RAM
DC50                  (        cubix.asm):00100         DCTRL
DC50                  (        cubix.asm):00101                 RMB     CSIZE*NDSK                        ; DRIVE CONTROL BLOCKS
DC6C                  (        cubix.asm):00102         CONIN
DC6C                  (        cubix.asm):00103                 RMB     1                                 ; SELECTED CONSOLE INPUT
DC6D                  (        cubix.asm):00104         CONOUT
DC6D                  (        cubix.asm):00105                 RMB     1                                 ; SELECTED CONSOLE OUTPUT
                      (        cubix.asm):00106         ;* DITAB MARKS START OF VECTOR TABLE
                      (        cubix.asm):00107         ;* SERIAL DEVICE DRIVERS
DC6E                  (        cubix.asm):00108         DITAB
DC6E                  (        cubix.asm):00109                 RMB     NDEV*2                            ; DEVICE INPUT DRIVERS
DC7E                  (        cubix.asm):00110         DOTAB
DC7E                  (        cubix.asm):00111                 RMB     NDEV*2                            ; DEVICE OUTPUT DRIVERS
                      (        cubix.asm):00112         ;* DISK DRIVERS
DC8E                  (        cubix.asm):00113         XHOME
DC8E                  (        cubix.asm):00114                 RMB     2                                 ; DISK HOME HEAD ROUTINE
DC90                  (        cubix.asm):00115         XRDSEC
DC90                  (        cubix.asm):00116                 RMB     2                                 ; DISK READ SECTOR ROUTINE
DC92                  (        cubix.asm):00117         XWRSEC
DC92                  (        cubix.asm):00118                 RMB     2                                 ; DISK WRITE SECTOR ROUTINE
DC94                  (        cubix.asm):00119         XFORMAT
DC94                  (        cubix.asm):00120                 RMB     2                                 ; DISK FORMAT ROUTINE
                      (        cubix.asm):00121         ;* MACHINE VECTORS
DC96                  (        cubix.asm):00122         SWIVEC
DC96                  (        cubix.asm):00123                 RMB     2                                 ; SWI HANDLER VECTOR
DC98                  (        cubix.asm):00124         SWI2VEC
DC98                  (        cubix.asm):00125                 RMB     2                                 ; SWI2 INTERRUPT VECTOR
DC9A                  (        cubix.asm):00126         SWI3VEC
DC9A                  (        cubix.asm):00127                 RMB     2                                 ; SWI3 INTERRUPT VECTOR
DC9C                  (        cubix.asm):00128         IRQVEC
DC9C                  (        cubix.asm):00129                 RMB     2                                 ; IRQ HANDLER VECTOR
DC9E                  (        cubix.asm):00130         FIRQVEC
DC9E                  (        cubix.asm):00131                 RMB     2                                 ; FIRQ HANDLER VECTOR
DCA0                  (        cubix.asm):00132         NMIVEC
DCA0                  (        cubix.asm):00133                 RMB     2                                 ; NMI HANDLER VECTOR
                      (        cubix.asm):00134         ;* MSGFLG MARKS START OF FLAG TABLES
DCA2                  (        cubix.asm):00135         MSGFLG
DCA2                  (        cubix.asm):00136                 RMB     1                                 ; MESSAGE ENABLED FLAG
DCA3                  (        cubix.asm):00137         DBGFLG
DCA3                  (        cubix.asm):00138                 RMB     1                                 ; DEBUG FLAG
DCA4                  (        cubix.asm):00139         TRCFLG
DCA4                  (        cubix.asm):00140                 RMB     1                                 ; TRACE ENABLED FLAG
     0003             (        cubix.asm):00141         NUMFLG          EQU 3                             ; # FLAGS SUPPORTED
                      (        cubix.asm):00142         ;* DEFAULT DIRECTORY
DCA5                  (        cubix.asm):00143         DEFDRV
DCA5                  (        cubix.asm):00144                 RMB     1                                 ; DEFAULT DRIVE
DCA6                  (        cubix.asm):00145         DEFDIR
DCA6                  (        cubix.asm):00146                 RMB     8                                 ; DEFAULT DIRECTORY
                      (        cubix.asm):00147         ;* SYSTEM DIRECTORY
DCAE                  (        cubix.asm):00148         SYSDRV
DCAE                  (        cubix.asm):00149                 RMB     1                                 ; SYSTEM DRIVE
DCAF                  (        cubix.asm):00150         SYSDIR
DCAF                  (        cubix.asm):00151                 RMB     8                                 ; SYSTEM DIRECTORY
                      (        cubix.asm):00152         ;* NON-INITIALIZED GLOBAL RAM
DCB7                  (        cubix.asm):00153         FDRIVE
DCB7                  (        cubix.asm):00154                 RMB     1                                 ; CURRENT DISK DRIVE
DCB8                  (        cubix.asm):00155         PREFIX
DCB8                  (        cubix.asm):00156                 RMB     8                                 ; DIRECTORY PREFIX
DCC0                  (        cubix.asm):00157         FNAME
DCC0                  (        cubix.asm):00158                 RMB     8                                 ; FILENAME
DCC8                  (        cubix.asm):00159         FTYPE
DCC8                  (        cubix.asm):00160                 RMB     3                                 ; FILETYPE
DCCB                  (        cubix.asm):00161         TEMP
DCCB                  (        cubix.asm):00162                 RMB     2                                 ; TEMPORARY STORAGE
DCCD                  (        cubix.asm):00163         TEMP1
DCCD                  (        cubix.asm):00164                 RMB     2                                 ; MORE TEMPORARY STORAGE
DCCF                  (        cubix.asm):00165         TEMP2
DCCF                  (        cubix.asm):00166                 RMB     2                                 ;STILL MORE
DCD1                  (        cubix.asm):00167         TEMP3
DCD1                  (        cubix.asm):00168                 RMB     2                                 ;STILL MORE
DCD3                  (        cubix.asm):00169         TEMP4
DCD3                  (        cubix.asm):00170                 RMB     2                                 ;STILL MORE
DCD5                  (        cubix.asm):00171         SAVB
DCD5                  (        cubix.asm):00172                 RMB     1                                 ;CALLERS 'B' REGISTER
DCD6                  (        cubix.asm):00173         SAVX
DCD6                  (        cubix.asm):00174                 RMB     2                                 ;CALLERS 'X' REGISTER
DCD8                  (        cubix.asm):00175         SAVY
DCD8                  (        cubix.asm):00176                 RMB     2                                 ;CALLERS 'Y' REGISTER
DCDA                  (        cubix.asm):00177         SAVDRV
DCDA                  (        cubix.asm):00178                 RMB     1                                 ;CALLERS ACTIVE DRIVE
DCDB                  (        cubix.asm):00179         SAVSTK
DCDB                  (        cubix.asm):00180                 RMB     2                                 ;CALLERS STACK POINTER
DCDD                  (        cubix.asm):00181         WRKCHG
DCDD                  (        cubix.asm):00182                 RMB     1                                 ;WORK SECTOR CHANGED
DCDE                  (        cubix.asm):00183         WRKDRV
DCDE                  (        cubix.asm):00184                 RMB     1                                 ;CURRENT WORK SECTOR DRIVE
DCDF                  (        cubix.asm):00185         WRKSEC
DCDF                  (        cubix.asm):00186                 RMB     2                                 ;CURRENT WORK SECTOR
DCE1                  (        cubix.asm):00187         CMDDRV
DCE1                  (        cubix.asm):00188                 RMB     1                                 ;CURRENT COMMAND FILE DRIVE
DCE2                  (        cubix.asm):00189         CMDSEC
DCE2                  (        cubix.asm):00190                 RMB     2                                 ;CURRENTLY OPEN COMMAND FILE SECTOR
DCE4                  (        cubix.asm):00191         CMDOFF
DCE4                  (        cubix.asm):00192                 RMB     2                                 ;OFFSET INTO COMMAND FILE SECTOR
DCE6                  (        cubix.asm):00193         CMDSTK
DCE6                  (        cubix.asm):00194                 RMB     2                                 ;COMMAND PROCESSOR STACK PTR
DCE8                  (        cubix.asm):00195         CMDRC
DCE8                  (        cubix.asm):00196                 RMB     1                                 ;COMMAND FILE RETURN CODES
DCE9                  (        cubix.asm):00197         OLDSTK
DCE9                  (        cubix.asm):00198                 RMB     2                                 ;STACK FROM BEFORE TEMP ENTRY
DCEB                  (        cubix.asm):00199         SDRIVE
DCEB                  (        cubix.asm):00200                 RMB     1                                 ;CURRENTLY SELECTED DRIVE
DCEC                  (        cubix.asm):00201         ERRCNT
DCEC                  (        cubix.asm):00202                 RMB     1                                 ;DISK ERROR RETRY COUNT
DCED                  (        cubix.asm):00203         CMDBUF
DCED                  (        cubix.asm):00204                 RMB     80                                ;COMMAND BUFFER PARAMETER SAVE AREA
     DE00             (        cubix.asm):00205         STACK           EQU RAM+512                       ;SYSTEM STACK
     DE00             (        cubix.asm):00206         WRKSPC          EQU STACK                         ;WORK AREA
                      (        cubix.asm):00207         ;*
                      (        cubix.asm):00208                 ORG     ROM
                      (        cubix.asm):00209         ;* MISC FIXED CONSTANTS
E000                  (        cubix.asm):00210         ROMCHK
E000 FFFF             (        cubix.asm):00211                 FDB     $FFFF                             ;BLANK SPACE TO INSERT CHECKSUM
                      (        cubix.asm):00212                 IFDEF   test
                      (        cubix.asm):00213                 LDD     #ssr
                      (        cubix.asm):00214                 STD     >tvector
                      (        cubix.asm):00215                 JMP     begin
                      (        cubix.asm):00216                 ENDIF
E002                  (        cubix.asm):00217         MBASE
E002 2000             (        cubix.asm):00218                 FDB     USRRAM                            ;BASE MEMORY ADDRESS
                      (        cubix.asm):00219         ;*
                      (        cubix.asm):00220         ;* HARDWARE INITIALIZATION ROUTINE
                      (        cubix.asm):00221         ;*
E004                  (        cubix.asm):00222         DOINIT
E004 108EDC50         (        cubix.asm):00223                 LDY     #IRAM                             ;POINT TO INITIALIZED RAM
E008 7EF939           (        cubix.asm):00224                 JMP     HWINIT                            ;INIT HARDWARE
                      (        cubix.asm):00225         ;*
                      (        cubix.asm):00226         ;* APPLICATION PROGRAM INTERFACE
                      (        cubix.asm):00227         ;*
E00B                  (        cubix.asm):00228         SSR
E00B F7DCD5           (        cubix.asm):00229                 STB     >SAVB                             ;APPLICS SAVED 'B'
E00E BFDCD6           (        cubix.asm):00230                 STX     >SAVX                             ;APPLICS SAVED 'X'
E011 10BFDCD8         (        cubix.asm):00231                 STY     >SAVY                             ;APPLICS SAVED 'Y'
E015 F6DCEB           (        cubix.asm):00232                 LDB     >SDRIVE                           ;GET DOS DRIVE
E018 F7DCDA           (        cubix.asm):00233                 STB     >SAVDRV                           ;SET SAVED DRIVE
E01B 316A             (        cubix.asm):00234                 LEAY    10,S                              ;ADDR OF SAVED PC
E01D AEA4             (        cubix.asm):00235                 LDX     ,Y                                ;GET IT
E01F E680             (        cubix.asm):00236                 LDB     ,X+                               ;GET OPERAND BYTE
E021 AFA4             (        cubix.asm):00237                 STX     ,Y                                ;SAVE UPDATED PC
E023 C16F             (        cubix.asm):00238                 CMPB    #NUMSSR                           ;IS IT A VALID CALL #
E025 2437             (        cubix.asm):00239                 BHS     INVSSR                            ;INVALID CALL
E027 58               (        cubix.asm):00240                 ASLB                                      ;DOUBLE FOR TWO BYTE ENTRIES
E028 8EF85B           (        cubix.asm):00241                 LDX     #SSRTAB                           ;OFFSET TO IT
E02B 3A               (        cubix.asm):00242                 ABX                                       ;UNSIGNED ADD
E02C EC84             (        cubix.asm):00243                 LDD     ,X                                ;GET ADDRESS
E02E FDDCCB           (        cubix.asm):00244                 STD     >TEMP                             ;SAVE SO WE CAN EXEC
E031 10BFDCDB         (        cubix.asm):00245                 STY     >SAVSTK                           ;SAVE STACK POINTER
E035 B6DCA3           (        cubix.asm):00246                 LDA     >DBGFLG                           ;DEBUGGING?
E038 2606             (        cubix.asm):00247                 BNE     DBGSSR                            ;YES, OUTPUT DATA
E03A 357F             (        cubix.asm):00248                 PULS    CC,A,B,DP,X,Y,U                   ;RESTORE APPLICS REGS
E03C 6E9FDCCB         (        cubix.asm):00249                 JMP     [TEMP]                            ;EXECUTE SYSTEM CALL
E040                  (        cubix.asm):00250         DBGSSR
E040 BDE54E           (        cubix.asm):00251                 JSR     WRLIN                             ;OUTPUT LINE
E043 53535220         (        cubix.asm):00252                 FCC     'SSR '
E047 00               (        cubix.asm):00253                 FCB     $00
E048 AEA4             (        cubix.asm):00254                 LDX     ,Y                                ;RECOVER PC
E04A E61F             (        cubix.asm):00255                 LDB     -1,X                              ;GET NUMBER BACK
E04C BDE47D           (        cubix.asm):00256                 JSR     WRDEC8                            ;OUTPUT
E04F BDE54E           (        cubix.asm):00257                 JSR     WRLIN
E052 202D20           (        cubix.asm):00258                 FCC     ' - '
E055 00               (        cubix.asm):00259                 FCB     $00
E056 357F             (        cubix.asm):00260                 PULS    CC,A,B,DP,X,Y,U
E058 8D33             (        cubix.asm):00261                 BSR     DMPREG1                           ;DISPLAY REGS
E05A 6E9FDCCB         (        cubix.asm):00262                 JMP     [TEMP]
E05E                  (        cubix.asm):00263         INVSSR
E05E 1F24             (        cubix.asm):00264                 TFR     Y,S                               ;FIX STACK
E060 BDE54E           (        cubix.asm):00265                 JSR     WRLIN                             ;OUTPUT LINE
E063 496E76616C696420 (        cubix.asm):00266                 FCC     'Invalid SSR '
     53535220
E06F 00               (        cubix.asm):00267                 FCB     $00
E070 BDE47D           (        cubix.asm):00268                 JSR     WRDEC8                            ;OUTPUT
E073 BDE54E           (        cubix.asm):00269                 JSR     WRLIN                             ;OUTPUT LINE
E076 2061742024       (        cubix.asm):00270                 FCC     ' at $'
E07B 00               (        cubix.asm):00271                 FCB     $00
E07C ECE1             (        cubix.asm):00272                 LDD     ,S++                              ;GET ADDR
E07E 830002           (        cubix.asm):00273                 SUBD    #2                                ;BACK TO ADDRESS
E081 BDE545           (        cubix.asm):00274                 JSR     WRHEXW                            ;OUTPUT
E084 BDE588           (        cubix.asm):00275                 JSR     LFCR                              ;NEW LINE
E087 7EE1C6           (        cubix.asm):00276                 JMP     DOSKCM                            ;RE-ENTER, INSURE NO COMMAND
E08A                  (        cubix.asm):00277         DMPREG
E08A 8D01             (        cubix.asm):00278                 BSR     DMPREG1                           ;BSR SO PC ON STACK,4
E08C 39               (        cubix.asm):00279                 RTS
                      (        cubix.asm):00280         ;* DEBUG ROUTINE
E08D                  (        cubix.asm):00281         DMPREG1
E08D 3407             (        cubix.asm):00282                 PSHS    CC,A,B                            ;SAVE REGS
E08F BDE54E           (        cubix.asm):00283                 JSR     WRLIN                             ;OUTPUT MESSAGE
E092 50433D           (        cubix.asm):00284                 FCC     'PC='
E095 00               (        cubix.asm):00285                 FCB     $00
E096 EC65             (        cubix.asm):00286                 LDD     5,S                               ;GET PC
E098 830002           (        cubix.asm):00287                 SUBD    #2                                ;BACK UP TO SSR ADDRESS
E09B BDE545           (        cubix.asm):00288                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E09E BDE54E           (        cubix.asm):00289                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0A1 2043433D         (        cubix.asm):00290                 FCC     ' CC='
E0A5 00               (        cubix.asm):00291                 FCB     $00
E0A6 A6E4             (        cubix.asm):00292                 LDA     ,S                                ;GET CONDITION CODE
E0A8 BDE55A           (        cubix.asm):00293                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0AB BDE54E           (        cubix.asm):00294                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0AE 2044503D         (        cubix.asm):00295                 FCC     ' DP='
E0B2 00               (        cubix.asm):00296                 FCB     $00
E0B3 1FB8             (        cubix.asm):00297                 TFR     DP,A                              ;GET DIRECT PAGE
E0B5 BDE55A           (        cubix.asm):00298                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0B8 BDE54E           (        cubix.asm):00299                 JSR     WRLIN                             ;OUTPUT MESSAHE
E0BB 20413D           (        cubix.asm):00300                 FCC     ' A='
E0BE 00               (        cubix.asm):00301                 FCB     $00
E0BF A661             (        cubix.asm):00302                 LDA     1,S                               ;GET SAVED 'A'
E0C1 BDE55A           (        cubix.asm):00303                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0C4 BDE54E           (        cubix.asm):00304                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0C7 20423D           (        cubix.asm):00305                 FCC     ' B='
E0CA 00               (        cubix.asm):00306                 FCB     $00
E0CB A662             (        cubix.asm):00307                 LDA     2,S                               ;GET SAVED 'B'
E0CD BDE55A           (        cubix.asm):00308                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0D0 BDE54E           (        cubix.asm):00309                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0D3 20583D           (        cubix.asm):00310                 FCC     ' X='
E0D6 00               (        cubix.asm):00311                 FCB     $00
E0D7 1F10             (        cubix.asm):00312                 TFR     X,D                               ;GET 'X'
E0D9 BDE545           (        cubix.asm):00313                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0DC BDE54E           (        cubix.asm):00314                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0DF 20593D           (        cubix.asm):00315                 FCC     ' Y='
E0E2 00               (        cubix.asm):00316                 FCB     $00
E0E3 1F20             (        cubix.asm):00317                 TFR     Y,D                               ;GET 'Y'
E0E5 BDE545           (        cubix.asm):00318                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0E8 BDE54E           (        cubix.asm):00319                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0EB 20553D           (        cubix.asm):00320                 FCC     ' U='
E0EE 00               (        cubix.asm):00321                 FCB     $00
E0EF 1F30             (        cubix.asm):00322                 TFR     U,D                               ;GET 'U'
E0F1 BDE545           (        cubix.asm):00323                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0F4 BDE54E           (        cubix.asm):00324                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0F7 20533D           (        cubix.asm):00325                 FCC     ' S='
E0FA 00               (        cubix.asm):00326                 FCB     $00
E0FB 1F40             (        cubix.asm):00327                 TFR     S,D                               ;GET 'S'
E0FD C30007           (        cubix.asm):00328                 ADDD    #7                                ;DISCOUNT WHAT WE STACKED
E100 BDE545           (        cubix.asm):00329                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E103 BDE588           (        cubix.asm):00330                 JSR     LFCR                              ;OUTPUT NEW LINE
E106 3587             (        cubix.asm):00331                 PULS    CC,A,B,PC                         ;RESTORE & RETURN
                      (        cubix.asm):00332         ;*
                      (        cubix.asm):00333         ;* ZERO WORK RAM & INIT HARDWARE DEVICES
                      (        cubix.asm):00334         ;*
E108                  (        cubix.asm):00335         BEGIN
E108 10CEDE00         (        cubix.asm):00336                 LDS     #STACK                            ;SET UP SYSTEM STACK
E10C 8EDC00           (        cubix.asm):00337                 LDX     #RAM                              ;POINT TO START OF RAM
E10F                  (        cubix.asm):00338         BEG1
E10F 6F80             (        cubix.asm):00339                 CLR     ,X+                               ;ZERO IT
E111 8CDE00           (        cubix.asm):00340                 CMPX    #STACK                            ;AT END?
E114 25F9             (        cubix.asm):00341                 BLO     BEG1                              ;CONTINUE
E116 BDE004           (        cubix.asm):00342                 JSR     DOINIT                            ;INITIALIZE HARDWARE
E119 BDE625           (        cubix.asm):00343                 JSR     PURGE1                            ;INITIALIZE WORK SECTOR
E11C 7FDCEC           (        cubix.asm):00344                 CLR     >ERRCNT                           ;INDICATE NO ERRORS
                      (        cubix.asm):00345         ;        IFNDEF  test
                      (        cubix.asm):00346         ;;* PERFORM CHECKSUM TEST OF ROM
                      (        cubix.asm):00347         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00348         ;        FCC     'ROM... '
                      (        cubix.asm):00349         ;        LDX     #ROMCHK+2                         ;CHECKSUM STARTS HERE
                      (        cubix.asm):00350         ;        CLRA                                      ;ZERO HIGH
                      (        cubix.asm):00351         ;        CLRB                                      ;ZERO LOW
                      (        cubix.asm):00352         ;ROMT1
                      (        cubix.asm):00353         ;        ADDB    ,X+                               ;ADD IN ONE BYTE
                      (        cubix.asm):00354         ;        ADCA    #0                                ;INSURE HIGH INCREMENTS
                      (        cubix.asm):00355         ;        CMPX    #0                                ;AT END OF ROM?
                      (        cubix.asm):00356         ;        BNE     ROMT1                             ;NO, KEEP TRYING
                      (        cubix.asm):00357         ;        CMPD    >ROMCHK                           ;DOES CHECKSUM MATCH?
                      (        cubix.asm):00358         ;        BEQ     ROMT2                             ;YES, ITS OK
                      (        cubix.asm):00359         ;;* ROM TEST FAILED
                      (        cubix.asm):00360         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00361         ;        FCC     'Failed'
                      (        cubix.asm):00362         ;        DEC     >ERRCNT                           ;SET FLAG, INDICATE ERROR
                      (        cubix.asm):00363         ;        BRA     ROMT3
                      (        cubix.asm):00364         ;* ROM TEST PASSED
                      (        cubix.asm):00365         ;ROMT2
                      (        cubix.asm):00366         ;        BSR     SPASS                             ;DISPLAY PASSED MESSAGE
                      (        cubix.asm):00367         ;        ENDIF
                      (        cubix.asm):00368         ;;* PERFORM WALKING BIT TEST OF RAM
                      (        cubix.asm):00369         ;ROMT3
                      (        cubix.asm):00370         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00371         ;        FCC     'RAM... '
                      (        cubix.asm):00372         ;        LDX     >MBASE                            ;GET BASE RAM ADDRESS
                      (        cubix.asm):00373         ;RAMT1
                      (        cubix.asm):00374         ;        LDA     ,X                                ;GET ORIGINAL DATA BYTE
                      (        cubix.asm):00375         ;        LDB     #%10000000                        ;BEGIN WITH LEFTMOST BIT
                      (        cubix.asm):00376         ;RAMT2
                      (        cubix.asm):00377         ;        STB     ,X                                ;WRITE TEST PATTERN
                      (        cubix.asm):00378         ;        CMPB    ,X                                ;DOES IT MATCH
                      (        cubix.asm):00379         ;        BNE     RAMT5                             ;NO, FAILED
                      (        cubix.asm):00380         ;        LSRB                                      ;SHIFT BIT
                      (        cubix.asm):00381         ;        BNE     RAMT2                             ;DO NEXT BIT
                      (        cubix.asm):00382         ;        STA     ,X+                               ;RESTORE ORIGINAL DATA
                      (        cubix.asm):00383         ;;* ON EVEN PAGE BOUNDARYS, TEST FOR ABORT KEY
                      (        cubix.asm):00384         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00385         ;        TSTB                                      ;EVEN BOUNDARY?
                      (        cubix.asm):00386         ;        BNE     RAMT3                             ;NO, DON'T TEST
                      (        cubix.asm):00387         ;        JSR     TSTCHR                            ;ANY CHARACTERS RECEIVED?
                      (        cubix.asm):00388         ;        CMPA    #$1B                              ;ESCAPE ABORTS?
                      (        cubix.asm):00389         ;        BEQ     RAMT4                             ;ABORT RAM TEST
                      (        cubix.asm):00390         ;;* CONTINUE TILL AT END OF USER RAM
                      (        cubix.asm):00391         ;RAMT3
                      (        cubix.asm):00392         ;        CMPX    #USREND                           ;ARE WE OVER?
                      (        cubix.asm):00393         ;        BLO     RAMT1                             ;NO, ITS OK
                      (        cubix.asm):00394         ;;* FINISHED, RAM TEST PASSED
                      (        cubix.asm):00395         ;        BSR     SPASS                             ;INDICATE SUCCESS
                      (        cubix.asm):00396         ;        BRA     HELLO                             ;AND PROCEED
                      (        cubix.asm):00397         ;* DISPLAY 'PASSED' MESSAGE
                      (        cubix.asm):00398         ;SPASS
                      (        cubix.asm):00399         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00400         ;        FCC     'Passed'
                      (        cubix.asm):00401         ;        RTS
                      (        cubix.asm):00402         ;;* RAM TEST ABORTED BY ESCAPE
                      (        cubix.asm):00403         ;RAMT4
                      (        cubix.asm):00404         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00405         ;        FCC     'Aborted'
                      (        cubix.asm):00406         ;        BRA     RAMT6                             ;AND CONTINUE
                      (        cubix.asm):00407         ;;* RAM TEST FAILED,
                      (        cubix.asm):00408         ;RAMT5
                      (        cubix.asm):00409         ;        STA     ,X                                ;RESAVE OLD VALUE
                      (        cubix.asm):00410         ;        JSR     WRLIN                             ;OUTPUT FAILED MESSAGE
                      (        cubix.asm):00411         ;        FCC     'Failed at $'
                      (        cubix.asm):00412         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00413         ;        JSR     WRHEXW                            ;DISPLAY IN HEX
                      (        cubix.asm):00414         ;        JSR     LFCR                              ;NEW LINE
                      (        cubix.asm):00415         ;RAMT6
                      (        cubix.asm):00416         ;        DEC     >ERRCNT                           ;INDICATE ERRORS
                      (        cubix.asm):00417         ;* ISSUE HEARALD MESSAGE & START THE BALL ROLLING
E11F                  (        cubix.asm):00418         HELLO
E11F BDE57E           (        cubix.asm):00419                 JSR     WRMSG
E122 0A               (        cubix.asm):00420                 FCB     $0A
E123 4355424958207665 (        cubix.asm):00421                 FCC     'CUBIX version 1.5'
     7273696F6E20312E
     35
E134 0A0D0A           (        cubix.asm):00422                 FCB     $0A,$0D,$0A
E137 436F707972696768 (        cubix.asm):00423                 FCC     'Copyright 1983-2005 Dave Dunfield'
     7420313938332D32
     3030352044617665
     2044756E6669656C
     64
E158 0A0D             (        cubix.asm):00424                 FCB     $0A,$0D
E15A 416C6C2072696768 (        cubix.asm):00425                 FCC     'All rights reserved'
     7473207265736572
     766564
E16D 0A0D00           (        cubix.asm):00426                 FCB     $0A,$0D,0
                      (        cubix.asm):00427         
                      (        cubix.asm):00428         ;* IF NO ERRORS, EXECUTE THE STARTUP FILE
E170 B6DCEC           (        cubix.asm):00429                 LDA     >ERRCNT                           ;GET ERROR FLAG
E173 2618             (        cubix.asm):00430                 BNE     CMD                               ;ERRORS, DO NOT EXECUTE
E175 108EF707         (        cubix.asm):00431                 LDY     #IPLFILE                          ;POINT TO IPL FILE
E179 BDE377           (        cubix.asm):00432                 JSR     GETNAM                            ;GET FILE NAME
E17C CEE18D           (        cubix.asm):00433                 LDU     #CMD                              ;ADDRESS TO RETURN TO
E17F 3440             (        cubix.asm):00434                 PSHS    U                                 ;SAVE ON STACK (FAKE JSR)
E181 10FFDCDB         (        cubix.asm):00435                 STS     >SAVSTK                           ;SAVE STACK INCASE ERROR
E185 BDE692           (        cubix.asm):00436                 JSR     LOCDIR                            ;LOCATE FILE IN DIRECTORY
E188 2603             (        cubix.asm):00437                 BNE     CMD                               ;NOT FOUND, REPORT ERROR
E18A 7EE25B           (        cubix.asm):00438                 JMP     EXE3                              ;EXECUTE FILE
                      (        cubix.asm):00439         ;*
                      (        cubix.asm):00440         ;* COMMAND INTERPRETER
                      (        cubix.asm):00441         ;*
E18D                  (        cubix.asm):00442         CMD
E18D 10CEDE00         (        cubix.asm):00443                 LDS     #STACK                            ;SET UP STACK
E191 BDE633           (        cubix.asm):00444                 JSR     WRTST                             ;WRITE OUT WORK SECTOR IF MODIFIED
E194 BDE4A5           (        cubix.asm):00445                 JSR     GLINE                             ;GET LINE OF INPUT
E197 8D34             (        cubix.asm):00446                 BSR     EXECMD                            ;EXECUTE COMMAND
E199                  (        cubix.asm):00447         RCRET
E199 27F2             (        cubix.asm):00448                 BEQ     CMD                               ;NO RETURN CODE TO DISPLAY
E19B 1F89             (        cubix.asm):00449                 TFR     A,B                               ;WRITE IT
E19D BDE54E           (        cubix.asm):00450                 JSR     WRLIN                             ;OUTPUT MESSAGE
E1A0 52633D           (        cubix.asm):00451                 FCC     'Rc='
E1A3 00               (        cubix.asm):00452                 FCB     $00
E1A4 BDE47D           (        cubix.asm):00453                 JSR     WRDEC8                            ;OUTPUT IN DECIMAL
E1A7 BDE588           (        cubix.asm):00454                 JSR     LFCR                              ;NEW LINE
E1AA 20E1             (        cubix.asm):00455                 BRA     CMD                               ;GET NEXT COMMAND
                      (        cubix.asm):00456         ;* RE-ENTRY POINT
E1AC                  (        cubix.asm):00457         REENT
E1AC 3401             (        cubix.asm):00458                 PSHS    CC                                ;SAVE CC
E1AE 8E0000           (        cubix.asm):00459                 LDX     #0                                ;GET A ZERO
E1B1 BFDCE9           (        cubix.asm):00460                 STX     >OLDSTK                           ;CLEAR RETURN STACK
E1B4 BEDCE6           (        cubix.asm):00461                 LDX     >CMDSTK                           ;GET CMD STACK
E1B7 2604             (        cubix.asm):00462                 BNE     CMDGO                             ;KEEP IT GOING
E1B9 3501             (        cubix.asm):00463                 PULS    CC                                ;RESTORE CC
E1BB 20DC             (        cubix.asm):00464                 BRA     RCRET                             ;AND CONTINUE
E1BD                  (        cubix.asm):00465         CMDGO
E1BD 3501             (        cubix.asm):00466                 PULS    CC
E1BF 7EF57E           (        cubix.asm):00467                 JMP     CMDRET                            ;RETURN TO COMMAND
                      (        cubix.asm):00468         ;* TEMPORARY DOS ENTRY
E1C2                  (        cubix.asm):00469         TMPENT
E1C2 10FFDCE9         (        cubix.asm):00470                 STS     >OLDSTK                           ;SAVE OLD STACK
E1C6                  (        cubix.asm):00471         DOSKCM
E1C6 4F               (        cubix.asm):00472                 CLRA
E1C7 5F               (        cubix.asm):00473                 CLRB
E1C8 FDDCE6           (        cubix.asm):00474                 STD     >CMDSTK                           ;ZERO COMAND STACK
E1CB 20C0             (        cubix.asm):00475                 BRA     CMD                               ;CONTINUE
                      (        cubix.asm):00476         ;*
                      (        cubix.asm):00477         ;* EXECUTE DOS COMMAND(Y)
                      (        cubix.asm):00478         ;*
E1CD                  (        cubix.asm):00479         EXECMD
E1CD 10FFDCDB         (        cubix.asm):00480                 STS     >SAVSTK                           ;SAVE STACK POINTER
E1D1 B6DCEB           (        cubix.asm):00481                 LDA     >SDRIVE                           ;GET DISK DRIVE
E1D4 B7DCDA           (        cubix.asm):00482                 STA     >SAVDRV                           ;SAVE SELECTED DRIVE
E1D7 BDE4DC           (        cubix.asm):00483                 JSR     SKIP                              ;LOOK FOR NULL COMMAND
E1DA 271A             (        cubix.asm):00484                 BEQ     NULCMD                            ;DON'T EXECUTE NULL
E1DC 10BFDCCF         (        cubix.asm):00485                 STY     >TEMP2                            ;SAVED POINTER TO COMMAND
E1E0 8140             (        cubix.asm):00486                 CMPA    #'@'                              ;EXECUTE COMMAND FILE?
E1E2 10271287         (        cubix.asm):00487                 LBEQ    COMFIL                            ;DO IT
E1E6 8EF7E9           (        cubix.asm):00488                 LDX     #CMDNAM                           ;POINT TO COMMAND TABLE
E1E9 BDE505           (        cubix.asm):00489                 JSR     TLOOK                             ;LOOK FOR IT
E1EC C10E             (        cubix.asm):00490                 CMPB    #NUMCMD                           ;IS IT OVER?
E1EE 2434             (        cubix.asm):00491                 BHS     EXE                               ;YES, TRY USER DEFINED
E1F0 58               (        cubix.asm):00492                 ASLB                                      ;TWO BYTE ENTRIES
E1F1 8EF83F           (        cubix.asm):00493                 LDX     #CMDADR                           ;GET COMMAND ADDRESSES
E1F4 6E95             (        cubix.asm):00494                 JMP     [B,X]                             ;EXECUTE COMMAND
E1F6                  (        cubix.asm):00495         NULCMD
E1F6 39               (        cubix.asm):00496                 RTS
                      (        cubix.asm):00497         ;*
                      (        cubix.asm):00498         ;* RUN COMMAND
                      (        cubix.asm):00499         ;*
E1F7                  (        cubix.asm):00500         RUN
E1F7 BDE296           (        cubix.asm):00501                 JSR     GETSNA                            ;GET FILENAME
E1FA                  (        cubix.asm):00502         RUN1
E1FA 8645             (        cubix.asm):00503                 LDA     #'E'                              ;GET TYPE
E1FC C658             (        cubix.asm):00504                 LDB     #'X'                              ;GET TYPE
E1FE ED81             (        cubix.asm):00505                 STD     ,X++                              ;SAVE IT
E200 A784             (        cubix.asm):00506                 STA     ,X                                ;WRITE IT
E202 BDE659           (        cubix.asm):00507                 JSR     LOCERR                            ;DOES IT EXIST
                      (        cubix.asm):00508         ;* FILE HAS BEEN FOUND, EXECUTE
E205                  (        cubix.asm):00509         RUN2
E205 A68817           (        cubix.asm):00510                 LDA     DATTR,X                           ;GET ATTRIBUTES
E208 8520             (        cubix.asm):00511                 BITA    #EPERM                            ;CAN WE EXECUTE?
E20A 1027069F         (        cubix.asm):00512                 LBEQ    PROERR                            ;NO, REPORT ERROR
E20E EC8813           (        cubix.asm):00513                 LDD     DDADR,X                           ;GET DISK ADDRESS
E211 AE8815           (        cubix.asm):00514                 LDX     DRADR,X                           ;GET RUN ADDRESS
E214 BFDCCD           (        cubix.asm):00515                 STX     >TEMP1                            ;SAVE
E217 BDEE6D           (        cubix.asm):00516                 JSR     LCHAIN                            ;LOAD THE CHAIN
E21A F6DCEB           (        cubix.asm):00517                 LDB     >SDRIVE                           ;GET OUR CURRENT DRIVE
E21D BDE4DC           (        cubix.asm):00518                 JSR     SKIP                              ;SKIP TO COMMANDS
E220 6E9FDCCD         (        cubix.asm):00519                 JMP     [TEMP1]                           ;PASS CONTROL TO HIM
                      (        cubix.asm):00520         ;*
                      (        cubix.asm):00521         ;* COMMAND WAS NOT RECOGNIZED, SEARCH SYSTEM DIRECTORY LOOKING
                      (        cubix.asm):00522         ;* FOR FILE WITH NAME MATCHING COMMAND.
                      (        cubix.asm):00523         ;*
E224                  (        cubix.asm):00524         EXE
E224 7FDCCD           (        cubix.asm):00525                 CLR     >TEMP1                            ;INDICATE IMPLIED RUN
E227 8EDCAE           (        cubix.asm):00526                 LDX     #SYSDRV                           ;PT TO SYSTEM DIRECTORY (& DRIVE)
E22A BDE3B3           (        cubix.asm):00527                 JSR     GETDIR1                           ;GET DIR & DRIVE
E22D 8D6F             (        cubix.asm):00528                 BSR     NAMGET                            ;GET NAME
E22F 862A             (        cubix.asm):00529                 LDA     #'*'                              ;WILDCARD
E231 A784             (        cubix.asm):00530                 STA     ,X                                ;SAVE TYPE
E233 B6DCB7           (        cubix.asm):00531                 LDA     >FDRIVE                           ;GET FILENAME DRIVE
E236 B7DCEB           (        cubix.asm):00532                 STA     >SDRIVE                           ;SELECT DRIVE
E239 CC0000           (        cubix.asm):00533                 LDD     #DIRSEC                           ;GET DIRECTORY SECTOR
E23C                  (        cubix.asm):00534         EXE1
E23C BDE5FC           (        cubix.asm):00535                 JSR     RDWRK                             ;READ A WORK SECTOR
E23F                  (        cubix.asm):00536         EXE2
E23F BDE323           (        cubix.asm):00537                 JSR     COMNAM                            ;DOES IT MATCH
E242 2717             (        cubix.asm):00538                 BEQ     EXE3                              ;YES, IT DOES
                      (        cubix.asm):00539         ;* NAMES DON'T MATCH, ADVANCE TO NEXT ENTRY
E244 308820           (        cubix.asm):00540                 LEAX    32,X                              ;NEXT
E247 8CE000           (        cubix.asm):00541                 CMPX    #WRKSPC+512                       ;OVER?
E24A 25F3             (        cubix.asm):00542                 BLO     EXE2                              ;NO, KEEP LOOKING
E24C FCDCDF           (        cubix.asm):00543                 LDD     >WRKSEC                           ;GET SECTOR
E24F BDE5DF           (        cubix.asm):00544                 JSR     FNDLNK                            ;LOCATE LINK
E252 26E8             (        cubix.asm):00545                 BNE     EXE1                              ;READ IT & LOOK
                      (        cubix.asm):00546         ;* COMMAND IS INVALID, REPORT ERROR
E254                  (        cubix.asm):00547         BADCMD
E254 8EF711           (        cubix.asm):00548                 LDX     #UNCMD                            ;PT TO MESSAGE
E257 86FF             (        cubix.asm):00549                 LDA     #RCCMD                            ;GET RC
E259 2062             (        cubix.asm):00550                 BRA     ERRMRC                            ;REPORT ERROR
                      (        cubix.asm):00551         ;* COMMAND MATCHES FILENAME, CHECK TYPE FOR EXECUTE
E25B                  (        cubix.asm):00552         EXE3
E25B A68812           (        cubix.asm):00553                 LDA     DTYPE+2,X                         ;GET TYPE
E25E B7DCCA           (        cubix.asm):00554                 STA     >FTYPE+2                          ;SAVE IT
E261 EC8810           (        cubix.asm):00555                 LDD     DTYPE,X                           ;GET REST OF TYPE
E264 FDDCC8           (        cubix.asm):00556                 STD     >FTYPE                            ;SAVE IT
                      (        cubix.asm):00557         ;* WE HAVE FOUND EXECUTABLE FILE
E267 10834000         (        cubix.asm):00558                 CMPD    #'@'*256                          ;IS IT A COMMAND FILE?
E26B 10271213         (        cubix.asm):00559                 LBEQ    COMGO                             ;YES, EXECUTE
E26F 8145             (        cubix.asm):00560                 CMPA    #'E'                              ;'EX'?
E271 2609             (        cubix.asm):00561                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E273 C158             (        cubix.asm):00562                 CMPB    #'X'                              ;'EX'?
E275 2605             (        cubix.asm):00563                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E277 A18812           (        cubix.asm):00564                 CMPA    DTYPE+2,X                         ;INSURE ITS 'EXE'
E27A 2789             (        cubix.asm):00565                 BEQ     RUN2                              ;YES, EXECUTE
                      (        cubix.asm):00566         ;* UNKNOWN FILETYPE, TRY FOR USER COMMAND PROCESSOR
E27C                  (        cubix.asm):00567         EXE4
E27C 1F12             (        cubix.asm):00568                 TFR     X,Y                               ;'Y' POINTS TO DIR ENTRY
E27E 8EDCC0           (        cubix.asm):00569                 LDX     #FNAME                            ;POINT TO TYPE
E281 ED81             (        cubix.asm):00570                 STD     ,X++                              ;SAVE IT
E283 A6A812           (        cubix.asm):00571                 LDA     DTYPE+2,Y                         ;GET LAST CHR
E286 A780             (        cubix.asm):00572                 STA     ,X+                               ;SAVE IT
E288                  (        cubix.asm):00573         EXE5
E288 6F80             (        cubix.asm):00574                 CLR     ,X+                               ;CLEAR IT
E28A 8CDCC8           (        cubix.asm):00575                 CMPX    #FNAME+8                          ;OVER?
E28D 25F9             (        cubix.asm):00576                 BLO     EXE5                              ;ALL OUT
E28F 10BEDCCF         (        cubix.asm):00577                 LDY     >TEMP2                            ;RESTORE COMMAND POINTER
E293 7EE1FA           (        cubix.asm):00578                 JMP     RUN1                              ;TRY THIS ONE
                      (        cubix.asm):00579         ;*
                      (        cubix.asm):00580         ;* GET FILENAME WITHOUT TYPE, NORMAL DEFAULT
                      (        cubix.asm):00581         ;*
E296                  (        cubix.asm):00582         GETSNA
E296 BDE3B0           (        cubix.asm):00583                 JSR     GETDIR                            ;GET DIRECTORY
E299                  (        cubix.asm):00584         GETSN0
E299 86FF             (        cubix.asm):00585                 LDA     #$FF                              ;FLAG
E29B B7DCCD           (        cubix.asm):00586                 STA     >TEMP1                            ;SET IT
E29E                  (        cubix.asm):00587         NAMGET
E29E C608             (        cubix.asm):00588                 LDB     #8                                ;MAX EIGHT CHARS
E2A0                  (        cubix.asm):00589         GETSN1
E2A0 BDE4E9           (        cubix.asm):00590                 JSR     TSTERM                            ;TERMINATOR?
E2A3 2706             (        cubix.asm):00591                 BEQ     GOPAD                             ;YES, QUIT
E2A5 812F             (        cubix.asm):00592                 CMPA    #'/'                              ;SPECIAL TERMINATOR
E2A7 2605             (        cubix.asm):00593                 BNE     GETSN2
E2A9 313F             (        cubix.asm):00594                 LEAY    -1,Y                              ;BACKUP TO SLASH
E2AB                  (        cubix.asm):00595         GOPAD
E2AB 7EE3A9           (        cubix.asm):00596                 JMP     PAD
E2AE                  (        cubix.asm):00597         GETSN2
E2AE A780             (        cubix.asm):00598                 STA     ,X+                               ;SAVE IT
E2B0 5A               (        cubix.asm):00599                 DECB                                      ;BACKUP
E2B1 2AED             (        cubix.asm):00600                 BPL     GETSN1                            ;MORE
E2B3 7DDCCD           (        cubix.asm):00601                 TST     >TEMP1                            ;WERE WE 'RUN'ING
E2B6 279C             (        cubix.asm):00602                 BEQ     BADCMD                            ;NO,
                      (        cubix.asm):00603         ;*
                      (        cubix.asm):00604         ;* INVALID OPERAND
                      (        cubix.asm):00605         ;*
E2B8                  (        cubix.asm):00606         BADOPR
E2B8 8EF726           (        cubix.asm):00607                 LDX     #BADOPM                           ;MESSAGE
E2BB 8601             (        cubix.asm):00608                 LDA     #RCBOP                            ;RETURN CODE
                      (        cubix.asm):00609         ;*
                      (        cubix.asm):00610         ;* ISSUE ERROR MESSAGE & RETURN TO CALLER WITH RETURN CODE
                      (        cubix.asm):00611         ;*
E2BD                  (        cubix.asm):00612         ERRMRC
E2BD 3401             (        cubix.asm):00613                 PSHS    CC                                ;SAVE IT
                      (        cubix.asm):00614         ;* VERIFY CONSOLE DEVICE IS VALID & RESET IF NOT
E2BF F6DC6D           (        cubix.asm):00615                 LDB     >CONOUT                           ;GET OUTPUT
E2C2 C108             (        cubix.asm):00616                 CMPB    #NDEV                             ;IN RANGE
E2C4 240A             (        cubix.asm):00617                 BHS     ERRM1                             ;NO - ERROR
E2C6 108EDC7E         (        cubix.asm):00618                 LDY     #DOTAB                            ;POINT TO TABLE
E2CA 58               (        cubix.asm):00619                 ASLB                                      ;X2
E2CB 10AEA5           (        cubix.asm):00620                 LDY     B,Y                               ;INSTALLED?
E2CE 2605             (        cubix.asm):00621                 BNE     ERRM2                             ;YES, ITS OK
E2D0                  (        cubix.asm):00622         ERRM1
E2D0 C601             (        cubix.asm):00623                 LDB     #1                                ;DEFAULT DEVICE
E2D2 F7DC6D           (        cubix.asm):00624                 STB     >CONOUT                           ;RESET INPUT
E2D5                  (        cubix.asm):00625         ERRM2
E2D5 F6DC6C           (        cubix.asm):00626                 LDB     >CONIN                            ;GET INPUT
E2D8 C108             (        cubix.asm):00627                 CMPB    #NDEV                             ;IN RANGE
E2DA 240A             (        cubix.asm):00628                 BHS     ERRM3                             ;NO - ERROR
E2DC 108EDC6E         (        cubix.asm):00629                 LDY     #DITAB                            ;POINT TO TABLE
E2E0 58               (        cubix.asm):00630                 ASLB                                      ;X2
E2E1 10AEA5           (        cubix.asm):00631                 LDY     B,Y                               ;INSTALLED?
E2E4 2605             (        cubix.asm):00632                 BNE     ERRM4                             ;YES, ITS OK
E2E6                  (        cubix.asm):00633         ERRM3
E2E6 C601             (        cubix.asm):00634                 LDB     #1                                ;DEFAULT DEVICE
E2E8 F7DC6C           (        cubix.asm):00635                 STB     >CONIN                            ;RESET INPUT
E2EB                  (        cubix.asm):00636         ERRM4
E2EB 7DDCA2           (        cubix.asm):00637                 TST     >MSGFLG                           ;ARE MESSAGES ENABLED
E2EE 2706             (        cubix.asm):00638                 BEQ     NOEMSG                            ;NO, DON'T OUTPUT
E2F0 BDE574           (        cubix.asm):00639                 JSR     WRSTR                             ;OUTPUT
E2F3 BDE588           (        cubix.asm):00640                 JSR     LFCR                              ;NEW LINE
E2F6                  (        cubix.asm):00641         NOEMSG
E2F6 3501             (        cubix.asm):00642                 PULS    CC                                ;RESTORE CC
                      (        cubix.asm):00643         ;* RETURN TO CALLER WITH NO ERROR MESSAGE
E2F8                  (        cubix.asm):00644         ERRRET
E2F8 3401             (        cubix.asm):00645                 PSHS    CC                                ;SAVE CC
E2FA F6DCDA           (        cubix.asm):00646                 LDB     >SAVDRV                           ;GET SAVED DRIVE
E2FD F7DCEB           (        cubix.asm):00647                 STB     >SDRIVE                           ;RESET SELECTED DRIVE
E300 BEDCD6           (        cubix.asm):00648                 LDX     >SAVX                             ;RESTORE 'X'
E303 10BEDCD8         (        cubix.asm):00649                 LDY     >SAVY                             ;RESTORE 'Y'
E307 F6DCD5           (        cubix.asm):00650                 LDB     >SAVB                             ;RESTORE 'B'
E30A 3501             (        cubix.asm):00651                 PULS    CC                                ;RESTORE CONDITION CODES
E30C 2705             (        cubix.asm):00652                 BEQ     ZERORC                            ;ITS ZERO
E30E 10FEDCDB         (        cubix.asm):00653                 LDS     >SAVSTK                           ;GET SAVED SP
E312 39               (        cubix.asm):00654                 RTS
E313                  (        cubix.asm):00655         ZERORC
E313 10FEDCDB         (        cubix.asm):00656                 LDS     >SAVSTK                           ;GET STACK
E317 1A04             (        cubix.asm):00657                 ORCC    #%00000100                        ;SET 'Z'
E319 39               (        cubix.asm):00658                 RTS
                      (        cubix.asm):00659         ;*
                      (        cubix.asm):00660         ;* GET FILE WITHOUT TYPE, DEFAULT TO SYSTEM
                      (        cubix.asm):00661         ;*
E31A                  (        cubix.asm):00662         GETSYS
E31A 8EDCAE           (        cubix.asm):00663                 LDX     #SYSDRV                           ;DEFAULT IS SYSTEM
                      (        cubix.asm):00664         ;*
                      (        cubix.asm):00665         ;* GET FILENAME WITHOUR TYPE, DEFAULT(X)
                      (        cubix.asm):00666         ;*
E31D                  (        cubix.asm):00667         GETSDI
E31D BDE3B3           (        cubix.asm):00668                 JSR     GETDIR1                           ;GET NAME
E320 7EE299           (        cubix.asm):00669                 JMP     GETSN0                            ;GET FILENAME
                      (        cubix.asm):00670         ;*
                      (        cubix.asm):00671         ;* COMPARES NAME(X) TO SAVED FILENAME
                      (        cubix.asm):00672         ;*
E323                  (        cubix.asm):00673         COMNAM
E323 3436             (        cubix.asm):00674                 PSHS    A,B,X,Y                           ;SAVE REGS
E325 108EDCB8         (        cubix.asm):00675                 LDY     #PREFIX                           ;POINT TO SAVED
E329 A684             (        cubix.asm):00676                 LDA     ,X                                ;INSURE NAME IS NOT NULL
E32B 2603             (        cubix.asm):00677                 BNE     NOTNUL                            ;ITS NOT,
E32D 4A               (        cubix.asm):00678                 DECA                                      ;GET FF
E32E 2010             (        cubix.asm):00679                 BRA     CEND                              ;QUIT
E330                  (        cubix.asm):00680         NOTNUL
E330 C608             (        cubix.asm):00681                 LDB     #8                                ;EIGHT CHARS NI PREFIX
E332 8D0E             (        cubix.asm):00682                 BSR     COMX                              ;COMPARE
E334 260A             (        cubix.asm):00683                 BNE     CEND                              ;NOT SAME, EXIT
E336 C608             (        cubix.asm):00684                 LDB     #8                                ;EIGHT CHARS IN NAME
E338 8D08             (        cubix.asm):00685                 BSR     COMX                              ;COMPARE
E33A 2604             (        cubix.asm):00686                 BNE     CEND                              ;NOT SAME
E33C C603             (        cubix.asm):00687                 LDB     #3                                ;THREE CHARS IN TYPE
E33E 8D02             (        cubix.asm):00688                 BSR     COMX                              ;COMPARE
E340                  (        cubix.asm):00689         CEND
E340 35B6             (        cubix.asm):00690                 PULS    A,B,X,Y,PC                        ;GO HOME
E342                  (        cubix.asm):00691         COMX
E342 A6A0             (        cubix.asm):00692                 LDA     ,Y+                               ;GET CHAR FROM SAVED
E344 812A             (        cubix.asm):00693                 CMPA    #'*'                              ;WILDCARD?
E346 2708             (        cubix.asm):00694                 BEQ     RNXT                              ;RETURN WITH TRUE
E348 A180             (        cubix.asm):00695                 CMPA    ,X+                               ;DOES IT MATCH
E34A 2606             (        cubix.asm):00696                 BNE     RNXT1                             ;NO, FAIL
E34C 5A               (        cubix.asm):00697                 DECB                                      ;BACKUP
E34D 26F3             (        cubix.asm):00698                 BNE     COMX                              ;OK
E34F 39               (        cubix.asm):00699                 RTS
E350                  (        cubix.asm):00700         RNXT
E350 3001             (        cubix.asm):00701                 LEAX    1,X
E352                  (        cubix.asm):00702         RNXT1
E352 5A               (        cubix.asm):00703                 DECB                                      ;REDUCE COUNT
E353 2704             (        cubix.asm):00704                 BEQ     BRET                              ;DONE, QUIT
E355 3121             (        cubix.asm):00705                 LEAY    1,Y                               ;ADVANCE
E357 20F7             (        cubix.asm):00706                 BRA     RNXT                              ;AND CONTINUE
E359                  (        cubix.asm):00707         BRET
E359 812A             (        cubix.asm):00708                 CMPA    #'*'                              ;WUZ IT WILDCARD
E35B 39               (        cubix.asm):00709                 RTS
                      (        cubix.asm):00710         ;*
                      (        cubix.asm):00711         ;* TEST SAVED FILENAME FOR VALIDITY AS A SINGLE FILE
                      (        cubix.asm):00712         ;*
E35C                  (        cubix.asm):00713         VALID
E35C 3416             (        cubix.asm):00714                 PSHS    A,B,X                             ;SAVE REGS
E35E C613             (        cubix.asm):00715                 LDB     #19                               ;LENGTH OF NAME
E360 8EDCB8           (        cubix.asm):00716                 LDX     #PREFIX                           ;POINT TO NAME
E363                  (        cubix.asm):00717         VALTST
E363 A680             (        cubix.asm):00718                 LDA     ,X+                               ;GETCHAR
E365 812A             (        cubix.asm):00719                 CMPA    #'*'                              ;WILDCARD
E367 2704             (        cubix.asm):00720                 BEQ     RETNZ                             ;INVALID
E369 5A               (        cubix.asm):00721                 DECB                                      ;BACKUP
E36A 26F7             (        cubix.asm):00722                 BNE     VALTST                            ;CONTINUE
E36C 4F               (        cubix.asm):00723                 CLRA                                      ;ZERO RETURN CODE
E36D                  (        cubix.asm):00724         RETNZ
E36D 4D               (        cubix.asm):00725                 TSTA                                      ;SET 'Z' FLAG
E36E 3596             (        cubix.asm):00726                 PULS    A,B,X,PC
                      (        cubix.asm):00727         ;*
                      (        cubix.asm):00728         ;* GET FILENAME & INSURE ITS VALID
                      (        cubix.asm):00729         ;*
E370                  (        cubix.asm):00730         GETVAL
E370 8D05             (        cubix.asm):00731                 BSR     GETNAM                            ;GET FILENAME
E372 8DE8             (        cubix.asm):00732                 BSR     VALID                             ;TEST FOR VALID
E374 2620             (        cubix.asm):00733                 BNE     BADOP2                            ;INVALID, ERROR
E376 39               (        cubix.asm):00734                 RTS
                      (        cubix.asm):00735         ;*
                      (        cubix.asm):00736         ;* GET A FILENAME FROM INPUT LINE
                      (        cubix.asm):00737         ;*
E377                  (        cubix.asm):00738         GETNAM
E377 8D37             (        cubix.asm):00739                 BSR     GETDIR                            ;GET DRIVE & DIRECTORY
E379                  (        cubix.asm):00740         GFNAM
E379 C608             (        cubix.asm):00741                 LDB     #8                                ;EIGHT CHARS/NAME
E37B                  (        cubix.asm):00742         GF1
E37B 8D26             (        cubix.asm):00743                 BSR     VALCHR                            ;GET CHAR
E37D 812E             (        cubix.asm):00744                 CMPA    #'.'                              ;SEPERATOR?
E37F 2707             (        cubix.asm):00745                 BEQ     GFTYP                             ;YES
E381 A780             (        cubix.asm):00746                 STA     ,X+                               ;SAVE IT
E383 5A               (        cubix.asm):00747                 DECB                                      ;BACKUP
E384 2AF5             (        cubix.asm):00748                 BPL     GF1                               ;KEEP GOING
E386 200E             (        cubix.asm):00749                 BRA     BADOP2                            ;ERROR
E388                  (        cubix.asm):00750         GFTYP
E388 8D1F             (        cubix.asm):00751                 BSR     PAD                               ;PAD FILENAME
E38A C603             (        cubix.asm):00752                 LDB     #3                                ;THREE CHARS/TYPE
E38C                  (        cubix.asm):00753         GF2
E38C BDE4E9           (        cubix.asm):00754                 JSR     TSTERM                            ;GET CHAR
E38F 2708             (        cubix.asm):00755                 BEQ     GF3                               ;HIT END
E391 A780             (        cubix.asm):00756                 STA     ,X+                               ;SAVE IT
E393 5A               (        cubix.asm):00757                 DECB                                      ;REDUCE COUNT
E394 2AF6             (        cubix.asm):00758                 BPL     GF2                               ;KEEP GOING
E396                  (        cubix.asm):00759         BADOP2
E396 7EE2B8           (        cubix.asm):00760                 JMP     BADOPR                            ;ERROR
E399                  (        cubix.asm):00761         GF3
E399 8D0E             (        cubix.asm):00762                 BSR     PAD                               ;ZERO IT
E39B BDE4DC           (        cubix.asm):00763                 JSR     SKIP                              ;TO NEXT
E39E 8EDCB8           (        cubix.asm):00764                 LDX     #PREFIX                           ;POINT TO IT
E3A1 4F               (        cubix.asm):00765                 CLRA                                      ;ZERO RC
E3A2 39               (        cubix.asm):00766                 RTS
                      (        cubix.asm):00767         ;* ABORT IF CHARACTER INVALID
E3A3                  (        cubix.asm):00768         VALCHR
E3A3 BDE4E9           (        cubix.asm):00769                 JSR     TSTERM                            ;TEST FOR CHAR OK
E3A6 27EE             (        cubix.asm):00770                 BEQ     BADOP2                            ;INVALID
E3A8 39               (        cubix.asm):00771                 RTS
                      (        cubix.asm):00772         ;* PADS NAME WITH BLANKS UNTILL 'B' IS ZERO
E3A9                  (        cubix.asm):00773         PAD
E3A9 5A               (        cubix.asm):00774                 DECB                                      ;BACKUP COUNT
E3AA 2B51             (        cubix.asm):00775                 BMI     GETD5                             ;THATS ALL
E3AC 6F80             (        cubix.asm):00776                 CLR     ,X+                               ;CLEAR IT
E3AE 20F9             (        cubix.asm):00777                 BRA     PAD
                      (        cubix.asm):00778         ;*
                      (        cubix.asm):00779         ;* GETS A DRIVE AND DIRECTORY FROM THE INPUT LINE
                      (        cubix.asm):00780         ;*
E3B0                  (        cubix.asm):00781         GETDIR
E3B0 8EDCA5           (        cubix.asm):00782                 LDX     #DEFDRV                           ;PT TO IT
E3B3                  (        cubix.asm):00783         GETDIR1
E3B3 A680             (        cubix.asm):00784                 LDA     ,X+                               ;GET DEFAULT DRIVE
E3B5 B7DCB7           (        cubix.asm):00785                 STA     >FDRIVE                           ;SET IT
E3B8 BDE4DC           (        cubix.asm):00786                 JSR     SKIP                              ;ADVANCE
E3BB 270B             (        cubix.asm):00787                 BEQ     GETD1                             ;END OF LINE, NO DRIVE SPEC
E3BD E621             (        cubix.asm):00788                 LDB     1,Y                               ;GET NEXT CHAR
E3BF C13A             (        cubix.asm):00789                 CMPB    #':'                              ;IS IT A DRIVE SPEC?
E3C1 2605             (        cubix.asm):00790                 BNE     GETD1                             ;NO, IGNORE IT
E3C3 8D3D             (        cubix.asm):00791                 BSR     GETDRV1                           ;GET DRIVE ID
E3C5 B7DCB7           (        cubix.asm):00792                 STA     >FDRIVE                           ;SET DRIVE ID
E3C8                  (        cubix.asm):00793         GETD1
E3C8 3420             (        cubix.asm):00794                 PSHS    Y                                 ;SAVE
E3CA 1F12             (        cubix.asm):00795                 TFR     X,Y                               ;SET UP PTR TO DEFAULT
E3CC 8EDCB8           (        cubix.asm):00796                 LDX     #PREFIX                           ;POINT TO PREFIX
E3CF C608             (        cubix.asm):00797                 LDB     #8                                ;MOVE EIGHT
E3D1                  (        cubix.asm):00798         GETD2
E3D1 A6A0             (        cubix.asm):00799                 LDA     ,Y+                               ;GET FROM DEFAULT
E3D3 A780             (        cubix.asm):00800                 STA     ,X+                               ;SAVE IN NAME
E3D5 5A               (        cubix.asm):00801                 DECB                                      ;REDUCE COUNT
E3D6 26F9             (        cubix.asm):00802                 BNE     GETD2                             ;MOVE EM ALL
E3D8 3520             (        cubix.asm):00803                 PULS    Y                                 ;RESTORE
E3DA A6A4             (        cubix.asm):00804                 LDA     ,Y                                ;GET CHAR
E3DC 815B             (        cubix.asm):00805                 CMPA    #'['                              ;DIRECTORY ID
E3DE 261D             (        cubix.asm):00806                 BNE     GETD5                             ;NO, SKIP IT
E3E0 8EDCB8           (        cubix.asm):00807                 LDX     #PREFIX                           ;POINT TO PREFIX
E3E3 3121             (        cubix.asm):00808                 LEAY    1,Y                               ;ADVANCE
E3E5 C608             (        cubix.asm):00809                 LDB     #8                                ;UP TO EIGHT CHARS
E3E7                  (        cubix.asm):00810         GETD3
E3E7 BDE3A3           (        cubix.asm):00811                 JSR     VALCHR                            ;GET CHAR, INSURE VALID
E3EA 815D             (        cubix.asm):00812                 CMPA    #']'                              ;CLOSING?
E3EC 2708             (        cubix.asm):00813                 BEQ     GETD4                             ;YES
E3EE A780             (        cubix.asm):00814                 STA     ,X+                               ;SAVE IT
E3F0 5A               (        cubix.asm):00815                 DECB                                      ;BACKUP
E3F1 2AF4             (        cubix.asm):00816                 BPL     GETD3                             ;KEEP GOING
E3F3                  (        cubix.asm):00817         BADOP1
E3F3 7EE2B8           (        cubix.asm):00818                 JMP     BADOPR
E3F6                  (        cubix.asm):00819         GETD4
E3F6 8DB1             (        cubix.asm):00820                 BSR     PAD                               ;PAD WITH BLANKS
E3F8 7DDCB8           (        cubix.asm):00821                 TST     >PREFIX                           ;IS IT NULL
E3FB 27F6             (        cubix.asm):00822                 BEQ     BADOP1                            ;INVALID
E3FD                  (        cubix.asm):00823         GETD5
E3FD 4F               (        cubix.asm):00824                 CLRA
E3FE 39               (        cubix.asm):00825                 RTS
                      (        cubix.asm):00826         ;* GET A DRIVE & RETURN IN A
E3FF                  (        cubix.asm):00827         GETDRV
E3FF BDE4DC           (        cubix.asm):00828                 JSR     SKIP                              ;ADVANCE TO OPERAND
E402                  (        cubix.asm):00829         GETDRV1
E402 ECA1             (        cubix.asm):00830                 LDD     ,Y++                              ;GET DATA
E404 C13A             (        cubix.asm):00831                 CMPB    #':'                              ;COLON
E406 26EB             (        cubix.asm):00832                 BNE     BADOP1                            ;NO
E408 8041             (        cubix.asm):00833                 SUBA    #'A'                              ;CONVERT
E40A 8104             (        cubix.asm):00834                 CMPA    #4                                ;IN RANGE
E40C 24E5             (        cubix.asm):00835                 BHS     BADOP1                            ;NO
E40E 1A04             (        cubix.asm):00836                 ORCC    #4                                ;SET 'Z'
E410 39               (        cubix.asm):00837                 RTS
                      (        cubix.asm):00838         ;*
                      (        cubix.asm):00839         ;* GETS A VALUE (DECIMAL OR HEX) FROM INPUT LINE
                      (        cubix.asm):00840         ;*
E411                  (        cubix.asm):00841         GETNUM
E411 BDE4DC           (        cubix.asm):00842                 JSR     SKIP                              ;SKIP TO DATA
E414 27DD             (        cubix.asm):00843                 BEQ     BADOP1                            ;INVALID
E416 8124             (        cubix.asm):00844                 CMPA    #'$'                              ;HEX?
E418 2643             (        cubix.asm):00845                 BNE     GETDV                             ;NO, GET DECIMAL
E41A 3121             (        cubix.asm):00846                 LEAY    1,Y                               ;ADVANCE TO NEXT
                      (        cubix.asm):00847         ;*
                      (        cubix.asm):00848         ;* GETS A 16 BIT HEX NUMBER FOR X FROM THE INPUT LINE.
                      (        cubix.asm):00849         ;*
E41C                  (        cubix.asm):00850         GETHEX
E41C BDE4DC           (        cubix.asm):00851                 JSR     SKIP                              ;GET CHARACTER
E41F 27D2             (        cubix.asm):00852                 BEQ     BADOP1                            ;INDICATE BAD OPERAND
E421                  (        cubix.asm):00853         GETHV
E421 8E0000           (        cubix.asm):00854                 LDX     #0                                ;START WITH ZERO
E424                  (        cubix.asm):00855         GETL1
E424 BDE4E9           (        cubix.asm):00856                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E427 2728             (        cubix.asm):00857                 BEQ     HEXEND                            ;IF SO, THIS IS IT
E429 8030             (        cubix.asm):00858                 SUBA    #'0'                              ;CONVERT TO BINARY
E42B 810A             (        cubix.asm):00859                 CMPA    #10                               ;TEST FOR > '9'
E42D 250A             (        cubix.asm):00860                 BLO     DIGOK                             ;IF NOT, DIGIT IS OK
E42F 8111             (        cubix.asm):00861                 CMPA    #$11                              ;TEST FOR < 'A'
E431 2DC0             (        cubix.asm):00862                 BLT     BADOP1                            ;OPERAND IS INVALID
E433 8007             (        cubix.asm):00863                 SUBA    #7                                ;CONVERT TO ASCII
E435 8110             (        cubix.asm):00864                 CMPA    #$10                              ;TEST FOR 0-F
E437 24BA             (        cubix.asm):00865                 BHS     BADOP1                            ;IF NOT, DIGIT IS BAD
E439                  (        cubix.asm):00866         DIGOK
E439 B7DCCC           (        cubix.asm):00867                 STA     >TEMP+1                           ;SAVE FOR LATER
E43C 8605             (        cubix.asm):00868                 LDA     #5                                ;SHIFT FOUR TIMES
E43E B7DCCB           (        cubix.asm):00869                 STA     >TEMP                             ;SAVE COUNTER
E441                  (        cubix.asm):00870         DSHFT
E441 1F10             (        cubix.asm):00871                 TFR     X,D                               ;COPY TO X
E443 308B             (        cubix.asm):00872                 LEAX    D,X                               ;MULTIPLY BY 2, = 1 BIT SHIFT
E445 7ADCCB           (        cubix.asm):00873                 DEC     >TEMP                             ;REDUCE COUNT
E448 26F7             (        cubix.asm):00874                 BNE     DSHFT                             ;KEEP SHIFTING
E44A FADCCC           (        cubix.asm):00875                 ORB     >TEMP+1                           ;STICK ON EXTRA DIGIT
E44D 1F01             (        cubix.asm):00876                 TFR     D,X                               ;COPY BACK TO X
E44F 20D3             (        cubix.asm):00877                 BRA     GETL1                             ;GET NEXT DIGIT
E451                  (        cubix.asm):00878         HEXEND
E451 BDE4DC           (        cubix.asm):00879                 JSR     SKIP                              ;ADVANCE TO NEXT OPERAND
E454 4F               (        cubix.asm):00880                 CLRA                                      ;INDICATE ZERO RETURN CODE
E455 39               (        cubix.asm):00881                 RTS
                      (        cubix.asm):00882         ;*
                      (        cubix.asm):00883         ;* GETS A DECIMAL NUMBER FROM THE TERMINAL.
                      (        cubix.asm):00884         ;*
E456                  (        cubix.asm):00885         GETDEC
E456 BDE4DC           (        cubix.asm):00886                 JSR     SKIP                              ;SKIP TO START OF OPERAND.
E459 1027FE5B         (        cubix.asm):00887                 LBEQ    BADOPR                            ;IF INVALID, GO BACK.
E45D                  (        cubix.asm):00888         GETDV
E45D 8E0000           (        cubix.asm):00889                 LDX     #0                                ;START WITH ZERO.
E460                  (        cubix.asm):00890         DECDIG
E460 BDE4E9           (        cubix.asm):00891                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E463 27EC             (        cubix.asm):00892                 BEQ     HEXEND                            ;IF THATS ALL, FORGET IT.
E465 8030             (        cubix.asm):00893                 SUBA    #'0'                              ;CONVERT TO BINARY.
E467 8109             (        cubix.asm):00894                 CMPA    #9                                ;TEST FOR INVALID.
E469 1022FE4B         (        cubix.asm):00895                 LBHI    BADOPR                            ;AGAIN, INVALID OPERAND.
E46D 3402             (        cubix.asm):00896                 PSHS    A                                 ;SAVE ACC.
E46F CC000A           (        cubix.asm):00897                 LDD     #10                               ;MUL BY 10
E472 BDF696           (        cubix.asm):00898                 JSR     MUL16                             ;D=D*X
E475 EBE0             (        cubix.asm):00899                 ADDB    ,S+                               ;ADD IN DIGIT
E477 8900             (        cubix.asm):00900                 ADCA    #0                                ;INSURE HIGH GOES
E479 1F01             (        cubix.asm):00901                 TFR     D,X                               ;COPY TO RESULT
E47B 20E3             (        cubix.asm):00902                 BRA     DECDIG                            ;GET NEXT
                      (        cubix.asm):00903         ;*
E47D                  (        cubix.asm):00904         WRDEC8
E47D 4F               (        cubix.asm):00905                 CLRA                                      ;DISPLAY 8 BIT BUMBER (B) IN DECIMAL
                      (        cubix.asm):00906         ;*
                      (        cubix.asm):00907         ;* DISPLAYS 16 BIT NUMBER IN D AS A DECIMAL NUMBER,
                      (        cubix.asm):00908         ;*
E47E                  (        cubix.asm):00909         WRDEC
E47E 3436             (        cubix.asm):00910                 PSHS    A,B,X,Y                           ;SAVE X-Y REGISTERS
E480 108E0000         (        cubix.asm):00911                 LDY     #0                                ;START WITH ZERO CHARACTERS
E484 1F01             (        cubix.asm):00912                 TFR     D,X                               ;SET UP STARTING VALUE
E486                  (        cubix.asm):00913         WRDE1
E486 CC000A           (        cubix.asm):00914                 LDD     #10                               ;DIVIDE BY 10
E489 BDF6B6           (        cubix.asm):00915                 JSR     DIV16                             ;X=X/D, D=REMAINDER
E48C 3404             (        cubix.asm):00916                 PSHS    B                                 ;SAVE REMAINDER
E48E 3121             (        cubix.asm):00917                 LEAY    1,Y                               ;INDICATE ANOTHER ON STACK
E490 8C0000           (        cubix.asm):00918                 CMPX    #0                                ;ANY MORE?
E493 26F1             (        cubix.asm):00919                 BNE     WRDE1                             ;NO, CONTINUE
E495                  (        cubix.asm):00920         WRDE2
E495 3502             (        cubix.asm):00921                 PULS    A                                 ;GET DIGIT BACK
E497 8B30             (        cubix.asm):00922                 ADDA    #'0'                              ;CONVERT TO PRINTABLE FORM
E499 BDE59A           (        cubix.asm):00923                 JSR     PUTCHR                            ;DISPLAY DECIMAL DIGIT
E49C 313F             (        cubix.asm):00924                 LEAY    -1,Y                              ;REDUCE COUNT
E49E 26F5             (        cubix.asm):00925                 BNE     WRDE2                             ;IF NOT END, CONTINUE DISPLAYING
E4A0 35B6             (        cubix.asm):00926                 PULS    A,B,X,Y,PC                        ;RESTORE INDEX REG'S
                      (        cubix.asm):00927         ;*
                      (        cubix.asm):00928         ;* GETS AND BUFFERS A LINE FROM THE TERMINAL, ON EXIT, Y REGISTER
                      (        cubix.asm):00929         ;* POINTS TO LINE IN BUFFER.
                      (        cubix.asm):00930         ;*
E4A2                  (        cubix.asm):00931         GLFCR
E4A2 BDE588           (        cubix.asm):00932                 JSR     LFCR                              ;START A NEW LINE
E4A5                  (        cubix.asm):00933         GLINE
E4A5 862A             (        cubix.asm):00934                 LDA     #'*'                              ;GET PROMPT CHARACTER
E4A7 BDE59A           (        cubix.asm):00935                 JSR     PUTCHR                            ;DISPLAY
E4AA                  (        cubix.asm):00936         GLNOP
E4AA 108EDC00         (        cubix.asm):00937                 LDY     #INBUFF                           ;POINT TO INPUT BUFFER
E4AE                  (        cubix.asm):00938         GLINE1
E4AE 1F20             (        cubix.asm):00939                 TFR     Y,D                               ;GET POINTER INTO BUFFER
E4B0 C150             (        cubix.asm):00940                 CMPB    #80                               ;TEST FOR OVER LIMIT
E4B2 22EE             (        cubix.asm):00941                 BHI     GLFCR                             ;INDICATE ERROR
E4B4 BDE5DA           (        cubix.asm):00942                 JSR     GETCHR                            ;GET CHARACTER FROM CONSOLE
E4B7 817F             (        cubix.asm):00943                 CMPA    #$7F                              ;TEST FOR DELETE
E4B9 2704             (        cubix.asm):00944                 BEQ     GLINE2                            ;YES, PERFORM DELETE
E4BB 8108             (        cubix.asm):00945                 CMPA    #8                                ;TEST FOR BACKSPACE
E4BD 260B             (        cubix.asm):00946                 BNE     GLINE3                            ;DON'T DELETE
E4BF                  (        cubix.asm):00947         GLINE2
E4BF 313F             (        cubix.asm):00948                 LEAY    -1,Y                              ;DELETE A CHARACTER
E4C1 BDE54E           (        cubix.asm):00949                 JSR     WRLIN                             ;OUTPUT MESSAGE
E4C4 08200800         (        cubix.asm):00950                 FCB     8,' ',8,0                         ;WIPE PREVIOUS CHARACTER
E4C8 20E4             (        cubix.asm):00951                 BRA     GLINE1                            ;GET NEXT CHARACTER
E4CA                  (        cubix.asm):00952         GLINE3
E4CA BDE59A           (        cubix.asm):00953                 JSR     PUTCHR                            ;ECHO CHARACTER
E4CD 8D2B             (        cubix.asm):00954                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E4CF A7A0             (        cubix.asm):00955                 STA     ,Y+                               ;SAVE IN BUFFER
E4D1 810D             (        cubix.asm):00956                 CMPA    #$0D                              ;TEST FOR END OF LINE
E4D3 26D9             (        cubix.asm):00957                 BNE     GLINE1                            ;GET NEXT CHARACTER
E4D5 108EDC00         (        cubix.asm):00958                 LDY     #INBUFF                           ;POINT TO BUFFER
E4D9 7EE588           (        cubix.asm):00959                 JMP     LFCR                              ;START A NEW LINE
                      (        cubix.asm):00960         ;*
                      (        cubix.asm):00961         ;* SKIPS TO NEXT NON-BLANK CHARACTER IN INPUT LINE. AND TESTS IT FOR <CR>.
                      (        cubix.asm):00962         ;*
E4DC                  (        cubix.asm):00963         SKIP
E4DC A6A0             (        cubix.asm):00964                 LDA     ,Y+                               ;GET CHARACTER
E4DE 8120             (        cubix.asm):00965                 CMPA    #' '                              ;TEST FOR BLANK
E4E0 27FA             (        cubix.asm):00966                 BEQ     SKIP                              ;IF SO, KEEP LOOKING
E4E2 6DA2             (        cubix.asm):00967                 TST     ,-Y                               ;BACKUP & TEST FOR ZERO
E4E4 2702             (        cubix.asm):00968                 BEQ     SKRTS                             ;YES, END WITH 'Z' SET
E4E6 810D             (        cubix.asm):00969                 CMPA    #$0D                              ;TEST FOR CARRIAGE RETURN
E4E8                  (        cubix.asm):00970         SKRTS
E4E8 39               (        cubix.asm):00971                 RTS
                      (        cubix.asm):00972         ;*
                      (        cubix.asm):00973         ;* TESTS FOR VALID TERMINATOR CHARACTERS.
                      (        cubix.asm):00974         ;*
E4E9                  (        cubix.asm):00975         TSTERM
E4E9 A6A0             (        cubix.asm):00976                 LDA     ,Y+                               ;GET CHARACTER AND ADVANCE
E4EB 2708             (        cubix.asm):00977                 BEQ     TSTE1                             ;IF NULL, INDICATE TERMINATOR
E4ED 8120             (        cubix.asm):00978                 CMPA    #' '                              ;TEST FOR SPACE
E4EF 2708             (        cubix.asm):00979                 BEQ     TRET                              ;IF SO, QUIT
E4F1 810D             (        cubix.asm):00980                 CMPA    #$0D                              ;IS IT A CARRIAGE RETURN
E4F3 2604             (        cubix.asm):00981                 BNE     TRET                              ;IF NOT, DON'T BACK UP
E4F5                  (        cubix.asm):00982         TSTE1
E4F5 313F             (        cubix.asm):00983                 LEAY    -1,Y                              ;BACK UP SO WE DON'T GO BEYOND
E4F7 1A04             (        cubix.asm):00984                 ORCC    #%00000100                        ;SET 'Z'
E4F9                  (        cubix.asm):00985         TRET
E4F9 39               (        cubix.asm):00986                 RTS
                      (        cubix.asm):00987         ;*
                      (        cubix.asm):00988         ;* CONVERT THE CHARACTER IN 'A' TO UPPER CASE
                      (        cubix.asm):00989         ;*
E4FA                  (        cubix.asm):00990         TOUPPER
E4FA 8161             (        cubix.asm):00991                 CMPA    #'A'+$20                          ;ALREADY UPPERCASE?
E4FC 25FB             (        cubix.asm):00992                 BLO     TRET                              ;YES, ITS OK
E4FE 817A             (        cubix.asm):00993                 CMPA    #'Z'+$20                          ;ALREADY UPPERCASE?
E500 22F7             (        cubix.asm):00994                 BHI     TRET                              ;YES, ITS OK
E502 845F             (        cubix.asm):00995                 ANDA    #%01011111                        ;CONVERT TO UPPERCASE
E504 39               (        cubix.asm):00996                 RTS
                      (        cubix.asm):00997         ;*
                      (        cubix.asm):00998         ;* LOOKS UP WORD(Y) IN TABLE(X). INDEX OF COMMAND IN TABLE IS
                      (        cubix.asm):00999         ;* RETURNED IN THE B REGISTER, WITH ZERO BEING THE FIRST COMMAND.
                      (        cubix.asm):01000         ;* FOR INFORMATION ON THE COMMAND TABLE FORMAT, SEE COMMAND TABLE.
                      (        cubix.asm):01001         ;*
E505                  (        cubix.asm):01002         TLOOK
E505 5F               (        cubix.asm):01003                 CLRB                                      ;START WITH ZERO ENTRY
E506 8DD4             (        cubix.asm):01004                 BSR     SKIP                              ;SKIP LEADING BLANKS
E508                  (        cubix.asm):01005         TLOOK1
E508 A680             (        cubix.asm):01006                 LDA     ,X+                               ;GET CHAR FROM FILE
E50A 2AFC             (        cubix.asm):01007                 BPL     TLOOK1                            ;ADVANCE TO CONTROL BYTE
E50C 301F             (        cubix.asm):01008                 LEAX    -1,X                              ;BACKUP TO IT
E50E 3420             (        cubix.asm):01009                 PSHS    Y                                 ;SAVE POSITION
E510 847F             (        cubix.asm):01010                 ANDA    #$7F                              ;REMOVE FLAG BIT
E512 272C             (        cubix.asm):01011                 BEQ     TLOOK6                            ;END OF TABLE ENCOUNTERED
E514 B7DCCB           (        cubix.asm):01012                 STA     >TEMP                             ;SAVE FOR LATER REF
E517                  (        cubix.asm):01013         TLOOK2
E517 3001             (        cubix.asm):01014                 LEAX    1,X                               ;ADVANCE IN TABLE
E519 7ADCCB           (        cubix.asm):01015                 DEC     >TEMP                             ;REDUCE COUNT
E51C A684             (        cubix.asm):01016                 LDA     ,X                                ;GET CHAR
E51E 8DDA             (        cubix.asm):01017                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E520 B7DCCC           (        cubix.asm):01018                 STA     >TEMP+1                           ;SAVE FOR LATER
E523 8DC4             (        cubix.asm):01019                 BSR     TSTERM                            ;TEST FOR TERMINATOR
E525 2714             (        cubix.asm):01020                 BEQ     TLOOK5                            ;IF SO, TEST IT
E527 B1DCCC           (        cubix.asm):01021                 CMPA    >TEMP+1                           ;TEST FOR SAME AS TABLE ENTRY
E52A 27EB             (        cubix.asm):01022                 BEQ     TLOOK2                            ;IF SO, IT'S OK
E52C 812F             (        cubix.asm):01023                 CMPA    #'/'                              ;SLASH?
E52E 2709             (        cubix.asm):01024                 BEQ     TLOOK4                            ;YES, ACCEPT IT
E530 813D             (        cubix.asm):01025                 CMPA    #'='                              ;EQUALS?
E532 2705             (        cubix.asm):01026                 BEQ     TLOOK4                            ;ACCEPT IT AS WELL
                      (        cubix.asm):01027         ;* THIS ENTRY NOT FOUND, SKIP TO NEXT ONE
E534                  (        cubix.asm):01028         TLOOK3
E534 3520             (        cubix.asm):01029                 PULS    Y                                 ;RESTORE COMMAND POINTER
E536 5C               (        cubix.asm):01030                 INCB                                      ;INC. INDICATOR
E537 20CF             (        cubix.asm):01031                 BRA     TLOOK1                            ;TRY NEXT ENTRY
E539                  (        cubix.asm):01032         TLOOK4
E539 313F             (        cubix.asm):01033                 LEAY    -1,Y                              ;BACKUP TO SPECIAL CHAR
E53B                  (        cubix.asm):01034         TLOOK5
E53B BADCCB           (        cubix.asm):01035                 ORA     >TEMP                             ;TEST FOR MINIMUM NUMBER OF CHARS
E53E 2AF4             (        cubix.asm):01036                 BPL     TLOOK3                            ;IF NOT, SKIP THIS COMMAND
E540                  (        cubix.asm):01037         TLOOK6
E540 8D9A             (        cubix.asm):01038                 BSR     SKIP                              ;SKIP TO OPERANDS
E542 5D               (        cubix.asm):01039                 TSTB                                      ;SET FLAG IS ZERO
E543 3590             (        cubix.asm):01040                 PULS    X,PC                              ;CLEAN UP STACK
                      (        cubix.asm):01041         ;*
                      (        cubix.asm):01042         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (        cubix.asm):01043         ;*
E545                  (        cubix.asm):01044         WRHEXW
E545 8D13             (        cubix.asm):01045                 BSR     WRHEX                             ;OUTPUT
E547 1E89             (        cubix.asm):01046                 EXG     A,B                               ;SWAP
E549 8D0F             (        cubix.asm):01047                 BSR     WRHEX                             ;OUTPUT
E54B 1E89             (        cubix.asm):01048                 EXG     A,B                               ;BACK
E54D 39               (        cubix.asm):01049                 RTS
                      (        cubix.asm):01050         ;*
                      (        cubix.asm):01051         ;* WRITE MESSAGE, NO CARRIAGE RETURN AT END
                      (        cubix.asm):01052         ;*
E54E                  (        cubix.asm):01053         WRLIN
E54E 3410             (        cubix.asm):01054                 PSHS    X                                 ;SAVE X
E550 AE62             (        cubix.asm):01055                 LDX     2,S                               ;GET ADDRESS BACK
E552 8D20             (        cubix.asm):01056                 BSR     WRSTR                             ;OUTPUT
E554 AF62             (        cubix.asm):01057                 STX     2,S                               ;RESAVE
E556 1A04             (        cubix.asm):01058                 ORCC    #%00000100                        ;ZERO RETURN CODE
E558 3590             (        cubix.asm):01059                 PULS    X,PC
                      (        cubix.asm):01060         ;*
                      (        cubix.asm):01061         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (        cubix.asm):01062         ;*
E55A                  (        cubix.asm):01063         WRHEX
E55A 3402             (        cubix.asm):01064                 PSHS    A                                 ;SAVE IT
E55C 44               (        cubix.asm):01065                 LSRA                                      ;SHIFT
E55D 44               (        cubix.asm):01066                 LSRA                                      ;HIGH NIBBLE
E55E 44               (        cubix.asm):01067                 LSRA                                      ;INTO
E55F 44               (        cubix.asm):01068                 LSRA                                      ;LOW NIBBLE
E560 8D06             (        cubix.asm):01069                 BSR     HOUT                              ;HIGH
E562 A6E4             (        cubix.asm):01070                 LDA     ,S                                ;GET LOW
E564 8D02             (        cubix.asm):01071                 BSR     HOUT                              ;OUTPUT
E566 3582             (        cubix.asm):01072                 PULS    A,PC                              ;RESTORE IT
                      (        cubix.asm):01073         ;* OUTPUT NIBBLE IN HEX
E568                  (        cubix.asm):01074         HOUT
E568 840F             (        cubix.asm):01075                 ANDA    #%00001111                        ;REMOVE HIGH
E56A 8B30             (        cubix.asm):01076                 ADDA    #'0'                              ;CONVERT
E56C 8139             (        cubix.asm):01077                 CMPA    #'9'                              ;OK?
E56E 232A             (        cubix.asm):01078                 BLS     PUTCHR                            ;OK, OUTPUT
E570 8B07             (        cubix.asm):01079                 ADDA    #7                                ;CONVERT TO 'A'-'F'
E572 2026             (        cubix.asm):01080                 BRA     PUTCHR                            ;OUTPUT
                      (        cubix.asm):01081         ;*
                      (        cubix.asm):01082         ;* WRITE STRING(X) TO CONSOLE
                      (        cubix.asm):01083         ;*
E574                  (        cubix.asm):01084         WRSTR
E574 3402             (        cubix.asm):01085                 PSHS    A                                 ;SAVE A
E576                  (        cubix.asm):01086         WRST1
E576 A680             (        cubix.asm):01087                 LDA     ,X+                               ;GET CHAR
E578 271E             (        cubix.asm):01088                 BEQ     WRST2                             ;END, QUIT
E57A 8D1E             (        cubix.asm):01089                 BSR     PUTCHR                            ;OUTPUT
E57C 20F8             (        cubix.asm):01090                 BRA     WRST1                             ;CONTINUE
                      (        cubix.asm):01091         ;*
                      (        cubix.asm):01092         ;* OUTPUT MESSAGE TO CONSOLE
                      (        cubix.asm):01093         ;*
E57E                  (        cubix.asm):01094         WRMSG
E57E 3410             (        cubix.asm):01095                 PSHS    X                                 ;SAVE X
E580 AE62             (        cubix.asm):01096                 LDX     2,S                               ;GET RETURN ADDRESS
E582 8DF0             (        cubix.asm):01097                 BSR     WRSTR                             ;OUTPUT STRING
E584 AF62             (        cubix.asm):01098                 STX     2,S                               ;RESAVE NEW RETURN ADDR
E586 3510             (        cubix.asm):01099                 PULS    X                                 ;RESTORE X
                      (        cubix.asm):01100         ;*
                      (        cubix.asm):01101         ;* OUTPUT LFCR TO CONSOLE
                      (        cubix.asm):01102         ;*
E588                  (        cubix.asm):01103         LFCR
E588 3402             (        cubix.asm):01104                 PSHS    A                                 ;SAVE IT
E58A 860A             (        cubix.asm):01105                 LDA     #$0A                              ;GET LF
E58C 8D0C             (        cubix.asm):01106                 BSR     PUTCHR                            ;OUTPUT
E58E 860D             (        cubix.asm):01107                 LDA     #$0D                              ;GET CR
E590 2004             (        cubix.asm):01108                 BRA     SPC1                              ;CONTINUE
                      (        cubix.asm):01109         ;*
                      (        cubix.asm):01110         ;* OUTPUT SPACE TO CONSOLE
                      (        cubix.asm):01111         ;*
E592                  (        cubix.asm):01112         SPACE
E592 3402             (        cubix.asm):01113                 PSHS    A                                 ;SAVE ACCA
E594 8620             (        cubix.asm):01114                 LDA     #' '                              ;GET SPACE
E596                  (        cubix.asm):01115         SPC1
E596 8D02             (        cubix.asm):01116                 BSR     PUTCHR                            ;OUTPUT
E598                  (        cubix.asm):01117         WRST2
E598 3582             (        cubix.asm):01118                 PULS    A,PC                              ;RESTORE
                      (        cubix.asm):01119         ;*
                      (        cubix.asm):01120         ;* WRITE CHARACTER(A) TO CONSOLE DEVICE
                      (        cubix.asm):01121         ;*
E59A                  (        cubix.asm):01122         PUTCHR
E59A 3416             (        cubix.asm):01123                 PSHS    A,B,X                             ;SAVE REGS
E59C F6DC6D           (        cubix.asm):01124                 LDB     >CONOUT                           ;GET CONSOLE OUTPUT DEVICE
E59F 2002             (        cubix.asm):01125                 BRA     WRDEV1                            ;PROCEDE WITH OUTPUT
                      (        cubix.asm):01126         ;*
                      (        cubix.asm):01127         ;* WRITE CHARACTER(A) TO DEVICE(B)
                      (        cubix.asm):01128         ;*
E5A1                  (        cubix.asm):01129         WRDEV
E5A1 3416             (        cubix.asm):01130                 PSHS    A,B,X                             ;SAVE REGS
E5A3                  (        cubix.asm):01131         WRDEV1
E5A3 C108             (        cubix.asm):01132                 CMPB    #NDEV                             ;CHECK FOR IN RANGE
E5A5 240D             (        cubix.asm):01133                 BHS     BADDEV                            ;INDICATE INVALID
E5A7 8EDC7E           (        cubix.asm):01134                 LDX     #DOTAB                            ;POINT TO STATUS TABLE
E5AA 58               (        cubix.asm):01135                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E5AB AE85             (        cubix.asm):01136                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E5AD 2705             (        cubix.asm):01137                 BEQ     BADDEV                            ;INDICATE INVALID DEVICE
E5AF AD84             (        cubix.asm):01138                 JSR     ,X                                ;EXECUTE OUTPUT DRIVER
E5B1 4F               (        cubix.asm):01139                 CLRA                                      ;ZERO RETURN CODE
E5B2 3596             (        cubix.asm):01140                 PULS    A,B,X,PC                          ;RESTORE & RETURN
                      (        cubix.asm):01141         ;*
                      (        cubix.asm):01142         ;* BAD DEVICE SPECIFIED
                      (        cubix.asm):01143         ;*
E5B4                  (        cubix.asm):01144         BADDEV
E5B4 8EF7C4           (        cubix.asm):01145                 LDX     #DEVMSG                           ;POINT TO DEVICE MESSAGE
E5B7 860A             (        cubix.asm):01146                 LDA     #RCDEV                            ;BAD DEVICE RETURN CODE
E5B9 7EE2BD           (        cubix.asm):01147                 JMP     ERRMRC                            ;EXIT WITH ERROR
                      (        cubix.asm):01148         ;*
                      (        cubix.asm):01149         ;* READ A CHARACTER FROM DEVICE (B)
                      (        cubix.asm):01150         ;*
E5BC                  (        cubix.asm):01151         RDDEV
E5BC 8D03             (        cubix.asm):01152                 BSR     TSTDEV                            ;TEST FOR CHAR
E5BE 26FC             (        cubix.asm):01153                 BNE     RDDEV                             ;WAIT FOR IT
E5C0 39               (        cubix.asm):01154                 RTS
                      (        cubix.asm):01155         ;*
                      (        cubix.asm):01156         ;* TEST FOR CHARACTER FROM DEVICE(B)
                      (        cubix.asm):01157         ;*
E5C1                  (        cubix.asm):01158         TSTDEV
E5C1 3414             (        cubix.asm):01159                 PSHS    B,X                               ;SAVE REGS
E5C3                  (        cubix.asm):01160         TSTDE1
E5C3 C108             (        cubix.asm):01161                 CMPB    #NDEV                             ;DEVICE IN RANGE?
E5C5 24ED             (        cubix.asm):01162                 BHS     BADDEV                            ;INDICATE INVALUD
E5C7 8EDC6E           (        cubix.asm):01163                 LDX     #DITAB                            ;POINT TO STATUS TABLE
E5CA 58               (        cubix.asm):01164                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E5CB AE85             (        cubix.asm):01165                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E5CD 27E5             (        cubix.asm):01166                 BEQ     BADDEV                            ;INDICATE INVALID
E5CF AD84             (        cubix.asm):01167                 JSR     ,X                                ;EXECUTE INPUT DRIVER
E5D1 3594             (        cubix.asm):01168                 PULS    B,X,PC                            ;RESTORE & RETURN
                      (        cubix.asm):01169         ;*
                      (        cubix.asm):01170         ;* TEST FOR A CHARACTER FROM THE CONSOLE DEVICE
                      (        cubix.asm):01171         ;*
E5D3                  (        cubix.asm):01172         TSTCHR
E5D3 3414             (        cubix.asm):01173                 PSHS    B,X                               ;SAVE REGS
E5D5 F6DC6C           (        cubix.asm):01174                 LDB     >CONIN                            ;GET INPUT DEVICE
E5D8 20E9             (        cubix.asm):01175                 BRA     TSTDE1                            ;AND CONTINUE
                      (        cubix.asm):01176         ;*
                      (        cubix.asm):01177         ;* READ A CHARACTER FROM CONSOLE
                      (        cubix.asm):01178         ;*
E5DA                  (        cubix.asm):01179         GETCHR
E5DA 8DF7             (        cubix.asm):01180                 BSR     TSTCHR                            ;TEST FOR CHAR
E5DC 26FC             (        cubix.asm):01181                 BNE     GETCHR                            ;INDICATE NONE
E5DE 39               (        cubix.asm):01182                 RTS
                      (        cubix.asm):01183         ;*
                      (        cubix.asm):01184         ;* INCLUDE ALL OTHER SUB-SYSTEMS
                      (        cubix.asm):01185         ;*
                      (        cubix.asm):01186                 INCLUDE filesys.os                        ;FILE SYSTEM MANAGMENT
                      (       filesys.os):00001         ;*
                      (       filesys.os):00002         ;* CUBIX File System management routines
                      (       filesys.os):00003         ;*
                      (       filesys.os):00004         ;* LOCATE NEXT WORK SECTOR IN CHAIN
                      (       filesys.os):00005         ;*
E5DF                  (       filesys.os):00006         FNDLNK
E5DF 3402             (       filesys.os):00007                 PSHS    A
E5E1 58               (       filesys.os):00008                 LSLB                                      ;DOUBLE FOR
E5E2 49               (       filesys.os):00009                 ROLA                                      ;TWO BYTE ID'S
E5E3 8401             (       filesys.os):00010                 ANDA    #$01                              ;MASK OFF BITS (512/SECTOR)
E5E5 C3DE00           (       filesys.os):00011                 ADDD    #WRKSPC                           ;POINT TO WORKSPACE
E5E8 1F01             (       filesys.os):00012                 TFR     D,X                               ;SET UP POINTER
E5EA 3504             (       filesys.os):00013                 PULS    B                                 ;RESTORE HIGH ID
E5EC CB01             (       filesys.os):00014                 ADDB    #LNKSEC                           ;ADVANCE TO LINK SECTOR
E5EE 4F               (       filesys.os):00015                 CLRA                                      ;ZERO HIGH
E5EF 3410             (       filesys.os):00016                 PSHS    X                                 ;SAVE PTR
E5F1 8D09             (       filesys.os):00017                 BSR     RDWRK                             ;READ WORK SECTOR
E5F3 3510             (       filesys.os):00018                 PULS    X                                 ;RESTORE
E5F5 EC84             (       filesys.os):00019                 LDD     ,X                                ;GET DATA
E5F7 1083FFFF         (       filesys.os):00020                 CMPD    #$FFFF                            ;END OF FILE?
E5FB                  (       filesys.os):00021         GRTS
E5FB 39               (       filesys.os):00022                 RTS
                      (       filesys.os):00023         ;*
                      (       filesys.os):00024         ;* READ WORK SECTOR FROM DISK
                      (       filesys.os):00025         ;*
E5FC                  (       filesys.os):00026         RDWRK
E5FC 3402             (       filesys.os):00027                 PSHS    A                                 ;SAVE ACCA
E5FE 8EDE00           (       filesys.os):00028                 LDX     #WRKSPC                           ;POINT TO IT
E601 B6DCEB           (       filesys.os):00029                 LDA     >SDRIVE                           ;CURRENT DRIVE
E604 B1DCDE           (       filesys.os):00030                 CMPA    >WRKDRV                           ;ARE WE ON IT?
E607 2608             (       filesys.os):00031                 BNE     RDW1                              ;WRITE IT CHANGED
E609 A6E4             (       filesys.os):00032                 LDA     ,S                                ;RESTORE SECTOR ID
E60B 10B3DCDF         (       filesys.os):00033                 CMPD    >WRKSEC                           ;DO WE ALREADY HAVE IT?
E60F 2710             (       filesys.os):00034                 BEQ     RRTS                              ;YES, ITS OK
E611                  (       filesys.os):00035         RDW1
E611 8D20             (       filesys.os):00036                 BSR     WRTST                             ;WRITE IF NESSARY
E613 B6DCEB           (       filesys.os):00037                 LDA     >SDRIVE                           ;GET DRIVE
E616 B7DCDE           (       filesys.os):00038                 STA     >WRKDRV                           ;SET WORK DRIVE
E619 A6E4             (       filesys.os):00039                 LDA     ,S                                ;RESTORE SECTOR ID
E61B FDDCDF           (       filesys.os):00040                 STD     >WRKSEC                           ;SET IT UP
E61E BDEADF           (       filesys.os):00041                 JSR     RDISK                             ;READ DISK
E621                  (       filesys.os):00042         RRTS
E621 3582             (       filesys.os):00043                 PULS    A,PC
                      (       filesys.os):00044         ;*
                      (       filesys.os):00045         ;* PURGE OPEN WORK SECTOR, INSURE IT GETS WRITTEN. SET
                      (       filesys.os):00046         ;* SAVED SECTOR TO $FFFF, SO WE FORCE NEW READ
                      (       filesys.os):00047         ;*
E623                  (       filesys.os):00048         PURGE
E623 8D0E             (       filesys.os):00049                 BSR     WRTST                             ;WRITE IF NESSARY
E625                  (       filesys.os):00050         PURGE1
E625 3406             (       filesys.os):00051                 PSHS    A,B                               ;SAVE REGISTERS
E627 CCFFFF           (       filesys.os):00052                 LDD     #$FFFF                            ;GET NON-EXISTANT
E62A FDDCDF           (       filesys.os):00053                 STD     >WRKSEC                           ;SET WORK SECTOR
E62D B7DCDE           (       filesys.os):00054                 STA     >WRKDRV                           ;SET WORK DRIVE
E630 4F               (       filesys.os):00055                 CLRA    SET 'Z'
E631 3586             (       filesys.os):00056                 PULS    A,B,PC
                      (       filesys.os):00057         ;*
                      (       filesys.os):00058         ;* WRITE WORK SECTOR IF IT HAS BEEN CHANGED
                      (       filesys.os):00059         ;*
E633                  (       filesys.os):00060         WRTST
E633 7DDCDD           (       filesys.os):00061                 TST     >WRKCHG                           ;HAS IT CHANGED?
E636 27C3             (       filesys.os):00062                 BEQ     GRTS                              ;NO, SKIP IT
                      (       filesys.os):00063         ;*
                      (       filesys.os):00064         ;* WRITE WORK SECTOR BACK TO DISK
                      (       filesys.os):00065         ;*
E638                  (       filesys.os):00066         WRWRK
E638 3416             (       filesys.os):00067                 PSHS    A,B,X                             ;SAVE REGS
E63A B6DCEB           (       filesys.os):00068                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E63D 3402             (       filesys.os):00069                 PSHS    A                                 ;SAVE IT
E63F B6DCDE           (       filesys.os):00070                 LDA     >WRKDRV                           ;GET WORK DRIVE
E642 B7DCEB           (       filesys.os):00071                 STA     >SDRIVE                           ;SET IT UP
E645 FCDCDF           (       filesys.os):00072                 LDD     >WRKSEC                           ;GET ID
E648 8EDE00           (       filesys.os):00073                 LDX     #WRKSPC                           ;POINT TO WORKSPACE
E64B BDEB12           (       filesys.os):00074                 JSR     WDISK                             ;WRITE IT
E64E 7FDCDD           (       filesys.os):00075                 CLR     >WRKCHG                           ;INDICTE FRESH
E651 3502             (       filesys.os):00076                 PULS    A                                 ;RESTORE DRIVE
E653 B7DCEB           (       filesys.os):00077                 STA     >SDRIVE                           ;RESAVE
E656 4F               (       filesys.os):00078                 CLRA                                      ;ZERO RETURN
E657 3596             (       filesys.os):00079                 PULS    A,B,X,PC
                      (       filesys.os):00080         ;*
                      (       filesys.os):00081         ;* LOCATE  FILE, ISSUE ERROR MESSAGE IF NOT FOUND
                      (       filesys.os):00082         ;*
E659                  (       filesys.os):00083         LOCERR
                      (       filesys.os):00084         
E659 8D37             (       filesys.os):00085                 BSR     LOCDIR                            ;LOOK IT UP
E65B 2758             (       filesys.os):00086                 BEQ     FILFND                            ;FINE, RETURN
                      (       filesys.os):00087         
                      (       filesys.os):00088         ;* ATTEMPT TO OPEN FILE FAILED, NOT FOUND
E65D                  (       filesys.os):00089         NOTFND
E65D 108EF741         (       filesys.os):00090                 LDY     #NOTMSG                           ;INDICATE NOT FOUND
E661 8602             (       filesys.os):00091                 LDA     #RCNOTF                           ;NOT FOUND RC
                      (       filesys.os):00092         ;* PROCESS FOR FILE RELATED ERRORS
E663                  (       filesys.os):00093         FILERR
E663 3403             (       filesys.os):00094                 PSHS    A,CC                              ;SAVE A & CC
E665 7DDCA2           (       filesys.os):00095                 TST     >MSGFLG                           ;MESSAGES ENABLED
E668 2721             (       filesys.os):00096                 BEQ     NOFMSG                            ;NO, SKIP IT
E66A BDE54E           (       filesys.os):00097                 JSR     WRLIN                             ;OUTPUT MESSAGE
E66D 4572726F72207072 (       filesys.os):00098                 FCC     'Error processing file: '
     6F63657373696E67
     2066696C653A20
E684 00               (       filesys.os):00099                 FCB     $00
E685 BDE6D7           (       filesys.os):00100                 JSR     SHOSAV                            ;DISPLAY IT
E688 BDE588           (       filesys.os):00101                 JSR     LFCR
E68B                  (       filesys.os):00102         NOFMSG
E68B 1F21             (       filesys.os):00103                 TFR     Y,X                               ;COPY IT
E68D 3503             (       filesys.os):00104                 PULS    A,CC                              ;RESTORE CONDITIONS
E68F 7EE2BD           (       filesys.os):00105                 JMP     ERRMRC                            ;OUTPUT MESSAGE
                      (       filesys.os):00106         ;*
                      (       filesys.os):00107         ;* LOCATE A FILE IN THE DIRECTORY, LEAVES 'X' POINTING AT IT
                      (       filesys.os):00108         ;*
E692                  (       filesys.os):00109         LOCDIR
E692 B6DCB7           (       filesys.os):00110                 LDA     >FDRIVE                           ;GET FILES DRIVE ID
E695 B7DCEB           (       filesys.os):00111                 STA     >SDRIVE                           ;SAVE IT
E698 CC0000           (       filesys.os):00112                 LDD     #DIRSEC                           ;STARTING SECTOR OF DIR
E69B                  (       filesys.os):00113         LOCSEC
E69B BDE5FC           (       filesys.os):00114                 JSR     RDWRK                             ;READ IT
E69E                  (       filesys.os):00115         LOCFIL
                      (       filesys.os):00116         
E69E BDE323           (       filesys.os):00117                 JSR     COMNAM                            ;DOES IT MATCH
E6A1 2712             (       filesys.os):00118                 BEQ     FILFND                            ;YES
E6A3 308820           (       filesys.os):00119                 LEAX    32,X                              ;ADVANCE TO NEXT
E6A6 8CE000           (       filesys.os):00120                 CMPX    #WRKSPC+512                       ;OVER?
E6A9 25F3             (       filesys.os):00121                 BLO     LOCFIL                            ;KEEP LOOKING
E6AB FCDCDF           (       filesys.os):00122                 LDD     >WRKSEC                           ;GET SECTOR
E6AE BDE5DF           (       filesys.os):00123                 JSR     FNDLNK                            ;GET ITS LINK
E6B1 26E8             (       filesys.os):00124                 BNE     LOCSEC                            ;MORE TO FIND
E6B3 8602             (       filesys.os):00125                 LDA     #RCNOTF                           ;FILE NOT FOUND
E6B5                  (       filesys.os):00126         FILFND
E6B5 39               (       filesys.os):00127                 RTS
                      (       filesys.os):00128         ;*
                      (       filesys.os):00129         ;* DISPLAY DIRECTORY USING SAVED FILENAME AS A MASK
                      (       filesys.os):00130         ;*
E6B6                  (       filesys.os):00131         DISDIR
E6B6 8DA1             (       filesys.os):00132                 BSR     LOCERR                            ;LOCATE FILE
E6B8                  (       filesys.os):00133         SHOME
E6B8 8D30             (       filesys.os):00134                 BSR     SHONAM                            ;OUTPUT NAME
E6BA BDE588           (       filesys.os):00135                 JSR     LFCR                              ;NEW LINE
E6BD                  (       filesys.os):00136         NOSHO
E6BD 308820           (       filesys.os):00137                 LEAX    32,X                              ;NEXT ENTRY
E6C0 8CE000           (       filesys.os):00138                 CMPX    #WRKSPC+512                       ;OVER?
E6C3 250B             (       filesys.os):00139                 BLO     SHOFIL                            ;MORE TO GO
E6C5 FCDCDF           (       filesys.os):00140                 LDD     >WRKSEC                           ;GET WORKSECTOR
E6C8 BDE5DF           (       filesys.os):00141                 JSR     FNDLNK                            ;LOCATE LINK
E6CB 27E8             (       filesys.os):00142                 BEQ     FILFND                            ;NO, QUIT
E6CD BDE5FC           (       filesys.os):00143                 JSR     RDWRK                             ;READ NEW SECTOR
E6D0                  (       filesys.os):00144         SHOFIL
E6D0 BDE323           (       filesys.os):00145                 JSR     COMNAM                            ;DOES IT MATCH?
E6D3 26E8             (       filesys.os):00146                 BNE     NOSHO                             ;DON'T OUTPUT
E6D5 20E1             (       filesys.os):00147                 BRA     SHOME                             ;DISPLAY IT
                      (       filesys.os):00148         
                      (       filesys.os):00149         ;*
                      (       filesys.os):00150         ;* SHOW SAVED FILENAME
                      (       filesys.os):00151         ;*
E6D7                  (       filesys.os):00152         SHOSAV
E6D7 3416             (       filesys.os):00153                 PSHS    A,B,X                             ;SAVE REGS
E6D9 8EDCB7           (       filesys.os):00154                 LDX     #FDRIVE                           ;POINT TO IT
E6DC A680             (       filesys.os):00155                 LDA     ,X+                               ;GET DRIVE ID
E6DE 8B41             (       filesys.os):00156                 ADDA    #'A'                              ;OFFSET
E6E0 BDE59A           (       filesys.os):00157                 JSR     PUTCHR
E6E3 863A             (       filesys.os):00158                 LDA     #':'
E6E5 BDE59A           (       filesys.os):00159                 JSR     PUTCHR
E6E8 2002             (       filesys.os):00160                 BRA     SHON1                             ;DISPLAY IT
                      (       filesys.os):00161         ;*
                      (       filesys.os):00162         ;* DISPLAYS FILENAME(X) IN DIRECTORY FORMAT
                      (       filesys.os):00163         ;*
E6EA                  (       filesys.os):00164         SHONAM
E6EA 3416             (       filesys.os):00165                 PSHS    A,B,X                             ;SAVE REGISTERS
E6EC                  (       filesys.os):00166         SHON1
E6EC 865B             (       filesys.os):00167                 LDA     #'['                              ;OPENING BRACKET
E6EE BDE59A           (       filesys.os):00168                 JSR     PUTCHR                            ;OUTPUT
E6F1 8D12             (       filesys.os):00169                 BSR     DISP8                             ;DISPLAY IT
E6F3 865D             (       filesys.os):00170                 LDA     #']'                              ;CLOSING BRACKET
E6F5 BDE59A           (       filesys.os):00171                 JSR     PUTCHR                            ;OUTPUT
E6F8 8D0B             (       filesys.os):00172                 BSR     DISP8                             ;DISPLAY NAME
E6FA 862E             (       filesys.os):00173                 LDA     #'.'
E6FC BDE59A           (       filesys.os):00174                 JSR     PUTCHR
E6FF C603             (       filesys.os):00175                 LDB     #3                                ;TYPE IS THREE
E701 8D04             (       filesys.os):00176                 BSR     DISPX
E703 3596             (       filesys.os):00177                 PULS    A,B,X,PC
E705                  (       filesys.os):00178         DISP8
E705 C608             (       filesys.os):00179                 LDB     #8                                ;8 CHARS FOR PREFIX AND TYPE
E707                  (       filesys.os):00180         DISPX
E707 A680             (       filesys.os):00181                 LDA     ,X+                               ;GET CHAR
E709 2703             (       filesys.os):00182                 BEQ     SHRT                              ;SHORT, ADVANCE
E70B BDE59A           (       filesys.os):00183                 JSR     PUTCHR                            ;DISPLAY
E70E                  (       filesys.os):00184         SHRT
E70E 5A               (       filesys.os):00185                 DECB                                      ;REDUCE COUNT
E70F 26F6             (       filesys.os):00186                 BNE     DISPX                             ;KEEP GOING
E711 39               (       filesys.os):00187                 RTS
                      (       filesys.os):00188         ;*
                      (       filesys.os):00189         ;* CALCULATE DRIVE SIZE IN 'D'
                      (       filesys.os):00190         ;*
E712                  (       filesys.os):00191         CURSIZ
E712 B6DCEB           (       filesys.os):00192                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E715                  (       filesys.os):00193         DRVSIZ
E715 3440             (       filesys.os):00194                 PSHS    U
E717 BDEB09           (       filesys.os):00195                 JSR     GETCTL1                           ;GET CONTROL BLOCK
E71A E643             (       filesys.os):00196                 LDB     NSEC,U                            ;GET # SECS/TRACK
E71C A642             (       filesys.os):00197                 LDA     NHEAD,U                           ;GET # HEADS
E71E 3D               (       filesys.os):00198                 MUL                                       ;GET SECS/CYLINDER
E71F A641             (       filesys.os):00199                 LDA     NCYL,U                            ;GET # CYLINDERS
E721 3D               (       filesys.os):00200                 MUL                                       ;CALCULATE TOTAL SIZE
E722 35C0             (       filesys.os):00201                 PULS    U,PC                              ;RETURN
                      (       filesys.os):00202         ;*
                      (       filesys.os):00203         ;* CREATES A FILE
                      (       filesys.os):00204         ;*
E724                  (       filesys.os):00205         CREATE
E724 BDE35C           (       filesys.os):00206                 JSR     VALID                             ;OK AS SINGLE FLE
E727 1026FB8D         (       filesys.os):00207                 LBNE    BADOPR                            ;NO, INVALID
E72B BDE692           (       filesys.os):00208                 JSR     LOCDIR                            ;LOOK FOR IT
E72E 2609             (       filesys.os):00209                 BNE     CRE1                              ;ITS OK
                      (       filesys.os):00210         ;* FILE ALREADY EXISTS
E730                  (       filesys.os):00211         FEXISTS
E730 108EF750         (       filesys.os):00212                 LDY     #EXIMSG                           ;FILE EXISTS
E734 8607             (       filesys.os):00213                 LDA     #RCEXI                            ;EXISTS
E736 7EE663           (       filesys.os):00214                 JMP     FILERR                            ;INDICATE ERROR
E739                  (       filesys.os):00215         CRE1
E739 8D6F             (       filesys.os):00216                 BSR     FRESEC                            ;ALLOCATE A SECTOR
E73B FDDCCD           (       filesys.os):00217                 STD     >TEMP1                            ;SAVE IT
E73E CC0000           (       filesys.os):00218                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
E741                  (       filesys.os):00219         CRE2
E741 BDE5FC           (       filesys.os):00220                 JSR     RDWRK                             ;READ WORK SECTOR
E744 C610             (       filesys.os):00221                 LDB     #16                               ;ENTRIES/SECTOR
E746                  (       filesys.os):00222         CRE3
E746 6D84             (       filesys.os):00223                 TST     ,X                                ;IS IT FREE?
E748 2732             (       filesys.os):00224                 BEQ     CRE6                              ;YES, PUT IT HERE
E74A 308820           (       filesys.os):00225                 LEAX    32,X                              ;ADVANCE TO NEXT
E74D 5A               (       filesys.os):00226                 DECB                                      ;REDUCE COUNT
E74E 26F6             (       filesys.os):00227                 BNE     CRE3                              ;KEEP LOOKING
E750 FCDCDF           (       filesys.os):00228                 LDD     >WRKSEC                           ;GET DIRECTORY SEC ID
E753 BDE5DF           (       filesys.os):00229                 JSR     FNDLNK                            ;FIND LINK
E756 26E9             (       filesys.os):00230                 BNE     CRE2                              ;AND KEEP GOING
E758 FCDCCD           (       filesys.os):00231                 LDD     >TEMP1                            ;GET OUR FREE SECTOR
E75B ED84             (       filesys.os):00232                 STD     ,X                                ;POINT DIRECTORY AT IT
E75D BDE7A1           (       filesys.os):00233                 JSR     CHGWRK                            ;INDICATE WE CHANGED
E760 3406             (       filesys.os):00234                 PSHS    A,B                               ;SAVE ID
E762 8D46             (       filesys.os):00235                 BSR     FRESEC                            ;GET FREE
E764 FDDCCD           (       filesys.os):00236                 STD     >TEMP1                            ;SAVE NEW FREE
E767 BDE638           (       filesys.os):00237                 JSR     WRWRK                             ;WRITE WORK SECTOR
E76A 3506             (       filesys.os):00238                 PULS    A,B                               ;RESTORE DIRECTORY SECTOR ID
E76C FDDCDF           (       filesys.os):00239                 STD     >WRKSEC                           ;INDICATE CURRENT WORKSECTOR
E76F 8EDE00           (       filesys.os):00240                 LDX     #WRKSPC                           ;PT TO IT
E772                  (       filesys.os):00241         CRE5
E772 6F80             (       filesys.os):00242                 CLR     ,X+                               ;CLEAR IT
E774 8CE000           (       filesys.os):00243                 CMPX    #WRKSPC+512                       ;ARE WE OVER
E777 25F9             (       filesys.os):00244                 BLO     CRE5                              ;DO ALL
E779 8EDE00           (       filesys.os):00245                 LDX     #WRKSPC                           ;PT TO IT AGAIN
E77C                  (       filesys.os):00246         CRE6
E77C 3420             (       filesys.os):00247                 PSHS    Y                                 ;SAVE
E77E 108EDCB8         (       filesys.os):00248                 LDY     #PREFIX                           ;PT TO SAVED NAME
E782 C613             (       filesys.os):00249                 LDB     #19                               ;19 CHARS IN NAME
E784                  (       filesys.os):00250         CRE7
E784 A6A0             (       filesys.os):00251                 LDA     ,Y+                               ;GET CHAR
E786 A780             (       filesys.os):00252                 STA     ,X+                               ;SAVE IN ENTRY
E788 5A               (       filesys.os):00253                 DECB                                      ;REDUCE COUNT
E789 26F9             (       filesys.os):00254                 BNE     CRE7                              ;CONTINUE
E78B 3520             (       filesys.os):00255                 PULS    Y                                 ;RESTORE
E78D 3088ED           (       filesys.os):00256                 LEAX    -19,X                             ;BACK TO START
E790 FCDCD3           (       filesys.os):00257                 LDD     >TEMP4                            ;GET LOAD ADDRESS
E793 ED8815           (       filesys.os):00258                 STD     DRADR,X                           ;SET IT,
E796 86F0             (       filesys.os):00259                 LDA     #DEFATR                           ;GET DEF ATTRIBUTES
E798 A78817           (       filesys.os):00260                 STA     DATTR,X                           ;SET THEM
E79B FCDCCD           (       filesys.os):00261                 LDD     >TEMP1                            ;GET DISK ADDRESS
E79E ED8813           (       filesys.os):00262                 STD     DDADR,X                           ;SET IT
                      (       filesys.os):00263         ;*
                      (       filesys.os):00264         ;* SET WORK SECTOR CHANGED FLAG
                      (       filesys.os):00265         ;*
E7A1                  (       filesys.os):00266         CHGWRK
E7A1 7FDCDD           (       filesys.os):00267                 CLR     >WRKCHG
E7A4 7ADCDD           (       filesys.os):00268                 DEC     >WRKCHG                           ;SET IT
E7A7 1A04             (       filesys.os):00269                 ORCC    #4                                ;SET 'Z'
E7A9 39               (       filesys.os):00270                 RTS
                      (       filesys.os):00271         ;*
                      (       filesys.os):00272         ;* LOCATE A FREE SECTOR ON THE DISK, CLAIM IT AND SET
                      (       filesys.os):00273         ;* FLAG TO $FFFF (END OF FILE). ATEMPT TO ALLOCATE IN SECTOR
                      (       filesys.os):00274         ;* WHICH AS ALREADY LOADED IN ORDER TO REDUCE DISK I/O.
                      (       filesys.os):00275         ;*
E7AA                  (       filesys.os):00276         FRESEC
E7AA BDE712           (       filesys.os):00277                 JSR     CURSIZ                            ;CALCULATE SIZE OF DISK
E7AD FDDCCB           (       filesys.os):00278                 STD     >TEMP                             ;SAVE IT
E7B0 830001           (       filesys.os):00279                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
E7B3 8B01             (       filesys.os):00280                 ADDA    #LNKSEC                           ;COMPUTE LARGEST LINK SECTOR # (D/256+LNK)
E7B5 3402             (       filesys.os):00281                 PSHS    A                                 ;SAVE
E7B7 7DDCDF           (       filesys.os):00282                 TST     >WRKSEC                           ;LOW?
E7BA 260E             (       filesys.os):00283                 BNE     FRES1                             ;NO LINK IN CORE
E7BC F6DCE0           (       filesys.os):00284                 LDB     >WRKSEC+1                         ;GET SECTOR ID
E7BF B1DCE0           (       filesys.os):00285                 CMPA    >WRKSEC+1                         ;IS IT IN RANGE?
E7C2 2506             (       filesys.os):00286                 BLO     FRES1                             ;NO LINK IN CORE
E7C4 C101             (       filesys.os):00287                 CMPB    #LNKSEC                           ;IN RANGE?
E7C6 2502             (       filesys.os):00288                 BLO     FRES1                             ;NO LINK IN CORE
E7C8 8D11             (       filesys.os):00289                 BSR     FNDFRE                            ;LOOK FOR IT
E7CA                  (       filesys.os):00290         FRES1
E7CA C601             (       filesys.os):00291                 LDB     #LNKSEC                           ;LOOK IN FIRST
E7CC                  (       filesys.os):00292         FRES2
E7CC 8D0D             (       filesys.os):00293                 BSR     FNDFRE                            ;LOOK FOR IT
E7CE 5C               (       filesys.os):00294                 INCB    ADVANCE
E7CF E1E4             (       filesys.os):00295                 CMPB    ,S                                ;ARE WE OVER?
E7D1 23F9             (       filesys.os):00296                 BLS     FRES2                             ;NO, LEEP GOING
                      (       filesys.os):00297         ;* NO DISK SPACE AVAILABLE
E7D3                  (       filesys.os):00298         NOSPAC
E7D3 8EF764           (       filesys.os):00299                 LDX     #NOSMSG                           ;NO SPACE
E7D6 8608             (       filesys.os):00300                 LDA     #RCNOS                            ;RETURN CODE
E7D8 7EE2BD           (       filesys.os):00301                 JMP     ERRMRC                            ;REPORT ERROR
                      (       filesys.os):00302         ;* LOOK FOR FREE SECTOR
E7DB                  (       filesys.os):00303         FNDFRE
E7DB 4F               (       filesys.os):00304                 CLRA                                      ;HIGH ADDRESS TO ZERO
E7DC 3434             (       filesys.os):00305                 PSHS    B,X,Y                             ;SAVE REGS
E7DE BDE5FC           (       filesys.os):00306                 JSR     RDWRK                             ;READ WORK SECTOR
E7E1                  (       filesys.os):00307         FNDF1
E7E1 EC81             (       filesys.os):00308                 LDD     ,X++                              ;IS IT FREE
E7E3 2707             (       filesys.os):00309                 BEQ     FNDF3                             ;YES
E7E5 8CE000           (       filesys.os):00310                 CMPX    #WRKSPC+512                       ;OVER?
E7E8 25F7             (       filesys.os):00311                 BLO     FNDF1                             ;NO, KEEP LOOKING
E7EA                  (       filesys.os):00312         FNDF2
E7EA 35B4             (       filesys.os):00313                 PULS    B,X,Y,PC                          ;GO HOME
E7EC                  (       filesys.os):00314         FNDF3
E7EC 1F10             (       filesys.os):00315                 TFR     X,D                               ;GET VALUE
E7EE 83DE02           (       filesys.os):00316                 SUBD    #WRKSPC+2                         ;CONVERT TO BYTE OFFSET
E7F1 44               (       filesys.os):00317                 LSRA                                      ;CONVERT ADDRESS IN WS
E7F2 56               (       filesys.os):00318                 RORB                                      ;TO SECTOR # IN WS
E7F3 A6E4             (       filesys.os):00319                 LDA     ,S                                ;GET SECTOR ID BACK
E7F5 8001             (       filesys.os):00320                 SUBA    #LNKSEC                           ;CONVERT TO PURE SECTOR #
E7F7 10B3DCCB         (       filesys.os):00321                 CMPD    >TEMP                             ;WITHIN DISK SIZE?
E7FB 24ED             (       filesys.os):00322                 BHS     FNDF2                             ;NO, RETURN WITH BAD NEWS
E7FD 3261             (       filesys.os):00323                 LEAS    1,S                               ;SKIP SAVED 'B' REGISTER
E7FF 108EFFFF         (       filesys.os):00324                 LDY     #$FFFF                            ;GET SECTOR IN USE FLAG
E803 10AF1E           (       filesys.os):00325                 STY     -2,X                              ;WRITE IT
E806 3530             (       filesys.os):00326                 PULS    X,Y                               ;RESTORE REGS
E808 3263             (       filesys.os):00327                 LEAS    3,S                               ;CLEAR UP STACK
E80A 2095             (       filesys.os):00328                 BRA     CHGWRK                            ;INDICATE CHANGED
                      (       filesys.os):00329         ;*
                      (       filesys.os):00330         ;* OPEN A FILE FOR READ
                      (       filesys.os):00331         ;*
E80C                  (       filesys.os):00332         OPENR
E80C 3414             (       filesys.os):00333                 PSHS    B,X                               ;SAVE REGS
E80E BDE8A3           (       filesys.os):00334                 JSR     LOCRED                            ;DOES IT EXIST
E811 EC8813           (       filesys.os):00335                 LDD     DDADR,X                           ;GET DISK ADDRESS
E814 ED42             (       filesys.os):00336                 STD     OFIRST,U                          ;SAVE IT
E816 ED44             (       filesys.os):00337                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E818 4F               (       filesys.os):00338                 CLRA
E819 5F               (       filesys.os):00339                 CLRB                                      ;ZERO OFFSET
E81A ED48             (       filesys.os):00340                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E81C ED46             (       filesys.os):00341                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E81E F6DCB7           (       filesys.os):00342                 LDB     >FDRIVE                           ;GET FILE DRIVE
E821 8601             (       filesys.os):00343                 LDA     #1                                ;INDICATE FILE OPEN/READ
E823 EDC4             (       filesys.os):00344                 STD     OTYPE,U                           ;INDICATE
E825 B6DCDA           (       filesys.os):00345                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E828 B7DCEB           (       filesys.os):00346                 STA     >SDRIVE                           ;RESET IT
E82B 4F               (       filesys.os):00347                 CLRA                                      ;ZERO RC
E82C 3594             (       filesys.os):00348                 PULS    B,X,PC
                      (       filesys.os):00349         ;*
                      (       filesys.os):00350         ;* READ CHARACTER FROM FILE
                      (       filesys.os):00351         ;*
E82E                  (       filesys.os):00352         READC
E82E 3414             (       filesys.os):00353                 PSHS    B,X                               ;SAVE REGS
E830 304A             (       filesys.os):00354                 LEAX    OSIZ,U                            ;OFFSET TO DATA
E832 A641             (       filesys.os):00355                 LDA     ODRIVE,U                          ;GET DRIVE
E834 B7DCEB           (       filesys.os):00356                 STA     >SDRIVE                           ;SELECT
E837 EC48             (       filesys.os):00357                 LDD     OOFFSET,U                         ;GET OFFSET
E839 2612             (       filesys.os):00358                 BNE     REC1                              ;NON-ZERO, ITS OK
E83B A6C4             (       filesys.os):00359                 LDA     OTYPE,U                           ;GET OPEN TYPE
E83D 4A               (       filesys.os):00360                 DECA                                      ;OPEN FOR READ?
E83E 2676             (       filesys.os):00361                 BNE     ORERR                             ;NO, REPORT ERROR
E840 EC44             (       filesys.os):00362                 LDD     OSECTOR,U                         ;GET SECTOR
E842 1083FFFF         (       filesys.os):00363                 CMPD    #$FFFF                            ;END OF FILE?
E846 2776             (       filesys.os):00364                 BEQ     EOF                               ;YES, REPORT ERROR
E848 BDEADF           (       filesys.os):00365                 JSR     RDISK                             ;READ IT IN
E84B EC48             (       filesys.os):00366                 LDD     OOFFSET,U                         ;RESTORE OFFSET
E84D                  (       filesys.os):00367         REC1
E84D 308B             (       filesys.os):00368                 LEAX    D,X                               ;OFFSET TO CHAR
E84F C30001           (       filesys.os):00369                 ADDD    #1                                ;ADVANCE
E852 10830200         (       filesys.os):00370                 CMPD    #512                              ;ARE WE OVER
E856 250F             (       filesys.os):00371                 BLO     REC2                              ;NO, ITS OK
E858 3410             (       filesys.os):00372                 PSHS    X                                 ;SAVE 'X'
E85A EC44             (       filesys.os):00373                 LDD     OSECTOR,U                         ;GET SECTOR
E85C ED46             (       filesys.os):00374                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E85E BDE5DF           (       filesys.os):00375                 JSR     FNDLNK                            ;LOOK UP ITS LINK
E861 ED44             (       filesys.os):00376                 STD     OSECTOR,U                         ;SAVE NEW SECTOR
E863 3510             (       filesys.os):00377                 PULS    X                                 ;RESTORE PTR TO CAHR
E865 4F               (       filesys.os):00378                 CLRA
E866 5F               (       filesys.os):00379                 CLRB
E867                  (       filesys.os):00380         REC2
E867 ED48             (       filesys.os):00381                 STD     OOFFSET,U                         ;NEW OFFSET
E869 B6DCDA           (       filesys.os):00382                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E86C B7DCEB           (       filesys.os):00383                 STA     >SDRIVE                           ;RESET IT
E86F A680             (       filesys.os):00384                 LDA     ,X+                               ;GET CHARACTER
E871 81FF             (       filesys.os):00385                 CMPA    #$FF                              ;END OF FILE?
E873 2749             (       filesys.os):00386                 BEQ     EOF                               ;YES
E875 1A04             (       filesys.os):00387                 ORCC    #4                                ;INDICATE SUCESS
E877 3594             (       filesys.os):00388                 PULS    B,X,PC
                      (       filesys.os):00389         ;*
                      (       filesys.os):00390         ;* READ A BLOCK FROM A FILE
                      (       filesys.os):00391         ;*
E879                  (       filesys.os):00392         READB
E879 3414             (       filesys.os):00393                 PSHS    B,X                               ;SAVE REGS
E87B A6C4             (       filesys.os):00394                 LDA     OTYPE,U                           ;GET OPEN TYPE
E87D 4A               (       filesys.os):00395                 DECA                                      ;OPEN READ?
E87E 2636             (       filesys.os):00396                 BNE     ORERR                             ;NO, REPORT ERROR
E880 A641             (       filesys.os):00397                 LDA     ODRIVE,U
E882 B7DCEB           (       filesys.os):00398                 STA     >SDRIVE                           ;SET DRIVE
E885 EC44             (       filesys.os):00399                 LDD     OSECTOR,U
E887 1083FFFF         (       filesys.os):00400                 CMPD    #$FFFF                            ;END OF FILE?
E88B 2731             (       filesys.os):00401                 BEQ     EOF
E88D ED46             (       filesys.os):00402                 STD     OLSTSEC,U                         ;SAVE LAST
E88F BDEADF           (       filesys.os):00403                 JSR     RDISK                             ;READ IT
E892 BDE5DF           (       filesys.os):00404                 JSR     FNDLNK                            ;FIND ITS LINK
E895 ED44             (       filesys.os):00405                 STD     OSECTOR,U                         ;RESAVE
E897 B6DCDA           (       filesys.os):00406                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E89A B7DCEB           (       filesys.os):00407                 STA     >SDRIVE                           ;RESET SYSTEM DRIVE
E89D 4F               (       filesys.os):00408                 CLRA
E89E 5F               (       filesys.os):00409                 CLRB
E89F ED48             (       filesys.os):00410                 STD     OOFFSET,U                         ;CLEAR OFFSET
E8A1 3594             (       filesys.os):00411                 PULS    B,X,PC
                      (       filesys.os):00412         ;*
                      (       filesys.os):00413         ;* LOOK UP FILE WITH INTENT TO READ
                      (       filesys.os):00414         ;*
E8A3                  (       filesys.os):00415         LOCRED
E8A3 BDE659           (       filesys.os):00416                 JSR     LOCERR                            ;FIND IT
E8A6 A68817           (       filesys.os):00417                 LDA     DATTR,X                           ;GET ATTRS
E8A9 8580             (       filesys.os):00418                 BITA    #RPERM                            ;CAN WE READ?
E8AB 2635             (       filesys.os):00419                 BNE     CLOC2                             ;YES, ITS OK
                      (       filesys.os):00420         ;* FILE PROTECTON VIOLATION
E8AD                  (       filesys.os):00421         PROERR
E8AD 108EF7AA         (       filesys.os):00422                 LDY     #PROMSG                           ;MESSAGE
E8B1 8603             (       filesys.os):00423                 LDA     #RCPRO                            ;PROTECTION VIOLATION
E8B3 7EE663           (       filesys.os):00424                 JMP     FILERR                            ;FILE ERROR
                      (       filesys.os):00425         ;* ATTEMPT TO READ FILE NOT OPEN FOR READ
E8B6                  (       filesys.os):00426         ORERR
E8B6 8EF77B           (       filesys.os):00427                 LDX     #OREMSG
E8B9 8604             (       filesys.os):00428                 LDA     #RCORE
E8BB 7EE2BD           (       filesys.os):00429                 JMP     ERRMRC
                      (       filesys.os):00430         ;* ATTEMPT TO READ PAST EOF
E8BE                  (       filesys.os):00431         EOF
E8BE 8606             (       filesys.os):00432                 LDA     #RCEOF
E8C0 7EE2F8           (       filesys.os):00433                 JMP     ERRRET
                      (       filesys.os):00434         ;*
                      (       filesys.os):00435         ;* REWIND A FILE
                      (       filesys.os):00436         ;*
E8C3                  (       filesys.os):00437         REWIND
E8C3 3406             (       filesys.os):00438                 PSHS    A,B                               ;SAVE REGS
E8C5 EC42             (       filesys.os):00439                 LDD     OFIRST,U                          ;GET FIRST SECTOR ID
E8C7 ED44             (       filesys.os):00440                 STD     OSECTOR,U                         ;POINT TO IT
E8C9 4F               (       filesys.os):00441                 CLRA
E8CA 5F               (       filesys.os):00442                 CLRB
E8CB ED48             (       filesys.os):00443                 STD     OOFFSET,U                         ;SET OFFSET
E8CD ED46             (       filesys.os):00444                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E8CF 3586             (       filesys.os):00445                 PULS    A,B,PC
                      (       filesys.os):00446         ;*
                      (       filesys.os):00447         ;* LOOKUP A FILE WITH INTENT TO WRITE
                      (       filesys.os):00448         ;*
E8D1                  (       filesys.os):00449         LOCWRI
E8D1 BDE692           (       filesys.os):00450                 JSR     LOCDIR                            ;LOOK FOR IT
E8D4 2705             (       filesys.os):00451                 BEQ     CLOC1                             ;IT EXISTS
E8D6 BDE724           (       filesys.os):00452                 JSR     CREATE                            ;CREATE IT
E8D9 2007             (       filesys.os):00453                 BRA     CLOC2                             ;AND RETURN
E8DB                  (       filesys.os):00454         CLOC1
E8DB A68817           (       filesys.os):00455                 LDA     DATTR,X                           ;GET ATTRIBUTES
E8DE 8540             (       filesys.os):00456                 BITA    #WPERM                            ;CAN WE WRITE?
E8E0 27CB             (       filesys.os):00457                 BEQ     PROERR                            ;PROTECTON VIOLATION
E8E2                  (       filesys.os):00458         CLOC2
E8E2 FCDCDF           (       filesys.os):00459                 LDD     >WRKSEC                           ;GET DIRECTORY SECT
E8E5 1A04             (       filesys.os):00460                 ORCC    #$04                              ;SET 'Z'
E8E7 39               (       filesys.os):00461                 RTS
                      (       filesys.os):00462         ;*
                      (       filesys.os):00463         ;* OPEN A FILE FOR WRITE
                      (       filesys.os):00464         ;*
E8E8                  (       filesys.os):00465         OPENW
E8E8 3414             (       filesys.os):00466                 PSHS    B,X                               ;SAVE REGS
E8EA 8DE5             (       filesys.os):00467                 BSR     LOCWRI                            ;DOES IT EXIST
E8EC EC8813           (       filesys.os):00468                 LDD     DDADR,X                           ;GET DISK ADDRESS
E8EF ED42             (       filesys.os):00469                 STD     OFIRST,U                          ;SAVE IT
E8F1 ED44             (       filesys.os):00470                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E8F3 4F               (       filesys.os):00471                 CLRA
E8F4 5F               (       filesys.os):00472                 CLRB                                      ;ZERO OFFSET
E8F5 ED48             (       filesys.os):00473                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E8F7 ED46             (       filesys.os):00474                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST SECTOR
E8F9 B6DCB7           (       filesys.os):00475                 LDA     >FDRIVE                           ;GET FILE DRIVE
E8FC A741             (       filesys.os):00476                 STA     ODRIVE,U                          ;SET IT UP
E8FE 8602             (       filesys.os):00477                 LDA     #2                                ;INDICATE FILE OPEN/WRITE
E900 A7C4             (       filesys.os):00478                 STA     OTYPE,U                           ;INDICATE
E902 B6DCDA           (       filesys.os):00479                 LDA     >SAVDRV
E905 B7DCEB           (       filesys.os):00480                 STA     >SDRIVE
E908 4F               (       filesys.os):00481                 CLRA    ZERO RC
E909 3594             (       filesys.os):00482                 PULS    B,X,PC
                      (       filesys.os):00483         ;*
                      (       filesys.os):00484         ;* WRITE CHARACTER TO A FILE
                      (       filesys.os):00485         ;*
E90B                  (       filesys.os):00486         WRITEC
E90B 3416             (       filesys.os):00487                 PSHS    A,B,X                             ;SAVE REGS
E90D 304A             (       filesys.os):00488                 LEAX    OSIZ,U                            ;POINT TO DATA
E90F EC48             (       filesys.os):00489                 LDD     OOFFSET,U                         ;GET OFFSET
E911 10830200         (       filesys.os):00490                 CMPD    #512                              ;ARE WE OVER?
E915 2504             (       filesys.os):00491                 BLO     WRC1                              ;NO, ITS OK
E917 8D19             (       filesys.os):00492                 BSR     WRITEB                            ;OUTPUT THE BLOCK
E919 EC48             (       filesys.os):00493                 LDD     OOFFSET,U                         ;GET OFFSET
E91B                  (       filesys.os):00494         WRC1
E91B 308B             (       filesys.os):00495                 LEAX    D,X                               ;POINT TO CHAR
E91D C30001           (       filesys.os):00496                 ADDD    #1                                ;INCREMENT
E920 ED48             (       filesys.os):00497                 STD     OOFFSET,U                         ;RESAVE
E922 A6E4             (       filesys.os):00498                 LDA     ,S                                ;GET CHAR BACK
E924 A784             (       filesys.os):00499                 STA     ,X                                ;WRITE IN BUFFER
E926 1A04             (       filesys.os):00500                 ORCC    #4                                ;INDICATE SUCESS
E928 3596             (       filesys.os):00501                 PULS    A,B,X,PC
                      (       filesys.os):00502         ;* ATTEMPT TO WRITE FILE NOT OPEN FOR WRITE
E92A                  (       filesys.os):00503         OWERR
E92A 8EF792           (       filesys.os):00504                 LDX     #OWEMSG
E92D 8605             (       filesys.os):00505                 LDA     #RCOWE
E92F 7EE2BD           (       filesys.os):00506                 JMP     ERRMRC
                      (       filesys.os):00507         ;*
                      (       filesys.os):00508         ;* WRITE A BLOCK TO A FILE
                      (       filesys.os):00509         ;*
E932                  (       filesys.os):00510         WRITEB
E932 3414             (       filesys.os):00511                 PSHS    B,X                               ;SAVE REGS
E934 A6C4             (       filesys.os):00512                 LDA     OTYPE,U                           ;GET TYPE
E936 8102             (       filesys.os):00513                 CMPA    #2                                ;WRITE?
E938 26F0             (       filesys.os):00514                 BNE     OWERR                             ;NO, INVALID
E93A A641             (       filesys.os):00515                 LDA     ODRIVE,U                          ;GET DRIVE
E93C B7DCEB           (       filesys.os):00516                 STA     >SDRIVE                           ;SELECT DRIVE
E93F EC44             (       filesys.os):00517                 LDD     OSECTOR,U                         ;GET SECTOR
E941 1083FFFF         (       filesys.os):00518                 CMPD    #$FFFF                            ;ARE WE PAST END?
E945 2613             (       filesys.os):00519                 BNE     WRB1                              ;NO, ITS OK
E947 BDE7AA           (       filesys.os):00520                 JSR     FRESEC                            ;GET A SECTOR
E94A 3406             (       filesys.os):00521                 PSHS    A,B                               ;SAVE IT
E94C EC46             (       filesys.os):00522                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
E94E BDE5DF           (       filesys.os):00523                 JSR     FNDLNK                            ;GET ITS LINK
E951 3506             (       filesys.os):00524                 PULS    A,B                               ;RESTORE
E953 ED84             (       filesys.os):00525                 STD     ,X                                ;SAVE IT
E955 BDE7A1           (       filesys.os):00526                 JSR     CHGWRK                            ;INDICATE SECTOR CHANGED
E958 AE61             (       filesys.os):00527                 LDX     1,S                               ;RESTORE MEMORY POINTER
E95A                  (       filesys.os):00528         WRB1
E95A ED46             (       filesys.os):00529                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E95C BDEB12           (       filesys.os):00530                 JSR     WDISK                             ;WRITE THE SECTOR
E95F BDE5DF           (       filesys.os):00531                 JSR     FNDLNK                            ;LOCATE LINK
E962 ED44             (       filesys.os):00532                 STD     OSECTOR,U                         ;SAVE ID OF NEXT SECTOR
E964 B6DCDA           (       filesys.os):00533                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E967 B7DCEB           (       filesys.os):00534                 STA     >SDRIVE                           ;RESET DRIVE ID
E96A 4F               (       filesys.os):00535                 CLRA
E96B 5F               (       filesys.os):00536                 CLRB
E96C ED48             (       filesys.os):00537                 STD     OOFFSET,U                         ;INDICATE NO CHAR WRITE
E96E 3594             (       filesys.os):00538                 PULS    B,X,PC
                      (       filesys.os):00539         ;*
                      (       filesys.os):00540         ;* CLOSE OPEN FILE
                      (       filesys.os):00541         ;*
E970                  (       filesys.os):00542         CLOSE
E970 3414             (       filesys.os):00543                 PSHS    B,X                               ;SAVE REGS
E972 A6C4             (       filesys.os):00544                 LDA     OTYPE,U                           ;GET TYPE
E974 8102             (       filesys.os):00545                 CMPA    #2                                ;OPEN FOR WRITE?
E976 2639             (       filesys.os):00546                 BNE     CLO4                              ;NO, SKIP IT
                      (       filesys.os):00547         ;* UPDATE LAST SECTOR IF ANY DATA, OR FIRST IN FILE
E978 A641             (       filesys.os):00548                 LDA     ODRIVE,U                          ;GET DRIVE ID
E97A B7DCEB           (       filesys.os):00549                 STA     >SDRIVE                           ;SELECT IT
E97D EC48             (       filesys.os):00550                 LDD     OOFFSET,U                         ;DATA IN LAST SECT?
E97F 2604             (       filesys.os):00551                 BNE     CLO0                              ;YES, WRITE IT
E981 AE46             (       filesys.os):00552                 LDX     OLSTSEC,U                         ;GET SECTOR
E983 2617             (       filesys.os):00553                 BNE     CLO3                              ;IS A LAST, OK
                      (       filesys.os):00554         ;* CLEAR REMAINING SECTOR TO ZERO
E985                  (       filesys.os):00555         CLO0
E985 304A             (       filesys.os):00556                 LEAX    OSIZ,U                            ;PT TO AREA
E987 308B             (       filesys.os):00557                 LEAX    D,X                               ;ADVANCE TO DATA AREA
E989                  (       filesys.os):00558         CLO1
E989 10830200         (       filesys.os):00559                 CMPD    #512                              ;ARE WE OVER?
E98D 2409             (       filesys.os):00560                 BHS     CLO2                              ;YES, STOP
E98F 6F84             (       filesys.os):00561                 CLR     ,X                                ;SET TO ZERO
E991 6380             (       filesys.os):00562                 COM     ,X+                               ;& CONVERT TO FF
E993 C30001           (       filesys.os):00563                 ADDD    #1                                ;ADVANCE
E996 20F1             (       filesys.os):00564                 BRA     CLO1                              ;AND CONTINUE
                      (       filesys.os):00565         ;* WRITE IT TO THE DISK
E998                  (       filesys.os):00566         CLO2
E998 304A             (       filesys.os):00567                 LEAX    OSIZ,U                            ;OFFSET AGAIN
E99A 8D96             (       filesys.os):00568                 BSR     WRITEB                            ;WRITE IT
                      (       filesys.os):00569         ;* MARK LAST SECTOR WRITTEN AS EOF
E99C                  (       filesys.os):00570         CLO3
E99C EC46             (       filesys.os):00571                 LDD     OLSTSEC,U                         ;ITS NOW LAST ONE
E99E BDE5DF           (       filesys.os):00572                 JSR     FNDLNK                            ;GET ITS LINK
E9A1 CCFFFF           (       filesys.os):00573                 LDD     #$FFFF                            ;EOF MARKER
E9A4 ED84             (       filesys.os):00574                 STD     ,X                                ;WRITE IT
                      (       filesys.os):00575         ;* IF NOT LAST SECTOR IN FILE, RELEASE REST
E9A6 EC44             (       filesys.os):00576                 LDD     OSECTOR,U                         ;GET SECTOR
E9A8 1083FFFF         (       filesys.os):00577                 CMPD    #$FFFF                            ;LAST ONE IN FILE?
E9AC 2703             (       filesys.os):00578                 BEQ     CLO4                              ;IS OK
E9AE BDEDBE           (       filesys.os):00579                 JSR     UNCHAIN                           ;REMOVE SECTOR LINKS
E9B1                  (       filesys.os):00580         CLO4
E9B1 6FC4             (       filesys.os):00581                 CLR     OTYPE,U                           ;INDICATE FILE IS CLOSED
E9B3 B6DCDA           (       filesys.os):00582                 LDA     >SAVDRV                           ;RESET DRIVE
E9B6 B7DCEB           (       filesys.os):00583                 STA     >SDRIVE
E9B9 4F               (       filesys.os):00584                 CLRA
E9BA 3594             (       filesys.os):00585                 PULS    B,X,PC                            ;GO HOME
                      (       filesys.os):00586         ;*
                      (       filesys.os):00587         ;* SEEK ABSOLUTE FROM START OF FILE
                      (       filesys.os):00588         ;*
E9BC                  (       filesys.os):00589         SEEKABS
E9BC BDE8C3           (       filesys.os):00590                 JSR     REWIND                            ;BACK TO START
                      (       filesys.os):00591         ;*
                      (       filesys.os):00592         ;* SEEK FORWARD RELATIVE
                      (       filesys.os):00593         ;*
E9BF                  (       filesys.os):00594         SEEKREL
E9BF 3416             (       filesys.os):00595                 PSHS    A,B,X                             ;SAVE SECTOR ID
E9C1 E6C4             (       filesys.os):00596                 LDB     OTYPE,U                           ;GET TYPE
E9C3 5A               (       filesys.os):00597                 DECB                                      ;OPEN FOR READ?
E9C4 1026FEEE         (       filesys.os):00598                 LBNE    ORERR                             ;NO, REPORT ERROR
E9C8 A641             (       filesys.os):00599                 LDA     ODRIVE,U                          ;GET DRIVE
E9CA B7DCEB           (       filesys.os):00600                 STA     >SDRIVE                           ;SELECT IT
E9CD EC48             (       filesys.os):00601                 LDD     OOFFSET,U                         ;GET OFFSET?
E9CF E3E4             (       filesys.os):00602                 ADDD    ,S                                ;ADD OFFSET
                      (       filesys.os):00603         ;* ADVANCE TILL WE ARE ON CORRECT SECTOR
E9D1                  (       filesys.os):00604         SEEK1
E9D1 10830200         (       filesys.os):00605                 CMPD    #512                              ;ARE WE OVER?
E9D5 251A             (       filesys.os):00606                 BLO     SEEK2                             ;NO, SET OFFSET & EXIT
E9D7 3406             (       filesys.os):00607                 PSHS    A,B                               ;SAVE ID
E9D9 EC44             (       filesys.os):00608                 LDD     OSECTOR,U                         ;GET NEXT SECTOR
E9DB 1083FFFF         (       filesys.os):00609                 CMPD    #$FFFF                            ;END OF FILE?
E9DF 1027FEDB         (       filesys.os):00610                 LBEQ    EOF                               ;ERROR
E9E3 ED46             (       filesys.os):00611                 STD     OLSTSEC,U                         ;SET AS OLD
E9E5 BDE5DF           (       filesys.os):00612                 JSR     FNDLNK                            ;LOOKUP LINK
E9E8 ED44             (       filesys.os):00613                 STD     OSECTOR,U                         ;SAVE PTR TO NEXT
E9EA 3506             (       filesys.os):00614                 PULS    A,B                               ;RESTORE IT
E9EC 830200           (       filesys.os):00615                 SUBD    #512                              ;INDICATE WE ADVANCED
E9EF 20E0             (       filesys.os):00616                 BRA     SEEK1                             ;CONTINUE
                      (       filesys.os):00617         ;* SKIPPED SECTORS, IF NON-ZERO OFFSET, READ IN DATA
E9F1                  (       filesys.os):00618         SEEK2
E9F1 ED48             (       filesys.os):00619                 STD     OOFFSET,U                         ;SET OFFSET
E9F3 270F             (       filesys.os):00620                 BEQ     SEEK3                             ;ZERO, DON'T READ DATA
E9F5 EC44             (       filesys.os):00621                 LDD     OSECTOR,U                         ;GET SECTOR
E9F7 1083FFFF         (       filesys.os):00622                 CMPD    #$FFFF                            ;EOF?
E9FB 1027FEBF         (       filesys.os):00623                 LBEQ    EOF                               ;YES, ERROR
E9FF 304A             (       filesys.os):00624                 LEAX    OSIZ,U                            ;ADVANCE TO DATA
EA01 BDEADF           (       filesys.os):00625                 JSR     RDISK                             ;READ A BLOCK
EA04                  (       filesys.os):00626         SEEK3
EA04 B6DCDA           (       filesys.os):00627                 LDA     >SAVDRV                           ;GET DRIVE
EA07 B7DCEB           (       filesys.os):00628                 STA     >SDRIVE                           ;SET IT
EA0A 4F               (       filesys.os):00629                 CLRA    ZERO RC
EA0B 3596             (       filesys.os):00630                 PULS    A,B,X,PC                          ;BACK TO END
                      (       filesys.os):00631         ;*
                      (       filesys.os):00632         ;* REPORT POSITION IN FILE
                      (       filesys.os):00633         ;*
EA0D                  (       filesys.os):00634         FTELL
EA0D 3430             (       filesys.os):00635                 PSHS    X,Y                               ;SAVE REGS
EA0F A641             (       filesys.os):00636                 LDA     ODRIVE,U                          ;GET DRIVE
EA11 B7DCEB           (       filesys.os):00637                 STA     >SDRIVE                           ;SELECT IT
EA14 108E0000         (       filesys.os):00638                 LDY     #0                                ;START AT POSITION ZERO
EA18 EC42             (       filesys.os):00639                 LDD     OFIRST,U                          ;GET ID OF FIRST
EA1A                  (       filesys.os):00640         FTEL1
EA1A 10A344           (       filesys.os):00641                 CMPD    OSECTOR,U                         ;ARE WE THERE?
EA1D 2709             (       filesys.os):00642                 BEQ     FTEL2                             ;YES
EA1F 31A90200         (       filesys.os):00643                 LEAY    512,Y                             ;ADVANCE 1 SECTOR SIZE
EA23 BDE5DF           (       filesys.os):00644                 JSR     FNDLNK                            ;LOCATE LINK
EA26 26F2             (       filesys.os):00645                 BNE     FTEL1                             ;TRY THIS ONE
EA28                  (       filesys.os):00646         FTEL2
EA28 EC48             (       filesys.os):00647                 LDD     OOFFSET,U                         ;GET OFFSET
EA2A 3420             (       filesys.os):00648                 PSHS    Y                                 ;SAVE 'Y'
EA2C E3E1             (       filesys.os):00649                 ADDD    ,S++                              ;INCLUDE IN RESULT
EA2E 3402             (       filesys.os):00650                 PSHS    A
EA30 B6DCDA           (       filesys.os):00651                 LDA     >SAVDRV                           ;GET DRIVE
EA33 B7DCEB           (       filesys.os):00652                 STA     >SDRIVE
EA36 4F               (       filesys.os):00653                 CLRA    'Z' RC
EA37 35B2             (       filesys.os):00654                 PULS    A,X,Y,PC
                      (       filesys.os):00655         ;*
                      (       filesys.os):00656         ;* SUSPEND FILE OPERATION
                      (       filesys.os):00657         ;*
EA39                  (       filesys.os):00658         SUSPEND
EA39 3506             (       filesys.os):00659                 PULS    A,B                               ;GET PC FROM STACK
EA3B FDDCD3           (       filesys.os):00660                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EA3E EC46             (       filesys.os):00661                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
EA40 AE48             (       filesys.os):00662                 LDX     OOFFSET,U                         ;GET OFFSET
EA42 10AE42           (       filesys.os):00663                 LDY     OFIRST,U                          ;GET FIRST SECT
EA45 3436             (       filesys.os):00664                 PSHS    A,B,X,Y                           ;SAVE IT
EA47 ECC4             (       filesys.os):00665                 LDD     OTYPE,U                           ;GET TYPE&DRIVE
EA49 3406             (       filesys.os):00666                 PSHS    A,B                               ;SAVE IT
EA4B 8102             (       filesys.os):00667                 CMPA    #2                                ;WUZ IT WRITE?
EA4D 262D             (       filesys.os):00668                 BNE     SUSP2                             ;DON'T SAVE
EA4F 8C0000           (       filesys.os):00669                 CMPX    #0                                ;ZERO OFFSET
                      (       filesys.os):00670         
EA52 2728             (       filesys.os):00671                 BEQ     SUSP2                             ;DON'T SAVE
                      (       filesys.os):00672         ;* CHARACTER WRITE, WITH NON-ZERO OFFSET
EA54 A641             (       filesys.os):00673                 LDA     ODRIVE,U                          ;GET DRIVE
EA56 B7DCEB           (       filesys.os):00674                 STA     >SDRIVE                           ;SELECT IT
EA59 EC44             (       filesys.os):00675                 LDD     OSECTOR,U                         ;GET SECTOR
EA5B 1083FFFF         (       filesys.os):00676                 CMPD    #$FFFF                            ;OK TO WRITE?
EA5F 2610             (       filesys.os):00677                 BNE     SUSP1                             ;ITS OK
EA61 BDE7AA           (       filesys.os):00678                 JSR     FRESEC                            ;GRAB A SECTOR
EA64 3406             (       filesys.os):00679                 PSHS    A,B                               ;SAVE ID
EA66 EC46             (       filesys.os):00680                 LDD     OLSTSEC,U                         ;GET LAST
EA68 BDE5DF           (       filesys.os):00681                 JSR     FNDLNK                            ;GET ITS LINK
EA6B 3506             (       filesys.os):00682                 PULS    A,B                               ;RESTORE ID OF FREE
EA6D ED84             (       filesys.os):00683                 STD     ,X                                ;SET IT
EA6F ED44             (       filesys.os):00684                 STD     OSECTOR,U                         ;SET UP NEW SECTOR
EA71                  (       filesys.os):00685         SUSP1
EA71 304A             (       filesys.os):00686                 LEAX    OSIZ,U                            ;SET UP PTR
EA73 BDEB12           (       filesys.os):00687                 JSR     WDISK                             ;OUTPUT SECTOR TO DISK
EA76 B6DCDA           (       filesys.os):00688                 LDA     >SAVDRV                           ;GET DRIVE
EA79 B7DCEB           (       filesys.os):00689                 STA     >SDRIVE                           ;RESET IT
EA7C                  (       filesys.os):00690         SUSP2
EA7C BEDCD6           (       filesys.os):00691                 LDX     >SAVX                             ;RESTORE X
EA7F 10BEDCD8         (       filesys.os):00692                 LDY     >SAVY                             ;RESTORE Y
EA83 F6DCD5           (       filesys.os):00693                 LDB     >SAVB                             ;RESTORE B
EA86 4F               (       filesys.os):00694                 CLRA    ZERO RC
EA87 6E9FDCD3         (       filesys.os):00695                 JMP     [TEMP4]                           ;GOT FOR TI
                      (       filesys.os):00696         ;*
                      (       filesys.os):00697         ;* RESUME FILE OPERATION
                      (       filesys.os):00698         ;*
EA8B                  (       filesys.os):00699         RESUME
EA8B 3506             (       filesys.os):00700                 PULS    A,B                               ;GET PC
EA8D FDDCD3           (       filesys.os):00701                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EA90 3506             (       filesys.os):00702                 PULS    A,B                               ;RESTORE REGS
EA92 EDC4             (       filesys.os):00703                 STD     OTYPE,U                           ;RESTORE TYPE
EA94 F7DCEB           (       filesys.os):00704                 STB     >SDRIVE                           ;SELECT DRIVE
EA97 3536             (       filesys.os):00705                 PULS    A,B,X,Y                           ;RESTORE REST
EA99 AF48             (       filesys.os):00706                 STX     OOFFSET,U                         ;SET OFFSET
EA9B 10AF42           (       filesys.os):00707                 STY     OFIRST,U                          ;SET FIRST
                      (       filesys.os):00708         ;* IF OLSTSEC IS ZERO, NO READ/WRITE TO DISK YET, OSECTOR IS FIRST IN FILE
EA9E ED46             (       filesys.os):00709                 STD     OLSTSEC,U                         ;RESET LAST SECTOR
EAA0 2605             (       filesys.os):00710                 BNE     RESU1                             ;ITS OK
EAA2 10AF44           (       filesys.os):00711                 STY     OSECTOR,U                         ;SET CURRENT SECTOR
EAA5 2005             (       filesys.os):00712                 BRA     RESU2                             ;CONTINUE
                      (       filesys.os):00713         ;* ELSE OSECTOR IS NEXT AFTER OLSTSEC
EAA7                  (       filesys.os):00714         RESU1
EAA7 BDE5DF           (       filesys.os):00715                 JSR     FNDLNK                            ;GET LINK
EAAA ED44             (       filesys.os):00716                 STD     OSECTOR,U                         ;SET UP NEXT SECTOR
                      (       filesys.os):00717         ;* CHECK FOR ACTUAL SECTOR IN MEMORY
EAAC                  (       filesys.os):00718         RESU2
EAAC EC48             (       filesys.os):00719                 LDD     OOFFSET,U                         ;CHAR OPERATIONS?
EAAE 2707             (       filesys.os):00720                 BEQ     RESU3                             ;NO, ALL IS OK
                      (       filesys.os):00721         ;* NON-ZERO OFFSET, SECTOR MUST BE READ INTO RAM
EAB0 EC44             (       filesys.os):00722                 LDD     OSECTOR,U                         ;GET SECTOR
EAB2 304A             (       filesys.os):00723                 LEAX    OSIZ,U                            ;ADVANCE TO BUFFER
EAB4 BDEADF           (       filesys.os):00724                 JSR     RDISK                             ;READ IN SECTOR
EAB7                  (       filesys.os):00725         RESU3
EAB7 B6DCDA           (       filesys.os):00726                 LDA     >SAVDRV                           ;RESTORE DRIVE
EABA B7DCEB           (       filesys.os):00727                 STA     >SDRIVE                           ;RESET IT
EABD 20B2             (       filesys.os):00728                 BRA     SUSP1                             ;RETURN TO CALLER
                      (       filesys.os):00729         ;*
                      (       filesys.os):00730         ;* CALCULATE CYLINDER, SECTOR, AND HEAD FROM ABSOLUTE SECTOR NUMBER
                      (       filesys.os):00731         ;*
EABF                  (       filesys.os):00732         SECTOR
EABF 3416             (       filesys.os):00733                 PSHS    A,B,X                             ;SAVE SECTOR ID
EAC1 1F01             (       filesys.os):00734                 TFR     D,X                               ;SECT ID IN 'X'
EAC3 A643             (       filesys.os):00735                 LDA     NSEC,U                            ;GET SECTORS/TRACK
EAC5 E642             (       filesys.os):00736                 LDB     NHEAD,U                           ;GET # HEADS
EAC7 3D               (       filesys.os):00737                 MUL                                       ;CALCULATE SECTORS/CYLINDER
EAC8 BDF6B6           (       filesys.os):00738                 JSR     DIV16                             ;X=CYLINDER ID, D=SECTOR IN CYLINDER
EACB 6F45             (       filesys.os):00739                 CLR     HEAD,U                            ;ASSUME HEAD 0
EACD                  (       filesys.os):00740         SEC1
EACD E143             (       filesys.os):00741                 CMPB    NSEC,U                            ;WHICH HEAD?
EACF 2506             (       filesys.os):00742                 BLO     SEC2                              ;ASSUMPTION CORRECT
EAD1 E043             (       filesys.os):00743                 SUBB    NSEC,U                            ;CONVERT
EAD3 6C45             (       filesys.os):00744                 INC     HEAD,U                            ;ADVANCE TO NEXT HEAD
EAD5 20F6             (       filesys.os):00745                 BRA     SEC1                              ;TRY AGAIN
EAD7                  (       filesys.os):00746         SEC2
EAD7 E746             (       filesys.os):00747                 STB     SEC,U                             ;INDICATE SECTOR
EAD9 1F10             (       filesys.os):00748                 TFR     X,D                               ;GET CYLINDER ID
EADB E744             (       filesys.os):00749                 STB     CYL,U                             ;SAVE CYLINDER ID
EADD 3596             (       filesys.os):00750                 PULS    A,B,X,PC
                      (       filesys.os):00751         ;*
                      (       filesys.os):00752         ;* READ SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00753         ;*
EADF                  (       filesys.os):00754         RDISK
EADF 3476             (       filesys.os):00755                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EAE1 7FDCEC           (       filesys.os):00756                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EAE4 8D20             (       filesys.os):00757                 BSR     GETCTL                            ;SET UP 'U'
EAE6                  (       filesys.os):00758         RTRY1
EAE6 ECE4             (       filesys.os):00759                 LDD     ,S                                ;GET SECTOR
EAE8 8DD5             (       filesys.os):00760                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EAEA                  (       filesys.os):00761         RTRY2
EAEA AE62             (       filesys.os):00762                 LDX     2,S                               ;RESTORE 'X'
EAEC BDF6E7           (       filesys.os):00763                 JSR     RDSEC                             ;ATTEMPT READ
EAEF 2713             (       filesys.os):00764                 BEQ     RDONE                             ;SUCESS, ITS OK
EAF1 7CDCEC           (       filesys.os):00765                 INC     >ERRCNT                           ;ADVANCE
EAF4 F6DCEC           (       filesys.os):00766                 LDB     >ERRCNT                           ;GET VALUE
EAF7 C105             (       filesys.os):00767                 CMPB    #5                                ;TOO MANY ERRORS?
EAF9 273C             (       filesys.os):00768                 BEQ     HDE                               ;YES, SKIP IT
EAFB C103             (       filesys.os):00769                 CMPB    #3                                ;TIME FOR RE-SEEK?
EAFD 26EB             (       filesys.os):00770                 BNE     RTRY2                             ;NO, DON'T RE-SEEK
EAFF BDF6DD           (       filesys.os):00771                 JSR     HOME                              ;RECALIBRATE
EB02 20E2             (       filesys.os):00772                 BRA     RTRY1                             ;AND RESEEK
EB04                  (       filesys.os):00773         RDONE
EB04 35F6             (       filesys.os):00774                 PULS    A,B,X,Y,U,PC
                      (       filesys.os):00775         ;*
                      (       filesys.os):00776         ;* GET DRIVE(A) CONTROL BLOCK IN 'D' & 'U'
                      (       filesys.os):00777         ;*
EB06                  (       filesys.os):00778         GETCTL
EB06 B6DCEB           (       filesys.os):00779                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
EB09                  (       filesys.os):00780         GETCTL1
EB09 C607             (       filesys.os):00781                 LDB     #CSIZE                            ;SIZE OF EACH BLOCK
EB0B 3D               (       filesys.os):00782                 MUL                                       ;CALCULATE OFFSET
EB0C C3DC50           (       filesys.os):00783                 ADDD    #DCTRL                            ;OFFSET TO DATA AREA
EB0F 1F03             (       filesys.os):00784                 TFR     D,U                               ;SET UP U
EB11 39               (       filesys.os):00785                 RTS
                      (       filesys.os):00786         ;*
                      (       filesys.os):00787         ;* WRITE SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00788         ;*
EB12                  (       filesys.os):00789         WDISK
EB12 3476             (       filesys.os):00790                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EB14 7FDCEC           (       filesys.os):00791                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EB17 8DED             (       filesys.os):00792                 BSR     GETCTL                            ;SET UP 'U'
EB19                  (       filesys.os):00793         WTRY1
EB19 ECE4             (       filesys.os):00794                 LDD     ,S                                ;GET SECTOR
EB1B 8DA2             (       filesys.os):00795                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EB1D                  (       filesys.os):00796         WTRY2
EB1D AE62             (       filesys.os):00797                 LDX     2,S                               ;RESTORE 'X'
EB1F BDF6EB           (       filesys.os):00798                 JSR     WRSEC                             ;ATTEMPT WRITE
EB22 27E0             (       filesys.os):00799                 BEQ     RDONE                             ;SUCCESS, ITS OK
EB24 7CDCEC           (       filesys.os):00800                 INC     >ERRCNT                           ;ADVANCE
EB27 F6DCEC           (       filesys.os):00801                 LDB     >ERRCNT                           ;GET VALUE
EB2A C105             (       filesys.os):00802                 CMPB    #5                                ;TOO MANY ERRORS?
EB2C 2709             (       filesys.os):00803                 BEQ     HDE                               ;YES, SKIP IT
EB2E C103             (       filesys.os):00804                 CMPB    #3                                ;TIME FOR RE-SEEK
EB30 26EB             (       filesys.os):00805                 BNE     WTRY2                             ;NO, DON'T RE-SEEK
EB32 BDF6DD           (       filesys.os):00806                 JSR     HOME                              ;RECALIBRATE
EB35 20E2             (       filesys.os):00807                 BRA     WTRY1                             ;AND RESEEK
                      (       filesys.os):00808         ;* REPORT DISK ERROR
EB37                  (       filesys.os):00809         HDE
EB37 B7DCCB           (       filesys.os):00810                 STA     >TEMP                             ;SAVE ERROR CODE
EB3A 3576             (       filesys.os):00811                 PULS    A,B,X,Y,U                         ;RESTORE REGS CUZ 'U' NOT SAVED
EB3C 10B3DCDF         (       filesys.os):00812                 CMPD    >WRKSEC                           ;WAS IT WORK SECTOR?
EB40 2612             (       filesys.os):00813                 BNE     HDE1                              ;NO, ITS NOT
EB42 3402             (       filesys.os):00814                 PSHS    A                                 ;SAVE A
EB44 B6DCEB           (       filesys.os):00815                 LDA     >SDRIVE                           ;GET CURRENT DRIVE
EB47 B1DCDE           (       filesys.os):00816                 CMPA    >WRKDRV                           ;ON WORK DRIVE?
EB4A 3502             (       filesys.os):00817                 PULS    A                                 ;RESTORE A
EB4C 2606             (       filesys.os):00818                 BNE     HDE1                              ;NOT WORK DRIVE
EB4E BDE625           (       filesys.os):00819                 JSR     PURGE1                            ;INSURE NO WORK SECTOR IN CORE
EB51 7FDCDD           (       filesys.os):00820                 CLR     >WRKCHG                           ;INSURE NO UPDATE RECORDED
EB54                  (       filesys.os):00821         HDE1
EB54 BDE54E           (       filesys.os):00822                 JSR     WRLIN                             ;OUTPUT STRING
EB57 4572726F72206163 (       filesys.os):00823                 FCC     'Error accessing block '
     63657373696E6720
     626C6F636B20
EB6D 00               (       filesys.os):00824                 FCB     $00
EB6E BDE47E           (       filesys.os):00825                 JSR     WRDEC                             ;DISPLAY BLOCK
EB71 BDE54E           (       filesys.os):00826                 JSR     WRLIN                             ;OUTPUT STRING
EB74 206F6E2064726976 (       filesys.os):00827                 FCC     ' on drive: '
     653A20
EB7F 00               (       filesys.os):00828                 FCB     $00
EB80 B6DCEB           (       filesys.os):00829                 LDA     >SDRIVE                           ;GET DRIVE ID
EB83 8B41             (       filesys.os):00830                 ADDA    #'A'                              ;OFFSET
EB85 BDE59A           (       filesys.os):00831                 JSR     PUTCHR
EB88 BDE588           (       filesys.os):00832                 JSR     LFCR                              ;NEW LINE
EB8B 8EEBA8           (       filesys.os):00833                 LDX     #DETAB                            ;PT TO TABLE
EB8E                  (       filesys.os):00834         HDE2
EB8E 7ADCCB           (       filesys.os):00835                 DEC     >TEMP                             ;REDUCE ERROR COUNT
EB91 270A             (       filesys.os):00836                 BEQ     HDE4                              ;THIS IS IT
EB93                  (       filesys.os):00837         HDE3
EB93 A680             (       filesys.os):00838                 LDA     ,X+                               ;GET CHAR
EB95 26FC             (       filesys.os):00839                 BNE     HDE3                              ;KEEP LOOKING
EB97 A684             (       filesys.os):00840                 LDA     ,X                                ;MORE?
EB99 26F3             (       filesys.os):00841                 BNE     HDE2                              ;NO, ERROR
EB9B 3001             (       filesys.os):00842                 LEAX    1,X                               ;SKIP MARKER
EB9D                  (       filesys.os):00843         HDE4
EB9D BDE574           (       filesys.os):00844                 JSR     WRSTR                             ;OUTPUT STRING
EBA0 BDE588           (       filesys.os):00845                 JSR     LFCR                              ;NEW LINE
EBA3 8609             (       filesys.os):00846                 LDA     #RCDSK                            ;INDICATE DISK ERROR
EBA5 7EE2F8           (       filesys.os):00847                 JMP     ERRRET                            ;RETURN
                      (       filesys.os):00848         ;* DISK ERROR MESSAGES
EBA8                  (       filesys.os):00849         DETAB
EBA8 4469736B20666F72 (       filesys.os):00850                 FCC     'Disk format error'
     6D6174206572726F
     72
EBB9 00               (       filesys.os):00851                 FCB     $00
EBBA 4261642073656374 (       filesys.os):00852                 FCC     'Bad sector'
     6F72
EBC4 00               (       filesys.os):00853                 FCB     $00
EBC5 536563746F72206E (       filesys.os):00854                 FCC     'Sector not found'
     6F7420666F756E64
EBD5 00               (       filesys.os):00855                 FCB     $00
EBD6 4469736B20777269 (       filesys.os):00856                 FCC     'Disk write protected'
     74652070726F7465
     63746564
EBEA 00               (       filesys.os):00857                 FCB     $00
EBEB 00               (       filesys.os):00858                 FCB     0                                 ;END OF TABLE
EBEC 4469736B20737973 (       filesys.os):00859                 FCC     'Disk system error'
     74656D206572726F
     72
EBFD 00               (       filesys.os):00860                 FCB     $00
                      (        cubix.asm):01187                 INCLUDE command.os                        ;INTERNAL COMMANDS
                      (       command.os):00001         ;*
                      (       command.os):00002         ;* CUBIX Internal (built in) command handlers
                      (       command.os):00003         ;*
                      (       command.os):00004         ;* FORMAT COMMAND
                      (       command.os):00005         ;*
EBFE                  (       command.os):00006         INIT
EBFE BDE623           (       command.os):00007                 JSR     PURGE                             ;INSURE NO DISK I/O IN PROG
EC01 BDE3FF           (       command.os):00008                 JSR     GETDRV                            ;GET DRIVE ID
EC04 B7DCEB           (       command.os):00009                 STA     >SDRIVE                           ;SELECT IT
EC07 BDEB06           (       command.os):00010                 JSR     GETCTL                            ;PT 'U' TO CTRL BLOCK
EC0A CC0203           (       command.os):00011                 LDD     #$0203                            ;DEFAULT INTERLEAVE & ALLOCATION
EC0D FDDCD3           (       command.os):00012                 STD     >TEMP4                            ;SAVE IT
                      (       command.os):00013         ;* GET FORMAT OPERANDS
EC10                  (       command.os):00014         INI00
EC10 BDE4DC           (       command.os):00015                 JSR     SKIP                              ;ANY MORE OPERANDS?
EC13 2728             (       command.os):00016                 BEQ     INI1                              ;NO, THTS ALL
EC15 8EF408           (       command.os):00017                 LDX     #INITAB                           ;POINT TO TABLE
EC18 BDF0C3           (       command.os):00018                 JSR     TLOOKE                            ;GET DATA
EC1B 3404             (       command.os):00019                 PSHS    B                                 ;SAVE ID
EC1D BDE411           (       command.os):00020                 JSR     GETNUM                            ;GET VALUE
EC20 3502             (       command.os):00021                 PULS    A                                 ;RESTORE A
EC22 4D               (       command.os):00022                 TSTA    INTERLEAVE?
EC23 2605             (       command.os):00023                 BNE     INI01                             ;NO
EC25 F7DCD3           (       command.os):00024                 STB     >TEMP4                            ;SAVE INTERLEAVE
EC28 20E6             (       command.os):00025                 BRA     INI00                             ;TRY FOR NEXT
EC2A                  (       command.os):00026         INI01
EC2A 4A               (       command.os):00027                 DECA    DIRECTORY?
EC2B 2605             (       command.os):00028                 BNE     INI02                             ;NO, USE STANDARD OPTIONS
EC2D F7DCD4           (       command.os):00029                 STB     >TEMP4+1                          ;SET DIRECTORY ALLOCATION
EC30 20DE             (       command.os):00030                 BRA     INI00                             ;TRY FOR NEXT
EC32                  (       command.os):00031         INI02
EC32 4A               (       command.os):00032                 DECA    CONVERT
EC33 8103             (       command.os):00033                 CMPA    #3                                ;IN RANGE?
EC35 1022F67F         (       command.os):00034                 LBHI    BADOPR                            ;NO, REPORT ERROR
EC39 E7C6             (       command.os):00035                 STB     A,U                               ;SET UP DRIVE
EC3B 20D3             (       command.os):00036                 BRA     INI00                             ;TRY FOR NEXT
                      (       command.os):00037         ;* DISPLAY FORMAT
EC3D                  (       command.os):00038         INI1
EC3D BDE54E           (       command.os):00039                 JSR     WRLIN
EC40 466F726D61747469 (       command.os):00040                 FCC     'Formatting '
     6E6720
EC4B 00               (       command.os):00041                 FCB     $00
EC4C B6DCEB           (       command.os):00042                 LDA     >SDRIVE
EC4F BDF210           (       command.os):00043                 JSR     SHODRV                            ;SHOW THE DISK
EC52 8EF408           (       command.os):00044                 LDX     #INITAB                           ;POINT TO TABLE
EC55 4F               (       command.os):00045                 CLRA                                      ;DISPLAY INTERLEAVE
EC56 F6DCD3           (       command.os):00046                 LDB     >TEMP4                            ;GET INTERLEAVE FACTOR
EC59 BDF24F           (       command.os):00047                 JSR     SHODRB                            ;DISPLAY IT
EC5C 8601             (       command.os):00048                 LDA     #1                                ;DISPLAY DIRECTORY EXTENSION
EC5E F6DCD4           (       command.os):00049                 LDB     >TEMP4+1                          ;GET DIRECTORY EXTENSION
EC61 BDF249           (       command.os):00050                 JSR     SHODRA                            ;DISPLAY IT
EC64 BDE54E           (       command.os):00051                 JSR     WRLIN                             ;MESSAGE
EC67 0A0D             (       command.os):00052                 FCB     $0A,$0D                           ;NEW LINE
EC69 4F6B3F20         (       command.os):00053                 FCC     'Ok? '
EC6D 00               (       command.os):00054                 FCB     $00
EC6E BDE5DA           (       command.os):00055                 JSR     GETCHR
EC71 BDE59A           (       command.os):00056                 JSR     PUTCHR                            ;ECHO
EC74 84DF             (       command.os):00057                 ANDA    #$DF                              ;GET IT
EC76 8159             (       command.os):00058                 CMPA    #'Y'
EC78 1026F90C         (       command.os):00059                 LBNE    LFCR
EC7C BDE588           (       command.os):00060                 JSR     LFCR                              ;NEW LINE
                      (       command.os):00061         ;* FORMAT PHYSICAL DISK
EC7F B6DCD3           (       command.os):00062                 LDA     >TEMP4                            ;GET INTERLEAVE FACTOR
EC82 BDF6D9           (       command.os):00063                 JSR     FORMAT                            ;FORMAT THE DISK
EC85 B6DCD4           (       command.os):00064                 LDA     >TEMP4+1                          ;GET DIRECTORY ALLOC
EC88 B7DCD3           (       command.os):00065                 STA     >TEMP4                            ;LOCAL COPY OF DIR ALLOC
                      (       command.os):00066         ;* SET UP DIRECTORY & LINK TABLE ON DISK
EC8B 8EDE00           (       command.os):00067                 LDX     #WRKSPC                           ;POINT TO IT
EC8E                  (       command.os):00068         INI2
EC8E 6F80             (       command.os):00069                 CLR     ,X+                               ;CLEAR ONE
EC90 8CE000           (       command.os):00070                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
EC93 25F9             (       command.os):00071                 BLO     INI2                              ;NO, KEEP CLEARING
                      (       command.os):00072         ;* WRITE BASE DIRECTORY SECTOR
EC95 8EDE00           (       command.os):00073                 LDX     #WRKSPC                           ;PT BACK TO IT
EC98 CC0000           (       command.os):00074                 LDD     #DIRSEC                           ;DIRECTORY SECTOR
EC9B BDEB12           (       command.os):00075                 JSR     WDISK                             ;WRITE DIRECTORY (NO FILES)
                      (       command.os):00076         ;* WRITE NON-BASE LINK SECTORS
EC9E BDE712           (       command.os):00077                 JSR     CURSIZ                            ;GET SIZE OF CURRENT DRIVE
ECA1 830001           (       command.os):00078                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
ECA4 1F89             (       command.os):00079                 TFR     A,B                               ;COPY A&B = D/256(ENTRIES/LINKSEC)
ECA6 FDDCD1           (       command.os):00080                 STD     >TEMP3                            ;SAVE FOR LATER
ECA9 CC0002           (       command.os):00081                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
ECAC                  (       command.os):00082         INI3
ECAC 7ADCD2           (       command.os):00083                 DEC     >TEMP3+1                          ;REDUCE COUNT
ECAF 2B08             (       command.os):00084                 BMI     INI4                              ;END
ECB1 BDEB12           (       command.os):00085                 JSR     WDISK                             ;WRITE IT
ECB4 C30001           (       command.os):00086                 ADDD    #1                                ;NEXT SECTOR
ECB7 20F3             (       command.os):00087                 BRA     INI3                              ;KEEP GOING
                      (       command.os):00088         ;* WRITE NON-BASE DIRECTORY SECTORS
ECB9                  (       command.os):00089         INI4
ECB9 7ADCD3           (       command.os):00090                 DEC     >TEMP4                            ;BACKUP
ECBC 2B08             (       command.os):00091                 BMI     INI5                              ;THATS ALL
ECBE BDEB12           (       command.os):00092                 JSR     WDISK                             ;WRITE IT
ECC1 C30001           (       command.os):00093                 ADDD    #1                                ;NEXT ONE
ECC4 20F3             (       command.os):00094                 BRA     INI4                              ;DO EM ALL
                      (       command.os):00095         ;* WRITE BASE LINK SECTOR
ECC6                  (       command.os):00096         INI5
ECC6 CCFFFF           (       command.os):00097                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECC9 ED84             (       command.os):00098                 STD     DIRSEC*2,X                        ;SET DIRECTORY FREE
ECCB 3002             (       command.os):00099                 LEAX    LNKSEC*2,X                        ;OFFSET TO IT
ECCD CC0002           (       command.os):00100                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
ECD0                  (       command.os):00101         INI6
ECD0 7ADCD1           (       command.os):00102                 DEC     >TEMP3                            ;REDUCE COUNT
ECD3 2B07             (       command.os):00103                 BMI     INI7                              ;END
ECD5 ED81             (       command.os):00104                 STD     ,X++                              ;WRITE IT OUT
ECD7 C30001           (       command.os):00105                 ADDD    #1                                ;ADVANCE
ECDA 20F4             (       command.os):00106                 BRA     INI6                              ;DO EM ALL
ECDC                  (       command.os):00107         INI7
ECDC 3406             (       command.os):00108                 PSHS    A,B                               ;SAVE SECTOR ID
ECDE 7DDCD4           (       command.os):00109                 TST     >TEMP4+1                          ;ANY ADDITIONAL DIR?
ECE1 2703             (       command.os):00110                 BEQ     INI8                              ;NO
ECE3 FDDE00           (       command.os):00111                 STD     >2*DIRSEC+WRKSPC                  ;SET IT
ECE6                  (       command.os):00112         INI8
ECE6 CCFFFF           (       command.os):00113                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECE9 ED81             (       command.os):00114                 STD     ,X++                              ;CLOSE OFF LINKS
ECEB 3506             (       command.os):00115                 PULS    A,B                               ;RESTORE SECTOR ID
ECED                  (       command.os):00116         INI9
ECED 7ADCD4           (       command.os):00117                 DEC     >TEMP4+1                          ;REDUCE COUNT
ECF0 2B07             (       command.os):00118                 BMI     INI10                             ;EXIT
ECF2 C30001           (       command.os):00119                 ADDD    #1                                ;NEXT SECTOR
ECF5 ED81             (       command.os):00120                 STD     ,X++                              ;SET LINK FOR DIRECTORY
ECF7 20F4             (       command.os):00121                 BRA     INI9                              ;DO EM ALL
ECF9                  (       command.os):00122         INI10
ECF9 CCFFFF           (       command.os):00123                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECFC ED1E             (       command.os):00124                 STD     -2,X                              ;CLOSE OFF DIRECTORY
ECFE 8EDE00           (       command.os):00125                 LDX     #WRKSPC                           ;RESET
ED01 CC0001           (       command.os):00126                 LDD     #LNKSEC                           ;PT TO IT
ED04 7EEB12           (       command.os):00127                 JMP     WDISK                             ;WRITE TO DISK
                      (       command.os):00128         ;*
                      (       command.os):00129         ;* READ DISK COMMAND
                      (       command.os):00130         ;*
ED07                  (       command.os):00131         CREAD
ED07 BDE3FF           (       command.os):00132                 JSR     GETDRV
ED0A B7DCEB           (       command.os):00133                 STA     >SDRIVE
ED0D BDE411           (       command.os):00134                 JSR     GETNUM                            ;GET SECTOR ID
ED10 3410             (       command.os):00135                 PSHS    X                                 ;SAVE
ED12 BDE41C           (       command.os):00136                 JSR     GETHEX                            ;GET MEMORY ADDRESS
ED15 3410             (       command.os):00137                 PSHS    X                                 ;SAVE
ED17 8E0001           (       command.os):00138                 LDX     #1                                ;DEFAULT TO ONE
ED1A BDE4DC           (       command.os):00139                 JSR     SKIP                              ;ADVANCE
ED1D 2703             (       command.os):00140                 BEQ     CRD1                              ;NO MORE
ED1F BDE411           (       command.os):00141                 JSR     GETNUM                            ;GET # SECTORS
ED22                  (       command.os):00142         CRD1
ED22 1F12             (       command.os):00143                 TFR     X,Y                               ;SET UP COUNTER
ED24 3510             (       command.os):00144                 PULS    X                                 ;RESTORE MEM ADDR
ED26 3506             (       command.os):00145                 PULS    A,B                               ;RESTORE SECTOR ID
ED28                  (       command.os):00146         CRD2
ED28 BDEADF           (       command.os):00147                 JSR     RDISK                             ;READ IT
ED2B 30890200         (       command.os):00148                 LEAX    512,X                             ;NEXT LOCATION
ED2F C30001           (       command.os):00149                 ADDD    #1                                ;NEXT SECTOR
ED32 313F             (       command.os):00150                 LEAY    -1,Y                              ;REDUCE COUNT
ED34 26F2             (       command.os):00151                 BNE     CRD2
ED36 39               (       command.os):00152                 RTS
                      (       command.os):00153         ;*
                      (       command.os):00154         ;* WRITE DISK COMMAND
                      (       command.os):00155         ;*
ED37                  (       command.os):00156         CWRITE
ED37 BDE3FF           (       command.os):00157                 JSR     GETDRV
ED3A B7DCEB           (       command.os):00158                 STA     >SDRIVE
ED3D BDE411           (       command.os):00159                 JSR     GETNUM                            ;GET SECTOR ID
ED40 3410             (       command.os):00160                 PSHS    X                                 ;SAVE
ED42 BDE41C           (       command.os):00161                 JSR     GETHEX                            ;GET MEMORY ADDRESS
ED45 3410             (       command.os):00162                 PSHS    X                                 ;SAVE
ED47 8E0001           (       command.os):00163                 LDX     #1                                ;DEFAULT TO ONE
ED4A BDE4DC           (       command.os):00164                 JSR     SKIP                              ;ADVANCE
ED4D 2703             (       command.os):00165                 BEQ     CWR1                              ;NO MORE
ED4F BDE411           (       command.os):00166                 JSR     GETNUM                            ;GET # SECTORS
ED52                  (       command.os):00167         CWR1
ED52 1F12             (       command.os):00168                 TFR     X,Y                               ;SET UP COUNTER
ED54 3510             (       command.os):00169                 PULS    X                                 ;RESTORE MEM ADDR
ED56 3506             (       command.os):00170                 PULS    A,B                               ;RESTORE SECTOR ID
ED58                  (       command.os):00171         CWR2
ED58 BDEB12           (       command.os):00172                 JSR     WDISK                             ;WRITE IT
ED5B 30890200         (       command.os):00173                 LEAX    512,X                             ;NEXT LOCATION
ED5F C30001           (       command.os):00174                 ADDD    #1                                ;NEXT SECTOR
ED62 313F             (       command.os):00175                 LEAY    -1,Y                              ;REDUCE COUNT
ED64 26F2             (       command.os):00176                 BNE     CWR2
ED66 39               (       command.os):00177                 RTS
                      (       command.os):00178         ;*
                      (       command.os):00179         ;* 'FILES' COMMAND, DISPLAY DISK DIRECTORY
                      (       command.os):00180         ;*
ED67                  (       command.os):00181         FILES
ED67 8EDCB8           (       command.os):00182                 LDX     #PREFIX                           ;POINT TO FILENAME
ED6A C613             (       command.os):00183                 LDB     #19                               ;CLEAR 19 CHARS
ED6C                  (       command.os):00184         FIL1
ED6C 6F80             (       command.os):00185                 CLR     ,X+
ED6E 5A               (       command.os):00186                 DECB
ED6F 26FB             (       command.os):00187                 BNE     FIL1
ED71 862A             (       command.os):00188                 LDA     #'*'                              ;WILDCARD
ED73 B7DCC0           (       command.os):00189                 STA     >PREFIX+8
ED76 B7DCC8           (       command.os):00190                 STA     >PREFIX+16
ED79 3420             (       command.os):00191                 PSHS    Y                                 ;SAVE CMD PTR
ED7B BDE3B0           (       command.os):00192                 JSR     GETDIR                            ;GET DIRECTORY NAME
ED7E BDE4E9           (       command.os):00193                 JSR     TSTERM                            ;ANY MORE?
ED81 3520             (       command.os):00194                 PULS    Y                                 ;RESTORE Y
ED83 2703             (       command.os):00195                 BEQ     FIL2                              ;NO, DISPAY
ED85 BDE377           (       command.os):00196                 JSR     GETNAM                            ;GET FULL FILE PATTERN
ED88                  (       command.os):00197         FIL2
ED88 7EE6B6           (       command.os):00198                 JMP     DISDIR                            ;OUTPUT IT
                      (       command.os):00199         ;*
                      (       command.os):00200         ;* 'CREATE' COMMAND, CREATE A FILE
                      (       command.os):00201         ;*
ED8B                  (       command.os):00202         CREFIL
ED8B FCE002           (       command.os):00203                 LDD     >MBASE                            ;DEFAULT LOAD ADDRESS
ED8E FDDCD3           (       command.os):00204                 STD     >TEMP4                            ;SAVE IT
ED91 BDE370           (       command.os):00205                 JSR     GETVAL                            ;GET FILENAME
ED94 BDE4DC           (       command.os):00206                 JSR     SKIP                              ;MORE OPERANDS?
ED97 2706             (       command.os):00207                 BEQ     CREF1                             ;NO, SKIP IT
ED99 BDE41C           (       command.os):00208                 JSR     GETHEX                            ;GET VALUE
ED9C BFDCD3           (       command.os):00209                 STX     >TEMP4                            ;SAVE IT
ED9F                  (       command.os):00210         CREF1
ED9F 7EE724           (       command.os):00211                 JMP     CREATE                            ;MAKE THE FILE
                      (       command.os):00212         ;*
                      (       command.os):00213         ;* 'DELETE' COMMAND
                      (       command.os):00214         ;*
EDA2                  (       command.os):00215         DELFIL
EDA2 BDE377           (       command.os):00216                 JSR     GETNAM                            ;GET FILENAME
EDA5                  (       command.os):00217         DELETE
EDA5 BDE659           (       command.os):00218                 JSR     LOCERR                            ;LOOK IT UP
EDA8 BDE35C           (       command.os):00219                 JSR     VALID                             ;VALID AS A SINGLE?
EDAB 262C             (       command.os):00220                 BNE     MULDEL                            ;NO.
EDAD A68817           (       command.os):00221                 LDA     DATTR,X                           ;GET ATTRIBUTES
EDB0 8510             (       command.os):00222                 BITA    #DPERM                            ;CAN WE DELETE
EDB2 1027FAF7         (       command.os):00223                 LBEQ    PROERR                            ;NO, REPORT ERROR
EDB6 6F84             (       command.os):00224                 CLR     ,X                                ;INDICATE THIS ENTRY FREE
EDB8 BDE7A1           (       command.os):00225                 JSR     CHGWRK                            ;MARK IT AS CHANGED
EDBB EC8813           (       command.os):00226                 LDD     DDADR,X                           ;GET DISK ADDRESS
                      (       command.os):00227         ;* RELEASE ALL CAHINED SECTORS
EDBE                  (       command.os):00228         UNCHAIN
EDBE BDE5DF           (       command.os):00229                 JSR     FNDLNK                            ;LOCATE ITS LINK
EDC1 270F             (       command.os):00230                 BEQ     UNC1                              ;LAST ONE
EDC3 10830000         (       command.os):00231                 CMPD    #0                                ;DID WE GET LOOSE SOMEHOW
EDC7 2709             (       command.os):00232                 BEQ     UNC1                              ;STOP
EDC9 6F84             (       command.os):00233                 CLR     ,X                                ;ZERO THE ENTRY...
EDCB 6F01             (       command.os):00234                 CLR     1,X                               ;MAKEING IT FREE
EDCD BDE7A1           (       command.os):00235                 JSR     CHGWRK                            ;INDICATE WE CHANGED
EDD0 20EC             (       command.os):00236                 BRA     UNCHAIN                           ;CONTINUE
EDD2                  (       command.os):00237         UNC1
EDD2 6F84             (       command.os):00238                 CLR     ,X
EDD4 6F01             (       command.os):00239                 CLR     1,X
EDD6 7EE7A1           (       command.os):00240                 JMP     CHGWRK                            ;END OF DELETE
                      (       command.os):00241         ;* FILENAME CONTAINED WILDCARDS, PROMPT FOR EACH FILE
EDD9                  (       command.os):00242         MULDEL
EDD9 CC0000           (       command.os):00243                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
EDDC                  (       command.os):00244         MULD1
EDDC BDE5FC           (       command.os):00245                 JSR     RDWRK                             ;READ WORK SECTOR
EDDF                  (       command.os):00246         MULD2
EDDF BDE323           (       command.os):00247                 JSR     COMNAM                            ;IS THIS ONE?
EDE2 2654             (       command.os):00248                 BNE     MULD3                             ;NO
EDE4 BDE6EA           (       command.os):00249                 JSR     SHONAM                            ;DISPLAY
EDE7 A68817           (       command.os):00250                 LDA     DATTR,X                           ;GET ATTRIBUTES
EDEA 8510             (       command.os):00251                 BITA    #DPERM                            ;CAN WE DELETE
EDEC 2610             (       command.os):00252                 BNE     MULD5                             ;YES WE CAN
EDEE BDE57E           (       command.os):00253                 JSR     WRMSG                             ;OUTPUT MESSAGE
EDF1 2050726F74656374 (       command.os):00254                 FCC     ' Protected'
     6564
EDFB 00               (       command.os):00255                 FCB     $00
EDFC 203A             (       command.os):00256                 BRA     MULD3
EDFE                  (       command.os):00257         MULD5
EDFE BDE54E           (       command.os):00258                 JSR     WRLIN                             ;OUTPUT MESSAGE
EE01 2028592F4E2F5129 (       command.os):00259                 FCC     ' (Y/N/Q)?'
     3F
EE0A 00               (       command.os):00260                 FCB     $00
EE0B BDE5DA           (       command.os):00261                 JSR     GETCHR                            ;GET CHAR
EE0E BDE59A           (       command.os):00262                 JSR     PUTCHR                            ;ECHO
EE11 BDE588           (       command.os):00263                 JSR     LFCR                              ;NEW LINE
EE14 84DF             (       command.os):00264                 ANDA    #$DF                              ;CONVERT TO UPPER
EE16 8151             (       command.os):00265                 CMPA    #'Q'                              ;QUIT?
EE18 272E             (       command.os):00266                 BEQ     MULD4
EE1A 8159             (       command.os):00267                 CMPA    #'Y'                              ;DO WE KILL?
EE1C 261A             (       command.os):00268                 BNE     MULD3                             ;NO
EE1E 6F84             (       command.os):00269                 CLR     ,X                                ;ZAP IT
EE20 BDE7A1           (       command.os):00270                 JSR     CHGWRK                            ;INDICATE CHANGED
EE23 3414             (       command.os):00271                 PSHS    B,X                               ;SAVE REGS
EE25 FCDCDF           (       command.os):00272                 LDD     >WRKSEC                           ;GET WORK SECTOR
EE28 FDDCCD           (       command.os):00273                 STD     >TEMP1                            ;SAVE
EE2B EC8813           (       command.os):00274                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE2E 8D8E             (       command.os):00275                 BSR     UNCHAIN                           ;RELEASE
EE30 FCDCCD           (       command.os):00276                 LDD     >TEMP1                            ;GET SECTOR BACK
EE33 BDE5FC           (       command.os):00277                 JSR     RDWRK                             ;RE-READ
EE36 3514             (       command.os):00278                 PULS    B,X
EE38                  (       command.os):00279         MULD3
EE38 308820           (       command.os):00280                 LEAX    32,X                              ;ADVANCE TO NEXT
EE3B 8CE000           (       command.os):00281                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
EE3E 259F             (       command.os):00282                 BLO     MULD2                             ;NO
EE40 FCDCDF           (       command.os):00283                 LDD     >WRKSEC                           ;GET SECTOR ID
EE43 BDE5DF           (       command.os):00284                 JSR     FNDLNK                            ;LOOK FOR LINK
EE46 2694             (       command.os):00285                 BNE     MULD1
EE48                  (       command.os):00286         MULD4
EE48 39               (       command.os):00287                 RTS
                      (       command.os):00288         ;*
                      (       command.os):00289         ;* BINARY LOAD A FILE AT MEMORY(X)
                      (       command.os):00290         ;*
EE49                  (       command.os):00291         BLOAD
EE49 3410             (       command.os):00292                 PSHS    X                                 ;SAVE ADDRESS
EE4B BDE8A3           (       command.os):00293                 JSR     LOCRED                            ;LOOKUP FILE
EE4E EC8813           (       command.os):00294                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE51 3510             (       command.os):00295                 PULS    X                                 ;RESTORE MEMORY ADDRESS
EE53 2018             (       command.os):00296                 BRA     LCHAIN                            ;LOAD IN THE CHAIN
                      (       command.os):00297         ;*
                      (       command.os):00298         ;* 'LOAD' COMMAND, LOADS A FILE INTO MEMORY
                      (       command.os):00299         ;*
EE55                  (       command.os):00300         LODFIL
EE55 BDE370           (       command.os):00301                 JSR     GETVAL                            ;GET FILENAME
EE58 BDE8A3           (       command.os):00302                 JSR     LOCRED                            ;INSURE IT EXISTS
EE5B EC8813           (       command.os):00303                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE5E 3406             (       command.os):00304                 PSHS    A,B                               ;SAVE
EE60 AE8815           (       command.os):00305                 LDX     DRADR,X                           ;GET RUN ADDRESS
EE63 BDE4DC           (       command.os):00306                 JSR     SKIP                              ;ANY MORE OPERANDS
EE66 2703             (       command.os):00307                 BEQ     LODF1                             ;NO, CONTINUE
EE68 BDE41C           (       command.os):00308                 JSR     GETHEX                            ;GET ADDRESS
EE6B                  (       command.os):00309         LODF1
EE6B 3506             (       command.os):00310                 PULS    A,B                               ;RESTORE DISK ADDR
                      (       command.os):00311         ;* LOAD A CHAIN OF SECTORS
EE6D                  (       command.os):00312         LCHAIN
EE6D BDEADF           (       command.os):00313                 JSR     RDISK                             ;READ DISK
EE70 30890200         (       command.os):00314                 LEAX    512,X                             ;MOVE TO NEXT ADDRESS
EE74 3410             (       command.os):00315                 PSHS    X                                 ;SAVE PTR
EE76 BDE5DF           (       command.os):00316                 JSR     FNDLNK                            ;LOOKUP LINK
EE79 3510             (       command.os):00317                 PULS    X                                 ;RESTORE
EE7B 26F0             (       command.os):00318                 BNE     LCHAIN                            ;KEEP GOING
EE7D                  (       command.os):00319         OKRET
EE7D 39               (       command.os):00320                 RTS
                      (       command.os):00321         ;*
                      (       command.os):00322         ;* BINARY SAVE OF A FILE FROM MEMORY(X) FOR # SECTORS(D)
                      (       command.os):00323         ;*
EE7E                  (       command.os):00324         BSAVE
EE7E BFDCD3           (       command.os):00325                 STX     >TEMP4                            ;SET LOAD ADDRESS
EE81 FDDCD1           (       command.os):00326                 STD     >TEMP3                            ;SAVE # SECTORS
EE84 200F             (       command.os):00327                 BRA     SAVF1                             ;PERFORM SAVE
                      (       command.os):00328         ;*
                      (       command.os):00329         ;* 'SAVE' COMMAND, SAVES A FILE AS A BLOCK
                      (       command.os):00330         ;*
EE86                  (       command.os):00331         SAVFIL
EE86 BDE370           (       command.os):00332                 JSR     GETVAL                            ;GET FILENAME
EE89 BDE41C           (       command.os):00333                 JSR     GETHEX                            ;GET START ADDRESS
EE8C BFDCD3           (       command.os):00334                 STX     >TEMP4                            ;SET UP DEFAULT LOAD-ADR
EE8F BDE411           (       command.os):00335                 JSR     GETNUM                            ;GET # SECTORS
EE92 BFDCD1           (       command.os):00336                 STX     >TEMP3                            ;SAVE LENGTH
EE95                  (       command.os):00337         SAVF1
EE95 7DDCD2           (       command.os):00338                 TST     >TEMP3+1                          ;TEST FOR INVALID LENMGTH
EE98 1027F41C         (       command.os):00339                 LBEQ    BADOPR                            ;INVALID
EE9C BDE8D1           (       command.os):00340                 JSR     LOCWRI                            ;OPEN FILE, WE WILL WRITE IT
EE9F EC8813           (       command.os):00341                 LDD     DDADR,X                           ;GET DISK ADDRESS
EEA2                  (       command.os):00342         SAVF2
EEA2 FDDCCF           (       command.os):00343                 STD     >TEMP2                            ;SAVE SECTOR ID
EEA5 BEDCD3           (       command.os):00344                 LDX     >TEMP4                            ;GET LOAD ADDRESS
EEA8 BDEB12           (       command.os):00345                 JSR     WDISK                             ;WRITE THE SECTOR
                      (       command.os):00346         
EEAB 30890200         (       command.os):00347                 LEAX    512,X                             ;ADVANCE 1 BLOCK
EEAF BFDCD3           (       command.os):00348                 STX     >TEMP4                            ;NEW LOAD ADDRESS
EEB2 FCDCCF           (       command.os):00349                 LDD     >TEMP2                            ;GET OPEN SECTOR
EEB5 7ADCD2           (       command.os):00350                 DEC     >TEMP3+1                          ;REDUCE NUMBER
EEB8 2719             (       command.os):00351                 BEQ     SAVF3                             ;QUIT IF DONE
EEBA BDE5DF           (       command.os):00352                 JSR     FNDLNK                            ;LOOK UP ITS LINK
EEBD 26E3             (       command.os):00353                 BNE     SAVF2                             ;THERE IS SPACE, ITS OK
EEBF BDE7AA           (       command.os):00354                 JSR     FRESEC                            ;GET A FREE SECTOR
EEC2 3406             (       command.os):00355                 PSHS    A,B                               ;SAVE ID
EEC4 FCDCCF           (       command.os):00356                 LDD     >TEMP2                            ;GET OPEN SECTOR
EEC7 BDE5DF           (       command.os):00357                 JSR     FNDLNK                            ;GET LINK BACK
EECA 3506             (       command.os):00358                 PULS    A,B                               ;GET NEW SECT BACK
EECC ED84             (       command.os):00359                 STD     ,X                                ;SET LINK CHAIN
EECE BDE7A1           (       command.os):00360                 JSR     CHGWRK                            ;INDICATE CHANGED
EED1 20CF             (       command.os):00361                 BRA     SAVF2                             ;WRITE NEXT SECTOR
EED3                  (       command.os):00362         SAVF3
EED3 BDE5DF           (       command.os):00363                 JSR     FNDLNK                            ;LOK UP LINK
EED6 27A5             (       command.os):00364                 BEQ     OKRET                             ;NO FURTHER LINKS
EED8 3406             (       command.os):00365                 PSHS    A,B                               ;SAVE REGS
EEDA CCFFFF           (       command.os):00366                 LDD     #$FFFF                            ;GET END OF FILE MARKER
EEDD ED84             (       command.os):00367                 STD     ,X                                ;MARK SECTOR
EEDF B7DCDD           (       command.os):00368                 STA     >WRKCHG                           ;INDICATE CHANGED
EEE2 3506             (       command.os):00369                 PULS    A,B                               ;GET CHAINED SECTOR BACK
EEE4 7EEDBE           (       command.os):00370                 JMP     UNCHAIN                           ;SET IT FREE
                      (       command.os):00371         ;*
                      (       command.os):00372         ;* 'RETURN' COMMAND
                      (       command.os):00373         ;*
EEE7                  (       command.os):00374         RETURN
EEE7 FCDCE9           (       command.os):00375                 LDD     >OLDSTK                           ;GET OLD STACK
EEEA 2704             (       command.os):00376                 BEQ     NOSUSP                            ;NONE, SKIP IT
EEEC 1F04             (       command.os):00377                 TFR     D,S                               ;SET UP STACK
EEEE 4F               (       command.os):00378                 CLRA                                      ;ZERO IT
EEEF 39               (       command.os):00379                 RTS
EEF0                  (       command.os):00380         NOSUSP
EEF0 BDE57E           (       command.os):00381                 JSR     WRMSG                             ;OUTPUT MESSAGE
EEF3 4E6F207375737065 (       command.os):00382                 FCC     'No suspended program'
     6E6465642070726F
     6772616D
EF07 00               (       command.os):00383                 FCB     $00
EF08 10FEDCDB         (       command.os):00384                 LDS     >SAVSTK                           ;RESTORE STACK
EF0C                  (       command.os):00385         DNLRTS
EF0C 4F               (       command.os):00386                 CLRA                                      ;ZERO RC
EF0D 39               (       command.os):00387                 RTS
                      (       command.os):00388         ;*
                      (       command.os):00389         ;* 'DOWNLOAD' COMMAND
                      (       command.os):00390         ;*
EF0E                  (       command.os):00391         DNLD
EF0E BDF0FC           (       command.os):00392                 JSR     GETDEV                            ;GET DEVICE ID
EF11 F7DCCF           (       command.os):00393                 STB     >TEMP2                            ;SAVE IT
EF14 7FDCD2           (       command.os):00394                 CLR     >TEMP3+1                          ;ZERO COUNT
EF17 CCFFFF           (       command.os):00395                 LDD     #$FFFF                            ;INIT LOW ADDR
EF1A FDDCD3           (       command.os):00396                 STD     >TEMP4                            ;SAVE LOW ADDRESS
EF1D 4F               (       command.os):00397                 CLRA
EF1E 5F               (       command.os):00398                 CLRB
EF1F 3406             (       command.os):00399                 PSHS    A,B                               ;SAVE HIGH ADDR
EF21                  (       command.os):00400         DNL0
EF21 860D             (       command.os):00401                 LDA     #$0D
EF23 BDE59A           (       command.os):00402                 JSR     PUTCHR                            ;OUTPUT
EF26 B6DCD2           (       command.os):00403                 LDA     >TEMP3+1
EF29 BDE55A           (       command.os):00404                 JSR     WRHEX                             ;OUTPUT IN HEX
EF2C 7CDCD2           (       command.os):00405                 INC     >TEMP3+1
EF2F 8D28             (       command.os):00406                 BSR     DNL1                              ;DOWNLOAD RECORD
EF31 2608             (       command.os):00407                 BNE     DNLEND                            ;END, QUIT
EF33 ACE4             (       command.os):00408                 CMPX    ,S                                ;HIGEST YET?
EF35 23EA             (       command.os):00409                 BLS     DNL0                              ;NO, SKIP
EF37 AFE4             (       command.os):00410                 STX     ,S                                ;SAVE HIGH
EF39 20E6             (       command.os):00411                 BRA     DNL0                              ;OK, KEEP GOING
EF3B                  (       command.os):00412         DNLEND
EF3B BDE588           (       command.os):00413                 JSR     LFCR                              ;NEW LINE
EF3E 3506             (       command.os):00414                 PULS    A,B                               ;GET HIGEST
EF40 B3DCD3           (       command.os):00415                 SUBD    >TEMP4                            ;CALCULATE SIZE
EF43 830001           (       command.os):00416                 SUBD    #1                                ;CONVERT
EF46 44               (       command.os):00417                 LSRA                                      ;/512, CONVERT TO # SECTORS
EF47 4C               (       command.os):00418                 INCA    CONVERT
EF48 B7DCD2           (       command.os):00419                 STA     >TEMP3+1                          ;SAVE LENGTH
EF4B BDE4DC           (       command.os):00420                 JSR     SKIP                              ;OPERAND?
EF4E 27BC             (       command.os):00421                 BEQ     DNLRTS                            ;NO FILE TO SAVE INTO
EF50 BDE370           (       command.os):00422                 JSR     GETVAL                            ;GET FILENAME
EF53 7EEE95           (       command.os):00423                 JMP     SAVF1                             ;PERFORM SAVE
                      (       command.os):00424         ;* DOWNLOAD A RECORD FROM A DEVICE
EF56                  (       command.os):00425         DNLDEV
EF56 B7DCCF           (       command.os):00426                 STA     >TEMP2                            ;SAVE DEVICE ID
EF59                  (       command.os):00427         DNL1
EF59 8D5B             (       command.os):00428                 BSR     RDDLC                             ;GET CHAR
EF5B 8153             (       command.os):00429                 CMPA    #'S'                              ;START OF RECORD?
EF5D 26FA             (       command.os):00430                 BNE     DNL1                              ;NO
EF5F 8D55             (       command.os):00431                 BSR     RDDLC                             ;GET NEXT CHAR
EF61 8130             (       command.os):00432                 CMPA    #'0'                              ;HEADER?
EF63 27F4             (       command.os):00433                 BEQ     DNL1                              ;IGNORE
EF65 8139             (       command.os):00434                 CMPA    #'9'                              ;END OF FILE
EF67 2603             (       command.os):00435                 BNE     DNL2                              ;YES, END OF FILE
EF69 8606             (       command.os):00436                 LDA     #RCEOF
EF6B 39               (       command.os):00437                 RTS
EF6C                  (       command.os):00438         DNL2
EF6C 8131             (       command.os):00439                 CMPA    #'1'                              ;DATA RECORD
EF6E 263E             (       command.os):00440                 BNE     LODERR                            ;INVALID
EF70 8D4A             (       command.os):00441                 BSR     GETBYT                            ;GET LENGTH
EF72 B7DCD0           (       command.os):00442                 STA     >TEMP2+1                          ;START CKSUM
EF75 8003             (       command.os):00443                 SUBA    #3                                ;CONVERT
EF77 B7DCD1           (       command.os):00444                 STA     >TEMP3                            ;SAVE LENGTH
EF7A 8D40             (       command.os):00445                 BSR     GETBYT                            ;GET HIGH ADDR
EF7C 3402             (       command.os):00446                 PSHS    A                                 ;SAVE
EF7E 8D3C             (       command.os):00447                 BSR     GETBYT                            ;GET LOW ADDR
EF80 1F89             (       command.os):00448                 TFR     A,B                               ;SAVE
EF82 ABE4             (       command.os):00449                 ADDA    ,S                                ;ADD HIGH
EF84 BBDCD0           (       command.os):00450                 ADDA    >TEMP2+1                          ;& CKSUM
EF87 B7DCD0           (       command.os):00451                 STA     >TEMP2+1                          ;RESAVE
EF8A 3502             (       command.os):00452                 PULS    A                                 ;RESTORE
EF8C 1F01             (       command.os):00453                 TFR     D,X                               ;SET UP PTR
EF8E 10B3DCD3         (       command.os):00454                 CMPD    >TEMP4                            ;HIGHER?
EF92 2403             (       command.os):00455                 BHS     DNL3                              ;YES
EF94 FDDCD3           (       command.os):00456                 STD     >TEMP4                            ;NEW VALUE
EF97                  (       command.os):00457         DNL3
EF97 8D23             (       command.os):00458                 BSR     GETBYT                            ;GET BYTE
EF99 A780             (       command.os):00459                 STA     ,X+                               ;SAVE IT
EF9B BBDCD0           (       command.os):00460                 ADDA    >TEMP2+1                          ;INCL CKSUM
EF9E B7DCD0           (       command.os):00461                 STA     >TEMP2+1                          ;RESAVE CKSUM
EFA1 7ADCD1           (       command.os):00462                 DEC     >TEMP3                            ;REDUCE LENGTH
EFA4 26F1             (       command.os):00463                 BNE     DNL3                              ;GET FULL REC.
EFA6 8D14             (       command.os):00464                 BSR     GETBYT                            ;GET CKSUM
EFA8 BBDCD0           (       command.os):00465                 ADDA    >TEMP2+1                          ;+ CALC CKSUM
EFAB 4C               (       command.os):00466                 INCA    TEST FOR OK
EFAC 271A             (       command.os):00467                 BEQ     DNL4                              ;YES, GET NEXT REC
EFAE                  (       command.os):00468         LODERR
EFAE 8EF7D3           (       command.os):00469                 LDX     #DNLMSG                           ;PT TO ERROR MESSAGE
EFB1 860B             (       command.os):00470                 LDA     #RCDNL                            ;RETURN CODE
EFB3 7EE2BD           (       command.os):00471                 JMP     ERRMRC                            ;RETURN
EFB6                  (       command.os):00472         RDDLC
EFB6 F6DCCF           (       command.os):00473                 LDB     >TEMP2                            ;GET DEV
EFB9 7EE5BC           (       command.os):00474                 JMP     RDDEV                             ;GET CHAR
EFBC                  (       command.os):00475         GETBYT
EFBC 8D0B             (       command.os):00476                 BSR     GETNIB                            ;GET IT
EFBE 48               (       command.os):00477                 LSLA
EFBF 48               (       command.os):00478                 LSLA
EFC0 48               (       command.os):00479                 LSLA
EFC1 48               (       command.os):00480                 LSLA
EFC2 3402             (       command.os):00481                 PSHS    A
EFC4 8D03             (       command.os):00482                 BSR     GETNIB
EFC6 AAE0             (       command.os):00483                 ORA     ,S+
EFC8                  (       command.os):00484         DNL4
EFC8 39               (       command.os):00485                 RTS
EFC9                  (       command.os):00486         GETNIB
EFC9 8DEB             (       command.os):00487                 BSR     RDDLC                             ;GET CHAR
EFCB 8030             (       command.os):00488                 SUBA    #'0'                              ;CONVERT
EFCD 8109             (       command.os):00489                 CMPA    #9                                ;OK?
EFCF 230A             (       command.os):00490                 BLS     GETN1                             ;YES
EFD1 8111             (       command.os):00491                 CMPA    #$11                              ;<A
EFD3 25D9             (       command.os):00492                 BLO     LODERR                            ;INVALID
EFD5 8007             (       command.os):00493                 SUBA    #7                                ;CONVERT
EFD7 8110             (       command.os):00494                 CMPA    #$10                              ;IN RANGE
EFD9 24D3             (       command.os):00495                 BHS     LODERR                            ;INVALID
EFDB                  (       command.os):00496         GETN1
EFDB 39               (       command.os):00497                 RTS
                      (       command.os):00498         ;*
                      (       command.os):00499         ;* 'CONNECT' COMMAND
                      (       command.os):00500         ;*
EFDC                  (       command.os):00501         CNCT
EFDC BDF0FC           (       command.os):00502                 JSR     GETDEV                            ;GET DEVICE
EFDF F7DCCF           (       command.os):00503                 STB     >TEMP2                            ;SAVE
EFE2                  (       command.os):00504         CNC1
EFE2 BDE5D3           (       command.os):00505                 JSR     TSTCHR                            ;TEST FOR CHAR FROM CONSOLE
EFE5 260C             (       command.os):00506                 BNE     CNC2                              ;NO, NONE
EFE7 811B             (       command.os):00507                 CMPA    #$1B                              ;ESCAPE?
EFE9 1027F59B         (       command.os):00508                 LBEQ    LFCR                              ;IF SO, EXIT
EFED F6DCCF           (       command.os):00509                 LDB     >TEMP2                            ;GET DEVICE BACK
EFF0 BDE5A1           (       command.os):00510                 JSR     WRDEV                             ;OUTPUT TO DEVICE
EFF3                  (       command.os):00511         CNC2
EFF3 F6DCCF           (       command.os):00512                 LDB     >TEMP2                            ;GET DEVICE ID
EFF6 BDE5C1           (       command.os):00513                 JSR     TSTDEV                            ;TEST FOR CHARACTER
EFF9 26E7             (       command.os):00514                 BNE     CNC1                              ;NO CHAR RECEIVED
EFFB BDE59A           (       command.os):00515                 JSR     PUTCHR                            ;WRITE TO CONSOLE
EFFE 20E2             (       command.os):00516                 BRA     CNC1                              ;CONTINUE
                      (       command.os):00517         ;*
                      (       command.os):00518         ;* 'SET' COMMAND
                      (       command.os):00519         ;*
F000                  (       command.os):00520         SET
F000 8EF380           (       command.os):00521                 LDX     #SETTAB                           ;POINT TO TABLE
F003 BDE505           (       command.os):00522                 JSR     TLOOK                             ;LOOK IT UP
F006 BDE4DC           (       command.os):00523                 JSR     SKIP                              ;ADVANCE
F009 2777             (       command.os):00524                 BEQ     BADOP3                            ;INVALID
F00B 8EF3C3           (       command.os):00525                 LDX     #SETADR
F00E 58               (       command.os):00526                 ASLB
F00F 6E95             (       command.os):00527                 JMP     [B,X]
                      (       command.os):00528         ;* SET DEFAULT
F011                  (       command.os):00529         SET0
F011 BDE3B0           (       command.os):00530                 JSR     GETDIR                            ;GET DEFAULT DIR
F014 BDE4DC           (       command.os):00531                 JSR     SKIP                              ;ANY MORE INFO
F017 2669             (       command.os):00532                 BNE     BADOP3
F019                  (       command.os):00533         SETDEF
F019 3436             (       command.os):00534                 PSHS    A,B,X,Y                           ;SAVE REGS
F01B 8EDCA5           (       command.os):00535                 LDX     #DEFDRV                           ;POINT TO DEFAULT
F01E 2010             (       command.os):00536                 BRA     MOVDIR                            ;MOVE IT
                      (       command.os):00537         ;* SET COMMAND
F020                  (       command.os):00538         SET1
F020 8EDCAE           (       command.os):00539                 LDX     #SYSDRV                           ;DEFAULT FROM SYSTEM
F023 BDE3B3           (       command.os):00540                 JSR     GETDIR1                           ;GET DIR
F026 BDE4DC           (       command.os):00541                 JSR     SKIP
F029 2657             (       command.os):00542                 BNE     BADOP3
F02B                  (       command.os):00543         SETCMD
F02B 3436             (       command.os):00544                 PSHS    A,B,X,Y                           ;SAVE REGS
F02D 8EDCAE           (       command.os):00545                 LDX     #SYSDRV                           ;POINT TO IT
F030                  (       command.os):00546         MOVDIR
F030 108EDCB7         (       command.os):00547                 LDY     #FDRIVE                           ;POINT TO FILENAME
F034 C609             (       command.os):00548                 LDB     #9                                ;MOVE 9 CHARS
F036                  (       command.os):00549         MOVD1
F036 A6A0             (       command.os):00550                 LDA     ,Y+                               ;GET 1
F038 A780             (       command.os):00551                 STA     ,X+                               ;SAVE IT
F03A 5A               (       command.os):00552                 DECB
F03B 26F9             (       command.os):00553                 BNE     MOVD1                             ;CONTINUE
F03D 35B6             (       command.os):00554                 PULS    A,B,X,Y,PC
                      (       command.os):00555         ;* SET FILE
F03F                  (       command.os):00556         SET2
F03F BDE370           (       command.os):00557                 JSR     GETVAL                            ;GET NAME
F042 BDE659           (       command.os):00558                 JSR     LOCERR                            ;LOOK IT UP
F045                  (       command.os):00559         SETF0
F045 3410             (       command.os):00560                 PSHS    X                                 ;SAVE PTR
F047 8EF3EF           (       command.os):00561                 LDX     #SFTAB                            ;PT TO TABLE
F04A BDF0C3           (       command.os):00562                 JSR     TLOOKE                            ;LOOK IT UP
F04D 5D               (       command.os):00563                 TSTB                                      ;IS IT SET LOADADDRESS
F04E 260C             (       command.os):00564                 BNE     SETF1                             ;NO, TRY SOMETHING ELSE
F050 BDE41C           (       command.os):00565                 JSR     GETHEX                            ;GET ADDRESS
F053 1F10             (       command.os):00566                 TFR     X,D                               ;COPY
F055 3510             (       command.os):00567                 PULS    X                                 ;RESTORE
F057 ED8815           (       command.os):00568                 STD     DRADR,X                           ;SAVE
F05A 200A             (       command.os):00569                 BRA     SETF2                             ;TEST FOR END
F05C                  (       command.os):00570         SETF1
F05C 5A               (       command.os):00571                 DECB
F05D 2623             (       command.os):00572                 BNE     BADOP3
F05F 8D0D             (       command.os):00573                 BSR     GETATR                            ;GET ATTRIBUTES
F061 3510             (       command.os):00574                 PULS    X                                 ;RESTORE
F063 A78817           (       command.os):00575                 STA     DATTR,X                           ;SAVE
F066                  (       command.os):00576         SETF2
F066 BDE4DC           (       command.os):00577                 JSR     SKIP                              ;ADVANCE
F069 26DA             (       command.os):00578                 BNE     SETF0
F06B 7EE7A1           (       command.os):00579                 JMP     CHGWRK                            ;INDICATE WE CHANGED
                      (       command.os):00580         ;* GET FILE ATTRIBUTES FROM COMMAND LINE
F06E                  (       command.os):00581         GETATR
F06E 4F               (       command.os):00582                 CLRA    CLEAR IT
F06F 3416             (       command.os):00583                 PSHS    A,B,X                             ;SAVE ON STACK
F071                  (       command.os):00584         GETA1
F071 8EF08D           (       command.os):00585                 LDX     #ATRTAB                           ;POINT TO TABLE
F074 BDE4E9           (       command.os):00586                 JSR     TSTERM                            ;GET CHARACTER
F077 2712             (       command.os):00587                 BEQ     GETA4                             ;END
F079 C680             (       command.os):00588                 LDB     #%10000000                        ;START WITH FIRST ATTR
F07B                  (       command.os):00589         GETA2
F07B A180             (       command.os):00590                 CMPA    ,X+                               ;IS THIS IT?
F07D 2706             (       command.os):00591                 BEQ     GETA3                             ;YES
F07F 54               (       command.os):00592                 LSRB                                      ;SHIFT IT
F080 26F9             (       command.os):00593                 BNE     GETA2                             ;MORE
F082                  (       command.os):00594         BADOP3
F082 7EE2B8           (       command.os):00595                 JMP     BADOPR                            ;REPORT ERROR
F085                  (       command.os):00596         GETA3
F085 EAE4             (       command.os):00597                 ORB     ,S                                ;INCLUDE IN ATTRIBUTES
F087 E7E4             (       command.os):00598                 STB     ,S                                ;RESAVE
F089 20E6             (       command.os):00599                 BRA     GETA1                             ;AND CONTINUE
F08B                  (       command.os):00600         GETA4
F08B 3596             (       command.os):00601                 PULS    A,B,X,PC                          ;RESTORE REGS
F08D                  (       command.os):00602         ATRTAB
F08D 525745443F3F3F3F (       command.os):00603                 FCC     'RWED????'                        ;AVAILABLE ATTRIBUTE BITS
                      (       command.os):00604         ;*
                      (       command.os):00605         ;* SET DRIVE COMMAND
                      (       command.os):00606         ;*
F095                  (       command.os):00607         SET3
F095 BDE623           (       command.os):00608                 JSR     PURGE                             ;INSURE ALL WRITTEN
F098 BDE3FF           (       command.os):00609                 JSR     GETDRV                            ;GET DRIVE ID
F09B B7DCEB           (       command.os):00610                 STA     >SDRIVE                           ;SELECT IT
F09E BDEB06           (       command.os):00611                 JSR     GETCTL                            ;GET CTRL BLOCK
F0A1 3420             (       command.os):00612                 PSHS    Y                                 ;SAVE CMD POINTER
F0A3 BDF6DD           (       command.os):00613                 JSR     HOME                              ;HOME HEAD
F0A6 3520             (       command.os):00614                 PULS    Y                                 ;RESTORE CMD POINTER
F0A8                  (       command.os):00615         CHGDRV
F0A8 8EF427           (       command.os):00616                 LDX     #SDTAB                            ;POINT TO TABLE
F0AB BDF0C3           (       command.os):00617                 JSR     TLOOKE                            ;LOOK FOR IT
F0AE 3404             (       command.os):00618                 PSHS    B                                 ;SAVE
F0B0 BDE411           (       command.os):00619                 JSR     GETNUM                            ;GET IT
F0B3 1F10             (       command.os):00620                 TFR     X,D                               ;GET NUMBER
F0B5 3502             (       command.os):00621                 PULS    A                                 ;RESTORE
F0B7 8103             (       command.os):00622                 CMPA    #3                                ;VALID?
F0B9 22C7             (       command.os):00623                 BHI     BADOP3                            ;ERROR
F0BB E7C6             (       command.os):00624                 STB     A,U                               ;SET IT
F0BD BDE4DC           (       command.os):00625                 JSR     SKIP                              ;AT END?
F0C0 26E6             (       command.os):00626                 BNE     CHGDRV                            ;NO
F0C2 39               (       command.os):00627                 RTS
                      (       command.os):00628         ;*
                      (       command.os):00629         ;* LOOKUP TABLE ENTRY & INSURE IT ENDS WITH '='
                      (       command.os):00630         ;*
F0C3                  (       command.os):00631         TLOOKE
F0C3 BDE505           (       command.os):00632                 JSR     TLOOK                             ;LOOKUP ENTRY
F0C6 A6A0             (       command.os):00633                 LDA     ,Y+                               ;GET NEXT CHAR
F0C8 813D             (       command.os):00634                 CMPA    #'='                              ;IS IT EQUALS?
F0CA 26B6             (       command.os):00635                 BNE     BADOP3                            ;REPORT ERROR
F0CC 39               (       command.os):00636                 RTS
                      (       command.os):00637         ;*
                      (       command.os):00638         ;* SET MEMORY
                      (       command.os):00639         ;*
F0CD                  (       command.os):00640         SET4
F0CD BDE41C           (       command.os):00641                 JSR     GETHEX                            ;GET ADDRESS
F0D0                  (       command.os):00642         ST1
F0D0 3410             (       command.os):00643                 PSHS    X                                 ;SAVE ADDR
F0D2 BDE41C           (       command.os):00644                 JSR     GETHEX                            ;GET DATA
F0D5 1F10             (       command.os):00645                 TFR     X,D                               ;SAVE IT
F0D7 3510             (       command.os):00646                 PULS    X                                 ;RECOVER
F0D9 E780             (       command.os):00647                 STB     ,X+                               ;SAVE IT
F0DB BDE4DC           (       command.os):00648                 JSR     SKIP                              ;END OF LINE?
F0DE 26F0             (       command.os):00649                 BNE     ST1                               ;CONTINUE
F0E0 39               (       command.os):00650                 RTS
                      (       command.os):00651         ;* SET CONSOLE
F0E1                  (       command.os):00652         SET5
F0E1 8EF456           (       command.os):00653                 LDX     #IOTAB                            ;POINT TO TABLE
F0E4 BDF0C3           (       command.os):00654                 JSR     TLOOKE                            ;LOOK IT UP
F0E7 C102             (       command.os):00655                 CMPB    #2                                ;OVER?
F0E9 2497             (       command.os):00656                 BHS     BADOP3                            ;INVALID
F0EB 3404             (       command.os):00657                 PSHS    B                                 ;SAVE ID
F0ED 8D0D             (       command.os):00658                 BSR     GETDEV                            ;GET DEVICE NUMBER
F0EF 3502             (       command.os):00659                 PULS    A                                 ;GET ID BACK
F0F1 8EDC6C           (       command.os):00660                 LDX     #CONIN
F0F4 E786             (       command.os):00661                 STB     A,X                               ;SET IT
F0F6 BDE4DC           (       command.os):00662                 JSR     SKIP
F0F9 26E6             (       command.os):00663                 BNE     SET5
F0FB 39               (       command.os):00664                 RTS
                      (       command.os):00665         ;* GET A DEVICE ID FROM THE CONSOLE
F0FC                  (       command.os):00666         GETDEV
F0FC BDE411           (       command.os):00667                 JSR     GETNUM                            ;GET DECIMAL NUMBER
F0FF 8C0008           (       command.os):00668                 CMPX    #NDEV                             ;IS IT OVER THE LIMIT
F102 1024F4AE         (       command.os):00669                 LBHS    BADDEV                            ;YES, REPORT ERROR
F106 1F10             (       command.os):00670                 TFR     X,D                               ;'B' = DEVICE ID
F108 39               (       command.os):00671                 RTS
                      (       command.os):00672         ;* SET FLAG ON/OFF
F109                  (       command.os):00673         STFLAG
F109 54               (       command.os):00674                 LSRB                                      ;CONVERT BACK
F10A 3404             (       command.os):00675                 PSHS    B                                 ;SAVE
F10C 8EF44E           (       command.os):00676                 LDX     #OOTAB                            ;PT TO IT
F10F BDE505           (       command.os):00677                 JSR     TLOOK                             ;LOOKUP IN TABLE
F112 3502             (       command.os):00678                 PULS    A                                 ;RESTORE VECT NUM
F114 5D               (       command.os):00679                 TSTB                                      ;IS IT OFF?
F115 270B             (       command.os):00680                 BEQ     CLRFLG                            ;YES, CLEAR IT
F117 5A               (       command.os):00681                 DECB                                      ;IS IT ON
F118 1026F19C         (       command.os):00682                 LBNE    BADOPR                            ;NO, ITS INVALID
                      (       command.os):00683         ;* SET AN OS FLAG
F11C                  (       command.os):00684         SETFLG
F11C 3414             (       command.os):00685                 PSHS    B,X
F11E C6FF             (       command.os):00686                 LDB     #$FF
F120 2003             (       command.os):00687                 BRA     GOFLG
                      (       command.os):00688         ;* CLEAR A OS FLAG
F122                  (       command.os):00689         CLRFLG
F122 3414             (       command.os):00690                 PSHS    B,X
F124 5F               (       command.os):00691                 CLRB
F125                  (       command.os):00692         GOFLG
F125 8103             (       command.os):00693                 CMPA    #NUMFLG
F127 1024F18D         (       command.os):00694                 LBHS    BADOPR
F12B 8EDCA2           (       command.os):00695                 LDX     #MSGFLG
F12E 3086             (       command.os):00696                 LEAX    A,X
F130 A684             (       command.os):00697                 LDA     ,X
F132 E784             (       command.os):00698                 STB     ,X
F134 1A04             (       command.os):00699                 ORCC    #4
F136 3594             (       command.os):00700                 PULS    B,X,PC
                      (       command.os):00701         ;*
                      (       command.os):00702         ;* SHOW COMMAND
                      (       command.os):00703         ;*
F138                  (       command.os):00704         SHOW
F138 8EF380           (       command.os):00705                 LDX     #SETTAB                           ;POINT TO IT
F13B BDE505           (       command.os):00706                 JSR     TLOOK                             ;LOOK FOR IT
F13E 58               (       command.os):00707                 LSLB
F13F 8EF3D9           (       command.os):00708                 LDX     #SHOADR
F142 6E95             (       command.os):00709                 JMP     [B,X]
                      (       command.os):00710         ;* SHOW DEFAULT
F144                  (       command.os):00711         SHOW0
F144 8EDCA5           (       command.os):00712                 LDX     #DEFDRV                           ;PT TO IT
F147 2003             (       command.os):00713                 BRA     SDCMD                             ;SHOW IT
F149                  (       command.os):00714         SHOW1
F149 8EDCAE           (       command.os):00715                 LDX     #SYSDRV                           ;PT TO IT
F14C                  (       command.os):00716         SDCMD
F14C A680             (       command.os):00717                 LDA     ,X+                               ;GET DRIVE ID
F14E 8B41             (       command.os):00718                 ADDA    #'A'                              ;CONVERT
F150 BDE59A           (       command.os):00719                 JSR     PUTCHR
F153 BDE54E           (       command.os):00720                 JSR     WRLIN
F156 3A5B             (       command.os):00721                 FCC     ':['
F158 00               (       command.os):00722                 FCB     $00
F159 C608             (       command.os):00723                 LDB     #8
F15B                  (       command.os):00724         SDC1
F15B A680             (       command.os):00725                 LDA     ,X+
F15D 2703             (       command.os):00726                 BEQ     SDC2
F15F BDE59A           (       command.os):00727                 JSR     PUTCHR
F162                  (       command.os):00728         SDC2
F162 5A               (       command.os):00729                 DECB
F163 26F6             (       command.os):00730                 BNE     SDC1
F165 865D             (       command.os):00731                 LDA     #']'
F167 BDE59A           (       command.os):00732                 JSR     PUTCHR
F16A 7EE588           (       command.os):00733                 JMP     LFCR                              ;EXIT
                      (       command.os):00734         ;* SHOW FILE
F16D                  (       command.os):00735         SHOW2
F16D BDE370           (       command.os):00736                 JSR     GETVAL                            ;GET NAME
F170 BDE659           (       command.os):00737                 JSR     LOCERR                            ;LOOK IT UP
F173 BDE54E           (       command.os):00738                 JSR     WRLIN
F176 46696C653A20     (       command.os):00739                 FCC     'File: '
F17C 00               (       command.os):00740                 FCB     $00
F17D BDE6EA           (       command.os):00741                 JSR     SHONAM                            ;OUTPUT
F180 BDE54E           (       command.os):00742                 JSR     WRLIN
F183 0A0D             (       command.os):00743                 FCB     $0A,$0D
F185 4469736B20616464 (       command.os):00744                 FCC     'Disk address='
     726573733D
F192 00               (       command.os):00745                 FCB     $00
F193 EC8813           (       command.os):00746                 LDD     DDADR,X
F196 BDE47E           (       command.os):00747                 JSR     WRDEC
F199 BDE54E           (       command.os):00748                 JSR     WRLIN
F19C 2C204C6F61642061 (       command.os):00749                 FCC     ', Load address=$'
     6464726573733D24
F1AC 00               (       command.os):00750                 FCB     $00
F1AD EC8815           (       command.os):00751                 LDD     DRADR,X
F1B0 BDE545           (       command.os):00752                 JSR     WRHEXW
F1B3 BDE54E           (       command.os):00753                 JSR     WRLIN
F1B6 2C2050726F746563 (       command.os):00754                 FCC     ', Protection='
     74696F6E3D
F1C3 00               (       command.os):00755                 FCB     $00
F1C4 E68817           (       command.os):00756                 LDB     DATTR,X
F1C7 108EF08D         (       command.os):00757                 LDY     #ATRTAB
F1CB                  (       command.os):00758         SH21
F1CB A6A0             (       command.os):00759                 LDA     ,Y+
F1CD 58               (       command.os):00760                 LSLB
F1CE 2403             (       command.os):00761                 BCC     SH22
F1D0 BDE59A           (       command.os):00762                 JSR     PUTCHR
F1D3                  (       command.os):00763         SH22
F1D3 5D               (       command.os):00764                 TSTB
F1D4 26F5             (       command.os):00765                 BNE     SH21
F1D6 BDE588           (       command.os):00766                 JSR     LFCR
F1D9 108E0000         (       command.os):00767                 LDY     #0                                ;0 BLOCKS
F1DD EC8813           (       command.os):00768                 LDD     DDADR,X
F1E0                  (       command.os):00769         SH23
F1E0 3121             (       command.os):00770                 LEAY    1,Y                               ;ADVANCE
F1E2 BDE5DF           (       command.os):00771                 JSR     FNDLNK                            ;LOOK UP LINK
F1E5 26F9             (       command.os):00772                 BNE     SH23                              ;FIND EM ALL
F1E7 BDE54E           (       command.os):00773                 JSR     WRLIN
F1EA 46696C6520636F6E (       command.os):00774                 FCC     'File contains '
     7461696E7320
F1F8 00               (       command.os):00775                 FCB     $00
F1F9 1F20             (       command.os):00776                 TFR     Y,D
F1FB BDE47E           (       command.os):00777                 JSR     WRDEC
F1FE BDE57E           (       command.os):00778                 JSR     WRMSG
F201 20626C6F636B2873 (       command.os):00779                 FCC     ' block(s).'
     292E
F20B 00               (       command.os):00780                 FCB     $00
F20C 39               (       command.os):00781                 RTS
                      (       command.os):00782         ;* SHOW DISK FORMAT
F20D                  (       command.os):00783         SHOW3
F20D BDE3FF           (       command.os):00784                 JSR     GETDRV
F210                  (       command.os):00785         SHODRV
F210 3442             (       command.os):00786                 PSHS    A,U                               ;SAVE REGISTERS
F212 BDEB09           (       command.os):00787                 JSR     GETCTL1                           ;GET DRIVE CONTROL BLOCK
F215 BDE54E           (       command.os):00788                 JSR     WRLIN                             ;OUTPUT MESSAGE
F218 44726976653A20   (       command.os):00789                 FCC     'Drive: '
F21F 00               (       command.os):00790                 FCB     $00
F220 A6E4             (       command.os):00791                 LDA     ,S                                ;GET DRIVE ID
F222 8B41             (       command.os):00792                 ADDA    #'A'                              ;CONVERT TO DRIVE ID
F224 BDE59A           (       command.os):00793                 JSR     PUTCHR                            ;OUTPUT IT
F227 BDE588           (       command.os):00794                 JSR     LFCR                              ;NEW LINE
F22A 8EF427           (       command.os):00795                 LDX     #SDTAB                            ;POINT TO TABLE
F22D 4F               (       command.os):00796                 CLRA                                      ;DISPLAY ADDRESS
F22E E6C4             (       command.os):00797                 LDB     DRIVE,U                           ;GET DRIVE ID
F230 8D1D             (       command.os):00798                 BSR     SHODRB                            ;DISPLAY IT
F232 8601             (       command.os):00799                 LDA     #1                                ;DISPLAY CYLINDERS
F234 E641             (       command.os):00800                 LDB     NCYL,U                            ;GET # CYLINDERS
F236 8D11             (       command.os):00801                 BSR     SHODRA                            ;DISPLAY IT
F238 8602             (       command.os):00802                 LDA     #2                                ;DISPLAY HEADS
F23A E642             (       command.os):00803                 LDB     NHEAD,U                           ;GET # HEADS
F23C 8D0B             (       command.os):00804                 BSR     SHODRA                            ;DISPLAY IT
F23E 8603             (       command.os):00805                 LDA     #3                                ;DISPLAY SECTORS/TRACK
F240 E643             (       command.os):00806                 LDB     NSEC,U                            ;GET # SECTORS/TRACK
F242 8D05             (       command.os):00807                 BSR     SHODRA                            ;DISPLAY IT
F244 3542             (       command.os):00808                 PULS    A,U                               ;RESTORE REGS
F246 7EE588           (       command.os):00809                 JMP     LFCR                              ;NEW LINE
                      (       command.os):00810         
F249                  (       command.os):00811         SHODRA
F249 BDE54E           (       command.os):00812                 JSR     WRLIN                             ;OUTPUT MESSAGE
F24C 2C20             (       command.os):00813                 FCC     ', '                              ;STRING
F24E 00               (       command.os):00814                 FCB     $00
F24F                  (       command.os):00815         SHODRB
F24F 8D08             (       command.os):00816                 BSR     SHOTAB                            ;DISPLAY TABLE ENTRY
F251 863D             (       command.os):00817                 LDA     #'='                              ;GET FOLLOWING '='
F253 BDE59A           (       command.os):00818                 JSR     PUTCHR                            ;OUTPUT IT
F256 7EE47D           (       command.os):00819                 JMP     WRDEC8                            ;AND DISPLAY VALUE
                      (       command.os):00820         ;*
                      (       command.os):00821         ;* DISPLAY ENTRY(A) IN TABLE(X)
                      (       command.os):00822         ;*
F259                  (       command.os):00823         SHOTAB
F259 3414             (       command.os):00824                 PSHS    B,X                               ;SAVE REGS
F25B 4C               (       command.os):00825                 INCA                                      ;ADVANCE FOR COUNT
F25C                  (       command.os):00826         SHOT1
F25C E680             (       command.os):00827                 LDB     ,X+                               ;GET CHAR FROM TABLE
F25E 2AFC             (       command.os):00828                 BPL     SHOT1                             ;NOT FLAG, KEEP LOOKING
F260 C47F             (       command.os):00829                 ANDB    #%01111111                        ;IS IT LAST ONE?
F262 270F             (       command.os):00830                 BEQ     SHOT4                             ;YES, RETURN NOT-FOUND
F264 4A               (       command.os):00831                 DECA                                      ;IS THIS IT?
F265 26F5             (       command.os):00832                 BNE     SHOT1                             ;NO, KEEP LOOKING
F267                  (       command.os):00833         SHOT2
F267 A680             (       command.os):00834                 LDA     ,X+                               ;GET CHAR
F269 2B05             (       command.os):00835                 BMI     SHOT3                             ;END, EXIT
F26B BDE59A           (       command.os):00836                 JSR     PUTCHR                            ;DISPLAY
F26E 20F7             (       command.os):00837                 BRA     SHOT2                             ;DO NEXT
F270                  (       command.os):00838         SHOT3
F270 4F               (       command.os):00839                 CLRA    ZERO RC
F271 3594             (       command.os):00840                 PULS    B,X,PC
F273                  (       command.os):00841         SHOT4
F273 8601             (       command.os):00842                 LDA     #RCBOP                            ;INVALID OPERAND PASSED
F275 3594             (       command.os):00843                 PULS    B,X,PC                            ;RETURN
                      (       command.os):00844         ;* SHOW CONSOLE I/O ASSIGNMENTS
F277                  (       command.os):00845         SHOW5
F277 8EF456           (       command.os):00846                 LDX     #IOTAB                            ;POINT TO TABLE
F27A 4F               (       command.os):00847                 CLRA                                      ;DISPLAY INPUT
F27B F6DC6C           (       command.os):00848                 LDB     >CONIN                            ;GET INPUT
F27E 8DCF             (       command.os):00849                 BSR     SHODRB                            ;DISPLAY IT
F280 8601             (       command.os):00850                 LDA     #1                                ;DISPLAY OUTPUT
F282 F6DC6D           (       command.os):00851                 LDB     >CONOUT                           ;GET OUTPUT
F285 8DC2             (       command.os):00852                 BSR     SHODRA                            ;DISPLAY IT
F287 7EE588           (       command.os):00853                 JMP     LFCR                              ;NEW LINE
                      (       command.os):00854         ;* DISPLAY FLAGS
F28A                  (       command.os):00855         SHFLAG
F28A 54               (       command.os):00856                 LSRB
F28B 1F98             (       command.os):00857                 TFR     B,A                               ;COPY
F28D 8EF380           (       command.os):00858                 LDX     #SETTAB                           ;POINT TO TABLE
F290 8DC7             (       command.os):00859                 BSR     SHOTAB                            ;DISPLAY IT
F292 863D             (       command.os):00860                 LDA     #'='                              ;GET EQUALS SIGN
F294 BDE59A           (       command.os):00861                 JSR     PUTCHR                            ;OUTPUT IT
F297 8EDCA2           (       command.os):00862                 LDX     #MSGFLG                           ;PT TO AREA
F29A A685             (       command.os):00863                 LDA     B,X                               ;GET FLAG VALUE
F29C 2702             (       command.os):00864                 BEQ     SHOOFF                            ;OFF, SHOW IT
F29E 8601             (       command.os):00865                 LDA     #1                                ;CONVERT TO ON
F2A0                  (       command.os):00866         SHOOFF
F2A0 8EF44E           (       command.os):00867                 LDX     #OOTAB                            ;POINT TO ON/OFF TABLE
F2A3 8DB4             (       command.os):00868                 BSR     SHOTAB                            ;OUTPUT TABLE ENTRY
F2A5 7EE588           (       command.os):00869                 JMP     LFCR                              ;NEW LINE & EXIT
                      (       command.os):00870         ;*
                      (       command.os):00871         ;* SHOW MEMORY COMAND
                      (       command.os):00872         ;*
F2A8                  (       command.os):00873         SHOW4
F2A8 BDE41C           (       command.os):00874                 JSR     GETHEX                            ;     GET STARTING ADDRESS
F2AB 3410             (       command.os):00875                 PSHS    X                                 ;SAVE IT
F2AD BDE4DC           (       command.os):00876                 JSR     SKIP                              ;     MORE OPERANDS?
F2B0 2703             (       command.os):00877                 BEQ     EX1                               ;NO, THATS IT
F2B2 BDE41C           (       command.os):00878                 JSR     GETHEX                            ;     GET ENDING ADDRESS
F2B5                  (       command.os):00879         EX1
F2B5 BFDCCD           (       command.os):00880                 STX     >TEMP1                            ;     SAVE ADDR
F2B8 3510             (       command.os):00881                 PULS    X                                 ;GET STARTING BACK
F2BA                  (       command.os):00882         EX2
F2BA 1F10             (       command.os):00883                 TFR     X,D                               ;GET ADDRESS
F2BC BDE545           (       command.os):00884                 JSR     WRHEXW                            ;     DISPLAY
F2BF C610             (       command.os):00885                 LDB     #16                               ;16 BYTES/LINE
F2C1                  (       command.os):00886         EX3
F2C1 C503             (       command.os):00887                 BITB    #3                                ;BOUNDARY?
F2C3 2603             (       command.os):00888                 BNE     EX4
F2C5 BDE592           (       command.os):00889                 JSR     SPACE                             ;EXTRA SPACE
F2C8                  (       command.os):00890         EX4
F2C8 BDE592           (       command.os):00891                 JSR     SPACE                             ;OUTPUT SPACE
F2CB A680             (       command.os):00892                 LDA     ,X+                               ;GET DATA
F2CD BDE55A           (       command.os):00893                 JSR     WRHEX                             ;OUTPUT
F2D0 5A               (       command.os):00894                 DECB                                      ;BACKUP COUNT
F2D1 26EE             (       command.os):00895                 BNE     EX3                               ;DO EM ALL
F2D3 C604             (       command.os):00896                 LDB     #4
F2D5                  (       command.os):00897         EX5
F2D5 BDE592           (       command.os):00898                 JSR     SPACE                             ;MORE SPACES
F2D8 5A               (       command.os):00899                 DECB
F2D9 26FA             (       command.os):00900                 BNE     EX5
F2DB 3010             (       command.os):00901                 LEAX    -16,X                             ;BACKUP
F2DD C610             (       command.os):00902                 LDB     #16
F2DF                  (       command.os):00903         EX6
F2DF A680             (       command.os):00904                 LDA     ,X+
F2E1 8120             (       command.os):00905                 CMPA    #' '                              ;SPACE?
F2E3 2504             (       command.os):00906                 BLO     EX7
F2E5 817F             (       command.os):00907                 CMPA    #$7F                              ;DELETE
F2E7 2502             (       command.os):00908                 BLO     EX8                               ;OK
F2E9                  (       command.os):00909         EX7
F2E9 862E             (       command.os):00910                 LDA     #'.'                              ;INDICATE BAD
F2EB                  (       command.os):00911         EX8
F2EB BDE59A           (       command.os):00912                 JSR     PUTCHR                            ;OUTPUT
F2EE 5A               (       command.os):00913                 DECB    BACKUP
F2EF 26EE             (       command.os):00914                 BNE     EX6                               ;CONTINUE
F2F1 BDE588           (       command.os):00915                 JSR     LFCR                              ;NEW LINE
F2F4 BDE5D3           (       command.os):00916                 JSR     TSTCHR
F2F7 2705             (       command.os):00917                 BEQ     EX9
F2F9 BCDCCD           (       command.os):00918                 CMPX    >TEMP1                            ;PAST END?
F2FC 23BC             (       command.os):00919                 BLS     EX2                               ;NO, KEEP GOING
F2FE                  (       command.os):00920         EX9
F2FE 4F               (       command.os):00921                 CLRA
F2FF 39               (       command.os):00922                 RTS
                      (       command.os):00923         ;* SHOW FREE
F300                  (       command.os):00924         SHOW6
F300 BDE3FF           (       command.os):00925                 JSR     GETDRV                            ;GET DRIVE ID
F303 B7DCEB           (       command.os):00926                 STA     >SDRIVE                           ;SELECT IT
F306 8D3E             (       command.os):00927                 BSR     CALFRE                            ;CALCULATE SIZE & FREE
F308 BDE54E           (       command.os):00928                 JSR     WRLIN                             ;OUTPUT MESSAGE
F30B 447269766520     (       command.os):00929                 FCC     'Drive '
F311 00               (       command.os):00930                 FCB     $00
F312 B6DCEB           (       command.os):00931                 LDA     >SDRIVE                           ;GET DRIVE ID
F315 8B41             (       command.os):00932                 ADDA    #'A'                              ;CONVERT TO PRINTABLE
F317 BDE59A           (       command.os):00933                 JSR     PUTCHR                            ;DISPLAY
F31A BDE54E           (       command.os):00934                 JSR     WRLIN                             ;OUTPUT MESSAGE
F31D 2068617320       (       command.os):00935                 FCC     ' has '
F322 00               (       command.os):00936                 FCB     $00
F323 FCDCCF           (       command.os):00937                 LDD     >TEMP2                            ;GET DISK SIZE
F326 BDE47E           (       command.os):00938                 JSR     WRDEC                             ;DISPLAY IN DECIMAL
F329 BDE54E           (       command.os):00939                 JSR     WRLIN                             ;OUTPUT MESSAGE
F32C 20626C6F636B732C (       command.os):00940                 FCC     ' blocks, '
     20
F335 00               (       command.os):00941                 FCB     $00
F336 FCDCCD           (       command.os):00942                 LDD     >TEMP1                            ;GET FREE BLOCKS
F339 BDE47E           (       command.os):00943                 JSR     WRDEC                             ;OUTPUT IN DECIMAL
F33C BDE57E           (       command.os):00944                 JSR     WRMSG                             ;OUTPUT MESSAGE
F33F 2066726565       (       command.os):00945                 FCC     ' free'
F344 00               (       command.os):00946                 FCB     $00
F345 39               (       command.os):00947                 RTS
                      (       command.os):00948         ;*
                      (       command.os):00949         ;* CALCULATE # FREE SECTORS ON DISK
                      (       command.os):00950         ;*
F346                  (       command.os):00951         CALFRE
F346 3430             (       command.os):00952                 PSHS    X,Y
F348 BDE712           (       command.os):00953                 JSR     CURSIZ                            ;GET DRIVE SIZE
F34B FDDCCF           (       command.os):00954                 STD     >TEMP2                            ;SAVE # BLOCKS
F34E 1F02             (       command.os):00955                 TFR     D,Y                               ;SAVE IT
F350 4F               (       command.os):00956                 CLRA
F351 5F               (       command.os):00957                 CLRB
F352 FDDCCD           (       command.os):00958                 STD     >TEMP1                            ;SAVE COUNT
F355 C601             (       command.os):00959                 LDB     #LNKSEC                           ;GET LINK SECTORS
F357                  (       command.os):00960         DISF1
F357 FDDCCB           (       command.os):00961                 STD     >TEMP                             ;CURRENT SECTOR
F35A BDE5FC           (       command.os):00962                 JSR     RDWRK                             ;READ IT
F35D                  (       command.os):00963         DISF2
F35D EC81             (       command.os):00964                 LDD     ,X++                              ;GET SECTOR ID
F35F 2607             (       command.os):00965                 BNE     DISF3                             ;USED
F361 5C               (       command.os):00966                 INCB                                      ;GET A ONE
F362 F3DCCD           (       command.os):00967                 ADDD    >TEMP1                            ;ADVANCE COUNT
F365 FDDCCD           (       command.os):00968                 STD     >TEMP1                            ;RESAVE COUNT
F368                  (       command.os):00969         DISF3
F368 313F             (       command.os):00970                 LEAY    -1,Y                              ;REDUCE BY ONE
F36A 270D             (       command.os):00971                 BEQ     DISF4                             ;ALL DONE
F36C 8CE000           (       command.os):00972                 CMPX    #WRKSPC+512                       ;ARE WE OVER
F36F 25EC             (       command.os):00973                 BLO     DISF2                             ;NO, ITS OK
F371 FCDCCB           (       command.os):00974                 LDD     >TEMP                             ;GET SECTOR
F374 C30001           (       command.os):00975                 ADDD    #1                                ;ADVANCE
F377 20DE             (       command.os):00976                 BRA     DISF1
F379                  (       command.os):00977         DISF4
F379 FCDCCD           (       command.os):00978                 LDD     >TEMP1                            ;RECOVER IT
F37C 1A04             (       command.os):00979                 ORCC    #4
F37E 35B0             (       command.os):00980                 PULS    X,Y,PC
                      (       command.os):00981         ;* 'SET' OPERAND TABLES
F380                  (       command.os):00982         SETTAB
F380 83               (       command.os):00983                 FCB     $83
F381 4D657373616765   (       command.os):00984                 FCC     'Message'
F388 83               (       command.os):00985                 FCB     $83
F389 4465627567       (       command.os):00986                 FCC     'Debug'
F38E 82               (       command.os):00987                 FCB     $82
F38F 5472616365       (       command.os):00988                 FCC     'Trace'
F394 83               (       command.os):00989                 FCB     $83
F395 44454641554C54   (       command.os):00990                 FCC     'DEFAULT'
F39C 82               (       command.os):00991                 FCB     $82
F39D 53595354454D     (       command.os):00992                 FCC     'SYSTEM'
F3A3 82               (       command.os):00993                 FCB     $82
F3A4 46494C45         (       command.os):00994                 FCC     'FILE'
F3A8 82               (       command.os):00995                 FCB     $82
F3A9 4452495645       (       command.os):00996                 FCC     'DRIVE'
F3AE 83               (       command.os):00997                 FCB     $83
F3AF 4D454D4F5259     (       command.os):00998                 FCC     'MEMORY'
F3B5 82               (       command.os):00999                 FCB     $82
F3B6 434F4E534F4C45   (       command.os):01000                 FCC     'CONSOLE'
F3BD 82               (       command.os):01001                 FCB     $82
F3BE 46524545         (       command.os):01002                 FCC     'FREE'
F3C2 80               (       command.os):01003                 FCB     $80
                      (       command.os):01004         ;* 'SET' OPERAND HANDLERS
F3C3                  (       command.os):01005         SETADR
F3C3 F109             (       command.os):01006                 FDB     STFLAG                            ;MESSAGE
F3C5 F109             (       command.os):01007                 FDB     STFLAG                            ;DEBUG
F3C7 F109             (       command.os):01008                 FDB     STFLAG                            ;TRACE
F3C9 F011             (       command.os):01009                 FDB     SET0                              ;DEFAULT
F3CB F020             (       command.os):01010                 FDB     SET1                              ;SYSTEM
F3CD F03F             (       command.os):01011                 FDB     SET2                              ;FILE
F3CF F095             (       command.os):01012                 FDB     SET3                              ;DRIVE
F3D1 F0CD             (       command.os):01013                 FDB     SET4                              ;MEMORY
F3D3 F0E1             (       command.os):01014                 FDB     SET5                              ;CONSOLE
F3D5 E2B8             (       command.os):01015                 FDB     BADOPR                            ;FREE
F3D7 E2B8             (       command.os):01016                 FDB     BADOPR                            ;INVALID
                      (       command.os):01017         ;* 'SHOW' OPERAND HANDLERS
F3D9                  (       command.os):01018         SHOADR
F3D9 F28A             (       command.os):01019                 FDB     SHFLAG                            ;MESSAGE
F3DB F28A             (       command.os):01020                 FDB     SHFLAG                            ;DEBUG
F3DD F28A             (       command.os):01021                 FDB     SHFLAG                            ;TRACE
F3DF F144             (       command.os):01022                 FDB     SHOW0                             ;DEFAULT
F3E1 F149             (       command.os):01023                 FDB     SHOW1                             ;SYSTEM
F3E3 F16D             (       command.os):01024                 FDB     SHOW2                             ;FILE
F3E5 F20D             (       command.os):01025                 FDB     SHOW3                             ;DRIVE
F3E7 F2A8             (       command.os):01026                 FDB     SHOW4                             ;MEMORY
F3E9 F277             (       command.os):01027                 FDB     SHOW5                             ;CONSOLE
F3EB F300             (       command.os):01028                 FDB     SHOW6                             ;FREE
F3ED E2B8             (       command.os):01029                 FDB     BADOPR                            ;INVALID
                      (       command.os):01030         ;* 'SET FILE' OPTIONS
F3EF                  (       command.os):01031         SFTAB
F3EF 81               (       command.os):01032                 FCB     $81
F3F0 4C4F41445F414444 (       command.os):01033                 FCC     'LOAD_ADDRESS'
     52455353
F3FC 81               (       command.os):01034                 FCB     $81
F3FD 50524F5445435449 (       command.os):01035                 FCC     'PROTECTION'
     4F4E
F407 80               (       command.os):01036                 FCB     $80
                      (       command.os):01037         ;* 'INITIALIZE' OPTIONS
F408                  (       command.os):01038         INITAB
F408 81               (       command.os):01039                 FCB     $81
F409 496E7465726C6561 (       command.os):01040                 FCC     'Interleave'
     7665
F413 81               (       command.os):01041                 FCB     $81
F414 4469726563746F72 (       command.os):01042                 FCC     'Directory extension'
     7920657874656E73
     696F6E
                      (       command.os):01043         ;* 'SET DISK' OPTIONS
F427                  (       command.os):01044         SDTAB
F427 81               (       command.os):01045                 FCB     $81
F428 41646472657373   (       command.os):01046                 FCC     'Address'
F42F 81               (       command.os):01047                 FCB     $81
F430 43796C696E646572 (       command.os):01048                 FCC     'Cylinders'
     73
F439 81               (       command.os):01049                 FCB     $81
F43A 4865616473       (       command.os):01050                 FCC     'Heads'
F43F 81               (       command.os):01051                 FCB     $81
F440 536563746F72732F (       command.os):01052                 FCC     'Sectors/Track'
     547261636B
F44D 80               (       command.os):01053                 FCB     $80
                      (       command.os):01054         ;* FLAG ON/OFF TABLE
F44E                  (       command.os):01055         OOTAB
F44E 82               (       command.os):01056                 FCB     $82
F44F 4F4646           (       command.os):01057                 FCC     'OFF'
F452 82               (       command.os):01058                 FCB     $82
F453 4F4E             (       command.os):01059                 FCC     'ON'
F455 80               (       command.os):01060                 FCB     $80
                      (       command.os):01061         ;* 'SET CONSOLE' OPTIONS
F456                  (       command.os):01062         IOTAB
F456 81               (       command.os):01063                 FCB     $81
F457 496E707574       (       command.os):01064                 FCC     'Input'
F45C 81               (       command.os):01065                 FCB     $81
F45D 4F7574707574     (       command.os):01066                 FCC     'Output'
F463 80               (       command.os):01067                 FCB     $80
                      (        cubix.asm):01188                 INCLUDE comfile.os                        ;BATCH FILE PROCESSOR
                      (       comfile.os):00001         ;*
                      (       comfile.os):00002         ;* CUBIX Command (batch) file processor
                      (       comfile.os):00003         ;*
                      (       comfile.os):00004         ;* END OF FILE ON COMMAND FILE
F464                  (       comfile.os):00005         CMDEOF
F464 3506             (       comfile.os):00006                 PULS    A,B
F466 FDDCE6           (       comfile.os):00007                 STD     >CMDSTK
F469 B6DCE8           (       comfile.os):00008                 LDA     >CMDRC
F46C 39               (       comfile.os):00009                 RTS
                      (       comfile.os):00010         ;*
                      (       comfile.os):00011         ;* COMMAND FILE PROCESSOR
                      (       comfile.os):00012         ;*
F46D                  (       comfile.os):00013         COMFIL
F46D 3121             (       comfile.os):00014                 LEAY    1,Y                               ;SKIP '@'
F46F B7DCCD           (       comfile.os):00015                 STA     >TEMP1                            ;INDICATE NOT IMPLIED
F472                  (       comfile.os):00016         CMDEX
F472 BDE3B0           (       comfile.os):00017                 JSR     GETDIR                            ;GET DIRECTORY
F475 BDE29E           (       comfile.os):00018                 JSR     NAMGET                            ;GET NAME
F478 CC4000           (       comfile.os):00019                 LDD     #$4000                            ;'@'
F47B ED81             (       comfile.os):00020                 STD     ,X++                              ;SET IT
F47D 6F80             (       comfile.os):00021                 CLR     ,X+                               ;ZERO LAST
F47F BDE659           (       comfile.os):00022                 JSR     LOCERR                            ;LOOK IT UP
                      (       comfile.os):00023         ;* START UP COMMAND FILE DIR ENT(X)
F482                  (       comfile.os):00024         COMGO
F482 A68817           (       comfile.os):00025                 LDA     DATTR,X                           ;GET PROTS
F485 8520             (       comfile.os):00026                 BITA    #EPERM                            ;CAN WE EXECUTE?
F487 1027F422         (       comfile.os):00027                 LBEQ    PROERR                            ;NO, ERROR
F48B B6DCB7           (       comfile.os):00028                 LDA     >FDRIVE                           ;GET COMMAND FILE DRIVE
F48E B7DCE1           (       comfile.os):00029                 STA     >CMDDRV                           ;SAVE IT
F491 EC8813           (       comfile.os):00030                 LDD     DDADR,X                           ;GET ADDRESS
F494 FDDCE2           (       comfile.os):00031                 STD     >CMDSEC                           ;SAVE COMMAND SECTOR
F497 4F               (       comfile.os):00032                 CLRA
F498 5F               (       comfile.os):00033                 CLRB
F499 FDDCE4           (       comfile.os):00034                 STD     >CMDOFF                           ;SAVE COMMAND FILE OFFSET
F49C FCDCE6           (       comfile.os):00035                 LDD     >CMDSTK                           ;GET COMMAND STACK
F49F 3406             (       comfile.os):00036                 PSHS    A,B                               ;SAVE OLD STACK
F4A1 7FDCE8           (       comfile.os):00037                 CLR     >CMDRC                            ;CLEAR RETURN CODE
F4A4 10BEDCCF         (       comfile.os):00038                 LDY     >TEMP2                            ;RESTORE COMMAND LINE POINTER
F4A8 BDF5A7           (       comfile.os):00039                 JSR     SAVPRM                            ;SAVE PARAMETERS
F4AB                  (       comfile.os):00040         NEWLIN
F4AB 8EDC00           (       comfile.os):00041                 LDX     #INBUFF                           ;PT TO BUFFER
F4AE                  (       comfile.os):00042         REDCHR
F4AE BDF61B           (       comfile.os):00043                 JSR     RCCHR                             ;READ CHAR FROM CMD FILE
F4B1 27B1             (       comfile.os):00044                 BEQ     CMDEOF                            ;END OF FILE
F4B3 813F             (       comfile.os):00045                 CMPA    #'?'                              ;PARM?
F4B5 262D             (       comfile.os):00046                 BNE     NOMAC                             ;NOPE
F4B7 BDF61B           (       comfile.os):00047                 JSR     RCCHR                             ;GET CHAR
F4BA 8030             (       comfile.os):00048                 SUBA    #'0'                              ;CONVERT
F4BC 8109             (       comfile.os):00049                 CMPA    #9                                ;OVER
F4BE 2308             (       comfile.os):00050                 BLS     PAROK                             ;OK
F4C0 C63F             (       comfile.os):00051                 LDB     #'?'
F4C2 E780             (       comfile.os):00052                 STB     ,X+
F4C4 8B30             (       comfile.os):00053                 ADDA    #'0'
F4C6 201C             (       comfile.os):00054                 BRA     NOMAC                             ;NOT VAR
                      (       comfile.os):00055         ;* PARAMETER SUB TO PERFORM
F4C8                  (       comfile.os):00056         PAROK
F4C8 1F89             (       comfile.os):00057                 TFR     A,B                               ;COPY
F4CA 108EDCED         (       comfile.os):00058                 LDY     #CMDBUF                           ;POINT TO BUFFER
F4CE                  (       comfile.os):00059         PAR1
F4CE BDE4DC           (       comfile.os):00060                 JSR     SKIP                              ;ADVANCE
F4D1 5A               (       comfile.os):00061                 DECB                                      ;REDUCE COUNT
F4D2 2B07             (       comfile.os):00062                 BMI     PAR3                              ;WE HAVE IT
F4D4                  (       comfile.os):00063         PAR2
F4D4 BDE4E9           (       comfile.os):00064                 JSR     TSTERM                            ;KEEP LOOKING
F4D7 26FB             (       comfile.os):00065                 BNE     PAR2                              ;KEEP LOOKING
F4D9 20F3             (       comfile.os):00066                 BRA     PAR1                              ;CONTINUE
F4DB                  (       comfile.os):00067         PAR3
F4DB BDE4E9           (       comfile.os):00068                 JSR     TSTERM                            ;IS THIS
F4DE 27CE             (       comfile.os):00069                 BEQ     REDCHR                            ;YES, QUIT
F4E0 A780             (       comfile.os):00070                 STA     ,X+                               ;SAVE
F4E2 20F7             (       comfile.os):00071                 BRA     PAR3
                      (       comfile.os):00072         ;* EXECUTE COMMAND
F4E4                  (       comfile.os):00073         NOMAC
F4E4 A780             (       comfile.os):00074                 STA     ,X+                               ;CLEAR IT
F4E6 810D             (       comfile.os):00075                 CMPA    #$0D                              ;END OF LINE?
F4E8 26C4             (       comfile.os):00076                 BNE     REDCHR
F4EA 108EDC00         (       comfile.os):00077                 LDY     #INBUFF                           ;POINT TO BUFFER
F4EE 7DDCA4           (       comfile.os):00078                 TST     >TRCFLG                           ;TEST FOR TRACE ON
F4F1 2717             (       comfile.os):00079                 BEQ     GOCMD                             ;NO, DON'T TRACE
F4F3 862A             (       comfile.os):00080                 LDA     #'*'
F4F5 BDE59A           (       comfile.os):00081                 JSR     PUTCHR                            ;FAKE DOS PROMPT
F4F8 1F21             (       comfile.os):00082                 TFR     Y,X                               ;COPY
F4FA                  (       comfile.os):00083         TRAC1
F4FA A680             (       comfile.os):00084                 LDA     ,X+
F4FC 2709             (       comfile.os):00085                 BEQ     TRAC2
F4FE 810D             (       comfile.os):00086                 CMPA    #$0D
F500 2705             (       comfile.os):00087                 BEQ     TRAC2
F502 BDE59A           (       comfile.os):00088                 JSR     PUTCHR
F505 20F3             (       comfile.os):00089                 BRA     TRAC1
F507                  (       comfile.os):00090         TRAC2
F507 BDE588           (       comfile.os):00091                 JSR     LFCR
F50A                  (       comfile.os):00092         GOCMD
F50A BDE4DC           (       comfile.os):00093                 JSR     SKIP                              ;ADVANCE
F50D 813F             (       comfile.os):00094                 CMPA    #'?'                              ;COMMAND CODE
F50F 2659             (       comfile.os):00095                 BNE     EXDCOM                            ;NO, SKIP IT
F511 ECA1             (       comfile.os):00096                 LDD     ,Y++                              ;GET OPERAND
F513 BDE4DC           (       comfile.os):00097                 JSR     SKIP
                      (       comfile.os):00098         ;* '?O' OUTPUT LINE
F516 C14F             (       comfile.os):00099                 CMPB    #'O'                              ;OUTPUT?
F518 2704             (       comfile.os):00100                 BEQ     CMPR
                      (       comfile.os):00101         ;* '?P' ONTPUT LINE - CR
F51A C150             (       comfile.os):00102                 CMPB    #'P'                              ;PRINT?
F51C 2616             (       comfile.os):00103                 BNE     RCOND                             ;CONDITIONAL
F51E                  (       comfile.os):00104         CMPR
F51E A6A0             (       comfile.os):00105                 LDA     ,Y+                               ;GET LINE
F520 2709             (       comfile.os):00106                 BEQ     CMPR1
F522 810D             (       comfile.os):00107                 CMPA    #$0D
F524 2705             (       comfile.os):00108                 BEQ     CMPR1
F526 BDE59A           (       comfile.os):00109                 JSR     PUTCHR
F529 20F3             (       comfile.os):00110                 BRA     CMPR
F52B                  (       comfile.os):00111         CMPR1
F52B C14F             (       comfile.os):00112                 CMPB    #'O'                              ;OUTPUT?
F52D 2766             (       comfile.os):00113                 BEQ     CMDRT1                            ;NO LFCR
F52F BDE588           (       comfile.os):00114                 JSR     LFCR
F532 2061             (       comfile.os):00115                 BRA     CMDRT1                            ;BACK
                      (       comfile.os):00116         ;* '?F' EXECUTE ON LAST COMMAND FAILED
F534                  (       comfile.os):00117         RCOND
F534 C146             (       comfile.os):00118                 CMPB    #'F'                              ;?F?
F536 2607             (       comfile.os):00119                 BNE     RSUCC                             ;NO
F538 B6DCE8           (       comfile.os):00120                 LDA     >CMDRC                            ;GET RC
F53B 2758             (       comfile.os):00121                 BEQ     CMDRT1                            ;RETURN
F53D 20CB             (       comfile.os):00122                 BRA     GOCMD                             ;EXECUTE THIS
                      (       comfile.os):00123         ;* '?S' EXECUTE ON LAST COMMAND SUCESSFUL
F53F                  (       comfile.os):00124         RSUCC
F53F C153             (       comfile.os):00125                 CMPB    #'S'                              ;?S?
F541 2603             (       comfile.os):00126                 BNE     CSRC                              ;NO, TRY EXIT
F543 5F               (       comfile.os):00127                 CLRB
F544 2009             (       comfile.os):00128                 BRA     TSTRET                            ;PEFORM TEST
                      (       comfile.os):00129         ;* '?R' EXECUTE ON SPECIFIC RETURN CODE
F546                  (       comfile.os):00130         CSRC
F546 C152             (       comfile.os):00131                 CMPB    #'R'                              ;?R?
F548 260C             (       comfile.os):00132                 BNE     CEXIT                             ;TRY EXIT
F54A BDE411           (       comfile.os):00133                 JSR     GETNUM                            ;GET VALUE
F54D 1F10             (       comfile.os):00134                 TFR     X,D                               ;COPY
F54F                  (       comfile.os):00135         TSTRET
F54F F1DCE8           (       comfile.os):00136                 CMPB    >CMDRC                            ;WUZ THIS IT?
F552 2641             (       comfile.os):00137                 BNE     CMDRT1                            ;NO, DONT EXECUTE
F554 20B4             (       comfile.os):00138                 BRA     GOCMD                             ;DO IT
                      (       comfile.os):00139         ;* '?E' EXIT COMMAND FILE
F556                  (       comfile.os):00140         CEXIT
F556 C145             (       comfile.os):00141                 CMPB    #'E'                              ;EXIT
F558 263E             (       comfile.os):00142                 BNE     CMDIN                             ;NO, TRY SET VARIABLES
F55A BDE4DC           (       comfile.os):00143                 JSR     SKIP                              ;ANY OPERANDS
F55D 2708             (       comfile.os):00144                 BEQ     CEXI                              ;NO
F55F BDE411           (       comfile.os):00145                 JSR     GETNUM                            ;GT VALUE
F562 1F10             (       comfile.os):00146                 TFR     X,D                               ;COPY
F564 F7DCE8           (       comfile.os):00147                 STB     >CMDRC                            ;SET IT
F567                  (       comfile.os):00148         CEXI
F567 7EF464           (       comfile.os):00149                 JMP     CMDEOF                            ;END OF FILE
                      (       comfile.os):00150         ;* EXECUTE DOS COMMAND
F56A                  (       comfile.os):00151         EXDCOM
F56A BEDCE4           (       comfile.os):00152                 LDX     >CMDOFF                           ;GET OFFSET
F56D FCDCE2           (       comfile.os):00153                 LDD     >CMDSEC                           ;GET SECTOR
F570 3416             (       comfile.os):00154                 PSHS    A,B,X                             ;SAVE
F572 B6DCE1           (       comfile.os):00155                 LDA     >CMDDRV                           ;GET DRIVE
F575 3402             (       comfile.os):00156                 PSHS    A                                 ;SAVE
F577 10FFDCE6         (       comfile.os):00157                 STS     >CMDSTK                           ;SET STACK
F57B BDE1CD           (       comfile.os):00158                 JSR     EXECMD                            ;EXECUTE
F57E                  (       comfile.os):00159         CMDRET
F57E 2601             (       comfile.os):00160                 BNE     CMDRT0
F580 4F               (       comfile.os):00161                 CLRA
F581                  (       comfile.os):00162         CMDRT0
F581 B7DCE8           (       comfile.os):00163                 STA     >CMDRC                            ;SET RC
F584 10FEDCE6         (       comfile.os):00164                 LDS     >CMDSTK                           ;GET STACK
F588 3502             (       comfile.os):00165                 PULS    A                                 ;RESTORE DRIVE
F58A B7DCE1           (       comfile.os):00166                 STA     >CMDDRV                           ;RESAVE
F58D 3516             (       comfile.os):00167                 PULS    A,B,X                             ;RESTORE VARS
F58F FDDCE2           (       comfile.os):00168                 STD     >CMDSEC                           ;RESET SECTOR
F592 BFDCE4           (       comfile.os):00169                 STX     >CMDOFF                           ;RESET OFFSET
F595                  (       comfile.os):00170         CMDRT1
F595 7EF4AB           (       comfile.os):00171                 JMP     NEWLIN                            ;LFCR & RETURN
                      (       comfile.os):00172         ;* '?=' SET COMMAND FILE VARIABLES
F598                  (       comfile.os):00173         CMDIN
F598 C13D             (       comfile.os):00174                 CMPB    #'='
F59A 2707             (       comfile.os):00175                 BEQ     SETVAR                            ;SET THEM
                      (       comfile.os):00176         ;* '?I' INPUT NEW PARMS
F59C C149             (       comfile.os):00177                 CMPB    #'I'                              ;NEW PARMS?
F59E 2618             (       comfile.os):00178                 BNE     CHAIN                             ;NO, TRY CHAIN
F5A0 BDE4A5           (       comfile.os):00179                 JSR     GLINE                             ;GET LINE
F5A3                  (       comfile.os):00180         SETVAR
F5A3 8D02             (       comfile.os):00181                 BSR     SAVPRM                            ;SAVE THEM
F5A5 20EE             (       comfile.os):00182                 BRA     CMDRT1                            ;CONTINUE
                      (       comfile.os):00183         ;* SAVE COMMAND LINE PARAMETERS IN BUFFER
F5A7                  (       comfile.os):00184         SAVPRM
F5A7 3410             (       comfile.os):00185                 PSHS    X                                 ;SAVE REGS
F5A9 8EDCED           (       comfile.os):00186                 LDX     #CMDBUF                           ;POINT TO IT
F5AC                  (       comfile.os):00187         SAVP1
F5AC A6A0             (       comfile.os):00188                 LDA     ,Y+                               ;GET IT
F5AE A780             (       comfile.os):00189                 STA     ,X+                               ;WRITE IT
F5B0 2704             (       comfile.os):00190                 BEQ     SAVP2                             ;END
F5B2 810D             (       comfile.os):00191                 CMPA    #$0D                              ;OK?
F5B4 26F6             (       comfile.os):00192                 BNE     SAVP1                             ;KEEP GOING
F5B6                  (       comfile.os):00193         SAVP2
F5B6 3590             (       comfile.os):00194                 PULS    X,PC                              ;GO HOME
                      (       comfile.os):00195         ;* '?@' CHAIN TO NEW CMD FILE
F5B8                  (       comfile.os):00196         CHAIN
F5B8 C140             (       comfile.os):00197                 CMPB    #'@'
F5BA 2608             (       comfile.os):00198                 BNE     CMDSKP
F5BC 3506             (       comfile.os):00199                 PULS    A,B                               ;RESTORE STACK
F5BE FDDCE6           (       comfile.os):00200                 STD     >CMDSTK                           ;RESET SAVED STACK
F5C1 7EF472           (       comfile.os):00201                 JMP     CMDEX                             ;EXECUTE IT
                      (       comfile.os):00202         ;* '?A' ADVANCE LINES
F5C4                  (       comfile.os):00203         CMDSKP
F5C4 C141             (       comfile.os):00204                 CMPB    #'A'                              ;?A?
F5C6 2613             (       comfile.os):00205                 BNE     CMDKEY                            ;CONTINUE
F5C8 BDE411           (       comfile.os):00206                 JSR     GETNUM                            ;GET # TO SKIP
F5CB 3001             (       comfile.os):00207                 LEAX    1,X                               ;ADVANCE
F5CD                  (       comfile.os):00208         LOCLP
F5CD 301F             (       comfile.os):00209                 LEAX    -1,X                              ;REDUCE COUNT
F5CF 27C4             (       comfile.os):00210                 BEQ     CMDRT1                            ;NEW LINE
F5D1                  (       comfile.os):00211         LOCCR
F5D1 8D48             (       comfile.os):00212                 BSR     RCCHR                             ;READ A CHAR
F5D3 2792             (       comfile.os):00213                 BEQ     CEXI                              ;END OF FILE
F5D5 810D             (       comfile.os):00214                 CMPA    #$0D                              ;END OF LINE?
F5D7 26F8             (       comfile.os):00215                 BNE     LOCCR                             ;NO, KEEP LOOKING
F5D9 20F2             (       comfile.os):00216                 BRA     LOCLP                             ;DO THEM ALL
                      (       comfile.os):00217         ;* '?K' READ SINGLE KEY
F5DB                  (       comfile.os):00218         CMDKEY
F5DB C14B             (       comfile.os):00219                 CMPB    #'K'                              ;?K?
F5DD 2608             (       comfile.os):00220                 BNE     CMDCMP                            ;NO, TRY COMPARE
F5DF BDE5DA           (       comfile.os):00221                 JSR     GETCHR                            ;GET SINGLE KEY
F5E2 B7DCE8           (       comfile.os):00222                 STA     >CMDRC                            ;SAVE RETURN CODE
F5E5 2031             (       comfile.os):00223                 BRA     CMDRT2                            ;EXIT
                      (       comfile.os):00224         ;* '??' COMPARE STRINGS
F5E7                  (       comfile.os):00225         CMDCMP
F5E7 C13F             (       comfile.os):00226                 CMPB    #'?'                              ;???
F5E9 262D             (       comfile.os):00227                 BNE     CMDRT2                            ;IGNORE
F5EB BDE4DC           (       comfile.os):00228                 JSR     SKIP                              ;TEST FOR EOL
F5EE 2716             (       comfile.os):00229                 BEQ     CMDC3                             ;FAIL
F5F0 1F21             (       comfile.os):00230                 TFR     Y,X                               ;SAVE PTR
F5F2                  (       comfile.os):00231         CMDC1
F5F2 A6A0             (       comfile.os):00232                 LDA     ,Y+                               ;GET CHAR
F5F4 810D             (       comfile.os):00233                 CMPA    #$0D                              ;CR?
F5F6 270E             (       comfile.os):00234                 BEQ     CMDC3                             ;FAIL
F5F8 8120             (       comfile.os):00235                 CMPA    #' '                              ;SPACE?
F5FA 26F6             (       comfile.os):00236                 BNE     CMDC1                             ;KEEP LOOKING
F5FC                  (       comfile.os):00237         CMDC2
F5FC A680             (       comfile.os):00238                 LDA     ,X+                               ;GET CHAR
F5FE 8120             (       comfile.os):00239                 CMPA    #' '                              ;SPACE?
F600 2708             (       comfile.os):00240                 BEQ     CMDC4                             ;END
F602 A1A0             (       comfile.os):00241                 CMPA    ,Y+                               ;ARE THEY SAME?
F604 27F6             (       comfile.os):00242                 BEQ     CMDC2                             ;YES, A-OK
F606                  (       comfile.os):00243         CMDC3
F606 86FF             (       comfile.os):00244                 LDA     #255                              ;RETURN CODE
F608 200B             (       comfile.os):00245                 BRA     CMDC6                             ;QUIT
F60A                  (       comfile.os):00246         CMDC4
F60A A6A0             (       comfile.os):00247                 LDA     ,Y+                               ;GET CHAR FROM SOURCE
F60C 810D             (       comfile.os):00248                 CMPA    #$0D                              ;PASS?
F60E 2704             (       comfile.os):00249                 BEQ     CMDC5                             ;YES
F610 8120             (       comfile.os):00250                 CMPA    #' '                              ;SPACE
F612 26F2             (       comfile.os):00251                 BNE     CMDC3                             ;NO, FAIL
F614                  (       comfile.os):00252         CMDC5
F614 4F               (       comfile.os):00253                 CLRA                                      ;ZERO RETURN CODE
F615                  (       comfile.os):00254         CMDC6
F615 B7DCE8           (       comfile.os):00255                 STA     >CMDRC                            ;SAVE RETURN CODE
F618                  (       comfile.os):00256         CMDRT2
F618 7EF4AB           (       comfile.os):00257                 JMP     NEWLIN                            ;NEXT LINE
                      (       comfile.os):00258         ;* READ A CHARACTER FROM THE COMMAND FILE
F61B                  (       comfile.os):00259         RCCHR
F61B 3410             (       comfile.os):00260                 PSHS    X                                 ;SAVE X
F61D B6DCE1           (       comfile.os):00261                 LDA     >CMDDRV                           ;GET CMD FILE DRIVE
F620 B7DCEB           (       comfile.os):00262                 STA     >SDRIVE                           ;SET DRIVE
F623 FCDCE4           (       comfile.os):00263                 LDD     >CMDOFF                           ;GET OFFSET
F626                  (       comfile.os):00264         RCC1
F626 10830200         (       comfile.os):00265                 CMPD    #512                              ;OVER?
F62A 250D             (       comfile.os):00266                 BLO     RCC2                              ;ITS OK
F62C FCDCE2           (       comfile.os):00267                 LDD     >CMDSEC                           ;GET SECTOR
F62F BDE5DF           (       comfile.os):00268                 JSR     FNDLNK                            ;LOOK UP LINK
F632 271E             (       comfile.os):00269                 BEQ     RCC3                              ;END
F634 FDDCE2           (       comfile.os):00270                 STD     >CMDSEC                           ;RESAVE
F637 4F               (       comfile.os):00271                 CLRA    ZERO OFFSET
F638 5F               (       comfile.os):00272                 CLRB    FOR READ
F639                  (       comfile.os):00273         RCC2
F639 8EDE00           (       comfile.os):00274                 LDX     #WRKSPC                           ;POINT TO IT
F63C 308B             (       comfile.os):00275                 LEAX    D,X                               ;OFFSET
F63E C30001           (       comfile.os):00276                 ADDD    #1                                ;ADVANCE
F641 FDDCE4           (       comfile.os):00277                 STD     >CMDOFF                           ;RESAVE
F644 3410             (       comfile.os):00278                 PSHS    X                                 ;SAVE REGS
F646 FCDCE2           (       comfile.os):00279                 LDD     >CMDSEC                           ;GET SECTOR
F649 BDE5FC           (       comfile.os):00280                 JSR     RDWRK                             ;READ IT
F64C 3510             (       comfile.os):00281                 PULS    X                                 ;RESTORE
F64E A680             (       comfile.os):00282                 LDA     ,X+                               ;GET CHAR
F650 81FF             (       comfile.os):00283                 CMPA    #$FF                              ;END OF FILE
F652                  (       comfile.os):00284         RCC3
F652 3590             (       comfile.os):00285                 PULS    X,PC
                      (        cubix.asm):01189         ;*
                      (        cubix.asm):01190         ;* MISC SYSTEM CALLS
                      (        cubix.asm):01191         ;*
                      (        cubix.asm):01192         ;* QUERY CONSOLE INPUT DEVICE
F654                  (        cubix.asm):01193         REDIN
F654 B6DC6C           (        cubix.asm):01194                 LDA     >CONIN                            ;LOAD DEVICE INPUT VECTOR
F657 2020             (        cubix.asm):01195                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01196         ;* QUERY CONSOLE OUTPUT DEVICE
F659                  (        cubix.asm):01197         REDOUT
F659 B6DC6D           (        cubix.asm):01198                 LDA     >CONOUT                           ;LOAD DEVICE OUTPUT VECTOR
F65C 201B             (        cubix.asm):01199                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01200         ;* SET CONSOLE INPUT DEVICE
F65E                  (        cubix.asm):01201         SETIN
F65E 3404             (        cubix.asm):01202                 PSHS    B                                 ;SAVE REGISTER
F660 F6DC6C           (        cubix.asm):01203                 LDB     >CONIN                            ;LOAD OLD INPUT DEVICE
F663 B7DC6C           (        cubix.asm):01204                 STA     >CONIN                            ;SAVE NEW INPUT DEVICE
F666 2008             (        cubix.asm):01205                 BRA     REEXG                             ;SWAP & RETURN
                      (        cubix.asm):01206         ;* SET CONSOLE OUTPUT DEVICE
F668                  (        cubix.asm):01207         SETOUT
F668 3404             (        cubix.asm):01208                 PSHS    B                                 ;SAVE REGISTER
F66A F6DC6D           (        cubix.asm):01209                 LDB     >CONOUT                           ;LOAD OLD OUTPUT DEVICE
F66D B7DC6D           (        cubix.asm):01210                 STA     >CONOUT                           ;SAVE NEW OUTPUT DEVICE
F670                  (        cubix.asm):01211         REEXG
F670 1F98             (        cubix.asm):01212                 TFR     B,A                               ;COPY OLD DEVICE ID TO 'A'
F672 1A04             (        cubix.asm):01213                 ORCC    #4                                ;SET 'Z' CODE
F674 3584             (        cubix.asm):01214                 PULS    B,PC                              ;RESTORE & RETURN
                      (        cubix.asm):01215         ;* SELECT DISK DRIVE
F676                  (        cubix.asm):01216         SELDRV
F676 B7DCEB           (        cubix.asm):01217                 STA     >SDRIVE                           ;SELECT ACTIVE DISK DRIVE
F679                  (        cubix.asm):01218         RETZ
F679 1A04             (        cubix.asm):01219                 ORCC    #4                                ;SET 'Z' CODE
F67B 39               (        cubix.asm):01220                 RTS
                      (        cubix.asm):01221         ;* QUERY DEVICE VECTOR
F67C                  (        cubix.asm):01222         QVECT
F67C 3440             (        cubix.asm):01223                 PSHS    U                                 ;SAVE REGISTER
F67E CEDC6E           (        cubix.asm):01224                 LDU     #DITAB                            ;POINT TO TABLE
F681 48               (        cubix.asm):01225                 LSLA                                      ;X2 FOR WORD ENTRIES
F682 ECC6             (        cubix.asm):01226                 LDD     A,U                               ;GET VECTOR
F684 200C             (        cubix.asm):01227                 BRA     RETZ1                             ;AND EXIT
                      (        cubix.asm):01228         ;* SET DEVICE VECTOR
F686                  (        cubix.asm):01229         SVECT
F686 3440             (        cubix.asm):01230                 PSHS    U                                 ;SAVE REGISTER
F688 CEDC6E           (        cubix.asm):01231                 LDU     #DITAB                            ;POINT TO TABLE
F68B 48               (        cubix.asm):01232                 LSLA                                      ;X2  FOR WORD ENTRIES
F68C 33C6             (        cubix.asm):01233                 LEAU    A,U                               ;OFFSET TO ENTRY
F68E ECC4             (        cubix.asm):01234                 LDD     ,U                                ;GET OLD VECTOR VALUE
F690 AFC4             (        cubix.asm):01235                 STX     ,U                                ;SET NEW VECTOR VALUE
F692                  (        cubix.asm):01236         RETZ1
F692 1A04             (        cubix.asm):01237                 ORCC    #4                                ;SET 'Z' CODE
F694 35C0             (        cubix.asm):01238                 PULS    U,PC                              ;RESTORE & RETURN
                      (        cubix.asm):01239         ;*
                      (        cubix.asm):01240         ;* PERFORMS 16 BIT MULTIPLICATION (D=X*D)
                      (        cubix.asm):01241         ;*
F696                  (        cubix.asm):01242         MUL16
F696 3416             (        cubix.asm):01243                 PSHS    D,X                               ;SAVE PARAMETERS
F698 A661             (        cubix.asm):01244                 LDA     1,S
F69A E663             (        cubix.asm):01245                 LDB     3,S
F69C 3D               (        cubix.asm):01246                 MUL
F69D 3406             (        cubix.asm):01247                 PSHS    A,B                               ;RESAVE
F69F A662             (        cubix.asm):01248                 LDA     2,S
F6A1 E665             (        cubix.asm):01249                 LDB     5,S
F6A3 3D               (        cubix.asm):01250                 MUL
F6A4 EBE4             (        cubix.asm):01251                 ADDB    ,S
F6A6 E7E4             (        cubix.asm):01252                 STB     ,S
F6A8 A663             (        cubix.asm):01253                 LDA     3,S
F6AA E664             (        cubix.asm):01254                 LDB     4,S
F6AC 3D               (        cubix.asm):01255                 MUL
F6AD EBE4             (        cubix.asm):01256                 ADDB    ,S
F6AF E7E4             (        cubix.asm):01257                 STB     ,S
F6B1 3506             (        cubix.asm):01258                 PULS    A,B                               ;GET RESULT
F6B3 3264             (        cubix.asm):01259                 LEAS    4,S                               ;SKIP CRAP
F6B5 39               (        cubix.asm):01260                 RTS
                      (        cubix.asm):01261         ;*
                      (        cubix.asm):01262         ;* PERFORMS 16 BIT DIVISION. (X=X/D, D=REMAINDER)
                      (        cubix.asm):01263         ;*
F6B6                  (        cubix.asm):01264         DIV16
F6B6 3416             (        cubix.asm):01265                 PSHS    D,X
F6B8 CC0000           (        cubix.asm):01266                 LDD     #0
F6BB 8E0011           (        cubix.asm):01267                 LDX     #17
F6BE                  (        cubix.asm):01268         DIV1
F6BE 1CFE             (        cubix.asm):01269                 ANDCC   #$FE
F6C0                  (        cubix.asm):01270         DIV2
F6C0 6963             (        cubix.asm):01271                 ROL     3,S
F6C2 6962             (        cubix.asm):01272                 ROL     2,S
F6C4 301F             (        cubix.asm):01273                 LEAX    -1,X
F6C6 270D             (        cubix.asm):01274                 BEQ     DIV3
F6C8 59               (        cubix.asm):01275                 ROLB
F6C9 49               (        cubix.asm):01276                 ROLA
F6CA 10A3E4           (        cubix.asm):01277                 CMPD    ,S
F6CD 25EF             (        cubix.asm):01278                 BLO     DIV1
F6CF A3E4             (        cubix.asm):01279                 SUBD    ,S
F6D1 1A01             (        cubix.asm):01280                 ORCC    #1
F6D3 20EB             (        cubix.asm):01281                 BRA     DIV2
F6D5                  (        cubix.asm):01282         DIV3
F6D5 3262             (        cubix.asm):01283                 LEAS    2,S
F6D7 3590             (        cubix.asm):01284                 PULS    X,PC
                      (        cubix.asm):01285         ;* DISK DRIVERS
F6D9                  (        cubix.asm):01286         FORMAT
F6D9 AD9FDC94         (        cubix.asm):01287                 JSR     [XFORMAT]
F6DD                  (        cubix.asm):01288         HOME
F6DD 6F44             (        cubix.asm):01289                 CLR     CYL,U                             ;CYLINDER 0
F6DF 6F45             (        cubix.asm):01290                 CLR     HEAD,U                            ;HEAD 0
F6E1 6F46             (        cubix.asm):01291                 CLR     SEC,U                             ;SECTOR 0
F6E3 6E9FDC8E         (        cubix.asm):01292                 JMP     [XHOME]
F6E7                  (        cubix.asm):01293         RDSEC
F6E7 6E9FDC90         (        cubix.asm):01294                 JMP     [XRDSEC]
F6EB                  (        cubix.asm):01295         WRSEC
F6EB 6E9FDC92         (        cubix.asm):01296                 JMP     [XWRSEC]
                      (        cubix.asm):01297         ;* INTERRUPT HANDLERS
F6EF                  (        cubix.asm):01298         SWI
F6EF 6E9FDC96         (        cubix.asm):01299                 JMP     [SWIVEC]
F6F3                  (        cubix.asm):01300         SWI2
F6F3 6E9FDC98         (        cubix.asm):01301                 JMP     [SWI2VEC]
F6F7                  (        cubix.asm):01302         SWI3
F6F7 6E9FDC9A         (        cubix.asm):01303                 JMP     [SWI3VEC]
F6FB                  (        cubix.asm):01304         IRQ
F6FB 6E9FDC9C         (        cubix.asm):01305                 JMP     [IRQVEC]
F6FF                  (        cubix.asm):01306         FIRQ
F6FF 6E9FDC9E         (        cubix.asm):01307                 JMP     [FIRQVEC]
F703                  (        cubix.asm):01308         NMI
F703 6E9FDCA0         (        cubix.asm):01309                 JMP     [NMIVEC]
                      (        cubix.asm):01310         ;* STRINGS & MESSAGES
F707                  (        cubix.asm):01311         IPLFILE
F707 535441525455502E (        cubix.asm):01312                 FCC     'STARTUP.*'
     2A
F710 00               (        cubix.asm):01313                 FCB     $00
F711                  (        cubix.asm):01314         UNCMD
F711 556E7265636F676E (        cubix.asm):01315                 FCC     'Unrecognized command'
     697A656420636F6D
     6D616E64
F725 00               (        cubix.asm):01316                 FCB     $00
F726                  (        cubix.asm):01317         BADOPM
F726 4F706572616E6420 (        cubix.asm):01318                 FCC     'Operand missing or invalid'
     6D697373696E6720
     6F7220696E76616C
     6964
F740 00               (        cubix.asm):01319                 FCB     $00
F741                  (        cubix.asm):01320         NOTMSG
F741 46696C65206E6F74 (        cubix.asm):01321                 FCC     'File not found'
     20666F756E64
F74F 00               (        cubix.asm):01322                 FCB     $00
F750                  (        cubix.asm):01323         EXIMSG
F750 46696C6520616C72 (        cubix.asm):01324                 FCC     'File already exists'
     6561647920657869
     737473
F763 00               (        cubix.asm):01325                 FCB     $00
F764                  (        cubix.asm):01326         NOSMSG
F764 496E737566666963 (        cubix.asm):01327                 FCC     'Insufficent disk space'
     656E74206469736B
     207370616365
F77A 00               (        cubix.asm):01328                 FCB     $00
F77B                  (        cubix.asm):01329         OREMSG
F77B 46696C65206E6F74 (        cubix.asm):01330                 FCC     'File not open for read'
     206F70656E20666F
     722072656164
F791 00               (        cubix.asm):01331                 FCB     $00
F792                  (        cubix.asm):01332         OWEMSG
F792 46696C65206E6F74 (        cubix.asm):01333                 FCC     'File not open for write'
     206F70656E20666F
     72207772697465
F7A9 00               (        cubix.asm):01334                 FCB     $00
F7AA                  (        cubix.asm):01335         PROMSG
F7AA 46696C652070726F (        cubix.asm):01336                 FCC     'File protection violation'
     74656374696F6E20
     76696F6C6174696F
     6E
F7C3 00               (        cubix.asm):01337                 FCB     $00
F7C4                  (        cubix.asm):01338         DEVMSG
F7C4 496E76616C696420 (        cubix.asm):01339                 FCC     'Invalid device'
     646576696365
F7D2 00               (        cubix.asm):01340                 FCB     $00
F7D3                  (        cubix.asm):01341         DNLMSG
F7D3 446F776E6C6F6164 (        cubix.asm):01342                 FCC     'Download format error'
     20666F726D617420
     6572726F72
F7E8 00               (        cubix.asm):01343                 FCB     $00
                      (        cubix.asm):01344         ;* COMMAND NAME TABLE
F7E9                  (        cubix.asm):01345         CMDNAM
F7E9 84               (        cubix.asm):01346                 FCB     $84
F7EA 464F524D4154     (        cubix.asm):01347                 FCC     'FORMAT'
F7F0 82               (        cubix.asm):01348                 FCB     $82
F7F1 52454144         (        cubix.asm):01349                 FCC     'READ'
F7F5 82               (        cubix.asm):01350                 FCB     $82
F7F6 5752495445       (        cubix.asm):01351                 FCC     'WRITE'
F7FB 82               (        cubix.asm):01352                 FCB     $82
F7FC 46494C4553       (        cubix.asm):01353                 FCC     'FILES'
F801 82               (        cubix.asm):01354                 FCB     $82
F802 435245415445     (        cubix.asm):01355                 FCC     'CREATE'
F808 83               (        cubix.asm):01356                 FCB     $83
F809 44454C455445     (        cubix.asm):01357                 FCC     'DELETE'
F80F 82               (        cubix.asm):01358                 FCB     $82
F810 4C4F4144         (        cubix.asm):01359                 FCC     'LOAD'
F814 82               (        cubix.asm):01360                 FCB     $82
F815 53415645         (        cubix.asm):01361                 FCC     'SAVE'
F819 82               (        cubix.asm):01362                 FCB     $82
F81A 52554E           (        cubix.asm):01363                 FCC     'RUN'
F81D 82               (        cubix.asm):01364                 FCB     $82
F81E 52455455524E     (        cubix.asm):01365                 FCC     'RETURN'
F824 82               (        cubix.asm):01366                 FCB     $82
F825 534554           (        cubix.asm):01367                 FCC     'SET'
F828 82               (        cubix.asm):01368                 FCB     $82
F829 53484F57         (        cubix.asm):01369                 FCC     'SHOW'
F82D 82               (        cubix.asm):01370                 FCB     $82
F82E 444F574E4C4F4144 (        cubix.asm):01371                 FCC     'DOWNLOAD'
F836 82               (        cubix.asm):01372                 FCB     $82
F837 434F4E4E454354   (        cubix.asm):01373                 FCC     'CONNECT'
F83E 80               (        cubix.asm):01374                 FCB     $80
                      (        cubix.asm):01375         ;* COMMAND ADDRESS TABLE
F83F                  (        cubix.asm):01376         CMDADR
F83F EBFE             (        cubix.asm):01377                 FDB     INIT
F841 ED07             (        cubix.asm):01378                 FDB     CREAD
F843 ED37             (        cubix.asm):01379                 FDB     CWRITE
F845 ED67             (        cubix.asm):01380                 FDB     FILES
F847 ED8B             (        cubix.asm):01381                 FDB     CREFIL
F849 EDA2             (        cubix.asm):01382                 FDB     DELFIL
F84B EE55             (        cubix.asm):01383                 FDB     LODFIL
F84D EE86             (        cubix.asm):01384                 FDB     SAVFIL
F84F E1F7             (        cubix.asm):01385                 FDB     RUN
F851 EEE7             (        cubix.asm):01386                 FDB     RETURN
F853 F000             (        cubix.asm):01387                 FDB     SET
F855 F138             (        cubix.asm):01388                 FDB     SHOW
F857 EF0E             (        cubix.asm):01389                 FDB     DNLD
F859 EFDC             (        cubix.asm):01390                 FDB     CNCT
     000E             (        cubix.asm):01391         NUMCMD          EQU (*-CMDADR)/2                  ;NUMBER OF COMMANDS
                      (        cubix.asm):01392         ;* APPLICATION PROGRAM INTERFACE ADDRESS TABLE
F85B                  (        cubix.asm):01393         SSRTAB
F85B E1AC             (        cubix.asm):01394                 FDB     REENT                             ;00-DOS RE-ENTRY
                      (        cubix.asm):01395         ;* PARAM. & LINE INPUT
F85D E4A5             (        cubix.asm):01396                 FDB     GLINE                             ;01-GET LINE/PROMPT
F85F E4A2             (        cubix.asm):01397                 FDB     GLFCR                             ;02-GET LINE/NEW LINE
F861 E4AA             (        cubix.asm):01398                 FDB     GLNOP                             ;03-GET LINE/NO PROMPT
F863 E4DC             (        cubix.asm):01399                 FDB     SKIP                              ;04-SKIP TO NEXT NON-BLANK, 'Z' IF EOL
F865 E4E9             (        cubix.asm):01400                 FDB     TSTERM                            ;05-GET CHR(Y+), TEST FOR TERMINATOR
F867 E456             (        cubix.asm):01401                 FDB     GETDEC                            ;06-GET DECIMAL NUMBER
F869 E41C             (        cubix.asm):01402                 FDB     GETHEX                            ;07-GET HEX NUMBER
F86B E411             (        cubix.asm):01403                 FDB     GETNUM                            ;08-GET DECIMAL OR HEX VALUE
F86D E377             (        cubix.asm):01404                 FDB     GETNAM                            ;09-GET FILENAME
F86F E370             (        cubix.asm):01405                 FDB     GETVAL                            ;10-GET & INSURE SINGLE FILE
F871 E296             (        cubix.asm):01406                 FDB     GETSNA                            ;11-GET FILENAME/NO TYPE
F873 E31A             (        cubix.asm):01407                 FDB     GETSYS                            ;12-GET FILENAME/NO TYPE/DEFAULT SYSTEM
F875 E31D             (        cubix.asm):01408                 FDB     GETSDI                            ;13-GET FILENAME/NO TYPE/DEFAULT(X)
F877 E3B0             (        cubix.asm):01409                 FDB     GETDIR                            ;14-GET DIRECTORY NAME
F879 E3B3             (        cubix.asm):01410                 FDB     GETDIR1                           ;15-GET DIRECTORY, DEFAULT(X)
F87B E3FF             (        cubix.asm):01411                 FDB     GETDRV                            ;16-GET DRIVE ID
F87D F06E             (        cubix.asm):01412                 FDB     GETATR                            ;17-GET ATTRIBUTES
F87F E505             (        cubix.asm):01413                 FDB     TLOOK                             ;18-TABLE LOOKUP
F881 E323             (        cubix.asm):01414                 FDB     COMNAM                            ;19-COMPARE NAMES
F883 E35C             (        cubix.asm):01415                 FDB     VALID                             ;20-TEST FOR VALID AS SINGLE?
                      (        cubix.asm):01416         ;* CONSOLE OUTPUT
F885 E592             (        cubix.asm):01417                 FDB     SPACE                             ;21-OUTPUT SPACE
F887 E588             (        cubix.asm):01418                 FDB     LFCR                              ;22-OUTPUT LFCR
F889 E574             (        cubix.asm):01419                 FDB     WRSTR                             ;23-OUTPUT STRING(X)
F88B E54E             (        cubix.asm):01420                 FDB     WRLIN                             ;24-OUTPUT STRING(PC)/NO LFCR
F88D E57E             (        cubix.asm):01421                 FDB     WRMSG                             ;25-OUTPUT STRING(PC)/LFCR
F88F E47E             (        cubix.asm):01422                 FDB     WRDEC                             ;26-OUTPUT WORD(D) DECIMAL
F891 E545             (        cubix.asm):01423                 FDB     WRHEXW                            ;27-OUTPUT WORD(D) IN HEX
F893 E55A             (        cubix.asm):01424                 FDB     WRHEX                             ;28-OUTPUT BYTE(A) IN HEX
F895 E568             (        cubix.asm):01425                 FDB     HOUT                              ;29-OUTPUT NIBBLE(A) IN HEX
F897 E6D7             (        cubix.asm):01426                 FDB     SHOSAV                            ;30-DISPLAY SAVED FILENAME
F899 E6EA             (        cubix.asm):01427                 FDB     SHONAM                            ;31-DISPLAY FILENAME(X)
F89B F259             (        cubix.asm):01428                 FDB     SHOTAB                            ;32-SHOW TABLE(X) ENTRY(A)
                      (        cubix.asm):01429         ;* SERIAL DEVICE I/O
F89D E59A             (        cubix.asm):01430                 FDB     PUTCHR                            ;33-OUTPUT CHAR(A)
F89F E5DA             (        cubix.asm):01431                 FDB     GETCHR                            ;34-GET A CHAR
F8A1 E5D3             (        cubix.asm):01432                 FDB     TSTCHR                            ;35-TEST FOR CHAR
F8A3 E5A1             (        cubix.asm):01433                 FDB     WRDEV                             ;36-OUTPUT CHAR(A) TO DEVICE(B)
F8A5 E5BC             (        cubix.asm):01434                 FDB     RDDEV                             ;37-GET CHAR FROM DEVICE(B)
F8A7 E5C1             (        cubix.asm):01435                 FDB     TSTDEV                            ;38-TEST FOR CHAR FROM DEV(B)
F8A9 F654             (        cubix.asm):01436                 FDB     REDIN                             ;39-READ INPUT DEVICE NUMBER
F8AB F659             (        cubix.asm):01437                 FDB     REDOUT                            ;40-READ OUTPUT DEVICE NUMBER
F8AD F65E             (        cubix.asm):01438                 FDB     SETIN                             ;41-SET INPUT DEVICE
F8AF F668             (        cubix.asm):01439                 FDB     SETOUT                            ;42-SET OUTPUT DEVICE
                      (        cubix.asm):01440         ;* CANNED ERROR MESSAGES
F8B1 E2B8             (        cubix.asm):01441                 FDB     BADOPR                            ;43-OPERAND MISSING OR INVALID
F8B3 E65D             (        cubix.asm):01442                 FDB     NOTFND                            ;44-FILE NOT FOUND
F8B5 E8AD             (        cubix.asm):01443                 FDB     PROERR                            ;45-PROTECTION VIOLATION
F8B7 E8B6             (        cubix.asm):01444                 FDB     ORERR                             ;46-FILE NOT OPEN FOR READ
F8B9 E92A             (        cubix.asm):01445                 FDB     OWERR                             ;47-FILE NOT OPEN FOR WRITE
F8BB E730             (        cubix.asm):01446                 FDB     FEXISTS                           ;48-FILE ALREADY EXISTS
F8BD E7D3             (        cubix.asm):01447                 FDB     NOSPAC                            ;49-INSUFFICENT DISK SPACE
F8BF E5B4             (        cubix.asm):01448                 FDB     BADDEV                            ;50-INVALID DEVICE
F8C1 EFAE             (        cubix.asm):01449                 FDB     LODERR                            ;51-DOWNLOAD FORMAT ERROR
F8C3 E663             (        cubix.asm):01450                 FDB     FILERR                            ;52-ISSUE ERROR MSG(Y) FOR SAVED FILE
                      (        cubix.asm):01451         ;* FILE I/O
F8C5 EE49             (        cubix.asm):01452                 FDB     BLOAD                             ;53-LOAD COMPLETE FILE TO MEMORY
F8C7 EE7E             (        cubix.asm):01453                 FDB     BSAVE                             ;54-SAVE COMPLETE FILE FROM MEMORY
F8C9 E80C             (        cubix.asm):01454                 FDB     OPENR                             ;55-OPEN A FILE FOR READ
F8CB E8E8             (        cubix.asm):01455                 FDB     OPENW                             ;56-OPEN A FILE FOR WRITE
F8CD E970             (        cubix.asm):01456                 FDB     CLOSE                             ;57-CLOSE A FILE
F8CF E879             (        cubix.asm):01457                 FDB     READB                             ;58-READ BLOCK FROM FILE
F8D1 E82E             (        cubix.asm):01458                 FDB     READC                             ;59-READ CHAR FROM FILE
F8D3 E932             (        cubix.asm):01459                 FDB     WRITEB                            ;60-WRITE A BLOCK TO FILE
F8D5 E90B             (        cubix.asm):01460                 FDB     WRITEC                            ;61-WRITE A CHAR TO FILE
F8D7 E8C3             (        cubix.asm):01461                 FDB     REWIND                            ;62-RESET FILE TO BEGINNING
F8D9 E9BF             (        cubix.asm):01462                 FDB     SEEKREL                           ;63-SEEK RELATIVE POSITION IN FILE
F8DB E9BC             (        cubix.asm):01463                 FDB     SEEKABS                           ;64-SEEK ABSOLUTE LOCATION IN FILE
F8DD EA0D             (        cubix.asm):01464                 FDB     FTELL                             ;65-RETURN POSITION IN FILE
F8DF EA39             (        cubix.asm):01465                 FDB     SUSPEND                           ;66-SUSPEND FILE OPERATIONS
F8E1 EA8B             (        cubix.asm):01466                 FDB     RESUME                            ;67-RESUME FILE OPERATIONS
                      (        cubix.asm):01467         ;* FILE SYSTEM MAINTAINENCE
F8E3 E692             (        cubix.asm):01468                 FDB     LOCDIR                            ;68-LOCATE FILE IN DIRECTORY, NO ERROR/MESSAGE
F8E5 E659             (        cubix.asm):01469                 FDB     LOCERR                            ;69-LOCATE FILE IN DIR/ISSUE ERROR IF NOT FOUND
F8E7 E8A3             (        cubix.asm):01470                 FDB     LOCRED                            ;70-LOCATE FILE WITH INTENT TO READ
F8E9 E8D1             (        cubix.asm):01471                 FDB     LOCWRI                            ;71-LOCATE FILE WITH INTENT TO WRITE
F8EB E724             (        cubix.asm):01472                 FDB     CREATE                            ;72-CREATE A FILE
F8ED EDA5             (        cubix.asm):01473                 FDB     DELETE                            ;73-DELETE A FILE
F8EF F019             (        cubix.asm):01474                 FDB     SETDEF                            ;74-SET DEFAULT DIRECTORY
F8F1 F02B             (        cubix.asm):01475                 FDB     SETCMD                            ;75-SET COMMAND DIRECTORY
F8F3 F676             (        cubix.asm):01476                 FDB     SELDRV                            ;76-SET CURRENT OS DRIVE
F8F5 E5DF             (        cubix.asm):01477                 FDB     FNDLNK                            ;77-LOCATE LINK FOR SECTOR
F8F7 EE6D             (        cubix.asm):01478                 FDB     LCHAIN                            ;78-LOAD CHAIN OF SECTOR TO MEMORY
F8F9 E7AA             (        cubix.asm):01479                 FDB     FRESEC                            ;79-ALLOCATE A FREE SECTOR
F8FB EDBE             (        cubix.asm):01480                 FDB     UNCHAIN                           ;80-RELEASE SECTOR CHAIN
F8FD E715             (        cubix.asm):01481                 FDB     DRVSIZ                            ;81-CALCULATE SIZE OF DISK(A)
F8FF E712             (        cubix.asm):01482                 FDB     CURSIZ                            ;82-CALCULATE SIZE OF CURRENT DISK
F901 F346             (        cubix.asm):01483                 FDB     CALFRE                            ;83-CALCULATE # FREE SECTORS ON DISK
F903 E5FC             (        cubix.asm):01484                 FDB     RDWRK                             ;84-READ WORK SECTOR INTO DOS
F905 E7A1             (        cubix.asm):01485                 FDB     CHGWRK                            ;85-INDICATE WORK SECTOR CHANGED
F907 E633             (        cubix.asm):01486                 FDB     WRTST                             ;86-WRITE WORK SECTOR IF UPDATED
F909 E638             (        cubix.asm):01487                 FDB     WRWRK                             ;87-WRITE WORK SECTOR UNCONDITIONALLY
F90B E623             (        cubix.asm):01488                 FDB     PURGE                             ;88-CLEAR WORK SECTOR & FORCE READ
F90D EB09             (        cubix.asm):01489                 FDB     GETCTL1                           ;89-GET CONTROL BLOCK
F90F EB06             (        cubix.asm):01490                 FDB     GETCTL                            ;90-GET CTRL BLK FOR SELECTED
F911 EABF             (        cubix.asm):01491                 FDB     SECTOR                            ;91-SET UP CTRL-BLOCK FROM DISK ID
F913 EADF             (        cubix.asm):01492                 FDB     RDISK                             ;92-READ SECTOR(D) TO MEM(X) FROM DISK
F915 EB12             (        cubix.asm):01493                 FDB     WDISK                             ;93-WRITE SECTOR(D) FROM MEM(X) TO DISK
F917 E6B6             (        cubix.asm):01494                 FDB     DISDIR                            ;94-DISPLAY DISK DIRECTORY
                      (        cubix.asm):01495         ;* DIRECT DISK ACCESS
F919 E004             (        cubix.asm):01496                 FDB     DOINIT                            ;95-INIT HARDWARE
F91B F6DD             (        cubix.asm):01497                 FDB     HOME                              ;96-HOME HEAD ON DISK
F91D F6E7             (        cubix.asm):01498                 FDB     RDSEC                             ;97-READ SECTOR FROM TRACK
F91F F6EB             (        cubix.asm):01499                 FDB     WRSEC                             ;98-WRITE SECTOR FROM TRACK
F921 F6D9             (        cubix.asm):01500                 FDB     FORMAT                            ;99-FORMAT DISK
                      (        cubix.asm):01501         ;* MISC DOS ROUTINES
F923 E1CD             (        cubix.asm):01502                 FDB     EXECMD                            ;100-EXECUTE DOS COMMAND
F925 E1C2             (        cubix.asm):01503                 FDB     TMPENT                            ;101-TEMPORARY DOS ENTRY
F927 F67C             (        cubix.asm):01504                 FDB     QVECT                             ;102-QUERY DEVICE VECTOR
F929 F686             (        cubix.asm):01505                 FDB     SVECT                             ;103-SET DEVICE VECTOR
F92B F11C             (        cubix.asm):01506                 FDB     SETFLG                            ;104-SET FLAG
F92D F122             (        cubix.asm):01507                 FDB     CLRFLG                            ;105-CLEAR FLAG
F92F F5A7             (        cubix.asm):01508                 FDB     SAVPRM                            ;106-SET COMMAND FILE PARAMETERS
F931 F696             (        cubix.asm):01509                 FDB     MUL16                             ;107-16 BIT MULTIPLY (D=X*D)
F933 F6B6             (        cubix.asm):01510                 FDB     DIV16                             ;108-16 BIT DIVISION (X=X/D, D=REMAINDER)
F935 E08A             (        cubix.asm):01511                 FDB     DMPREG                            ;109-DISPLAY REGISTERS
F937 EF56             (        cubix.asm):01512                 FDB     DNLDEV                            ;110-DOWNLOAD FROM DEVICE
     006F             (        cubix.asm):01513         NUMSSR          EQU (*-SSRTAB)/2                  ;# SSR'S IMPLEMENTED
                      (        cubix.asm):01514         ;*
                      (        cubix.asm):01515         ;* HARDWARE DEPENDANT I/O DRIVERS
                      (        cubix.asm):01516         ;*
                      (        cubix.asm):01517                 IFDEF   nhyodyne
                      (        cubix.asm):01518                 INCLUDE ../nhyodyne/drivers.asm
                      (../nhyodyne/drive):00001         ;       TITLE   I/O DRIVERS
                      (../nhyodyne/drive):00002         ;***************************************************************
                      (../nhyodyne/drive):00003         ;*     Sample I/O drivers for the CUBIX operating system.      *
                      (../nhyodyne/drive):00004         ;*-------------------------------------------------------------*
                      (../nhyodyne/drive):00005         ;* The drivers are designed to deal with four 6551 type serial *
                      (../nhyodyne/drive):00006         ;* devices, and a 765 type floppy disk controller controlling  *
                      (../nhyodyne/drive):00007         ;* up to four standard 40 track single or double sided floppy  *
                      (../nhyodyne/drive):00008         ;* diskette drives.                                            *
                      (../nhyodyne/drive):00009         ;*-------------------------------------------------------------*
                      (../nhyodyne/drive):00010         ;* Although these drivers are fully functional and may be used *
                      (../nhyodyne/drive):00011         ;* in a port of the system, their primary purpose is intended  *
                      (../nhyodyne/drive):00012         ;* to be as an example of CUBIX to I/O driver interfaceing. As *
                      (../nhyodyne/drive):00013         ;* such the device control side of the drivers (Which will be  *
                      (../nhyodyne/drive):00014         ;* VERY system specific) has been kept very simple and easy to *
                      (../nhyodyne/drive):00015         ;* follow. In particular, no interrupt lines are used, and all *
                      (../nhyodyne/drive):00016         ;* I/O operations are accomplished via software polling.       *
                      (../nhyodyne/drive):00017         ;*-------------------------------------------------------------*
                      (../nhyodyne/drive):00018         ;*             Copyright 1983-2004 Dave Dunfield               *
                      (../nhyodyne/drive):00019         ;***************************************************************
                      (../nhyodyne/drive):00020         ;*
                      (../nhyodyne/drive):00021         ;* CUBIX SYSTEM ADDRESSES
                      (../nhyodyne/drive):00022         ;*
                      (../nhyodyne/drive):00023         ;*
                      (../nhyodyne/drive):00024         ;* DISK CONTROL BLOCK FORMAT
                      (../nhyodyne/drive):00025         ;*
                      (../nhyodyne/drive):00026         ;       ORG     0
                      (../nhyodyne/drive):00027         ;DRIVE  RMB     1               DRIVE ID (ADDRESS)
                      (../nhyodyne/drive):00028         ;NCYL   RMB     1               NUMBER OF CYLINDERS
                      (../nhyodyne/drive):00029         ;NHEAD  RMB     1               NUMBER OF HEADS
                      (../nhyodyne/drive):00030         ;NSEC   RMB     1               NUMBER OF SECTORS/TRACK
                      (../nhyodyne/drive):00031         ;CYL    RMB     1               CURRENT CYLINDER
                      (../nhyodyne/drive):00032         ;HEAD   RMB     1               CURRENT HEAD
                      (../nhyodyne/drive):00033         ;SEC    RMB     1               CURRENT SECTOR
                      (../nhyodyne/drive):00034         ;*
                      (../nhyodyne/drive):00035         ;*
                      (../nhyodyne/drive):00036         ;* INITIALIZE SYSTEM HARDWARE. ON ENTRY 'Y'
                      (../nhyodyne/drive):00037         ;* POINTS TO SYSTEM TABLE TO BE FILLED IN.
                      (../nhyodyne/drive):00038         ;*
                      (../nhyodyne/drive):00039         ;* INITIALIZE CUBIX SYSTEM TABLE
F939                  (../nhyodyne/drive):00040         HWINIT
F939 8EFF09           (../nhyodyne/drive):00041                 LDX     #RITAB                            ;POINT TO OUR TABLE
F93C C667             (../nhyodyne/drive):00042                 LDB     #RISIZ                            ;SIZE OF TABLE
F93E                  (../nhyodyne/drive):00043         HWIN1
F93E A680             (../nhyodyne/drive):00044                 LDA     ,X+                               ;GET A BYTE FROM TABLE
F940 A7A0             (../nhyodyne/drive):00045                 STA     ,Y+                               ;WRITE IT TO CUBIX RAM
F942 5A               (../nhyodyne/drive):00046                 DECB                                      ;REDUCE COUNT
F943 26F9             (../nhyodyne/drive):00047                 BNE     HWIN1                             ;MOVE ENTIRE TABLE
                      (../nhyodyne/drive):00048         
F945 BDF967           (../nhyodyne/drive):00049                 JSR     SERIALINIT
F948 BDF994           (../nhyodyne/drive):00050                 JSR     PPIDE_INIT
                      (../nhyodyne/drive):00051         ;*      JSR     SETUPDRIVE
F94B 39               (../nhyodyne/drive):00052                 RTS
                      (../nhyodyne/drive):00053         
                      (../nhyodyne/drive):00054         ;* NULL DEVICE DRIVERS
F94C                  (../nhyodyne/drive):00055         RDNULL
F94C 86FF             (../nhyodyne/drive):00056                 LDA     #$FF                              ;INDICATE NO CHARACTER
F94E                  (../nhyodyne/drive):00057         WRNULL
F94E 39               (../nhyodyne/drive):00058                 RTS     IGNORE OPERATION
                      (../nhyodyne/drive):00059         
                      (../nhyodyne/drive):00060         ;*
                      (../nhyodyne/drive):00061         ;* FORMAT DISK ('U' POINTS TO DCB), INTERLEAVE FACTOR IN 'A'
                      (../nhyodyne/drive):00062         ;*
F94F                  (../nhyodyne/drive):00063         DFORMAT
                      (../nhyodyne/drive):00064         ;*      LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00065         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00066         ;*      BNE     NOTFDB                  ;
                      (../nhyodyne/drive):00067         ;*      JMP     FORMFL                  ; DIRECT ATTACHED FLOPPY FORMAT
                      (../nhyodyne/drive):00068         ;*NOTFDB:
F94F 39               (../nhyodyne/drive):00069                 RTS
                      (../nhyodyne/drive):00070         
                      (../nhyodyne/drive):00071         ;*
                      (../nhyodyne/drive):00072         ;* HOME HEAD ON DRIVE ('U' POINTS TO DCB)
                      (../nhyodyne/drive):00073         ;*
F950                  (../nhyodyne/drive):00074         DHOME
                      (../nhyodyne/drive):00075         ;*      LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00076         ;*      CMPA    #$01                    ; DRIVE A?
                      (../nhyodyne/drive):00077         ;*      BNE     NOTHDB                  ;
                      (../nhyodyne/drive):00078         ;*      LDAA    #$00
                      (../nhyodyne/drive):00079         ;*      JMP     SETTRACK                ; DIRECT ATTACHED FLOPPY HOME
                      (../nhyodyne/drive):00080         ;*NOTHDB:
F950 8603             (../nhyodyne/drive):00081                 LDA     #$03                              ; HOME DISK
                      (../nhyodyne/drive):00082         ;       JSR     ECB_OUTCHAR             ;
                      (../nhyodyne/drive):00083         ;       LDA     DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00084         ;       JSR     ECB_ENC_OUTCHAR         ; SEND TO Z80
F952 39               (../nhyodyne/drive):00085                 RTS
                      (../nhyodyne/drive):00086         
                      (../nhyodyne/drive):00087         
                      (../nhyodyne/drive):00088         ;*
                      (../nhyodyne/drive):00089         ;* READ A SECTOR, FROM DISK ('U' POINTS TO DCB) TO MEMORY(X)
                      (../nhyodyne/drive):00090         ;*
F953                  (../nhyodyne/drive):00091         DRDSEC
                      (../nhyodyne/drive):00092         ;*      JSR     SEGDISPLAY
                      (../nhyodyne/drive):00093         
F953 A6C4             (../nhyodyne/drive):00094                 LDA     DRIVE,U                           ; GET DRIVE
                      (../nhyodyne/drive):00095         ;*      CMPA    #$00                    ; DRIVE A?
                      (../nhyodyne/drive):00096         ;*      BNE     NOTRDA                  ;
                      (../nhyodyne/drive):00097         ;JMP    Z80RDRIVE               ; USE Z80 A:
                      (../nhyodyne/drive):00098         ;*NOTRDA
                      (../nhyodyne/drive):00099         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00100         ;*      BNE     NOTRDB                  ;
                      (../nhyodyne/drive):00101         ;*      JMP     READFL                  ; USE DIRECT ATTACHED FLOPPY
                      (../nhyodyne/drive):00102         ;*NOTRDB
                      (../nhyodyne/drive):00103         ;*      CMPA    #$02                    ; DRIVE C?
                      (../nhyodyne/drive):00104         ;*      BNE     NOTRDC                  ;
                      (../nhyodyne/drive):00105         ;*      JMP     Z80RDRIVE               ; USE Z80 C:
                      (../nhyodyne/drive):00106         ;*NOTRDC
F955 8103             (../nhyodyne/drive):00107                 CMPA    #$03                              ; DRIVE D?
F957 2603             (../nhyodyne/drive):00108                 BNE     NOTRDD                            ;
F959 7EFA99           (../nhyodyne/drive):00109                 JMP     IDE_READ_SECTOR                   ; USE DIRECT ATTACHED IDE
F95C                  (../nhyodyne/drive):00110         NOTRDD
F95C 39               (../nhyodyne/drive):00111                 RTS
                      (../nhyodyne/drive):00112         
                      (../nhyodyne/drive):00113         
                      (../nhyodyne/drive):00114         ;*
                      (../nhyodyne/drive):00115         ;* WRITE A SECTOR TO DISK ('U' POINTS TO DCB) FROM MEMORY(X)
                      (../nhyodyne/drive):00116         ;*
F95D                  (../nhyodyne/drive):00117         DWRSEC
                      (../nhyodyne/drive):00118         ;*      JSR     SEGDISPLAY
F95D A6C4             (../nhyodyne/drive):00119                 LDA     DRIVE,U                           ; GET DRIVE
                      (../nhyodyne/drive):00120         ;*      CMPA    #$00                    ; DRIVE A?
                      (../nhyodyne/drive):00121         ;*      BNE     NOTWDA                  ;
                      (../nhyodyne/drive):00122         ;       JMP     Z80WDRIVE               ; USE Z80 A:
                      (../nhyodyne/drive):00123         ;*NOTWDA
                      (../nhyodyne/drive):00124         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00125         ;*      BNE     NOTWDB                  ;
                      (../nhyodyne/drive):00126         ;*      JMP     WRITEFL                 ; USE DIRECT ATTACHED FLOPPY
                      (../nhyodyne/drive):00127         ;*NOTWDB
                      (../nhyodyne/drive):00128         ;*      CMPA    #$02                    ; DRIVE C?
                      (../nhyodyne/drive):00129         ;*      BNE     NOTWDC                  ;
                      (../nhyodyne/drive):00130         ;*      JMP     Z80WDRIVE               ; USE Z80 C:
                      (../nhyodyne/drive):00131         ;*NOTWDC
F95F 8103             (../nhyodyne/drive):00132                 CMPA    #$03                              ; DRIVE D?
F961 2603             (../nhyodyne/drive):00133                 BNE     NOTWDD                            ;
F963 7EFAB9           (../nhyodyne/drive):00134                 JMP     IDE_WRITE_SECTOR                  ; USE DIRECT ATTACHED IDE
F966                  (../nhyodyne/drive):00135         NOTWDD
F966 39               (../nhyodyne/drive):00136                 RTS
                      (../nhyodyne/drive):00137         
                      (../nhyodyne/drive):00138         
                      (../nhyodyne/drive):00139                 INCLUDE ../nhyodyne/cubix_serial.asm
                      (../nhyodyne/cubix):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00002         ;
                      (../nhyodyne/cubix):00003         ;       CUBIX serial drivers for 6809 IO card
                      (../nhyodyne/cubix):00004         ;
                      (../nhyodyne/cubix):00005         ;       Entry points:
                      (../nhyodyne/cubix):00006         ;               SERIALINIT  - called during OS init
                      (../nhyodyne/cubix):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      (../nhyodyne/cubix):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      (../nhyodyne/cubix):00009         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00010         ;
                      (../nhyodyne/cubix):00011         ;*
                      (../nhyodyne/cubix):00012         ;*        HARDWARE I/O ADDRESSES
                      (../nhyodyne/cubix):00013         ;*
                      (../nhyodyne/cubix):00014         ; UART 16C550 SERIAL
     FE68             (../nhyodyne/cubix):00015         UART0           EQU $FE68                         ; DATA IN/OUT
     FE69             (../nhyodyne/cubix):00016         UART1           EQU $FE69                         ; CHECK RX
     FE6A             (../nhyodyne/cubix):00017         UART2           EQU $FE6A                         ; INTERRUPTS
     FE6B             (../nhyodyne/cubix):00018         UART3           EQU $FE6B                         ; LINE CONTROL
     FE6C             (../nhyodyne/cubix):00019         UART4           EQU $FE6C                         ; MODEM CONTROL
     FE6D             (../nhyodyne/cubix):00020         UART5           EQU $FE6D                         ; LINE STATUS
     FE6E             (../nhyodyne/cubix):00021         UART6           EQU $FE6E                         ; MODEM STATUS
     FE6F             (../nhyodyne/cubix):00022         UART7           EQU $FE6F                         ; SCRATCH REG.
                      (../nhyodyne/cubix):00023         
                      (../nhyodyne/cubix):00024         
                      (../nhyodyne/cubix):00025         ;__SERIALINIT____________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00026         ;
                      (../nhyodyne/cubix):00027         ;       INITIALIZE SERIAL PORTS
                      (../nhyodyne/cubix):00028         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00029         ;
F967                  (../nhyodyne/cubix):00030         SERIALINIT:
                      (../nhyodyne/cubix):00031         ; these are all set by CP/M prior to activating the 6809 card. If 6809 is the primary CPU, these need to be set
                      (../nhyodyne/cubix):00032         ;       LDA             #$80            ;
                      (../nhyodyne/cubix):00033         ;       STA             UART3           ; SET DLAB FLAG
                      (../nhyodyne/cubix):00034         ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (../nhyodyne/cubix):00035         ;       STA             UART0           ; save baud rate
                      (../nhyodyne/cubix):00036         ;       LDA             #00                     ;
                      (../nhyodyne/cubix):00037         ;       STA             UART1           ;
                      (../nhyodyne/cubix):00038         ;       LDA             #03                     ;
                      (../nhyodyne/cubix):00039         ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (../nhyodyne/cubix):00040         ;       STA             UART4           ;
F967 39               (../nhyodyne/cubix):00041                 RTS
                      (../nhyodyne/cubix):00042         
                      (../nhyodyne/cubix):00043         
                      (../nhyodyne/cubix):00044         
                      (../nhyodyne/cubix):00045         ;__WRSER1________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00046         ;
                      (../nhyodyne/cubix):00047         ;       WRITE CHARACTER(A) TO UART
                      (../nhyodyne/cubix):00048         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00049         ;
F968                  (../nhyodyne/cubix):00050         WRSER1
F968 3404             (../nhyodyne/cubix):00051                 PSHS    B
                      (../nhyodyne/cubix):00052         !
F96A F6FE6D           (../nhyodyne/cubix):00053                 LDB     UART5                             ; READ LINE STATUS REGISTER
F96D C420             (../nhyodyne/cubix):00054                 ANDB    #$20                              ; TEST IF UART IS READY TO SEND (BIT 5)
F96F C100             (../nhyodyne/cubix):00055                 CMPB    #$00
F971 27F7             (../nhyodyne/cubix):00056                 BEQ     <                                 ; IF NOT REPEAT
F973 B7FE68           (../nhyodyne/cubix):00057                 STA     UART0                             ; THEN WRITE THE CHAR TO UART
F976 3584             (../nhyodyne/cubix):00058                 PULS    B,PC
                      (../nhyodyne/cubix):00059         
                      (../nhyodyne/cubix):00060         ;__RDSER1________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00061         ;
                      (../nhyodyne/cubix):00062         ;       READ CHARACTER FROM UART TO (A)
                      (../nhyodyne/cubix):00063         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00064         ;
F978                  (../nhyodyne/cubix):00065         RDSER1
F978 B6FE6D           (../nhyodyne/cubix):00066                 LDA     UART5                             ; READ LINE STATUS REGISTER
F97B 8401             (../nhyodyne/cubix):00067                 ANDA    #$01                              ; TEST IF DATA IN RECEIVE BUFFER
F97D 8100             (../nhyodyne/cubix):00068                 CMPA    #$00
F97F 2706             (../nhyodyne/cubix):00069                 BEQ     RDSER1N                           ; NO DATA
F981 B6FE68           (../nhyodyne/cubix):00070                 LDA     UART0                             ; THEN READ THE CHAR FROM THE UART
F984 1A04             (../nhyodyne/cubix):00071                 ORCC    #%00000100                        ; SET 'Z'
F986 39               (../nhyodyne/cubix):00072                 RTS
F987                  (../nhyodyne/cubix):00073         RDSER1N
F987 86FF             (../nhyodyne/cubix):00074                 LDA     #$FF                              ;
F989 39               (../nhyodyne/cubix):00075                 RTS                                       ;
                      (../nhyodyne/drive):00140                 INCLUDE ../nhyodyne/cubix_ide.asm
                      (../nhyodyne/cubix):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00002         ;
                      (../nhyodyne/cubix):00003         ;       CUBIX IDE disk drivers for direct attached disk-io card
                      (../nhyodyne/cubix):00004         ;
                      (../nhyodyne/cubix):00005         ;       Entry points:
                      (../nhyodyne/cubix):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (../nhyodyne/cubix):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (../nhyodyne/cubix):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (../nhyodyne/cubix):00009         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00010         ;
     FE60             (../nhyodyne/cubix):00011         PPIDE_PPI       = $FE60                           ; PORT A
                      (../nhyodyne/cubix):00012         ;
     FE60             (../nhyodyne/cubix):00013         PPIDELO         = PPIDE_PPI+0                     ; LSB
     FE61             (../nhyodyne/cubix):00014         PPIDEHI         = PPIDE_PPI+1                     ; MSB
     FE62             (../nhyodyne/cubix):00015         PPIDECNTRL      = PPIDE_PPI+2                     ; CONTROL SIGNALS
     FE63             (../nhyodyne/cubix):00016         PPIDEPPIC       = PPIDE_PPI+3                     ; CONTROL BYTE PPI 82C55
                      (../nhyodyne/cubix):00017         
     0001             (../nhyodyne/cubix):00018         PPIDE_A0_LINE   = $01                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (../nhyodyne/cubix):00019         PPIDE_A1_LINE   = $02                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (../nhyodyne/cubix):00020         PPIDE_A2_LINE   = $04                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (../nhyodyne/cubix):00021         PPIDE_CS0_LINE  = $08                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (../nhyodyne/cubix):00022         PPIDE_CS1_LINE  = $10                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (../nhyodyne/cubix):00023         PPIDE_WR_LINE   = $20                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (../nhyodyne/cubix):00024         PPIDE_RD_LINE   = $40                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (../nhyodyne/cubix):00025         PPIDE_RST_LINE  = $80                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (../nhyodyne/cubix):00026         
     0008             (../nhyodyne/cubix):00027         PPIDE_DATA      = PPIDE_CS0_LINE
     0009             (../nhyodyne/cubix):00028         PPIDE_ERR       = PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (../nhyodyne/cubix):00029         PPIDE_SEC_CNT   = PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (../nhyodyne/cubix):00030         PPIDE_LBALOW    = PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (../nhyodyne/cubix):00031         PPIDE_LBAMID    = PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (../nhyodyne/cubix):00032         PPIDE_LBAHI     = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (../nhyodyne/cubix):00033         PPIDE_DEVICE    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (../nhyodyne/cubix):00034         PPIDE_COMMAND   = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (../nhyodyne/cubix):00035         PPIDE_STATUS    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (../nhyodyne/cubix):00036         PPIDE_CONTROL   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (../nhyodyne/cubix):00037         PPIDE_ASTATUS   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (../nhyodyne/cubix):00038         
                      (../nhyodyne/cubix):00039         
                      (../nhyodyne/cubix):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (../nhyodyne/cubix):00041         PPIDE_CMD_RECAL = $10
     0020             (../nhyodyne/cubix):00042         PPIDE_CMD_READ  = $20
     0030             (../nhyodyne/cubix):00043         PPIDE_CMD_WRITE = $30
     0091             (../nhyodyne/cubix):00044         PPIDE_CMD_INIT  = $91
     00EC             (../nhyodyne/cubix):00045         PPIDE_CMD_ID    = $EC
     00E0             (../nhyodyne/cubix):00046         PPIDE_CMD_SPINDOWN = $E0
     00E1             (../nhyodyne/cubix):00047         PPIDE_CMD_SPINUP = $E1
                      (../nhyodyne/cubix):00048         
                      (../nhyodyne/cubix):00049         
     0092             (../nhyodyne/cubix):00050         PPRD_IDE_8255   = %10010010                       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (../nhyodyne/cubix):00051         PPWR_IDE_8255   = %10000000                       ;ALL THREE PORTS OUTPUT
                      (../nhyodyne/cubix):00052         
                      (../nhyodyne/cubix):00053         ;ALLOCATE THE FOLLOWING DATA AREAS TO UNUSED RAM SPACE
F98A                  (../nhyodyne/cubix):00054         DEBCYLL:
F98A 00               (../nhyodyne/cubix):00055                 .BYTE   0                                 ; DEBLOCKED CYLINDER LSB
F98B                  (../nhyodyne/cubix):00056         DEBCYLM:
F98B 00               (../nhyodyne/cubix):00057                 .BYTE   0                                 ; DEBLOCKED CYLINDER MSB
F98C                  (../nhyodyne/cubix):00058         DEBSEHD:
F98C 00               (../nhyodyne/cubix):00059                 .BYTE   0                                 ; DEBLOCKED SECTOR AND HEAD (HS)
F98D                  (../nhyodyne/cubix):00060         PPIDETMP:
F98D 00               (../nhyodyne/cubix):00061                 .BYTE   0                                 ; TEMP
F98E                  (../nhyodyne/cubix):00062         PPIDELOTMP:
F98E 00               (../nhyodyne/cubix):00063                 .BYTE   0
F98F                  (../nhyodyne/cubix):00064         PPIDECOMMAND:
F98F 00               (../nhyodyne/cubix):00065                 .BYTE   0
F990                  (../nhyodyne/cubix):00066         PPIDETIMEOUT:
F990 0000             (../nhyodyne/cubix):00067                 .BYTE   $00,$00
F992                  (../nhyodyne/cubix):00068         PPIDEWORKVAR:
F992 0000             (../nhyodyne/cubix):00069                 .BYTE   $00,$00
     0400             (../nhyodyne/cubix):00070         HSTBUF          = $0400
                      (../nhyodyne/cubix):00071         
                      (../nhyodyne/cubix):00072         ;__PPIDE_INIT_________________________________________________________________________________________
                      (../nhyodyne/cubix):00073         ;
                      (../nhyodyne/cubix):00074         ;  INIT AND DISPLAY IDE INFO
                      (../nhyodyne/cubix):00075         ;____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00076         ;
F994                  (../nhyodyne/cubix):00077         PPIDE_INIT:
F994 BDE588           (../nhyodyne/cubix):00078                 JSR     LFCR                              ; AND CRLF
F997 BDE588           (../nhyodyne/cubix):00079                 JSR     LFCR                              ; AND CRLF
F99A 8EFBDD           (../nhyodyne/cubix):00080                 LDX     #MESSAGE1
F99D BDE574           (../nhyodyne/cubix):00081                 JSR     WRSTR                             ; DO PROMPT
F9A0 BDE588           (../nhyodyne/cubix):00082                 JSR     LFCR                              ; AND CRLF
F9A3 BDFA8B           (../nhyodyne/cubix):00083                 JSR     IDE_PPIDETECT                     ; TEST FOR PPI HARDWARE
F9A6 261A             (../nhyodyne/cubix):00084                 BNE     IDE_ABORT                         ; BAIL OUT IF NOT THERE
                      (../nhyodyne/cubix):00085         ;
F9A8 8EFBE5           (../nhyodyne/cubix):00086                 LDX     #MESSAGE2
F9AB BDE574           (../nhyodyne/cubix):00087                 JSR     WRSTR                             ; DO PROMPT
F9AE CCFE60           (../nhyodyne/cubix):00088                 LDD     #PPIDE_PPI                        ; GET BASE PORT
F9B1 FDF992           (../nhyodyne/cubix):00089                 STD     PPIDEWORKVAR
F9B4 BDE545           (../nhyodyne/cubix):00090                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (../nhyodyne/cubix):00091         ;
F9B7 BDFADE           (../nhyodyne/cubix):00092                 JSR     PPIDE_RESET                       ; RESET THE BUS
F9BA BDF9E8           (../nhyodyne/cubix):00093                 JSR     PPIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
F9BD 2503             (../nhyodyne/cubix):00094                 BCS     IDE_ABORT
F9BF 7EF9CB           (../nhyodyne/cubix):00095                 JMP     IDE_PRINT_INFO
F9C2                  (../nhyodyne/cubix):00096         IDE_ABORT:
F9C2 8EFBEC           (../nhyodyne/cubix):00097                 LDX     #MESSAGE3
F9C5 BDE574           (../nhyodyne/cubix):00098                 JSR     WRSTR                             ; DO PROMPT
F9C8 7EF9E4           (../nhyodyne/cubix):00099                 JMP     IDE_INITA
F9CB                  (../nhyodyne/cubix):00100         IDE_PRINT_INFO:
F9CB BDE588           (../nhyodyne/cubix):00101                 JSR     LFCR                              ; AND CRLF
F9CE 8EFBF9           (../nhyodyne/cubix):00102                 LDX     #MESSAGE4
F9D1 BDE574           (../nhyodyne/cubix):00103                 JSR     WRSTR                             ; DO PROMPT
F9D4 8600             (../nhyodyne/cubix):00104                 LDA     #$00
F9D6 BDFA29           (../nhyodyne/cubix):00105                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
F9D9 8EFC0A           (../nhyodyne/cubix):00106                 LDX     #MESSAGE5
F9DC BDE574           (../nhyodyne/cubix):00107                 JSR     WRSTR                             ; DO PROMPT
F9DF 8601             (../nhyodyne/cubix):00108                 LDA     #$01
F9E1 BDFA29           (../nhyodyne/cubix):00109                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
F9E4                  (../nhyodyne/cubix):00110         IDE_INITA:
F9E4 BDE588           (../nhyodyne/cubix):00111                 JSR     LFCR                              ; AND CRLF
F9E7 39               (../nhyodyne/cubix):00112                 RTS                                       ; DONE
                      (../nhyodyne/cubix):00113         ;
                      (../nhyodyne/cubix):00114         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (../nhyodyne/cubix):00115         ;
                      (../nhyodyne/cubix):00116         ;  PROBE FOR IDE HARDWARE
                      (../nhyodyne/cubix):00117         ;____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00118         ;
F9E8                  (../nhyodyne/cubix):00119         PPIDE_PROBE:
                      (../nhyodyne/cubix):00120         ;
                      (../nhyodyne/cubix):00121         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (../nhyodyne/cubix):00122         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (../nhyodyne/cubix):00123         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (../nhyodyne/cubix):00124         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (../nhyodyne/cubix):00125         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (../nhyodyne/cubix):00126         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (../nhyodyne/cubix):00127         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (../nhyodyne/cubix):00128         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (../nhyodyne/cubix):00129         
F9E8 8600             (../nhyodyne/cubix):00130                 LDA     #$00
F9EA B7FE60           (../nhyodyne/cubix):00131                 STA     PPIDELO                           ; PPI PORT A, DATALO
                      (../nhyodyne/cubix):00132         
F9ED BDFAF5           (../nhyodyne/cubix):00133                 JSR     IDE_WAIT_NOT_BUSY                 ; WAIT FOR BUSY TO CLEAR
F9F0 2534             (../nhyodyne/cubix):00134                 BCS     PPIDE_PROBE_FAIL                  ; IF TIMEOUT, REPORT NO IDE PRESENT
F9F2 860F             (../nhyodyne/cubix):00135                 LDA     #PPIDE_STATUS                     ; GET STATUS
F9F4 BDFB79           (../nhyodyne/cubix):00136                 JSR     IDE_READ
F9F7 C440             (../nhyodyne/cubix):00137                 ANDB    #%01000000
F9F9 C100             (../nhyodyne/cubix):00138                 CMPB    #$00
F9FB 2729             (../nhyodyne/cubix):00139                 BEQ     PPIDE_PROBE_FAIL                  ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (../nhyodyne/cubix):00140         
                      (../nhyodyne/cubix):00141         ; CHECK SIGNATURE
F9FD 860A             (../nhyodyne/cubix):00142                 LDA     #PPIDE_SEC_CNT
F9FF BDFB79           (../nhyodyne/cubix):00143                 JSR     IDE_READ
FA02 C101             (../nhyodyne/cubix):00144                 CMPB    #$01
FA04 2620             (../nhyodyne/cubix):00145                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
FA06 860B             (../nhyodyne/cubix):00146                 LDA     #PPIDE_LBALOW
FA08 BDFB79           (../nhyodyne/cubix):00147                 JSR     IDE_READ
FA0B C101             (../nhyodyne/cubix):00148                 CMPB    #$01
FA0D 2617             (../nhyodyne/cubix):00149                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
FA0F 860C             (../nhyodyne/cubix):00150                 LDA     #PPIDE_LBAMID
FA11 BDFB79           (../nhyodyne/cubix):00151                 JSR     IDE_READ
FA14 C100             (../nhyodyne/cubix):00152                 CMPB    #$00
FA16 260E             (../nhyodyne/cubix):00153                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
FA18 860D             (../nhyodyne/cubix):00154                 LDA     #PPIDE_LBAHI
FA1A BDFB79           (../nhyodyne/cubix):00155                 JSR     IDE_READ
FA1D C100             (../nhyodyne/cubix):00156                 CMPB    #$00
FA1F 2605             (../nhyodyne/cubix):00157                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
FA21 1CFE             (../nhyodyne/cubix):00158                 CLC
FA23 7EFA28           (../nhyodyne/cubix):00159                 JMP     PPIDE_PROBE_SUCCESS
FA26                  (../nhyodyne/cubix):00160         PPIDE_PROBE_FAIL:
                      (../nhyodyne/cubix):00161         
FA26 1A01             (../nhyodyne/cubix):00162                 SEC
FA28                  (../nhyodyne/cubix):00163         PPIDE_PROBE_SUCCESS:
FA28 39               (../nhyodyne/cubix):00164                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (../nhyodyne/cubix):00165         
                      (../nhyodyne/cubix):00166         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (../nhyodyne/cubix):00167         ;*
                      (../nhyodyne/cubix):00168         ;*  READ IDE INFORMATION
                      (../nhyodyne/cubix):00169         ;*      CARRY SET ON ERROR
                      (../nhyodyne/cubix):00170         ;*      A=MST/SLV
                      (../nhyodyne/cubix):00171         ;*____________________________________________________________________________________________________
FA29                  (../nhyodyne/cubix):00172         IDE_READ_INFO:
                      (../nhyodyne/cubix):00173         ; SET DRIVE BIT
FA29 C60E             (../nhyodyne/cubix):00174                 LDB     #PPIDE_DEVICE
FA2B F7F98F           (../nhyodyne/cubix):00175                 STB     PPIDECOMMAND
FA2E 8401             (../nhyodyne/cubix):00176                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
FA30 48               (../nhyodyne/cubix):00177                 ASLA                                      ; SHIFT 4
FA31 48               (../nhyodyne/cubix):00178                 ASLA                                      ;
FA32 48               (../nhyodyne/cubix):00179                 ASLA                                      ;
FA33 48               (../nhyodyne/cubix):00180                 ASLA                                      ;
FA34 8AE0             (../nhyodyne/cubix):00181                 ORA     #$E0                              ; E0=MST  F0=SLV
FA36 1F89             (../nhyodyne/cubix):00182                 TFR     A,B
FA38 8600             (../nhyodyne/cubix):00183                 LDA     #$00
FA3A BDFBA2           (../nhyodyne/cubix):00184                 JSR     IDE_WRITE
FA3D BDFAF5           (../nhyodyne/cubix):00185                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
FA40 2537             (../nhyodyne/cubix):00186                 BCS     IDE_READ_INFO_ABORT
FA42 860F             (../nhyodyne/cubix):00187                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
FA44 B7F98F           (../nhyodyne/cubix):00188                 STA     PPIDECOMMAND
FA47 CC00EC           (../nhyodyne/cubix):00189                 LDD     #PPIDE_CMD_ID
FA4A BDFBA2           (../nhyodyne/cubix):00190                 JSR     IDE_WRITE                         ;ASK THE DRIVE TO READ IT
FA4D BDFB1C           (../nhyodyne/cubix):00191                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
FA50 2527             (../nhyodyne/cubix):00192                 BCS     IDE_READ_INFO_ABORT
FA52 8E0400           (../nhyodyne/cubix):00193                 LDX     #HSTBUF
FA55 BDFB4A           (../nhyodyne/cubix):00194                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
FA58 8EFC1B           (../nhyodyne/cubix):00195                 LDX     #MESSAGE6
FA5B BDE574           (../nhyodyne/cubix):00196                 JSR     WRSTR
FA5E B6047B           (../nhyodyne/cubix):00197                 LDA     HSTBUF+123
FA61 BDE55A           (../nhyodyne/cubix):00198                 JSR     WRHEX
FA64 B6047A           (../nhyodyne/cubix):00199                 LDA     HSTBUF+122
FA67 BDE55A           (../nhyodyne/cubix):00200                 JSR     WRHEX
FA6A B60479           (../nhyodyne/cubix):00201                 LDA     HSTBUF+121
FA6D BDE55A           (../nhyodyne/cubix):00202                 JSR     WRHEX
FA70 B60478           (../nhyodyne/cubix):00203                 LDA     HSTBUF+120
FA73 BDE55A           (../nhyodyne/cubix):00204                 JSR     WRHEX
FA76 7EFA85           (../nhyodyne/cubix):00205                 JMP     IDE_READ_INFO_OK
FA79                  (../nhyodyne/cubix):00206         IDE_READ_INFO_ABORT:
FA79 8EFBEC           (../nhyodyne/cubix):00207                 LDX     #MESSAGE3
FA7C BDE574           (../nhyodyne/cubix):00208                 JSR     WRSTR                             ;DO PROMPT
FA7F BDE588           (../nhyodyne/cubix):00209                 JSR     LFCR                              ;AND CRLF
FA82 1A01             (../nhyodyne/cubix):00210                 SEC
FA84 39               (../nhyodyne/cubix):00211                 RTS                                       ;
FA85                  (../nhyodyne/cubix):00212         IDE_READ_INFO_OK:
FA85 BDE588           (../nhyodyne/cubix):00213                 JSR     LFCR                              ; AND CRLF
FA88 1CFE             (../nhyodyne/cubix):00214                 CLC
FA8A 39               (../nhyodyne/cubix):00215                 RTS
                      (../nhyodyne/cubix):00216         
                      (../nhyodyne/cubix):00217         
                      (../nhyodyne/cubix):00218         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (../nhyodyne/cubix):00219         ;
                      (../nhyodyne/cubix):00220         ;  PROBE FOR PPI HARDWARE
                      (../nhyodyne/cubix):00221         ;____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00222         ;
FA8B                  (../nhyodyne/cubix):00223         IDE_PPIDETECT:
                      (../nhyodyne/cubix):00224         ;
                      (../nhyodyne/cubix):00225         ; TEST FOR PPI EXISTENCE
                      (../nhyodyne/cubix):00226         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (../nhyodyne/cubix):00227         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (../nhyodyne/cubix):00228         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (../nhyodyne/cubix):00229         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (../nhyodyne/cubix):00230         ; INTERFERE WITH THE VALUE BEING READ.
FA8B BDFBCF           (../nhyodyne/cubix):00231                 JSR     SET_PPI_WR
                      (../nhyodyne/cubix):00232         ;
FA8E 8600             (../nhyodyne/cubix):00233                 LDA     #$00                              ; VALUE ZERO
FA90 B7FE60           (../nhyodyne/cubix):00234                 STA     PPIDELO                           ; PUSH VALUE TO PORT
FA93 B6FE60           (../nhyodyne/cubix):00235                 LDA     PPIDELO                           ; GET PORT VALUE
FA96 8100             (../nhyodyne/cubix):00236                 CMPA    #$00
FA98 39               (../nhyodyne/cubix):00237                 RTS                                       ; AND RETURN
                      (../nhyodyne/cubix):00238         ;
                      (../nhyodyne/cubix):00239         
                      (../nhyodyne/cubix):00240         
                      (../nhyodyne/cubix):00241         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (../nhyodyne/cubix):00242         ;*
                      (../nhyodyne/cubix):00243         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (../nhyodyne/cubix):00244         ;*
                      (../nhyodyne/cubix):00245         ;*____________________________________________________________________________________________________
FA99                  (../nhyodyne/cubix):00246         IDE_READ_SECTOR:
FA99 BDFAF5           (../nhyodyne/cubix):00247                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
FA9C 2518             (../nhyodyne/cubix):00248                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
FA9E                  (../nhyodyne/cubix):00249         IDE_READ_SECTOR_1:
FA9E BDFC1E           (../nhyodyne/cubix):00250                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
FAA1 860F             (../nhyodyne/cubix):00251                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
FAA3 B7F98F           (../nhyodyne/cubix):00252                 STA     PPIDECOMMAND
FAA6 CC0020           (../nhyodyne/cubix):00253                 LDD     #PPIDE_CMD_READ
FAA9 BDFBA2           (../nhyodyne/cubix):00254                 JSR     IDE_WRITE                         ; ASK THE DRIVE TO READ IT
FAAC BDFB1C           (../nhyodyne/cubix):00255                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
FAAF 2505             (../nhyodyne/cubix):00256                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
FAB1 BDFB4A           (../nhyodyne/cubix):00257                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
FAB4 4F               (../nhyodyne/cubix):00258                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
FAB5 39               (../nhyodyne/cubix):00259                 RTS
FAB6                  (../nhyodyne/cubix):00260         IDE_READ_SECTOR_ERROR:
FAB6 8602             (../nhyodyne/cubix):00261                 LDA     #$02                              ; SET ERROR CONDITION
FAB8 39               (../nhyodyne/cubix):00262                 RTS
                      (../nhyodyne/cubix):00263         
                      (../nhyodyne/cubix):00264         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (../nhyodyne/cubix):00265         ;*
                      (../nhyodyne/cubix):00266         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (../nhyodyne/cubix):00267         ;*
                      (../nhyodyne/cubix):00268         ;*____________________________________________________________________________________________________
FAB9                  (../nhyodyne/cubix):00269         IDE_WRITE_SECTOR:
FAB9 BDFAF5           (../nhyodyne/cubix):00270                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
FABC 251D             (../nhyodyne/cubix):00271                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
FABE BDFC1E           (../nhyodyne/cubix):00272                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
FAC1 860F             (../nhyodyne/cubix):00273                 LDA     #PPIDE_COMMAND
FAC3 B7F98F           (../nhyodyne/cubix):00274                 STA     PPIDECOMMAND
FAC6 CC0030           (../nhyodyne/cubix):00275                 LDD     #PPIDE_CMD_WRITE
FAC9 BDFBA2           (../nhyodyne/cubix):00276                 JSR     IDE_WRITE                         ;TELL DRIVE TO WRITE A SECTOR
FACC BDFB1C           (../nhyodyne/cubix):00277                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
FACF 250A             (../nhyodyne/cubix):00278                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
FAD1 BDFB60           (../nhyodyne/cubix):00279                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
FAD4 BDFAF5           (../nhyodyne/cubix):00280                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
FAD7 2502             (../nhyodyne/cubix):00281                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
FAD9 4F               (../nhyodyne/cubix):00282                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
FADA 39               (../nhyodyne/cubix):00283                 RTS
FADB                  (../nhyodyne/cubix):00284         IDE_WRITE_SECTOR_ERROR:
FADB 8602             (../nhyodyne/cubix):00285                 LDA     #$02
FADD 39               (../nhyodyne/cubix):00286                 RTS
                      (../nhyodyne/cubix):00287         
                      (../nhyodyne/cubix):00288         ;*__PPIDE_RESET____________________________________________________________________________________
                      (../nhyodyne/cubix):00289         ;*
                      (../nhyodyne/cubix):00290         ;*  SOFT RESET IDE CHANNEL
                      (../nhyodyne/cubix):00291         ;*
                      (../nhyodyne/cubix):00292         ;*____________________________________________________________________________________________________
FADE                  (../nhyodyne/cubix):00293         PPIDE_RESET:
                      (../nhyodyne/cubix):00294         ;       PRTDBG "IDE RESET$"
FADE 8680             (../nhyodyne/cubix):00295                 LDA     #PPIDE_RST_LINE
FAE0 B7FE62           (../nhyodyne/cubix):00296                 STA     PPIDECNTRL                        ; ASSERT RST LINE ON IDE INTERFACE
                      (../nhyodyne/cubix):00297         
FAE3 108E0100         (../nhyodyne/cubix):00298                 LDY     #$0100
                      (../nhyodyne/cubix):00299         ;       PRTDBG "IDE RESET DELAY$"
FAE7                  (../nhyodyne/cubix):00300         RST_DLY:
FAE7 313F             (../nhyodyne/cubix):00301                 DEY
FAE9 108C0000         (../nhyodyne/cubix):00302                 CMPY    #$0000
FAED 26F8             (../nhyodyne/cubix):00303                 BNE     RST_DLY
FAEF 8600             (../nhyodyne/cubix):00304                 LDA     #$00
FAF1 B7FE62           (../nhyodyne/cubix):00305                 STA     PPIDECNTRL                        ; DEASSERT RST LINE ON IDE INTERFACE
                      (../nhyodyne/cubix):00306         
                      (../nhyodyne/cubix):00307         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISDa:a BEING
                      (../nhyodyne/cubix):00308         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (../nhyodyne/cubix):00309         ;    IF      USEDSKYNG = 1
                      (../nhyodyne/cubix):00310         ;        JSR     DSKY_REINIT
                      (../nhyodyne/cubix):00311         ;        ENDC
                      (../nhyodyne/cubix):00312         
FAF4 39               (../nhyodyne/cubix):00313                 RTS
                      (../nhyodyne/cubix):00314         
                      (../nhyodyne/cubix):00315         
                      (../nhyodyne/cubix):00316         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (../nhyodyne/cubix):00317         ;*
                      (../nhyodyne/cubix):00318         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (../nhyodyne/cubix):00319         ;*
                      (../nhyodyne/cubix):00320         ;*____________________________________________________________________________________________________
FAF5                  (../nhyodyne/cubix):00321         IDE_WAIT_NOT_BUSY:
FAF5 3406             (../nhyodyne/cubix):00322                 PSHS    A,B
FAF7 8600             (../nhyodyne/cubix):00323                 LDA     #$00
FAF9 B7F990           (../nhyodyne/cubix):00324                 STA     PPIDETIMEOUT
FAFC B7F991           (../nhyodyne/cubix):00325                 STA     PPIDETIMEOUT+1
FAFF                  (../nhyodyne/cubix):00326         IDE_WAIT_NOT_BUSY1:
FAFF 860F             (../nhyodyne/cubix):00327                 LDA     #PPIDE_STATUS                     ;WAIT FOR RDY BIT TO BE SET
FB01 BDFB79           (../nhyodyne/cubix):00328                 JSR     IDE_READ
FB04 C480             (../nhyodyne/cubix):00329                 ANDB    #$80
FB06 270F             (../nhyodyne/cubix):00330                 BEQ     IDE_WAIT_NOT_BUSY2
FB08 7CF990           (../nhyodyne/cubix):00331                 INC     PPIDETIMEOUT
FB0B 26F2             (../nhyodyne/cubix):00332                 BNE     IDE_WAIT_NOT_BUSY1
FB0D 7CF991           (../nhyodyne/cubix):00333                 INC     PPIDETIMEOUT+1
FB10 26ED             (../nhyodyne/cubix):00334                 BNE     IDE_WAIT_NOT_BUSY1
FB12 1A01             (../nhyodyne/cubix):00335                 SEC
FB14 7EFB19           (../nhyodyne/cubix):00336                 JMP     IDE_WAIT_NOT_BUSY3
FB17                  (../nhyodyne/cubix):00337         IDE_WAIT_NOT_BUSY2:
FB17 1CFE             (../nhyodyne/cubix):00338                 CLC
FB19                  (../nhyodyne/cubix):00339         IDE_WAIT_NOT_BUSY3:
FB19 3586             (../nhyodyne/cubix):00340                 PULS    PC,A,B
FB1B 39               (../nhyodyne/cubix):00341                 RTS
                      (../nhyodyne/cubix):00342         
                      (../nhyodyne/cubix):00343         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (../nhyodyne/cubix):00344         ;*
                      (../nhyodyne/cubix):00345         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (../nhyodyne/cubix):00346         ;*
                      (../nhyodyne/cubix):00347         ;*____________________________________________________________________________________________________
FB1C                  (../nhyodyne/cubix):00348         IDE_WAIT_DRQ:
FB1C 3426             (../nhyodyne/cubix):00349                 PSHS    A,B,Y
FB1E 8600             (../nhyodyne/cubix):00350                 LDA     #$00
FB20 B7F990           (../nhyodyne/cubix):00351                 STA     PPIDETIMEOUT
FB23 B7F991           (../nhyodyne/cubix):00352                 STA     PPIDETIMEOUT+1
FB26                  (../nhyodyne/cubix):00353         IDE_WAIT_DRQ1:
FB26 860F             (../nhyodyne/cubix):00354                 LDA     #PPIDE_STATUS                     ;WAIT FOR DRQ BIT TO BE SET
FB28 BDFB79           (../nhyodyne/cubix):00355                 JSR     IDE_READ
FB2B C488             (../nhyodyne/cubix):00356                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
FB2D C108             (../nhyodyne/cubix):00357                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
FB2F 2715             (../nhyodyne/cubix):00358                 BEQ     IDE_WAIT_DRQ2
FB31 C401             (../nhyodyne/cubix):00359                 ANDB    #%00000001                        ; IS ERROR?
FB33 C101             (../nhyodyne/cubix):00360                 CMPB    #%00000001                        ;
FB35 270A             (../nhyodyne/cubix):00361                 BEQ     IDE_WAIT_DRQE
FB37 7CF990           (../nhyodyne/cubix):00362                 INC     PPIDETIMEOUT
FB3A 26EA             (../nhyodyne/cubix):00363                 BNE     IDE_WAIT_DRQ1
FB3C 7CF991           (../nhyodyne/cubix):00364                 INC     PPIDETIMEOUT+1
FB3F 26E5             (../nhyodyne/cubix):00365                 BNE     IDE_WAIT_DRQ1
FB41                  (../nhyodyne/cubix):00366         IDE_WAIT_DRQE:
FB41 1A01             (../nhyodyne/cubix):00367                 SEC
FB43 7EFB48           (../nhyodyne/cubix):00368                 JMP     IDE_WAIT_DRQ3
FB46                  (../nhyodyne/cubix):00369         IDE_WAIT_DRQ2:
FB46 1CFE             (../nhyodyne/cubix):00370                 CLC
FB48                  (../nhyodyne/cubix):00371         IDE_WAIT_DRQ3:
FB48 35A6             (../nhyodyne/cubix):00372                 PULS    PC,A,B,Y
                      (../nhyodyne/cubix):00373         
                      (../nhyodyne/cubix):00374         
                      (../nhyodyne/cubix):00375         
                      (../nhyodyne/cubix):00376         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (../nhyodyne/cubix):00377         ;*
                      (../nhyodyne/cubix):00378         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (../nhyodyne/cubix):00379         ;*
                      (../nhyodyne/cubix):00380         ;*____________________________________________________________________________________________________
FB4A                  (../nhyodyne/cubix):00381         IDE_READ_BUFFER:
FB4A 108E0100         (../nhyodyne/cubix):00382                 LDY     #$0100                            ; INDEX
FB4E                  (../nhyodyne/cubix):00383         IDEBUFRD:
FB4E 8608             (../nhyodyne/cubix):00384                 LDA     #PPIDE_DATA
FB50 BDFB7C           (../nhyodyne/cubix):00385                 JSR     IDE_READ_NO_SETUP
FB53 E780             (../nhyodyne/cubix):00386                 STB     ,X+                               ; 'ID DRIVE' IDE RESPONSE IS LITTLE ENDIAN FORMAT
FB55 A780             (../nhyodyne/cubix):00387                 STA     ,X+                               ; 'ID DRIVE' IDE RESPONSE IS LITTLE ENDIAN FORMAT
FB57 313F             (../nhyodyne/cubix):00388                 DEY
FB59 108C0000         (../nhyodyne/cubix):00389                 CMPY    #$0000                            ;
FB5D 26EF             (../nhyodyne/cubix):00390                 BNE     IDEBUFRD                          ;
FB5F 39               (../nhyodyne/cubix):00391                 RTS                                       ;
                      (../nhyodyne/cubix):00392         
                      (../nhyodyne/cubix):00393         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (../nhyodyne/cubix):00394         ;*
                      (../nhyodyne/cubix):00395         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (../nhyodyne/cubix):00396         ;*
                      (../nhyodyne/cubix):00397         ;*____________________________________________________________________________________________________
FB60                  (../nhyodyne/cubix):00398         IDE_WRITE_BUFFER:
FB60 108E0100         (../nhyodyne/cubix):00399                 LDY     #$0100                            ; INDEX
FB64                  (../nhyodyne/cubix):00400         IDEBUFWT:
FB64 8608             (../nhyodyne/cubix):00401                 LDA     #PPIDE_DATA
FB66 B7F98F           (../nhyodyne/cubix):00402                 STA     PPIDECOMMAND
FB69 E680             (../nhyodyne/cubix):00403                 LDB     ,X+                               ; SECTORS ARE BIG ENDIAN
FB6B A680             (../nhyodyne/cubix):00404                 LDA     ,X+                               ; SECTORS ARE BIG ENDIAN
FB6D 313F             (../nhyodyne/cubix):00405                 DEY                                       ;
FB6F BDFBA2           (../nhyodyne/cubix):00406                 JSR     IDE_WRITE
FB72 108C0000         (../nhyodyne/cubix):00407                 CMPY    #$0000                            ;
FB76 26EC             (../nhyodyne/cubix):00408                 BNE     IDEBUFWT                          ;
FB78 39               (../nhyodyne/cubix):00409                 RTS                                       ;
                      (../nhyodyne/cubix):00410         
                      (../nhyodyne/cubix):00411         
                      (../nhyodyne/cubix):00412         ;-------------------------------------------------------------------------------
                      (../nhyodyne/cubix):00413         
                      (../nhyodyne/cubix):00414         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (../nhyodyne/cubix):00415         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (../nhyodyne/cubix):00416         ; PROGRAM WOULD NOT CALL TO THESE.
                      (../nhyodyne/cubix):00417         
                      (../nhyodyne/cubix):00418         ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (../nhyodyne/cubix):00419         ;INPUT A = IDE REGSITER ADDRESS
                      (../nhyodyne/cubix):00420         ;OUTPUT D = WORD READ FROM IDE DRIVE
FB79                  (../nhyodyne/cubix):00421         IDE_READ:
FB79 BDFBC1           (../nhyodyne/cubix):00422                 JSR     SET_PPI_RD                        ; SETUP FOR A READ CYCLE
FB7C                  (../nhyodyne/cubix):00423         IDE_READ_NO_SETUP:
FB7C B7FE62           (../nhyodyne/cubix):00424                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
FB7F 8A40             (../nhyodyne/cubix):00425                 ORA     #PPIDE_RD_LINE                    ; ASSERT RD PIN
FB81 B7FE62           (../nhyodyne/cubix):00426                 STA     PPIDECNTRL
FB84 3402             (../nhyodyne/cubix):00427                 PSHS    A
FB86 F6FE60           (../nhyodyne/cubix):00428                 LDB     PPIDELO                           ; READ LOWER BYTE
FB89 B6FE61           (../nhyodyne/cubix):00429                 LDA     PPIDEHI                           ; READ UPPER BYTE
FB8C B7F98E           (../nhyodyne/cubix):00430                 STA     PPIDELOTMP
FB8F 3502             (../nhyodyne/cubix):00431                 PULS    A                                 ; RESTORE REGISTER VALUE
FB91 B7FE62           (../nhyodyne/cubix):00432                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
FB94 8840             (../nhyodyne/cubix):00433                 EORA    #PPIDE_RD_LINE                    ; ASSERT RD PIN
FB96 B7FE62           (../nhyodyne/cubix):00434                 STA     PPIDECNTRL
FB99 8600             (../nhyodyne/cubix):00435                 LDA     #$00
FB9B B7FE62           (../nhyodyne/cubix):00436                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FB9E B6F98E           (../nhyodyne/cubix):00437                 LDA     PPIDELOTMP
FBA1 39               (../nhyodyne/cubix):00438                 RTS
                      (../nhyodyne/cubix):00439         
                      (../nhyodyne/cubix):00440         
                      (../nhyodyne/cubix):00441         
                      (../nhyodyne/cubix):00442         ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (../nhyodyne/cubix):00443         ;INPUT PPIDECOMMAND = IDE REGISTER ADDRESS
                      (../nhyodyne/cubix):00444         ;INPUT REGISTER D = WORD TO WRITE
                      (../nhyodyne/cubix):00445         ;
                      (../nhyodyne/cubix):00446         
FBA2                  (../nhyodyne/cubix):00447         IDE_WRITE:
FBA2 BDFBCF           (../nhyodyne/cubix):00448                 JSR     SET_PPI_WR                        ; SETUP FOR A WRITE CYCLE
FBA5 F7FE60           (../nhyodyne/cubix):00449                 STB     PPIDELO                           ; WRITE LOWER BYTE
FBA8 B7FE61           (../nhyodyne/cubix):00450                 STA     PPIDEHI                           ; WRITE UPPER BYTE
FBAB B6F98F           (../nhyodyne/cubix):00451                 LDA     PPIDECOMMAND
FBAE B7FE62           (../nhyodyne/cubix):00452                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
FBB1 8A20             (../nhyodyne/cubix):00453                 ORA     #PPIDE_WR_LINE                    ; ASSERT WRITE PIN
FBB3 B7FE62           (../nhyodyne/cubix):00454                 STA     PPIDECNTRL
FBB6 8820             (../nhyodyne/cubix):00455                 EORA    #PPIDE_WR_LINE                    ; DE ASSERT WR PIN
FBB8 B7FE62           (../nhyodyne/cubix):00456                 STA     PPIDECNTRL
FBBB 8600             (../nhyodyne/cubix):00457                 LDA     #$00
FBBD B7FE62           (../nhyodyne/cubix):00458                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FBC0 39               (../nhyodyne/cubix):00459                 RTS
                      (../nhyodyne/cubix):00460         
                      (../nhyodyne/cubix):00461         
                      (../nhyodyne/cubix):00462         ;-----------------------------------------------------------------------------------
                      (../nhyodyne/cubix):00463         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (../nhyodyne/cubix):00464         ;
                      (../nhyodyne/cubix):00465         ;------------------------------------------------------------------------------------
                      (../nhyodyne/cubix):00466         
FBC1                  (../nhyodyne/cubix):00467         SET_PPI_RD:
FBC1 3402             (../nhyodyne/cubix):00468                 PSHS    A
FBC3 8600             (../nhyodyne/cubix):00469                 LDA     #$00
FBC5 B7FE62           (../nhyodyne/cubix):00470                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FBC8 8692             (../nhyodyne/cubix):00471                 LDA     #PPRD_IDE_8255
FBCA B7FE63           (../nhyodyne/cubix):00472                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, READ MODE
FBCD 3582             (../nhyodyne/cubix):00473                 PULS    A,PC
                      (../nhyodyne/cubix):00474         
FBCF                  (../nhyodyne/cubix):00475         SET_PPI_WR:
FBCF 3402             (../nhyodyne/cubix):00476                 PSHS    A
FBD1 8600             (../nhyodyne/cubix):00477                 LDA     #$00
FBD3 B7FE62           (../nhyodyne/cubix):00478                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FBD6 8680             (../nhyodyne/cubix):00479                 LDA     #PPWR_IDE_8255
FBD8 B7FE63           (../nhyodyne/cubix):00480                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, WRITE MODE
FBDB 3582             (../nhyodyne/cubix):00481                 PULS    A,PC
                      (../nhyodyne/cubix):00482         
                      (../nhyodyne/cubix):00483         
FBDD                  (../nhyodyne/cubix):00484         MESSAGE1
FBDD 5050494445203A   (../nhyodyne/cubix):00485                 FCC     "PPIDE :"
FBE4 00               (../nhyodyne/cubix):00486                 FCB     00
FBE5                  (../nhyodyne/cubix):00487         MESSAGE2
FBE5 20494F3D3078     (../nhyodyne/cubix):00488                 FCC     " IO=0x"
FBEB 00               (../nhyodyne/cubix):00489                 FCB     00
FBEC                  (../nhyodyne/cubix):00490         MESSAGE3
FBEC 204E4F5420505245 (../nhyodyne/cubix):00491                 FCC     " NOT PRESENT"
     53454E54
FBF8 00               (../nhyodyne/cubix):00492                 FCB     00
FBF9                  (../nhyodyne/cubix):00493         MESSAGE4
FBF9 205050494445303A (../nhyodyne/cubix):00494                 FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
FC09 00               (../nhyodyne/cubix):00495                 FCB     00
FC0A                  (../nhyodyne/cubix):00496         MESSAGE5
FC0A 205050494445313A (../nhyodyne/cubix):00497                 FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
FC1A 00               (../nhyodyne/cubix):00498                 FCB     00
FC1B                  (../nhyodyne/cubix):00499         MESSAGE6
FC1B 3078             (../nhyodyne/cubix):00500                 FCC     "0x"
FC1D 00               (../nhyodyne/cubix):00501                 FCB     00
                      (../nhyodyne/cubix):00502         
                      (../nhyodyne/cubix):00503         
                      (../nhyodyne/cubix):00504         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (../nhyodyne/cubix):00505         ;*
                      (../nhyodyne/cubix):00506         ;*
                      (../nhyodyne/cubix):00507         ;        SETUP   LBA DATA
                      (../nhyodyne/cubix):00508         ;*
                      (../nhyodyne/cubix):00509         ;*____________________________________________________________________________________________________
FC1E                  (../nhyodyne/cubix):00510         IDE_SETUP_LBA:
FC1E 3406             (../nhyodyne/cubix):00511                 PSHS    D
                      (../nhyodyne/cubix):00512         ;            IF      USEDSKYNG = 1
                      (../nhyodyne/cubix):00513         ;       PRTDBG "DSKY OUTPUT 1$"
                      (../nhyodyne/cubix):00514         ;                LDA     CURDRV
                      (../nhyodyne/cubix):00515         ;                STA     DSKY_HEXBUF
                      (../nhyodyne/cubix):00516         ;                LDA     HEAD,U
                      (../nhyodyne/cubix):00517         ;                STA     DSKY_HEXBUF+1
                      (../nhyodyne/cubix):00518         ;                LDA     CYL,U
                      (../nhyodyne/cubix):00519         ;                STA     DSKY_HEXBUF+2
                      (../nhyodyne/cubix):00520         ;                LDA     SEC,U
                      (../nhyodyne/cubix):00521         ;                STA     DSKY_HEXBUF+3
                      (../nhyodyne/cubix):00522         ;                JSR     DSKY_BIN2SEG
                      (../nhyodyne/cubix):00523         ;                JSR     DSKY_SHOW
                      (../nhyodyne/cubix):00524         ;                ENDC
FC20 860E             (../nhyodyne/cubix):00525                 LDA     #PPIDE_DEVICE
FC22 B7F98F           (../nhyodyne/cubix):00526                 STA     PPIDECOMMAND
FC25 8600             (../nhyodyne/cubix):00527                 LDA     #$00
FC27 E6C4             (../nhyodyne/cubix):00528                 LDB     DRIVE,U
FC29 C401             (../nhyodyne/cubix):00529                 ANDB    #$01                              ; only want drive cfg
FC2B 58               (../nhyodyne/cubix):00530                 ASLB                                      ; SHIFT 4
FC2C 58               (../nhyodyne/cubix):00531                 ASLB                                      ;
FC2D 58               (../nhyodyne/cubix):00532                 ASLB                                      ;
FC2E 58               (../nhyodyne/cubix):00533                 ASLB                                      ;
FC2F CAE0             (../nhyodyne/cubix):00534                 ORB     #$E0                              ; E0=MST  F0=SLV
FC31 BDFBA2           (../nhyodyne/cubix):00535                 JSR     IDE_WRITE
                      (../nhyodyne/cubix):00536         
FC34 860D             (../nhyodyne/cubix):00537                 LDA     #PPIDE_LBAHI
FC36 B7F98F           (../nhyodyne/cubix):00538                 STA     PPIDECOMMAND
FC39 8600             (../nhyodyne/cubix):00539                 LDA     #$00
FC3B E645             (../nhyodyne/cubix):00540                 LDB     HEAD,U
FC3D BDFBA2           (../nhyodyne/cubix):00541                 JSR     IDE_WRITE
                      (../nhyodyne/cubix):00542         
FC40 860C             (../nhyodyne/cubix):00543                 LDA     #PPIDE_LBAMID
FC42 B7F98F           (../nhyodyne/cubix):00544                 STA     PPIDECOMMAND
FC45 8600             (../nhyodyne/cubix):00545                 LDA     #$00
FC47 E644             (../nhyodyne/cubix):00546                 LDB     CYL,U                             ;
FC49 BDFBA2           (../nhyodyne/cubix):00547                 JSR     IDE_WRITE
                      (../nhyodyne/cubix):00548         
FC4C 860B             (../nhyodyne/cubix):00549                 LDA     #PPIDE_LBALOW
FC4E B7F98F           (../nhyodyne/cubix):00550                 STA     PPIDECOMMAND
FC51 8600             (../nhyodyne/cubix):00551                 LDA     #$00
FC53 E646             (../nhyodyne/cubix):00552                 LDB     SEC,U                             ;
FC55 BDFBA2           (../nhyodyne/cubix):00553                 JSR     IDE_WRITE
                      (../nhyodyne/cubix):00554         
FC58 860A             (../nhyodyne/cubix):00555                 LDA     #PPIDE_SEC_CNT
FC5A B7F98F           (../nhyodyne/cubix):00556                 STA     PPIDECOMMAND
FC5D 8600             (../nhyodyne/cubix):00557                 LDA     #$00
FC5F C601             (../nhyodyne/cubix):00558                 LDB     #$01
FC61 BDFBA2           (../nhyodyne/cubix):00559                 JSR     IDE_WRITE
FC64 3586             (../nhyodyne/cubix):00560                 PULS    D,PC
                      (../nhyodyne/drive):00141         ;*      include CUBIXOS\CUBFLP.asm      FLOPPY I/O DRIVERS
                      (../nhyodyne/drive):00142         ;*      include CUBIXOS\CUBDSKY.asm     DSKY I/O DRIVERS
                      (../nhyodyne/drive):00143         ;*      include CUBIXOS\CUBVDU.asm      DSKY VDU DRIVERS
                      (../nhyodyne/drive):00144         
                      (../nhyodyne/drive):00145         
                      (../nhyodyne/drive):00146         
                      (../nhyodyne/drive):00147                 ORG     $FF00
                      (../nhyodyne/drive):00148         ;
                      (../nhyodyne/drive):00149         ; DISK COMMAND BLOCK
                      (../nhyodyne/drive):00150         ;
                      (../nhyodyne/drive):00151         ;* IGNORE ANY UNUSED INTERRUPTS
FF00                  (../nhyodyne/drive):00152         IGNORE
FF00 3B               (../nhyodyne/drive):00153                 RTI
                      (../nhyodyne/drive):00154         ;* RESULT CODES FOR FDC OPERATIONS
FF01                  (../nhyodyne/drive):00155         RESTAB
FF01 0300020000030401 (../nhyodyne/drive):00156                 FCB     3,0,2,0,0,3,4,1
                      (../nhyodyne/drive):00157         ;*
                      (../nhyodyne/drive):00158         ;* INITIALIZATION TABLE FOR CUBIX RAM
                      (../nhyodyne/drive):00159         ;*
     FF09             (../nhyodyne/drive):00160         RITAB           EQU *
                      (../nhyodyne/drive):00161         ;* DEFAULT DRIVE CHARACTISTICS
FF09 00500209000000   (../nhyodyne/drive):00162                 FCB     0,80,2,9,0,0,0                    ;ADR 0, 80 CYL, 2 HEAD, 9 SEC/TRK
FF10 01FF01FF000000   (../nhyodyne/drive):00163                 FCB     1,255,1,255,0,0,0                 ;ADR 1, 255 CYL, 1 HEAD, 255 SEC/TRK
FF17 02FF01FF000000   (../nhyodyne/drive):00164                 FCB     2,255,1,255,0,0,0                 ;ADR 2, 255 CYL, 1 HEAD, 255 SEC/TRK
FF1E 03FF01FF000000   (../nhyodyne/drive):00165                 FCB     3,255,1,255,0,0,0                 ;ADR 4, 255 CYL, 1 HEAD, 255 SEC/TRK
                      (../nhyodyne/drive):00166         ;* CONSOLE DEVICE ASSIGNMENTS
FF25 01               (../nhyodyne/drive):00167                 FCB     1                                 ;CONSOLE INPUT DEVICE
FF26 01               (../nhyodyne/drive):00168                 FCB     1                                 ;CONSOLE OUTPUT DEVICE
                      (../nhyodyne/drive):00169         ;* SERIAL DEVICE DRIVERS
FF27 F94CF97800000000 (../nhyodyne/drive):00170                 FDB     RDNULL,RDSER1,0,0,0,0,0,0
     0000000000000000
FF37 F94EF96800000000 (../nhyodyne/drive):00171                 FDB     WRNULL,WRSER1,0,0,0,0,0,0
     0000000000000000
                      (../nhyodyne/drive):00172         ;* DISK DEVICE DRIVERS
FF47 F950F953F95DF94F (../nhyodyne/drive):00173                 FDB     DHOME,DRDSEC,DWRSEC,DFORMAT
                      (../nhyodyne/drive):00174         ;* 6809 HARDWARE VECTORS
FF4F E00B             (../nhyodyne/drive):00175                 FDB     SSR                               ;SWI VECTOR (USED FOR SSRS)
FF51 FF00             (../nhyodyne/drive):00176                 FDB     IGNORE                            ;SWI2 VECTOR
FF53 FF00             (../nhyodyne/drive):00177                 FDB     IGNORE                            ;SWI3 VECTOR
FF55 FF00             (../nhyodyne/drive):00178                 FDB     IGNORE                            ;IRQ  VECTOR
FF57 FF00             (../nhyodyne/drive):00179                 FDB     IGNORE                            ;FIRQ VECTOR
FF59 FF00             (../nhyodyne/drive):00180                 FDB     IGNORE                            ;NMI VECTOR
                      (../nhyodyne/drive):00181         ;* MISC FLAGS & VARIABLES
FF5B FF               (../nhyodyne/drive):00182                 FCB     $FF                               ;ERROR MESSAGES ENABLED
FF5C 00               (../nhyodyne/drive):00183                 FCB     0                                 ;TRACE DISABLED
FF5D 00               (../nhyodyne/drive):00184                 FCB     0                                 ;DEBUG DISABLED
FF5E 03               (../nhyodyne/drive):00185                 FCB     3                                 ;DEFAULT DRIVE (A)
FF5F 4D41494E         (../nhyodyne/drive):00186                 FCC     'MAIN'                            ;DEFAULT DIRECTORY
FF63 00000000         (../nhyodyne/drive):00187                 FCB     0,0,0,0                           ;(FILLER)
FF67 03               (../nhyodyne/drive):00188                 FCB     3                                 ;SYSTEM DRIVE (A)
FF68 53595354454D     (../nhyodyne/drive):00189                 FCC     'SYSTEM'                          ;SYSTEM DIRECTORY
FF6E 0000             (../nhyodyne/drive):00190                 FCB     0,0                               ;(FILLER)
                      (../nhyodyne/drive):00191         
     0067             (../nhyodyne/drive):00192         RISIZ           EQU *-RITAB                       ;SIZE OF INITILAIZED RAM
                      (../nhyodyne/drive):00193         ;
                      (        cubix.asm):01519                 ENDIF
                      (        cubix.asm):01520         ;*
                      (        cubix.asm):01521         ;* INTERRUPT VECTORS
                      (        cubix.asm):01522         ;*
                      (        cubix.asm):01523                 IFNDEF  test
                      (        cubix.asm):01524                 ORG     $FFF2                             ;VECTORS GO HERE
FFF2 F6F7             (        cubix.asm):01525                 FDB     SWI3
FFF4 F6F3             (        cubix.asm):01526                 FDB     SWI2
FFF6 F6FF             (        cubix.asm):01527                 FDB     FIRQ
FFF8 F6FB             (        cubix.asm):01528                 FDB     IRQ
FFFA F6EF             (        cubix.asm):01529                 FDB     SWI
FFFC F703             (        cubix.asm):01530                 FDB     NMI
FFFE E108             (        cubix.asm):01531                 FDB     BEGIN                             ;RESET - COLD START OF SYSTEM
                      (        cubix.asm):01532                 ENDIF

Symbol Table:
[ G] ATRTAB                           F08D
[ G] BADCMD                           E254
[ G] BADDEV                           E5B4
[ G] BADOP1                           E3F3
[ G] BADOP2                           E396
[ G] BADOP3                           F082
[ G] BADOPM                           F726
[ G] BADOPR                           E2B8
[ G] BEG1                             E10F
[ G] BEGIN                            E108
[ G] BLOAD                            EE49
[ G] BRET                             E359
[ G] BSAVE                            EE7E
[ G] CALFRE                           F346
[ G] CEND                             E340
[ G] CEXI                             F567
[ G] CEXIT                            F556
[ G] CHAIN                            F5B8
[ G] CHGDRV                           F0A8
[ G] CHGWRK                           E7A1
[ G] CLO0                             E985
[ G] CLO1                             E989
[ G] CLO2                             E998
[ G] CLO3                             E99C
[ G] CLO4                             E9B1
[ G] CLOC1                            E8DB
[ G] CLOC2                            E8E2
[ G] CLOSE                            E970
[ G] CLRFLG                           F122
[ G] CMD                              E18D
[ G] CMDADR                           F83F
[ G] CMDBUF                           DCED
[ G] CMDC1                            F5F2
[ G] CMDC2                            F5FC
[ G] CMDC3                            F606
[ G] CMDC4                            F60A
[ G] CMDC5                            F614
[ G] CMDC6                            F615
[ G] CMDCMP                           F5E7
[ G] CMDDRV                           DCE1
[ G] CMDEOF                           F464
[ G] CMDEX                            F472
[ G] CMDGO                            E1BD
[ G] CMDIN                            F598
[ G] CMDKEY                           F5DB
[ G] CMDNAM                           F7E9
[ G] CMDOFF                           DCE4
[ G] CMDRC                            DCE8
[ G] CMDRET                           F57E
[ G] CMDRT0                           F581
[ G] CMDRT1                           F595
[ G] CMDRT2                           F618
[ G] CMDSEC                           DCE2
[ G] CMDSKP                           F5C4
[ G] CMDSTK                           DCE6
[ G] CMPR                             F51E
[ G] CMPR1                            F52B
[ G] CNC1                             EFE2
[ G] CNC2                             EFF3
[ G] CNCT                             EFDC
[ G] COMFIL                           F46D
[ G] COMGO                            F482
[ G] COMNAM                           E323
[ G] COMX                             E342
[ G] CONIN                            DC6C
[ G] CONOUT                           DC6D
[ G] CRD1                             ED22
[ G] CRD2                             ED28
[ G] CRE1                             E739
[ G] CRE2                             E741
[ G] CRE3                             E746
[ G] CRE5                             E772
[ G] CRE6                             E77C
[ G] CRE7                             E784
[ G] CREAD                            ED07
[ G] CREATE                           E724
[ G] CREF1                            ED9F
[ G] CREFIL                           ED8B
[ G] CSIZE                            0007
[ G] CSRC                             F546
[ G] CURSIZ                           E712
[ G] CWR1                             ED52
[ G] CWR2                             ED58
[ G] CWRITE                           ED37
[ G] CYL                              0004
[ G] DATTR                            0017
[ G] DBGFLG                           DCA3
[ G] DBGSSR                           E040
[ G] DCTRL                            DC50
[ G] DDADR                            0013
[ G] DEBCYLL                          F98A
[ G] DEBCYLM                          F98B
[ G] DEBSEHD                          F98C
[ G] DECDIG                           E460
[ G] DEFATR                           00F0
[ G] DEFDIR                           DCA6
[ G] DEFDRV                           DCA5
[ G] DELETE                           EDA5
[ G] DELFIL                           EDA2
[ G] DETAB                            EBA8
[ G] DEVMSG                           F7C4
[ G] DFORMAT                          F94F
[ G] DHOME                            F950
[ G] DIGOK                            E439
[ G] DIRSEC                           0000
[ G] DISDIR                           E6B6
[ G] DISF1                            F357
[ G] DISF2                            F35D
[ G] DISF3                            F368
[ G] DISF4                            F379
[ G] DISP8                            E705
[ G] DISPX                            E707
[SG] dist                             0001
[ G] DITAB                            DC6E
[ G] DIV1                             F6BE
[ G] DIV16                            F6B6
[ G] DIV2                             F6C0
[ G] DIV3                             F6D5
[ G] DMPREG                           E08A
[ G] DMPREG1                          E08D
[ G] DNAME                            0008
[ G] DNL0                             EF21
[ G] DNL1                             EF59
[ G] DNL2                             EF6C
[ G] DNL3                             EF97
[ G] DNL4                             EFC8
[ G] DNLD                             EF0E
[ G] DNLDEV                           EF56
[ G] DNLEND                           EF3B
[ G] DNLMSG                           F7D3
[ G] DNLRTS                           EF0C
[ G] DOINIT                           E004
[ G] DOSKCM                           E1C6
[ G] DOTAB                            DC7E
[ G] DPERM                            0010
[ G] DPREFIX                          0000
[ G] DRADR                            0015
[ G] DRDSEC                           F953
[ G] DRIVE                            0000
[ G] DRVSIZ                           E715
[ G] DSHFT                            E441
[ G] DTYPE                            0010
[ G] DWRSEC                           F95D
[ G] EOF                              E8BE
[ G] EPERM                            0020
[ G] ERRCNT                           DCEC
[ G] ERRM1                            E2D0
[ G] ERRM2                            E2D5
[ G] ERRM3                            E2E6
[ G] ERRM4                            E2EB
[ G] ERRMRC                           E2BD
[ G] ERRRET                           E2F8
[ G] EX1                              F2B5
[ G] EX2                              F2BA
[ G] EX3                              F2C1
[ G] EX4                              F2C8
[ G] EX5                              F2D5
[ G] EX6                              F2DF
[ G] EX7                              F2E9
[ G] EX8                              F2EB
[ G] EX9                              F2FE
[ G] EXDCOM                           F56A
[ G] EXE                              E224
[ G] EXE1                             E23C
[ G] EXE2                             E23F
[ G] EXE3                             E25B
[ G] EXE4                             E27C
[ G] EXE5                             E288
[ G] EXECMD                           E1CD
[ G] EXIMSG                           F750
[ G] FDRIVE                           DCB7
[ G] FEXISTS                          E730
[ G] FIL1                             ED6C
[ G] FIL2                             ED88
[ G] FILERR                           E663
[ G] FILES                            ED67
[ G] FILFND                           E6B5
[ G] FIRQ                             F6FF
[ G] FIRQVEC                          DC9E
[ G] FNAME                            DCC0
[ G] FNDF1                            E7E1
[ G] FNDF2                            E7EA
[ G] FNDF3                            E7EC
[ G] FNDFRE                           E7DB
[ G] FNDLNK                           E5DF
[ G] FORMAT                           F6D9
[ G] FRES1                            E7CA
[ G] FRES2                            E7CC
[ G] FRESEC                           E7AA
[ G] FTEL1                            EA1A
[ G] FTEL2                            EA28
[ G] FTELL                            EA0D
[ G] FTYPE                            DCC8
[ G] GETA1                            F071
[ G] GETA2                            F07B
[ G] GETA3                            F085
[ G] GETA4                            F08B
[ G] GETATR                           F06E
[ G] GETBYT                           EFBC
[ G] GETCHR                           E5DA
[ G] GETCTL                           EB06
[ G] GETCTL1                          EB09
[ G] GETD1                            E3C8
[ G] GETD2                            E3D1
[ G] GETD3                            E3E7
[ G] GETD4                            E3F6
[ G] GETD5                            E3FD
[ G] GETDEC                           E456
[ G] GETDEV                           F0FC
[ G] GETDIR                           E3B0
[ G] GETDIR1                          E3B3
[ G] GETDRV                           E3FF
[ G] GETDRV1                          E402
[ G] GETDV                            E45D
[ G] GETHEX                           E41C
[ G] GETHV                            E421
[ G] GETL1                            E424
[ G] GETN1                            EFDB
[ G] GETNAM                           E377
[ G] GETNIB                           EFC9
[ G] GETNUM                           E411
[ G] GETSDI                           E31D
[ G] GETSN0                           E299
[ G] GETSN1                           E2A0
[ G] GETSN2                           E2AE
[ G] GETSNA                           E296
[ G] GETSYS                           E31A
[ G] GETVAL                           E370
[ G] GF1                              E37B
[ G] GF2                              E38C
[ G] GF3                              E399
[ G] GFNAM                            E379
[ G] GFTYP                            E388
[ G] GLFCR                            E4A2
[ G] GLINE                            E4A5
[ G] GLINE1                           E4AE
[ G] GLINE2                           E4BF
[ G] GLINE3                           E4CA
[ G] GLNOP                            E4AA
[ G] GOCMD                            F50A
[ G] GOFLG                            F125
[ G] GOPAD                            E2AB
[ G] GRTS                             E5FB
[ G] HDE                              EB37
[ G] HDE1                             EB54
[ G] HDE2                             EB8E
[ G] HDE3                             EB93
[ G] HDE4                             EB9D
[ G] HEAD                             0005
[ G] HELLO                            E11F
[ G] HEXEND                           E451
[ G] HOME                             F6DD
[ G] HOUT                             E568
[ G] HSTBUF                           0400
[ G] HWIN1                            F93E
[ G] HWINIT                           F939
[ G] IDE_ABORT                        F9C2
[ G] IDE_INITA                        F9E4
[ G] IDE_PPIDETECT                    FA8B
[ G] IDE_PRINT_INFO                   F9CB
[ G] IDE_READ                         FB79
[ G] IDE_READ_BUFFER                  FB4A
[ G] IDE_READ_INFO                    FA29
[ G] IDE_READ_INFO_ABORT              FA79
[ G] IDE_READ_INFO_OK                 FA85
[ G] IDE_READ_NO_SETUP                FB7C
[ G] IDE_READ_SECTOR                  FA99
[ G] IDE_READ_SECTOR_1                FA9E
[ G] IDE_READ_SECTOR_ERROR            FAB6
[ G] IDE_SETUP_LBA                    FC1E
[ G] IDE_WAIT_DRQ                     FB1C
[ G] IDE_WAIT_DRQ1                    FB26
[ G] IDE_WAIT_DRQ2                    FB46
[ G] IDE_WAIT_DRQ3                    FB48
[ G] IDE_WAIT_DRQE                    FB41
[ G] IDE_WAIT_NOT_BUSY                FAF5
[ G] IDE_WAIT_NOT_BUSY1               FAFF
[ G] IDE_WAIT_NOT_BUSY2               FB17
[ G] IDE_WAIT_NOT_BUSY3               FB19
[ G] IDE_WRITE                        FBA2
[ G] IDE_WRITE_BUFFER                 FB60
[ G] IDE_WRITE_SECTOR                 FAB9
[ G] IDE_WRITE_SECTOR_ERROR           FADB
[ G] IDEBUFRD                         FB4E
[ G] IDEBUFWT                         FB64
[ G] IGNORE                           FF00
[ G] INBUFF                           DC00
[ G] INI00                            EC10
[ G] INI01                            EC2A
[ G] INI02                            EC32
[ G] INI1                             EC3D
[ G] INI10                            ECF9
[ G] INI2                             EC8E
[ G] INI3                             ECAC
[ G] INI4                             ECB9
[ G] INI5                             ECC6
[ G] INI6                             ECD0
[ G] INI7                             ECDC
[ G] INI8                             ECE6
[ G] INI9                             ECED
[ G] INIT                             EBFE
[ G] INITAB                           F408
[ G] INVSSR                           E05E
[ G] IOTAB                            F456
[ G] IPLFILE                          F707
[ G] IRAM                             DC50
[ G] IRQ                              F6FB
[ G] IRQVEC                           DC9C
[ G] LCHAIN                           EE6D
[ G] LFCR                             E588
[ G] LNKSEC                           0001
[ G] LOCCR                            F5D1
[ G] LOCDIR                           E692
[ G] LOCERR                           E659
[ G] LOCFIL                           E69E
[ G] LOCLP                            F5CD
[ G] LOCRED                           E8A3
[ G] LOCSEC                           E69B
[ G] LOCWRI                           E8D1
[ G] LODERR                           EFAE
[ G] LODF1                            EE6B
[ G] LODFIL                           EE55
[ G] MBASE                            E002
[ G] MESSAGE1                         FBDD
[ G] MESSAGE2                         FBE5
[ G] MESSAGE3                         FBEC
[ G] MESSAGE4                         FBF9
[ G] MESSAGE5                         FC0A
[ G] MESSAGE6                         FC1B
[ G] MOVD1                            F036
[ G] MOVDIR                           F030
[ G] MSGFLG                           DCA2
[ G] MUL16                            F696
[ G] MULD1                            EDDC
[ G] MULD2                            EDDF
[ G] MULD3                            EE38
[ G] MULD4                            EE48
[ G] MULD5                            EDFE
[ G] MULDEL                           EDD9
[ G] NAMGET                           E29E
[ G] NCYL                             0001
[ G] NDEV                             0008
[ G] NDSK                             0004
[ G] NEWLIN                           F4AB
[ G] NHEAD                            0002
[SG] nhyodyne                         0001
[ G] NMI                              F703
[ G] NMIVEC                           DCA0
[ G] NOEMSG                           E2F6
[ G] NOFMSG                           E68B
[ G] NOMAC                            F4E4
[ G] NOSHO                            E6BD
[ G] NOSMSG                           F764
[ G] NOSPAC                           E7D3
[ G] NOSUSP                           EEF0
[ G] NOTFND                           E65D
[ G] NOTMSG                           F741
[ G] NOTNUL                           E330
[ G] NOTRDD                           F95C
[ G] NOTWDD                           F966
[ G] NSEC                             0003
[ G] NULCMD                           E1F6
[ G] NUMCMD                           000E
[ G] NUMFLG                           0003
[ G] NUMSSR                           006F
[ G] ODRIVE                           0001
[ G] OFIRST                           0002
[ G] OKRET                            EE7D
[ G] OLDSTK                           DCE9
[ G] OLSTSEC                          0006
[ G] OOFFSET                          0008
[ G] OOTAB                            F44E
[ G] OPENR                            E80C
[ G] OPENW                            E8E8
[ G] OREMSG                           F77B
[ G] ORERR                            E8B6
[ G] OSECTOR                          0004
[ G] OSIZ                             000A
[ G] OTYPE                            0000
[ G] OWEMSG                           F792
[ G] OWERR                            E92A
[ G] PAD                              E3A9
[ G] PAR1                             F4CE
[ G] PAR2                             F4D4
[ G] PAR3                             F4DB
[ G] PAROK                            F4C8
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       F994
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        FE60
[ G] PPIDE_PROBE                      F9E8
[ G] PPIDE_PROBE_FAIL                 FA26
[ G] PPIDE_PROBE_SUCCESS              FA28
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      FADE
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       FE62
[ G] PPIDECOMMAND                     F98F
[ G] PPIDEHI                          FE61
[ G] PPIDELO                          FE60
[ G] PPIDELOTMP                       F98E
[ G] PPIDEPPIC                        FE63
[ G] PPIDETIMEOUT                     F990
[ G] PPIDETMP                         F98D
[ G] PPIDEWORKVAR                     F992
[ G] PPRD_IDE_8255                    0092
[ G] PPWR_IDE_8255                    0080
[ G] PREFIX                           DCB8
[ G] PROERR                           E8AD
[ G] PROMSG                           F7AA
[ G] PURGE                            E623
[ G] PURGE1                           E625
[ G] PUTCHR                           E59A
[ G] QVECT                            F67C
[ G] RAM                              DC00
[ G] RCBOP                            0001
[ G] RCC1                             F626
[ G] RCC2                             F639
[ G] RCC3                             F652
[ G] RCCHR                            F61B
[ G] RCCMD                            00FF
[ G] RCDEV                            000A
[ G] RCDNL                            000B
[ G] RCDSK                            0009
[ G] RCEOF                            0006
[ G] RCEXI                            0007
[ G] RCNOS                            0008
[ G] RCNOTF                           0002
[ G] RCOND                            F534
[ G] RCORE                            0004
[ G] RCOWE                            0005
[ G] RCPRO                            0003
[ G] RCRET                            E199
[ G] RDDEV                            E5BC
[ G] RDDLC                            EFB6
[ G] RDISK                            EADF
[ G] RDNULL                           F94C
[ G] RDONE                            EB04
[ G] RDSEC                            F6E7
[ G] RDSER1                           F978
[ G] RDSER1N                          F987
[ G] RDW1                             E611
[ G] RDWRK                            E5FC
[ G] READB                            E879
[ G] READC                            E82E
[ G] REC1                             E84D
[ G] REC2                             E867
[ G] REDCHR                           F4AE
[ G] REDIN                            F654
[ G] REDOUT                           F659
[ G] REENT                            E1AC
[ G] REEXG                            F670
[ G] RESTAB                           FF01
[ G] RESU1                            EAA7
[ G] RESU2                            EAAC
[ G] RESU3                            EAB7
[ G] RESUME                           EA8B
[ G] RETNZ                            E36D
[ G] RETURN                           EEE7
[ G] RETZ                             F679
[ G] RETZ1                            F692
[ G] REWIND                           E8C3
[ G] RISIZ                            0067
[ G] RITAB                            FF09
[ G] RNXT                             E350
[ G] RNXT1                            E352
[ G] ROM                              E000
[ G] ROMCHK                           E000
[ G] RPERM                            0080
[ G] RRTS                             E621
[ G] RST_DLY                          FAE7
[ G] RSUCC                            F53F
[ G] RTRY1                            EAE6
[ G] RTRY2                            EAEA
[ G] RUN                              E1F7
[ G] RUN1                             E1FA
[ G] RUN2                             E205
[ G] SAVB                             DCD5
[ G] SAVDRV                           DCDA
[ G] SAVF1                            EE95
[ G] SAVF2                            EEA2
[ G] SAVF3                            EED3
[ G] SAVFIL                           EE86
[ G] SAVP1                            F5AC
[ G] SAVP2                            F5B6
[ G] SAVPRM                           F5A7
[ G] SAVSTK                           DCDB
[ G] SAVX                             DCD6
[ G] SAVY                             DCD8
[ G] SDC1                             F15B
[ G] SDC2                             F162
[ G] SDCMD                            F14C
[ G] SDRIVE                           DCEB
[ G] SDTAB                            F427
[ G] SEC                              0006
[ G] SEC1                             EACD
[ G] SEC2                             EAD7
[ G] SECTOR                           EABF
[ G] SEEK1                            E9D1
[ G] SEEK2                            E9F1
[ G] SEEK3                            EA04
[ G] SEEKABS                          E9BC
[ G] SEEKREL                          E9BF
[ G] SELDRV                           F676
[ G] SERIALINIT                       F967
[ G] SET                              F000
[ G] SET0                             F011
[ G] SET1                             F020
[ G] SET2                             F03F
[ G] SET3                             F095
[ G] SET4                             F0CD
[ G] SET5                             F0E1
[ G] SET_PPI_RD                       FBC1
[ G] SET_PPI_WR                       FBCF
[ G] SETADR                           F3C3
[ G] SETCMD                           F02B
[ G] SETDEF                           F019
[ G] SETF0                            F045
[ G] SETF1                            F05C
[ G] SETF2                            F066
[ G] SETFLG                           F11C
[ G] SETIN                            F65E
[ G] SETOUT                           F668
[ G] SETTAB                           F380
[ G] SETVAR                           F5A3
[ G] SFTAB                            F3EF
[ G] SH21                             F1CB
[ G] SH22                             F1D3
[ G] SH23                             F1E0
[ G] SHFLAG                           F28A
[ G] SHOADR                           F3D9
[ G] SHODRA                           F249
[ G] SHODRB                           F24F
[ G] SHODRV                           F210
[ G] SHOFIL                           E6D0
[ G] SHOME                            E6B8
[ G] SHON1                            E6EC
[ G] SHONAM                           E6EA
[ G] SHOOFF                           F2A0
[ G] SHOSAV                           E6D7
[ G] SHOT1                            F25C
[ G] SHOT2                            F267
[ G] SHOT3                            F270
[ G] SHOT4                            F273
[ G] SHOTAB                           F259
[ G] SHOW                             F138
[ G] SHOW0                            F144
[ G] SHOW1                            F149
[ G] SHOW2                            F16D
[ G] SHOW3                            F20D
[ G] SHOW4                            F2A8
[ G] SHOW5                            F277
[ G] SHOW6                            F300
[ G] SHRT                             E70E
[ G] SKIP                             E4DC
[ G] SKRTS                            E4E8
[ G] SPACE                            E592
[ G] SPC1                             E596
[ G] SSR                              E00B
[ G] SSRTAB                           F85B
[ G] ST1                              F0D0
[ G] STACK                            DE00
[ G] STFLAG                           F109
[ G] SUSP1                            EA71
[ G] SUSP2                            EA7C
[ G] SUSPEND                          EA39
[ G] SVECT                            F686
[ G] SWI                              F6EF
[ G] SWI2                             F6F3
[ G] SWI2VEC                          DC98
[ G] SWI3                             F6F7
[ G] SWI3VEC                          DC9A
[ G] SWIVEC                           DC96
[ G] SYSDIR                           DCAF
[ G] SYSDRV                           DCAE
[ G] TEMP                             DCCB
[ G] TEMP1                            DCCD
[ G] TEMP2                            DCCF
[ G] TEMP3                            DCD1
[ G] TEMP4                            DCD3
[ G] TLOOK                            E505
[ G] TLOOK1                           E508
[ G] TLOOK2                           E517
[ G] TLOOK3                           E534
[ G] TLOOK4                           E539
[ G] TLOOK5                           E53B
[ G] TLOOK6                           E540
[ G] TLOOKE                           F0C3
[ G] TMPENT                           E1C2
[ G] TOUPPER                          E4FA
[ G] TRAC1                            F4FA
[ G] TRAC2                            F507
[ G] TRCFLG                           DCA4
[ G] TRET                             E4F9
[ G] TSTCHR                           E5D3
[ G] TSTDE1                           E5C3
[ G] TSTDEV                           E5C1
[ G] TSTE1                            E4F5
[ G] TSTERM                           E4E9
[ G] TSTRET                           F54F
[ G] UART0                            FE68
[ G] UART1                            FE69
[ G] UART2                            FE6A
[ G] UART3                            FE6B
[ G] UART4                            FE6C
[ G] UART5                            FE6D
[ G] UART6                            FE6E
[ G] UART7                            FE6F
[ G] UNC1                             EDD2
[ G] UNCHAIN                          EDBE
[ G] UNCMD                            F711
[ G] USREND                           DFFF
[ G] USRRAM                           2000
[ G] VALCHR                           E3A3
[ G] VALID                            E35C
[ G] VALTST                           E363
[ G] WDISK                            EB12
[ G] WPERM                            0040
[ G] WRB1                             E95A
[ G] WRC1                             E91B
[ G] WRDE1                            E486
[ G] WRDE2                            E495
[ G] WRDEC                            E47E
[ G] WRDEC8                           E47D
[ G] WRDEV                            E5A1
[ G] WRDEV1                           E5A3
[ G] WRHEX                            E55A
[ G] WRHEXW                           E545
[ G] WRITEB                           E932
[ G] WRITEC                           E90B
[ G] WRKCHG                           DCDD
[ G] WRKDRV                           DCDE
[ G] WRKSEC                           DCDF
[ G] WRKSPC                           DE00
[ G] WRLIN                            E54E
[ G] WRMSG                            E57E
[ G] WRNULL                           F94E
[ G] WRSEC                            F6EB
[ G] WRSER1                           F968
[ G] WRST1                            E576
[ G] WRST2                            E598
[ G] WRSTR                            E574
[ G] WRTST                            E633
[ G] WRWRK                            E638
[ G] WTRY1                            EB19
[ G] WTRY2                            EB1D
[ G] XFORMAT                          DC94
[ G] XHOME                            DC8E
[ G] XRDSEC                           DC90
[ G] XWRSEC                           DC92
[ G] ZERORC                           E313
