                      (        cubix.asm):00001         ;       title   CUBIX 6809 Operating System
                      (        cubix.asm):00002         ;*
                      (        cubix.asm):00003         ;* CUBIX Operating System for the 6809
                      (        cubix.asm):00004         ;*
                      (        cubix.asm):00005         ;* Copyright 1983-2005 Dave Dunfield
                      (        cubix.asm):00006         ;* All rights reserved.
                      (        cubix.asm):00007         ;*
                      (        cubix.asm):00008         ;* asmode=dist OR demo
                      (        cubix.asm):00009         
                      (        cubix.asm):00010                 IFDEF   dist
                      (        cubix.asm):00011         ;* MEMORY LOCATIONS FOR DISTRIBUTION (NON-PORTED) ROM
     E000             (        cubix.asm):00012         ROM             EQU $E000                         ; OS FIRMWARE
     DC00             (        cubix.asm):00013         RAM             EQU ROM-1024                      ; OS LOCAL STORAGE (1K)
     2000             (        cubix.asm):00014         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
     DFFF             (        cubix.asm):00015         USREND          EQU ROM-1                         ; RAMTEST STOPS HERE
                      (        cubix.asm):00016                 ENDIF
                      (        cubix.asm):00017                 IFDEF   demo
                      (        cubix.asm):00018         ;* MEMORY LOCATIONS FOR THE DEMO SYSTEM USING EXAMPLE DRIVERS
0000                  (        cubix.asm):00019         ROM             EQU $E000                         ; OS FORMWARE
0000                  (        cubix.asm):00020         RAM             EQU ROM-1024                      ; OS LOCAL STORAGE
0000                  (        cubix.asm):00021         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
0000                  (        cubix.asm):00022         USREND          EQU ROM-1                         ; RAMTEST STOPS HERE
0000                  (        cubix.asm):00023         dr_file         SET sample.sys
                      (        cubix.asm):00024                 ENDIF
                      (        cubix.asm):00025         ;* MISC CONSTANTS
     0008             (        cubix.asm):00026         NDEV            EQU 8                             ; NUMBER OF SERIAL DEVICES SUPPORTED
     0004             (        cubix.asm):00027         NDSK            EQU 4                             ; # OF DISK DRIVES SUPPORTED
     0000             (        cubix.asm):00028         DIRSEC          EQU 0                             ; DIRECTORY STARTS HERE
     0001             (        cubix.asm):00029         LNKSEC          EQU 1                             ; STARTING LINK SECTOR ON DISK
     00F0             (        cubix.asm):00030         DEFATR          EQU %11110000                     ; DEFAULT FILE ATTRIBUTES
                      (        cubix.asm):00031         ;* RETURN CODES
     0001             (        cubix.asm):00032         RCBOP           EQU 1                             ; BAD OPERAND
     0002             (        cubix.asm):00033         RCNOTF          EQU 2                             ; FILE NOT FOUND
     0003             (        cubix.asm):00034         RCPRO           EQU 3                             ; FILE PROTECTION VIOLATION
     0004             (        cubix.asm):00035         RCORE           EQU 4                             ; NOT OPEN FOR READ
     0005             (        cubix.asm):00036         RCOWE           EQU 5                             ; NOT OPEN FOR WRITE
     0006             (        cubix.asm):00037         RCEOF           EQU 6                             ; END OF FILE ENCOUNTERED
     0007             (        cubix.asm):00038         RCEXI           EQU 7                             ; FILE ALREADY EXISTS
     0008             (        cubix.asm):00039         RCNOS           EQU 8                             ; NO DISK SPACE AVAILABLE
     0009             (        cubix.asm):00040         RCDSK           EQU 9                             ; DISK ERROR
     000A             (        cubix.asm):00041         RCDEV           EQU 10                            ; INVALID DEVICE
     000B             (        cubix.asm):00042         RCDNL           EQU 11                            ; DOWNLOAD FAILURE
     00FF             (        cubix.asm):00043         RCCMD           EQU 255                           ; BAD COMMAND
                      (        cubix.asm):00044         ;* FILE PERMISSIONS
     0080             (        cubix.asm):00045         RPERM           EQU %10000000                     ; READ PERMISSION
     0040             (        cubix.asm):00046         WPERM           EQU %01000000                     ; WRITE PERMISSION
     0020             (        cubix.asm):00047         EPERM           EQU %00100000                     ; EXECUTE PERMISSION
     0010             (        cubix.asm):00048         DPERM           EQU %00010000                     ; DELETE PERMISSION
                      (        cubix.asm):00049         ;* DISK CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00050                 ORG     0
0000                  (        cubix.asm):00051         DRIVE
0000                  (        cubix.asm):00052                 RMB     1                                 ; DRIVE ID
0001                  (        cubix.asm):00053         NCYL
0001                  (        cubix.asm):00054                 RMB     1                                 ; # TRACKS
0002                  (        cubix.asm):00055         NHEAD
0002                  (        cubix.asm):00056                 RMB     1                                 ; # HEADS
0003                  (        cubix.asm):00057         NSEC
0003                  (        cubix.asm):00058                 RMB     1                                 ; # SECTORS/TRACK
0004                  (        cubix.asm):00059         CYL
0004                  (        cubix.asm):00060                 RMB     1                                 ; CURRENT CYLINDER
0005                  (        cubix.asm):00061         HEAD
0005                  (        cubix.asm):00062                 RMB     1                                 ; CURRENT HEAD
0006                  (        cubix.asm):00063         SEC
0006                  (        cubix.asm):00064                 RMB     1                                 ; CURRENT SECTOR
     0007             (        cubix.asm):00065         CSIZE           EQU *
                      (        cubix.asm):00066         ;* DIRECTORY ENTRY DESCRIPTION
                      (        cubix.asm):00067                 ORG     0
0000                  (        cubix.asm):00068         DPREFIX
0000                  (        cubix.asm):00069                 RMB     8                                 ; DIRECTORY PREFIX
0008                  (        cubix.asm):00070         DNAME
0008                  (        cubix.asm):00071                 RMB     8                                 ; FILENAME
0010                  (        cubix.asm):00072         DTYPE
0010                  (        cubix.asm):00073                 RMB     3                                 ; FILETYPE
0013                  (        cubix.asm):00074         DDADR
0013                  (        cubix.asm):00075                 RMB     2                                 ; DISK ADDRESS
0015                  (        cubix.asm):00076         DRADR
0015                  (        cubix.asm):00077                 RMB     2                                 ; RUN ADDRESS
0017                  (        cubix.asm):00078         DATTR
0017                  (        cubix.asm):00079                 RMB     1                                 ; FILE ATTRIBUTES
                      (        cubix.asm):00080         ;* FILE CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00081                 ORG     0
0000                  (        cubix.asm):00082         OTYPE
0000                  (        cubix.asm):00083                 RMB     1                                 ; TYPE OF OPEN (READ/WRITE ETC.)
0001                  (        cubix.asm):00084         ODRIVE
0001                  (        cubix.asm):00085                 RMB     1                                 ; DRIVE FILE IS ON
0002                  (        cubix.asm):00086         OFIRST
0002                  (        cubix.asm):00087                 RMB     2                                 ; FIRST SECTOR IN ILE
0004                  (        cubix.asm):00088         OSECTOR
0004                  (        cubix.asm):00089                 RMB     2                                 ; SECTOR BEING READ/WRITTEN
0006                  (        cubix.asm):00090         OLSTSEC
0006                  (        cubix.asm):00091                 RMB     2                                 ; LAST SECTOR READ/WRITTEN
0008                  (        cubix.asm):00092         OOFFSET
0008                  (        cubix.asm):00093                 RMB     2                                 ; OFFSET INTO SERIAL BUFFER
     000A             (        cubix.asm):00094         OSIZ            EQU *
                      (        cubix.asm):00095         ;* RAM VARIABLES
                      (        cubix.asm):00096                 ORG     RAM
DC00                  (        cubix.asm):00097         INBUFF
DC00                  (        cubix.asm):00098                 RMB     80                                ; INPUT BUFFER
     DC50             (        cubix.asm):00099         IRAM            EQU *                             ; START OF INITIALIZED RAM
DC50                  (        cubix.asm):00100         DCTRL
DC50                  (        cubix.asm):00101                 RMB     CSIZE*NDSK                        ; DRIVE CONTROL BLOCKS
DC6C                  (        cubix.asm):00102         CONIN
DC6C                  (        cubix.asm):00103                 RMB     1                                 ; SELECTED CONSOLE INPUT
DC6D                  (        cubix.asm):00104         CONOUT
DC6D                  (        cubix.asm):00105                 RMB     1                                 ; SELECTED CONSOLE OUTPUT
                      (        cubix.asm):00106         ;* DITAB MARKS START OF VECTOR TABLE
                      (        cubix.asm):00107         ;* SERIAL DEVICE DRIVERS
DC6E                  (        cubix.asm):00108         DITAB
DC6E                  (        cubix.asm):00109                 RMB     NDEV*2                            ; DEVICE INPUT DRIVERS
DC7E                  (        cubix.asm):00110         DOTAB
DC7E                  (        cubix.asm):00111                 RMB     NDEV*2                            ; DEVICE OUTPUT DRIVERS
                      (        cubix.asm):00112         ;* DISK DRIVERS
DC8E                  (        cubix.asm):00113         XHOME
DC8E                  (        cubix.asm):00114                 RMB     2                                 ; DISK HOME HEAD ROUTINE
DC90                  (        cubix.asm):00115         XRDSEC
DC90                  (        cubix.asm):00116                 RMB     2                                 ; DISK READ SECTOR ROUTINE
DC92                  (        cubix.asm):00117         XWRSEC
DC92                  (        cubix.asm):00118                 RMB     2                                 ; DISK WRITE SECTOR ROUTINE
DC94                  (        cubix.asm):00119         XFORMAT
DC94                  (        cubix.asm):00120                 RMB     2                                 ; DISK FORMAT ROUTINE
                      (        cubix.asm):00121         ;* MACHINE VECTORS
DC96                  (        cubix.asm):00122         SWIVEC
DC96                  (        cubix.asm):00123                 RMB     2                                 ; SWI HANDLER VECTOR
DC98                  (        cubix.asm):00124         SWI2VEC
DC98                  (        cubix.asm):00125                 RMB     2                                 ; SWI2 INTERRUPT VECTOR
DC9A                  (        cubix.asm):00126         SWI3VEC
DC9A                  (        cubix.asm):00127                 RMB     2                                 ; SWI3 INTERRUPT VECTOR
DC9C                  (        cubix.asm):00128         IRQVEC
DC9C                  (        cubix.asm):00129                 RMB     2                                 ; IRQ HANDLER VECTOR
DC9E                  (        cubix.asm):00130         FIRQVEC
DC9E                  (        cubix.asm):00131                 RMB     2                                 ; FIRQ HANDLER VECTOR
DCA0                  (        cubix.asm):00132         NMIVEC
DCA0                  (        cubix.asm):00133                 RMB     2                                 ; NMI HANDLER VECTOR
                      (        cubix.asm):00134         ;* MSGFLG MARKS START OF FLAG TABLES
DCA2                  (        cubix.asm):00135         MSGFLG
DCA2                  (        cubix.asm):00136                 RMB     1                                 ; MESSAGE ENABLED FLAG
DCA3                  (        cubix.asm):00137         DBGFLG
DCA3                  (        cubix.asm):00138                 RMB     1                                 ; DEBUG FLAG
DCA4                  (        cubix.asm):00139         TRCFLG
DCA4                  (        cubix.asm):00140                 RMB     1                                 ; TRACE ENABLED FLAG
     0003             (        cubix.asm):00141         NUMFLG          EQU 3                             ; # FLAGS SUPPORTED
                      (        cubix.asm):00142         ;* DEFAULT DIRECTORY
DCA5                  (        cubix.asm):00143         DEFDRV
DCA5                  (        cubix.asm):00144                 RMB     1                                 ; DEFAULT DRIVE
DCA6                  (        cubix.asm):00145         DEFDIR
DCA6                  (        cubix.asm):00146                 RMB     8                                 ; DEFAULT DIRECTORY
                      (        cubix.asm):00147         ;* SYSTEM DIRECTORY
DCAE                  (        cubix.asm):00148         SYSDRV
DCAE                  (        cubix.asm):00149                 RMB     1                                 ; SYSTEM DRIVE
DCAF                  (        cubix.asm):00150         SYSDIR
DCAF                  (        cubix.asm):00151                 RMB     8                                 ; SYSTEM DIRECTORY
                      (        cubix.asm):00152         ;* NON-INITIALIZED GLOBAL RAM
DCB7                  (        cubix.asm):00153         FDRIVE
DCB7                  (        cubix.asm):00154                 RMB     1                                 ; CURRENT DISK DRIVE
DCB8                  (        cubix.asm):00155         PREFIX
DCB8                  (        cubix.asm):00156                 RMB     8                                 ; DIRECTORY PREFIX
DCC0                  (        cubix.asm):00157         FNAME
DCC0                  (        cubix.asm):00158                 RMB     8                                 ; FILENAME
DCC8                  (        cubix.asm):00159         FTYPE
DCC8                  (        cubix.asm):00160                 RMB     3                                 ; FILETYPE
DCCB                  (        cubix.asm):00161         TEMP
DCCB                  (        cubix.asm):00162                 RMB     2                                 ; TEMPORARY STORAGE
DCCD                  (        cubix.asm):00163         TEMP1
DCCD                  (        cubix.asm):00164                 RMB     2                                 ; MORE TEMPORARY STORAGE
DCCF                  (        cubix.asm):00165         TEMP2
DCCF                  (        cubix.asm):00166                 RMB     2                                 ;STILL MORE
DCD1                  (        cubix.asm):00167         TEMP3
DCD1                  (        cubix.asm):00168                 RMB     2                                 ;STILL MORE
DCD3                  (        cubix.asm):00169         TEMP4
DCD3                  (        cubix.asm):00170                 RMB     2                                 ;STILL MORE
DCD5                  (        cubix.asm):00171         SAVB
DCD5                  (        cubix.asm):00172                 RMB     1                                 ;CALLERS 'B' REGISTER
DCD6                  (        cubix.asm):00173         SAVX
DCD6                  (        cubix.asm):00174                 RMB     2                                 ;CALLERS 'X' REGISTER
DCD8                  (        cubix.asm):00175         SAVY
DCD8                  (        cubix.asm):00176                 RMB     2                                 ;CALLERS 'Y' REGISTER
DCDA                  (        cubix.asm):00177         SAVDRV
DCDA                  (        cubix.asm):00178                 RMB     1                                 ;CALLERS ACTIVE DRIVE
DCDB                  (        cubix.asm):00179         SAVSTK
DCDB                  (        cubix.asm):00180                 RMB     2                                 ;CALLERS STACK POINTER
DCDD                  (        cubix.asm):00181         WRKCHG
DCDD                  (        cubix.asm):00182                 RMB     1                                 ;WORK SECTOR CHANGED
DCDE                  (        cubix.asm):00183         WRKDRV
DCDE                  (        cubix.asm):00184                 RMB     1                                 ;CURRENT WORK SECTOR DRIVE
DCDF                  (        cubix.asm):00185         WRKSEC
DCDF                  (        cubix.asm):00186                 RMB     2                                 ;CURRENT WORK SECTOR
DCE1                  (        cubix.asm):00187         CMDDRV
DCE1                  (        cubix.asm):00188                 RMB     1                                 ;CURRENT COMMAND FILE DRIVE
DCE2                  (        cubix.asm):00189         CMDSEC
DCE2                  (        cubix.asm):00190                 RMB     2                                 ;CURRENTLY OPEN COMMAND FILE SECTOR
DCE4                  (        cubix.asm):00191         CMDOFF
DCE4                  (        cubix.asm):00192                 RMB     2                                 ;OFFSET INTO COMMAND FILE SECTOR
DCE6                  (        cubix.asm):00193         CMDSTK
DCE6                  (        cubix.asm):00194                 RMB     2                                 ;COMMAND PROCESSOR STACK PTR
DCE8                  (        cubix.asm):00195         CMDRC
DCE8                  (        cubix.asm):00196                 RMB     1                                 ;COMMAND FILE RETURN CODES
DCE9                  (        cubix.asm):00197         OLDSTK
DCE9                  (        cubix.asm):00198                 RMB     2                                 ;STACK FROM BEFORE TEMP ENTRY
DCEB                  (        cubix.asm):00199         SDRIVE
DCEB                  (        cubix.asm):00200                 RMB     1                                 ;CURRENTLY SELECTED DRIVE
DCEC                  (        cubix.asm):00201         ERRCNT
DCEC                  (        cubix.asm):00202                 RMB     1                                 ;DISK ERROR RETRY COUNT
DCED                  (        cubix.asm):00203         CMDBUF
DCED                  (        cubix.asm):00204                 RMB     80                                ;COMMAND BUFFER PARAMETER SAVE AREA
     DE00             (        cubix.asm):00205         STACK           EQU RAM+512                       ;SYSTEM STACK
     DE00             (        cubix.asm):00206         WRKSPC          EQU STACK                         ;WORK AREA
                      (        cubix.asm):00207         ;*
                      (        cubix.asm):00208                 ORG     ROM
                      (        cubix.asm):00209         ;* MISC FIXED CONSTANTS
E000                  (        cubix.asm):00210         ROMCHK
E000 FFFF             (        cubix.asm):00211                 FDB     $FFFF                             ;BLANK SPACE TO INSERT CHECKSUM
                      (        cubix.asm):00212                 IFDEF   test
                      (        cubix.asm):00213                 LDD     #ssr
                      (        cubix.asm):00214                 STD     >tvector
                      (        cubix.asm):00215                 JMP     begin
                      (        cubix.asm):00216                 ENDIF
E002                  (        cubix.asm):00217         MBASE
E002 2000             (        cubix.asm):00218                 FDB     USRRAM                            ;BASE MEMORY ADDRESS
                      (        cubix.asm):00219         ;*
                      (        cubix.asm):00220         ;* HARDWARE INITIALIZATION ROUTINE
                      (        cubix.asm):00221         ;*
E004                  (        cubix.asm):00222         DOINIT
E004 108EDC50         (        cubix.asm):00223                 LDY     #IRAM                             ;POINT TO INITIALIZED RAM
E008 7EF941           (        cubix.asm):00224                 JMP     HWINIT                            ;INIT HARDWARE
                      (        cubix.asm):00225         ;*
                      (        cubix.asm):00226         ;* APPLICATION PROGRAM INTERFACE
                      (        cubix.asm):00227         ;*
E00B                  (        cubix.asm):00228         SSR
E00B F7DCD5           (        cubix.asm):00229                 STB     >SAVB                             ;APPLICS SAVED 'B'
E00E BFDCD6           (        cubix.asm):00230                 STX     >SAVX                             ;APPLICS SAVED 'X'
E011 10BFDCD8         (        cubix.asm):00231                 STY     >SAVY                             ;APPLICS SAVED 'Y'
E015 F6DCEB           (        cubix.asm):00232                 LDB     >SDRIVE                           ;GET DOS DRIVE
E018 F7DCDA           (        cubix.asm):00233                 STB     >SAVDRV                           ;SET SAVED DRIVE
E01B 316A             (        cubix.asm):00234                 LEAY    10,S                              ;ADDR OF SAVED PC
E01D AEA4             (        cubix.asm):00235                 LDX     ,Y                                ;GET IT
E01F E680             (        cubix.asm):00236                 LDB     ,X+                               ;GET OPERAND BYTE
E021 AFA4             (        cubix.asm):00237                 STX     ,Y                                ;SAVE UPDATED PC
E023 C16F             (        cubix.asm):00238                 CMPB    #NUMSSR                           ;IS IT A VALID CALL #
E025 2437             (        cubix.asm):00239                 BHS     INVSSR                            ;INVALID CALL
E027 58               (        cubix.asm):00240                 ASLB                                      ;DOUBLE FOR TWO BYTE ENTRIES
E028 8EF863           (        cubix.asm):00241                 LDX     #SSRTAB                           ;OFFSET TO IT
E02B 3A               (        cubix.asm):00242                 ABX                                       ;UNSIGNED ADD
E02C EC84             (        cubix.asm):00243                 LDD     ,X                                ;GET ADDRESS
E02E FDDCCB           (        cubix.asm):00244                 STD     >TEMP                             ;SAVE SO WE CAN EXEC
E031 10BFDCDB         (        cubix.asm):00245                 STY     >SAVSTK                           ;SAVE STACK POINTER
E035 B6DCA3           (        cubix.asm):00246                 LDA     >DBGFLG                           ;DEBUGGING?
E038 2606             (        cubix.asm):00247                 BNE     DBGSSR                            ;YES, OUTPUT DATA
E03A 357F             (        cubix.asm):00248                 PULS    CC,A,B,DP,X,Y,U                   ;RESTORE APPLICS REGS
E03C 6E9FDCCB         (        cubix.asm):00249                 JMP     [TEMP]                            ;EXECUTE SYSTEM CALL
E040                  (        cubix.asm):00250         DBGSSR
E040 BDE541           (        cubix.asm):00251                 JSR     WRLIN                             ;OUTPUT LINE
E043 53535220         (        cubix.asm):00252                 FCC     'SSR '
E047 00               (        cubix.asm):00253                 FCB     $00
E048 AEA4             (        cubix.asm):00254                 LDX     ,Y                                ;RECOVER PC
E04A E61F             (        cubix.asm):00255                 LDB     -1,X                              ;GET NUMBER BACK
E04C BDE470           (        cubix.asm):00256                 JSR     WRDEC8                            ;OUTPUT
E04F BDE541           (        cubix.asm):00257                 JSR     WRLIN
E052 202D20           (        cubix.asm):00258                 FCC     ' - '
E055 00               (        cubix.asm):00259                 FCB     $00
E056 357F             (        cubix.asm):00260                 PULS    CC,A,B,DP,X,Y,U
E058 8D33             (        cubix.asm):00261                 BSR     DMPREG1                           ;DISPLAY REGS
E05A 6E9FDCCB         (        cubix.asm):00262                 JMP     [TEMP]
E05E                  (        cubix.asm):00263         INVSSR
E05E 1F24             (        cubix.asm):00264                 TFR     Y,S                               ;FIX STACK
E060 BDE541           (        cubix.asm):00265                 JSR     WRLIN                             ;OUTPUT LINE
E063 496E76616C696420 (        cubix.asm):00266                 FCC     'Invalid SSR '
     53535220
E06F 00               (        cubix.asm):00267                 FCB     $00
E070 BDE470           (        cubix.asm):00268                 JSR     WRDEC8                            ;OUTPUT
E073 BDE541           (        cubix.asm):00269                 JSR     WRLIN                             ;OUTPUT LINE
E076 2061742024       (        cubix.asm):00270                 FCC     ' at $'
E07B 00               (        cubix.asm):00271                 FCB     $00
E07C ECE1             (        cubix.asm):00272                 LDD     ,S++                              ;GET ADDR
E07E 830002           (        cubix.asm):00273                 SUBD    #2                                ;BACK TO ADDRESS
E081 BDE538           (        cubix.asm):00274                 JSR     WRHEXW                            ;OUTPUT
E084 BDE57B           (        cubix.asm):00275                 JSR     LFCR                              ;NEW LINE
E087 7EE1B9           (        cubix.asm):00276                 JMP     DOSKCM                            ;RE-ENTER, INSURE NO COMMAND
E08A                  (        cubix.asm):00277         DMPREG
E08A 8D01             (        cubix.asm):00278                 BSR     DMPREG1                           ;BSR SO PC ON STACK,4
E08C 39               (        cubix.asm):00279                 RTS
                      (        cubix.asm):00280         ;* DEBUG ROUTINE
E08D                  (        cubix.asm):00281         DMPREG1
E08D 3407             (        cubix.asm):00282                 PSHS    CC,A,B                            ;SAVE REGS
E08F BDE541           (        cubix.asm):00283                 JSR     WRLIN                             ;OUTPUT MESSAGE
E092 50433D           (        cubix.asm):00284                 FCC     'PC='
E095 00               (        cubix.asm):00285                 FCB     $00
E096 EC65             (        cubix.asm):00286                 LDD     5,S                               ;GET PC
E098 830002           (        cubix.asm):00287                 SUBD    #2                                ;BACK UP TO SSR ADDRESS
E09B BDE538           (        cubix.asm):00288                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E09E BDE541           (        cubix.asm):00289                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0A1 2043433D         (        cubix.asm):00290                 FCC     ' CC='
E0A5 00               (        cubix.asm):00291                 FCB     $00
E0A6 A6E4             (        cubix.asm):00292                 LDA     ,S                                ;GET CONDITION CODE
E0A8 BDE54D           (        cubix.asm):00293                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0AB BDE541           (        cubix.asm):00294                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0AE 2044503D         (        cubix.asm):00295                 FCC     ' DP='
E0B2 00               (        cubix.asm):00296                 FCB     $00
E0B3 1FB8             (        cubix.asm):00297                 TFR     DP,A                              ;GET DIRECT PAGE
E0B5 BDE54D           (        cubix.asm):00298                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0B8 BDE541           (        cubix.asm):00299                 JSR     WRLIN                             ;OUTPUT MESSAHE
E0BB 20413D           (        cubix.asm):00300                 FCC     ' A='
E0BE 00               (        cubix.asm):00301                 FCB     $00
E0BF A661             (        cubix.asm):00302                 LDA     1,S                               ;GET SAVED 'A'
E0C1 BDE54D           (        cubix.asm):00303                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0C4 BDE541           (        cubix.asm):00304                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0C7 20423D           (        cubix.asm):00305                 FCC     ' B='
E0CA 00               (        cubix.asm):00306                 FCB     $00
E0CB A662             (        cubix.asm):00307                 LDA     2,S                               ;GET SAVED 'B'
E0CD BDE54D           (        cubix.asm):00308                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0D0 BDE541           (        cubix.asm):00309                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0D3 20583D           (        cubix.asm):00310                 FCC     ' X='
E0D6 00               (        cubix.asm):00311                 FCB     $00
E0D7 1F10             (        cubix.asm):00312                 TFR     X,D                               ;GET 'X'
E0D9 BDE538           (        cubix.asm):00313                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0DC BDE541           (        cubix.asm):00314                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0DF 20593D           (        cubix.asm):00315                 FCC     ' Y='
E0E2 00               (        cubix.asm):00316                 FCB     $00
E0E3 1F20             (        cubix.asm):00317                 TFR     Y,D                               ;GET 'Y'
E0E5 BDE538           (        cubix.asm):00318                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0E8 BDE541           (        cubix.asm):00319                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0EB 20553D           (        cubix.asm):00320                 FCC     ' U='
E0EE 00               (        cubix.asm):00321                 FCB     $00
E0EF 1F30             (        cubix.asm):00322                 TFR     U,D                               ;GET 'U'
E0F1 BDE538           (        cubix.asm):00323                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0F4 BDE541           (        cubix.asm):00324                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0F7 20533D           (        cubix.asm):00325                 FCC     ' S='
E0FA 00               (        cubix.asm):00326                 FCB     $00
E0FB 1F40             (        cubix.asm):00327                 TFR     S,D                               ;GET 'S'
E0FD C30007           (        cubix.asm):00328                 ADDD    #7                                ;DISCOUNT WHAT WE STACKED
E100 BDE538           (        cubix.asm):00329                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E103 BDE57B           (        cubix.asm):00330                 JSR     LFCR                              ;OUTPUT NEW LINE
E106 3587             (        cubix.asm):00331                 PULS    CC,A,B,PC                         ;RESTORE & RETURN
                      (        cubix.asm):00332         ;*
                      (        cubix.asm):00333         ;* ZERO WORK RAM & INIT HARDWARE DEVICES
                      (        cubix.asm):00334         ;*
E108                  (        cubix.asm):00335         BEGIN
E108 10CEDE00         (        cubix.asm):00336                 LDS     #STACK                            ;SET UP SYSTEM STACK
                      (        cubix.asm):00337         ;        IFDEF   epc
                      (        cubix.asm):00338         ;        CLR     $1400                             ;clear ram page
                      (        cubix.asm):00339         ;        ENDIF
                      (        cubix.asm):00340         ;        LDX     #RAM                              ;POINT TO START OF RAM
                      (        cubix.asm):00341         ;BEG1
                      (        cubix.asm):00342         ;        CLR     ,X+                               ;ZERO IT
                      (        cubix.asm):00343         ;        CMPX    #STACK                            ;AT END?
                      (        cubix.asm):00344         ;        BLO     BEG1                              ;CONTINUE
E10C BDE004           (        cubix.asm):00345                 JSR     DOINIT                            ;INITIALIZE HARDWARE
E10F BDE618           (        cubix.asm):00346                 JSR     PURGE1                            ;INITIALIZE WORK SECTOR
                      (        cubix.asm):00347         ;        CLR     >ERRCNT                           ;INDICATE NO ERRORS
                      (        cubix.asm):00348         ;        IFNDEF  test
                      (        cubix.asm):00349         ;;* PERFORM CHECKSUM TEST OF ROM
                      (        cubix.asm):00350         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00351         ;        FCC     'ROM... '
                      (        cubix.asm):00352         ;        LDX     #ROMCHK+2                         ;CHECKSUM STARTS HERE
                      (        cubix.asm):00353         ;        CLRA                                      ;ZERO HIGH
                      (        cubix.asm):00354         ;        CLRB                                      ;ZERO LOW
                      (        cubix.asm):00355         ;ROMT1
                      (        cubix.asm):00356         ;        ADDB    ,X+                               ;ADD IN ONE BYTE
                      (        cubix.asm):00357         ;        ADCA    #0                                ;INSURE HIGH INCREMENTS
                      (        cubix.asm):00358         ;        CMPX    #0                                ;AT END OF ROM?
                      (        cubix.asm):00359         ;        BNE     ROMT1                             ;NO, KEEP TRYING
                      (        cubix.asm):00360         ;        CMPD    >ROMCHK                           ;DOES CHECKSUM MATCH?
                      (        cubix.asm):00361         ;        BEQ     ROMT2                             ;YES, ITS OK
                      (        cubix.asm):00362         ;;* ROM TEST FAILED
                      (        cubix.asm):00363         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00364         ;        FCC     'Failed'
                      (        cubix.asm):00365         ;        DEC     >ERRCNT                           ;SET FLAG, INDICATE ERROR
                      (        cubix.asm):00366         ;        BRA     ROMT3
                      (        cubix.asm):00367         ;* ROM TEST PASSED
                      (        cubix.asm):00368         ;ROMT2
                      (        cubix.asm):00369         ;        BSR     SPASS                             ;DISPLAY PASSED MESSAGE
                      (        cubix.asm):00370         ;        ENDIF
                      (        cubix.asm):00371         ;;* PERFORM WALKING BIT TEST OF RAM
                      (        cubix.asm):00372         ;ROMT3
                      (        cubix.asm):00373         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00374         ;        FCC     'RAM... '
                      (        cubix.asm):00375         ;        LDX     >MBASE                            ;GET BASE RAM ADDRESS
                      (        cubix.asm):00376         ;RAMT1
                      (        cubix.asm):00377         ;        LDA     ,X                                ;GET ORIGINAL DATA BYTE
                      (        cubix.asm):00378         ;        LDB     #%10000000                        ;BEGIN WITH LEFTMOST BIT
                      (        cubix.asm):00379         ;RAMT2
                      (        cubix.asm):00380         ;        STB     ,X                                ;WRITE TEST PATTERN
                      (        cubix.asm):00381         ;        CMPB    ,X                                ;DOES IT MATCH
                      (        cubix.asm):00382         ;        BNE     RAMT5                             ;NO, FAILED
                      (        cubix.asm):00383         ;        LSRB                                      ;SHIFT BIT
                      (        cubix.asm):00384         ;        BNE     RAMT2                             ;DO NEXT BIT
                      (        cubix.asm):00385         ;        STA     ,X+                               ;RESTORE ORIGINAL DATA
                      (        cubix.asm):00386         ;;* ON EVEN PAGE BOUNDARYS, TEST FOR ABORT KEY
                      (        cubix.asm):00387         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00388         ;        TSTB                                      ;EVEN BOUNDARY?
                      (        cubix.asm):00389         ;        BNE     RAMT3                             ;NO, DON'T TEST
                      (        cubix.asm):00390         ;        JSR     TSTCHR                            ;ANY CHARACTERS RECEIVED?
                      (        cubix.asm):00391         ;        CMPA    #$1B                              ;ESCAPE ABORTS?
                      (        cubix.asm):00392         ;        BEQ     RAMT4                             ;ABORT RAM TEST
                      (        cubix.asm):00393         ;;* CONTINUE TILL AT END OF USER RAM
                      (        cubix.asm):00394         ;RAMT3
                      (        cubix.asm):00395         ;        CMPX    #USREND                           ;ARE WE OVER?
                      (        cubix.asm):00396         ;        BLO     RAMT1                             ;NO, ITS OK
                      (        cubix.asm):00397         ;;* FINISHED, RAM TEST PASSED
                      (        cubix.asm):00398         ;        BSR     SPASS                             ;INDICATE SUCCESS
                      (        cubix.asm):00399         ;        BRA     HELLO                             ;AND PROCEED
                      (        cubix.asm):00400         ;* DISPLAY 'PASSED' MESSAGE
                      (        cubix.asm):00401         ;SPASS
                      (        cubix.asm):00402         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00403         ;        FCC     'Passed'
                      (        cubix.asm):00404         ;        RTS
                      (        cubix.asm):00405         ;;* RAM TEST ABORTED BY ESCAPE
                      (        cubix.asm):00406         ;RAMT4
                      (        cubix.asm):00407         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00408         ;        FCC     'Aborted'
                      (        cubix.asm):00409         ;        BRA     RAMT6                             ;AND CONTINUE
                      (        cubix.asm):00410         ;;* RAM TEST FAILED,
                      (        cubix.asm):00411         ;RAMT5
                      (        cubix.asm):00412         ;        STA     ,X                                ;RESAVE OLD VALUE
                      (        cubix.asm):00413         ;        JSR     WRLIN                             ;OUTPUT FAILED MESSAGE
                      (        cubix.asm):00414         ;        FCC     'Failed at $'
                      (        cubix.asm):00415         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00416         ;        JSR     WRHEXW                            ;DISPLAY IN HEX
                      (        cubix.asm):00417         ;        JSR     LFCR                              ;NEW LINE
                      (        cubix.asm):00418         ;RAMT6
                      (        cubix.asm):00419         ;        DEC     >ERRCNT                           ;INDICATE ERRORS
                      (        cubix.asm):00420         ;* ISSUE HEARALD MESSAGE & START THE BALL ROLLING
E112                  (        cubix.asm):00421         HELLO
E112 BDE571           (        cubix.asm):00422                 JSR     WRMSG
E115 0A               (        cubix.asm):00423                 FCB     $0A
E116 4355424958207665 (        cubix.asm):00424                 FCC     'CUBIX version 1.5'
     7273696F6E20312E
     35
E127 0A0D0A           (        cubix.asm):00425                 FCB     $0A,$0D,$0A
E12A 436F707972696768 (        cubix.asm):00426                 FCC     'Copyright 1983-2005 Dave Dunfield'
     7420313938332D32
     3030352044617665
     2044756E6669656C
     64
E14B 0A0D             (        cubix.asm):00427                 FCB     $0A,$0D
E14D 416C6C2072696768 (        cubix.asm):00428                 FCC     'All rights reserved'
     7473207265736572
     766564
E160 0A0D00           (        cubix.asm):00429                 FCB     $0A,$0D,0
                      (        cubix.asm):00430         ;* IF NO ERRORS, EXECUTE THE STARTUP FILE
E163 B6DCEC           (        cubix.asm):00431                 LDA     >ERRCNT                           ;GET ERROR FLAG
E166 2618             (        cubix.asm):00432                 BNE     CMD                               ;ERRORS, DO NOT EXECUTE
E168 108EF70F         (        cubix.asm):00433                 LDY     #IPLFILE                          ;POINT TO IPL FILE
E16C BDE36A           (        cubix.asm):00434                 JSR     GETNAM                            ;GET FILE NAME
E16F CEE180           (        cubix.asm):00435                 LDU     #CMD                              ;ADDRESS TO RETURN TO
E172 3440             (        cubix.asm):00436                 PSHS    U                                 ;SAVE ON STACK (FAKE JSR)
E174 10FFDCDB         (        cubix.asm):00437                 STS     >SAVSTK                           ;SAVE STACK INCASE ERROR
E178 BDE685           (        cubix.asm):00438                 JSR     LOCDIR                            ;LOCATE FILE IN DIRECTORY
E17B 2603             (        cubix.asm):00439                 BNE     CMD                               ;NOT FOUND, REPORT ERROR
E17D 7EE24E           (        cubix.asm):00440                 JMP     EXE3                              ;EXECUTE FILE
                      (        cubix.asm):00441         ;*
                      (        cubix.asm):00442         ;* COMMAND INTERPRETER
                      (        cubix.asm):00443         ;*
E180                  (        cubix.asm):00444         CMD
E180 10CEDE00         (        cubix.asm):00445                 LDS     #STACK                            ;SET UP STACK
E184 BDE626           (        cubix.asm):00446                 JSR     WRTST                             ;WRITE OUT WORK SECTOR IF MODIFIED
E187 BDE498           (        cubix.asm):00447                 JSR     GLINE                             ;GET LINE OF INPUT
E18A 8D34             (        cubix.asm):00448                 BSR     EXECMD                            ;EXECUTE COMMAND
E18C                  (        cubix.asm):00449         RCRET
E18C 27F2             (        cubix.asm):00450                 BEQ     CMD                               ;NO RETURN CODE TO DISPLAY
E18E 1F89             (        cubix.asm):00451                 TFR     A,B                               ;WRITE IT
E190 BDE541           (        cubix.asm):00452                 JSR     WRLIN                             ;OUTPUT MESSAGE
E193 52633D           (        cubix.asm):00453                 FCC     'Rc='
E196 00               (        cubix.asm):00454                 FCB     $00
E197 BDE470           (        cubix.asm):00455                 JSR     WRDEC8                            ;OUTPUT IN DECIMAL
E19A BDE57B           (        cubix.asm):00456                 JSR     LFCR                              ;NEW LINE
E19D 20E1             (        cubix.asm):00457                 BRA     CMD                               ;GET NEXT COMMAND
                      (        cubix.asm):00458         ;* RE-ENTRY POINT
E19F                  (        cubix.asm):00459         REENT
E19F 3401             (        cubix.asm):00460                 PSHS    CC                                ;SAVE CC
E1A1 8E0000           (        cubix.asm):00461                 LDX     #0                                ;GET A ZERO
E1A4 BFDCE9           (        cubix.asm):00462                 STX     >OLDSTK                           ;CLEAR RETURN STACK
E1A7 BEDCE6           (        cubix.asm):00463                 LDX     >CMDSTK                           ;GET CMD STACK
E1AA 2604             (        cubix.asm):00464                 BNE     CMDGO                             ;KEEP IT GOING
E1AC 3501             (        cubix.asm):00465                 PULS    CC                                ;RESTORE CC
E1AE 20DC             (        cubix.asm):00466                 BRA     RCRET                             ;AND CONTINUE
E1B0                  (        cubix.asm):00467         CMDGO
E1B0 3501             (        cubix.asm):00468                 PULS    CC
E1B2 7EF586           (        cubix.asm):00469                 JMP     CMDRET                            ;RETURN TO COMMAND
                      (        cubix.asm):00470         ;* TEMPORARY DOS ENTRY
E1B5                  (        cubix.asm):00471         TMPENT
E1B5 10FFDCE9         (        cubix.asm):00472                 STS     >OLDSTK                           ;SAVE OLD STACK
E1B9                  (        cubix.asm):00473         DOSKCM
E1B9 4F               (        cubix.asm):00474                 CLRA
E1BA 5F               (        cubix.asm):00475                 CLRB
E1BB FDDCE6           (        cubix.asm):00476                 STD     >CMDSTK                           ;ZERO COMAND STACK
E1BE 20C0             (        cubix.asm):00477                 BRA     CMD                               ;CONTINUE
                      (        cubix.asm):00478         ;*
                      (        cubix.asm):00479         ;* EXECUTE DOS COMMAND(Y)
                      (        cubix.asm):00480         ;*
E1C0                  (        cubix.asm):00481         EXECMD
E1C0 10FFDCDB         (        cubix.asm):00482                 STS     >SAVSTK                           ;SAVE STACK POINTER
E1C4 B6DCEB           (        cubix.asm):00483                 LDA     >SDRIVE                           ;GET DISK DRIVE
E1C7 B7DCDA           (        cubix.asm):00484                 STA     >SAVDRV                           ;SAVE SELECTED DRIVE
E1CA BDE4CF           (        cubix.asm):00485                 JSR     SKIP                              ;LOOK FOR NULL COMMAND
E1CD 271A             (        cubix.asm):00486                 BEQ     NULCMD                            ;DON'T EXECUTE NULL
E1CF 10BFDCCF         (        cubix.asm):00487                 STY     >TEMP2                            ;SAVED POINTER TO COMMAND
E1D3 8140             (        cubix.asm):00488                 CMPA    #'@'                              ;EXECUTE COMMAND FILE?
E1D5 1027129A         (        cubix.asm):00489                 LBEQ    COMFIL                            ;DO IT
E1D9 8EF7F1           (        cubix.asm):00490                 LDX     #CMDNAM                           ;POINT TO COMMAND TABLE
E1DC BDE4F8           (        cubix.asm):00491                 JSR     TLOOK                             ;LOOK FOR IT
E1DF C10E             (        cubix.asm):00492                 CMPB    #NUMCMD                           ;IS IT OVER?
E1E1 2434             (        cubix.asm):00493                 BHS     EXE                               ;YES, TRY USER DEFINED
E1E3 58               (        cubix.asm):00494                 ASLB                                      ;TWO BYTE ENTRIES
E1E4 8EF847           (        cubix.asm):00495                 LDX     #CMDADR                           ;GET COMMAND ADDRESSES
E1E7 6E95             (        cubix.asm):00496                 JMP     [B,X]                             ;EXECUTE COMMAND
E1E9                  (        cubix.asm):00497         NULCMD
E1E9 39               (        cubix.asm):00498                 RTS
                      (        cubix.asm):00499         ;*
                      (        cubix.asm):00500         ;* RUN COMMAND
                      (        cubix.asm):00501         ;*
E1EA                  (        cubix.asm):00502         RUN
E1EA BDE289           (        cubix.asm):00503                 JSR     GETSNA                            ;GET FILENAME
E1ED                  (        cubix.asm):00504         RUN1
E1ED 8645             (        cubix.asm):00505                 LDA     #'E'                              ;GET TYPE
E1EF C658             (        cubix.asm):00506                 LDB     #'X'                              ;GET TYPE
E1F1 ED81             (        cubix.asm):00507                 STD     ,X++                              ;SAVE IT
E1F3 A784             (        cubix.asm):00508                 STA     ,X                                ;WRITE IT
E1F5 BDE64C           (        cubix.asm):00509                 JSR     LOCERR                            ;DOES IT EXIST
                      (        cubix.asm):00510         ;* FILE HAS BEEN FOUND, EXECUTE
E1F8                  (        cubix.asm):00511         RUN2
E1F8 A68817           (        cubix.asm):00512                 LDA     DATTR,X                           ;GET ATTRIBUTES
E1FB 8520             (        cubix.asm):00513                 BITA    #EPERM                            ;CAN WE EXECUTE?
E1FD 1027069F         (        cubix.asm):00514                 LBEQ    PROERR                            ;NO, REPORT ERROR
E201 EC8813           (        cubix.asm):00515                 LDD     DDADR,X                           ;GET DISK ADDRESS
E204 AE8815           (        cubix.asm):00516                 LDX     DRADR,X                           ;GET RUN ADDRESS
E207 BFDCCD           (        cubix.asm):00517                 STX     >TEMP1                            ;SAVE
E20A BDEE60           (        cubix.asm):00518                 JSR     LCHAIN                            ;LOAD THE CHAIN
E20D F6DCEB           (        cubix.asm):00519                 LDB     >SDRIVE                           ;GET OUR CURRENT DRIVE
E210 BDE4CF           (        cubix.asm):00520                 JSR     SKIP                              ;SKIP TO COMMANDS
E213 6E9FDCCD         (        cubix.asm):00521                 JMP     [TEMP1]                           ;PASS CONTROL TO HIM
                      (        cubix.asm):00522         ;*
                      (        cubix.asm):00523         ;* COMMAND WAS NOT RECOGNIZED, SEARCH SYSTEM DIRECTORY LOOKING
                      (        cubix.asm):00524         ;* FOR FILE WITH NAME MATCHING COMMAND.
                      (        cubix.asm):00525         ;*
E217                  (        cubix.asm):00526         EXE
E217 7FDCCD           (        cubix.asm):00527                 CLR     >TEMP1                            ;INDICATE IMPLIED RUN
E21A 8EDCAE           (        cubix.asm):00528                 LDX     #SYSDRV                           ;PT TO SYSTEM DIRECTORY (& DRIVE)
E21D BDE3A6           (        cubix.asm):00529                 JSR     GETDIR1                           ;GET DIR & DRIVE
E220 8D6F             (        cubix.asm):00530                 BSR     NAMGET                            ;GET NAME
E222 862A             (        cubix.asm):00531                 LDA     #'*'                              ;WILDCARD
E224 A784             (        cubix.asm):00532                 STA     ,X                                ;SAVE TYPE
E226 B6DCB7           (        cubix.asm):00533                 LDA     >FDRIVE                           ;GET FILENAME DRIVE
E229 B7DCEB           (        cubix.asm):00534                 STA     >SDRIVE                           ;SELECT DRIVE
E22C CC0000           (        cubix.asm):00535                 LDD     #DIRSEC                           ;GET DIRECTORY SECTOR
E22F                  (        cubix.asm):00536         EXE1
E22F BDE5EF           (        cubix.asm):00537                 JSR     RDWRK                             ;READ A WORK SECTOR
E232                  (        cubix.asm):00538         EXE2
E232 BDE316           (        cubix.asm):00539                 JSR     COMNAM                            ;DOES IT MATCH
E235 2717             (        cubix.asm):00540                 BEQ     EXE3                              ;YES, IT DOES
                      (        cubix.asm):00541         ;* NAMES DON'T MATCH, ADVANCE TO NEXT ENTRY
E237 308820           (        cubix.asm):00542                 LEAX    32,X                              ;NEXT
E23A 8CE000           (        cubix.asm):00543                 CMPX    #WRKSPC+512                       ;OVER?
E23D 25F3             (        cubix.asm):00544                 BLO     EXE2                              ;NO, KEEP LOOKING
E23F FCDCDF           (        cubix.asm):00545                 LDD     >WRKSEC                           ;GET SECTOR
E242 BDE5D2           (        cubix.asm):00546                 JSR     FNDLNK                            ;LOCATE LINK
E245 26E8             (        cubix.asm):00547                 BNE     EXE1                              ;READ IT & LOOK
                      (        cubix.asm):00548         ;* COMMAND IS INVALID, REPORT ERROR
E247                  (        cubix.asm):00549         BADCMD
E247 8EF719           (        cubix.asm):00550                 LDX     #UNCMD                            ;PT TO MESSAGE
E24A 86FF             (        cubix.asm):00551                 LDA     #RCCMD                            ;GET RC
E24C 2062             (        cubix.asm):00552                 BRA     ERRMRC                            ;REPORT ERROR
                      (        cubix.asm):00553         ;* COMMAND MATCHES FILENAME, CHECK TYPE FOR EXECUTE
E24E                  (        cubix.asm):00554         EXE3
E24E A68812           (        cubix.asm):00555                 LDA     DTYPE+2,X                         ;GET TYPE
E251 B7DCCA           (        cubix.asm):00556                 STA     >FTYPE+2                          ;SAVE IT
E254 EC8810           (        cubix.asm):00557                 LDD     DTYPE,X                           ;GET REST OF TYPE
E257 FDDCC8           (        cubix.asm):00558                 STD     >FTYPE                            ;SAVE IT
                      (        cubix.asm):00559         ;* WE HAVE FOUND EXECUTABLE FILE
E25A 10834000         (        cubix.asm):00560                 CMPD    #'@'*256                          ;IS IT A COMMAND FILE?
E25E 10271226         (        cubix.asm):00561                 LBEQ    COMGO                             ;YES, EXECUTE
E262 8145             (        cubix.asm):00562                 CMPA    #'E'                              ;'EX'?
E264 2609             (        cubix.asm):00563                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E266 C158             (        cubix.asm):00564                 CMPB    #'X'                              ;'EX'?
E268 2605             (        cubix.asm):00565                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E26A A18812           (        cubix.asm):00566                 CMPA    DTYPE+2,X                         ;INSURE ITS 'EXE'
E26D 2789             (        cubix.asm):00567                 BEQ     RUN2                              ;YES, EXECUTE
                      (        cubix.asm):00568         ;* UNKNOWN FILETYPE, TRY FOR USER COMMAND PROCESSOR
E26F                  (        cubix.asm):00569         EXE4
E26F 1F12             (        cubix.asm):00570                 TFR     X,Y                               ;'Y' POINTS TO DIR ENTRY
E271 8EDCC0           (        cubix.asm):00571                 LDX     #FNAME                            ;POINT TO TYPE
E274 ED81             (        cubix.asm):00572                 STD     ,X++                              ;SAVE IT
E276 A6A812           (        cubix.asm):00573                 LDA     DTYPE+2,Y                         ;GET LAST CHR
E279 A780             (        cubix.asm):00574                 STA     ,X+                               ;SAVE IT
E27B                  (        cubix.asm):00575         EXE5
E27B 6F80             (        cubix.asm):00576                 CLR     ,X+                               ;CLEAR IT
E27D 8CDCC8           (        cubix.asm):00577                 CMPX    #FNAME+8                          ;OVER?
E280 25F9             (        cubix.asm):00578                 BLO     EXE5                              ;ALL OUT
E282 10BEDCCF         (        cubix.asm):00579                 LDY     >TEMP2                            ;RESTORE COMMAND POINTER
E286 7EE1ED           (        cubix.asm):00580                 JMP     RUN1                              ;TRY THIS ONE
                      (        cubix.asm):00581         ;*
                      (        cubix.asm):00582         ;* GET FILENAME WITHOUT TYPE, NORMAL DEFAULT
                      (        cubix.asm):00583         ;*
E289                  (        cubix.asm):00584         GETSNA
E289 BDE3A3           (        cubix.asm):00585                 JSR     GETDIR                            ;GET DIRECTORY
E28C                  (        cubix.asm):00586         GETSN0
E28C 86FF             (        cubix.asm):00587                 LDA     #$FF                              ;FLAG
E28E B7DCCD           (        cubix.asm):00588                 STA     >TEMP1                            ;SET IT
E291                  (        cubix.asm):00589         NAMGET
E291 C608             (        cubix.asm):00590                 LDB     #8                                ;MAX EIGHT CHARS
E293                  (        cubix.asm):00591         GETSN1
E293 BDE4DC           (        cubix.asm):00592                 JSR     TSTERM                            ;TERMINATOR?
E296 2706             (        cubix.asm):00593                 BEQ     GOPAD                             ;YES, QUIT
E298 812F             (        cubix.asm):00594                 CMPA    #'/'                              ;SPECIAL TERMINATOR
E29A 2605             (        cubix.asm):00595                 BNE     GETSN2
E29C 313F             (        cubix.asm):00596                 LEAY    -1,Y                              ;BACKUP TO SLASH
E29E                  (        cubix.asm):00597         GOPAD
E29E 7EE39C           (        cubix.asm):00598                 JMP     PAD
E2A1                  (        cubix.asm):00599         GETSN2
E2A1 A780             (        cubix.asm):00600                 STA     ,X+                               ;SAVE IT
E2A3 5A               (        cubix.asm):00601                 DECB                                      ;BACKUP
E2A4 2AED             (        cubix.asm):00602                 BPL     GETSN1                            ;MORE
E2A6 7DDCCD           (        cubix.asm):00603                 TST     >TEMP1                            ;WERE WE 'RUN'ING
E2A9 279C             (        cubix.asm):00604                 BEQ     BADCMD                            ;NO,
                      (        cubix.asm):00605         ;*
                      (        cubix.asm):00606         ;* INVALID OPERAND
                      (        cubix.asm):00607         ;*
E2AB                  (        cubix.asm):00608         BADOPR
E2AB 8EF72E           (        cubix.asm):00609                 LDX     #BADOPM                           ;MESSAGE
E2AE 8601             (        cubix.asm):00610                 LDA     #RCBOP                            ;RETURN CODE
                      (        cubix.asm):00611         ;*
                      (        cubix.asm):00612         ;* ISSUE ERROR MESSAGE & RETURN TO CALLER WITH RETURN CODE
                      (        cubix.asm):00613         ;*
E2B0                  (        cubix.asm):00614         ERRMRC
E2B0 3401             (        cubix.asm):00615                 PSHS    CC                                ;SAVE IT
                      (        cubix.asm):00616         ;* VERIFY CONSOLE DEVICE IS VALID & RESET IF NOT
E2B2 F6DC6D           (        cubix.asm):00617                 LDB     >CONOUT                           ;GET OUTPUT
E2B5 C108             (        cubix.asm):00618                 CMPB    #NDEV                             ;IN RANGE
E2B7 240A             (        cubix.asm):00619                 BHS     ERRM1                             ;NO - ERROR
E2B9 108EDC7E         (        cubix.asm):00620                 LDY     #DOTAB                            ;POINT TO TABLE
E2BD 58               (        cubix.asm):00621                 ASLB                                      ;X2
E2BE 10AEA5           (        cubix.asm):00622                 LDY     B,Y                               ;INSTALLED?
E2C1 2605             (        cubix.asm):00623                 BNE     ERRM2                             ;YES, ITS OK
E2C3                  (        cubix.asm):00624         ERRM1
E2C3 C601             (        cubix.asm):00625                 LDB     #1                                ;DEFAULT DEVICE
E2C5 F7DC6D           (        cubix.asm):00626                 STB     >CONOUT                           ;RESET INPUT
E2C8                  (        cubix.asm):00627         ERRM2
E2C8 F6DC6C           (        cubix.asm):00628                 LDB     >CONIN                            ;GET INPUT
E2CB C108             (        cubix.asm):00629                 CMPB    #NDEV                             ;IN RANGE
E2CD 240A             (        cubix.asm):00630                 BHS     ERRM3                             ;NO - ERROR
E2CF 108EDC6E         (        cubix.asm):00631                 LDY     #DITAB                            ;POINT TO TABLE
E2D3 58               (        cubix.asm):00632                 ASLB                                      ;X2
E2D4 10AEA5           (        cubix.asm):00633                 LDY     B,Y                               ;INSTALLED?
E2D7 2605             (        cubix.asm):00634                 BNE     ERRM4                             ;YES, ITS OK
E2D9                  (        cubix.asm):00635         ERRM3
E2D9 C601             (        cubix.asm):00636                 LDB     #1                                ;DEFAULT DEVICE
E2DB F7DC6C           (        cubix.asm):00637                 STB     >CONIN                            ;RESET INPUT
E2DE                  (        cubix.asm):00638         ERRM4
E2DE 7DDCA2           (        cubix.asm):00639                 TST     >MSGFLG                           ;ARE MESSAGES ENABLED
E2E1 2706             (        cubix.asm):00640                 BEQ     NOEMSG                            ;NO, DON'T OUTPUT
E2E3 BDE567           (        cubix.asm):00641                 JSR     WRSTR                             ;OUTPUT
E2E6 BDE57B           (        cubix.asm):00642                 JSR     LFCR                              ;NEW LINE
E2E9                  (        cubix.asm):00643         NOEMSG
E2E9 3501             (        cubix.asm):00644                 PULS    CC                                ;RESTORE CC
                      (        cubix.asm):00645         ;* RETURN TO CALLER WITH NO ERROR MESSAGE
E2EB                  (        cubix.asm):00646         ERRRET
E2EB 3401             (        cubix.asm):00647                 PSHS    CC                                ;SAVE CC
E2ED F6DCDA           (        cubix.asm):00648                 LDB     >SAVDRV                           ;GET SAVED DRIVE
E2F0 F7DCEB           (        cubix.asm):00649                 STB     >SDRIVE                           ;RESET SELECTED DRIVE
E2F3 BEDCD6           (        cubix.asm):00650                 LDX     >SAVX                             ;RESTORE 'X'
E2F6 10BEDCD8         (        cubix.asm):00651                 LDY     >SAVY                             ;RESTORE 'Y'
E2FA F6DCD5           (        cubix.asm):00652                 LDB     >SAVB                             ;RESTORE 'B'
E2FD 3501             (        cubix.asm):00653                 PULS    CC                                ;RESTORE CONDITION CODES
E2FF 2705             (        cubix.asm):00654                 BEQ     ZERORC                            ;ITS ZERO
E301 10FEDCDB         (        cubix.asm):00655                 LDS     >SAVSTK                           ;GET SAVED SP
E305 39               (        cubix.asm):00656                 RTS
E306                  (        cubix.asm):00657         ZERORC
E306 10FEDCDB         (        cubix.asm):00658                 LDS     >SAVSTK                           ;GET STACK
E30A 1A04             (        cubix.asm):00659                 ORCC    #%00000100                        ;SET 'Z'
E30C 39               (        cubix.asm):00660                 RTS
                      (        cubix.asm):00661         ;*
                      (        cubix.asm):00662         ;* GET FILE WITHOUT TYPE, DEFAULT TO SYSTEM
                      (        cubix.asm):00663         ;*
E30D                  (        cubix.asm):00664         GETSYS
E30D 8EDCAE           (        cubix.asm):00665                 LDX     #SYSDRV                           ;DEFAULT IS SYSTEM
                      (        cubix.asm):00666         ;*
                      (        cubix.asm):00667         ;* GET FILENAME WITHOUR TYPE, DEFAULT(X)
                      (        cubix.asm):00668         ;*
E310                  (        cubix.asm):00669         GETSDI
E310 BDE3A6           (        cubix.asm):00670                 JSR     GETDIR1                           ;GET NAME
E313 7EE28C           (        cubix.asm):00671                 JMP     GETSN0                            ;GET FILENAME
                      (        cubix.asm):00672         ;*
                      (        cubix.asm):00673         ;* COMPARES NAME(X) TO SAVED FILENAME
                      (        cubix.asm):00674         ;*
E316                  (        cubix.asm):00675         COMNAM
E316 3436             (        cubix.asm):00676                 PSHS    A,B,X,Y                           ;SAVE REGS
E318 108EDCB8         (        cubix.asm):00677                 LDY     #PREFIX                           ;POINT TO SAVED
E31C A684             (        cubix.asm):00678                 LDA     ,X                                ;INSURE NAME IS NOT NULL
E31E 2603             (        cubix.asm):00679                 BNE     NOTNUL                            ;ITS NOT,
E320 4A               (        cubix.asm):00680                 DECA                                      ;GET FF
E321 2010             (        cubix.asm):00681                 BRA     CEND                              ;QUIT
E323                  (        cubix.asm):00682         NOTNUL
E323 C608             (        cubix.asm):00683                 LDB     #8                                ;EIGHT CHARS NI PREFIX
E325 8D0E             (        cubix.asm):00684                 BSR     COMX                              ;COMPARE
E327 260A             (        cubix.asm):00685                 BNE     CEND                              ;NOT SAME, EXIT
E329 C608             (        cubix.asm):00686                 LDB     #8                                ;EIGHT CHARS IN NAME
E32B 8D08             (        cubix.asm):00687                 BSR     COMX                              ;COMPARE
E32D 2604             (        cubix.asm):00688                 BNE     CEND                              ;NOT SAME
E32F C603             (        cubix.asm):00689                 LDB     #3                                ;THREE CHARS IN TYPE
E331 8D02             (        cubix.asm):00690                 BSR     COMX                              ;COMPARE
E333                  (        cubix.asm):00691         CEND
E333 35B6             (        cubix.asm):00692                 PULS    A,B,X,Y,PC                        ;GO HOME
E335                  (        cubix.asm):00693         COMX
E335 A6A0             (        cubix.asm):00694                 LDA     ,Y+                               ;GET CHAR FROM SAVED
E337 812A             (        cubix.asm):00695                 CMPA    #'*'                              ;WILDCARD?
E339 2708             (        cubix.asm):00696                 BEQ     RNXT                              ;RETURN WITH TRUE
E33B A180             (        cubix.asm):00697                 CMPA    ,X+                               ;DOES IT MATCH
E33D 2606             (        cubix.asm):00698                 BNE     RNXT1                             ;NO, FAIL
E33F 5A               (        cubix.asm):00699                 DECB                                      ;BACKUP
E340 26F3             (        cubix.asm):00700                 BNE     COMX                              ;OK
E342 39               (        cubix.asm):00701                 RTS
E343                  (        cubix.asm):00702         RNXT
E343 3001             (        cubix.asm):00703                 LEAX    1,X
E345                  (        cubix.asm):00704         RNXT1
E345 5A               (        cubix.asm):00705                 DECB                                      ;REDUCE COUNT
E346 2704             (        cubix.asm):00706                 BEQ     BRET                              ;DONE, QUIT
E348 3121             (        cubix.asm):00707                 LEAY    1,Y                               ;ADVANCE
E34A 20F7             (        cubix.asm):00708                 BRA     RNXT                              ;AND CONTINUE
E34C                  (        cubix.asm):00709         BRET
E34C 812A             (        cubix.asm):00710                 CMPA    #'*'                              ;WUZ IT WILDCARD
E34E 39               (        cubix.asm):00711                 RTS
                      (        cubix.asm):00712         ;*
                      (        cubix.asm):00713         ;* TEST SAVED FILENAME FOR VALIDITY AS A SINGLE FILE
                      (        cubix.asm):00714         ;*
E34F                  (        cubix.asm):00715         VALID
E34F 3416             (        cubix.asm):00716                 PSHS    A,B,X                             ;SAVE REGS
E351 C613             (        cubix.asm):00717                 LDB     #19                               ;LENGTH OF NAME
E353 8EDCB8           (        cubix.asm):00718                 LDX     #PREFIX                           ;POINT TO NAME
E356                  (        cubix.asm):00719         VALTST
E356 A680             (        cubix.asm):00720                 LDA     ,X+                               ;GETCHAR
E358 812A             (        cubix.asm):00721                 CMPA    #'*'                              ;WILDCARD
E35A 2704             (        cubix.asm):00722                 BEQ     RETNZ                             ;INVALID
E35C 5A               (        cubix.asm):00723                 DECB                                      ;BACKUP
E35D 26F7             (        cubix.asm):00724                 BNE     VALTST                            ;CONTINUE
E35F 4F               (        cubix.asm):00725                 CLRA                                      ;ZERO RETURN CODE
E360                  (        cubix.asm):00726         RETNZ
E360 4D               (        cubix.asm):00727                 TSTA                                      ;SET 'Z' FLAG
E361 3596             (        cubix.asm):00728                 PULS    A,B,X,PC
                      (        cubix.asm):00729         ;*
                      (        cubix.asm):00730         ;* GET FILENAME & INSURE ITS VALID
                      (        cubix.asm):00731         ;*
E363                  (        cubix.asm):00732         GETVAL
E363 8D05             (        cubix.asm):00733                 BSR     GETNAM                            ;GET FILENAME
E365 8DE8             (        cubix.asm):00734                 BSR     VALID                             ;TEST FOR VALID
E367 2620             (        cubix.asm):00735                 BNE     BADOP2                            ;INVALID, ERROR
E369 39               (        cubix.asm):00736                 RTS
                      (        cubix.asm):00737         ;*
                      (        cubix.asm):00738         ;* GET A FILENAME FROM INPUT LINE
                      (        cubix.asm):00739         ;*
E36A                  (        cubix.asm):00740         GETNAM
E36A 8D37             (        cubix.asm):00741                 BSR     GETDIR                            ;GET DRIVE & DIRECTORY
E36C                  (        cubix.asm):00742         GFNAM
E36C C608             (        cubix.asm):00743                 LDB     #8                                ;EIGHT CHARS/NAME
E36E                  (        cubix.asm):00744         GF1
E36E 8D26             (        cubix.asm):00745                 BSR     VALCHR                            ;GET CHAR
E370 812E             (        cubix.asm):00746                 CMPA    #'.'                              ;SEPERATOR?
E372 2707             (        cubix.asm):00747                 BEQ     GFTYP                             ;YES
E374 A780             (        cubix.asm):00748                 STA     ,X+                               ;SAVE IT
E376 5A               (        cubix.asm):00749                 DECB                                      ;BACKUP
E377 2AF5             (        cubix.asm):00750                 BPL     GF1                               ;KEEP GOING
E379 200E             (        cubix.asm):00751                 BRA     BADOP2                            ;ERROR
E37B                  (        cubix.asm):00752         GFTYP
E37B 8D1F             (        cubix.asm):00753                 BSR     PAD                               ;PAD FILENAME
E37D C603             (        cubix.asm):00754                 LDB     #3                                ;THREE CHARS/TYPE
E37F                  (        cubix.asm):00755         GF2
E37F BDE4DC           (        cubix.asm):00756                 JSR     TSTERM                            ;GET CHAR
E382 2708             (        cubix.asm):00757                 BEQ     GF3                               ;HIT END
E384 A780             (        cubix.asm):00758                 STA     ,X+                               ;SAVE IT
E386 5A               (        cubix.asm):00759                 DECB                                      ;REDUCE COUNT
E387 2AF6             (        cubix.asm):00760                 BPL     GF2                               ;KEEP GOING
E389                  (        cubix.asm):00761         BADOP2
E389 7EE2AB           (        cubix.asm):00762                 JMP     BADOPR                            ;ERROR
E38C                  (        cubix.asm):00763         GF3
E38C 8D0E             (        cubix.asm):00764                 BSR     PAD                               ;ZERO IT
E38E BDE4CF           (        cubix.asm):00765                 JSR     SKIP                              ;TO NEXT
E391 8EDCB8           (        cubix.asm):00766                 LDX     #PREFIX                           ;POINT TO IT
E394 4F               (        cubix.asm):00767                 CLRA                                      ;ZERO RC
E395 39               (        cubix.asm):00768                 RTS
                      (        cubix.asm):00769         ;* ABORT IF CHARACTER INVALID
E396                  (        cubix.asm):00770         VALCHR
E396 BDE4DC           (        cubix.asm):00771                 JSR     TSTERM                            ;TEST FOR CHAR OK
E399 27EE             (        cubix.asm):00772                 BEQ     BADOP2                            ;INVALID
E39B 39               (        cubix.asm):00773                 RTS
                      (        cubix.asm):00774         ;* PADS NAME WITH BLANKS UNTILL 'B' IS ZERO
E39C                  (        cubix.asm):00775         PAD
E39C 5A               (        cubix.asm):00776                 DECB                                      ;BACKUP COUNT
E39D 2B51             (        cubix.asm):00777                 BMI     GETD5                             ;THATS ALL
E39F 6F80             (        cubix.asm):00778                 CLR     ,X+                               ;CLEAR IT
E3A1 20F9             (        cubix.asm):00779                 BRA     PAD
                      (        cubix.asm):00780         ;*
                      (        cubix.asm):00781         ;* GETS A DRIVE AND DIRECTORY FROM THE INPUT LINE
                      (        cubix.asm):00782         ;*
E3A3                  (        cubix.asm):00783         GETDIR
E3A3 8EDCA5           (        cubix.asm):00784                 LDX     #DEFDRV                           ;PT TO IT
E3A6                  (        cubix.asm):00785         GETDIR1
E3A6 A680             (        cubix.asm):00786                 LDA     ,X+                               ;GET DEFAULT DRIVE
E3A8 B7DCB7           (        cubix.asm):00787                 STA     >FDRIVE                           ;SET IT
E3AB BDE4CF           (        cubix.asm):00788                 JSR     SKIP                              ;ADVANCE
E3AE 270B             (        cubix.asm):00789                 BEQ     GETD1                             ;END OF LINE, NO DRIVE SPEC
E3B0 E621             (        cubix.asm):00790                 LDB     1,Y                               ;GET NEXT CHAR
E3B2 C13A             (        cubix.asm):00791                 CMPB    #':'                              ;IS IT A DRIVE SPEC?
E3B4 2605             (        cubix.asm):00792                 BNE     GETD1                             ;NO, IGNORE IT
E3B6 8D3D             (        cubix.asm):00793                 BSR     GETDRV1                           ;GET DRIVE ID
E3B8 B7DCB7           (        cubix.asm):00794                 STA     >FDRIVE                           ;SET DRIVE ID
E3BB                  (        cubix.asm):00795         GETD1
E3BB 3420             (        cubix.asm):00796                 PSHS    Y                                 ;SAVE
E3BD 1F12             (        cubix.asm):00797                 TFR     X,Y                               ;SET UP PTR TO DEFAULT
E3BF 8EDCB8           (        cubix.asm):00798                 LDX     #PREFIX                           ;POINT TO PREFIX
E3C2 C608             (        cubix.asm):00799                 LDB     #8                                ;MOVE EIGHT
E3C4                  (        cubix.asm):00800         GETD2
E3C4 A6A0             (        cubix.asm):00801                 LDA     ,Y+                               ;GET FROM DEFAULT
E3C6 A780             (        cubix.asm):00802                 STA     ,X+                               ;SAVE IN NAME
E3C8 5A               (        cubix.asm):00803                 DECB                                      ;REDUCE COUNT
E3C9 26F9             (        cubix.asm):00804                 BNE     GETD2                             ;MOVE EM ALL
E3CB 3520             (        cubix.asm):00805                 PULS    Y                                 ;RESTORE
E3CD A6A4             (        cubix.asm):00806                 LDA     ,Y                                ;GET CHAR
E3CF 815B             (        cubix.asm):00807                 CMPA    #'['                              ;DIRECTORY ID
E3D1 261D             (        cubix.asm):00808                 BNE     GETD5                             ;NO, SKIP IT
E3D3 8EDCB8           (        cubix.asm):00809                 LDX     #PREFIX                           ;POINT TO PREFIX
E3D6 3121             (        cubix.asm):00810                 LEAY    1,Y                               ;ADVANCE
E3D8 C608             (        cubix.asm):00811                 LDB     #8                                ;UP TO EIGHT CHARS
E3DA                  (        cubix.asm):00812         GETD3
E3DA BDE396           (        cubix.asm):00813                 JSR     VALCHR                            ;GET CHAR, INSURE VALID
E3DD 815D             (        cubix.asm):00814                 CMPA    #']'                              ;CLOSING?
E3DF 2708             (        cubix.asm):00815                 BEQ     GETD4                             ;YES
E3E1 A780             (        cubix.asm):00816                 STA     ,X+                               ;SAVE IT
E3E3 5A               (        cubix.asm):00817                 DECB                                      ;BACKUP
E3E4 2AF4             (        cubix.asm):00818                 BPL     GETD3                             ;KEEP GOING
E3E6                  (        cubix.asm):00819         BADOP1
E3E6 7EE2AB           (        cubix.asm):00820                 JMP     BADOPR
E3E9                  (        cubix.asm):00821         GETD4
E3E9 8DB1             (        cubix.asm):00822                 BSR     PAD                               ;PAD WITH BLANKS
E3EB 7DDCB8           (        cubix.asm):00823                 TST     >PREFIX                           ;IS IT NULL
E3EE 27F6             (        cubix.asm):00824                 BEQ     BADOP1                            ;INVALID
E3F0                  (        cubix.asm):00825         GETD5
E3F0 4F               (        cubix.asm):00826                 CLRA
E3F1 39               (        cubix.asm):00827                 RTS
                      (        cubix.asm):00828         ;* GET A DRIVE & RETURN IN A
E3F2                  (        cubix.asm):00829         GETDRV
E3F2 BDE4CF           (        cubix.asm):00830                 JSR     SKIP                              ;ADVANCE TO OPERAND
E3F5                  (        cubix.asm):00831         GETDRV1
E3F5 ECA1             (        cubix.asm):00832                 LDD     ,Y++                              ;GET DATA
E3F7 C13A             (        cubix.asm):00833                 CMPB    #':'                              ;COLON
E3F9 26EB             (        cubix.asm):00834                 BNE     BADOP1                            ;NO
E3FB 8041             (        cubix.asm):00835                 SUBA    #'A'                              ;CONVERT
E3FD 8104             (        cubix.asm):00836                 CMPA    #4                                ;IN RANGE
E3FF 24E5             (        cubix.asm):00837                 BHS     BADOP1                            ;NO
E401 1A04             (        cubix.asm):00838                 ORCC    #4                                ;SET 'Z'
E403 39               (        cubix.asm):00839                 RTS
                      (        cubix.asm):00840         ;*
                      (        cubix.asm):00841         ;* GETS A VALUE (DECIMAL OR HEX) FROM INPUT LINE
                      (        cubix.asm):00842         ;*
E404                  (        cubix.asm):00843         GETNUM
E404 BDE4CF           (        cubix.asm):00844                 JSR     SKIP                              ;SKIP TO DATA
E407 27DD             (        cubix.asm):00845                 BEQ     BADOP1                            ;INVALID
E409 8124             (        cubix.asm):00846                 CMPA    #'$'                              ;HEX?
E40B 2643             (        cubix.asm):00847                 BNE     GETDV                             ;NO, GET DECIMAL
E40D 3121             (        cubix.asm):00848                 LEAY    1,Y                               ;ADVANCE TO NEXT
                      (        cubix.asm):00849         ;*
                      (        cubix.asm):00850         ;* GETS A 16 BIT HEX NUMBER FOR X FROM THE INPUT LINE.
                      (        cubix.asm):00851         ;*
E40F                  (        cubix.asm):00852         GETHEX
E40F BDE4CF           (        cubix.asm):00853                 JSR     SKIP                              ;GET CHARACTER
E412 27D2             (        cubix.asm):00854                 BEQ     BADOP1                            ;INDICATE BAD OPERAND
E414                  (        cubix.asm):00855         GETHV
E414 8E0000           (        cubix.asm):00856                 LDX     #0                                ;START WITH ZERO
E417                  (        cubix.asm):00857         GETL1
E417 BDE4DC           (        cubix.asm):00858                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E41A 2728             (        cubix.asm):00859                 BEQ     HEXEND                            ;IF SO, THIS IS IT
E41C 8030             (        cubix.asm):00860                 SUBA    #'0'                              ;CONVERT TO BINARY
E41E 810A             (        cubix.asm):00861                 CMPA    #10                               ;TEST FOR > '9'
E420 250A             (        cubix.asm):00862                 BLO     DIGOK                             ;IF NOT, DIGIT IS OK
E422 8111             (        cubix.asm):00863                 CMPA    #$11                              ;TEST FOR < 'A'
E424 2DC0             (        cubix.asm):00864                 BLT     BADOP1                            ;OPERAND IS INVALID
E426 8007             (        cubix.asm):00865                 SUBA    #7                                ;CONVERT TO ASCII
E428 8110             (        cubix.asm):00866                 CMPA    #$10                              ;TEST FOR 0-F
E42A 24BA             (        cubix.asm):00867                 BHS     BADOP1                            ;IF NOT, DIGIT IS BAD
E42C                  (        cubix.asm):00868         DIGOK
E42C B7DCCC           (        cubix.asm):00869                 STA     >TEMP+1                           ;SAVE FOR LATER
E42F 8605             (        cubix.asm):00870                 LDA     #5                                ;SHIFT FOUR TIMES
E431 B7DCCB           (        cubix.asm):00871                 STA     >TEMP                             ;SAVE COUNTER
E434                  (        cubix.asm):00872         DSHFT
E434 1F10             (        cubix.asm):00873                 TFR     X,D                               ;COPY TO X
E436 308B             (        cubix.asm):00874                 LEAX    D,X                               ;MULTIPLY BY 2, = 1 BIT SHIFT
E438 7ADCCB           (        cubix.asm):00875                 DEC     >TEMP                             ;REDUCE COUNT
E43B 26F7             (        cubix.asm):00876                 BNE     DSHFT                             ;KEEP SHIFTING
E43D FADCCC           (        cubix.asm):00877                 ORB     >TEMP+1                           ;STICK ON EXTRA DIGIT
E440 1F01             (        cubix.asm):00878                 TFR     D,X                               ;COPY BACK TO X
E442 20D3             (        cubix.asm):00879                 BRA     GETL1                             ;GET NEXT DIGIT
E444                  (        cubix.asm):00880         HEXEND
E444 BDE4CF           (        cubix.asm):00881                 JSR     SKIP                              ;ADVANCE TO NEXT OPERAND
E447 4F               (        cubix.asm):00882                 CLRA                                      ;INDICATE ZERO RETURN CODE
E448 39               (        cubix.asm):00883                 RTS
                      (        cubix.asm):00884         ;*
                      (        cubix.asm):00885         ;* GETS A DECIMAL NUMBER FROM THE TERMINAL.
                      (        cubix.asm):00886         ;*
E449                  (        cubix.asm):00887         GETDEC
E449 BDE4CF           (        cubix.asm):00888                 JSR     SKIP                              ;SKIP TO START OF OPERAND.
E44C 1027FE5B         (        cubix.asm):00889                 LBEQ    BADOPR                            ;IF INVALID, GO BACK.
E450                  (        cubix.asm):00890         GETDV
E450 8E0000           (        cubix.asm):00891                 LDX     #0                                ;START WITH ZERO.
E453                  (        cubix.asm):00892         DECDIG
E453 BDE4DC           (        cubix.asm):00893                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E456 27EC             (        cubix.asm):00894                 BEQ     HEXEND                            ;IF THATS ALL, FORGET IT.
E458 8030             (        cubix.asm):00895                 SUBA    #'0'                              ;CONVERT TO BINARY.
E45A 8109             (        cubix.asm):00896                 CMPA    #9                                ;TEST FOR INVALID.
E45C 1022FE4B         (        cubix.asm):00897                 LBHI    BADOPR                            ;AGAIN, INVALID OPERAND.
E460 3402             (        cubix.asm):00898                 PSHS    A                                 ;SAVE ACC.
E462 CC000A           (        cubix.asm):00899                 LDD     #10                               ;MUL BY 10
E465 BDF69E           (        cubix.asm):00900                 JSR     MUL16                             ;D=D*X
E468 EBE0             (        cubix.asm):00901                 ADDB    ,S+                               ;ADD IN DIGIT
E46A 8900             (        cubix.asm):00902                 ADCA    #0                                ;INSURE HIGH GOES
E46C 1F01             (        cubix.asm):00903                 TFR     D,X                               ;COPY TO RESULT
E46E 20E3             (        cubix.asm):00904                 BRA     DECDIG                            ;GET NEXT
                      (        cubix.asm):00905         ;*
E470                  (        cubix.asm):00906         WRDEC8
E470 4F               (        cubix.asm):00907                 CLRA                                      ;DISPLAY 8 BIT BUMBER (B) IN DECIMAL
                      (        cubix.asm):00908         ;*
                      (        cubix.asm):00909         ;* DISPLAYS 16 BIT NUMBER IN D AS A DECIMAL NUMBER,
                      (        cubix.asm):00910         ;*
E471                  (        cubix.asm):00911         WRDEC
E471 3436             (        cubix.asm):00912                 PSHS    A,B,X,Y                           ;SAVE X-Y REGISTERS
E473 108E0000         (        cubix.asm):00913                 LDY     #0                                ;START WITH ZERO CHARACTERS
E477 1F01             (        cubix.asm):00914                 TFR     D,X                               ;SET UP STARTING VALUE
E479                  (        cubix.asm):00915         WRDE1
E479 CC000A           (        cubix.asm):00916                 LDD     #10                               ;DIVIDE BY 10
E47C BDF6BE           (        cubix.asm):00917                 JSR     DIV16                             ;X=X/D, D=REMAINDER
E47F 3404             (        cubix.asm):00918                 PSHS    B                                 ;SAVE REMAINDER
E481 3121             (        cubix.asm):00919                 LEAY    1,Y                               ;INDICATE ANOTHER ON STACK
E483 8C0000           (        cubix.asm):00920                 CMPX    #0                                ;ANY MORE?
E486 26F1             (        cubix.asm):00921                 BNE     WRDE1                             ;NO, CONTINUE
E488                  (        cubix.asm):00922         WRDE2
E488 3502             (        cubix.asm):00923                 PULS    A                                 ;GET DIGIT BACK
E48A 8B30             (        cubix.asm):00924                 ADDA    #'0'                              ;CONVERT TO PRINTABLE FORM
E48C BDE58D           (        cubix.asm):00925                 JSR     PUTCHR                            ;DISPLAY DECIMAL DIGIT
E48F 313F             (        cubix.asm):00926                 LEAY    -1,Y                              ;REDUCE COUNT
E491 26F5             (        cubix.asm):00927                 BNE     WRDE2                             ;IF NOT END, CONTINUE DISPLAYING
E493 35B6             (        cubix.asm):00928                 PULS    A,B,X,Y,PC                        ;RESTORE INDEX REG'S
                      (        cubix.asm):00929         ;*
                      (        cubix.asm):00930         ;* GETS AND BUFFERS A LINE FROM THE TERMINAL, ON EXIT, Y REGISTER
                      (        cubix.asm):00931         ;* POINTS TO LINE IN BUFFER.
                      (        cubix.asm):00932         ;*
E495                  (        cubix.asm):00933         GLFCR
E495 BDE57B           (        cubix.asm):00934                 JSR     LFCR                              ;START A NEW LINE
E498                  (        cubix.asm):00935         GLINE
E498 862A             (        cubix.asm):00936                 LDA     #'*'                              ;GET PROMPT CHARACTER
E49A BDE58D           (        cubix.asm):00937                 JSR     PUTCHR                            ;DISPLAY
E49D                  (        cubix.asm):00938         GLNOP
E49D 108EDC00         (        cubix.asm):00939                 LDY     #INBUFF                           ;POINT TO INPUT BUFFER
E4A1                  (        cubix.asm):00940         GLINE1
E4A1 1F20             (        cubix.asm):00941                 TFR     Y,D                               ;GET POINTER INTO BUFFER
E4A3 C150             (        cubix.asm):00942                 CMPB    #80                               ;TEST FOR OVER LIMIT
E4A5 22EE             (        cubix.asm):00943                 BHI     GLFCR                             ;INDICATE ERROR
E4A7 BDE5CD           (        cubix.asm):00944                 JSR     GETCHR                            ;GET CHARACTER FROM CONSOLE
E4AA 817F             (        cubix.asm):00945                 CMPA    #$7F                              ;TEST FOR DELETE
E4AC 2704             (        cubix.asm):00946                 BEQ     GLINE2                            ;YES, PERFORM DELETE
E4AE 8108             (        cubix.asm):00947                 CMPA    #8                                ;TEST FOR BACKSPACE
E4B0 260B             (        cubix.asm):00948                 BNE     GLINE3                            ;DON'T DELETE
E4B2                  (        cubix.asm):00949         GLINE2
E4B2 313F             (        cubix.asm):00950                 LEAY    -1,Y                              ;DELETE A CHARACTER
E4B4 BDE541           (        cubix.asm):00951                 JSR     WRLIN                             ;OUTPUT MESSAGE
E4B7 08200800         (        cubix.asm):00952                 FCB     8,' ',8,0                         ;WIPE PREVIOUS CHARACTER
E4BB 20E4             (        cubix.asm):00953                 BRA     GLINE1                            ;GET NEXT CHARACTER
E4BD                  (        cubix.asm):00954         GLINE3
E4BD BDE58D           (        cubix.asm):00955                 JSR     PUTCHR                            ;ECHO CHARACTER
E4C0 8D2B             (        cubix.asm):00956                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E4C2 A7A0             (        cubix.asm):00957                 STA     ,Y+                               ;SAVE IN BUFFER
E4C4 810D             (        cubix.asm):00958                 CMPA    #$0D                              ;TEST FOR END OF LINE
E4C6 26D9             (        cubix.asm):00959                 BNE     GLINE1                            ;GET NEXT CHARACTER
E4C8 108EDC00         (        cubix.asm):00960                 LDY     #INBUFF                           ;POINT TO BUFFER
E4CC 7EE57B           (        cubix.asm):00961                 JMP     LFCR                              ;START A NEW LINE
                      (        cubix.asm):00962         ;*
                      (        cubix.asm):00963         ;* SKIPS TO NEXT NON-BLANK CHARACTER IN INPUT LINE. AND TESTS IT FOR <CR>.
                      (        cubix.asm):00964         ;*
E4CF                  (        cubix.asm):00965         SKIP
E4CF A6A0             (        cubix.asm):00966                 LDA     ,Y+                               ;GET CHARACTER
E4D1 8120             (        cubix.asm):00967                 CMPA    #' '                              ;TEST FOR BLANK
E4D3 27FA             (        cubix.asm):00968                 BEQ     SKIP                              ;IF SO, KEEP LOOKING
E4D5 6DA2             (        cubix.asm):00969                 TST     ,-Y                               ;BACKUP & TEST FOR ZERO
E4D7 2702             (        cubix.asm):00970                 BEQ     SKRTS                             ;YES, END WITH 'Z' SET
E4D9 810D             (        cubix.asm):00971                 CMPA    #$0D                              ;TEST FOR CARRIAGE RETURN
E4DB                  (        cubix.asm):00972         SKRTS
E4DB 39               (        cubix.asm):00973                 RTS
                      (        cubix.asm):00974         ;*
                      (        cubix.asm):00975         ;* TESTS FOR VALID TERMINATOR CHARACTERS.
                      (        cubix.asm):00976         ;*
E4DC                  (        cubix.asm):00977         TSTERM
E4DC A6A0             (        cubix.asm):00978                 LDA     ,Y+                               ;GET CHARACTER AND ADVANCE
E4DE 2708             (        cubix.asm):00979                 BEQ     TSTE1                             ;IF NULL, INDICATE TERMINATOR
E4E0 8120             (        cubix.asm):00980                 CMPA    #' '                              ;TEST FOR SPACE
E4E2 2708             (        cubix.asm):00981                 BEQ     TRET                              ;IF SO, QUIT
E4E4 810D             (        cubix.asm):00982                 CMPA    #$0D                              ;IS IT A CARRIAGE RETURN
E4E6 2604             (        cubix.asm):00983                 BNE     TRET                              ;IF NOT, DON'T BACK UP
E4E8                  (        cubix.asm):00984         TSTE1
E4E8 313F             (        cubix.asm):00985                 LEAY    -1,Y                              ;BACK UP SO WE DON'T GO BEYOND
E4EA 1A04             (        cubix.asm):00986                 ORCC    #%00000100                        ;SET 'Z'
E4EC                  (        cubix.asm):00987         TRET
E4EC 39               (        cubix.asm):00988                 RTS
                      (        cubix.asm):00989         ;*
                      (        cubix.asm):00990         ;* CONVERT THE CHARACTER IN 'A' TO UPPER CASE
                      (        cubix.asm):00991         ;*
E4ED                  (        cubix.asm):00992         TOUPPER
E4ED 8161             (        cubix.asm):00993                 CMPA    #'A'+$20                          ;ALREADY UPPERCASE?
E4EF 25FB             (        cubix.asm):00994                 BLO     TRET                              ;YES, ITS OK
E4F1 817A             (        cubix.asm):00995                 CMPA    #'Z'+$20                          ;ALREADY UPPERCASE?
E4F3 22F7             (        cubix.asm):00996                 BHI     TRET                              ;YES, ITS OK
E4F5 845F             (        cubix.asm):00997                 ANDA    #%01011111                        ;CONVERT TO UPPERCASE
E4F7 39               (        cubix.asm):00998                 RTS
                      (        cubix.asm):00999         ;*
                      (        cubix.asm):01000         ;* LOOKS UP WORD(Y) IN TABLE(X). INDEX OF COMMAND IN TABLE IS
                      (        cubix.asm):01001         ;* RETURNED IN THE B REGISTER, WITH ZERO BEING THE FIRST COMMAND.
                      (        cubix.asm):01002         ;* FOR INFORMATION ON THE COMMAND TABLE FORMAT, SEE COMMAND TABLE.
                      (        cubix.asm):01003         ;*
E4F8                  (        cubix.asm):01004         TLOOK
E4F8 5F               (        cubix.asm):01005                 CLRB                                      ;START WITH ZERO ENTRY
E4F9 8DD4             (        cubix.asm):01006                 BSR     SKIP                              ;SKIP LEADING BLANKS
E4FB                  (        cubix.asm):01007         TLOOK1
E4FB A680             (        cubix.asm):01008                 LDA     ,X+                               ;GET CHAR FROM FILE
E4FD 2AFC             (        cubix.asm):01009                 BPL     TLOOK1                            ;ADVANCE TO CONTROL BYTE
E4FF 301F             (        cubix.asm):01010                 LEAX    -1,X                              ;BACKUP TO IT
E501 3420             (        cubix.asm):01011                 PSHS    Y                                 ;SAVE POSITION
E503 847F             (        cubix.asm):01012                 ANDA    #$7F                              ;REMOVE FLAG BIT
E505 272C             (        cubix.asm):01013                 BEQ     TLOOK6                            ;END OF TABLE ENCOUNTERED
E507 B7DCCB           (        cubix.asm):01014                 STA     >TEMP                             ;SAVE FOR LATER REF
E50A                  (        cubix.asm):01015         TLOOK2
E50A 3001             (        cubix.asm):01016                 LEAX    1,X                               ;ADVANCE IN TABLE
E50C 7ADCCB           (        cubix.asm):01017                 DEC     >TEMP                             ;REDUCE COUNT
E50F A684             (        cubix.asm):01018                 LDA     ,X                                ;GET CHAR
E511 8DDA             (        cubix.asm):01019                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E513 B7DCCC           (        cubix.asm):01020                 STA     >TEMP+1                           ;SAVE FOR LATER
E516 8DC4             (        cubix.asm):01021                 BSR     TSTERM                            ;TEST FOR TERMINATOR
E518 2714             (        cubix.asm):01022                 BEQ     TLOOK5                            ;IF SO, TEST IT
E51A B1DCCC           (        cubix.asm):01023                 CMPA    >TEMP+1                           ;TEST FOR SAME AS TABLE ENTRY
E51D 27EB             (        cubix.asm):01024                 BEQ     TLOOK2                            ;IF SO, IT'S OK
E51F 812F             (        cubix.asm):01025                 CMPA    #'/'                              ;SLASH?
E521 2709             (        cubix.asm):01026                 BEQ     TLOOK4                            ;YES, ACCEPT IT
E523 813D             (        cubix.asm):01027                 CMPA    #'='                              ;EQUALS?
E525 2705             (        cubix.asm):01028                 BEQ     TLOOK4                            ;ACCEPT IT AS WELL
                      (        cubix.asm):01029         ;* THIS ENTRY NOT FOUND, SKIP TO NEXT ONE
E527                  (        cubix.asm):01030         TLOOK3
E527 3520             (        cubix.asm):01031                 PULS    Y                                 ;RESTORE COMMAND POINTER
E529 5C               (        cubix.asm):01032                 INCB                                      ;INC. INDICATOR
E52A 20CF             (        cubix.asm):01033                 BRA     TLOOK1                            ;TRY NEXT ENTRY
E52C                  (        cubix.asm):01034         TLOOK4
E52C 313F             (        cubix.asm):01035                 LEAY    -1,Y                              ;BACKUP TO SPECIAL CHAR
E52E                  (        cubix.asm):01036         TLOOK5
E52E BADCCB           (        cubix.asm):01037                 ORA     >TEMP                             ;TEST FOR MINIMUM NUMBER OF CHARS
E531 2AF4             (        cubix.asm):01038                 BPL     TLOOK3                            ;IF NOT, SKIP THIS COMMAND
E533                  (        cubix.asm):01039         TLOOK6
E533 8D9A             (        cubix.asm):01040                 BSR     SKIP                              ;SKIP TO OPERANDS
E535 5D               (        cubix.asm):01041                 TSTB                                      ;SET FLAG IS ZERO
E536 3590             (        cubix.asm):01042                 PULS    X,PC                              ;CLEAN UP STACK
                      (        cubix.asm):01043         ;*
                      (        cubix.asm):01044         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (        cubix.asm):01045         ;*
E538                  (        cubix.asm):01046         WRHEXW
E538 8D13             (        cubix.asm):01047                 BSR     WRHEX                             ;OUTPUT
E53A 1E89             (        cubix.asm):01048                 EXG     A,B                               ;SWAP
E53C 8D0F             (        cubix.asm):01049                 BSR     WRHEX                             ;OUTPUT
E53E 1E89             (        cubix.asm):01050                 EXG     A,B                               ;BACK
E540 39               (        cubix.asm):01051                 RTS
                      (        cubix.asm):01052         ;*
                      (        cubix.asm):01053         ;* WRITE MESSAGE, NO CARRIAGE RETURN AT END
                      (        cubix.asm):01054         ;*
E541                  (        cubix.asm):01055         WRLIN
E541 3410             (        cubix.asm):01056                 PSHS    X                                 ;SAVE X
E543 AE62             (        cubix.asm):01057                 LDX     2,S                               ;GET ADDRESS BACK
E545 8D20             (        cubix.asm):01058                 BSR     WRSTR                             ;OUTPUT
E547 AF62             (        cubix.asm):01059                 STX     2,S                               ;RESAVE
E549 1A04             (        cubix.asm):01060                 ORCC    #%00000100                        ;ZERO RETURN CODE
E54B 3590             (        cubix.asm):01061                 PULS    X,PC
                      (        cubix.asm):01062         ;*
                      (        cubix.asm):01063         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (        cubix.asm):01064         ;*
E54D                  (        cubix.asm):01065         WRHEX
E54D 3402             (        cubix.asm):01066                 PSHS    A                                 ;SAVE IT
E54F 44               (        cubix.asm):01067                 LSRA                                      ;SHIFT
E550 44               (        cubix.asm):01068                 LSRA                                      ;HIGH NIBBLE
E551 44               (        cubix.asm):01069                 LSRA                                      ;INTO
E552 44               (        cubix.asm):01070                 LSRA                                      ;LOW NIBBLE
E553 8D06             (        cubix.asm):01071                 BSR     HOUT                              ;HIGH
E555 A6E4             (        cubix.asm):01072                 LDA     ,S                                ;GET LOW
E557 8D02             (        cubix.asm):01073                 BSR     HOUT                              ;OUTPUT
E559 3582             (        cubix.asm):01074                 PULS    A,PC                              ;RESTORE IT
                      (        cubix.asm):01075         ;* OUTPUT NIBBLE IN HEX
E55B                  (        cubix.asm):01076         HOUT
E55B 840F             (        cubix.asm):01077                 ANDA    #%00001111                        ;REMOVE HIGH
E55D 8B30             (        cubix.asm):01078                 ADDA    #'0'                              ;CONVERT
E55F 8139             (        cubix.asm):01079                 CMPA    #'9'                              ;OK?
E561 232A             (        cubix.asm):01080                 BLS     PUTCHR                            ;OK, OUTPUT
E563 8B07             (        cubix.asm):01081                 ADDA    #7                                ;CONVERT TO 'A'-'F'
E565 2026             (        cubix.asm):01082                 BRA     PUTCHR                            ;OUTPUT
                      (        cubix.asm):01083         ;*
                      (        cubix.asm):01084         ;* WRITE STRING(X) TO CONSOLE
                      (        cubix.asm):01085         ;*
E567                  (        cubix.asm):01086         WRSTR
E567 3402             (        cubix.asm):01087                 PSHS    A                                 ;SAVE A
E569                  (        cubix.asm):01088         WRST1
E569 A680             (        cubix.asm):01089                 LDA     ,X+                               ;GET CHAR
E56B 271E             (        cubix.asm):01090                 BEQ     WRST2                             ;END, QUIT
E56D 8D1E             (        cubix.asm):01091                 BSR     PUTCHR                            ;OUTPUT
E56F 20F8             (        cubix.asm):01092                 BRA     WRST1                             ;CONTINUE
                      (        cubix.asm):01093         ;*
                      (        cubix.asm):01094         ;* OUTPUT MESSAGE TO CONSOLE
                      (        cubix.asm):01095         ;*
E571                  (        cubix.asm):01096         WRMSG
E571 3410             (        cubix.asm):01097                 PSHS    X                                 ;SAVE X
E573 AE62             (        cubix.asm):01098                 LDX     2,S                               ;GET RETURN ADDRESS
E575 8DF0             (        cubix.asm):01099                 BSR     WRSTR                             ;OUTPUT STRING
E577 AF62             (        cubix.asm):01100                 STX     2,S                               ;RESAVE NEW RETURN ADDR
E579 3510             (        cubix.asm):01101                 PULS    X                                 ;RESTORE X
                      (        cubix.asm):01102         ;*
                      (        cubix.asm):01103         ;* OUTPUT LFCR TO CONSOLE
                      (        cubix.asm):01104         ;*
E57B                  (        cubix.asm):01105         LFCR
E57B 3402             (        cubix.asm):01106                 PSHS    A                                 ;SAVE IT
E57D 860A             (        cubix.asm):01107                 LDA     #$0A                              ;GET LF
E57F 8D0C             (        cubix.asm):01108                 BSR     PUTCHR                            ;OUTPUT
E581 860D             (        cubix.asm):01109                 LDA     #$0D                              ;GET CR
E583 2004             (        cubix.asm):01110                 BRA     SPC1                              ;CONTINUE
                      (        cubix.asm):01111         ;*
                      (        cubix.asm):01112         ;* OUTPUT SPACE TO CONSOLE
                      (        cubix.asm):01113         ;*
E585                  (        cubix.asm):01114         SPACE
E585 3402             (        cubix.asm):01115                 PSHS    A                                 ;SAVE ACCA
E587 8620             (        cubix.asm):01116                 LDA     #' '                              ;GET SPACE
E589                  (        cubix.asm):01117         SPC1
E589 8D02             (        cubix.asm):01118                 BSR     PUTCHR                            ;OUTPUT
E58B                  (        cubix.asm):01119         WRST2
E58B 3582             (        cubix.asm):01120                 PULS    A,PC                              ;RESTORE
                      (        cubix.asm):01121         ;*
                      (        cubix.asm):01122         ;* WRITE CHARACTER(A) TO CONSOLE DEVICE
                      (        cubix.asm):01123         ;*
E58D                  (        cubix.asm):01124         PUTCHR
E58D 3416             (        cubix.asm):01125                 PSHS    A,B,X                             ;SAVE REGS
E58F F6DC6D           (        cubix.asm):01126                 LDB     >CONOUT                           ;GET CONSOLE OUTPUT DEVICE
E592 2002             (        cubix.asm):01127                 BRA     WRDEV1                            ;PROCEDE WITH OUTPUT
                      (        cubix.asm):01128         ;*
                      (        cubix.asm):01129         ;* WRITE CHARACTER(A) TO DEVICE(B)
                      (        cubix.asm):01130         ;*
E594                  (        cubix.asm):01131         WRDEV
E594 3416             (        cubix.asm):01132                 PSHS    A,B,X                             ;SAVE REGS
E596                  (        cubix.asm):01133         WRDEV1
E596 C108             (        cubix.asm):01134                 CMPB    #NDEV                             ;CHECK FOR IN RANGE
E598 240D             (        cubix.asm):01135                 BHS     BADDEV                            ;INDICATE INVALID
E59A 8EDC7E           (        cubix.asm):01136                 LDX     #DOTAB                            ;POINT TO STATUS TABLE
E59D 58               (        cubix.asm):01137                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E59E AE85             (        cubix.asm):01138                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E5A0 2705             (        cubix.asm):01139                 BEQ     BADDEV                            ;INDICATE INVALID DEVICE
E5A2 AD84             (        cubix.asm):01140                 JSR     ,X                                ;EXECUTE OUTPUT DRIVER
E5A4 4F               (        cubix.asm):01141                 CLRA                                      ;ZERO RETURN CODE
E5A5 3596             (        cubix.asm):01142                 PULS    A,B,X,PC                          ;RESTORE & RETURN
                      (        cubix.asm):01143         ;*
                      (        cubix.asm):01144         ;* BAD DEVICE SPECIFIED
                      (        cubix.asm):01145         ;*
E5A7                  (        cubix.asm):01146         BADDEV
E5A7 8EF7CC           (        cubix.asm):01147                 LDX     #DEVMSG                           ;POINT TO DEVICE MESSAGE
E5AA 860A             (        cubix.asm):01148                 LDA     #RCDEV                            ;BAD DEVICE RETURN CODE
E5AC 7EE2B0           (        cubix.asm):01149                 JMP     ERRMRC                            ;EXIT WITH ERROR
                      (        cubix.asm):01150         ;*
                      (        cubix.asm):01151         ;* READ A CHARACTER FROM DEVICE (B)
                      (        cubix.asm):01152         ;*
E5AF                  (        cubix.asm):01153         RDDEV
E5AF 8D03             (        cubix.asm):01154                 BSR     TSTDEV                            ;TEST FOR CHAR
E5B1 26FC             (        cubix.asm):01155                 BNE     RDDEV                             ;WAIT FOR IT
E5B3 39               (        cubix.asm):01156                 RTS
                      (        cubix.asm):01157         ;*
                      (        cubix.asm):01158         ;* TEST FOR CHARACTER FROM DEVICE(B)
                      (        cubix.asm):01159         ;*
E5B4                  (        cubix.asm):01160         TSTDEV
E5B4 3414             (        cubix.asm):01161                 PSHS    B,X                               ;SAVE REGS
E5B6                  (        cubix.asm):01162         TSTDE1
E5B6 C108             (        cubix.asm):01163                 CMPB    #NDEV                             ;DEVICE IN RANGE?
E5B8 24ED             (        cubix.asm):01164                 BHS     BADDEV                            ;INDICATE INVALUD
E5BA 8EDC6E           (        cubix.asm):01165                 LDX     #DITAB                            ;POINT TO STATUS TABLE
E5BD 58               (        cubix.asm):01166                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E5BE AE85             (        cubix.asm):01167                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E5C0 27E5             (        cubix.asm):01168                 BEQ     BADDEV                            ;INDICATE INVALID
E5C2 AD84             (        cubix.asm):01169                 JSR     ,X                                ;EXECUTE INPUT DRIVER
E5C4 3594             (        cubix.asm):01170                 PULS    B,X,PC                            ;RESTORE & RETURN
                      (        cubix.asm):01171         ;*
                      (        cubix.asm):01172         ;* TEST FOR A CHARACTER FROM THE CONSOLE DEVICE
                      (        cubix.asm):01173         ;*
E5C6                  (        cubix.asm):01174         TSTCHR
E5C6 3414             (        cubix.asm):01175                 PSHS    B,X                               ;SAVE REGS
E5C8 F6DC6C           (        cubix.asm):01176                 LDB     >CONIN                            ;GET INPUT DEVICE
E5CB 20E9             (        cubix.asm):01177                 BRA     TSTDE1                            ;AND CONTINUE
                      (        cubix.asm):01178         ;*
                      (        cubix.asm):01179         ;* READ A CHARACTER FROM CONSOLE
                      (        cubix.asm):01180         ;*
E5CD                  (        cubix.asm):01181         GETCHR
E5CD 8DF7             (        cubix.asm):01182                 BSR     TSTCHR                            ;TEST FOR CHAR
E5CF 26FC             (        cubix.asm):01183                 BNE     GETCHR                            ;INDICATE NONE
E5D1 39               (        cubix.asm):01184                 RTS
                      (        cubix.asm):01185         ;*
                      (        cubix.asm):01186         ;* INCLUDE ALL OTHER SUB-SYSTEMS
                      (        cubix.asm):01187         ;*
                      (        cubix.asm):01188                 INCLUDE filesys.os                        ;FILE SYSTEM MANAGMENT
                      (       filesys.os):00001         ;*
                      (       filesys.os):00002         ;* CUBIX File System management routines
                      (       filesys.os):00003         ;*
                      (       filesys.os):00004         ;* LOCATE NEXT WORK SECTOR IN CHAIN
                      (       filesys.os):00005         ;*
E5D2                  (       filesys.os):00006         FNDLNK
E5D2 3402             (       filesys.os):00007                 PSHS    A
E5D4 58               (       filesys.os):00008                 LSLB                                      ;DOUBLE FOR
E5D5 49               (       filesys.os):00009                 ROLA                                      ;TWO BYTE ID'S
E5D6 8401             (       filesys.os):00010                 ANDA    #$01                              ;MASK OFF BITS (512/SECTOR)
E5D8 C3DE00           (       filesys.os):00011                 ADDD    #WRKSPC                           ;POINT TO WORKSPACE
E5DB 1F01             (       filesys.os):00012                 TFR     D,X                               ;SET UP POINTER
E5DD 3504             (       filesys.os):00013                 PULS    B                                 ;RESTORE HIGH ID
E5DF CB01             (       filesys.os):00014                 ADDB    #LNKSEC                           ;ADVANCE TO LINK SECTOR
E5E1 4F               (       filesys.os):00015                 CLRA                                      ;ZERO HIGH
E5E2 3410             (       filesys.os):00016                 PSHS    X                                 ;SAVE PTR
E5E4 8D09             (       filesys.os):00017                 BSR     RDWRK                             ;READ WORK SECTOR
E5E6 3510             (       filesys.os):00018                 PULS    X                                 ;RESTORE
E5E8 EC84             (       filesys.os):00019                 LDD     ,X                                ;GET DATA
E5EA 1083FFFF         (       filesys.os):00020                 CMPD    #$FFFF                            ;END OF FILE?
E5EE                  (       filesys.os):00021         GRTS
E5EE 39               (       filesys.os):00022                 RTS
                      (       filesys.os):00023         ;*
                      (       filesys.os):00024         ;* READ WORK SECTOR FROM DISK
                      (       filesys.os):00025         ;*
E5EF                  (       filesys.os):00026         RDWRK
E5EF 3402             (       filesys.os):00027                 PSHS    A                                 ;SAVE ACCA
E5F1 8EDE00           (       filesys.os):00028                 LDX     #WRKSPC                           ;POINT TO IT
E5F4 B6DCEB           (       filesys.os):00029                 LDA     >SDRIVE                           ;CURRENT DRIVE
E5F7 B1DCDE           (       filesys.os):00030                 CMPA    >WRKDRV                           ;ARE WE ON IT?
E5FA 2608             (       filesys.os):00031                 BNE     RDW1                              ;WRITE IT CHANGED
E5FC A6E4             (       filesys.os):00032                 LDA     ,S                                ;RESTORE SECTOR ID
E5FE 10B3DCDF         (       filesys.os):00033                 CMPD    >WRKSEC                           ;DO WE ALREADY HAVE IT?
E602 2710             (       filesys.os):00034                 BEQ     RRTS                              ;YES, ITS OK
E604                  (       filesys.os):00035         RDW1
E604 8D20             (       filesys.os):00036                 BSR     WRTST                             ;WRITE IF NESSARY
E606 B6DCEB           (       filesys.os):00037                 LDA     >SDRIVE                           ;GET DRIVE
E609 B7DCDE           (       filesys.os):00038                 STA     >WRKDRV                           ;SET WORK DRIVE
E60C A6E4             (       filesys.os):00039                 LDA     ,S                                ;RESTORE SECTOR ID
E60E FDDCDF           (       filesys.os):00040                 STD     >WRKSEC                           ;SET IT UP
E611 BDEAD2           (       filesys.os):00041                 JSR     RDISK                             ;READ DISK
E614                  (       filesys.os):00042         RRTS
E614 3582             (       filesys.os):00043                 PULS    A,PC
                      (       filesys.os):00044         ;*
                      (       filesys.os):00045         ;* PURGE OPEN WORK SECTOR, INSURE IT GETS WRITTEN. SET
                      (       filesys.os):00046         ;* SAVED SECTOR TO $FFFF, SO WE FORCE NEW READ
                      (       filesys.os):00047         ;*
E616                  (       filesys.os):00048         PURGE
E616 8D0E             (       filesys.os):00049                 BSR     WRTST                             ;WRITE IF NESSARY
E618                  (       filesys.os):00050         PURGE1
E618 3406             (       filesys.os):00051                 PSHS    A,B                               ;SAVE REGISTERS
E61A CCFFFF           (       filesys.os):00052                 LDD     #$FFFF                            ;GET NON-EXISTANT
E61D FDDCDF           (       filesys.os):00053                 STD     >WRKSEC                           ;SET WORK SECTOR
E620 B7DCDE           (       filesys.os):00054                 STA     >WRKDRV                           ;SET WORK DRIVE
E623 4F               (       filesys.os):00055                 CLRA    SET 'Z'
E624 3586             (       filesys.os):00056                 PULS    A,B,PC
                      (       filesys.os):00057         ;*
                      (       filesys.os):00058         ;* WRITE WORK SECTOR IF IT HAS BEEN CHANGED
                      (       filesys.os):00059         ;*
E626                  (       filesys.os):00060         WRTST
E626 7DDCDD           (       filesys.os):00061                 TST     >WRKCHG                           ;HAS IT CHANGED?
E629 27C3             (       filesys.os):00062                 BEQ     GRTS                              ;NO, SKIP IT
                      (       filesys.os):00063         ;*
                      (       filesys.os):00064         ;* WRITE WORK SECTOR BACK TO DISK
                      (       filesys.os):00065         ;*
E62B                  (       filesys.os):00066         WRWRK
E62B 3416             (       filesys.os):00067                 PSHS    A,B,X                             ;SAVE REGS
E62D B6DCEB           (       filesys.os):00068                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E630 3402             (       filesys.os):00069                 PSHS    A                                 ;SAVE IT
E632 B6DCDE           (       filesys.os):00070                 LDA     >WRKDRV                           ;GET WORK DRIVE
E635 B7DCEB           (       filesys.os):00071                 STA     >SDRIVE                           ;SET IT UP
E638 FCDCDF           (       filesys.os):00072                 LDD     >WRKSEC                           ;GET ID
E63B 8EDE00           (       filesys.os):00073                 LDX     #WRKSPC                           ;POINT TO WORKSPACE
E63E BDEB05           (       filesys.os):00074                 JSR     WDISK                             ;WRITE IT
E641 7FDCDD           (       filesys.os):00075                 CLR     >WRKCHG                           ;INDICTE FRESH
E644 3502             (       filesys.os):00076                 PULS    A                                 ;RESTORE DRIVE
E646 B7DCEB           (       filesys.os):00077                 STA     >SDRIVE                           ;RESAVE
E649 4F               (       filesys.os):00078                 CLRA                                      ;ZERO RETURN
E64A 3596             (       filesys.os):00079                 PULS    A,B,X,PC
                      (       filesys.os):00080         ;*
                      (       filesys.os):00081         ;* LOCATE  FILE, ISSUE ERROR MESSAGE IF NOT FOUND
                      (       filesys.os):00082         ;*
E64C                  (       filesys.os):00083         LOCERR
E64C 8D37             (       filesys.os):00084                 BSR     LOCDIR                            ;LOOK IT UP
E64E 2758             (       filesys.os):00085                 BEQ     FILFND                            ;FINE, RETURN
                      (       filesys.os):00086         ;* ATTEMPT TO OPEN FILE FAILED, NOT FOUND
E650                  (       filesys.os):00087         NOTFND
E650 108EF749         (       filesys.os):00088                 LDY     #NOTMSG                           ;INDICATE NOT FOUND
E654 8602             (       filesys.os):00089                 LDA     #RCNOTF                           ;NOT FOUND RC
                      (       filesys.os):00090         ;* PROCESS FOR FILE RELATED ERRORS
E656                  (       filesys.os):00091         FILERR
E656 3403             (       filesys.os):00092                 PSHS    A,CC                              ;SAVE A & CC
E658 7DDCA2           (       filesys.os):00093                 TST     >MSGFLG                           ;MESSAGES ENABLED
E65B 2721             (       filesys.os):00094                 BEQ     NOFMSG                            ;NO, SKIP IT
E65D BDE541           (       filesys.os):00095                 JSR     WRLIN                             ;OUTPUT MESSAGE
E660 4572726F72207072 (       filesys.os):00096                 FCC     'Error processing file: '
     6F63657373696E67
     2066696C653A20
E677 00               (       filesys.os):00097                 FCB     $00
E678 BDE6CA           (       filesys.os):00098                 JSR     SHOSAV                            ;DISPLAY IT
E67B BDE57B           (       filesys.os):00099                 JSR     LFCR
E67E                  (       filesys.os):00100         NOFMSG
E67E 1F21             (       filesys.os):00101                 TFR     Y,X                               ;COPY IT
E680 3503             (       filesys.os):00102                 PULS    A,CC                              ;RESTORE CONDITIONS
E682 7EE2B0           (       filesys.os):00103                 JMP     ERRMRC                            ;OUTPUT MESSAGE
                      (       filesys.os):00104         ;*
                      (       filesys.os):00105         ;* LOCATE A FILE IN THE DIRECTORY, LEAVES 'X' POINTING AT IT
                      (       filesys.os):00106         ;*
E685                  (       filesys.os):00107         LOCDIR
E685 B6DCB7           (       filesys.os):00108                 LDA     >FDRIVE                           ;GET FILES DRIVE ID
E688 B7DCEB           (       filesys.os):00109                 STA     >SDRIVE                           ;SAVE IT
E68B CC0000           (       filesys.os):00110                 LDD     #DIRSEC                           ;STARTING SECTOR OF DIR
E68E                  (       filesys.os):00111         LOCSEC
E68E BDE5EF           (       filesys.os):00112                 JSR     RDWRK                             ;READ IT
E691                  (       filesys.os):00113         LOCFIL
E691 BDE316           (       filesys.os):00114                 JSR     COMNAM                            ;DOES IT MATCH
E694 2712             (       filesys.os):00115                 BEQ     FILFND                            ;YES
E696 308820           (       filesys.os):00116                 LEAX    32,X                              ;ADVANCE TO NEXT
E699 8CE000           (       filesys.os):00117                 CMPX    #WRKSPC+512                       ;OVER?
E69C 25F3             (       filesys.os):00118                 BLO     LOCFIL                            ;KEEP LOOKING
E69E FCDCDF           (       filesys.os):00119                 LDD     >WRKSEC                           ;GET SECTOR
E6A1 BDE5D2           (       filesys.os):00120                 JSR     FNDLNK                            ;GET ITS LINK
E6A4 26E8             (       filesys.os):00121                 BNE     LOCSEC                            ;MORE TO FIND
E6A6 8602             (       filesys.os):00122                 LDA     #RCNOTF                           ;FILE NOT FOUND
E6A8                  (       filesys.os):00123         FILFND
E6A8 39               (       filesys.os):00124                 RTS
                      (       filesys.os):00125         ;*
                      (       filesys.os):00126         ;* DISPLAY DIRECTORY USING SAVED FILENAME AS A MASK
                      (       filesys.os):00127         ;*
E6A9                  (       filesys.os):00128         DISDIR
E6A9 8DA1             (       filesys.os):00129                 BSR     LOCERR                            ;LOCATE FILE
E6AB                  (       filesys.os):00130         SHOME
E6AB 8D30             (       filesys.os):00131                 BSR     SHONAM                            ;OUTPUT NAME
E6AD BDE57B           (       filesys.os):00132                 JSR     LFCR                              ;NEW LINE
E6B0                  (       filesys.os):00133         NOSHO
E6B0 308820           (       filesys.os):00134                 LEAX    32,X                              ;NEXT ENTRY
E6B3 8CE000           (       filesys.os):00135                 CMPX    #WRKSPC+512                       ;OVER?
E6B6 250B             (       filesys.os):00136                 BLO     SHOFIL                            ;MORE TO GO
E6B8 FCDCDF           (       filesys.os):00137                 LDD     >WRKSEC                           ;GET WORKSECTOR
E6BB BDE5D2           (       filesys.os):00138                 JSR     FNDLNK                            ;LOCATE LINK
E6BE 27E8             (       filesys.os):00139                 BEQ     FILFND                            ;NO, QUIT
E6C0 BDE5EF           (       filesys.os):00140                 JSR     RDWRK                             ;READ NEW SECTOR
E6C3                  (       filesys.os):00141         SHOFIL
E6C3 BDE316           (       filesys.os):00142                 JSR     COMNAM                            ;DOES IT MATCH?
E6C6 26E8             (       filesys.os):00143                 BNE     NOSHO                             ;DON'T OUTPUT
E6C8 20E1             (       filesys.os):00144                 BRA     SHOME                             ;DISPLAY IT
                      (       filesys.os):00145         
                      (       filesys.os):00146         ;*
                      (       filesys.os):00147         ;* SHOW SAVED FILENAME
                      (       filesys.os):00148         ;*
E6CA                  (       filesys.os):00149         SHOSAV
E6CA 3416             (       filesys.os):00150                 PSHS    A,B,X                             ;SAVE REGS
E6CC 8EDCB7           (       filesys.os):00151                 LDX     #FDRIVE                           ;POINT TO IT
E6CF A680             (       filesys.os):00152                 LDA     ,X+                               ;GET DRIVE ID
E6D1 8B41             (       filesys.os):00153                 ADDA    #'A'                              ;OFFSET
E6D3 BDE58D           (       filesys.os):00154                 JSR     PUTCHR
E6D6 863A             (       filesys.os):00155                 LDA     #':'
E6D8 BDE58D           (       filesys.os):00156                 JSR     PUTCHR
E6DB 2002             (       filesys.os):00157                 BRA     SHON1                             ;DISPLAY IT
                      (       filesys.os):00158         ;*
                      (       filesys.os):00159         ;* DISPLAYS FILENAME(X) IN DIRECTORY FORMAT
                      (       filesys.os):00160         ;*
E6DD                  (       filesys.os):00161         SHONAM
E6DD 3416             (       filesys.os):00162                 PSHS    A,B,X                             ;SAVE REGISTERS
E6DF                  (       filesys.os):00163         SHON1
E6DF 865B             (       filesys.os):00164                 LDA     #'['                              ;OPENING BRACKET
E6E1 BDE58D           (       filesys.os):00165                 JSR     PUTCHR                            ;OUTPUT
E6E4 8D12             (       filesys.os):00166                 BSR     DISP8                             ;DISPLAY IT
E6E6 865D             (       filesys.os):00167                 LDA     #']'                              ;CLOSING BRACKET
E6E8 BDE58D           (       filesys.os):00168                 JSR     PUTCHR                            ;OUTPUT
E6EB 8D0B             (       filesys.os):00169                 BSR     DISP8                             ;DISPLAY NAME
E6ED 862E             (       filesys.os):00170                 LDA     #'.'
E6EF BDE58D           (       filesys.os):00171                 JSR     PUTCHR
E6F2 C603             (       filesys.os):00172                 LDB     #3                                ;TYPE IS THREE
E6F4 8D04             (       filesys.os):00173                 BSR     DISPX
E6F6 3596             (       filesys.os):00174                 PULS    A,B,X,PC
E6F8                  (       filesys.os):00175         DISP8
E6F8 C608             (       filesys.os):00176                 LDB     #8                                ;8 CHARS FOR PREFIX AND TYPE
E6FA                  (       filesys.os):00177         DISPX
E6FA A680             (       filesys.os):00178                 LDA     ,X+                               ;GET CHAR
E6FC 2703             (       filesys.os):00179                 BEQ     SHRT                              ;SHORT, ADVANCE
E6FE BDE58D           (       filesys.os):00180                 JSR     PUTCHR                            ;DISPLAY
E701                  (       filesys.os):00181         SHRT
E701 5A               (       filesys.os):00182                 DECB                                      ;REDUCE COUNT
E702 26F6             (       filesys.os):00183                 BNE     DISPX                             ;KEEP GOING
E704 39               (       filesys.os):00184                 RTS
                      (       filesys.os):00185         ;*
                      (       filesys.os):00186         ;* CALCULATE DRIVE SIZE IN 'D'
                      (       filesys.os):00187         ;*
E705                  (       filesys.os):00188         CURSIZ
E705 B6DCEB           (       filesys.os):00189                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E708                  (       filesys.os):00190         DRVSIZ
E708 3440             (       filesys.os):00191                 PSHS    U
E70A BDEAFC           (       filesys.os):00192                 JSR     GETCTL1                           ;GET CONTROL BLOCK
E70D E643             (       filesys.os):00193                 LDB     NSEC,U                            ;GET # SECS/TRACK
E70F A642             (       filesys.os):00194                 LDA     NHEAD,U                           ;GET # HEADS
E711 3D               (       filesys.os):00195                 MUL                                       ;GET SECS/CYLINDER
E712 A641             (       filesys.os):00196                 LDA     NCYL,U                            ;GET # CYLINDERS
E714 3D               (       filesys.os):00197                 MUL                                       ;CALCULATE TOTAL SIZE
E715 35C0             (       filesys.os):00198                 PULS    U,PC                              ;RETURN
                      (       filesys.os):00199         ;*
                      (       filesys.os):00200         ;* CREATES A FILE
                      (       filesys.os):00201         ;*
E717                  (       filesys.os):00202         CREATE
E717 BDE34F           (       filesys.os):00203                 JSR     VALID                             ;OK AS SINGLE FLE
E71A 1026FB8D         (       filesys.os):00204                 LBNE    BADOPR                            ;NO, INVALID
E71E BDE685           (       filesys.os):00205                 JSR     LOCDIR                            ;LOOK FOR IT
E721 2609             (       filesys.os):00206                 BNE     CRE1                              ;ITS OK
                      (       filesys.os):00207         ;* FILE ALREADY EXISTS
E723                  (       filesys.os):00208         FEXISTS
E723 108EF758         (       filesys.os):00209                 LDY     #EXIMSG                           ;FILE EXISTS
E727 8607             (       filesys.os):00210                 LDA     #RCEXI                            ;EXISTS
E729 7EE656           (       filesys.os):00211                 JMP     FILERR                            ;INDICATE ERROR
E72C                  (       filesys.os):00212         CRE1
E72C 8D6F             (       filesys.os):00213                 BSR     FRESEC                            ;ALLOCATE A SECTOR
E72E FDDCCD           (       filesys.os):00214                 STD     >TEMP1                            ;SAVE IT
E731 CC0000           (       filesys.os):00215                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
E734                  (       filesys.os):00216         CRE2
E734 BDE5EF           (       filesys.os):00217                 JSR     RDWRK                             ;READ WORK SECTOR
E737 C610             (       filesys.os):00218                 LDB     #16                               ;ENTRIES/SECTOR
E739                  (       filesys.os):00219         CRE3
E739 6D84             (       filesys.os):00220                 TST     ,X                                ;IS IT FREE?
E73B 2732             (       filesys.os):00221                 BEQ     CRE6                              ;YES, PUT IT HERE
E73D 308820           (       filesys.os):00222                 LEAX    32,X                              ;ADVANCE TO NEXT
E740 5A               (       filesys.os):00223                 DECB                                      ;REDUCE COUNT
E741 26F6             (       filesys.os):00224                 BNE     CRE3                              ;KEEP LOOKING
E743 FCDCDF           (       filesys.os):00225                 LDD     >WRKSEC                           ;GET DIRECTORY SEC ID
E746 BDE5D2           (       filesys.os):00226                 JSR     FNDLNK                            ;FIND LINK
E749 26E9             (       filesys.os):00227                 BNE     CRE2                              ;AND KEEP GOING
E74B FCDCCD           (       filesys.os):00228                 LDD     >TEMP1                            ;GET OUR FREE SECTOR
E74E ED84             (       filesys.os):00229                 STD     ,X                                ;POINT DIRECTORY AT IT
E750 BDE794           (       filesys.os):00230                 JSR     CHGWRK                            ;INDICATE WE CHANGED
E753 3406             (       filesys.os):00231                 PSHS    A,B                               ;SAVE ID
E755 8D46             (       filesys.os):00232                 BSR     FRESEC                            ;GET FREE
E757 FDDCCD           (       filesys.os):00233                 STD     >TEMP1                            ;SAVE NEW FREE
E75A BDE62B           (       filesys.os):00234                 JSR     WRWRK                             ;WRITE WORK SECTOR
E75D 3506             (       filesys.os):00235                 PULS    A,B                               ;RESTORE DIRECTORY SECTOR ID
E75F FDDCDF           (       filesys.os):00236                 STD     >WRKSEC                           ;INDICATE CURRENT WORKSECTOR
E762 8EDE00           (       filesys.os):00237                 LDX     #WRKSPC                           ;PT TO IT
E765                  (       filesys.os):00238         CRE5
E765 6F80             (       filesys.os):00239                 CLR     ,X+                               ;CLEAR IT
E767 8CE000           (       filesys.os):00240                 CMPX    #WRKSPC+512                       ;ARE WE OVER
E76A 25F9             (       filesys.os):00241                 BLO     CRE5                              ;DO ALL
E76C 8EDE00           (       filesys.os):00242                 LDX     #WRKSPC                           ;PT TO IT AGAIN
E76F                  (       filesys.os):00243         CRE6
E76F 3420             (       filesys.os):00244                 PSHS    Y                                 ;SAVE
E771 108EDCB8         (       filesys.os):00245                 LDY     #PREFIX                           ;PT TO SAVED NAME
E775 C613             (       filesys.os):00246                 LDB     #19                               ;19 CHARS IN NAME
E777                  (       filesys.os):00247         CRE7
E777 A6A0             (       filesys.os):00248                 LDA     ,Y+                               ;GET CHAR
E779 A780             (       filesys.os):00249                 STA     ,X+                               ;SAVE IN ENTRY
E77B 5A               (       filesys.os):00250                 DECB                                      ;REDUCE COUNT
E77C 26F9             (       filesys.os):00251                 BNE     CRE7                              ;CONTINUE
E77E 3520             (       filesys.os):00252                 PULS    Y                                 ;RESTORE
E780 3088ED           (       filesys.os):00253                 LEAX    -19,X                             ;BACK TO START
E783 FCDCD3           (       filesys.os):00254                 LDD     >TEMP4                            ;GET LOAD ADDRESS
E786 ED8815           (       filesys.os):00255                 STD     DRADR,X                           ;SET IT,
E789 86F0             (       filesys.os):00256                 LDA     #DEFATR                           ;GET DEF ATTRIBUTES
E78B A78817           (       filesys.os):00257                 STA     DATTR,X                           ;SET THEM
E78E FCDCCD           (       filesys.os):00258                 LDD     >TEMP1                            ;GET DISK ADDRESS
E791 ED8813           (       filesys.os):00259                 STD     DDADR,X                           ;SET IT
                      (       filesys.os):00260         ;*
                      (       filesys.os):00261         ;* SET WORK SECTOR CHANGED FLAG
                      (       filesys.os):00262         ;*
E794                  (       filesys.os):00263         CHGWRK
E794 7FDCDD           (       filesys.os):00264                 CLR     >WRKCHG
E797 7ADCDD           (       filesys.os):00265                 DEC     >WRKCHG                           ;SET IT
E79A 1A04             (       filesys.os):00266                 ORCC    #4                                ;SET 'Z'
E79C 39               (       filesys.os):00267                 RTS
                      (       filesys.os):00268         ;*
                      (       filesys.os):00269         ;* LOCATE A FREE SECTOR ON THE DISK, CLAIM IT AND SET
                      (       filesys.os):00270         ;* FLAG TO $FFFF (END OF FILE). ATEMPT TO ALLOCATE IN SECTOR
                      (       filesys.os):00271         ;* WHICH AS ALREADY LOADED IN ORDER TO REDUCE DISK I/O.
                      (       filesys.os):00272         ;*
E79D                  (       filesys.os):00273         FRESEC
E79D BDE705           (       filesys.os):00274                 JSR     CURSIZ                            ;CALCULATE SIZE OF DISK
E7A0 FDDCCB           (       filesys.os):00275                 STD     >TEMP                             ;SAVE IT
E7A3 830001           (       filesys.os):00276                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
E7A6 8B01             (       filesys.os):00277                 ADDA    #LNKSEC                           ;COMPUTE LARGEST LINK SECTOR # (D/256+LNK)
E7A8 3402             (       filesys.os):00278                 PSHS    A                                 ;SAVE
E7AA 7DDCDF           (       filesys.os):00279                 TST     >WRKSEC                           ;LOW?
E7AD 260E             (       filesys.os):00280                 BNE     FRES1                             ;NO LINK IN CORE
E7AF F6DCE0           (       filesys.os):00281                 LDB     >WRKSEC+1                         ;GET SECTOR ID
E7B2 B1DCE0           (       filesys.os):00282                 CMPA    >WRKSEC+1                         ;IS IT IN RANGE?
E7B5 2506             (       filesys.os):00283                 BLO     FRES1                             ;NO LINK IN CORE
E7B7 C101             (       filesys.os):00284                 CMPB    #LNKSEC                           ;IN RANGE?
E7B9 2502             (       filesys.os):00285                 BLO     FRES1                             ;NO LINK IN CORE
E7BB 8D11             (       filesys.os):00286                 BSR     FNDFRE                            ;LOOK FOR IT
E7BD                  (       filesys.os):00287         FRES1
E7BD C601             (       filesys.os):00288                 LDB     #LNKSEC                           ;LOOK IN FIRST
E7BF                  (       filesys.os):00289         FRES2
E7BF 8D0D             (       filesys.os):00290                 BSR     FNDFRE                            ;LOOK FOR IT
E7C1 5C               (       filesys.os):00291                 INCB    ADVANCE
E7C2 E1E4             (       filesys.os):00292                 CMPB    ,S                                ;ARE WE OVER?
E7C4 23F9             (       filesys.os):00293                 BLS     FRES2                             ;NO, LEEP GOING
                      (       filesys.os):00294         ;* NO DISK SPACE AVAILABLE
E7C6                  (       filesys.os):00295         NOSPAC
E7C6 8EF76C           (       filesys.os):00296                 LDX     #NOSMSG                           ;NO SPACE
E7C9 8608             (       filesys.os):00297                 LDA     #RCNOS                            ;RETURN CODE
E7CB 7EE2B0           (       filesys.os):00298                 JMP     ERRMRC                            ;REPORT ERROR
                      (       filesys.os):00299         ;* LOOK FOR FREE SECTOR
E7CE                  (       filesys.os):00300         FNDFRE
E7CE 4F               (       filesys.os):00301                 CLRA                                      ;HIGH ADDRESS TO ZERO
E7CF 3434             (       filesys.os):00302                 PSHS    B,X,Y                             ;SAVE REGS
E7D1 BDE5EF           (       filesys.os):00303                 JSR     RDWRK                             ;READ WORK SECTOR
E7D4                  (       filesys.os):00304         FNDF1
E7D4 EC81             (       filesys.os):00305                 LDD     ,X++                              ;IS IT FREE
E7D6 2707             (       filesys.os):00306                 BEQ     FNDF3                             ;YES
E7D8 8CE000           (       filesys.os):00307                 CMPX    #WRKSPC+512                       ;OVER?
E7DB 25F7             (       filesys.os):00308                 BLO     FNDF1                             ;NO, KEEP LOOKING
E7DD                  (       filesys.os):00309         FNDF2
E7DD 35B4             (       filesys.os):00310                 PULS    B,X,Y,PC                          ;GO HOME
E7DF                  (       filesys.os):00311         FNDF3
E7DF 1F10             (       filesys.os):00312                 TFR     X,D                               ;GET VALUE
E7E1 83DE02           (       filesys.os):00313                 SUBD    #WRKSPC+2                         ;CONVERT TO BYTE OFFSET
E7E4 44               (       filesys.os):00314                 LSRA                                      ;CONVERT ADDRESS IN WS
E7E5 56               (       filesys.os):00315                 RORB                                      ;TO SECTOR # IN WS
E7E6 A6E4             (       filesys.os):00316                 LDA     ,S                                ;GET SECTOR ID BACK
E7E8 8001             (       filesys.os):00317                 SUBA    #LNKSEC                           ;CONVERT TO PURE SECTOR #
E7EA 10B3DCCB         (       filesys.os):00318                 CMPD    >TEMP                             ;WITHIN DISK SIZE?
E7EE 24ED             (       filesys.os):00319                 BHS     FNDF2                             ;NO, RETURN WITH BAD NEWS
E7F0 3261             (       filesys.os):00320                 LEAS    1,S                               ;SKIP SAVED 'B' REGISTER
E7F2 108EFFFF         (       filesys.os):00321                 LDY     #$FFFF                            ;GET SECTOR IN USE FLAG
E7F6 10AF1E           (       filesys.os):00322                 STY     -2,X                              ;WRITE IT
E7F9 3530             (       filesys.os):00323                 PULS    X,Y                               ;RESTORE REGS
E7FB 3263             (       filesys.os):00324                 LEAS    3,S                               ;CLEAR UP STACK
E7FD 2095             (       filesys.os):00325                 BRA     CHGWRK                            ;INDICATE CHANGED
                      (       filesys.os):00326         ;*
                      (       filesys.os):00327         ;* OPEN A FILE FOR READ
                      (       filesys.os):00328         ;*
E7FF                  (       filesys.os):00329         OPENR
E7FF 3414             (       filesys.os):00330                 PSHS    B,X                               ;SAVE REGS
E801 BDE896           (       filesys.os):00331                 JSR     LOCRED                            ;DOES IT EXIST
E804 EC8813           (       filesys.os):00332                 LDD     DDADR,X                           ;GET DISK ADDRESS
E807 ED42             (       filesys.os):00333                 STD     OFIRST,U                          ;SAVE IT
E809 ED44             (       filesys.os):00334                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E80B 4F               (       filesys.os):00335                 CLRA
E80C 5F               (       filesys.os):00336                 CLRB                                      ;ZERO OFFSET
E80D ED48             (       filesys.os):00337                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E80F ED46             (       filesys.os):00338                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E811 F6DCB7           (       filesys.os):00339                 LDB     >FDRIVE                           ;GET FILE DRIVE
E814 8601             (       filesys.os):00340                 LDA     #1                                ;INDICATE FILE OPEN/READ
E816 EDC4             (       filesys.os):00341                 STD     OTYPE,U                           ;INDICATE
E818 B6DCDA           (       filesys.os):00342                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E81B B7DCEB           (       filesys.os):00343                 STA     >SDRIVE                           ;RESET IT
E81E 4F               (       filesys.os):00344                 CLRA                                      ;ZERO RC
E81F 3594             (       filesys.os):00345                 PULS    B,X,PC
                      (       filesys.os):00346         ;*
                      (       filesys.os):00347         ;* READ CHARACTER FROM FILE
                      (       filesys.os):00348         ;*
E821                  (       filesys.os):00349         READC
E821 3414             (       filesys.os):00350                 PSHS    B,X                               ;SAVE REGS
E823 304A             (       filesys.os):00351                 LEAX    OSIZ,U                            ;OFFSET TO DATA
E825 A641             (       filesys.os):00352                 LDA     ODRIVE,U                          ;GET DRIVE
E827 B7DCEB           (       filesys.os):00353                 STA     >SDRIVE                           ;SELECT
E82A EC48             (       filesys.os):00354                 LDD     OOFFSET,U                         ;GET OFFSET
E82C 2612             (       filesys.os):00355                 BNE     REC1                              ;NON-ZERO, ITS OK
E82E A6C4             (       filesys.os):00356                 LDA     OTYPE,U                           ;GET OPEN TYPE
E830 4A               (       filesys.os):00357                 DECA                                      ;OPEN FOR READ?
E831 2676             (       filesys.os):00358                 BNE     ORERR                             ;NO, REPORT ERROR
E833 EC44             (       filesys.os):00359                 LDD     OSECTOR,U                         ;GET SECTOR
E835 1083FFFF         (       filesys.os):00360                 CMPD    #$FFFF                            ;END OF FILE?
E839 2776             (       filesys.os):00361                 BEQ     EOF                               ;YES, REPORT ERROR
E83B BDEAD2           (       filesys.os):00362                 JSR     RDISK                             ;READ IT IN
E83E EC48             (       filesys.os):00363                 LDD     OOFFSET,U                         ;RESTORE OFFSET
E840                  (       filesys.os):00364         REC1
E840 308B             (       filesys.os):00365                 LEAX    D,X                               ;OFFSET TO CHAR
E842 C30001           (       filesys.os):00366                 ADDD    #1                                ;ADVANCE
E845 10830200         (       filesys.os):00367                 CMPD    #512                              ;ARE WE OVER
E849 250F             (       filesys.os):00368                 BLO     REC2                              ;NO, ITS OK
E84B 3410             (       filesys.os):00369                 PSHS    X                                 ;SAVE 'X'
E84D EC44             (       filesys.os):00370                 LDD     OSECTOR,U                         ;GET SECTOR
E84F ED46             (       filesys.os):00371                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E851 BDE5D2           (       filesys.os):00372                 JSR     FNDLNK                            ;LOOK UP ITS LINK
E854 ED44             (       filesys.os):00373                 STD     OSECTOR,U                         ;SAVE NEW SECTOR
E856 3510             (       filesys.os):00374                 PULS    X                                 ;RESTORE PTR TO CAHR
E858 4F               (       filesys.os):00375                 CLRA
E859 5F               (       filesys.os):00376                 CLRB
E85A                  (       filesys.os):00377         REC2
E85A ED48             (       filesys.os):00378                 STD     OOFFSET,U                         ;NEW OFFSET
E85C B6DCDA           (       filesys.os):00379                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E85F B7DCEB           (       filesys.os):00380                 STA     >SDRIVE                           ;RESET IT
E862 A680             (       filesys.os):00381                 LDA     ,X+                               ;GET CHARACTER
E864 81FF             (       filesys.os):00382                 CMPA    #$FF                              ;END OF FILE?
E866 2749             (       filesys.os):00383                 BEQ     EOF                               ;YES
E868 1A04             (       filesys.os):00384                 ORCC    #4                                ;INDICATE SUCESS
E86A 3594             (       filesys.os):00385                 PULS    B,X,PC
                      (       filesys.os):00386         ;*
                      (       filesys.os):00387         ;* READ A BLOCK FROM A FILE
                      (       filesys.os):00388         ;*
E86C                  (       filesys.os):00389         READB
E86C 3414             (       filesys.os):00390                 PSHS    B,X                               ;SAVE REGS
E86E A6C4             (       filesys.os):00391                 LDA     OTYPE,U                           ;GET OPEN TYPE
E870 4A               (       filesys.os):00392                 DECA                                      ;OPEN READ?
E871 2636             (       filesys.os):00393                 BNE     ORERR                             ;NO, REPORT ERROR
E873 A641             (       filesys.os):00394                 LDA     ODRIVE,U
E875 B7DCEB           (       filesys.os):00395                 STA     >SDRIVE                           ;SET DRIVE
E878 EC44             (       filesys.os):00396                 LDD     OSECTOR,U
E87A 1083FFFF         (       filesys.os):00397                 CMPD    #$FFFF                            ;END OF FILE?
E87E 2731             (       filesys.os):00398                 BEQ     EOF
E880 ED46             (       filesys.os):00399                 STD     OLSTSEC,U                         ;SAVE LAST
E882 BDEAD2           (       filesys.os):00400                 JSR     RDISK                             ;READ IT
E885 BDE5D2           (       filesys.os):00401                 JSR     FNDLNK                            ;FIND ITS LINK
E888 ED44             (       filesys.os):00402                 STD     OSECTOR,U                         ;RESAVE
E88A B6DCDA           (       filesys.os):00403                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E88D B7DCEB           (       filesys.os):00404                 STA     >SDRIVE                           ;RESET SYSTEM DRIVE
E890 4F               (       filesys.os):00405                 CLRA
E891 5F               (       filesys.os):00406                 CLRB
E892 ED48             (       filesys.os):00407                 STD     OOFFSET,U                         ;CLEAR OFFSET
E894 3594             (       filesys.os):00408                 PULS    B,X,PC
                      (       filesys.os):00409         ;*
                      (       filesys.os):00410         ;* LOOK UP FILE WITH INTENT TO READ
                      (       filesys.os):00411         ;*
E896                  (       filesys.os):00412         LOCRED
E896 BDE64C           (       filesys.os):00413                 JSR     LOCERR                            ;FIND IT
E899 A68817           (       filesys.os):00414                 LDA     DATTR,X                           ;GET ATTRS
E89C 8580             (       filesys.os):00415                 BITA    #RPERM                            ;CAN WE READ?
E89E 2635             (       filesys.os):00416                 BNE     CLOC2                             ;YES, ITS OK
                      (       filesys.os):00417         ;* FILE PROTECTON VIOLATION
E8A0                  (       filesys.os):00418         PROERR
E8A0 108EF7B2         (       filesys.os):00419                 LDY     #PROMSG                           ;MESSAGE
E8A4 8603             (       filesys.os):00420                 LDA     #RCPRO                            ;PROTECTION VIOLATION
E8A6 7EE656           (       filesys.os):00421                 JMP     FILERR                            ;FILE ERROR
                      (       filesys.os):00422         ;* ATTEMPT TO READ FILE NOT OPEN FOR READ
E8A9                  (       filesys.os):00423         ORERR
E8A9 8EF783           (       filesys.os):00424                 LDX     #OREMSG
E8AC 8604             (       filesys.os):00425                 LDA     #RCORE
E8AE 7EE2B0           (       filesys.os):00426                 JMP     ERRMRC
                      (       filesys.os):00427         ;* ATTEMPT TO READ PAST EOF
E8B1                  (       filesys.os):00428         EOF
E8B1 8606             (       filesys.os):00429                 LDA     #RCEOF
E8B3 7EE2EB           (       filesys.os):00430                 JMP     ERRRET
                      (       filesys.os):00431         ;*
                      (       filesys.os):00432         ;* REWIND A FILE
                      (       filesys.os):00433         ;*
E8B6                  (       filesys.os):00434         REWIND
E8B6 3406             (       filesys.os):00435                 PSHS    A,B                               ;SAVE REGS
E8B8 EC42             (       filesys.os):00436                 LDD     OFIRST,U                          ;GET FIRST SECTOR ID
E8BA ED44             (       filesys.os):00437                 STD     OSECTOR,U                         ;POINT TO IT
E8BC 4F               (       filesys.os):00438                 CLRA
E8BD 5F               (       filesys.os):00439                 CLRB
E8BE ED48             (       filesys.os):00440                 STD     OOFFSET,U                         ;SET OFFSET
E8C0 ED46             (       filesys.os):00441                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E8C2 3586             (       filesys.os):00442                 PULS    A,B,PC
                      (       filesys.os):00443         ;*
                      (       filesys.os):00444         ;* LOOKUP A FILE WITH INTENT TO WRITE
                      (       filesys.os):00445         ;*
E8C4                  (       filesys.os):00446         LOCWRI
E8C4 BDE685           (       filesys.os):00447                 JSR     LOCDIR                            ;LOOK FOR IT
E8C7 2705             (       filesys.os):00448                 BEQ     CLOC1                             ;IT EXISTS
E8C9 BDE717           (       filesys.os):00449                 JSR     CREATE                            ;CREATE IT
E8CC 2007             (       filesys.os):00450                 BRA     CLOC2                             ;AND RETURN
E8CE                  (       filesys.os):00451         CLOC1
E8CE A68817           (       filesys.os):00452                 LDA     DATTR,X                           ;GET ATTRIBUTES
E8D1 8540             (       filesys.os):00453                 BITA    #WPERM                            ;CAN WE WRITE?
E8D3 27CB             (       filesys.os):00454                 BEQ     PROERR                            ;PROTECTON VIOLATION
E8D5                  (       filesys.os):00455         CLOC2
E8D5 FCDCDF           (       filesys.os):00456                 LDD     >WRKSEC                           ;GET DIRECTORY SECT
E8D8 1A04             (       filesys.os):00457                 ORCC    #$04                              ;SET 'Z'
E8DA 39               (       filesys.os):00458                 RTS
                      (       filesys.os):00459         ;*
                      (       filesys.os):00460         ;* OPEN A FILE FOR WRITE
                      (       filesys.os):00461         ;*
E8DB                  (       filesys.os):00462         OPENW
E8DB 3414             (       filesys.os):00463                 PSHS    B,X                               ;SAVE REGS
E8DD 8DE5             (       filesys.os):00464                 BSR     LOCWRI                            ;DOES IT EXIST
E8DF EC8813           (       filesys.os):00465                 LDD     DDADR,X                           ;GET DISK ADDRESS
E8E2 ED42             (       filesys.os):00466                 STD     OFIRST,U                          ;SAVE IT
E8E4 ED44             (       filesys.os):00467                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E8E6 4F               (       filesys.os):00468                 CLRA
E8E7 5F               (       filesys.os):00469                 CLRB                                      ;ZERO OFFSET
E8E8 ED48             (       filesys.os):00470                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E8EA ED46             (       filesys.os):00471                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST SECTOR
E8EC B6DCB7           (       filesys.os):00472                 LDA     >FDRIVE                           ;GET FILE DRIVE
E8EF A741             (       filesys.os):00473                 STA     ODRIVE,U                          ;SET IT UP
E8F1 8602             (       filesys.os):00474                 LDA     #2                                ;INDICATE FILE OPEN/WRITE
E8F3 A7C4             (       filesys.os):00475                 STA     OTYPE,U                           ;INDICATE
E8F5 B6DCDA           (       filesys.os):00476                 LDA     >SAVDRV
E8F8 B7DCEB           (       filesys.os):00477                 STA     >SDRIVE
E8FB 4F               (       filesys.os):00478                 CLRA    ZERO RC
E8FC 3594             (       filesys.os):00479                 PULS    B,X,PC
                      (       filesys.os):00480         ;*
                      (       filesys.os):00481         ;* WRITE CHARACTER TO A FILE
                      (       filesys.os):00482         ;*
E8FE                  (       filesys.os):00483         WRITEC
E8FE 3416             (       filesys.os):00484                 PSHS    A,B,X                             ;SAVE REGS
E900 304A             (       filesys.os):00485                 LEAX    OSIZ,U                            ;POINT TO DATA
E902 EC48             (       filesys.os):00486                 LDD     OOFFSET,U                         ;GET OFFSET
E904 10830200         (       filesys.os):00487                 CMPD    #512                              ;ARE WE OVER?
E908 2504             (       filesys.os):00488                 BLO     WRC1                              ;NO, ITS OK
E90A 8D19             (       filesys.os):00489                 BSR     WRITEB                            ;OUTPUT THE BLOCK
E90C EC48             (       filesys.os):00490                 LDD     OOFFSET,U                         ;GET OFFSET
E90E                  (       filesys.os):00491         WRC1
E90E 308B             (       filesys.os):00492                 LEAX    D,X                               ;POINT TO CHAR
E910 C30001           (       filesys.os):00493                 ADDD    #1                                ;INCREMENT
E913 ED48             (       filesys.os):00494                 STD     OOFFSET,U                         ;RESAVE
E915 A6E4             (       filesys.os):00495                 LDA     ,S                                ;GET CHAR BACK
E917 A784             (       filesys.os):00496                 STA     ,X                                ;WRITE IN BUFFER
E919 1A04             (       filesys.os):00497                 ORCC    #4                                ;INDICATE SUCESS
E91B 3596             (       filesys.os):00498                 PULS    A,B,X,PC
                      (       filesys.os):00499         ;* ATTEMPT TO WRITE FILE NOT OPEN FOR WRITE
E91D                  (       filesys.os):00500         OWERR
E91D 8EF79A           (       filesys.os):00501                 LDX     #OWEMSG
E920 8605             (       filesys.os):00502                 LDA     #RCOWE
E922 7EE2B0           (       filesys.os):00503                 JMP     ERRMRC
                      (       filesys.os):00504         ;*
                      (       filesys.os):00505         ;* WRITE A BLOCK TO A FILE
                      (       filesys.os):00506         ;*
E925                  (       filesys.os):00507         WRITEB
E925 3414             (       filesys.os):00508                 PSHS    B,X                               ;SAVE REGS
E927 A6C4             (       filesys.os):00509                 LDA     OTYPE,U                           ;GET TYPE
E929 8102             (       filesys.os):00510                 CMPA    #2                                ;WRITE?
E92B 26F0             (       filesys.os):00511                 BNE     OWERR                             ;NO, INVALID
E92D A641             (       filesys.os):00512                 LDA     ODRIVE,U                          ;GET DRIVE
E92F B7DCEB           (       filesys.os):00513                 STA     >SDRIVE                           ;SELECT DRIVE
E932 EC44             (       filesys.os):00514                 LDD     OSECTOR,U                         ;GET SECTOR
E934 1083FFFF         (       filesys.os):00515                 CMPD    #$FFFF                            ;ARE WE PAST END?
E938 2613             (       filesys.os):00516                 BNE     WRB1                              ;NO, ITS OK
E93A BDE79D           (       filesys.os):00517                 JSR     FRESEC                            ;GET A SECTOR
E93D 3406             (       filesys.os):00518                 PSHS    A,B                               ;SAVE IT
E93F EC46             (       filesys.os):00519                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
E941 BDE5D2           (       filesys.os):00520                 JSR     FNDLNK                            ;GET ITS LINK
E944 3506             (       filesys.os):00521                 PULS    A,B                               ;RESTORE
E946 ED84             (       filesys.os):00522                 STD     ,X                                ;SAVE IT
E948 BDE794           (       filesys.os):00523                 JSR     CHGWRK                            ;INDICATE SECTOR CHANGED
E94B AE61             (       filesys.os):00524                 LDX     1,S                               ;RESTORE MEMORY POINTER
E94D                  (       filesys.os):00525         WRB1
E94D ED46             (       filesys.os):00526                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E94F BDEB05           (       filesys.os):00527                 JSR     WDISK                             ;WRITE THE SECTOR
E952 BDE5D2           (       filesys.os):00528                 JSR     FNDLNK                            ;LOCATE LINK
E955 ED44             (       filesys.os):00529                 STD     OSECTOR,U                         ;SAVE ID OF NEXT SECTOR
E957 B6DCDA           (       filesys.os):00530                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E95A B7DCEB           (       filesys.os):00531                 STA     >SDRIVE                           ;RESET DRIVE ID
E95D 4F               (       filesys.os):00532                 CLRA
E95E 5F               (       filesys.os):00533                 CLRB
E95F ED48             (       filesys.os):00534                 STD     OOFFSET,U                         ;INDICATE NO CHAR WRITE
E961 3594             (       filesys.os):00535                 PULS    B,X,PC
                      (       filesys.os):00536         ;*
                      (       filesys.os):00537         ;* CLOSE OPEN FILE
                      (       filesys.os):00538         ;*
E963                  (       filesys.os):00539         CLOSE
E963 3414             (       filesys.os):00540                 PSHS    B,X                               ;SAVE REGS
E965 A6C4             (       filesys.os):00541                 LDA     OTYPE,U                           ;GET TYPE
E967 8102             (       filesys.os):00542                 CMPA    #2                                ;OPEN FOR WRITE?
E969 2639             (       filesys.os):00543                 BNE     CLO4                              ;NO, SKIP IT
                      (       filesys.os):00544         ;* UPDATE LAST SECTOR IF ANY DATA, OR FIRST IN FILE
E96B A641             (       filesys.os):00545                 LDA     ODRIVE,U                          ;GET DRIVE ID
E96D B7DCEB           (       filesys.os):00546                 STA     >SDRIVE                           ;SELECT IT
E970 EC48             (       filesys.os):00547                 LDD     OOFFSET,U                         ;DATA IN LAST SECT?
E972 2604             (       filesys.os):00548                 BNE     CLO0                              ;YES, WRITE IT
E974 AE46             (       filesys.os):00549                 LDX     OLSTSEC,U                         ;GET SECTOR
E976 2617             (       filesys.os):00550                 BNE     CLO3                              ;IS A LAST, OK
                      (       filesys.os):00551         ;* CLEAR REMAINING SECTOR TO ZERO
E978                  (       filesys.os):00552         CLO0
E978 304A             (       filesys.os):00553                 LEAX    OSIZ,U                            ;PT TO AREA
E97A 308B             (       filesys.os):00554                 LEAX    D,X                               ;ADVANCE TO DATA AREA
E97C                  (       filesys.os):00555         CLO1
E97C 10830200         (       filesys.os):00556                 CMPD    #512                              ;ARE WE OVER?
E980 2409             (       filesys.os):00557                 BHS     CLO2                              ;YES, STOP
E982 6F84             (       filesys.os):00558                 CLR     ,X                                ;SET TO ZERO
E984 6380             (       filesys.os):00559                 COM     ,X+                               ;& CONVERT TO FF
E986 C30001           (       filesys.os):00560                 ADDD    #1                                ;ADVANCE
E989 20F1             (       filesys.os):00561                 BRA     CLO1                              ;AND CONTINUE
                      (       filesys.os):00562         ;* WRITE IT TO THE DISK
E98B                  (       filesys.os):00563         CLO2
E98B 304A             (       filesys.os):00564                 LEAX    OSIZ,U                            ;OFFSET AGAIN
E98D 8D96             (       filesys.os):00565                 BSR     WRITEB                            ;WRITE IT
                      (       filesys.os):00566         ;* MARK LAST SECTOR WRITTEN AS EOF
E98F                  (       filesys.os):00567         CLO3
E98F EC46             (       filesys.os):00568                 LDD     OLSTSEC,U                         ;ITS NOW LAST ONE
E991 BDE5D2           (       filesys.os):00569                 JSR     FNDLNK                            ;GET ITS LINK
E994 CCFFFF           (       filesys.os):00570                 LDD     #$FFFF                            ;EOF MARKER
E997 ED84             (       filesys.os):00571                 STD     ,X                                ;WRITE IT
                      (       filesys.os):00572         ;* IF NOT LAST SECTOR IN FILE, RELEASE REST
E999 EC44             (       filesys.os):00573                 LDD     OSECTOR,U                         ;GET SECTOR
E99B 1083FFFF         (       filesys.os):00574                 CMPD    #$FFFF                            ;LAST ONE IN FILE?
E99F 2703             (       filesys.os):00575                 BEQ     CLO4                              ;IS OK
E9A1 BDEDB1           (       filesys.os):00576                 JSR     UNCHAIN                           ;REMOVE SECTOR LINKS
E9A4                  (       filesys.os):00577         CLO4
E9A4 6FC4             (       filesys.os):00578                 CLR     OTYPE,U                           ;INDICATE FILE IS CLOSED
E9A6 B6DCDA           (       filesys.os):00579                 LDA     >SAVDRV                           ;RESET DRIVE
E9A9 B7DCEB           (       filesys.os):00580                 STA     >SDRIVE
E9AC 4F               (       filesys.os):00581                 CLRA
E9AD 3594             (       filesys.os):00582                 PULS    B,X,PC                            ;GO HOME
                      (       filesys.os):00583         ;*
                      (       filesys.os):00584         ;* SEEK ABSOLUTE FROM START OF FILE
                      (       filesys.os):00585         ;*
E9AF                  (       filesys.os):00586         SEEKABS
E9AF BDE8B6           (       filesys.os):00587                 JSR     REWIND                            ;BACK TO START
                      (       filesys.os):00588         ;*
                      (       filesys.os):00589         ;* SEEK FORWARD RELATIVE
                      (       filesys.os):00590         ;*
E9B2                  (       filesys.os):00591         SEEKREL
E9B2 3416             (       filesys.os):00592                 PSHS    A,B,X                             ;SAVE SECTOR ID
E9B4 E6C4             (       filesys.os):00593                 LDB     OTYPE,U                           ;GET TYPE
E9B6 5A               (       filesys.os):00594                 DECB                                      ;OPEN FOR READ?
E9B7 1026FEEE         (       filesys.os):00595                 LBNE    ORERR                             ;NO, REPORT ERROR
E9BB A641             (       filesys.os):00596                 LDA     ODRIVE,U                          ;GET DRIVE
E9BD B7DCEB           (       filesys.os):00597                 STA     >SDRIVE                           ;SELECT IT
E9C0 EC48             (       filesys.os):00598                 LDD     OOFFSET,U                         ;GET OFFSET?
E9C2 E3E4             (       filesys.os):00599                 ADDD    ,S                                ;ADD OFFSET
                      (       filesys.os):00600         ;* ADVANCE TILL WE ARE ON CORRECT SECTOR
E9C4                  (       filesys.os):00601         SEEK1
E9C4 10830200         (       filesys.os):00602                 CMPD    #512                              ;ARE WE OVER?
E9C8 251A             (       filesys.os):00603                 BLO     SEEK2                             ;NO, SET OFFSET & EXIT
E9CA 3406             (       filesys.os):00604                 PSHS    A,B                               ;SAVE ID
E9CC EC44             (       filesys.os):00605                 LDD     OSECTOR,U                         ;GET NEXT SECTOR
E9CE 1083FFFF         (       filesys.os):00606                 CMPD    #$FFFF                            ;END OF FILE?
E9D2 1027FEDB         (       filesys.os):00607                 LBEQ    EOF                               ;ERROR
E9D6 ED46             (       filesys.os):00608                 STD     OLSTSEC,U                         ;SET AS OLD
E9D8 BDE5D2           (       filesys.os):00609                 JSR     FNDLNK                            ;LOOKUP LINK
E9DB ED44             (       filesys.os):00610                 STD     OSECTOR,U                         ;SAVE PTR TO NEXT
E9DD 3506             (       filesys.os):00611                 PULS    A,B                               ;RESTORE IT
E9DF 830200           (       filesys.os):00612                 SUBD    #512                              ;INDICATE WE ADVANCED
E9E2 20E0             (       filesys.os):00613                 BRA     SEEK1                             ;CONTINUE
                      (       filesys.os):00614         ;* SKIPPED SECTORS, IF NON-ZERO OFFSET, READ IN DATA
E9E4                  (       filesys.os):00615         SEEK2
E9E4 ED48             (       filesys.os):00616                 STD     OOFFSET,U                         ;SET OFFSET
E9E6 270F             (       filesys.os):00617                 BEQ     SEEK3                             ;ZERO, DON'T READ DATA
E9E8 EC44             (       filesys.os):00618                 LDD     OSECTOR,U                         ;GET SECTOR
E9EA 1083FFFF         (       filesys.os):00619                 CMPD    #$FFFF                            ;EOF?
E9EE 1027FEBF         (       filesys.os):00620                 LBEQ    EOF                               ;YES, ERROR
E9F2 304A             (       filesys.os):00621                 LEAX    OSIZ,U                            ;ADVANCE TO DATA
E9F4 BDEAD2           (       filesys.os):00622                 JSR     RDISK                             ;READ A BLOCK
E9F7                  (       filesys.os):00623         SEEK3
E9F7 B6DCDA           (       filesys.os):00624                 LDA     >SAVDRV                           ;GET DRIVE
E9FA B7DCEB           (       filesys.os):00625                 STA     >SDRIVE                           ;SET IT
E9FD 4F               (       filesys.os):00626                 CLRA    ZERO RC
E9FE 3596             (       filesys.os):00627                 PULS    A,B,X,PC                          ;BACK TO END
                      (       filesys.os):00628         ;*
                      (       filesys.os):00629         ;* REPORT POSITION IN FILE
                      (       filesys.os):00630         ;*
EA00                  (       filesys.os):00631         FTELL
EA00 3430             (       filesys.os):00632                 PSHS    X,Y                               ;SAVE REGS
EA02 A641             (       filesys.os):00633                 LDA     ODRIVE,U                          ;GET DRIVE
EA04 B7DCEB           (       filesys.os):00634                 STA     >SDRIVE                           ;SELECT IT
EA07 108E0000         (       filesys.os):00635                 LDY     #0                                ;START AT POSITION ZERO
EA0B EC42             (       filesys.os):00636                 LDD     OFIRST,U                          ;GET ID OF FIRST
EA0D                  (       filesys.os):00637         FTEL1
EA0D 10A344           (       filesys.os):00638                 CMPD    OSECTOR,U                         ;ARE WE THERE?
EA10 2709             (       filesys.os):00639                 BEQ     FTEL2                             ;YES
EA12 31A90200         (       filesys.os):00640                 LEAY    512,Y                             ;ADVANCE 1 SECTOR SIZE
EA16 BDE5D2           (       filesys.os):00641                 JSR     FNDLNK                            ;LOCATE LINK
EA19 26F2             (       filesys.os):00642                 BNE     FTEL1                             ;TRY THIS ONE
EA1B                  (       filesys.os):00643         FTEL2
EA1B EC48             (       filesys.os):00644                 LDD     OOFFSET,U                         ;GET OFFSET
EA1D 3420             (       filesys.os):00645                 PSHS    Y                                 ;SAVE 'Y'
EA1F E3E1             (       filesys.os):00646                 ADDD    ,S++                              ;INCLUDE IN RESULT
EA21 3402             (       filesys.os):00647                 PSHS    A
EA23 B6DCDA           (       filesys.os):00648                 LDA     >SAVDRV                           ;GET DRIVE
EA26 B7DCEB           (       filesys.os):00649                 STA     >SDRIVE
EA29 4F               (       filesys.os):00650                 CLRA    'Z' RC
EA2A 35B2             (       filesys.os):00651                 PULS    A,X,Y,PC
                      (       filesys.os):00652         ;*
                      (       filesys.os):00653         ;* SUSPEND FILE OPERATION
                      (       filesys.os):00654         ;*
EA2C                  (       filesys.os):00655         SUSPEND
EA2C 3506             (       filesys.os):00656                 PULS    A,B                               ;GET PC FROM STACK
EA2E FDDCD3           (       filesys.os):00657                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EA31 EC46             (       filesys.os):00658                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
EA33 AE48             (       filesys.os):00659                 LDX     OOFFSET,U                         ;GET OFFSET
EA35 10AE42           (       filesys.os):00660                 LDY     OFIRST,U                          ;GET FIRST SECT
EA38 3436             (       filesys.os):00661                 PSHS    A,B,X,Y                           ;SAVE IT
EA3A ECC4             (       filesys.os):00662                 LDD     OTYPE,U                           ;GET TYPE&DRIVE
EA3C 3406             (       filesys.os):00663                 PSHS    A,B                               ;SAVE IT
EA3E 8102             (       filesys.os):00664                 CMPA    #2                                ;WUZ IT WRITE?
EA40 262D             (       filesys.os):00665                 BNE     SUSP2                             ;DON'T SAVE
EA42 8C0000           (       filesys.os):00666                 CMPX    #0                                ;ZERO OFFSET
                      (       filesys.os):00667         
EA45 2728             (       filesys.os):00668                 BEQ     SUSP2                             ;DON'T SAVE
                      (       filesys.os):00669         ;* CHARACTER WRITE, WITH NON-ZERO OFFSET
EA47 A641             (       filesys.os):00670                 LDA     ODRIVE,U                          ;GET DRIVE
EA49 B7DCEB           (       filesys.os):00671                 STA     >SDRIVE                           ;SELECT IT
EA4C EC44             (       filesys.os):00672                 LDD     OSECTOR,U                         ;GET SECTOR
EA4E 1083FFFF         (       filesys.os):00673                 CMPD    #$FFFF                            ;OK TO WRITE?
EA52 2610             (       filesys.os):00674                 BNE     SUSP1                             ;ITS OK
EA54 BDE79D           (       filesys.os):00675                 JSR     FRESEC                            ;GRAB A SECTOR
EA57 3406             (       filesys.os):00676                 PSHS    A,B                               ;SAVE ID
EA59 EC46             (       filesys.os):00677                 LDD     OLSTSEC,U                         ;GET LAST
EA5B BDE5D2           (       filesys.os):00678                 JSR     FNDLNK                            ;GET ITS LINK
EA5E 3506             (       filesys.os):00679                 PULS    A,B                               ;RESTORE ID OF FREE
EA60 ED84             (       filesys.os):00680                 STD     ,X                                ;SET IT
EA62 ED44             (       filesys.os):00681                 STD     OSECTOR,U                         ;SET UP NEW SECTOR
EA64                  (       filesys.os):00682         SUSP1
EA64 304A             (       filesys.os):00683                 LEAX    OSIZ,U                            ;SET UP PTR
EA66 BDEB05           (       filesys.os):00684                 JSR     WDISK                             ;OUTPUT SECTOR TO DISK
EA69 B6DCDA           (       filesys.os):00685                 LDA     >SAVDRV                           ;GET DRIVE
EA6C B7DCEB           (       filesys.os):00686                 STA     >SDRIVE                           ;RESET IT
EA6F                  (       filesys.os):00687         SUSP2
EA6F BEDCD6           (       filesys.os):00688                 LDX     >SAVX                             ;RESTORE X
EA72 10BEDCD8         (       filesys.os):00689                 LDY     >SAVY                             ;RESTORE Y
EA76 F6DCD5           (       filesys.os):00690                 LDB     >SAVB                             ;RESTORE B
EA79 4F               (       filesys.os):00691                 CLRA    ZERO RC
EA7A 6E9FDCD3         (       filesys.os):00692                 JMP     [TEMP4]                           ;GOT FOR TI
                      (       filesys.os):00693         ;*
                      (       filesys.os):00694         ;* RESUME FILE OPERATION
                      (       filesys.os):00695         ;*
EA7E                  (       filesys.os):00696         RESUME
EA7E 3506             (       filesys.os):00697                 PULS    A,B                               ;GET PC
EA80 FDDCD3           (       filesys.os):00698                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EA83 3506             (       filesys.os):00699                 PULS    A,B                               ;RESTORE REGS
EA85 EDC4             (       filesys.os):00700                 STD     OTYPE,U                           ;RESTORE TYPE
EA87 F7DCEB           (       filesys.os):00701                 STB     >SDRIVE                           ;SELECT DRIVE
EA8A 3536             (       filesys.os):00702                 PULS    A,B,X,Y                           ;RESTORE REST
EA8C AF48             (       filesys.os):00703                 STX     OOFFSET,U                         ;SET OFFSET
EA8E 10AF42           (       filesys.os):00704                 STY     OFIRST,U                          ;SET FIRST
                      (       filesys.os):00705         ;* IF OLSTSEC IS ZERO, NO READ/WRITE TO DISK YET, OSECTOR IS FIRST IN FILE
EA91 ED46             (       filesys.os):00706                 STD     OLSTSEC,U                         ;RESET LAST SECTOR
EA93 2605             (       filesys.os):00707                 BNE     RESU1                             ;ITS OK
EA95 10AF44           (       filesys.os):00708                 STY     OSECTOR,U                         ;SET CURRENT SECTOR
EA98 2005             (       filesys.os):00709                 BRA     RESU2                             ;CONTINUE
                      (       filesys.os):00710         ;* ELSE OSECTOR IS NEXT AFTER OLSTSEC
EA9A                  (       filesys.os):00711         RESU1
EA9A BDE5D2           (       filesys.os):00712                 JSR     FNDLNK                            ;GET LINK
EA9D ED44             (       filesys.os):00713                 STD     OSECTOR,U                         ;SET UP NEXT SECTOR
                      (       filesys.os):00714         ;* CHECK FOR ACTUAL SECTOR IN MEMORY
EA9F                  (       filesys.os):00715         RESU2
EA9F EC48             (       filesys.os):00716                 LDD     OOFFSET,U                         ;CHAR OPERATIONS?
EAA1 2707             (       filesys.os):00717                 BEQ     RESU3                             ;NO, ALL IS OK
                      (       filesys.os):00718         ;* NON-ZERO OFFSET, SECTOR MUST BE READ INTO RAM
EAA3 EC44             (       filesys.os):00719                 LDD     OSECTOR,U                         ;GET SECTOR
EAA5 304A             (       filesys.os):00720                 LEAX    OSIZ,U                            ;ADVANCE TO BUFFER
EAA7 BDEAD2           (       filesys.os):00721                 JSR     RDISK                             ;READ IN SECTOR
EAAA                  (       filesys.os):00722         RESU3
EAAA B6DCDA           (       filesys.os):00723                 LDA     >SAVDRV                           ;RESTORE DRIVE
EAAD B7DCEB           (       filesys.os):00724                 STA     >SDRIVE                           ;RESET IT
EAB0 20B2             (       filesys.os):00725                 BRA     SUSP1                             ;RETURN TO CALLER
                      (       filesys.os):00726         ;*
                      (       filesys.os):00727         ;* CALCULATE CYLINDER, SECTOR, AND HEAD FROM ABSOLUTE SECTOR NUMBER
                      (       filesys.os):00728         ;*
EAB2                  (       filesys.os):00729         SECTOR
EAB2 3416             (       filesys.os):00730                 PSHS    A,B,X                             ;SAVE SECTOR ID
EAB4 1F01             (       filesys.os):00731                 TFR     D,X                               ;SECT ID IN 'X'
EAB6 A643             (       filesys.os):00732                 LDA     NSEC,U                            ;GET SECTORS/TRACK
EAB8 E642             (       filesys.os):00733                 LDB     NHEAD,U                           ;GET # HEADS
EABA 3D               (       filesys.os):00734                 MUL                                       ;CALCULATE SECTORS/CYLINDER
EABB BDF6BE           (       filesys.os):00735                 JSR     DIV16                             ;X=CYLINDER ID, D=SECTOR IN CYLINDER
EABE 6F45             (       filesys.os):00736                 CLR     HEAD,U                            ;ASSUME HEAD 0
EAC0                  (       filesys.os):00737         SEC1
EAC0 E143             (       filesys.os):00738                 CMPB    NSEC,U                            ;WHICH HEAD?
EAC2 2506             (       filesys.os):00739                 BLO     SEC2                              ;ASSUMPTION CORRECT
EAC4 E043             (       filesys.os):00740                 SUBB    NSEC,U                            ;CONVERT
EAC6 6C45             (       filesys.os):00741                 INC     HEAD,U                            ;ADVANCE TO NEXT HEAD
EAC8 20F6             (       filesys.os):00742                 BRA     SEC1                              ;TRY AGAIN
EACA                  (       filesys.os):00743         SEC2
EACA E746             (       filesys.os):00744                 STB     SEC,U                             ;INDICATE SECTOR
EACC 1F10             (       filesys.os):00745                 TFR     X,D                               ;GET CYLINDER ID
EACE E744             (       filesys.os):00746                 STB     CYL,U                             ;SAVE CYLINDER ID
EAD0 3596             (       filesys.os):00747                 PULS    A,B,X,PC
                      (       filesys.os):00748         ;*
                      (       filesys.os):00749         ;* READ SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00750         ;*
EAD2                  (       filesys.os):00751         RDISK
EAD2 3476             (       filesys.os):00752                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EAD4 7FDCEC           (       filesys.os):00753                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EAD7 8D20             (       filesys.os):00754                 BSR     GETCTL                            ;SET UP 'U'
EAD9                  (       filesys.os):00755         RTRY1
EAD9 ECE4             (       filesys.os):00756                 LDD     ,S                                ;GET SECTOR
EADB 8DD5             (       filesys.os):00757                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EADD                  (       filesys.os):00758         RTRY2
EADD AE62             (       filesys.os):00759                 LDX     2,S                               ;RESTORE 'X'
EADF BDF6EF           (       filesys.os):00760                 JSR     RDSEC                             ;ATTEMPT READ
EAE2 2713             (       filesys.os):00761                 BEQ     RDONE                             ;SUCESS, ITS OK
EAE4 7CDCEC           (       filesys.os):00762                 INC     >ERRCNT                           ;ADVANCE
EAE7 F6DCEC           (       filesys.os):00763                 LDB     >ERRCNT                           ;GET VALUE
EAEA C105             (       filesys.os):00764                 CMPB    #5                                ;TOO MANY ERRORS?
EAEC 273C             (       filesys.os):00765                 BEQ     HDE                               ;YES, SKIP IT
EAEE C103             (       filesys.os):00766                 CMPB    #3                                ;TIME FOR RE-SEEK?
EAF0 26EB             (       filesys.os):00767                 BNE     RTRY2                             ;NO, DON'T RE-SEEK
EAF2 BDF6E5           (       filesys.os):00768                 JSR     HOME                              ;RECALIBRATE
EAF5 20E2             (       filesys.os):00769                 BRA     RTRY1                             ;AND RESEEK
EAF7                  (       filesys.os):00770         RDONE
EAF7 35F6             (       filesys.os):00771                 PULS    A,B,X,Y,U,PC
                      (       filesys.os):00772         ;*
                      (       filesys.os):00773         ;* GET DRIVE(A) CONTROL BLOCK IN 'D' & 'U'
                      (       filesys.os):00774         ;*
EAF9                  (       filesys.os):00775         GETCTL
EAF9 B6DCEB           (       filesys.os):00776                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
EAFC                  (       filesys.os):00777         GETCTL1
EAFC C607             (       filesys.os):00778                 LDB     #CSIZE                            ;SIZE OF EACH BLOCK
EAFE 3D               (       filesys.os):00779                 MUL                                       ;CALCULATE OFFSET
EAFF C3DC50           (       filesys.os):00780                 ADDD    #DCTRL                            ;OFFSET TO DATA AREA
EB02 1F03             (       filesys.os):00781                 TFR     D,U                               ;SET UP U
EB04 39               (       filesys.os):00782                 RTS
                      (       filesys.os):00783         ;*
                      (       filesys.os):00784         ;* WRITE SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00785         ;*
EB05                  (       filesys.os):00786         WDISK
EB05 3476             (       filesys.os):00787                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EB07 7FDCEC           (       filesys.os):00788                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EB0A 8DED             (       filesys.os):00789                 BSR     GETCTL                            ;SET UP 'U'
EB0C                  (       filesys.os):00790         WTRY1
EB0C ECE4             (       filesys.os):00791                 LDD     ,S                                ;GET SECTOR
EB0E 8DA2             (       filesys.os):00792                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EB10                  (       filesys.os):00793         WTRY2
EB10 AE62             (       filesys.os):00794                 LDX     2,S                               ;RESTORE 'X'
EB12 BDF6F3           (       filesys.os):00795                 JSR     WRSEC                             ;ATTEMPT WRITE
EB15 27E0             (       filesys.os):00796                 BEQ     RDONE                             ;SUCCESS, ITS OK
EB17 7CDCEC           (       filesys.os):00797                 INC     >ERRCNT                           ;ADVANCE
EB1A F6DCEC           (       filesys.os):00798                 LDB     >ERRCNT                           ;GET VALUE
EB1D C105             (       filesys.os):00799                 CMPB    #5                                ;TOO MANY ERRORS?
EB1F 2709             (       filesys.os):00800                 BEQ     HDE                               ;YES, SKIP IT
EB21 C103             (       filesys.os):00801                 CMPB    #3                                ;TIME FOR RE-SEEK
EB23 26EB             (       filesys.os):00802                 BNE     WTRY2                             ;NO, DON'T RE-SEEK
EB25 BDF6E5           (       filesys.os):00803                 JSR     HOME                              ;RECALIBRATE
EB28 20E2             (       filesys.os):00804                 BRA     WTRY1                             ;AND RESEEK
                      (       filesys.os):00805         ;* REPORT DISK ERROR
EB2A                  (       filesys.os):00806         HDE
EB2A B7DCCB           (       filesys.os):00807                 STA     >TEMP                             ;SAVE ERROR CODE
EB2D 3576             (       filesys.os):00808                 PULS    A,B,X,Y,U                         ;RESTORE REGS CUZ 'U' NOT SAVED
EB2F 10B3DCDF         (       filesys.os):00809                 CMPD    >WRKSEC                           ;WAS IT WORK SECTOR?
EB33 2612             (       filesys.os):00810                 BNE     HDE1                              ;NO, ITS NOT
EB35 3402             (       filesys.os):00811                 PSHS    A                                 ;SAVE A
EB37 B6DCEB           (       filesys.os):00812                 LDA     >SDRIVE                           ;GET CURRENT DRIVE
EB3A B1DCDE           (       filesys.os):00813                 CMPA    >WRKDRV                           ;ON WORK DRIVE?
EB3D 3502             (       filesys.os):00814                 PULS    A                                 ;RESTORE A
EB3F 2606             (       filesys.os):00815                 BNE     HDE1                              ;NOT WORK DRIVE
EB41 BDE618           (       filesys.os):00816                 JSR     PURGE1                            ;INSURE NO WORK SECTOR IN CORE
EB44 7FDCDD           (       filesys.os):00817                 CLR     >WRKCHG                           ;INSURE NO UPDATE RECORDED
EB47                  (       filesys.os):00818         HDE1
EB47 BDE541           (       filesys.os):00819                 JSR     WRLIN                             ;OUTPUT STRING
EB4A 4572726F72206163 (       filesys.os):00820                 FCC     'Error accessing block '
     63657373696E6720
     626C6F636B20
EB60 00               (       filesys.os):00821                 FCB     $00
EB61 BDE471           (       filesys.os):00822                 JSR     WRDEC                             ;DISPLAY BLOCK
EB64 BDE541           (       filesys.os):00823                 JSR     WRLIN                             ;OUTPUT STRING
EB67 206F6E2064726976 (       filesys.os):00824                 FCC     ' on drive: '
     653A20
EB72 00               (       filesys.os):00825                 FCB     $00
EB73 B6DCEB           (       filesys.os):00826                 LDA     >SDRIVE                           ;GET DRIVE ID
EB76 8B41             (       filesys.os):00827                 ADDA    #'A'                              ;OFFSET
EB78 BDE58D           (       filesys.os):00828                 JSR     PUTCHR
EB7B BDE57B           (       filesys.os):00829                 JSR     LFCR                              ;NEW LINE
EB7E 8EEB9B           (       filesys.os):00830                 LDX     #DETAB                            ;PT TO TABLE
EB81                  (       filesys.os):00831         HDE2
EB81 7ADCCB           (       filesys.os):00832                 DEC     >TEMP                             ;REDUCE ERROR COUNT
EB84 270A             (       filesys.os):00833                 BEQ     HDE4                              ;THIS IS IT
EB86                  (       filesys.os):00834         HDE3
EB86 A680             (       filesys.os):00835                 LDA     ,X+                               ;GET CHAR
EB88 26FC             (       filesys.os):00836                 BNE     HDE3                              ;KEEP LOOKING
EB8A A684             (       filesys.os):00837                 LDA     ,X                                ;MORE?
EB8C 26F3             (       filesys.os):00838                 BNE     HDE2                              ;NO, ERROR
EB8E 3001             (       filesys.os):00839                 LEAX    1,X                               ;SKIP MARKER
EB90                  (       filesys.os):00840         HDE4
EB90 BDE567           (       filesys.os):00841                 JSR     WRSTR                             ;OUTPUT STRING
EB93 BDE57B           (       filesys.os):00842                 JSR     LFCR                              ;NEW LINE
EB96 8609             (       filesys.os):00843                 LDA     #RCDSK                            ;INDICATE DISK ERROR
EB98 7EE2EB           (       filesys.os):00844                 JMP     ERRRET                            ;RETURN
                      (       filesys.os):00845         ;* DISK ERROR MESSAGES
EB9B                  (       filesys.os):00846         DETAB
EB9B 4469736B20666F72 (       filesys.os):00847                 FCC     'Disk format error'
     6D6174206572726F
     72
EBAC 00               (       filesys.os):00848                 FCB     $00
EBAD 4261642073656374 (       filesys.os):00849                 FCC     'Bad sector'
     6F72
EBB7 00               (       filesys.os):00850                 FCB     $00
EBB8 536563746F72206E (       filesys.os):00851                 FCC     'Sector not found'
     6F7420666F756E64
EBC8 00               (       filesys.os):00852                 FCB     $00
EBC9 4469736B20777269 (       filesys.os):00853                 FCC     'Disk write protected'
     74652070726F7465
     63746564
EBDD 00               (       filesys.os):00854                 FCB     $00
EBDE 00               (       filesys.os):00855                 FCB     0                                 ;END OF TABLE
EBDF 4469736B20737973 (       filesys.os):00856                 FCC     'Disk system error'
     74656D206572726F
     72
EBF0 00               (       filesys.os):00857                 FCB     $00
                      (        cubix.asm):01189                 INCLUDE command.os                        ;INTERNAL COMMANDS
                      (       command.os):00001         ;*
                      (       command.os):00002         ;* CUBIX Internal (built in) command handlers
                      (       command.os):00003         ;*
                      (       command.os):00004         ;* FORMAT COMMAND
                      (       command.os):00005         ;*
EBF1                  (       command.os):00006         INIT
EBF1 BDE616           (       command.os):00007                 JSR     PURGE                             ;INSURE NO DISK I/O IN PROG
EBF4 BDE3F2           (       command.os):00008                 JSR     GETDRV                            ;GET DRIVE ID
EBF7 B7DCEB           (       command.os):00009                 STA     >SDRIVE                           ;SELECT IT
EBFA BDEAF9           (       command.os):00010                 JSR     GETCTL                            ;PT 'U' TO CTRL BLOCK
EBFD CC0203           (       command.os):00011                 LDD     #$0203                            ;DEFAULT INTERLEAVE & ALLOCATION
EC00 FDDCD3           (       command.os):00012                 STD     >TEMP4                            ;SAVE IT
                      (       command.os):00013         ;* GET FORMAT OPERANDS
EC03                  (       command.os):00014         INI00
EC03 BDE4CF           (       command.os):00015                 JSR     SKIP                              ;ANY MORE OPERANDS?
EC06 2728             (       command.os):00016                 BEQ     INI1                              ;NO, THTS ALL
EC08 8EF40E           (       command.os):00017                 LDX     #INITAB                           ;POINT TO TABLE
EC0B BDF0B7           (       command.os):00018                 JSR     TLOOKE                            ;GET DATA
EC0E 3404             (       command.os):00019                 PSHS    B                                 ;SAVE ID
EC10 BDE404           (       command.os):00020                 JSR     GETNUM                            ;GET VALUE
EC13 3502             (       command.os):00021                 PULS    A                                 ;RESTORE A
EC15 4D               (       command.os):00022                 TSTA    INTERLEAVE?
EC16 2605             (       command.os):00023                 BNE     INI01                             ;NO
EC18 F7DCD3           (       command.os):00024                 STB     >TEMP4                            ;SAVE INTERLEAVE
EC1B 20E6             (       command.os):00025                 BRA     INI00                             ;TRY FOR NEXT
EC1D                  (       command.os):00026         INI01
EC1D 4A               (       command.os):00027                 DECA    DIRECTORY?
EC1E 2605             (       command.os):00028                 BNE     INI02                             ;NO, USE STANDARD OPTIONS
EC20 F7DCD4           (       command.os):00029                 STB     >TEMP4+1                          ;SET DIRECTORY ALLOCATION
EC23 20DE             (       command.os):00030                 BRA     INI00                             ;TRY FOR NEXT
EC25                  (       command.os):00031         INI02
EC25 4A               (       command.os):00032                 DECA    CONVERT
EC26 8103             (       command.os):00033                 CMPA    #3                                ;IN RANGE?
EC28 1022F67F         (       command.os):00034                 LBHI    BADOPR                            ;NO, REPORT ERROR
EC2C E7C6             (       command.os):00035                 STB     A,U                               ;SET UP DRIVE
EC2E 20D3             (       command.os):00036                 BRA     INI00                             ;TRY FOR NEXT
                      (       command.os):00037         ;* DISPLAY FORMAT
EC30                  (       command.os):00038         INI1
EC30 BDE541           (       command.os):00039                 JSR     WRLIN
EC33 466F726D61747469 (       command.os):00040                 FCC     'Formatting '
     6E6720
EC3E 00               (       command.os):00041                 FCB     $00
EC3F B6DCEB           (       command.os):00042                 LDA     >SDRIVE
EC42 BDF204           (       command.os):00043                 JSR     SHODRV                            ;SHOW THE DISK
EC45 8EF40E           (       command.os):00044                 LDX     #INITAB                           ;POINT TO TABLE
EC48 4F               (       command.os):00045                 CLRA                                      ;DISPLAY INTERLEAVE
EC49 F6DCD3           (       command.os):00046                 LDB     >TEMP4                            ;GET INTERLEAVE FACTOR
EC4C BDF255           (       command.os):00047                 JSR     SHODRB                            ;DISPLAY IT
EC4F 8601             (       command.os):00048                 LDA     #1                                ;DISPLAY DIRECTORY EXTENSION
EC51 F6DCD4           (       command.os):00049                 LDB     >TEMP4+1                          ;GET DIRECTORY EXTENSION
EC54 BDF24F           (       command.os):00050                 JSR     SHODRA                            ;DISPLAY IT
EC57 BDE541           (       command.os):00051                 JSR     WRLIN                             ;MESSAGE
EC5A 0A0D             (       command.os):00052                 FCB     $0A,$0D                           ;NEW LINE
EC5C 4F6B3F20         (       command.os):00053                 FCC     'Ok? '
EC60 00               (       command.os):00054                 FCB     $00
EC61 BDE5CD           (       command.os):00055                 JSR     GETCHR
EC64 BDE58D           (       command.os):00056                 JSR     PUTCHR                            ;ECHO
EC67 84DF             (       command.os):00057                 ANDA    #$DF                              ;GET IT
EC69 8159             (       command.os):00058                 CMPA    #'Y'
EC6B 1026F90C         (       command.os):00059                 LBNE    LFCR
EC6F BDE57B           (       command.os):00060                 JSR     LFCR                              ;NEW LINE
                      (       command.os):00061         ;* FORMAT PHYSICAL DISK
EC72 B6DCD3           (       command.os):00062                 LDA     >TEMP4                            ;GET INTERLEAVE FACTOR
EC75 BDF6E1           (       command.os):00063                 JSR     FORMAT                            ;FORMAT THE DISK
EC78 B6DCD4           (       command.os):00064                 LDA     >TEMP4+1                          ;GET DIRECTORY ALLOC
EC7B B7DCD3           (       command.os):00065                 STA     >TEMP4                            ;LOCAL COPY OF DIR ALLOC
                      (       command.os):00066         ;* SET UP DIRECTORY & LINK TABLE ON DISK
EC7E 8EDE00           (       command.os):00067                 LDX     #WRKSPC                           ;POINT TO IT
EC81                  (       command.os):00068         INI2
EC81 6F80             (       command.os):00069                 CLR     ,X+                               ;CLEAR ONE
EC83 8CE000           (       command.os):00070                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
EC86 25F9             (       command.os):00071                 BLO     INI2                              ;NO, KEEP CLEARING
                      (       command.os):00072         ;* WRITE BASE DIRECTORY SECTOR
EC88 8EDE00           (       command.os):00073                 LDX     #WRKSPC                           ;PT BACK TO IT
EC8B CC0000           (       command.os):00074                 LDD     #DIRSEC                           ;DIRECTORY SECTOR
EC8E BDEB05           (       command.os):00075                 JSR     WDISK                             ;WRITE DIRECTORY (NO FILES)
                      (       command.os):00076         ;* WRITE NON-BASE LINK SECTORS
EC91 BDE705           (       command.os):00077                 JSR     CURSIZ                            ;GET SIZE OF CURRENT DRIVE
EC94 830001           (       command.os):00078                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
EC97 1F89             (       command.os):00079                 TFR     A,B                               ;COPY A&B = D/256(ENTRIES/LINKSEC)
EC99 FDDCD1           (       command.os):00080                 STD     >TEMP3                            ;SAVE FOR LATER
EC9C CC0002           (       command.os):00081                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
EC9F                  (       command.os):00082         INI3
EC9F 7ADCD2           (       command.os):00083                 DEC     >TEMP3+1                          ;REDUCE COUNT
ECA2 2B08             (       command.os):00084                 BMI     INI4                              ;END
ECA4 BDEB05           (       command.os):00085                 JSR     WDISK                             ;WRITE IT
ECA7 C30001           (       command.os):00086                 ADDD    #1                                ;NEXT SECTOR
ECAA 20F3             (       command.os):00087                 BRA     INI3                              ;KEEP GOING
                      (       command.os):00088         ;* WRITE NON-BASE DIRECTORY SECTORS
ECAC                  (       command.os):00089         INI4
ECAC 7ADCD3           (       command.os):00090                 DEC     >TEMP4                            ;BACKUP
ECAF 2B08             (       command.os):00091                 BMI     INI5                              ;THATS ALL
ECB1 BDEB05           (       command.os):00092                 JSR     WDISK                             ;WRITE IT
ECB4 C30001           (       command.os):00093                 ADDD    #1                                ;NEXT ONE
ECB7 20F3             (       command.os):00094                 BRA     INI4                              ;DO EM ALL
                      (       command.os):00095         ;* WRITE BASE LINK SECTOR
ECB9                  (       command.os):00096         INI5
ECB9 CCFFFF           (       command.os):00097                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECBC ED84             (       command.os):00098                 STD     DIRSEC*2,X                        ;SET DIRECTORY FREE
ECBE 3002             (       command.os):00099                 LEAX    LNKSEC*2,X                        ;OFFSET TO IT
ECC0 CC0002           (       command.os):00100                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
ECC3                  (       command.os):00101         INI6
ECC3 7ADCD1           (       command.os):00102                 DEC     >TEMP3                            ;REDUCE COUNT
ECC6 2B07             (       command.os):00103                 BMI     INI7                              ;END
ECC8 ED81             (       command.os):00104                 STD     ,X++                              ;WRITE IT OUT
ECCA C30001           (       command.os):00105                 ADDD    #1                                ;ADVANCE
ECCD 20F4             (       command.os):00106                 BRA     INI6                              ;DO EM ALL
ECCF                  (       command.os):00107         INI7
ECCF 3406             (       command.os):00108                 PSHS    A,B                               ;SAVE SECTOR ID
ECD1 7DDCD4           (       command.os):00109                 TST     >TEMP4+1                          ;ANY ADDITIONAL DIR?
ECD4 2703             (       command.os):00110                 BEQ     INI8                              ;NO
ECD6 FDDE00           (       command.os):00111                 STD     >2*DIRSEC+WRKSPC                  ;SET IT
ECD9                  (       command.os):00112         INI8
ECD9 CCFFFF           (       command.os):00113                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECDC ED81             (       command.os):00114                 STD     ,X++                              ;CLOSE OFF LINKS
ECDE 3506             (       command.os):00115                 PULS    A,B                               ;RESTORE SECTOR ID
ECE0                  (       command.os):00116         INI9
ECE0 7ADCD4           (       command.os):00117                 DEC     >TEMP4+1                          ;REDUCE COUNT
ECE3 2B07             (       command.os):00118                 BMI     INI10                             ;EXIT
ECE5 C30001           (       command.os):00119                 ADDD    #1                                ;NEXT SECTOR
ECE8 ED81             (       command.os):00120                 STD     ,X++                              ;SET LINK FOR DIRECTORY
ECEA 20F4             (       command.os):00121                 BRA     INI9                              ;DO EM ALL
ECEC                  (       command.os):00122         INI10
ECEC CCFFFF           (       command.os):00123                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECEF ED1E             (       command.os):00124                 STD     -2,X                              ;CLOSE OFF DIRECTORY
ECF1 8EDE00           (       command.os):00125                 LDX     #WRKSPC                           ;RESET
ECF4 CC0001           (       command.os):00126                 LDD     #LNKSEC                           ;PT TO IT
ECF7 7EEB05           (       command.os):00127                 JMP     WDISK                             ;WRITE TO DISK
                      (       command.os):00128         ;*
                      (       command.os):00129         ;* READ DISK COMMAND
                      (       command.os):00130         ;*
ECFA                  (       command.os):00131         CREAD
ECFA BDE3F2           (       command.os):00132                 JSR     GETDRV
ECFD B7DCEB           (       command.os):00133                 STA     >SDRIVE
ED00 BDE404           (       command.os):00134                 JSR     GETNUM                            ;GET SECTOR ID
ED03 3410             (       command.os):00135                 PSHS    X                                 ;SAVE
ED05 BDE40F           (       command.os):00136                 JSR     GETHEX                            ;GET MEMORY ADDRESS
ED08 3410             (       command.os):00137                 PSHS    X                                 ;SAVE
ED0A 8E0001           (       command.os):00138                 LDX     #1                                ;DEFAULT TO ONE
ED0D BDE4CF           (       command.os):00139                 JSR     SKIP                              ;ADVANCE
ED10 2703             (       command.os):00140                 BEQ     CRD1                              ;NO MORE
ED12 BDE404           (       command.os):00141                 JSR     GETNUM                            ;GET # SECTORS
ED15                  (       command.os):00142         CRD1
ED15 1F12             (       command.os):00143                 TFR     X,Y                               ;SET UP COUNTER
ED17 3510             (       command.os):00144                 PULS    X                                 ;RESTORE MEM ADDR
ED19 3506             (       command.os):00145                 PULS    A,B                               ;RESTORE SECTOR ID
ED1B                  (       command.os):00146         CRD2
ED1B BDEAD2           (       command.os):00147                 JSR     RDISK                             ;READ IT
ED1E 30890200         (       command.os):00148                 LEAX    512,X                             ;NEXT LOCATION
ED22 C30001           (       command.os):00149                 ADDD    #1                                ;NEXT SECTOR
ED25 313F             (       command.os):00150                 LEAY    -1,Y                              ;REDUCE COUNT
ED27 26F2             (       command.os):00151                 BNE     CRD2
ED29 39               (       command.os):00152                 RTS
                      (       command.os):00153         ;*
                      (       command.os):00154         ;* WRITE DISK COMMAND
                      (       command.os):00155         ;*
ED2A                  (       command.os):00156         CWRITE
ED2A BDE3F2           (       command.os):00157                 JSR     GETDRV
ED2D B7DCEB           (       command.os):00158                 STA     >SDRIVE
ED30 BDE404           (       command.os):00159                 JSR     GETNUM                            ;GET SECTOR ID
ED33 3410             (       command.os):00160                 PSHS    X                                 ;SAVE
ED35 BDE40F           (       command.os):00161                 JSR     GETHEX                            ;GET MEMORY ADDRESS
ED38 3410             (       command.os):00162                 PSHS    X                                 ;SAVE
ED3A 8E0001           (       command.os):00163                 LDX     #1                                ;DEFAULT TO ONE
ED3D BDE4CF           (       command.os):00164                 JSR     SKIP                              ;ADVANCE
ED40 2703             (       command.os):00165                 BEQ     CWR1                              ;NO MORE
ED42 BDE404           (       command.os):00166                 JSR     GETNUM                            ;GET # SECTORS
ED45                  (       command.os):00167         CWR1
ED45 1F12             (       command.os):00168                 TFR     X,Y                               ;SET UP COUNTER
ED47 3510             (       command.os):00169                 PULS    X                                 ;RESTORE MEM ADDR
ED49 3506             (       command.os):00170                 PULS    A,B                               ;RESTORE SECTOR ID
ED4B                  (       command.os):00171         CWR2
ED4B BDEB05           (       command.os):00172                 JSR     WDISK                             ;WRITE IT
ED4E 30890200         (       command.os):00173                 LEAX    512,X                             ;NEXT LOCATION
ED52 C30001           (       command.os):00174                 ADDD    #1                                ;NEXT SECTOR
ED55 313F             (       command.os):00175                 LEAY    -1,Y                              ;REDUCE COUNT
ED57 26F2             (       command.os):00176                 BNE     CWR2
ED59 39               (       command.os):00177                 RTS
                      (       command.os):00178         ;*
                      (       command.os):00179         ;* 'FILES' COMMAND, DISPLAY DISK DIRECTORY
                      (       command.os):00180         ;*
ED5A                  (       command.os):00181         FILES
ED5A 8EDCB8           (       command.os):00182                 LDX     #PREFIX                           ;POINT TO FILENAME
ED5D C613             (       command.os):00183                 LDB     #19                               ;CLEAR 19 CHARS
ED5F                  (       command.os):00184         FIL1
ED5F 6F80             (       command.os):00185                 CLR     ,X+
ED61 5A               (       command.os):00186                 DECB
ED62 26FB             (       command.os):00187                 BNE     FIL1
ED64 862A             (       command.os):00188                 LDA     #'*'                              ;WILDCARD
ED66 B7DCC0           (       command.os):00189                 STA     >PREFIX+8
ED69 B7DCC8           (       command.os):00190                 STA     >PREFIX+16
ED6C 3420             (       command.os):00191                 PSHS    Y                                 ;SAVE CMD PTR
ED6E BDE3A3           (       command.os):00192                 JSR     GETDIR                            ;GET DIRECTORY NAME
ED71 BDE4DC           (       command.os):00193                 JSR     TSTERM                            ;ANY MORE?
ED74 3520             (       command.os):00194                 PULS    Y                                 ;RESTORE Y
ED76 2703             (       command.os):00195                 BEQ     FIL2                              ;NO, DISPAY
ED78 BDE36A           (       command.os):00196                 JSR     GETNAM                            ;GET FULL FILE PATTERN
ED7B                  (       command.os):00197         FIL2
ED7B 7EE6A9           (       command.os):00198                 JMP     DISDIR                            ;OUTPUT IT
                      (       command.os):00199         ;*
                      (       command.os):00200         ;* 'CREATE' COMMAND, CREATE A FILE
                      (       command.os):00201         ;*
ED7E                  (       command.os):00202         CREFIL
ED7E FCE002           (       command.os):00203                 LDD     >MBASE                            ;DEFAULT LOAD ADDRESS
ED81 FDDCD3           (       command.os):00204                 STD     >TEMP4                            ;SAVE IT
ED84 BDE363           (       command.os):00205                 JSR     GETVAL                            ;GET FILENAME
ED87 BDE4CF           (       command.os):00206                 JSR     SKIP                              ;MORE OPERANDS?
ED8A 2706             (       command.os):00207                 BEQ     CREF1                             ;NO, SKIP IT
ED8C BDE40F           (       command.os):00208                 JSR     GETHEX                            ;GET VALUE
ED8F BFDCD3           (       command.os):00209                 STX     >TEMP4                            ;SAVE IT
ED92                  (       command.os):00210         CREF1
ED92 7EE717           (       command.os):00211                 JMP     CREATE                            ;MAKE THE FILE
                      (       command.os):00212         ;*
                      (       command.os):00213         ;* 'DELETE' COMMAND
                      (       command.os):00214         ;*
ED95                  (       command.os):00215         DELFIL
ED95 BDE36A           (       command.os):00216                 JSR     GETNAM                            ;GET FILENAME
ED98                  (       command.os):00217         DELETE
ED98 BDE64C           (       command.os):00218                 JSR     LOCERR                            ;LOOK IT UP
ED9B BDE34F           (       command.os):00219                 JSR     VALID                             ;VALID AS A SINGLE?
ED9E 262C             (       command.os):00220                 BNE     MULDEL                            ;NO.
EDA0 A68817           (       command.os):00221                 LDA     DATTR,X                           ;GET ATTRIBUTES
EDA3 8510             (       command.os):00222                 BITA    #DPERM                            ;CAN WE DELETE
EDA5 1027FAF7         (       command.os):00223                 LBEQ    PROERR                            ;NO, REPORT ERROR
EDA9 6F84             (       command.os):00224                 CLR     ,X                                ;INDICATE THIS ENTRY FREE
EDAB BDE794           (       command.os):00225                 JSR     CHGWRK                            ;MARK IT AS CHANGED
EDAE EC8813           (       command.os):00226                 LDD     DDADR,X                           ;GET DISK ADDRESS
                      (       command.os):00227         ;* RELEASE ALL CAHINED SECTORS
EDB1                  (       command.os):00228         UNCHAIN
EDB1 BDE5D2           (       command.os):00229                 JSR     FNDLNK                            ;LOCATE ITS LINK
EDB4 270F             (       command.os):00230                 BEQ     UNC1                              ;LAST ONE
EDB6 10830000         (       command.os):00231                 CMPD    #0                                ;DID WE GET LOOSE SOMEHOW
EDBA 2709             (       command.os):00232                 BEQ     UNC1                              ;STOP
EDBC 6F84             (       command.os):00233                 CLR     ,X                                ;ZERO THE ENTRY...
EDBE 6F01             (       command.os):00234                 CLR     1,X                               ;MAKEING IT FREE
EDC0 BDE794           (       command.os):00235                 JSR     CHGWRK                            ;INDICATE WE CHANGED
EDC3 20EC             (       command.os):00236                 BRA     UNCHAIN                           ;CONTINUE
EDC5                  (       command.os):00237         UNC1
EDC5 6F84             (       command.os):00238                 CLR     ,X
EDC7 6F01             (       command.os):00239                 CLR     1,X
EDC9 7EE794           (       command.os):00240                 JMP     CHGWRK                            ;END OF DELETE
                      (       command.os):00241         ;* FILENAME CONTAINED WILDCARDS, PROMPT FOR EACH FILE
EDCC                  (       command.os):00242         MULDEL
EDCC CC0000           (       command.os):00243                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
EDCF                  (       command.os):00244         MULD1
EDCF BDE5EF           (       command.os):00245                 JSR     RDWRK                             ;READ WORK SECTOR
EDD2                  (       command.os):00246         MULD2
EDD2 BDE316           (       command.os):00247                 JSR     COMNAM                            ;IS THIS ONE?
EDD5 2654             (       command.os):00248                 BNE     MULD3                             ;NO
EDD7 BDE6DD           (       command.os):00249                 JSR     SHONAM                            ;DISPLAY
EDDA A68817           (       command.os):00250                 LDA     DATTR,X                           ;GET ATTRIBUTES
EDDD 8510             (       command.os):00251                 BITA    #DPERM                            ;CAN WE DELETE
EDDF 2610             (       command.os):00252                 BNE     MULD5                             ;YES WE CAN
EDE1 BDE571           (       command.os):00253                 JSR     WRMSG                             ;OUTPUT MESSAGE
EDE4 2050726F74656374 (       command.os):00254                 FCC     ' Protected'
     6564
EDEE 00               (       command.os):00255                 FCB     $00
EDEF 203A             (       command.os):00256                 BRA     MULD3
EDF1                  (       command.os):00257         MULD5
EDF1 BDE541           (       command.os):00258                 JSR     WRLIN                             ;OUTPUT MESSAGE
EDF4 2028592F4E2F5129 (       command.os):00259                 FCC     ' (Y/N/Q)?'
     3F
EDFD 00               (       command.os):00260                 FCB     $00
EDFE BDE5CD           (       command.os):00261                 JSR     GETCHR                            ;GET CHAR
EE01 BDE58D           (       command.os):00262                 JSR     PUTCHR                            ;ECHO
EE04 BDE57B           (       command.os):00263                 JSR     LFCR                              ;NEW LINE
EE07 84DF             (       command.os):00264                 ANDA    #$DF                              ;CONVERT TO UPPER
EE09 8151             (       command.os):00265                 CMPA    #'Q'                              ;QUIT?
EE0B 272E             (       command.os):00266                 BEQ     MULD4
EE0D 8159             (       command.os):00267                 CMPA    #'Y'                              ;DO WE KILL?
EE0F 261A             (       command.os):00268                 BNE     MULD3                             ;NO
EE11 6F84             (       command.os):00269                 CLR     ,X                                ;ZAP IT
EE13 BDE794           (       command.os):00270                 JSR     CHGWRK                            ;INDICATE CHANGED
EE16 3414             (       command.os):00271                 PSHS    B,X                               ;SAVE REGS
EE18 FCDCDF           (       command.os):00272                 LDD     >WRKSEC                           ;GET WORK SECTOR
EE1B FDDCCD           (       command.os):00273                 STD     >TEMP1                            ;SAVE
EE1E EC8813           (       command.os):00274                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE21 8D8E             (       command.os):00275                 BSR     UNCHAIN                           ;RELEASE
EE23 FCDCCD           (       command.os):00276                 LDD     >TEMP1                            ;GET SECTOR BACK
EE26 BDE5EF           (       command.os):00277                 JSR     RDWRK                             ;RE-READ
EE29 3514             (       command.os):00278                 PULS    B,X
EE2B                  (       command.os):00279         MULD3
EE2B 308820           (       command.os):00280                 LEAX    32,X                              ;ADVANCE TO NEXT
EE2E 8CE000           (       command.os):00281                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
EE31 259F             (       command.os):00282                 BLO     MULD2                             ;NO
EE33 FCDCDF           (       command.os):00283                 LDD     >WRKSEC                           ;GET SECTOR ID
EE36 BDE5D2           (       command.os):00284                 JSR     FNDLNK                            ;LOOK FOR LINK
EE39 2694             (       command.os):00285                 BNE     MULD1
EE3B                  (       command.os):00286         MULD4
EE3B 39               (       command.os):00287                 RTS
                      (       command.os):00288         ;*
                      (       command.os):00289         ;* BINARY LOAD A FILE AT MEMORY(X)
                      (       command.os):00290         ;*
EE3C                  (       command.os):00291         BLOAD
EE3C 3410             (       command.os):00292                 PSHS    X                                 ;SAVE ADDRESS
EE3E BDE896           (       command.os):00293                 JSR     LOCRED                            ;LOOKUP FILE
EE41 EC8813           (       command.os):00294                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE44 3510             (       command.os):00295                 PULS    X                                 ;RESTORE MEMORY ADDRESS
EE46 2018             (       command.os):00296                 BRA     LCHAIN                            ;LOAD IN THE CHAIN
                      (       command.os):00297         ;*
                      (       command.os):00298         ;* 'LOAD' COMMAND, LOADS A FILE INTO MEMORY
                      (       command.os):00299         ;*
EE48                  (       command.os):00300         LODFIL
EE48 BDE363           (       command.os):00301                 JSR     GETVAL                            ;GET FILENAME
EE4B BDE896           (       command.os):00302                 JSR     LOCRED                            ;INSURE IT EXISTS
EE4E EC8813           (       command.os):00303                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE51 3406             (       command.os):00304                 PSHS    A,B                               ;SAVE
EE53 AE8815           (       command.os):00305                 LDX     DRADR,X                           ;GET RUN ADDRESS
EE56 BDE4CF           (       command.os):00306                 JSR     SKIP                              ;ANY MORE OPERANDS
EE59 2703             (       command.os):00307                 BEQ     LODF1                             ;NO, CONTINUE
EE5B BDE40F           (       command.os):00308                 JSR     GETHEX                            ;GET ADDRESS
EE5E                  (       command.os):00309         LODF1
EE5E 3506             (       command.os):00310                 PULS    A,B                               ;RESTORE DISK ADDR
                      (       command.os):00311         ;* LOAD A CHAIN OF SECTORS
EE60                  (       command.os):00312         LCHAIN
EE60 BDEAD2           (       command.os):00313                 JSR     RDISK                             ;READ DISK
EE63 30890200         (       command.os):00314                 LEAX    512,X                             ;MOVE TO NEXT ADDRESS
EE67 3410             (       command.os):00315                 PSHS    X                                 ;SAVE PTR
EE69 BDE5D2           (       command.os):00316                 JSR     FNDLNK                            ;LOOKUP LINK
EE6C 3510             (       command.os):00317                 PULS    X                                 ;RESTORE
EE6E 26F0             (       command.os):00318                 BNE     LCHAIN                            ;KEEP GOING
EE70                  (       command.os):00319         OKRET
EE70 39               (       command.os):00320                 RTS
                      (       command.os):00321         ;*
                      (       command.os):00322         ;* BINARY SAVE OF A FILE FROM MEMORY(X) FOR # SECTORS(D)
                      (       command.os):00323         ;*
EE71                  (       command.os):00324         BSAVE
EE71 BFDCD3           (       command.os):00325                 STX     >TEMP4                            ;SET LOAD ADDRESS
EE74 FDDCD1           (       command.os):00326                 STD     >TEMP3                            ;SAVE # SECTORS
EE77 200F             (       command.os):00327                 BRA     SAVF1                             ;PERFORM SAVE
                      (       command.os):00328         ;*
                      (       command.os):00329         ;* 'SAVE' COMMAND, SAVES A FILE AS A BLOCK
                      (       command.os):00330         ;*
EE79                  (       command.os):00331         SAVFIL
EE79 BDE363           (       command.os):00332                 JSR     GETVAL                            ;GET FILENAME
EE7C BDE40F           (       command.os):00333                 JSR     GETHEX                            ;GET START ADDRESS
EE7F BFDCD3           (       command.os):00334                 STX     >TEMP4                            ;SET UP DEFAULT LOAD-ADR
EE82 BDE404           (       command.os):00335                 JSR     GETNUM                            ;GET # SECTORS
EE85 BFDCD1           (       command.os):00336                 STX     >TEMP3                            ;SAVE LENGTH
EE88                  (       command.os):00337         SAVF1
EE88 7DDCD2           (       command.os):00338                 TST     >TEMP3+1                          ;TEST FOR INVALID LENMGTH
EE8B 1027F41C         (       command.os):00339                 LBEQ    BADOPR                            ;INVALID
EE8F BDE8C4           (       command.os):00340                 JSR     LOCWRI                            ;OPEN FILE, WE WILL WRITE IT
EE92 EC8813           (       command.os):00341                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE95                  (       command.os):00342         SAVF2
EE95 FDDCCF           (       command.os):00343                 STD     >TEMP2                            ;SAVE SECTOR ID
EE98 BEDCD3           (       command.os):00344                 LDX     >TEMP4                            ;GET LOAD ADDRESS
EE9B BDEB05           (       command.os):00345                 JSR     WDISK                             ;WRITE THE SECTOR
EE9E 30890200         (       command.os):00346                 LEAX    512,X                             ;ADVANCE 1 BLOCK
EEA2 BFDCD3           (       command.os):00347                 STX     >TEMP4                            ;NEW LOAD ADDRESS
EEA5 FCDCCF           (       command.os):00348                 LDD     >TEMP2                            ;GET OPEN SECTOR
EEA8 7ADCD2           (       command.os):00349                 DEC     >TEMP3+1                          ;REDUCE NUMBER
EEAB 2719             (       command.os):00350                 BEQ     SAVF3                             ;QUIT IF DONE
EEAD BDE5D2           (       command.os):00351                 JSR     FNDLNK                            ;LOOK UP ITS LINK
EEB0 26E3             (       command.os):00352                 BNE     SAVF2                             ;THERE IS SPACE, ITS OK
EEB2 BDE79D           (       command.os):00353                 JSR     FRESEC                            ;GET A FREE SECTOR
EEB5 3406             (       command.os):00354                 PSHS    A,B                               ;SAVE ID
EEB7 FCDCCF           (       command.os):00355                 LDD     >TEMP2                            ;GET OPEN SECTOR
EEBA BDE5D2           (       command.os):00356                 JSR     FNDLNK                            ;GET LINK BACK
EEBD 3506             (       command.os):00357                 PULS    A,B                               ;GET NEW SECT BACK
EEBF ED84             (       command.os):00358                 STD     ,X                                ;SET LINK CHAIN
EEC1 BDE794           (       command.os):00359                 JSR     CHGWRK                            ;INDICATE CHANGED
EEC4 20CF             (       command.os):00360                 BRA     SAVF2                             ;WRITE NEXT SECTOR
EEC6                  (       command.os):00361         SAVF3
EEC6 BDE5D2           (       command.os):00362                 JSR     FNDLNK                            ;LOK UP LINK
EEC9 27A5             (       command.os):00363                 BEQ     OKRET                             ;NO FURTHER LINKS
EECB 3406             (       command.os):00364                 PSHS    A,B                               ;SAVE REGS
EECD CCFFFF           (       command.os):00365                 LDD     #$FFFF                            ;GET END OF FILE MARKER
EED0 ED84             (       command.os):00366                 STD     ,X                                ;MARK SECTOR
EED2 B7DCDD           (       command.os):00367                 STA     >WRKCHG                           ;INDICATE CHANGED
EED5 3506             (       command.os):00368                 PULS    A,B                               ;GET CHAINED SECTOR BACK
EED7 7EEDB1           (       command.os):00369                 JMP     UNCHAIN                           ;SET IT FREE
                      (       command.os):00370         ;*
                      (       command.os):00371         ;* 'RETURN' COMMAND
                      (       command.os):00372         ;*
EEDA                  (       command.os):00373         RETURN
EEDA FCDCE9           (       command.os):00374                 LDD     >OLDSTK                           ;GET OLD STACK
EEDD 2704             (       command.os):00375                 BEQ     NOSUSP                            ;NONE, SKIP IT
EEDF 1F04             (       command.os):00376                 TFR     D,S                               ;SET UP STACK
EEE1 4F               (       command.os):00377                 CLRA                                      ;ZERO IT
EEE2 39               (       command.os):00378                 RTS
EEE3                  (       command.os):00379         NOSUSP
EEE3 BDE571           (       command.os):00380                 JSR     WRMSG                             ;OUTPUT MESSAGE
EEE6 4E6F207375737065 (       command.os):00381                 FCC     'No suspended program'
     6E6465642070726F
     6772616D
EEFA 00               (       command.os):00382                 FCB     $00
EEFB 10FEDCDB         (       command.os):00383                 LDS     >SAVSTK                           ;RESTORE STACK
EEFF                  (       command.os):00384         DNLRTS
EEFF 4F               (       command.os):00385                 CLRA                                      ;ZERO RC
EF00 39               (       command.os):00386                 RTS
                      (       command.os):00387         ;*
                      (       command.os):00388         ;* 'DOWNLOAD' COMMAND
                      (       command.os):00389         ;*
EF01                  (       command.os):00390         DNLD
EF01 BDF0F0           (       command.os):00391                 JSR     GETDEV                            ;GET DEVICE ID
EF04 F7DCCF           (       command.os):00392                 STB     >TEMP2                            ;SAVE IT
EF07 7FDCD2           (       command.os):00393                 CLR     >TEMP3+1                          ;ZERO COUNT
EF0A CCFFFF           (       command.os):00394                 LDD     #$FFFF                            ;INIT LOW ADDR
EF0D FDDCD3           (       command.os):00395                 STD     >TEMP4                            ;SAVE LOW ADDRESS
EF10 4F               (       command.os):00396                 CLRA
EF11 5F               (       command.os):00397                 CLRB
EF12 3406             (       command.os):00398                 PSHS    A,B                               ;SAVE HIGH ADDR
EF14                  (       command.os):00399         DNL0
EF14 860D             (       command.os):00400                 LDA     #$0D
EF16 BDE58D           (       command.os):00401                 JSR     PUTCHR                            ;OUTPUT
EF19 B6DCD2           (       command.os):00402                 LDA     >TEMP3+1
EF1C BDE54D           (       command.os):00403                 JSR     WRHEX                             ;OUTPUT IN HEX
EF1F 7CDCD2           (       command.os):00404                 INC     >TEMP3+1
EF22 8D28             (       command.os):00405                 BSR     DNL1                              ;DOWNLOAD RECORD
EF24 2608             (       command.os):00406                 BNE     DNLEND                            ;END, QUIT
EF26 ACE4             (       command.os):00407                 CMPX    ,S                                ;HIGEST YET?
EF28 23EA             (       command.os):00408                 BLS     DNL0                              ;NO, SKIP
EF2A AFE4             (       command.os):00409                 STX     ,S                                ;SAVE HIGH
EF2C 20E6             (       command.os):00410                 BRA     DNL0                              ;OK, KEEP GOING
EF2E                  (       command.os):00411         DNLEND
EF2E BDE57B           (       command.os):00412                 JSR     LFCR                              ;NEW LINE
EF31 3506             (       command.os):00413                 PULS    A,B                               ;GET HIGEST
EF33 B3DCD3           (       command.os):00414                 SUBD    >TEMP4                            ;CALCULATE SIZE
EF36 830001           (       command.os):00415                 SUBD    #1                                ;CONVERT
EF39 44               (       command.os):00416                 LSRA                                      ;/512, CONVERT TO # SECTORS
EF3A 4C               (       command.os):00417                 INCA    CONVERT
EF3B B7DCD2           (       command.os):00418                 STA     >TEMP3+1                          ;SAVE LENGTH
EF3E BDE4CF           (       command.os):00419                 JSR     SKIP                              ;OPERAND?
EF41 27BC             (       command.os):00420                 BEQ     DNLRTS                            ;NO FILE TO SAVE INTO
EF43 BDE363           (       command.os):00421                 JSR     GETVAL                            ;GET FILENAME
EF46 7EEE88           (       command.os):00422                 JMP     SAVF1                             ;PERFORM SAVE
                      (       command.os):00423         ;* DOWNLOAD A RECORD FROM A DEVICE
EF49                  (       command.os):00424         DNLDEV
EF49 B7DCCF           (       command.os):00425                 STA     >TEMP2                            ;SAVE DEVICE ID
EF4C                  (       command.os):00426         DNL1
EF4C 8D5B             (       command.os):00427                 BSR     RDDLC                             ;GET CHAR
EF4E 8153             (       command.os):00428                 CMPA    #'S'                              ;START OF RECORD?
EF50 26FA             (       command.os):00429                 BNE     DNL1                              ;NO
EF52 8D55             (       command.os):00430                 BSR     RDDLC                             ;GET NEXT CHAR
EF54 8130             (       command.os):00431                 CMPA    #'0'                              ;HEADER?
EF56 27F4             (       command.os):00432                 BEQ     DNL1                              ;IGNORE
EF58 8139             (       command.os):00433                 CMPA    #'9'                              ;END OF FILE
EF5A 2603             (       command.os):00434                 BNE     DNL2                              ;YES, END OF FILE
EF5C 8606             (       command.os):00435                 LDA     #RCEOF
EF5E 39               (       command.os):00436                 RTS
EF5F                  (       command.os):00437         DNL2
EF5F 8131             (       command.os):00438                 CMPA    #'1'                              ;DATA RECORD
EF61 263E             (       command.os):00439                 BNE     LODERR                            ;INVALID
EF63 8D4A             (       command.os):00440                 BSR     GETBYT                            ;GET LENGTH
EF65 B7DCD0           (       command.os):00441                 STA     >TEMP2+1                          ;START CKSUM
EF68 8003             (       command.os):00442                 SUBA    #3                                ;CONVERT
EF6A B7DCD1           (       command.os):00443                 STA     >TEMP3                            ;SAVE LENGTH
EF6D 8D40             (       command.os):00444                 BSR     GETBYT                            ;GET HIGH ADDR
EF6F 3402             (       command.os):00445                 PSHS    A                                 ;SAVE
EF71 8D3C             (       command.os):00446                 BSR     GETBYT                            ;GET LOW ADDR
EF73 1F89             (       command.os):00447                 TFR     A,B                               ;SAVE
EF75 ABE4             (       command.os):00448                 ADDA    ,S                                ;ADD HIGH
EF77 BBDCD0           (       command.os):00449                 ADDA    >TEMP2+1                          ;& CKSUM
EF7A B7DCD0           (       command.os):00450                 STA     >TEMP2+1                          ;RESAVE
EF7D 3502             (       command.os):00451                 PULS    A                                 ;RESTORE
EF7F 1F01             (       command.os):00452                 TFR     D,X                               ;SET UP PTR
EF81 10B3DCD3         (       command.os):00453                 CMPD    >TEMP4                            ;HIGHER?
EF85 2403             (       command.os):00454                 BHS     DNL3                              ;YES
EF87 FDDCD3           (       command.os):00455                 STD     >TEMP4                            ;NEW VALUE
EF8A                  (       command.os):00456         DNL3
EF8A 8D23             (       command.os):00457                 BSR     GETBYT                            ;GET BYTE
EF8C A780             (       command.os):00458                 STA     ,X+                               ;SAVE IT
EF8E BBDCD0           (       command.os):00459                 ADDA    >TEMP2+1                          ;INCL CKSUM
EF91 B7DCD0           (       command.os):00460                 STA     >TEMP2+1                          ;RESAVE CKSUM
EF94 7ADCD1           (       command.os):00461                 DEC     >TEMP3                            ;REDUCE LENGTH
EF97 26F1             (       command.os):00462                 BNE     DNL3                              ;GET FULL REC.
EF99 8D14             (       command.os):00463                 BSR     GETBYT                            ;GET CKSUM
EF9B BBDCD0           (       command.os):00464                 ADDA    >TEMP2+1                          ;+ CALC CKSUM
EF9E 4C               (       command.os):00465                 INCA    TEST FOR OK
EF9F 271A             (       command.os):00466                 BEQ     DNL4                              ;YES, GET NEXT REC
EFA1                  (       command.os):00467         LODERR
EFA1 8EF7DB           (       command.os):00468                 LDX     #DNLMSG                           ;PT TO ERROR MESSAGE
EFA4 860B             (       command.os):00469                 LDA     #RCDNL                            ;RETURN CODE
EFA6 7EE2B0           (       command.os):00470                 JMP     ERRMRC                            ;RETURN
EFA9                  (       command.os):00471         RDDLC
EFA9 F6DCCF           (       command.os):00472                 LDB     >TEMP2                            ;GET DEV
EFAC 7EE5AF           (       command.os):00473                 JMP     RDDEV                             ;GET CHAR
EFAF                  (       command.os):00474         GETBYT
EFAF 8D0B             (       command.os):00475                 BSR     GETNIB                            ;GET IT
EFB1 48               (       command.os):00476                 LSLA
EFB2 48               (       command.os):00477                 LSLA
EFB3 48               (       command.os):00478                 LSLA
EFB4 48               (       command.os):00479                 LSLA
EFB5 3402             (       command.os):00480                 PSHS    A
EFB7 8D03             (       command.os):00481                 BSR     GETNIB
EFB9 AAE0             (       command.os):00482                 ORA     ,S+
EFBB                  (       command.os):00483         DNL4
EFBB 39               (       command.os):00484                 RTS
EFBC                  (       command.os):00485         GETNIB
EFBC 8DEB             (       command.os):00486                 BSR     RDDLC                             ;GET CHAR
EFBE 8030             (       command.os):00487                 SUBA    #'0'                              ;CONVERT
EFC0 8109             (       command.os):00488                 CMPA    #9                                ;OK?
EFC2 230A             (       command.os):00489                 BLS     GETN1                             ;YES
EFC4 8111             (       command.os):00490                 CMPA    #$11                              ;<A
EFC6 25D9             (       command.os):00491                 BLO     LODERR                            ;INVALID
EFC8 8007             (       command.os):00492                 SUBA    #7                                ;CONVERT
EFCA 8110             (       command.os):00493                 CMPA    #$10                              ;IN RANGE
EFCC 24D3             (       command.os):00494                 BHS     LODERR                            ;INVALID
EFCE                  (       command.os):00495         GETN1
EFCE 39               (       command.os):00496                 RTS
                      (       command.os):00497         ;*
                      (       command.os):00498         ;* 'CONNECT' COMMAND
                      (       command.os):00499         ;*
EFCF                  (       command.os):00500         CNCT
EFCF BDF0F0           (       command.os):00501                 JSR     GETDEV                            ;GET DEVICE
EFD2 F7DCCF           (       command.os):00502                 STB     >TEMP2                            ;SAVE
EFD5                  (       command.os):00503         CNC1
EFD5 BDE5C6           (       command.os):00504                 JSR     TSTCHR                            ;TEST FOR CHAR FROM CONSOLE
EFD8 260C             (       command.os):00505                 BNE     CNC2                              ;NO, NONE
EFDA 811B             (       command.os):00506                 CMPA    #$1B                              ;ESCAPE?
EFDC 1027F59B         (       command.os):00507                 LBEQ    LFCR                              ;IF SO, EXIT
EFE0 F6DCCF           (       command.os):00508                 LDB     >TEMP2                            ;GET DEVICE BACK
EFE3 BDE594           (       command.os):00509                 JSR     WRDEV                             ;OUTPUT TO DEVICE
EFE6                  (       command.os):00510         CNC2
EFE6 F6DCCF           (       command.os):00511                 LDB     >TEMP2                            ;GET DEVICE ID
EFE9 BDE5B4           (       command.os):00512                 JSR     TSTDEV                            ;TEST FOR CHARACTER
EFEC 26E7             (       command.os):00513                 BNE     CNC1                              ;NO CHAR RECEIVED
EFEE BDE58D           (       command.os):00514                 JSR     PUTCHR                            ;WRITE TO CONSOLE
EFF1 20E2             (       command.os):00515                 BRA     CNC1                              ;CONTINUE
                      (       command.os):00516         ;*
                      (       command.os):00517         ;* 'SET' COMMAND
                      (       command.os):00518         ;*
EFF3                  (       command.os):00519         SET
EFF3 8EF386           (       command.os):00520                 LDX     #SETTAB                           ;POINT TO TABLE
EFF6 BDE4F8           (       command.os):00521                 JSR     TLOOK                             ;LOOK IT UP
EFF9 BDE4CF           (       command.os):00522                 JSR     SKIP                              ;ADVANCE
EFFC 2777             (       command.os):00523                 BEQ     BADOP3                            ;INVALID
EFFE 8EF3C9           (       command.os):00524                 LDX     #SETADR
F001 58               (       command.os):00525                 ASLB
F002 6E95             (       command.os):00526                 JMP     [B,X]
                      (       command.os):00527         ;* SET DEFAULT
F004                  (       command.os):00528         SET0
F004 BDE3A3           (       command.os):00529                 JSR     GETDIR                            ;GET DEFAULT DIR
F007 BDE4CF           (       command.os):00530                 JSR     SKIP                              ;ANY MORE INFO
F00A 2669             (       command.os):00531                 BNE     BADOP3
F00C                  (       command.os):00532         SETDEF
F00C 3436             (       command.os):00533                 PSHS    A,B,X,Y                           ;SAVE REGS
F00E 8EDCA5           (       command.os):00534                 LDX     #DEFDRV                           ;POINT TO DEFAULT
F011 2010             (       command.os):00535                 BRA     MOVDIR                            ;MOVE IT
                      (       command.os):00536         ;* SET COMMAND
F013                  (       command.os):00537         SET1
F013 8EDCAE           (       command.os):00538                 LDX     #SYSDRV                           ;DEFAULT FROM SYSTEM
F016 BDE3A6           (       command.os):00539                 JSR     GETDIR1                           ;GET DIR
F019 BDE4CF           (       command.os):00540                 JSR     SKIP
F01C 2657             (       command.os):00541                 BNE     BADOP3
F01E                  (       command.os):00542         SETCMD
F01E 3436             (       command.os):00543                 PSHS    A,B,X,Y                           ;SAVE REGS
F020 8EDCAE           (       command.os):00544                 LDX     #SYSDRV                           ;POINT TO IT
F023                  (       command.os):00545         MOVDIR
F023 108EDCB7         (       command.os):00546                 LDY     #FDRIVE                           ;POINT TO FILENAME
F027 C609             (       command.os):00547                 LDB     #9                                ;MOVE 9 CHARS
F029                  (       command.os):00548         MOVD1
F029 A6A0             (       command.os):00549                 LDA     ,Y+                               ;GET 1
F02B A780             (       command.os):00550                 STA     ,X+                               ;SAVE IT
F02D 5A               (       command.os):00551                 DECB
F02E 26F9             (       command.os):00552                 BNE     MOVD1                             ;CONTINUE
F030 35B6             (       command.os):00553                 PULS    A,B,X,Y,PC
                      (       command.os):00554         ;* SET FILE
F032                  (       command.os):00555         SET2
F032 BDE363           (       command.os):00556                 JSR     GETVAL                            ;GET NAME
F035 BDE64C           (       command.os):00557                 JSR     LOCERR                            ;LOOK IT UP
F038                  (       command.os):00558         SETF0
F038 3410             (       command.os):00559                 PSHS    X                                 ;SAVE PTR
F03A 8EF3F5           (       command.os):00560                 LDX     #SFTAB                            ;PT TO TABLE
F03D BDF0B7           (       command.os):00561                 JSR     TLOOKE                            ;LOOK IT UP
F040 5D               (       command.os):00562                 TSTB                                      ;IS IT SET LOADADDRESS
F041 260C             (       command.os):00563                 BNE     SETF1                             ;NO, TRY SOMETHING ELSE
F043 BDE40F           (       command.os):00564                 JSR     GETHEX                            ;GET ADDRESS
F046 1F10             (       command.os):00565                 TFR     X,D                               ;COPY
F048 3510             (       command.os):00566                 PULS    X                                 ;RESTORE
F04A ED8815           (       command.os):00567                 STD     DRADR,X                           ;SAVE
F04D 200A             (       command.os):00568                 BRA     SETF2                             ;TEST FOR END
F04F                  (       command.os):00569         SETF1
F04F 5A               (       command.os):00570                 DECB
F050 2623             (       command.os):00571                 BNE     BADOP3
F052 8D0D             (       command.os):00572                 BSR     GETATR                            ;GET ATTRIBUTES
F054 3510             (       command.os):00573                 PULS    X                                 ;RESTORE
F056 A78817           (       command.os):00574                 STA     DATTR,X                           ;SAVE
F059                  (       command.os):00575         SETF2
F059 BDE4CF           (       command.os):00576                 JSR     SKIP                              ;ADVANCE
F05C 26DA             (       command.os):00577                 BNE     SETF0
F05E 7EE794           (       command.os):00578                 JMP     CHGWRK                            ;INDICATE WE CHANGED
                      (       command.os):00579         ;* GET FILE ATTRIBUTES FROM COMMAND LINE
F061                  (       command.os):00580         GETATR
F061 4F               (       command.os):00581                 CLRA    CLEAR IT
F062 3416             (       command.os):00582                 PSHS    A,B,X                             ;SAVE ON STACK
F064                  (       command.os):00583         GETA1
F064 8EF080           (       command.os):00584                 LDX     #ATRTAB                           ;POINT TO TABLE
F067 BDE4DC           (       command.os):00585                 JSR     TSTERM                            ;GET CHARACTER
F06A 2712             (       command.os):00586                 BEQ     GETA4                             ;END
F06C C680             (       command.os):00587                 LDB     #%10000000                        ;START WITH FIRST ATTR
F06E                  (       command.os):00588         GETA2
F06E A180             (       command.os):00589                 CMPA    ,X+                               ;IS THIS IT?
F070 2706             (       command.os):00590                 BEQ     GETA3                             ;YES
F072 54               (       command.os):00591                 LSRB                                      ;SHIFT IT
F073 26F9             (       command.os):00592                 BNE     GETA2                             ;MORE
F075                  (       command.os):00593         BADOP3
F075 7EE2AB           (       command.os):00594                 JMP     BADOPR                            ;REPORT ERROR
F078                  (       command.os):00595         GETA3
F078 EAE4             (       command.os):00596                 ORB     ,S                                ;INCLUDE IN ATTRIBUTES
F07A E7E4             (       command.os):00597                 STB     ,S                                ;RESAVE
F07C 20E6             (       command.os):00598                 BRA     GETA1                             ;AND CONTINUE
F07E                  (       command.os):00599         GETA4
F07E 3596             (       command.os):00600                 PULS    A,B,X,PC                          ;RESTORE REGS
F080                  (       command.os):00601         ATRTAB
F080 525745443F3F3F3F (       command.os):00602                 FCC     'RWED????'                        ;AVAILABLE ATTRIBUTE BITS
F088 00               (       command.os):00603                 FCB     $00
                      (       command.os):00604         ;*
                      (       command.os):00605         ;* SET DRIVE COMMAND
                      (       command.os):00606         ;*
F089                  (       command.os):00607         SET3
F089 BDE616           (       command.os):00608                 JSR     PURGE                             ;INSURE ALL WRITTEN
F08C BDE3F2           (       command.os):00609                 JSR     GETDRV                            ;GET DRIVE ID
F08F B7DCEB           (       command.os):00610                 STA     >SDRIVE                           ;SELECT IT
F092 BDEAF9           (       command.os):00611                 JSR     GETCTL                            ;GET CTRL BLOCK
F095 3420             (       command.os):00612                 PSHS    Y                                 ;SAVE CMD POINTER
F097 BDF6E5           (       command.os):00613                 JSR     HOME                              ;HOME HEAD
F09A 3520             (       command.os):00614                 PULS    Y                                 ;RESTORE CMD POINTER
F09C                  (       command.os):00615         CHGDRV
F09C 8EF42D           (       command.os):00616                 LDX     #SDTAB                            ;POINT TO TABLE
F09F BDF0B7           (       command.os):00617                 JSR     TLOOKE                            ;LOOK FOR IT
F0A2 3404             (       command.os):00618                 PSHS    B                                 ;SAVE
F0A4 BDE404           (       command.os):00619                 JSR     GETNUM                            ;GET IT
F0A7 1F10             (       command.os):00620                 TFR     X,D                               ;GET NUMBER
F0A9 3502             (       command.os):00621                 PULS    A                                 ;RESTORE
F0AB 8103             (       command.os):00622                 CMPA    #3                                ;VALID?
F0AD 22C6             (       command.os):00623                 BHI     BADOP3                            ;ERROR
F0AF E7C6             (       command.os):00624                 STB     A,U                               ;SET IT
F0B1 BDE4CF           (       command.os):00625                 JSR     SKIP                              ;AT END?
F0B4 26E6             (       command.os):00626                 BNE     CHGDRV                            ;NO
F0B6 39               (       command.os):00627                 RTS
                      (       command.os):00628         ;*
                      (       command.os):00629         ;* LOOKUP TABLE ENTRY & INSURE IT ENDS WITH '='
                      (       command.os):00630         ;*
F0B7                  (       command.os):00631         TLOOKE
F0B7 BDE4F8           (       command.os):00632                 JSR     TLOOK                             ;LOOKUP ENTRY
F0BA A6A0             (       command.os):00633                 LDA     ,Y+                               ;GET NEXT CHAR
F0BC 813D             (       command.os):00634                 CMPA    #'='                              ;IS IT EQUALS?
F0BE 26B5             (       command.os):00635                 BNE     BADOP3                            ;REPORT ERROR
F0C0 39               (       command.os):00636                 RTS
                      (       command.os):00637         ;*
                      (       command.os):00638         ;* SET MEMORY
                      (       command.os):00639         ;*
F0C1                  (       command.os):00640         SET4
F0C1 BDE40F           (       command.os):00641                 JSR     GETHEX                            ;GET ADDRESS
F0C4                  (       command.os):00642         ST1
F0C4 3410             (       command.os):00643                 PSHS    X                                 ;SAVE ADDR
F0C6 BDE40F           (       command.os):00644                 JSR     GETHEX                            ;GET DATA
F0C9 1F10             (       command.os):00645                 TFR     X,D                               ;SAVE IT
F0CB 3510             (       command.os):00646                 PULS    X                                 ;RECOVER
F0CD E780             (       command.os):00647                 STB     ,X+                               ;SAVE IT
F0CF BDE4CF           (       command.os):00648                 JSR     SKIP                              ;END OF LINE?
F0D2 26F0             (       command.os):00649                 BNE     ST1                               ;CONTINUE
F0D4 39               (       command.os):00650                 RTS
                      (       command.os):00651         ;* SET CONSOLE
F0D5                  (       command.os):00652         SET5
F0D5 8EF45C           (       command.os):00653                 LDX     #IOTAB                            ;POINT TO TABLE
F0D8 BDF0B7           (       command.os):00654                 JSR     TLOOKE                            ;LOOK IT UP
F0DB C102             (       command.os):00655                 CMPB    #2                                ;OVER?
F0DD 2496             (       command.os):00656                 BHS     BADOP3                            ;INVALID
F0DF 3404             (       command.os):00657                 PSHS    B                                 ;SAVE ID
F0E1 8D0D             (       command.os):00658                 BSR     GETDEV                            ;GET DEVICE NUMBER
F0E3 3502             (       command.os):00659                 PULS    A                                 ;GET ID BACK
F0E5 8EDC6C           (       command.os):00660                 LDX     #CONIN
F0E8 E786             (       command.os):00661                 STB     A,X                               ;SET IT
F0EA BDE4CF           (       command.os):00662                 JSR     SKIP
F0ED 26E6             (       command.os):00663                 BNE     SET5
F0EF 39               (       command.os):00664                 RTS
                      (       command.os):00665         ;* GET A DEVICE ID FROM THE CONSOLE
F0F0                  (       command.os):00666         GETDEV
F0F0 BDE404           (       command.os):00667                 JSR     GETNUM                            ;GET DECIMAL NUMBER
F0F3 8C0008           (       command.os):00668                 CMPX    #NDEV                             ;IS IT OVER THE LIMIT
F0F6 1024F4AD         (       command.os):00669                 LBHS    BADDEV                            ;YES, REPORT ERROR
F0FA 1F10             (       command.os):00670                 TFR     X,D                               ;'B' = DEVICE ID
F0FC 39               (       command.os):00671                 RTS
                      (       command.os):00672         ;* SET FLAG ON/OFF
F0FD                  (       command.os):00673         STFLAG
F0FD 54               (       command.os):00674                 LSRB                                      ;CONVERT BACK
F0FE 3404             (       command.os):00675                 PSHS    B                                 ;SAVE
F100 8EF454           (       command.os):00676                 LDX     #OOTAB                            ;PT TO IT
F103 BDE4F8           (       command.os):00677                 JSR     TLOOK                             ;LOOKUP IN TABLE
F106 3502             (       command.os):00678                 PULS    A                                 ;RESTORE VECT NUM
F108 5D               (       command.os):00679                 TSTB                                      ;IS IT OFF?
F109 270B             (       command.os):00680                 BEQ     CLRFLG                            ;YES, CLEAR IT
F10B 5A               (       command.os):00681                 DECB                                      ;IS IT ON
F10C 1026F19B         (       command.os):00682                 LBNE    BADOPR                            ;NO, ITS INVALID
                      (       command.os):00683         ;* SET AN OS FLAG
F110                  (       command.os):00684         SETFLG
F110 3414             (       command.os):00685                 PSHS    B,X
F112 C6FF             (       command.os):00686                 LDB     #$FF
F114 2003             (       command.os):00687                 BRA     GOFLG
                      (       command.os):00688         ;* CLEAR A OS FLAG
F116                  (       command.os):00689         CLRFLG
F116 3414             (       command.os):00690                 PSHS    B,X
F118 5F               (       command.os):00691                 CLRB
F119                  (       command.os):00692         GOFLG
F119 8103             (       command.os):00693                 CMPA    #NUMFLG
F11B 1024F18C         (       command.os):00694                 LBHS    BADOPR
F11F 8EDCA2           (       command.os):00695                 LDX     #MSGFLG
F122 3086             (       command.os):00696                 LEAX    A,X
F124 A684             (       command.os):00697                 LDA     ,X
F126 E784             (       command.os):00698                 STB     ,X
F128 1A04             (       command.os):00699                 ORCC    #4
F12A 3594             (       command.os):00700                 PULS    B,X,PC
                      (       command.os):00701         ;*
                      (       command.os):00702         ;* SHOW COMMAND
                      (       command.os):00703         ;*
F12C                  (       command.os):00704         SHOW
F12C 8EF386           (       command.os):00705                 LDX     #SETTAB                           ;POINT TO IT
F12F BDE4F8           (       command.os):00706                 JSR     TLOOK                             ;LOOK FOR IT
F132 58               (       command.os):00707                 LSLB
F133 8EF3DF           (       command.os):00708                 LDX     #SHOADR
F136 6E95             (       command.os):00709                 JMP     [B,X]
                      (       command.os):00710         ;* SHOW DEFAULT
F138                  (       command.os):00711         SHOW0
F138 8EDCA5           (       command.os):00712                 LDX     #DEFDRV                           ;PT TO IT
F13B 2003             (       command.os):00713                 BRA     SDCMD                             ;SHOW IT
F13D                  (       command.os):00714         SHOW1
F13D 8EDCAE           (       command.os):00715                 LDX     #SYSDRV                           ;PT TO IT
F140                  (       command.os):00716         SDCMD
F140 A680             (       command.os):00717                 LDA     ,X+                               ;GET DRIVE ID
F142 8B41             (       command.os):00718                 ADDA    #'A'                              ;CONVERT
F144 BDE58D           (       command.os):00719                 JSR     PUTCHR
F147 BDE541           (       command.os):00720                 JSR     WRLIN
F14A 3A5B             (       command.os):00721                 FCC     ':['
F14C 00               (       command.os):00722                 FCB     $00
F14D C608             (       command.os):00723                 LDB     #8
F14F                  (       command.os):00724         SDC1
F14F A680             (       command.os):00725                 LDA     ,X+
F151 2703             (       command.os):00726                 BEQ     SDC2
F153 BDE58D           (       command.os):00727                 JSR     PUTCHR
F156                  (       command.os):00728         SDC2
F156 5A               (       command.os):00729                 DECB
F157 26F6             (       command.os):00730                 BNE     SDC1
F159 865D             (       command.os):00731                 LDA     #']'
F15B BDE58D           (       command.os):00732                 JSR     PUTCHR
F15E 7EE57B           (       command.os):00733                 JMP     LFCR                              ;EXIT
                      (       command.os):00734         ;* SHOW FILE
F161                  (       command.os):00735         SHOW2
F161 BDE363           (       command.os):00736                 JSR     GETVAL                            ;GET NAME
F164 BDE64C           (       command.os):00737                 JSR     LOCERR                            ;LOOK IT UP
F167 BDE541           (       command.os):00738                 JSR     WRLIN
F16A 46696C653A20     (       command.os):00739                 FCC     'File: '
F170 00               (       command.os):00740                 FCB     $00
F171 BDE6DD           (       command.os):00741                 JSR     SHONAM                            ;OUTPUT
F174 BDE541           (       command.os):00742                 JSR     WRLIN
F177 0A0D             (       command.os):00743                 FCB     $0A,$0D
F179 4469736B20616464 (       command.os):00744                 FCC     'Disk address='
     726573733D
F186 00               (       command.os):00745                 FCB     $00
F187 EC8813           (       command.os):00746                 LDD     DDADR,X
F18A BDE471           (       command.os):00747                 JSR     WRDEC
F18D BDE541           (       command.os):00748                 JSR     WRLIN
F190 2C204C6F61642061 (       command.os):00749                 FCC     ', Load address=$'
     6464726573733D24
F1A0 00               (       command.os):00750                 FCB     $00
F1A1 EC8815           (       command.os):00751                 LDD     DRADR,X
F1A4 BDE538           (       command.os):00752                 JSR     WRHEXW
F1A7 BDE541           (       command.os):00753                 JSR     WRLIN
F1AA 2C2050726F746563 (       command.os):00754                 FCC     ', Protection='
     74696F6E3D
F1B7 00               (       command.os):00755                 FCB     $00
F1B8 E68817           (       command.os):00756                 LDB     DATTR,X
F1BB 108EF080         (       command.os):00757                 LDY     #ATRTAB
F1BF                  (       command.os):00758         SH21
F1BF A6A0             (       command.os):00759                 LDA     ,Y+
F1C1 58               (       command.os):00760                 LSLB
F1C2 2403             (       command.os):00761                 BCC     SH22
F1C4 BDE58D           (       command.os):00762                 JSR     PUTCHR
F1C7                  (       command.os):00763         SH22
F1C7 5D               (       command.os):00764                 TSTB
F1C8 26F5             (       command.os):00765                 BNE     SH21
F1CA BDE57B           (       command.os):00766                 JSR     LFCR
F1CD 108E0000         (       command.os):00767                 LDY     #0                                ;0 BLOCKS
F1D1 EC8813           (       command.os):00768                 LDD     DDADR,X
F1D4                  (       command.os):00769         SH23
F1D4 3121             (       command.os):00770                 LEAY    1,Y                               ;ADVANCE
F1D6 BDE5D2           (       command.os):00771                 JSR     FNDLNK                            ;LOOK UP LINK
F1D9 26F9             (       command.os):00772                 BNE     SH23                              ;FIND EM ALL
F1DB BDE541           (       command.os):00773                 JSR     WRLIN
F1DE 46696C6520636F6E (       command.os):00774                 FCC     'File contains '
     7461696E7320
F1EC 00               (       command.os):00775                 FCB     $00
F1ED 1F20             (       command.os):00776                 TFR     Y,D
F1EF BDE471           (       command.os):00777                 JSR     WRDEC
F1F2 BDE571           (       command.os):00778                 JSR     WRMSG
F1F5 20626C6F636B2873 (       command.os):00779                 FCC     ' block(s).'
     292E
F1FF 00               (       command.os):00780                 FCB     $00
F200 39               (       command.os):00781                 RTS
                      (       command.os):00782         ;* SHOW DISK FORMAT
F201                  (       command.os):00783         SHOW3
F201 BDE3F2           (       command.os):00784                 JSR     GETDRV
F204                  (       command.os):00785         SHODRV
F204 3442             (       command.os):00786                 PSHS    A,U                               ;SAVE REGISTERS
F206 BDEAFC           (       command.os):00787                 JSR     GETCTL1                           ;GET DRIVE CONTROL BLOCK
F209 BDE541           (       command.os):00788                 JSR     WRLIN                             ;OUTPUT MESSAGE
F20C 44726976653A20   (       command.os):00789                 FCC     'Drive: '
F213 00               (       command.os):00790                 FCB     $00
F214 A6E4             (       command.os):00791                 LDA     ,S                                ;GET DRIVE ID
F216 8B41             (       command.os):00792                 ADDA    #'A'                              ;CONVERT TO DRIVE ID
F218 BDE58D           (       command.os):00793                 JSR     PUTCHR                            ;OUTPUT IT
F21B BDE57B           (       command.os):00794                 JSR     LFCR                              ;NEW LINE
F21E 8EF42D           (       command.os):00795                 LDX     #SDTAB                            ;POINT TO TABLE
F221 4F               (       command.os):00796                 CLRA                                      ;DISPLAY ADDRESS
F222 E6C4             (       command.os):00797                 LDB     DRIVE,U                           ;GET DRIVE ID
F224 8D2F             (       command.os):00798                 BSR     SHODRB                            ;DISPLAY IT
F226 8601             (       command.os):00799                 LDA     #1                                ;DISPLAY CYLINDERS
F228 E641             (       command.os):00800                 LDB     NCYL,U                            ;GET # CYLINDERS
F22A 8D23             (       command.os):00801                 BSR     SHODRA                            ;DISPLAY IT
F22C 8602             (       command.os):00802                 LDA     #2                                ;DISPLAY HEADS
F22E E642             (       command.os):00803                 LDB     NHEAD,U                           ;GET # HEADS
F230 8D1D             (       command.os):00804                 BSR     SHODRA                            ;DISPLAY IT
F232 8603             (       command.os):00805                 LDA     #3                                ;DISPLAY SECTORS/TRACK
F234 E643             (       command.os):00806                 LDB     NSEC,U                            ;GET # SECTORS/TRACK
F236 8D17             (       command.os):00807                 BSR     SHODRA                            ;DISPLAY IT
F238 3542             (       command.os):00808                 PULS    A,U                               ;RESTORE REGS
F23A 7EE57B           (       command.os):00809                 JMP     LFCR                              ;NEW LINE
F23D 7EE57B           (       command.os):00810                 JMP     LFCR                              ;NEW LINE
F240 7EE57B           (       command.os):00811                 JMP     LFCR                              ;NEW LINE
F243 7EE57B           (       command.os):00812                 JMP     LFCR                              ;NEW LINE
F246 7EE57B           (       command.os):00813                 JMP     LFCR                              ;NEW LINE
F249 7EE57B           (       command.os):00814                 JMP     LFCR                              ;NEW LINE
F24C 7EE57B           (       command.os):00815                 JMP     LFCR                              ;NEW LINE
F24F                  (       command.os):00816         SHODRA
F24F BDE541           (       command.os):00817                 JSR     WRLIN                             ;OUTPUT MESSAGE
F252 2C20             (       command.os):00818                 FCC     ', '                              ;STRING
F254 00               (       command.os):00819                 FCB     $00
F255                  (       command.os):00820         SHODRB
F255 8D08             (       command.os):00821                 BSR     SHOTAB                            ;DISPLAY TABLE ENTRY
F257 863D             (       command.os):00822                 LDA     #'='                              ;GET FOLLOWING '='
F259 BDE58D           (       command.os):00823                 JSR     PUTCHR                            ;OUTPUT IT
F25C 7EE470           (       command.os):00824                 JMP     WRDEC8                            ;AND DISPLAY VALUE
                      (       command.os):00825         ;*
                      (       command.os):00826         ;* DISPLAY ENTRY(A) IN TABLE(X)
                      (       command.os):00827         ;*
F25F                  (       command.os):00828         SHOTAB
F25F 3414             (       command.os):00829                 PSHS    B,X                               ;SAVE REGS
F261 4C               (       command.os):00830                 INCA                                      ;ADVANCE FOR COUNT
F262                  (       command.os):00831         SHOT1
F262 E680             (       command.os):00832                 LDB     ,X+                               ;GET CHAR FROM TABLE
F264 2AFC             (       command.os):00833                 BPL     SHOT1                             ;NOT FLAG, KEEP LOOKING
F266 C47F             (       command.os):00834                 ANDB    #%01111111                        ;IS IT LAST ONE?
F268 270F             (       command.os):00835                 BEQ     SHOT4                             ;YES, RETURN NOT-FOUND
F26A 4A               (       command.os):00836                 DECA                                      ;IS THIS IT?
F26B 26F5             (       command.os):00837                 BNE     SHOT1                             ;NO, KEEP LOOKING
F26D                  (       command.os):00838         SHOT2
F26D A680             (       command.os):00839                 LDA     ,X+                               ;GET CHAR
F26F 2B05             (       command.os):00840                 BMI     SHOT3                             ;END, EXIT
F271 BDE58D           (       command.os):00841                 JSR     PUTCHR                            ;DISPLAY
F274 20F7             (       command.os):00842                 BRA     SHOT2                             ;DO NEXT
F276                  (       command.os):00843         SHOT3
F276 4F               (       command.os):00844                 CLRA    ZERO RC
F277 3594             (       command.os):00845                 PULS    B,X,PC
F279                  (       command.os):00846         SHOT4
F279 8601             (       command.os):00847                 LDA     #RCBOP                            ;INVALID OPERAND PASSED
F27B 3594             (       command.os):00848                 PULS    B,X,PC                            ;RETURN
                      (       command.os):00849         ;* SHOW CONSOLE I/O ASSIGNMENTS
F27D                  (       command.os):00850         SHOW5
F27D 8EF45C           (       command.os):00851                 LDX     #IOTAB                            ;POINT TO TABLE
F280 4F               (       command.os):00852                 CLRA                                      ;DISPLAY INPUT
F281 F6DC6C           (       command.os):00853                 LDB     >CONIN                            ;GET INPUT
F284 8DCF             (       command.os):00854                 BSR     SHODRB                            ;DISPLAY IT
F286 8601             (       command.os):00855                 LDA     #1                                ;DISPLAY OUTPUT
F288 F6DC6D           (       command.os):00856                 LDB     >CONOUT                           ;GET OUTPUT
F28B 8DC2             (       command.os):00857                 BSR     SHODRA                            ;DISPLAY IT
F28D 7EE57B           (       command.os):00858                 JMP     LFCR                              ;NEW LINE
                      (       command.os):00859         ;* DISPLAY FLAGS
F290                  (       command.os):00860         SHFLAG
F290 54               (       command.os):00861                 LSRB
F291 1F98             (       command.os):00862                 TFR     B,A                               ;COPY
F293 8EF386           (       command.os):00863                 LDX     #SETTAB                           ;POINT TO TABLE
F296 8DC7             (       command.os):00864                 BSR     SHOTAB                            ;DISPLAY IT
F298 863D             (       command.os):00865                 LDA     #'='                              ;GET EQUALS SIGN
F29A BDE58D           (       command.os):00866                 JSR     PUTCHR                            ;OUTPUT IT
F29D 8EDCA2           (       command.os):00867                 LDX     #MSGFLG                           ;PT TO AREA
F2A0 A685             (       command.os):00868                 LDA     B,X                               ;GET FLAG VALUE
F2A2 2702             (       command.os):00869                 BEQ     SHOOFF                            ;OFF, SHOW IT
F2A4 8601             (       command.os):00870                 LDA     #1                                ;CONVERT TO ON
F2A6                  (       command.os):00871         SHOOFF
F2A6 8EF454           (       command.os):00872                 LDX     #OOTAB                            ;POINT TO ON/OFF TABLE
F2A9 8DB4             (       command.os):00873                 BSR     SHOTAB                            ;OUTPUT TABLE ENTRY
F2AB 7EE57B           (       command.os):00874                 JMP     LFCR                              ;NEW LINE & EXIT
                      (       command.os):00875         ;*
                      (       command.os):00876         ;* SHOW MEMORY COMAND
                      (       command.os):00877         ;*
F2AE                  (       command.os):00878         SHOW4
F2AE BDE40F           (       command.os):00879                 JSR     GETHEX                            ;     GET STARTING ADDRESS
F2B1 3410             (       command.os):00880                 PSHS    X                                 ;SAVE IT
F2B3 BDE4CF           (       command.os):00881                 JSR     SKIP                              ;     MORE OPERANDS?
F2B6 2703             (       command.os):00882                 BEQ     EX1                               ;NO, THATS IT
F2B8 BDE40F           (       command.os):00883                 JSR     GETHEX                            ;     GET ENDING ADDRESS
F2BB                  (       command.os):00884         EX1
F2BB BFDCCD           (       command.os):00885                 STX     >TEMP1                            ;     SAVE ADDR
F2BE 3510             (       command.os):00886                 PULS    X                                 ;GET STARTING BACK
F2C0                  (       command.os):00887         EX2
F2C0 1F10             (       command.os):00888                 TFR     X,D                               ;GET ADDRESS
F2C2 BDE538           (       command.os):00889                 JSR     WRHEXW                            ;     DISPLAY
F2C5 C610             (       command.os):00890                 LDB     #16                               ;16 BYTES/LINE
F2C7                  (       command.os):00891         EX3
F2C7 C503             (       command.os):00892                 BITB    #3                                ;BOUNDARY?
F2C9 2603             (       command.os):00893                 BNE     EX4
F2CB BDE585           (       command.os):00894                 JSR     SPACE                             ;EXTRA SPACE
F2CE                  (       command.os):00895         EX4
F2CE BDE585           (       command.os):00896                 JSR     SPACE                             ;OUTPUT SPACE
F2D1 A680             (       command.os):00897                 LDA     ,X+                               ;GET DATA
F2D3 BDE54D           (       command.os):00898                 JSR     WRHEX                             ;OUTPUT
F2D6 5A               (       command.os):00899                 DECB                                      ;BACKUP COUNT
F2D7 26EE             (       command.os):00900                 BNE     EX3                               ;DO EM ALL
F2D9 C604             (       command.os):00901                 LDB     #4
F2DB                  (       command.os):00902         EX5
F2DB BDE585           (       command.os):00903                 JSR     SPACE                             ;MORE SPACES
F2DE 5A               (       command.os):00904                 DECB
F2DF 26FA             (       command.os):00905                 BNE     EX5
F2E1 3010             (       command.os):00906                 LEAX    -16,X                             ;BACKUP
F2E3 C610             (       command.os):00907                 LDB     #16
F2E5                  (       command.os):00908         EX6
F2E5 A680             (       command.os):00909                 LDA     ,X+
F2E7 8120             (       command.os):00910                 CMPA    #' '                              ;SPACE?
F2E9 2504             (       command.os):00911                 BLO     EX7
F2EB 817F             (       command.os):00912                 CMPA    #$7F                              ;DELETE
F2ED 2502             (       command.os):00913                 BLO     EX8                               ;OK
F2EF                  (       command.os):00914         EX7
F2EF 862E             (       command.os):00915                 LDA     #'.'                              ;INDICATE BAD
F2F1                  (       command.os):00916         EX8
F2F1 BDE58D           (       command.os):00917                 JSR     PUTCHR                            ;OUTPUT
F2F4 5A               (       command.os):00918                 DECB    BACKUP
F2F5 26EE             (       command.os):00919                 BNE     EX6                               ;CONTINUE
F2F7 BDE57B           (       command.os):00920                 JSR     LFCR                              ;NEW LINE
F2FA BDE5C6           (       command.os):00921                 JSR     TSTCHR
F2FD 2705             (       command.os):00922                 BEQ     EX9
F2FF BCDCCD           (       command.os):00923                 CMPX    >TEMP1                            ;PAST END?
F302 23BC             (       command.os):00924                 BLS     EX2                               ;NO, KEEP GOING
F304                  (       command.os):00925         EX9
F304 4F               (       command.os):00926                 CLRA
F305 39               (       command.os):00927                 RTS
                      (       command.os):00928         ;* SHOW FREE
F306                  (       command.os):00929         SHOW6
F306 BDE3F2           (       command.os):00930                 JSR     GETDRV                            ;GET DRIVE ID
F309 B7DCEB           (       command.os):00931                 STA     >SDRIVE                           ;SELECT IT
F30C 8D3E             (       command.os):00932                 BSR     CALFRE                            ;CALCULATE SIZE & FREE
F30E BDE541           (       command.os):00933                 JSR     WRLIN                             ;OUTPUT MESSAGE
F311 447269766520     (       command.os):00934                 FCC     'Drive '
F317 00               (       command.os):00935                 FCB     $00
F318 B6DCEB           (       command.os):00936                 LDA     >SDRIVE                           ;GET DRIVE ID
F31B 8B41             (       command.os):00937                 ADDA    #'A'                              ;CONVERT TO PRINTABLE
F31D BDE58D           (       command.os):00938                 JSR     PUTCHR                            ;DISPLAY
F320 BDE541           (       command.os):00939                 JSR     WRLIN                             ;OUTPUT MESSAGE
F323 2068617320       (       command.os):00940                 FCC     ' has '
F328 00               (       command.os):00941                 FCB     $00
F329 FCDCCF           (       command.os):00942                 LDD     >TEMP2                            ;GET DISK SIZE
F32C BDE471           (       command.os):00943                 JSR     WRDEC                             ;DISPLAY IN DECIMAL
F32F BDE541           (       command.os):00944                 JSR     WRLIN                             ;OUTPUT MESSAGE
F332 20626C6F636B732C (       command.os):00945                 FCC     ' blocks, '
     20
F33B 00               (       command.os):00946                 FCB     $00
F33C FCDCCD           (       command.os):00947                 LDD     >TEMP1                            ;GET FREE BLOCKS
F33F BDE471           (       command.os):00948                 JSR     WRDEC                             ;OUTPUT IN DECIMAL
F342 BDE571           (       command.os):00949                 JSR     WRMSG                             ;OUTPUT MESSAGE
F345 2066726565       (       command.os):00950                 FCC     ' free'
F34A 00               (       command.os):00951                 FCB     $00
F34B 39               (       command.os):00952                 RTS
                      (       command.os):00953         ;*
                      (       command.os):00954         ;* CALCULATE # FREE SECTORS ON DISK
                      (       command.os):00955         ;*
F34C                  (       command.os):00956         CALFRE
F34C 3430             (       command.os):00957                 PSHS    X,Y
F34E BDE705           (       command.os):00958                 JSR     CURSIZ                            ;GET DRIVE SIZE
F351 FDDCCF           (       command.os):00959                 STD     >TEMP2                            ;SAVE # BLOCKS
F354 1F02             (       command.os):00960                 TFR     D,Y                               ;SAVE IT
F356 4F               (       command.os):00961                 CLRA
F357 5F               (       command.os):00962                 CLRB
F358 FDDCCD           (       command.os):00963                 STD     >TEMP1                            ;SAVE COUNT
F35B C601             (       command.os):00964                 LDB     #LNKSEC                           ;GET LINK SECTORS
F35D                  (       command.os):00965         DISF1
F35D FDDCCB           (       command.os):00966                 STD     >TEMP                             ;CURRENT SECTOR
F360 BDE5EF           (       command.os):00967                 JSR     RDWRK                             ;READ IT
F363                  (       command.os):00968         DISF2
F363 EC81             (       command.os):00969                 LDD     ,X++                              ;GET SECTOR ID
F365 2607             (       command.os):00970                 BNE     DISF3                             ;USED
F367 5C               (       command.os):00971                 INCB                                      ;GET A ONE
F368 F3DCCD           (       command.os):00972                 ADDD    >TEMP1                            ;ADVANCE COUNT
F36B FDDCCD           (       command.os):00973                 STD     >TEMP1                            ;RESAVE COUNT
F36E                  (       command.os):00974         DISF3
F36E 313F             (       command.os):00975                 LEAY    -1,Y                              ;REDUCE BY ONE
F370 270D             (       command.os):00976                 BEQ     DISF4                             ;ALL DONE
F372 8CE000           (       command.os):00977                 CMPX    #WRKSPC+512                       ;ARE WE OVER
F375 25EC             (       command.os):00978                 BLO     DISF2                             ;NO, ITS OK
F377 FCDCCB           (       command.os):00979                 LDD     >TEMP                             ;GET SECTOR
F37A C30001           (       command.os):00980                 ADDD    #1                                ;ADVANCE
F37D 20DE             (       command.os):00981                 BRA     DISF1
F37F                  (       command.os):00982         DISF4
F37F FCDCCD           (       command.os):00983                 LDD     >TEMP1                            ;RECOVER IT
F382 1A04             (       command.os):00984                 ORCC    #4
F384 35B0             (       command.os):00985                 PULS    X,Y,PC
                      (       command.os):00986         ;* 'SET' OPERAND TABLES
F386                  (       command.os):00987         SETTAB
F386 83               (       command.os):00988                 FCB     $83
F387 4D657373616765   (       command.os):00989                 FCC     'Message'
F38E 83               (       command.os):00990                 FCB     $83
F38F 4465627567       (       command.os):00991                 FCC     'Debug'
F394 82               (       command.os):00992                 FCB     $82
F395 5472616365       (       command.os):00993                 FCC     'Trace'
F39A 83               (       command.os):00994                 FCB     $83
F39B 44454641554C54   (       command.os):00995                 FCC     'DEFAULT'
F3A2 82               (       command.os):00996                 FCB     $82
F3A3 53595354454D     (       command.os):00997                 FCC     'SYSTEM'
F3A9 82               (       command.os):00998                 FCB     $82
F3AA 46494C45         (       command.os):00999                 FCC     'FILE'
F3AE 82               (       command.os):01000                 FCB     $82
F3AF 4452495645       (       command.os):01001                 FCC     'DRIVE'
F3B4 83               (       command.os):01002                 FCB     $83
F3B5 4D454D4F5259     (       command.os):01003                 FCC     'MEMORY'
F3BB 82               (       command.os):01004                 FCB     $82
F3BC 434F4E534F4C45   (       command.os):01005                 FCC     'CONSOLE'
F3C3 82               (       command.os):01006                 FCB     $82
F3C4 46524545         (       command.os):01007                 FCC     'FREE'
F3C8 80               (       command.os):01008                 FCB     $80
                      (       command.os):01009         ;* 'SET' OPERAND HANDLERS
F3C9                  (       command.os):01010         SETADR
F3C9 F0FD             (       command.os):01011                 FDB     STFLAG                            ;MESSAGE
F3CB F0FD             (       command.os):01012                 FDB     STFLAG                            ;DEBUG
F3CD F0FD             (       command.os):01013                 FDB     STFLAG                            ;TRACE
F3CF F004             (       command.os):01014                 FDB     SET0                              ;DEFAULT
F3D1 F013             (       command.os):01015                 FDB     SET1                              ;SYSTEM
F3D3 F032             (       command.os):01016                 FDB     SET2                              ;FILE
F3D5 F089             (       command.os):01017                 FDB     SET3                              ;DRIVE
F3D7 F0C1             (       command.os):01018                 FDB     SET4                              ;MEMORY
F3D9 F0D5             (       command.os):01019                 FDB     SET5                              ;CONSOLE
F3DB E2AB             (       command.os):01020                 FDB     BADOPR                            ;FREE
F3DD E2AB             (       command.os):01021                 FDB     BADOPR                            ;INVALID
                      (       command.os):01022         ;* 'SHOW' OPERAND HANDLERS
F3DF                  (       command.os):01023         SHOADR
F3DF F290             (       command.os):01024                 FDB     SHFLAG                            ;MESSAGE
F3E1 F290             (       command.os):01025                 FDB     SHFLAG                            ;DEBUG
F3E3 F290             (       command.os):01026                 FDB     SHFLAG                            ;TRACE
F3E5 F138             (       command.os):01027                 FDB     SHOW0                             ;DEFAULT
F3E7 F13D             (       command.os):01028                 FDB     SHOW1                             ;SYSTEM
F3E9 F161             (       command.os):01029                 FDB     SHOW2                             ;FILE
F3EB F201             (       command.os):01030                 FDB     SHOW3                             ;DRIVE
F3ED F2AE             (       command.os):01031                 FDB     SHOW4                             ;MEMORY
F3EF F27D             (       command.os):01032                 FDB     SHOW5                             ;CONSOLE
F3F1 F306             (       command.os):01033                 FDB     SHOW6                             ;FREE
F3F3 E2AB             (       command.os):01034                 FDB     BADOPR                            ;INVALID
                      (       command.os):01035         ;* 'SET FILE' OPTIONS
F3F5                  (       command.os):01036         SFTAB
F3F5 81               (       command.os):01037                 FCB     $81
F3F6 4C4F41445F414444 (       command.os):01038                 FCC     'LOAD_ADDRESS'
     52455353
F402 81               (       command.os):01039                 FCB     $81
F403 50524F5445435449 (       command.os):01040                 FCC     'PROTECTION'
     4F4E
F40D 80               (       command.os):01041                 FCB     $80
                      (       command.os):01042         ;* 'INITIALIZE' OPTIONS
F40E                  (       command.os):01043         INITAB
F40E 81               (       command.os):01044                 FCB     $81
F40F 496E7465726C6561 (       command.os):01045                 FCC     'Interleave'
     7665
F419 81               (       command.os):01046                 FCB     $81
F41A 4469726563746F72 (       command.os):01047                 FCC     'Directory extension'
     7920657874656E73
     696F6E
                      (       command.os):01048         ;* 'SET DISK' OPTIONS
F42D                  (       command.os):01049         SDTAB
F42D 81               (       command.os):01050                 FCB     $81
F42E 41646472657373   (       command.os):01051                 FCC     'Address'
F435 81               (       command.os):01052                 FCB     $81
F436 43796C696E646572 (       command.os):01053                 FCC     'Cylinders'
     73
F43F 81               (       command.os):01054                 FCB     $81
F440 4865616473       (       command.os):01055                 FCC     'Heads'
F445 81               (       command.os):01056                 FCB     $81
F446 536563746F72732F (       command.os):01057                 FCC     'Sectors/Track'
     547261636B
F453 80               (       command.os):01058                 FCB     $80
                      (       command.os):01059         ;* FLAG ON/OFF TABLE
F454                  (       command.os):01060         OOTAB
F454 82               (       command.os):01061                 FCB     $82
F455 4F4646           (       command.os):01062                 FCC     'OFF'
F458 82               (       command.os):01063                 FCB     $82
F459 4F4E             (       command.os):01064                 FCC     'ON'
F45B 80               (       command.os):01065                 FCB     $80
                      (       command.os):01066         ;* 'SET CONSOLE' OPTIONS
F45C                  (       command.os):01067         IOTAB
F45C 81               (       command.os):01068                 FCB     $81
F45D 496E707574       (       command.os):01069                 FCC     'Input'
F462 81               (       command.os):01070                 FCB     $81
F463 4F7574707574     (       command.os):01071                 FCC     'Output'
F469 80               (       command.os):01072                 FCB     $80
                      (        cubix.asm):01190                 INCLUDE comfile.os                        ;BATCH FILE PROCESSOR
                      (       comfile.os):00001         ;*
                      (       comfile.os):00002         ;* CUBIX Command (batch) file processor
                      (       comfile.os):00003         ;*
                      (       comfile.os):00004         ;* END OF FILE ON COMMAND FILE
F46A                  (       comfile.os):00005         CMDEOF
F46A 3506             (       comfile.os):00006                 PULS    A,B
F46C FDDCE6           (       comfile.os):00007                 STD     >CMDSTK
F46F B6DCE8           (       comfile.os):00008                 LDA     >CMDRC
F472 39               (       comfile.os):00009                 RTS
                      (       comfile.os):00010         ;*
                      (       comfile.os):00011         ;* COMMAND FILE PROCESSOR
                      (       comfile.os):00012         ;*
F473                  (       comfile.os):00013         COMFIL
F473 3121             (       comfile.os):00014                 LEAY    1,Y                               ;SKIP '@'
F475 B7DCCD           (       comfile.os):00015                 STA     >TEMP1                            ;INDICATE NOT IMPLIED
F478                  (       comfile.os):00016         CMDEX
F478 BDE3A3           (       comfile.os):00017                 JSR     GETDIR                            ;GET DIRECTORY
F47B BDE291           (       comfile.os):00018                 JSR     NAMGET                            ;GET NAME
F47E CC4000           (       comfile.os):00019                 LDD     #$4000                            ;'@'
F481 ED81             (       comfile.os):00020                 STD     ,X++                              ;SET IT
F483 6F80             (       comfile.os):00021                 CLR     ,X+                               ;ZERO LAST
F485 BDE64C           (       comfile.os):00022                 JSR     LOCERR                            ;LOOK IT UP
                      (       comfile.os):00023         ;* START UP COMMAND FILE DIR ENT(X)
F488                  (       comfile.os):00024         COMGO
F488 A68817           (       comfile.os):00025                 LDA     DATTR,X                           ;GET PROTS
F48B 8520             (       comfile.os):00026                 BITA    #EPERM                            ;CAN WE EXECUTE?
F48D 1027F40F         (       comfile.os):00027                 LBEQ    PROERR                            ;NO, ERROR
F491 B6DCB7           (       comfile.os):00028                 LDA     >FDRIVE                           ;GET COMMAND FILE DRIVE
F494 B7DCE1           (       comfile.os):00029                 STA     >CMDDRV                           ;SAVE IT
F497 EC8813           (       comfile.os):00030                 LDD     DDADR,X                           ;GET ADDRESS
F49A FDDCE2           (       comfile.os):00031                 STD     >CMDSEC                           ;SAVE COMMAND SECTOR
F49D 4F               (       comfile.os):00032                 CLRA
F49E 5F               (       comfile.os):00033                 CLRB
F49F FDDCE4           (       comfile.os):00034                 STD     >CMDOFF                           ;SAVE COMMAND FILE OFFSET
F4A2 FCDCE6           (       comfile.os):00035                 LDD     >CMDSTK                           ;GET COMMAND STACK
F4A5 3406             (       comfile.os):00036                 PSHS    A,B                               ;SAVE OLD STACK
F4A7 7FDCE8           (       comfile.os):00037                 CLR     >CMDRC                            ;CLEAR RETURN CODE
F4AA 10BEDCCF         (       comfile.os):00038                 LDY     >TEMP2                            ;RESTORE COMMAND LINE POINTER
F4AE BDF5AF           (       comfile.os):00039                 JSR     SAVPRM                            ;SAVE PARAMETERS
F4B1                  (       comfile.os):00040         NEWLIN
F4B1 8EDC00           (       comfile.os):00041                 LDX     #INBUFF                           ;PT TO BUFFER
F4B4                  (       comfile.os):00042         REDCHR
F4B4 BDF623           (       comfile.os):00043                 JSR     RCCHR                             ;READ CHAR FROM CMD FILE
F4B7 27B1             (       comfile.os):00044                 BEQ     CMDEOF                            ;END OF FILE
F4B9 813F             (       comfile.os):00045                 CMPA    #'?'                              ;PARM?
F4BB 262D             (       comfile.os):00046                 BNE     NOMAC                             ;NOPE
F4BD BDF623           (       comfile.os):00047                 JSR     RCCHR                             ;GET CHAR
F4C0 8030             (       comfile.os):00048                 SUBA    #'0'                              ;CONVERT
F4C2 8109             (       comfile.os):00049                 CMPA    #9                                ;OVER
F4C4 2308             (       comfile.os):00050                 BLS     PAROK                             ;OK
F4C6 C63F             (       comfile.os):00051                 LDB     #'?'
F4C8 E780             (       comfile.os):00052                 STB     ,X+
F4CA 8B30             (       comfile.os):00053                 ADDA    #'0'
F4CC 201C             (       comfile.os):00054                 BRA     NOMAC                             ;NOT VAR
                      (       comfile.os):00055         ;* PARAMETER SUB TO PERFORM
F4CE                  (       comfile.os):00056         PAROK
F4CE 1F89             (       comfile.os):00057                 TFR     A,B                               ;COPY
F4D0 108EDCED         (       comfile.os):00058                 LDY     #CMDBUF                           ;POINT TO BUFFER
F4D4                  (       comfile.os):00059         PAR1
F4D4 BDE4CF           (       comfile.os):00060                 JSR     SKIP                              ;ADVANCE
F4D7 5A               (       comfile.os):00061                 DECB                                      ;REDUCE COUNT
F4D8 2B07             (       comfile.os):00062                 BMI     PAR3                              ;WE HAVE IT
F4DA                  (       comfile.os):00063         PAR2
F4DA BDE4DC           (       comfile.os):00064                 JSR     TSTERM                            ;KEEP LOOKING
F4DD 26FB             (       comfile.os):00065                 BNE     PAR2                              ;KEEP LOOKING
F4DF 20F3             (       comfile.os):00066                 BRA     PAR1                              ;CONTINUE
F4E1                  (       comfile.os):00067         PAR3
F4E1 BDE4DC           (       comfile.os):00068                 JSR     TSTERM                            ;IS THIS
F4E4 27CE             (       comfile.os):00069                 BEQ     REDCHR                            ;YES, QUIT
F4E6 A780             (       comfile.os):00070                 STA     ,X+                               ;SAVE
F4E8 20F7             (       comfile.os):00071                 BRA     PAR3
                      (       comfile.os):00072         ;* EXECUTE COMMAND
F4EA                  (       comfile.os):00073         NOMAC
F4EA A780             (       comfile.os):00074                 STA     ,X+                               ;CLEAR IT
F4EC 810D             (       comfile.os):00075                 CMPA    #$0D                              ;END OF LINE?
F4EE 26C4             (       comfile.os):00076                 BNE     REDCHR
F4F0 108EDC00         (       comfile.os):00077                 LDY     #INBUFF                           ;POINT TO BUFFER
F4F4 7DDCA4           (       comfile.os):00078                 TST     >TRCFLG                           ;TEST FOR TRACE ON
F4F7 2717             (       comfile.os):00079                 BEQ     GOCMD                             ;NO, DON'T TRACE
F4F9 862A             (       comfile.os):00080                 LDA     #'*'
F4FB BDE58D           (       comfile.os):00081                 JSR     PUTCHR                            ;FAKE DOS PROMPT
F4FE 1F21             (       comfile.os):00082                 TFR     Y,X                               ;COPY
F500                  (       comfile.os):00083         TRAC1
F500 A680             (       comfile.os):00084                 LDA     ,X+
F502 2709             (       comfile.os):00085                 BEQ     TRAC2
F504 810D             (       comfile.os):00086                 CMPA    #$0D
F506 2705             (       comfile.os):00087                 BEQ     TRAC2
F508 BDE58D           (       comfile.os):00088                 JSR     PUTCHR
F50B 20F3             (       comfile.os):00089                 BRA     TRAC1
F50D                  (       comfile.os):00090         TRAC2
F50D BDE57B           (       comfile.os):00091                 JSR     LFCR
F510                  (       comfile.os):00092         GOCMD
F510 BDE4CF           (       comfile.os):00093                 JSR     SKIP                              ;ADVANCE
F513 813F             (       comfile.os):00094                 CMPA    #'?'                              ;COMMAND CODE
F515 265B             (       comfile.os):00095                 BNE     EXDCOM                            ;NO, SKIP IT
F517 ECA1             (       comfile.os):00096                 LDD     ,Y++                              ;GET OPERAND
F519 BDE4CF           (       comfile.os):00097                 JSR     SKIP
                      (       comfile.os):00098         ;* '?O' OUTPUT LINE
F51C C14F             (       comfile.os):00099                 CMPB    #'O'                              ;OUTPUT?
F51E 2704             (       comfile.os):00100                 BEQ     CMPR
                      (       comfile.os):00101         ;* '?P' ONTPUT LINE - CR
F520 C150             (       comfile.os):00102                 CMPB    #'P'                              ;PRINT?
F522 2616             (       comfile.os):00103                 BNE     RCOND                             ;CONDITIONAL
F524                  (       comfile.os):00104         CMPR
F524 A6A0             (       comfile.os):00105                 LDA     ,Y+                               ;GET LINE
F526 2709             (       comfile.os):00106                 BEQ     CMPR1
F528 810D             (       comfile.os):00107                 CMPA    #$0D
F52A 2705             (       comfile.os):00108                 BEQ     CMPR1
F52C BDE58D           (       comfile.os):00109                 JSR     PUTCHR
F52F 20F3             (       comfile.os):00110                 BRA     CMPR
F531                  (       comfile.os):00111         CMPR1
F531 C14F             (       comfile.os):00112                 CMPB    #'O'                              ;OUTPUT?
F533 2768             (       comfile.os):00113                 BEQ     CMDRT1                            ;NO LFCR
F535 BDE57B           (       comfile.os):00114                 JSR     LFCR
F538 2063             (       comfile.os):00115                 BRA     CMDRT1                            ;BACK
                      (       comfile.os):00116         ;* '?F' EXECUTE ON LAST COMMAND FAILED
F53A                  (       comfile.os):00117         RCOND
F53A C146             (       comfile.os):00118                 CMPB    #'F'                              ;?F?
F53C 2607             (       comfile.os):00119                 BNE     RSUCC                             ;NO
F53E B6DCE8           (       comfile.os):00120                 LDA     >CMDRC                            ;GET RC
F541 275A             (       comfile.os):00121                 BEQ     CMDRT1                            ;RETURN
F543 20CB             (       comfile.os):00122                 BRA     GOCMD                             ;EXECUTE THIS
                      (       comfile.os):00123         ;* '?S' EXECUTE ON LAST COMMAND SUCESSFUL
F545                  (       comfile.os):00124         RSUCC
F545 C153             (       comfile.os):00125                 CMPB    #'S'                              ;?S?
F547 2603             (       comfile.os):00126                 BNE     CSRC                              ;NO, TRY EXIT
F549 5F               (       comfile.os):00127                 CLRB
F54A 2009             (       comfile.os):00128                 BRA     TSTRET                            ;PEFORM TEST
                      (       comfile.os):00129         ;* '?R' EXECUTE ON SPECIFIC RETURN CODE
F54C                  (       comfile.os):00130         CSRC
F54C C152             (       comfile.os):00131                 CMPB    #'R'                              ;?R?
F54E 260E             (       comfile.os):00132                 BNE     CEXIT                             ;TRY EXIT
F550 BDE404           (       comfile.os):00133                 JSR     GETNUM                            ;GET VALUE
F553 1F10             (       comfile.os):00134                 TFR     X,D                               ;COPY
F555                  (       comfile.os):00135         TSTRET
F555 F1DCE8           (       comfile.os):00136                 CMPB    >CMDRC                            ;WUZ THIS IT?
F558 2643             (       comfile.os):00137                 BNE     CMDRT1                            ;NO, DONT EXECUTE
F55A 20B4             (       comfile.os):00138                 BRA     GOCMD                             ;DO IT
F55C 20B2             (       comfile.os):00139                 BRA     GOCMD                             ;DO IT
                      (       comfile.os):00140         ;* '?E' EXIT COMMAND FILE
F55E                  (       comfile.os):00141         CEXIT
F55E C145             (       comfile.os):00142                 CMPB    #'E'                              ;EXIT
F560 263E             (       comfile.os):00143                 BNE     CMDIN                             ;NO, TRY SET VARIABLES
F562 BDE4CF           (       comfile.os):00144                 JSR     SKIP                              ;ANY OPERANDS
F565 2708             (       comfile.os):00145                 BEQ     CEXI                              ;NO
F567 BDE404           (       comfile.os):00146                 JSR     GETNUM                            ;GT VALUE
F56A 1F10             (       comfile.os):00147                 TFR     X,D                               ;COPY
F56C F7DCE8           (       comfile.os):00148                 STB     >CMDRC                            ;SET IT
F56F                  (       comfile.os):00149         CEXI
F56F 7EF46A           (       comfile.os):00150                 JMP     CMDEOF                            ;END OF FILE
                      (       comfile.os):00151         ;* EXECUTE DOS COMMAND
F572                  (       comfile.os):00152         EXDCOM
F572 BEDCE4           (       comfile.os):00153                 LDX     >CMDOFF                           ;GET OFFSET
F575 FCDCE2           (       comfile.os):00154                 LDD     >CMDSEC                           ;GET SECTOR
F578 3416             (       comfile.os):00155                 PSHS    A,B,X                             ;SAVE
F57A B6DCE1           (       comfile.os):00156                 LDA     >CMDDRV                           ;GET DRIVE
F57D 3402             (       comfile.os):00157                 PSHS    A                                 ;SAVE
F57F 10FFDCE6         (       comfile.os):00158                 STS     >CMDSTK                           ;SET STACK
F583 BDE1C0           (       comfile.os):00159                 JSR     EXECMD                            ;EXECUTE
F586                  (       comfile.os):00160         CMDRET
F586 2601             (       comfile.os):00161                 BNE     CMDRT0
F588 4F               (       comfile.os):00162                 CLRA
F589                  (       comfile.os):00163         CMDRT0
F589 B7DCE8           (       comfile.os):00164                 STA     >CMDRC                            ;SET RC
F58C 10FEDCE6         (       comfile.os):00165                 LDS     >CMDSTK                           ;GET STACK
F590 3502             (       comfile.os):00166                 PULS    A                                 ;RESTORE DRIVE
F592 B7DCE1           (       comfile.os):00167                 STA     >CMDDRV                           ;RESAVE
F595 3516             (       comfile.os):00168                 PULS    A,B,X                             ;RESTORE VARS
F597 FDDCE2           (       comfile.os):00169                 STD     >CMDSEC                           ;RESET SECTOR
F59A BFDCE4           (       comfile.os):00170                 STX     >CMDOFF                           ;RESET OFFSET
F59D                  (       comfile.os):00171         CMDRT1
F59D 7EF4B1           (       comfile.os):00172                 JMP     NEWLIN                            ;LFCR & RETURN
                      (       comfile.os):00173         ;* '?=' SET COMMAND FILE VARIABLES
F5A0                  (       comfile.os):00174         CMDIN
F5A0 C13D             (       comfile.os):00175                 CMPB    #'='
F5A2 2707             (       comfile.os):00176                 BEQ     SETVAR                            ;SET THEM
                      (       comfile.os):00177         ;* '?I' INPUT NEW PARMS
F5A4 C149             (       comfile.os):00178                 CMPB    #'I'                              ;NEW PARMS?
F5A6 2618             (       comfile.os):00179                 BNE     CHAIN                             ;NO, TRY CHAIN
F5A8 BDE498           (       comfile.os):00180                 JSR     GLINE                             ;GET LINE
F5AB                  (       comfile.os):00181         SETVAR
F5AB 8D02             (       comfile.os):00182                 BSR     SAVPRM                            ;SAVE THEM
F5AD 20EE             (       comfile.os):00183                 BRA     CMDRT1                            ;CONTINUE
                      (       comfile.os):00184         ;* SAVE COMMAND LINE PARAMETERS IN BUFFER
F5AF                  (       comfile.os):00185         SAVPRM
F5AF 3410             (       comfile.os):00186                 PSHS    X                                 ;SAVE REGS
F5B1 8EDCED           (       comfile.os):00187                 LDX     #CMDBUF                           ;POINT TO IT
F5B4                  (       comfile.os):00188         SAVP1
F5B4 A6A0             (       comfile.os):00189                 LDA     ,Y+                               ;GET IT
F5B6 A780             (       comfile.os):00190                 STA     ,X+                               ;WRITE IT
F5B8 2704             (       comfile.os):00191                 BEQ     SAVP2                             ;END
F5BA 810D             (       comfile.os):00192                 CMPA    #$0D                              ;OK?
F5BC 26F6             (       comfile.os):00193                 BNE     SAVP1                             ;KEEP GOING
F5BE                  (       comfile.os):00194         SAVP2
F5BE 3590             (       comfile.os):00195                 PULS    X,PC                              ;GO HOME
                      (       comfile.os):00196         ;* '?@' CHAIN TO NEW CMD FILE
F5C0                  (       comfile.os):00197         CHAIN
F5C0 C140             (       comfile.os):00198                 CMPB    #'@'
F5C2 2608             (       comfile.os):00199                 BNE     CMDSKP
F5C4 3506             (       comfile.os):00200                 PULS    A,B                               ;RESTORE STACK
F5C6 FDDCE6           (       comfile.os):00201                 STD     >CMDSTK                           ;RESET SAVED STACK
F5C9 7EF478           (       comfile.os):00202                 JMP     CMDEX                             ;EXECUTE IT
                      (       comfile.os):00203         ;* '?A' ADVANCE LINES
F5CC                  (       comfile.os):00204         CMDSKP
F5CC C141             (       comfile.os):00205                 CMPB    #'A'                              ;?A?
F5CE 2613             (       comfile.os):00206                 BNE     CMDKEY                            ;CONTINUE
F5D0 BDE404           (       comfile.os):00207                 JSR     GETNUM                            ;GET # TO SKIP
F5D3 3001             (       comfile.os):00208                 LEAX    1,X                               ;ADVANCE
F5D5                  (       comfile.os):00209         LOCLP
F5D5 301F             (       comfile.os):00210                 LEAX    -1,X                              ;REDUCE COUNT
F5D7 27C4             (       comfile.os):00211                 BEQ     CMDRT1                            ;NEW LINE
F5D9                  (       comfile.os):00212         LOCCR
F5D9 8D48             (       comfile.os):00213                 BSR     RCCHR                             ;READ A CHAR
F5DB 2792             (       comfile.os):00214                 BEQ     CEXI                              ;END OF FILE
F5DD 810D             (       comfile.os):00215                 CMPA    #$0D                              ;END OF LINE?
F5DF 26F8             (       comfile.os):00216                 BNE     LOCCR                             ;NO, KEEP LOOKING
F5E1 20F2             (       comfile.os):00217                 BRA     LOCLP                             ;DO THEM ALL
                      (       comfile.os):00218         ;* '?K' READ SINGLE KEY
F5E3                  (       comfile.os):00219         CMDKEY
F5E3 C14B             (       comfile.os):00220                 CMPB    #'K'                              ;?K?
F5E5 2608             (       comfile.os):00221                 BNE     CMDCMP                            ;NO, TRY COMPARE
F5E7 BDE5CD           (       comfile.os):00222                 JSR     GETCHR                            ;GET SINGLE KEY
F5EA B7DCE8           (       comfile.os):00223                 STA     >CMDRC                            ;SAVE RETURN CODE
F5ED 2031             (       comfile.os):00224                 BRA     CMDRT2                            ;EXIT
                      (       comfile.os):00225         ;* '??' COMPARE STRINGS
F5EF                  (       comfile.os):00226         CMDCMP
F5EF C13F             (       comfile.os):00227                 CMPB    #'?'                              ;???
F5F1 262D             (       comfile.os):00228                 BNE     CMDRT2                            ;IGNORE
F5F3 BDE4CF           (       comfile.os):00229                 JSR     SKIP                              ;TEST FOR EOL
F5F6 2716             (       comfile.os):00230                 BEQ     CMDC3                             ;FAIL
F5F8 1F21             (       comfile.os):00231                 TFR     Y,X                               ;SAVE PTR
F5FA                  (       comfile.os):00232         CMDC1
F5FA A6A0             (       comfile.os):00233                 LDA     ,Y+                               ;GET CHAR
F5FC 810D             (       comfile.os):00234                 CMPA    #$0D                              ;CR?
F5FE 270E             (       comfile.os):00235                 BEQ     CMDC3                             ;FAIL
F600 8120             (       comfile.os):00236                 CMPA    #' '                              ;SPACE?
F602 26F6             (       comfile.os):00237                 BNE     CMDC1                             ;KEEP LOOKING
F604                  (       comfile.os):00238         CMDC2
F604 A680             (       comfile.os):00239                 LDA     ,X+                               ;GET CHAR
F606 8120             (       comfile.os):00240                 CMPA    #' '                              ;SPACE?
F608 2708             (       comfile.os):00241                 BEQ     CMDC4                             ;END
F60A A1A0             (       comfile.os):00242                 CMPA    ,Y+                               ;ARE THEY SAME?
F60C 27F6             (       comfile.os):00243                 BEQ     CMDC2                             ;YES, A-OK
F60E                  (       comfile.os):00244         CMDC3
F60E 86FF             (       comfile.os):00245                 LDA     #255                              ;RETURN CODE
F610 200B             (       comfile.os):00246                 BRA     CMDC6                             ;QUIT
F612                  (       comfile.os):00247         CMDC4
F612 A6A0             (       comfile.os):00248                 LDA     ,Y+                               ;GET CHAR FROM SOURCE
F614 810D             (       comfile.os):00249                 CMPA    #$0D                              ;PASS?
F616 2704             (       comfile.os):00250                 BEQ     CMDC5                             ;YES
F618 8120             (       comfile.os):00251                 CMPA    #' '                              ;SPACE
F61A 26F2             (       comfile.os):00252                 BNE     CMDC3                             ;NO, FAIL
F61C                  (       comfile.os):00253         CMDC5
F61C 4F               (       comfile.os):00254                 CLRA                                      ;ZERO RETURN CODE
F61D                  (       comfile.os):00255         CMDC6
F61D B7DCE8           (       comfile.os):00256                 STA     >CMDRC                            ;SAVE RETURN CODE
F620                  (       comfile.os):00257         CMDRT2
F620 7EF4B1           (       comfile.os):00258                 JMP     NEWLIN                            ;NEXT LINE
                      (       comfile.os):00259         ;* READ A CHARACTER FROM THE COMMAND FILE
F623                  (       comfile.os):00260         RCCHR
F623 3410             (       comfile.os):00261                 PSHS    X                                 ;SAVE X
F625 B6DCE1           (       comfile.os):00262                 LDA     >CMDDRV                           ;GET CMD FILE DRIVE
F628 B7DCEB           (       comfile.os):00263                 STA     >SDRIVE                           ;SET DRIVE
F62B FCDCE4           (       comfile.os):00264                 LDD     >CMDOFF                           ;GET OFFSET
F62E                  (       comfile.os):00265         RCC1
F62E 10830200         (       comfile.os):00266                 CMPD    #512                              ;OVER?
F632 250D             (       comfile.os):00267                 BLO     RCC2                              ;ITS OK
F634 FCDCE2           (       comfile.os):00268                 LDD     >CMDSEC                           ;GET SECTOR
F637 BDE5D2           (       comfile.os):00269                 JSR     FNDLNK                            ;LOOK UP LINK
F63A 271E             (       comfile.os):00270                 BEQ     RCC3                              ;END
F63C FDDCE2           (       comfile.os):00271                 STD     >CMDSEC                           ;RESAVE
F63F 4F               (       comfile.os):00272                 CLRA    ZERO OFFSET
F640 5F               (       comfile.os):00273                 CLRB    FOR READ
F641                  (       comfile.os):00274         RCC2
F641 8EDE00           (       comfile.os):00275                 LDX     #WRKSPC                           ;POINT TO IT
F644 308B             (       comfile.os):00276                 LEAX    D,X                               ;OFFSET
F646 C30001           (       comfile.os):00277                 ADDD    #1                                ;ADVANCE
F649 FDDCE4           (       comfile.os):00278                 STD     >CMDOFF                           ;RESAVE
F64C 3410             (       comfile.os):00279                 PSHS    X                                 ;SAVE REGS
F64E FCDCE2           (       comfile.os):00280                 LDD     >CMDSEC                           ;GET SECTOR
F651 BDE5EF           (       comfile.os):00281                 JSR     RDWRK                             ;READ IT
F654 3510             (       comfile.os):00282                 PULS    X                                 ;RESTORE
F656 A680             (       comfile.os):00283                 LDA     ,X+                               ;GET CHAR
F658 81FF             (       comfile.os):00284                 CMPA    #$FF                              ;END OF FILE
F65A                  (       comfile.os):00285         RCC3
F65A 3590             (       comfile.os):00286                 PULS    X,PC
                      (        cubix.asm):01191         ;*
                      (        cubix.asm):01192         ;* MISC SYSTEM CALLS
                      (        cubix.asm):01193         ;*
                      (        cubix.asm):01194         ;* QUERY CONSOLE INPUT DEVICE
F65C                  (        cubix.asm):01195         REDIN
F65C B6DC6C           (        cubix.asm):01196                 LDA     >CONIN                            ;LOAD DEVICE INPUT VECTOR
F65F 2020             (        cubix.asm):01197                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01198         ;* QUERY CONSOLE OUTPUT DEVICE
F661                  (        cubix.asm):01199         REDOUT
F661 B6DC6D           (        cubix.asm):01200                 LDA     >CONOUT                           ;LOAD DEVICE OUTPUT VECTOR
F664 201B             (        cubix.asm):01201                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01202         ;* SET CONSOLE INPUT DEVICE
F666                  (        cubix.asm):01203         SETIN
F666 3404             (        cubix.asm):01204                 PSHS    B                                 ;SAVE REGISTER
F668 F6DC6C           (        cubix.asm):01205                 LDB     >CONIN                            ;LOAD OLD INPUT DEVICE
F66B B7DC6C           (        cubix.asm):01206                 STA     >CONIN                            ;SAVE NEW INPUT DEVICE
F66E 2008             (        cubix.asm):01207                 BRA     REEXG                             ;SWAP & RETURN
                      (        cubix.asm):01208         ;* SET CONSOLE OUTPUT DEVICE
F670                  (        cubix.asm):01209         SETOUT
F670 3404             (        cubix.asm):01210                 PSHS    B                                 ;SAVE REGISTER
F672 F6DC6D           (        cubix.asm):01211                 LDB     >CONOUT                           ;LOAD OLD OUTPUT DEVICE
F675 B7DC6D           (        cubix.asm):01212                 STA     >CONOUT                           ;SAVE NEW OUTPUT DEVICE
F678                  (        cubix.asm):01213         REEXG
F678 1F98             (        cubix.asm):01214                 TFR     B,A                               ;COPY OLD DEVICE ID TO 'A'
F67A 1A04             (        cubix.asm):01215                 ORCC    #4                                ;SET 'Z' CODE
F67C 3584             (        cubix.asm):01216                 PULS    B,PC                              ;RESTORE & RETURN
                      (        cubix.asm):01217         ;* SELECT DISK DRIVE
F67E                  (        cubix.asm):01218         SELDRV
F67E B7DCEB           (        cubix.asm):01219                 STA     >SDRIVE                           ;SELECT ACTIVE DISK DRIVE
F681                  (        cubix.asm):01220         RETZ
F681 1A04             (        cubix.asm):01221                 ORCC    #4                                ;SET 'Z' CODE
F683 39               (        cubix.asm):01222                 RTS
                      (        cubix.asm):01223         ;* QUERY DEVICE VECTOR
F684                  (        cubix.asm):01224         QVECT
F684 3440             (        cubix.asm):01225                 PSHS    U                                 ;SAVE REGISTER
F686 CEDC6E           (        cubix.asm):01226                 LDU     #DITAB                            ;POINT TO TABLE
F689 48               (        cubix.asm):01227                 LSLA                                      ;X2 FOR WORD ENTRIES
F68A ECC6             (        cubix.asm):01228                 LDD     A,U                               ;GET VECTOR
F68C 200C             (        cubix.asm):01229                 BRA     RETZ1                             ;AND EXIT
                      (        cubix.asm):01230         ;* SET DEVICE VECTOR
F68E                  (        cubix.asm):01231         SVECT
F68E 3440             (        cubix.asm):01232                 PSHS    U                                 ;SAVE REGISTER
F690 CEDC6E           (        cubix.asm):01233                 LDU     #DITAB                            ;POINT TO TABLE
F693 48               (        cubix.asm):01234                 LSLA                                      ;X2  FOR WORD ENTRIES
F694 33C6             (        cubix.asm):01235                 LEAU    A,U                               ;OFFSET TO ENTRY
F696 ECC4             (        cubix.asm):01236                 LDD     ,U                                ;GET OLD VECTOR VALUE
F698 AFC4             (        cubix.asm):01237                 STX     ,U                                ;SET NEW VECTOR VALUE
F69A                  (        cubix.asm):01238         RETZ1
F69A 1A04             (        cubix.asm):01239                 ORCC    #4                                ;SET 'Z' CODE
F69C 35C0             (        cubix.asm):01240                 PULS    U,PC                              ;RESTORE & RETURN
                      (        cubix.asm):01241         ;*
                      (        cubix.asm):01242         ;* PERFORMS 16 BIT MULTIPLICATION (D=X*D)
                      (        cubix.asm):01243         ;*
F69E                  (        cubix.asm):01244         MUL16
F69E 3416             (        cubix.asm):01245                 PSHS    D,X                               ;SAVE PARAMETERS
F6A0 A661             (        cubix.asm):01246                 LDA     1,S
F6A2 E663             (        cubix.asm):01247                 LDB     3,S
F6A4 3D               (        cubix.asm):01248                 MUL
F6A5 3406             (        cubix.asm):01249                 PSHS    A,B                               ;RESAVE
F6A7 A662             (        cubix.asm):01250                 LDA     2,S
F6A9 E665             (        cubix.asm):01251                 LDB     5,S
F6AB 3D               (        cubix.asm):01252                 MUL
F6AC EBE4             (        cubix.asm):01253                 ADDB    ,S
F6AE E7E4             (        cubix.asm):01254                 STB     ,S
F6B0 A663             (        cubix.asm):01255                 LDA     3,S
F6B2 E664             (        cubix.asm):01256                 LDB     4,S
F6B4 3D               (        cubix.asm):01257                 MUL
F6B5 EBE4             (        cubix.asm):01258                 ADDB    ,S
F6B7 E7E4             (        cubix.asm):01259                 STB     ,S
F6B9 3506             (        cubix.asm):01260                 PULS    A,B                               ;GET RESULT
F6BB 3264             (        cubix.asm):01261                 LEAS    4,S                               ;SKIP CRAP
F6BD 39               (        cubix.asm):01262                 RTS
                      (        cubix.asm):01263         ;*
                      (        cubix.asm):01264         ;* PERFORMS 16 BIT DIVISION. (X=X/D, D=REMAINDER)
                      (        cubix.asm):01265         ;*
F6BE                  (        cubix.asm):01266         DIV16
F6BE 3416             (        cubix.asm):01267                 PSHS    D,X
F6C0 CC0000           (        cubix.asm):01268                 LDD     #0
F6C3 8E0011           (        cubix.asm):01269                 LDX     #17
F6C6                  (        cubix.asm):01270         DIV1
F6C6 1CFE             (        cubix.asm):01271                 ANDCC   #$FE
F6C8                  (        cubix.asm):01272         DIV2
F6C8 6963             (        cubix.asm):01273                 ROL     3,S
F6CA 6962             (        cubix.asm):01274                 ROL     2,S
F6CC 301F             (        cubix.asm):01275                 LEAX    -1,X
F6CE 270D             (        cubix.asm):01276                 BEQ     DIV3
F6D0 59               (        cubix.asm):01277                 ROLB
F6D1 49               (        cubix.asm):01278                 ROLA
F6D2 10A3E4           (        cubix.asm):01279                 CMPD    ,S
F6D5 25EF             (        cubix.asm):01280                 BLO     DIV1
F6D7 A3E4             (        cubix.asm):01281                 SUBD    ,S
F6D9 1A01             (        cubix.asm):01282                 ORCC    #1
F6DB 20EB             (        cubix.asm):01283                 BRA     DIV2
F6DD                  (        cubix.asm):01284         DIV3
F6DD 3262             (        cubix.asm):01285                 LEAS    2,S
F6DF 3590             (        cubix.asm):01286                 PULS    X,PC
                      (        cubix.asm):01287         ;* DISK DRIVERS
F6E1                  (        cubix.asm):01288         FORMAT
F6E1 AD9FDC94         (        cubix.asm):01289                 JSR     [XFORMAT]
F6E5                  (        cubix.asm):01290         HOME
F6E5 6F44             (        cubix.asm):01291                 CLR     CYL,U                             ;CYLINDER 0
F6E7 6F45             (        cubix.asm):01292                 CLR     HEAD,U                            ;HEAD 0
F6E9 6F46             (        cubix.asm):01293                 CLR     SEC,U                             ;SECTOR 0
F6EB 6E9FDC8E         (        cubix.asm):01294                 JMP     [XHOME]
F6EF                  (        cubix.asm):01295         RDSEC
F6EF 6E9FDC90         (        cubix.asm):01296                 JMP     [XRDSEC]
F6F3                  (        cubix.asm):01297         WRSEC
F6F3 6E9FDC92         (        cubix.asm):01298                 JMP     [XWRSEC]
                      (        cubix.asm):01299         ;* INTERRUPT HANDLERS
F6F7                  (        cubix.asm):01300         SWI
F6F7 6E9FDC96         (        cubix.asm):01301                 JMP     [SWIVEC]
F6FB                  (        cubix.asm):01302         SWI2
F6FB 6E9FDC98         (        cubix.asm):01303                 JMP     [SWI2VEC]
F6FF                  (        cubix.asm):01304         SWI3
F6FF 6E9FDC9A         (        cubix.asm):01305                 JMP     [SWI3VEC]
F703                  (        cubix.asm):01306         IRQ
F703 6E9FDC9C         (        cubix.asm):01307                 JMP     [IRQVEC]
F707                  (        cubix.asm):01308         FIRQ
F707 6E9FDC9E         (        cubix.asm):01309                 JMP     [FIRQVEC]
F70B                  (        cubix.asm):01310         NMI
F70B 6E9FDCA0         (        cubix.asm):01311                 JMP     [NMIVEC]
                      (        cubix.asm):01312         ;* STRINGS & MESSAGES
F70F                  (        cubix.asm):01313         IPLFILE
F70F 535441525455502E (        cubix.asm):01314                 FCC     'STARTUP.*'
     2A
F718 00               (        cubix.asm):01315                 FCB     $00
F719                  (        cubix.asm):01316         UNCMD
F719 556E7265636F676E (        cubix.asm):01317                 FCC     'Unrecognized command'
     697A656420636F6D
     6D616E64
F72D 00               (        cubix.asm):01318                 FCB     $00
F72E                  (        cubix.asm):01319         BADOPM
F72E 4F706572616E6420 (        cubix.asm):01320                 FCC     'Operand missing or invalid'
     6D697373696E6720
     6F7220696E76616C
     6964
F748 00               (        cubix.asm):01321                 FCB     $00
F749                  (        cubix.asm):01322         NOTMSG
F749 46696C65206E6F74 (        cubix.asm):01323                 FCC     'File not found'
     20666F756E64
F757 00               (        cubix.asm):01324                 FCB     $00
F758                  (        cubix.asm):01325         EXIMSG
F758 46696C6520616C72 (        cubix.asm):01326                 FCC     'File already exists'
     6561647920657869
     737473
F76B 00               (        cubix.asm):01327                 FCB     $00
F76C                  (        cubix.asm):01328         NOSMSG
F76C 496E737566666963 (        cubix.asm):01329                 FCC     'Insufficent disk space'
     656E74206469736B
     207370616365
F782 00               (        cubix.asm):01330                 FCB     $00
F783                  (        cubix.asm):01331         OREMSG
F783 46696C65206E6F74 (        cubix.asm):01332                 FCC     'File not open for read'
     206F70656E20666F
     722072656164
F799 00               (        cubix.asm):01333                 FCB     $00
F79A                  (        cubix.asm):01334         OWEMSG
F79A 46696C65206E6F74 (        cubix.asm):01335                 FCC     'File not open for write'
     206F70656E20666F
     72207772697465
F7B1 00               (        cubix.asm):01336                 FCB     $00
F7B2                  (        cubix.asm):01337         PROMSG
F7B2 46696C652070726F (        cubix.asm):01338                 FCC     'File protection violation'
     74656374696F6E20
     76696F6C6174696F
     6E
F7CB 00               (        cubix.asm):01339                 FCB     $00
F7CC                  (        cubix.asm):01340         DEVMSG
F7CC 496E76616C696420 (        cubix.asm):01341                 FCC     'Invalid device'
     646576696365
F7DA 00               (        cubix.asm):01342                 FCB     $00
F7DB                  (        cubix.asm):01343         DNLMSG
F7DB 446F776E6C6F6164 (        cubix.asm):01344                 FCC     'Download format error'
     20666F726D617420
     6572726F72
F7F0 00               (        cubix.asm):01345                 FCB     $00
                      (        cubix.asm):01346         ;* COMMAND NAME TABLE
F7F1                  (        cubix.asm):01347         CMDNAM
F7F1 84               (        cubix.asm):01348                 FCB     $84
F7F2 464F524D4154     (        cubix.asm):01349                 FCC     'FORMAT'
F7F8 82               (        cubix.asm):01350                 FCB     $82
F7F9 52454144         (        cubix.asm):01351                 FCC     'READ'
F7FD 82               (        cubix.asm):01352                 FCB     $82
F7FE 5752495445       (        cubix.asm):01353                 FCC     'WRITE'
F803 82               (        cubix.asm):01354                 FCB     $82
F804 46494C4553       (        cubix.asm):01355                 FCC     'FILES'
F809 82               (        cubix.asm):01356                 FCB     $82
F80A 435245415445     (        cubix.asm):01357                 FCC     'CREATE'
F810 83               (        cubix.asm):01358                 FCB     $83
F811 44454C455445     (        cubix.asm):01359                 FCC     'DELETE'
F817 82               (        cubix.asm):01360                 FCB     $82
F818 4C4F4144         (        cubix.asm):01361                 FCC     'LOAD'
F81C 82               (        cubix.asm):01362                 FCB     $82
F81D 53415645         (        cubix.asm):01363                 FCC     'SAVE'
F821 82               (        cubix.asm):01364                 FCB     $82
F822 52554E           (        cubix.asm):01365                 FCC     'RUN'
F825 82               (        cubix.asm):01366                 FCB     $82
F826 52455455524E     (        cubix.asm):01367                 FCC     'RETURN'
F82C 82               (        cubix.asm):01368                 FCB     $82
F82D 534554           (        cubix.asm):01369                 FCC     'SET'
F830 82               (        cubix.asm):01370                 FCB     $82
F831 53484F57         (        cubix.asm):01371                 FCC     'SHOW'
F835 82               (        cubix.asm):01372                 FCB     $82
F836 444F574E4C4F4144 (        cubix.asm):01373                 FCC     'DOWNLOAD'
F83E 82               (        cubix.asm):01374                 FCB     $82
F83F 434F4E4E454354   (        cubix.asm):01375                 FCC     'CONNECT'
F846 80               (        cubix.asm):01376                 FCB     $80
                      (        cubix.asm):01377         ;* COMMAND ADDRESS TABLE
F847                  (        cubix.asm):01378         CMDADR
F847 EBF1             (        cubix.asm):01379                 FDB     INIT
F849 ECFA             (        cubix.asm):01380                 FDB     CREAD
F84B ED2A             (        cubix.asm):01381                 FDB     CWRITE
F84D ED5A             (        cubix.asm):01382                 FDB     FILES
F84F ED7E             (        cubix.asm):01383                 FDB     CREFIL
F851 ED95             (        cubix.asm):01384                 FDB     DELFIL
F853 EE48             (        cubix.asm):01385                 FDB     LODFIL
F855 EE79             (        cubix.asm):01386                 FDB     SAVFIL
F857 E1EA             (        cubix.asm):01387                 FDB     RUN
F859 EEDA             (        cubix.asm):01388                 FDB     RETURN
F85B EFF3             (        cubix.asm):01389                 FDB     SET
F85D F12C             (        cubix.asm):01390                 FDB     SHOW
F85F EF01             (        cubix.asm):01391                 FDB     DNLD
F861 EFCF             (        cubix.asm):01392                 FDB     CNCT
     000E             (        cubix.asm):01393         NUMCMD          EQU (*-CMDADR)/2                  ;NUMBER OF COMMANDS
                      (        cubix.asm):01394         ;* APPLICATION PROGRAM INTERFACE ADDRESS TABLE
F863                  (        cubix.asm):01395         SSRTAB
F863 E19F             (        cubix.asm):01396                 FDB     REENT                             ;00-DOS RE-ENTRY
                      (        cubix.asm):01397         ;* PARAM. & LINE INPUT
F865 E498             (        cubix.asm):01398                 FDB     GLINE                             ;01-GET LINE/PROMPT
F867 E495             (        cubix.asm):01399                 FDB     GLFCR                             ;02-GET LINE/NEW LINE
F869 E49D             (        cubix.asm):01400                 FDB     GLNOP                             ;03-GET LINE/NO PROMPT
F86B E4CF             (        cubix.asm):01401                 FDB     SKIP                              ;04-SKIP TO NEXT NON-BLANK, 'Z' IF EOL
F86D E4DC             (        cubix.asm):01402                 FDB     TSTERM                            ;05-GET CHR(Y+), TEST FOR TERMINATOR
F86F E449             (        cubix.asm):01403                 FDB     GETDEC                            ;06-GET DECIMAL NUMBER
F871 E40F             (        cubix.asm):01404                 FDB     GETHEX                            ;07-GET HEX NUMBER
F873 E404             (        cubix.asm):01405                 FDB     GETNUM                            ;08-GET DECIMAL OR HEX VALUE
F875 E36A             (        cubix.asm):01406                 FDB     GETNAM                            ;09-GET FILENAME
F877 E363             (        cubix.asm):01407                 FDB     GETVAL                            ;10-GET & INSURE SINGLE FILE
F879 E289             (        cubix.asm):01408                 FDB     GETSNA                            ;11-GET FILENAME/NO TYPE
F87B E30D             (        cubix.asm):01409                 FDB     GETSYS                            ;12-GET FILENAME/NO TYPE/DEFAULT SYSTEM
F87D E310             (        cubix.asm):01410                 FDB     GETSDI                            ;13-GET FILENAME/NO TYPE/DEFAULT(X)
F87F E3A3             (        cubix.asm):01411                 FDB     GETDIR                            ;14-GET DIRECTORY NAME
F881 E3A6             (        cubix.asm):01412                 FDB     GETDIR1                           ;15-GET DIRECTORY, DEFAULT(X)
F883 E3F2             (        cubix.asm):01413                 FDB     GETDRV                            ;16-GET DRIVE ID
F885 F061             (        cubix.asm):01414                 FDB     GETATR                            ;17-GET ATTRIBUTES
F887 E4F8             (        cubix.asm):01415                 FDB     TLOOK                             ;18-TABLE LOOKUP
F889 E316             (        cubix.asm):01416                 FDB     COMNAM                            ;19-COMPARE NAMES
F88B E34F             (        cubix.asm):01417                 FDB     VALID                             ;20-TEST FOR VALID AS SINGLE?
                      (        cubix.asm):01418         ;* CONSOLE OUTPUT
F88D E585             (        cubix.asm):01419                 FDB     SPACE                             ;21-OUTPUT SPACE
F88F E57B             (        cubix.asm):01420                 FDB     LFCR                              ;22-OUTPUT LFCR
F891 E567             (        cubix.asm):01421                 FDB     WRSTR                             ;23-OUTPUT STRING(X)
F893 E541             (        cubix.asm):01422                 FDB     WRLIN                             ;24-OUTPUT STRING(PC)/NO LFCR
F895 E571             (        cubix.asm):01423                 FDB     WRMSG                             ;25-OUTPUT STRING(PC)/LFCR
F897 E471             (        cubix.asm):01424                 FDB     WRDEC                             ;26-OUTPUT WORD(D) DECIMAL
F899 E538             (        cubix.asm):01425                 FDB     WRHEXW                            ;27-OUTPUT WORD(D) IN HEX
F89B E54D             (        cubix.asm):01426                 FDB     WRHEX                             ;28-OUTPUT BYTE(A) IN HEX
F89D E55B             (        cubix.asm):01427                 FDB     HOUT                              ;29-OUTPUT NIBBLE(A) IN HEX
F89F E6CA             (        cubix.asm):01428                 FDB     SHOSAV                            ;30-DISPLAY SAVED FILENAME
F8A1 E6DD             (        cubix.asm):01429                 FDB     SHONAM                            ;31-DISPLAY FILENAME(X)
F8A3 F25F             (        cubix.asm):01430                 FDB     SHOTAB                            ;32-SHOW TABLE(X) ENTRY(A)
                      (        cubix.asm):01431         ;* SERIAL DEVICE I/O
F8A5 E58D             (        cubix.asm):01432                 FDB     PUTCHR                            ;33-OUTPUT CHAR(A)
F8A7 E5CD             (        cubix.asm):01433                 FDB     GETCHR                            ;34-GET A CHAR
F8A9 E5C6             (        cubix.asm):01434                 FDB     TSTCHR                            ;35-TEST FOR CHAR
F8AB E594             (        cubix.asm):01435                 FDB     WRDEV                             ;36-OUTPUT CHAR(A) TO DEVICE(B)
F8AD E5AF             (        cubix.asm):01436                 FDB     RDDEV                             ;37-GET CHAR FROM DEVICE(B)
F8AF E5B4             (        cubix.asm):01437                 FDB     TSTDEV                            ;38-TEST FOR CHAR FROM DEV(B)
F8B1 F65C             (        cubix.asm):01438                 FDB     REDIN                             ;39-READ INPUT DEVICE NUMBER
F8B3 F661             (        cubix.asm):01439                 FDB     REDOUT                            ;40-READ OUTPUT DEVICE NUMBER
F8B5 F666             (        cubix.asm):01440                 FDB     SETIN                             ;41-SET INPUT DEVICE
F8B7 F670             (        cubix.asm):01441                 FDB     SETOUT                            ;42-SET OUTPUT DEVICE
                      (        cubix.asm):01442         ;* CANNED ERROR MESSAGES
F8B9 E2AB             (        cubix.asm):01443                 FDB     BADOPR                            ;43-OPERAND MISSING OR INVALID
F8BB E650             (        cubix.asm):01444                 FDB     NOTFND                            ;44-FILE NOT FOUND
F8BD E8A0             (        cubix.asm):01445                 FDB     PROERR                            ;45-PROTECTION VIOLATION
F8BF E8A9             (        cubix.asm):01446                 FDB     ORERR                             ;46-FILE NOT OPEN FOR READ
F8C1 E91D             (        cubix.asm):01447                 FDB     OWERR                             ;47-FILE NOT OPEN FOR WRITE
F8C3 E723             (        cubix.asm):01448                 FDB     FEXISTS                           ;48-FILE ALREADY EXISTS
F8C5 E7C6             (        cubix.asm):01449                 FDB     NOSPAC                            ;49-INSUFFICENT DISK SPACE
F8C7 E5A7             (        cubix.asm):01450                 FDB     BADDEV                            ;50-INVALID DEVICE
F8C9 EFA1             (        cubix.asm):01451                 FDB     LODERR                            ;51-DOWNLOAD FORMAT ERROR
F8CB E656             (        cubix.asm):01452                 FDB     FILERR                            ;52-ISSUE ERROR MSG(Y) FOR SAVED FILE
                      (        cubix.asm):01453         ;* FILE I/O
F8CD EE3C             (        cubix.asm):01454                 FDB     BLOAD                             ;53-LOAD COMPLETE FILE TO MEMORY
F8CF EE71             (        cubix.asm):01455                 FDB     BSAVE                             ;54-SAVE COMPLETE FILE FROM MEMORY
F8D1 E7FF             (        cubix.asm):01456                 FDB     OPENR                             ;55-OPEN A FILE FOR READ
F8D3 E8DB             (        cubix.asm):01457                 FDB     OPENW                             ;56-OPEN A FILE FOR WRITE
F8D5 E963             (        cubix.asm):01458                 FDB     CLOSE                             ;57-CLOSE A FILE
F8D7 E86C             (        cubix.asm):01459                 FDB     READB                             ;58-READ BLOCK FROM FILE
F8D9 E821             (        cubix.asm):01460                 FDB     READC                             ;59-READ CHAR FROM FILE
F8DB E925             (        cubix.asm):01461                 FDB     WRITEB                            ;60-WRITE A BLOCK TO FILE
F8DD E8FE             (        cubix.asm):01462                 FDB     WRITEC                            ;61-WRITE A CHAR TO FILE
F8DF E8B6             (        cubix.asm):01463                 FDB     REWIND                            ;62-RESET FILE TO BEGINNING
F8E1 E9B2             (        cubix.asm):01464                 FDB     SEEKREL                           ;63-SEEK RELATIVE POSITION IN FILE
F8E3 E9AF             (        cubix.asm):01465                 FDB     SEEKABS                           ;64-SEEK ABSOLUTE LOCATION IN FILE
F8E5 EA00             (        cubix.asm):01466                 FDB     FTELL                             ;65-RETURN POSITION IN FILE
F8E7 EA2C             (        cubix.asm):01467                 FDB     SUSPEND                           ;66-SUSPEND FILE OPERATIONS
F8E9 EA7E             (        cubix.asm):01468                 FDB     RESUME                            ;67-RESUME FILE OPERATIONS
                      (        cubix.asm):01469         ;* FILE SYSTEM MAINTAINENCE
F8EB E685             (        cubix.asm):01470                 FDB     LOCDIR                            ;68-LOCATE FILE IN DIRECTORY, NO ERROR/MESSAGE
F8ED E64C             (        cubix.asm):01471                 FDB     LOCERR                            ;69-LOCATE FILE IN DIR/ISSUE ERROR IF NOT FOUND
F8EF E896             (        cubix.asm):01472                 FDB     LOCRED                            ;70-LOCATE FILE WITH INTENT TO READ
F8F1 E8C4             (        cubix.asm):01473                 FDB     LOCWRI                            ;71-LOCATE FILE WITH INTENT TO WRITE
F8F3 E717             (        cubix.asm):01474                 FDB     CREATE                            ;72-CREATE A FILE
F8F5 ED98             (        cubix.asm):01475                 FDB     DELETE                            ;73-DELETE A FILE
F8F7 F00C             (        cubix.asm):01476                 FDB     SETDEF                            ;74-SET DEFAULT DIRECTORY
F8F9 F01E             (        cubix.asm):01477                 FDB     SETCMD                            ;75-SET COMMAND DIRECTORY
F8FB F67E             (        cubix.asm):01478                 FDB     SELDRV                            ;76-SET CURRENT OS DRIVE
F8FD E5D2             (        cubix.asm):01479                 FDB     FNDLNK                            ;77-LOCATE LINK FOR SECTOR
F8FF EE60             (        cubix.asm):01480                 FDB     LCHAIN                            ;78-LOAD CHAIN OF SECTOR TO MEMORY
F901 E79D             (        cubix.asm):01481                 FDB     FRESEC                            ;79-ALLOCATE A FREE SECTOR
F903 EDB1             (        cubix.asm):01482                 FDB     UNCHAIN                           ;80-RELEASE SECTOR CHAIN
F905 E708             (        cubix.asm):01483                 FDB     DRVSIZ                            ;81-CALCULATE SIZE OF DISK(A)
F907 E705             (        cubix.asm):01484                 FDB     CURSIZ                            ;82-CALCULATE SIZE OF CURRENT DISK
F909 F34C             (        cubix.asm):01485                 FDB     CALFRE                            ;83-CALCULATE # FREE SECTORS ON DISK
F90B E5EF             (        cubix.asm):01486                 FDB     RDWRK                             ;84-READ WORK SECTOR INTO DOS
F90D E794             (        cubix.asm):01487                 FDB     CHGWRK                            ;85-INDICATE WORK SECTOR CHANGED
F90F E626             (        cubix.asm):01488                 FDB     WRTST                             ;86-WRITE WORK SECTOR IF UPDATED
F911 E62B             (        cubix.asm):01489                 FDB     WRWRK                             ;87-WRITE WORK SECTOR UNCONDITIONALLY
F913 E616             (        cubix.asm):01490                 FDB     PURGE                             ;88-CLEAR WORK SECTOR & FORCE READ
F915 EAFC             (        cubix.asm):01491                 FDB     GETCTL1                           ;89-GET CONTROL BLOCK
F917 EAF9             (        cubix.asm):01492                 FDB     GETCTL                            ;90-GET CTRL BLK FOR SELECTED
F919 EAB2             (        cubix.asm):01493                 FDB     SECTOR                            ;91-SET UP CTRL-BLOCK FROM DISK ID
F91B EAD2             (        cubix.asm):01494                 FDB     RDISK                             ;92-READ SECTOR(D) TO MEM(X) FROM DISK
F91D EB05             (        cubix.asm):01495                 FDB     WDISK                             ;93-WRITE SECTOR(D) FROM MEM(X) TO DISK
F91F E6A9             (        cubix.asm):01496                 FDB     DISDIR                            ;94-DISPLAY DISK DIRECTORY
                      (        cubix.asm):01497         ;* DIRECT DISK ACCESS
F921 E004             (        cubix.asm):01498                 FDB     DOINIT                            ;95-INIT HARDWARE
F923 F6E5             (        cubix.asm):01499                 FDB     HOME                              ;96-HOME HEAD ON DISK
F925 F6EF             (        cubix.asm):01500                 FDB     RDSEC                             ;97-READ SECTOR FROM TRACK
F927 F6F3             (        cubix.asm):01501                 FDB     WRSEC                             ;98-WRITE SECTOR FROM TRACK
F929 F6E1             (        cubix.asm):01502                 FDB     FORMAT                            ;99-FORMAT DISK
                      (        cubix.asm):01503         ;* MISC DOS ROUTINES
F92B E1C0             (        cubix.asm):01504                 FDB     EXECMD                            ;100-EXECUTE DOS COMMAND
F92D E1B5             (        cubix.asm):01505                 FDB     TMPENT                            ;101-TEMPORARY DOS ENTRY
F92F F684             (        cubix.asm):01506                 FDB     QVECT                             ;102-QUERY DEVICE VECTOR
F931 F68E             (        cubix.asm):01507                 FDB     SVECT                             ;103-SET DEVICE VECTOR
F933 F110             (        cubix.asm):01508                 FDB     SETFLG                            ;104-SET FLAG
F935 F116             (        cubix.asm):01509                 FDB     CLRFLG                            ;105-CLEAR FLAG
F937 F5AF             (        cubix.asm):01510                 FDB     SAVPRM                            ;106-SET COMMAND FILE PARAMETERS
F939 F69E             (        cubix.asm):01511                 FDB     MUL16                             ;107-16 BIT MULTIPLY (D=X*D)
F93B F6BE             (        cubix.asm):01512                 FDB     DIV16                             ;108-16 BIT DIVISION (X=X/D, D=REMAINDER)
F93D E08A             (        cubix.asm):01513                 FDB     DMPREG                            ;109-DISPLAY REGISTERS
F93F EF49             (        cubix.asm):01514                 FDB     DNLDEV                            ;110-DOWNLOAD FROM DEVICE
     006F             (        cubix.asm):01515         NUMSSR          EQU (*-SSRTAB)/2                  ;# SSR'S IMPLEMENTED
                      (        cubix.asm):01516         ;*
                      (        cubix.asm):01517         ;* HARDWARE DEPENDANT I/O DRIVERS
                      (        cubix.asm):01518         ;*
                      (        cubix.asm):01519                 IFDEF   nhyodyne
                      (        cubix.asm):01520                 INCLUDE ../nhyodyne/drivers.asm
                      (../nhyodyne/drive):00001         ;       TITLE   I/O DRIVERS
                      (../nhyodyne/drive):00002         ;***************************************************************
                      (../nhyodyne/drive):00003         ;*     Sample I/O drivers for the CUBIX operating system.      *
                      (../nhyodyne/drive):00004         ;*-------------------------------------------------------------*
                      (../nhyodyne/drive):00005         ;* The drivers are designed to deal with four 6551 type serial *
                      (../nhyodyne/drive):00006         ;* devices, and a 765 type floppy disk controller controlling  *
                      (../nhyodyne/drive):00007         ;* up to four standard 40 track single or double sided floppy  *
                      (../nhyodyne/drive):00008         ;* diskette drives.                                            *
                      (../nhyodyne/drive):00009         ;*-------------------------------------------------------------*
                      (../nhyodyne/drive):00010         ;* Although these drivers are fully functional and may be used *
                      (../nhyodyne/drive):00011         ;* in a port of the system, their primary purpose is intended  *
                      (../nhyodyne/drive):00012         ;* to be as an example of CUBIX to I/O driver interfaceing. As *
                      (../nhyodyne/drive):00013         ;* such the device control side of the drivers (Which will be  *
                      (../nhyodyne/drive):00014         ;* VERY system specific) has been kept very simple and easy to *
                      (../nhyodyne/drive):00015         ;* follow. In particular, no interrupt lines are used, and all *
                      (../nhyodyne/drive):00016         ;* I/O operations are accomplished via software polling.       *
                      (../nhyodyne/drive):00017         ;*-------------------------------------------------------------*
                      (../nhyodyne/drive):00018         ;*             Copyright 1983-2004 Dave Dunfield               *
                      (../nhyodyne/drive):00019         ;***************************************************************
                      (../nhyodyne/drive):00020         ;*
                      (../nhyodyne/drive):00021         ;* CUBIX SYSTEM ADDRESSES
                      (../nhyodyne/drive):00022         ;*
     E99F             (../nhyodyne/drive):00023         DRIVERS         EQU $E99F               FIRST FREE LOCATION IN ROM
                      (../nhyodyne/drive):00024         ;* $E99F FOR NO VDU, $E09F FOR VDU
                      (../nhyodyne/drive):00025         
                      (../nhyodyne/drive):00026         ;*
                      (../nhyodyne/drive):00027         ;* DISK CONTROL BLOCK FORMAT
                      (../nhyodyne/drive):00028         ;*
                      (../nhyodyne/drive):00029         ;       ORG     0
                      (../nhyodyne/drive):00030         ;DRIVE  RMB     1               DRIVE ID (ADDRESS)
                      (../nhyodyne/drive):00031         ;NCYL   RMB     1               NUMBER OF CYLINDERS
                      (../nhyodyne/drive):00032         ;NHEAD  RMB     1               NUMBER OF HEADS
                      (../nhyodyne/drive):00033         ;NSEC   RMB     1               NUMBER OF SECTORS/TRACK
                      (../nhyodyne/drive):00034         ;CYL    RMB     1               CURRENT CYLINDER
                      (../nhyodyne/drive):00035         ;HEAD   RMB     1               CURRENT HEAD
                      (../nhyodyne/drive):00036         ;SEC    RMB     1               CURRENT SECTOR
                      (../nhyodyne/drive):00037         ;*
                      (../nhyodyne/drive):00038         ;*
                      (../nhyodyne/drive):00039         ;* INITIALIZE SYSTEM HARDWARE. ON ENTRY 'Y'
                      (../nhyodyne/drive):00040         ;* POINTS TO SYSTEM TABLE TO BE FILLED IN.
                      (../nhyodyne/drive):00041         ;*
                      (../nhyodyne/drive):00042         ;* INITIALIZE CUBIX SYSTEM TABLE
F941                  (../nhyodyne/drive):00043         HWINIT
F941 8EFF09           (../nhyodyne/drive):00044                 LDX     #RITAB                            ;POINT TO OUR TABLE
F944 C667             (../nhyodyne/drive):00045                 LDB     #RISIZ                            ;SIZE OF TABLE
F946                  (../nhyodyne/drive):00046         HWIN1
F946 A680             (../nhyodyne/drive):00047                 LDA     ,X+                               ;GET A BYTE FROM TABLE
F948 A7A0             (../nhyodyne/drive):00048                 STA     ,Y+                               ;WRITE IT TO CUBIX RAM
F94A 5A               (../nhyodyne/drive):00049                 DECB                                      ;REDUCE COUNT
F94B 26F9             (../nhyodyne/drive):00050                 BNE     HWIN1                             ;MOVE ENTIRE TABLE
                      (../nhyodyne/drive):00051         
F94D BDF963           (../nhyodyne/drive):00052                 JSR     SERIALINIT
F950 BDF98D           (../nhyodyne/drive):00053                 JSR     PPIDE_INIT
                      (../nhyodyne/drive):00054         ;*      JSR     SETUPDRIVE
F953 39               (../nhyodyne/drive):00055                 RTS
                      (../nhyodyne/drive):00056         
                      (../nhyodyne/drive):00057         ;* NULL DEVICE DRIVERS
F954                  (../nhyodyne/drive):00058         RDNULL
F954 86FF             (../nhyodyne/drive):00059                 LDA     #$FF                              ;INDICATE NO CHARACTER
F956                  (../nhyodyne/drive):00060         WRNULL
F956 39               (../nhyodyne/drive):00061                 RTS     IGNORE OPERATION
                      (../nhyodyne/drive):00062         
                      (../nhyodyne/drive):00063         ;*
                      (../nhyodyne/drive):00064         ;* FORMAT DISK ('U' POINTS TO DCB), INTERLEAVE FACTOR IN 'A'
                      (../nhyodyne/drive):00065         ;*
F957                  (../nhyodyne/drive):00066         DFORMAT
                      (../nhyodyne/drive):00067         ;*      LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00068         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00069         ;*      BNE     NOTFDB                  ;
                      (../nhyodyne/drive):00070         ;*      JMP     FORMFL                  ; DIRECT ATTACHED FLOPPY FORMAT
                      (../nhyodyne/drive):00071         ;*NOTFDB:
F957 39               (../nhyodyne/drive):00072                 RTS
                      (../nhyodyne/drive):00073         
                      (../nhyodyne/drive):00074         ;*
                      (../nhyodyne/drive):00075         ;* HOME HEAD ON DRIVE ('U' POINTS TO DCB)
                      (../nhyodyne/drive):00076         ;*
F958                  (../nhyodyne/drive):00077         DHOME
                      (../nhyodyne/drive):00078         ;*      LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00079         ;*      CMPA    #$01                    ; DRIVE A?
                      (../nhyodyne/drive):00080         ;*      BNE     NOTHDB                  ;
                      (../nhyodyne/drive):00081         ;*      LDAA    #$00
                      (../nhyodyne/drive):00082         ;*      JMP     SETTRACK                ; DIRECT ATTACHED FLOPPY HOME
                      (../nhyodyne/drive):00083         ;*NOTHDB:
F958 8603             (../nhyodyne/drive):00084                 LDA     #$03                              ; HOME DISK
                      (../nhyodyne/drive):00085         ;       JSR     ECB_OUTCHAR             ;
                      (../nhyodyne/drive):00086         ;       LDA     DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00087         ;       JSR     ECB_ENC_OUTCHAR         ; SEND TO Z80
F95A 39               (../nhyodyne/drive):00088                 RTS
                      (../nhyodyne/drive):00089         
                      (../nhyodyne/drive):00090         
                      (../nhyodyne/drive):00091         ;*
                      (../nhyodyne/drive):00092         ;* READ A SECTOR, FROM DISK ('U' POINTS TO DCB) TO MEMORY(X)
                      (../nhyodyne/drive):00093         ;*
F95B                  (../nhyodyne/drive):00094         DRDSEC
                      (../nhyodyne/drive):00095         ;*      JSR     SEGDISPLAY
                      (../nhyodyne/drive):00096         
                      (../nhyodyne/drive):00097         ;       LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00098         ;*      CMPA    #$00                    ; DRIVE A?
                      (../nhyodyne/drive):00099         ;*      BNE     NOTRDA                  ;
                      (../nhyodyne/drive):00100         ;JMP    Z80RDRIVE               ; USE Z80 A:
                      (../nhyodyne/drive):00101         ;*NOTRDA
                      (../nhyodyne/drive):00102         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00103         ;*      BNE     NOTRDB                  ;
                      (../nhyodyne/drive):00104         ;*      JMP     READFL                  ; USE DIRECT ATTACHED FLOPPY
                      (../nhyodyne/drive):00105         ;*NOTRDB
                      (../nhyodyne/drive):00106         ;*      CMPA    #$02                    ; DRIVE C?
                      (../nhyodyne/drive):00107         ;*      BNE     NOTRDC                  ;
                      (../nhyodyne/drive):00108         ;*      JMP     Z80RDRIVE               ; USE Z80 C:
                      (../nhyodyne/drive):00109         ;*NOTRDC
F95B 8103             (../nhyodyne/drive):00110                 CMPA    #$03                              ; DRIVE D?
F95D 2603             (../nhyodyne/drive):00111                 BNE     NOTRDD                            ;
F95F 7EFA95           (../nhyodyne/drive):00112                 JMP     IDE_READ_SECTOR                   ; USE DIRECT ATTACHED IDE
F962                  (../nhyodyne/drive):00113         NOTRDD
F962 39               (../nhyodyne/drive):00114                 RTS
                      (../nhyodyne/drive):00115         
                      (../nhyodyne/drive):00116         
                      (../nhyodyne/drive):00117         ;*
                      (../nhyodyne/drive):00118         ;* WRITE A SECTOR TO DISK ('U' POINTS TO DCB) FROM MEMORY(X)
                      (../nhyodyne/drive):00119         ;*
F963                  (../nhyodyne/drive):00120         DWRSEC
                      (../nhyodyne/drive):00121         ;*      JSR     SEGDISPLAY
                      (../nhyodyne/drive):00122         ;       LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00123         ;*      CMPA    #$00                    ; DRIVE A?
                      (../nhyodyne/drive):00124         ;*      BNE     NOTWDA                  ;
                      (../nhyodyne/drive):00125         ;       JMP     Z80WDRIVE               ; USE Z80 A:
                      (../nhyodyne/drive):00126         ;*NOTWDA
                      (../nhyodyne/drive):00127         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00128         ;*      BNE     NOTWDB                  ;
                      (../nhyodyne/drive):00129         ;*      JMP     WRITEFL                 ; USE DIRECT ATTACHED FLOPPY
                      (../nhyodyne/drive):00130         ;*NOTWDB
                      (../nhyodyne/drive):00131         ;*      CMPA    #$02                    ; DRIVE C?
                      (../nhyodyne/drive):00132         ;*      BNE     NOTWDC                  ;
                      (../nhyodyne/drive):00133         ;*      JMP     Z80WDRIVE               ; USE Z80 C:
                      (../nhyodyne/drive):00134         ;*NOTWDC
                      (../nhyodyne/drive):00135         ;*      CMPA    #$03                    ; DRIVE D?
                      (../nhyodyne/drive):00136         ;*      BNE     NOTWDD                  ;
                      (../nhyodyne/drive):00137         ;*      JMP     IDE_WRITE_SECTOR        ; USE DIRECT ATTACHED IDE
                      (../nhyodyne/drive):00138         ;*NOTWDD
                      (../nhyodyne/drive):00139         ;*      RTS
                      (../nhyodyne/drive):00140         
                      (../nhyodyne/drive):00141         
                      (../nhyodyne/drive):00142                 INCLUDE ../nhyodyne/cubix_serial.asm
                      (../nhyodyne/cubix):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00002         ;
                      (../nhyodyne/cubix):00003         ;       CUBIX serial drivers for 6809 IO card
                      (../nhyodyne/cubix):00004         ;
                      (../nhyodyne/cubix):00005         ;       Entry points:
                      (../nhyodyne/cubix):00006         ;               SERIALINIT  - called during OS init
                      (../nhyodyne/cubix):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      (../nhyodyne/cubix):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      (../nhyodyne/cubix):00009         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00010         ;
                      (../nhyodyne/cubix):00011         ;*
                      (../nhyodyne/cubix):00012         ;*        HARDWARE I/O ADDRESSES
                      (../nhyodyne/cubix):00013         ;*
                      (../nhyodyne/cubix):00014         ; UART 16C550 SERIAL
     FE68             (../nhyodyne/cubix):00015         UART0           EQU $FE68                         ; DATA IN/OUT
     FE69             (../nhyodyne/cubix):00016         UART1           EQU $FE69                         ; CHECK RX
     FE6A             (../nhyodyne/cubix):00017         UART2           EQU $FE6A                         ; INTERRUPTS
     FE6B             (../nhyodyne/cubix):00018         UART3           EQU $FE6B                         ; LINE CONTROL
     FE6C             (../nhyodyne/cubix):00019         UART4           EQU $FE6C                         ; MODEM CONTROL
     FE6D             (../nhyodyne/cubix):00020         UART5           EQU $FE6D                         ; LINE STATUS
     FE6E             (../nhyodyne/cubix):00021         UART6           EQU $FE6E                         ; MODEM STATUS
     FE6F             (../nhyodyne/cubix):00022         UART7           EQU $FE6F                         ; SCRATCH REG.
                      (../nhyodyne/cubix):00023         
                      (../nhyodyne/cubix):00024         
                      (../nhyodyne/cubix):00025         ;__SERIALINIT____________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00026         ;
                      (../nhyodyne/cubix):00027         ;       INITIALIZE SERIAL PORTS
                      (../nhyodyne/cubix):00028         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00029         ;
F963                  (../nhyodyne/cubix):00030         SERIALINIT:
                      (../nhyodyne/cubix):00031         ; these are all set by CP/M prior to activating the 6809 card. If 6809 is the primary CPU, these need to be set
                      (../nhyodyne/cubix):00032         ;       LDA             #$80            ;
                      (../nhyodyne/cubix):00033         ;       STA             UART3           ; SET DLAB FLAG
                      (../nhyodyne/cubix):00034         ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (../nhyodyne/cubix):00035         ;       STA             UART0           ; save baud rate
                      (../nhyodyne/cubix):00036         ;       LDA             #00                     ;
                      (../nhyodyne/cubix):00037         ;       STA             UART1           ;
                      (../nhyodyne/cubix):00038         ;       LDA             #03                     ;
                      (../nhyodyne/cubix):00039         ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (../nhyodyne/cubix):00040         ;       STA             UART4           ;
F963 39               (../nhyodyne/cubix):00041                 RTS
                      (../nhyodyne/cubix):00042         
                      (../nhyodyne/cubix):00043         
                      (../nhyodyne/cubix):00044         
                      (../nhyodyne/cubix):00045         ;__WRSER1________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00046         ;
                      (../nhyodyne/cubix):00047         ;       WRITE CHARACTER(A) TO UART
                      (../nhyodyne/cubix):00048         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00049         ;
F964                  (../nhyodyne/cubix):00050         WRSER1
F964 3404             (../nhyodyne/cubix):00051                 PSHS    B
                      (../nhyodyne/cubix):00052         !
F966 F6FE6D           (../nhyodyne/cubix):00053                 LDB     UART5                             ; READ LINE STATUS REGISTER
F969 C420             (../nhyodyne/cubix):00054                 ANDB    #$20                              ; TEST IF UART IS READY TO SEND (BIT 5)
F96B C100             (../nhyodyne/cubix):00055                 CMPB    #$00
F96D 27F7             (../nhyodyne/cubix):00056                 BEQ     <                                 ; IF NOT REPEAT
F96F B7FE68           (../nhyodyne/cubix):00057                 STA     UART0                             ; THEN WRITE THE CHAR TO UART
F972 3584             (../nhyodyne/cubix):00058                 PULS    B,PC
                      (../nhyodyne/cubix):00059         
                      (../nhyodyne/cubix):00060         ;__RDSER1________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00061         ;
                      (../nhyodyne/cubix):00062         ;       READ CHARACTER FROM UART TO (A)
                      (../nhyodyne/cubix):00063         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00064         ;
F974                  (../nhyodyne/cubix):00065         RDSER1
F974 B6FE6D           (../nhyodyne/cubix):00066                 LDA     UART5                             ; READ LINE STATUS REGISTER
F977 8401             (../nhyodyne/cubix):00067                 ANDA    #$01                              ; TEST IF DATA IN RECEIVE BUFFER
F979 8100             (../nhyodyne/cubix):00068                 CMPA    #$00
F97B 2706             (../nhyodyne/cubix):00069                 BEQ     RDSER1N                           ; NO DATA
F97D B6FE68           (../nhyodyne/cubix):00070                 LDA     UART0                             ; THEN READ THE CHAR FROM THE UART
F980 1A04             (../nhyodyne/cubix):00071                 ORCC    #%00000100                        ; SET 'Z'
F982 39               (../nhyodyne/cubix):00072                 RTS
F983                  (../nhyodyne/cubix):00073         RDSER1N
F983 86FF             (../nhyodyne/cubix):00074                 LDA     #$FF                              ;
F985 39               (../nhyodyne/cubix):00075                 RTS                                       ;
                      (../nhyodyne/drive):00143                 INCLUDE ../nhyodyne/cubix_ide.asm
                      (../nhyodyne/cubix):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00002         ;
                      (../nhyodyne/cubix):00003         ;       CUBIX IDE disk drivers for direct attached disk-io card
                      (../nhyodyne/cubix):00004         ;
                      (../nhyodyne/cubix):00005         ;       Entry points:
                      (../nhyodyne/cubix):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (../nhyodyne/cubix):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (../nhyodyne/cubix):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (../nhyodyne/cubix):00009         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00010         ;
     FE60             (../nhyodyne/cubix):00011         PPIDE_PPI       = $FE60                           ; PORT A
                      (../nhyodyne/cubix):00012         ;
     FE60             (../nhyodyne/cubix):00013         PPIDELO         = PPIDE_PPI+0                     ; LSB
     FE61             (../nhyodyne/cubix):00014         PPIDEHI         = PPIDE_PPI+1                     ; MSB
     FE62             (../nhyodyne/cubix):00015         PPIDECNTRL      = PPIDE_PPI+2                     ; CONTROL SIGNALS
     FE63             (../nhyodyne/cubix):00016         PPIDEPPIC       = PPIDE_PPI+3                     ; CONTROL BYTE PPI 82C55
                      (../nhyodyne/cubix):00017         
     0001             (../nhyodyne/cubix):00018         PPIDE_A0_LINE   = $01                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (../nhyodyne/cubix):00019         PPIDE_A1_LINE   = $02                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (../nhyodyne/cubix):00020         PPIDE_A2_LINE   = $04                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (../nhyodyne/cubix):00021         PPIDE_CS0_LINE  = $08                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (../nhyodyne/cubix):00022         PPIDE_CS1_LINE  = $10                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (../nhyodyne/cubix):00023         PPIDE_WR_LINE   = $20                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (../nhyodyne/cubix):00024         PPIDE_RD_LINE   = $40                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (../nhyodyne/cubix):00025         PPIDE_RST_LINE  = $80                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (../nhyodyne/cubix):00026         
     0008             (../nhyodyne/cubix):00027         PPIDE_DATA      = PPIDE_CS0_LINE
     0009             (../nhyodyne/cubix):00028         PPIDE_ERR       = PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (../nhyodyne/cubix):00029         PPIDE_SEC_CNT   = PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (../nhyodyne/cubix):00030         PPIDE_LBALOW    = PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (../nhyodyne/cubix):00031         PPIDE_LBAMID    = PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (../nhyodyne/cubix):00032         PPIDE_LBAHI     = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (../nhyodyne/cubix):00033         PPIDE_DEVICE    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (../nhyodyne/cubix):00034         PPIDE_COMMAND   = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (../nhyodyne/cubix):00035         PPIDE_STATUS    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (../nhyodyne/cubix):00036         PPIDE_CONTROL   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (../nhyodyne/cubix):00037         PPIDE_ASTATUS   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (../nhyodyne/cubix):00038         
                      (../nhyodyne/cubix):00039         
                      (../nhyodyne/cubix):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (../nhyodyne/cubix):00041         PPIDE_CMD_RECAL = $10
     0020             (../nhyodyne/cubix):00042         PPIDE_CMD_READ  = $20
     0030             (../nhyodyne/cubix):00043         PPIDE_CMD_WRITE = $30
     0091             (../nhyodyne/cubix):00044         PPIDE_CMD_INIT  = $91
     00EC             (../nhyodyne/cubix):00045         PPIDE_CMD_ID    = $EC
     00E0             (../nhyodyne/cubix):00046         PPIDE_CMD_SPINDOWN = $E0
     00E1             (../nhyodyne/cubix):00047         PPIDE_CMD_SPINUP = $E1
                      (../nhyodyne/cubix):00048         
                      (../nhyodyne/cubix):00049         
     0092             (../nhyodyne/cubix):00050         PPRD_IDE_8255   = %10010010                       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (../nhyodyne/cubix):00051         PPWR_IDE_8255   = %10000000                       ;ALL THREE PORTS OUTPUT
                      (../nhyodyne/cubix):00052         
                      (../nhyodyne/cubix):00053         
F986                  (../nhyodyne/cubix):00054         PPIDEINDEX:
F986 00               (../nhyodyne/cubix):00055                 .BYTE   $00
F987                  (../nhyodyne/cubix):00056         PPIDETIMEOUT:
F987 0000             (../nhyodyne/cubix):00057                 .BYTE   $00,$00
F989                  (../nhyodyne/cubix):00058         PPIDEWORKVAR:
F989 0000             (../nhyodyne/cubix):00059                 .BYTE   $00,$00
F98B                  (../nhyodyne/cubix):00060         CURDRVADDRESS:
F98B 00               (../nhyodyne/cubix):00061                 .BYTE   $00
F98C                  (../nhyodyne/cubix):00062         CURDRVSLICE:
F98C 00               (../nhyodyne/cubix):00063                 .BYTE   $00
     0400             (../nhyodyne/cubix):00064         HSTBUF          = $0400
                      (../nhyodyne/cubix):00065         
                      (../nhyodyne/cubix):00066         ;__PPIDE_INIT_________________________________________________________________________________________
                      (../nhyodyne/cubix):00067         ;
                      (../nhyodyne/cubix):00068         ;  INIT AND DISPLAY IDE INFO
                      (../nhyodyne/cubix):00069         ;____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00070         ;
F98D                  (../nhyodyne/cubix):00071         PPIDE_INIT:
F98D BDE57B           (../nhyodyne/cubix):00072                 JSR     LFCR                              ; AND CRLF
F990 BDE57B           (../nhyodyne/cubix):00073                 JSR     LFCR                              ; AND CRLF
F993 8EFBDE           (../nhyodyne/cubix):00074                 LDX     #MESSAGE1
F996 BDE567           (../nhyodyne/cubix):00075                 JSR     WRSTR                             ; DO PROMPT
F999 BDE57B           (../nhyodyne/cubix):00076                 JSR     LFCR                              ; AND CRLF
F99C BDFA87           (../nhyodyne/cubix):00077                 JSR     IDE_PPIDETECT                     ; TEST FOR PPI HARDWARE
F99F 261A             (../nhyodyne/cubix):00078                 BNE     IDE_ABORT                         ; BAIL OUT IF NOT THERE
                      (../nhyodyne/cubix):00079         ;
F9A1 8EFBE6           (../nhyodyne/cubix):00080                 LDX     #MESSAGE2
F9A4 BDE567           (../nhyodyne/cubix):00081                 JSR     WRSTR                             ; DO PROMPT
F9A7 CCFE60           (../nhyodyne/cubix):00082                 LDD     #PPIDE_PPI                        ; GET BASE PORT
F9AA FDF989           (../nhyodyne/cubix):00083                 STD     PPIDEWORKVAR
F9AD BDE538           (../nhyodyne/cubix):00084                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (../nhyodyne/cubix):00085         ;
F9B0 BDFAD1           (../nhyodyne/cubix):00086                 JSR     PPIDE_RESET                       ; RESET THE BUS
F9B3 BDF9E1           (../nhyodyne/cubix):00087                 JSR     PPIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
F9B6 2503             (../nhyodyne/cubix):00088                 BCS     IDE_ABORT
F9B8 7EF9C4           (../nhyodyne/cubix):00089                 JMP     IDE_PRINT_INFO
F9BB                  (../nhyodyne/cubix):00090         IDE_ABORT:
F9BB 8EFBED           (../nhyodyne/cubix):00091                 LDX     #MESSAGE3
F9BE BDE567           (../nhyodyne/cubix):00092                 JSR     WRSTR                             ; DO PROMPT
F9C1 7EF9DD           (../nhyodyne/cubix):00093                 JMP     IDE_INITA
F9C4                  (../nhyodyne/cubix):00094         IDE_PRINT_INFO:
F9C4 BDE57B           (../nhyodyne/cubix):00095                 JSR     LFCR                              ; AND CRLF
F9C7 8EFBFA           (../nhyodyne/cubix):00096                 LDX     #MESSAGE4
F9CA BDE567           (../nhyodyne/cubix):00097                 JSR     WRSTR                             ; DO PROMPT
F9CD 8600             (../nhyodyne/cubix):00098                 LDA     #$00
F9CF BDFA2C           (../nhyodyne/cubix):00099                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
F9D2 8EFC0B           (../nhyodyne/cubix):00100                 LDX     #MESSAGE5
F9D5 BDE567           (../nhyodyne/cubix):00101                 JSR     WRSTR                             ; DO PROMPT
F9D8 8601             (../nhyodyne/cubix):00102                 LDA     #$01
F9DA BDFA2C           (../nhyodyne/cubix):00103                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
F9DD                  (../nhyodyne/cubix):00104         IDE_INITA:
F9DD BDE57B           (../nhyodyne/cubix):00105                 JSR     LFCR                              ; AND CRLF
F9E0 39               (../nhyodyne/cubix):00106                 RTS                                       ; DONE
                      (../nhyodyne/cubix):00107         ;
                      (../nhyodyne/cubix):00108         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (../nhyodyne/cubix):00109         ;
                      (../nhyodyne/cubix):00110         ;  PROBE FOR IDE HARDWARE
                      (../nhyodyne/cubix):00111         ;____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00112         ;
F9E1                  (../nhyodyne/cubix):00113         PPIDE_PROBE:
                      (../nhyodyne/cubix):00114         ;
                      (../nhyodyne/cubix):00115         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (../nhyodyne/cubix):00116         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (../nhyodyne/cubix):00117         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (../nhyodyne/cubix):00118         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (../nhyodyne/cubix):00119         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (../nhyodyne/cubix):00120         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (../nhyodyne/cubix):00121         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (../nhyodyne/cubix):00122         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (../nhyodyne/cubix):00123         
F9E1 8600             (../nhyodyne/cubix):00124                 LDA     #$00
F9E3 B7FE60           (../nhyodyne/cubix):00125                 STA     PPIDELO                           ; PPI PORT A, DATALO
                      (../nhyodyne/cubix):00126         
F9E6 BDFAE6           (../nhyodyne/cubix):00127                 JSR     IDE_WAIT_NOT_BUSY                 ; WAIT FOR BUSY TO CLEAR
F9E9 253E             (../nhyodyne/cubix):00128                 BCS     PPIDE_PROBE_FAIL                  ; IF TIMEOUT, REPORT NO IDE PRESENT
F9EB 860F             (../nhyodyne/cubix):00129                 LDA     #PPIDE_STATUS                     ; GET STATUS
F9ED BDFB7B           (../nhyodyne/cubix):00130                 JSR     IDE_READ
F9F0 1F18             (../nhyodyne/cubix):00131                 TFR     X,A
F9F2 8440             (../nhyodyne/cubix):00132                 ANDA    #%01000000
F9F4 8100             (../nhyodyne/cubix):00133                 CMPA    #$00
F9F6 2731             (../nhyodyne/cubix):00134                 BEQ     PPIDE_PROBE_FAIL                  ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (../nhyodyne/cubix):00135         
                      (../nhyodyne/cubix):00136         ; CHECK SIGNATURE
F9F8 860A             (../nhyodyne/cubix):00137                 LDA     #PPIDE_SEC_CNT
F9FA BDFB7B           (../nhyodyne/cubix):00138                 JSR     IDE_READ
F9FD 1F18             (../nhyodyne/cubix):00139                 TFR     X,A
F9FF 8101             (../nhyodyne/cubix):00140                 CMPA    #$01
FA01 2626             (../nhyodyne/cubix):00141                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
FA03 860B             (../nhyodyne/cubix):00142                 LDA     #PPIDE_LBALOW
FA05 BDFB7B           (../nhyodyne/cubix):00143                 JSR     IDE_READ
FA08 1F18             (../nhyodyne/cubix):00144                 TFR     X,A
FA0A 8101             (../nhyodyne/cubix):00145                 CMPA    #$01
FA0C 261B             (../nhyodyne/cubix):00146                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
FA0E 860C             (../nhyodyne/cubix):00147                 LDA     #PPIDE_LBAMID
FA10 BDFB7B           (../nhyodyne/cubix):00148                 JSR     IDE_READ
FA13 1F18             (../nhyodyne/cubix):00149                 TFR     X,A
FA15 8100             (../nhyodyne/cubix):00150                 CMPA    #$00
FA17 2610             (../nhyodyne/cubix):00151                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
FA19 860D             (../nhyodyne/cubix):00152                 LDA     #PPIDE_LBAHI
FA1B BDFB7B           (../nhyodyne/cubix):00153                 JSR     IDE_READ
FA1E 1F18             (../nhyodyne/cubix):00154                 TFR     X,A
FA20 8100             (../nhyodyne/cubix):00155                 CMPA    #$00
FA22 2605             (../nhyodyne/cubix):00156                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
FA24 1CFE             (../nhyodyne/cubix):00157                 CLC
FA26 7EFA2B           (../nhyodyne/cubix):00158                 JMP     PPIDE_PROBE_SUCCESS
FA29                  (../nhyodyne/cubix):00159         PPIDE_PROBE_FAIL:
FA29 1A01             (../nhyodyne/cubix):00160                 SEC
FA2B                  (../nhyodyne/cubix):00161         PPIDE_PROBE_SUCCESS:
FA2B 39               (../nhyodyne/cubix):00162                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (../nhyodyne/cubix):00163         
                      (../nhyodyne/cubix):00164         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (../nhyodyne/cubix):00165         ;*
                      (../nhyodyne/cubix):00166         ;*  READ IDE INFORMATION
                      (../nhyodyne/cubix):00167         ;*      CARRY SET ON ERROR
                      (../nhyodyne/cubix):00168         ;*      A=MST/SLV
                      (../nhyodyne/cubix):00169         ;*____________________________________________________________________________________________________
FA2C                  (../nhyodyne/cubix):00170         IDE_READ_INFO:
                      (../nhyodyne/cubix):00171         ; SET DRIVE BIT
FA2C 8401             (../nhyodyne/cubix):00172                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
FA2E 48               (../nhyodyne/cubix):00173                 ASLA                                      ; SHIFT 4
FA2F 48               (../nhyodyne/cubix):00174                 ASLA                                      ;
FA30 48               (../nhyodyne/cubix):00175                 ASLA                                      ;
FA31 48               (../nhyodyne/cubix):00176                 ASLA                                      ;
FA32 8AE0             (../nhyodyne/cubix):00177                 ORA     #$E0                              ; E0=MST  F0=SLV
FA34 1F89             (../nhyodyne/cubix):00178                 TFR     A,B
FA36 8600             (../nhyodyne/cubix):00179                 LDA     #$00
FA38 1F01             (../nhyodyne/cubix):00180                 TFR     D,X
FA3A 860E             (../nhyodyne/cubix):00181                 LDA     #PPIDE_DEVICE
FA3C BDFBA0           (../nhyodyne/cubix):00182                 JSR     IDE_WRITE
FA3F BDFAE6           (../nhyodyne/cubix):00183                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
FA42 2531             (../nhyodyne/cubix):00184                 BCS     IDE_READ_INFO_ABORT
FA44 860F             (../nhyodyne/cubix):00185                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
FA46 8E00EC           (../nhyodyne/cubix):00186                 LDX     #PPIDE_CMD_ID
FA49 BDFBA0           (../nhyodyne/cubix):00187                 JSR     IDE_WRITE                         ;ASK THE DRIVE TO READ IT
FA4C BDFB0F           (../nhyodyne/cubix):00188                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
FA4F 2524             (../nhyodyne/cubix):00189                 BCS     IDE_READ_INFO_ABORT
FA51 BDFB3F           (../nhyodyne/cubix):00190                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
FA54 8EFC1C           (../nhyodyne/cubix):00191                 LDX     #MESSAGE6
FA57 BDE567           (../nhyodyne/cubix):00192                 JSR     WRSTR
FA5A B6047B           (../nhyodyne/cubix):00193                 LDA     HSTBUF+123
FA5D BDE54D           (../nhyodyne/cubix):00194                 JSR     WRHEX
FA60 B6047A           (../nhyodyne/cubix):00195                 LDA     HSTBUF+122
FA63 BDE54D           (../nhyodyne/cubix):00196                 JSR     WRHEX
FA66 B60479           (../nhyodyne/cubix):00197                 LDA     HSTBUF+121
FA69 BDE54D           (../nhyodyne/cubix):00198                 JSR     WRHEX
FA6C B60478           (../nhyodyne/cubix):00199                 LDA     HSTBUF+120
FA6F BDE54D           (../nhyodyne/cubix):00200                 JSR     WRHEX
FA72 7EFA81           (../nhyodyne/cubix):00201                 JMP     IDE_READ_INFO_OK
FA75                  (../nhyodyne/cubix):00202         IDE_READ_INFO_ABORT:
FA75 8EFBED           (../nhyodyne/cubix):00203                 LDX     #MESSAGE3
FA78 BDE567           (../nhyodyne/cubix):00204                 JSR     WRSTR                             ;DO PROMPT
FA7B BDE57B           (../nhyodyne/cubix):00205                 JSR     LFCR                              ;AND CRLF
FA7E 1A01             (../nhyodyne/cubix):00206                 SEC
FA80 39               (../nhyodyne/cubix):00207                 RTS                                       ;
FA81                  (../nhyodyne/cubix):00208         IDE_READ_INFO_OK:
FA81 BDE57B           (../nhyodyne/cubix):00209                 JSR     LFCR                              ; AND CRLF
FA84 1CFE             (../nhyodyne/cubix):00210                 CLC
FA86 39               (../nhyodyne/cubix):00211                 RTS
                      (../nhyodyne/cubix):00212         
                      (../nhyodyne/cubix):00213         
                      (../nhyodyne/cubix):00214         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (../nhyodyne/cubix):00215         ;
                      (../nhyodyne/cubix):00216         ;  PROBE FOR PPI HARDWARE
                      (../nhyodyne/cubix):00217         ;____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00218         ;
FA87                  (../nhyodyne/cubix):00219         IDE_PPIDETECT:
                      (../nhyodyne/cubix):00220         ;
                      (../nhyodyne/cubix):00221         ; TEST FOR PPI EXISTENCE
                      (../nhyodyne/cubix):00222         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (../nhyodyne/cubix):00223         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (../nhyodyne/cubix):00224         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (../nhyodyne/cubix):00225         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (../nhyodyne/cubix):00226         ; INTERFERE WITH THE VALUE BEING READ.
FA87 BDFBD0           (../nhyodyne/cubix):00227                 JSR     SET_PPI_WR
                      (../nhyodyne/cubix):00228         ;
FA8A 8600             (../nhyodyne/cubix):00229                 LDA     #$00                              ; VALUE ZERO
FA8C B7FE60           (../nhyodyne/cubix):00230                 STA     PPIDELO                           ; PUSH VALUE TO PORT
FA8F B6FE60           (../nhyodyne/cubix):00231                 LDA     PPIDELO                           ; GET PORT VALUE
FA92 8100             (../nhyodyne/cubix):00232                 CMPA    #$00
FA94 39               (../nhyodyne/cubix):00233                 RTS                                       ; AND RETURN
                      (../nhyodyne/cubix):00234         ;
                      (../nhyodyne/cubix):00235         
                      (../nhyodyne/cubix):00236         
                      (../nhyodyne/cubix):00237         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (../nhyodyne/cubix):00238         ;*
                      (../nhyodyne/cubix):00239         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (../nhyodyne/cubix):00240         ;*
                      (../nhyodyne/cubix):00241         ;*____________________________________________________________________________________________________
FA95                  (../nhyodyne/cubix):00242         IDE_READ_SECTOR:
FA95 BDFAE6           (../nhyodyne/cubix):00243                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
FA98 2515             (../nhyodyne/cubix):00244                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
FA9A                  (../nhyodyne/cubix):00245         IDE_READ_SECTOR_1:
FA9A BDFC23           (../nhyodyne/cubix):00246                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
FA9D 860F             (../nhyodyne/cubix):00247                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
FA9F 8E0020           (../nhyodyne/cubix):00248                 LDX     #PPIDE_CMD_READ
FAA2 BDFBA0           (../nhyodyne/cubix):00249                 JSR     IDE_WRITE                         ; ASK THE DRIVE TO READ IT
FAA5 BDFB0F           (../nhyodyne/cubix):00250                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
FAA8 2505             (../nhyodyne/cubix):00251                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
FAAA BDFB3F           (../nhyodyne/cubix):00252                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
FAAD 4F               (../nhyodyne/cubix):00253                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
FAAE 39               (../nhyodyne/cubix):00254                 RTS
FAAF                  (../nhyodyne/cubix):00255         IDE_READ_SECTOR_ERROR:
FAAF 8602             (../nhyodyne/cubix):00256                 LDA     #$02                              ; SET ERROR CONDITION
FAB1 39               (../nhyodyne/cubix):00257                 RTS
                      (../nhyodyne/cubix):00258         
                      (../nhyodyne/cubix):00259         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (../nhyodyne/cubix):00260         ;*
                      (../nhyodyne/cubix):00261         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (../nhyodyne/cubix):00262         ;*
                      (../nhyodyne/cubix):00263         ;*____________________________________________________________________________________________________
FAB2                  (../nhyodyne/cubix):00264         IDE_WRITE_SECTOR:
FAB2 BDFAE6           (../nhyodyne/cubix):00265                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
FAB5 2517             (../nhyodyne/cubix):00266                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
FAB7 860F             (../nhyodyne/cubix):00267                 LDA     #PPIDE_COMMAND
FAB9 8E0030           (../nhyodyne/cubix):00268                 LDX     #PPIDE_CMD_WRITE
FABC BDFBA0           (../nhyodyne/cubix):00269                 JSR     IDE_WRITE                         ;TELL DRIVE TO WRITE A SECTOR
FABF BDFB0F           (../nhyodyne/cubix):00270                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
FAC2 250A             (../nhyodyne/cubix):00271                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
FAC4 BDFB5D           (../nhyodyne/cubix):00272                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
FAC7 BDFAE6           (../nhyodyne/cubix):00273                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
FACA 2502             (../nhyodyne/cubix):00274                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
FACC 4F               (../nhyodyne/cubix):00275                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
FACD 39               (../nhyodyne/cubix):00276                 rts
FACE                  (../nhyodyne/cubix):00277         IDE_WRITE_SECTOR_ERROR:
FACE 8602             (../nhyodyne/cubix):00278                 LDA     #$02
FAD0 39               (../nhyodyne/cubix):00279                 RTS
                      (../nhyodyne/cubix):00280         
                      (../nhyodyne/cubix):00281         ;*__PPIDE_RESET____________________________________________________________________________________
                      (../nhyodyne/cubix):00282         ;*
                      (../nhyodyne/cubix):00283         ;*  SOFT RESET IDE CHANNEL
                      (../nhyodyne/cubix):00284         ;*
                      (../nhyodyne/cubix):00285         ;*____________________________________________________________________________________________________
FAD1                  (../nhyodyne/cubix):00286         PPIDE_RESET:
                      (../nhyodyne/cubix):00287         ;       PRTDBG "IDE RESET$"
FAD1 8680             (../nhyodyne/cubix):00288                 LDA     #PPIDE_RST_LINE
FAD3 B7FE62           (../nhyodyne/cubix):00289                 STA     PPIDECNTRL                        ; ASSERT RST LINE ON IDE INTERFACE
                      (../nhyodyne/cubix):00290         
FAD6 8E0100           (../nhyodyne/cubix):00291                 LDX     #$0100
                      (../nhyodyne/cubix):00292         ;       PRTDBG "IDE RESET DELAY$"
FAD9                  (../nhyodyne/cubix):00293         RST_DLY:
FAD9 301F             (../nhyodyne/cubix):00294                 DEX
FADB 8C0000           (../nhyodyne/cubix):00295                 CPX     #$0000
FADE 26F9             (../nhyodyne/cubix):00296                 BNE     RST_DLY
FAE0 8600             (../nhyodyne/cubix):00297                 LDA     #$00
FAE2 B7FE62           (../nhyodyne/cubix):00298                 STA     PPIDECNTRL                        ; DEASSERT RST LINE ON IDE INTERFACE
                      (../nhyodyne/cubix):00299         
                      (../nhyodyne/cubix):00300         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
                      (../nhyodyne/cubix):00301         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (../nhyodyne/cubix):00302         ;    IF      USEDSKYNG = 1
                      (../nhyodyne/cubix):00303         ;        JSR     DSKY_REINIT
                      (../nhyodyne/cubix):00304         ;        ENDC
                      (../nhyodyne/cubix):00305         
FAE5 39               (../nhyodyne/cubix):00306                 RTS
                      (../nhyodyne/cubix):00307         
                      (../nhyodyne/cubix):00308         
                      (../nhyodyne/cubix):00309         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (../nhyodyne/cubix):00310         ;*
                      (../nhyodyne/cubix):00311         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (../nhyodyne/cubix):00312         ;*
                      (../nhyodyne/cubix):00313         ;*____________________________________________________________________________________________________
FAE6                  (../nhyodyne/cubix):00314         IDE_WAIT_NOT_BUSY:
FAE6 3412             (../nhyodyne/cubix):00315                 PSHS    X,A
FAE8 8600             (../nhyodyne/cubix):00316                 LDA     #$00
FAEA B7F987           (../nhyodyne/cubix):00317                 STA     PPIDETIMEOUT
FAED B7F988           (../nhyodyne/cubix):00318                 STA     PPIDETIMEOUT+1
FAF0                  (../nhyodyne/cubix):00319         IDE_WAIT_NOT_BUSY1:
FAF0 860F             (../nhyodyne/cubix):00320                 LDA     #PPIDE_STATUS                     ;WAIT FOR RDY BIT TO BE SET
FAF2 BDFB7B           (../nhyodyne/cubix):00321                 JSR     IDE_READ
FAF5 1F18             (../nhyodyne/cubix):00322                 TFR     X,A
FAF7 8480             (../nhyodyne/cubix):00323                 ANDA    #$80
FAF9 270F             (../nhyodyne/cubix):00324                 BEQ     IDE_WAIT_NOT_BUSY2
FAFB 7CF987           (../nhyodyne/cubix):00325                 INC     PPIDETIMEOUT
FAFE 26F0             (../nhyodyne/cubix):00326                 BNE     IDE_WAIT_NOT_BUSY1
FB00 7CF988           (../nhyodyne/cubix):00327                 INC     PPIDETIMEOUT+1
FB03 26EB             (../nhyodyne/cubix):00328                 BNE     IDE_WAIT_NOT_BUSY1
FB05 1A01             (../nhyodyne/cubix):00329                 SEC
FB07 7EFB0C           (../nhyodyne/cubix):00330                 JMP     IDE_WAIT_NOT_BUSY3
FB0A                  (../nhyodyne/cubix):00331         IDE_WAIT_NOT_BUSY2:
FB0A 1CFE             (../nhyodyne/cubix):00332                 CLC
FB0C                  (../nhyodyne/cubix):00333         IDE_WAIT_NOT_BUSY3:
FB0C 3592             (../nhyodyne/cubix):00334                 PULS    PC,X,A
FB0E 39               (../nhyodyne/cubix):00335                 RTS
                      (../nhyodyne/cubix):00336         
                      (../nhyodyne/cubix):00337         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (../nhyodyne/cubix):00338         ;*
                      (../nhyodyne/cubix):00339         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (../nhyodyne/cubix):00340         ;*
                      (../nhyodyne/cubix):00341         ;*____________________________________________________________________________________________________
FB0F                  (../nhyodyne/cubix):00342         IDE_WAIT_DRQ:
FB0F 3432             (../nhyodyne/cubix):00343                 PSHS    A,X,Y
FB11 8600             (../nhyodyne/cubix):00344                 LDA     #$00
FB13 B7F987           (../nhyodyne/cubix):00345                 STA     PPIDETIMEOUT
FB16 B7F988           (../nhyodyne/cubix):00346                 STA     PPIDETIMEOUT+1
FB19                  (../nhyodyne/cubix):00347         IDE_WAIT_DRQ1:
FB19 860F             (../nhyodyne/cubix):00348                 LDA     #PPIDE_STATUS                     ;WAIT FOR DRQ BIT TO BE SET
FB1B BDFB7B           (../nhyodyne/cubix):00349                 JSR     IDE_READ
FB1E 1F18             (../nhyodyne/cubix):00350                 TFR     X,A
FB20 8488             (../nhyodyne/cubix):00351                 ANDA    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
FB22 8108             (../nhyodyne/cubix):00352                 CMPA    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
FB24 2715             (../nhyodyne/cubix):00353                 BEQ     IDE_WAIT_DRQ2
FB26 8401             (../nhyodyne/cubix):00354                 ANDA    #%00000001                        ; IS ERROR?
FB28 8101             (../nhyodyne/cubix):00355                 CMPA    #%00000001                        ;
FB2A 270A             (../nhyodyne/cubix):00356                 BEQ     IDE_WAIT_DRQE
FB2C 7CF987           (../nhyodyne/cubix):00357                 INC     PPIDETIMEOUT
FB2F 26E8             (../nhyodyne/cubix):00358                 BNE     IDE_WAIT_DRQ1
FB31 7CF988           (../nhyodyne/cubix):00359                 INC     PPIDETIMEOUT+1
FB34 26E3             (../nhyodyne/cubix):00360                 BNE     IDE_WAIT_DRQ1
FB36                  (../nhyodyne/cubix):00361         IDE_WAIT_DRQE:
FB36 1A01             (../nhyodyne/cubix):00362                 SEC
FB38 7EFB3D           (../nhyodyne/cubix):00363                 JMP     IDE_WAIT_DRQ3
FB3B                  (../nhyodyne/cubix):00364         IDE_WAIT_DRQ2:
FB3B 1CFE             (../nhyodyne/cubix):00365                 CLC
FB3D                  (../nhyodyne/cubix):00366         IDE_WAIT_DRQ3:
FB3D 35B2             (../nhyodyne/cubix):00367                 PULS    PC,A,X,Y
                      (../nhyodyne/cubix):00368         
                      (../nhyodyne/cubix):00369         
                      (../nhyodyne/cubix):00370         
                      (../nhyodyne/cubix):00371         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (../nhyodyne/cubix):00372         ;*
                      (../nhyodyne/cubix):00373         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (../nhyodyne/cubix):00374         ;*
                      (../nhyodyne/cubix):00375         ;*____________________________________________________________________________________________________
FB3F                  (../nhyodyne/cubix):00376         IDE_READ_BUFFER:
FB3F 108E0000         (../nhyodyne/cubix):00377                 LDY     #$0000                            ; INDEX
FB43                  (../nhyodyne/cubix):00378         IDEBUFRD:
FB43 8608             (../nhyodyne/cubix):00379                 LDA     #PPIDE_DATA
FB45 BDFB7E           (../nhyodyne/cubix):00380                 JSR     IDE_READ_NO_SETUP
FB48 1F10             (../nhyodyne/cubix):00381                 TFR     X,D
FB4A E7A90400         (../nhyodyne/cubix):00382                 STB     HSTBUF,Y                          ;
FB4E 3121             (../nhyodyne/cubix):00383                 INY
FB50 A7A90400         (../nhyodyne/cubix):00384                 STA     HSTBUF,Y                          ;
FB54 3121             (../nhyodyne/cubix):00385                 INY
FB56 108C0200         (../nhyodyne/cubix):00386                 CMPY    #$0200                            ;
FB5A 26E7             (../nhyodyne/cubix):00387                 BNE     IDEBUFRD                          ;
FB5C 39               (../nhyodyne/cubix):00388                 RTS                                       ;
                      (../nhyodyne/cubix):00389         
                      (../nhyodyne/cubix):00390         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (../nhyodyne/cubix):00391         ;*
                      (../nhyodyne/cubix):00392         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (../nhyodyne/cubix):00393         ;*
                      (../nhyodyne/cubix):00394         ;*____________________________________________________________________________________________________
FB5D                  (../nhyodyne/cubix):00395         IDE_WRITE_BUFFER:
FB5D 108E0000         (../nhyodyne/cubix):00396                 LDY     #$0000                            ; INDEX
FB61                  (../nhyodyne/cubix):00397         IDEBUFWT:
FB61 E6A90400         (../nhyodyne/cubix):00398                 LDB     HSTBUF,Y                          ; SECTORS ARE LITTLE ENDIAN
FB65 3121             (../nhyodyne/cubix):00399                 INY                                       ;
FB67 A6A90400         (../nhyodyne/cubix):00400                 LDA     HSTBUF,Y                          ; SECTORS ARE LITTLE ENDIAN
FB6B 3121             (../nhyodyne/cubix):00401                 INY
FB6D 1F01             (../nhyodyne/cubix):00402                 TFR     D,X
FB6F 8608             (../nhyodyne/cubix):00403                 LDA     #PPIDE_DATA
FB71 BDFBA0           (../nhyodyne/cubix):00404                 JSR     IDE_WRITE
FB74 108C0200         (../nhyodyne/cubix):00405                 CMPY    #$0200                            ;
FB78 26E7             (../nhyodyne/cubix):00406                 BNE     IDEBUFWT                          ;
FB7A 39               (../nhyodyne/cubix):00407                 RTS                                       ;
                      (../nhyodyne/cubix):00408         
                      (../nhyodyne/cubix):00409         
                      (../nhyodyne/cubix):00410         ;-------------------------------------------------------------------------------
                      (../nhyodyne/cubix):00411         
                      (../nhyodyne/cubix):00412         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (../nhyodyne/cubix):00413         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (../nhyodyne/cubix):00414         ; PROGRAM WOULD NOT CALL TO THESE.
                      (../nhyodyne/cubix):00415         
                      (../nhyodyne/cubix):00416         ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (../nhyodyne/cubix):00417         ;INPUT A = IDE REGSITER ADDRESS
                      (../nhyodyne/cubix):00418         ;OUTPUT X = WORD READ FROM IDE DRIVE
FB7B                  (../nhyodyne/cubix):00419         IDE_READ:
FB7B BDFBC2           (../nhyodyne/cubix):00420                 JSR     SET_PPI_RD                        ; SETUP FOR A READ CYCLE
FB7E                  (../nhyodyne/cubix):00421         IDE_READ_NO_SETUP:
FB7E B7FE62           (../nhyodyne/cubix):00422                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
FB81 8A40             (../nhyodyne/cubix):00423                 ORA     #PPIDE_RD_LINE                    ; ASSERT RD PIN
FB83 B7FE62           (../nhyodyne/cubix):00424                 STA     PPIDECNTRL
FB86 3402             (../nhyodyne/cubix):00425                 PSHS    A
FB88 F6FE60           (../nhyodyne/cubix):00426                 LDB     PPIDELO                           ; READ LOWER BYTE
FB8B B6FE61           (../nhyodyne/cubix):00427                 LDA     PPIDEHI                           ; READ UPPER BYTE
FB8E 1F01             (../nhyodyne/cubix):00428                 TFR     D,X
FB90 3502             (../nhyodyne/cubix):00429                 PULS    A                                 ; RESTORE REGISTER VALUE
FB92 B7FE62           (../nhyodyne/cubix):00430                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
FB95 8840             (../nhyodyne/cubix):00431                 EORA    #PPIDE_RD_LINE                    ; ASSERT RD PIN
FB97 B7FE62           (../nhyodyne/cubix):00432                 STA     PPIDECNTRL
FB9A 8600             (../nhyodyne/cubix):00433                 LDA     #$00
FB9C B7FE62           (../nhyodyne/cubix):00434                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FB9F 39               (../nhyodyne/cubix):00435                 RTS
                      (../nhyodyne/cubix):00436         
                      (../nhyodyne/cubix):00437         ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (../nhyodyne/cubix):00438         ;INPUT A = IDE REGISTER ADDRESS
                      (../nhyodyne/cubix):00439         ;INPUT REGISTER X = WORD TO WRITE
                      (../nhyodyne/cubix):00440         ;
                      (../nhyodyne/cubix):00441         
FBA0                  (../nhyodyne/cubix):00442         IDE_WRITE:
FBA0 BDFBD0           (../nhyodyne/cubix):00443                 JSR     SET_PPI_WR                        ; SETUP FOR A WRITE CYCLE
FBA3 3402             (../nhyodyne/cubix):00444                 PSHS    A
FBA5 1F10             (../nhyodyne/cubix):00445                 TFR     X,D
FBA7 F7FE60           (../nhyodyne/cubix):00446                 STB     PPIDELO                           ; WRITE LOWER BYTE
FBAA B7FE61           (../nhyodyne/cubix):00447                 STA     PPIDEHI                           ; WRITE UPPER BYTE
FBAD 3502             (../nhyodyne/cubix):00448                 PULS    A                                 ; RESTORE REGISTER VALUE
FBAF B7FE62           (../nhyodyne/cubix):00449                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
FBB2 8A20             (../nhyodyne/cubix):00450                 ORA     #PPIDE_WR_LINE                    ; ASSERT WRITE PIN
FBB4 B7FE62           (../nhyodyne/cubix):00451                 STA     PPIDECNTRL
FBB7 8820             (../nhyodyne/cubix):00452                 EORA    #PPIDE_WR_LINE                    ; DE ASSERT WR PIN
FBB9 B7FE62           (../nhyodyne/cubix):00453                 STA     PPIDECNTRL
FBBC 8600             (../nhyodyne/cubix):00454                 LDA     #$00
FBBE B7FE62           (../nhyodyne/cubix):00455                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FBC1 39               (../nhyodyne/cubix):00456                 RTS
                      (../nhyodyne/cubix):00457         
                      (../nhyodyne/cubix):00458         
                      (../nhyodyne/cubix):00459         ;-----------------------------------------------------------------------------------
                      (../nhyodyne/cubix):00460         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (../nhyodyne/cubix):00461         ;
                      (../nhyodyne/cubix):00462         ;------------------------------------------------------------------------------------
                      (../nhyodyne/cubix):00463         
FBC2                  (../nhyodyne/cubix):00464         SET_PPI_RD:
FBC2 3402             (../nhyodyne/cubix):00465                 PSHS    A
FBC4 8600             (../nhyodyne/cubix):00466                 LDA     #$00
FBC6 B7FE62           (../nhyodyne/cubix):00467                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FBC9 8692             (../nhyodyne/cubix):00468                 LDA     #PPRD_IDE_8255
FBCB B7FE63           (../nhyodyne/cubix):00469                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, READ MODE
FBCE 3582             (../nhyodyne/cubix):00470                 PULS    A,PC
                      (../nhyodyne/cubix):00471         
FBD0                  (../nhyodyne/cubix):00472         SET_PPI_WR:
FBD0 3402             (../nhyodyne/cubix):00473                 PSHS    A
FBD2 8600             (../nhyodyne/cubix):00474                 LDA     #$00
FBD4 B7FE62           (../nhyodyne/cubix):00475                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FBD7 8680             (../nhyodyne/cubix):00476                 LDA     #PPWR_IDE_8255
FBD9 B7FE63           (../nhyodyne/cubix):00477                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, WRITE MODE
FBDC 3582             (../nhyodyne/cubix):00478                 PULS    A,PC
                      (../nhyodyne/cubix):00479         
                      (../nhyodyne/cubix):00480         
FBDE                  (../nhyodyne/cubix):00481         MESSAGE1
FBDE 5050494445203A   (../nhyodyne/cubix):00482                 FCC     "PPIDE :"
FBE5 00               (../nhyodyne/cubix):00483                 FCB     00
FBE6                  (../nhyodyne/cubix):00484         MESSAGE2
FBE6 20494F3D3078     (../nhyodyne/cubix):00485                 FCC     " IO=0x"
FBEC 00               (../nhyodyne/cubix):00486                 FCB     00
FBED                  (../nhyodyne/cubix):00487         MESSAGE3
FBED 204E4F5420505245 (../nhyodyne/cubix):00488                 FCC     " NOT PRESENT"
     53454E54
FBF9 00               (../nhyodyne/cubix):00489                 FCB     00
FBFA                  (../nhyodyne/cubix):00490         MESSAGE4
FBFA 205050494445303A (../nhyodyne/cubix):00491                 FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
FC0A 00               (../nhyodyne/cubix):00492                 FCB     00
FC0B                  (../nhyodyne/cubix):00493         MESSAGE5
FC0B 205050494445313A (../nhyodyne/cubix):00494                 FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
FC1B 00               (../nhyodyne/cubix):00495                 FCB     00
FC1C                  (../nhyodyne/cubix):00496         MESSAGE6
FC1C 3078             (../nhyodyne/cubix):00497                 FCC     "0x"
FC1E 00               (../nhyodyne/cubix):00498                 FCB     00
                      (../nhyodyne/cubix):00499         
                      (../nhyodyne/cubix):00500         
                      (../nhyodyne/cubix):00501         ;ALLOCATE THE FOLLOWING DATA AREAS TO UNUSED RAM SPACE
FC1F                  (../nhyodyne/cubix):00502         DEBCYLL:
FC1F 00               (../nhyodyne/cubix):00503                 .BYTE   0                                 ; DEBLOCKED CYLINDER LSB
FC20                  (../nhyodyne/cubix):00504         DEBCYLM:
FC20 00               (../nhyodyne/cubix):00505                 .BYTE   0                                 ; DEBLOCKED CYLINDER MSB
FC21                  (../nhyodyne/cubix):00506         DEBSEHD:
FC21 00               (../nhyodyne/cubix):00507                 .BYTE   0                                 ; DEBLOCKED SECTOR AND HEAD (HS)
FC22                  (../nhyodyne/cubix):00508         PPIDETMP:
FC22 00               (../nhyodyne/cubix):00509                 .BYTE   0                                 ; TEMP
                      (../nhyodyne/cubix):00510         
                      (../nhyodyne/cubix):00511         
                      (../nhyodyne/cubix):00512         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (../nhyodyne/cubix):00513         ;*
                      (../nhyodyne/cubix):00514         ;*
                      (../nhyodyne/cubix):00515         ;        SETUP   LBA DATA
                      (../nhyodyne/cubix):00516         ;*
                      (../nhyodyne/cubix):00517         ;*____________________________________________________________________________________________________
FC23                  (../nhyodyne/cubix):00518         IDE_SETUP_LBA:
FC23 A646             (../nhyodyne/cubix):00519                 LDA    SEC,U                             ;
FC25 B7FC1F           (../nhyodyne/cubix):00520                 STA    DEBCYLL                           ; SET LBA 0:7
FC28 A644             (../nhyodyne/cubix):00521                 LDA    CYL,U                             ;
FC2A B7FC20           (../nhyodyne/cubix):00522                 STA    DEBCYLM                           ; SET LBA 8:15
FC2D A645             (../nhyodyne/cubix):00523                 LDA    HEAD,U                            ;
FC2F B7FC21           (../nhyodyne/cubix):00524                 STA    DEBSEHD                           ; SET LBA 16:23
                      (../nhyodyne/cubix):00525         ;            IF      USEDSKYNG = 1
                      (../nhyodyne/cubix):00526         ;       PRTDBG "DSKY OUTPUT 1$"
                      (../nhyodyne/cubix):00527         ;                LDA     CURDRV
                      (../nhyodyne/cubix):00528         ;                STA     DSKY_HEXBUF
                      (../nhyodyne/cubix):00529         ;                LDA     DEBCYLM
                      (../nhyodyne/cubix):00530         ;                STA     DSKY_HEXBUF+1
                      (../nhyodyne/cubix):00531         ;                LDA     DEBCYLL
                      (../nhyodyne/cubix):00532         ;                STA     DSKY_HEXBUF+2
                      (../nhyodyne/cubix):00533         ;                LDA     DEBSEHD
                      (../nhyodyne/cubix):00534         ;                STA     DSKY_HEXBUF+3
                      (../nhyodyne/cubix):00535         ;                JSR     DSKY_BIN2SEG
                      (../nhyodyne/cubix):00536         ;                JSR     DSKY_SHOW
                      (../nhyodyne/cubix):00537         ;                ENDC
FC32 39               (../nhyodyne/cubix):00538                         RTS
                      (../nhyodyne/drive):00144         ;*      include CUBIXOS\CUBFLP.asm      FLOPPY I/O DRIVERS
                      (../nhyodyne/drive):00145         ;*      include CUBIXOS\CUBDSKY.asm     DSKY I/O DRIVERS
                      (../nhyodyne/drive):00146         ;*      include CUBIXOS\CUBVDU.asm      DSKY VDU DRIVERS
                      (../nhyodyne/drive):00147         
                      (../nhyodyne/drive):00148         
                      (../nhyodyne/drive):00149         
                      (../nhyodyne/drive):00150                 ORG     $FF00
                      (../nhyodyne/drive):00151         ;
                      (../nhyodyne/drive):00152         ; DISK COMMAND BLOCK
                      (../nhyodyne/drive):00153         ;
                      (../nhyodyne/drive):00154         ;* IGNORE ANY UNUSED INTERRUPTS
FF00                  (../nhyodyne/drive):00155         IGNORE
FF00 3B               (../nhyodyne/drive):00156                 RTI
                      (../nhyodyne/drive):00157         ;* RESULT CODES FOR FDC OPERATIONS
FF01                  (../nhyodyne/drive):00158         RESTAB
FF01 0300020000030401 (../nhyodyne/drive):00159                 FCB     3,0,2,0,0,3,4,1
                      (../nhyodyne/drive):00160         ;*
                      (../nhyodyne/drive):00161         ;* INITIALIZATION TABLE FOR CUBIX RAM
                      (../nhyodyne/drive):00162         ;*
     FF09             (../nhyodyne/drive):00163         RITAB           EQU *
                      (../nhyodyne/drive):00164         ;* DEFAULT DRIVE CHARACTISTICS
FF09 00500209000000   (../nhyodyne/drive):00165                 FCB     0,80,2,9,0,0,0                    ;ADR 0, 80 CYL, 2 HEAD, 9 SEC/TRK
FF10 01FF01FF000000   (../nhyodyne/drive):00166                 FCB     1,255,1,255,0,0,0                 ;ADR 1, 255 CYL, 1 HEAD, 255 SEC/TRK
FF17 02FF01FF000000   (../nhyodyne/drive):00167                 FCB     2,255,1,255,0,0,0                 ;ADR 2, 255 CYL, 1 HEAD, 255 SEC/TRK
FF1E 03FF01FF000000   (../nhyodyne/drive):00168                 FCB     3,255,1,255,0,0,0                 ;ADR 4, 255 CYL, 1 HEAD, 255 SEC/TRK
                      (../nhyodyne/drive):00169         ;* CONSOLE DEVICE ASSIGNMENTS
FF25 01               (../nhyodyne/drive):00170                 FCB     1                                 ;CONSOLE INPUT DEVICE
FF26 01               (../nhyodyne/drive):00171                 FCB     1                                 ;CONSOLE OUTPUT DEVICE
                      (../nhyodyne/drive):00172         ;* SERIAL DEVICE DRIVERS
FF27 F954F97400000000 (../nhyodyne/drive):00173                 FDB     RDNULL,RDSER1,0,0,0,0,0,0
     0000000000000000
FF37 F956F96400000000 (../nhyodyne/drive):00174                 FDB     WRNULL,WRSER1,0,0,0,0,0,0
     0000000000000000
                      (../nhyodyne/drive):00175         ;* DISK DEVICE DRIVERS
FF47 F958F95BF963F957 (../nhyodyne/drive):00176                 FDB     DHOME,DRDSEC,DWRSEC,DFORMAT
                      (../nhyodyne/drive):00177         ;* 6809 HARDWARE VECTORS
FF4F E00B             (../nhyodyne/drive):00178                 FDB     SSR                               ;SWI VECTOR (USED FOR SSRS)
FF51 FF00             (../nhyodyne/drive):00179                 FDB     IGNORE                            ;SWI2 VECTOR
FF53 FF00             (../nhyodyne/drive):00180                 FDB     IGNORE                            ;SWI3 VECTOR
FF55 FF00             (../nhyodyne/drive):00181                 FDB     IGNORE                            ;IRQ  VECTOR
FF57 FF00             (../nhyodyne/drive):00182                 FDB     IGNORE                            ;FIRQ VECTOR
FF59 FF00             (../nhyodyne/drive):00183                 FDB     IGNORE                            ;NMI VECTOR
                      (../nhyodyne/drive):00184         ;* MISC FLAGS & VARIABLES
FF5B FF               (../nhyodyne/drive):00185                 FCB     $FF                               ;ERROR MESSAGES ENABLED
FF5C 00               (../nhyodyne/drive):00186                 FCB     0                                 ;TRACE DISABLED
FF5D 00               (../nhyodyne/drive):00187                 FCB     0                                 ;DEBUG DISABLED
FF5E 03               (../nhyodyne/drive):00188                 FCB     3                                 ;DEFAULT DRIVE (A)
FF5F 4D41494E         (../nhyodyne/drive):00189                 FCC     'MAIN'                            ;DEFAULT DIRECTORY
FF63 00000000         (../nhyodyne/drive):00190                 FCB     0,0,0,0                           ;(FILLER)
FF67 03               (../nhyodyne/drive):00191                 FCB     3                                 ;SYSTEM DRIVE (A)
FF68 53595354454D     (../nhyodyne/drive):00192                 FCC     'SYSTEM'                          ;SYSTEM DIRECTORY
FF6E 0000             (../nhyodyne/drive):00193                 FCB     0,0                               ;(FILLER)
     0067             (../nhyodyne/drive):00194         RISIZ           EQU *-RITAB                       ;SIZE OF INITILAIZED RAM
                      (../nhyodyne/drive):00195         ;
                      (        cubix.asm):01521                 ENDIF
                      (        cubix.asm):01522         ;*
                      (        cubix.asm):01523         ;* INTERRUPT VECTORS
                      (        cubix.asm):01524         ;*
                      (        cubix.asm):01525                 IFNDEF  test
                      (        cubix.asm):01526                 ORG     $FFF2                             ;VECTORS GO HERE
FFF2 F6FF             (        cubix.asm):01527                 FDB     SWI3
FFF4 F6FB             (        cubix.asm):01528                 FDB     SWI2
FFF6 F707             (        cubix.asm):01529                 FDB     FIRQ
FFF8 F703             (        cubix.asm):01530                 FDB     IRQ
FFFA F6F7             (        cubix.asm):01531                 FDB     SWI
FFFC F70B             (        cubix.asm):01532                 FDB     NMI
FFFE E108             (        cubix.asm):01533                 FDB     BEGIN                             ;RESET - COLD START OF SYSTEM
                      (        cubix.asm):01534                 ENDIF

Symbol Table:
[ G] ATRTAB                           F080
[ G] BADCMD                           E247
[ G] BADDEV                           E5A7
[ G] BADOP1                           E3E6
[ G] BADOP2                           E389
[ G] BADOP3                           F075
[ G] BADOPM                           F72E
[ G] BADOPR                           E2AB
[ G] BEGIN                            E108
[ G] BLOAD                            EE3C
[ G] BRET                             E34C
[ G] BSAVE                            EE71
[ G] CALFRE                           F34C
[ G] CEND                             E333
[ G] CEXI                             F56F
[ G] CEXIT                            F55E
[ G] CHAIN                            F5C0
[ G] CHGDRV                           F09C
[ G] CHGWRK                           E794
[ G] CLO0                             E978
[ G] CLO1                             E97C
[ G] CLO2                             E98B
[ G] CLO3                             E98F
[ G] CLO4                             E9A4
[ G] CLOC1                            E8CE
[ G] CLOC2                            E8D5
[ G] CLOSE                            E963
[ G] CLRFLG                           F116
[ G] CMD                              E180
[ G] CMDADR                           F847
[ G] CMDBUF                           DCED
[ G] CMDC1                            F5FA
[ G] CMDC2                            F604
[ G] CMDC3                            F60E
[ G] CMDC4                            F612
[ G] CMDC5                            F61C
[ G] CMDC6                            F61D
[ G] CMDCMP                           F5EF
[ G] CMDDRV                           DCE1
[ G] CMDEOF                           F46A
[ G] CMDEX                            F478
[ G] CMDGO                            E1B0
[ G] CMDIN                            F5A0
[ G] CMDKEY                           F5E3
[ G] CMDNAM                           F7F1
[ G] CMDOFF                           DCE4
[ G] CMDRC                            DCE8
[ G] CMDRET                           F586
[ G] CMDRT0                           F589
[ G] CMDRT1                           F59D
[ G] CMDRT2                           F620
[ G] CMDSEC                           DCE2
[ G] CMDSKP                           F5CC
[ G] CMDSTK                           DCE6
[ G] CMPR                             F524
[ G] CMPR1                            F531
[ G] CNC1                             EFD5
[ G] CNC2                             EFE6
[ G] CNCT                             EFCF
[ G] COMFIL                           F473
[ G] COMGO                            F488
[ G] COMNAM                           E316
[ G] COMX                             E335
[ G] CONIN                            DC6C
[ G] CONOUT                           DC6D
[ G] CRD1                             ED15
[ G] CRD2                             ED1B
[ G] CRE1                             E72C
[ G] CRE2                             E734
[ G] CRE3                             E739
[ G] CRE5                             E765
[ G] CRE6                             E76F
[ G] CRE7                             E777
[ G] CREAD                            ECFA
[ G] CREATE                           E717
[ G] CREF1                            ED92
[ G] CREFIL                           ED7E
[ G] CSIZE                            0007
[ G] CSRC                             F54C
[ G] CURDRVADDRESS                    F98B
[ G] CURDRVSLICE                      F98C
[ G] CURSIZ                           E705
[ G] CWR1                             ED45
[ G] CWR2                             ED4B
[ G] CWRITE                           ED2A
[ G] CYL                              0004
[ G] DATTR                            0017
[ G] DBGFLG                           DCA3
[ G] DBGSSR                           E040
[ G] DCTRL                            DC50
[ G] DDADR                            0013
[ G] DEBCYLL                          FC1F
[ G] DEBCYLM                          FC20
[ G] DEBSEHD                          FC21
[ G] DECDIG                           E453
[ G] DEFATR                           00F0
[ G] DEFDIR                           DCA6
[ G] DEFDRV                           DCA5
[ G] DELETE                           ED98
[ G] DELFIL                           ED95
[ G] DETAB                            EB9B
[ G] DEVMSG                           F7CC
[ G] DFORMAT                          F957
[ G] DHOME                            F958
[ G] DIGOK                            E42C
[ G] DIRSEC                           0000
[ G] DISDIR                           E6A9
[ G] DISF1                            F35D
[ G] DISF2                            F363
[ G] DISF3                            F36E
[ G] DISF4                            F37F
[ G] DISP8                            E6F8
[ G] DISPX                            E6FA
[SG] dist                             0001
[ G] DITAB                            DC6E
[ G] DIV1                             F6C6
[ G] DIV16                            F6BE
[ G] DIV2                             F6C8
[ G] DIV3                             F6DD
[ G] DMPREG                           E08A
[ G] DMPREG1                          E08D
[ G] DNAME                            0008
[ G] DNL0                             EF14
[ G] DNL1                             EF4C
[ G] DNL2                             EF5F
[ G] DNL3                             EF8A
[ G] DNL4                             EFBB
[ G] DNLD                             EF01
[ G] DNLDEV                           EF49
[ G] DNLEND                           EF2E
[ G] DNLMSG                           F7DB
[ G] DNLRTS                           EEFF
[ G] DOINIT                           E004
[ G] DOSKCM                           E1B9
[ G] DOTAB                            DC7E
[ G] DPERM                            0010
[ G] DPREFIX                          0000
[ G] DRADR                            0015
[ G] DRDSEC                           F95B
[ G] DRIVE                            0000
[ G] DRIVERS                          E99F
[ G] DRVSIZ                           E708
[ G] DSHFT                            E434
[ G] DTYPE                            0010
[ G] DWRSEC                           F963
[ G] EOF                              E8B1
[ G] EPERM                            0020
[ G] ERRCNT                           DCEC
[ G] ERRM1                            E2C3
[ G] ERRM2                            E2C8
[ G] ERRM3                            E2D9
[ G] ERRM4                            E2DE
[ G] ERRMRC                           E2B0
[ G] ERRRET                           E2EB
[ G] EX1                              F2BB
[ G] EX2                              F2C0
[ G] EX3                              F2C7
[ G] EX4                              F2CE
[ G] EX5                              F2DB
[ G] EX6                              F2E5
[ G] EX7                              F2EF
[ G] EX8                              F2F1
[ G] EX9                              F304
[ G] EXDCOM                           F572
[ G] EXE                              E217
[ G] EXE1                             E22F
[ G] EXE2                             E232
[ G] EXE3                             E24E
[ G] EXE4                             E26F
[ G] EXE5                             E27B
[ G] EXECMD                           E1C0
[ G] EXIMSG                           F758
[ G] FDRIVE                           DCB7
[ G] FEXISTS                          E723
[ G] FIL1                             ED5F
[ G] FIL2                             ED7B
[ G] FILERR                           E656
[ G] FILES                            ED5A
[ G] FILFND                           E6A8
[ G] FIRQ                             F707
[ G] FIRQVEC                          DC9E
[ G] FNAME                            DCC0
[ G] FNDF1                            E7D4
[ G] FNDF2                            E7DD
[ G] FNDF3                            E7DF
[ G] FNDFRE                           E7CE
[ G] FNDLNK                           E5D2
[ G] FORMAT                           F6E1
[ G] FRES1                            E7BD
[ G] FRES2                            E7BF
[ G] FRESEC                           E79D
[ G] FTEL1                            EA0D
[ G] FTEL2                            EA1B
[ G] FTELL                            EA00
[ G] FTYPE                            DCC8
[ G] GETA1                            F064
[ G] GETA2                            F06E
[ G] GETA3                            F078
[ G] GETA4                            F07E
[ G] GETATR                           F061
[ G] GETBYT                           EFAF
[ G] GETCHR                           E5CD
[ G] GETCTL                           EAF9
[ G] GETCTL1                          EAFC
[ G] GETD1                            E3BB
[ G] GETD2                            E3C4
[ G] GETD3                            E3DA
[ G] GETD4                            E3E9
[ G] GETD5                            E3F0
[ G] GETDEC                           E449
[ G] GETDEV                           F0F0
[ G] GETDIR                           E3A3
[ G] GETDIR1                          E3A6
[ G] GETDRV                           E3F2
[ G] GETDRV1                          E3F5
[ G] GETDV                            E450
[ G] GETHEX                           E40F
[ G] GETHV                            E414
[ G] GETL1                            E417
[ G] GETN1                            EFCE
[ G] GETNAM                           E36A
[ G] GETNIB                           EFBC
[ G] GETNUM                           E404
[ G] GETSDI                           E310
[ G] GETSN0                           E28C
[ G] GETSN1                           E293
[ G] GETSN2                           E2A1
[ G] GETSNA                           E289
[ G] GETSYS                           E30D
[ G] GETVAL                           E363
[ G] GF1                              E36E
[ G] GF2                              E37F
[ G] GF3                              E38C
[ G] GFNAM                            E36C
[ G] GFTYP                            E37B
[ G] GLFCR                            E495
[ G] GLINE                            E498
[ G] GLINE1                           E4A1
[ G] GLINE2                           E4B2
[ G] GLINE3                           E4BD
[ G] GLNOP                            E49D
[ G] GOCMD                            F510
[ G] GOFLG                            F119
[ G] GOPAD                            E29E
[ G] GRTS                             E5EE
[ G] HDE                              EB2A
[ G] HDE1                             EB47
[ G] HDE2                             EB81
[ G] HDE3                             EB86
[ G] HDE4                             EB90
[ G] HEAD                             0005
[ G] HELLO                            E112
[ G] HEXEND                           E444
[ G] HOME                             F6E5
[ G] HOUT                             E55B
[ G] HSTBUF                           0400
[ G] HWIN1                            F946
[ G] HWINIT                           F941
[ G] IDE_ABORT                        F9BB
[ G] IDE_INITA                        F9DD
[ G] IDE_PPIDETECT                    FA87
[ G] IDE_PRINT_INFO                   F9C4
[ G] IDE_READ                         FB7B
[ G] IDE_READ_BUFFER                  FB3F
[ G] IDE_READ_INFO                    FA2C
[ G] IDE_READ_INFO_ABORT              FA75
[ G] IDE_READ_INFO_OK                 FA81
[ G] IDE_READ_NO_SETUP                FB7E
[ G] IDE_READ_SECTOR                  FA95
[ G] IDE_READ_SECTOR_1                FA9A
[ G] IDE_READ_SECTOR_ERROR            FAAF
[ G] IDE_SETUP_LBA                    FC23
[ G] IDE_WAIT_DRQ                     FB0F
[ G] IDE_WAIT_DRQ1                    FB19
[ G] IDE_WAIT_DRQ2                    FB3B
[ G] IDE_WAIT_DRQ3                    FB3D
[ G] IDE_WAIT_DRQE                    FB36
[ G] IDE_WAIT_NOT_BUSY                FAE6
[ G] IDE_WAIT_NOT_BUSY1               FAF0
[ G] IDE_WAIT_NOT_BUSY2               FB0A
[ G] IDE_WAIT_NOT_BUSY3               FB0C
[ G] IDE_WRITE                        FBA0
[ G] IDE_WRITE_BUFFER                 FB5D
[ G] IDE_WRITE_SECTOR                 FAB2
[ G] IDE_WRITE_SECTOR_ERROR           FACE
[ G] IDEBUFRD                         FB43
[ G] IDEBUFWT                         FB61
[ G] IGNORE                           FF00
[ G] INBUFF                           DC00
[ G] INI00                            EC03
[ G] INI01                            EC1D
[ G] INI02                            EC25
[ G] INI1                             EC30
[ G] INI10                            ECEC
[ G] INI2                             EC81
[ G] INI3                             EC9F
[ G] INI4                             ECAC
[ G] INI5                             ECB9
[ G] INI6                             ECC3
[ G] INI7                             ECCF
[ G] INI8                             ECD9
[ G] INI9                             ECE0
[ G] INIT                             EBF1
[ G] INITAB                           F40E
[ G] INVSSR                           E05E
[ G] IOTAB                            F45C
[ G] IPLFILE                          F70F
[ G] IRAM                             DC50
[ G] IRQ                              F703
[ G] IRQVEC                           DC9C
[ G] LCHAIN                           EE60
[ G] LFCR                             E57B
[ G] LNKSEC                           0001
[ G] LOCCR                            F5D9
[ G] LOCDIR                           E685
[ G] LOCERR                           E64C
[ G] LOCFIL                           E691
[ G] LOCLP                            F5D5
[ G] LOCRED                           E896
[ G] LOCSEC                           E68E
[ G] LOCWRI                           E8C4
[ G] LODERR                           EFA1
[ G] LODF1                            EE5E
[ G] LODFIL                           EE48
[ G] MBASE                            E002
[ G] MESSAGE1                         FBDE
[ G] MESSAGE2                         FBE6
[ G] MESSAGE3                         FBED
[ G] MESSAGE4                         FBFA
[ G] MESSAGE5                         FC0B
[ G] MESSAGE6                         FC1C
[ G] MOVD1                            F029
[ G] MOVDIR                           F023
[ G] MSGFLG                           DCA2
[ G] MUL16                            F69E
[ G] MULD1                            EDCF
[ G] MULD2                            EDD2
[ G] MULD3                            EE2B
[ G] MULD4                            EE3B
[ G] MULD5                            EDF1
[ G] MULDEL                           EDCC
[ G] NAMGET                           E291
[ G] NCYL                             0001
[ G] NDEV                             0008
[ G] NDSK                             0004
[ G] NEWLIN                           F4B1
[ G] NHEAD                            0002
[SG] nhyodyne                         0001
[ G] NMI                              F70B
[ G] NMIVEC                           DCA0
[ G] NOEMSG                           E2E9
[ G] NOFMSG                           E67E
[ G] NOMAC                            F4EA
[ G] NOSHO                            E6B0
[ G] NOSMSG                           F76C
[ G] NOSPAC                           E7C6
[ G] NOSUSP                           EEE3
[ G] NOTFND                           E650
[ G] NOTMSG                           F749
[ G] NOTNUL                           E323
[ G] NOTRDD                           F962
[ G] NSEC                             0003
[ G] NULCMD                           E1E9
[ G] NUMCMD                           000E
[ G] NUMFLG                           0003
[ G] NUMSSR                           006F
[ G] ODRIVE                           0001
[ G] OFIRST                           0002
[ G] OKRET                            EE70
[ G] OLDSTK                           DCE9
[ G] OLSTSEC                          0006
[ G] OOFFSET                          0008
[ G] OOTAB                            F454
[ G] OPENR                            E7FF
[ G] OPENW                            E8DB
[ G] OREMSG                           F783
[ G] ORERR                            E8A9
[ G] OSECTOR                          0004
[ G] OSIZ                             000A
[ G] OTYPE                            0000
[ G] OWEMSG                           F79A
[ G] OWERR                            E91D
[ G] PAD                              E39C
[ G] PAR1                             F4D4
[ G] PAR2                             F4DA
[ G] PAR3                             F4E1
[ G] PAROK                            F4CE
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       F98D
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        FE60
[ G] PPIDE_PROBE                      F9E1
[ G] PPIDE_PROBE_FAIL                 FA29
[ G] PPIDE_PROBE_SUCCESS              FA2B
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      FAD1
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       FE62
[ G] PPIDEHI                          FE61
[ G] PPIDEINDEX                       F986
[ G] PPIDELO                          FE60
[ G] PPIDEPPIC                        FE63
[ G] PPIDETIMEOUT                     F987
[ G] PPIDETMP                         FC22
[ G] PPIDEWORKVAR                     F989
[ G] PPRD_IDE_8255                    0092
[ G] PPWR_IDE_8255                    0080
[ G] PREFIX                           DCB8
[ G] PROERR                           E8A0
[ G] PROMSG                           F7B2
[ G] PURGE                            E616
[ G] PURGE1                           E618
[ G] PUTCHR                           E58D
[ G] QVECT                            F684
[ G] RAM                              DC00
[ G] RCBOP                            0001
[ G] RCC1                             F62E
[ G] RCC2                             F641
[ G] RCC3                             F65A
[ G] RCCHR                            F623
[ G] RCCMD                            00FF
[ G] RCDEV                            000A
[ G] RCDNL                            000B
[ G] RCDSK                            0009
[ G] RCEOF                            0006
[ G] RCEXI                            0007
[ G] RCNOS                            0008
[ G] RCNOTF                           0002
[ G] RCOND                            F53A
[ G] RCORE                            0004
[ G] RCOWE                            0005
[ G] RCPRO                            0003
[ G] RCRET                            E18C
[ G] RDDEV                            E5AF
[ G] RDDLC                            EFA9
[ G] RDISK                            EAD2
[ G] RDNULL                           F954
[ G] RDONE                            EAF7
[ G] RDSEC                            F6EF
[ G] RDSER1                           F974
[ G] RDSER1N                          F983
[ G] RDW1                             E604
[ G] RDWRK                            E5EF
[ G] READB                            E86C
[ G] READC                            E821
[ G] REC1                             E840
[ G] REC2                             E85A
[ G] REDCHR                           F4B4
[ G] REDIN                            F65C
[ G] REDOUT                           F661
[ G] REENT                            E19F
[ G] REEXG                            F678
[ G] RESTAB                           FF01
[ G] RESU1                            EA9A
[ G] RESU2                            EA9F
[ G] RESU3                            EAAA
[ G] RESUME                           EA7E
[ G] RETNZ                            E360
[ G] RETURN                           EEDA
[ G] RETZ                             F681
[ G] RETZ1                            F69A
[ G] REWIND                           E8B6
[ G] RISIZ                            0067
[ G] RITAB                            FF09
[ G] RNXT                             E343
[ G] RNXT1                            E345
[ G] ROM                              E000
[ G] ROMCHK                           E000
[ G] RPERM                            0080
[ G] RRTS                             E614
[ G] RST_DLY                          FAD9
[ G] RSUCC                            F545
[ G] RTRY1                            EAD9
[ G] RTRY2                            EADD
[ G] RUN                              E1EA
[ G] RUN1                             E1ED
[ G] RUN2                             E1F8
[ G] SAVB                             DCD5
[ G] SAVDRV                           DCDA
[ G] SAVF1                            EE88
[ G] SAVF2                            EE95
[ G] SAVF3                            EEC6
[ G] SAVFIL                           EE79
[ G] SAVP1                            F5B4
[ G] SAVP2                            F5BE
[ G] SAVPRM                           F5AF
[ G] SAVSTK                           DCDB
[ G] SAVX                             DCD6
[ G] SAVY                             DCD8
[ G] SDC1                             F14F
[ G] SDC2                             F156
[ G] SDCMD                            F140
[ G] SDRIVE                           DCEB
[ G] SDTAB                            F42D
[ G] SEC                              0006
[ G] SEC1                             EAC0
[ G] SEC2                             EACA
[ G] SECTOR                           EAB2
[ G] SEEK1                            E9C4
[ G] SEEK2                            E9E4
[ G] SEEK3                            E9F7
[ G] SEEKABS                          E9AF
[ G] SEEKREL                          E9B2
[ G] SELDRV                           F67E
[ G] SERIALINIT                       F963
[ G] SET                              EFF3
[ G] SET0                             F004
[ G] SET1                             F013
[ G] SET2                             F032
[ G] SET3                             F089
[ G] SET4                             F0C1
[ G] SET5                             F0D5
[ G] SET_PPI_RD                       FBC2
[ G] SET_PPI_WR                       FBD0
[ G] SETADR                           F3C9
[ G] SETCMD                           F01E
[ G] SETDEF                           F00C
[ G] SETF0                            F038
[ G] SETF1                            F04F
[ G] SETF2                            F059
[ G] SETFLG                           F110
[ G] SETIN                            F666
[ G] SETOUT                           F670
[ G] SETTAB                           F386
[ G] SETVAR                           F5AB
[ G] SFTAB                            F3F5
[ G] SH21                             F1BF
[ G] SH22                             F1C7
[ G] SH23                             F1D4
[ G] SHFLAG                           F290
[ G] SHOADR                           F3DF
[ G] SHODRA                           F24F
[ G] SHODRB                           F255
[ G] SHODRV                           F204
[ G] SHOFIL                           E6C3
[ G] SHOME                            E6AB
[ G] SHON1                            E6DF
[ G] SHONAM                           E6DD
[ G] SHOOFF                           F2A6
[ G] SHOSAV                           E6CA
[ G] SHOT1                            F262
[ G] SHOT2                            F26D
[ G] SHOT3                            F276
[ G] SHOT4                            F279
[ G] SHOTAB                           F25F
[ G] SHOW                             F12C
[ G] SHOW0                            F138
[ G] SHOW1                            F13D
[ G] SHOW2                            F161
[ G] SHOW3                            F201
[ G] SHOW4                            F2AE
[ G] SHOW5                            F27D
[ G] SHOW6                            F306
[ G] SHRT                             E701
[ G] SKIP                             E4CF
[ G] SKRTS                            E4DB
[ G] SPACE                            E585
[ G] SPC1                             E589
[ G] SSR                              E00B
[ G] SSRTAB                           F863
[ G] ST1                              F0C4
[ G] STACK                            DE00
[ G] STFLAG                           F0FD
[ G] SUSP1                            EA64
[ G] SUSP2                            EA6F
[ G] SUSPEND                          EA2C
[ G] SVECT                            F68E
[ G] SWI                              F6F7
[ G] SWI2                             F6FB
[ G] SWI2VEC                          DC98
[ G] SWI3                             F6FF
[ G] SWI3VEC                          DC9A
[ G] SWIVEC                           DC96
[ G] SYSDIR                           DCAF
[ G] SYSDRV                           DCAE
[ G] TEMP                             DCCB
[ G] TEMP1                            DCCD
[ G] TEMP2                            DCCF
[ G] TEMP3                            DCD1
[ G] TEMP4                            DCD3
[ G] TLOOK                            E4F8
[ G] TLOOK1                           E4FB
[ G] TLOOK2                           E50A
[ G] TLOOK3                           E527
[ G] TLOOK4                           E52C
[ G] TLOOK5                           E52E
[ G] TLOOK6                           E533
[ G] TLOOKE                           F0B7
[ G] TMPENT                           E1B5
[ G] TOUPPER                          E4ED
[ G] TRAC1                            F500
[ G] TRAC2                            F50D
[ G] TRCFLG                           DCA4
[ G] TRET                             E4EC
[ G] TSTCHR                           E5C6
[ G] TSTDE1                           E5B6
[ G] TSTDEV                           E5B4
[ G] TSTE1                            E4E8
[ G] TSTERM                           E4DC
[ G] TSTRET                           F555
[ G] UART0                            FE68
[ G] UART1                            FE69
[ G] UART2                            FE6A
[ G] UART3                            FE6B
[ G] UART4                            FE6C
[ G] UART5                            FE6D
[ G] UART6                            FE6E
[ G] UART7                            FE6F
[ G] UNC1                             EDC5
[ G] UNCHAIN                          EDB1
[ G] UNCMD                            F719
[ G] USREND                           DFFF
[ G] USRRAM                           2000
[ G] VALCHR                           E396
[ G] VALID                            E34F
[ G] VALTST                           E356
[ G] WDISK                            EB05
[ G] WPERM                            0040
[ G] WRB1                             E94D
[ G] WRC1                             E90E
[ G] WRDE1                            E479
[ G] WRDE2                            E488
[ G] WRDEC                            E471
[ G] WRDEC8                           E470
[ G] WRDEV                            E594
[ G] WRDEV1                           E596
[ G] WRHEX                            E54D
[ G] WRHEXW                           E538
[ G] WRITEB                           E925
[ G] WRITEC                           E8FE
[ G] WRKCHG                           DCDD
[ G] WRKDRV                           DCDE
[ G] WRKSEC                           DCDF
[ G] WRKSPC                           DE00
[ G] WRLIN                            E541
[ G] WRMSG                            E571
[ G] WRNULL                           F956
[ G] WRSEC                            F6F3
[ G] WRSER1                           F964
[ G] WRST1                            E569
[ G] WRST2                            E58B
[ G] WRSTR                            E567
[ G] WRTST                            E626
[ G] WRWRK                            E62B
[ G] WTRY1                            EB0C
[ G] WTRY2                            EB10
[ G] XFORMAT                          DC94
[ G] XHOME                            DC8E
[ G] XRDSEC                           DC90
[ G] XWRSEC                           DC92
[ G] ZERORC                           E306
