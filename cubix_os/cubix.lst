                      (        cubix.asm):00001         ;       title   CUBIX 6809 Operating System
                      (        cubix.asm):00002         ;*
                      (        cubix.asm):00003         ;* CUBIX Operating System for the 6809
                      (        cubix.asm):00004         ;*
                      (        cubix.asm):00005         ;* Copyright 1983-2005 Dave Dunfield
                      (        cubix.asm):00006         ;* All rights reserved.
                      (        cubix.asm):00007         ;*
                      (        cubix.asm):00008         ;* asmode=dist OR demo
                      (        cubix.asm):00009         
                      (        cubix.asm):00010                 IFDEF   dist
                      (        cubix.asm):00011         ;* MEMORY LOCATIONS FOR DISTRIBUTION (NON-PORTED) ROM
     E000             (        cubix.asm):00012         ROM             EQU $E000                         ; OS FIRMWARE
     DC00             (        cubix.asm):00013         RAM             EQU ROM-1024                      ; OS LOCAL STORAGE (1K)
     2000             (        cubix.asm):00014         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
     DFFF             (        cubix.asm):00015         USREND          EQU ROM-1                         ; RAMTEST STOPS HERE
                      (        cubix.asm):00016                 ENDIF
                      (        cubix.asm):00017                 IFDEF   demo
                      (        cubix.asm):00018         ;* MEMORY LOCATIONS FOR THE DEMO SYSTEM USING EXAMPLE DRIVERS
0000                  (        cubix.asm):00019         ROM             EQU $E000                         ; OS FORMWARE
0000                  (        cubix.asm):00020         RAM             EQU ROM-1024                      ; OS LOCAL STORAGE
0000                  (        cubix.asm):00021         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
0000                  (        cubix.asm):00022         USREND          EQU ROM-1                         ; RAMTEST STOPS HERE
0000                  (        cubix.asm):00023         dr_file         SET sample.sys
                      (        cubix.asm):00024                 ENDIF
                      (        cubix.asm):00025         ;* MISC CONSTANTS
     0008             (        cubix.asm):00026         NDEV            EQU 8                             ; NUMBER OF SERIAL DEVICES SUPPORTED
     0004             (        cubix.asm):00027         NDSK            EQU 4                             ; # OF DISK DRIVES SUPPORTED
     0000             (        cubix.asm):00028         DIRSEC          EQU 0                             ; DIRECTORY STARTS HERE
     0001             (        cubix.asm):00029         LNKSEC          EQU 1                             ; STARTING LINK SECTOR ON DISK
     00F0             (        cubix.asm):00030         DEFATR          EQU %11110000                     ; DEFAULT FILE ATTRIBUTES
                      (        cubix.asm):00031         ;* RETURN CODES
     0001             (        cubix.asm):00032         RCBOP           EQU 1                             ; BAD OPERAND
     0002             (        cubix.asm):00033         RCNOTF          EQU 2                             ; FILE NOT FOUND
     0003             (        cubix.asm):00034         RCPRO           EQU 3                             ; FILE PROTECTION VIOLATION
     0004             (        cubix.asm):00035         RCORE           EQU 4                             ; NOT OPEN FOR READ
     0005             (        cubix.asm):00036         RCOWE           EQU 5                             ; NOT OPEN FOR WRITE
     0006             (        cubix.asm):00037         RCEOF           EQU 6                             ; END OF FILE ENCOUNTERED
     0007             (        cubix.asm):00038         RCEXI           EQU 7                             ; FILE ALREADY EXISTS
     0008             (        cubix.asm):00039         RCNOS           EQU 8                             ; NO DISK SPACE AVAILABLE
     0009             (        cubix.asm):00040         RCDSK           EQU 9                             ; DISK ERROR
     000A             (        cubix.asm):00041         RCDEV           EQU 10                            ; INVALID DEVICE
     000B             (        cubix.asm):00042         RCDNL           EQU 11                            ; DOWNLOAD FAILURE
     00FF             (        cubix.asm):00043         RCCMD           EQU 255                           ; BAD COMMAND
                      (        cubix.asm):00044         ;* FILE PERMISSIONS
     0080             (        cubix.asm):00045         RPERM           EQU %10000000                     ; READ PERMISSION
     0040             (        cubix.asm):00046         WPERM           EQU %01000000                     ; WRITE PERMISSION
     0020             (        cubix.asm):00047         EPERM           EQU %00100000                     ; EXECUTE PERMISSION
     0010             (        cubix.asm):00048         DPERM           EQU %00010000                     ; DELETE PERMISSION
                      (        cubix.asm):00049         ;* DISK CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00050                 ORG     0
0000                  (        cubix.asm):00051         DRIVE
0000                  (        cubix.asm):00052                 RMB     1                                 ; DRIVE ID
0001                  (        cubix.asm):00053         NCYL
0001                  (        cubix.asm):00054                 RMB     1                                 ; # TRACKS
0002                  (        cubix.asm):00055         NHEAD
0002                  (        cubix.asm):00056                 RMB     1                                 ; # HEADS
0003                  (        cubix.asm):00057         NSEC
0003                  (        cubix.asm):00058                 RMB     1                                 ; # SECTORS/TRACK
0004                  (        cubix.asm):00059         CYL
0004                  (        cubix.asm):00060                 RMB     1                                 ; CURRENT CYLINDER
0005                  (        cubix.asm):00061         HEAD
0005                  (        cubix.asm):00062                 RMB     1                                 ; CURRENT HEAD
0006                  (        cubix.asm):00063         SEC
0006                  (        cubix.asm):00064                 RMB     1                                 ; CURRENT SECTOR
     0007             (        cubix.asm):00065         CSIZE           EQU *
                      (        cubix.asm):00066         ;* DIRECTORY ENTRY DESCRIPTION
                      (        cubix.asm):00067                 ORG     0
0000                  (        cubix.asm):00068         DPREFIX
0000                  (        cubix.asm):00069                 RMB     8                                 ; DIRECTORY PREFIX
0008                  (        cubix.asm):00070         DNAME
0008                  (        cubix.asm):00071                 RMB     8                                 ; FILENAME
0010                  (        cubix.asm):00072         DTYPE
0010                  (        cubix.asm):00073                 RMB     3                                 ; FILETYPE
0013                  (        cubix.asm):00074         DDADR
0013                  (        cubix.asm):00075                 RMB     2                                 ; DISK ADDRESS
0015                  (        cubix.asm):00076         DRADR
0015                  (        cubix.asm):00077                 RMB     2                                 ; RUN ADDRESS
0017                  (        cubix.asm):00078         DATTR
0017                  (        cubix.asm):00079                 RMB     1                                 ; FILE ATTRIBUTES
                      (        cubix.asm):00080         ;* FILE CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00081                 ORG     0
0000                  (        cubix.asm):00082         OTYPE
0000                  (        cubix.asm):00083                 RMB     1                                 ; TYPE OF OPEN (READ/WRITE ETC.)
0001                  (        cubix.asm):00084         ODRIVE
0001                  (        cubix.asm):00085                 RMB     1                                 ; DRIVE FILE IS ON
0002                  (        cubix.asm):00086         OFIRST
0002                  (        cubix.asm):00087                 RMB     2                                 ; FIRST SECTOR IN ILE
0004                  (        cubix.asm):00088         OSECTOR
0004                  (        cubix.asm):00089                 RMB     2                                 ; SECTOR BEING READ/WRITTEN
0006                  (        cubix.asm):00090         OLSTSEC
0006                  (        cubix.asm):00091                 RMB     2                                 ; LAST SECTOR READ/WRITTEN
0008                  (        cubix.asm):00092         OOFFSET
0008                  (        cubix.asm):00093                 RMB     2                                 ; OFFSET INTO SERIAL BUFFER
     000A             (        cubix.asm):00094         OSIZ            EQU *
                      (        cubix.asm):00095         ;* RAM VARIABLES
                      (        cubix.asm):00096                 ORG     RAM
DC00                  (        cubix.asm):00097         INBUFF
DC00                  (        cubix.asm):00098                 RMB     80                                ; INPUT BUFFER
     DC50             (        cubix.asm):00099         IRAM            EQU *                             ; START OF INITIALIZED RAM
DC50                  (        cubix.asm):00100         DCTRL
DC50                  (        cubix.asm):00101                 RMB     CSIZE*NDSK                        ; DRIVE CONTROL BLOCKS
DC6C                  (        cubix.asm):00102         CONIN
DC6C                  (        cubix.asm):00103                 RMB     1                                 ; SELECTED CONSOLE INPUT
DC6D                  (        cubix.asm):00104         CONOUT
DC6D                  (        cubix.asm):00105                 RMB     1                                 ; SELECTED CONSOLE OUTPUT
                      (        cubix.asm):00106         ;* DITAB MARKS START OF VECTOR TABLE
                      (        cubix.asm):00107         ;* SERIAL DEVICE DRIVERS
DC6E                  (        cubix.asm):00108         DITAB
DC6E                  (        cubix.asm):00109                 RMB     NDEV*2                            ; DEVICE INPUT DRIVERS
DC7E                  (        cubix.asm):00110         DOTAB
DC7E                  (        cubix.asm):00111                 RMB     NDEV*2                            ; DEVICE OUTPUT DRIVERS
                      (        cubix.asm):00112         ;* DISK DRIVERS
DC8E                  (        cubix.asm):00113         XHOME
DC8E                  (        cubix.asm):00114                 RMB     2                                 ; DISK HOME HEAD ROUTINE
DC90                  (        cubix.asm):00115         XRDSEC
DC90                  (        cubix.asm):00116                 RMB     2                                 ; DISK READ SECTOR ROUTINE
DC92                  (        cubix.asm):00117         XWRSEC
DC92                  (        cubix.asm):00118                 RMB     2                                 ; DISK WRITE SECTOR ROUTINE
DC94                  (        cubix.asm):00119         XFORMAT
DC94                  (        cubix.asm):00120                 RMB     2                                 ; DISK FORMAT ROUTINE
                      (        cubix.asm):00121         ;* MACHINE VECTORS
DC96                  (        cubix.asm):00122         SWIVEC
DC96                  (        cubix.asm):00123                 RMB     2                                 ; SWI HANDLER VECTOR
DC98                  (        cubix.asm):00124         SWI2VEC
DC98                  (        cubix.asm):00125                 RMB     2                                 ; SWI2 INTERRUPT VECTOR
DC9A                  (        cubix.asm):00126         SWI3VEC
DC9A                  (        cubix.asm):00127                 RMB     2                                 ; SWI3 INTERRUPT VECTOR
DC9C                  (        cubix.asm):00128         IRQVEC
DC9C                  (        cubix.asm):00129                 RMB     2                                 ; IRQ HANDLER VECTOR
DC9E                  (        cubix.asm):00130         FIRQVEC
DC9E                  (        cubix.asm):00131                 RMB     2                                 ; FIRQ HANDLER VECTOR
DCA0                  (        cubix.asm):00132         NMIVEC
DCA0                  (        cubix.asm):00133                 RMB     2                                 ; NMI HANDLER VECTOR
                      (        cubix.asm):00134         ;* MSGFLG MARKS START OF FLAG TABLES
DCA2                  (        cubix.asm):00135         MSGFLG
DCA2                  (        cubix.asm):00136                 RMB     1                                 ; MESSAGE ENABLED FLAG
DCA3                  (        cubix.asm):00137         DBGFLG
DCA3                  (        cubix.asm):00138                 RMB     1                                 ; DEBUG FLAG
DCA4                  (        cubix.asm):00139         TRCFLG
DCA4                  (        cubix.asm):00140                 RMB     1                                 ; TRACE ENABLED FLAG
     0003             (        cubix.asm):00141         NUMFLG          EQU 3                             ; # FLAGS SUPPORTED
                      (        cubix.asm):00142         ;* DEFAULT DIRECTORY
DCA5                  (        cubix.asm):00143         DEFDRV
DCA5                  (        cubix.asm):00144                 RMB     1                                 ; DEFAULT DRIVE
DCA6                  (        cubix.asm):00145         DEFDIR
DCA6                  (        cubix.asm):00146                 RMB     8                                 ; DEFAULT DIRECTORY
                      (        cubix.asm):00147         ;* SYSTEM DIRECTORY
DCAE                  (        cubix.asm):00148         SYSDRV
DCAE                  (        cubix.asm):00149                 RMB     1                                 ; SYSTEM DRIVE
DCAF                  (        cubix.asm):00150         SYSDIR
DCAF                  (        cubix.asm):00151                 RMB     8                                 ; SYSTEM DIRECTORY
                      (        cubix.asm):00152         ;* NON-INITIALIZED GLOBAL RAM
DCB7                  (        cubix.asm):00153         FDRIVE
DCB7                  (        cubix.asm):00154                 RMB     1                                 ; CURRENT DISK DRIVE
DCB8                  (        cubix.asm):00155         PREFIX
DCB8                  (        cubix.asm):00156                 RMB     8                                 ; DIRECTORY PREFIX
DCC0                  (        cubix.asm):00157         FNAME
DCC0                  (        cubix.asm):00158                 RMB     8                                 ; FILENAME
DCC8                  (        cubix.asm):00159         FTYPE
DCC8                  (        cubix.asm):00160                 RMB     3                                 ; FILETYPE
DCCB                  (        cubix.asm):00161         TEMP
DCCB                  (        cubix.asm):00162                 RMB     2                                 ; TEMPORARY STORAGE
DCCD                  (        cubix.asm):00163         TEMP1
DCCD                  (        cubix.asm):00164                 RMB     2                                 ; MORE TEMPORARY STORAGE
DCCF                  (        cubix.asm):00165         TEMP2
DCCF                  (        cubix.asm):00166                 RMB     2                                 ;STILL MORE
DCD1                  (        cubix.asm):00167         TEMP3
DCD1                  (        cubix.asm):00168                 RMB     2                                 ;STILL MORE
DCD3                  (        cubix.asm):00169         TEMP4
DCD3                  (        cubix.asm):00170                 RMB     2                                 ;STILL MORE
DCD5                  (        cubix.asm):00171         SAVB
DCD5                  (        cubix.asm):00172                 RMB     1                                 ;CALLERS 'B' REGISTER
DCD6                  (        cubix.asm):00173         SAVX
DCD6                  (        cubix.asm):00174                 RMB     2                                 ;CALLERS 'X' REGISTER
DCD8                  (        cubix.asm):00175         SAVY
DCD8                  (        cubix.asm):00176                 RMB     2                                 ;CALLERS 'Y' REGISTER
DCDA                  (        cubix.asm):00177         SAVDRV
DCDA                  (        cubix.asm):00178                 RMB     1                                 ;CALLERS ACTIVE DRIVE
DCDB                  (        cubix.asm):00179         SAVSTK
DCDB                  (        cubix.asm):00180                 RMB     2                                 ;CALLERS STACK POINTER
DCDD                  (        cubix.asm):00181         WRKCHG
DCDD                  (        cubix.asm):00182                 RMB     1                                 ;WORK SECTOR CHANGED
DCDE                  (        cubix.asm):00183         WRKDRV
DCDE                  (        cubix.asm):00184                 RMB     1                                 ;CURRENT WORK SECTOR DRIVE
DCDF                  (        cubix.asm):00185         WRKSEC
DCDF                  (        cubix.asm):00186                 RMB     2                                 ;CURRENT WORK SECTOR
DCE1                  (        cubix.asm):00187         CMDDRV
DCE1                  (        cubix.asm):00188                 RMB     1                                 ;CURRENT COMMAND FILE DRIVE
DCE2                  (        cubix.asm):00189         CMDSEC
DCE2                  (        cubix.asm):00190                 RMB     2                                 ;CURRENTLY OPEN COMMAND FILE SECTOR
DCE4                  (        cubix.asm):00191         CMDOFF
DCE4                  (        cubix.asm):00192                 RMB     2                                 ;OFFSET INTO COMMAND FILE SECTOR
DCE6                  (        cubix.asm):00193         CMDSTK
DCE6                  (        cubix.asm):00194                 RMB     2                                 ;COMMAND PROCESSOR STACK PTR
DCE8                  (        cubix.asm):00195         CMDRC
DCE8                  (        cubix.asm):00196                 RMB     1                                 ;COMMAND FILE RETURN CODES
DCE9                  (        cubix.asm):00197         OLDSTK
DCE9                  (        cubix.asm):00198                 RMB     2                                 ;STACK FROM BEFORE TEMP ENTRY
DCEB                  (        cubix.asm):00199         SDRIVE
DCEB                  (        cubix.asm):00200                 RMB     1                                 ;CURRENTLY SELECTED DRIVE
DCEC                  (        cubix.asm):00201         ERRCNT
DCEC                  (        cubix.asm):00202                 RMB     1                                 ;DISK ERROR RETRY COUNT
DCED                  (        cubix.asm):00203         CMDBUF
DCED                  (        cubix.asm):00204                 RMB     80                                ;COMMAND BUFFER PARAMETER SAVE AREA
     DE00             (        cubix.asm):00205         STACK           EQU RAM+512                       ;SYSTEM STACK
     DE00             (        cubix.asm):00206         WRKSPC          EQU STACK                         ;WORK AREA
                      (        cubix.asm):00207         ;*
                      (        cubix.asm):00208                 ORG     ROM
                      (        cubix.asm):00209         ;* MISC FIXED CONSTANTS
E000                  (        cubix.asm):00210         ROMCHK
E000 FFFF             (        cubix.asm):00211                 FDB     $FFFF                             ;BLANK SPACE TO INSERT CHECKSUM
                      (        cubix.asm):00212                 IFDEF   test
                      (        cubix.asm):00213                 LDD     #ssr
                      (        cubix.asm):00214                 STD     >tvector
                      (        cubix.asm):00215                 JMP     begin
                      (        cubix.asm):00216                 ENDIF
E002                  (        cubix.asm):00217         MBASE
E002 2000             (        cubix.asm):00218                 FDB     USRRAM                            ;BASE MEMORY ADDRESS
                      (        cubix.asm):00219         ;*
                      (        cubix.asm):00220         ;* HARDWARE INITIALIZATION ROUTINE
                      (        cubix.asm):00221         ;*
E004                  (        cubix.asm):00222         DOINIT
E004 108EDC50         (        cubix.asm):00223                 LDY     #IRAM                             ;POINT TO INITIALIZED RAM
E008 7EF90F           (        cubix.asm):00224                 JMP     HWINIT                            ;INIT HARDWARE
                      (        cubix.asm):00225         ;*
                      (        cubix.asm):00226         ;* APPLICATION PROGRAM INTERFACE
                      (        cubix.asm):00227         ;*
E00B                  (        cubix.asm):00228         SSR
E00B F7DCD5           (        cubix.asm):00229                 STB     >SAVB                             ;APPLICS SAVED 'B'
E00E BFDCD6           (        cubix.asm):00230                 STX     >SAVX                             ;APPLICS SAVED 'X'
E011 10BFDCD8         (        cubix.asm):00231                 STY     >SAVY                             ;APPLICS SAVED 'Y'
E015 F6DCEB           (        cubix.asm):00232                 LDB     >SDRIVE                           ;GET DOS DRIVE
E018 F7DCDA           (        cubix.asm):00233                 STB     >SAVDRV                           ;SET SAVED DRIVE
E01B 316A             (        cubix.asm):00234                 LEAY    10,S                              ;ADDR OF SAVED PC
E01D AEA4             (        cubix.asm):00235                 LDX     ,Y                                ;GET IT
E01F E680             (        cubix.asm):00236                 LDB     ,X+                               ;GET OPERAND BYTE
E021 AFA4             (        cubix.asm):00237                 STX     ,Y                                ;SAVE UPDATED PC
E023 C16F             (        cubix.asm):00238                 CMPB    #NUMSSR                           ;IS IT A VALID CALL #
E025 2435             (        cubix.asm):00239                 BHS     INVSSR                            ;INVALID CALL
E027 58               (        cubix.asm):00240                 ASLB                                      ;DOUBLE FOR TWO BYTE ENTRIES
E028 8EF831           (        cubix.asm):00241                 LDX     #SSRTAB                           ;OFFSET TO IT
E02B 3A               (        cubix.asm):00242                 ABX                                       ;UNSIGNED ADD
E02C EC84             (        cubix.asm):00243                 LDD     ,X                                ;GET ADDRESS
E02E FDDCCB           (        cubix.asm):00244                 STD     >TEMP                             ;SAVE SO WE CAN EXEC
E031 10BFDCDB         (        cubix.asm):00245                 STY     >SAVSTK                           ;SAVE STACK POINTER
E035 B6DCA3           (        cubix.asm):00246                 LDA     >DBGFLG                           ;DEBUGGING?
E038 2606             (        cubix.asm):00247                 BNE     DBGSSR                            ;YES, OUTPUT DATA
E03A 357F             (        cubix.asm):00248                 PULS    CC,A,B,DP,X,Y,U                   ;RESTORE APPLICS REGS
E03C 6E9FDCCB         (        cubix.asm):00249                 JMP     [TEMP]                            ;EXECUTE SYSTEM CALL
E040                  (        cubix.asm):00250         DBGSSR
E040 BDE535           (        cubix.asm):00251                 JSR     WRLIN                             ;OUTPUT LINE
E043 53535220         (        cubix.asm):00252                 FCC     'SSR '
E047 AEA4             (        cubix.asm):00253                 LDX     ,Y                                ;RECOVER PC
E049 E61F             (        cubix.asm):00254                 LDB     -1,X                              ;GET NUMBER BACK
E04B BDE464           (        cubix.asm):00255                 JSR     WRDEC8                            ;OUTPUT
E04E BDE535           (        cubix.asm):00256                 JSR     WRLIN
E051 202D20           (        cubix.asm):00257                 FCC     ' - '
E054 357F             (        cubix.asm):00258                 PULS    CC,A,B,DP,X,Y,U
E056 8D31             (        cubix.asm):00259                 BSR     DMPREG1                           ;DISPLAY REGS
E058 6E9FDCCB         (        cubix.asm):00260                 JMP     [TEMP]
E05C                  (        cubix.asm):00261         INVSSR
E05C 1F24             (        cubix.asm):00262                 TFR     Y,S                               ;FIX STACK
E05E BDE535           (        cubix.asm):00263                 JSR     WRLIN                             ;OUTPUT LINE
E061 496E76616C696420 (        cubix.asm):00264                 FCC     'Invalid SSR '
     53535220
E06D BDE464           (        cubix.asm):00265                 JSR     WRDEC8                            ;OUTPUT
E070 BDE535           (        cubix.asm):00266                 JSR     WRLIN                             ;OUTPUT LINE
E073 2061742024       (        cubix.asm):00267                 FCC     ' at $'
E078 ECE1             (        cubix.asm):00268                 LDD     ,S++                              ;GET ADDR
E07A 830002           (        cubix.asm):00269                 SUBD    #2                                ;BACK TO ADDRESS
E07D BDE52C           (        cubix.asm):00270                 JSR     WRHEXW                            ;OUTPUT
E080 BDE56F           (        cubix.asm):00271                 JSR     LFCR                              ;NEW LINE
E083 7EE1AD           (        cubix.asm):00272                 JMP     DOSKCM                            ;RE-ENTER, INSURE NO COMMAND
E086                  (        cubix.asm):00273         DMPREG
E086 8D01             (        cubix.asm):00274                 BSR     DMPREG1                           ;BSR SO PC ON STACK,4
E088 39               (        cubix.asm):00275                 RTS
                      (        cubix.asm):00276         ;* DEBUG ROUTINE
E089                  (        cubix.asm):00277         DMPREG1
E089 3407             (        cubix.asm):00278                 PSHS    CC,A,B                            ;SAVE REGS
E08B BDE535           (        cubix.asm):00279                 JSR     WRLIN                             ;OUTPUT MESSAGE
E08E 50433D           (        cubix.asm):00280                 FCC     'PC='
E091 EC65             (        cubix.asm):00281                 LDD     5,S                               ;GET PC
E093 830002           (        cubix.asm):00282                 SUBD    #2                                ;BACK UP TO SSR ADDRESS
E096 BDE52C           (        cubix.asm):00283                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E099 BDE535           (        cubix.asm):00284                 JSR     WRLIN                             ;OUTPUT MESSAGE
E09C 2043433D         (        cubix.asm):00285                 FCC     ' CC='
E0A0 A6E4             (        cubix.asm):00286                 LDA     ,S                                ;GET CONDITION CODE
E0A2 BDE541           (        cubix.asm):00287                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0A5 BDE535           (        cubix.asm):00288                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0A8 2044503D         (        cubix.asm):00289                 FCC     ' DP='
E0AC 1FB8             (        cubix.asm):00290                 TFR     DP,A                              ;GET DIRECT PAGE
E0AE BDE541           (        cubix.asm):00291                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0B1 BDE535           (        cubix.asm):00292                 JSR     WRLIN                             ;OUTPUT MESSAHE
E0B4 20413D           (        cubix.asm):00293                 FCC     ' A='
E0B7 A661             (        cubix.asm):00294                 LDA     1,S                               ;GET SAVED 'A'
E0B9 BDE541           (        cubix.asm):00295                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0BC BDE535           (        cubix.asm):00296                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0BF 20423D           (        cubix.asm):00297                 FCC     ' B='
E0C2 A662             (        cubix.asm):00298                 LDA     2,S                               ;GET SAVED 'B'
E0C4 BDE541           (        cubix.asm):00299                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0C7 BDE535           (        cubix.asm):00300                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0CA 20583D           (        cubix.asm):00301                 FCC     ' X='
E0CD 1F10             (        cubix.asm):00302                 TFR     X,D                               ;GET 'X'
E0CF BDE52C           (        cubix.asm):00303                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0D2 BDE535           (        cubix.asm):00304                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0D5 20593D           (        cubix.asm):00305                 FCC     ' Y='
E0D8 1F20             (        cubix.asm):00306                 TFR     Y,D                               ;GET 'Y'
E0DA BDE52C           (        cubix.asm):00307                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0DD BDE535           (        cubix.asm):00308                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0E0 20553D           (        cubix.asm):00309                 FCC     ' U='
E0E3 1F30             (        cubix.asm):00310                 TFR     U,D                               ;GET 'U'
E0E5 BDE52C           (        cubix.asm):00311                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0E8 BDE535           (        cubix.asm):00312                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0EB 20533D           (        cubix.asm):00313                 FCC     ' S='
E0EE 1F40             (        cubix.asm):00314                 TFR     S,D                               ;GET 'S'
E0F0 C30007           (        cubix.asm):00315                 ADDD    #7                                ;DISCOUNT WHAT WE STACKED
E0F3 BDE52C           (        cubix.asm):00316                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0F6 BDE56F           (        cubix.asm):00317                 JSR     LFCR                              ;OUTPUT NEW LINE
E0F9 3587             (        cubix.asm):00318                 PULS    CC,A,B,PC                         ;RESTORE & RETURN
                      (        cubix.asm):00319         ;*
                      (        cubix.asm):00320         ;* ZERO WORK RAM & INIT HARDWARE DEVICES
                      (        cubix.asm):00321         ;*
E0FB                  (        cubix.asm):00322         BEGIN
E0FB 10CEDE00         (        cubix.asm):00323                 LDS     #STACK                            ;SET UP SYSTEM STACK
                      (        cubix.asm):00324         ;        IFDEF   epc
                      (        cubix.asm):00325         ;        CLR     $1400                             ;clear ram page
                      (        cubix.asm):00326         ;        ENDIF
                      (        cubix.asm):00327         ;        LDX     #RAM                              ;POINT TO START OF RAM
                      (        cubix.asm):00328         ;BEG1
                      (        cubix.asm):00329         ;        CLR     ,X+                               ;ZERO IT
                      (        cubix.asm):00330         ;        CMPX    #STACK                            ;AT END?
                      (        cubix.asm):00331         ;        BLO     BEG1                              ;CONTINUE
E0FF BDE004           (        cubix.asm):00332                 JSR     DOINIT                            ;INITIALIZE HARDWARE
E102 BDE60C           (        cubix.asm):00333                 JSR     PURGE1                            ;INITIALIZE WORK SECTOR
                      (        cubix.asm):00334         ;        CLR     >ERRCNT                           ;INDICATE NO ERRORS
                      (        cubix.asm):00335         ;        IFNDEF  test
                      (        cubix.asm):00336         ;;* PERFORM CHECKSUM TEST OF ROM
                      (        cubix.asm):00337         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00338         ;        FCC     'ROM... '
                      (        cubix.asm):00339         ;        LDX     #ROMCHK+2                         ;CHECKSUM STARTS HERE
                      (        cubix.asm):00340         ;        CLRA                                      ;ZERO HIGH
                      (        cubix.asm):00341         ;        CLRB                                      ;ZERO LOW
                      (        cubix.asm):00342         ;ROMT1
                      (        cubix.asm):00343         ;        ADDB    ,X+                               ;ADD IN ONE BYTE
                      (        cubix.asm):00344         ;        ADCA    #0                                ;INSURE HIGH INCREMENTS
                      (        cubix.asm):00345         ;        CMPX    #0                                ;AT END OF ROM?
                      (        cubix.asm):00346         ;        BNE     ROMT1                             ;NO, KEEP TRYING
                      (        cubix.asm):00347         ;        CMPD    >ROMCHK                           ;DOES CHECKSUM MATCH?
                      (        cubix.asm):00348         ;        BEQ     ROMT2                             ;YES, ITS OK
                      (        cubix.asm):00349         ;;* ROM TEST FAILED
                      (        cubix.asm):00350         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00351         ;        FCC     'Failed'
                      (        cubix.asm):00352         ;        DEC     >ERRCNT                           ;SET FLAG, INDICATE ERROR
                      (        cubix.asm):00353         ;        BRA     ROMT3
                      (        cubix.asm):00354         ;* ROM TEST PASSED
                      (        cubix.asm):00355         ;ROMT2
                      (        cubix.asm):00356         ;        BSR     SPASS                             ;DISPLAY PASSED MESSAGE
                      (        cubix.asm):00357         ;        ENDIF
                      (        cubix.asm):00358         ;;* PERFORM WALKING BIT TEST OF RAM
                      (        cubix.asm):00359         ;ROMT3
                      (        cubix.asm):00360         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00361         ;        FCC     'RAM... '
                      (        cubix.asm):00362         ;        LDX     >MBASE                            ;GET BASE RAM ADDRESS
                      (        cubix.asm):00363         ;RAMT1
                      (        cubix.asm):00364         ;        LDA     ,X                                ;GET ORIGINAL DATA BYTE
                      (        cubix.asm):00365         ;        LDB     #%10000000                        ;BEGIN WITH LEFTMOST BIT
                      (        cubix.asm):00366         ;RAMT2
                      (        cubix.asm):00367         ;        STB     ,X                                ;WRITE TEST PATTERN
                      (        cubix.asm):00368         ;        CMPB    ,X                                ;DOES IT MATCH
                      (        cubix.asm):00369         ;        BNE     RAMT5                             ;NO, FAILED
                      (        cubix.asm):00370         ;        LSRB                                      ;SHIFT BIT
                      (        cubix.asm):00371         ;        BNE     RAMT2                             ;DO NEXT BIT
                      (        cubix.asm):00372         ;        STA     ,X+                               ;RESTORE ORIGINAL DATA
                      (        cubix.asm):00373         ;;* ON EVEN PAGE BOUNDARYS, TEST FOR ABORT KEY
                      (        cubix.asm):00374         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00375         ;        TSTB                                      ;EVEN BOUNDARY?
                      (        cubix.asm):00376         ;        BNE     RAMT3                             ;NO, DON'T TEST
                      (        cubix.asm):00377         ;        JSR     TSTCHR                            ;ANY CHARACTERS RECEIVED?
                      (        cubix.asm):00378         ;        CMPA    #$1B                              ;ESCAPE ABORTS?
                      (        cubix.asm):00379         ;        BEQ     RAMT4                             ;ABORT RAM TEST
                      (        cubix.asm):00380         ;;* CONTINUE TILL AT END OF USER RAM
                      (        cubix.asm):00381         ;RAMT3
                      (        cubix.asm):00382         ;        CMPX    #USREND                           ;ARE WE OVER?
                      (        cubix.asm):00383         ;        BLO     RAMT1                             ;NO, ITS OK
                      (        cubix.asm):00384         ;;* FINISHED, RAM TEST PASSED
                      (        cubix.asm):00385         ;        BSR     SPASS                             ;INDICATE SUCCESS
                      (        cubix.asm):00386         ;        BRA     HELLO                             ;AND PROCEED
                      (        cubix.asm):00387         ;* DISPLAY 'PASSED' MESSAGE
                      (        cubix.asm):00388         ;SPASS
                      (        cubix.asm):00389         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00390         ;        FCC     'Passed'
                      (        cubix.asm):00391         ;        RTS
                      (        cubix.asm):00392         ;;* RAM TEST ABORTED BY ESCAPE
                      (        cubix.asm):00393         ;RAMT4
                      (        cubix.asm):00394         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00395         ;        FCC     'Aborted'
                      (        cubix.asm):00396         ;        BRA     RAMT6                             ;AND CONTINUE
                      (        cubix.asm):00397         ;;* RAM TEST FAILED,
                      (        cubix.asm):00398         ;RAMT5
                      (        cubix.asm):00399         ;        STA     ,X                                ;RESAVE OLD VALUE
                      (        cubix.asm):00400         ;        JSR     WRLIN                             ;OUTPUT FAILED MESSAGE
                      (        cubix.asm):00401         ;        FCC     'Failed at $'
                      (        cubix.asm):00402         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00403         ;        JSR     WRHEXW                            ;DISPLAY IN HEX
                      (        cubix.asm):00404         ;        JSR     LFCR                              ;NEW LINE
                      (        cubix.asm):00405         ;RAMT6
                      (        cubix.asm):00406         ;        DEC     >ERRCNT                           ;INDICATE ERRORS
                      (        cubix.asm):00407         ;* ISSUE HEARALD MESSAGE & START THE BALL ROLLING
E105                  (        cubix.asm):00408         HELLO
E105 BDE565           (        cubix.asm):00409                 JSR     WRMSG
E108 0A               (        cubix.asm):00410                 FCB     $0A
E109 4355424958207665 (        cubix.asm):00411                 FCC     'CUBIX version osver'
     7273696F6E206F73
     766572
E11C 0A0D0A           (        cubix.asm):00412                 FCB     $0A,$0D,$0A
E11F 436F707972696768 (        cubix.asm):00413                 FCC     'Copyright 1983-2005 Dave Dunfield'
     7420313938332D32
     3030352044617665
     2044756E6669656C
     64
E140 0A0D             (        cubix.asm):00414                 FCB     $0A,$0D
E142 416C6C2072696768 (        cubix.asm):00415                 FCC     'All rights reserved'
     7473207265736572
     766564
E155 0A0D00           (        cubix.asm):00416                 FCB     $0A,$0D,0
                      (        cubix.asm):00417         ;* IF NO ERRORS, EXECUTE THE STARTUP FILE
E158 B6DCEC           (        cubix.asm):00418                 LDA     >ERRCNT                           ;GET ERROR FLAG
E15B 2618             (        cubix.asm):00419                 BNE     CMD                               ;ERRORS, DO NOT EXECUTE
E15D 108EF6E8         (        cubix.asm):00420                 LDY     #IPLFILE                          ;POINT TO IPL FILE
E161 BDE35E           (        cubix.asm):00421                 JSR     GETNAM                            ;GET FILE NAME
E164 CEE175           (        cubix.asm):00422                 LDU     #CMD                              ;ADDRESS TO RETURN TO
E167 3440             (        cubix.asm):00423                 PSHS    U                                 ;SAVE ON STACK (FAKE JSR)
E169 10FFDCDB         (        cubix.asm):00424                 STS     >SAVSTK                           ;SAVE STACK INCASE ERROR
E16D BDE678           (        cubix.asm):00425                 JSR     LOCDIR                            ;LOCATE FILE IN DIRECTORY
E170 2603             (        cubix.asm):00426                 BNE     CMD                               ;NOT FOUND, REPORT ERROR
E172 7EE242           (        cubix.asm):00427                 JMP     EXE3                              ;EXECUTE FILE
                      (        cubix.asm):00428         ;*
                      (        cubix.asm):00429         ;* COMMAND INTERPRETER
                      (        cubix.asm):00430         ;*
E175                  (        cubix.asm):00431         CMD
E175 10CEDE00         (        cubix.asm):00432                 LDS     #STACK                            ;SET UP STACK
E179 BDE61A           (        cubix.asm):00433                 JSR     WRTST                             ;WRITE OUT WORK SECTOR IF MODIFIED
E17C BDE48C           (        cubix.asm):00434                 JSR     GLINE                             ;GET LINE OF INPUT
E17F 8D33             (        cubix.asm):00435                 BSR     EXECMD                            ;EXECUTE COMMAND
E181                  (        cubix.asm):00436         RCRET
E181 27F2             (        cubix.asm):00437                 BEQ     CMD                               ;NO RETURN CODE TO DISPLAY
E183 1F89             (        cubix.asm):00438                 TFR     A,B                               ;WRITE IT
E185 BDE535           (        cubix.asm):00439                 JSR     WRLIN                             ;OUTPUT MESSAGE
E188 52633D           (        cubix.asm):00440                 FCC     'Rc='
E18B BDE464           (        cubix.asm):00441                 JSR     WRDEC8                            ;OUTPUT IN DECIMAL
E18E BDE56F           (        cubix.asm):00442                 JSR     LFCR                              ;NEW LINE
E191 20E2             (        cubix.asm):00443                 BRA     CMD                               ;GET NEXT COMMAND
                      (        cubix.asm):00444         ;* RE-ENTRY POINT
E193                  (        cubix.asm):00445         REENT
E193 3401             (        cubix.asm):00446                 PSHS    CC                                ;SAVE CC
E195 8E0000           (        cubix.asm):00447                 LDX     #0                                ;GET A ZERO
E198 BFDCE9           (        cubix.asm):00448                 STX     >OLDSTK                           ;CLEAR RETURN STACK
E19B BEDCE6           (        cubix.asm):00449                 LDX     >CMDSTK                           ;GET CMD STACK
E19E 2604             (        cubix.asm):00450                 BNE     CMDGO                             ;KEEP IT GOING
E1A0 3501             (        cubix.asm):00451                 PULS    CC                                ;RESTORE CC
E1A2 20DD             (        cubix.asm):00452                 BRA     RCRET                             ;AND CONTINUE
E1A4                  (        cubix.asm):00453         CMDGO
E1A4 3501             (        cubix.asm):00454                 PULS    CC
E1A6 7EF55F           (        cubix.asm):00455                 JMP     CMDRET                            ;RETURN TO COMMAND
                      (        cubix.asm):00456         ;* TEMPORARY DOS ENTRY
E1A9                  (        cubix.asm):00457         TMPENT
E1A9 10FFDCE9         (        cubix.asm):00458                 STS     >OLDSTK                           ;SAVE OLD STACK
E1AD                  (        cubix.asm):00459         DOSKCM
E1AD 4F               (        cubix.asm):00460                 CLRA
E1AE 5F               (        cubix.asm):00461                 CLRB
E1AF FDDCE6           (        cubix.asm):00462                 STD     >CMDSTK                           ;ZERO COMAND STACK
E1B2 20C1             (        cubix.asm):00463                 BRA     CMD                               ;CONTINUE
                      (        cubix.asm):00464         ;*
                      (        cubix.asm):00465         ;* EXECUTE DOS COMMAND(Y)
                      (        cubix.asm):00466         ;*
E1B4                  (        cubix.asm):00467         EXECMD
E1B4 10FFDCDB         (        cubix.asm):00468                 STS     >SAVSTK                           ;SAVE STACK POINTER
E1B8 B6DCEB           (        cubix.asm):00469                 LDA     >SDRIVE                           ;GET DISK DRIVE
E1BB B7DCDA           (        cubix.asm):00470                 STA     >SAVDRV                           ;SAVE SELECTED DRIVE
E1BE BDE4C3           (        cubix.asm):00471                 JSR     SKIP                              ;LOOK FOR NULL COMMAND
E1C1 271A             (        cubix.asm):00472                 BEQ     NULCMD                            ;DON'T EXECUTE NULL
E1C3 10BFDCCF         (        cubix.asm):00473                 STY     >TEMP2                            ;SAVED POINTER TO COMMAND
E1C7 8140             (        cubix.asm):00474                 CMPA    #'@'                              ;EXECUTE COMMAND FILE?
E1C9 1027127F         (        cubix.asm):00475                 LBEQ    COMFIL                            ;DO IT
E1CD 8EF7BF           (        cubix.asm):00476                 LDX     #CMDNAM                           ;POINT TO COMMAND TABLE
E1D0 BDE4EC           (        cubix.asm):00477                 JSR     TLOOK                             ;LOOK FOR IT
E1D3 C10E             (        cubix.asm):00478                 CMPB    #NUMCMD                           ;IS IT OVER?
E1D5 2434             (        cubix.asm):00479                 BHS     EXE                               ;YES, TRY USER DEFINED
E1D7 58               (        cubix.asm):00480                 ASLB                                      ;TWO BYTE ENTRIES
E1D8 8EF815           (        cubix.asm):00481                 LDX     #CMDADR                           ;GET COMMAND ADDRESSES
E1DB 6E95             (        cubix.asm):00482                 JMP     [B,X]                             ;EXECUTE COMMAND
E1DD                  (        cubix.asm):00483         NULCMD
E1DD 39               (        cubix.asm):00484                 RTS
                      (        cubix.asm):00485         ;*
                      (        cubix.asm):00486         ;* RUN COMMAND
                      (        cubix.asm):00487         ;*
E1DE                  (        cubix.asm):00488         RUN
E1DE BDE27D           (        cubix.asm):00489                 JSR     GETSNA                            ;GET FILENAME
E1E1                  (        cubix.asm):00490         RUN1
E1E1 8645             (        cubix.asm):00491                 LDA     #'E'                              ;GET TYPE
E1E3 C658             (        cubix.asm):00492                 LDB     #'X'                              ;GET TYPE
E1E5 ED81             (        cubix.asm):00493                 STD     ,X++                              ;SAVE IT
E1E7 A784             (        cubix.asm):00494                 STA     ,X                                ;WRITE IT
E1E9 BDE640           (        cubix.asm):00495                 JSR     LOCERR                            ;DOES IT EXIST
                      (        cubix.asm):00496         ;* FILE HAS BEEN FOUND, EXECUTE
E1EC                  (        cubix.asm):00497         RUN2
E1EC A68817           (        cubix.asm):00498                 LDA     DATTR,X                           ;GET ATTRIBUTES
E1EF 8520             (        cubix.asm):00499                 BITA    #EPERM                            ;CAN WE EXECUTE?
E1F1 1027069E         (        cubix.asm):00500                 LBEQ    PROERR                            ;NO, REPORT ERROR
E1F5 EC8813           (        cubix.asm):00501                 LDD     DDADR,X                           ;GET DISK ADDRESS
E1F8 AE8815           (        cubix.asm):00502                 LDX     DRADR,X                           ;GET RUN ADDRESS
E1FB BFDCCD           (        cubix.asm):00503                 STX     >TEMP1                            ;SAVE
E1FE BDEE48           (        cubix.asm):00504                 JSR     LCHAIN                            ;LOAD THE CHAIN
E201 F6DCEB           (        cubix.asm):00505                 LDB     >SDRIVE                           ;GET OUR CURRENT DRIVE
E204 BDE4C3           (        cubix.asm):00506                 JSR     SKIP                              ;SKIP TO COMMANDS
E207 6E9FDCCD         (        cubix.asm):00507                 JMP     [TEMP1]                           ;PASS CONTROL TO HIM
                      (        cubix.asm):00508         ;*
                      (        cubix.asm):00509         ;* COMMAND WAS NOT RECOGNIZED, SEARCH SYSTEM DIRECTORY LOOKING
                      (        cubix.asm):00510         ;* FOR FILE WITH NAME MATCHING COMMAND.
                      (        cubix.asm):00511         ;*
E20B                  (        cubix.asm):00512         EXE
E20B 7FDCCD           (        cubix.asm):00513                 CLR     >TEMP1                            ;INDICATE IMPLIED RUN
E20E 8EDCAE           (        cubix.asm):00514                 LDX     #SYSDRV                           ;PT TO SYSTEM DIRECTORY (& DRIVE)
E211 BDE39A           (        cubix.asm):00515                 JSR     GETDIR1                           ;GET DIR & DRIVE
E214 8D6F             (        cubix.asm):00516                 BSR     NAMGET                            ;GET NAME
E216 862A             (        cubix.asm):00517                 LDA     #'*'                              ;WILDCARD
E218 A784             (        cubix.asm):00518                 STA     ,X                                ;SAVE TYPE
E21A B6DCB7           (        cubix.asm):00519                 LDA     >FDRIVE                           ;GET FILENAME DRIVE
E21D B7DCEB           (        cubix.asm):00520                 STA     >SDRIVE                           ;SELECT DRIVE
E220 CC0000           (        cubix.asm):00521                 LDD     #DIRSEC                           ;GET DIRECTORY SECTOR
E223                  (        cubix.asm):00522         EXE1
E223 BDE5E3           (        cubix.asm):00523                 JSR     RDWRK                             ;READ A WORK SECTOR
E226                  (        cubix.asm):00524         EXE2
E226 BDE30A           (        cubix.asm):00525                 JSR     COMNAM                            ;DOES IT MATCH
E229 2717             (        cubix.asm):00526                 BEQ     EXE3                              ;YES, IT DOES
                      (        cubix.asm):00527         ;* NAMES DON'T MATCH, ADVANCE TO NEXT ENTRY
E22B 308820           (        cubix.asm):00528                 LEAX    32,X                              ;NEXT
E22E 8CE000           (        cubix.asm):00529                 CMPX    #WRKSPC+512                       ;OVER?
E231 25F3             (        cubix.asm):00530                 BLO     EXE2                              ;NO, KEEP LOOKING
E233 FCDCDF           (        cubix.asm):00531                 LDD     >WRKSEC                           ;GET SECTOR
E236 BDE5C6           (        cubix.asm):00532                 JSR     FNDLNK                            ;LOCATE LINK
E239 26E8             (        cubix.asm):00533                 BNE     EXE1                              ;READ IT & LOOK
                      (        cubix.asm):00534         ;* COMMAND IS INVALID, REPORT ERROR
E23B                  (        cubix.asm):00535         BADCMD
E23B 8EF6F1           (        cubix.asm):00536                 LDX     #UNCMD                            ;PT TO MESSAGE
E23E 86FF             (        cubix.asm):00537                 LDA     #RCCMD                            ;GET RC
E240 2062             (        cubix.asm):00538                 BRA     ERRMRC                            ;REPORT ERROR
                      (        cubix.asm):00539         ;* COMMAND MATCHES FILENAME, CHECK TYPE FOR EXECUTE
E242                  (        cubix.asm):00540         EXE3
E242 A68812           (        cubix.asm):00541                 LDA     DTYPE+2,X                         ;GET TYPE
E245 B7DCCA           (        cubix.asm):00542                 STA     >FTYPE+2                          ;SAVE IT
E248 EC8810           (        cubix.asm):00543                 LDD     DTYPE,X                           ;GET REST OF TYPE
E24B FDDCC8           (        cubix.asm):00544                 STD     >FTYPE                            ;SAVE IT
                      (        cubix.asm):00545         ;* WE HAVE FOUND EXECUTABLE FILE
E24E 10834000         (        cubix.asm):00546                 CMPD    #'@'*256                          ;IS IT A COMMAND FILE?
E252 1027120B         (        cubix.asm):00547                 LBEQ    COMGO                             ;YES, EXECUTE
E256 8145             (        cubix.asm):00548                 CMPA    #'E'                              ;'EX'?
E258 2609             (        cubix.asm):00549                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E25A C158             (        cubix.asm):00550                 CMPB    #'X'                              ;'EX'?
E25C 2605             (        cubix.asm):00551                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E25E A18812           (        cubix.asm):00552                 CMPA    DTYPE+2,X                         ;INSURE ITS 'EXE'
E261 2789             (        cubix.asm):00553                 BEQ     RUN2                              ;YES, EXECUTE
                      (        cubix.asm):00554         ;* UNKNOWN FILETYPE, TRY FOR USER COMMAND PROCESSOR
E263                  (        cubix.asm):00555         EXE4
E263 1F12             (        cubix.asm):00556                 TFR     X,Y                               ;'Y' POINTS TO DIR ENTRY
E265 8EDCC0           (        cubix.asm):00557                 LDX     #FNAME                            ;POINT TO TYPE
E268 ED81             (        cubix.asm):00558                 STD     ,X++                              ;SAVE IT
E26A A6A812           (        cubix.asm):00559                 LDA     DTYPE+2,Y                         ;GET LAST CHR
E26D A780             (        cubix.asm):00560                 STA     ,X+                               ;SAVE IT
E26F                  (        cubix.asm):00561         EXE5
E26F 6F80             (        cubix.asm):00562                 CLR     ,X+                               ;CLEAR IT
E271 8CDCC8           (        cubix.asm):00563                 CMPX    #FNAME+8                          ;OVER?
E274 25F9             (        cubix.asm):00564                 BLO     EXE5                              ;ALL OUT
E276 10BEDCCF         (        cubix.asm):00565                 LDY     >TEMP2                            ;RESTORE COMMAND POINTER
E27A 7EE1E1           (        cubix.asm):00566                 JMP     RUN1                              ;TRY THIS ONE
                      (        cubix.asm):00567         ;*
                      (        cubix.asm):00568         ;* GET FILENAME WITHOUT TYPE, NORMAL DEFAULT
                      (        cubix.asm):00569         ;*
E27D                  (        cubix.asm):00570         GETSNA
E27D BDE397           (        cubix.asm):00571                 JSR     GETDIR                            ;GET DIRECTORY
E280                  (        cubix.asm):00572         GETSN0
E280 86FF             (        cubix.asm):00573                 LDA     #$FF                              ;FLAG
E282 B7DCCD           (        cubix.asm):00574                 STA     >TEMP1                            ;SET IT
E285                  (        cubix.asm):00575         NAMGET
E285 C608             (        cubix.asm):00576                 LDB     #8                                ;MAX EIGHT CHARS
E287                  (        cubix.asm):00577         GETSN1
E287 BDE4D0           (        cubix.asm):00578                 JSR     TSTERM                            ;TERMINATOR?
E28A 2706             (        cubix.asm):00579                 BEQ     GOPAD                             ;YES, QUIT
E28C 812F             (        cubix.asm):00580                 CMPA    #'/'                              ;SPECIAL TERMINATOR
E28E 2605             (        cubix.asm):00581                 BNE     GETSN2
E290 313F             (        cubix.asm):00582                 LEAY    -1,Y                              ;BACKUP TO SLASH
E292                  (        cubix.asm):00583         GOPAD
E292 7EE390           (        cubix.asm):00584                 JMP     PAD
E295                  (        cubix.asm):00585         GETSN2
E295 A780             (        cubix.asm):00586                 STA     ,X+                               ;SAVE IT
E297 5A               (        cubix.asm):00587                 DECB                                      ;BACKUP
E298 2AED             (        cubix.asm):00588                 BPL     GETSN1                            ;MORE
E29A 7DDCCD           (        cubix.asm):00589                 TST     >TEMP1                            ;WERE WE 'RUN'ING
E29D 279C             (        cubix.asm):00590                 BEQ     BADCMD                            ;NO,
                      (        cubix.asm):00591         ;*
                      (        cubix.asm):00592         ;* INVALID OPERAND
                      (        cubix.asm):00593         ;*
E29F                  (        cubix.asm):00594         BADOPR
E29F 8EF705           (        cubix.asm):00595                 LDX     #BADOPM                           ;MESSAGE
E2A2 8601             (        cubix.asm):00596                 LDA     #RCBOP                            ;RETURN CODE
                      (        cubix.asm):00597         ;*
                      (        cubix.asm):00598         ;* ISSUE ERROR MESSAGE & RETURN TO CALLER WITH RETURN CODE
                      (        cubix.asm):00599         ;*
E2A4                  (        cubix.asm):00600         ERRMRC
E2A4 3401             (        cubix.asm):00601                 PSHS    CC                                ;SAVE IT
                      (        cubix.asm):00602         ;* VERIFY CONSOLE DEVICE IS VALID & RESET IF NOT
E2A6 F6DC6D           (        cubix.asm):00603                 LDB     >CONOUT                           ;GET OUTPUT
E2A9 C108             (        cubix.asm):00604                 CMPB    #NDEV                             ;IN RANGE
E2AB 240A             (        cubix.asm):00605                 BHS     ERRM1                             ;NO - ERROR
E2AD 108EDC7E         (        cubix.asm):00606                 LDY     #DOTAB                            ;POINT TO TABLE
E2B1 58               (        cubix.asm):00607                 ASLB                                      ;X2
E2B2 10AEA5           (        cubix.asm):00608                 LDY     B,Y                               ;INSTALLED?
E2B5 2605             (        cubix.asm):00609                 BNE     ERRM2                             ;YES, ITS OK
E2B7                  (        cubix.asm):00610         ERRM1
E2B7 C601             (        cubix.asm):00611                 LDB     #1                                ;DEFAULT DEVICE
E2B9 F7DC6D           (        cubix.asm):00612                 STB     >CONOUT                           ;RESET INPUT
E2BC                  (        cubix.asm):00613         ERRM2
E2BC F6DC6C           (        cubix.asm):00614                 LDB     >CONIN                            ;GET INPUT
E2BF C108             (        cubix.asm):00615                 CMPB    #NDEV                             ;IN RANGE
E2C1 240A             (        cubix.asm):00616                 BHS     ERRM3                             ;NO - ERROR
E2C3 108EDC6E         (        cubix.asm):00617                 LDY     #DITAB                            ;POINT TO TABLE
E2C7 58               (        cubix.asm):00618                 ASLB                                      ;X2
E2C8 10AEA5           (        cubix.asm):00619                 LDY     B,Y                               ;INSTALLED?
E2CB 2605             (        cubix.asm):00620                 BNE     ERRM4                             ;YES, ITS OK
E2CD                  (        cubix.asm):00621         ERRM3
E2CD C601             (        cubix.asm):00622                 LDB     #1                                ;DEFAULT DEVICE
E2CF F7DC6C           (        cubix.asm):00623                 STB     >CONIN                            ;RESET INPUT
E2D2                  (        cubix.asm):00624         ERRM4
E2D2 7DDCA2           (        cubix.asm):00625                 TST     >MSGFLG                           ;ARE MESSAGES ENABLED
E2D5 2706             (        cubix.asm):00626                 BEQ     NOEMSG                            ;NO, DON'T OUTPUT
E2D7 BDE55B           (        cubix.asm):00627                 JSR     WRSTR                             ;OUTPUT
E2DA BDE56F           (        cubix.asm):00628                 JSR     LFCR                              ;NEW LINE
E2DD                  (        cubix.asm):00629         NOEMSG
E2DD 3501             (        cubix.asm):00630                 PULS    CC                                ;RESTORE CC
                      (        cubix.asm):00631         ;* RETURN TO CALLER WITH NO ERROR MESSAGE
E2DF                  (        cubix.asm):00632         ERRRET
E2DF 3401             (        cubix.asm):00633                 PSHS    CC                                ;SAVE CC
E2E1 F6DCDA           (        cubix.asm):00634                 LDB     >SAVDRV                           ;GET SAVED DRIVE
E2E4 F7DCEB           (        cubix.asm):00635                 STB     >SDRIVE                           ;RESET SELECTED DRIVE
E2E7 BEDCD6           (        cubix.asm):00636                 LDX     >SAVX                             ;RESTORE 'X'
E2EA 10BEDCD8         (        cubix.asm):00637                 LDY     >SAVY                             ;RESTORE 'Y'
E2EE F6DCD5           (        cubix.asm):00638                 LDB     >SAVB                             ;RESTORE 'B'
E2F1 3501             (        cubix.asm):00639                 PULS    CC                                ;RESTORE CONDITION CODES
E2F3 2705             (        cubix.asm):00640                 BEQ     ZERORC                            ;ITS ZERO
E2F5 10FEDCDB         (        cubix.asm):00641                 LDS     >SAVSTK                           ;GET SAVED SP
E2F9 39               (        cubix.asm):00642                 RTS
E2FA                  (        cubix.asm):00643         ZERORC
E2FA 10FEDCDB         (        cubix.asm):00644                 LDS     >SAVSTK                           ;GET STACK
E2FE 1A04             (        cubix.asm):00645                 ORCC    #%00000100                        ;SET 'Z'
E300 39               (        cubix.asm):00646                 RTS
                      (        cubix.asm):00647         ;*
                      (        cubix.asm):00648         ;* GET FILE WITHOUT TYPE, DEFAULT TO SYSTEM
                      (        cubix.asm):00649         ;*
E301                  (        cubix.asm):00650         GETSYS
E301 8EDCAE           (        cubix.asm):00651                 LDX     #SYSDRV                           ;DEFAULT IS SYSTEM
                      (        cubix.asm):00652         ;*
                      (        cubix.asm):00653         ;* GET FILENAME WITHOUR TYPE, DEFAULT(X)
                      (        cubix.asm):00654         ;*
E304                  (        cubix.asm):00655         GETSDI
E304 BDE39A           (        cubix.asm):00656                 JSR     GETDIR1                           ;GET NAME
E307 7EE280           (        cubix.asm):00657                 JMP     GETSN0                            ;GET FILENAME
                      (        cubix.asm):00658         ;*
                      (        cubix.asm):00659         ;* COMPARES NAME(X) TO SAVED FILENAME
                      (        cubix.asm):00660         ;*
E30A                  (        cubix.asm):00661         COMNAM
E30A 3436             (        cubix.asm):00662                 PSHS    A,B,X,Y                           ;SAVE REGS
E30C 108EDCB8         (        cubix.asm):00663                 LDY     #PREFIX                           ;POINT TO SAVED
E310 A684             (        cubix.asm):00664                 LDA     ,X                                ;INSURE NAME IS NOT NULL
E312 2603             (        cubix.asm):00665                 BNE     NOTNUL                            ;ITS NOT,
E314 4A               (        cubix.asm):00666                 DECA                                      ;GET FF
E315 2010             (        cubix.asm):00667                 BRA     CEND                              ;QUIT
E317                  (        cubix.asm):00668         NOTNUL
E317 C608             (        cubix.asm):00669                 LDB     #8                                ;EIGHT CHARS NI PREFIX
E319 8D0E             (        cubix.asm):00670                 BSR     COMX                              ;COMPARE
E31B 260A             (        cubix.asm):00671                 BNE     CEND                              ;NOT SAME, EXIT
E31D C608             (        cubix.asm):00672                 LDB     #8                                ;EIGHT CHARS IN NAME
E31F 8D08             (        cubix.asm):00673                 BSR     COMX                              ;COMPARE
E321 2604             (        cubix.asm):00674                 BNE     CEND                              ;NOT SAME
E323 C603             (        cubix.asm):00675                 LDB     #3                                ;THREE CHARS IN TYPE
E325 8D02             (        cubix.asm):00676                 BSR     COMX                              ;COMPARE
E327                  (        cubix.asm):00677         CEND
E327 35B6             (        cubix.asm):00678                 PULS    A,B,X,Y,PC                        ;GO HOME
E329                  (        cubix.asm):00679         COMX
E329 A6A0             (        cubix.asm):00680                 LDA     ,Y+                               ;GET CHAR FROM SAVED
E32B 812A             (        cubix.asm):00681                 CMPA    #'*'                              ;WILDCARD?
E32D 2708             (        cubix.asm):00682                 BEQ     RNXT                              ;RETURN WITH TRUE
E32F A180             (        cubix.asm):00683                 CMPA    ,X+                               ;DOES IT MATCH
E331 2606             (        cubix.asm):00684                 BNE     RNXT1                             ;NO, FAIL
E333 5A               (        cubix.asm):00685                 DECB                                      ;BACKUP
E334 26F3             (        cubix.asm):00686                 BNE     COMX                              ;OK
E336 39               (        cubix.asm):00687                 RTS
E337                  (        cubix.asm):00688         RNXT
E337 3001             (        cubix.asm):00689                 LEAX    1,X
E339                  (        cubix.asm):00690         RNXT1
E339 5A               (        cubix.asm):00691                 DECB                                      ;REDUCE COUNT
E33A 2704             (        cubix.asm):00692                 BEQ     BRET                              ;DONE, QUIT
E33C 3121             (        cubix.asm):00693                 LEAY    1,Y                               ;ADVANCE
E33E 20F7             (        cubix.asm):00694                 BRA     RNXT                              ;AND CONTINUE
E340                  (        cubix.asm):00695         BRET
E340 812A             (        cubix.asm):00696                 CMPA    #'*'                              ;WUZ IT WILDCARD
E342 39               (        cubix.asm):00697                 RTS
                      (        cubix.asm):00698         ;*
                      (        cubix.asm):00699         ;* TEST SAVED FILENAME FOR VALIDITY AS A SINGLE FILE
                      (        cubix.asm):00700         ;*
E343                  (        cubix.asm):00701         VALID
E343 3416             (        cubix.asm):00702                 PSHS    A,B,X                             ;SAVE REGS
E345 C613             (        cubix.asm):00703                 LDB     #19                               ;LENGTH OF NAME
E347 8EDCB8           (        cubix.asm):00704                 LDX     #PREFIX                           ;POINT TO NAME
E34A                  (        cubix.asm):00705         VALTST
E34A A680             (        cubix.asm):00706                 LDA     ,X+                               ;GETCHAR
E34C 812A             (        cubix.asm):00707                 CMPA    #'*'                              ;WILDCARD
E34E 2704             (        cubix.asm):00708                 BEQ     RETNZ                             ;INVALID
E350 5A               (        cubix.asm):00709                 DECB                                      ;BACKUP
E351 26F7             (        cubix.asm):00710                 BNE     VALTST                            ;CONTINUE
E353 4F               (        cubix.asm):00711                 CLRA                                      ;ZERO RETURN CODE
E354                  (        cubix.asm):00712         RETNZ
E354 4D               (        cubix.asm):00713                 TSTA                                      ;SET 'Z' FLAG
E355 3596             (        cubix.asm):00714                 PULS    A,B,X,PC
                      (        cubix.asm):00715         ;*
                      (        cubix.asm):00716         ;* GET FILENAME & INSURE ITS VALID
                      (        cubix.asm):00717         ;*
E357                  (        cubix.asm):00718         GETVAL
E357 8D05             (        cubix.asm):00719                 BSR     GETNAM                            ;GET FILENAME
E359 8DE8             (        cubix.asm):00720                 BSR     VALID                             ;TEST FOR VALID
E35B 2620             (        cubix.asm):00721                 BNE     BADOP2                            ;INVALID, ERROR
E35D 39               (        cubix.asm):00722                 RTS
                      (        cubix.asm):00723         ;*
                      (        cubix.asm):00724         ;* GET A FILENAME FROM INPUT LINE
                      (        cubix.asm):00725         ;*
E35E                  (        cubix.asm):00726         GETNAM
E35E 8D37             (        cubix.asm):00727                 BSR     GETDIR                            ;GET DRIVE & DIRECTORY
E360                  (        cubix.asm):00728         GFNAM
E360 C608             (        cubix.asm):00729                 LDB     #8                                ;EIGHT CHARS/NAME
E362                  (        cubix.asm):00730         GF1
E362 8D26             (        cubix.asm):00731                 BSR     VALCHR                            ;GET CHAR
E364 812E             (        cubix.asm):00732                 CMPA    #'.'                              ;SEPERATOR?
E366 2707             (        cubix.asm):00733                 BEQ     GFTYP                             ;YES
E368 A780             (        cubix.asm):00734                 STA     ,X+                               ;SAVE IT
E36A 5A               (        cubix.asm):00735                 DECB                                      ;BACKUP
E36B 2AF5             (        cubix.asm):00736                 BPL     GF1                               ;KEEP GOING
E36D 200E             (        cubix.asm):00737                 BRA     BADOP2                            ;ERROR
E36F                  (        cubix.asm):00738         GFTYP
E36F 8D1F             (        cubix.asm):00739                 BSR     PAD                               ;PAD FILENAME
E371 C603             (        cubix.asm):00740                 LDB     #3                                ;THREE CHARS/TYPE
E373                  (        cubix.asm):00741         GF2
E373 BDE4D0           (        cubix.asm):00742                 JSR     TSTERM                            ;GET CHAR
E376 2708             (        cubix.asm):00743                 BEQ     GF3                               ;HIT END
E378 A780             (        cubix.asm):00744                 STA     ,X+                               ;SAVE IT
E37A 5A               (        cubix.asm):00745                 DECB                                      ;REDUCE COUNT
E37B 2AF6             (        cubix.asm):00746                 BPL     GF2                               ;KEEP GOING
E37D                  (        cubix.asm):00747         BADOP2
E37D 7EE29F           (        cubix.asm):00748                 JMP     BADOPR                            ;ERROR
E380                  (        cubix.asm):00749         GF3
E380 8D0E             (        cubix.asm):00750                 BSR     PAD                               ;ZERO IT
E382 BDE4C3           (        cubix.asm):00751                 JSR     SKIP                              ;TO NEXT
E385 8EDCB8           (        cubix.asm):00752                 LDX     #PREFIX                           ;POINT TO IT
E388 4F               (        cubix.asm):00753                 CLRA                                      ;ZERO RC
E389 39               (        cubix.asm):00754                 RTS
                      (        cubix.asm):00755         ;* ABORT IF CHARACTER INVALID
E38A                  (        cubix.asm):00756         VALCHR
E38A BDE4D0           (        cubix.asm):00757                 JSR     TSTERM                            ;TEST FOR CHAR OK
E38D 27EE             (        cubix.asm):00758                 BEQ     BADOP2                            ;INVALID
E38F 39               (        cubix.asm):00759                 RTS
                      (        cubix.asm):00760         ;* PADS NAME WITH BLANKS UNTILL 'B' IS ZERO
E390                  (        cubix.asm):00761         PAD
E390 5A               (        cubix.asm):00762                 DECB                                      ;BACKUP COUNT
E391 2B51             (        cubix.asm):00763                 BMI     GETD5                             ;THATS ALL
E393 6F80             (        cubix.asm):00764                 CLR     ,X+                               ;CLEAR IT
E395 20F9             (        cubix.asm):00765                 BRA     PAD
                      (        cubix.asm):00766         ;*
                      (        cubix.asm):00767         ;* GETS A DRIVE AND DIRECTORY FROM THE INPUT LINE
                      (        cubix.asm):00768         ;*
E397                  (        cubix.asm):00769         GETDIR
E397 8EDCA5           (        cubix.asm):00770                 LDX     #DEFDRV                           ;PT TO IT
E39A                  (        cubix.asm):00771         GETDIR1
E39A A680             (        cubix.asm):00772                 LDA     ,X+                               ;GET DEFAULT DRIVE
E39C B7DCB7           (        cubix.asm):00773                 STA     >FDRIVE                           ;SET IT
E39F BDE4C3           (        cubix.asm):00774                 JSR     SKIP                              ;ADVANCE
E3A2 270B             (        cubix.asm):00775                 BEQ     GETD1                             ;END OF LINE, NO DRIVE SPEC
E3A4 E621             (        cubix.asm):00776                 LDB     1,Y                               ;GET NEXT CHAR
E3A6 C13A             (        cubix.asm):00777                 CMPB    #':'                              ;IS IT A DRIVE SPEC?
E3A8 2605             (        cubix.asm):00778                 BNE     GETD1                             ;NO, IGNORE IT
E3AA 8D3D             (        cubix.asm):00779                 BSR     GETDRV1                           ;GET DRIVE ID
E3AC B7DCB7           (        cubix.asm):00780                 STA     >FDRIVE                           ;SET DRIVE ID
E3AF                  (        cubix.asm):00781         GETD1
E3AF 3420             (        cubix.asm):00782                 PSHS    Y                                 ;SAVE
E3B1 1F12             (        cubix.asm):00783                 TFR     X,Y                               ;SET UP PTR TO DEFAULT
E3B3 8EDCB8           (        cubix.asm):00784                 LDX     #PREFIX                           ;POINT TO PREFIX
E3B6 C608             (        cubix.asm):00785                 LDB     #8                                ;MOVE EIGHT
E3B8                  (        cubix.asm):00786         GETD2
E3B8 A6A0             (        cubix.asm):00787                 LDA     ,Y+                               ;GET FROM DEFAULT
E3BA A780             (        cubix.asm):00788                 STA     ,X+                               ;SAVE IN NAME
E3BC 5A               (        cubix.asm):00789                 DECB                                      ;REDUCE COUNT
E3BD 26F9             (        cubix.asm):00790                 BNE     GETD2                             ;MOVE EM ALL
E3BF 3520             (        cubix.asm):00791                 PULS    Y                                 ;RESTORE
E3C1 A6A4             (        cubix.asm):00792                 LDA     ,Y                                ;GET CHAR
E3C3 815B             (        cubix.asm):00793                 CMPA    #'['                              ;DIRECTORY ID
E3C5 261D             (        cubix.asm):00794                 BNE     GETD5                             ;NO, SKIP IT
E3C7 8EDCB8           (        cubix.asm):00795                 LDX     #PREFIX                           ;POINT TO PREFIX
E3CA 3121             (        cubix.asm):00796                 LEAY    1,Y                               ;ADVANCE
E3CC C608             (        cubix.asm):00797                 LDB     #8                                ;UP TO EIGHT CHARS
E3CE                  (        cubix.asm):00798         GETD3
E3CE BDE38A           (        cubix.asm):00799                 JSR     VALCHR                            ;GET CHAR, INSURE VALID
E3D1 815D             (        cubix.asm):00800                 CMPA    #']'                              ;CLOSING?
E3D3 2708             (        cubix.asm):00801                 BEQ     GETD4                             ;YES
E3D5 A780             (        cubix.asm):00802                 STA     ,X+                               ;SAVE IT
E3D7 5A               (        cubix.asm):00803                 DECB                                      ;BACKUP
E3D8 2AF4             (        cubix.asm):00804                 BPL     GETD3                             ;KEEP GOING
E3DA                  (        cubix.asm):00805         BADOP1
E3DA 7EE29F           (        cubix.asm):00806                 JMP     BADOPR
E3DD                  (        cubix.asm):00807         GETD4
E3DD 8DB1             (        cubix.asm):00808                 BSR     PAD                               ;PAD WITH BLANKS
E3DF 7DDCB8           (        cubix.asm):00809                 TST     >PREFIX                           ;IS IT NULL
E3E2 27F6             (        cubix.asm):00810                 BEQ     BADOP1                            ;INVALID
E3E4                  (        cubix.asm):00811         GETD5
E3E4 4F               (        cubix.asm):00812                 CLRA
E3E5 39               (        cubix.asm):00813                 RTS
                      (        cubix.asm):00814         ;* GET A DRIVE & RETURN IN A
E3E6                  (        cubix.asm):00815         GETDRV
E3E6 BDE4C3           (        cubix.asm):00816                 JSR     SKIP                              ;ADVANCE TO OPERAND
E3E9                  (        cubix.asm):00817         GETDRV1
E3E9 ECA1             (        cubix.asm):00818                 LDD     ,Y++                              ;GET DATA
E3EB C13A             (        cubix.asm):00819                 CMPB    #':'                              ;COLON
E3ED 26EB             (        cubix.asm):00820                 BNE     BADOP1                            ;NO
E3EF 8041             (        cubix.asm):00821                 SUBA    #'A'                              ;CONVERT
E3F1 8104             (        cubix.asm):00822                 CMPA    #4                                ;IN RANGE
E3F3 24E5             (        cubix.asm):00823                 BHS     BADOP1                            ;NO
E3F5 1A04             (        cubix.asm):00824                 ORCC    #4                                ;SET 'Z'
E3F7 39               (        cubix.asm):00825                 RTS
                      (        cubix.asm):00826         ;*
                      (        cubix.asm):00827         ;* GETS A VALUE (DECIMAL OR HEX) FROM INPUT LINE
                      (        cubix.asm):00828         ;*
E3F8                  (        cubix.asm):00829         GETNUM
E3F8 BDE4C3           (        cubix.asm):00830                 JSR     SKIP                              ;SKIP TO DATA
E3FB 27DD             (        cubix.asm):00831                 BEQ     BADOP1                            ;INVALID
E3FD 8124             (        cubix.asm):00832                 CMPA    #'$'                              ;HEX?
E3FF 2643             (        cubix.asm):00833                 BNE     GETDV                             ;NO, GET DECIMAL
E401 3121             (        cubix.asm):00834                 LEAY    1,Y                               ;ADVANCE TO NEXT
                      (        cubix.asm):00835         ;*
                      (        cubix.asm):00836         ;* GETS A 16 BIT HEX NUMBER FOR X FROM THE INPUT LINE.
                      (        cubix.asm):00837         ;*
E403                  (        cubix.asm):00838         GETHEX
E403 BDE4C3           (        cubix.asm):00839                 JSR     SKIP                              ;GET CHARACTER
E406 27D2             (        cubix.asm):00840                 BEQ     BADOP1                            ;INDICATE BAD OPERAND
E408                  (        cubix.asm):00841         GETHV
E408 8E0000           (        cubix.asm):00842                 LDX     #0                                ;START WITH ZERO
E40B                  (        cubix.asm):00843         GETL1
E40B BDE4D0           (        cubix.asm):00844                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E40E 2728             (        cubix.asm):00845                 BEQ     HEXEND                            ;IF SO, THIS IS IT
E410 8030             (        cubix.asm):00846                 SUBA    #'0'                              ;CONVERT TO BINARY
E412 810A             (        cubix.asm):00847                 CMPA    #10                               ;TEST FOR > '9'
E414 250A             (        cubix.asm):00848                 BLO     DIGOK                             ;IF NOT, DIGIT IS OK
E416 8111             (        cubix.asm):00849                 CMPA    #$11                              ;TEST FOR < 'A'
E418 2DC0             (        cubix.asm):00850                 BLT     BADOP1                            ;OPERAND IS INVALID
E41A 8007             (        cubix.asm):00851                 SUBA    #7                                ;CONVERT TO ASCII
E41C 8110             (        cubix.asm):00852                 CMPA    #$10                              ;TEST FOR 0-F
E41E 24BA             (        cubix.asm):00853                 BHS     BADOP1                            ;IF NOT, DIGIT IS BAD
E420                  (        cubix.asm):00854         DIGOK
E420 B7DCCC           (        cubix.asm):00855                 STA     >TEMP+1                           ;SAVE FOR LATER
E423 8605             (        cubix.asm):00856                 LDA     #5                                ;SHIFT FOUR TIMES
E425 B7DCCB           (        cubix.asm):00857                 STA     >TEMP                             ;SAVE COUNTER
E428                  (        cubix.asm):00858         DSHFT
E428 1F10             (        cubix.asm):00859                 TFR     X,D                               ;COPY TO X
E42A 308B             (        cubix.asm):00860                 LEAX    D,X                               ;MULTIPLY BY 2, = 1 BIT SHIFT
E42C 7ADCCB           (        cubix.asm):00861                 DEC     >TEMP                             ;REDUCE COUNT
E42F 26F7             (        cubix.asm):00862                 BNE     DSHFT                             ;KEEP SHIFTING
E431 FADCCC           (        cubix.asm):00863                 ORB     >TEMP+1                           ;STICK ON EXTRA DIGIT
E434 1F01             (        cubix.asm):00864                 TFR     D,X                               ;COPY BACK TO X
E436 20D3             (        cubix.asm):00865                 BRA     GETL1                             ;GET NEXT DIGIT
E438                  (        cubix.asm):00866         HEXEND
E438 BDE4C3           (        cubix.asm):00867                 JSR     SKIP                              ;ADVANCE TO NEXT OPERAND
E43B 4F               (        cubix.asm):00868                 CLRA                                      ;INDICATE ZERO RETURN CODE
E43C 39               (        cubix.asm):00869                 RTS
                      (        cubix.asm):00870         ;*
                      (        cubix.asm):00871         ;* GETS A DECIMAL NUMBER FROM THE TERMINAL.
                      (        cubix.asm):00872         ;*
E43D                  (        cubix.asm):00873         GETDEC
E43D BDE4C3           (        cubix.asm):00874                 JSR     SKIP                              ;SKIP TO START OF OPERAND.
E440 1027FE5B         (        cubix.asm):00875                 LBEQ    BADOPR                            ;IF INVALID, GO BACK.
E444                  (        cubix.asm):00876         GETDV
E444 8E0000           (        cubix.asm):00877                 LDX     #0                                ;START WITH ZERO.
E447                  (        cubix.asm):00878         DECDIG
E447 BDE4D0           (        cubix.asm):00879                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E44A 27EC             (        cubix.asm):00880                 BEQ     HEXEND                            ;IF THATS ALL, FORGET IT.
E44C 8030             (        cubix.asm):00881                 SUBA    #'0'                              ;CONVERT TO BINARY.
E44E 8109             (        cubix.asm):00882                 CMPA    #9                                ;TEST FOR INVALID.
E450 1022FE4B         (        cubix.asm):00883                 LBHI    BADOPR                            ;AGAIN, INVALID OPERAND.
E454 3402             (        cubix.asm):00884                 PSHS    A                                 ;SAVE ACC.
E456 CC000A           (        cubix.asm):00885                 LDD     #10                               ;MUL BY 10
E459 BDF677           (        cubix.asm):00886                 JSR     MUL16                             ;D=D*X
E45C EBE0             (        cubix.asm):00887                 ADDB    ,S+                               ;ADD IN DIGIT
E45E 8900             (        cubix.asm):00888                 ADCA    #0                                ;INSURE HIGH GOES
E460 1F01             (        cubix.asm):00889                 TFR     D,X                               ;COPY TO RESULT
E462 20E3             (        cubix.asm):00890                 BRA     DECDIG                            ;GET NEXT
                      (        cubix.asm):00891         ;*
E464                  (        cubix.asm):00892         WRDEC8
E464 4F               (        cubix.asm):00893                 CLRA                                      ;DISPLAY 8 BIT BUMBER (B) IN DECIMAL
                      (        cubix.asm):00894         ;*
                      (        cubix.asm):00895         ;* DISPLAYS 16 BIT NUMBER IN D AS A DECIMAL NUMBER,
                      (        cubix.asm):00896         ;*
E465                  (        cubix.asm):00897         WRDEC
E465 3436             (        cubix.asm):00898                 PSHS    A,B,X,Y                           ;SAVE X-Y REGISTERS
E467 108E0000         (        cubix.asm):00899                 LDY     #0                                ;START WITH ZERO CHARACTERS
E46B 1F01             (        cubix.asm):00900                 TFR     D,X                               ;SET UP STARTING VALUE
E46D                  (        cubix.asm):00901         WRDE1
E46D CC000A           (        cubix.asm):00902                 LDD     #10                               ;DIVIDE BY 10
E470 BDF697           (        cubix.asm):00903                 JSR     DIV16                             ;X=X/D, D=REMAINDER
E473 3404             (        cubix.asm):00904                 PSHS    B                                 ;SAVE REMAINDER
E475 3121             (        cubix.asm):00905                 LEAY    1,Y                               ;INDICATE ANOTHER ON STACK
E477 8C0000           (        cubix.asm):00906                 CMPX    #0                                ;ANY MORE?
E47A 26F1             (        cubix.asm):00907                 BNE     WRDE1                             ;NO, CONTINUE
E47C                  (        cubix.asm):00908         WRDE2
E47C 3502             (        cubix.asm):00909                 PULS    A                                 ;GET DIGIT BACK
E47E 8B30             (        cubix.asm):00910                 ADDA    #'0'                              ;CONVERT TO PRINTABLE FORM
E480 BDE581           (        cubix.asm):00911                 JSR     PUTCHR                            ;DISPLAY DECIMAL DIGIT
E483 313F             (        cubix.asm):00912                 LEAY    -1,Y                              ;REDUCE COUNT
E485 26F5             (        cubix.asm):00913                 BNE     WRDE2                             ;IF NOT END, CONTINUE DISPLAYING
E487 35B6             (        cubix.asm):00914                 PULS    A,B,X,Y,PC                        ;RESTORE INDEX REG'S
                      (        cubix.asm):00915         ;*
                      (        cubix.asm):00916         ;* GETS AND BUFFERS A LINE FROM THE TERMINAL, ON EXIT, Y REGISTER
                      (        cubix.asm):00917         ;* POINTS TO LINE IN BUFFER.
                      (        cubix.asm):00918         ;*
E489                  (        cubix.asm):00919         GLFCR
E489 BDE56F           (        cubix.asm):00920                 JSR     LFCR                              ;START A NEW LINE
E48C                  (        cubix.asm):00921         GLINE
E48C 862A             (        cubix.asm):00922                 LDA     #'*'                              ;GET PROMPT CHARACTER
E48E BDE581           (        cubix.asm):00923                 JSR     PUTCHR                            ;DISPLAY
E491                  (        cubix.asm):00924         GLNOP
E491 108EDC00         (        cubix.asm):00925                 LDY     #INBUFF                           ;POINT TO INPUT BUFFER
E495                  (        cubix.asm):00926         GLINE1
E495 1F20             (        cubix.asm):00927                 TFR     Y,D                               ;GET POINTER INTO BUFFER
E497 C150             (        cubix.asm):00928                 CMPB    #80                               ;TEST FOR OVER LIMIT
E499 22EE             (        cubix.asm):00929                 BHI     GLFCR                             ;INDICATE ERROR
E49B BDE5C1           (        cubix.asm):00930                 JSR     GETCHR                            ;GET CHARACTER FROM CONSOLE
E49E 817F             (        cubix.asm):00931                 CMPA    #$7F                              ;TEST FOR DELETE
E4A0 2704             (        cubix.asm):00932                 BEQ     GLINE2                            ;YES, PERFORM DELETE
E4A2 8108             (        cubix.asm):00933                 CMPA    #8                                ;TEST FOR BACKSPACE
E4A4 260B             (        cubix.asm):00934                 BNE     GLINE3                            ;DON'T DELETE
E4A6                  (        cubix.asm):00935         GLINE2
E4A6 313F             (        cubix.asm):00936                 LEAY    -1,Y                              ;DELETE A CHARACTER
E4A8 BDE535           (        cubix.asm):00937                 JSR     WRLIN                             ;OUTPUT MESSAGE
E4AB 08200800         (        cubix.asm):00938                 FCB     8,' ',8,0                         ;WIPE PREVIOUS CHARACTER
E4AF 20E4             (        cubix.asm):00939                 BRA     GLINE1                            ;GET NEXT CHARACTER
E4B1                  (        cubix.asm):00940         GLINE3
E4B1 BDE581           (        cubix.asm):00941                 JSR     PUTCHR                            ;ECHO CHARACTER
E4B4 8D2B             (        cubix.asm):00942                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E4B6 A7A0             (        cubix.asm):00943                 STA     ,Y+                               ;SAVE IN BUFFER
E4B8 810D             (        cubix.asm):00944                 CMPA    #$0D                              ;TEST FOR END OF LINE
E4BA 26D9             (        cubix.asm):00945                 BNE     GLINE1                            ;GET NEXT CHARACTER
E4BC 108EDC00         (        cubix.asm):00946                 LDY     #INBUFF                           ;POINT TO BUFFER
E4C0 7EE56F           (        cubix.asm):00947                 JMP     LFCR                              ;START A NEW LINE
                      (        cubix.asm):00948         ;*
                      (        cubix.asm):00949         ;* SKIPS TO NEXT NON-BLANK CHARACTER IN INPUT LINE. AND TESTS IT FOR <CR>.
                      (        cubix.asm):00950         ;*
E4C3                  (        cubix.asm):00951         SKIP
E4C3 A6A0             (        cubix.asm):00952                 LDA     ,Y+                               ;GET CHARACTER
E4C5 8120             (        cubix.asm):00953                 CMPA    #' '                              ;TEST FOR BLANK
E4C7 27FA             (        cubix.asm):00954                 BEQ     SKIP                              ;IF SO, KEEP LOOKING
E4C9 6DA2             (        cubix.asm):00955                 TST     ,-Y                               ;BACKUP & TEST FOR ZERO
E4CB 2702             (        cubix.asm):00956                 BEQ     SKRTS                             ;YES, END WITH 'Z' SET
E4CD 810D             (        cubix.asm):00957                 CMPA    #$0D                              ;TEST FOR CARRIAGE RETURN
E4CF                  (        cubix.asm):00958         SKRTS
E4CF 39               (        cubix.asm):00959                 RTS
                      (        cubix.asm):00960         ;*
                      (        cubix.asm):00961         ;* TESTS FOR VALID TERMINATOR CHARACTERS.
                      (        cubix.asm):00962         ;*
E4D0                  (        cubix.asm):00963         TSTERM
E4D0 A6A0             (        cubix.asm):00964                 LDA     ,Y+                               ;GET CHARACTER AND ADVANCE
E4D2 2708             (        cubix.asm):00965                 BEQ     TSTE1                             ;IF NULL, INDICATE TERMINATOR
E4D4 8120             (        cubix.asm):00966                 CMPA    #' '                              ;TEST FOR SPACE
E4D6 2708             (        cubix.asm):00967                 BEQ     TRET                              ;IF SO, QUIT
E4D8 810D             (        cubix.asm):00968                 CMPA    #$0D                              ;IS IT A CARRIAGE RETURN
E4DA 2604             (        cubix.asm):00969                 BNE     TRET                              ;IF NOT, DON'T BACK UP
E4DC                  (        cubix.asm):00970         TSTE1
E4DC 313F             (        cubix.asm):00971                 LEAY    -1,Y                              ;BACK UP SO WE DON'T GO BEYOND
E4DE 1A04             (        cubix.asm):00972                 ORCC    #%00000100                        ;SET 'Z'
E4E0                  (        cubix.asm):00973         TRET
E4E0 39               (        cubix.asm):00974                 RTS
                      (        cubix.asm):00975         ;*
                      (        cubix.asm):00976         ;* CONVERT THE CHARACTER IN 'A' TO UPPER CASE
                      (        cubix.asm):00977         ;*
E4E1                  (        cubix.asm):00978         TOUPPER
E4E1 8161             (        cubix.asm):00979                 CMPA    #'A'+$20                          ;ALREADY UPPERCASE?
E4E3 25FB             (        cubix.asm):00980                 BLO     TRET                              ;YES, ITS OK
E4E5 817A             (        cubix.asm):00981                 CMPA    #'Z'+$20                          ;ALREADY UPPERCASE?
E4E7 22F7             (        cubix.asm):00982                 BHI     TRET                              ;YES, ITS OK
E4E9 845F             (        cubix.asm):00983                 ANDA    #%01011111                        ;CONVERT TO UPPERCASE
E4EB 39               (        cubix.asm):00984                 RTS
                      (        cubix.asm):00985         ;*
                      (        cubix.asm):00986         ;* LOOKS UP WORD(Y) IN TABLE(X). INDEX OF COMMAND IN TABLE IS
                      (        cubix.asm):00987         ;* RETURNED IN THE B REGISTER, WITH ZERO BEING THE FIRST COMMAND.
                      (        cubix.asm):00988         ;* FOR INFORMATION ON THE COMMAND TABLE FORMAT, SEE COMMAND TABLE.
                      (        cubix.asm):00989         ;*
E4EC                  (        cubix.asm):00990         TLOOK
E4EC 5F               (        cubix.asm):00991                 CLRB                                      ;START WITH ZERO ENTRY
E4ED 8DD4             (        cubix.asm):00992                 BSR     SKIP                              ;SKIP LEADING BLANKS
E4EF                  (        cubix.asm):00993         TLOOK1
E4EF A680             (        cubix.asm):00994                 LDA     ,X+                               ;GET CHAR FROM FILE
E4F1 2AFC             (        cubix.asm):00995                 BPL     TLOOK1                            ;ADVANCE TO CONTROL BYTE
E4F3 301F             (        cubix.asm):00996                 LEAX    -1,X                              ;BACKUP TO IT
E4F5 3420             (        cubix.asm):00997                 PSHS    Y                                 ;SAVE POSITION
E4F7 847F             (        cubix.asm):00998                 ANDA    #$7F                              ;REMOVE FLAG BIT
E4F9 272C             (        cubix.asm):00999                 BEQ     TLOOK6                            ;END OF TABLE ENCOUNTERED
E4FB B7DCCB           (        cubix.asm):01000                 STA     >TEMP                             ;SAVE FOR LATER REF
E4FE                  (        cubix.asm):01001         TLOOK2
E4FE 3001             (        cubix.asm):01002                 LEAX    1,X                               ;ADVANCE IN TABLE
E500 7ADCCB           (        cubix.asm):01003                 DEC     >TEMP                             ;REDUCE COUNT
E503 A684             (        cubix.asm):01004                 LDA     ,X                                ;GET CHAR
E505 8DDA             (        cubix.asm):01005                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E507 B7DCCC           (        cubix.asm):01006                 STA     >TEMP+1                           ;SAVE FOR LATER
E50A 8DC4             (        cubix.asm):01007                 BSR     TSTERM                            ;TEST FOR TERMINATOR
E50C 2714             (        cubix.asm):01008                 BEQ     TLOOK5                            ;IF SO, TEST IT
E50E B1DCCC           (        cubix.asm):01009                 CMPA    >TEMP+1                           ;TEST FOR SAME AS TABLE ENTRY
E511 27EB             (        cubix.asm):01010                 BEQ     TLOOK2                            ;IF SO, IT'S OK
E513 812F             (        cubix.asm):01011                 CMPA    #'/'                              ;SLASH?
E515 2709             (        cubix.asm):01012                 BEQ     TLOOK4                            ;YES, ACCEPT IT
E517 813D             (        cubix.asm):01013                 CMPA    #'='                              ;EQUALS?
E519 2705             (        cubix.asm):01014                 BEQ     TLOOK4                            ;ACCEPT IT AS WELL
                      (        cubix.asm):01015         ;* THIS ENTRY NOT FOUND, SKIP TO NEXT ONE
E51B                  (        cubix.asm):01016         TLOOK3
E51B 3520             (        cubix.asm):01017                 PULS    Y                                 ;RESTORE COMMAND POINTER
E51D 5C               (        cubix.asm):01018                 INCB                                      ;INC. INDICATOR
E51E 20CF             (        cubix.asm):01019                 BRA     TLOOK1                            ;TRY NEXT ENTRY
E520                  (        cubix.asm):01020         TLOOK4
E520 313F             (        cubix.asm):01021                 LEAY    -1,Y                              ;BACKUP TO SPECIAL CHAR
E522                  (        cubix.asm):01022         TLOOK5
E522 BADCCB           (        cubix.asm):01023                 ORA     >TEMP                             ;TEST FOR MINIMUM NUMBER OF CHARS
E525 2AF4             (        cubix.asm):01024                 BPL     TLOOK3                            ;IF NOT, SKIP THIS COMMAND
E527                  (        cubix.asm):01025         TLOOK6
E527 8D9A             (        cubix.asm):01026                 BSR     SKIP                              ;SKIP TO OPERANDS
E529 5D               (        cubix.asm):01027                 TSTB                                      ;SET FLAG IS ZERO
E52A 3590             (        cubix.asm):01028                 PULS    X,PC                              ;CLEAN UP STACK
                      (        cubix.asm):01029         ;*
                      (        cubix.asm):01030         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (        cubix.asm):01031         ;*
E52C                  (        cubix.asm):01032         WRHEXW
E52C 8D13             (        cubix.asm):01033                 BSR     WRHEX                             ;OUTPUT
E52E 1E89             (        cubix.asm):01034                 EXG     A,B                               ;SWAP
E530 8D0F             (        cubix.asm):01035                 BSR     WRHEX                             ;OUTPUT
E532 1E89             (        cubix.asm):01036                 EXG     A,B                               ;BACK
E534 39               (        cubix.asm):01037                 RTS
                      (        cubix.asm):01038         ;*
                      (        cubix.asm):01039         ;* WRITE MESSAGE, NO CARRIAGE RETURN AT END
                      (        cubix.asm):01040         ;*
E535                  (        cubix.asm):01041         WRLIN
E535 3410             (        cubix.asm):01042                 PSHS    X                                 ;SAVE X
E537 AE62             (        cubix.asm):01043                 LDX     2,S                               ;GET ADDRESS BACK
E539 8D20             (        cubix.asm):01044                 BSR     WRSTR                             ;OUTPUT
E53B AF62             (        cubix.asm):01045                 STX     2,S                               ;RESAVE
E53D 1A04             (        cubix.asm):01046                 ORCC    #%00000100                        ;ZERO RETURN CODE
E53F 3590             (        cubix.asm):01047                 PULS    X,PC
                      (        cubix.asm):01048         ;*
                      (        cubix.asm):01049         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (        cubix.asm):01050         ;*
E541                  (        cubix.asm):01051         WRHEX
E541 3402             (        cubix.asm):01052                 PSHS    A                                 ;SAVE IT
E543 44               (        cubix.asm):01053                 LSRA                                      ;SHIFT
E544 44               (        cubix.asm):01054                 LSRA                                      ;HIGH NIBBLE
E545 44               (        cubix.asm):01055                 LSRA                                      ;INTO
E546 44               (        cubix.asm):01056                 LSRA                                      ;LOW NIBBLE
E547 8D06             (        cubix.asm):01057                 BSR     HOUT                              ;HIGH
E549 A6E4             (        cubix.asm):01058                 LDA     ,S                                ;GET LOW
E54B 8D02             (        cubix.asm):01059                 BSR     HOUT                              ;OUTPUT
E54D 3582             (        cubix.asm):01060                 PULS    A,PC                              ;RESTORE IT
                      (        cubix.asm):01061         ;* OUTPUT NIBBLE IN HEX
E54F                  (        cubix.asm):01062         HOUT
E54F 840F             (        cubix.asm):01063                 ANDA    #%00001111                        ;REMOVE HIGH
E551 8B30             (        cubix.asm):01064                 ADDA    #'0'                              ;CONVERT
E553 8139             (        cubix.asm):01065                 CMPA    #'9'                              ;OK?
E555 232A             (        cubix.asm):01066                 BLS     PUTCHR                            ;OK, OUTPUT
E557 8B07             (        cubix.asm):01067                 ADDA    #7                                ;CONVERT TO 'A'-'F'
E559 2026             (        cubix.asm):01068                 BRA     PUTCHR                            ;OUTPUT
                      (        cubix.asm):01069         ;*
                      (        cubix.asm):01070         ;* WRITE STRING(X) TO CONSOLE
                      (        cubix.asm):01071         ;*
E55B                  (        cubix.asm):01072         WRSTR
E55B 3402             (        cubix.asm):01073                 PSHS    A                                 ;SAVE A
E55D                  (        cubix.asm):01074         WRST1
E55D A680             (        cubix.asm):01075                 LDA     ,X+                               ;GET CHAR
E55F 271E             (        cubix.asm):01076                 BEQ     WRST2                             ;END, QUIT
E561 8D1E             (        cubix.asm):01077                 BSR     PUTCHR                            ;OUTPUT
E563 20F8             (        cubix.asm):01078                 BRA     WRST1                             ;CONTINUE
                      (        cubix.asm):01079         ;*
                      (        cubix.asm):01080         ;* OUTPUT MESSAGE TO CONSOLE
                      (        cubix.asm):01081         ;*
E565                  (        cubix.asm):01082         WRMSG
E565 3410             (        cubix.asm):01083                 PSHS    X                                 ;SAVE X
E567 AE62             (        cubix.asm):01084                 LDX     2,S                               ;GET RETURN ADDRESS
E569 8DF0             (        cubix.asm):01085                 BSR     WRSTR                             ;OUTPUT STRING
E56B AF62             (        cubix.asm):01086                 STX     2,S                               ;RESAVE NEW RETURN ADDR
E56D 3510             (        cubix.asm):01087                 PULS    X                                 ;RESTORE X
                      (        cubix.asm):01088         ;*
                      (        cubix.asm):01089         ;* OUTPUT LFCR TO CONSOLE
                      (        cubix.asm):01090         ;*
E56F                  (        cubix.asm):01091         LFCR
E56F 3402             (        cubix.asm):01092                 PSHS    A                                 ;SAVE IT
E571 860A             (        cubix.asm):01093                 LDA     #$0A                              ;GET LF
E573 8D0C             (        cubix.asm):01094                 BSR     PUTCHR                            ;OUTPUT
E575 860D             (        cubix.asm):01095                 LDA     #$0D                              ;GET CR
E577 2004             (        cubix.asm):01096                 BRA     SPC1                              ;CONTINUE
                      (        cubix.asm):01097         ;*
                      (        cubix.asm):01098         ;* OUTPUT SPACE TO CONSOLE
                      (        cubix.asm):01099         ;*
E579                  (        cubix.asm):01100         SPACE
E579 3402             (        cubix.asm):01101                 PSHS    A                                 ;SAVE ACCA
E57B 8620             (        cubix.asm):01102                 LDA     #' '                              ;GET SPACE
E57D                  (        cubix.asm):01103         SPC1
E57D 8D02             (        cubix.asm):01104                 BSR     PUTCHR                            ;OUTPUT
E57F                  (        cubix.asm):01105         WRST2
E57F 3582             (        cubix.asm):01106                 PULS    A,PC                              ;RESTORE
                      (        cubix.asm):01107         ;*
                      (        cubix.asm):01108         ;* WRITE CHARACTER(A) TO CONSOLE DEVICE
                      (        cubix.asm):01109         ;*
E581                  (        cubix.asm):01110         PUTCHR
E581 3416             (        cubix.asm):01111                 PSHS    A,B,X                             ;SAVE REGS
E583 F6DC6D           (        cubix.asm):01112                 LDB     >CONOUT                           ;GET CONSOLE OUTPUT DEVICE
E586 2002             (        cubix.asm):01113                 BRA     WRDEV1                            ;PROCEDE WITH OUTPUT
                      (        cubix.asm):01114         ;*
                      (        cubix.asm):01115         ;* WRITE CHARACTER(A) TO DEVICE(B)
                      (        cubix.asm):01116         ;*
E588                  (        cubix.asm):01117         WRDEV
E588 3416             (        cubix.asm):01118                 PSHS    A,B,X                             ;SAVE REGS
E58A                  (        cubix.asm):01119         WRDEV1
E58A C108             (        cubix.asm):01120                 CMPB    #NDEV                             ;CHECK FOR IN RANGE
E58C 240D             (        cubix.asm):01121                 BHS     BADDEV                            ;INDICATE INVALID
E58E 8EDC7E           (        cubix.asm):01122                 LDX     #DOTAB                            ;POINT TO STATUS TABLE
E591 58               (        cubix.asm):01123                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E592 AE85             (        cubix.asm):01124                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E594 2705             (        cubix.asm):01125                 BEQ     BADDEV                            ;INDICATE INVALID DEVICE
E596 AD84             (        cubix.asm):01126                 JSR     ,X                                ;EXECUTE OUTPUT DRIVER
E598 4F               (        cubix.asm):01127                 CLRA                                      ;ZERO RETURN CODE
E599 3596             (        cubix.asm):01128                 PULS    A,B,X,PC                          ;RESTORE & RETURN
                      (        cubix.asm):01129         ;*
                      (        cubix.asm):01130         ;* BAD DEVICE SPECIFIED
                      (        cubix.asm):01131         ;*
E59B                  (        cubix.asm):01132         BADDEV
E59B 8EF79C           (        cubix.asm):01133                 LDX     #DEVMSG                           ;POINT TO DEVICE MESSAGE
E59E 860A             (        cubix.asm):01134                 LDA     #RCDEV                            ;BAD DEVICE RETURN CODE
E5A0 7EE2A4           (        cubix.asm):01135                 JMP     ERRMRC                            ;EXIT WITH ERROR
                      (        cubix.asm):01136         ;*
                      (        cubix.asm):01137         ;* READ A CHARACTER FROM DEVICE (B)
                      (        cubix.asm):01138         ;*
E5A3                  (        cubix.asm):01139         RDDEV
E5A3 8D03             (        cubix.asm):01140                 BSR     TSTDEV                            ;TEST FOR CHAR
E5A5 26FC             (        cubix.asm):01141                 BNE     RDDEV                             ;WAIT FOR IT
E5A7 39               (        cubix.asm):01142                 RTS
                      (        cubix.asm):01143         ;*
                      (        cubix.asm):01144         ;* TEST FOR CHARACTER FROM DEVICE(B)
                      (        cubix.asm):01145         ;*
E5A8                  (        cubix.asm):01146         TSTDEV
E5A8 3414             (        cubix.asm):01147                 PSHS    B,X                               ;SAVE REGS
E5AA                  (        cubix.asm):01148         TSTDE1
E5AA C108             (        cubix.asm):01149                 CMPB    #NDEV                             ;DEVICE IN RANGE?
E5AC 24ED             (        cubix.asm):01150                 BHS     BADDEV                            ;INDICATE INVALUD
E5AE 8EDC6E           (        cubix.asm):01151                 LDX     #DITAB                            ;POINT TO STATUS TABLE
E5B1 58               (        cubix.asm):01152                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E5B2 AE85             (        cubix.asm):01153                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E5B4 27E5             (        cubix.asm):01154                 BEQ     BADDEV                            ;INDICATE INVALID
E5B6 AD84             (        cubix.asm):01155                 JSR     ,X                                ;EXECUTE INPUT DRIVER
E5B8 3594             (        cubix.asm):01156                 PULS    B,X,PC                            ;RESTORE & RETURN
                      (        cubix.asm):01157         ;*
                      (        cubix.asm):01158         ;* TEST FOR A CHARACTER FROM THE CONSOLE DEVICE
                      (        cubix.asm):01159         ;*
E5BA                  (        cubix.asm):01160         TSTCHR
E5BA 3414             (        cubix.asm):01161                 PSHS    B,X                               ;SAVE REGS
E5BC F6DC6C           (        cubix.asm):01162                 LDB     >CONIN                            ;GET INPUT DEVICE
E5BF 20E9             (        cubix.asm):01163                 BRA     TSTDE1                            ;AND CONTINUE
                      (        cubix.asm):01164         ;*
                      (        cubix.asm):01165         ;* READ A CHARACTER FROM CONSOLE
                      (        cubix.asm):01166         ;*
E5C1                  (        cubix.asm):01167         GETCHR
E5C1 8DF7             (        cubix.asm):01168                 BSR     TSTCHR                            ;TEST FOR CHAR
E5C3 26FC             (        cubix.asm):01169                 BNE     GETCHR                            ;INDICATE NONE
E5C5 39               (        cubix.asm):01170                 RTS
                      (        cubix.asm):01171         ;*
                      (        cubix.asm):01172         ;* INCLUDE ALL OTHER SUB-SYSTEMS
                      (        cubix.asm):01173         ;*
                      (        cubix.asm):01174                 INCLUDE filesys.os                        ;FILE SYSTEM MANAGMENT
                      (       filesys.os):00001         ;*
                      (       filesys.os):00002         ;* CUBIX File System management routines
                      (       filesys.os):00003         ;*
                      (       filesys.os):00004         ;* LOCATE NEXT WORK SECTOR IN CHAIN
                      (       filesys.os):00005         ;*
E5C6                  (       filesys.os):00006         FNDLNK
E5C6 3402             (       filesys.os):00007                 PSHS    A
E5C8 58               (       filesys.os):00008                 LSLB                                      ;DOUBLE FOR
E5C9 49               (       filesys.os):00009                 ROLA                                      ;TWO BYTE ID'S
E5CA 8401             (       filesys.os):00010                 ANDA    #$01                              ;MASK OFF BITS (512/SECTOR)
E5CC C3DE00           (       filesys.os):00011                 ADDD    #WRKSPC                           ;POINT TO WORKSPACE
E5CF 1F01             (       filesys.os):00012                 TFR     D,X                               ;SET UP POINTER
E5D1 3504             (       filesys.os):00013                 PULS    B                                 ;RESTORE HIGH ID
E5D3 CB01             (       filesys.os):00014                 ADDB    #LNKSEC                           ;ADVANCE TO LINK SECTOR
E5D5 4F               (       filesys.os):00015                 CLRA                                      ;ZERO HIGH
E5D6 3410             (       filesys.os):00016                 PSHS    X                                 ;SAVE PTR
E5D8 8D09             (       filesys.os):00017                 BSR     RDWRK                             ;READ WORK SECTOR
E5DA 3510             (       filesys.os):00018                 PULS    X                                 ;RESTORE
E5DC EC84             (       filesys.os):00019                 LDD     ,X                                ;GET DATA
E5DE 1083FFFF         (       filesys.os):00020                 CMPD    #$FFFF                            ;END OF FILE?
E5E2                  (       filesys.os):00021         GRTS
E5E2 39               (       filesys.os):00022                 RTS
                      (       filesys.os):00023         ;*
                      (       filesys.os):00024         ;* READ WORK SECTOR FROM DISK
                      (       filesys.os):00025         ;*
E5E3                  (       filesys.os):00026         RDWRK
E5E3 3402             (       filesys.os):00027                 PSHS    A                                 ;SAVE ACCA
E5E5 8EDE00           (       filesys.os):00028                 LDX     #WRKSPC                           ;POINT TO IT
E5E8 B6DCEB           (       filesys.os):00029                 LDA     >SDRIVE                           ;CURRENT DRIVE
E5EB B1DCDE           (       filesys.os):00030                 CMPA    >WRKDRV                           ;ARE WE ON IT?
E5EE 2608             (       filesys.os):00031                 BNE     RDW1                              ;WRITE IT CHANGED
E5F0 A6E4             (       filesys.os):00032                 LDA     ,S                                ;RESTORE SECTOR ID
E5F2 10B3DCDF         (       filesys.os):00033                 CMPD    >WRKSEC                           ;DO WE ALREADY HAVE IT?
E5F6 2710             (       filesys.os):00034                 BEQ     RRTS                              ;YES, ITS OK
E5F8                  (       filesys.os):00035         RDW1
E5F8 8D20             (       filesys.os):00036                 BSR     WRTST                             ;WRITE IF NESSARY
E5FA B6DCEB           (       filesys.os):00037                 LDA     >SDRIVE                           ;GET DRIVE
E5FD B7DCDE           (       filesys.os):00038                 STA     >WRKDRV                           ;SET WORK DRIVE
E600 A6E4             (       filesys.os):00039                 LDA     ,S                                ;RESTORE SECTOR ID
E602 FDDCDF           (       filesys.os):00040                 STD     >WRKSEC                           ;SET IT UP
E605 BDEAC5           (       filesys.os):00041                 JSR     RDISK                             ;READ DISK
E608                  (       filesys.os):00042         RRTS
E608 3582             (       filesys.os):00043                 PULS    A,PC
                      (       filesys.os):00044         ;*
                      (       filesys.os):00045         ;* PURGE OPEN WORK SECTOR, INSURE IT GETS WRITTEN. SET
                      (       filesys.os):00046         ;* SAVED SECTOR TO $FFFF, SO WE FORCE NEW READ
                      (       filesys.os):00047         ;*
E60A                  (       filesys.os):00048         PURGE
E60A 8D0E             (       filesys.os):00049                 BSR     WRTST                             ;WRITE IF NESSARY
E60C                  (       filesys.os):00050         PURGE1
E60C 3406             (       filesys.os):00051                 PSHS    A,B                               ;SAVE REGISTERS
E60E CCFFFF           (       filesys.os):00052                 LDD     #$FFFF                            ;GET NON-EXISTANT
E611 FDDCDF           (       filesys.os):00053                 STD     >WRKSEC                           ;SET WORK SECTOR
E614 B7DCDE           (       filesys.os):00054                 STA     >WRKDRV                           ;SET WORK DRIVE
E617 4F               (       filesys.os):00055                 CLRA    SET 'Z'
E618 3586             (       filesys.os):00056                 PULS    A,B,PC
                      (       filesys.os):00057         ;*
                      (       filesys.os):00058         ;* WRITE WORK SECTOR IF IT HAS BEEN CHANGED
                      (       filesys.os):00059         ;*
E61A                  (       filesys.os):00060         WRTST
E61A 7DDCDD           (       filesys.os):00061                 TST     >WRKCHG                           ;HAS IT CHANGED?
E61D 27C3             (       filesys.os):00062                 BEQ     GRTS                              ;NO, SKIP IT
                      (       filesys.os):00063         ;*
                      (       filesys.os):00064         ;* WRITE WORK SECTOR BACK TO DISK
                      (       filesys.os):00065         ;*
E61F                  (       filesys.os):00066         WRWRK
E61F 3416             (       filesys.os):00067                 PSHS    A,B,X                             ;SAVE REGS
E621 B6DCEB           (       filesys.os):00068                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E624 3402             (       filesys.os):00069                 PSHS    A                                 ;SAVE IT
E626 B6DCDE           (       filesys.os):00070                 LDA     >WRKDRV                           ;GET WORK DRIVE
E629 B7DCEB           (       filesys.os):00071                 STA     >SDRIVE                           ;SET IT UP
E62C FCDCDF           (       filesys.os):00072                 LDD     >WRKSEC                           ;GET ID
E62F 8EDE00           (       filesys.os):00073                 LDX     #WRKSPC                           ;POINT TO WORKSPACE
E632 BDEAF8           (       filesys.os):00074                 JSR     WDISK                             ;WRITE IT
E635 7FDCDD           (       filesys.os):00075                 CLR     >WRKCHG                           ;INDICTE FRESH
E638 3502             (       filesys.os):00076                 PULS    A                                 ;RESTORE DRIVE
E63A B7DCEB           (       filesys.os):00077                 STA     >SDRIVE                           ;RESAVE
E63D 4F               (       filesys.os):00078                 CLRA                                      ;ZERO RETURN
E63E 3596             (       filesys.os):00079                 PULS    A,B,X,PC
                      (       filesys.os):00080         ;*
                      (       filesys.os):00081         ;* LOCATE  FILE, ISSUE ERROR MESSAGE IF NOT FOUND
                      (       filesys.os):00082         ;*
E640                  (       filesys.os):00083         LOCERR
E640 8D36             (       filesys.os):00084                 BSR     LOCDIR                            ;LOOK IT UP
E642 2757             (       filesys.os):00085                 BEQ     FILFND                            ;FINE, RETURN
                      (       filesys.os):00086         ;* ATTEMPT TO OPEN FILE FAILED, NOT FOUND
E644                  (       filesys.os):00087         NOTFND
E644 108EF71F         (       filesys.os):00088                 LDY     #NOTMSG                           ;INDICATE NOT FOUND
E648 8602             (       filesys.os):00089                 LDA     #RCNOTF                           ;NOT FOUND RC
                      (       filesys.os):00090         ;* PROCESS FOR FILE RELATED ERRORS
E64A                  (       filesys.os):00091         FILERR
E64A 3403             (       filesys.os):00092                 PSHS    A,CC                              ;SAVE A & CC
E64C 7DDCA2           (       filesys.os):00093                 TST     >MSGFLG                           ;MESSAGES ENABLED
E64F 2720             (       filesys.os):00094                 BEQ     NOFMSG                            ;NO, SKIP IT
E651 BDE535           (       filesys.os):00095                 JSR     WRLIN                             ;OUTPUT MESSAGE
E654 4572726F72207072 (       filesys.os):00096                 FCC     'Error processing file: '
     6F63657373696E67
     2066696C653A20
E66B BDE6BD           (       filesys.os):00097                 JSR     SHOSAV                            ;DISPLAY IT
E66E BDE56F           (       filesys.os):00098                 JSR     LFCR
E671                  (       filesys.os):00099         NOFMSG
E671 1F21             (       filesys.os):00100                 TFR     Y,X                               ;COPY IT
E673 3503             (       filesys.os):00101                 PULS    A,CC                              ;RESTORE CONDITIONS
E675 7EE2A4           (       filesys.os):00102                 JMP     ERRMRC                            ;OUTPUT MESSAGE
                      (       filesys.os):00103         ;*
                      (       filesys.os):00104         ;* LOCATE A FILE IN THE DIRECTORY, LEAVES 'X' POINTING AT IT
                      (       filesys.os):00105         ;*
E678                  (       filesys.os):00106         LOCDIR
E678 B6DCB7           (       filesys.os):00107                 LDA     >FDRIVE                           ;GET FILES DRIVE ID
E67B B7DCEB           (       filesys.os):00108                 STA     >SDRIVE                           ;SAVE IT
E67E CC0000           (       filesys.os):00109                 LDD     #DIRSEC                           ;STARTING SECTOR OF DIR
E681                  (       filesys.os):00110         LOCSEC
E681 BDE5E3           (       filesys.os):00111                 JSR     RDWRK                             ;READ IT
E684                  (       filesys.os):00112         LOCFIL
E684 BDE30A           (       filesys.os):00113                 JSR     COMNAM                            ;DOES IT MATCH
E687 2712             (       filesys.os):00114                 BEQ     FILFND                            ;YES
E689 308820           (       filesys.os):00115                 LEAX    32,X                              ;ADVANCE TO NEXT
E68C 8CE000           (       filesys.os):00116                 CMPX    #WRKSPC+512                       ;OVER?
E68F 25F3             (       filesys.os):00117                 BLO     LOCFIL                            ;KEEP LOOKING
E691 FCDCDF           (       filesys.os):00118                 LDD     >WRKSEC                           ;GET SECTOR
E694 BDE5C6           (       filesys.os):00119                 JSR     FNDLNK                            ;GET ITS LINK
E697 26E8             (       filesys.os):00120                 BNE     LOCSEC                            ;MORE TO FIND
E699 8602             (       filesys.os):00121                 LDA     #RCNOTF                           ;FILE NOT FOUND
E69B                  (       filesys.os):00122         FILFND
E69B 39               (       filesys.os):00123                 RTS
                      (       filesys.os):00124         ;*
                      (       filesys.os):00125         ;* DISPLAY DIRECTORY USING SAVED FILENAME AS A MASK
                      (       filesys.os):00126         ;*
E69C                  (       filesys.os):00127         DISDIR
E69C 8DA2             (       filesys.os):00128                 BSR     LOCERR                            ;LOCATE FILE
E69E                  (       filesys.os):00129         SHOME
E69E 8D30             (       filesys.os):00130                 BSR     SHONAM                            ;OUTPUT NAME
E6A0 BDE56F           (       filesys.os):00131                 JSR     LFCR                              ;NEW LINE
E6A3                  (       filesys.os):00132         NOSHO
E6A3 308820           (       filesys.os):00133                 LEAX    32,X                              ;NEXT ENTRY
E6A6 8CE000           (       filesys.os):00134                 CMPX    #WRKSPC+512                       ;OVER?
E6A9 250B             (       filesys.os):00135                 BLO     SHOFIL                            ;MORE TO GO
E6AB FCDCDF           (       filesys.os):00136                 LDD     >WRKSEC                           ;GET WORKSECTOR
E6AE BDE5C6           (       filesys.os):00137                 JSR     FNDLNK                            ;LOCATE LINK
E6B1 27E8             (       filesys.os):00138                 BEQ     FILFND                            ;NO, QUIT
E6B3 BDE5E3           (       filesys.os):00139                 JSR     RDWRK                             ;READ NEW SECTOR
E6B6                  (       filesys.os):00140         SHOFIL
E6B6 BDE30A           (       filesys.os):00141                 JSR     COMNAM                            ;DOES IT MATCH?
E6B9 26E8             (       filesys.os):00142                 BNE     NOSHO                             ;DON'T OUTPUT
E6BB 20E1             (       filesys.os):00143                 BRA     SHOME                             ;DISPLAY IT
                      (       filesys.os):00144         
                      (       filesys.os):00145         ;*
                      (       filesys.os):00146         ;* SHOW SAVED FILENAME
                      (       filesys.os):00147         ;*
E6BD                  (       filesys.os):00148         SHOSAV
E6BD 3416             (       filesys.os):00149                 PSHS    A,B,X                             ;SAVE REGS
E6BF 8EDCB7           (       filesys.os):00150                 LDX     #FDRIVE                           ;POINT TO IT
E6C2 A680             (       filesys.os):00151                 LDA     ,X+                               ;GET DRIVE ID
E6C4 8B41             (       filesys.os):00152                 ADDA    #'A'                              ;OFFSET
E6C6 BDE581           (       filesys.os):00153                 JSR     PUTCHR
E6C9 863A             (       filesys.os):00154                 LDA     #':'
E6CB BDE581           (       filesys.os):00155                 JSR     PUTCHR
E6CE 2002             (       filesys.os):00156                 BRA     SHON1                             ;DISPLAY IT
                      (       filesys.os):00157         ;*
                      (       filesys.os):00158         ;* DISPLAYS FILENAME(X) IN DIRECTORY FORMAT
                      (       filesys.os):00159         ;*
E6D0                  (       filesys.os):00160         SHONAM
E6D0 3416             (       filesys.os):00161                 PSHS    A,B,X                             ;SAVE REGISTERS
E6D2                  (       filesys.os):00162         SHON1
E6D2 865B             (       filesys.os):00163                 LDA     #'['                              ;OPENING BRACKET
E6D4 BDE581           (       filesys.os):00164                 JSR     PUTCHR                            ;OUTPUT
E6D7 8D12             (       filesys.os):00165                 BSR     DISP8                             ;DISPLAY IT
E6D9 865D             (       filesys.os):00166                 LDA     #']'                              ;CLOSING BRACKET
E6DB BDE581           (       filesys.os):00167                 JSR     PUTCHR                            ;OUTPUT
E6DE 8D0B             (       filesys.os):00168                 BSR     DISP8                             ;DISPLAY NAME
E6E0 862E             (       filesys.os):00169                 LDA     #'.'
E6E2 BDE581           (       filesys.os):00170                 JSR     PUTCHR
E6E5 C603             (       filesys.os):00171                 LDB     #3                                ;TYPE IS THREE
E6E7 8D04             (       filesys.os):00172                 BSR     DISPX
E6E9 3596             (       filesys.os):00173                 PULS    A,B,X,PC
E6EB                  (       filesys.os):00174         DISP8
E6EB C608             (       filesys.os):00175                 LDB     #8                                ;8 CHARS FOR PREFIX AND TYPE
E6ED                  (       filesys.os):00176         DISPX
E6ED A680             (       filesys.os):00177                 LDA     ,X+                               ;GET CHAR
E6EF 2703             (       filesys.os):00178                 BEQ     SHRT                              ;SHORT, ADVANCE
E6F1 BDE581           (       filesys.os):00179                 JSR     PUTCHR                            ;DISPLAY
E6F4                  (       filesys.os):00180         SHRT
E6F4 5A               (       filesys.os):00181                 DECB                                      ;REDUCE COUNT
E6F5 26F6             (       filesys.os):00182                 BNE     DISPX                             ;KEEP GOING
E6F7 39               (       filesys.os):00183                 RTS
                      (       filesys.os):00184         ;*
                      (       filesys.os):00185         ;* CALCULATE DRIVE SIZE IN 'D'
                      (       filesys.os):00186         ;*
E6F8                  (       filesys.os):00187         CURSIZ
E6F8 B6DCEB           (       filesys.os):00188                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E6FB                  (       filesys.os):00189         DRVSIZ
E6FB 3440             (       filesys.os):00190                 PSHS    U
E6FD BDEAEF           (       filesys.os):00191                 JSR     GETCTL1                           ;GET CONTROL BLOCK
E700 E643             (       filesys.os):00192                 LDB     NSEC,U                            ;GET # SECS/TRACK
E702 A642             (       filesys.os):00193                 LDA     NHEAD,U                           ;GET # HEADS
E704 3D               (       filesys.os):00194                 MUL                                       ;GET SECS/CYLINDER
E705 A641             (       filesys.os):00195                 LDA     NCYL,U                            ;GET # CYLINDERS
E707 3D               (       filesys.os):00196                 MUL                                       ;CALCULATE TOTAL SIZE
E708 35C0             (       filesys.os):00197                 PULS    U,PC                              ;RETURN
                      (       filesys.os):00198         ;*
                      (       filesys.os):00199         ;* CREATES A FILE
                      (       filesys.os):00200         ;*
E70A                  (       filesys.os):00201         CREATE
E70A BDE343           (       filesys.os):00202                 JSR     VALID                             ;OK AS SINGLE FLE
E70D 1026FB8E         (       filesys.os):00203                 LBNE    BADOPR                            ;NO, INVALID
E711 BDE678           (       filesys.os):00204                 JSR     LOCDIR                            ;LOOK FOR IT
E714 2609             (       filesys.os):00205                 BNE     CRE1                              ;ITS OK
                      (       filesys.os):00206         ;* FILE ALREADY EXISTS
E716                  (       filesys.os):00207         FEXISTS
E716 108EF72D         (       filesys.os):00208                 LDY     #EXIMSG                           ;FILE EXISTS
E71A 8607             (       filesys.os):00209                 LDA     #RCEXI                            ;EXISTS
E71C 7EE64A           (       filesys.os):00210                 JMP     FILERR                            ;INDICATE ERROR
E71F                  (       filesys.os):00211         CRE1
E71F 8D6F             (       filesys.os):00212                 BSR     FRESEC                            ;ALLOCATE A SECTOR
E721 FDDCCD           (       filesys.os):00213                 STD     >TEMP1                            ;SAVE IT
E724 CC0000           (       filesys.os):00214                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
E727                  (       filesys.os):00215         CRE2
E727 BDE5E3           (       filesys.os):00216                 JSR     RDWRK                             ;READ WORK SECTOR
E72A C610             (       filesys.os):00217                 LDB     #16                               ;ENTRIES/SECTOR
E72C                  (       filesys.os):00218         CRE3
E72C 6D84             (       filesys.os):00219                 TST     ,X                                ;IS IT FREE?
E72E 2732             (       filesys.os):00220                 BEQ     CRE6                              ;YES, PUT IT HERE
E730 308820           (       filesys.os):00221                 LEAX    32,X                              ;ADVANCE TO NEXT
E733 5A               (       filesys.os):00222                 DECB                                      ;REDUCE COUNT
E734 26F6             (       filesys.os):00223                 BNE     CRE3                              ;KEEP LOOKING
E736 FCDCDF           (       filesys.os):00224                 LDD     >WRKSEC                           ;GET DIRECTORY SEC ID
E739 BDE5C6           (       filesys.os):00225                 JSR     FNDLNK                            ;FIND LINK
E73C 26E9             (       filesys.os):00226                 BNE     CRE2                              ;AND KEEP GOING
E73E FCDCCD           (       filesys.os):00227                 LDD     >TEMP1                            ;GET OUR FREE SECTOR
E741 ED84             (       filesys.os):00228                 STD     ,X                                ;POINT DIRECTORY AT IT
E743 BDE787           (       filesys.os):00229                 JSR     CHGWRK                            ;INDICATE WE CHANGED
E746 3406             (       filesys.os):00230                 PSHS    A,B                               ;SAVE ID
E748 8D46             (       filesys.os):00231                 BSR     FRESEC                            ;GET FREE
E74A FDDCCD           (       filesys.os):00232                 STD     >TEMP1                            ;SAVE NEW FREE
E74D BDE61F           (       filesys.os):00233                 JSR     WRWRK                             ;WRITE WORK SECTOR
E750 3506             (       filesys.os):00234                 PULS    A,B                               ;RESTORE DIRECTORY SECTOR ID
E752 FDDCDF           (       filesys.os):00235                 STD     >WRKSEC                           ;INDICATE CURRENT WORKSECTOR
E755 8EDE00           (       filesys.os):00236                 LDX     #WRKSPC                           ;PT TO IT
E758                  (       filesys.os):00237         CRE5
E758 6F80             (       filesys.os):00238                 CLR     ,X+                               ;CLEAR IT
E75A 8CE000           (       filesys.os):00239                 CMPX    #WRKSPC+512                       ;ARE WE OVER
E75D 25F9             (       filesys.os):00240                 BLO     CRE5                              ;DO ALL
E75F 8EDE00           (       filesys.os):00241                 LDX     #WRKSPC                           ;PT TO IT AGAIN
E762                  (       filesys.os):00242         CRE6
E762 3420             (       filesys.os):00243                 PSHS    Y                                 ;SAVE
E764 108EDCB8         (       filesys.os):00244                 LDY     #PREFIX                           ;PT TO SAVED NAME
E768 C613             (       filesys.os):00245                 LDB     #19                               ;19 CHARS IN NAME
E76A                  (       filesys.os):00246         CRE7
E76A A6A0             (       filesys.os):00247                 LDA     ,Y+                               ;GET CHAR
E76C A780             (       filesys.os):00248                 STA     ,X+                               ;SAVE IN ENTRY
E76E 5A               (       filesys.os):00249                 DECB                                      ;REDUCE COUNT
E76F 26F9             (       filesys.os):00250                 BNE     CRE7                              ;CONTINUE
E771 3520             (       filesys.os):00251                 PULS    Y                                 ;RESTORE
E773 3088ED           (       filesys.os):00252                 LEAX    -19,X                             ;BACK TO START
E776 FCDCD3           (       filesys.os):00253                 LDD     >TEMP4                            ;GET LOAD ADDRESS
E779 ED8815           (       filesys.os):00254                 STD     DRADR,X                           ;SET IT,
E77C 86F0             (       filesys.os):00255                 LDA     #DEFATR                           ;GET DEF ATTRIBUTES
E77E A78817           (       filesys.os):00256                 STA     DATTR,X                           ;SET THEM
E781 FCDCCD           (       filesys.os):00257                 LDD     >TEMP1                            ;GET DISK ADDRESS
E784 ED8813           (       filesys.os):00258                 STD     DDADR,X                           ;SET IT
                      (       filesys.os):00259         ;*
                      (       filesys.os):00260         ;* SET WORK SECTOR CHANGED FLAG
                      (       filesys.os):00261         ;*
E787                  (       filesys.os):00262         CHGWRK
E787 7FDCDD           (       filesys.os):00263                 CLR     >WRKCHG
E78A 7ADCDD           (       filesys.os):00264                 DEC     >WRKCHG                           ;SET IT
E78D 1A04             (       filesys.os):00265                 ORCC    #4                                ;SET 'Z'
E78F 39               (       filesys.os):00266                 RTS
                      (       filesys.os):00267         ;*
                      (       filesys.os):00268         ;* LOCATE A FREE SECTOR ON THE DISK, CLAIM IT AND SET
                      (       filesys.os):00269         ;* FLAG TO $FFFF (END OF FILE). ATEMPT TO ALLOCATE IN SECTOR
                      (       filesys.os):00270         ;* WHICH AS ALREADY LOADED IN ORDER TO REDUCE DISK I/O.
                      (       filesys.os):00271         ;*
E790                  (       filesys.os):00272         FRESEC
E790 BDE6F8           (       filesys.os):00273                 JSR     CURSIZ                            ;CALCULATE SIZE OF DISK
E793 FDDCCB           (       filesys.os):00274                 STD     >TEMP                             ;SAVE IT
E796 830001           (       filesys.os):00275                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
E799 8B01             (       filesys.os):00276                 ADDA    #LNKSEC                           ;COMPUTE LARGEST LINK SECTOR # (D/256+LNK)
E79B 3402             (       filesys.os):00277                 PSHS    A                                 ;SAVE
E79D 7DDCDF           (       filesys.os):00278                 TST     >WRKSEC                           ;LOW?
E7A0 260E             (       filesys.os):00279                 BNE     FRES1                             ;NO LINK IN CORE
E7A2 F6DCE0           (       filesys.os):00280                 LDB     >WRKSEC+1                         ;GET SECTOR ID
E7A5 B1DCE0           (       filesys.os):00281                 CMPA    >WRKSEC+1                         ;IS IT IN RANGE?
E7A8 2506             (       filesys.os):00282                 BLO     FRES1                             ;NO LINK IN CORE
E7AA C101             (       filesys.os):00283                 CMPB    #LNKSEC                           ;IN RANGE?
E7AC 2502             (       filesys.os):00284                 BLO     FRES1                             ;NO LINK IN CORE
E7AE 8D11             (       filesys.os):00285                 BSR     FNDFRE                            ;LOOK FOR IT
E7B0                  (       filesys.os):00286         FRES1
E7B0 C601             (       filesys.os):00287                 LDB     #LNKSEC                           ;LOOK IN FIRST
E7B2                  (       filesys.os):00288         FRES2
E7B2 8D0D             (       filesys.os):00289                 BSR     FNDFRE                            ;LOOK FOR IT
E7B4 5C               (       filesys.os):00290                 INCB    ADVANCE
E7B5 E1E4             (       filesys.os):00291                 CMPB    ,S                                ;ARE WE OVER?
E7B7 23F9             (       filesys.os):00292                 BLS     FRES2                             ;NO, LEEP GOING
                      (       filesys.os):00293         ;* NO DISK SPACE AVAILABLE
E7B9                  (       filesys.os):00294         NOSPAC
E7B9 8EF740           (       filesys.os):00295                 LDX     #NOSMSG                           ;NO SPACE
E7BC 8608             (       filesys.os):00296                 LDA     #RCNOS                            ;RETURN CODE
E7BE 7EE2A4           (       filesys.os):00297                 JMP     ERRMRC                            ;REPORT ERROR
                      (       filesys.os):00298         ;* LOOK FOR FREE SECTOR
E7C1                  (       filesys.os):00299         FNDFRE
E7C1 4F               (       filesys.os):00300                 CLRA                                      ;HIGH ADDRESS TO ZERO
E7C2 3434             (       filesys.os):00301                 PSHS    B,X,Y                             ;SAVE REGS
E7C4 BDE5E3           (       filesys.os):00302                 JSR     RDWRK                             ;READ WORK SECTOR
E7C7                  (       filesys.os):00303         FNDF1
E7C7 EC81             (       filesys.os):00304                 LDD     ,X++                              ;IS IT FREE
E7C9 2707             (       filesys.os):00305                 BEQ     FNDF3                             ;YES
E7CB 8CE000           (       filesys.os):00306                 CMPX    #WRKSPC+512                       ;OVER?
E7CE 25F7             (       filesys.os):00307                 BLO     FNDF1                             ;NO, KEEP LOOKING
E7D0                  (       filesys.os):00308         FNDF2
E7D0 35B4             (       filesys.os):00309                 PULS    B,X,Y,PC                          ;GO HOME
E7D2                  (       filesys.os):00310         FNDF3
E7D2 1F10             (       filesys.os):00311                 TFR     X,D                               ;GET VALUE
E7D4 83DE02           (       filesys.os):00312                 SUBD    #WRKSPC+2                         ;CONVERT TO BYTE OFFSET
E7D7 44               (       filesys.os):00313                 LSRA                                      ;CONVERT ADDRESS IN WS
E7D8 56               (       filesys.os):00314                 RORB                                      ;TO SECTOR # IN WS
E7D9 A6E4             (       filesys.os):00315                 LDA     ,S                                ;GET SECTOR ID BACK
E7DB 8001             (       filesys.os):00316                 SUBA    #LNKSEC                           ;CONVERT TO PURE SECTOR #
E7DD 10B3DCCB         (       filesys.os):00317                 CMPD    >TEMP                             ;WITHIN DISK SIZE?
E7E1 24ED             (       filesys.os):00318                 BHS     FNDF2                             ;NO, RETURN WITH BAD NEWS
E7E3 3261             (       filesys.os):00319                 LEAS    1,S                               ;SKIP SAVED 'B' REGISTER
E7E5 108EFFFF         (       filesys.os):00320                 LDY     #$FFFF                            ;GET SECTOR IN USE FLAG
E7E9 10AF1E           (       filesys.os):00321                 STY     -2,X                              ;WRITE IT
E7EC 3530             (       filesys.os):00322                 PULS    X,Y                               ;RESTORE REGS
E7EE 3263             (       filesys.os):00323                 LEAS    3,S                               ;CLEAR UP STACK
E7F0 2095             (       filesys.os):00324                 BRA     CHGWRK                            ;INDICATE CHANGED
                      (       filesys.os):00325         ;*
                      (       filesys.os):00326         ;* OPEN A FILE FOR READ
                      (       filesys.os):00327         ;*
E7F2                  (       filesys.os):00328         OPENR
E7F2 3414             (       filesys.os):00329                 PSHS    B,X                               ;SAVE REGS
E7F4 BDE889           (       filesys.os):00330                 JSR     LOCRED                            ;DOES IT EXIST
E7F7 EC8813           (       filesys.os):00331                 LDD     DDADR,X                           ;GET DISK ADDRESS
E7FA ED42             (       filesys.os):00332                 STD     OFIRST,U                          ;SAVE IT
E7FC ED44             (       filesys.os):00333                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E7FE 4F               (       filesys.os):00334                 CLRA
E7FF 5F               (       filesys.os):00335                 CLRB                                      ;ZERO OFFSET
E800 ED48             (       filesys.os):00336                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E802 ED46             (       filesys.os):00337                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E804 F6DCB7           (       filesys.os):00338                 LDB     >FDRIVE                           ;GET FILE DRIVE
E807 8601             (       filesys.os):00339                 LDA     #1                                ;INDICATE FILE OPEN/READ
E809 EDC4             (       filesys.os):00340                 STD     OTYPE,U                           ;INDICATE
E80B B6DCDA           (       filesys.os):00341                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E80E B7DCEB           (       filesys.os):00342                 STA     >SDRIVE                           ;RESET IT
E811 4F               (       filesys.os):00343                 CLRA                                      ;ZERO RC
E812 3594             (       filesys.os):00344                 PULS    B,X,PC
                      (       filesys.os):00345         ;*
                      (       filesys.os):00346         ;* READ CHARACTER FROM FILE
                      (       filesys.os):00347         ;*
E814                  (       filesys.os):00348         READC
E814 3414             (       filesys.os):00349                 PSHS    B,X                               ;SAVE REGS
E816 304A             (       filesys.os):00350                 LEAX    OSIZ,U                            ;OFFSET TO DATA
E818 A641             (       filesys.os):00351                 LDA     ODRIVE,U                          ;GET DRIVE
E81A B7DCEB           (       filesys.os):00352                 STA     >SDRIVE                           ;SELECT
E81D EC48             (       filesys.os):00353                 LDD     OOFFSET,U                         ;GET OFFSET
E81F 2612             (       filesys.os):00354                 BNE     REC1                              ;NON-ZERO, ITS OK
E821 A6C4             (       filesys.os):00355                 LDA     OTYPE,U                           ;GET OPEN TYPE
E823 4A               (       filesys.os):00356                 DECA                                      ;OPEN FOR READ?
E824 2676             (       filesys.os):00357                 BNE     ORERR                             ;NO, REPORT ERROR
E826 EC44             (       filesys.os):00358                 LDD     OSECTOR,U                         ;GET SECTOR
E828 1083FFFF         (       filesys.os):00359                 CMPD    #$FFFF                            ;END OF FILE?
E82C 2776             (       filesys.os):00360                 BEQ     EOF                               ;YES, REPORT ERROR
E82E BDEAC5           (       filesys.os):00361                 JSR     RDISK                             ;READ IT IN
E831 EC48             (       filesys.os):00362                 LDD     OOFFSET,U                         ;RESTORE OFFSET
E833                  (       filesys.os):00363         REC1
E833 308B             (       filesys.os):00364                 LEAX    D,X                               ;OFFSET TO CHAR
E835 C30001           (       filesys.os):00365                 ADDD    #1                                ;ADVANCE
E838 10830200         (       filesys.os):00366                 CMPD    #512                              ;ARE WE OVER
E83C 250F             (       filesys.os):00367                 BLO     REC2                              ;NO, ITS OK
E83E 3410             (       filesys.os):00368                 PSHS    X                                 ;SAVE 'X'
E840 EC44             (       filesys.os):00369                 LDD     OSECTOR,U                         ;GET SECTOR
E842 ED46             (       filesys.os):00370                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E844 BDE5C6           (       filesys.os):00371                 JSR     FNDLNK                            ;LOOK UP ITS LINK
E847 ED44             (       filesys.os):00372                 STD     OSECTOR,U                         ;SAVE NEW SECTOR
E849 3510             (       filesys.os):00373                 PULS    X                                 ;RESTORE PTR TO CAHR
E84B 4F               (       filesys.os):00374                 CLRA
E84C 5F               (       filesys.os):00375                 CLRB
E84D                  (       filesys.os):00376         REC2
E84D ED48             (       filesys.os):00377                 STD     OOFFSET,U                         ;NEW OFFSET
E84F B6DCDA           (       filesys.os):00378                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E852 B7DCEB           (       filesys.os):00379                 STA     >SDRIVE                           ;RESET IT
E855 A680             (       filesys.os):00380                 LDA     ,X+                               ;GET CHARACTER
E857 81FF             (       filesys.os):00381                 CMPA    #$FF                              ;END OF FILE?
E859 2749             (       filesys.os):00382                 BEQ     EOF                               ;YES
E85B 1A04             (       filesys.os):00383                 ORCC    #4                                ;INDICATE SUCESS
E85D 3594             (       filesys.os):00384                 PULS    B,X,PC
                      (       filesys.os):00385         ;*
                      (       filesys.os):00386         ;* READ A BLOCK FROM A FILE
                      (       filesys.os):00387         ;*
E85F                  (       filesys.os):00388         READB
E85F 3414             (       filesys.os):00389                 PSHS    B,X                               ;SAVE REGS
E861 A6C4             (       filesys.os):00390                 LDA     OTYPE,U                           ;GET OPEN TYPE
E863 4A               (       filesys.os):00391                 DECA                                      ;OPEN READ?
E864 2636             (       filesys.os):00392                 BNE     ORERR                             ;NO, REPORT ERROR
E866 A641             (       filesys.os):00393                 LDA     ODRIVE,U
E868 B7DCEB           (       filesys.os):00394                 STA     >SDRIVE                           ;SET DRIVE
E86B EC44             (       filesys.os):00395                 LDD     OSECTOR,U
E86D 1083FFFF         (       filesys.os):00396                 CMPD    #$FFFF                            ;END OF FILE?
E871 2731             (       filesys.os):00397                 BEQ     EOF
E873 ED46             (       filesys.os):00398                 STD     OLSTSEC,U                         ;SAVE LAST
E875 BDEAC5           (       filesys.os):00399                 JSR     RDISK                             ;READ IT
E878 BDE5C6           (       filesys.os):00400                 JSR     FNDLNK                            ;FIND ITS LINK
E87B ED44             (       filesys.os):00401                 STD     OSECTOR,U                         ;RESAVE
E87D B6DCDA           (       filesys.os):00402                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E880 B7DCEB           (       filesys.os):00403                 STA     >SDRIVE                           ;RESET SYSTEM DRIVE
E883 4F               (       filesys.os):00404                 CLRA
E884 5F               (       filesys.os):00405                 CLRB
E885 ED48             (       filesys.os):00406                 STD     OOFFSET,U                         ;CLEAR OFFSET
E887 3594             (       filesys.os):00407                 PULS    B,X,PC
                      (       filesys.os):00408         ;*
                      (       filesys.os):00409         ;* LOOK UP FILE WITH INTENT TO READ
                      (       filesys.os):00410         ;*
E889                  (       filesys.os):00411         LOCRED
E889 BDE640           (       filesys.os):00412                 JSR     LOCERR                            ;FIND IT
E88C A68817           (       filesys.os):00413                 LDA     DATTR,X                           ;GET ATTRS
E88F 8580             (       filesys.os):00414                 BITA    #RPERM                            ;CAN WE READ?
E891 2635             (       filesys.os):00415                 BNE     CLOC2                             ;YES, ITS OK
                      (       filesys.os):00416         ;* FILE PROTECTON VIOLATION
E893                  (       filesys.os):00417         PROERR
E893 108EF783         (       filesys.os):00418                 LDY     #PROMSG                           ;MESSAGE
E897 8603             (       filesys.os):00419                 LDA     #RCPRO                            ;PROTECTION VIOLATION
E899 7EE64A           (       filesys.os):00420                 JMP     FILERR                            ;FILE ERROR
                      (       filesys.os):00421         ;* ATTEMPT TO READ FILE NOT OPEN FOR READ
E89C                  (       filesys.os):00422         ORERR
E89C 8EF756           (       filesys.os):00423                 LDX     #OREMSG
E89F 8604             (       filesys.os):00424                 LDA     #RCORE
E8A1 7EE2A4           (       filesys.os):00425                 JMP     ERRMRC
                      (       filesys.os):00426         ;* ATTEMPT TO READ PAST EOF
E8A4                  (       filesys.os):00427         EOF
E8A4 8606             (       filesys.os):00428                 LDA     #RCEOF
E8A6 7EE2DF           (       filesys.os):00429                 JMP     ERRRET
                      (       filesys.os):00430         ;*
                      (       filesys.os):00431         ;* REWIND A FILE
                      (       filesys.os):00432         ;*
E8A9                  (       filesys.os):00433         REWIND
E8A9 3406             (       filesys.os):00434                 PSHS    A,B                               ;SAVE REGS
E8AB EC42             (       filesys.os):00435                 LDD     OFIRST,U                          ;GET FIRST SECTOR ID
E8AD ED44             (       filesys.os):00436                 STD     OSECTOR,U                         ;POINT TO IT
E8AF 4F               (       filesys.os):00437                 CLRA
E8B0 5F               (       filesys.os):00438                 CLRB
E8B1 ED48             (       filesys.os):00439                 STD     OOFFSET,U                         ;SET OFFSET
E8B3 ED46             (       filesys.os):00440                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E8B5 3586             (       filesys.os):00441                 PULS    A,B,PC
                      (       filesys.os):00442         ;*
                      (       filesys.os):00443         ;* LOOKUP A FILE WITH INTENT TO WRITE
                      (       filesys.os):00444         ;*
E8B7                  (       filesys.os):00445         LOCWRI
E8B7 BDE678           (       filesys.os):00446                 JSR     LOCDIR                            ;LOOK FOR IT
E8BA 2705             (       filesys.os):00447                 BEQ     CLOC1                             ;IT EXISTS
E8BC BDE70A           (       filesys.os):00448                 JSR     CREATE                            ;CREATE IT
E8BF 2007             (       filesys.os):00449                 BRA     CLOC2                             ;AND RETURN
E8C1                  (       filesys.os):00450         CLOC1
E8C1 A68817           (       filesys.os):00451                 LDA     DATTR,X                           ;GET ATTRIBUTES
E8C4 8540             (       filesys.os):00452                 BITA    #WPERM                            ;CAN WE WRITE?
E8C6 27CB             (       filesys.os):00453                 BEQ     PROERR                            ;PROTECTON VIOLATION
E8C8                  (       filesys.os):00454         CLOC2
E8C8 FCDCDF           (       filesys.os):00455                 LDD     >WRKSEC                           ;GET DIRECTORY SECT
E8CB 1A04             (       filesys.os):00456                 ORCC    #$04                              ;SET 'Z'
E8CD 39               (       filesys.os):00457                 RTS
                      (       filesys.os):00458         ;*
                      (       filesys.os):00459         ;* OPEN A FILE FOR WRITE
                      (       filesys.os):00460         ;*
E8CE                  (       filesys.os):00461         OPENW
E8CE 3414             (       filesys.os):00462                 PSHS    B,X                               ;SAVE REGS
E8D0 8DE5             (       filesys.os):00463                 BSR     LOCWRI                            ;DOES IT EXIST
E8D2 EC8813           (       filesys.os):00464                 LDD     DDADR,X                           ;GET DISK ADDRESS
E8D5 ED42             (       filesys.os):00465                 STD     OFIRST,U                          ;SAVE IT
E8D7 ED44             (       filesys.os):00466                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E8D9 4F               (       filesys.os):00467                 CLRA
E8DA 5F               (       filesys.os):00468                 CLRB                                      ;ZERO OFFSET
E8DB ED48             (       filesys.os):00469                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E8DD ED46             (       filesys.os):00470                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST SECTOR
E8DF B6DCB7           (       filesys.os):00471                 LDA     >FDRIVE                           ;GET FILE DRIVE
E8E2 A741             (       filesys.os):00472                 STA     ODRIVE,U                          ;SET IT UP
E8E4 8602             (       filesys.os):00473                 LDA     #2                                ;INDICATE FILE OPEN/WRITE
E8E6 A7C4             (       filesys.os):00474                 STA     OTYPE,U                           ;INDICATE
E8E8 B6DCDA           (       filesys.os):00475                 LDA     >SAVDRV
E8EB B7DCEB           (       filesys.os):00476                 STA     >SDRIVE
E8EE 4F               (       filesys.os):00477                 CLRA    ZERO RC
E8EF 3594             (       filesys.os):00478                 PULS    B,X,PC
                      (       filesys.os):00479         ;*
                      (       filesys.os):00480         ;* WRITE CHARACTER TO A FILE
                      (       filesys.os):00481         ;*
E8F1                  (       filesys.os):00482         WRITEC
E8F1 3416             (       filesys.os):00483                 PSHS    A,B,X                             ;SAVE REGS
E8F3 304A             (       filesys.os):00484                 LEAX    OSIZ,U                            ;POINT TO DATA
E8F5 EC48             (       filesys.os):00485                 LDD     OOFFSET,U                         ;GET OFFSET
E8F7 10830200         (       filesys.os):00486                 CMPD    #512                              ;ARE WE OVER?
E8FB 2504             (       filesys.os):00487                 BLO     WRC1                              ;NO, ITS OK
E8FD 8D19             (       filesys.os):00488                 BSR     WRITEB                            ;OUTPUT THE BLOCK
E8FF EC48             (       filesys.os):00489                 LDD     OOFFSET,U                         ;GET OFFSET
E901                  (       filesys.os):00490         WRC1
E901 308B             (       filesys.os):00491                 LEAX    D,X                               ;POINT TO CHAR
E903 C30001           (       filesys.os):00492                 ADDD    #1                                ;INCREMENT
E906 ED48             (       filesys.os):00493                 STD     OOFFSET,U                         ;RESAVE
E908 A6E4             (       filesys.os):00494                 LDA     ,S                                ;GET CHAR BACK
E90A A784             (       filesys.os):00495                 STA     ,X                                ;WRITE IN BUFFER
E90C 1A04             (       filesys.os):00496                 ORCC    #4                                ;INDICATE SUCESS
E90E 3596             (       filesys.os):00497                 PULS    A,B,X,PC
                      (       filesys.os):00498         ;* ATTEMPT TO WRITE FILE NOT OPEN FOR WRITE
E910                  (       filesys.os):00499         OWERR
E910 8EF76C           (       filesys.os):00500                 LDX     #OWEMSG
E913 8605             (       filesys.os):00501                 LDA     #RCOWE
E915 7EE2A4           (       filesys.os):00502                 JMP     ERRMRC
                      (       filesys.os):00503         ;*
                      (       filesys.os):00504         ;* WRITE A BLOCK TO A FILE
                      (       filesys.os):00505         ;*
E918                  (       filesys.os):00506         WRITEB
E918 3414             (       filesys.os):00507                 PSHS    B,X                               ;SAVE REGS
E91A A6C4             (       filesys.os):00508                 LDA     OTYPE,U                           ;GET TYPE
E91C 8102             (       filesys.os):00509                 CMPA    #2                                ;WRITE?
E91E 26F0             (       filesys.os):00510                 BNE     OWERR                             ;NO, INVALID
E920 A641             (       filesys.os):00511                 LDA     ODRIVE,U                          ;GET DRIVE
E922 B7DCEB           (       filesys.os):00512                 STA     >SDRIVE                           ;SELECT DRIVE
E925 EC44             (       filesys.os):00513                 LDD     OSECTOR,U                         ;GET SECTOR
E927 1083FFFF         (       filesys.os):00514                 CMPD    #$FFFF                            ;ARE WE PAST END?
E92B 2613             (       filesys.os):00515                 BNE     WRB1                              ;NO, ITS OK
E92D BDE790           (       filesys.os):00516                 JSR     FRESEC                            ;GET A SECTOR
E930 3406             (       filesys.os):00517                 PSHS    A,B                               ;SAVE IT
E932 EC46             (       filesys.os):00518                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
E934 BDE5C6           (       filesys.os):00519                 JSR     FNDLNK                            ;GET ITS LINK
E937 3506             (       filesys.os):00520                 PULS    A,B                               ;RESTORE
E939 ED84             (       filesys.os):00521                 STD     ,X                                ;SAVE IT
E93B BDE787           (       filesys.os):00522                 JSR     CHGWRK                            ;INDICATE SECTOR CHANGED
E93E AE61             (       filesys.os):00523                 LDX     1,S                               ;RESTORE MEMORY POINTER
E940                  (       filesys.os):00524         WRB1
E940 ED46             (       filesys.os):00525                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E942 BDEAF8           (       filesys.os):00526                 JSR     WDISK                             ;WRITE THE SECTOR
E945 BDE5C6           (       filesys.os):00527                 JSR     FNDLNK                            ;LOCATE LINK
E948 ED44             (       filesys.os):00528                 STD     OSECTOR,U                         ;SAVE ID OF NEXT SECTOR
E94A B6DCDA           (       filesys.os):00529                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E94D B7DCEB           (       filesys.os):00530                 STA     >SDRIVE                           ;RESET DRIVE ID
E950 4F               (       filesys.os):00531                 CLRA
E951 5F               (       filesys.os):00532                 CLRB
E952 ED48             (       filesys.os):00533                 STD     OOFFSET,U                         ;INDICATE NO CHAR WRITE
E954 3594             (       filesys.os):00534                 PULS    B,X,PC
                      (       filesys.os):00535         ;*
                      (       filesys.os):00536         ;* CLOSE OPEN FILE
                      (       filesys.os):00537         ;*
E956                  (       filesys.os):00538         CLOSE
E956 3414             (       filesys.os):00539                 PSHS    B,X                               ;SAVE REGS
E958 A6C4             (       filesys.os):00540                 LDA     OTYPE,U                           ;GET TYPE
E95A 8102             (       filesys.os):00541                 CMPA    #2                                ;OPEN FOR WRITE?
E95C 2639             (       filesys.os):00542                 BNE     CLO4                              ;NO, SKIP IT
                      (       filesys.os):00543         ;* UPDATE LAST SECTOR IF ANY DATA, OR FIRST IN FILE
E95E A641             (       filesys.os):00544                 LDA     ODRIVE,U                          ;GET DRIVE ID
E960 B7DCEB           (       filesys.os):00545                 STA     >SDRIVE                           ;SELECT IT
E963 EC48             (       filesys.os):00546                 LDD     OOFFSET,U                         ;DATA IN LAST SECT?
E965 2604             (       filesys.os):00547                 BNE     CLO0                              ;YES, WRITE IT
E967 AE46             (       filesys.os):00548                 LDX     OLSTSEC,U                         ;GET SECTOR
E969 2617             (       filesys.os):00549                 BNE     CLO3                              ;IS A LAST, OK
                      (       filesys.os):00550         ;* CLEAR REMAINING SECTOR TO ZERO
E96B                  (       filesys.os):00551         CLO0
E96B 304A             (       filesys.os):00552                 LEAX    OSIZ,U                            ;PT TO AREA
E96D 308B             (       filesys.os):00553                 LEAX    D,X                               ;ADVANCE TO DATA AREA
E96F                  (       filesys.os):00554         CLO1
E96F 10830200         (       filesys.os):00555                 CMPD    #512                              ;ARE WE OVER?
E973 2409             (       filesys.os):00556                 BHS     CLO2                              ;YES, STOP
E975 6F84             (       filesys.os):00557                 CLR     ,X                                ;SET TO ZERO
E977 6380             (       filesys.os):00558                 COM     ,X+                               ;& CONVERT TO FF
E979 C30001           (       filesys.os):00559                 ADDD    #1                                ;ADVANCE
E97C 20F1             (       filesys.os):00560                 BRA     CLO1                              ;AND CONTINUE
                      (       filesys.os):00561         ;* WRITE IT TO THE DISK
E97E                  (       filesys.os):00562         CLO2
E97E 304A             (       filesys.os):00563                 LEAX    OSIZ,U                            ;OFFSET AGAIN
E980 8D96             (       filesys.os):00564                 BSR     WRITEB                            ;WRITE IT
                      (       filesys.os):00565         ;* MARK LAST SECTOR WRITTEN AS EOF
E982                  (       filesys.os):00566         CLO3
E982 EC46             (       filesys.os):00567                 LDD     OLSTSEC,U                         ;ITS NOW LAST ONE
E984 BDE5C6           (       filesys.os):00568                 JSR     FNDLNK                            ;GET ITS LINK
E987 CCFFFF           (       filesys.os):00569                 LDD     #$FFFF                            ;EOF MARKER
E98A ED84             (       filesys.os):00570                 STD     ,X                                ;WRITE IT
                      (       filesys.os):00571         ;* IF NOT LAST SECTOR IN FILE, RELEASE REST
E98C EC44             (       filesys.os):00572                 LDD     OSECTOR,U                         ;GET SECTOR
E98E 1083FFFF         (       filesys.os):00573                 CMPD    #$FFFF                            ;LAST ONE IN FILE?
E992 2703             (       filesys.os):00574                 BEQ     CLO4                              ;IS OK
E994 BDED9B           (       filesys.os):00575                 JSR     UNCHAIN                           ;REMOVE SECTOR LINKS
E997                  (       filesys.os):00576         CLO4
E997 6FC4             (       filesys.os):00577                 CLR     OTYPE,U                           ;INDICATE FILE IS CLOSED
E999 B6DCDA           (       filesys.os):00578                 LDA     >SAVDRV                           ;RESET DRIVE
E99C B7DCEB           (       filesys.os):00579                 STA     >SDRIVE
E99F 4F               (       filesys.os):00580                 CLRA
E9A0 3594             (       filesys.os):00581                 PULS    B,X,PC                            ;GO HOME
                      (       filesys.os):00582         ;*
                      (       filesys.os):00583         ;* SEEK ABSOLUTE FROM START OF FILE
                      (       filesys.os):00584         ;*
E9A2                  (       filesys.os):00585         SEEKABS
E9A2 BDE8A9           (       filesys.os):00586                 JSR     REWIND                            ;BACK TO START
                      (       filesys.os):00587         ;*
                      (       filesys.os):00588         ;* SEEK FORWARD RELATIVE
                      (       filesys.os):00589         ;*
E9A5                  (       filesys.os):00590         SEEKREL
E9A5 3416             (       filesys.os):00591                 PSHS    A,B,X                             ;SAVE SECTOR ID
E9A7 E6C4             (       filesys.os):00592                 LDB     OTYPE,U                           ;GET TYPE
E9A9 5A               (       filesys.os):00593                 DECB                                      ;OPEN FOR READ?
E9AA 1026FEEE         (       filesys.os):00594                 LBNE    ORERR                             ;NO, REPORT ERROR
E9AE A641             (       filesys.os):00595                 LDA     ODRIVE,U                          ;GET DRIVE
E9B0 B7DCEB           (       filesys.os):00596                 STA     >SDRIVE                           ;SELECT IT
E9B3 EC48             (       filesys.os):00597                 LDD     OOFFSET,U                         ;GET OFFSET?
E9B5 E3E4             (       filesys.os):00598                 ADDD    ,S                                ;ADD OFFSET
                      (       filesys.os):00599         ;* ADVANCE TILL WE ARE ON CORRECT SECTOR
E9B7                  (       filesys.os):00600         SEEK1
E9B7 10830200         (       filesys.os):00601                 CMPD    #512                              ;ARE WE OVER?
E9BB 251A             (       filesys.os):00602                 BLO     SEEK2                             ;NO, SET OFFSET & EXIT
E9BD 3406             (       filesys.os):00603                 PSHS    A,B                               ;SAVE ID
E9BF EC44             (       filesys.os):00604                 LDD     OSECTOR,U                         ;GET NEXT SECTOR
E9C1 1083FFFF         (       filesys.os):00605                 CMPD    #$FFFF                            ;END OF FILE?
E9C5 1027FEDB         (       filesys.os):00606                 LBEQ    EOF                               ;ERROR
E9C9 ED46             (       filesys.os):00607                 STD     OLSTSEC,U                         ;SET AS OLD
E9CB BDE5C6           (       filesys.os):00608                 JSR     FNDLNK                            ;LOOKUP LINK
E9CE ED44             (       filesys.os):00609                 STD     OSECTOR,U                         ;SAVE PTR TO NEXT
E9D0 3506             (       filesys.os):00610                 PULS    A,B                               ;RESTORE IT
E9D2 830200           (       filesys.os):00611                 SUBD    #512                              ;INDICATE WE ADVANCED
E9D5 20E0             (       filesys.os):00612                 BRA     SEEK1                             ;CONTINUE
                      (       filesys.os):00613         ;* SKIPPED SECTORS, IF NON-ZERO OFFSET, READ IN DATA
E9D7                  (       filesys.os):00614         SEEK2
E9D7 ED48             (       filesys.os):00615                 STD     OOFFSET,U                         ;SET OFFSET
E9D9 270F             (       filesys.os):00616                 BEQ     SEEK3                             ;ZERO, DON'T READ DATA
E9DB EC44             (       filesys.os):00617                 LDD     OSECTOR,U                         ;GET SECTOR
E9DD 1083FFFF         (       filesys.os):00618                 CMPD    #$FFFF                            ;EOF?
E9E1 1027FEBF         (       filesys.os):00619                 LBEQ    EOF                               ;YES, ERROR
E9E5 304A             (       filesys.os):00620                 LEAX    OSIZ,U                            ;ADVANCE TO DATA
E9E7 BDEAC5           (       filesys.os):00621                 JSR     RDISK                             ;READ A BLOCK
E9EA                  (       filesys.os):00622         SEEK3
E9EA B6DCDA           (       filesys.os):00623                 LDA     >SAVDRV                           ;GET DRIVE
E9ED B7DCEB           (       filesys.os):00624                 STA     >SDRIVE                           ;SET IT
E9F0 4F               (       filesys.os):00625                 CLRA    ZERO RC
E9F1 3596             (       filesys.os):00626                 PULS    A,B,X,PC                          ;BACK TO END
                      (       filesys.os):00627         ;*
                      (       filesys.os):00628         ;* REPORT POSITION IN FILE
                      (       filesys.os):00629         ;*
E9F3                  (       filesys.os):00630         FTELL
E9F3 3430             (       filesys.os):00631                 PSHS    X,Y                               ;SAVE REGS
E9F5 A641             (       filesys.os):00632                 LDA     ODRIVE,U                          ;GET DRIVE
E9F7 B7DCEB           (       filesys.os):00633                 STA     >SDRIVE                           ;SELECT IT
E9FA 108E0000         (       filesys.os):00634                 LDY     #0                                ;START AT POSITION ZERO
E9FE EC42             (       filesys.os):00635                 LDD     OFIRST,U                          ;GET ID OF FIRST
EA00                  (       filesys.os):00636         FTEL1
EA00 10A344           (       filesys.os):00637                 CMPD    OSECTOR,U                         ;ARE WE THERE?
EA03 2709             (       filesys.os):00638                 BEQ     FTEL2                             ;YES
EA05 31A90200         (       filesys.os):00639                 LEAY    512,Y                             ;ADVANCE 1 SECTOR SIZE
EA09 BDE5C6           (       filesys.os):00640                 JSR     FNDLNK                            ;LOCATE LINK
EA0C 26F2             (       filesys.os):00641                 BNE     FTEL1                             ;TRY THIS ONE
EA0E                  (       filesys.os):00642         FTEL2
EA0E EC48             (       filesys.os):00643                 LDD     OOFFSET,U                         ;GET OFFSET
EA10 3420             (       filesys.os):00644                 PSHS    Y                                 ;SAVE 'Y'
EA12 E3E1             (       filesys.os):00645                 ADDD    ,S++                              ;INCLUDE IN RESULT
EA14 3402             (       filesys.os):00646                 PSHS    A
EA16 B6DCDA           (       filesys.os):00647                 LDA     >SAVDRV                           ;GET DRIVE
EA19 B7DCEB           (       filesys.os):00648                 STA     >SDRIVE
EA1C 4F               (       filesys.os):00649                 CLRA    'Z' RC
EA1D 35B2             (       filesys.os):00650                 PULS    A,X,Y,PC
                      (       filesys.os):00651         ;*
                      (       filesys.os):00652         ;* SUSPEND FILE OPERATION
                      (       filesys.os):00653         ;*
EA1F                  (       filesys.os):00654         SUSPEND
EA1F 3506             (       filesys.os):00655                 PULS    A,B                               ;GET PC FROM STACK
EA21 FDDCD3           (       filesys.os):00656                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EA24 EC46             (       filesys.os):00657                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
EA26 AE48             (       filesys.os):00658                 LDX     OOFFSET,U                         ;GET OFFSET
EA28 10AE42           (       filesys.os):00659                 LDY     OFIRST,U                          ;GET FIRST SECT
EA2B 3436             (       filesys.os):00660                 PSHS    A,B,X,Y                           ;SAVE IT
EA2D ECC4             (       filesys.os):00661                 LDD     OTYPE,U                           ;GET TYPE&DRIVE
EA2F 3406             (       filesys.os):00662                 PSHS    A,B                               ;SAVE IT
EA31 8102             (       filesys.os):00663                 CMPA    #2                                ;WUZ IT WRITE?
EA33 262D             (       filesys.os):00664                 BNE     SUSP2                             ;DON'T SAVE
EA35 8C0000           (       filesys.os):00665                 CMPX    #0                                ;ZERO OFFSET
                      (       filesys.os):00666         
EA38 2728             (       filesys.os):00667                 BEQ     SUSP2                             ;DON'T SAVE
                      (       filesys.os):00668         ;* CHARACTER WRITE, WITH NON-ZERO OFFSET
EA3A A641             (       filesys.os):00669                 LDA     ODRIVE,U                          ;GET DRIVE
EA3C B7DCEB           (       filesys.os):00670                 STA     >SDRIVE                           ;SELECT IT
EA3F EC44             (       filesys.os):00671                 LDD     OSECTOR,U                         ;GET SECTOR
EA41 1083FFFF         (       filesys.os):00672                 CMPD    #$FFFF                            ;OK TO WRITE?
EA45 2610             (       filesys.os):00673                 BNE     SUSP1                             ;ITS OK
EA47 BDE790           (       filesys.os):00674                 JSR     FRESEC                            ;GRAB A SECTOR
EA4A 3406             (       filesys.os):00675                 PSHS    A,B                               ;SAVE ID
EA4C EC46             (       filesys.os):00676                 LDD     OLSTSEC,U                         ;GET LAST
EA4E BDE5C6           (       filesys.os):00677                 JSR     FNDLNK                            ;GET ITS LINK
EA51 3506             (       filesys.os):00678                 PULS    A,B                               ;RESTORE ID OF FREE
EA53 ED84             (       filesys.os):00679                 STD     ,X                                ;SET IT
EA55 ED44             (       filesys.os):00680                 STD     OSECTOR,U                         ;SET UP NEW SECTOR
EA57                  (       filesys.os):00681         SUSP1
EA57 304A             (       filesys.os):00682                 LEAX    OSIZ,U                            ;SET UP PTR
EA59 BDEAF8           (       filesys.os):00683                 JSR     WDISK                             ;OUTPUT SECTOR TO DISK
EA5C B6DCDA           (       filesys.os):00684                 LDA     >SAVDRV                           ;GET DRIVE
EA5F B7DCEB           (       filesys.os):00685                 STA     >SDRIVE                           ;RESET IT
EA62                  (       filesys.os):00686         SUSP2
EA62 BEDCD6           (       filesys.os):00687                 LDX     >SAVX                             ;RESTORE X
EA65 10BEDCD8         (       filesys.os):00688                 LDY     >SAVY                             ;RESTORE Y
EA69 F6DCD5           (       filesys.os):00689                 LDB     >SAVB                             ;RESTORE B
EA6C 4F               (       filesys.os):00690                 CLRA    ZERO RC
EA6D 6E9FDCD3         (       filesys.os):00691                 JMP     [TEMP4]                           ;GOT FOR TI
                      (       filesys.os):00692         ;*
                      (       filesys.os):00693         ;* RESUME FILE OPERATION
                      (       filesys.os):00694         ;*
EA71                  (       filesys.os):00695         RESUME
EA71 3506             (       filesys.os):00696                 PULS    A,B                               ;GET PC
EA73 FDDCD3           (       filesys.os):00697                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EA76 3506             (       filesys.os):00698                 PULS    A,B                               ;RESTORE REGS
EA78 EDC4             (       filesys.os):00699                 STD     OTYPE,U                           ;RESTORE TYPE
EA7A F7DCEB           (       filesys.os):00700                 STB     >SDRIVE                           ;SELECT DRIVE
EA7D 3536             (       filesys.os):00701                 PULS    A,B,X,Y                           ;RESTORE REST
EA7F AF48             (       filesys.os):00702                 STX     OOFFSET,U                         ;SET OFFSET
EA81 10AF42           (       filesys.os):00703                 STY     OFIRST,U                          ;SET FIRST
                      (       filesys.os):00704         ;* IF OLSTSEC IS ZERO, NO READ/WRITE TO DISK YET, OSECTOR IS FIRST IN FILE
EA84 ED46             (       filesys.os):00705                 STD     OLSTSEC,U                         ;RESET LAST SECTOR
EA86 2605             (       filesys.os):00706                 BNE     RESU1                             ;ITS OK
EA88 10AF44           (       filesys.os):00707                 STY     OSECTOR,U                         ;SET CURRENT SECTOR
EA8B 2005             (       filesys.os):00708                 BRA     RESU2                             ;CONTINUE
                      (       filesys.os):00709         ;* ELSE OSECTOR IS NEXT AFTER OLSTSEC
EA8D                  (       filesys.os):00710         RESU1
EA8D BDE5C6           (       filesys.os):00711                 JSR     FNDLNK                            ;GET LINK
EA90 ED44             (       filesys.os):00712                 STD     OSECTOR,U                         ;SET UP NEXT SECTOR
                      (       filesys.os):00713         ;* CHECK FOR ACTUAL SECTOR IN MEMORY
EA92                  (       filesys.os):00714         RESU2
EA92 EC48             (       filesys.os):00715                 LDD     OOFFSET,U                         ;CHAR OPERATIONS?
EA94 2707             (       filesys.os):00716                 BEQ     RESU3                             ;NO, ALL IS OK
                      (       filesys.os):00717         ;* NON-ZERO OFFSET, SECTOR MUST BE READ INTO RAM
EA96 EC44             (       filesys.os):00718                 LDD     OSECTOR,U                         ;GET SECTOR
EA98 304A             (       filesys.os):00719                 LEAX    OSIZ,U                            ;ADVANCE TO BUFFER
EA9A BDEAC5           (       filesys.os):00720                 JSR     RDISK                             ;READ IN SECTOR
EA9D                  (       filesys.os):00721         RESU3
EA9D B6DCDA           (       filesys.os):00722                 LDA     >SAVDRV                           ;RESTORE DRIVE
EAA0 B7DCEB           (       filesys.os):00723                 STA     >SDRIVE                           ;RESET IT
EAA3 20B2             (       filesys.os):00724                 BRA     SUSP1                             ;RETURN TO CALLER
                      (       filesys.os):00725         ;*
                      (       filesys.os):00726         ;* CALCULATE CYLINDER, SECTOR, AND HEAD FROM ABSOLUTE SECTOR NUMBER
                      (       filesys.os):00727         ;*
EAA5                  (       filesys.os):00728         SECTOR
EAA5 3416             (       filesys.os):00729                 PSHS    A,B,X                             ;SAVE SECTOR ID
EAA7 1F01             (       filesys.os):00730                 TFR     D,X                               ;SECT ID IN 'X'
EAA9 A643             (       filesys.os):00731                 LDA     NSEC,U                            ;GET SECTORS/TRACK
EAAB E642             (       filesys.os):00732                 LDB     NHEAD,U                           ;GET # HEADS
EAAD 3D               (       filesys.os):00733                 MUL                                       ;CALCULATE SECTORS/CYLINDER
EAAE BDF697           (       filesys.os):00734                 JSR     DIV16                             ;X=CYLINDER ID, D=SECTOR IN CYLINDER
EAB1 6F45             (       filesys.os):00735                 CLR     HEAD,U                            ;ASSUME HEAD 0
EAB3                  (       filesys.os):00736         SEC1
EAB3 E143             (       filesys.os):00737                 CMPB    NSEC,U                            ;WHICH HEAD?
EAB5 2506             (       filesys.os):00738                 BLO     SEC2                              ;ASSUMPTION CORRECT
EAB7 E043             (       filesys.os):00739                 SUBB    NSEC,U                            ;CONVERT
EAB9 6C45             (       filesys.os):00740                 INC     HEAD,U                            ;ADVANCE TO NEXT HEAD
EABB 20F6             (       filesys.os):00741                 BRA     SEC1                              ;TRY AGAIN
EABD                  (       filesys.os):00742         SEC2
EABD E746             (       filesys.os):00743                 STB     SEC,U                             ;INDICATE SECTOR
EABF 1F10             (       filesys.os):00744                 TFR     X,D                               ;GET CYLINDER ID
EAC1 E744             (       filesys.os):00745                 STB     CYL,U                             ;SAVE CYLINDER ID
EAC3 3596             (       filesys.os):00746                 PULS    A,B,X,PC
                      (       filesys.os):00747         ;*
                      (       filesys.os):00748         ;* READ SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00749         ;*
EAC5                  (       filesys.os):00750         RDISK
EAC5 3476             (       filesys.os):00751                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EAC7 7FDCEC           (       filesys.os):00752                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EACA 8D20             (       filesys.os):00753                 BSR     GETCTL                            ;SET UP 'U'
EACC                  (       filesys.os):00754         RTRY1
EACC ECE4             (       filesys.os):00755                 LDD     ,S                                ;GET SECTOR
EACE 8DD5             (       filesys.os):00756                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EAD0                  (       filesys.os):00757         RTRY2
EAD0 AE62             (       filesys.os):00758                 LDX     2,S                               ;RESTORE 'X'
EAD2 BDF6C8           (       filesys.os):00759                 JSR     RDSEC                             ;ATTEMPT READ
EAD5 2713             (       filesys.os):00760                 BEQ     RDONE                             ;SUCESS, ITS OK
EAD7 7CDCEC           (       filesys.os):00761                 INC     >ERRCNT                           ;ADVANCE
EADA F6DCEC           (       filesys.os):00762                 LDB     >ERRCNT                           ;GET VALUE
EADD C105             (       filesys.os):00763                 CMPB    #5                                ;TOO MANY ERRORS?
EADF 273C             (       filesys.os):00764                 BEQ     HDE                               ;YES, SKIP IT
EAE1 C103             (       filesys.os):00765                 CMPB    #3                                ;TIME FOR RE-SEEK?
EAE3 26EB             (       filesys.os):00766                 BNE     RTRY2                             ;NO, DON'T RE-SEEK
EAE5 BDF6BE           (       filesys.os):00767                 JSR     HOME                              ;RECALIBRATE
EAE8 20E2             (       filesys.os):00768                 BRA     RTRY1                             ;AND RESEEK
EAEA                  (       filesys.os):00769         RDONE
EAEA 35F6             (       filesys.os):00770                 PULS    A,B,X,Y,U,PC
                      (       filesys.os):00771         ;*
                      (       filesys.os):00772         ;* GET DRIVE(A) CONTROL BLOCK IN 'D' & 'U'
                      (       filesys.os):00773         ;*
EAEC                  (       filesys.os):00774         GETCTL
EAEC B6DCEB           (       filesys.os):00775                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
EAEF                  (       filesys.os):00776         GETCTL1
EAEF C607             (       filesys.os):00777                 LDB     #CSIZE                            ;SIZE OF EACH BLOCK
EAF1 3D               (       filesys.os):00778                 MUL                                       ;CALCULATE OFFSET
EAF2 C3DC50           (       filesys.os):00779                 ADDD    #DCTRL                            ;OFFSET TO DATA AREA
EAF5 1F03             (       filesys.os):00780                 TFR     D,U                               ;SET UP U
EAF7 39               (       filesys.os):00781                 RTS
                      (       filesys.os):00782         ;*
                      (       filesys.os):00783         ;* WRITE SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00784         ;*
EAF8                  (       filesys.os):00785         WDISK
EAF8 3476             (       filesys.os):00786                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EAFA 7FDCEC           (       filesys.os):00787                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EAFD 8DED             (       filesys.os):00788                 BSR     GETCTL                            ;SET UP 'U'
EAFF                  (       filesys.os):00789         WTRY1
EAFF ECE4             (       filesys.os):00790                 LDD     ,S                                ;GET SECTOR
EB01 8DA2             (       filesys.os):00791                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EB03                  (       filesys.os):00792         WTRY2
EB03 AE62             (       filesys.os):00793                 LDX     2,S                               ;RESTORE 'X'
EB05 BDF6CC           (       filesys.os):00794                 JSR     WRSEC                             ;ATTEMPT WRITE
EB08 27E0             (       filesys.os):00795                 BEQ     RDONE                             ;SUCCESS, ITS OK
EB0A 7CDCEC           (       filesys.os):00796                 INC     >ERRCNT                           ;ADVANCE
EB0D F6DCEC           (       filesys.os):00797                 LDB     >ERRCNT                           ;GET VALUE
EB10 C105             (       filesys.os):00798                 CMPB    #5                                ;TOO MANY ERRORS?
EB12 2709             (       filesys.os):00799                 BEQ     HDE                               ;YES, SKIP IT
EB14 C103             (       filesys.os):00800                 CMPB    #3                                ;TIME FOR RE-SEEK
EB16 26EB             (       filesys.os):00801                 BNE     WTRY2                             ;NO, DON'T RE-SEEK
EB18 BDF6BE           (       filesys.os):00802                 JSR     HOME                              ;RECALIBRATE
EB1B 20E2             (       filesys.os):00803                 BRA     WTRY1                             ;AND RESEEK
                      (       filesys.os):00804         ;* REPORT DISK ERROR
EB1D                  (       filesys.os):00805         HDE
EB1D B7DCCB           (       filesys.os):00806                 STA     >TEMP                             ;SAVE ERROR CODE
EB20 3576             (       filesys.os):00807                 PULS    A,B,X,Y,U                         ;RESTORE REGS CUZ 'U' NOT SAVED
EB22 10B3DCDF         (       filesys.os):00808                 CMPD    >WRKSEC                           ;WAS IT WORK SECTOR?
EB26 2612             (       filesys.os):00809                 BNE     HDE1                              ;NO, ITS NOT
EB28 3402             (       filesys.os):00810                 PSHS    A                                 ;SAVE A
EB2A B6DCEB           (       filesys.os):00811                 LDA     >SDRIVE                           ;GET CURRENT DRIVE
EB2D B1DCDE           (       filesys.os):00812                 CMPA    >WRKDRV                           ;ON WORK DRIVE?
EB30 3502             (       filesys.os):00813                 PULS    A                                 ;RESTORE A
EB32 2606             (       filesys.os):00814                 BNE     HDE1                              ;NOT WORK DRIVE
EB34 BDE60C           (       filesys.os):00815                 JSR     PURGE1                            ;INSURE NO WORK SECTOR IN CORE
EB37 7FDCDD           (       filesys.os):00816                 CLR     >WRKCHG                           ;INSURE NO UPDATE RECORDED
EB3A                  (       filesys.os):00817         HDE1
EB3A BDE535           (       filesys.os):00818                 JSR     WRLIN                             ;OUTPUT STRING
EB3D 4572726F72206163 (       filesys.os):00819                 FCC     'Error accessing block '
     63657373696E6720
     626C6F636B20
EB53 BDE465           (       filesys.os):00820                 JSR     WRDEC                             ;DISPLAY BLOCK
EB56 BDE535           (       filesys.os):00821                 JSR     WRLIN                             ;OUTPUT STRING
EB59 206F6E2064726976 (       filesys.os):00822                 FCC     ' on drive: '
     653A20
EB64 B6DCEB           (       filesys.os):00823                 LDA     >SDRIVE                           ;GET DRIVE ID
EB67 8B41             (       filesys.os):00824                 ADDA    #'A'                              ;OFFSET
EB69 BDE581           (       filesys.os):00825                 JSR     PUTCHR
EB6C BDE56F           (       filesys.os):00826                 JSR     LFCR                              ;NEW LINE
EB6F 8EEB8C           (       filesys.os):00827                 LDX     #DETAB                            ;PT TO TABLE
EB72                  (       filesys.os):00828         HDE2
EB72 7ADCCB           (       filesys.os):00829                 DEC     >TEMP                             ;REDUCE ERROR COUNT
EB75 270A             (       filesys.os):00830                 BEQ     HDE4                              ;THIS IS IT
EB77                  (       filesys.os):00831         HDE3
EB77 A680             (       filesys.os):00832                 LDA     ,X+                               ;GET CHAR
EB79 26FC             (       filesys.os):00833                 BNE     HDE3                              ;KEEP LOOKING
EB7B A684             (       filesys.os):00834                 LDA     ,X                                ;MORE?
EB7D 26F3             (       filesys.os):00835                 BNE     HDE2                              ;NO, ERROR
EB7F 3001             (       filesys.os):00836                 LEAX    1,X                               ;SKIP MARKER
EB81                  (       filesys.os):00837         HDE4
EB81 BDE55B           (       filesys.os):00838                 JSR     WRSTR                             ;OUTPUT STRING
EB84 BDE56F           (       filesys.os):00839                 JSR     LFCR                              ;NEW LINE
EB87 8609             (       filesys.os):00840                 LDA     #RCDSK                            ;INDICATE DISK ERROR
EB89 7EE2DF           (       filesys.os):00841                 JMP     ERRRET                            ;RETURN
                      (       filesys.os):00842         ;* DISK ERROR MESSAGES
EB8C                  (       filesys.os):00843         DETAB
EB8C 4469736B20666F72 (       filesys.os):00844                 FCC     'Disk format error'
     6D6174206572726F
     72
EB9D 4261642073656374 (       filesys.os):00845                 FCC     'Bad sector'
     6F72
EBA7 536563746F72206E (       filesys.os):00846                 FCC     'Sector not found'
     6F7420666F756E64
EBB7 4469736B20777269 (       filesys.os):00847                 FCC     'Disk write protected'
     74652070726F7465
     63746564
EBCB 00               (       filesys.os):00848                 FCB     0                                 ;END OF TABLE
EBCC 4469736B20737973 (       filesys.os):00849                 FCC     'Disk system error'
     74656D206572726F
     72
                      (        cubix.asm):01175                 INCLUDE command.os                        ;INTERNAL COMMANDS
                      (       command.os):00001         ;*
                      (       command.os):00002         ;* CUBIX Internal (built in) command handlers
                      (       command.os):00003         ;*
                      (       command.os):00004         ;* FORMAT COMMAND
                      (       command.os):00005         ;*
EBDD                  (       command.os):00006         INIT
EBDD BDE60A           (       command.os):00007                 JSR     PURGE                             ;INSURE NO DISK I/O IN PROG
EBE0 BDE3E6           (       command.os):00008                 JSR     GETDRV                            ;GET DRIVE ID
EBE3 B7DCEB           (       command.os):00009                 STA     >SDRIVE                           ;SELECT IT
EBE6 BDEAEC           (       command.os):00010                 JSR     GETCTL                            ;PT 'U' TO CTRL BLOCK
EBE9 CC0203           (       command.os):00011                 LDD     #$0203                            ;DEFAULT INTERLEAVE & ALLOCATION
EBEC FDDCD3           (       command.os):00012                 STD     >TEMP4                            ;SAVE IT
                      (       command.os):00013         ;* GET FORMAT OPERANDS
EBEF                  (       command.os):00014         INI00
EBEF BDE4C3           (       command.os):00015                 JSR     SKIP                              ;ANY MORE OPERANDS?
EBF2 2728             (       command.os):00016                 BEQ     INI1                              ;NO, THTS ALL
EBF4 8EF3E7           (       command.os):00017                 LDX     #INITAB                           ;POINT TO TABLE
EBF7 BDF09D           (       command.os):00018                 JSR     TLOOKE                            ;GET DATA
EBFA 3404             (       command.os):00019                 PSHS    B                                 ;SAVE ID
EBFC BDE3F8           (       command.os):00020                 JSR     GETNUM                            ;GET VALUE
EBFF 3502             (       command.os):00021                 PULS    A                                 ;RESTORE A
EC01 4D               (       command.os):00022                 TSTA    INTERLEAVE?
EC02 2605             (       command.os):00023                 BNE     INI01                             ;NO
EC04 F7DCD3           (       command.os):00024                 STB     >TEMP4                            ;SAVE INTERLEAVE
EC07 20E6             (       command.os):00025                 BRA     INI00                             ;TRY FOR NEXT
EC09                  (       command.os):00026         INI01
EC09 4A               (       command.os):00027                 DECA    DIRECTORY?
EC0A 2605             (       command.os):00028                 BNE     INI02                             ;NO, USE STANDARD OPTIONS
EC0C F7DCD4           (       command.os):00029                 STB     >TEMP4+1                          ;SET DIRECTORY ALLOCATION
EC0F 20DE             (       command.os):00030                 BRA     INI00                             ;TRY FOR NEXT
EC11                  (       command.os):00031         INI02
EC11 4A               (       command.os):00032                 DECA    CONVERT
EC12 8103             (       command.os):00033                 CMPA    #3                                ;IN RANGE?
EC14 1022F687         (       command.os):00034                 LBHI    BADOPR                            ;NO, REPORT ERROR
EC18 E7C6             (       command.os):00035                 STB     A,U                               ;SET UP DRIVE
EC1A 20D3             (       command.os):00036                 BRA     INI00                             ;TRY FOR NEXT
                      (       command.os):00037         ;* DISPLAY FORMAT
EC1C                  (       command.os):00038         INI1
EC1C BDE535           (       command.os):00039                 JSR     WRLIN
EC1F 466F726D61747469 (       command.os):00040                 FCC     'Formatting '
     6E6720
EC2A B6DCEB           (       command.os):00041                 LDA     >SDRIVE
EC2D BDF1E3           (       command.os):00042                 JSR     SHODRV                            ;SHOW THE DISK
EC30 8EF3E7           (       command.os):00043                 LDX     #INITAB                           ;POINT TO TABLE
EC33 4F               (       command.os):00044                 CLRA                                      ;DISPLAY INTERLEAVE
EC34 F6DCD3           (       command.os):00045                 LDB     >TEMP4                            ;GET INTERLEAVE FACTOR
EC37 BDF232           (       command.os):00046                 JSR     SHODRB                            ;DISPLAY IT
EC3A 8601             (       command.os):00047                 LDA     #1                                ;DISPLAY DIRECTORY EXTENSION
EC3C F6DCD4           (       command.os):00048                 LDB     >TEMP4+1                          ;GET DIRECTORY EXTENSION
EC3F BDF22D           (       command.os):00049                 JSR     SHODRA                            ;DISPLAY IT
EC42 BDE535           (       command.os):00050                 JSR     WRLIN                             ;MESSAGE
EC45 0A0D             (       command.os):00051                 FCB     $0A,$0D                           ;NEW LINE
EC47 4F6B3F20         (       command.os):00052                 FCC     'Ok? '
EC4B BDE5C1           (       command.os):00053                 JSR     GETCHR
EC4E BDE581           (       command.os):00054                 JSR     PUTCHR                            ;ECHO
EC51 84DF             (       command.os):00055                 ANDA    #$DF                              ;GET IT
EC53 8159             (       command.os):00056                 CMPA    #'Y'
EC55 1026F916         (       command.os):00057                 LBNE    LFCR
EC59 BDE56F           (       command.os):00058                 JSR     LFCR                              ;NEW LINE
                      (       command.os):00059         ;* FORMAT PHYSICAL DISK
EC5C B6DCD3           (       command.os):00060                 LDA     >TEMP4                            ;GET INTERLEAVE FACTOR
EC5F BDF6BA           (       command.os):00061                 JSR     FORMAT                            ;FORMAT THE DISK
EC62 B6DCD4           (       command.os):00062                 LDA     >TEMP4+1                          ;GET DIRECTORY ALLOC
EC65 B7DCD3           (       command.os):00063                 STA     >TEMP4                            ;LOCAL COPY OF DIR ALLOC
                      (       command.os):00064         ;* SET UP DIRECTORY & LINK TABLE ON DISK
EC68 8EDE00           (       command.os):00065                 LDX     #WRKSPC                           ;POINT TO IT
EC6B                  (       command.os):00066         INI2
EC6B 6F80             (       command.os):00067                 CLR     ,X+                               ;CLEAR ONE
EC6D 8CE000           (       command.os):00068                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
EC70 25F9             (       command.os):00069                 BLO     INI2                              ;NO, KEEP CLEARING
                      (       command.os):00070         ;* WRITE BASE DIRECTORY SECTOR
EC72 8EDE00           (       command.os):00071                 LDX     #WRKSPC                           ;PT BACK TO IT
EC75 CC0000           (       command.os):00072                 LDD     #DIRSEC                           ;DIRECTORY SECTOR
EC78 BDEAF8           (       command.os):00073                 JSR     WDISK                             ;WRITE DIRECTORY (NO FILES)
                      (       command.os):00074         ;* WRITE NON-BASE LINK SECTORS
EC7B BDE6F8           (       command.os):00075                 JSR     CURSIZ                            ;GET SIZE OF CURRENT DRIVE
EC7E 830001           (       command.os):00076                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
EC81 1F89             (       command.os):00077                 TFR     A,B                               ;COPY A&B = D/256(ENTRIES/LINKSEC)
EC83 FDDCD1           (       command.os):00078                 STD     >TEMP3                            ;SAVE FOR LATER
EC86 CC0002           (       command.os):00079                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
EC89                  (       command.os):00080         INI3
EC89 7ADCD2           (       command.os):00081                 DEC     >TEMP3+1                          ;REDUCE COUNT
EC8C 2B08             (       command.os):00082                 BMI     INI4                              ;END
EC8E BDEAF8           (       command.os):00083                 JSR     WDISK                             ;WRITE IT
EC91 C30001           (       command.os):00084                 ADDD    #1                                ;NEXT SECTOR
EC94 20F3             (       command.os):00085                 BRA     INI3                              ;KEEP GOING
                      (       command.os):00086         ;* WRITE NON-BASE DIRECTORY SECTORS
EC96                  (       command.os):00087         INI4
EC96 7ADCD3           (       command.os):00088                 DEC     >TEMP4                            ;BACKUP
EC99 2B08             (       command.os):00089                 BMI     INI5                              ;THATS ALL
EC9B BDEAF8           (       command.os):00090                 JSR     WDISK                             ;WRITE IT
EC9E C30001           (       command.os):00091                 ADDD    #1                                ;NEXT ONE
ECA1 20F3             (       command.os):00092                 BRA     INI4                              ;DO EM ALL
                      (       command.os):00093         ;* WRITE BASE LINK SECTOR
ECA3                  (       command.os):00094         INI5
ECA3 CCFFFF           (       command.os):00095                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECA6 ED84             (       command.os):00096                 STD     DIRSEC*2,X                        ;SET DIRECTORY FREE
ECA8 3002             (       command.os):00097                 LEAX    LNKSEC*2,X                        ;OFFSET TO IT
ECAA CC0002           (       command.os):00098                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
ECAD                  (       command.os):00099         INI6
ECAD 7ADCD1           (       command.os):00100                 DEC     >TEMP3                            ;REDUCE COUNT
ECB0 2B07             (       command.os):00101                 BMI     INI7                              ;END
ECB2 ED81             (       command.os):00102                 STD     ,X++                              ;WRITE IT OUT
ECB4 C30001           (       command.os):00103                 ADDD    #1                                ;ADVANCE
ECB7 20F4             (       command.os):00104                 BRA     INI6                              ;DO EM ALL
ECB9                  (       command.os):00105         INI7
ECB9 3406             (       command.os):00106                 PSHS    A,B                               ;SAVE SECTOR ID
ECBB 7DDCD4           (       command.os):00107                 TST     >TEMP4+1                          ;ANY ADDITIONAL DIR?
ECBE 2703             (       command.os):00108                 BEQ     INI8                              ;NO
ECC0 FDDE00           (       command.os):00109                 STD     >2*DIRSEC+WRKSPC                  ;SET IT
ECC3                  (       command.os):00110         INI8
ECC3 CCFFFF           (       command.os):00111                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECC6 ED81             (       command.os):00112                 STD     ,X++                              ;CLOSE OFF LINKS
ECC8 3506             (       command.os):00113                 PULS    A,B                               ;RESTORE SECTOR ID
ECCA                  (       command.os):00114         INI9
ECCA 7ADCD4           (       command.os):00115                 DEC     >TEMP4+1                          ;REDUCE COUNT
ECCD 2B07             (       command.os):00116                 BMI     INI10                             ;EXIT
ECCF C30001           (       command.os):00117                 ADDD    #1                                ;NEXT SECTOR
ECD2 ED81             (       command.os):00118                 STD     ,X++                              ;SET LINK FOR DIRECTORY
ECD4 20F4             (       command.os):00119                 BRA     INI9                              ;DO EM ALL
ECD6                  (       command.os):00120         INI10
ECD6 CCFFFF           (       command.os):00121                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECD9 ED1E             (       command.os):00122                 STD     -2,X                              ;CLOSE OFF DIRECTORY
ECDB 8EDE00           (       command.os):00123                 LDX     #WRKSPC                           ;RESET
ECDE CC0001           (       command.os):00124                 LDD     #LNKSEC                           ;PT TO IT
ECE1 7EEAF8           (       command.os):00125                 JMP     WDISK                             ;WRITE TO DISK
                      (       command.os):00126         ;*
                      (       command.os):00127         ;* READ DISK COMMAND
                      (       command.os):00128         ;*
ECE4                  (       command.os):00129         CREAD
ECE4 BDE3E6           (       command.os):00130                 JSR     GETDRV
ECE7 B7DCEB           (       command.os):00131                 STA     >SDRIVE
ECEA BDE3F8           (       command.os):00132                 JSR     GETNUM                            ;GET SECTOR ID
ECED 3410             (       command.os):00133                 PSHS    X                                 ;SAVE
ECEF BDE403           (       command.os):00134                 JSR     GETHEX                            ;GET MEMORY ADDRESS
ECF2 3410             (       command.os):00135                 PSHS    X                                 ;SAVE
ECF4 8E0001           (       command.os):00136                 LDX     #1                                ;DEFAULT TO ONE
ECF7 BDE4C3           (       command.os):00137                 JSR     SKIP                              ;ADVANCE
ECFA 2703             (       command.os):00138                 BEQ     CRD1                              ;NO MORE
ECFC BDE3F8           (       command.os):00139                 JSR     GETNUM                            ;GET # SECTORS
ECFF                  (       command.os):00140         CRD1
ECFF 1F12             (       command.os):00141                 TFR     X,Y                               ;SET UP COUNTER
ED01 3510             (       command.os):00142                 PULS    X                                 ;RESTORE MEM ADDR
ED03 3506             (       command.os):00143                 PULS    A,B                               ;RESTORE SECTOR ID
ED05                  (       command.os):00144         CRD2
ED05 BDEAC5           (       command.os):00145                 JSR     RDISK                             ;READ IT
ED08 30890200         (       command.os):00146                 LEAX    512,X                             ;NEXT LOCATION
ED0C C30001           (       command.os):00147                 ADDD    #1                                ;NEXT SECTOR
ED0F 313F             (       command.os):00148                 LEAY    -1,Y                              ;REDUCE COUNT
ED11 26F2             (       command.os):00149                 BNE     CRD2
ED13 39               (       command.os):00150                 RTS
                      (       command.os):00151         ;*
                      (       command.os):00152         ;* WRITE DISK COMMAND
                      (       command.os):00153         ;*
ED14                  (       command.os):00154         CWRITE
ED14 BDE3E6           (       command.os):00155                 JSR     GETDRV
ED17 B7DCEB           (       command.os):00156                 STA     >SDRIVE
ED1A BDE3F8           (       command.os):00157                 JSR     GETNUM                            ;GET SECTOR ID
ED1D 3410             (       command.os):00158                 PSHS    X                                 ;SAVE
ED1F BDE403           (       command.os):00159                 JSR     GETHEX                            ;GET MEMORY ADDRESS
ED22 3410             (       command.os):00160                 PSHS    X                                 ;SAVE
ED24 8E0001           (       command.os):00161                 LDX     #1                                ;DEFAULT TO ONE
ED27 BDE4C3           (       command.os):00162                 JSR     SKIP                              ;ADVANCE
ED2A 2703             (       command.os):00163                 BEQ     CWR1                              ;NO MORE
ED2C BDE3F8           (       command.os):00164                 JSR     GETNUM                            ;GET # SECTORS
ED2F                  (       command.os):00165         CWR1
ED2F 1F12             (       command.os):00166                 TFR     X,Y                               ;SET UP COUNTER
ED31 3510             (       command.os):00167                 PULS    X                                 ;RESTORE MEM ADDR
ED33 3506             (       command.os):00168                 PULS    A,B                               ;RESTORE SECTOR ID
ED35                  (       command.os):00169         CWR2
ED35 BDEAF8           (       command.os):00170                 JSR     WDISK                             ;WRITE IT
ED38 30890200         (       command.os):00171                 LEAX    512,X                             ;NEXT LOCATION
ED3C C30001           (       command.os):00172                 ADDD    #1                                ;NEXT SECTOR
ED3F 313F             (       command.os):00173                 LEAY    -1,Y                              ;REDUCE COUNT
ED41 26F2             (       command.os):00174                 BNE     CWR2
ED43 39               (       command.os):00175                 RTS
                      (       command.os):00176         ;*
                      (       command.os):00177         ;* 'FILES' COMMAND, DISPLAY DISK DIRECTORY
                      (       command.os):00178         ;*
ED44                  (       command.os):00179         FILES
ED44 8EDCB8           (       command.os):00180                 LDX     #PREFIX                           ;POINT TO FILENAME
ED47 C613             (       command.os):00181                 LDB     #19                               ;CLEAR 19 CHARS
ED49                  (       command.os):00182         FIL1
ED49 6F80             (       command.os):00183                 CLR     ,X+
ED4B 5A               (       command.os):00184                 DECB
ED4C 26FB             (       command.os):00185                 BNE     FIL1
ED4E 862A             (       command.os):00186                 LDA     #'*'                              ;WILDCARD
ED50 B7DCC0           (       command.os):00187                 STA     >PREFIX+8
ED53 B7DCC8           (       command.os):00188                 STA     >PREFIX+16
ED56 3420             (       command.os):00189                 PSHS    Y                                 ;SAVE CMD PTR
ED58 BDE397           (       command.os):00190                 JSR     GETDIR                            ;GET DIRECTORY NAME
ED5B BDE4D0           (       command.os):00191                 JSR     TSTERM                            ;ANY MORE?
ED5E 3520             (       command.os):00192                 PULS    Y                                 ;RESTORE Y
ED60 2703             (       command.os):00193                 BEQ     FIL2                              ;NO, DISPAY
ED62 BDE35E           (       command.os):00194                 JSR     GETNAM                            ;GET FULL FILE PATTERN
ED65                  (       command.os):00195         FIL2
ED65 7EE69C           (       command.os):00196                 JMP     DISDIR                            ;OUTPUT IT
                      (       command.os):00197         ;*
                      (       command.os):00198         ;* 'CREATE' COMMAND, CREATE A FILE
                      (       command.os):00199         ;*
ED68                  (       command.os):00200         CREFIL
ED68 FCE002           (       command.os):00201                 LDD     >MBASE                            ;DEFAULT LOAD ADDRESS
ED6B FDDCD3           (       command.os):00202                 STD     >TEMP4                            ;SAVE IT
ED6E BDE357           (       command.os):00203                 JSR     GETVAL                            ;GET FILENAME
ED71 BDE4C3           (       command.os):00204                 JSR     SKIP                              ;MORE OPERANDS?
ED74 2706             (       command.os):00205                 BEQ     CREF1                             ;NO, SKIP IT
ED76 BDE403           (       command.os):00206                 JSR     GETHEX                            ;GET VALUE
ED79 BFDCD3           (       command.os):00207                 STX     >TEMP4                            ;SAVE IT
ED7C                  (       command.os):00208         CREF1
ED7C 7EE70A           (       command.os):00209                 JMP     CREATE                            ;MAKE THE FILE
                      (       command.os):00210         ;*
                      (       command.os):00211         ;* 'DELETE' COMMAND
                      (       command.os):00212         ;*
ED7F                  (       command.os):00213         DELFIL
ED7F BDE35E           (       command.os):00214                 JSR     GETNAM                            ;GET FILENAME
ED82                  (       command.os):00215         DELETE
ED82 BDE640           (       command.os):00216                 JSR     LOCERR                            ;LOOK IT UP
ED85 BDE343           (       command.os):00217                 JSR     VALID                             ;VALID AS A SINGLE?
ED88 262C             (       command.os):00218                 BNE     MULDEL                            ;NO.
ED8A A68817           (       command.os):00219                 LDA     DATTR,X                           ;GET ATTRIBUTES
ED8D 8510             (       command.os):00220                 BITA    #DPERM                            ;CAN WE DELETE
ED8F 1027FB00         (       command.os):00221                 LBEQ    PROERR                            ;NO, REPORT ERROR
ED93 6F84             (       command.os):00222                 CLR     ,X                                ;INDICATE THIS ENTRY FREE
ED95 BDE787           (       command.os):00223                 JSR     CHGWRK                            ;MARK IT AS CHANGED
ED98 EC8813           (       command.os):00224                 LDD     DDADR,X                           ;GET DISK ADDRESS
                      (       command.os):00225         ;* RELEASE ALL CAHINED SECTORS
ED9B                  (       command.os):00226         UNCHAIN
ED9B BDE5C6           (       command.os):00227                 JSR     FNDLNK                            ;LOCATE ITS LINK
ED9E 270F             (       command.os):00228                 BEQ     UNC1                              ;LAST ONE
EDA0 10830000         (       command.os):00229                 CMPD    #0                                ;DID WE GET LOOSE SOMEHOW
EDA4 2709             (       command.os):00230                 BEQ     UNC1                              ;STOP
EDA6 6F84             (       command.os):00231                 CLR     ,X                                ;ZERO THE ENTRY...
EDA8 6F01             (       command.os):00232                 CLR     1,X                               ;MAKEING IT FREE
EDAA BDE787           (       command.os):00233                 JSR     CHGWRK                            ;INDICATE WE CHANGED
EDAD 20EC             (       command.os):00234                 BRA     UNCHAIN                           ;CONTINUE
EDAF                  (       command.os):00235         UNC1
EDAF 6F84             (       command.os):00236                 CLR     ,X
EDB1 6F01             (       command.os):00237                 CLR     1,X
EDB3 7EE787           (       command.os):00238                 JMP     CHGWRK                            ;END OF DELETE
                      (       command.os):00239         ;* FILENAME CONTAINED WILDCARDS, PROMPT FOR EACH FILE
EDB6                  (       command.os):00240         MULDEL
EDB6 CC0000           (       command.os):00241                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
EDB9                  (       command.os):00242         MULD1
EDB9 BDE5E3           (       command.os):00243                 JSR     RDWRK                             ;READ WORK SECTOR
EDBC                  (       command.os):00244         MULD2
EDBC BDE30A           (       command.os):00245                 JSR     COMNAM                            ;IS THIS ONE?
EDBF 2652             (       command.os):00246                 BNE     MULD3                             ;NO
EDC1 BDE6D0           (       command.os):00247                 JSR     SHONAM                            ;DISPLAY
EDC4 A68817           (       command.os):00248                 LDA     DATTR,X                           ;GET ATTRIBUTES
EDC7 8510             (       command.os):00249                 BITA    #DPERM                            ;CAN WE DELETE
EDC9 260F             (       command.os):00250                 BNE     MULD5                             ;YES WE CAN
EDCB BDE565           (       command.os):00251                 JSR     WRMSG                             ;OUTPUT MESSAGE
EDCE 2050726F74656374 (       command.os):00252                 FCC     ' Protected'
     6564
EDD8 2039             (       command.os):00253                 BRA     MULD3
EDDA                  (       command.os):00254         MULD5
EDDA BDE535           (       command.os):00255                 JSR     WRLIN                             ;OUTPUT MESSAGE
EDDD 2028592F4E2F5129 (       command.os):00256                 FCC     ' (Y/N/Q)?'
     3F
EDE6 BDE5C1           (       command.os):00257                 JSR     GETCHR                            ;GET CHAR
EDE9 BDE581           (       command.os):00258                 JSR     PUTCHR                            ;ECHO
EDEC BDE56F           (       command.os):00259                 JSR     LFCR                              ;NEW LINE
EDEF 84DF             (       command.os):00260                 ANDA    #$DF                              ;CONVERT TO UPPER
EDF1 8151             (       command.os):00261                 CMPA    #'Q'                              ;QUIT?
EDF3 272E             (       command.os):00262                 BEQ     MULD4
EDF5 8159             (       command.os):00263                 CMPA    #'Y'                              ;DO WE KILL?
EDF7 261A             (       command.os):00264                 BNE     MULD3                             ;NO
EDF9 6F84             (       command.os):00265                 CLR     ,X                                ;ZAP IT
EDFB BDE787           (       command.os):00266                 JSR     CHGWRK                            ;INDICATE CHANGED
EDFE 3414             (       command.os):00267                 PSHS    B,X                               ;SAVE REGS
EE00 FCDCDF           (       command.os):00268                 LDD     >WRKSEC                           ;GET WORK SECTOR
EE03 FDDCCD           (       command.os):00269                 STD     >TEMP1                            ;SAVE
EE06 EC8813           (       command.os):00270                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE09 8D90             (       command.os):00271                 BSR     UNCHAIN                           ;RELEASE
EE0B FCDCCD           (       command.os):00272                 LDD     >TEMP1                            ;GET SECTOR BACK
EE0E BDE5E3           (       command.os):00273                 JSR     RDWRK                             ;RE-READ
EE11 3514             (       command.os):00274                 PULS    B,X
EE13                  (       command.os):00275         MULD3
EE13 308820           (       command.os):00276                 LEAX    32,X                              ;ADVANCE TO NEXT
EE16 8CE000           (       command.os):00277                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
EE19 25A1             (       command.os):00278                 BLO     MULD2                             ;NO
EE1B FCDCDF           (       command.os):00279                 LDD     >WRKSEC                           ;GET SECTOR ID
EE1E BDE5C6           (       command.os):00280                 JSR     FNDLNK                            ;LOOK FOR LINK
EE21 2696             (       command.os):00281                 BNE     MULD1
EE23                  (       command.os):00282         MULD4
EE23 39               (       command.os):00283                 RTS
                      (       command.os):00284         ;*
                      (       command.os):00285         ;* BINARY LOAD A FILE AT MEMORY(X)
                      (       command.os):00286         ;*
EE24                  (       command.os):00287         BLOAD
EE24 3410             (       command.os):00288                 PSHS    X                                 ;SAVE ADDRESS
EE26 BDE889           (       command.os):00289                 JSR     LOCRED                            ;LOOKUP FILE
EE29 EC8813           (       command.os):00290                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE2C 3510             (       command.os):00291                 PULS    X                                 ;RESTORE MEMORY ADDRESS
EE2E 2018             (       command.os):00292                 BRA     LCHAIN                            ;LOAD IN THE CHAIN
                      (       command.os):00293         ;*
                      (       command.os):00294         ;* 'LOAD' COMMAND, LOADS A FILE INTO MEMORY
                      (       command.os):00295         ;*
EE30                  (       command.os):00296         LODFIL
EE30 BDE357           (       command.os):00297                 JSR     GETVAL                            ;GET FILENAME
EE33 BDE889           (       command.os):00298                 JSR     LOCRED                            ;INSURE IT EXISTS
EE36 EC8813           (       command.os):00299                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE39 3406             (       command.os):00300                 PSHS    A,B                               ;SAVE
EE3B AE8815           (       command.os):00301                 LDX     DRADR,X                           ;GET RUN ADDRESS
EE3E BDE4C3           (       command.os):00302                 JSR     SKIP                              ;ANY MORE OPERANDS
EE41 2703             (       command.os):00303                 BEQ     LODF1                             ;NO, CONTINUE
EE43 BDE403           (       command.os):00304                 JSR     GETHEX                            ;GET ADDRESS
EE46                  (       command.os):00305         LODF1
EE46 3506             (       command.os):00306                 PULS    A,B                               ;RESTORE DISK ADDR
                      (       command.os):00307         ;* LOAD A CHAIN OF SECTORS
EE48                  (       command.os):00308         LCHAIN
EE48 BDEAC5           (       command.os):00309                 JSR     RDISK                             ;READ DISK
EE4B 30890200         (       command.os):00310                 LEAX    512,X                             ;MOVE TO NEXT ADDRESS
EE4F 3410             (       command.os):00311                 PSHS    X                                 ;SAVE PTR
EE51 BDE5C6           (       command.os):00312                 JSR     FNDLNK                            ;LOOKUP LINK
EE54 3510             (       command.os):00313                 PULS    X                                 ;RESTORE
EE56 26F0             (       command.os):00314                 BNE     LCHAIN                            ;KEEP GOING
EE58                  (       command.os):00315         OKRET
EE58 39               (       command.os):00316                 RTS
                      (       command.os):00317         ;*
                      (       command.os):00318         ;* BINARY SAVE OF A FILE FROM MEMORY(X) FOR # SECTORS(D)
                      (       command.os):00319         ;*
EE59                  (       command.os):00320         BSAVE
EE59 BFDCD3           (       command.os):00321                 STX     >TEMP4                            ;SET LOAD ADDRESS
EE5C FDDCD1           (       command.os):00322                 STD     >TEMP3                            ;SAVE # SECTORS
EE5F 200F             (       command.os):00323                 BRA     SAVF1                             ;PERFORM SAVE
                      (       command.os):00324         ;*
                      (       command.os):00325         ;* 'SAVE' COMMAND, SAVES A FILE AS A BLOCK
                      (       command.os):00326         ;*
EE61                  (       command.os):00327         SAVFIL
EE61 BDE357           (       command.os):00328                 JSR     GETVAL                            ;GET FILENAME
EE64 BDE403           (       command.os):00329                 JSR     GETHEX                            ;GET START ADDRESS
EE67 BFDCD3           (       command.os):00330                 STX     >TEMP4                            ;SET UP DEFAULT LOAD-ADR
EE6A BDE3F8           (       command.os):00331                 JSR     GETNUM                            ;GET # SECTORS
EE6D BFDCD1           (       command.os):00332                 STX     >TEMP3                            ;SAVE LENGTH
EE70                  (       command.os):00333         SAVF1
EE70 7DDCD2           (       command.os):00334                 TST     >TEMP3+1                          ;TEST FOR INVALID LENMGTH
EE73 1027F428         (       command.os):00335                 LBEQ    BADOPR                            ;INVALID
EE77 BDE8B7           (       command.os):00336                 JSR     LOCWRI                            ;OPEN FILE, WE WILL WRITE IT
EE7A EC8813           (       command.os):00337                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE7D                  (       command.os):00338         SAVF2
EE7D FDDCCF           (       command.os):00339                 STD     >TEMP2                            ;SAVE SECTOR ID
EE80 BEDCD3           (       command.os):00340                 LDX     >TEMP4                            ;GET LOAD ADDRESS
EE83 BDEAF8           (       command.os):00341                 JSR     WDISK                             ;WRITE THE SECTOR
EE86 30890200         (       command.os):00342                 LEAX    512,X                             ;ADVANCE 1 BLOCK
EE8A BFDCD3           (       command.os):00343                 STX     >TEMP4                            ;NEW LOAD ADDRESS
EE8D FCDCCF           (       command.os):00344                 LDD     >TEMP2                            ;GET OPEN SECTOR
EE90 7ADCD2           (       command.os):00345                 DEC     >TEMP3+1                          ;REDUCE NUMBER
EE93 2719             (       command.os):00346                 BEQ     SAVF3                             ;QUIT IF DONE
EE95 BDE5C6           (       command.os):00347                 JSR     FNDLNK                            ;LOOK UP ITS LINK
EE98 26E3             (       command.os):00348                 BNE     SAVF2                             ;THERE IS SPACE, ITS OK
EE9A BDE790           (       command.os):00349                 JSR     FRESEC                            ;GET A FREE SECTOR
EE9D 3406             (       command.os):00350                 PSHS    A,B                               ;SAVE ID
EE9F FCDCCF           (       command.os):00351                 LDD     >TEMP2                            ;GET OPEN SECTOR
EEA2 BDE5C6           (       command.os):00352                 JSR     FNDLNK                            ;GET LINK BACK
EEA5 3506             (       command.os):00353                 PULS    A,B                               ;GET NEW SECT BACK
EEA7 ED84             (       command.os):00354                 STD     ,X                                ;SET LINK CHAIN
EEA9 BDE787           (       command.os):00355                 JSR     CHGWRK                            ;INDICATE CHANGED
EEAC 20CF             (       command.os):00356                 BRA     SAVF2                             ;WRITE NEXT SECTOR
EEAE                  (       command.os):00357         SAVF3
EEAE BDE5C6           (       command.os):00358                 JSR     FNDLNK                            ;LOK UP LINK
EEB1 27A5             (       command.os):00359                 BEQ     OKRET                             ;NO FURTHER LINKS
EEB3 3406             (       command.os):00360                 PSHS    A,B                               ;SAVE REGS
EEB5 CCFFFF           (       command.os):00361                 LDD     #$FFFF                            ;GET END OF FILE MARKER
EEB8 ED84             (       command.os):00362                 STD     ,X                                ;MARK SECTOR
EEBA B7DCDD           (       command.os):00363                 STA     >WRKCHG                           ;INDICATE CHANGED
EEBD 3506             (       command.os):00364                 PULS    A,B                               ;GET CHAINED SECTOR BACK
EEBF 7EED9B           (       command.os):00365                 JMP     UNCHAIN                           ;SET IT FREE
                      (       command.os):00366         ;*
                      (       command.os):00367         ;* 'RETURN' COMMAND
                      (       command.os):00368         ;*
EEC2                  (       command.os):00369         RETURN
EEC2 FCDCE9           (       command.os):00370                 LDD     >OLDSTK                           ;GET OLD STACK
EEC5 2704             (       command.os):00371                 BEQ     NOSUSP                            ;NONE, SKIP IT
EEC7 1F04             (       command.os):00372                 TFR     D,S                               ;SET UP STACK
EEC9 4F               (       command.os):00373                 CLRA                                      ;ZERO IT
EECA 39               (       command.os):00374                 RTS
EECB                  (       command.os):00375         NOSUSP
EECB BDE565           (       command.os):00376                 JSR     WRMSG                             ;OUTPUT MESSAGE
EECE 4E6F207375737065 (       command.os):00377                 FCC     'No suspended program'
     6E6465642070726F
     6772616D
EEE2 10FEDCDB         (       command.os):00378                 LDS     >SAVSTK                           ;RESTORE STACK
EEE6                  (       command.os):00379         DNLRTS
EEE6 4F               (       command.os):00380                 CLRA                                      ;ZERO RC
EEE7 39               (       command.os):00381                 RTS
                      (       command.os):00382         ;*
                      (       command.os):00383         ;* 'DOWNLOAD' COMMAND
                      (       command.os):00384         ;*
EEE8                  (       command.os):00385         DNLD
EEE8 BDF0D6           (       command.os):00386                 JSR     GETDEV                            ;GET DEVICE ID
EEEB F7DCCF           (       command.os):00387                 STB     >TEMP2                            ;SAVE IT
EEEE 7FDCD2           (       command.os):00388                 CLR     >TEMP3+1                          ;ZERO COUNT
EEF1 CCFFFF           (       command.os):00389                 LDD     #$FFFF                            ;INIT LOW ADDR
EEF4 FDDCD3           (       command.os):00390                 STD     >TEMP4                            ;SAVE LOW ADDRESS
EEF7 4F               (       command.os):00391                 CLRA
EEF8 5F               (       command.os):00392                 CLRB
EEF9 3406             (       command.os):00393                 PSHS    A,B                               ;SAVE HIGH ADDR
EEFB                  (       command.os):00394         DNL0
EEFB 860D             (       command.os):00395                 LDA     #$0D
EEFD BDE581           (       command.os):00396                 JSR     PUTCHR                            ;OUTPUT
EF00 B6DCD2           (       command.os):00397                 LDA     >TEMP3+1
EF03 BDE541           (       command.os):00398                 JSR     WRHEX                             ;OUTPUT IN HEX
EF06 7CDCD2           (       command.os):00399                 INC     >TEMP3+1
EF09 8D28             (       command.os):00400                 BSR     DNL1                              ;DOWNLOAD RECORD
EF0B 2608             (       command.os):00401                 BNE     DNLEND                            ;END, QUIT
EF0D ACE4             (       command.os):00402                 CMPX    ,S                                ;HIGEST YET?
EF0F 23EA             (       command.os):00403                 BLS     DNL0                              ;NO, SKIP
EF11 AFE4             (       command.os):00404                 STX     ,S                                ;SAVE HIGH
EF13 20E6             (       command.os):00405                 BRA     DNL0                              ;OK, KEEP GOING
EF15                  (       command.os):00406         DNLEND
EF15 BDE56F           (       command.os):00407                 JSR     LFCR                              ;NEW LINE
EF18 3506             (       command.os):00408                 PULS    A,B                               ;GET HIGEST
EF1A B3DCD3           (       command.os):00409                 SUBD    >TEMP4                            ;CALCULATE SIZE
EF1D 830001           (       command.os):00410                 SUBD    #1                                ;CONVERT
EF20 44               (       command.os):00411                 LSRA                                      ;/512, CONVERT TO # SECTORS
EF21 4C               (       command.os):00412                 INCA    CONVERT
EF22 B7DCD2           (       command.os):00413                 STA     >TEMP3+1                          ;SAVE LENGTH
EF25 BDE4C3           (       command.os):00414                 JSR     SKIP                              ;OPERAND?
EF28 27BC             (       command.os):00415                 BEQ     DNLRTS                            ;NO FILE TO SAVE INTO
EF2A BDE357           (       command.os):00416                 JSR     GETVAL                            ;GET FILENAME
EF2D 7EEE70           (       command.os):00417                 JMP     SAVF1                             ;PERFORM SAVE
                      (       command.os):00418         ;* DOWNLOAD A RECORD FROM A DEVICE
EF30                  (       command.os):00419         DNLDEV
EF30 B7DCCF           (       command.os):00420                 STA     >TEMP2                            ;SAVE DEVICE ID
EF33                  (       command.os):00421         DNL1
EF33 8D5B             (       command.os):00422                 BSR     RDDLC                             ;GET CHAR
EF35 8153             (       command.os):00423                 CMPA    #'S'                              ;START OF RECORD?
EF37 26FA             (       command.os):00424                 BNE     DNL1                              ;NO
EF39 8D55             (       command.os):00425                 BSR     RDDLC                             ;GET NEXT CHAR
EF3B 8130             (       command.os):00426                 CMPA    #'0'                              ;HEADER?
EF3D 27F4             (       command.os):00427                 BEQ     DNL1                              ;IGNORE
EF3F 8139             (       command.os):00428                 CMPA    #'9'                              ;END OF FILE
EF41 2603             (       command.os):00429                 BNE     DNL2                              ;YES, END OF FILE
EF43 8606             (       command.os):00430                 LDA     #RCEOF
EF45 39               (       command.os):00431                 RTS
EF46                  (       command.os):00432         DNL2
EF46 8131             (       command.os):00433                 CMPA    #'1'                              ;DATA RECORD
EF48 263E             (       command.os):00434                 BNE     LODERR                            ;INVALID
EF4A 8D4A             (       command.os):00435                 BSR     GETBYT                            ;GET LENGTH
EF4C B7DCD0           (       command.os):00436                 STA     >TEMP2+1                          ;START CKSUM
EF4F 8003             (       command.os):00437                 SUBA    #3                                ;CONVERT
EF51 B7DCD1           (       command.os):00438                 STA     >TEMP3                            ;SAVE LENGTH
EF54 8D40             (       command.os):00439                 BSR     GETBYT                            ;GET HIGH ADDR
EF56 3402             (       command.os):00440                 PSHS    A                                 ;SAVE
EF58 8D3C             (       command.os):00441                 BSR     GETBYT                            ;GET LOW ADDR
EF5A 1F89             (       command.os):00442                 TFR     A,B                               ;SAVE
EF5C ABE4             (       command.os):00443                 ADDA    ,S                                ;ADD HIGH
EF5E BBDCD0           (       command.os):00444                 ADDA    >TEMP2+1                          ;& CKSUM
EF61 B7DCD0           (       command.os):00445                 STA     >TEMP2+1                          ;RESAVE
EF64 3502             (       command.os):00446                 PULS    A                                 ;RESTORE
EF66 1F01             (       command.os):00447                 TFR     D,X                               ;SET UP PTR
EF68 10B3DCD3         (       command.os):00448                 CMPD    >TEMP4                            ;HIGHER?
EF6C 2403             (       command.os):00449                 BHS     DNL3                              ;YES
EF6E FDDCD3           (       command.os):00450                 STD     >TEMP4                            ;NEW VALUE
EF71                  (       command.os):00451         DNL3
EF71 8D23             (       command.os):00452                 BSR     GETBYT                            ;GET BYTE
EF73 A780             (       command.os):00453                 STA     ,X+                               ;SAVE IT
EF75 BBDCD0           (       command.os):00454                 ADDA    >TEMP2+1                          ;INCL CKSUM
EF78 B7DCD0           (       command.os):00455                 STA     >TEMP2+1                          ;RESAVE CKSUM
EF7B 7ADCD1           (       command.os):00456                 DEC     >TEMP3                            ;REDUCE LENGTH
EF7E 26F1             (       command.os):00457                 BNE     DNL3                              ;GET FULL REC.
EF80 8D14             (       command.os):00458                 BSR     GETBYT                            ;GET CKSUM
EF82 BBDCD0           (       command.os):00459                 ADDA    >TEMP2+1                          ;+ CALC CKSUM
EF85 4C               (       command.os):00460                 INCA    TEST FOR OK
EF86 271A             (       command.os):00461                 BEQ     DNL4                              ;YES, GET NEXT REC
EF88                  (       command.os):00462         LODERR
EF88 8EF7AA           (       command.os):00463                 LDX     #DNLMSG                           ;PT TO ERROR MESSAGE
EF8B 860B             (       command.os):00464                 LDA     #RCDNL                            ;RETURN CODE
EF8D 7EE2A4           (       command.os):00465                 JMP     ERRMRC                            ;RETURN
EF90                  (       command.os):00466         RDDLC
EF90 F6DCCF           (       command.os):00467                 LDB     >TEMP2                            ;GET DEV
EF93 7EE5A3           (       command.os):00468                 JMP     RDDEV                             ;GET CHAR
EF96                  (       command.os):00469         GETBYT
EF96 8D0B             (       command.os):00470                 BSR     GETNIB                            ;GET IT
EF98 48               (       command.os):00471                 LSLA
EF99 48               (       command.os):00472                 LSLA
EF9A 48               (       command.os):00473                 LSLA
EF9B 48               (       command.os):00474                 LSLA
EF9C 3402             (       command.os):00475                 PSHS    A
EF9E 8D03             (       command.os):00476                 BSR     GETNIB
EFA0 AAE0             (       command.os):00477                 ORA     ,S+
EFA2                  (       command.os):00478         DNL4
EFA2 39               (       command.os):00479                 RTS
EFA3                  (       command.os):00480         GETNIB
EFA3 8DEB             (       command.os):00481                 BSR     RDDLC                             ;GET CHAR
EFA5 8030             (       command.os):00482                 SUBA    #'0'                              ;CONVERT
EFA7 8109             (       command.os):00483                 CMPA    #9                                ;OK?
EFA9 230A             (       command.os):00484                 BLS     GETN1                             ;YES
EFAB 8111             (       command.os):00485                 CMPA    #$11                              ;<A
EFAD 25D9             (       command.os):00486                 BLO     LODERR                            ;INVALID
EFAF 8007             (       command.os):00487                 SUBA    #7                                ;CONVERT
EFB1 8110             (       command.os):00488                 CMPA    #$10                              ;IN RANGE
EFB3 24D3             (       command.os):00489                 BHS     LODERR                            ;INVALID
EFB5                  (       command.os):00490         GETN1
EFB5 39               (       command.os):00491                 RTS
                      (       command.os):00492         ;*
                      (       command.os):00493         ;* 'CONNECT' COMMAND
                      (       command.os):00494         ;*
EFB6                  (       command.os):00495         CNCT
EFB6 BDF0D6           (       command.os):00496                 JSR     GETDEV                            ;GET DEVICE
EFB9 F7DCCF           (       command.os):00497                 STB     >TEMP2                            ;SAVE
EFBC                  (       command.os):00498         CNC1
EFBC BDE5BA           (       command.os):00499                 JSR     TSTCHR                            ;TEST FOR CHAR FROM CONSOLE
EFBF 260C             (       command.os):00500                 BNE     CNC2                              ;NO, NONE
EFC1 811B             (       command.os):00501                 CMPA    #$1B                              ;ESCAPE?
EFC3 1027F5A8         (       command.os):00502                 LBEQ    LFCR                              ;IF SO, EXIT
EFC7 F6DCCF           (       command.os):00503                 LDB     >TEMP2                            ;GET DEVICE BACK
EFCA BDE588           (       command.os):00504                 JSR     WRDEV                             ;OUTPUT TO DEVICE
EFCD                  (       command.os):00505         CNC2
EFCD F6DCCF           (       command.os):00506                 LDB     >TEMP2                            ;GET DEVICE ID
EFD0 BDE5A8           (       command.os):00507                 JSR     TSTDEV                            ;TEST FOR CHARACTER
EFD3 26E7             (       command.os):00508                 BNE     CNC1                              ;NO CHAR RECEIVED
EFD5 BDE581           (       command.os):00509                 JSR     PUTCHR                            ;WRITE TO CONSOLE
EFD8 20E2             (       command.os):00510                 BRA     CNC1                              ;CONTINUE
                      (       command.os):00511         ;*
                      (       command.os):00512         ;* 'SET' COMMAND
                      (       command.os):00513         ;*
EFDA                  (       command.os):00514         SET
EFDA 8EF35F           (       command.os):00515                 LDX     #SETTAB                           ;POINT TO TABLE
EFDD BDE4EC           (       command.os):00516                 JSR     TLOOK                             ;LOOK IT UP
EFE0 BDE4C3           (       command.os):00517                 JSR     SKIP                              ;ADVANCE
EFE3 2777             (       command.os):00518                 BEQ     BADOP3                            ;INVALID
EFE5 8EF3A2           (       command.os):00519                 LDX     #SETADR
EFE8 58               (       command.os):00520                 ASLB
EFE9 6E95             (       command.os):00521                 JMP     [B,X]
                      (       command.os):00522         ;* SET DEFAULT
EFEB                  (       command.os):00523         SET0
EFEB BDE397           (       command.os):00524                 JSR     GETDIR                            ;GET DEFAULT DIR
EFEE BDE4C3           (       command.os):00525                 JSR     SKIP                              ;ANY MORE INFO
EFF1 2669             (       command.os):00526                 BNE     BADOP3
EFF3                  (       command.os):00527         SETDEF
EFF3 3436             (       command.os):00528                 PSHS    A,B,X,Y                           ;SAVE REGS
EFF5 8EDCA5           (       command.os):00529                 LDX     #DEFDRV                           ;POINT TO DEFAULT
EFF8 2010             (       command.os):00530                 BRA     MOVDIR                            ;MOVE IT
                      (       command.os):00531         ;* SET COMMAND
EFFA                  (       command.os):00532         SET1
EFFA 8EDCAE           (       command.os):00533                 LDX     #SYSDRV                           ;DEFAULT FROM SYSTEM
EFFD BDE39A           (       command.os):00534                 JSR     GETDIR1                           ;GET DIR
F000 BDE4C3           (       command.os):00535                 JSR     SKIP
F003 2657             (       command.os):00536                 BNE     BADOP3
F005                  (       command.os):00537         SETCMD
F005 3436             (       command.os):00538                 PSHS    A,B,X,Y                           ;SAVE REGS
F007 8EDCAE           (       command.os):00539                 LDX     #SYSDRV                           ;POINT TO IT
F00A                  (       command.os):00540         MOVDIR
F00A 108EDCB7         (       command.os):00541                 LDY     #FDRIVE                           ;POINT TO FILENAME
F00E C609             (       command.os):00542                 LDB     #9                                ;MOVE 9 CHARS
F010                  (       command.os):00543         MOVD1
F010 A6A0             (       command.os):00544                 LDA     ,Y+                               ;GET 1
F012 A780             (       command.os):00545                 STA     ,X+                               ;SAVE IT
F014 5A               (       command.os):00546                 DECB
F015 26F9             (       command.os):00547                 BNE     MOVD1                             ;CONTINUE
F017 35B6             (       command.os):00548                 PULS    A,B,X,Y,PC
                      (       command.os):00549         ;* SET FILE
F019                  (       command.os):00550         SET2
F019 BDE357           (       command.os):00551                 JSR     GETVAL                            ;GET NAME
F01C BDE640           (       command.os):00552                 JSR     LOCERR                            ;LOOK IT UP
F01F                  (       command.os):00553         SETF0
F01F 3410             (       command.os):00554                 PSHS    X                                 ;SAVE PTR
F021 8EF3CE           (       command.os):00555                 LDX     #SFTAB                            ;PT TO TABLE
F024 BDF09D           (       command.os):00556                 JSR     TLOOKE                            ;LOOK IT UP
F027 5D               (       command.os):00557                 TSTB                                      ;IS IT SET LOADADDRESS
F028 260C             (       command.os):00558                 BNE     SETF1                             ;NO, TRY SOMETHING ELSE
F02A BDE403           (       command.os):00559                 JSR     GETHEX                            ;GET ADDRESS
F02D 1F10             (       command.os):00560                 TFR     X,D                               ;COPY
F02F 3510             (       command.os):00561                 PULS    X                                 ;RESTORE
F031 ED8815           (       command.os):00562                 STD     DRADR,X                           ;SAVE
F034 200A             (       command.os):00563                 BRA     SETF2                             ;TEST FOR END
F036                  (       command.os):00564         SETF1
F036 5A               (       command.os):00565                 DECB
F037 2623             (       command.os):00566                 BNE     BADOP3
F039 8D0D             (       command.os):00567                 BSR     GETATR                            ;GET ATTRIBUTES
F03B 3510             (       command.os):00568                 PULS    X                                 ;RESTORE
F03D A78817           (       command.os):00569                 STA     DATTR,X                           ;SAVE
F040                  (       command.os):00570         SETF2
F040 BDE4C3           (       command.os):00571                 JSR     SKIP                              ;ADVANCE
F043 26DA             (       command.os):00572                 BNE     SETF0
F045 7EE787           (       command.os):00573                 JMP     CHGWRK                            ;INDICATE WE CHANGED
                      (       command.os):00574         ;* GET FILE ATTRIBUTES FROM COMMAND LINE
F048                  (       command.os):00575         GETATR
F048 4F               (       command.os):00576                 CLRA    CLEAR IT
F049 3416             (       command.os):00577                 PSHS    A,B,X                             ;SAVE ON STACK
F04B                  (       command.os):00578         GETA1
F04B 8EF067           (       command.os):00579                 LDX     #ATRTAB                           ;POINT TO TABLE
F04E BDE4D0           (       command.os):00580                 JSR     TSTERM                            ;GET CHARACTER
F051 2712             (       command.os):00581                 BEQ     GETA4                             ;END
F053 C680             (       command.os):00582                 LDB     #%10000000                        ;START WITH FIRST ATTR
F055                  (       command.os):00583         GETA2
F055 A180             (       command.os):00584                 CMPA    ,X+                               ;IS THIS IT?
F057 2706             (       command.os):00585                 BEQ     GETA3                             ;YES
F059 54               (       command.os):00586                 LSRB                                      ;SHIFT IT
F05A 26F9             (       command.os):00587                 BNE     GETA2                             ;MORE
F05C                  (       command.os):00588         BADOP3
F05C 7EE29F           (       command.os):00589                 JMP     BADOPR                            ;REPORT ERROR
F05F                  (       command.os):00590         GETA3
F05F EAE4             (       command.os):00591                 ORB     ,S                                ;INCLUDE IN ATTRIBUTES
F061 E7E4             (       command.os):00592                 STB     ,S                                ;RESAVE
F063 20E6             (       command.os):00593                 BRA     GETA1                             ;AND CONTINUE
F065                  (       command.os):00594         GETA4
F065 3596             (       command.os):00595                 PULS    A,B,X,PC                          ;RESTORE REGS
F067                  (       command.os):00596         ATRTAB
F067 525745443F3F3F3F (       command.os):00597                 FCC     'RWED????'                        ;AVAILABLE ATTRIBUTE BITS
                      (       command.os):00598         ;*
                      (       command.os):00599         ;* SET DRIVE COMMAND
                      (       command.os):00600         ;*
F06F                  (       command.os):00601         SET3
F06F BDE60A           (       command.os):00602                 JSR     PURGE                             ;INSURE ALL WRITTEN
F072 BDE3E6           (       command.os):00603                 JSR     GETDRV                            ;GET DRIVE ID
F075 B7DCEB           (       command.os):00604                 STA     >SDRIVE                           ;SELECT IT
F078 BDEAEC           (       command.os):00605                 JSR     GETCTL                            ;GET CTRL BLOCK
F07B 3420             (       command.os):00606                 PSHS    Y                                 ;SAVE CMD POINTER
F07D BDF6BE           (       command.os):00607                 JSR     HOME                              ;HOME HEAD
F080 3520             (       command.os):00608                 PULS    Y                                 ;RESTORE CMD POINTER
F082                  (       command.os):00609         CHGDRV
F082 8EF406           (       command.os):00610                 LDX     #SDTAB                            ;POINT TO TABLE
F085 BDF09D           (       command.os):00611                 JSR     TLOOKE                            ;LOOK FOR IT
F088 3404             (       command.os):00612                 PSHS    B                                 ;SAVE
F08A BDE3F8           (       command.os):00613                 JSR     GETNUM                            ;GET IT
F08D 1F10             (       command.os):00614                 TFR     X,D                               ;GET NUMBER
F08F 3502             (       command.os):00615                 PULS    A                                 ;RESTORE
F091 8103             (       command.os):00616                 CMPA    #3                                ;VALID?
F093 22C7             (       command.os):00617                 BHI     BADOP3                            ;ERROR
F095 E7C6             (       command.os):00618                 STB     A,U                               ;SET IT
F097 BDE4C3           (       command.os):00619                 JSR     SKIP                              ;AT END?
F09A 26E6             (       command.os):00620                 BNE     CHGDRV                            ;NO
F09C 39               (       command.os):00621                 RTS
                      (       command.os):00622         ;*
                      (       command.os):00623         ;* LOOKUP TABLE ENTRY & INSURE IT ENDS WITH '='
                      (       command.os):00624         ;*
F09D                  (       command.os):00625         TLOOKE
F09D BDE4EC           (       command.os):00626                 JSR     TLOOK                             ;LOOKUP ENTRY
F0A0 A6A0             (       command.os):00627                 LDA     ,Y+                               ;GET NEXT CHAR
F0A2 813D             (       command.os):00628                 CMPA    #'='                              ;IS IT EQUALS?
F0A4 26B6             (       command.os):00629                 BNE     BADOP3                            ;REPORT ERROR
F0A6 39               (       command.os):00630                 RTS
                      (       command.os):00631         ;*
                      (       command.os):00632         ;* SET MEMORY
                      (       command.os):00633         ;*
F0A7                  (       command.os):00634         SET4
F0A7 BDE403           (       command.os):00635                 JSR     GETHEX                            ;GET ADDRESS
F0AA                  (       command.os):00636         ST1
F0AA 3410             (       command.os):00637                 PSHS    X                                 ;SAVE ADDR
F0AC BDE403           (       command.os):00638                 JSR     GETHEX                            ;GET DATA
F0AF 1F10             (       command.os):00639                 TFR     X,D                               ;SAVE IT
F0B1 3510             (       command.os):00640                 PULS    X                                 ;RECOVER
F0B3 E780             (       command.os):00641                 STB     ,X+                               ;SAVE IT
F0B5 BDE4C3           (       command.os):00642                 JSR     SKIP                              ;END OF LINE?
F0B8 26F0             (       command.os):00643                 BNE     ST1                               ;CONTINUE
F0BA 39               (       command.os):00644                 RTS
                      (       command.os):00645         ;* SET CONSOLE
F0BB                  (       command.os):00646         SET5
F0BB 8EF435           (       command.os):00647                 LDX     #IOTAB                            ;POINT TO TABLE
F0BE BDF09D           (       command.os):00648                 JSR     TLOOKE                            ;LOOK IT UP
F0C1 C102             (       command.os):00649                 CMPB    #2                                ;OVER?
F0C3 2497             (       command.os):00650                 BHS     BADOP3                            ;INVALID
F0C5 3404             (       command.os):00651                 PSHS    B                                 ;SAVE ID
F0C7 8D0D             (       command.os):00652                 BSR     GETDEV                            ;GET DEVICE NUMBER
F0C9 3502             (       command.os):00653                 PULS    A                                 ;GET ID BACK
F0CB 8EDC6C           (       command.os):00654                 LDX     #CONIN
F0CE E786             (       command.os):00655                 STB     A,X                               ;SET IT
F0D0 BDE4C3           (       command.os):00656                 JSR     SKIP
F0D3 26E6             (       command.os):00657                 BNE     SET5
F0D5 39               (       command.os):00658                 RTS
                      (       command.os):00659         ;* GET A DEVICE ID FROM THE CONSOLE
F0D6                  (       command.os):00660         GETDEV
F0D6 BDE3F8           (       command.os):00661                 JSR     GETNUM                            ;GET DECIMAL NUMBER
F0D9 8C0008           (       command.os):00662                 CMPX    #NDEV                             ;IS IT OVER THE LIMIT
F0DC 1024F4BB         (       command.os):00663                 LBHS    BADDEV                            ;YES, REPORT ERROR
F0E0 1F10             (       command.os):00664                 TFR     X,D                               ;'B' = DEVICE ID
F0E2 39               (       command.os):00665                 RTS
                      (       command.os):00666         ;* SET FLAG ON/OFF
F0E3                  (       command.os):00667         STFLAG
F0E3 54               (       command.os):00668                 LSRB                                      ;CONVERT BACK
F0E4 3404             (       command.os):00669                 PSHS    B                                 ;SAVE
F0E6 8EF42D           (       command.os):00670                 LDX     #OOTAB                            ;PT TO IT
F0E9 BDE4EC           (       command.os):00671                 JSR     TLOOK                             ;LOOKUP IN TABLE
F0EC 3502             (       command.os):00672                 PULS    A                                 ;RESTORE VECT NUM
F0EE 5D               (       command.os):00673                 TSTB                                      ;IS IT OFF?
F0EF 270B             (       command.os):00674                 BEQ     CLRFLG                            ;YES, CLEAR IT
F0F1 5A               (       command.os):00675                 DECB                                      ;IS IT ON
F0F2 1026F1A9         (       command.os):00676                 LBNE    BADOPR                            ;NO, ITS INVALID
                      (       command.os):00677         ;* SET AN OS FLAG
F0F6                  (       command.os):00678         SETFLG
F0F6 3414             (       command.os):00679                 PSHS    B,X
F0F8 C6FF             (       command.os):00680                 LDB     #$FF
F0FA 2003             (       command.os):00681                 BRA     GOFLG
                      (       command.os):00682         ;* CLEAR A OS FLAG
F0FC                  (       command.os):00683         CLRFLG
F0FC 3414             (       command.os):00684                 PSHS    B,X
F0FE 5F               (       command.os):00685                 CLRB
F0FF                  (       command.os):00686         GOFLG
F0FF 8103             (       command.os):00687                 CMPA    #NUMFLG
F101 1024F19A         (       command.os):00688                 LBHS    BADOPR
F105 8EDCA2           (       command.os):00689                 LDX     #MSGFLG
F108 3086             (       command.os):00690                 LEAX    A,X
F10A A684             (       command.os):00691                 LDA     ,X
F10C E784             (       command.os):00692                 STB     ,X
F10E 1A04             (       command.os):00693                 ORCC    #4
F110 3594             (       command.os):00694                 PULS    B,X,PC
                      (       command.os):00695         ;*
                      (       command.os):00696         ;* SHOW COMMAND
                      (       command.os):00697         ;*
F112                  (       command.os):00698         SHOW
F112 8EF35F           (       command.os):00699                 LDX     #SETTAB                           ;POINT TO IT
F115 BDE4EC           (       command.os):00700                 JSR     TLOOK                             ;LOOK FOR IT
F118 58               (       command.os):00701                 LSLB
F119 8EF3B8           (       command.os):00702                 LDX     #SHOADR
F11C 6E95             (       command.os):00703                 JMP     [B,X]
                      (       command.os):00704         ;* SHOW DEFAULT
F11E                  (       command.os):00705         SHOW0
F11E 8EDCA5           (       command.os):00706                 LDX     #DEFDRV                           ;PT TO IT
F121 2003             (       command.os):00707                 BRA     SDCMD                             ;SHOW IT
F123                  (       command.os):00708         SHOW1
F123 8EDCAE           (       command.os):00709                 LDX     #SYSDRV                           ;PT TO IT
F126                  (       command.os):00710         SDCMD
F126 A680             (       command.os):00711                 LDA     ,X+                               ;GET DRIVE ID
F128 8B41             (       command.os):00712                 ADDA    #'A'                              ;CONVERT
F12A BDE581           (       command.os):00713                 JSR     PUTCHR
F12D BDE535           (       command.os):00714                 JSR     WRLIN
F130 3A5B             (       command.os):00715                 FCC     ':['
F132 C608             (       command.os):00716                 LDB     #8
F134                  (       command.os):00717         SDC1
F134 A680             (       command.os):00718                 LDA     ,X+
F136 2703             (       command.os):00719                 BEQ     SDC2
F138 BDE581           (       command.os):00720                 JSR     PUTCHR
F13B                  (       command.os):00721         SDC2
F13B 5A               (       command.os):00722                 DECB
F13C 26F6             (       command.os):00723                 BNE     SDC1
F13E 865D             (       command.os):00724                 LDA     #']'
F140 BDE581           (       command.os):00725                 JSR     PUTCHR
F143 7EE56F           (       command.os):00726                 JMP     LFCR                              ;EXIT
                      (       command.os):00727         ;* SHOW FILE
F146                  (       command.os):00728         SHOW2
F146 BDE357           (       command.os):00729                 JSR     GETVAL                            ;GET NAME
F149 BDE640           (       command.os):00730                 JSR     LOCERR                            ;LOOK IT UP
F14C BDE535           (       command.os):00731                 JSR     WRLIN
F14F 46696C653A20     (       command.os):00732                 FCC     'File: '
F155 BDE6D0           (       command.os):00733                 JSR     SHONAM                            ;OUTPUT
F158 BDE535           (       command.os):00734                 JSR     WRLIN
F15B 0A0D             (       command.os):00735                 FCB     $0A,$0D
F15D 4469736B20616464 (       command.os):00736                 FCC     'Disk address='
     726573733D
F16A EC8813           (       command.os):00737                 LDD     DDADR,X
F16D BDE465           (       command.os):00738                 JSR     WRDEC
F170 BDE535           (       command.os):00739                 JSR     WRLIN
F173 2C204C6F61642061 (       command.os):00740                 FCC     ', Load address=$'
     6464726573733D24
F183 EC8815           (       command.os):00741                 LDD     DRADR,X
F186 BDE52C           (       command.os):00742                 JSR     WRHEXW
F189 BDE535           (       command.os):00743                 JSR     WRLIN
F18C 2C2050726F746563 (       command.os):00744                 FCC     ', Protection='
     74696F6E3D
F199 E68817           (       command.os):00745                 LDB     DATTR,X
F19C 108EF067         (       command.os):00746                 LDY     #ATRTAB
F1A0                  (       command.os):00747         SH21
F1A0 A6A0             (       command.os):00748                 LDA     ,Y+
F1A2 58               (       command.os):00749                 LSLB
F1A3 2403             (       command.os):00750                 BCC     SH22
F1A5 BDE581           (       command.os):00751                 JSR     PUTCHR
F1A8                  (       command.os):00752         SH22
F1A8 5D               (       command.os):00753                 TSTB
F1A9 26F5             (       command.os):00754                 BNE     SH21
F1AB BDE56F           (       command.os):00755                 JSR     LFCR
F1AE 108E0000         (       command.os):00756                 LDY     #0                                ;0 BLOCKS
F1B2 EC8813           (       command.os):00757                 LDD     DDADR,X
F1B5                  (       command.os):00758         SH23
F1B5 3121             (       command.os):00759                 LEAY    1,Y                               ;ADVANCE
F1B7 BDE5C6           (       command.os):00760                 JSR     FNDLNK                            ;LOOK UP LINK
F1BA 26F9             (       command.os):00761                 BNE     SH23                              ;FIND EM ALL
F1BC BDE535           (       command.os):00762                 JSR     WRLIN
F1BF 46696C6520636F6E (       command.os):00763                 FCC     'File contains '
     7461696E7320
F1CD 1F20             (       command.os):00764                 TFR     Y,D
F1CF BDE465           (       command.os):00765                 JSR     WRDEC
F1D2 BDE565           (       command.os):00766                 JSR     WRMSG
F1D5 20626C6F636B2873 (       command.os):00767                 FCC     ' block(s).'
     292E
F1DF 39               (       command.os):00768                 RTS
                      (       command.os):00769         ;* SHOW DISK FORMAT
F1E0                  (       command.os):00770         SHOW3
F1E0 BDE3E6           (       command.os):00771                 JSR     GETDRV
F1E3                  (       command.os):00772         SHODRV
F1E3 3442             (       command.os):00773                 PSHS    A,U                               ;SAVE REGISTERS
F1E5 BDEAEF           (       command.os):00774                 JSR     GETCTL1                           ;GET DRIVE CONTROL BLOCK
F1E8 BDE535           (       command.os):00775                 JSR     WRLIN                             ;OUTPUT MESSAGE
F1EB 44726976653A20   (       command.os):00776                 FCC     'Drive: '
F1F2 A6E4             (       command.os):00777                 LDA     ,S                                ;GET DRIVE ID
F1F4 8B41             (       command.os):00778                 ADDA    #'A'                              ;CONVERT TO DRIVE ID
F1F6 BDE581           (       command.os):00779                 JSR     PUTCHR                            ;OUTPUT IT
F1F9 BDE56F           (       command.os):00780                 JSR     LFCR                              ;NEW LINE
F1FC 8EF406           (       command.os):00781                 LDX     #SDTAB                            ;POINT TO TABLE
F1FF 4F               (       command.os):00782                 CLRA                                      ;DISPLAY ADDRESS
F200 E6C4             (       command.os):00783                 LDB     DRIVE,U                           ;GET DRIVE ID
F202 8D2E             (       command.os):00784                 BSR     SHODRB                            ;DISPLAY IT
F204 8601             (       command.os):00785                 LDA     #1                                ;DISPLAY CYLINDERS
F206 E641             (       command.os):00786                 LDB     NCYL,U                            ;GET # CYLINDERS
F208 8D23             (       command.os):00787                 BSR     SHODRA                            ;DISPLAY IT
F20A 8602             (       command.os):00788                 LDA     #2                                ;DISPLAY HEADS
F20C E642             (       command.os):00789                 LDB     NHEAD,U                           ;GET # HEADS
F20E 8D1D             (       command.os):00790                 BSR     SHODRA                            ;DISPLAY IT
F210 8603             (       command.os):00791                 LDA     #3                                ;DISPLAY SECTORS/TRACK
F212 E643             (       command.os):00792                 LDB     NSEC,U                            ;GET # SECTORS/TRACK
F214 8D17             (       command.os):00793                 BSR     SHODRA                            ;DISPLAY IT
F216 3542             (       command.os):00794                 PULS    A,U                               ;RESTORE REGS
F218 7EE56F           (       command.os):00795                 JMP     LFCR                              ;NEW LINE
F21B 7EE56F           (       command.os):00796                 JMP     LFCR                              ;NEW LINE
F21E 7EE56F           (       command.os):00797                 JMP     LFCR                              ;NEW LINE
F221 7EE56F           (       command.os):00798                 JMP     LFCR                              ;NEW LINE
F224 7EE56F           (       command.os):00799                 JMP     LFCR                              ;NEW LINE
F227 7EE56F           (       command.os):00800                 JMP     LFCR                              ;NEW LINE
F22A 7EE56F           (       command.os):00801                 JMP     LFCR                              ;NEW LINE
F22D                  (       command.os):00802         SHODRA
F22D BDE535           (       command.os):00803                 JSR     WRLIN                             ;OUTPUT MESSAGE
F230 2C20             (       command.os):00804                 FCC     ', '                              ;STRING
F232                  (       command.os):00805         SHODRB
F232 8D08             (       command.os):00806                 BSR     SHOTAB                            ;DISPLAY TABLE ENTRY
F234 863D             (       command.os):00807                 LDA     #'='                              ;GET FOLLOWING '='
F236 BDE581           (       command.os):00808                 JSR     PUTCHR                            ;OUTPUT IT
F239 7EE464           (       command.os):00809                 JMP     WRDEC8                            ;AND DISPLAY VALUE
                      (       command.os):00810         ;*
                      (       command.os):00811         ;* DISPLAY ENTRY(A) IN TABLE(X)
                      (       command.os):00812         ;*
F23C                  (       command.os):00813         SHOTAB
F23C 3414             (       command.os):00814                 PSHS    B,X                               ;SAVE REGS
F23E 4C               (       command.os):00815                 INCA                                      ;ADVANCE FOR COUNT
F23F                  (       command.os):00816         SHOT1
F23F E680             (       command.os):00817                 LDB     ,X+                               ;GET CHAR FROM TABLE
F241 2AFC             (       command.os):00818                 BPL     SHOT1                             ;NOT FLAG, KEEP LOOKING
F243 C47F             (       command.os):00819                 ANDB    #%01111111                        ;IS IT LAST ONE?
F245 270F             (       command.os):00820                 BEQ     SHOT4                             ;YES, RETURN NOT-FOUND
F247 4A               (       command.os):00821                 DECA                                      ;IS THIS IT?
F248 26F5             (       command.os):00822                 BNE     SHOT1                             ;NO, KEEP LOOKING
F24A                  (       command.os):00823         SHOT2
F24A A680             (       command.os):00824                 LDA     ,X+                               ;GET CHAR
F24C 2B05             (       command.os):00825                 BMI     SHOT3                             ;END, EXIT
F24E BDE581           (       command.os):00826                 JSR     PUTCHR                            ;DISPLAY
F251 20F7             (       command.os):00827                 BRA     SHOT2                             ;DO NEXT
F253                  (       command.os):00828         SHOT3
F253 4F               (       command.os):00829                 CLRA    ZERO RC
F254 3594             (       command.os):00830                 PULS    B,X,PC
F256                  (       command.os):00831         SHOT4
F256 8601             (       command.os):00832                 LDA     #RCBOP                            ;INVALID OPERAND PASSED
F258 3594             (       command.os):00833                 PULS    B,X,PC                            ;RETURN
                      (       command.os):00834         ;* SHOW CONSOLE I/O ASSIGNMENTS
F25A                  (       command.os):00835         SHOW5
F25A 8EF435           (       command.os):00836                 LDX     #IOTAB                            ;POINT TO TABLE
F25D 4F               (       command.os):00837                 CLRA                                      ;DISPLAY INPUT
F25E F6DC6C           (       command.os):00838                 LDB     >CONIN                            ;GET INPUT
F261 8DCF             (       command.os):00839                 BSR     SHODRB                            ;DISPLAY IT
F263 8601             (       command.os):00840                 LDA     #1                                ;DISPLAY OUTPUT
F265 F6DC6D           (       command.os):00841                 LDB     >CONOUT                           ;GET OUTPUT
F268 8DC3             (       command.os):00842                 BSR     SHODRA                            ;DISPLAY IT
F26A 7EE56F           (       command.os):00843                 JMP     LFCR                              ;NEW LINE
                      (       command.os):00844         ;* DISPLAY FLAGS
F26D                  (       command.os):00845         SHFLAG
F26D 54               (       command.os):00846                 LSRB
F26E 1F98             (       command.os):00847                 TFR     B,A                               ;COPY
F270 8EF35F           (       command.os):00848                 LDX     #SETTAB                           ;POINT TO TABLE
F273 8DC7             (       command.os):00849                 BSR     SHOTAB                            ;DISPLAY IT
F275 863D             (       command.os):00850                 LDA     #'='                              ;GET EQUALS SIGN
F277 BDE581           (       command.os):00851                 JSR     PUTCHR                            ;OUTPUT IT
F27A 8EDCA2           (       command.os):00852                 LDX     #MSGFLG                           ;PT TO AREA
F27D A685             (       command.os):00853                 LDA     B,X                               ;GET FLAG VALUE
F27F 2702             (       command.os):00854                 BEQ     SHOOFF                            ;OFF, SHOW IT
F281 8601             (       command.os):00855                 LDA     #1                                ;CONVERT TO ON
F283                  (       command.os):00856         SHOOFF
F283 8EF42D           (       command.os):00857                 LDX     #OOTAB                            ;POINT TO ON/OFF TABLE
F286 8DB4             (       command.os):00858                 BSR     SHOTAB                            ;OUTPUT TABLE ENTRY
F288 7EE56F           (       command.os):00859                 JMP     LFCR                              ;NEW LINE & EXIT
                      (       command.os):00860         ;*
                      (       command.os):00861         ;* SHOW MEMORY COMAND
                      (       command.os):00862         ;*
F28B                  (       command.os):00863         SHOW4
F28B BDE403           (       command.os):00864                 JSR     GETHEX                            ;     GET STARTING ADDRESS
F28E 3410             (       command.os):00865                 PSHS    X                                 ;SAVE IT
F290 BDE4C3           (       command.os):00866                 JSR     SKIP                              ;     MORE OPERANDS?
F293 2703             (       command.os):00867                 BEQ     EX1                               ;NO, THATS IT
F295 BDE403           (       command.os):00868                 JSR     GETHEX                            ;     GET ENDING ADDRESS
F298                  (       command.os):00869         EX1
F298 BFDCCD           (       command.os):00870                 STX     >TEMP1                            ;     SAVE ADDR
F29B 3510             (       command.os):00871                 PULS    X                                 ;GET STARTING BACK
F29D                  (       command.os):00872         EX2
F29D 1F10             (       command.os):00873                 TFR     X,D                               ;GET ADDRESS
F29F BDE52C           (       command.os):00874                 JSR     WRHEXW                            ;     DISPLAY
F2A2 C610             (       command.os):00875                 LDB     #16                               ;16 BYTES/LINE
F2A4                  (       command.os):00876         EX3
F2A4 C503             (       command.os):00877                 BITB    #3                                ;BOUNDARY?
F2A6 2603             (       command.os):00878                 BNE     EX4
F2A8 BDE579           (       command.os):00879                 JSR     SPACE                             ;EXTRA SPACE
F2AB                  (       command.os):00880         EX4
F2AB BDE579           (       command.os):00881                 JSR     SPACE                             ;OUTPUT SPACE
F2AE A680             (       command.os):00882                 LDA     ,X+                               ;GET DATA
F2B0 BDE541           (       command.os):00883                 JSR     WRHEX                             ;OUTPUT
F2B3 5A               (       command.os):00884                 DECB                                      ;BACKUP COUNT
F2B4 26EE             (       command.os):00885                 BNE     EX3                               ;DO EM ALL
F2B6 C604             (       command.os):00886                 LDB     #4
F2B8                  (       command.os):00887         EX5
F2B8 BDE579           (       command.os):00888                 JSR     SPACE                             ;MORE SPACES
F2BB 5A               (       command.os):00889                 DECB
F2BC 26FA             (       command.os):00890                 BNE     EX5
F2BE 3010             (       command.os):00891                 LEAX    -16,X                             ;BACKUP
F2C0 C610             (       command.os):00892                 LDB     #16
F2C2                  (       command.os):00893         EX6
F2C2 A680             (       command.os):00894                 LDA     ,X+
F2C4 8120             (       command.os):00895                 CMPA    #' '                              ;SPACE?
F2C6 2504             (       command.os):00896                 BLO     EX7
F2C8 817F             (       command.os):00897                 CMPA    #$7F                              ;DELETE
F2CA 2502             (       command.os):00898                 BLO     EX8                               ;OK
F2CC                  (       command.os):00899         EX7
F2CC 862E             (       command.os):00900                 LDA     #'.'                              ;INDICATE BAD
F2CE                  (       command.os):00901         EX8
F2CE BDE581           (       command.os):00902                 JSR     PUTCHR                            ;OUTPUT
F2D1 5A               (       command.os):00903                 DECB    BACKUP
F2D2 26EE             (       command.os):00904                 BNE     EX6                               ;CONTINUE
F2D4 BDE56F           (       command.os):00905                 JSR     LFCR                              ;NEW LINE
F2D7 BDE5BA           (       command.os):00906                 JSR     TSTCHR
F2DA 2705             (       command.os):00907                 BEQ     EX9
F2DC BCDCCD           (       command.os):00908                 CMPX    >TEMP1                            ;PAST END?
F2DF 23BC             (       command.os):00909                 BLS     EX2                               ;NO, KEEP GOING
F2E1                  (       command.os):00910         EX9
F2E1 4F               (       command.os):00911                 CLRA
F2E2 39               (       command.os):00912                 RTS
                      (       command.os):00913         ;* SHOW FREE
F2E3                  (       command.os):00914         SHOW6
F2E3 BDE3E6           (       command.os):00915                 JSR     GETDRV                            ;GET DRIVE ID
F2E6 B7DCEB           (       command.os):00916                 STA     >SDRIVE                           ;SELECT IT
F2E9 8D3A             (       command.os):00917                 BSR     CALFRE                            ;CALCULATE SIZE & FREE
F2EB BDE535           (       command.os):00918                 JSR     WRLIN                             ;OUTPUT MESSAGE
F2EE 447269766520     (       command.os):00919                 FCC     'Drive '
F2F4 B6DCEB           (       command.os):00920                 LDA     >SDRIVE                           ;GET DRIVE ID
F2F7 8B41             (       command.os):00921                 ADDA    #'A'                              ;CONVERT TO PRINTABLE
F2F9 BDE581           (       command.os):00922                 JSR     PUTCHR                            ;DISPLAY
F2FC BDE535           (       command.os):00923                 JSR     WRLIN                             ;OUTPUT MESSAGE
F2FF 2068617320       (       command.os):00924                 FCC     ' has '
F304 FCDCCF           (       command.os):00925                 LDD     >TEMP2                            ;GET DISK SIZE
F307 BDE465           (       command.os):00926                 JSR     WRDEC                             ;DISPLAY IN DECIMAL
F30A BDE535           (       command.os):00927                 JSR     WRLIN                             ;OUTPUT MESSAGE
F30D 20626C6F636B732C (       command.os):00928                 FCC     ' blocks, '
     20
F316 FCDCCD           (       command.os):00929                 LDD     >TEMP1                            ;GET FREE BLOCKS
F319 BDE465           (       command.os):00930                 JSR     WRDEC                             ;OUTPUT IN DECIMAL
F31C BDE565           (       command.os):00931                 JSR     WRMSG                             ;OUTPUT MESSAGE
F31F 2066726565       (       command.os):00932                 FCC     ' free'
F324 39               (       command.os):00933                 RTS
                      (       command.os):00934         ;*
                      (       command.os):00935         ;* CALCULATE # FREE SECTORS ON DISK
                      (       command.os):00936         ;*
F325                  (       command.os):00937         CALFRE
F325 3430             (       command.os):00938                 PSHS    X,Y
F327 BDE6F8           (       command.os):00939                 JSR     CURSIZ                            ;GET DRIVE SIZE
F32A FDDCCF           (       command.os):00940                 STD     >TEMP2                            ;SAVE # BLOCKS
F32D 1F02             (       command.os):00941                 TFR     D,Y                               ;SAVE IT
F32F 4F               (       command.os):00942                 CLRA
F330 5F               (       command.os):00943                 CLRB
F331 FDDCCD           (       command.os):00944                 STD     >TEMP1                            ;SAVE COUNT
F334 C601             (       command.os):00945                 LDB     #LNKSEC                           ;GET LINK SECTORS
F336                  (       command.os):00946         DISF1
F336 FDDCCB           (       command.os):00947                 STD     >TEMP                             ;CURRENT SECTOR
F339 BDE5E3           (       command.os):00948                 JSR     RDWRK                             ;READ IT
F33C                  (       command.os):00949         DISF2
F33C EC81             (       command.os):00950                 LDD     ,X++                              ;GET SECTOR ID
F33E 2607             (       command.os):00951                 BNE     DISF3                             ;USED
F340 5C               (       command.os):00952                 INCB                                      ;GET A ONE
F341 F3DCCD           (       command.os):00953                 ADDD    >TEMP1                            ;ADVANCE COUNT
F344 FDDCCD           (       command.os):00954                 STD     >TEMP1                            ;RESAVE COUNT
F347                  (       command.os):00955         DISF3
F347 313F             (       command.os):00956                 LEAY    -1,Y                              ;REDUCE BY ONE
F349 270D             (       command.os):00957                 BEQ     DISF4                             ;ALL DONE
F34B 8CE000           (       command.os):00958                 CMPX    #WRKSPC+512                       ;ARE WE OVER
F34E 25EC             (       command.os):00959                 BLO     DISF2                             ;NO, ITS OK
F350 FCDCCB           (       command.os):00960                 LDD     >TEMP                             ;GET SECTOR
F353 C30001           (       command.os):00961                 ADDD    #1                                ;ADVANCE
F356 20DE             (       command.os):00962                 BRA     DISF1
F358                  (       command.os):00963         DISF4
F358 FCDCCD           (       command.os):00964                 LDD     >TEMP1                            ;RECOVER IT
F35B 1A04             (       command.os):00965                 ORCC    #4
F35D 35B0             (       command.os):00966                 PULS    X,Y,PC
                      (       command.os):00967         ;* 'SET' OPERAND TABLES
F35F                  (       command.os):00968         SETTAB
F35F 83               (       command.os):00969                 FCB     $83
F360 4D657373616765   (       command.os):00970                 FCC     'Message'
F367 83               (       command.os):00971                 FCB     $83
F368 4465627567       (       command.os):00972                 FCC     'Debug'
F36D 82               (       command.os):00973                 FCB     $82
F36E 5472616365       (       command.os):00974                 FCC     'Trace'
F373 83               (       command.os):00975                 FCB     $83
F374 44454641554C54   (       command.os):00976                 FCC     'DEFAULT'
F37B 82               (       command.os):00977                 FCB     $82
F37C 53595354454D     (       command.os):00978                 FCC     'SYSTEM'
F382 82               (       command.os):00979                 FCB     $82
F383 46494C45         (       command.os):00980                 FCC     'FILE'
F387 82               (       command.os):00981                 FCB     $82
F388 4452495645       (       command.os):00982                 FCC     'DRIVE'
F38D 83               (       command.os):00983                 FCB     $83
F38E 4D454D4F5259     (       command.os):00984                 FCC     'MEMORY'
F394 82               (       command.os):00985                 FCB     $82
F395 434F4E534F4C45   (       command.os):00986                 FCC     'CONSOLE'
F39C 82               (       command.os):00987                 FCB     $82
F39D 46524545         (       command.os):00988                 FCC     'FREE'
F3A1 80               (       command.os):00989                 FCB     $80
                      (       command.os):00990         ;* 'SET' OPERAND HANDLERS
F3A2                  (       command.os):00991         SETADR
F3A2 F0E3             (       command.os):00992                 FDB     STFLAG                            ;MESSAGE
F3A4 F0E3             (       command.os):00993                 FDB     STFLAG                            ;DEBUG
F3A6 F0E3             (       command.os):00994                 FDB     STFLAG                            ;TRACE
F3A8 EFEB             (       command.os):00995                 FDB     SET0                              ;DEFAULT
F3AA EFFA             (       command.os):00996                 FDB     SET1                              ;SYSTEM
F3AC F019             (       command.os):00997                 FDB     SET2                              ;FILE
F3AE F06F             (       command.os):00998                 FDB     SET3                              ;DRIVE
F3B0 F0A7             (       command.os):00999                 FDB     SET4                              ;MEMORY
F3B2 F0BB             (       command.os):01000                 FDB     SET5                              ;CONSOLE
F3B4 E29F             (       command.os):01001                 FDB     BADOPR                            ;FREE
F3B6 E29F             (       command.os):01002                 FDB     BADOPR                            ;INVALID
                      (       command.os):01003         ;* 'SHOW' OPERAND HANDLERS
F3B8                  (       command.os):01004         SHOADR
F3B8 F26D             (       command.os):01005                 FDB     SHFLAG                            ;MESSAGE
F3BA F26D             (       command.os):01006                 FDB     SHFLAG                            ;DEBUG
F3BC F26D             (       command.os):01007                 FDB     SHFLAG                            ;TRACE
F3BE F11E             (       command.os):01008                 FDB     SHOW0                             ;DEFAULT
F3C0 F123             (       command.os):01009                 FDB     SHOW1                             ;SYSTEM
F3C2 F146             (       command.os):01010                 FDB     SHOW2                             ;FILE
F3C4 F1E0             (       command.os):01011                 FDB     SHOW3                             ;DRIVE
F3C6 F28B             (       command.os):01012                 FDB     SHOW4                             ;MEMORY
F3C8 F25A             (       command.os):01013                 FDB     SHOW5                             ;CONSOLE
F3CA F2E3             (       command.os):01014                 FDB     SHOW6                             ;FREE
F3CC E29F             (       command.os):01015                 FDB     BADOPR                            ;INVALID
                      (       command.os):01016         ;* 'SET FILE' OPTIONS
F3CE                  (       command.os):01017         SFTAB
F3CE 81               (       command.os):01018                 FCB     $81
F3CF 4C4F41445F414444 (       command.os):01019                 FCC     'LOAD_ADDRESS'
     52455353
F3DB 81               (       command.os):01020                 FCB     $81
F3DC 50524F5445435449 (       command.os):01021                 FCC     'PROTECTION'
     4F4E
F3E6 80               (       command.os):01022                 FCB     $80
                      (       command.os):01023         ;* 'INITIALIZE' OPTIONS
F3E7                  (       command.os):01024         INITAB
F3E7 81               (       command.os):01025                 FCB     $81
F3E8 496E7465726C6561 (       command.os):01026                 FCC     'Interleave'
     7665
F3F2 81               (       command.os):01027                 FCB     $81
F3F3 4469726563746F72 (       command.os):01028                 FCC     'Directory extension'
     7920657874656E73
     696F6E
                      (       command.os):01029         ;* 'SET DISK' OPTIONS
F406                  (       command.os):01030         SDTAB
F406 81               (       command.os):01031                 FCB     $81
F407 41646472657373   (       command.os):01032                 FCC     'Address'
F40E 81               (       command.os):01033                 FCB     $81
F40F 43796C696E646572 (       command.os):01034                 FCC     'Cylinders'
     73
F418 81               (       command.os):01035                 FCB     $81
F419 4865616473       (       command.os):01036                 FCC     'Heads'
F41E 81               (       command.os):01037                 FCB     $81
F41F 536563746F72732F (       command.os):01038                 FCC     'Sectors/Track'
     547261636B
F42C 80               (       command.os):01039                 FCB     $80
                      (       command.os):01040         ;* FLAG ON/OFF TABLE
F42D                  (       command.os):01041         OOTAB
F42D 82               (       command.os):01042                 FCB     $82
F42E 4F4646           (       command.os):01043                 FCC     'OFF'
F431 82               (       command.os):01044                 FCB     $82
F432 4F4E             (       command.os):01045                 FCC     'ON'
F434 80               (       command.os):01046                 FCB     $80
                      (       command.os):01047         ;* 'SET CONSOLE' OPTIONS
F435                  (       command.os):01048         IOTAB
F435 81               (       command.os):01049                 FCB     $81
F436 496E707574       (       command.os):01050                 FCC     'Input'
F43B 81               (       command.os):01051                 FCB     $81
F43C 4F7574707574     (       command.os):01052                 FCC     'Output'
F442 80               (       command.os):01053                 FCB     $80
                      (        cubix.asm):01176                 INCLUDE comfile.os                        ;BATCH FILE PROCESSOR
                      (       comfile.os):00001         ;*
                      (       comfile.os):00002         ;* CUBIX Command (batch) file processor
                      (       comfile.os):00003         ;*
                      (       comfile.os):00004         ;* END OF FILE ON COMMAND FILE
F443                  (       comfile.os):00005         CMDEOF
F443 3506             (       comfile.os):00006                 PULS    A,B
F445 FDDCE6           (       comfile.os):00007                 STD     >CMDSTK
F448 B6DCE8           (       comfile.os):00008                 LDA     >CMDRC
F44B 39               (       comfile.os):00009                 RTS
                      (       comfile.os):00010         ;*
                      (       comfile.os):00011         ;* COMMAND FILE PROCESSOR
                      (       comfile.os):00012         ;*
F44C                  (       comfile.os):00013         COMFIL
F44C 3121             (       comfile.os):00014                 LEAY    1,Y                               ;SKIP '@'
F44E B7DCCD           (       comfile.os):00015                 STA     >TEMP1                            ;INDICATE NOT IMPLIED
F451                  (       comfile.os):00016         CMDEX
F451 BDE397           (       comfile.os):00017                 JSR     GETDIR                            ;GET DIRECTORY
F454 BDE285           (       comfile.os):00018                 JSR     NAMGET                            ;GET NAME
F457 CC4000           (       comfile.os):00019                 LDD     #$4000                            ;'@'
F45A ED81             (       comfile.os):00020                 STD     ,X++                              ;SET IT
F45C 6F80             (       comfile.os):00021                 CLR     ,X+                               ;ZERO LAST
F45E BDE640           (       comfile.os):00022                 JSR     LOCERR                            ;LOOK IT UP
                      (       comfile.os):00023         ;* START UP COMMAND FILE DIR ENT(X)
F461                  (       comfile.os):00024         COMGO
F461 A68817           (       comfile.os):00025                 LDA     DATTR,X                           ;GET PROTS
F464 8520             (       comfile.os):00026                 BITA    #EPERM                            ;CAN WE EXECUTE?
F466 1027F429         (       comfile.os):00027                 LBEQ    PROERR                            ;NO, ERROR
F46A B6DCB7           (       comfile.os):00028                 LDA     >FDRIVE                           ;GET COMMAND FILE DRIVE
F46D B7DCE1           (       comfile.os):00029                 STA     >CMDDRV                           ;SAVE IT
F470 EC8813           (       comfile.os):00030                 LDD     DDADR,X                           ;GET ADDRESS
F473 FDDCE2           (       comfile.os):00031                 STD     >CMDSEC                           ;SAVE COMMAND SECTOR
F476 4F               (       comfile.os):00032                 CLRA
F477 5F               (       comfile.os):00033                 CLRB
F478 FDDCE4           (       comfile.os):00034                 STD     >CMDOFF                           ;SAVE COMMAND FILE OFFSET
F47B FCDCE6           (       comfile.os):00035                 LDD     >CMDSTK                           ;GET COMMAND STACK
F47E 3406             (       comfile.os):00036                 PSHS    A,B                               ;SAVE OLD STACK
F480 7FDCE8           (       comfile.os):00037                 CLR     >CMDRC                            ;CLEAR RETURN CODE
F483 10BEDCCF         (       comfile.os):00038                 LDY     >TEMP2                            ;RESTORE COMMAND LINE POINTER
F487 BDF588           (       comfile.os):00039                 JSR     SAVPRM                            ;SAVE PARAMETERS
F48A                  (       comfile.os):00040         NEWLIN
F48A 8EDC00           (       comfile.os):00041                 LDX     #INBUFF                           ;PT TO BUFFER
F48D                  (       comfile.os):00042         REDCHR
F48D BDF5FC           (       comfile.os):00043                 JSR     RCCHR                             ;READ CHAR FROM CMD FILE
F490 27B1             (       comfile.os):00044                 BEQ     CMDEOF                            ;END OF FILE
F492 813F             (       comfile.os):00045                 CMPA    #'?'                              ;PARM?
F494 262D             (       comfile.os):00046                 BNE     NOMAC                             ;NOPE
F496 BDF5FC           (       comfile.os):00047                 JSR     RCCHR                             ;GET CHAR
F499 8030             (       comfile.os):00048                 SUBA    #'0'                              ;CONVERT
F49B 8109             (       comfile.os):00049                 CMPA    #9                                ;OVER
F49D 2308             (       comfile.os):00050                 BLS     PAROK                             ;OK
F49F C63F             (       comfile.os):00051                 LDB     #'?'
F4A1 E780             (       comfile.os):00052                 STB     ,X+
F4A3 8B30             (       comfile.os):00053                 ADDA    #'0'
F4A5 201C             (       comfile.os):00054                 BRA     NOMAC                             ;NOT VAR
                      (       comfile.os):00055         ;* PARAMETER SUB TO PERFORM
F4A7                  (       comfile.os):00056         PAROK
F4A7 1F89             (       comfile.os):00057                 TFR     A,B                               ;COPY
F4A9 108EDCED         (       comfile.os):00058                 LDY     #CMDBUF                           ;POINT TO BUFFER
F4AD                  (       comfile.os):00059         PAR1
F4AD BDE4C3           (       comfile.os):00060                 JSR     SKIP                              ;ADVANCE
F4B0 5A               (       comfile.os):00061                 DECB                                      ;REDUCE COUNT
F4B1 2B07             (       comfile.os):00062                 BMI     PAR3                              ;WE HAVE IT
F4B3                  (       comfile.os):00063         PAR2
F4B3 BDE4D0           (       comfile.os):00064                 JSR     TSTERM                            ;KEEP LOOKING
F4B6 26FB             (       comfile.os):00065                 BNE     PAR2                              ;KEEP LOOKING
F4B8 20F3             (       comfile.os):00066                 BRA     PAR1                              ;CONTINUE
F4BA                  (       comfile.os):00067         PAR3
F4BA BDE4D0           (       comfile.os):00068                 JSR     TSTERM                            ;IS THIS
F4BD 27CE             (       comfile.os):00069                 BEQ     REDCHR                            ;YES, QUIT
F4BF A780             (       comfile.os):00070                 STA     ,X+                               ;SAVE
F4C1 20F7             (       comfile.os):00071                 BRA     PAR3
                      (       comfile.os):00072         ;* EXECUTE COMMAND
F4C3                  (       comfile.os):00073         NOMAC
F4C3 A780             (       comfile.os):00074                 STA     ,X+                               ;CLEAR IT
F4C5 810D             (       comfile.os):00075                 CMPA    #$0D                              ;END OF LINE?
F4C7 26C4             (       comfile.os):00076                 BNE     REDCHR
F4C9 108EDC00         (       comfile.os):00077                 LDY     #INBUFF                           ;POINT TO BUFFER
F4CD 7DDCA4           (       comfile.os):00078                 TST     >TRCFLG                           ;TEST FOR TRACE ON
F4D0 2717             (       comfile.os):00079                 BEQ     GOCMD                             ;NO, DON'T TRACE
F4D2 862A             (       comfile.os):00080                 LDA     #'*'
F4D4 BDE581           (       comfile.os):00081                 JSR     PUTCHR                            ;FAKE DOS PROMPT
F4D7 1F21             (       comfile.os):00082                 TFR     Y,X                               ;COPY
F4D9                  (       comfile.os):00083         TRAC1
F4D9 A680             (       comfile.os):00084                 LDA     ,X+
F4DB 2709             (       comfile.os):00085                 BEQ     TRAC2
F4DD 810D             (       comfile.os):00086                 CMPA    #$0D
F4DF 2705             (       comfile.os):00087                 BEQ     TRAC2
F4E1 BDE581           (       comfile.os):00088                 JSR     PUTCHR
F4E4 20F3             (       comfile.os):00089                 BRA     TRAC1
F4E6                  (       comfile.os):00090         TRAC2
F4E6 BDE56F           (       comfile.os):00091                 JSR     LFCR
F4E9                  (       comfile.os):00092         GOCMD
F4E9 BDE4C3           (       comfile.os):00093                 JSR     SKIP                              ;ADVANCE
F4EC 813F             (       comfile.os):00094                 CMPA    #'?'                              ;COMMAND CODE
F4EE 265B             (       comfile.os):00095                 BNE     EXDCOM                            ;NO, SKIP IT
F4F0 ECA1             (       comfile.os):00096                 LDD     ,Y++                              ;GET OPERAND
F4F2 BDE4C3           (       comfile.os):00097                 JSR     SKIP
                      (       comfile.os):00098         ;* '?O' OUTPUT LINE
F4F5 C14F             (       comfile.os):00099                 CMPB    #'O'                              ;OUTPUT?
F4F7 2704             (       comfile.os):00100                 BEQ     CMPR
                      (       comfile.os):00101         ;* '?P' ONTPUT LINE - CR
F4F9 C150             (       comfile.os):00102                 CMPB    #'P'                              ;PRINT?
F4FB 2616             (       comfile.os):00103                 BNE     RCOND                             ;CONDITIONAL
F4FD                  (       comfile.os):00104         CMPR
F4FD A6A0             (       comfile.os):00105                 LDA     ,Y+                               ;GET LINE
F4FF 2709             (       comfile.os):00106                 BEQ     CMPR1
F501 810D             (       comfile.os):00107                 CMPA    #$0D
F503 2705             (       comfile.os):00108                 BEQ     CMPR1
F505 BDE581           (       comfile.os):00109                 JSR     PUTCHR
F508 20F3             (       comfile.os):00110                 BRA     CMPR
F50A                  (       comfile.os):00111         CMPR1
F50A C14F             (       comfile.os):00112                 CMPB    #'O'                              ;OUTPUT?
F50C 2768             (       comfile.os):00113                 BEQ     CMDRT1                            ;NO LFCR
F50E BDE56F           (       comfile.os):00114                 JSR     LFCR
F511 2063             (       comfile.os):00115                 BRA     CMDRT1                            ;BACK
                      (       comfile.os):00116         ;* '?F' EXECUTE ON LAST COMMAND FAILED
F513                  (       comfile.os):00117         RCOND
F513 C146             (       comfile.os):00118                 CMPB    #'F'                              ;?F?
F515 2607             (       comfile.os):00119                 BNE     RSUCC                             ;NO
F517 B6DCE8           (       comfile.os):00120                 LDA     >CMDRC                            ;GET RC
F51A 275A             (       comfile.os):00121                 BEQ     CMDRT1                            ;RETURN
F51C 20CB             (       comfile.os):00122                 BRA     GOCMD                             ;EXECUTE THIS
                      (       comfile.os):00123         ;* '?S' EXECUTE ON LAST COMMAND SUCESSFUL
F51E                  (       comfile.os):00124         RSUCC
F51E C153             (       comfile.os):00125                 CMPB    #'S'                              ;?S?
F520 2603             (       comfile.os):00126                 BNE     CSRC                              ;NO, TRY EXIT
F522 5F               (       comfile.os):00127                 CLRB
F523 2009             (       comfile.os):00128                 BRA     TSTRET                            ;PEFORM TEST
                      (       comfile.os):00129         ;* '?R' EXECUTE ON SPECIFIC RETURN CODE
F525                  (       comfile.os):00130         CSRC
F525 C152             (       comfile.os):00131                 CMPB    #'R'                              ;?R?
F527 260E             (       comfile.os):00132                 BNE     CEXIT                             ;TRY EXIT
F529 BDE3F8           (       comfile.os):00133                 JSR     GETNUM                            ;GET VALUE
F52C 1F10             (       comfile.os):00134                 TFR     X,D                               ;COPY
F52E                  (       comfile.os):00135         TSTRET
F52E F1DCE8           (       comfile.os):00136                 CMPB    >CMDRC                            ;WUZ THIS IT?
F531 2643             (       comfile.os):00137                 BNE     CMDRT1                            ;NO, DONT EXECUTE
F533 20B4             (       comfile.os):00138                 BRA     GOCMD                             ;DO IT
F535 20B2             (       comfile.os):00139                 BRA     GOCMD                             ;DO IT
                      (       comfile.os):00140         ;* '?E' EXIT COMMAND FILE
F537                  (       comfile.os):00141         CEXIT
F537 C145             (       comfile.os):00142                 CMPB    #'E'                              ;EXIT
F539 263E             (       comfile.os):00143                 BNE     CMDIN                             ;NO, TRY SET VARIABLES
F53B BDE4C3           (       comfile.os):00144                 JSR     SKIP                              ;ANY OPERANDS
F53E 2708             (       comfile.os):00145                 BEQ     CEXI                              ;NO
F540 BDE3F8           (       comfile.os):00146                 JSR     GETNUM                            ;GT VALUE
F543 1F10             (       comfile.os):00147                 TFR     X,D                               ;COPY
F545 F7DCE8           (       comfile.os):00148                 STB     >CMDRC                            ;SET IT
F548                  (       comfile.os):00149         CEXI
F548 7EF443           (       comfile.os):00150                 JMP     CMDEOF                            ;END OF FILE
                      (       comfile.os):00151         ;* EXECUTE DOS COMMAND
F54B                  (       comfile.os):00152         EXDCOM
F54B BEDCE4           (       comfile.os):00153                 LDX     >CMDOFF                           ;GET OFFSET
F54E FCDCE2           (       comfile.os):00154                 LDD     >CMDSEC                           ;GET SECTOR
F551 3416             (       comfile.os):00155                 PSHS    A,B,X                             ;SAVE
F553 B6DCE1           (       comfile.os):00156                 LDA     >CMDDRV                           ;GET DRIVE
F556 3402             (       comfile.os):00157                 PSHS    A                                 ;SAVE
F558 10FFDCE6         (       comfile.os):00158                 STS     >CMDSTK                           ;SET STACK
F55C BDE1B4           (       comfile.os):00159                 JSR     EXECMD                            ;EXECUTE
F55F                  (       comfile.os):00160         CMDRET
F55F 2601             (       comfile.os):00161                 BNE     CMDRT0
F561 4F               (       comfile.os):00162                 CLRA
F562                  (       comfile.os):00163         CMDRT0
F562 B7DCE8           (       comfile.os):00164                 STA     >CMDRC                            ;SET RC
F565 10FEDCE6         (       comfile.os):00165                 LDS     >CMDSTK                           ;GET STACK
F569 3502             (       comfile.os):00166                 PULS    A                                 ;RESTORE DRIVE
F56B B7DCE1           (       comfile.os):00167                 STA     >CMDDRV                           ;RESAVE
F56E 3516             (       comfile.os):00168                 PULS    A,B,X                             ;RESTORE VARS
F570 FDDCE2           (       comfile.os):00169                 STD     >CMDSEC                           ;RESET SECTOR
F573 BFDCE4           (       comfile.os):00170                 STX     >CMDOFF                           ;RESET OFFSET
F576                  (       comfile.os):00171         CMDRT1
F576 7EF48A           (       comfile.os):00172                 JMP     NEWLIN                            ;LFCR & RETURN
                      (       comfile.os):00173         ;* '?=' SET COMMAND FILE VARIABLES
F579                  (       comfile.os):00174         CMDIN
F579 C13D             (       comfile.os):00175                 CMPB    #'='
F57B 2707             (       comfile.os):00176                 BEQ     SETVAR                            ;SET THEM
                      (       comfile.os):00177         ;* '?I' INPUT NEW PARMS
F57D C149             (       comfile.os):00178                 CMPB    #'I'                              ;NEW PARMS?
F57F 2618             (       comfile.os):00179                 BNE     CHAIN                             ;NO, TRY CHAIN
F581 BDE48C           (       comfile.os):00180                 JSR     GLINE                             ;GET LINE
F584                  (       comfile.os):00181         SETVAR
F584 8D02             (       comfile.os):00182                 BSR     SAVPRM                            ;SAVE THEM
F586 20EE             (       comfile.os):00183                 BRA     CMDRT1                            ;CONTINUE
                      (       comfile.os):00184         ;* SAVE COMMAND LINE PARAMETERS IN BUFFER
F588                  (       comfile.os):00185         SAVPRM
F588 3410             (       comfile.os):00186                 PSHS    X                                 ;SAVE REGS
F58A 8EDCED           (       comfile.os):00187                 LDX     #CMDBUF                           ;POINT TO IT
F58D                  (       comfile.os):00188         SAVP1
F58D A6A0             (       comfile.os):00189                 LDA     ,Y+                               ;GET IT
F58F A780             (       comfile.os):00190                 STA     ,X+                               ;WRITE IT
F591 2704             (       comfile.os):00191                 BEQ     SAVP2                             ;END
F593 810D             (       comfile.os):00192                 CMPA    #$0D                              ;OK?
F595 26F6             (       comfile.os):00193                 BNE     SAVP1                             ;KEEP GOING
F597                  (       comfile.os):00194         SAVP2
F597 3590             (       comfile.os):00195                 PULS    X,PC                              ;GO HOME
                      (       comfile.os):00196         ;* '?@' CHAIN TO NEW CMD FILE
F599                  (       comfile.os):00197         CHAIN
F599 C140             (       comfile.os):00198                 CMPB    #'@'
F59B 2608             (       comfile.os):00199                 BNE     CMDSKP
F59D 3506             (       comfile.os):00200                 PULS    A,B                               ;RESTORE STACK
F59F FDDCE6           (       comfile.os):00201                 STD     >CMDSTK                           ;RESET SAVED STACK
F5A2 7EF451           (       comfile.os):00202                 JMP     CMDEX                             ;EXECUTE IT
                      (       comfile.os):00203         ;* '?A' ADVANCE LINES
F5A5                  (       comfile.os):00204         CMDSKP
F5A5 C141             (       comfile.os):00205                 CMPB    #'A'                              ;?A?
F5A7 2613             (       comfile.os):00206                 BNE     CMDKEY                            ;CONTINUE
F5A9 BDE3F8           (       comfile.os):00207                 JSR     GETNUM                            ;GET # TO SKIP
F5AC 3001             (       comfile.os):00208                 LEAX    1,X                               ;ADVANCE
F5AE                  (       comfile.os):00209         LOCLP
F5AE 301F             (       comfile.os):00210                 LEAX    -1,X                              ;REDUCE COUNT
F5B0 27C4             (       comfile.os):00211                 BEQ     CMDRT1                            ;NEW LINE
F5B2                  (       comfile.os):00212         LOCCR
F5B2 8D48             (       comfile.os):00213                 BSR     RCCHR                             ;READ A CHAR
F5B4 2792             (       comfile.os):00214                 BEQ     CEXI                              ;END OF FILE
F5B6 810D             (       comfile.os):00215                 CMPA    #$0D                              ;END OF LINE?
F5B8 26F8             (       comfile.os):00216                 BNE     LOCCR                             ;NO, KEEP LOOKING
F5BA 20F2             (       comfile.os):00217                 BRA     LOCLP                             ;DO THEM ALL
                      (       comfile.os):00218         ;* '?K' READ SINGLE KEY
F5BC                  (       comfile.os):00219         CMDKEY
F5BC C14B             (       comfile.os):00220                 CMPB    #'K'                              ;?K?
F5BE 2608             (       comfile.os):00221                 BNE     CMDCMP                            ;NO, TRY COMPARE
F5C0 BDE5C1           (       comfile.os):00222                 JSR     GETCHR                            ;GET SINGLE KEY
F5C3 B7DCE8           (       comfile.os):00223                 STA     >CMDRC                            ;SAVE RETURN CODE
F5C6 2031             (       comfile.os):00224                 BRA     CMDRT2                            ;EXIT
                      (       comfile.os):00225         ;* '??' COMPARE STRINGS
F5C8                  (       comfile.os):00226         CMDCMP
F5C8 C13F             (       comfile.os):00227                 CMPB    #'?'                              ;???
F5CA 262D             (       comfile.os):00228                 BNE     CMDRT2                            ;IGNORE
F5CC BDE4C3           (       comfile.os):00229                 JSR     SKIP                              ;TEST FOR EOL
F5CF 2716             (       comfile.os):00230                 BEQ     CMDC3                             ;FAIL
F5D1 1F21             (       comfile.os):00231                 TFR     Y,X                               ;SAVE PTR
F5D3                  (       comfile.os):00232         CMDC1
F5D3 A6A0             (       comfile.os):00233                 LDA     ,Y+                               ;GET CHAR
F5D5 810D             (       comfile.os):00234                 CMPA    #$0D                              ;CR?
F5D7 270E             (       comfile.os):00235                 BEQ     CMDC3                             ;FAIL
F5D9 8120             (       comfile.os):00236                 CMPA    #' '                              ;SPACE?
F5DB 26F6             (       comfile.os):00237                 BNE     CMDC1                             ;KEEP LOOKING
F5DD                  (       comfile.os):00238         CMDC2
F5DD A680             (       comfile.os):00239                 LDA     ,X+                               ;GET CHAR
F5DF 8120             (       comfile.os):00240                 CMPA    #' '                              ;SPACE?
F5E1 2708             (       comfile.os):00241                 BEQ     CMDC4                             ;END
F5E3 A1A0             (       comfile.os):00242                 CMPA    ,Y+                               ;ARE THEY SAME?
F5E5 27F6             (       comfile.os):00243                 BEQ     CMDC2                             ;YES, A-OK
F5E7                  (       comfile.os):00244         CMDC3
F5E7 86FF             (       comfile.os):00245                 LDA     #255                              ;RETURN CODE
F5E9 200B             (       comfile.os):00246                 BRA     CMDC6                             ;QUIT
F5EB                  (       comfile.os):00247         CMDC4
F5EB A6A0             (       comfile.os):00248                 LDA     ,Y+                               ;GET CHAR FROM SOURCE
F5ED 810D             (       comfile.os):00249                 CMPA    #$0D                              ;PASS?
F5EF 2704             (       comfile.os):00250                 BEQ     CMDC5                             ;YES
F5F1 8120             (       comfile.os):00251                 CMPA    #' '                              ;SPACE
F5F3 26F2             (       comfile.os):00252                 BNE     CMDC3                             ;NO, FAIL
F5F5                  (       comfile.os):00253         CMDC5
F5F5 4F               (       comfile.os):00254                 CLRA                                      ;ZERO RETURN CODE
F5F6                  (       comfile.os):00255         CMDC6
F5F6 B7DCE8           (       comfile.os):00256                 STA     >CMDRC                            ;SAVE RETURN CODE
F5F9                  (       comfile.os):00257         CMDRT2
F5F9 7EF48A           (       comfile.os):00258                 JMP     NEWLIN                            ;NEXT LINE
                      (       comfile.os):00259         ;* READ A CHARACTER FROM THE COMMAND FILE
F5FC                  (       comfile.os):00260         RCCHR
F5FC 3410             (       comfile.os):00261                 PSHS    X                                 ;SAVE X
F5FE B6DCE1           (       comfile.os):00262                 LDA     >CMDDRV                           ;GET CMD FILE DRIVE
F601 B7DCEB           (       comfile.os):00263                 STA     >SDRIVE                           ;SET DRIVE
F604 FCDCE4           (       comfile.os):00264                 LDD     >CMDOFF                           ;GET OFFSET
F607                  (       comfile.os):00265         RCC1
F607 10830200         (       comfile.os):00266                 CMPD    #512                              ;OVER?
F60B 250D             (       comfile.os):00267                 BLO     RCC2                              ;ITS OK
F60D FCDCE2           (       comfile.os):00268                 LDD     >CMDSEC                           ;GET SECTOR
F610 BDE5C6           (       comfile.os):00269                 JSR     FNDLNK                            ;LOOK UP LINK
F613 271E             (       comfile.os):00270                 BEQ     RCC3                              ;END
F615 FDDCE2           (       comfile.os):00271                 STD     >CMDSEC                           ;RESAVE
F618 4F               (       comfile.os):00272                 CLRA    ZERO OFFSET
F619 5F               (       comfile.os):00273                 CLRB    FOR READ
F61A                  (       comfile.os):00274         RCC2
F61A 8EDE00           (       comfile.os):00275                 LDX     #WRKSPC                           ;POINT TO IT
F61D 308B             (       comfile.os):00276                 LEAX    D,X                               ;OFFSET
F61F C30001           (       comfile.os):00277                 ADDD    #1                                ;ADVANCE
F622 FDDCE4           (       comfile.os):00278                 STD     >CMDOFF                           ;RESAVE
F625 3410             (       comfile.os):00279                 PSHS    X                                 ;SAVE REGS
F627 FCDCE2           (       comfile.os):00280                 LDD     >CMDSEC                           ;GET SECTOR
F62A BDE5E3           (       comfile.os):00281                 JSR     RDWRK                             ;READ IT
F62D 3510             (       comfile.os):00282                 PULS    X                                 ;RESTORE
F62F A680             (       comfile.os):00283                 LDA     ,X+                               ;GET CHAR
F631 81FF             (       comfile.os):00284                 CMPA    #$FF                              ;END OF FILE
F633                  (       comfile.os):00285         RCC3
F633 3590             (       comfile.os):00286                 PULS    X,PC
                      (        cubix.asm):01177         ;*
                      (        cubix.asm):01178         ;* MISC SYSTEM CALLS
                      (        cubix.asm):01179         ;*
                      (        cubix.asm):01180         ;* QUERY CONSOLE INPUT DEVICE
F635                  (        cubix.asm):01181         REDIN
F635 B6DC6C           (        cubix.asm):01182                 LDA     >CONIN                            ;LOAD DEVICE INPUT VECTOR
F638 2020             (        cubix.asm):01183                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01184         ;* QUERY CONSOLE OUTPUT DEVICE
F63A                  (        cubix.asm):01185         REDOUT
F63A B6DC6D           (        cubix.asm):01186                 LDA     >CONOUT                           ;LOAD DEVICE OUTPUT VECTOR
F63D 201B             (        cubix.asm):01187                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01188         ;* SET CONSOLE INPUT DEVICE
F63F                  (        cubix.asm):01189         SETIN
F63F 3404             (        cubix.asm):01190                 PSHS    B                                 ;SAVE REGISTER
F641 F6DC6C           (        cubix.asm):01191                 LDB     >CONIN                            ;LOAD OLD INPUT DEVICE
F644 B7DC6C           (        cubix.asm):01192                 STA     >CONIN                            ;SAVE NEW INPUT DEVICE
F647 2008             (        cubix.asm):01193                 BRA     REEXG                             ;SWAP & RETURN
                      (        cubix.asm):01194         ;* SET CONSOLE OUTPUT DEVICE
F649                  (        cubix.asm):01195         SETOUT
F649 3404             (        cubix.asm):01196                 PSHS    B                                 ;SAVE REGISTER
F64B F6DC6D           (        cubix.asm):01197                 LDB     >CONOUT                           ;LOAD OLD OUTPUT DEVICE
F64E B7DC6D           (        cubix.asm):01198                 STA     >CONOUT                           ;SAVE NEW OUTPUT DEVICE
F651                  (        cubix.asm):01199         REEXG
F651 1F98             (        cubix.asm):01200                 TFR     B,A                               ;COPY OLD DEVICE ID TO 'A'
F653 1A04             (        cubix.asm):01201                 ORCC    #4                                ;SET 'Z' CODE
F655 3584             (        cubix.asm):01202                 PULS    B,PC                              ;RESTORE & RETURN
                      (        cubix.asm):01203         ;* SELECT DISK DRIVE
F657                  (        cubix.asm):01204         SELDRV
F657 B7DCEB           (        cubix.asm):01205                 STA     >SDRIVE                           ;SELECT ACTIVE DISK DRIVE
F65A                  (        cubix.asm):01206         RETZ
F65A 1A04             (        cubix.asm):01207                 ORCC    #4                                ;SET 'Z' CODE
F65C 39               (        cubix.asm):01208                 RTS
                      (        cubix.asm):01209         ;* QUERY DEVICE VECTOR
F65D                  (        cubix.asm):01210         QVECT
F65D 3440             (        cubix.asm):01211                 PSHS    U                                 ;SAVE REGISTER
F65F CEDC6E           (        cubix.asm):01212                 LDU     #DITAB                            ;POINT TO TABLE
F662 48               (        cubix.asm):01213                 LSLA                                      ;X2 FOR WORD ENTRIES
F663 ECC6             (        cubix.asm):01214                 LDD     A,U                               ;GET VECTOR
F665 200C             (        cubix.asm):01215                 BRA     RETZ1                             ;AND EXIT
                      (        cubix.asm):01216         ;* SET DEVICE VECTOR
F667                  (        cubix.asm):01217         SVECT
F667 3440             (        cubix.asm):01218                 PSHS    U                                 ;SAVE REGISTER
F669 CEDC6E           (        cubix.asm):01219                 LDU     #DITAB                            ;POINT TO TABLE
F66C 48               (        cubix.asm):01220                 LSLA                                      ;X2  FOR WORD ENTRIES
F66D 33C6             (        cubix.asm):01221                 LEAU    A,U                               ;OFFSET TO ENTRY
F66F ECC4             (        cubix.asm):01222                 LDD     ,U                                ;GET OLD VECTOR VALUE
F671 AFC4             (        cubix.asm):01223                 STX     ,U                                ;SET NEW VECTOR VALUE
F673                  (        cubix.asm):01224         RETZ1
F673 1A04             (        cubix.asm):01225                 ORCC    #4                                ;SET 'Z' CODE
F675 35C0             (        cubix.asm):01226                 PULS    U,PC                              ;RESTORE & RETURN
                      (        cubix.asm):01227         ;*
                      (        cubix.asm):01228         ;* PERFORMS 16 BIT MULTIPLICATION (D=X*D)
                      (        cubix.asm):01229         ;*
F677                  (        cubix.asm):01230         MUL16
F677 3416             (        cubix.asm):01231                 PSHS    D,X                               ;SAVE PARAMETERS
F679 A661             (        cubix.asm):01232                 LDA     1,S
F67B E663             (        cubix.asm):01233                 LDB     3,S
F67D 3D               (        cubix.asm):01234                 MUL
F67E 3406             (        cubix.asm):01235                 PSHS    A,B                               ;RESAVE
F680 A662             (        cubix.asm):01236                 LDA     2,S
F682 E665             (        cubix.asm):01237                 LDB     5,S
F684 3D               (        cubix.asm):01238                 MUL
F685 EBE4             (        cubix.asm):01239                 ADDB    ,S
F687 E7E4             (        cubix.asm):01240                 STB     ,S
F689 A663             (        cubix.asm):01241                 LDA     3,S
F68B E664             (        cubix.asm):01242                 LDB     4,S
F68D 3D               (        cubix.asm):01243                 MUL
F68E EBE4             (        cubix.asm):01244                 ADDB    ,S
F690 E7E4             (        cubix.asm):01245                 STB     ,S
F692 3506             (        cubix.asm):01246                 PULS    A,B                               ;GET RESULT
F694 3264             (        cubix.asm):01247                 LEAS    4,S                               ;SKIP CRAP
F696 39               (        cubix.asm):01248                 RTS
                      (        cubix.asm):01249         ;*
                      (        cubix.asm):01250         ;* PERFORMS 16 BIT DIVISION. (X=X/D, D=REMAINDER)
                      (        cubix.asm):01251         ;*
F697                  (        cubix.asm):01252         DIV16
F697 3416             (        cubix.asm):01253                 PSHS    D,X
F699 CC0000           (        cubix.asm):01254                 LDD     #0
F69C 8E0011           (        cubix.asm):01255                 LDX     #17
F69F                  (        cubix.asm):01256         DIV1
F69F 1CFE             (        cubix.asm):01257                 ANDCC   #$FE
F6A1                  (        cubix.asm):01258         DIV2
F6A1 6963             (        cubix.asm):01259                 ROL     3,S
F6A3 6962             (        cubix.asm):01260                 ROL     2,S
F6A5 301F             (        cubix.asm):01261                 LEAX    -1,X
F6A7 270D             (        cubix.asm):01262                 BEQ     DIV3
F6A9 59               (        cubix.asm):01263                 ROLB
F6AA 49               (        cubix.asm):01264                 ROLA
F6AB 10A3E4           (        cubix.asm):01265                 CMPD    ,S
F6AE 25EF             (        cubix.asm):01266                 BLO     DIV1
F6B0 A3E4             (        cubix.asm):01267                 SUBD    ,S
F6B2 1A01             (        cubix.asm):01268                 ORCC    #1
F6B4 20EB             (        cubix.asm):01269                 BRA     DIV2
F6B6                  (        cubix.asm):01270         DIV3
F6B6 3262             (        cubix.asm):01271                 LEAS    2,S
F6B8 3590             (        cubix.asm):01272                 PULS    X,PC
                      (        cubix.asm):01273         ;* DISK DRIVERS
F6BA                  (        cubix.asm):01274         FORMAT
F6BA AD9FDC94         (        cubix.asm):01275                 JSR     [XFORMAT]
F6BE                  (        cubix.asm):01276         HOME
F6BE 6F44             (        cubix.asm):01277                 CLR     CYL,U                             ;CYLINDER 0
F6C0 6F45             (        cubix.asm):01278                 CLR     HEAD,U                            ;HEAD 0
F6C2 6F46             (        cubix.asm):01279                 CLR     SEC,U                             ;SECTOR 0
F6C4 6E9FDC8E         (        cubix.asm):01280                 JMP     [XHOME]
F6C8                  (        cubix.asm):01281         RDSEC
F6C8 6E9FDC90         (        cubix.asm):01282                 JMP     [XRDSEC]
F6CC                  (        cubix.asm):01283         WRSEC
F6CC 6E9FDC92         (        cubix.asm):01284                 JMP     [XWRSEC]
                      (        cubix.asm):01285         ;* INTERRUPT HANDLERS
F6D0                  (        cubix.asm):01286         SWI
F6D0 6E9FDC96         (        cubix.asm):01287                 JMP     [SWIVEC]
F6D4                  (        cubix.asm):01288         SWI2
F6D4 6E9FDC98         (        cubix.asm):01289                 JMP     [SWI2VEC]
F6D8                  (        cubix.asm):01290         SWI3
F6D8 6E9FDC9A         (        cubix.asm):01291                 JMP     [SWI3VEC]
F6DC                  (        cubix.asm):01292         IRQ
F6DC 6E9FDC9C         (        cubix.asm):01293                 JMP     [IRQVEC]
F6E0                  (        cubix.asm):01294         FIRQ
F6E0 6E9FDC9E         (        cubix.asm):01295                 JMP     [FIRQVEC]
F6E4                  (        cubix.asm):01296         NMI
F6E4 6E9FDCA0         (        cubix.asm):01297                 JMP     [NMIVEC]
                      (        cubix.asm):01298         ;* STRINGS & MESSAGES
F6E8                  (        cubix.asm):01299         IPLFILE
F6E8 535441525455502E (        cubix.asm):01300                 FCC     'STARTUP.*'
     2A
F6F1                  (        cubix.asm):01301         UNCMD
F6F1 556E7265636F676E (        cubix.asm):01302                 FCC     'Unrecognized command'
     697A656420636F6D
     6D616E64
F705                  (        cubix.asm):01303         BADOPM
F705 4F706572616E6420 (        cubix.asm):01304                 FCC     'Operand missing or invalid'
     6D697373696E6720
     6F7220696E76616C
     6964
F71F                  (        cubix.asm):01305         NOTMSG
F71F 46696C65206E6F74 (        cubix.asm):01306                 FCC     'File not found'
     20666F756E64
F72D                  (        cubix.asm):01307         EXIMSG
F72D 46696C6520616C72 (        cubix.asm):01308                 FCC     'File already exists'
     6561647920657869
     737473
F740                  (        cubix.asm):01309         NOSMSG
F740 496E737566666963 (        cubix.asm):01310                 FCC     'Insufficent disk space'
     656E74206469736B
     207370616365
F756                  (        cubix.asm):01311         OREMSG
F756 46696C65206E6F74 (        cubix.asm):01312                 FCC     'File not open for read'
     206F70656E20666F
     722072656164
F76C                  (        cubix.asm):01313         OWEMSG
F76C 46696C65206E6F74 (        cubix.asm):01314                 FCC     'File not open for write'
     206F70656E20666F
     72207772697465
F783                  (        cubix.asm):01315         PROMSG
F783 46696C652070726F (        cubix.asm):01316                 FCC     'File protection violation'
     74656374696F6E20
     76696F6C6174696F
     6E
F79C                  (        cubix.asm):01317         DEVMSG
F79C 496E76616C696420 (        cubix.asm):01318                 FCC     'Invalid device'
     646576696365
F7AA                  (        cubix.asm):01319         DNLMSG
F7AA 446F776E6C6F6164 (        cubix.asm):01320                 FCC     'Download format error'
     20666F726D617420
     6572726F72
                      (        cubix.asm):01321         ;* COMMAND NAME TABLE
F7BF                  (        cubix.asm):01322         CMDNAM
F7BF 84               (        cubix.asm):01323                 FCB     $84
F7C0 464F524D4154     (        cubix.asm):01324                 FCC     'FORMAT'
F7C6 82               (        cubix.asm):01325                 FCB     $82
F7C7 52454144         (        cubix.asm):01326                 FCC     'READ'
F7CB 82               (        cubix.asm):01327                 FCB     $82
F7CC 5752495445       (        cubix.asm):01328                 FCC     'WRITE'
F7D1 82               (        cubix.asm):01329                 FCB     $82
F7D2 46494C4553       (        cubix.asm):01330                 FCC     'FILES'
F7D7 82               (        cubix.asm):01331                 FCB     $82
F7D8 435245415445     (        cubix.asm):01332                 FCC     'CREATE'
F7DE 83               (        cubix.asm):01333                 FCB     $83
F7DF 44454C455445     (        cubix.asm):01334                 FCC     'DELETE'
F7E5 82               (        cubix.asm):01335                 FCB     $82
F7E6 4C4F4144         (        cubix.asm):01336                 FCC     'LOAD'
F7EA 82               (        cubix.asm):01337                 FCB     $82
F7EB 53415645         (        cubix.asm):01338                 FCC     'SAVE'
F7EF 82               (        cubix.asm):01339                 FCB     $82
F7F0 52554E           (        cubix.asm):01340                 FCC     'RUN'
F7F3 82               (        cubix.asm):01341                 FCB     $82
F7F4 52455455524E     (        cubix.asm):01342                 FCC     'RETURN'
F7FA 82               (        cubix.asm):01343                 FCB     $82
F7FB 534554           (        cubix.asm):01344                 FCC     'SET'
F7FE 82               (        cubix.asm):01345                 FCB     $82
F7FF 53484F57         (        cubix.asm):01346                 FCC     'SHOW'
F803 82               (        cubix.asm):01347                 FCB     $82
F804 444F574E4C4F4144 (        cubix.asm):01348                 FCC     'DOWNLOAD'
F80C 82               (        cubix.asm):01349                 FCB     $82
F80D 434F4E4E454354   (        cubix.asm):01350                 FCC     'CONNECT'
F814 80               (        cubix.asm):01351                 FCB     $80
                      (        cubix.asm):01352         ;* COMMAND ADDRESS TABLE
F815                  (        cubix.asm):01353         CMDADR
F815 EBDD             (        cubix.asm):01354                 FDB     INIT
F817 ECE4             (        cubix.asm):01355                 FDB     CREAD
F819 ED14             (        cubix.asm):01356                 FDB     CWRITE
F81B ED44             (        cubix.asm):01357                 FDB     FILES
F81D ED68             (        cubix.asm):01358                 FDB     CREFIL
F81F ED7F             (        cubix.asm):01359                 FDB     DELFIL
F821 EE30             (        cubix.asm):01360                 FDB     LODFIL
F823 EE61             (        cubix.asm):01361                 FDB     SAVFIL
F825 E1DE             (        cubix.asm):01362                 FDB     RUN
F827 EEC2             (        cubix.asm):01363                 FDB     RETURN
F829 EFDA             (        cubix.asm):01364                 FDB     SET
F82B F112             (        cubix.asm):01365                 FDB     SHOW
F82D EEE8             (        cubix.asm):01366                 FDB     DNLD
F82F EFB6             (        cubix.asm):01367                 FDB     CNCT
     000E             (        cubix.asm):01368         NUMCMD          EQU (*-CMDADR)/2                  ;NUMBER OF COMMANDS
                      (        cubix.asm):01369         ;* APPLICATION PROGRAM INTERFACE ADDRESS TABLE
F831                  (        cubix.asm):01370         SSRTAB
F831 E193             (        cubix.asm):01371                 FDB     REENT                             ;00-DOS RE-ENTRY
                      (        cubix.asm):01372         ;* PARAM. & LINE INPUT
F833 E48C             (        cubix.asm):01373                 FDB     GLINE                             ;01-GET LINE/PROMPT
F835 E489             (        cubix.asm):01374                 FDB     GLFCR                             ;02-GET LINE/NEW LINE
F837 E491             (        cubix.asm):01375                 FDB     GLNOP                             ;03-GET LINE/NO PROMPT
F839 E4C3             (        cubix.asm):01376                 FDB     SKIP                              ;04-SKIP TO NEXT NON-BLANK, 'Z' IF EOL
F83B E4D0             (        cubix.asm):01377                 FDB     TSTERM                            ;05-GET CHR(Y+), TEST FOR TERMINATOR
F83D E43D             (        cubix.asm):01378                 FDB     GETDEC                            ;06-GET DECIMAL NUMBER
F83F E403             (        cubix.asm):01379                 FDB     GETHEX                            ;07-GET HEX NUMBER
F841 E3F8             (        cubix.asm):01380                 FDB     GETNUM                            ;08-GET DECIMAL OR HEX VALUE
F843 E35E             (        cubix.asm):01381                 FDB     GETNAM                            ;09-GET FILENAME
F845 E357             (        cubix.asm):01382                 FDB     GETVAL                            ;10-GET & INSURE SINGLE FILE
F847 E27D             (        cubix.asm):01383                 FDB     GETSNA                            ;11-GET FILENAME/NO TYPE
F849 E301             (        cubix.asm):01384                 FDB     GETSYS                            ;12-GET FILENAME/NO TYPE/DEFAULT SYSTEM
F84B E304             (        cubix.asm):01385                 FDB     GETSDI                            ;13-GET FILENAME/NO TYPE/DEFAULT(X)
F84D E397             (        cubix.asm):01386                 FDB     GETDIR                            ;14-GET DIRECTORY NAME
F84F E39A             (        cubix.asm):01387                 FDB     GETDIR1                           ;15-GET DIRECTORY, DEFAULT(X)
F851 E3E6             (        cubix.asm):01388                 FDB     GETDRV                            ;16-GET DRIVE ID
F853 F048             (        cubix.asm):01389                 FDB     GETATR                            ;17-GET ATTRIBUTES
F855 E4EC             (        cubix.asm):01390                 FDB     TLOOK                             ;18-TABLE LOOKUP
F857 E30A             (        cubix.asm):01391                 FDB     COMNAM                            ;19-COMPARE NAMES
F859 E343             (        cubix.asm):01392                 FDB     VALID                             ;20-TEST FOR VALID AS SINGLE?
                      (        cubix.asm):01393         ;* CONSOLE OUTPUT
F85B E579             (        cubix.asm):01394                 FDB     SPACE                             ;21-OUTPUT SPACE
F85D E56F             (        cubix.asm):01395                 FDB     LFCR                              ;22-OUTPUT LFCR
F85F E55B             (        cubix.asm):01396                 FDB     WRSTR                             ;23-OUTPUT STRING(X)
F861 E535             (        cubix.asm):01397                 FDB     WRLIN                             ;24-OUTPUT STRING(PC)/NO LFCR
F863 E565             (        cubix.asm):01398                 FDB     WRMSG                             ;25-OUTPUT STRING(PC)/LFCR
F865 E465             (        cubix.asm):01399                 FDB     WRDEC                             ;26-OUTPUT WORD(D) DECIMAL
F867 E52C             (        cubix.asm):01400                 FDB     WRHEXW                            ;27-OUTPUT WORD(D) IN HEX
F869 E541             (        cubix.asm):01401                 FDB     WRHEX                             ;28-OUTPUT BYTE(A) IN HEX
F86B E54F             (        cubix.asm):01402                 FDB     HOUT                              ;29-OUTPUT NIBBLE(A) IN HEX
F86D E6BD             (        cubix.asm):01403                 FDB     SHOSAV                            ;30-DISPLAY SAVED FILENAME
F86F E6D0             (        cubix.asm):01404                 FDB     SHONAM                            ;31-DISPLAY FILENAME(X)
F871 F23C             (        cubix.asm):01405                 FDB     SHOTAB                            ;32-SHOW TABLE(X) ENTRY(A)
                      (        cubix.asm):01406         ;* SERIAL DEVICE I/O
F873 E581             (        cubix.asm):01407                 FDB     PUTCHR                            ;33-OUTPUT CHAR(A)
F875 E5C1             (        cubix.asm):01408                 FDB     GETCHR                            ;34-GET A CHAR
F877 E5BA             (        cubix.asm):01409                 FDB     TSTCHR                            ;35-TEST FOR CHAR
F879 E588             (        cubix.asm):01410                 FDB     WRDEV                             ;36-OUTPUT CHAR(A) TO DEVICE(B)
F87B E5A3             (        cubix.asm):01411                 FDB     RDDEV                             ;37-GET CHAR FROM DEVICE(B)
F87D E5A8             (        cubix.asm):01412                 FDB     TSTDEV                            ;38-TEST FOR CHAR FROM DEV(B)
F87F F635             (        cubix.asm):01413                 FDB     REDIN                             ;39-READ INPUT DEVICE NUMBER
F881 F63A             (        cubix.asm):01414                 FDB     REDOUT                            ;40-READ OUTPUT DEVICE NUMBER
F883 F63F             (        cubix.asm):01415                 FDB     SETIN                             ;41-SET INPUT DEVICE
F885 F649             (        cubix.asm):01416                 FDB     SETOUT                            ;42-SET OUTPUT DEVICE
                      (        cubix.asm):01417         ;* CANNED ERROR MESSAGES
F887 E29F             (        cubix.asm):01418                 FDB     BADOPR                            ;43-OPERAND MISSING OR INVALID
F889 E644             (        cubix.asm):01419                 FDB     NOTFND                            ;44-FILE NOT FOUND
F88B E893             (        cubix.asm):01420                 FDB     PROERR                            ;45-PROTECTION VIOLATION
F88D E89C             (        cubix.asm):01421                 FDB     ORERR                             ;46-FILE NOT OPEN FOR READ
F88F E910             (        cubix.asm):01422                 FDB     OWERR                             ;47-FILE NOT OPEN FOR WRITE
F891 E716             (        cubix.asm):01423                 FDB     FEXISTS                           ;48-FILE ALREADY EXISTS
F893 E7B9             (        cubix.asm):01424                 FDB     NOSPAC                            ;49-INSUFFICENT DISK SPACE
F895 E59B             (        cubix.asm):01425                 FDB     BADDEV                            ;50-INVALID DEVICE
F897 EF88             (        cubix.asm):01426                 FDB     LODERR                            ;51-DOWNLOAD FORMAT ERROR
F899 E64A             (        cubix.asm):01427                 FDB     FILERR                            ;52-ISSUE ERROR MSG(Y) FOR SAVED FILE
                      (        cubix.asm):01428         ;* FILE I/O
F89B EE24             (        cubix.asm):01429                 FDB     BLOAD                             ;53-LOAD COMPLETE FILE TO MEMORY
F89D EE59             (        cubix.asm):01430                 FDB     BSAVE                             ;54-SAVE COMPLETE FILE FROM MEMORY
F89F E7F2             (        cubix.asm):01431                 FDB     OPENR                             ;55-OPEN A FILE FOR READ
F8A1 E8CE             (        cubix.asm):01432                 FDB     OPENW                             ;56-OPEN A FILE FOR WRITE
F8A3 E956             (        cubix.asm):01433                 FDB     CLOSE                             ;57-CLOSE A FILE
F8A5 E85F             (        cubix.asm):01434                 FDB     READB                             ;58-READ BLOCK FROM FILE
F8A7 E814             (        cubix.asm):01435                 FDB     READC                             ;59-READ CHAR FROM FILE
F8A9 E918             (        cubix.asm):01436                 FDB     WRITEB                            ;60-WRITE A BLOCK TO FILE
F8AB E8F1             (        cubix.asm):01437                 FDB     WRITEC                            ;61-WRITE A CHAR TO FILE
F8AD E8A9             (        cubix.asm):01438                 FDB     REWIND                            ;62-RESET FILE TO BEGINNING
F8AF E9A5             (        cubix.asm):01439                 FDB     SEEKREL                           ;63-SEEK RELATIVE POSITION IN FILE
F8B1 E9A2             (        cubix.asm):01440                 FDB     SEEKABS                           ;64-SEEK ABSOLUTE LOCATION IN FILE
F8B3 E9F3             (        cubix.asm):01441                 FDB     FTELL                             ;65-RETURN POSITION IN FILE
F8B5 EA1F             (        cubix.asm):01442                 FDB     SUSPEND                           ;66-SUSPEND FILE OPERATIONS
F8B7 EA71             (        cubix.asm):01443                 FDB     RESUME                            ;67-RESUME FILE OPERATIONS
                      (        cubix.asm):01444         ;* FILE SYSTEM MAINTAINENCE
F8B9 E678             (        cubix.asm):01445                 FDB     LOCDIR                            ;68-LOCATE FILE IN DIRECTORY, NO ERROR/MESSAGE
F8BB E640             (        cubix.asm):01446                 FDB     LOCERR                            ;69-LOCATE FILE IN DIR/ISSUE ERROR IF NOT FOUND
F8BD E889             (        cubix.asm):01447                 FDB     LOCRED                            ;70-LOCATE FILE WITH INTENT TO READ
F8BF E8B7             (        cubix.asm):01448                 FDB     LOCWRI                            ;71-LOCATE FILE WITH INTENT TO WRITE
F8C1 E70A             (        cubix.asm):01449                 FDB     CREATE                            ;72-CREATE A FILE
F8C3 ED82             (        cubix.asm):01450                 FDB     DELETE                            ;73-DELETE A FILE
F8C5 EFF3             (        cubix.asm):01451                 FDB     SETDEF                            ;74-SET DEFAULT DIRECTORY
F8C7 F005             (        cubix.asm):01452                 FDB     SETCMD                            ;75-SET COMMAND DIRECTORY
F8C9 F657             (        cubix.asm):01453                 FDB     SELDRV                            ;76-SET CURRENT OS DRIVE
F8CB E5C6             (        cubix.asm):01454                 FDB     FNDLNK                            ;77-LOCATE LINK FOR SECTOR
F8CD EE48             (        cubix.asm):01455                 FDB     LCHAIN                            ;78-LOAD CHAIN OF SECTOR TO MEMORY
F8CF E790             (        cubix.asm):01456                 FDB     FRESEC                            ;79-ALLOCATE A FREE SECTOR
F8D1 ED9B             (        cubix.asm):01457                 FDB     UNCHAIN                           ;80-RELEASE SECTOR CHAIN
F8D3 E6FB             (        cubix.asm):01458                 FDB     DRVSIZ                            ;81-CALCULATE SIZE OF DISK(A)
F8D5 E6F8             (        cubix.asm):01459                 FDB     CURSIZ                            ;82-CALCULATE SIZE OF CURRENT DISK
F8D7 F325             (        cubix.asm):01460                 FDB     CALFRE                            ;83-CALCULATE # FREE SECTORS ON DISK
F8D9 E5E3             (        cubix.asm):01461                 FDB     RDWRK                             ;84-READ WORK SECTOR INTO DOS
F8DB E787             (        cubix.asm):01462                 FDB     CHGWRK                            ;85-INDICATE WORK SECTOR CHANGED
F8DD E61A             (        cubix.asm):01463                 FDB     WRTST                             ;86-WRITE WORK SECTOR IF UPDATED
F8DF E61F             (        cubix.asm):01464                 FDB     WRWRK                             ;87-WRITE WORK SECTOR UNCONDITIONALLY
F8E1 E60A             (        cubix.asm):01465                 FDB     PURGE                             ;88-CLEAR WORK SECTOR & FORCE READ
F8E3 EAEF             (        cubix.asm):01466                 FDB     GETCTL1                           ;89-GET CONTROL BLOCK
F8E5 EAEC             (        cubix.asm):01467                 FDB     GETCTL                            ;90-GET CTRL BLK FOR SELECTED
F8E7 EAA5             (        cubix.asm):01468                 FDB     SECTOR                            ;91-SET UP CTRL-BLOCK FROM DISK ID
F8E9 EAC5             (        cubix.asm):01469                 FDB     RDISK                             ;92-READ SECTOR(D) TO MEM(X) FROM DISK
F8EB EAF8             (        cubix.asm):01470                 FDB     WDISK                             ;93-WRITE SECTOR(D) FROM MEM(X) TO DISK
F8ED E69C             (        cubix.asm):01471                 FDB     DISDIR                            ;94-DISPLAY DISK DIRECTORY
                      (        cubix.asm):01472         ;* DIRECT DISK ACCESS
F8EF E004             (        cubix.asm):01473                 FDB     DOINIT                            ;95-INIT HARDWARE
F8F1 F6BE             (        cubix.asm):01474                 FDB     HOME                              ;96-HOME HEAD ON DISK
F8F3 F6C8             (        cubix.asm):01475                 FDB     RDSEC                             ;97-READ SECTOR FROM TRACK
F8F5 F6CC             (        cubix.asm):01476                 FDB     WRSEC                             ;98-WRITE SECTOR FROM TRACK
F8F7 F6BA             (        cubix.asm):01477                 FDB     FORMAT                            ;99-FORMAT DISK
                      (        cubix.asm):01478         ;* MISC DOS ROUTINES
F8F9 E1B4             (        cubix.asm):01479                 FDB     EXECMD                            ;100-EXECUTE DOS COMMAND
F8FB E1A9             (        cubix.asm):01480                 FDB     TMPENT                            ;101-TEMPORARY DOS ENTRY
F8FD F65D             (        cubix.asm):01481                 FDB     QVECT                             ;102-QUERY DEVICE VECTOR
F8FF F667             (        cubix.asm):01482                 FDB     SVECT                             ;103-SET DEVICE VECTOR
F901 F0F6             (        cubix.asm):01483                 FDB     SETFLG                            ;104-SET FLAG
F903 F0FC             (        cubix.asm):01484                 FDB     CLRFLG                            ;105-CLEAR FLAG
F905 F588             (        cubix.asm):01485                 FDB     SAVPRM                            ;106-SET COMMAND FILE PARAMETERS
F907 F677             (        cubix.asm):01486                 FDB     MUL16                             ;107-16 BIT MULTIPLY (D=X*D)
F909 F697             (        cubix.asm):01487                 FDB     DIV16                             ;108-16 BIT DIVISION (X=X/D, D=REMAINDER)
F90B E086             (        cubix.asm):01488                 FDB     DMPREG                            ;109-DISPLAY REGISTERS
F90D EF30             (        cubix.asm):01489                 FDB     DNLDEV                            ;110-DOWNLOAD FROM DEVICE
     006F             (        cubix.asm):01490         NUMSSR          EQU (*-SSRTAB)/2                  ;# SSR'S IMPLEMENTED
                      (        cubix.asm):01491         ;*
                      (        cubix.asm):01492         ;* HARDWARE DEPENDANT I/O DRIVERS
                      (        cubix.asm):01493         ;*
                      (        cubix.asm):01494                 IFDEF   nhyodyne
                      (        cubix.asm):01495                 INCLUDE ../nhyodyne/drivers.asm
                      (../nhyodyne/drive):00001         ;       TITLE   I/O DRIVERS
                      (../nhyodyne/drive):00002         ;***************************************************************
                      (../nhyodyne/drive):00003         ;*     Sample I/O drivers for the CUBIX operating system.      *
                      (../nhyodyne/drive):00004         ;*-------------------------------------------------------------*
                      (../nhyodyne/drive):00005         ;* The drivers are designed to deal with four 6551 type serial *
                      (../nhyodyne/drive):00006         ;* devices, and a 765 type floppy disk controller controlling  *
                      (../nhyodyne/drive):00007         ;* up to four standard 40 track single or double sided floppy  *
                      (../nhyodyne/drive):00008         ;* diskette drives.                                            *
                      (../nhyodyne/drive):00009         ;*-------------------------------------------------------------*
                      (../nhyodyne/drive):00010         ;* Although these drivers are fully functional and may be used *
                      (../nhyodyne/drive):00011         ;* in a port of the system, their primary purpose is intended  *
                      (../nhyodyne/drive):00012         ;* to be as an example of CUBIX to I/O driver interfaceing. As *
                      (../nhyodyne/drive):00013         ;* such the device control side of the drivers (Which will be  *
                      (../nhyodyne/drive):00014         ;* VERY system specific) has been kept very simple and easy to *
                      (../nhyodyne/drive):00015         ;* follow. In particular, no interrupt lines are used, and all *
                      (../nhyodyne/drive):00016         ;* I/O operations are accomplished via software polling.       *
                      (../nhyodyne/drive):00017         ;*-------------------------------------------------------------*
                      (../nhyodyne/drive):00018         ;*             Copyright 1983-2004 Dave Dunfield               *
                      (../nhyodyne/drive):00019         ;***************************************************************
                      (../nhyodyne/drive):00020         ;*
                      (../nhyodyne/drive):00021         ;* CUBIX SYSTEM ADDRESSES
                      (../nhyodyne/drive):00022         ;*
     E99F             (../nhyodyne/drive):00023         DRIVERS         EQU $E99F               FIRST FREE LOCATION IN ROM
                      (../nhyodyne/drive):00024         ;* $E99F FOR NO VDU, $E09F FOR VDU
                      (../nhyodyne/drive):00025         
                      (../nhyodyne/drive):00026         ;*
                      (../nhyodyne/drive):00027         ;* DISK CONTROL BLOCK FORMAT
                      (../nhyodyne/drive):00028         ;*
                      (../nhyodyne/drive):00029         ;       ORG     0
                      (../nhyodyne/drive):00030         ;DRIVE  RMB     1               DRIVE ID (ADDRESS)
                      (../nhyodyne/drive):00031         ;NCYL   RMB     1               NUMBER OF CYLINDERS
                      (../nhyodyne/drive):00032         ;NHEAD  RMB     1               NUMBER OF HEADS
                      (../nhyodyne/drive):00033         ;NSEC   RMB     1               NUMBER OF SECTORS/TRACK
                      (../nhyodyne/drive):00034         ;CYL    RMB     1               CURRENT CYLINDER
                      (../nhyodyne/drive):00035         ;HEAD   RMB     1               CURRENT HEAD
                      (../nhyodyne/drive):00036         ;SEC    RMB     1               CURRENT SECTOR
                      (../nhyodyne/drive):00037         ;*
                      (../nhyodyne/drive):00038         ;*
                      (../nhyodyne/drive):00039         ;* INITIALIZE SYSTEM HARDWARE. ON ENTRY 'Y'
                      (../nhyodyne/drive):00040         ;* POINTS TO SYSTEM TABLE TO BE FILLED IN.
                      (../nhyodyne/drive):00041         ;*
                      (../nhyodyne/drive):00042         ;* INITIALIZE CUBIX SYSTEM TABLE
F90F                  (../nhyodyne/drive):00043         HWINIT
F90F 8EFF09           (../nhyodyne/drive):00044                 LDX     #RITAB          POINT TO OUR TABLE
F912 C667             (../nhyodyne/drive):00045                 LDB     #RISIZ          SIZE OF TABLE
F914                  (../nhyodyne/drive):00046         HWIN1
F914 A680             (../nhyodyne/drive):00047                 LDA     ,X+             GET A BYTE FROM TABLE
F916 A7A0             (../nhyodyne/drive):00048                 STA     ,Y+             WRITE IT TO CUBIX RAM
F918 5A               (../nhyodyne/drive):00049                 DECB    REDUCE COUNT
F919 26F9             (../nhyodyne/drive):00050                 BNE     HWIN1           MOVE ENTIRE TABLE
                      (../nhyodyne/drive):00051         
F91B BDF929           (../nhyodyne/drive):00052                 JSR     SERIALINIT
F91E BDF953           (../nhyodyne/drive):00053                 JSR     PPIDE_INIT
                      (../nhyodyne/drive):00054         ;*      JSR     SETUPDRIVE
F921 39               (../nhyodyne/drive):00055                 RTS
                      (../nhyodyne/drive):00056         
                      (../nhyodyne/drive):00057         ;* NULL DEVICE DRIVERS
F922                  (../nhyodyne/drive):00058         RDNULL
F922 86FF             (../nhyodyne/drive):00059                 LDA     #$FF            INDICATE NO CHARACTER
F924                  (../nhyodyne/drive):00060         WRNULL
F924 39               (../nhyodyne/drive):00061                 RTS     IGNORE OPERATION
                      (../nhyodyne/drive):00062         
                      (../nhyodyne/drive):00063         ;*
                      (../nhyodyne/drive):00064         ;* FORMAT DISK ('U' POINTS TO DCB), INTERLEAVE FACTOR IN 'A'
                      (../nhyodyne/drive):00065         ;*
F925                  (../nhyodyne/drive):00066         DFORMAT
                      (../nhyodyne/drive):00067         ;*      LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00068         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00069         ;*      BNE     NOTFDB                  ;
                      (../nhyodyne/drive):00070         ;*      JMP     FORMFL                  ; DIRECT ATTACHED FLOPPY FORMAT
                      (../nhyodyne/drive):00071         ;*NOTFDB:
F925 39               (../nhyodyne/drive):00072                 RTS
                      (../nhyodyne/drive):00073         
                      (../nhyodyne/drive):00074         ;*
                      (../nhyodyne/drive):00075         ;* HOME HEAD ON DRIVE ('U' POINTS TO DCB)
                      (../nhyodyne/drive):00076         ;*
F926                  (../nhyodyne/drive):00077         DHOME
                      (../nhyodyne/drive):00078         ;*      LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00079         ;*      CMPA    #$01                    ; DRIVE A?
                      (../nhyodyne/drive):00080         ;*      BNE     NOTHDB                  ;
                      (../nhyodyne/drive):00081         ;*      LDAA    #$00
                      (../nhyodyne/drive):00082         ;*      JMP     SETTRACK                ; DIRECT ATTACHED FLOPPY HOME
                      (../nhyodyne/drive):00083         ;*NOTHDB:
F926 8603             (../nhyodyne/drive):00084                 LDA     #$03                              ; HOME DISK
                      (../nhyodyne/drive):00085         ;       JSR     ECB_OUTCHAR             ;
                      (../nhyodyne/drive):00086         ;       LDA     DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00087         ;       JSR     ECB_ENC_OUTCHAR         ; SEND TO Z80
F928 39               (../nhyodyne/drive):00088                 RTS
                      (../nhyodyne/drive):00089         
                      (../nhyodyne/drive):00090         
                      (../nhyodyne/drive):00091         ;*
                      (../nhyodyne/drive):00092         ;* READ A SECTOR, FROM DISK ('U' POINTS TO DCB) TO MEMORY(X)
                      (../nhyodyne/drive):00093         ;*
F929                  (../nhyodyne/drive):00094         DRDSEC
                      (../nhyodyne/drive):00095         ;*      JSR     SEGDISPLAY
                      (../nhyodyne/drive):00096         
                      (../nhyodyne/drive):00097         ;       LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00098         ;*      CMPA    #$00                    ; DRIVE A?
                      (../nhyodyne/drive):00099         ;*      BNE     NOTRDA                  ;
                      (../nhyodyne/drive):00100         ;JMP    Z80RDRIVE               ; USE Z80 A:
                      (../nhyodyne/drive):00101         ;*NOTRDA
                      (../nhyodyne/drive):00102         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00103         ;*      BNE     NOTRDB                  ;
                      (../nhyodyne/drive):00104         ;*      JMP     READFL                  ; USE DIRECT ATTACHED FLOPPY
                      (../nhyodyne/drive):00105         ;*NOTRDB
                      (../nhyodyne/drive):00106         ;*      CMPA    #$02                    ; DRIVE C?
                      (../nhyodyne/drive):00107         ;*      BNE     NOTRDC                  ;
                      (../nhyodyne/drive):00108         ;*      JMP     Z80RDRIVE               ; USE Z80 C:
                      (../nhyodyne/drive):00109         ;*NOTRDC
                      (../nhyodyne/drive):00110         ;*      CMPA    #$03                    ; DRIVE D?
                      (../nhyodyne/drive):00111         ;*      BNE     NOTRDD                  ;
                      (../nhyodyne/drive):00112         ;*      JMP     IDE_READ_SECTOR         ; USE DIRECT ATTACHED IDE
                      (../nhyodyne/drive):00113         ;*NOTRDD
                      (../nhyodyne/drive):00114         ;*      RTS
                      (../nhyodyne/drive):00115         
                      (../nhyodyne/drive):00116         
                      (../nhyodyne/drive):00117         ;*
                      (../nhyodyne/drive):00118         ;* WRITE A SECTOR TO DISK ('U' POINTS TO DCB) FROM MEMORY(X)
                      (../nhyodyne/drive):00119         ;*
F929                  (../nhyodyne/drive):00120         DWRSEC
                      (../nhyodyne/drive):00121         ;*      JSR     SEGDISPLAY
                      (../nhyodyne/drive):00122         ;       LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00123         ;*      CMPA    #$00                    ; DRIVE A?
                      (../nhyodyne/drive):00124         ;*      BNE     NOTWDA                  ;
                      (../nhyodyne/drive):00125         ;       JMP     Z80WDRIVE               ; USE Z80 A:
                      (../nhyodyne/drive):00126         ;*NOTWDA
                      (../nhyodyne/drive):00127         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00128         ;*      BNE     NOTWDB                  ;
                      (../nhyodyne/drive):00129         ;*      JMP     WRITEFL                 ; USE DIRECT ATTACHED FLOPPY
                      (../nhyodyne/drive):00130         ;*NOTWDB
                      (../nhyodyne/drive):00131         ;*      CMPA    #$02                    ; DRIVE C?
                      (../nhyodyne/drive):00132         ;*      BNE     NOTWDC                  ;
                      (../nhyodyne/drive):00133         ;*      JMP     Z80WDRIVE               ; USE Z80 C:
                      (../nhyodyne/drive):00134         ;*NOTWDC
                      (../nhyodyne/drive):00135         ;*      CMPA    #$03                    ; DRIVE D?
                      (../nhyodyne/drive):00136         ;*      BNE     NOTWDD                  ;
                      (../nhyodyne/drive):00137         ;*      JMP     IDE_WRITE_SECTOR        ; USE DIRECT ATTACHED IDE
                      (../nhyodyne/drive):00138         ;*NOTWDD
                      (../nhyodyne/drive):00139         ;*      RTS
                      (../nhyodyne/drive):00140         
                      (../nhyodyne/drive):00141         
                      (../nhyodyne/drive):00142                 INCLUDE ../nhyodyne/cubix_serial.asm
                      (../nhyodyne/cubix):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00002         ;
                      (../nhyodyne/cubix):00003         ;       CUBIX serial drivers for 6809 IO card
                      (../nhyodyne/cubix):00004         ;
                      (../nhyodyne/cubix):00005         ;       Entry points:
                      (../nhyodyne/cubix):00006         ;               SERIALINIT  - called during OS init
                      (../nhyodyne/cubix):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      (../nhyodyne/cubix):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      (../nhyodyne/cubix):00009         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00010         ;
                      (../nhyodyne/cubix):00011         ;*
                      (../nhyodyne/cubix):00012         ;*        HARDWARE I/O ADDRESSES
                      (../nhyodyne/cubix):00013         ;*
                      (../nhyodyne/cubix):00014         ; UART 16C550 SERIAL
     FE68             (../nhyodyne/cubix):00015         UART0           EQU $FE68                         ; DATA IN/OUT
     FE69             (../nhyodyne/cubix):00016         UART1           EQU $FE69                         ; CHECK RX
     FE6A             (../nhyodyne/cubix):00017         UART2           EQU $FE6A                         ; INTERRUPTS
     FE6B             (../nhyodyne/cubix):00018         UART3           EQU $FE6B                         ; LINE CONTROL
     FE6C             (../nhyodyne/cubix):00019         UART4           EQU $FE6C                         ; MODEM CONTROL
     FE6D             (../nhyodyne/cubix):00020         UART5           EQU $FE6D                         ; LINE STATUS
     FE6E             (../nhyodyne/cubix):00021         UART6           EQU $FE6E                         ; MODEM STATUS
     FE6F             (../nhyodyne/cubix):00022         UART7           EQU $FE6F                         ; SCRATCH REG.
                      (../nhyodyne/cubix):00023         
                      (../nhyodyne/cubix):00024         
                      (../nhyodyne/cubix):00025         ;__SERIALINIT____________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00026         ;
                      (../nhyodyne/cubix):00027         ;       INITIALIZE SERIAL PORTS
                      (../nhyodyne/cubix):00028         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00029         ;
F929                  (../nhyodyne/cubix):00030         SERIALINIT:
                      (../nhyodyne/cubix):00031         ; these are all set by CP/M prior to activating the 6809 card. If 6809 is the primary CPU, these need to be set
                      (../nhyodyne/cubix):00032         ;       LDA             #$80            ;
                      (../nhyodyne/cubix):00033         ;       STA             UART3           ; SET DLAB FLAG
                      (../nhyodyne/cubix):00034         ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (../nhyodyne/cubix):00035         ;       STA             UART0           ; save baud rate
                      (../nhyodyne/cubix):00036         ;       LDA             #00                     ;
                      (../nhyodyne/cubix):00037         ;       STA             UART1           ;
                      (../nhyodyne/cubix):00038         ;       LDA             #03                     ;
                      (../nhyodyne/cubix):00039         ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (../nhyodyne/cubix):00040         ;       STA             UART4           ;
F929 39               (../nhyodyne/cubix):00041                 RTS
                      (../nhyodyne/cubix):00042         
                      (../nhyodyne/cubix):00043         
                      (../nhyodyne/cubix):00044         
                      (../nhyodyne/cubix):00045         ;__WRSER1________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00046         ;
                      (../nhyodyne/cubix):00047         ;       WRITE CHARACTER(A) TO UART
                      (../nhyodyne/cubix):00048         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00049         ;
F92A                  (../nhyodyne/cubix):00050         WRSER1
F92A 3404             (../nhyodyne/cubix):00051                 PSHS    B
                      (../nhyodyne/cubix):00052         !
F92C B6FE6D           (../nhyodyne/cubix):00053                 LDA     UART5                             ; READ LINE STATUS REGISTER
F92F 8420             (../nhyodyne/cubix):00054                 ANDA    #$20                              ; TEST IF UART IS READY TO SEND (BIT 5)
F931 8100             (../nhyodyne/cubix):00055                 CMPA    #$00
F933 27F7             (../nhyodyne/cubix):00056                 BEQ     <                                 ; IF NOT REPEAT
F935 B7FE68           (../nhyodyne/cubix):00057                 STA     UART0                             ; THEN WRITE THE CHAR TO UART
F938 3584             (../nhyodyne/cubix):00058                 PULS    B,PC
                      (../nhyodyne/cubix):00059         
                      (../nhyodyne/cubix):00060         ;__RDSER1________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00061         ;
                      (../nhyodyne/cubix):00062         ;       READ CHARACTER FROM UART TO (A)
                      (../nhyodyne/cubix):00063         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00064         ;
F93A                  (../nhyodyne/cubix):00065         RDSER1
F93A B6FE6D           (../nhyodyne/cubix):00066                 LDA     UART5                             ; READ LINE STATUS REGISTER
F93D 8401             (../nhyodyne/cubix):00067                 ANDA    #$01                              ; TEST IF DATA IN RECEIVE BUFFER
F93F 8100             (../nhyodyne/cubix):00068                 CMPA    #$00
F941 2706             (../nhyodyne/cubix):00069                 BEQ     RDSER1N                           ; NO DATA
F943 B6FE68           (../nhyodyne/cubix):00070                 LDA     UART0                             ; THEN READ THE CHAR FROM THE UART
F946 1A04             (../nhyodyne/cubix):00071                 ORCC    #%00000100                        ; SET 'Z'
F948 39               (../nhyodyne/cubix):00072                 RTS
F949                  (../nhyodyne/cubix):00073         RDSER1N
F949 86FF             (../nhyodyne/cubix):00074                 LDA     #$FF                              ;
F94B 39               (../nhyodyne/cubix):00075                 RTS                                       ;
                      (../nhyodyne/drive):00143                 INCLUDE ../nhyodyne/cubix_ide.asm
                      (../nhyodyne/cubix):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00002         ;
                      (../nhyodyne/cubix):00003         ;       CUBIX IDE disk drivers for direct attached disk-io card
                      (../nhyodyne/cubix):00004         ;
                      (../nhyodyne/cubix):00005         ;       Entry points:
                      (../nhyodyne/cubix):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (../nhyodyne/cubix):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (../nhyodyne/cubix):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (../nhyodyne/cubix):00009         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00010         ;
     FE60             (../nhyodyne/cubix):00011         PPIDE_PPI       = $FE60                           ; PORT A
                      (../nhyodyne/cubix):00012         ;
     FE60             (../nhyodyne/cubix):00013         PPIDELO         = PPIDE_PPI+0                     ; LSB
     FE61             (../nhyodyne/cubix):00014         PPIDEHI         = PPIDE_PPI+1                     ; MSB
     FE62             (../nhyodyne/cubix):00015         PPIDECNTRL      = PPIDE_PPI+2                     ; CONTROL SIGNALS
     FE63             (../nhyodyne/cubix):00016         PPIDEPPIC       = PPIDE_PPI+3                     ; CONTROL BYTE PPI 82C55
                      (../nhyodyne/cubix):00017         
     0001             (../nhyodyne/cubix):00018         PPIDE_A0_LINE   = $01                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (../nhyodyne/cubix):00019         PPIDE_A1_LINE   = $02                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (../nhyodyne/cubix):00020         PPIDE_A2_LINE   = $04                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (../nhyodyne/cubix):00021         PPIDE_CS0_LINE  = $08                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (../nhyodyne/cubix):00022         PPIDE_CS1_LINE  = $10                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (../nhyodyne/cubix):00023         PPIDE_WR_LINE   = $20                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (../nhyodyne/cubix):00024         PPIDE_RD_LINE   = $40                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (../nhyodyne/cubix):00025         PPIDE_RST_LINE  = $80                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (../nhyodyne/cubix):00026         
     0008             (../nhyodyne/cubix):00027         PPIDE_DATA      = PPIDE_CS0_LINE
     0009             (../nhyodyne/cubix):00028         PPIDE_ERR       = PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (../nhyodyne/cubix):00029         PPIDE_SEC_CNT   = PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (../nhyodyne/cubix):00030         PPIDE_LBALOW    = PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (../nhyodyne/cubix):00031         PPIDE_LBAMID    = PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (../nhyodyne/cubix):00032         PPIDE_LBAHI     = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (../nhyodyne/cubix):00033         PPIDE_DEVICE    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (../nhyodyne/cubix):00034         PPIDE_COMMAND   = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (../nhyodyne/cubix):00035         PPIDE_STATUS    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (../nhyodyne/cubix):00036         PPIDE_CONTROL   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (../nhyodyne/cubix):00037         PPIDE_ASTATUS   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (../nhyodyne/cubix):00038         
                      (../nhyodyne/cubix):00039         
                      (../nhyodyne/cubix):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (../nhyodyne/cubix):00041         PPIDE_CMD_RECAL = $10
     0020             (../nhyodyne/cubix):00042         PPIDE_CMD_READ  = $20
     0030             (../nhyodyne/cubix):00043         PPIDE_CMD_WRITE = $30
     0091             (../nhyodyne/cubix):00044         PPIDE_CMD_INIT  = $91
     00EC             (../nhyodyne/cubix):00045         PPIDE_CMD_ID    = $EC
     00E0             (../nhyodyne/cubix):00046         PPIDE_CMD_SPINDOWN = $E0
     00E1             (../nhyodyne/cubix):00047         PPIDE_CMD_SPINUP = $E1
                      (../nhyodyne/cubix):00048         
                      (../nhyodyne/cubix):00049         
     0092             (../nhyodyne/cubix):00050         PPRD_IDE_8255   = %10010010                       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (../nhyodyne/cubix):00051         PPWR_IDE_8255   = %10000000                       ;ALL THREE PORTS OUTPUT
                      (../nhyodyne/cubix):00052         
                      (../nhyodyne/cubix):00053         
F94C                  (../nhyodyne/cubix):00054         PPIDEINDEX:
F94C 00               (../nhyodyne/cubix):00055                 .BYTE   $00
F94D                  (../nhyodyne/cubix):00056         PPIDETIMEOUT:
F94D 0000             (../nhyodyne/cubix):00057                 .BYTE   $00,$00
F94F                  (../nhyodyne/cubix):00058         PPIDEWORKVAR:
F94F 0000             (../nhyodyne/cubix):00059                 .BYTE   $00,$00
F951                  (../nhyodyne/cubix):00060         CURDRVADDRESS:
F951 00               (../nhyodyne/cubix):00061                 .BYTE   $00
F952                  (../nhyodyne/cubix):00062         CURDRVSLICE:
F952 00               (../nhyodyne/cubix):00063                 .BYTE   $00
     0400             (../nhyodyne/cubix):00064         HSTBUF          = $0400
                      (../nhyodyne/cubix):00065         
                      (../nhyodyne/cubix):00066         ;__PPIDE_INIT_________________________________________________________________________________________
                      (../nhyodyne/cubix):00067         ;
                      (../nhyodyne/cubix):00068         ;  INIT AND DISPLAY IDE INFO
                      (../nhyodyne/cubix):00069         ;____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00070         ;
F953                  (../nhyodyne/cubix):00071         PPIDE_INIT:
F953 BDE56F           (../nhyodyne/cubix):00072                 JSR     LFCR                              ; AND CRLF
F956 BDE56F           (../nhyodyne/cubix):00073                 JSR     LFCR                              ; AND CRLF
F959 8EFCD8           (../nhyodyne/cubix):00074                 LDX     #MESSAGE1
F95C BDE55B           (../nhyodyne/cubix):00075                 JSR     WRSTR                             ; DO PROMPT
F95F BDE56F           (../nhyodyne/cubix):00076                 JSR     LFCR                              ; AND CRLF
F962 BDFA4D           (../nhyodyne/cubix):00077                 JSR     IDE_PPIDETECT                     ; TEST FOR PPI HARDWARE
F965 261A             (../nhyodyne/cubix):00078                 BNE     IDE_ABORT                         ; BAIL OUT IF NOT THERE
                      (../nhyodyne/cubix):00079         ;
F967 8EFCE0           (../nhyodyne/cubix):00080                 LDX     #MESSAGE2
F96A BDE55B           (../nhyodyne/cubix):00081                 JSR     WRSTR                             ; DO PROMPT
F96D CCFE60           (../nhyodyne/cubix):00082                 LDD     #PPIDE_PPI                        ; GET BASE PORT
F970 FDF94F           (../nhyodyne/cubix):00083                 STD     PPIDEWORKVAR
F973 BDE52C           (../nhyodyne/cubix):00084                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (../nhyodyne/cubix):00085         ;
F976 BDFB50           (../nhyodyne/cubix):00086                 JSR     PPIDE_RESET                       ; RESET THE BUS
F979 BDF9A7           (../nhyodyne/cubix):00087                 JSR     PPIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
F97C 2503             (../nhyodyne/cubix):00088                 BCS     IDE_ABORT
F97E 7EF98A           (../nhyodyne/cubix):00089                 JMP     IDE_PRINT_INFO
F981                  (../nhyodyne/cubix):00090         IDE_ABORT:
F981 8EFCE7           (../nhyodyne/cubix):00091                 LDX     #MESSAGE3
F984 BDE55B           (../nhyodyne/cubix):00092                 JSR     WRSTR                             ; DO PROMPT
F987 7EF9A3           (../nhyodyne/cubix):00093                 JMP     IDE_INITA
F98A                  (../nhyodyne/cubix):00094         IDE_PRINT_INFO:
F98A BDE56F           (../nhyodyne/cubix):00095                 JSR     LFCR                              ; AND CRLF
F98D 8EFCF4           (../nhyodyne/cubix):00096                 LDX     #MESSAGE4
F990 BDE55B           (../nhyodyne/cubix):00097                 JSR     WRSTR                             ; DO PROMPT
F993 8600             (../nhyodyne/cubix):00098                 LDA     #$00
F995 BDF9F2           (../nhyodyne/cubix):00099                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
F998 8EFD05           (../nhyodyne/cubix):00100                 LDX     #MESSAGE5
F99B BDE55B           (../nhyodyne/cubix):00101                 JSR     WRSTR                             ; DO PROMPT
F99E 8601             (../nhyodyne/cubix):00102                 LDA     #$01
F9A0 BDF9F2           (../nhyodyne/cubix):00103                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
F9A3                  (../nhyodyne/cubix):00104         IDE_INITA:
F9A3 BDE56F           (../nhyodyne/cubix):00105                 JSR     LFCR                              ; AND CRLF
F9A6 39               (../nhyodyne/cubix):00106                 RTS                                       ; DONE
                      (../nhyodyne/cubix):00107         ;
                      (../nhyodyne/cubix):00108         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (../nhyodyne/cubix):00109         ;
                      (../nhyodyne/cubix):00110         ;  PROBE FOR IDE HARDWARE
                      (../nhyodyne/cubix):00111         ;____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00112         ;
F9A7                  (../nhyodyne/cubix):00113         PPIDE_PROBE:
                      (../nhyodyne/cubix):00114         ;
                      (../nhyodyne/cubix):00115         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (../nhyodyne/cubix):00116         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (../nhyodyne/cubix):00117         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (../nhyodyne/cubix):00118         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (../nhyodyne/cubix):00119         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (../nhyodyne/cubix):00120         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (../nhyodyne/cubix):00121         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (../nhyodyne/cubix):00122         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (../nhyodyne/cubix):00123         
F9A7 8600             (../nhyodyne/cubix):00124                 LDA     #$00
F9A9 B7FE60           (../nhyodyne/cubix):00125                 STA     PPIDELO                           ; PPI PORT A, DATALO
                      (../nhyodyne/cubix):00126         
F9AC BDFB7B           (../nhyodyne/cubix):00127                 JSR     IDE_WAIT_NOT_BUSY                 ; WAIT FOR BUSY TO CLEAR
F9AF 253E             (../nhyodyne/cubix):00128                 BCS     PPIDE_PROBE_FAIL                  ; IF TIMEOUT, REPORT NO IDE PRESENT
F9B1 860F             (../nhyodyne/cubix):00129                 LDA     #PPIDE_STATUS                     ; GET STATUS
F9B3 BDFC75           (../nhyodyne/cubix):00130                 JSR     IDE_READ
F9B6 1F18             (../nhyodyne/cubix):00131                 TFR     X,A
F9B8 8440             (../nhyodyne/cubix):00132                 ANDA    #%01000000
F9BA 8100             (../nhyodyne/cubix):00133                 CMPA    #$00
F9BC 2731             (../nhyodyne/cubix):00134                 BEQ     PPIDE_PROBE_FAIL                  ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (../nhyodyne/cubix):00135         
                      (../nhyodyne/cubix):00136         ; CHECK SIGNATURE
F9BE 860A             (../nhyodyne/cubix):00137                 LDA     #PPIDE_SEC_CNT
F9C0 BDFC75           (../nhyodyne/cubix):00138                 JSR     IDE_READ
F9C3 1F18             (../nhyodyne/cubix):00139                 TFR     X,A
F9C5 8101             (../nhyodyne/cubix):00140                 CMPA    #$01
F9C7 2626             (../nhyodyne/cubix):00141                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
F9C9 860B             (../nhyodyne/cubix):00142                 LDA     #PPIDE_LBALOW
F9CB BDFC75           (../nhyodyne/cubix):00143                 JSR     IDE_READ
F9CE 1F18             (../nhyodyne/cubix):00144                 TFR     X,A
F9D0 8101             (../nhyodyne/cubix):00145                 CMPA    #$01
F9D2 261B             (../nhyodyne/cubix):00146                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
F9D4 860C             (../nhyodyne/cubix):00147                 LDA     #PPIDE_LBAMID
F9D6 BDFC75           (../nhyodyne/cubix):00148                 JSR     IDE_READ
F9D9 1F18             (../nhyodyne/cubix):00149                 TFR     X,A
F9DB 8100             (../nhyodyne/cubix):00150                 CMPA    #$00
F9DD 2610             (../nhyodyne/cubix):00151                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
F9DF 860D             (../nhyodyne/cubix):00152                 LDA     #PPIDE_LBAHI
F9E1 BDFC75           (../nhyodyne/cubix):00153                 JSR     IDE_READ
F9E4 1F18             (../nhyodyne/cubix):00154                 TFR     X,A
F9E6 8100             (../nhyodyne/cubix):00155                 CMPA    #$00
F9E8 2605             (../nhyodyne/cubix):00156                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
F9EA 1CFE             (../nhyodyne/cubix):00157                 CLC
F9EC 7EF9F1           (../nhyodyne/cubix):00158                 JMP     PPIDE_PROBE_SUCCESS
F9EF                  (../nhyodyne/cubix):00159         PPIDE_PROBE_FAIL:
F9EF 1A01             (../nhyodyne/cubix):00160                 SEC
F9F1                  (../nhyodyne/cubix):00161         PPIDE_PROBE_SUCCESS:
F9F1 39               (../nhyodyne/cubix):00162                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (../nhyodyne/cubix):00163         
                      (../nhyodyne/cubix):00164         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (../nhyodyne/cubix):00165         ;*
                      (../nhyodyne/cubix):00166         ;*  READ IDE INFORMATION
                      (../nhyodyne/cubix):00167         ;*      CARRY SET ON ERROR
                      (../nhyodyne/cubix):00168         ;*      A=MST/SLV
                      (../nhyodyne/cubix):00169         ;*____________________________________________________________________________________________________
F9F2                  (../nhyodyne/cubix):00170         IDE_READ_INFO:
                      (../nhyodyne/cubix):00171         ; SET DRIVE BIT
F9F2 8401             (../nhyodyne/cubix):00172                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
F9F4 48               (../nhyodyne/cubix):00173                 ASLA                                      ; SHIFT 4
F9F5 48               (../nhyodyne/cubix):00174                 ASLA                                      ;
F9F6 48               (../nhyodyne/cubix):00175                 ASLA                                      ;
F9F7 48               (../nhyodyne/cubix):00176                 ASLA                                      ;
F9F8 8AE0             (../nhyodyne/cubix):00177                 ORA     #$E0                              ; E0=MST  F0=SLV
F9FA 1F89             (../nhyodyne/cubix):00178                 TFR     A,B
F9FC 8600             (../nhyodyne/cubix):00179                 LDA     #$00
F9FE 1F01             (../nhyodyne/cubix):00180                 TFR     D,X
FA00 860E             (../nhyodyne/cubix):00181                 LDA     #PPIDE_DEVICE
FA02 BDFC9A           (../nhyodyne/cubix):00182                 JSR     IDE_WRITE
FA05 BDFB7B           (../nhyodyne/cubix):00183                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
FA08 2531             (../nhyodyne/cubix):00184                 BCS     IDE_READ_INFO_ABORT
FA0A 860F             (../nhyodyne/cubix):00185                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
FA0C 8E00EC           (../nhyodyne/cubix):00186                 LDX     #PPIDE_CMD_ID
FA0F BDFC9A           (../nhyodyne/cubix):00187                 JSR     IDE_WRITE                         ;ASK THE DRIVE TO READ IT
FA12 BDFBA4           (../nhyodyne/cubix):00188                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
FA15 2524             (../nhyodyne/cubix):00189                 BCS     IDE_READ_INFO_ABORT
FA17 BDFBD4           (../nhyodyne/cubix):00190                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
FA1A 8EFD16           (../nhyodyne/cubix):00191                 LDX     #MESSAGE6
FA1D BDE55B           (../nhyodyne/cubix):00192                 JSR     WRSTR
FA20 B6047B           (../nhyodyne/cubix):00193                 LDA     HSTBUF+123
FA23 BDE541           (../nhyodyne/cubix):00194                 JSR     WRHEX
FA26 B6047A           (../nhyodyne/cubix):00195                 LDA     HSTBUF+122
FA29 BDE541           (../nhyodyne/cubix):00196                 JSR     WRHEX
FA2C B60479           (../nhyodyne/cubix):00197                 LDA     HSTBUF+121
FA2F BDE541           (../nhyodyne/cubix):00198                 JSR     WRHEX
FA32 B60478           (../nhyodyne/cubix):00199                 LDA     HSTBUF+120
FA35 BDE541           (../nhyodyne/cubix):00200                 JSR     WRHEX
FA38 7EFA47           (../nhyodyne/cubix):00201                 JMP     IDE_READ_INFO_OK
FA3B                  (../nhyodyne/cubix):00202         IDE_READ_INFO_ABORT:
FA3B 8EFCE7           (../nhyodyne/cubix):00203                 LDX     #MESSAGE3
FA3E BDE55B           (../nhyodyne/cubix):00204                 JSR     WRSTR         DO PROMPT
FA41 BDE56F           (../nhyodyne/cubix):00205                 JSR     LFCR         AND CRLF
FA44 1A01             (../nhyodyne/cubix):00206                 SEC
FA46 39               (../nhyodyne/cubix):00207                 RTS                                       ;
FA47                  (../nhyodyne/cubix):00208         IDE_READ_INFO_OK:
FA47 BDE56F           (../nhyodyne/cubix):00209                 JSR     LFCR         AND CRLF
FA4A 1CFE             (../nhyodyne/cubix):00210                 CLC
FA4C 39               (../nhyodyne/cubix):00211                 RTS
                      (../nhyodyne/cubix):00212         
                      (../nhyodyne/cubix):00213         
                      (../nhyodyne/cubix):00214         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (../nhyodyne/cubix):00215         ;
                      (../nhyodyne/cubix):00216         ;  PROBE FOR PPI HARDWARE
                      (../nhyodyne/cubix):00217         ;____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00218         ;
FA4D                  (../nhyodyne/cubix):00219         IDE_PPIDETECT:
                      (../nhyodyne/cubix):00220         ;
                      (../nhyodyne/cubix):00221         ; TEST FOR PPI EXISTENCE
                      (../nhyodyne/cubix):00222         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (../nhyodyne/cubix):00223         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (../nhyodyne/cubix):00224         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (../nhyodyne/cubix):00225         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (../nhyodyne/cubix):00226         ; INTERFERE WITH THE VALUE BEING READ.
FA4D BDFCCA           (../nhyodyne/cubix):00227                 JSR     SET_PPI_WR
                      (../nhyodyne/cubix):00228         ;
FA50 8600             (../nhyodyne/cubix):00229                 LDA     #$00                              ; VALUE ZERO
FA52 B7FE60           (../nhyodyne/cubix):00230                 STA     PPIDELO                           ; PUSH VALUE TO PORT
FA55 B6FE60           (../nhyodyne/cubix):00231                 LDA     PPIDELO                           ; GET PORT VALUE
FA58 8100             (../nhyodyne/cubix):00232                 CMPA    #$00
FA5A 39               (../nhyodyne/cubix):00233                 RTS                                       ; AND RETURN
                      (../nhyodyne/cubix):00234         ;
                      (../nhyodyne/cubix):00235         
                      (../nhyodyne/cubix):00236         
                      (../nhyodyne/cubix):00237         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (../nhyodyne/cubix):00238         ;*
                      (../nhyodyne/cubix):00239         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (../nhyodyne/cubix):00240         ;*
                      (../nhyodyne/cubix):00241         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (../nhyodyne/cubix):00242         ;                   (A) = Track Number
                      (../nhyodyne/cubix):00243         ;                   (B) = Sector Number
                      (../nhyodyne/cubix):00244         ;
                      (../nhyodyne/cubix):00245         ;           EXIT -  (X) May be destroyed
                      (../nhyodyne/cubix):00246         ;                   (A) May be destroyed
                      (../nhyodyne/cubix):00247         ;                   (B) = Error condition
                      (../nhyodyne/cubix):00248         ;                   (Z) = 1 if no error
                      (../nhyodyne/cubix):00249         ;                       = 0 if an error
                      (../nhyodyne/cubix):00250         ;*____________________________________________________________________________________________________
FA5B                  (../nhyodyne/cubix):00251         IDE_READ_SECTOR:
                      (../nhyodyne/cubix):00252         ;       PRTDBG "IDE READ SECTOR$"
FA5B 5A               (../nhyodyne/cubix):00253                 DECB                                      ; WE LOSE ONE SECTOR PER TRACK BASED ON FLEX
FA5C B7FD1F           (../nhyodyne/cubix):00254                 STA     PPIDETMP                          ; USING 1 BASED SECTOR COUNTING
FA5F F0FD1F           (../nhyodyne/cubix):00255                 SUBB    PPIDETMP                          ;
FA62 2401             (../nhyodyne/cubix):00256                 BCC     >                                 ;
FA64 4A               (../nhyodyne/cubix):00257                 DECA                                      ;
                      (../nhyodyne/cubix):00258         !       ;
FA65 3410             (../nhyodyne/cubix):00259                 PSHS    X
FA67 F7FD1F           (../nhyodyne/cubix):00260                 STB     PPIDETMP                          ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
FA6A BDFA8E           (../nhyodyne/cubix):00261                 JSR     IDE_READ_RAW_SECTOR
FA6D 3510             (../nhyodyne/cubix):00262                 PULS    X
FA6F 2619             (../nhyodyne/cubix):00263                 BNE     IDE_READ_SECTOR_ERROR
FA71 B6FD1F           (../nhyodyne/cubix):00264                 LDA     PPIDETMP
FA74 8401             (../nhyodyne/cubix):00265                 ANDA    #$01
FA76 C600             (../nhyodyne/cubix):00266                 LDB     #$00
FA78 1F02             (../nhyodyne/cubix):00267                 TFR     D,Y                               ; Y NOW HAS HSTBUF OFFSET
                      (../nhyodyne/cubix):00268         
FA7A C600             (../nhyodyne/cubix):00269                 LDB     #$00                              ; DEBLOCK TO ADDRESS IN "X"
                      (../nhyodyne/cubix):00270         !
FA7C A6A90400         (../nhyodyne/cubix):00271                 LDA     HSTBUF,Y
FA80 A780             (../nhyodyne/cubix):00272                 STA     ,X+
FA82 3121             (../nhyodyne/cubix):00273                 INY
FA84 5C               (../nhyodyne/cubix):00274                 INCB
FA85 C100             (../nhyodyne/cubix):00275                 CMPB    #$00
FA87 26F3             (../nhyodyne/cubix):00276                 BNE     <
FA89 39               (../nhyodyne/cubix):00277                 RTS
FA8A                  (../nhyodyne/cubix):00278         IDE_READ_SECTOR_ERROR:
FA8A C61F             (../nhyodyne/cubix):00279                 LDB     #$1F
FA8C 57               (../nhyodyne/cubix):00280                 ASRB
FA8D 39               (../nhyodyne/cubix):00281                 RTS
                      (../nhyodyne/cubix):00282         
FA8E                  (../nhyodyne/cubix):00283         IDE_READ_RAW_SECTOR:
                      (../nhyodyne/cubix):00284         ;       PRTDBG "IDE READ RAW SECTOR$"
FA8E BDFC53           (../nhyodyne/cubix):00285                 JSR     IDE_CONVERT_SECTOR                ;
FA91 B6FD1E           (../nhyodyne/cubix):00286                 LDA     DEBSEHD                           ; STORE CURRENT PARMS
FA94 B1FD1B           (../nhyodyne/cubix):00287                 CMPA    CDEBSEHD                          ;
FA97 2613             (../nhyodyne/cubix):00288                 BNE     IDE_READ_SECTOR_DIRTY
FA99 B6FD1D           (../nhyodyne/cubix):00289                 LDA     DEBCYLM                           ;
FA9C B1FD1A           (../nhyodyne/cubix):00290                 CMPA    CDEBCYLM                          ;
FA9F 260B             (../nhyodyne/cubix):00291                 BNE     IDE_READ_SECTOR_DIRTY
FAA1 B6FD1C           (../nhyodyne/cubix):00292                 LDA     DEBCYLL                           ;
FAA4 B1FD19           (../nhyodyne/cubix):00293                 CMPA    CDEBCYLL                          ;
FAA7 2603             (../nhyodyne/cubix):00294                 BNE     IDE_READ_SECTOR_DIRTY
FAA9 C600             (../nhyodyne/cubix):00295                 LDB     #$00                              ; RETURN = OPERATION OK
FAAB 39               (../nhyodyne/cubix):00296                 RTS
                      (../nhyodyne/cubix):00297         
FAAC                  (../nhyodyne/cubix):00298         IDE_READ_SECTOR_DIRTY:
                      (../nhyodyne/cubix):00299         ;       PRTDBG "IDE READ SECTOR BUFFER DIRTY$"
FAAC BDFB7B           (../nhyodyne/cubix):00300                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
FAAF 2528             (../nhyodyne/cubix):00301                 BCS     IDE_READ_SECTOR_DIRTY_ERROR       ; IF TIMEOUT, REPORT NO IDE PRESENT
FAB1                  (../nhyodyne/cubix):00302         IDE_READ_SECTOR_DIRTY1:
FAB1 BDFC10           (../nhyodyne/cubix):00303                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
FAB4 860F             (../nhyodyne/cubix):00304                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
FAB6 8E0020           (../nhyodyne/cubix):00305                 LDX     #PPIDE_CMD_READ
FAB9 BDFC9A           (../nhyodyne/cubix):00306                 JSR     IDE_WRITE                         ;ASK THE DRIVE TO READ IT
FABC BDFBA4           (../nhyodyne/cubix):00307                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
FABF 2518             (../nhyodyne/cubix):00308                 BCS     IDE_READ_SECTOR_DIRTY_ERROR       ; IF TIMEOUT, REPORT NO IDE PRESENT
FAC1 BDFBD4           (../nhyodyne/cubix):00309                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
FAC4 B6FD1E           (../nhyodyne/cubix):00310                 LDA     DEBSEHD                           ; STORE CURRENT PARMS
FAC7 B7FD1B           (../nhyodyne/cubix):00311                 STA     CDEBSEHD                          ;
FACA B6FD1C           (../nhyodyne/cubix):00312                 LDA     DEBCYLL                           ;
FACD B7FD19           (../nhyodyne/cubix):00313                 STA     CDEBCYLL                          ;
FAD0 B6FD1D           (../nhyodyne/cubix):00314                 LDA     DEBCYLM                           ;
FAD3 B7FD1A           (../nhyodyne/cubix):00315                 STA     CDEBCYLM                          ;
                      (../nhyodyne/cubix):00316         
FAD6 C600             (../nhyodyne/cubix):00317                 LDB     #$00                              ; RETURN = OPERATION OK
FAD8 39               (../nhyodyne/cubix):00318                 RTS
FAD9                  (../nhyodyne/cubix):00319         IDE_READ_SECTOR_DIRTY_ERROR:
FAD9 C60F             (../nhyodyne/cubix):00320                 LDB     #$0F                              ; SET ERROR CONDITION
FADB 39               (../nhyodyne/cubix):00321                 RTS
                      (../nhyodyne/cubix):00322         
                      (../nhyodyne/cubix):00323         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (../nhyodyne/cubix):00324         ;*
                      (../nhyodyne/cubix):00325         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (../nhyodyne/cubix):00326         ;*
                      (../nhyodyne/cubix):00327         ;           ENTRY - (X) = Address in memory where data to be written lives.
                      (../nhyodyne/cubix):00328         ;                   (A) = Track Number
                      (../nhyodyne/cubix):00329         ;                   (B) = Sector Number
                      (../nhyodyne/cubix):00330         ;
                      (../nhyodyne/cubix):00331         ;           EXIT -  (X) May be destroyed
                      (../nhyodyne/cubix):00332         ;                   (A) May be destroyed
                      (../nhyodyne/cubix):00333         ;                   (B) = Error condition
                      (../nhyodyne/cubix):00334         ;                   (Z) = 1 if no error
                      (../nhyodyne/cubix):00335         ;                       = 0 if an error
                      (../nhyodyne/cubix):00336         ;*____________________________________________________________________________________________________
FADC                  (../nhyodyne/cubix):00337         IDE_WRITE_SECTOR:
FADC 3420             (../nhyodyne/cubix):00338                 PSHS    Y
FADE 5A               (../nhyodyne/cubix):00339                 DECB                                      ; WE LOSE ONE SECTOR PER TRACK BASED ON FLEX
FADF B7FD1F           (../nhyodyne/cubix):00340                 STA     PPIDETMP                          ; USING 1 BASED SECTOR COUNTING
FAE2 F0FD1F           (../nhyodyne/cubix):00341                 SUBB    PPIDETMP                          ;
FAE5 2401             (../nhyodyne/cubix):00342                 BCC     >                                 ;
FAE7 4A               (../nhyodyne/cubix):00343                 DECA                                      ;
                      (../nhyodyne/cubix):00344         !       ;
FAE8 3410             (../nhyodyne/cubix):00345                 PSHS    X
FAEA F7FD1F           (../nhyodyne/cubix):00346                 STB     PPIDETMP                          ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
                      (../nhyodyne/cubix):00347         
FAED BDFA8E           (../nhyodyne/cubix):00348                 JSR     IDE_READ_RAW_SECTOR
FAF0 1026004A         (../nhyodyne/cubix):00349                 LBNE    IDE_WRITE_SECTOR_ERROR1
FAF4 3510             (../nhyodyne/cubix):00350                 PULS    X
                      (../nhyodyne/cubix):00351         
FAF6 B6FD1F           (../nhyodyne/cubix):00352                 LDA     PPIDETMP
FAF9 8401             (../nhyodyne/cubix):00353                 ANDA    #$01
FAFB C600             (../nhyodyne/cubix):00354                 LDB     #$00
FAFD 1F02             (../nhyodyne/cubix):00355                 TFR     D,Y                               ; Y NOW HAS HSTBUF OFFSET
FAFF C600             (../nhyodyne/cubix):00356                 LDB     #$00                              ; BLOCK TO ADDRESS IN "X"
                      (../nhyodyne/cubix):00357         !
FB01 A680             (../nhyodyne/cubix):00358                 LDA     ,X+
FB03 A7A90400         (../nhyodyne/cubix):00359                 STA     HSTBUF,Y
FB07 3121             (../nhyodyne/cubix):00360                 INY
FB09 5C               (../nhyodyne/cubix):00361                 INCB
FB0A C100             (../nhyodyne/cubix):00362                 CMPB    #$00
FB0C 26F3             (../nhyodyne/cubix):00363                 BNE     <
                      (../nhyodyne/cubix):00364         
FB0E BDFB7B           (../nhyodyne/cubix):00365                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
FB11 252D             (../nhyodyne/cubix):00366                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
FB13 860F             (../nhyodyne/cubix):00367                 LDA     #PPIDE_COMMAND
FB15 8E0030           (../nhyodyne/cubix):00368                 LDX     #PPIDE_CMD_WRITE
FB18 BDFC9A           (../nhyodyne/cubix):00369                 JSR     IDE_WRITE                         ;TELL DRIVE TO WRITE A SECTOR
FB1B BDFBA4           (../nhyodyne/cubix):00370                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
FB1E 2520             (../nhyodyne/cubix):00371                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
FB20 BDFBF2           (../nhyodyne/cubix):00372                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
FB23 BDFB7B           (../nhyodyne/cubix):00373                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
FB26 2518             (../nhyodyne/cubix):00374                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
FB28 86FF             (../nhyodyne/cubix):00375                 LDA     #$FF                              ; STORE CURRENT PARMS
FB2A B7FD1B           (../nhyodyne/cubix):00376                 STA     CDEBSEHD                          ;
FB2D B7FD19           (../nhyodyne/cubix):00377                 STA     CDEBCYLL                          ;
FB30 B7FD1A           (../nhyodyne/cubix):00378                 STA     CDEBCYLM                          ;
                      (../nhyodyne/cubix):00379         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FB33 3436             (../nhyodyne/cubix):00380                 PSHS    A,B,X,Y
FB35 BDFAAC           (../nhyodyne/cubix):00381                 JSR     IDE_READ_SECTOR_DIRTY             ; NOT 100% SURE WHY THIS IS NECESSARY FOR A SUCCESSFUL WRITE  . .
FB38 3536             (../nhyodyne/cubix):00382                 PULS    A,B,X,Y                           ; BUT I AM OUT OF TIME FOR TODAY
                      (../nhyodyne/cubix):00383         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FB3A C600             (../nhyodyne/cubix):00384                 LDB     #$00                              ; ZERO ON RETURN = OPERATION OK
FB3C 35A0             (../nhyodyne/cubix):00385                 PULS    Y,PC
FB3E                  (../nhyodyne/cubix):00386         IDE_WRITE_SECTOR_ERROR1:
FB3E 3510             (../nhyodyne/cubix):00387                 PULS    X
FB40                  (../nhyodyne/cubix):00388         IDE_WRITE_SECTOR_ERROR:
FB40 C6FF             (../nhyodyne/cubix):00389                 LDB     #$FF                              ; 1 ON RETURN = OPERATION FAIL
FB42 F7FD1B           (../nhyodyne/cubix):00390                 STB     CDEBSEHD                          ;
FB45 F7FD19           (../nhyodyne/cubix):00391                 STB     CDEBCYLL                          ;
FB48 F7FD1A           (../nhyodyne/cubix):00392                 STB     CDEBCYLM                          ;
FB4B C61F             (../nhyodyne/cubix):00393                 LDB     #$1F
FB4D 57               (../nhyodyne/cubix):00394                 ASRB
FB4E 35A0             (../nhyodyne/cubix):00395                 PULS    Y,PC
                      (../nhyodyne/cubix):00396         
                      (../nhyodyne/cubix):00397         ;*__PPIDE_RESET____________________________________________________________________________________
                      (../nhyodyne/cubix):00398         ;*
                      (../nhyodyne/cubix):00399         ;*  SOFT RESET IDE CHANNEL
                      (../nhyodyne/cubix):00400         ;*
                      (../nhyodyne/cubix):00401         ;*____________________________________________________________________________________________________
FB50                  (../nhyodyne/cubix):00402         PPIDE_RESET:
                      (../nhyodyne/cubix):00403         ;       PRTDBG "IDE RESET$"
FB50 8600             (../nhyodyne/cubix):00404                 LDA     #$00
FB52 B7FD1E           (../nhyodyne/cubix):00405                 STA     DEBSEHD
FB55 B7FD1C           (../nhyodyne/cubix):00406                 STA     DEBCYLL
FB58 B7FD1D           (../nhyodyne/cubix):00407                 STA     DEBCYLM
FB5B 86FF             (../nhyodyne/cubix):00408                 LDA     #$FF                              ;
FB5D B7FD1B           (../nhyodyne/cubix):00409                 STA     CDEBSEHD                          ;
FB60 B7FD19           (../nhyodyne/cubix):00410                 STA     CDEBCYLL                          ;
FB63 B7FD1A           (../nhyodyne/cubix):00411                 STA     CDEBCYLM                          ;
                      (../nhyodyne/cubix):00412         
FB66 8680             (../nhyodyne/cubix):00413                 LDA     #PPIDE_RST_LINE
FB68 B7FE62           (../nhyodyne/cubix):00414                 STA     PPIDECNTRL                        ; ASSERT RST LINE ON IDE INTERFACE
                      (../nhyodyne/cubix):00415         
FB6B 8E0100           (../nhyodyne/cubix):00416                 LDX     #$0100
                      (../nhyodyne/cubix):00417         ;       PRTDBG "IDE RESET DELAY$"
FB6E                  (../nhyodyne/cubix):00418         RST_DLY:
FB6E 301F             (../nhyodyne/cubix):00419                 DEX
FB70 8C0000           (../nhyodyne/cubix):00420                 CPX     #$0000
FB73 26F9             (../nhyodyne/cubix):00421                 BNE     RST_DLY
FB75 8600             (../nhyodyne/cubix):00422                 LDA     #$00
FB77 B7FE62           (../nhyodyne/cubix):00423                 STA     PPIDECNTRL                        ; DEASSERT RST LINE ON IDE INTERFACE
                      (../nhyodyne/cubix):00424         
                      (../nhyodyne/cubix):00425         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
                      (../nhyodyne/cubix):00426         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (../nhyodyne/cubix):00427         ;    IF      USEDSKYNG = 1
                      (../nhyodyne/cubix):00428         ;        JSR     DSKY_REINIT
                      (../nhyodyne/cubix):00429         ;        ENDC
                      (../nhyodyne/cubix):00430         
FB7A 39               (../nhyodyne/cubix):00431                 RTS
                      (../nhyodyne/cubix):00432         
                      (../nhyodyne/cubix):00433         
                      (../nhyodyne/cubix):00434         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (../nhyodyne/cubix):00435         ;*
                      (../nhyodyne/cubix):00436         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (../nhyodyne/cubix):00437         ;*
                      (../nhyodyne/cubix):00438         ;*____________________________________________________________________________________________________
FB7B                  (../nhyodyne/cubix):00439         IDE_WAIT_NOT_BUSY:
FB7B 3412             (../nhyodyne/cubix):00440                 PSHS    X,A
FB7D 8600             (../nhyodyne/cubix):00441                 LDA     #$00
FB7F B7F94D           (../nhyodyne/cubix):00442                 STA     PPIDETIMEOUT
FB82 B7F94E           (../nhyodyne/cubix):00443                 STA     PPIDETIMEOUT+1
FB85                  (../nhyodyne/cubix):00444         IDE_WAIT_NOT_BUSY1:
FB85 860F             (../nhyodyne/cubix):00445                 LDA     #PPIDE_STATUS                     ;WAIT FOR RDY BIT TO BE SET
FB87 BDFC75           (../nhyodyne/cubix):00446                 JSR     IDE_READ
FB8A 1F18             (../nhyodyne/cubix):00447                 TFR     X,A
FB8C 8480             (../nhyodyne/cubix):00448                 ANDA    #$80
FB8E 270F             (../nhyodyne/cubix):00449                 BEQ     IDE_WAIT_NOT_BUSY2
FB90 7CF94D           (../nhyodyne/cubix):00450                 INC     PPIDETIMEOUT
FB93 26F0             (../nhyodyne/cubix):00451                 BNE     IDE_WAIT_NOT_BUSY1
FB95 7CF94E           (../nhyodyne/cubix):00452                 INC     PPIDETIMEOUT+1
FB98 26EB             (../nhyodyne/cubix):00453                 BNE     IDE_WAIT_NOT_BUSY1
FB9A 1A01             (../nhyodyne/cubix):00454                 SEC
FB9C 7EFBA1           (../nhyodyne/cubix):00455                 JMP     IDE_WAIT_NOT_BUSY3
FB9F                  (../nhyodyne/cubix):00456         IDE_WAIT_NOT_BUSY2:
FB9F 1CFE             (../nhyodyne/cubix):00457                 CLC
FBA1                  (../nhyodyne/cubix):00458         IDE_WAIT_NOT_BUSY3:
FBA1 3592             (../nhyodyne/cubix):00459                 PULS    PC,X,A
FBA3 39               (../nhyodyne/cubix):00460                 RTS
                      (../nhyodyne/cubix):00461         
                      (../nhyodyne/cubix):00462         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (../nhyodyne/cubix):00463         ;*
                      (../nhyodyne/cubix):00464         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (../nhyodyne/cubix):00465         ;*
                      (../nhyodyne/cubix):00466         ;*____________________________________________________________________________________________________
FBA4                  (../nhyodyne/cubix):00467         IDE_WAIT_DRQ:
FBA4 3432             (../nhyodyne/cubix):00468                 PSHS    A,X,Y
FBA6 8600             (../nhyodyne/cubix):00469                 LDA     #$00
FBA8 B7F94D           (../nhyodyne/cubix):00470                 STA     PPIDETIMEOUT
FBAB B7F94E           (../nhyodyne/cubix):00471                 STA     PPIDETIMEOUT+1
FBAE                  (../nhyodyne/cubix):00472         IDE_WAIT_DRQ1:
FBAE 860F             (../nhyodyne/cubix):00473                 LDA     #PPIDE_STATUS                     ;WAIT FOR DRQ BIT TO BE SET
FBB0 BDFC75           (../nhyodyne/cubix):00474                 JSR     IDE_READ
FBB3 1F18             (../nhyodyne/cubix):00475                 TFR     X,A
FBB5 8488             (../nhyodyne/cubix):00476                 ANDA    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
FBB7 8108             (../nhyodyne/cubix):00477                 CMPA    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
FBB9 2715             (../nhyodyne/cubix):00478                 BEQ     IDE_WAIT_DRQ2
FBBB 8401             (../nhyodyne/cubix):00479                 ANDA    #%00000001                        ; IS ERROR?
FBBD 8101             (../nhyodyne/cubix):00480                 CMPA    #%00000001                        ;
FBBF 270A             (../nhyodyne/cubix):00481                 BEQ     IDE_WAIT_DRQE
FBC1 7CF94D           (../nhyodyne/cubix):00482                 INC     PPIDETIMEOUT
FBC4 26E8             (../nhyodyne/cubix):00483                 BNE     IDE_WAIT_DRQ1
FBC6 7CF94E           (../nhyodyne/cubix):00484                 INC     PPIDETIMEOUT+1
FBC9 26E3             (../nhyodyne/cubix):00485                 BNE     IDE_WAIT_DRQ1
FBCB                  (../nhyodyne/cubix):00486         IDE_WAIT_DRQE:
FBCB 1A01             (../nhyodyne/cubix):00487                 SEC
FBCD 7EFBD2           (../nhyodyne/cubix):00488                 JMP     IDE_WAIT_DRQ3
FBD0                  (../nhyodyne/cubix):00489         IDE_WAIT_DRQ2:
FBD0 1CFE             (../nhyodyne/cubix):00490                 CLC
FBD2                  (../nhyodyne/cubix):00491         IDE_WAIT_DRQ3:
FBD2 35B2             (../nhyodyne/cubix):00492                 PULS    PC,A,X,Y
                      (../nhyodyne/cubix):00493         
                      (../nhyodyne/cubix):00494         
                      (../nhyodyne/cubix):00495         
                      (../nhyodyne/cubix):00496         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (../nhyodyne/cubix):00497         ;*
                      (../nhyodyne/cubix):00498         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (../nhyodyne/cubix):00499         ;*
                      (../nhyodyne/cubix):00500         ;*____________________________________________________________________________________________________
FBD4                  (../nhyodyne/cubix):00501         IDE_READ_BUFFER:
FBD4 108E0000         (../nhyodyne/cubix):00502                 LDY     #$0000                            ; INDEX
FBD8                  (../nhyodyne/cubix):00503         IDEBUFRD:
FBD8 8608             (../nhyodyne/cubix):00504                 LDA     #PPIDE_DATA
FBDA BDFC78           (../nhyodyne/cubix):00505                 JSR     IDE_READ_NO_SETUP
FBDD 1F10             (../nhyodyne/cubix):00506                 TFR     X,D
FBDF E7A90400         (../nhyodyne/cubix):00507                 STB     HSTBUF,Y                          ;
FBE3 3121             (../nhyodyne/cubix):00508                 INY
FBE5 A7A90400         (../nhyodyne/cubix):00509                 STA     HSTBUF,Y                          ;
FBE9 3121             (../nhyodyne/cubix):00510                 INY
FBEB 108C0200         (../nhyodyne/cubix):00511                 CMPY    #$0200                            ;
FBEF 26E7             (../nhyodyne/cubix):00512                 BNE     IDEBUFRD                          ;
FBF1 39               (../nhyodyne/cubix):00513                 RTS                                       ;
                      (../nhyodyne/cubix):00514         
                      (../nhyodyne/cubix):00515         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (../nhyodyne/cubix):00516         ;*
                      (../nhyodyne/cubix):00517         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (../nhyodyne/cubix):00518         ;*
                      (../nhyodyne/cubix):00519         ;*____________________________________________________________________________________________________
FBF2                  (../nhyodyne/cubix):00520         IDE_WRITE_BUFFER:
FBF2 108E0000         (../nhyodyne/cubix):00521                 LDY     #$0000                            ; INDEX
FBF6                  (../nhyodyne/cubix):00522         IDEBUFWT:
FBF6 E6A90400         (../nhyodyne/cubix):00523                 LDB     HSTBUF,Y                          ; SECTORS ARE LITTLE ENDIAN
FBFA 3121             (../nhyodyne/cubix):00524                 INY                                       ;
FBFC A6A90400         (../nhyodyne/cubix):00525                 LDA     HSTBUF,Y                          ; SECTORS ARE LITTLE ENDIAN
FC00 3121             (../nhyodyne/cubix):00526                 INY
FC02 1F01             (../nhyodyne/cubix):00527                 TFR     D,X
FC04 8608             (../nhyodyne/cubix):00528                 LDA     #PPIDE_DATA
FC06 BDFC9A           (../nhyodyne/cubix):00529                 JSR     IDE_WRITE
FC09 108C0200         (../nhyodyne/cubix):00530                 CMPY    #$0200                            ;
FC0D 26E7             (../nhyodyne/cubix):00531                 BNE     IDEBUFWT                          ;
FC0F 39               (../nhyodyne/cubix):00532                 RTS                                       ;
                      (../nhyodyne/cubix):00533         
                      (../nhyodyne/cubix):00534         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (../nhyodyne/cubix):00535         ;*
                      (../nhyodyne/cubix):00536         ;*  SETUP LBA DATA
                      (../nhyodyne/cubix):00537         ;*  A= DRIVE DEVICE
                      (../nhyodyne/cubix):00538         ;*____________________________________________________________________________________________________
FC10                  (../nhyodyne/cubix):00539         IDE_SETUP_LBA:
                      (../nhyodyne/cubix):00540         ;               PRTDBG "PPIDE SETUP LBA$"
FC10 B6F951           (../nhyodyne/cubix):00541                 LDA     CURDRVADDRESS
FC13 8401             (../nhyodyne/cubix):00542                 ANDA    #$01                              ; ONLY WANT DRIVE CFG
FC15 48               (../nhyodyne/cubix):00543                 ASLA                                      ; SHIFT 4
FC16 48               (../nhyodyne/cubix):00544                 ASLA                                      ;
FC17 48               (../nhyodyne/cubix):00545                 ASLA                                      ;
FC18 48               (../nhyodyne/cubix):00546                 ASLA                                      ;
FC19 8AE0             (../nhyodyne/cubix):00547                 ORA     #$E0                              ; E0=MST  F0=SLV
FC1B 1F89             (../nhyodyne/cubix):00548                 TFR     A,B
FC1D 8600             (../nhyodyne/cubix):00549                 LDA     #$00
FC1F 1F01             (../nhyodyne/cubix):00550                 TFR     D,X
FC21 860E             (../nhyodyne/cubix):00551                 LDA     #PPIDE_DEVICE
FC23 BDFC9A           (../nhyodyne/cubix):00552                 JSR     IDE_WRITE
FC26 8600             (../nhyodyne/cubix):00553                 LDA     #$00
FC28 F6FD1D           (../nhyodyne/cubix):00554                 LDB     DEBCYLM
FC2B 1F01             (../nhyodyne/cubix):00555                 TFR     D,X
FC2D 860D             (../nhyodyne/cubix):00556                 LDA     #PPIDE_LBAHI
FC2F BDFC9A           (../nhyodyne/cubix):00557                 JSR     IDE_WRITE
FC32 8600             (../nhyodyne/cubix):00558                 LDA     #$00
FC34 F6FD1C           (../nhyodyne/cubix):00559                 LDB     DEBCYLL                           ;
FC37 1F01             (../nhyodyne/cubix):00560                 TFR     D,X
FC39 860C             (../nhyodyne/cubix):00561                 LDA     #PPIDE_LBAMID
FC3B BDFC9A           (../nhyodyne/cubix):00562                 JSR     IDE_WRITE
FC3E 8600             (../nhyodyne/cubix):00563                 LDA     #$00
FC40 F6FD1E           (../nhyodyne/cubix):00564                 LDB     DEBSEHD                           ;
FC43 1F01             (../nhyodyne/cubix):00565                 TFR     D,X
FC45 860B             (../nhyodyne/cubix):00566                 LDA     #PPIDE_LBALOW
FC47 BDFC9A           (../nhyodyne/cubix):00567                 JSR     IDE_WRITE
FC4A 8E0001           (../nhyodyne/cubix):00568                 LDX     #$0001
FC4D 860A             (../nhyodyne/cubix):00569                 LDA     #PPIDE_SEC_CNT
FC4F BDFC9A           (../nhyodyne/cubix):00570                 JSR     IDE_WRITE
                      (../nhyodyne/cubix):00571         
FC52 39               (../nhyodyne/cubix):00572                 RTS
                      (../nhyodyne/cubix):00573         
                      (../nhyodyne/cubix):00574         ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
                      (../nhyodyne/cubix):00575         ;
                      (../nhyodyne/cubix):00576         ;       TRANSLATE SECTORS INTO IDE FORMAT
                      (../nhyodyne/cubix):00577         ;
                      (../nhyodyne/cubix):00578         ;                   (A) = Track Number
                      (../nhyodyne/cubix):00579         ;                   (B) = Sector Number
                      (../nhyodyne/cubix):00580         ;________________________________________________________________________________________________________
FC53                  (../nhyodyne/cubix):00581         IDE_CONVERT_SECTOR:
FC53 54               (../nhyodyne/cubix):00582                 LSRB                                      ; DIVIDE BY 2 (FOR BLOCKING)
FC54 44               (../nhyodyne/cubix):00583                 LSRA                                      ;
FC55 2402             (../nhyodyne/cubix):00584                 BCC     >
FC57 CA80             (../nhyodyne/cubix):00585                 ORB     #$80
                      (../nhyodyne/cubix):00586         !
FC59 F7FD1E           (../nhyodyne/cubix):00587                 STB     DEBSEHD                           ; STORE IN SECTOR/HEAD
FC5C B7FD1C           (../nhyodyne/cubix):00588                 STA     DEBCYLL                           ; STORE IN TRACK (LSB)
                      (../nhyodyne/cubix):00589         
                      (../nhyodyne/cubix):00590         ;       ADD SLICE OFFSET
FC5F FCF952           (../nhyodyne/cubix):00591                 LDD     CURDRVSLICE
FC62 54               (../nhyodyne/cubix):00592                 LSRB                                      ; DIVIDE BY 2 (FOR BLOCKING)
FC63 44               (../nhyodyne/cubix):00593                 LSRA                                      ;
FC64 2402             (../nhyodyne/cubix):00594                 BCC     >
FC66 CA80             (../nhyodyne/cubix):00595                 ORB     #$80
                      (../nhyodyne/cubix):00596         !
FC68 F7FD1D           (../nhyodyne/cubix):00597                 STB     DEBCYLM                           ; STORE IN TRACK (LSB)
FC6B 2408             (../nhyodyne/cubix):00598                 BCC     >
FC6D B6FD1C           (../nhyodyne/cubix):00599                 LDA     DEBCYLL                           ; STORE IN TRACK (LSB)
FC70 8A80             (../nhyodyne/cubix):00600                 ORA     #$80
FC72 B7FD1C           (../nhyodyne/cubix):00601                 STA     DEBCYLL                           ; STORE IN TRACK (LSB)
                      (../nhyodyne/cubix):00602         !
                      (../nhyodyne/cubix):00603         
                      (../nhyodyne/cubix):00604         ;            IF      USEDSKYNG = 1
                      (../nhyodyne/cubix):00605         ;       PRTDBG "DSKY OUTPUT 1$"
                      (../nhyodyne/cubix):00606         ;                LDA     CURDRV
                      (../nhyodyne/cubix):00607         ;                STA     DSKY_HEXBUF
                      (../nhyodyne/cubix):00608         ;                LDA     DEBCYLM
                      (../nhyodyne/cubix):00609         ;                STA     DSKY_HEXBUF+1
                      (../nhyodyne/cubix):00610         ;                LDA     DEBCYLL
                      (../nhyodyne/cubix):00611         ;                STA     DSKY_HEXBUF+2
                      (../nhyodyne/cubix):00612         ;                LDA     DEBSEHD
                      (../nhyodyne/cubix):00613         ;                STA     DSKY_HEXBUF+3
                      (../nhyodyne/cubix):00614         ;                JSR     DSKY_BIN2SEG
                      (../nhyodyne/cubix):00615         ;                JSR     DSKY_SHOW
                      (../nhyodyne/cubix):00616         ;                ENDC
                      (../nhyodyne/cubix):00617         ;                RTS
                      (../nhyodyne/cubix):00618         
                      (../nhyodyne/cubix):00619         
                      (../nhyodyne/cubix):00620         ;-------------------------------------------------------------------------------
                      (../nhyodyne/cubix):00621         
                      (../nhyodyne/cubix):00622         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (../nhyodyne/cubix):00623         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (../nhyodyne/cubix):00624         ; PROGRAM WOULD NOT CALL TO THESE.
                      (../nhyodyne/cubix):00625         
                      (../nhyodyne/cubix):00626         ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (../nhyodyne/cubix):00627         ;INPUT A = IDE REGSITER ADDRESS
                      (../nhyodyne/cubix):00628         ;OUTPUT X = WORD READ FROM IDE DRIVE
FC75                  (../nhyodyne/cubix):00629         IDE_READ:
FC75 BDFCBC           (../nhyodyne/cubix):00630                 JSR     SET_PPI_RD                        ; SETUP FOR A READ CYCLE
FC78                  (../nhyodyne/cubix):00631         IDE_READ_NO_SETUP:
FC78 B7FE62           (../nhyodyne/cubix):00632                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
FC7B 8A40             (../nhyodyne/cubix):00633                 ORA     #PPIDE_RD_LINE                    ; ASSERT RD PIN
FC7D B7FE62           (../nhyodyne/cubix):00634                 STA     PPIDECNTRL
FC80 3402             (../nhyodyne/cubix):00635                 PSHS    A
FC82 F6FE60           (../nhyodyne/cubix):00636                 LDB     PPIDELO                           ; READ LOWER BYTE
FC85 B6FE61           (../nhyodyne/cubix):00637                 LDA     PPIDEHI                           ; READ UPPER BYTE
FC88 1F01             (../nhyodyne/cubix):00638                 TFR     D,X
FC8A 3502             (../nhyodyne/cubix):00639                 PULS    A                                 ; RESTORE REGISTER VALUE
FC8C B7FE62           (../nhyodyne/cubix):00640                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
FC8F 8840             (../nhyodyne/cubix):00641                 EORA    #PPIDE_RD_LINE                    ; ASSERT RD PIN
FC91 B7FE62           (../nhyodyne/cubix):00642                 STA     PPIDECNTRL
FC94 8600             (../nhyodyne/cubix):00643                 LDA     #$00
FC96 B7FE62           (../nhyodyne/cubix):00644                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FC99 39               (../nhyodyne/cubix):00645                 RTS
                      (../nhyodyne/cubix):00646         
                      (../nhyodyne/cubix):00647         ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (../nhyodyne/cubix):00648         ;INPUT A = IDE REGISTER ADDRESS
                      (../nhyodyne/cubix):00649         ;INPUT REGISTER X = WORD TO WRITE
                      (../nhyodyne/cubix):00650         ;
                      (../nhyodyne/cubix):00651         
FC9A                  (../nhyodyne/cubix):00652         IDE_WRITE:
FC9A BDFCCA           (../nhyodyne/cubix):00653                 JSR     SET_PPI_WR                        ; SETUP FOR A WRITE CYCLE
FC9D 3402             (../nhyodyne/cubix):00654                 PSHS    A
FC9F 1F10             (../nhyodyne/cubix):00655                 TFR     X,D
FCA1 F7FE60           (../nhyodyne/cubix):00656                 STB     PPIDELO                           ; WRITE LOWER BYTE
FCA4 B7FE61           (../nhyodyne/cubix):00657                 STA     PPIDEHI                           ; WRITE UPPER BYTE
FCA7 3502             (../nhyodyne/cubix):00658                 PULS    A                                 ; RESTORE REGISTER VALUE
FCA9 B7FE62           (../nhyodyne/cubix):00659                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
FCAC 8A20             (../nhyodyne/cubix):00660                 ORA     #PPIDE_WR_LINE                    ; ASSERT WRITE PIN
FCAE B7FE62           (../nhyodyne/cubix):00661                 STA     PPIDECNTRL
FCB1 8820             (../nhyodyne/cubix):00662                 EORA    #PPIDE_WR_LINE                    ; DE ASSERT WR PIN
FCB3 B7FE62           (../nhyodyne/cubix):00663                 STA     PPIDECNTRL
FCB6 8600             (../nhyodyne/cubix):00664                 LDA     #$00
FCB8 B7FE62           (../nhyodyne/cubix):00665                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FCBB 39               (../nhyodyne/cubix):00666                 RTS
                      (../nhyodyne/cubix):00667         
                      (../nhyodyne/cubix):00668         
                      (../nhyodyne/cubix):00669         ;-----------------------------------------------------------------------------------
                      (../nhyodyne/cubix):00670         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (../nhyodyne/cubix):00671         ;
                      (../nhyodyne/cubix):00672         ;------------------------------------------------------------------------------------
                      (../nhyodyne/cubix):00673         
FCBC                  (../nhyodyne/cubix):00674         SET_PPI_RD:
FCBC 3402             (../nhyodyne/cubix):00675                 PSHS    A
FCBE 8600             (../nhyodyne/cubix):00676                 LDA     #$00
FCC0 B7FE62           (../nhyodyne/cubix):00677                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FCC3 8692             (../nhyodyne/cubix):00678                 LDA     #PPRD_IDE_8255
FCC5 B7FE63           (../nhyodyne/cubix):00679                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, READ MODE
FCC8 3582             (../nhyodyne/cubix):00680                 PULS    A,PC
                      (../nhyodyne/cubix):00681         
FCCA                  (../nhyodyne/cubix):00682         SET_PPI_WR:
FCCA 3402             (../nhyodyne/cubix):00683                 PSHS    A
FCCC 8600             (../nhyodyne/cubix):00684                 LDA     #$00
FCCE B7FE62           (../nhyodyne/cubix):00685                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
FCD1 8680             (../nhyodyne/cubix):00686                 LDA     #PPWR_IDE_8255
FCD3 B7FE63           (../nhyodyne/cubix):00687                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, WRITE MODE
FCD6 3582             (../nhyodyne/cubix):00688                 PULS    A,PC
                      (../nhyodyne/cubix):00689         
                      (../nhyodyne/cubix):00690         
FCD8                  (../nhyodyne/cubix):00691         MESSAGE1
FCD8 5050494445203A   (../nhyodyne/cubix):00692                 FCC     "PPIDE :"
FCDF 00               (../nhyodyne/cubix):00693                 FCB     00
FCE0                  (../nhyodyne/cubix):00694         MESSAGE2
FCE0 20494F3D3078     (../nhyodyne/cubix):00695                 FCC     " IO=0x"
FCE6 00               (../nhyodyne/cubix):00696                 FCB     00
FCE7                  (../nhyodyne/cubix):00697         MESSAGE3
FCE7 204E4F5420505245 (../nhyodyne/cubix):00698                 FCC     " NOT PRESENT"
     53454E54
FCF3 00               (../nhyodyne/cubix):00699                 FCB     00
FCF4                  (../nhyodyne/cubix):00700         MESSAGE4
FCF4 205050494445303A (../nhyodyne/cubix):00701                 FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
FD04 00               (../nhyodyne/cubix):00702                 FCB     00
FD05                  (../nhyodyne/cubix):00703         MESSAGE5
FD05 205050494445313A (../nhyodyne/cubix):00704                 FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
FD15 00               (../nhyodyne/cubix):00705                 FCB     00
FD16                  (../nhyodyne/cubix):00706         MESSAGE6
FD16 3078             (../nhyodyne/cubix):00707                 FCC     "0x"
FD18 00               (../nhyodyne/cubix):00708                 FCB     00
                      (../nhyodyne/cubix):00709         
                      (../nhyodyne/cubix):00710         
                      (../nhyodyne/cubix):00711         ;ALLOCATE THE FOLLOWING DATA AREAS TO UNUSED RAM SPACE
FD19                  (../nhyodyne/cubix):00712         CDEBCYLL:
FD19 00               (../nhyodyne/cubix):00713                 .BYTE   0                                 ; DEBLOCKED CYLINDER LSB
FD1A                  (../nhyodyne/cubix):00714         CDEBCYLM:
FD1A 00               (../nhyodyne/cubix):00715                 .BYTE   0                                 ; DEBLOCKED CYLINDER MSB
FD1B                  (../nhyodyne/cubix):00716         CDEBSEHD:
FD1B 00               (../nhyodyne/cubix):00717                 .BYTE   0                                 ; DEBLOCKED SECTOR AND HEAD (HS)
FD1C                  (../nhyodyne/cubix):00718         DEBCYLL:
FD1C 00               (../nhyodyne/cubix):00719                 .BYTE   0                                 ; DEBLOCKED CYLINDER LSB
FD1D                  (../nhyodyne/cubix):00720         DEBCYLM:
FD1D 00               (../nhyodyne/cubix):00721                 .BYTE   0                                 ; DEBLOCKED CYLINDER MSB
FD1E                  (../nhyodyne/cubix):00722         DEBSEHD:
FD1E 00               (../nhyodyne/cubix):00723                 .BYTE   0                                 ; DEBLOCKED SECTOR AND HEAD (HS)
FD1F                  (../nhyodyne/cubix):00724         PPIDETMP:
FD1F 00               (../nhyodyne/cubix):00725                 .BYTE   0                                 ; TEMP
                      (../nhyodyne/cubix):00726         
                      (../nhyodyne/cubix):00727         
                      (../nhyodyne/cubix):00728         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (../nhyodyne/cubix):00729         ;*
                      (../nhyodyne/cubix):00730         ;*
                      (../nhyodyne/cubix):00731         ;        READ    IDE SECTOR (IN LBA) INTO BUFFER
                      (../nhyodyne/cubix):00732         ;*
                      (../nhyodyne/cubix):00733         ;*____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00734         ;IDE_READ_SECTOR:
                      (../nhyodyne/cubix):00735         ;        PSHS    X                                 ; STORE BUFFER LOCATION
                      (../nhyodyne/cubix):00736         ;        JSR     IDE_WAIT_BUSY_READY               ; MAKE SURE DRIVE IS READY TO PROCEED
                      (../nhyodyne/cubix):00737         ;        BNE     IDE_READ_SECTOR_ERR               ; ERROR, ABORT
                      (../nhyodyne/cubix):00738         ;        JSR     IDE_SETUP_LBA                     ; TELL DRIVE WHAT SECTOR IS REQUIRED
                      (../nhyodyne/cubix):00739         ;        LDAA    #$20                              ;
                      (../nhyodyne/cubix):00740         ;        STAA    IDESTTS                           ; $20 = IDE 'READ SECTOR' COMMAND
                      (../nhyodyne/cubix):00741         ;        JSR     IDE_WAIT_BUSY_READY               ; MAKE SURE DRIVE IS READY TO PROCEED
                      (../nhyodyne/cubix):00742         ;        BNE     IDE_READ_SECTOR_ERR               ; ERROR, ABORT
                      (../nhyodyne/cubix):00743         ;        JSR     IDE_TEST_ERROR                    ; ENSURE NO ERROR WAS REPORTED
                      (../nhyodyne/cubix):00744         ;        BNE     IDE_READ_SECTOR_ERR               ; ERROR, ABORT
                      (../nhyodyne/cubix):00745         ;        JSR     IDE_WAIT_BUFFER                   ; WAIT FOR FULL BUFFER SIGNAL FROM DRIVE
                      (../nhyodyne/cubix):00746         ;        BNE     IDE_READ_SECTOR_ERR               ; ERROR, ABORT
                      (../nhyodyne/cubix):00747         ;        PULS    X                                 ; GET BUFFER LOCATION
                      (../nhyodyne/cubix):00748         ;        JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
                      (../nhyodyne/cubix):00749         ;        CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
                      (../nhyodyne/cubix):00750         ;        RTS
                      (../nhyodyne/cubix):00751         ;IDE_READ_SECTOR_ERR:
                      (../nhyodyne/cubix):00752         ;        LDAA    #$02
                      (../nhyodyne/cubix):00753         ;        RTS
                      (../nhyodyne/cubix):00754         
                      (../nhyodyne/cubix):00755         
                      (../nhyodyne/cubix):00756         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (../nhyodyne/cubix):00757         ;*
                      (../nhyodyne/cubix):00758         ;*
                      (../nhyodyne/cubix):00759         ;        WRITE   IDE SECTOR (IN LBA) FROM BUFFER
                      (../nhyodyne/cubix):00760         ;*
                      (../nhyodyne/cubix):00761         ;*____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00762         ;IDE_WRITE_SECTOR:
                      (../nhyodyne/cubix):00763         ;        PSHS    X                                 ; STORE BUFFER LOCATION
                      (../nhyodyne/cubix):00764         ;        JSR     IDE_WAIT_BUSY_READY               ; MAKE SURE DRIVE IS READY TO PROCEED
                      (../nhyodyne/cubix):00765         ;        BNE     IDE_WRITE_SECTOR_ERR              ; ERROR, ABORT
                      (../nhyodyne/cubix):00766         ;        JSR     IDE_SETUP_LBA                     ; TELL DRIVE WHAT SECTOR IS REQUIRED
                      (../nhyodyne/cubix):00767         ;        LDAA    #$30                              ;
                      (../nhyodyne/cubix):00768         ;        STAA    IDESTTS                           ; $30 = IDE 'WRITE SECTOR' COMMAND
                      (../nhyodyne/cubix):00769         ;        JSR     IDE_WAIT_BUSY_READY               ;
                      (../nhyodyne/cubix):00770         ;        BNE     IDE_WRITE_SECTOR_ERR              ; ERROR, ABORT
                      (../nhyodyne/cubix):00771         ;        JSR     IDE_TEST_ERROR                    ; ENSURE NO ERROR WAS REPORTED
                      (../nhyodyne/cubix):00772         ;        BNE     IDE_WRITE_SECTOR_ERR              ; ERROR, ABORT
                      (../nhyodyne/cubix):00773         ;        JSR     IDE_WAIT_BUFFER                   ; WAIT FOR BUFFER READY SIGNAL FROM DRIVE
                      (../nhyodyne/cubix):00774         ;        BNE     IDE_WRITE_SECTOR_ERR              ; ERROR, ABORT
                      (../nhyodyne/cubix):00775         ;        PULS    X                                 ; GET BUFFER LOCATION
                      (../nhyodyne/cubix):00776         ;        JSR     IDE_WRITE_BUFFER                  ; SEND 256 WORDS TO DRIVE'S BUFFER
                      (../nhyodyne/cubix):00777         ;        JSR     IDE_WAIT_BUSY_READY               ; MAKE SURE DRIVE IS READY TO PROCEED
                      (../nhyodyne/cubix):00778         ;        BNE     IDE_WRITE_SECTOR_ERR              ; ERROR, ABORT
                      (../nhyodyne/cubix):00779         ;        JSR     IDE_TEST_ERROR                    ; ENSURE NO ERROR WAS REPORTED
                      (../nhyodyne/cubix):00780         ;        BNE     IDE_WRITE_SECTOR_ERR              ; ERROR, ABORT
                      (../nhyodyne/cubix):00781         ;        CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
                      (../nhyodyne/cubix):00782         ;        RTS
                      (../nhyodyne/cubix):00783         ;IDE_WRITE_SECTOR_ERR:
                      (../nhyodyne/cubix):00784         ;        LDA     #$02
                      (../nhyodyne/cubix):00785         ;        RTS
                      (../nhyodyne/cubix):00786         
                      (../nhyodyne/cubix):00787         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (../nhyodyne/cubix):00788         ;*
                      (../nhyodyne/cubix):00789         ;*
                      (../nhyodyne/cubix):00790         ;        SETUP   LBA DATA
                      (../nhyodyne/cubix):00791         ;*
                      (../nhyodyne/cubix):00792         ;*____________________________________________________________________________________________________
                      (../nhyodyne/cubix):00793         ;IDE_SETUP_LBA:
                      (../nhyodyne/cubix):00794         ;        LDAA    #$01                              ;
                      (../nhyodyne/cubix):00795         ;        STAA    IDESECTC                          ; SET SECTOR COUNT = 1
                      (../nhyodyne/cubix):00796         ;        LDAA    SEC,U                             ;
                      (../nhyodyne/cubix):00797         ;        STAA    IDESECTN                          ; SET LBA 0:7
                      (../nhyodyne/cubix):00798         ;        LDAA    CYL,U                             ;
                      (../nhyodyne/cubix):00799         ;        STAA    IDECYLLO                          ; SET LBA 8:15
                      (../nhyodyne/cubix):00800         ;        LDAA    HEAD,U                            ;
                      (../nhyodyne/cubix):00801         ;        STAA    IDECYLHI                          ; SET LBA 16:23
                      (../nhyodyne/cubix):00802         ;        LDAA    #$01                              ;
                      (../nhyodyne/cubix):00803         ;        ANDA    #%00001111                        ; LOWEST 4 BITS USED ONLY
                      (../nhyodyne/cubix):00804         ;        ORA     #%11100000                        ; TO ENABLE LBA MODE
                      (../nhyodyne/cubix):00805         ;        STAA    IDEHEAD                           ; SET LBA 24:27 + BITS 5:7=111
                      (../nhyodyne/cubix):00806         ;        RTS
                      (../nhyodyne/drive):00144         ;*      include CUBIXOS\CUBFLP.asm      FLOPPY I/O DRIVERS
                      (../nhyodyne/drive):00145         ;*      include CUBIXOS\CUBDSKY.asm     DSKY I/O DRIVERS
                      (../nhyodyne/drive):00146         ;*      include CUBIXOS\CUBVDU.asm      DSKY VDU DRIVERS
                      (../nhyodyne/drive):00147         
                      (../nhyodyne/drive):00148         
                      (../nhyodyne/drive):00149         
                      (../nhyodyne/drive):00150                 ORG     $FF00
                      (../nhyodyne/drive):00151         ;
                      (../nhyodyne/drive):00152         ; DISK COMMAND BLOCK
                      (../nhyodyne/drive):00153         ;
                      (../nhyodyne/drive):00154         ;* IGNORE ANY UNUSED INTERRUPTS
FF00                  (../nhyodyne/drive):00155         IGNORE
FF00 3B               (../nhyodyne/drive):00156                 RTI
                      (../nhyodyne/drive):00157         ;* RESULT CODES FOR FDC OPERATIONS
FF01                  (../nhyodyne/drive):00158         RESTAB
FF01 0300020000030401 (../nhyodyne/drive):00159                 FCB     3,0,2,0,0,3,4,1
                      (../nhyodyne/drive):00160         ;*
                      (../nhyodyne/drive):00161         ;* INITIALIZATION TABLE FOR CUBIX RAM
                      (../nhyodyne/drive):00162         ;*
     FF09             (../nhyodyne/drive):00163         RITAB           EQU *
                      (../nhyodyne/drive):00164         ;* DEFAULT DRIVE CHARACTISTICS
FF09 00500209000000   (../nhyodyne/drive):00165                 FCB     0,80,2,9,0,0,0                    ;ADR 0, 80 CYL, 2 HEAD, 9 SEC/TRK
FF10 01FF01FF000000   (../nhyodyne/drive):00166                 FCB     1,255,1,255,0,0,0                 ;ADR 1, 255 CYL, 1 HEAD, 255 SEC/TRK
FF17 02FF01FF000000   (../nhyodyne/drive):00167                 FCB     2,255,1,255,0,0,0                 ;ADR 2, 255 CYL, 1 HEAD, 255 SEC/TRK
FF1E 03FF01FF000000   (../nhyodyne/drive):00168                 FCB     3,255,1,255,0,0,0                 ;ADR 4, 255 CYL, 1 HEAD, 255 SEC/TRK
                      (../nhyodyne/drive):00169         ;* CONSOLE DEVICE ASSIGNMENTS
FF25 01               (../nhyodyne/drive):00170                 FCB     1                                 ;CONSOLE INPUT DEVICE
FF26 01               (../nhyodyne/drive):00171                 FCB     1                                 ;CONSOLE OUTPUT DEVICE
                      (../nhyodyne/drive):00172         ;* SERIAL DEVICE DRIVERS
FF27 F922F93A00000000 (../nhyodyne/drive):00173                 FDB     RDNULL,RDSER1,0,0,0,0,0,0
     0000000000000000
FF37 F924F92A00000000 (../nhyodyne/drive):00174                 FDB     WRNULL,WRSER1,0,0,0,0,0,0
     0000000000000000
                      (../nhyodyne/drive):00175         ;* DISK DEVICE DRIVERS
FF47 F926F929F929F925 (../nhyodyne/drive):00176                 FDB     DHOME,DRDSEC,DWRSEC,DFORMAT
                      (../nhyodyne/drive):00177         ;* 6809 HARDWARE VECTORS
FF4F E00B             (../nhyodyne/drive):00178                 FDB     SSR                               ;SWI VECTOR (USED FOR SSRS)
FF51 FF00             (../nhyodyne/drive):00179                 FDB     IGNORE                            ;SWI2 VECTOR
FF53 FF00             (../nhyodyne/drive):00180                 FDB     IGNORE                            ;SWI3 VECTOR
FF55 FF00             (../nhyodyne/drive):00181                 FDB     IGNORE                            ;IRQ  VECTOR
FF57 FF00             (../nhyodyne/drive):00182                 FDB     IGNORE                            ;FIRQ VECTOR
FF59 FF00             (../nhyodyne/drive):00183                 FDB     IGNORE                            ;NMI VECTOR
                      (../nhyodyne/drive):00184         ;* MISC FLAGS & VARIABLES
FF5B FF               (../nhyodyne/drive):00185                 FCB     $FF                               ;ERROR MESSAGES ENABLED
FF5C 00               (../nhyodyne/drive):00186                 FCB     0                                 ;TRACE DISABLED
FF5D 00               (../nhyodyne/drive):00187                 FCB     0                                 ;DEBUG DISABLED
FF5E 03               (../nhyodyne/drive):00188                 FCB     3                                 ;DEFAULT DRIVE (A)
FF5F 4D41494E         (../nhyodyne/drive):00189                 FCC     'MAIN'                            ;DEFAULT DIRECTORY
FF63 00000000         (../nhyodyne/drive):00190                 FCB     0,0,0,0                           ;(FILLER)
FF67 03               (../nhyodyne/drive):00191                 FCB     3                                 ;SYSTEM DRIVE (A)
FF68 53595354454D     (../nhyodyne/drive):00192                 FCC     'SYSTEM'                          ;SYSTEM DIRECTORY
FF6E 0000             (../nhyodyne/drive):00193                 FCB     0,0                               ;(FILLER)
     0067             (../nhyodyne/drive):00194         RISIZ           EQU *-RITAB                       ;SIZE OF INITILAIZED RAM
                      (../nhyodyne/drive):00195         ;
                      (        cubix.asm):01496                 ENDIF
                      (        cubix.asm):01497         ;*
                      (        cubix.asm):01498         ;* INTERRUPT VECTORS
                      (        cubix.asm):01499         ;*
                      (        cubix.asm):01500                 IFNDEF  test
                      (        cubix.asm):01501                 ORG     $FFF2                             ;VECTORS GO HERE
FFF2 F6D8             (        cubix.asm):01502                 FDB     SWI3
FFF4 F6D4             (        cubix.asm):01503                 FDB     SWI2
FFF6 F6E0             (        cubix.asm):01504                 FDB     FIRQ
FFF8 F6DC             (        cubix.asm):01505                 FDB     IRQ
FFFA F6D0             (        cubix.asm):01506                 FDB     SWI
FFFC F6E4             (        cubix.asm):01507                 FDB     NMI
FFFE E0FB             (        cubix.asm):01508                 FDB     BEGIN                             ;RESET - COLD START OF SYSTEM
                      (        cubix.asm):01509                 ENDIF

Symbol Table:
[ G] ATRTAB                           F067
[ G] BADCMD                           E23B
[ G] BADDEV                           E59B
[ G] BADOP1                           E3DA
[ G] BADOP2                           E37D
[ G] BADOP3                           F05C
[ G] BADOPM                           F705
[ G] BADOPR                           E29F
[ G] BEGIN                            E0FB
[ G] BLOAD                            EE24
[ G] BRET                             E340
[ G] BSAVE                            EE59
[ G] CALFRE                           F325
[ G] CDEBCYLL                         FD19
[ G] CDEBCYLM                         FD1A
[ G] CDEBSEHD                         FD1B
[ G] CEND                             E327
[ G] CEXI                             F548
[ G] CEXIT                            F537
[ G] CHAIN                            F599
[ G] CHGDRV                           F082
[ G] CHGWRK                           E787
[ G] CLO0                             E96B
[ G] CLO1                             E96F
[ G] CLO2                             E97E
[ G] CLO3                             E982
[ G] CLO4                             E997
[ G] CLOC1                            E8C1
[ G] CLOC2                            E8C8
[ G] CLOSE                            E956
[ G] CLRFLG                           F0FC
[ G] CMD                              E175
[ G] CMDADR                           F815
[ G] CMDBUF                           DCED
[ G] CMDC1                            F5D3
[ G] CMDC2                            F5DD
[ G] CMDC3                            F5E7
[ G] CMDC4                            F5EB
[ G] CMDC5                            F5F5
[ G] CMDC6                            F5F6
[ G] CMDCMP                           F5C8
[ G] CMDDRV                           DCE1
[ G] CMDEOF                           F443
[ G] CMDEX                            F451
[ G] CMDGO                            E1A4
[ G] CMDIN                            F579
[ G] CMDKEY                           F5BC
[ G] CMDNAM                           F7BF
[ G] CMDOFF                           DCE4
[ G] CMDRC                            DCE8
[ G] CMDRET                           F55F
[ G] CMDRT0                           F562
[ G] CMDRT1                           F576
[ G] CMDRT2                           F5F9
[ G] CMDSEC                           DCE2
[ G] CMDSKP                           F5A5
[ G] CMDSTK                           DCE6
[ G] CMPR                             F4FD
[ G] CMPR1                            F50A
[ G] CNC1                             EFBC
[ G] CNC2                             EFCD
[ G] CNCT                             EFB6
[ G] COMFIL                           F44C
[ G] COMGO                            F461
[ G] COMNAM                           E30A
[ G] COMX                             E329
[ G] CONIN                            DC6C
[ G] CONOUT                           DC6D
[ G] CRD1                             ECFF
[ G] CRD2                             ED05
[ G] CRE1                             E71F
[ G] CRE2                             E727
[ G] CRE3                             E72C
[ G] CRE5                             E758
[ G] CRE6                             E762
[ G] CRE7                             E76A
[ G] CREAD                            ECE4
[ G] CREATE                           E70A
[ G] CREF1                            ED7C
[ G] CREFIL                           ED68
[ G] CSIZE                            0007
[ G] CSRC                             F525
[ G] CURDRVADDRESS                    F951
[ G] CURDRVSLICE                      F952
[ G] CURSIZ                           E6F8
[ G] CWR1                             ED2F
[ G] CWR2                             ED35
[ G] CWRITE                           ED14
[ G] CYL                              0004
[ G] DATTR                            0017
[ G] DBGFLG                           DCA3
[ G] DBGSSR                           E040
[ G] DCTRL                            DC50
[ G] DDADR                            0013
[ G] DEBCYLL                          FD1C
[ G] DEBCYLM                          FD1D
[ G] DEBSEHD                          FD1E
[ G] DECDIG                           E447
[ G] DEFATR                           00F0
[ G] DEFDIR                           DCA6
[ G] DEFDRV                           DCA5
[ G] DELETE                           ED82
[ G] DELFIL                           ED7F
[ G] DETAB                            EB8C
[ G] DEVMSG                           F79C
[ G] DFORMAT                          F925
[ G] DHOME                            F926
[ G] DIGOK                            E420
[ G] DIRSEC                           0000
[ G] DISDIR                           E69C
[ G] DISF1                            F336
[ G] DISF2                            F33C
[ G] DISF3                            F347
[ G] DISF4                            F358
[ G] DISP8                            E6EB
[ G] DISPX                            E6ED
[SG] dist                             0001
[ G] DITAB                            DC6E
[ G] DIV1                             F69F
[ G] DIV16                            F697
[ G] DIV2                             F6A1
[ G] DIV3                             F6B6
[ G] DMPREG                           E086
[ G] DMPREG1                          E089
[ G] DNAME                            0008
[ G] DNL0                             EEFB
[ G] DNL1                             EF33
[ G] DNL2                             EF46
[ G] DNL3                             EF71
[ G] DNL4                             EFA2
[ G] DNLD                             EEE8
[ G] DNLDEV                           EF30
[ G] DNLEND                           EF15
[ G] DNLMSG                           F7AA
[ G] DNLRTS                           EEE6
[ G] DOINIT                           E004
[ G] DOSKCM                           E1AD
[ G] DOTAB                            DC7E
[ G] DPERM                            0010
[ G] DPREFIX                          0000
[ G] DRADR                            0015
[ G] DRDSEC                           F929
[ G] DRIVE                            0000
[ G] DRIVERS                          E99F
[ G] DRVSIZ                           E6FB
[ G] DSHFT                            E428
[ G] DTYPE                            0010
[ G] DWRSEC                           F929
[ G] EOF                              E8A4
[ G] EPERM                            0020
[ G] ERRCNT                           DCEC
[ G] ERRM1                            E2B7
[ G] ERRM2                            E2BC
[ G] ERRM3                            E2CD
[ G] ERRM4                            E2D2
[ G] ERRMRC                           E2A4
[ G] ERRRET                           E2DF
[ G] EX1                              F298
[ G] EX2                              F29D
[ G] EX3                              F2A4
[ G] EX4                              F2AB
[ G] EX5                              F2B8
[ G] EX6                              F2C2
[ G] EX7                              F2CC
[ G] EX8                              F2CE
[ G] EX9                              F2E1
[ G] EXDCOM                           F54B
[ G] EXE                              E20B
[ G] EXE1                             E223
[ G] EXE2                             E226
[ G] EXE3                             E242
[ G] EXE4                             E263
[ G] EXE5                             E26F
[ G] EXECMD                           E1B4
[ G] EXIMSG                           F72D
[ G] FDRIVE                           DCB7
[ G] FEXISTS                          E716
[ G] FIL1                             ED49
[ G] FIL2                             ED65
[ G] FILERR                           E64A
[ G] FILES                            ED44
[ G] FILFND                           E69B
[ G] FIRQ                             F6E0
[ G] FIRQVEC                          DC9E
[ G] FNAME                            DCC0
[ G] FNDF1                            E7C7
[ G] FNDF2                            E7D0
[ G] FNDF3                            E7D2
[ G] FNDFRE                           E7C1
[ G] FNDLNK                           E5C6
[ G] FORMAT                           F6BA
[ G] FRES1                            E7B0
[ G] FRES2                            E7B2
[ G] FRESEC                           E790
[ G] FTEL1                            EA00
[ G] FTEL2                            EA0E
[ G] FTELL                            E9F3
[ G] FTYPE                            DCC8
[ G] GETA1                            F04B
[ G] GETA2                            F055
[ G] GETA3                            F05F
[ G] GETA4                            F065
[ G] GETATR                           F048
[ G] GETBYT                           EF96
[ G] GETCHR                           E5C1
[ G] GETCTL                           EAEC
[ G] GETCTL1                          EAEF
[ G] GETD1                            E3AF
[ G] GETD2                            E3B8
[ G] GETD3                            E3CE
[ G] GETD4                            E3DD
[ G] GETD5                            E3E4
[ G] GETDEC                           E43D
[ G] GETDEV                           F0D6
[ G] GETDIR                           E397
[ G] GETDIR1                          E39A
[ G] GETDRV                           E3E6
[ G] GETDRV1                          E3E9
[ G] GETDV                            E444
[ G] GETHEX                           E403
[ G] GETHV                            E408
[ G] GETL1                            E40B
[ G] GETN1                            EFB5
[ G] GETNAM                           E35E
[ G] GETNIB                           EFA3
[ G] GETNUM                           E3F8
[ G] GETSDI                           E304
[ G] GETSN0                           E280
[ G] GETSN1                           E287
[ G] GETSN2                           E295
[ G] GETSNA                           E27D
[ G] GETSYS                           E301
[ G] GETVAL                           E357
[ G] GF1                              E362
[ G] GF2                              E373
[ G] GF3                              E380
[ G] GFNAM                            E360
[ G] GFTYP                            E36F
[ G] GLFCR                            E489
[ G] GLINE                            E48C
[ G] GLINE1                           E495
[ G] GLINE2                           E4A6
[ G] GLINE3                           E4B1
[ G] GLNOP                            E491
[ G] GOCMD                            F4E9
[ G] GOFLG                            F0FF
[ G] GOPAD                            E292
[ G] GRTS                             E5E2
[ G] HDE                              EB1D
[ G] HDE1                             EB3A
[ G] HDE2                             EB72
[ G] HDE3                             EB77
[ G] HDE4                             EB81
[ G] HEAD                             0005
[ G] HELLO                            E105
[ G] HEXEND                           E438
[ G] HOME                             F6BE
[ G] HOUT                             E54F
[ G] HSTBUF                           0400
[ G] HWIN1                            F914
[ G] HWINIT                           F90F
[ G] IDE_ABORT                        F981
[ G] IDE_CONVERT_SECTOR               FC53
[ G] IDE_INITA                        F9A3
[ G] IDE_PPIDETECT                    FA4D
[ G] IDE_PRINT_INFO                   F98A
[ G] IDE_READ                         FC75
[ G] IDE_READ_BUFFER                  FBD4
[ G] IDE_READ_INFO                    F9F2
[ G] IDE_READ_INFO_ABORT              FA3B
[ G] IDE_READ_INFO_OK                 FA47
[ G] IDE_READ_NO_SETUP                FC78
[ G] IDE_READ_RAW_SECTOR              FA8E
[ G] IDE_READ_SECTOR                  FA5B
[ G] IDE_READ_SECTOR_DIRTY            FAAC
[ G] IDE_READ_SECTOR_DIRTY1           FAB1
[ G] IDE_READ_SECTOR_DIRTY_ERROR      FAD9
[ G] IDE_READ_SECTOR_ERROR            FA8A
[ G] IDE_SETUP_LBA                    FC10
[ G] IDE_WAIT_DRQ                     FBA4
[ G] IDE_WAIT_DRQ1                    FBAE
[ G] IDE_WAIT_DRQ2                    FBD0
[ G] IDE_WAIT_DRQ3                    FBD2
[ G] IDE_WAIT_DRQE                    FBCB
[ G] IDE_WAIT_NOT_BUSY                FB7B
[ G] IDE_WAIT_NOT_BUSY1               FB85
[ G] IDE_WAIT_NOT_BUSY2               FB9F
[ G] IDE_WAIT_NOT_BUSY3               FBA1
[ G] IDE_WRITE                        FC9A
[ G] IDE_WRITE_BUFFER                 FBF2
[ G] IDE_WRITE_SECTOR                 FADC
[ G] IDE_WRITE_SECTOR_ERROR           FB40
[ G] IDE_WRITE_SECTOR_ERROR1          FB3E
[ G] IDEBUFRD                         FBD8
[ G] IDEBUFWT                         FBF6
[ G] IGNORE                           FF00
[ G] INBUFF                           DC00
[ G] INI00                            EBEF
[ G] INI01                            EC09
[ G] INI02                            EC11
[ G] INI1                             EC1C
[ G] INI10                            ECD6
[ G] INI2                             EC6B
[ G] INI3                             EC89
[ G] INI4                             EC96
[ G] INI5                             ECA3
[ G] INI6                             ECAD
[ G] INI7                             ECB9
[ G] INI8                             ECC3
[ G] INI9                             ECCA
[ G] INIT                             EBDD
[ G] INITAB                           F3E7
[ G] INVSSR                           E05C
[ G] IOTAB                            F435
[ G] IPLFILE                          F6E8
[ G] IRAM                             DC50
[ G] IRQ                              F6DC
[ G] IRQVEC                           DC9C
[ G] LCHAIN                           EE48
[ G] LFCR                             E56F
[ G] LNKSEC                           0001
[ G] LOCCR                            F5B2
[ G] LOCDIR                           E678
[ G] LOCERR                           E640
[ G] LOCFIL                           E684
[ G] LOCLP                            F5AE
[ G] LOCRED                           E889
[ G] LOCSEC                           E681
[ G] LOCWRI                           E8B7
[ G] LODERR                           EF88
[ G] LODF1                            EE46
[ G] LODFIL                           EE30
[ G] MBASE                            E002
[ G] MESSAGE1                         FCD8
[ G] MESSAGE2                         FCE0
[ G] MESSAGE3                         FCE7
[ G] MESSAGE4                         FCF4
[ G] MESSAGE5                         FD05
[ G] MESSAGE6                         FD16
[ G] MOVD1                            F010
[ G] MOVDIR                           F00A
[ G] MSGFLG                           DCA2
[ G] MUL16                            F677
[ G] MULD1                            EDB9
[ G] MULD2                            EDBC
[ G] MULD3                            EE13
[ G] MULD4                            EE23
[ G] MULD5                            EDDA
[ G] MULDEL                           EDB6
[ G] NAMGET                           E285
[ G] NCYL                             0001
[ G] NDEV                             0008
[ G] NDSK                             0004
[ G] NEWLIN                           F48A
[ G] NHEAD                            0002
[SG] nhyodyne                         0001
[ G] NMI                              F6E4
[ G] NMIVEC                           DCA0
[ G] NOEMSG                           E2DD
[ G] NOFMSG                           E671
[ G] NOMAC                            F4C3
[ G] NOSHO                            E6A3
[ G] NOSMSG                           F740
[ G] NOSPAC                           E7B9
[ G] NOSUSP                           EECB
[ G] NOTFND                           E644
[ G] NOTMSG                           F71F
[ G] NOTNUL                           E317
[ G] NSEC                             0003
[ G] NULCMD                           E1DD
[ G] NUMCMD                           000E
[ G] NUMFLG                           0003
[ G] NUMSSR                           006F
[ G] ODRIVE                           0001
[ G] OFIRST                           0002
[ G] OKRET                            EE58
[ G] OLDSTK                           DCE9
[ G] OLSTSEC                          0006
[ G] OOFFSET                          0008
[ G] OOTAB                            F42D
[ G] OPENR                            E7F2
[ G] OPENW                            E8CE
[ G] OREMSG                           F756
[ G] ORERR                            E89C
[ G] OSECTOR                          0004
[ G] OSIZ                             000A
[ G] OTYPE                            0000
[ G] OWEMSG                           F76C
[ G] OWERR                            E910
[ G] PAD                              E390
[ G] PAR1                             F4AD
[ G] PAR2                             F4B3
[ G] PAR3                             F4BA
[ G] PAROK                            F4A7
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       F953
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        FE60
[ G] PPIDE_PROBE                      F9A7
[ G] PPIDE_PROBE_FAIL                 F9EF
[ G] PPIDE_PROBE_SUCCESS              F9F1
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      FB50
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       FE62
[ G] PPIDEHI                          FE61
[ G] PPIDEINDEX                       F94C
[ G] PPIDELO                          FE60
[ G] PPIDEPPIC                        FE63
[ G] PPIDETIMEOUT                     F94D
[ G] PPIDETMP                         FD1F
[ G] PPIDEWORKVAR                     F94F
[ G] PPRD_IDE_8255                    0092
[ G] PPWR_IDE_8255                    0080
[ G] PREFIX                           DCB8
[ G] PROERR                           E893
[ G] PROMSG                           F783
[ G] PURGE                            E60A
[ G] PURGE1                           E60C
[ G] PUTCHR                           E581
[ G] QVECT                            F65D
[ G] RAM                              DC00
[ G] RCBOP                            0001
[ G] RCC1                             F607
[ G] RCC2                             F61A
[ G] RCC3                             F633
[ G] RCCHR                            F5FC
[ G] RCCMD                            00FF
[ G] RCDEV                            000A
[ G] RCDNL                            000B
[ G] RCDSK                            0009
[ G] RCEOF                            0006
[ G] RCEXI                            0007
[ G] RCNOS                            0008
[ G] RCNOTF                           0002
[ G] RCOND                            F513
[ G] RCORE                            0004
[ G] RCOWE                            0005
[ G] RCPRO                            0003
[ G] RCRET                            E181
[ G] RDDEV                            E5A3
[ G] RDDLC                            EF90
[ G] RDISK                            EAC5
[ G] RDNULL                           F922
[ G] RDONE                            EAEA
[ G] RDSEC                            F6C8
[ G] RDSER1                           F93A
[ G] RDSER1N                          F949
[ G] RDW1                             E5F8
[ G] RDWRK                            E5E3
[ G] READB                            E85F
[ G] READC                            E814
[ G] REC1                             E833
[ G] REC2                             E84D
[ G] REDCHR                           F48D
[ G] REDIN                            F635
[ G] REDOUT                           F63A
[ G] REENT                            E193
[ G] REEXG                            F651
[ G] RESTAB                           FF01
[ G] RESU1                            EA8D
[ G] RESU2                            EA92
[ G] RESU3                            EA9D
[ G] RESUME                           EA71
[ G] RETNZ                            E354
[ G] RETURN                           EEC2
[ G] RETZ                             F65A
[ G] RETZ1                            F673
[ G] REWIND                           E8A9
[ G] RISIZ                            0067
[ G] RITAB                            FF09
[ G] RNXT                             E337
[ G] RNXT1                            E339
[ G] ROM                              E000
[ G] ROMCHK                           E000
[ G] RPERM                            0080
[ G] RRTS                             E608
[ G] RST_DLY                          FB6E
[ G] RSUCC                            F51E
[ G] RTRY1                            EACC
[ G] RTRY2                            EAD0
[ G] RUN                              E1DE
[ G] RUN1                             E1E1
[ G] RUN2                             E1EC
[ G] SAVB                             DCD5
[ G] SAVDRV                           DCDA
[ G] SAVF1                            EE70
[ G] SAVF2                            EE7D
[ G] SAVF3                            EEAE
[ G] SAVFIL                           EE61
[ G] SAVP1                            F58D
[ G] SAVP2                            F597
[ G] SAVPRM                           F588
[ G] SAVSTK                           DCDB
[ G] SAVX                             DCD6
[ G] SAVY                             DCD8
[ G] SDC1                             F134
[ G] SDC2                             F13B
[ G] SDCMD                            F126
[ G] SDRIVE                           DCEB
[ G] SDTAB                            F406
[ G] SEC                              0006
[ G] SEC1                             EAB3
[ G] SEC2                             EABD
[ G] SECTOR                           EAA5
[ G] SEEK1                            E9B7
[ G] SEEK2                            E9D7
[ G] SEEK3                            E9EA
[ G] SEEKABS                          E9A2
[ G] SEEKREL                          E9A5
[ G] SELDRV                           F657
[ G] SERIALINIT                       F929
[ G] SET                              EFDA
[ G] SET0                             EFEB
[ G] SET1                             EFFA
[ G] SET2                             F019
[ G] SET3                             F06F
[ G] SET4                             F0A7
[ G] SET5                             F0BB
[ G] SET_PPI_RD                       FCBC
[ G] SET_PPI_WR                       FCCA
[ G] SETADR                           F3A2
[ G] SETCMD                           F005
[ G] SETDEF                           EFF3
[ G] SETF0                            F01F
[ G] SETF1                            F036
[ G] SETF2                            F040
[ G] SETFLG                           F0F6
[ G] SETIN                            F63F
[ G] SETOUT                           F649
[ G] SETTAB                           F35F
[ G] SETVAR                           F584
[ G] SFTAB                            F3CE
[ G] SH21                             F1A0
[ G] SH22                             F1A8
[ G] SH23                             F1B5
[ G] SHFLAG                           F26D
[ G] SHOADR                           F3B8
[ G] SHODRA                           F22D
[ G] SHODRB                           F232
[ G] SHODRV                           F1E3
[ G] SHOFIL                           E6B6
[ G] SHOME                            E69E
[ G] SHON1                            E6D2
[ G] SHONAM                           E6D0
[ G] SHOOFF                           F283
[ G] SHOSAV                           E6BD
[ G] SHOT1                            F23F
[ G] SHOT2                            F24A
[ G] SHOT3                            F253
[ G] SHOT4                            F256
[ G] SHOTAB                           F23C
[ G] SHOW                             F112
[ G] SHOW0                            F11E
[ G] SHOW1                            F123
[ G] SHOW2                            F146
[ G] SHOW3                            F1E0
[ G] SHOW4                            F28B
[ G] SHOW5                            F25A
[ G] SHOW6                            F2E3
[ G] SHRT                             E6F4
[ G] SKIP                             E4C3
[ G] SKRTS                            E4CF
[ G] SPACE                            E579
[ G] SPC1                             E57D
[ G] SSR                              E00B
[ G] SSRTAB                           F831
[ G] ST1                              F0AA
[ G] STACK                            DE00
[ G] STFLAG                           F0E3
[ G] SUSP1                            EA57
[ G] SUSP2                            EA62
[ G] SUSPEND                          EA1F
[ G] SVECT                            F667
[ G] SWI                              F6D0
[ G] SWI2                             F6D4
[ G] SWI2VEC                          DC98
[ G] SWI3                             F6D8
[ G] SWI3VEC                          DC9A
[ G] SWIVEC                           DC96
[ G] SYSDIR                           DCAF
[ G] SYSDRV                           DCAE
[ G] TEMP                             DCCB
[ G] TEMP1                            DCCD
[ G] TEMP2                            DCCF
[ G] TEMP3                            DCD1
[ G] TEMP4                            DCD3
[ G] TLOOK                            E4EC
[ G] TLOOK1                           E4EF
[ G] TLOOK2                           E4FE
[ G] TLOOK3                           E51B
[ G] TLOOK4                           E520
[ G] TLOOK5                           E522
[ G] TLOOK6                           E527
[ G] TLOOKE                           F09D
[ G] TMPENT                           E1A9
[ G] TOUPPER                          E4E1
[ G] TRAC1                            F4D9
[ G] TRAC2                            F4E6
[ G] TRCFLG                           DCA4
[ G] TRET                             E4E0
[ G] TSTCHR                           E5BA
[ G] TSTDE1                           E5AA
[ G] TSTDEV                           E5A8
[ G] TSTE1                            E4DC
[ G] TSTERM                           E4D0
[ G] TSTRET                           F52E
[ G] UART0                            FE68
[ G] UART1                            FE69
[ G] UART2                            FE6A
[ G] UART3                            FE6B
[ G] UART4                            FE6C
[ G] UART5                            FE6D
[ G] UART6                            FE6E
[ G] UART7                            FE6F
[ G] UNC1                             EDAF
[ G] UNCHAIN                          ED9B
[ G] UNCMD                            F6F1
[ G] USREND                           DFFF
[ G] USRRAM                           2000
[ G] VALCHR                           E38A
[ G] VALID                            E343
[ G] VALTST                           E34A
[ G] WDISK                            EAF8
[ G] WPERM                            0040
[ G] WRB1                             E940
[ G] WRC1                             E901
[ G] WRDE1                            E46D
[ G] WRDE2                            E47C
[ G] WRDEC                            E465
[ G] WRDEC8                           E464
[ G] WRDEV                            E588
[ G] WRDEV1                           E58A
[ G] WRHEX                            E541
[ G] WRHEXW                           E52C
[ G] WRITEB                           E918
[ G] WRITEC                           E8F1
[ G] WRKCHG                           DCDD
[ G] WRKDRV                           DCDE
[ G] WRKSEC                           DCDF
[ G] WRKSPC                           DE00
[ G] WRLIN                            E535
[ G] WRMSG                            E565
[ G] WRNULL                           F924
[ G] WRSEC                            F6CC
[ G] WRSER1                           F92A
[ G] WRST1                            E55D
[ G] WRST2                            E57F
[ G] WRSTR                            E55B
[ G] WRTST                            E61A
[ G] WRWRK                            E61F
[ G] WTRY1                            EAFF
[ G] WTRY2                            EB03
[ G] XFORMAT                          DC94
[ G] XHOME                            DC8E
[ G] XRDSEC                           DC90
[ G] XWRSEC                           DC92
[ G] ZERORC                           E2FA
