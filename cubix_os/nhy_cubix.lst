                      (        cubix.asm):00001         ;       title   CUBIX 6809 Operating System
                      (        cubix.asm):00002         ;*
                      (        cubix.asm):00003         ;* CUBIX Operating System for the 6809
                      (        cubix.asm):00004         ;*
                      (        cubix.asm):00005         ;* Copyright 1983-2005 Dave Dunfield
                      (        cubix.asm):00006         ;* All rights reserved.
                      (        cubix.asm):00007         ;*
                      (        cubix.asm):00008                 IFDEF   duodyne
                      (        cubix.asm):00009         ;* MEMORY LOCATIONS FOR DUODYNE
0000                  (        cubix.asm):00010         ROM             EQU $E000                         ; OS FIRMWARE
0000                  (        cubix.asm):00011         RAM             EQU $1000                         ; OS LOCAL STORAGE (1K)
0000                  (        cubix.asm):00012         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
0000                  (        cubix.asm):00013         USREND          EQU ROM-257                       ; RAMTEST STOPS HERE
                      (        cubix.asm):00014                 ENDIF
                      (        cubix.asm):00015         
                      (        cubix.asm):00016                 IFDEF   nhyodyne
                      (        cubix.asm):00017         ;* MEMORY LOCATIONS FOR NHYODYNE
     E000             (        cubix.asm):00018         ROM             EQU $E000                         ; OS FORMWARE
     DC00             (        cubix.asm):00019         RAM             EQU ROM-1024                      ; OS LOCAL STORAGE
     2000             (        cubix.asm):00020         USRRAM          EQU $2000                         ; START OF USER SUPPLIED RAM
     DFFF             (        cubix.asm):00021         USREND          EQU ROM-1                         ; RAMTEST STOPS HERE
                      (        cubix.asm):00022                 ENDIF
                      (        cubix.asm):00023         
                      (        cubix.asm):00024         ;* MISC CONSTANTS
     0008             (        cubix.asm):00025         NDEV            EQU 8                             ; NUMBER OF SERIAL DEVICES SUPPORTED
     0004             (        cubix.asm):00026         NDSK            EQU 4                             ; # OF DISK DRIVES SUPPORTED
     0000             (        cubix.asm):00027         DIRSEC          EQU 0                             ; DIRECTORY STARTS HERE
     0001             (        cubix.asm):00028         LNKSEC          EQU 1                             ; STARTING LINK SECTOR ON DISK
     00F0             (        cubix.asm):00029         DEFATR          EQU %11110000                     ; DEFAULT FILE ATTRIBUTES
                      (        cubix.asm):00030         ;* RETURN CODES
     0001             (        cubix.asm):00031         RCBOP           EQU 1                             ; BAD OPERAND
     0002             (        cubix.asm):00032         RCNOTF          EQU 2                             ; FILE NOT FOUND
     0003             (        cubix.asm):00033         RCPRO           EQU 3                             ; FILE PROTECTION VIOLATION
     0004             (        cubix.asm):00034         RCORE           EQU 4                             ; NOT OPEN FOR READ
     0005             (        cubix.asm):00035         RCOWE           EQU 5                             ; NOT OPEN FOR WRITE
     0006             (        cubix.asm):00036         RCEOF           EQU 6                             ; END OF FILE ENCOUNTERED
     0007             (        cubix.asm):00037         RCEXI           EQU 7                             ; FILE ALREADY EXISTS
     0008             (        cubix.asm):00038         RCNOS           EQU 8                             ; NO DISK SPACE AVAILABLE
     0009             (        cubix.asm):00039         RCDSK           EQU 9                             ; DISK ERROR
     000A             (        cubix.asm):00040         RCDEV           EQU 10                            ; INVALID DEVICE
     000B             (        cubix.asm):00041         RCDNL           EQU 11                            ; DOWNLOAD FAILURE
     00FF             (        cubix.asm):00042         RCCMD           EQU 255                           ; BAD COMMAND
                      (        cubix.asm):00043         ;* FILE PERMISSIONS
     0080             (        cubix.asm):00044         RPERM           EQU %10000000                     ; READ PERMISSION
     0040             (        cubix.asm):00045         WPERM           EQU %01000000                     ; WRITE PERMISSION
     0020             (        cubix.asm):00046         EPERM           EQU %00100000                     ; EXECUTE PERMISSION
     0010             (        cubix.asm):00047         DPERM           EQU %00010000                     ; DELETE PERMISSION
                      (        cubix.asm):00048         ;* DISK CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00049                 ORG     0
0000                  (        cubix.asm):00050         DRIVE
0000                  (        cubix.asm):00051                 RMB     1                                 ; DRIVE ID
0001                  (        cubix.asm):00052         NCYL
0001                  (        cubix.asm):00053                 RMB     1                                 ; # TRACKS
0002                  (        cubix.asm):00054         NHEAD
0002                  (        cubix.asm):00055                 RMB     1                                 ; # HEADS
0003                  (        cubix.asm):00056         NSEC
0003                  (        cubix.asm):00057                 RMB     1                                 ; # SECTORS/TRACK
0004                  (        cubix.asm):00058         CYL
0004                  (        cubix.asm):00059                 RMB     1                                 ; CURRENT CYLINDER
0005                  (        cubix.asm):00060         HEAD
0005                  (        cubix.asm):00061                 RMB     1                                 ; CURRENT HEAD
0006                  (        cubix.asm):00062         SEC
0006                  (        cubix.asm):00063                 RMB     1                                 ; CURRENT SECTOR
     0007             (        cubix.asm):00064         CSIZE           EQU *
                      (        cubix.asm):00065         ;* DIRECTORY ENTRY DESCRIPTION
                      (        cubix.asm):00066                 ORG     0
0000                  (        cubix.asm):00067         DPREFIX
0000                  (        cubix.asm):00068                 RMB     8                                 ; DIRECTORY PREFIX
0008                  (        cubix.asm):00069         DNAME
0008                  (        cubix.asm):00070                 RMB     8                                 ; FILENAME
0010                  (        cubix.asm):00071         DTYPE
0010                  (        cubix.asm):00072                 RMB     3                                 ; FILETYPE
0013                  (        cubix.asm):00073         DDADR
0013                  (        cubix.asm):00074                 RMB     2                                 ; DISK ADDRESS
0015                  (        cubix.asm):00075         DRADR
0015                  (        cubix.asm):00076                 RMB     2                                 ; RUN ADDRESS
0017                  (        cubix.asm):00077         DATTR
0017                  (        cubix.asm):00078                 RMB     1                                 ; FILE ATTRIBUTES
                      (        cubix.asm):00079         ;* FILE CONTROL BLOCK DESCRIPTION
                      (        cubix.asm):00080                 ORG     0
0000                  (        cubix.asm):00081         OTYPE
0000                  (        cubix.asm):00082                 RMB     1                                 ; TYPE OF OPEN (READ/WRITE ETC.)
0001                  (        cubix.asm):00083         ODRIVE
0001                  (        cubix.asm):00084                 RMB     1                                 ; DRIVE FILE IS ON
0002                  (        cubix.asm):00085         OFIRST
0002                  (        cubix.asm):00086                 RMB     2                                 ; FIRST SECTOR IN ILE
0004                  (        cubix.asm):00087         OSECTOR
0004                  (        cubix.asm):00088                 RMB     2                                 ; SECTOR BEING READ/WRITTEN
0006                  (        cubix.asm):00089         OLSTSEC
0006                  (        cubix.asm):00090                 RMB     2                                 ; LAST SECTOR READ/WRITTEN
0008                  (        cubix.asm):00091         OOFFSET
0008                  (        cubix.asm):00092                 RMB     2                                 ; OFFSET INTO SERIAL BUFFER
     000A             (        cubix.asm):00093         OSIZ            EQU *
                      (        cubix.asm):00094         ;* RAM VARIABLES
                      (        cubix.asm):00095                 ORG     RAM
DC00                  (        cubix.asm):00096         INBUFF
DC00                  (        cubix.asm):00097                 RMB     80                                ; INPUT BUFFER
     DC50             (        cubix.asm):00098         IRAM            EQU *                             ; START OF INITIALIZED RAM
DC50                  (        cubix.asm):00099         DCTRL
DC50                  (        cubix.asm):00100                 RMB     CSIZE*NDSK                        ; DRIVE CONTROL BLOCKS
DC6C                  (        cubix.asm):00101         CONIN
DC6C                  (        cubix.asm):00102                 RMB     1                                 ; SELECTED CONSOLE INPUT
DC6D                  (        cubix.asm):00103         CONOUT
DC6D                  (        cubix.asm):00104                 RMB     1                                 ; SELECTED CONSOLE OUTPUT
                      (        cubix.asm):00105         ;* DITAB MARKS START OF VECTOR TABLE
                      (        cubix.asm):00106         ;* SERIAL DEVICE DRIVERS
DC6E                  (        cubix.asm):00107         DITAB
DC6E                  (        cubix.asm):00108                 RMB     NDEV*2                            ; DEVICE INPUT DRIVERS
DC7E                  (        cubix.asm):00109         DOTAB
DC7E                  (        cubix.asm):00110                 RMB     NDEV*2                            ; DEVICE OUTPUT DRIVERS
                      (        cubix.asm):00111         ;* DISK DRIVERS
DC8E                  (        cubix.asm):00112         XHOME
DC8E                  (        cubix.asm):00113                 RMB     2                                 ; DISK HOME HEAD ROUTINE
DC90                  (        cubix.asm):00114         XRDSEC
DC90                  (        cubix.asm):00115                 RMB     2                                 ; DISK READ SECTOR ROUTINE
DC92                  (        cubix.asm):00116         XWRSEC
DC92                  (        cubix.asm):00117                 RMB     2                                 ; DISK WRITE SECTOR ROUTINE
DC94                  (        cubix.asm):00118         XFORMAT
DC94                  (        cubix.asm):00119                 RMB     2                                 ; DISK FORMAT ROUTINE
                      (        cubix.asm):00120         ;* MACHINE VECTORS
DC96                  (        cubix.asm):00121         SWIVEC
DC96                  (        cubix.asm):00122                 RMB     2                                 ; SWI HANDLER VECTOR
DC98                  (        cubix.asm):00123         SWI2VEC
DC98                  (        cubix.asm):00124                 RMB     2                                 ; SWI2 INTERRUPT VECTOR
DC9A                  (        cubix.asm):00125         SWI3VEC
DC9A                  (        cubix.asm):00126                 RMB     2                                 ; SWI3 INTERRUPT VECTOR
DC9C                  (        cubix.asm):00127         IRQVEC
DC9C                  (        cubix.asm):00128                 RMB     2                                 ; IRQ HANDLER VECTOR
DC9E                  (        cubix.asm):00129         FIRQVEC
DC9E                  (        cubix.asm):00130                 RMB     2                                 ; FIRQ HANDLER VECTOR
DCA0                  (        cubix.asm):00131         NMIVEC
DCA0                  (        cubix.asm):00132                 RMB     2                                 ; NMI HANDLER VECTOR
                      (        cubix.asm):00133         ;* MSGFLG MARKS START OF FLAG TABLES
DCA2                  (        cubix.asm):00134         MSGFLG
DCA2                  (        cubix.asm):00135                 RMB     1                                 ; MESSAGE ENABLED FLAG
DCA3                  (        cubix.asm):00136         DBGFLG
DCA3                  (        cubix.asm):00137                 RMB     1                                 ; DEBUG FLAG
DCA4                  (        cubix.asm):00138         TRCFLG
DCA4                  (        cubix.asm):00139                 RMB     1                                 ; TRACE ENABLED FLAG
     0003             (        cubix.asm):00140         NUMFLG          EQU 3                             ; # FLAGS SUPPORTED
                      (        cubix.asm):00141         ;* DEFAULT DIRECTORY
DCA5                  (        cubix.asm):00142         DEFDRV
DCA5                  (        cubix.asm):00143                 RMB     1                                 ; DEFAULT DRIVE
DCA6                  (        cubix.asm):00144         DEFDIR
DCA6                  (        cubix.asm):00145                 RMB     8                                 ; DEFAULT DIRECTORY
                      (        cubix.asm):00146         ;* SYSTEM DIRECTORY
DCAE                  (        cubix.asm):00147         SYSDRV
DCAE                  (        cubix.asm):00148                 RMB     1                                 ; SYSTEM DRIVE
DCAF                  (        cubix.asm):00149         SYSDIR
DCAF                  (        cubix.asm):00150                 RMB     8                                 ; SYSTEM DIRECTORY
DCB7                  (        cubix.asm):00151         DRIVEMAP
DCB7                  (        cubix.asm):00152                 RMB     8                                 ; DRIVE MAPPINGS
                      (        cubix.asm):00153         ;* NON-INITIALIZED GLOBAL RAM
DCBF                  (        cubix.asm):00154         FDRIVE
DCBF                  (        cubix.asm):00155                 RMB     1                                 ; CURRENT DISK DRIVE
DCC0                  (        cubix.asm):00156         PREFIX
DCC0                  (        cubix.asm):00157                 RMB     8                                 ; DIRECTORY PREFIX
DCC8                  (        cubix.asm):00158         FNAME
DCC8                  (        cubix.asm):00159                 RMB     8                                 ; FILENAME
DCD0                  (        cubix.asm):00160         FTYPE
DCD0                  (        cubix.asm):00161                 RMB     3                                 ; FILETYPE
DCD3                  (        cubix.asm):00162         TEMP
DCD3                  (        cubix.asm):00163                 RMB     2                                 ; TEMPORARY STORAGE
DCD5                  (        cubix.asm):00164         TEMP1
DCD5                  (        cubix.asm):00165                 RMB     2                                 ; MORE TEMPORARY STORAGE
DCD7                  (        cubix.asm):00166         TEMP2
DCD7                  (        cubix.asm):00167                 RMB     2                                 ;STILL MORE
DCD9                  (        cubix.asm):00168         TEMP3
DCD9                  (        cubix.asm):00169                 RMB     2                                 ;STILL MORE
DCDB                  (        cubix.asm):00170         TEMP4
DCDB                  (        cubix.asm):00171                 RMB     2                                 ;STILL MORE
DCDD                  (        cubix.asm):00172         SAVB
DCDD                  (        cubix.asm):00173                 RMB     1                                 ;CALLERS 'B' REGISTER
DCDE                  (        cubix.asm):00174         SAVX
DCDE                  (        cubix.asm):00175                 RMB     2                                 ;CALLERS 'X' REGISTER
DCE0                  (        cubix.asm):00176         SAVY
DCE0                  (        cubix.asm):00177                 RMB     2                                 ;CALLERS 'Y' REGISTER
DCE2                  (        cubix.asm):00178         SAVDRV
DCE2                  (        cubix.asm):00179                 RMB     1                                 ;CALLERS ACTIVE DRIVE
DCE3                  (        cubix.asm):00180         SAVSTK
DCE3                  (        cubix.asm):00181                 RMB     2                                 ;CALLERS STACK POINTER
DCE5                  (        cubix.asm):00182         WRKCHG
DCE5                  (        cubix.asm):00183                 RMB     1                                 ;WORK SECTOR CHANGED
DCE6                  (        cubix.asm):00184         WRKDRV
DCE6                  (        cubix.asm):00185                 RMB     1                                 ;CURRENT WORK SECTOR DRIVE
DCE7                  (        cubix.asm):00186         WRKSEC
DCE7                  (        cubix.asm):00187                 RMB     2                                 ;CURRENT WORK SECTOR
DCE9                  (        cubix.asm):00188         CMDDRV
DCE9                  (        cubix.asm):00189                 RMB     1                                 ;CURRENT COMMAND FILE DRIVE
DCEA                  (        cubix.asm):00190         CMDSEC
DCEA                  (        cubix.asm):00191                 RMB     2                                 ;CURRENTLY OPEN COMMAND FILE SECTOR
DCEC                  (        cubix.asm):00192         CMDOFF
DCEC                  (        cubix.asm):00193                 RMB     2                                 ;OFFSET INTO COMMAND FILE SECTOR
DCEE                  (        cubix.asm):00194         CMDSTK
DCEE                  (        cubix.asm):00195                 RMB     2                                 ;COMMAND PROCESSOR STACK PTR
DCF0                  (        cubix.asm):00196         CMDRC
DCF0                  (        cubix.asm):00197                 RMB     1                                 ;COMMAND FILE RETURN CODES
DCF1                  (        cubix.asm):00198         OLDSTK
DCF1                  (        cubix.asm):00199                 RMB     2                                 ;STACK FROM BEFORE TEMP ENTRY
DCF3                  (        cubix.asm):00200         SDRIVE
DCF3                  (        cubix.asm):00201                 RMB     1                                 ;CURRENTLY SELECTED DRIVE
DCF4                  (        cubix.asm):00202         ERRCNT
DCF4                  (        cubix.asm):00203                 RMB     1                                 ;DISK ERROR RETRY COUNT
DCF5                  (        cubix.asm):00204         CMDBUF
DCF5                  (        cubix.asm):00205                 RMB     80                                ;COMMAND BUFFER PARAMETER SAVE AREA
     DE00             (        cubix.asm):00206         STACK           EQU RAM+512                       ;SYSTEM STACK
     DE00             (        cubix.asm):00207         WRKSPC          EQU STACK                         ;WORK AREA
                      (        cubix.asm):00208         ;*
                      (        cubix.asm):00209                 ORG     ROM
                      (        cubix.asm):00210         ;* MISC FIXED CONSTANTS
E000                  (        cubix.asm):00211         ROMCHK
E000 FFFF             (        cubix.asm):00212                 FDB     $FFFF                             ;BLANK SPACE TO INSERT CHECKSUM
                      (        cubix.asm):00213                 IFDEF   test
                      (        cubix.asm):00214                 LDD     #ssr
                      (        cubix.asm):00215                 STD     >tvector
                      (        cubix.asm):00216                 JMP     begin
                      (        cubix.asm):00217                 ENDIF
E002                  (        cubix.asm):00218         MBASE
E002 2000             (        cubix.asm):00219                 FDB     USRRAM                            ;BASE MEMORY ADDRESS
                      (        cubix.asm):00220         ;*
                      (        cubix.asm):00221         ;* HARDWARE INITIALIZATION ROUTINE
                      (        cubix.asm):00222         ;*
E004                  (        cubix.asm):00223         DOINIT
E004 108EDC50         (        cubix.asm):00224                 LDY     #IRAM                             ;POINT TO INITIALIZED RAM
E008 7EF9AB           (        cubix.asm):00225                 JMP     HWINIT                            ;INIT HARDWARE
                      (        cubix.asm):00226         ;*
                      (        cubix.asm):00227         ;* APPLICATION PROGRAM INTERFACE
                      (        cubix.asm):00228         ;*
E00B                  (        cubix.asm):00229         SSR
E00B F7DCDD           (        cubix.asm):00230                 STB     >SAVB                             ;APPLICS SAVED 'B'
E00E BFDCDE           (        cubix.asm):00231                 STX     >SAVX                             ;APPLICS SAVED 'X'
E011 10BFDCE0         (        cubix.asm):00232                 STY     >SAVY                             ;APPLICS SAVED 'Y'
E015 F6DCF3           (        cubix.asm):00233                 LDB     >SDRIVE                           ;GET DOS DRIVE
E018 F7DCE2           (        cubix.asm):00234                 STB     >SAVDRV                           ;SET SAVED DRIVE
E01B 316A             (        cubix.asm):00235                 LEAY    10,S                              ;ADDR OF SAVED PC
E01D AEA4             (        cubix.asm):00236                 LDX     ,Y                                ;GET IT
E01F E680             (        cubix.asm):00237                 LDB     ,X+                               ;GET OPERAND BYTE
E021 AFA4             (        cubix.asm):00238                 STX     ,Y                                ;SAVE UPDATED PC
E023 C171             (        cubix.asm):00239                 CMPB    #NUMSSR                           ;IS IT A VALID CALL #
E025 2437             (        cubix.asm):00240                 BHS     INVSSR                            ;INVALID CALL
E027 58               (        cubix.asm):00241                 ASLB                                      ;DOUBLE FOR TWO BYTE ENTRIES
E028 8EF8C9           (        cubix.asm):00242                 LDX     #SSRTAB                           ;OFFSET TO IT
E02B 3A               (        cubix.asm):00243                 ABX                                       ;UNSIGNED ADD
E02C EC84             (        cubix.asm):00244                 LDD     ,X                                ;GET ADDRESS
E02E FDDCD3           (        cubix.asm):00245                 STD     >TEMP                             ;SAVE SO WE CAN EXEC
E031 10BFDCE3         (        cubix.asm):00246                 STY     >SAVSTK                           ;SAVE STACK POINTER
E035 B6DCA3           (        cubix.asm):00247                 LDA     >DBGFLG                           ;DEBUGGING?
E038 2606             (        cubix.asm):00248                 BNE     DBGSSR                            ;YES, OUTPUT DATA
E03A 357F             (        cubix.asm):00249                 PULS    CC,A,B,DP,X,Y,U                   ;RESTORE APPLICS REGS
E03C 6E9FDCD3         (        cubix.asm):00250                 JMP     [TEMP]                            ;EXECUTE SYSTEM CALL
E040                  (        cubix.asm):00251         DBGSSR
E040 BDE562           (        cubix.asm):00252                 JSR     WRLIN                             ;OUTPUT LINE
E043 53535220         (        cubix.asm):00253                 FCC     'SSR '
E047 00               (        cubix.asm):00254                 FCB     $00
E048 AEA4             (        cubix.asm):00255                 LDX     ,Y                                ;RECOVER PC
E04A E61F             (        cubix.asm):00256                 LDB     -1,X                              ;GET NUMBER BACK
E04C BDE491           (        cubix.asm):00257                 JSR     WRDEC8                            ;OUTPUT
E04F BDE562           (        cubix.asm):00258                 JSR     WRLIN
E052 202D20           (        cubix.asm):00259                 FCC     ' - '
E055 00               (        cubix.asm):00260                 FCB     $00
E056 357F             (        cubix.asm):00261                 PULS    CC,A,B,DP,X,Y,U
E058 8D33             (        cubix.asm):00262                 BSR     DMPREG1                           ;DISPLAY REGS
E05A 6E9FDCD3         (        cubix.asm):00263                 JMP     [TEMP]
E05E                  (        cubix.asm):00264         INVSSR
E05E 1F24             (        cubix.asm):00265                 TFR     Y,S                               ;FIX STACK
E060 BDE562           (        cubix.asm):00266                 JSR     WRLIN                             ;OUTPUT LINE
E063 496E76616C696420 (        cubix.asm):00267                 FCC     'Invalid SSR '
     53535220
E06F 00               (        cubix.asm):00268                 FCB     $00
E070 BDE491           (        cubix.asm):00269                 JSR     WRDEC8                            ;OUTPUT
E073 BDE562           (        cubix.asm):00270                 JSR     WRLIN                             ;OUTPUT LINE
E076 2061742024       (        cubix.asm):00271                 FCC     ' at $'
E07B 00               (        cubix.asm):00272                 FCB     $00
E07C ECE1             (        cubix.asm):00273                 LDD     ,S++                              ;GET ADDR
E07E 830002           (        cubix.asm):00274                 SUBD    #2                                ;BACK TO ADDRESS
E081 BDE559           (        cubix.asm):00275                 JSR     WRHEXW                            ;OUTPUT
E084 BDE59C           (        cubix.asm):00276                 JSR     LFCR                              ;NEW LINE
E087 7EE1DA           (        cubix.asm):00277                 JMP     DOSKCM                            ;RE-ENTER, INSURE NO COMMAND
E08A                  (        cubix.asm):00278         DMPREG
E08A 8D01             (        cubix.asm):00279                 BSR     DMPREG1                           ;BSR SO PC ON STACK,4
E08C 39               (        cubix.asm):00280                 RTS
                      (        cubix.asm):00281         ;* DEBUG ROUTINE
E08D                  (        cubix.asm):00282         DMPREG1
E08D 3407             (        cubix.asm):00283                 PSHS    CC,A,B                            ;SAVE REGS
E08F BDE562           (        cubix.asm):00284                 JSR     WRLIN                             ;OUTPUT MESSAGE
E092 50433D           (        cubix.asm):00285                 FCC     'PC='
E095 00               (        cubix.asm):00286                 FCB     $00
E096 EC65             (        cubix.asm):00287                 LDD     5,S                               ;GET PC
E098 830002           (        cubix.asm):00288                 SUBD    #2                                ;BACK UP TO SSR ADDRESS
E09B BDE559           (        cubix.asm):00289                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E09E BDE562           (        cubix.asm):00290                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0A1 2043433D         (        cubix.asm):00291                 FCC     ' CC='
E0A5 00               (        cubix.asm):00292                 FCB     $00
E0A6 A6E4             (        cubix.asm):00293                 LDA     ,S                                ;GET CONDITION CODE
E0A8 BDE56E           (        cubix.asm):00294                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0AB BDE562           (        cubix.asm):00295                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0AE 2044503D         (        cubix.asm):00296                 FCC     ' DP='
E0B2 00               (        cubix.asm):00297                 FCB     $00
E0B3 1FB8             (        cubix.asm):00298                 TFR     DP,A                              ;GET DIRECT PAGE
E0B5 BDE56E           (        cubix.asm):00299                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0B8 BDE562           (        cubix.asm):00300                 JSR     WRLIN                             ;OUTPUT MESSAHE
E0BB 20413D           (        cubix.asm):00301                 FCC     ' A='
E0BE 00               (        cubix.asm):00302                 FCB     $00
E0BF A661             (        cubix.asm):00303                 LDA     1,S                               ;GET SAVED 'A'
E0C1 BDE56E           (        cubix.asm):00304                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0C4 BDE562           (        cubix.asm):00305                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0C7 20423D           (        cubix.asm):00306                 FCC     ' B='
E0CA 00               (        cubix.asm):00307                 FCB     $00
E0CB A662             (        cubix.asm):00308                 LDA     2,S                               ;GET SAVED 'B'
E0CD BDE56E           (        cubix.asm):00309                 JSR     WRHEX                             ;OUTPUT HEX BYTE
E0D0 BDE562           (        cubix.asm):00310                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0D3 20583D           (        cubix.asm):00311                 FCC     ' X='
E0D6 00               (        cubix.asm):00312                 FCB     $00
E0D7 1F10             (        cubix.asm):00313                 TFR     X,D                               ;GET 'X'
E0D9 BDE559           (        cubix.asm):00314                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0DC BDE562           (        cubix.asm):00315                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0DF 20593D           (        cubix.asm):00316                 FCC     ' Y='
E0E2 00               (        cubix.asm):00317                 FCB     $00
E0E3 1F20             (        cubix.asm):00318                 TFR     Y,D                               ;GET 'Y'
E0E5 BDE559           (        cubix.asm):00319                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0E8 BDE562           (        cubix.asm):00320                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0EB 20553D           (        cubix.asm):00321                 FCC     ' U='
E0EE 00               (        cubix.asm):00322                 FCB     $00
E0EF 1F30             (        cubix.asm):00323                 TFR     U,D                               ;GET 'U'
E0F1 BDE559           (        cubix.asm):00324                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E0F4 BDE562           (        cubix.asm):00325                 JSR     WRLIN                             ;OUTPUT MESSAGE
E0F7 20533D           (        cubix.asm):00326                 FCC     ' S='
E0FA 00               (        cubix.asm):00327                 FCB     $00
E0FB 1F40             (        cubix.asm):00328                 TFR     S,D                               ;GET 'S'
E0FD C30007           (        cubix.asm):00329                 ADDD    #7                                ;DISCOUNT WHAT WE STACKED
E100 BDE559           (        cubix.asm):00330                 JSR     WRHEXW                            ;OUTPUT HEX WORD
E103 BDE59C           (        cubix.asm):00331                 JSR     LFCR                              ;OUTPUT NEW LINE
E106 3587             (        cubix.asm):00332                 PULS    CC,A,B,PC                         ;RESTORE & RETURN
                      (        cubix.asm):00333         ;*
                      (        cubix.asm):00334         ;* ZERO WORK RAM & INIT HARDWARE DEVICES
                      (        cubix.asm):00335         ;*
E108                  (        cubix.asm):00336         BEGIN
                      (        cubix.asm):00337         
                      (        cubix.asm):00338         
E108 86FF             (        cubix.asm):00339                 LDA     #$ff
E10A B7DF54           (        cubix.asm):00340                 STA     $DF54
                      (        cubix.asm):00341         
E10D 10CEDE00         (        cubix.asm):00342                 LDS     #STACK                            ;SET UP SYSTEM STACK
E111 8EDC00           (        cubix.asm):00343                 LDX     #RAM                              ;POINT TO START OF RAM
E114                  (        cubix.asm):00344         BEG1
E114 6F80             (        cubix.asm):00345                 CLR     ,X+                               ;ZERO IT
E116 8CDE00           (        cubix.asm):00346                 CMPX    #STACK                            ;AT END?
E119 25F9             (        cubix.asm):00347                 BLO     BEG1                              ;CONTINUE
E11B BDE004           (        cubix.asm):00348                 JSR     DOINIT                            ;INITIALIZE HARDWARE
E11E BDE639           (        cubix.asm):00349                 JSR     PURGE1                            ;INITIALIZE WORK SECTOR
E121 7FDCF4           (        cubix.asm):00350                 CLR     >ERRCNT                           ;INDICATE NO ERRORS
                      (        cubix.asm):00351         
E124 86FE             (        cubix.asm):00352                 LDA     #$fe
E126 B7DF54           (        cubix.asm):00353                 STA     $DF54
                      (        cubix.asm):00354         
                      (        cubix.asm):00355         ;        IFNDEF  test
                      (        cubix.asm):00356         ;;* PERFORM CHECKSUM TEST OF ROM
                      (        cubix.asm):00357         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00358         ;        FCC     'ROM... '
                      (        cubix.asm):00359         ;        LDX     #ROMCHK+2                         ;CHECKSUM STARTS HERE
                      (        cubix.asm):00360         ;        CLRA                                      ;ZERO HIGH
                      (        cubix.asm):00361         ;        CLRB                                      ;ZERO LOW
                      (        cubix.asm):00362         ;ROMT1
                      (        cubix.asm):00363         ;        ADDB    ,X+                               ;ADD IN ONE BYTE
                      (        cubix.asm):00364         ;        ADCA    #0                                ;INSURE HIGH INCREMENTS
                      (        cubix.asm):00365         ;        CMPX    #0                                ;AT END OF ROM?
                      (        cubix.asm):00366         ;        BNE     ROMT1                             ;NO, KEEP TRYING
                      (        cubix.asm):00367         ;        CMPD    >ROMCHK                           ;DOES CHECKSUM MATCH?
                      (        cubix.asm):00368         ;        BEQ     ROMT2                             ;YES, ITS OK
                      (        cubix.asm):00369         ;;* ROM TEST FAILED
                      (        cubix.asm):00370         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00371         ;        FCC     'Failed'
                      (        cubix.asm):00372         ;        DEC     >ERRCNT                           ;SET FLAG, INDICATE ERROR
                      (        cubix.asm):00373         ;        BRA     ROMT3
                      (        cubix.asm):00374         ;* ROM TEST PASSED
                      (        cubix.asm):00375         ;ROMT2
                      (        cubix.asm):00376         ;        BSR     SPASS                             ;DISPLAY PASSED MESSAGE
                      (        cubix.asm):00377         ;        ENDIF
                      (        cubix.asm):00378         ;;* PERFORM WALKING BIT TEST OF RAM
                      (        cubix.asm):00379         ;ROMT3
                      (        cubix.asm):00380         ;        JSR     WRLIN                             ;OUTPUT MESSAGE
                      (        cubix.asm):00381         ;        FCC     'RAM... '
                      (        cubix.asm):00382         ;        LDX     >MBASE                            ;GET BASE RAM ADDRESS
                      (        cubix.asm):00383         ;RAMT1
                      (        cubix.asm):00384         ;        LDA     ,X                                ;GET ORIGINAL DATA BYTE
                      (        cubix.asm):00385         ;        LDB     #%10000000                        ;BEGIN WITH LEFTMOST BIT
                      (        cubix.asm):00386         ;RAMT2
                      (        cubix.asm):00387         ;        STB     ,X                                ;WRITE TEST PATTERN
                      (        cubix.asm):00388         ;        CMPB    ,X                                ;DOES IT MATCH
                      (        cubix.asm):00389         ;        BNE     RAMT5                             ;NO, FAILED
                      (        cubix.asm):00390         ;        LSRB                                      ;SHIFT BIT
                      (        cubix.asm):00391         ;        BNE     RAMT2                             ;DO NEXT BIT
                      (        cubix.asm):00392         ;        STA     ,X+                               ;RESTORE ORIGINAL DATA
                      (        cubix.asm):00393         ;;* ON EVEN PAGE BOUNDARYS, TEST FOR ABORT KEY
                      (        cubix.asm):00394         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00395         ;        TSTB                                      ;EVEN BOUNDARY?
                      (        cubix.asm):00396         ;        BNE     RAMT3                             ;NO, DON'T TEST
                      (        cubix.asm):00397         ;        JSR     TSTCHR                            ;ANY CHARACTERS RECEIVED?
                      (        cubix.asm):00398         ;        CMPA    #$1B                              ;ESCAPE ABORTS?
                      (        cubix.asm):00399         ;        BEQ     RAMT4                             ;ABORT RAM TEST
                      (        cubix.asm):00400         ;;* CONTINUE TILL AT END OF USER RAM
                      (        cubix.asm):00401         ;RAMT3
                      (        cubix.asm):00402         ;        CMPX    #USREND                           ;ARE WE OVER?
                      (        cubix.asm):00403         ;        BLO     RAMT1                             ;NO, ITS OK
                      (        cubix.asm):00404         ;;* FINISHED, RAM TEST PASSED
                      (        cubix.asm):00405         ;        BSR     SPASS                             ;INDICATE SUCCESS
                      (        cubix.asm):00406         ;        BRA     HELLO                             ;AND PROCEED
                      (        cubix.asm):00407         ;* DISPLAY 'PASSED' MESSAGE
                      (        cubix.asm):00408         ;SPASS
                      (        cubix.asm):00409         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00410         ;        FCC     'Passed'
                      (        cubix.asm):00411         ;        RTS
                      (        cubix.asm):00412         ;;* RAM TEST ABORTED BY ESCAPE
                      (        cubix.asm):00413         ;RAMT4
                      (        cubix.asm):00414         ;        JSR     WRMSG                             ;OUTPUT MESSAGE
                      (        cubix.asm):00415         ;        FCC     'Aborted'
                      (        cubix.asm):00416         ;        BRA     RAMT6                             ;AND CONTINUE
                      (        cubix.asm):00417         ;;* RAM TEST FAILED,
                      (        cubix.asm):00418         ;RAMT5
                      (        cubix.asm):00419         ;        STA     ,X                                ;RESAVE OLD VALUE
                      (        cubix.asm):00420         ;        JSR     WRLIN                             ;OUTPUT FAILED MESSAGE
                      (        cubix.asm):00421         ;        FCC     'Failed at $'
                      (        cubix.asm):00422         ;        TFR     X,D                               ;GET ADDRESS
                      (        cubix.asm):00423         ;        JSR     WRHEXW                            ;DISPLAY IN HEX
                      (        cubix.asm):00424         ;        JSR     LFCR                              ;NEW LINE
                      (        cubix.asm):00425         ;RAMT6
                      (        cubix.asm):00426         ;        DEC     >ERRCNT                           ;INDICATE ERRORS
                      (        cubix.asm):00427         ;* ISSUE HEARALD MESSAGE & START THE BALL ROLLING
E129                  (        cubix.asm):00428         HELLO
E129 86FD             (        cubix.asm):00429                 LDA     #$fd
E12B B7DF54           (        cubix.asm):00430                 STA     $DF54
                      (        cubix.asm):00431         
                      (        cubix.asm):00432         
E12E BDE592           (        cubix.asm):00433                 JSR     WRMSG
E131 0A               (        cubix.asm):00434                 FCB     $0A
E132 4355424958207665 (        cubix.asm):00435                 FCC     'CUBIX version 1.5'
     7273696F6E20312E
     35
E143 0A0D0A           (        cubix.asm):00436                 FCB     $0A,$0D,$0A
E146 436F707972696768 (        cubix.asm):00437                 FCC     'Copyright 1983-2005 Dave Dunfield'
     7420313938332D32
     3030352044617665
     2044756E6669656C
     64
E167 0A0D             (        cubix.asm):00438                 FCB     $0A,$0D
E169 416C6C2072696768 (        cubix.asm):00439                 FCC     'All rights reserved'
     7473207265736572
     766564
E17C 0A0D00           (        cubix.asm):00440                 FCB     $0A,$0D,0
                      (        cubix.asm):00441         
E17F 86FC             (        cubix.asm):00442                 LDA     #$fc
E181 B7DF54           (        cubix.asm):00443                 STA     $DF54
                      (        cubix.asm):00444         
                      (        cubix.asm):00445         
                      (        cubix.asm):00446         ;* IF NO ERRORS, EXECUTE THE STARTUP FILE
E184 B6DCF4           (        cubix.asm):00447                 LDA     >ERRCNT                           ;GET ERROR FLAG
E187 2618             (        cubix.asm):00448                 BNE     CMD                               ;ERRORS, DO NOT EXECUTE
E189 108EF775         (        cubix.asm):00449                 LDY     #IPLFILE                          ;POINT TO IPL FILE
E18D BDE38B           (        cubix.asm):00450                 JSR     GETNAM                            ;GET FILE NAME
E190 CEE1A1           (        cubix.asm):00451                 LDU     #CMD                              ;ADDRESS TO RETURN TO
E193 3440             (        cubix.asm):00452                 PSHS    U                                 ;SAVE ON STACK (FAKE JSR)
E195 10FFDCE3         (        cubix.asm):00453                 STS     >SAVSTK                           ;SAVE STACK INCASE ERROR
E199 BDE6A6           (        cubix.asm):00454                 JSR     LOCDIR                            ;LOCATE FILE IN DIRECTORY
E19C 2603             (        cubix.asm):00455                 BNE     CMD                               ;NOT FOUND, REPORT ERROR
E19E 7EE26F           (        cubix.asm):00456                 JMP     EXE3                              ;EXECUTE FILE
                      (        cubix.asm):00457         ;*
                      (        cubix.asm):00458         ;* COMMAND INTERPRETER
                      (        cubix.asm):00459         ;*
E1A1                  (        cubix.asm):00460         CMD
E1A1 10CEDE00         (        cubix.asm):00461                 LDS     #STACK                            ;SET UP STACK
E1A5 BDE647           (        cubix.asm):00462                 JSR     WRTST                             ;WRITE OUT WORK SECTOR IF MODIFIED
E1A8 BDE4B9           (        cubix.asm):00463                 JSR     GLINE                             ;GET LINE OF INPUT
E1AB 8D34             (        cubix.asm):00464                 BSR     EXECMD                            ;EXECUTE COMMAND
E1AD                  (        cubix.asm):00465         RCRET
E1AD 27F2             (        cubix.asm):00466                 BEQ     CMD                               ;NO RETURN CODE TO DISPLAY
E1AF 1F89             (        cubix.asm):00467                 TFR     A,B                               ;WRITE IT
E1B1 BDE562           (        cubix.asm):00468                 JSR     WRLIN                             ;OUTPUT MESSAGE
E1B4 52633D           (        cubix.asm):00469                 FCC     'Rc='
E1B7 00               (        cubix.asm):00470                 FCB     $00
E1B8 BDE491           (        cubix.asm):00471                 JSR     WRDEC8                            ;OUTPUT IN DECIMAL
E1BB BDE59C           (        cubix.asm):00472                 JSR     LFCR                              ;NEW LINE
E1BE 20E1             (        cubix.asm):00473                 BRA     CMD                               ;GET NEXT COMMAND
                      (        cubix.asm):00474         ;* RE-ENTRY POINT
E1C0                  (        cubix.asm):00475         REENT
E1C0 3401             (        cubix.asm):00476                 PSHS    CC                                ;SAVE CC
E1C2 8E0000           (        cubix.asm):00477                 LDX     #0                                ;GET A ZERO
E1C5 BFDCF1           (        cubix.asm):00478                 STX     >OLDSTK                           ;CLEAR RETURN STACK
E1C8 BEDCEE           (        cubix.asm):00479                 LDX     >CMDSTK                           ;GET CMD STACK
E1CB 2604             (        cubix.asm):00480                 BNE     CMDGO                             ;KEEP IT GOING
E1CD 3501             (        cubix.asm):00481                 PULS    CC                                ;RESTORE CC
E1CF 20DC             (        cubix.asm):00482                 BRA     RCRET                             ;AND CONTINUE
E1D1                  (        cubix.asm):00483         CMDGO
E1D1 3501             (        cubix.asm):00484                 PULS    CC
E1D3 7EF5E4           (        cubix.asm):00485                 JMP     CMDRET                            ;RETURN TO COMMAND
                      (        cubix.asm):00486         ;* TEMPORARY DOS ENTRY
E1D6                  (        cubix.asm):00487         TMPENT
E1D6 10FFDCF1         (        cubix.asm):00488                 STS     >OLDSTK                           ;SAVE OLD STACK
E1DA                  (        cubix.asm):00489         DOSKCM
E1DA 4F               (        cubix.asm):00490                 CLRA
E1DB 5F               (        cubix.asm):00491                 CLRB
E1DC FDDCEE           (        cubix.asm):00492                 STD     >CMDSTK                           ;ZERO COMAND STACK
E1DF 20C0             (        cubix.asm):00493                 BRA     CMD                               ;CONTINUE
                      (        cubix.asm):00494         ;*
                      (        cubix.asm):00495         ;* EXECUTE DOS COMMAND(Y)
                      (        cubix.asm):00496         ;*
E1E1                  (        cubix.asm):00497         EXECMD
E1E1 10FFDCE3         (        cubix.asm):00498                 STS     >SAVSTK                           ;SAVE STACK POINTER
E1E5 B6DCF3           (        cubix.asm):00499                 LDA     >SDRIVE                           ;GET DISK DRIVE
E1E8 B7DCE2           (        cubix.asm):00500                 STA     >SAVDRV                           ;SAVE SELECTED DRIVE
E1EB BDE4F0           (        cubix.asm):00501                 JSR     SKIP                              ;LOOK FOR NULL COMMAND
E1EE 271A             (        cubix.asm):00502                 BEQ     NULCMD                            ;DON'T EXECUTE NULL
E1F0 10BFDCD7         (        cubix.asm):00503                 STY     >TEMP2                            ;SAVED POINTER TO COMMAND
E1F4 8140             (        cubix.asm):00504                 CMPA    #'@'                              ;EXECUTE COMMAND FILE?
E1F6 102712D9         (        cubix.asm):00505                 LBEQ    COMFIL                            ;DO IT
E1FA 8EF857           (        cubix.asm):00506                 LDX     #CMDNAM                           ;POINT TO COMMAND TABLE
E1FD BDE519           (        cubix.asm):00507                 JSR     TLOOK                             ;LOOK FOR IT
E200 C10E             (        cubix.asm):00508                 CMPB    #NUMCMD                           ;IS IT OVER?
E202 2434             (        cubix.asm):00509                 BHS     EXE                               ;YES, TRY USER DEFINED
E204 58               (        cubix.asm):00510                 ASLB                                      ;TWO BYTE ENTRIES
E205 8EF8AD           (        cubix.asm):00511                 LDX     #CMDADR                           ;GET COMMAND ADDRESSES
E208 6E95             (        cubix.asm):00512                 JMP     [B,X]                             ;EXECUTE COMMAND
E20A                  (        cubix.asm):00513         NULCMD
E20A 39               (        cubix.asm):00514                 RTS
                      (        cubix.asm):00515         ;*
                      (        cubix.asm):00516         ;* RUN COMMAND
                      (        cubix.asm):00517         ;*
E20B                  (        cubix.asm):00518         RUN
E20B BDE2AA           (        cubix.asm):00519                 JSR     GETSNA                            ;GET FILENAME
E20E                  (        cubix.asm):00520         RUN1
E20E 8645             (        cubix.asm):00521                 LDA     #'E'                              ;GET TYPE
E210 C658             (        cubix.asm):00522                 LDB     #'X'                              ;GET TYPE
E212 ED81             (        cubix.asm):00523                 STD     ,X++                              ;SAVE IT
E214 A784             (        cubix.asm):00524                 STA     ,X                                ;WRITE IT
E216 BDE66D           (        cubix.asm):00525                 JSR     LOCERR                            ;DOES IT EXIST
                      (        cubix.asm):00526         ;* FILE HAS BEEN FOUND, EXECUTE
E219                  (        cubix.asm):00527         RUN2
E219 A68817           (        cubix.asm):00528                 LDA     DATTR,X                           ;GET ATTRIBUTES
E21C 8520             (        cubix.asm):00529                 BITA    #EPERM                            ;CAN WE EXECUTE?
E21E 102706A4         (        cubix.asm):00530                 LBEQ    PROERR                            ;NO, REPORT ERROR
E222 EC8813           (        cubix.asm):00531                 LDD     DDADR,X                           ;GET DISK ADDRESS
E225 AE8815           (        cubix.asm):00532                 LDX     DRADR,X                           ;GET RUN ADDRESS
E228 BFDCD5           (        cubix.asm):00533                 STX     >TEMP1                            ;SAVE
E22B BDEED3           (        cubix.asm):00534                 JSR     LCHAIN                            ;LOAD THE CHAIN
E22E F6DCF3           (        cubix.asm):00535                 LDB     >SDRIVE                           ;GET OUR CURRENT DRIVE
E231 BDE4F0           (        cubix.asm):00536                 JSR     SKIP                              ;SKIP TO COMMANDS
E234 6E9FDCD5         (        cubix.asm):00537                 JMP     [TEMP1]                           ;PASS CONTROL TO HIM
                      (        cubix.asm):00538         ;*
                      (        cubix.asm):00539         ;* COMMAND WAS NOT RECOGNIZED, SEARCH SYSTEM DIRECTORY LOOKING
                      (        cubix.asm):00540         ;* FOR FILE WITH NAME MATCHING COMMAND.
                      (        cubix.asm):00541         ;*
E238                  (        cubix.asm):00542         EXE
E238 7FDCD5           (        cubix.asm):00543                 CLR     >TEMP1                            ;INDICATE IMPLIED RUN
E23B 8EDCAE           (        cubix.asm):00544                 LDX     #SYSDRV                           ;PT TO SYSTEM DIRECTORY (& DRIVE)
E23E BDE3C7           (        cubix.asm):00545                 JSR     GETDIR1                           ;GET DIR & DRIVE
E241 8D6F             (        cubix.asm):00546                 BSR     NAMGET                            ;GET NAME
E243 862A             (        cubix.asm):00547                 LDA     #'*'                              ;WILDCARD
E245 A784             (        cubix.asm):00548                 STA     ,X                                ;SAVE TYPE
E247 B6DCBF           (        cubix.asm):00549                 LDA     >FDRIVE                           ;GET FILENAME DRIVE
E24A B7DCF3           (        cubix.asm):00550                 STA     >SDRIVE                           ;SELECT DRIVE
E24D CC0000           (        cubix.asm):00551                 LDD     #DIRSEC                           ;GET DIRECTORY SECTOR
E250                  (        cubix.asm):00552         EXE1
E250 BDE610           (        cubix.asm):00553                 JSR     RDWRK                             ;READ A WORK SECTOR
E253                  (        cubix.asm):00554         EXE2
E253 BDE337           (        cubix.asm):00555                 JSR     COMNAM                            ;DOES IT MATCH
E256 2717             (        cubix.asm):00556                 BEQ     EXE3                              ;YES, IT DOES
                      (        cubix.asm):00557         ;* NAMES DON'T MATCH, ADVANCE TO NEXT ENTRY
E258 308820           (        cubix.asm):00558                 LEAX    32,X                              ;NEXT
E25B 8CE000           (        cubix.asm):00559                 CMPX    #WRKSPC+512                       ;OVER?
E25E 25F3             (        cubix.asm):00560                 BLO     EXE2                              ;NO, KEEP LOOKING
E260 FCDCE7           (        cubix.asm):00561                 LDD     >WRKSEC                           ;GET SECTOR
E263 BDE5F3           (        cubix.asm):00562                 JSR     FNDLNK                            ;LOCATE LINK
E266 26E8             (        cubix.asm):00563                 BNE     EXE1                              ;READ IT & LOOK
                      (        cubix.asm):00564         ;* COMMAND IS INVALID, REPORT ERROR
E268                  (        cubix.asm):00565         BADCMD
E268 8EF77F           (        cubix.asm):00566                 LDX     #UNCMD                            ;PT TO MESSAGE
E26B 86FF             (        cubix.asm):00567                 LDA     #RCCMD                            ;GET RC
E26D 2062             (        cubix.asm):00568                 BRA     ERRMRC                            ;REPORT ERROR
                      (        cubix.asm):00569         ;* COMMAND MATCHES FILENAME, CHECK TYPE FOR EXECUTE
E26F                  (        cubix.asm):00570         EXE3
E26F A68812           (        cubix.asm):00571                 LDA     DTYPE+2,X                         ;GET TYPE
E272 B7DCD2           (        cubix.asm):00572                 STA     >FTYPE+2                          ;SAVE IT
E275 EC8810           (        cubix.asm):00573                 LDD     DTYPE,X                           ;GET REST OF TYPE
E278 FDDCD0           (        cubix.asm):00574                 STD     >FTYPE                            ;SAVE IT
                      (        cubix.asm):00575         ;* WE HAVE FOUND EXECUTABLE FILE
E27B 10834000         (        cubix.asm):00576                 CMPD    #'@'*256                          ;IS IT A COMMAND FILE?
E27F 10271265         (        cubix.asm):00577                 LBEQ    COMGO                             ;YES, EXECUTE
E283 8145             (        cubix.asm):00578                 CMPA    #'E'                              ;'EX'?
E285 2609             (        cubix.asm):00579                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E287 C158             (        cubix.asm):00580                 CMPB    #'X'                              ;'EX'?
E289 2605             (        cubix.asm):00581                 BNE     EXE4                              ;NO, LOOK FOR CMD PROC
E28B A18812           (        cubix.asm):00582                 CMPA    DTYPE+2,X                         ;INSURE ITS 'EXE'
E28E 2789             (        cubix.asm):00583                 BEQ     RUN2                              ;YES, EXECUTE
                      (        cubix.asm):00584         ;* UNKNOWN FILETYPE, TRY FOR USER COMMAND PROCESSOR
E290                  (        cubix.asm):00585         EXE4
E290 1F12             (        cubix.asm):00586                 TFR     X,Y                               ;'Y' POINTS TO DIR ENTRY
E292 8EDCC8           (        cubix.asm):00587                 LDX     #FNAME                            ;POINT TO TYPE
E295 ED81             (        cubix.asm):00588                 STD     ,X++                              ;SAVE IT
E297 A6A812           (        cubix.asm):00589                 LDA     DTYPE+2,Y                         ;GET LAST CHR
E29A A780             (        cubix.asm):00590                 STA     ,X+                               ;SAVE IT
E29C                  (        cubix.asm):00591         EXE5
E29C 6F80             (        cubix.asm):00592                 CLR     ,X+                               ;CLEAR IT
E29E 8CDCD0           (        cubix.asm):00593                 CMPX    #FNAME+8                          ;OVER?
E2A1 25F9             (        cubix.asm):00594                 BLO     EXE5                              ;ALL OUT
E2A3 10BEDCD7         (        cubix.asm):00595                 LDY     >TEMP2                            ;RESTORE COMMAND POINTER
E2A7 7EE20E           (        cubix.asm):00596                 JMP     RUN1                              ;TRY THIS ONE
                      (        cubix.asm):00597         ;*
                      (        cubix.asm):00598         ;* GET FILENAME WITHOUT TYPE, NORMAL DEFAULT
                      (        cubix.asm):00599         ;*
E2AA                  (        cubix.asm):00600         GETSNA
E2AA BDE3C4           (        cubix.asm):00601                 JSR     GETDIR                            ;GET DIRECTORY
E2AD                  (        cubix.asm):00602         GETSN0
E2AD 86FF             (        cubix.asm):00603                 LDA     #$FF                              ;FLAG
E2AF B7DCD5           (        cubix.asm):00604                 STA     >TEMP1                            ;SET IT
E2B2                  (        cubix.asm):00605         NAMGET
E2B2 C608             (        cubix.asm):00606                 LDB     #8                                ;MAX EIGHT CHARS
E2B4                  (        cubix.asm):00607         GETSN1
E2B4 BDE4FD           (        cubix.asm):00608                 JSR     TSTERM                            ;TERMINATOR?
E2B7 2706             (        cubix.asm):00609                 BEQ     GOPAD                             ;YES, QUIT
E2B9 812F             (        cubix.asm):00610                 CMPA    #'/'                              ;SPECIAL TERMINATOR
E2BB 2605             (        cubix.asm):00611                 BNE     GETSN2
E2BD 313F             (        cubix.asm):00612                 LEAY    -1,Y                              ;BACKUP TO SLASH
E2BF                  (        cubix.asm):00613         GOPAD
E2BF 7EE3BD           (        cubix.asm):00614                 JMP     PAD
E2C2                  (        cubix.asm):00615         GETSN2
E2C2 A780             (        cubix.asm):00616                 STA     ,X+                               ;SAVE IT
E2C4 5A               (        cubix.asm):00617                 DECB                                      ;BACKUP
E2C5 2AED             (        cubix.asm):00618                 BPL     GETSN1                            ;MORE
E2C7 7DDCD5           (        cubix.asm):00619                 TST     >TEMP1                            ;WERE WE 'RUN'ING
E2CA 279C             (        cubix.asm):00620                 BEQ     BADCMD                            ;NO,
                      (        cubix.asm):00621         ;*
                      (        cubix.asm):00622         ;* INVALID OPERAND
                      (        cubix.asm):00623         ;*
E2CC                  (        cubix.asm):00624         BADOPR
E2CC 8EF794           (        cubix.asm):00625                 LDX     #BADOPM                           ;MESSAGE
E2CF 8601             (        cubix.asm):00626                 LDA     #RCBOP                            ;RETURN CODE
                      (        cubix.asm):00627         ;*
                      (        cubix.asm):00628         ;* ISSUE ERROR MESSAGE & RETURN TO CALLER WITH RETURN CODE
                      (        cubix.asm):00629         ;*
E2D1                  (        cubix.asm):00630         ERRMRC
E2D1 3401             (        cubix.asm):00631                 PSHS    CC                                ;SAVE IT
                      (        cubix.asm):00632         ;* VERIFY CONSOLE DEVICE IS VALID & RESET IF NOT
E2D3 F6DC6D           (        cubix.asm):00633                 LDB     >CONOUT                           ;GET OUTPUT
E2D6 C108             (        cubix.asm):00634                 CMPB    #NDEV                             ;IN RANGE
E2D8 240A             (        cubix.asm):00635                 BHS     ERRM1                             ;NO - ERROR
E2DA 108EDC7E         (        cubix.asm):00636                 LDY     #DOTAB                            ;POINT TO TABLE
E2DE 58               (        cubix.asm):00637                 ASLB                                      ;X2
E2DF 10AEA5           (        cubix.asm):00638                 LDY     B,Y                               ;INSTALLED?
E2E2 2605             (        cubix.asm):00639                 BNE     ERRM2                             ;YES, ITS OK
E2E4                  (        cubix.asm):00640         ERRM1
E2E4 C601             (        cubix.asm):00641                 LDB     #1                                ;DEFAULT DEVICE
E2E6 F7DC6D           (        cubix.asm):00642                 STB     >CONOUT                           ;RESET INPUT
E2E9                  (        cubix.asm):00643         ERRM2
E2E9 F6DC6C           (        cubix.asm):00644                 LDB     >CONIN                            ;GET INPUT
E2EC C108             (        cubix.asm):00645                 CMPB    #NDEV                             ;IN RANGE
E2EE 240A             (        cubix.asm):00646                 BHS     ERRM3                             ;NO - ERROR
E2F0 108EDC6E         (        cubix.asm):00647                 LDY     #DITAB                            ;POINT TO TABLE
E2F4 58               (        cubix.asm):00648                 ASLB                                      ;X2
E2F5 10AEA5           (        cubix.asm):00649                 LDY     B,Y                               ;INSTALLED?
E2F8 2605             (        cubix.asm):00650                 BNE     ERRM4                             ;YES, ITS OK
E2FA                  (        cubix.asm):00651         ERRM3
E2FA C601             (        cubix.asm):00652                 LDB     #1                                ;DEFAULT DEVICE
E2FC F7DC6C           (        cubix.asm):00653                 STB     >CONIN                            ;RESET INPUT
E2FF                  (        cubix.asm):00654         ERRM4
E2FF 7DDCA2           (        cubix.asm):00655                 TST     >MSGFLG                           ;ARE MESSAGES ENABLED
E302 2706             (        cubix.asm):00656                 BEQ     NOEMSG                            ;NO, DON'T OUTPUT
E304 BDE588           (        cubix.asm):00657                 JSR     WRSTR                             ;OUTPUT
E307 BDE59C           (        cubix.asm):00658                 JSR     LFCR                              ;NEW LINE
E30A                  (        cubix.asm):00659         NOEMSG
E30A 3501             (        cubix.asm):00660                 PULS    CC                                ;RESTORE CC
                      (        cubix.asm):00661         ;* RETURN TO CALLER WITH NO ERROR MESSAGE
E30C                  (        cubix.asm):00662         ERRRET
E30C 3401             (        cubix.asm):00663                 PSHS    CC                                ;SAVE CC
E30E F6DCE2           (        cubix.asm):00664                 LDB     >SAVDRV                           ;GET SAVED DRIVE
E311 F7DCF3           (        cubix.asm):00665                 STB     >SDRIVE                           ;RESET SELECTED DRIVE
E314 BEDCDE           (        cubix.asm):00666                 LDX     >SAVX                             ;RESTORE 'X'
E317 10BEDCE0         (        cubix.asm):00667                 LDY     >SAVY                             ;RESTORE 'Y'
E31B F6DCDD           (        cubix.asm):00668                 LDB     >SAVB                             ;RESTORE 'B'
E31E 3501             (        cubix.asm):00669                 PULS    CC                                ;RESTORE CONDITION CODES
E320 2705             (        cubix.asm):00670                 BEQ     ZERORC                            ;ITS ZERO
E322 10FEDCE3         (        cubix.asm):00671                 LDS     >SAVSTK                           ;GET SAVED SP
E326 39               (        cubix.asm):00672                 RTS
E327                  (        cubix.asm):00673         ZERORC
E327 10FEDCE3         (        cubix.asm):00674                 LDS     >SAVSTK                           ;GET STACK
E32B 1A04             (        cubix.asm):00675                 ORCC    #%00000100                        ;SET 'Z'
E32D 39               (        cubix.asm):00676                 RTS
                      (        cubix.asm):00677         ;*
                      (        cubix.asm):00678         ;* GET FILE WITHOUT TYPE, DEFAULT TO SYSTEM
                      (        cubix.asm):00679         ;*
E32E                  (        cubix.asm):00680         GETSYS
E32E 8EDCAE           (        cubix.asm):00681                 LDX     #SYSDRV                           ;DEFAULT IS SYSTEM
                      (        cubix.asm):00682         ;*
                      (        cubix.asm):00683         ;* GET FILENAME WITHOUR TYPE, DEFAULT(X)
                      (        cubix.asm):00684         ;*
E331                  (        cubix.asm):00685         GETSDI
E331 BDE3C7           (        cubix.asm):00686                 JSR     GETDIR1                           ;GET NAME
E334 7EE2AD           (        cubix.asm):00687                 JMP     GETSN0                            ;GET FILENAME
                      (        cubix.asm):00688         ;*
                      (        cubix.asm):00689         ;* COMPARES NAME(X) TO SAVED FILENAME
                      (        cubix.asm):00690         ;*
E337                  (        cubix.asm):00691         COMNAM
E337 3436             (        cubix.asm):00692                 PSHS    A,B,X,Y                           ;SAVE REGS
E339 108EDCC0         (        cubix.asm):00693                 LDY     #PREFIX                           ;POINT TO SAVED
E33D A684             (        cubix.asm):00694                 LDA     ,X                                ;INSURE NAME IS NOT NULL
E33F 2603             (        cubix.asm):00695                 BNE     NOTNUL                            ;ITS NOT,
E341 4A               (        cubix.asm):00696                 DECA                                      ;GET FF
E342 2010             (        cubix.asm):00697                 BRA     CEND                              ;QUIT
E344                  (        cubix.asm):00698         NOTNUL
E344 C608             (        cubix.asm):00699                 LDB     #8                                ;EIGHT CHARS NI PREFIX
E346 8D0E             (        cubix.asm):00700                 BSR     COMX                              ;COMPARE
E348 260A             (        cubix.asm):00701                 BNE     CEND                              ;NOT SAME, EXIT
E34A C608             (        cubix.asm):00702                 LDB     #8                                ;EIGHT CHARS IN NAME
E34C 8D08             (        cubix.asm):00703                 BSR     COMX                              ;COMPARE
E34E 2604             (        cubix.asm):00704                 BNE     CEND                              ;NOT SAME
E350 C603             (        cubix.asm):00705                 LDB     #3                                ;THREE CHARS IN TYPE
E352 8D02             (        cubix.asm):00706                 BSR     COMX                              ;COMPARE
E354                  (        cubix.asm):00707         CEND
E354 35B6             (        cubix.asm):00708                 PULS    A,B,X,Y,PC                        ;GO HOME
E356                  (        cubix.asm):00709         COMX
E356 A6A0             (        cubix.asm):00710                 LDA     ,Y+                               ;GET CHAR FROM SAVED
E358 812A             (        cubix.asm):00711                 CMPA    #'*'                              ;WILDCARD?
E35A 2708             (        cubix.asm):00712                 BEQ     RNXT                              ;RETURN WITH TRUE
E35C A180             (        cubix.asm):00713                 CMPA    ,X+                               ;DOES IT MATCH
E35E 2606             (        cubix.asm):00714                 BNE     RNXT1                             ;NO, FAIL
E360 5A               (        cubix.asm):00715                 DECB                                      ;BACKUP
E361 26F3             (        cubix.asm):00716                 BNE     COMX                              ;OK
E363 39               (        cubix.asm):00717                 RTS
E364                  (        cubix.asm):00718         RNXT
E364 3001             (        cubix.asm):00719                 LEAX    1,X
E366                  (        cubix.asm):00720         RNXT1
E366 5A               (        cubix.asm):00721                 DECB                                      ;REDUCE COUNT
E367 2704             (        cubix.asm):00722                 BEQ     BRET                              ;DONE, QUIT
E369 3121             (        cubix.asm):00723                 LEAY    1,Y                               ;ADVANCE
E36B 20F7             (        cubix.asm):00724                 BRA     RNXT                              ;AND CONTINUE
E36D                  (        cubix.asm):00725         BRET
E36D 812A             (        cubix.asm):00726                 CMPA    #'*'                              ;WUZ IT WILDCARD
E36F 39               (        cubix.asm):00727                 RTS
                      (        cubix.asm):00728         ;*
                      (        cubix.asm):00729         ;* TEST SAVED FILENAME FOR VALIDITY AS A SINGLE FILE
                      (        cubix.asm):00730         ;*
E370                  (        cubix.asm):00731         VALID
E370 3416             (        cubix.asm):00732                 PSHS    A,B,X                             ;SAVE REGS
E372 C613             (        cubix.asm):00733                 LDB     #19                               ;LENGTH OF NAME
E374 8EDCC0           (        cubix.asm):00734                 LDX     #PREFIX                           ;POINT TO NAME
E377                  (        cubix.asm):00735         VALTST
E377 A680             (        cubix.asm):00736                 LDA     ,X+                               ;GETCHAR
E379 812A             (        cubix.asm):00737                 CMPA    #'*'                              ;WILDCARD
E37B 2704             (        cubix.asm):00738                 BEQ     RETNZ                             ;INVALID
E37D 5A               (        cubix.asm):00739                 DECB                                      ;BACKUP
E37E 26F7             (        cubix.asm):00740                 BNE     VALTST                            ;CONTINUE
E380 4F               (        cubix.asm):00741                 CLRA                                      ;ZERO RETURN CODE
E381                  (        cubix.asm):00742         RETNZ
E381 4D               (        cubix.asm):00743                 TSTA                                      ;SET 'Z' FLAG
E382 3596             (        cubix.asm):00744                 PULS    A,B,X,PC
                      (        cubix.asm):00745         ;*
                      (        cubix.asm):00746         ;* GET FILENAME & INSURE ITS VALID
                      (        cubix.asm):00747         ;*
E384                  (        cubix.asm):00748         GETVAL
E384 8D05             (        cubix.asm):00749                 BSR     GETNAM                            ;GET FILENAME
E386 8DE8             (        cubix.asm):00750                 BSR     VALID                             ;TEST FOR VALID
E388 2620             (        cubix.asm):00751                 BNE     BADOP2                            ;INVALID, ERROR
E38A 39               (        cubix.asm):00752                 RTS
                      (        cubix.asm):00753         ;*
                      (        cubix.asm):00754         ;* GET A FILENAME FROM INPUT LINE
                      (        cubix.asm):00755         ;*
E38B                  (        cubix.asm):00756         GETNAM
E38B 8D37             (        cubix.asm):00757                 BSR     GETDIR                            ;GET DRIVE & DIRECTORY
E38D                  (        cubix.asm):00758         GFNAM
E38D C608             (        cubix.asm):00759                 LDB     #8                                ;EIGHT CHARS/NAME
E38F                  (        cubix.asm):00760         GF1
E38F 8D26             (        cubix.asm):00761                 BSR     VALCHR                            ;GET CHAR
E391 812E             (        cubix.asm):00762                 CMPA    #'.'                              ;SEPERATOR?
E393 2707             (        cubix.asm):00763                 BEQ     GFTYP                             ;YES
E395 A780             (        cubix.asm):00764                 STA     ,X+                               ;SAVE IT
E397 5A               (        cubix.asm):00765                 DECB                                      ;BACKUP
E398 2AF5             (        cubix.asm):00766                 BPL     GF1                               ;KEEP GOING
E39A 200E             (        cubix.asm):00767                 BRA     BADOP2                            ;ERROR
E39C                  (        cubix.asm):00768         GFTYP
E39C 8D1F             (        cubix.asm):00769                 BSR     PAD                               ;PAD FILENAME
E39E C603             (        cubix.asm):00770                 LDB     #3                                ;THREE CHARS/TYPE
E3A0                  (        cubix.asm):00771         GF2
E3A0 BDE4FD           (        cubix.asm):00772                 JSR     TSTERM                            ;GET CHAR
E3A3 2708             (        cubix.asm):00773                 BEQ     GF3                               ;HIT END
E3A5 A780             (        cubix.asm):00774                 STA     ,X+                               ;SAVE IT
E3A7 5A               (        cubix.asm):00775                 DECB                                      ;REDUCE COUNT
E3A8 2AF6             (        cubix.asm):00776                 BPL     GF2                               ;KEEP GOING
E3AA                  (        cubix.asm):00777         BADOP2
E3AA 7EE2CC           (        cubix.asm):00778                 JMP     BADOPR                            ;ERROR
E3AD                  (        cubix.asm):00779         GF3
E3AD 8D0E             (        cubix.asm):00780                 BSR     PAD                               ;ZERO IT
E3AF BDE4F0           (        cubix.asm):00781                 JSR     SKIP                              ;TO NEXT
E3B2 8EDCC0           (        cubix.asm):00782                 LDX     #PREFIX                           ;POINT TO IT
E3B5 4F               (        cubix.asm):00783                 CLRA                                      ;ZERO RC
E3B6 39               (        cubix.asm):00784                 RTS
                      (        cubix.asm):00785         ;* ABORT IF CHARACTER INVALID
E3B7                  (        cubix.asm):00786         VALCHR
E3B7 BDE4FD           (        cubix.asm):00787                 JSR     TSTERM                            ;TEST FOR CHAR OK
E3BA 27EE             (        cubix.asm):00788                 BEQ     BADOP2                            ;INVALID
E3BC 39               (        cubix.asm):00789                 RTS
                      (        cubix.asm):00790         ;* PADS NAME WITH BLANKS UNTILL 'B' IS ZERO
E3BD                  (        cubix.asm):00791         PAD
E3BD 5A               (        cubix.asm):00792                 DECB                                      ;BACKUP COUNT
E3BE 2B51             (        cubix.asm):00793                 BMI     GETD5                             ;THATS ALL
E3C0 6F80             (        cubix.asm):00794                 CLR     ,X+                               ;CLEAR IT
E3C2 20F9             (        cubix.asm):00795                 BRA     PAD
                      (        cubix.asm):00796         ;*
                      (        cubix.asm):00797         ;* GETS A DRIVE AND DIRECTORY FROM THE INPUT LINE
                      (        cubix.asm):00798         ;*
E3C4                  (        cubix.asm):00799         GETDIR
E3C4 8EDCA5           (        cubix.asm):00800                 LDX     #DEFDRV                           ;PT TO IT
E3C7                  (        cubix.asm):00801         GETDIR1
E3C7 A680             (        cubix.asm):00802                 LDA     ,X+                               ;GET DEFAULT DRIVE
E3C9 B7DCBF           (        cubix.asm):00803                 STA     >FDRIVE                           ;SET IT
E3CC BDE4F0           (        cubix.asm):00804                 JSR     SKIP                              ;ADVANCE
E3CF 270B             (        cubix.asm):00805                 BEQ     GETD1                             ;END OF LINE, NO DRIVE SPEC
E3D1 E621             (        cubix.asm):00806                 LDB     1,Y                               ;GET NEXT CHAR
E3D3 C13A             (        cubix.asm):00807                 CMPB    #':'                              ;IS IT A DRIVE SPEC?
E3D5 2605             (        cubix.asm):00808                 BNE     GETD1                             ;NO, IGNORE IT
E3D7 8D3D             (        cubix.asm):00809                 BSR     GETDRV1                           ;GET DRIVE ID
E3D9 B7DCBF           (        cubix.asm):00810                 STA     >FDRIVE                           ;SET DRIVE ID
E3DC                  (        cubix.asm):00811         GETD1
E3DC 3420             (        cubix.asm):00812                 PSHS    Y                                 ;SAVE
E3DE 1F12             (        cubix.asm):00813                 TFR     X,Y                               ;SET UP PTR TO DEFAULT
E3E0 8EDCC0           (        cubix.asm):00814                 LDX     #PREFIX                           ;POINT TO PREFIX
E3E3 C608             (        cubix.asm):00815                 LDB     #8                                ;MOVE EIGHT
E3E5                  (        cubix.asm):00816         GETD2
E3E5 A6A0             (        cubix.asm):00817                 LDA     ,Y+                               ;GET FROM DEFAULT
E3E7 A780             (        cubix.asm):00818                 STA     ,X+                               ;SAVE IN NAME
E3E9 5A               (        cubix.asm):00819                 DECB                                      ;REDUCE COUNT
E3EA 26F9             (        cubix.asm):00820                 BNE     GETD2                             ;MOVE EM ALL
E3EC 3520             (        cubix.asm):00821                 PULS    Y                                 ;RESTORE
E3EE A6A4             (        cubix.asm):00822                 LDA     ,Y                                ;GET CHAR
E3F0 815B             (        cubix.asm):00823                 CMPA    #'['                              ;DIRECTORY ID
E3F2 261D             (        cubix.asm):00824                 BNE     GETD5                             ;NO, SKIP IT
E3F4 8EDCC0           (        cubix.asm):00825                 LDX     #PREFIX                           ;POINT TO PREFIX
E3F7 3121             (        cubix.asm):00826                 LEAY    1,Y                               ;ADVANCE
E3F9 C608             (        cubix.asm):00827                 LDB     #8                                ;UP TO EIGHT CHARS
E3FB                  (        cubix.asm):00828         GETD3
E3FB BDE3B7           (        cubix.asm):00829                 JSR     VALCHR                            ;GET CHAR, INSURE VALID
E3FE 815D             (        cubix.asm):00830                 CMPA    #']'                              ;CLOSING?
E400 2708             (        cubix.asm):00831                 BEQ     GETD4                             ;YES
E402 A780             (        cubix.asm):00832                 STA     ,X+                               ;SAVE IT
E404 5A               (        cubix.asm):00833                 DECB                                      ;BACKUP
E405 2AF4             (        cubix.asm):00834                 BPL     GETD3                             ;KEEP GOING
E407                  (        cubix.asm):00835         BADOP1
E407 7EE2CC           (        cubix.asm):00836                 JMP     BADOPR
E40A                  (        cubix.asm):00837         GETD4
E40A 8DB1             (        cubix.asm):00838                 BSR     PAD                               ;PAD WITH BLANKS
E40C 7DDCC0           (        cubix.asm):00839                 TST     >PREFIX                           ;IS IT NULL
E40F 27F6             (        cubix.asm):00840                 BEQ     BADOP1                            ;INVALID
E411                  (        cubix.asm):00841         GETD5
E411 4F               (        cubix.asm):00842                 CLRA
E412 39               (        cubix.asm):00843                 RTS
                      (        cubix.asm):00844         ;* GET A DRIVE & RETURN IN A
E413                  (        cubix.asm):00845         GETDRV
E413 BDE4F0           (        cubix.asm):00846                 JSR     SKIP                              ;ADVANCE TO OPERAND
E416                  (        cubix.asm):00847         GETDRV1
E416 ECA1             (        cubix.asm):00848                 LDD     ,Y++                              ;GET DATA
E418 C13A             (        cubix.asm):00849                 CMPB    #':'                              ;COLON
E41A 26EB             (        cubix.asm):00850                 BNE     BADOP1                            ;NO
E41C 8041             (        cubix.asm):00851                 SUBA    #'A'                              ;CONVERT
E41E 8104             (        cubix.asm):00852                 CMPA    #4                                ;IN RANGE
E420 24E5             (        cubix.asm):00853                 BHS     BADOP1                            ;NO
E422 1A04             (        cubix.asm):00854                 ORCC    #4                                ;SET 'Z'
E424 39               (        cubix.asm):00855                 RTS
                      (        cubix.asm):00856         ;*
                      (        cubix.asm):00857         ;* GETS A VALUE (DECIMAL OR HEX) FROM INPUT LINE
                      (        cubix.asm):00858         ;*
E425                  (        cubix.asm):00859         GETNUM
E425 BDE4F0           (        cubix.asm):00860                 JSR     SKIP                              ;SKIP TO DATA
E428 27DD             (        cubix.asm):00861                 BEQ     BADOP1                            ;INVALID
E42A 8124             (        cubix.asm):00862                 CMPA    #'$'                              ;HEX?
E42C 2643             (        cubix.asm):00863                 BNE     GETDV                             ;NO, GET DECIMAL
E42E 3121             (        cubix.asm):00864                 LEAY    1,Y                               ;ADVANCE TO NEXT
                      (        cubix.asm):00865         ;*
                      (        cubix.asm):00866         ;* GETS A 16 BIT HEX NUMBER FOR X FROM THE INPUT LINE.
                      (        cubix.asm):00867         ;*
E430                  (        cubix.asm):00868         GETHEX
E430 BDE4F0           (        cubix.asm):00869                 JSR     SKIP                              ;GET CHARACTER
E433 27D2             (        cubix.asm):00870                 BEQ     BADOP1                            ;INDICATE BAD OPERAND
E435                  (        cubix.asm):00871         GETHV
E435 8E0000           (        cubix.asm):00872                 LDX     #0                                ;START WITH ZERO
E438                  (        cubix.asm):00873         GETL1
E438 BDE4FD           (        cubix.asm):00874                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E43B 2728             (        cubix.asm):00875                 BEQ     HEXEND                            ;IF SO, THIS IS IT
E43D 8030             (        cubix.asm):00876                 SUBA    #'0'                              ;CONVERT TO BINARY
E43F 810A             (        cubix.asm):00877                 CMPA    #10                               ;TEST FOR > '9'
E441 250A             (        cubix.asm):00878                 BLO     DIGOK                             ;IF NOT, DIGIT IS OK
E443 8111             (        cubix.asm):00879                 CMPA    #$11                              ;TEST FOR < 'A'
E445 2DC0             (        cubix.asm):00880                 BLT     BADOP1                            ;OPERAND IS INVALID
E447 8007             (        cubix.asm):00881                 SUBA    #7                                ;CONVERT TO ASCII
E449 8110             (        cubix.asm):00882                 CMPA    #$10                              ;TEST FOR 0-F
E44B 24BA             (        cubix.asm):00883                 BHS     BADOP1                            ;IF NOT, DIGIT IS BAD
E44D                  (        cubix.asm):00884         DIGOK
E44D B7DCD4           (        cubix.asm):00885                 STA     >TEMP+1                           ;SAVE FOR LATER
E450 8605             (        cubix.asm):00886                 LDA     #5                                ;SHIFT FOUR TIMES
E452 B7DCD3           (        cubix.asm):00887                 STA     >TEMP                             ;SAVE COUNTER
E455                  (        cubix.asm):00888         DSHFT
E455 1F10             (        cubix.asm):00889                 TFR     X,D                               ;COPY TO X
E457 308B             (        cubix.asm):00890                 LEAX    D,X                               ;MULTIPLY BY 2, = 1 BIT SHIFT
E459 7ADCD3           (        cubix.asm):00891                 DEC     >TEMP                             ;REDUCE COUNT
E45C 26F7             (        cubix.asm):00892                 BNE     DSHFT                             ;KEEP SHIFTING
E45E FADCD4           (        cubix.asm):00893                 ORB     >TEMP+1                           ;STICK ON EXTRA DIGIT
E461 1F01             (        cubix.asm):00894                 TFR     D,X                               ;COPY BACK TO X
E463 20D3             (        cubix.asm):00895                 BRA     GETL1                             ;GET NEXT DIGIT
E465                  (        cubix.asm):00896         HEXEND
E465 BDE4F0           (        cubix.asm):00897                 JSR     SKIP                              ;ADVANCE TO NEXT OPERAND
E468 4F               (        cubix.asm):00898                 CLRA                                      ;INDICATE ZERO RETURN CODE
E469 39               (        cubix.asm):00899                 RTS
                      (        cubix.asm):00900         ;*
                      (        cubix.asm):00901         ;* GETS A DECIMAL NUMBER FROM THE TERMINAL.
                      (        cubix.asm):00902         ;*
E46A                  (        cubix.asm):00903         GETDEC
E46A BDE4F0           (        cubix.asm):00904                 JSR     SKIP                              ;SKIP TO START OF OPERAND.
E46D 1027FE5B         (        cubix.asm):00905                 LBEQ    BADOPR                            ;IF INVALID, GO BACK.
E471                  (        cubix.asm):00906         GETDV
E471 8E0000           (        cubix.asm):00907                 LDX     #0                                ;START WITH ZERO.
E474                  (        cubix.asm):00908         DECDIG
E474 BDE4FD           (        cubix.asm):00909                 JSR     TSTERM                            ;TEST FOR TERMINATOR
E477 27EC             (        cubix.asm):00910                 BEQ     HEXEND                            ;IF THATS ALL, FORGET IT.
E479 8030             (        cubix.asm):00911                 SUBA    #'0'                              ;CONVERT TO BINARY.
E47B 8109             (        cubix.asm):00912                 CMPA    #9                                ;TEST FOR INVALID.
E47D 1022FE4B         (        cubix.asm):00913                 LBHI    BADOPR                            ;AGAIN, INVALID OPERAND.
E481 3402             (        cubix.asm):00914                 PSHS    A                                 ;SAVE ACC.
E483 CC000A           (        cubix.asm):00915                 LDD     #10                               ;MUL BY 10
E486 BDF704           (        cubix.asm):00916                 JSR     MUL16                             ;D=D*X
E489 EBE0             (        cubix.asm):00917                 ADDB    ,S+                               ;ADD IN DIGIT
E48B 8900             (        cubix.asm):00918                 ADCA    #0                                ;INSURE HIGH GOES
E48D 1F01             (        cubix.asm):00919                 TFR     D,X                               ;COPY TO RESULT
E48F 20E3             (        cubix.asm):00920                 BRA     DECDIG                            ;GET NEXT
                      (        cubix.asm):00921         ;*
E491                  (        cubix.asm):00922         WRDEC8
E491 4F               (        cubix.asm):00923                 CLRA                                      ;DISPLAY 8 BIT BUMBER (B) IN DECIMAL
                      (        cubix.asm):00924         ;*
                      (        cubix.asm):00925         ;* DISPLAYS 16 BIT NUMBER IN D AS A DECIMAL NUMBER,
                      (        cubix.asm):00926         ;*
E492                  (        cubix.asm):00927         WRDEC
E492 3436             (        cubix.asm):00928                 PSHS    A,B,X,Y                           ;SAVE X-Y REGISTERS
E494 108E0000         (        cubix.asm):00929                 LDY     #0                                ;START WITH ZERO CHARACTERS
E498 1F01             (        cubix.asm):00930                 TFR     D,X                               ;SET UP STARTING VALUE
E49A                  (        cubix.asm):00931         WRDE1
E49A CC000A           (        cubix.asm):00932                 LDD     #10                               ;DIVIDE BY 10
E49D BDF724           (        cubix.asm):00933                 JSR     DIV16                             ;X=X/D, D=REMAINDER
E4A0 3404             (        cubix.asm):00934                 PSHS    B                                 ;SAVE REMAINDER
E4A2 3121             (        cubix.asm):00935                 LEAY    1,Y                               ;INDICATE ANOTHER ON STACK
E4A4 8C0000           (        cubix.asm):00936                 CMPX    #0                                ;ANY MORE?
E4A7 26F1             (        cubix.asm):00937                 BNE     WRDE1                             ;NO, CONTINUE
E4A9                  (        cubix.asm):00938         WRDE2
E4A9 3502             (        cubix.asm):00939                 PULS    A                                 ;GET DIGIT BACK
E4AB 8B30             (        cubix.asm):00940                 ADDA    #'0'                              ;CONVERT TO PRINTABLE FORM
E4AD BDE5AE           (        cubix.asm):00941                 JSR     PUTCHR                            ;DISPLAY DECIMAL DIGIT
E4B0 313F             (        cubix.asm):00942                 LEAY    -1,Y                              ;REDUCE COUNT
E4B2 26F5             (        cubix.asm):00943                 BNE     WRDE2                             ;IF NOT END, CONTINUE DISPLAYING
E4B4 35B6             (        cubix.asm):00944                 PULS    A,B,X,Y,PC                        ;RESTORE INDEX REG'S
                      (        cubix.asm):00945         ;*
                      (        cubix.asm):00946         ;* GETS AND BUFFERS A LINE FROM THE TERMINAL, ON EXIT, Y REGISTER
                      (        cubix.asm):00947         ;* POINTS TO LINE IN BUFFER.
                      (        cubix.asm):00948         ;*
E4B6                  (        cubix.asm):00949         GLFCR
E4B6 BDE59C           (        cubix.asm):00950                 JSR     LFCR                              ;START A NEW LINE
E4B9                  (        cubix.asm):00951         GLINE
E4B9 862A             (        cubix.asm):00952                 LDA     #'*'                              ;GET PROMPT CHARACTER
E4BB BDE5AE           (        cubix.asm):00953                 JSR     PUTCHR                            ;DISPLAY
E4BE                  (        cubix.asm):00954         GLNOP
E4BE 108EDC00         (        cubix.asm):00955                 LDY     #INBUFF                           ;POINT TO INPUT BUFFER
E4C2                  (        cubix.asm):00956         GLINE1
E4C2 1F20             (        cubix.asm):00957                 TFR     Y,D                               ;GET POINTER INTO BUFFER
E4C4 C150             (        cubix.asm):00958                 CMPB    #80                               ;TEST FOR OVER LIMIT
E4C6 22EE             (        cubix.asm):00959                 BHI     GLFCR                             ;INDICATE ERROR
E4C8 BDE5EE           (        cubix.asm):00960                 JSR     GETCHR                            ;GET CHARACTER FROM CONSOLE
E4CB 817F             (        cubix.asm):00961                 CMPA    #$7F                              ;TEST FOR DELETE
E4CD 2704             (        cubix.asm):00962                 BEQ     GLINE2                            ;YES, PERFORM DELETE
E4CF 8108             (        cubix.asm):00963                 CMPA    #8                                ;TEST FOR BACKSPACE
E4D1 260B             (        cubix.asm):00964                 BNE     GLINE3                            ;DON'T DELETE
E4D3                  (        cubix.asm):00965         GLINE2
E4D3 313F             (        cubix.asm):00966                 LEAY    -1,Y                              ;DELETE A CHARACTER
E4D5 BDE562           (        cubix.asm):00967                 JSR     WRLIN                             ;OUTPUT MESSAGE
E4D8 08200800         (        cubix.asm):00968                 FCB     8,' ',8,0                         ;WIPE PREVIOUS CHARACTER
E4DC 20E4             (        cubix.asm):00969                 BRA     GLINE1                            ;GET NEXT CHARACTER
E4DE                  (        cubix.asm):00970         GLINE3
E4DE BDE5AE           (        cubix.asm):00971                 JSR     PUTCHR                            ;ECHO CHARACTER
E4E1 8D2B             (        cubix.asm):00972                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E4E3 A7A0             (        cubix.asm):00973                 STA     ,Y+                               ;SAVE IN BUFFER
E4E5 810D             (        cubix.asm):00974                 CMPA    #$0D                              ;TEST FOR END OF LINE
E4E7 26D9             (        cubix.asm):00975                 BNE     GLINE1                            ;GET NEXT CHARACTER
E4E9 108EDC00         (        cubix.asm):00976                 LDY     #INBUFF                           ;POINT TO BUFFER
E4ED 7EE59C           (        cubix.asm):00977                 JMP     LFCR                              ;START A NEW LINE
                      (        cubix.asm):00978         ;*
                      (        cubix.asm):00979         ;* SKIPS TO NEXT NON-BLANK CHARACTER IN INPUT LINE. AND TESTS IT FOR <CR>.
                      (        cubix.asm):00980         ;*
E4F0                  (        cubix.asm):00981         SKIP
E4F0 A6A0             (        cubix.asm):00982                 LDA     ,Y+                               ;GET CHARACTER
E4F2 8120             (        cubix.asm):00983                 CMPA    #' '                              ;TEST FOR BLANK
E4F4 27FA             (        cubix.asm):00984                 BEQ     SKIP                              ;IF SO, KEEP LOOKING
E4F6 6DA2             (        cubix.asm):00985                 TST     ,-Y                               ;BACKUP & TEST FOR ZERO
E4F8 2702             (        cubix.asm):00986                 BEQ     SKRTS                             ;YES, END WITH 'Z' SET
E4FA 810D             (        cubix.asm):00987                 CMPA    #$0D                              ;TEST FOR CARRIAGE RETURN
E4FC                  (        cubix.asm):00988         SKRTS
E4FC 39               (        cubix.asm):00989                 RTS
                      (        cubix.asm):00990         ;*
                      (        cubix.asm):00991         ;* TESTS FOR VALID TERMINATOR CHARACTERS.
                      (        cubix.asm):00992         ;*
E4FD                  (        cubix.asm):00993         TSTERM
E4FD A6A0             (        cubix.asm):00994                 LDA     ,Y+                               ;GET CHARACTER AND ADVANCE
E4FF 2708             (        cubix.asm):00995                 BEQ     TSTE1                             ;IF NULL, INDICATE TERMINATOR
E501 8120             (        cubix.asm):00996                 CMPA    #' '                              ;TEST FOR SPACE
E503 2708             (        cubix.asm):00997                 BEQ     TRET                              ;IF SO, QUIT
E505 810D             (        cubix.asm):00998                 CMPA    #$0D                              ;IS IT A CARRIAGE RETURN
E507 2604             (        cubix.asm):00999                 BNE     TRET                              ;IF NOT, DON'T BACK UP
E509                  (        cubix.asm):01000         TSTE1
E509 313F             (        cubix.asm):01001                 LEAY    -1,Y                              ;BACK UP SO WE DON'T GO BEYOND
E50B 1A04             (        cubix.asm):01002                 ORCC    #%00000100                        ;SET 'Z'
E50D                  (        cubix.asm):01003         TRET
E50D 39               (        cubix.asm):01004                 RTS
                      (        cubix.asm):01005         ;*
                      (        cubix.asm):01006         ;* CONVERT THE CHARACTER IN 'A' TO UPPER CASE
                      (        cubix.asm):01007         ;*
E50E                  (        cubix.asm):01008         TOUPPER
E50E 8161             (        cubix.asm):01009                 CMPA    #'A'+$20                          ;ALREADY UPPERCASE?
E510 25FB             (        cubix.asm):01010                 BLO     TRET                              ;YES, ITS OK
E512 817A             (        cubix.asm):01011                 CMPA    #'Z'+$20                          ;ALREADY UPPERCASE?
E514 22F7             (        cubix.asm):01012                 BHI     TRET                              ;YES, ITS OK
E516 845F             (        cubix.asm):01013                 ANDA    #%01011111                        ;CONVERT TO UPPERCASE
E518 39               (        cubix.asm):01014                 RTS
                      (        cubix.asm):01015         ;*
                      (        cubix.asm):01016         ;* LOOKS UP WORD(Y) IN TABLE(X). INDEX OF COMMAND IN TABLE IS
                      (        cubix.asm):01017         ;* RETURNED IN THE B REGISTER, WITH ZERO BEING THE FIRST COMMAND.
                      (        cubix.asm):01018         ;* FOR INFORMATION ON THE COMMAND TABLE FORMAT, SEE COMMAND TABLE.
                      (        cubix.asm):01019         ;*
E519                  (        cubix.asm):01020         TLOOK
E519 5F               (        cubix.asm):01021                 CLRB                                      ;START WITH ZERO ENTRY
E51A 8DD4             (        cubix.asm):01022                 BSR     SKIP                              ;SKIP LEADING BLANKS
E51C                  (        cubix.asm):01023         TLOOK1
E51C A680             (        cubix.asm):01024                 LDA     ,X+                               ;GET CHAR FROM FILE
E51E 2AFC             (        cubix.asm):01025                 BPL     TLOOK1                            ;ADVANCE TO CONTROL BYTE
E520 301F             (        cubix.asm):01026                 LEAX    -1,X                              ;BACKUP TO IT
E522 3420             (        cubix.asm):01027                 PSHS    Y                                 ;SAVE POSITION
E524 847F             (        cubix.asm):01028                 ANDA    #$7F                              ;REMOVE FLAG BIT
E526 272C             (        cubix.asm):01029                 BEQ     TLOOK6                            ;END OF TABLE ENCOUNTERED
E528 B7DCD3           (        cubix.asm):01030                 STA     >TEMP                             ;SAVE FOR LATER REF
E52B                  (        cubix.asm):01031         TLOOK2
E52B 3001             (        cubix.asm):01032                 LEAX    1,X                               ;ADVANCE IN TABLE
E52D 7ADCD3           (        cubix.asm):01033                 DEC     >TEMP                             ;REDUCE COUNT
E530 A684             (        cubix.asm):01034                 LDA     ,X                                ;GET CHAR
E532 8DDA             (        cubix.asm):01035                 BSR     TOUPPER                           ;CONVERT TO UPPERCASE
E534 B7DCD4           (        cubix.asm):01036                 STA     >TEMP+1                           ;SAVE FOR LATER
E537 8DC4             (        cubix.asm):01037                 BSR     TSTERM                            ;TEST FOR TERMINATOR
E539 2714             (        cubix.asm):01038                 BEQ     TLOOK5                            ;IF SO, TEST IT
E53B B1DCD4           (        cubix.asm):01039                 CMPA    >TEMP+1                           ;TEST FOR SAME AS TABLE ENTRY
E53E 27EB             (        cubix.asm):01040                 BEQ     TLOOK2                            ;IF SO, IT'S OK
E540 812F             (        cubix.asm):01041                 CMPA    #'/'                              ;SLASH?
E542 2709             (        cubix.asm):01042                 BEQ     TLOOK4                            ;YES, ACCEPT IT
E544 813D             (        cubix.asm):01043                 CMPA    #'='                              ;EQUALS?
E546 2705             (        cubix.asm):01044                 BEQ     TLOOK4                            ;ACCEPT IT AS WELL
                      (        cubix.asm):01045         ;* THIS ENTRY NOT FOUND, SKIP TO NEXT ONE
E548                  (        cubix.asm):01046         TLOOK3
E548 3520             (        cubix.asm):01047                 PULS    Y                                 ;RESTORE COMMAND POINTER
E54A 5C               (        cubix.asm):01048                 INCB                                      ;INC. INDICATOR
E54B 20CF             (        cubix.asm):01049                 BRA     TLOOK1                            ;TRY NEXT ENTRY
E54D                  (        cubix.asm):01050         TLOOK4
E54D 313F             (        cubix.asm):01051                 LEAY    -1,Y                              ;BACKUP TO SPECIAL CHAR
E54F                  (        cubix.asm):01052         TLOOK5
E54F BADCD3           (        cubix.asm):01053                 ORA     >TEMP                             ;TEST FOR MINIMUM NUMBER OF CHARS
E552 2AF4             (        cubix.asm):01054                 BPL     TLOOK3                            ;IF NOT, SKIP THIS COMMAND
E554                  (        cubix.asm):01055         TLOOK6
E554 8D9A             (        cubix.asm):01056                 BSR     SKIP                              ;SKIP TO OPERANDS
E556 5D               (        cubix.asm):01057                 TSTB                                      ;SET FLAG IS ZERO
E557 3590             (        cubix.asm):01058                 PULS    X,PC                              ;CLEAN UP STACK
                      (        cubix.asm):01059         ;*
                      (        cubix.asm):01060         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (        cubix.asm):01061         ;*
E559                  (        cubix.asm):01062         WRHEXW
E559 8D13             (        cubix.asm):01063                 BSR     WRHEX                             ;OUTPUT
E55B 1E89             (        cubix.asm):01064                 EXG     A,B                               ;SWAP
E55D 8D0F             (        cubix.asm):01065                 BSR     WRHEX                             ;OUTPUT
E55F 1E89             (        cubix.asm):01066                 EXG     A,B                               ;BACK
E561 39               (        cubix.asm):01067                 RTS
                      (        cubix.asm):01068         ;*
                      (        cubix.asm):01069         ;* WRITE MESSAGE, NO CARRIAGE RETURN AT END
                      (        cubix.asm):01070         ;*
E562                  (        cubix.asm):01071         WRLIN
E562 3410             (        cubix.asm):01072                 PSHS    X                                 ;SAVE X
E564 AE62             (        cubix.asm):01073                 LDX     2,S                               ;GET ADDRESS BACK
E566 8D20             (        cubix.asm):01074                 BSR     WRSTR                             ;OUTPUT
E568 AF62             (        cubix.asm):01075                 STX     2,S                               ;RESAVE
E56A 1A04             (        cubix.asm):01076                 ORCC    #%00000100                        ;ZERO RETURN CODE
E56C 3590             (        cubix.asm):01077                 PULS    X,PC
                      (        cubix.asm):01078         ;*
                      (        cubix.asm):01079         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (        cubix.asm):01080         ;*
E56E                  (        cubix.asm):01081         WRHEX
E56E 3402             (        cubix.asm):01082                 PSHS    A                                 ;SAVE IT
E570 44               (        cubix.asm):01083                 LSRA                                      ;SHIFT
E571 44               (        cubix.asm):01084                 LSRA                                      ;HIGH NIBBLE
E572 44               (        cubix.asm):01085                 LSRA                                      ;INTO
E573 44               (        cubix.asm):01086                 LSRA                                      ;LOW NIBBLE
E574 8D06             (        cubix.asm):01087                 BSR     HOUT                              ;HIGH
E576 A6E4             (        cubix.asm):01088                 LDA     ,S                                ;GET LOW
E578 8D02             (        cubix.asm):01089                 BSR     HOUT                              ;OUTPUT
E57A 3582             (        cubix.asm):01090                 PULS    A,PC                              ;RESTORE IT
                      (        cubix.asm):01091         ;* OUTPUT NIBBLE IN HEX
E57C                  (        cubix.asm):01092         HOUT
E57C 840F             (        cubix.asm):01093                 ANDA    #%00001111                        ;REMOVE HIGH
E57E 8B30             (        cubix.asm):01094                 ADDA    #'0'                              ;CONVERT
E580 8139             (        cubix.asm):01095                 CMPA    #'9'                              ;OK?
E582 232A             (        cubix.asm):01096                 BLS     PUTCHR                            ;OK, OUTPUT
E584 8B07             (        cubix.asm):01097                 ADDA    #7                                ;CONVERT TO 'A'-'F'
E586 2026             (        cubix.asm):01098                 BRA     PUTCHR                            ;OUTPUT
                      (        cubix.asm):01099         ;*
                      (        cubix.asm):01100         ;* WRITE STRING(X) TO CONSOLE
                      (        cubix.asm):01101         ;*
E588                  (        cubix.asm):01102         WRSTR
E588 3402             (        cubix.asm):01103                 PSHS    A                                 ;SAVE A
E58A                  (        cubix.asm):01104         WRST1
E58A A680             (        cubix.asm):01105                 LDA     ,X+                               ;GET CHAR
E58C 271E             (        cubix.asm):01106                 BEQ     WRST2                             ;END, QUIT
E58E 8D1E             (        cubix.asm):01107                 BSR     PUTCHR                            ;OUTPUT
E590 20F8             (        cubix.asm):01108                 BRA     WRST1                             ;CONTINUE
                      (        cubix.asm):01109         ;*
                      (        cubix.asm):01110         ;* OUTPUT MESSAGE TO CONSOLE
                      (        cubix.asm):01111         ;*
E592                  (        cubix.asm):01112         WRMSG
E592 3410             (        cubix.asm):01113                 PSHS    X                                 ;SAVE X
E594 AE62             (        cubix.asm):01114                 LDX     2,S                               ;GET RETURN ADDRESS
E596 8DF0             (        cubix.asm):01115                 BSR     WRSTR                             ;OUTPUT STRING
E598 AF62             (        cubix.asm):01116                 STX     2,S                               ;RESAVE NEW RETURN ADDR
E59A 3510             (        cubix.asm):01117                 PULS    X                                 ;RESTORE X
                      (        cubix.asm):01118         ;*
                      (        cubix.asm):01119         ;* OUTPUT LFCR TO CONSOLE
                      (        cubix.asm):01120         ;*
E59C                  (        cubix.asm):01121         LFCR
E59C 3402             (        cubix.asm):01122                 PSHS    A                                 ;SAVE IT
E59E 860A             (        cubix.asm):01123                 LDA     #$0A                              ;GET LF
E5A0 8D0C             (        cubix.asm):01124                 BSR     PUTCHR                            ;OUTPUT
E5A2 860D             (        cubix.asm):01125                 LDA     #$0D                              ;GET CR
E5A4 2004             (        cubix.asm):01126                 BRA     SPC1                              ;CONTINUE
                      (        cubix.asm):01127         ;*
                      (        cubix.asm):01128         ;* OUTPUT SPACE TO CONSOLE
                      (        cubix.asm):01129         ;*
E5A6                  (        cubix.asm):01130         SPACE
E5A6 3402             (        cubix.asm):01131                 PSHS    A                                 ;SAVE ACCA
E5A8 8620             (        cubix.asm):01132                 LDA     #' '                              ;GET SPACE
E5AA                  (        cubix.asm):01133         SPC1
E5AA 8D02             (        cubix.asm):01134                 BSR     PUTCHR                            ;OUTPUT
E5AC                  (        cubix.asm):01135         WRST2
E5AC 3582             (        cubix.asm):01136                 PULS    A,PC                              ;RESTORE
                      (        cubix.asm):01137         ;*
                      (        cubix.asm):01138         ;* WRITE CHARACTER(A) TO CONSOLE DEVICE
                      (        cubix.asm):01139         ;*
E5AE                  (        cubix.asm):01140         PUTCHR
E5AE 3416             (        cubix.asm):01141                 PSHS    A,B,X                             ;SAVE REGS
E5B0 F6DC6D           (        cubix.asm):01142                 LDB     >CONOUT                           ;GET CONSOLE OUTPUT DEVICE
E5B3 2002             (        cubix.asm):01143                 BRA     WRDEV1                            ;PROCEDE WITH OUTPUT
                      (        cubix.asm):01144         ;*
                      (        cubix.asm):01145         ;* WRITE CHARACTER(A) TO DEVICE(B)
                      (        cubix.asm):01146         ;*
E5B5                  (        cubix.asm):01147         WRDEV
E5B5 3416             (        cubix.asm):01148                 PSHS    A,B,X                             ;SAVE REGS
E5B7                  (        cubix.asm):01149         WRDEV1
E5B7 C108             (        cubix.asm):01150                 CMPB    #NDEV                             ;CHECK FOR IN RANGE
E5B9 240D             (        cubix.asm):01151                 BHS     BADDEV                            ;INDICATE INVALID
E5BB 8EDC7E           (        cubix.asm):01152                 LDX     #DOTAB                            ;POINT TO STATUS TABLE
E5BE 58               (        cubix.asm):01153                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E5BF AE85             (        cubix.asm):01154                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E5C1 2705             (        cubix.asm):01155                 BEQ     BADDEV                            ;INDICATE INVALID DEVICE
E5C3 AD84             (        cubix.asm):01156                 JSR     ,X                                ;EXECUTE OUTPUT DRIVER
E5C5 4F               (        cubix.asm):01157                 CLRA                                      ;ZERO RETURN CODE
E5C6 3596             (        cubix.asm):01158                 PULS    A,B,X,PC                          ;RESTORE & RETURN
                      (        cubix.asm):01159         ;*
                      (        cubix.asm):01160         ;* BAD DEVICE SPECIFIED
                      (        cubix.asm):01161         ;*
E5C8                  (        cubix.asm):01162         BADDEV
E5C8 8EF832           (        cubix.asm):01163                 LDX     #DEVMSG                           ;POINT TO DEVICE MESSAGE
E5CB 860A             (        cubix.asm):01164                 LDA     #RCDEV                            ;BAD DEVICE RETURN CODE
E5CD 7EE2D1           (        cubix.asm):01165                 JMP     ERRMRC                            ;EXIT WITH ERROR
                      (        cubix.asm):01166         ;*
                      (        cubix.asm):01167         ;* READ A CHARACTER FROM DEVICE (B)
                      (        cubix.asm):01168         ;*
E5D0                  (        cubix.asm):01169         RDDEV
E5D0 8D03             (        cubix.asm):01170                 BSR     TSTDEV                            ;TEST FOR CHAR
E5D2 26FC             (        cubix.asm):01171                 BNE     RDDEV                             ;WAIT FOR IT
E5D4 39               (        cubix.asm):01172                 RTS
                      (        cubix.asm):01173         ;*
                      (        cubix.asm):01174         ;* TEST FOR CHARACTER FROM DEVICE(B)
                      (        cubix.asm):01175         ;*
E5D5                  (        cubix.asm):01176         TSTDEV
E5D5 3414             (        cubix.asm):01177                 PSHS    B,X                               ;SAVE REGS
E5D7                  (        cubix.asm):01178         TSTDE1
E5D7 C108             (        cubix.asm):01179                 CMPB    #NDEV                             ;DEVICE IN RANGE?
E5D9 24ED             (        cubix.asm):01180                 BHS     BADDEV                            ;INDICATE INVALUD
E5DB 8EDC6E           (        cubix.asm):01181                 LDX     #DITAB                            ;POINT TO STATUS TABLE
E5DE 58               (        cubix.asm):01182                 ASLB                                      ;X2 FOR TWO BYTE ENTRIES
E5DF AE85             (        cubix.asm):01183                 LDX     B,X                               ;GET DEVICE DRIVER ADDRESS
E5E1 27E5             (        cubix.asm):01184                 BEQ     BADDEV                            ;INDICATE INVALID
E5E3 AD84             (        cubix.asm):01185                 JSR     ,X                                ;EXECUTE INPUT DRIVER
E5E5 3594             (        cubix.asm):01186                 PULS    B,X,PC                            ;RESTORE & RETURN
                      (        cubix.asm):01187         ;*
                      (        cubix.asm):01188         ;* TEST FOR A CHARACTER FROM THE CONSOLE DEVICE
                      (        cubix.asm):01189         ;*
E5E7                  (        cubix.asm):01190         TSTCHR
E5E7 3414             (        cubix.asm):01191                 PSHS    B,X                               ;SAVE REGS
E5E9 F6DC6C           (        cubix.asm):01192                 LDB     >CONIN                            ;GET INPUT DEVICE
E5EC 20E9             (        cubix.asm):01193                 BRA     TSTDE1                            ;AND CONTINUE
                      (        cubix.asm):01194         ;*
                      (        cubix.asm):01195         ;* READ A CHARACTER FROM CONSOLE
                      (        cubix.asm):01196         ;*
E5EE                  (        cubix.asm):01197         GETCHR
E5EE 8DF7             (        cubix.asm):01198                 BSR     TSTCHR                            ;TEST FOR CHAR
E5F0 26FC             (        cubix.asm):01199                 BNE     GETCHR                            ;INDICATE NONE
E5F2 39               (        cubix.asm):01200                 RTS
                      (        cubix.asm):01201         ;*
                      (        cubix.asm):01202         ;* INCLUDE ALL OTHER SUB-SYSTEMS
                      (        cubix.asm):01203         ;*
                      (        cubix.asm):01204                 INCLUDE filesys.os                        ;FILE SYSTEM MANAGMENT
                      (       filesys.os):00001         ;*
                      (       filesys.os):00002         ;* CUBIX File System management routines
                      (       filesys.os):00003         ;*
                      (       filesys.os):00004         ;* LOCATE NEXT WORK SECTOR IN CHAIN
                      (       filesys.os):00005         ;*
E5F3                  (       filesys.os):00006         FNDLNK
E5F3 3402             (       filesys.os):00007                 PSHS    A
E5F5 58               (       filesys.os):00008                 LSLB                                      ;DOUBLE FOR
E5F6 49               (       filesys.os):00009                 ROLA                                      ;TWO BYTE ID'S
E5F7 8401             (       filesys.os):00010                 ANDA    #$01                              ;MASK OFF BITS (512/SECTOR)
E5F9 C3DE00           (       filesys.os):00011                 ADDD    #WRKSPC                           ;POINT TO WORKSPACE
E5FC 1F01             (       filesys.os):00012                 TFR     D,X                               ;SET UP POINTER
E5FE 3504             (       filesys.os):00013                 PULS    B                                 ;RESTORE HIGH ID
E600 CB01             (       filesys.os):00014                 ADDB    #LNKSEC                           ;ADVANCE TO LINK SECTOR
E602 4F               (       filesys.os):00015                 CLRA                                      ;ZERO HIGH
E603 3410             (       filesys.os):00016                 PSHS    X                                 ;SAVE PTR
E605 8D09             (       filesys.os):00017                 BSR     RDWRK                             ;READ WORK SECTOR
E607 3510             (       filesys.os):00018                 PULS    X                                 ;RESTORE
E609 EC84             (       filesys.os):00019                 LDD     ,X                                ;GET DATA
E60B 1083FFFF         (       filesys.os):00020                 CMPD    #$FFFF                            ;END OF FILE?
E60F                  (       filesys.os):00021         GRTS
E60F 39               (       filesys.os):00022                 RTS
                      (       filesys.os):00023         ;*
                      (       filesys.os):00024         ;* READ WORK SECTOR FROM DISK
                      (       filesys.os):00025         ;*
E610                  (       filesys.os):00026         RDWRK
E610 3402             (       filesys.os):00027                 PSHS    A                                 ;SAVE ACCA
E612 8EDE00           (       filesys.os):00028                 LDX     #WRKSPC                           ;POINT TO IT
E615 B6DCF3           (       filesys.os):00029                 LDA     >SDRIVE                           ;CURRENT DRIVE
E618 B1DCE6           (       filesys.os):00030                 CMPA    >WRKDRV                           ;ARE WE ON IT?
E61B 2608             (       filesys.os):00031                 BNE     RDW1                              ;WRITE IT CHANGED
E61D A6E4             (       filesys.os):00032                 LDA     ,S                                ;RESTORE SECTOR ID
E61F 10B3DCE7         (       filesys.os):00033                 CMPD    >WRKSEC                           ;DO WE ALREADY HAVE IT?
E623 2710             (       filesys.os):00034                 BEQ     RRTS                              ;YES, ITS OK
E625                  (       filesys.os):00035         RDW1
E625 8D20             (       filesys.os):00036                 BSR     WRTST                             ;WRITE IF NESSARY
E627 B6DCF3           (       filesys.os):00037                 LDA     >SDRIVE                           ;GET DRIVE
E62A B7DCE6           (       filesys.os):00038                 STA     >WRKDRV                           ;SET WORK DRIVE
E62D A6E4             (       filesys.os):00039                 LDA     ,S                                ;RESTORE SECTOR ID
E62F FDDCE7           (       filesys.os):00040                 STD     >WRKSEC                           ;SET IT UP
E632 BDEAF8           (       filesys.os):00041                 JSR     RDISK                             ;READ DISK
E635                  (       filesys.os):00042         RRTS
E635 3582             (       filesys.os):00043                 PULS    A,PC
                      (       filesys.os):00044         ;*
                      (       filesys.os):00045         ;* PURGE OPEN WORK SECTOR, INSURE IT GETS WRITTEN. SET
                      (       filesys.os):00046         ;* SAVED SECTOR TO $FFFF, SO WE FORCE NEW READ
                      (       filesys.os):00047         ;*
E637                  (       filesys.os):00048         PURGE
E637 8D0E             (       filesys.os):00049                 BSR     WRTST                             ;WRITE IF NESSARY
E639                  (       filesys.os):00050         PURGE1
E639 3406             (       filesys.os):00051                 PSHS    A,B                               ;SAVE REGISTERS
E63B CCFFFF           (       filesys.os):00052                 LDD     #$FFFF                            ;GET NON-EXISTANT
E63E FDDCE7           (       filesys.os):00053                 STD     >WRKSEC                           ;SET WORK SECTOR
E641 B7DCE6           (       filesys.os):00054                 STA     >WRKDRV                           ;SET WORK DRIVE
E644 4F               (       filesys.os):00055                 CLRA    SET 'Z'
E645 3586             (       filesys.os):00056                 PULS    A,B,PC
                      (       filesys.os):00057         ;*
                      (       filesys.os):00058         ;* WRITE WORK SECTOR IF IT HAS BEEN CHANGED
                      (       filesys.os):00059         ;*
E647                  (       filesys.os):00060         WRTST
E647 7DDCE5           (       filesys.os):00061                 TST     >WRKCHG                           ;HAS IT CHANGED?
E64A 27C3             (       filesys.os):00062                 BEQ     GRTS                              ;NO, SKIP IT
                      (       filesys.os):00063         ;*
                      (       filesys.os):00064         ;* WRITE WORK SECTOR BACK TO DISK
                      (       filesys.os):00065         ;*
E64C                  (       filesys.os):00066         WRWRK
E64C 3416             (       filesys.os):00067                 PSHS    A,B,X                             ;SAVE REGS
E64E B6DCF3           (       filesys.os):00068                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E651 3402             (       filesys.os):00069                 PSHS    A                                 ;SAVE IT
E653 B6DCE6           (       filesys.os):00070                 LDA     >WRKDRV                           ;GET WORK DRIVE
E656 B7DCF3           (       filesys.os):00071                 STA     >SDRIVE                           ;SET IT UP
E659 FCDCE7           (       filesys.os):00072                 LDD     >WRKSEC                           ;GET ID
E65C 8EDE00           (       filesys.os):00073                 LDX     #WRKSPC                           ;POINT TO WORKSPACE
E65F BDEB2B           (       filesys.os):00074                 JSR     WDISK                             ;WRITE IT
E662 7FDCE5           (       filesys.os):00075                 CLR     >WRKCHG                           ;INDICTE FRESH
E665 3502             (       filesys.os):00076                 PULS    A                                 ;RESTORE DRIVE
E667 B7DCF3           (       filesys.os):00077                 STA     >SDRIVE                           ;RESAVE
E66A 4F               (       filesys.os):00078                 CLRA                                      ;ZERO RETURN
E66B 3596             (       filesys.os):00079                 PULS    A,B,X,PC
                      (       filesys.os):00080         ;*
                      (       filesys.os):00081         ;* LOCATE  FILE, ISSUE ERROR MESSAGE IF NOT FOUND
                      (       filesys.os):00082         ;*
E66D                  (       filesys.os):00083         LOCERR
                      (       filesys.os):00084         
E66D 8D37             (       filesys.os):00085                 BSR     LOCDIR                            ;LOOK IT UP
E66F 2758             (       filesys.os):00086                 BEQ     FILFND                            ;FINE, RETURN
                      (       filesys.os):00087         
                      (       filesys.os):00088         ;* ATTEMPT TO OPEN FILE FAILED, NOT FOUND
E671                  (       filesys.os):00089         NOTFND
E671 108EF7AF         (       filesys.os):00090                 LDY     #NOTMSG                           ;INDICATE NOT FOUND
E675 8602             (       filesys.os):00091                 LDA     #RCNOTF                           ;NOT FOUND RC
                      (       filesys.os):00092         ;* PROCESS FOR FILE RELATED ERRORS
E677                  (       filesys.os):00093         FILERR
E677 3403             (       filesys.os):00094                 PSHS    A,CC                              ;SAVE A & CC
E679 7DDCA2           (       filesys.os):00095                 TST     >MSGFLG                           ;MESSAGES ENABLED
E67C 2721             (       filesys.os):00096                 BEQ     NOFMSG                            ;NO, SKIP IT
E67E BDE562           (       filesys.os):00097                 JSR     WRLIN                             ;OUTPUT MESSAGE
E681 4572726F72207072 (       filesys.os):00098                 FCC     'Error processing file: '
     6F63657373696E67
     2066696C653A20
E698 00               (       filesys.os):00099                 FCB     $00
E699 BDE6EB           (       filesys.os):00100                 JSR     SHOSAV                            ;DISPLAY IT
E69C BDE59C           (       filesys.os):00101                 JSR     LFCR
E69F                  (       filesys.os):00102         NOFMSG
E69F 1F21             (       filesys.os):00103                 TFR     Y,X                               ;COPY IT
E6A1 3503             (       filesys.os):00104                 PULS    A,CC                              ;RESTORE CONDITIONS
E6A3 7EE2D1           (       filesys.os):00105                 JMP     ERRMRC                            ;OUTPUT MESSAGE
                      (       filesys.os):00106         ;*
                      (       filesys.os):00107         ;* LOCATE A FILE IN THE DIRECTORY, LEAVES 'X' POINTING AT IT
                      (       filesys.os):00108         ;*
E6A6                  (       filesys.os):00109         LOCDIR
E6A6 B6DCBF           (       filesys.os):00110                 LDA     >FDRIVE                           ;GET FILES DRIVE ID
E6A9 B7DCF3           (       filesys.os):00111                 STA     >SDRIVE                           ;SAVE IT
E6AC CC0000           (       filesys.os):00112                 LDD     #DIRSEC                           ;STARTING SECTOR OF DIR
E6AF                  (       filesys.os):00113         LOCSEC
E6AF BDE610           (       filesys.os):00114                 JSR     RDWRK                             ;READ IT
E6B2                  (       filesys.os):00115         LOCFIL
                      (       filesys.os):00116         
E6B2 BDE337           (       filesys.os):00117                 JSR     COMNAM                            ;DOES IT MATCH
E6B5 2712             (       filesys.os):00118                 BEQ     FILFND                            ;YES
E6B7 308820           (       filesys.os):00119                 LEAX    32,X                              ;ADVANCE TO NEXT
E6BA 8CE000           (       filesys.os):00120                 CMPX    #WRKSPC+512                       ;OVER?
E6BD 25F3             (       filesys.os):00121                 BLO     LOCFIL                            ;KEEP LOOKING
E6BF FCDCE7           (       filesys.os):00122                 LDD     >WRKSEC                           ;GET SECTOR
E6C2 BDE5F3           (       filesys.os):00123                 JSR     FNDLNK                            ;GET ITS LINK
E6C5 26E8             (       filesys.os):00124                 BNE     LOCSEC                            ;MORE TO FIND
E6C7 8602             (       filesys.os):00125                 LDA     #RCNOTF                           ;FILE NOT FOUND
E6C9                  (       filesys.os):00126         FILFND
E6C9 39               (       filesys.os):00127                 RTS
                      (       filesys.os):00128         ;*
                      (       filesys.os):00129         ;* DISPLAY DIRECTORY USING SAVED FILENAME AS A MASK
                      (       filesys.os):00130         ;*
E6CA                  (       filesys.os):00131         DISDIR
E6CA 8DA1             (       filesys.os):00132                 BSR     LOCERR                            ;LOCATE FILE
E6CC                  (       filesys.os):00133         SHOME
E6CC 8D30             (       filesys.os):00134                 BSR     SHONAM                            ;OUTPUT NAME
E6CE BDE59C           (       filesys.os):00135                 JSR     LFCR                              ;NEW LINE
E6D1                  (       filesys.os):00136         NOSHO
E6D1 308820           (       filesys.os):00137                 LEAX    32,X                              ;NEXT ENTRY
E6D4 8CE000           (       filesys.os):00138                 CMPX    #WRKSPC+512                       ;OVER?
E6D7 250B             (       filesys.os):00139                 BLO     SHOFIL                            ;MORE TO GO
E6D9 FCDCE7           (       filesys.os):00140                 LDD     >WRKSEC                           ;GET WORKSECTOR
E6DC BDE5F3           (       filesys.os):00141                 JSR     FNDLNK                            ;LOCATE LINK
E6DF 27E8             (       filesys.os):00142                 BEQ     FILFND                            ;NO, QUIT
E6E1 BDE610           (       filesys.os):00143                 JSR     RDWRK                             ;READ NEW SECTOR
E6E4                  (       filesys.os):00144         SHOFIL
E6E4 BDE337           (       filesys.os):00145                 JSR     COMNAM                            ;DOES IT MATCH?
E6E7 26E8             (       filesys.os):00146                 BNE     NOSHO                             ;DON'T OUTPUT
E6E9 20E1             (       filesys.os):00147                 BRA     SHOME                             ;DISPLAY IT
                      (       filesys.os):00148         
                      (       filesys.os):00149         ;*
                      (       filesys.os):00150         ;* SHOW SAVED FILENAME
                      (       filesys.os):00151         ;*
E6EB                  (       filesys.os):00152         SHOSAV
E6EB 3416             (       filesys.os):00153                 PSHS    A,B,X                             ;SAVE REGS
E6ED 8EDCBF           (       filesys.os):00154                 LDX     #FDRIVE                           ;POINT TO IT
E6F0 A680             (       filesys.os):00155                 LDA     ,X+                               ;GET DRIVE ID
E6F2 8B41             (       filesys.os):00156                 ADDA    #'A'                              ;OFFSET
E6F4 BDE5AE           (       filesys.os):00157                 JSR     PUTCHR
E6F7 863A             (       filesys.os):00158                 LDA     #':'
E6F9 BDE5AE           (       filesys.os):00159                 JSR     PUTCHR
E6FC 2002             (       filesys.os):00160                 BRA     SHON1                             ;DISPLAY IT
                      (       filesys.os):00161         ;*
                      (       filesys.os):00162         ;* DISPLAYS FILENAME(X) IN DIRECTORY FORMAT
                      (       filesys.os):00163         ;*
E6FE                  (       filesys.os):00164         SHONAM
E6FE 3416             (       filesys.os):00165                 PSHS    A,B,X                             ;SAVE REGISTERS
E700                  (       filesys.os):00166         SHON1
E700 865B             (       filesys.os):00167                 LDA     #'['                              ;OPENING BRACKET
E702 BDE5AE           (       filesys.os):00168                 JSR     PUTCHR                            ;OUTPUT
E705 8D12             (       filesys.os):00169                 BSR     DISP8                             ;DISPLAY IT
E707 865D             (       filesys.os):00170                 LDA     #']'                              ;CLOSING BRACKET
E709 BDE5AE           (       filesys.os):00171                 JSR     PUTCHR                            ;OUTPUT
E70C 8D0B             (       filesys.os):00172                 BSR     DISP8                             ;DISPLAY NAME
E70E 862E             (       filesys.os):00173                 LDA     #'.'
E710 BDE5AE           (       filesys.os):00174                 JSR     PUTCHR
E713 C603             (       filesys.os):00175                 LDB     #3                                ;TYPE IS THREE
E715 8D04             (       filesys.os):00176                 BSR     DISPX
E717 3596             (       filesys.os):00177                 PULS    A,B,X,PC
E719                  (       filesys.os):00178         DISP8
E719 C608             (       filesys.os):00179                 LDB     #8                                ;8 CHARS FOR PREFIX AND TYPE
E71B                  (       filesys.os):00180         DISPX
E71B A680             (       filesys.os):00181                 LDA     ,X+                               ;GET CHAR
E71D 2703             (       filesys.os):00182                 BEQ     SHRT                              ;SHORT, ADVANCE
E71F BDE5AE           (       filesys.os):00183                 JSR     PUTCHR                            ;DISPLAY
E722                  (       filesys.os):00184         SHRT
E722 5A               (       filesys.os):00185                 DECB                                      ;REDUCE COUNT
E723 26F6             (       filesys.os):00186                 BNE     DISPX                             ;KEEP GOING
E725 39               (       filesys.os):00187                 RTS
                      (       filesys.os):00188         ;*
                      (       filesys.os):00189         ;* CALCULATE DRIVE SIZE IN 'D'
                      (       filesys.os):00190         ;*
E726                  (       filesys.os):00191         CURSIZ
E726 B6DCF3           (       filesys.os):00192                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
E729                  (       filesys.os):00193         DRVSIZ
E729 3450             (       filesys.os):00194                 PSHS    X,U
E72B BDEB22           (       filesys.os):00195                 JSR     GETCTL1                           ;GET CONTROL BLOCK
E72E E643             (       filesys.os):00196                 LDB     NSEC,U                            ;GET # SECS/TRACK
E730 A642             (       filesys.os):00197                 LDA     NHEAD,U                           ;GET # HEADS
E732 3D               (       filesys.os):00198                 MUL                                       ;GET SECS/CYLINDER
E733 1F01             (       filesys.os):00199                 TFR     D,X
E735 4F               (       filesys.os):00200                 CLRA
E736 E641             (       filesys.os):00201                 LDB     NCYL,U                            ;GET # CYLINDERS
E738 BDF704           (       filesys.os):00202                 JSR     MUL16                             ;
E73B 35D0             (       filesys.os):00203                 PULS    X,U,PC                            ;RETURN
                      (       filesys.os):00204         ;*
                      (       filesys.os):00205         ;* CREATES A FILE
                      (       filesys.os):00206         ;*
E73D                  (       filesys.os):00207         CREATE
E73D BDE370           (       filesys.os):00208                 JSR     VALID                             ;OK AS SINGLE FLE
E740 1026FB88         (       filesys.os):00209                 LBNE    BADOPR                            ;NO, INVALID
E744 BDE6A6           (       filesys.os):00210                 JSR     LOCDIR                            ;LOOK FOR IT
E747 2609             (       filesys.os):00211                 BNE     CRE1                              ;ITS OK
                      (       filesys.os):00212         ;* FILE ALREADY EXISTS
E749                  (       filesys.os):00213         FEXISTS
E749 108EF7BE         (       filesys.os):00214                 LDY     #EXIMSG                           ;FILE EXISTS
E74D 8607             (       filesys.os):00215                 LDA     #RCEXI                            ;EXISTS
E74F 7EE677           (       filesys.os):00216                 JMP     FILERR                            ;INDICATE ERROR
E752                  (       filesys.os):00217         CRE1
E752 8D6F             (       filesys.os):00218                 BSR     FRESEC                            ;ALLOCATE A SECTOR
E754 FDDCD5           (       filesys.os):00219                 STD     >TEMP1                            ;SAVE IT
E757 CC0000           (       filesys.os):00220                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
E75A                  (       filesys.os):00221         CRE2
E75A BDE610           (       filesys.os):00222                 JSR     RDWRK                             ;READ WORK SECTOR
E75D C610             (       filesys.os):00223                 LDB     #16                               ;ENTRIES/SECTOR
E75F                  (       filesys.os):00224         CRE3
E75F 6D84             (       filesys.os):00225                 TST     ,X                                ;IS IT FREE?
E761 2732             (       filesys.os):00226                 BEQ     CRE6                              ;YES, PUT IT HERE
E763 308820           (       filesys.os):00227                 LEAX    32,X                              ;ADVANCE TO NEXT
E766 5A               (       filesys.os):00228                 DECB                                      ;REDUCE COUNT
E767 26F6             (       filesys.os):00229                 BNE     CRE3                              ;KEEP LOOKING
E769 FCDCE7           (       filesys.os):00230                 LDD     >WRKSEC                           ;GET DIRECTORY SEC ID
E76C BDE5F3           (       filesys.os):00231                 JSR     FNDLNK                            ;FIND LINK
E76F 26E9             (       filesys.os):00232                 BNE     CRE2                              ;AND KEEP GOING
E771 FCDCD5           (       filesys.os):00233                 LDD     >TEMP1                            ;GET OUR FREE SECTOR
E774 ED84             (       filesys.os):00234                 STD     ,X                                ;POINT DIRECTORY AT IT
E776 BDE7BA           (       filesys.os):00235                 JSR     CHGWRK                            ;INDICATE WE CHANGED
E779 3406             (       filesys.os):00236                 PSHS    A,B                               ;SAVE ID
E77B 8D46             (       filesys.os):00237                 BSR     FRESEC                            ;GET FREE
E77D FDDCD5           (       filesys.os):00238                 STD     >TEMP1                            ;SAVE NEW FREE
E780 BDE64C           (       filesys.os):00239                 JSR     WRWRK                             ;WRITE WORK SECTOR
E783 3506             (       filesys.os):00240                 PULS    A,B                               ;RESTORE DIRECTORY SECTOR ID
E785 FDDCE7           (       filesys.os):00241                 STD     >WRKSEC                           ;INDICATE CURRENT WORKSECTOR
E788 8EDE00           (       filesys.os):00242                 LDX     #WRKSPC                           ;PT TO IT
E78B                  (       filesys.os):00243         CRE5
E78B 6F80             (       filesys.os):00244                 CLR     ,X+                               ;CLEAR IT
E78D 8CE000           (       filesys.os):00245                 CMPX    #WRKSPC+512                       ;ARE WE OVER
E790 25F9             (       filesys.os):00246                 BLO     CRE5                              ;DO ALL
E792 8EDE00           (       filesys.os):00247                 LDX     #WRKSPC                           ;PT TO IT AGAIN
E795                  (       filesys.os):00248         CRE6
E795 3420             (       filesys.os):00249                 PSHS    Y                                 ;SAVE
E797 108EDCC0         (       filesys.os):00250                 LDY     #PREFIX                           ;PT TO SAVED NAME
E79B C613             (       filesys.os):00251                 LDB     #19                               ;19 CHARS IN NAME
E79D                  (       filesys.os):00252         CRE7
E79D A6A0             (       filesys.os):00253                 LDA     ,Y+                               ;GET CHAR
E79F A780             (       filesys.os):00254                 STA     ,X+                               ;SAVE IN ENTRY
E7A1 5A               (       filesys.os):00255                 DECB                                      ;REDUCE COUNT
E7A2 26F9             (       filesys.os):00256                 BNE     CRE7                              ;CONTINUE
E7A4 3520             (       filesys.os):00257                 PULS    Y                                 ;RESTORE
E7A6 3088ED           (       filesys.os):00258                 LEAX    -19,X                             ;BACK TO START
E7A9 FCDCDB           (       filesys.os):00259                 LDD     >TEMP4                            ;GET LOAD ADDRESS
E7AC ED8815           (       filesys.os):00260                 STD     DRADR,X                           ;SET IT,
E7AF 86F0             (       filesys.os):00261                 LDA     #DEFATR                           ;GET DEF ATTRIBUTES
E7B1 A78817           (       filesys.os):00262                 STA     DATTR,X                           ;SET THEM
E7B4 FCDCD5           (       filesys.os):00263                 LDD     >TEMP1                            ;GET DISK ADDRESS
E7B7 ED8813           (       filesys.os):00264                 STD     DDADR,X                           ;SET IT
                      (       filesys.os):00265         ;*
                      (       filesys.os):00266         ;* SET WORK SECTOR CHANGED FLAG
                      (       filesys.os):00267         ;*
E7BA                  (       filesys.os):00268         CHGWRK
E7BA 7FDCE5           (       filesys.os):00269                 CLR     >WRKCHG
E7BD 7ADCE5           (       filesys.os):00270                 DEC     >WRKCHG                           ;SET IT
E7C0 1A04             (       filesys.os):00271                 ORCC    #4                                ;SET 'Z'
E7C2 39               (       filesys.os):00272                 RTS
                      (       filesys.os):00273         ;*
                      (       filesys.os):00274         ;* LOCATE A FREE SECTOR ON THE DISK, CLAIM IT AND SET
                      (       filesys.os):00275         ;* FLAG TO $FFFF (END OF FILE). ATEMPT TO ALLOCATE IN SECTOR
                      (       filesys.os):00276         ;* WHICH AS ALREADY LOADED IN ORDER TO REDUCE DISK I/O.
                      (       filesys.os):00277         ;*
E7C3                  (       filesys.os):00278         FRESEC
E7C3 BDE726           (       filesys.os):00279                 JSR     CURSIZ                            ;CALCULATE SIZE OF DISK
E7C6 FDDCD3           (       filesys.os):00280                 STD     >TEMP                             ;SAVE IT
E7C9 830001           (       filesys.os):00281                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
E7CC 8B01             (       filesys.os):00282                 ADDA    #LNKSEC                           ;COMPUTE LARGEST LINK SECTOR # (D/256+LNK)
E7CE 3402             (       filesys.os):00283                 PSHS    A                                 ;SAVE
E7D0 7DDCE7           (       filesys.os):00284                 TST     >WRKSEC                           ;LOW?
E7D3 260E             (       filesys.os):00285                 BNE     FRES1                             ;NO LINK IN CORE
E7D5 F6DCE8           (       filesys.os):00286                 LDB     >WRKSEC+1                         ;GET SECTOR ID
E7D8 B1DCE8           (       filesys.os):00287                 CMPA    >WRKSEC+1                         ;IS IT IN RANGE?
E7DB 2506             (       filesys.os):00288                 BLO     FRES1                             ;NO LINK IN CORE
E7DD C101             (       filesys.os):00289                 CMPB    #LNKSEC                           ;IN RANGE?
E7DF 2502             (       filesys.os):00290                 BLO     FRES1                             ;NO LINK IN CORE
E7E1 8D11             (       filesys.os):00291                 BSR     FNDFRE                            ;LOOK FOR IT
E7E3                  (       filesys.os):00292         FRES1
E7E3 C601             (       filesys.os):00293                 LDB     #LNKSEC                           ;LOOK IN FIRST
E7E5                  (       filesys.os):00294         FRES2
E7E5 8D0D             (       filesys.os):00295                 BSR     FNDFRE                            ;LOOK FOR IT
E7E7 5C               (       filesys.os):00296                 INCB    ADVANCE
E7E8 E1E4             (       filesys.os):00297                 CMPB    ,S                                ;ARE WE OVER?
E7EA 23F9             (       filesys.os):00298                 BLS     FRES2                             ;NO, LEEP GOING
                      (       filesys.os):00299         ;* NO DISK SPACE AVAILABLE
E7EC                  (       filesys.os):00300         NOSPAC
E7EC 8EF7D2           (       filesys.os):00301                 LDX     #NOSMSG                           ;NO SPACE
E7EF 8608             (       filesys.os):00302                 LDA     #RCNOS                            ;RETURN CODE
E7F1 7EE2D1           (       filesys.os):00303                 JMP     ERRMRC                            ;REPORT ERROR
                      (       filesys.os):00304         ;* LOOK FOR FREE SECTOR
E7F4                  (       filesys.os):00305         FNDFRE
E7F4 4F               (       filesys.os):00306                 CLRA                                      ;HIGH ADDRESS TO ZERO
E7F5 3434             (       filesys.os):00307                 PSHS    B,X,Y                             ;SAVE REGS
E7F7 BDE610           (       filesys.os):00308                 JSR     RDWRK                             ;READ WORK SECTOR
E7FA                  (       filesys.os):00309         FNDF1
E7FA EC81             (       filesys.os):00310                 LDD     ,X++                              ;IS IT FREE
E7FC 2707             (       filesys.os):00311                 BEQ     FNDF3                             ;YES
E7FE 8CE000           (       filesys.os):00312                 CMPX    #WRKSPC+512                       ;OVER?
E801 25F7             (       filesys.os):00313                 BLO     FNDF1                             ;NO, KEEP LOOKING
E803                  (       filesys.os):00314         FNDF2
E803 35B4             (       filesys.os):00315                 PULS    B,X,Y,PC                          ;GO HOME
E805                  (       filesys.os):00316         FNDF3
E805 1F10             (       filesys.os):00317                 TFR     X,D                               ;GET VALUE
E807 83DE02           (       filesys.os):00318                 SUBD    #WRKSPC+2                         ;CONVERT TO BYTE OFFSET
E80A 44               (       filesys.os):00319                 LSRA                                      ;CONVERT ADDRESS IN WS
E80B 56               (       filesys.os):00320                 RORB                                      ;TO SECTOR # IN WS
E80C A6E4             (       filesys.os):00321                 LDA     ,S                                ;GET SECTOR ID BACK
E80E 8001             (       filesys.os):00322                 SUBA    #LNKSEC                           ;CONVERT TO PURE SECTOR #
E810 10B3DCD3         (       filesys.os):00323                 CMPD    >TEMP                             ;WITHIN DISK SIZE?
E814 24ED             (       filesys.os):00324                 BHS     FNDF2                             ;NO, RETURN WITH BAD NEWS
E816 3261             (       filesys.os):00325                 LEAS    1,S                               ;SKIP SAVED 'B' REGISTER
E818 108EFFFF         (       filesys.os):00326                 LDY     #$FFFF                            ;GET SECTOR IN USE FLAG
E81C 10AF1E           (       filesys.os):00327                 STY     -2,X                              ;WRITE IT
E81F 3530             (       filesys.os):00328                 PULS    X,Y                               ;RESTORE REGS
E821 3263             (       filesys.os):00329                 LEAS    3,S                               ;CLEAR UP STACK
E823 2095             (       filesys.os):00330                 BRA     CHGWRK                            ;INDICATE CHANGED
                      (       filesys.os):00331         ;*
                      (       filesys.os):00332         ;* OPEN A FILE FOR READ
                      (       filesys.os):00333         ;*
E825                  (       filesys.os):00334         OPENR
E825 3414             (       filesys.os):00335                 PSHS    B,X                               ;SAVE REGS
E827 BDE8BC           (       filesys.os):00336                 JSR     LOCRED                            ;DOES IT EXIST
E82A EC8813           (       filesys.os):00337                 LDD     DDADR,X                           ;GET DISK ADDRESS
E82D ED42             (       filesys.os):00338                 STD     OFIRST,U                          ;SAVE IT
E82F ED44             (       filesys.os):00339                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E831 4F               (       filesys.os):00340                 CLRA
E832 5F               (       filesys.os):00341                 CLRB                                      ;ZERO OFFSET
E833 ED48             (       filesys.os):00342                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E835 ED46             (       filesys.os):00343                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E837 F6DCBF           (       filesys.os):00344                 LDB     >FDRIVE                           ;GET FILE DRIVE
E83A 8601             (       filesys.os):00345                 LDA     #1                                ;INDICATE FILE OPEN/READ
E83C EDC4             (       filesys.os):00346                 STD     OTYPE,U                           ;INDICATE
E83E B6DCE2           (       filesys.os):00347                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E841 B7DCF3           (       filesys.os):00348                 STA     >SDRIVE                           ;RESET IT
E844 4F               (       filesys.os):00349                 CLRA                                      ;ZERO RC
E845 3594             (       filesys.os):00350                 PULS    B,X,PC
                      (       filesys.os):00351         ;*
                      (       filesys.os):00352         ;* READ CHARACTER FROM FILE
                      (       filesys.os):00353         ;*
E847                  (       filesys.os):00354         READC
E847 3414             (       filesys.os):00355                 PSHS    B,X                               ;SAVE REGS
E849 304A             (       filesys.os):00356                 LEAX    OSIZ,U                            ;OFFSET TO DATA
E84B A641             (       filesys.os):00357                 LDA     ODRIVE,U                          ;GET DRIVE
E84D B7DCF3           (       filesys.os):00358                 STA     >SDRIVE                           ;SELECT
E850 EC48             (       filesys.os):00359                 LDD     OOFFSET,U                         ;GET OFFSET
E852 2612             (       filesys.os):00360                 BNE     REC1                              ;NON-ZERO, ITS OK
E854 A6C4             (       filesys.os):00361                 LDA     OTYPE,U                           ;GET OPEN TYPE
E856 4A               (       filesys.os):00362                 DECA                                      ;OPEN FOR READ?
E857 2676             (       filesys.os):00363                 BNE     ORERR                             ;NO, REPORT ERROR
E859 EC44             (       filesys.os):00364                 LDD     OSECTOR,U                         ;GET SECTOR
E85B 1083FFFF         (       filesys.os):00365                 CMPD    #$FFFF                            ;END OF FILE?
E85F 2776             (       filesys.os):00366                 BEQ     EOF                               ;YES, REPORT ERROR
E861 BDEAF8           (       filesys.os):00367                 JSR     RDISK                             ;READ IT IN
E864 EC48             (       filesys.os):00368                 LDD     OOFFSET,U                         ;RESTORE OFFSET
E866                  (       filesys.os):00369         REC1
E866 308B             (       filesys.os):00370                 LEAX    D,X                               ;OFFSET TO CHAR
E868 C30001           (       filesys.os):00371                 ADDD    #1                                ;ADVANCE
E86B 10830200         (       filesys.os):00372                 CMPD    #512                              ;ARE WE OVER
E86F 250F             (       filesys.os):00373                 BLO     REC2                              ;NO, ITS OK
E871 3410             (       filesys.os):00374                 PSHS    X                                 ;SAVE 'X'
E873 EC44             (       filesys.os):00375                 LDD     OSECTOR,U                         ;GET SECTOR
E875 ED46             (       filesys.os):00376                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E877 BDE5F3           (       filesys.os):00377                 JSR     FNDLNK                            ;LOOK UP ITS LINK
E87A ED44             (       filesys.os):00378                 STD     OSECTOR,U                         ;SAVE NEW SECTOR
E87C 3510             (       filesys.os):00379                 PULS    X                                 ;RESTORE PTR TO CAHR
E87E 4F               (       filesys.os):00380                 CLRA
E87F 5F               (       filesys.os):00381                 CLRB
E880                  (       filesys.os):00382         REC2
E880 ED48             (       filesys.os):00383                 STD     OOFFSET,U                         ;NEW OFFSET
E882 B6DCE2           (       filesys.os):00384                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E885 B7DCF3           (       filesys.os):00385                 STA     >SDRIVE                           ;RESET IT
E888 A680             (       filesys.os):00386                 LDA     ,X+                               ;GET CHARACTER
E88A 81FF             (       filesys.os):00387                 CMPA    #$FF                              ;END OF FILE?
E88C 2749             (       filesys.os):00388                 BEQ     EOF                               ;YES
E88E 1A04             (       filesys.os):00389                 ORCC    #4                                ;INDICATE SUCESS
E890 3594             (       filesys.os):00390                 PULS    B,X,PC
                      (       filesys.os):00391         ;*
                      (       filesys.os):00392         ;* READ A BLOCK FROM A FILE
                      (       filesys.os):00393         ;*
E892                  (       filesys.os):00394         READB
E892 3414             (       filesys.os):00395                 PSHS    B,X                               ;SAVE REGS
E894 A6C4             (       filesys.os):00396                 LDA     OTYPE,U                           ;GET OPEN TYPE
E896 4A               (       filesys.os):00397                 DECA                                      ;OPEN READ?
E897 2636             (       filesys.os):00398                 BNE     ORERR                             ;NO, REPORT ERROR
E899 A641             (       filesys.os):00399                 LDA     ODRIVE,U
E89B B7DCF3           (       filesys.os):00400                 STA     >SDRIVE                           ;SET DRIVE
E89E EC44             (       filesys.os):00401                 LDD     OSECTOR,U
E8A0 1083FFFF         (       filesys.os):00402                 CMPD    #$FFFF                            ;END OF FILE?
E8A4 2731             (       filesys.os):00403                 BEQ     EOF
E8A6 ED46             (       filesys.os):00404                 STD     OLSTSEC,U                         ;SAVE LAST
E8A8 BDEAF8           (       filesys.os):00405                 JSR     RDISK                             ;READ IT
E8AB BDE5F3           (       filesys.os):00406                 JSR     FNDLNK                            ;FIND ITS LINK
E8AE ED44             (       filesys.os):00407                 STD     OSECTOR,U                         ;RESAVE
E8B0 B6DCE2           (       filesys.os):00408                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E8B3 B7DCF3           (       filesys.os):00409                 STA     >SDRIVE                           ;RESET SYSTEM DRIVE
E8B6 4F               (       filesys.os):00410                 CLRA
E8B7 5F               (       filesys.os):00411                 CLRB
E8B8 ED48             (       filesys.os):00412                 STD     OOFFSET,U                         ;CLEAR OFFSET
E8BA 3594             (       filesys.os):00413                 PULS    B,X,PC
                      (       filesys.os):00414         ;*
                      (       filesys.os):00415         ;* LOOK UP FILE WITH INTENT TO READ
                      (       filesys.os):00416         ;*
E8BC                  (       filesys.os):00417         LOCRED
E8BC BDE66D           (       filesys.os):00418                 JSR     LOCERR                            ;FIND IT
E8BF A68817           (       filesys.os):00419                 LDA     DATTR,X                           ;GET ATTRS
E8C2 8580             (       filesys.os):00420                 BITA    #RPERM                            ;CAN WE READ?
E8C4 2635             (       filesys.os):00421                 BNE     CLOC2                             ;YES, ITS OK
                      (       filesys.os):00422         ;* FILE PROTECTON VIOLATION
E8C6                  (       filesys.os):00423         PROERR
E8C6 108EF818         (       filesys.os):00424                 LDY     #PROMSG                           ;MESSAGE
E8CA 8603             (       filesys.os):00425                 LDA     #RCPRO                            ;PROTECTION VIOLATION
E8CC 7EE677           (       filesys.os):00426                 JMP     FILERR                            ;FILE ERROR
                      (       filesys.os):00427         ;* ATTEMPT TO READ FILE NOT OPEN FOR READ
E8CF                  (       filesys.os):00428         ORERR
E8CF 8EF7E9           (       filesys.os):00429                 LDX     #OREMSG
E8D2 8604             (       filesys.os):00430                 LDA     #RCORE
E8D4 7EE2D1           (       filesys.os):00431                 JMP     ERRMRC
                      (       filesys.os):00432         ;* ATTEMPT TO READ PAST EOF
E8D7                  (       filesys.os):00433         EOF
E8D7 8606             (       filesys.os):00434                 LDA     #RCEOF
E8D9 7EE30C           (       filesys.os):00435                 JMP     ERRRET
                      (       filesys.os):00436         ;*
                      (       filesys.os):00437         ;* REWIND A FILE
                      (       filesys.os):00438         ;*
E8DC                  (       filesys.os):00439         REWIND
E8DC 3406             (       filesys.os):00440                 PSHS    A,B                               ;SAVE REGS
E8DE EC42             (       filesys.os):00441                 LDD     OFIRST,U                          ;GET FIRST SECTOR ID
E8E0 ED44             (       filesys.os):00442                 STD     OSECTOR,U                         ;POINT TO IT
E8E2 4F               (       filesys.os):00443                 CLRA
E8E3 5F               (       filesys.os):00444                 CLRB
E8E4 ED48             (       filesys.os):00445                 STD     OOFFSET,U                         ;SET OFFSET
E8E6 ED46             (       filesys.os):00446                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST
E8E8 3586             (       filesys.os):00447                 PULS    A,B,PC
                      (       filesys.os):00448         ;*
                      (       filesys.os):00449         ;* LOOKUP A FILE WITH INTENT TO WRITE
                      (       filesys.os):00450         ;*
E8EA                  (       filesys.os):00451         LOCWRI
E8EA BDE6A6           (       filesys.os):00452                 JSR     LOCDIR                            ;LOOK FOR IT
E8ED 2705             (       filesys.os):00453                 BEQ     CLOC1                             ;IT EXISTS
E8EF BDE73D           (       filesys.os):00454                 JSR     CREATE                            ;CREATE IT
E8F2 2007             (       filesys.os):00455                 BRA     CLOC2                             ;AND RETURN
E8F4                  (       filesys.os):00456         CLOC1
E8F4 A68817           (       filesys.os):00457                 LDA     DATTR,X                           ;GET ATTRIBUTES
E8F7 8540             (       filesys.os):00458                 BITA    #WPERM                            ;CAN WE WRITE?
E8F9 27CB             (       filesys.os):00459                 BEQ     PROERR                            ;PROTECTON VIOLATION
E8FB                  (       filesys.os):00460         CLOC2
E8FB FCDCE7           (       filesys.os):00461                 LDD     >WRKSEC                           ;GET DIRECTORY SECT
E8FE 1A04             (       filesys.os):00462                 ORCC    #$04                              ;SET 'Z'
E900 39               (       filesys.os):00463                 RTS
                      (       filesys.os):00464         ;*
                      (       filesys.os):00465         ;* OPEN A FILE FOR WRITE
                      (       filesys.os):00466         ;*
E901                  (       filesys.os):00467         OPENW
E901 3414             (       filesys.os):00468                 PSHS    B,X                               ;SAVE REGS
E903 8DE5             (       filesys.os):00469                 BSR     LOCWRI                            ;DOES IT EXIST
E905 EC8813           (       filesys.os):00470                 LDD     DDADR,X                           ;GET DISK ADDRESS
E908 ED42             (       filesys.os):00471                 STD     OFIRST,U                          ;SAVE IT
E90A ED44             (       filesys.os):00472                 STD     OSECTOR,U                         ;INDICATE CURRENT SECTOR
E90C 4F               (       filesys.os):00473                 CLRA
E90D 5F               (       filesys.os):00474                 CLRB                                      ;ZERO OFFSET
E90E ED48             (       filesys.os):00475                 STD     OOFFSET,U                         ;INDICATE OFFSET INTO FILE
E910 ED46             (       filesys.os):00476                 STD     OLSTSEC,U                         ;INDICATE THIS IS FIRST SECTOR
E912 B6DCBF           (       filesys.os):00477                 LDA     >FDRIVE                           ;GET FILE DRIVE
E915 A741             (       filesys.os):00478                 STA     ODRIVE,U                          ;SET IT UP
E917 8602             (       filesys.os):00479                 LDA     #2                                ;INDICATE FILE OPEN/WRITE
E919 A7C4             (       filesys.os):00480                 STA     OTYPE,U                           ;INDICATE
E91B B6DCE2           (       filesys.os):00481                 LDA     >SAVDRV
E91E B7DCF3           (       filesys.os):00482                 STA     >SDRIVE
E921 4F               (       filesys.os):00483                 CLRA    ZERO RC
E922 3594             (       filesys.os):00484                 PULS    B,X,PC
                      (       filesys.os):00485         ;*
                      (       filesys.os):00486         ;* WRITE CHARACTER TO A FILE
                      (       filesys.os):00487         ;*
E924                  (       filesys.os):00488         WRITEC
E924 3416             (       filesys.os):00489                 PSHS    A,B,X                             ;SAVE REGS
E926 304A             (       filesys.os):00490                 LEAX    OSIZ,U                            ;POINT TO DATA
E928 EC48             (       filesys.os):00491                 LDD     OOFFSET,U                         ;GET OFFSET
E92A 10830200         (       filesys.os):00492                 CMPD    #512                              ;ARE WE OVER?
E92E 2504             (       filesys.os):00493                 BLO     WRC1                              ;NO, ITS OK
E930 8D19             (       filesys.os):00494                 BSR     WRITEB                            ;OUTPUT THE BLOCK
E932 EC48             (       filesys.os):00495                 LDD     OOFFSET,U                         ;GET OFFSET
E934                  (       filesys.os):00496         WRC1
E934 308B             (       filesys.os):00497                 LEAX    D,X                               ;POINT TO CHAR
E936 C30001           (       filesys.os):00498                 ADDD    #1                                ;INCREMENT
E939 ED48             (       filesys.os):00499                 STD     OOFFSET,U                         ;RESAVE
E93B A6E4             (       filesys.os):00500                 LDA     ,S                                ;GET CHAR BACK
E93D A784             (       filesys.os):00501                 STA     ,X                                ;WRITE IN BUFFER
E93F 1A04             (       filesys.os):00502                 ORCC    #4                                ;INDICATE SUCESS
E941 3596             (       filesys.os):00503                 PULS    A,B,X,PC
                      (       filesys.os):00504         ;* ATTEMPT TO WRITE FILE NOT OPEN FOR WRITE
E943                  (       filesys.os):00505         OWERR
E943 8EF800           (       filesys.os):00506                 LDX     #OWEMSG
E946 8605             (       filesys.os):00507                 LDA     #RCOWE
E948 7EE2D1           (       filesys.os):00508                 JMP     ERRMRC
                      (       filesys.os):00509         ;*
                      (       filesys.os):00510         ;* WRITE A BLOCK TO A FILE
                      (       filesys.os):00511         ;*
E94B                  (       filesys.os):00512         WRITEB
E94B 3414             (       filesys.os):00513                 PSHS    B,X                               ;SAVE REGS
E94D A6C4             (       filesys.os):00514                 LDA     OTYPE,U                           ;GET TYPE
E94F 8102             (       filesys.os):00515                 CMPA    #2                                ;WRITE?
E951 26F0             (       filesys.os):00516                 BNE     OWERR                             ;NO, INVALID
E953 A641             (       filesys.os):00517                 LDA     ODRIVE,U                          ;GET DRIVE
E955 B7DCF3           (       filesys.os):00518                 STA     >SDRIVE                           ;SELECT DRIVE
E958 EC44             (       filesys.os):00519                 LDD     OSECTOR,U                         ;GET SECTOR
E95A 1083FFFF         (       filesys.os):00520                 CMPD    #$FFFF                            ;ARE WE PAST END?
E95E 2613             (       filesys.os):00521                 BNE     WRB1                              ;NO, ITS OK
E960 BDE7C3           (       filesys.os):00522                 JSR     FRESEC                            ;GET A SECTOR
E963 3406             (       filesys.os):00523                 PSHS    A,B                               ;SAVE IT
E965 EC46             (       filesys.os):00524                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
E967 BDE5F3           (       filesys.os):00525                 JSR     FNDLNK                            ;GET ITS LINK
E96A 3506             (       filesys.os):00526                 PULS    A,B                               ;RESTORE
E96C ED84             (       filesys.os):00527                 STD     ,X                                ;SAVE IT
E96E BDE7BA           (       filesys.os):00528                 JSR     CHGWRK                            ;INDICATE SECTOR CHANGED
E971 AE61             (       filesys.os):00529                 LDX     1,S                               ;RESTORE MEMORY POINTER
E973                  (       filesys.os):00530         WRB1
E973 ED46             (       filesys.os):00531                 STD     OLSTSEC,U                         ;SAVE LAST SECTOR
E975 BDEB2B           (       filesys.os):00532                 JSR     WDISK                             ;WRITE THE SECTOR
E978 BDE5F3           (       filesys.os):00533                 JSR     FNDLNK                            ;LOCATE LINK
E97B ED44             (       filesys.os):00534                 STD     OSECTOR,U                         ;SAVE ID OF NEXT SECTOR
E97D B6DCE2           (       filesys.os):00535                 LDA     >SAVDRV                           ;GET PREVIOUS DRIVE
E980 B7DCF3           (       filesys.os):00536                 STA     >SDRIVE                           ;RESET DRIVE ID
E983 4F               (       filesys.os):00537                 CLRA
E984 5F               (       filesys.os):00538                 CLRB
E985 ED48             (       filesys.os):00539                 STD     OOFFSET,U                         ;INDICATE NO CHAR WRITE
E987 3594             (       filesys.os):00540                 PULS    B,X,PC
                      (       filesys.os):00541         ;*
                      (       filesys.os):00542         ;* CLOSE OPEN FILE
                      (       filesys.os):00543         ;*
E989                  (       filesys.os):00544         CLOSE
E989 3414             (       filesys.os):00545                 PSHS    B,X                               ;SAVE REGS
E98B A6C4             (       filesys.os):00546                 LDA     OTYPE,U                           ;GET TYPE
E98D 8102             (       filesys.os):00547                 CMPA    #2                                ;OPEN FOR WRITE?
E98F 2639             (       filesys.os):00548                 BNE     CLO4                              ;NO, SKIP IT
                      (       filesys.os):00549         ;* UPDATE LAST SECTOR IF ANY DATA, OR FIRST IN FILE
E991 A641             (       filesys.os):00550                 LDA     ODRIVE,U                          ;GET DRIVE ID
E993 B7DCF3           (       filesys.os):00551                 STA     >SDRIVE                           ;SELECT IT
E996 EC48             (       filesys.os):00552                 LDD     OOFFSET,U                         ;DATA IN LAST SECT?
E998 2604             (       filesys.os):00553                 BNE     CLO0                              ;YES, WRITE IT
E99A AE46             (       filesys.os):00554                 LDX     OLSTSEC,U                         ;GET SECTOR
E99C 2617             (       filesys.os):00555                 BNE     CLO3                              ;IS A LAST, OK
                      (       filesys.os):00556         ;* CLEAR REMAINING SECTOR TO ZERO
E99E                  (       filesys.os):00557         CLO0
E99E 304A             (       filesys.os):00558                 LEAX    OSIZ,U                            ;PT TO AREA
E9A0 308B             (       filesys.os):00559                 LEAX    D,X                               ;ADVANCE TO DATA AREA
E9A2                  (       filesys.os):00560         CLO1
E9A2 10830200         (       filesys.os):00561                 CMPD    #512                              ;ARE WE OVER?
E9A6 2409             (       filesys.os):00562                 BHS     CLO2                              ;YES, STOP
E9A8 6F84             (       filesys.os):00563                 CLR     ,X                                ;SET TO ZERO
E9AA 6380             (       filesys.os):00564                 COM     ,X+                               ;& CONVERT TO FF
E9AC C30001           (       filesys.os):00565                 ADDD    #1                                ;ADVANCE
E9AF 20F1             (       filesys.os):00566                 BRA     CLO1                              ;AND CONTINUE
                      (       filesys.os):00567         ;* WRITE IT TO THE DISK
E9B1                  (       filesys.os):00568         CLO2
E9B1 304A             (       filesys.os):00569                 LEAX    OSIZ,U                            ;OFFSET AGAIN
E9B3 8D96             (       filesys.os):00570                 BSR     WRITEB                            ;WRITE IT
                      (       filesys.os):00571         ;* MARK LAST SECTOR WRITTEN AS EOF
E9B5                  (       filesys.os):00572         CLO3
E9B5 EC46             (       filesys.os):00573                 LDD     OLSTSEC,U                         ;ITS NOW LAST ONE
E9B7 BDE5F3           (       filesys.os):00574                 JSR     FNDLNK                            ;GET ITS LINK
E9BA CCFFFF           (       filesys.os):00575                 LDD     #$FFFF                            ;EOF MARKER
E9BD ED84             (       filesys.os):00576                 STD     ,X                                ;WRITE IT
                      (       filesys.os):00577         ;* IF NOT LAST SECTOR IN FILE, RELEASE REST
E9BF EC44             (       filesys.os):00578                 LDD     OSECTOR,U                         ;GET SECTOR
E9C1 1083FFFF         (       filesys.os):00579                 CMPD    #$FFFF                            ;LAST ONE IN FILE?
E9C5 2703             (       filesys.os):00580                 BEQ     CLO4                              ;IS OK
E9C7 BDEE24           (       filesys.os):00581                 JSR     UNCHAIN                           ;REMOVE SECTOR LINKS
E9CA                  (       filesys.os):00582         CLO4
E9CA 6FC4             (       filesys.os):00583                 CLR     OTYPE,U                           ;INDICATE FILE IS CLOSED
E9CC B6DCE2           (       filesys.os):00584                 LDA     >SAVDRV                           ;RESET DRIVE
E9CF B7DCF3           (       filesys.os):00585                 STA     >SDRIVE
E9D2 4F               (       filesys.os):00586                 CLRA
E9D3 3594             (       filesys.os):00587                 PULS    B,X,PC                            ;GO HOME
                      (       filesys.os):00588         ;*
                      (       filesys.os):00589         ;* SEEK ABSOLUTE FROM START OF FILE
                      (       filesys.os):00590         ;*
E9D5                  (       filesys.os):00591         SEEKABS
E9D5 BDE8DC           (       filesys.os):00592                 JSR     REWIND                            ;BACK TO START
                      (       filesys.os):00593         ;*
                      (       filesys.os):00594         ;* SEEK FORWARD RELATIVE
                      (       filesys.os):00595         ;*
E9D8                  (       filesys.os):00596         SEEKREL
E9D8 3416             (       filesys.os):00597                 PSHS    A,B,X                             ;SAVE SECTOR ID
E9DA E6C4             (       filesys.os):00598                 LDB     OTYPE,U                           ;GET TYPE
E9DC 5A               (       filesys.os):00599                 DECB                                      ;OPEN FOR READ?
E9DD 1026FEEE         (       filesys.os):00600                 LBNE    ORERR                             ;NO, REPORT ERROR
E9E1 A641             (       filesys.os):00601                 LDA     ODRIVE,U                          ;GET DRIVE
E9E3 B7DCF3           (       filesys.os):00602                 STA     >SDRIVE                           ;SELECT IT
E9E6 EC48             (       filesys.os):00603                 LDD     OOFFSET,U                         ;GET OFFSET?
E9E8 E3E4             (       filesys.os):00604                 ADDD    ,S                                ;ADD OFFSET
                      (       filesys.os):00605         ;* ADVANCE TILL WE ARE ON CORRECT SECTOR
E9EA                  (       filesys.os):00606         SEEK1
E9EA 10830200         (       filesys.os):00607                 CMPD    #512                              ;ARE WE OVER?
E9EE 251A             (       filesys.os):00608                 BLO     SEEK2                             ;NO, SET OFFSET & EXIT
E9F0 3406             (       filesys.os):00609                 PSHS    A,B                               ;SAVE ID
E9F2 EC44             (       filesys.os):00610                 LDD     OSECTOR,U                         ;GET NEXT SECTOR
E9F4 1083FFFF         (       filesys.os):00611                 CMPD    #$FFFF                            ;END OF FILE?
E9F8 1027FEDB         (       filesys.os):00612                 LBEQ    EOF                               ;ERROR
E9FC ED46             (       filesys.os):00613                 STD     OLSTSEC,U                         ;SET AS OLD
E9FE BDE5F3           (       filesys.os):00614                 JSR     FNDLNK                            ;LOOKUP LINK
EA01 ED44             (       filesys.os):00615                 STD     OSECTOR,U                         ;SAVE PTR TO NEXT
EA03 3506             (       filesys.os):00616                 PULS    A,B                               ;RESTORE IT
EA05 830200           (       filesys.os):00617                 SUBD    #512                              ;INDICATE WE ADVANCED
EA08 20E0             (       filesys.os):00618                 BRA     SEEK1                             ;CONTINUE
                      (       filesys.os):00619         ;* SKIPPED SECTORS, IF NON-ZERO OFFSET, READ IN DATA
EA0A                  (       filesys.os):00620         SEEK2
EA0A ED48             (       filesys.os):00621                 STD     OOFFSET,U                         ;SET OFFSET
EA0C 270F             (       filesys.os):00622                 BEQ     SEEK3                             ;ZERO, DON'T READ DATA
EA0E EC44             (       filesys.os):00623                 LDD     OSECTOR,U                         ;GET SECTOR
EA10 1083FFFF         (       filesys.os):00624                 CMPD    #$FFFF                            ;EOF?
EA14 1027FEBF         (       filesys.os):00625                 LBEQ    EOF                               ;YES, ERROR
EA18 304A             (       filesys.os):00626                 LEAX    OSIZ,U                            ;ADVANCE TO DATA
EA1A BDEAF8           (       filesys.os):00627                 JSR     RDISK                             ;READ A BLOCK
EA1D                  (       filesys.os):00628         SEEK3
EA1D B6DCE2           (       filesys.os):00629                 LDA     >SAVDRV                           ;GET DRIVE
EA20 B7DCF3           (       filesys.os):00630                 STA     >SDRIVE                           ;SET IT
EA23 4F               (       filesys.os):00631                 CLRA    ZERO RC
EA24 3596             (       filesys.os):00632                 PULS    A,B,X,PC                          ;BACK TO END
                      (       filesys.os):00633         ;*
                      (       filesys.os):00634         ;* REPORT POSITION IN FILE
                      (       filesys.os):00635         ;*
EA26                  (       filesys.os):00636         FTELL
EA26 3430             (       filesys.os):00637                 PSHS    X,Y                               ;SAVE REGS
EA28 A641             (       filesys.os):00638                 LDA     ODRIVE,U                          ;GET DRIVE
EA2A B7DCF3           (       filesys.os):00639                 STA     >SDRIVE                           ;SELECT IT
EA2D 108E0000         (       filesys.os):00640                 LDY     #0                                ;START AT POSITION ZERO
EA31 EC42             (       filesys.os):00641                 LDD     OFIRST,U                          ;GET ID OF FIRST
EA33                  (       filesys.os):00642         FTEL1
EA33 10A344           (       filesys.os):00643                 CMPD    OSECTOR,U                         ;ARE WE THERE?
EA36 2709             (       filesys.os):00644                 BEQ     FTEL2                             ;YES
EA38 31A90200         (       filesys.os):00645                 LEAY    512,Y                             ;ADVANCE 1 SECTOR SIZE
EA3C BDE5F3           (       filesys.os):00646                 JSR     FNDLNK                            ;LOCATE LINK
EA3F 26F2             (       filesys.os):00647                 BNE     FTEL1                             ;TRY THIS ONE
EA41                  (       filesys.os):00648         FTEL2
EA41 EC48             (       filesys.os):00649                 LDD     OOFFSET,U                         ;GET OFFSET
EA43 3420             (       filesys.os):00650                 PSHS    Y                                 ;SAVE 'Y'
EA45 E3E1             (       filesys.os):00651                 ADDD    ,S++                              ;INCLUDE IN RESULT
EA47 3402             (       filesys.os):00652                 PSHS    A
EA49 B6DCE2           (       filesys.os):00653                 LDA     >SAVDRV                           ;GET DRIVE
EA4C B7DCF3           (       filesys.os):00654                 STA     >SDRIVE
EA4F 4F               (       filesys.os):00655                 CLRA    'Z' RC
EA50 35B2             (       filesys.os):00656                 PULS    A,X,Y,PC
                      (       filesys.os):00657         ;*
                      (       filesys.os):00658         ;* SUSPEND FILE OPERATION
                      (       filesys.os):00659         ;*
EA52                  (       filesys.os):00660         SUSPEND
EA52 3506             (       filesys.os):00661                 PULS    A,B                               ;GET PC FROM STACK
EA54 FDDCDB           (       filesys.os):00662                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EA57 EC46             (       filesys.os):00663                 LDD     OLSTSEC,U                         ;GET LAST SECTOR
EA59 AE48             (       filesys.os):00664                 LDX     OOFFSET,U                         ;GET OFFSET
EA5B 10AE42           (       filesys.os):00665                 LDY     OFIRST,U                          ;GET FIRST SECT
EA5E 3436             (       filesys.os):00666                 PSHS    A,B,X,Y                           ;SAVE IT
EA60 ECC4             (       filesys.os):00667                 LDD     OTYPE,U                           ;GET TYPE&DRIVE
EA62 3406             (       filesys.os):00668                 PSHS    A,B                               ;SAVE IT
EA64 8102             (       filesys.os):00669                 CMPA    #2                                ;WUZ IT WRITE?
EA66 262D             (       filesys.os):00670                 BNE     SUSP2                             ;DON'T SAVE
EA68 8C0000           (       filesys.os):00671                 CMPX    #0                                ;ZERO OFFSET
                      (       filesys.os):00672         
EA6B 2728             (       filesys.os):00673                 BEQ     SUSP2                             ;DON'T SAVE
                      (       filesys.os):00674         ;* CHARACTER WRITE, WITH NON-ZERO OFFSET
EA6D A641             (       filesys.os):00675                 LDA     ODRIVE,U                          ;GET DRIVE
EA6F B7DCF3           (       filesys.os):00676                 STA     >SDRIVE                           ;SELECT IT
EA72 EC44             (       filesys.os):00677                 LDD     OSECTOR,U                         ;GET SECTOR
EA74 1083FFFF         (       filesys.os):00678                 CMPD    #$FFFF                            ;OK TO WRITE?
EA78 2610             (       filesys.os):00679                 BNE     SUSP1                             ;ITS OK
EA7A BDE7C3           (       filesys.os):00680                 JSR     FRESEC                            ;GRAB A SECTOR
EA7D 3406             (       filesys.os):00681                 PSHS    A,B                               ;SAVE ID
EA7F EC46             (       filesys.os):00682                 LDD     OLSTSEC,U                         ;GET LAST
EA81 BDE5F3           (       filesys.os):00683                 JSR     FNDLNK                            ;GET ITS LINK
EA84 3506             (       filesys.os):00684                 PULS    A,B                               ;RESTORE ID OF FREE
EA86 ED84             (       filesys.os):00685                 STD     ,X                                ;SET IT
EA88 ED44             (       filesys.os):00686                 STD     OSECTOR,U                         ;SET UP NEW SECTOR
EA8A                  (       filesys.os):00687         SUSP1
EA8A 304A             (       filesys.os):00688                 LEAX    OSIZ,U                            ;SET UP PTR
EA8C BDEB2B           (       filesys.os):00689                 JSR     WDISK                             ;OUTPUT SECTOR TO DISK
EA8F B6DCE2           (       filesys.os):00690                 LDA     >SAVDRV                           ;GET DRIVE
EA92 B7DCF3           (       filesys.os):00691                 STA     >SDRIVE                           ;RESET IT
EA95                  (       filesys.os):00692         SUSP2
EA95 BEDCDE           (       filesys.os):00693                 LDX     >SAVX                             ;RESTORE X
EA98 10BEDCE0         (       filesys.os):00694                 LDY     >SAVY                             ;RESTORE Y
EA9C F6DCDD           (       filesys.os):00695                 LDB     >SAVB                             ;RESTORE B
EA9F 4F               (       filesys.os):00696                 CLRA    ZERO RC
EAA0 6E9FDCDB         (       filesys.os):00697                 JMP     [TEMP4]                           ;GOT FOR TI
                      (       filesys.os):00698         ;*
                      (       filesys.os):00699         ;* RESUME FILE OPERATION
                      (       filesys.os):00700         ;*
EAA4                  (       filesys.os):00701         RESUME
EAA4 3506             (       filesys.os):00702                 PULS    A,B                               ;GET PC
EAA6 FDDCDB           (       filesys.os):00703                 STD     >TEMP4                            ;SAVE RETURN ADDRESS
EAA9 3506             (       filesys.os):00704                 PULS    A,B                               ;RESTORE REGS
EAAB EDC4             (       filesys.os):00705                 STD     OTYPE,U                           ;RESTORE TYPE
EAAD F7DCF3           (       filesys.os):00706                 STB     >SDRIVE                           ;SELECT DRIVE
EAB0 3536             (       filesys.os):00707                 PULS    A,B,X,Y                           ;RESTORE REST
EAB2 AF48             (       filesys.os):00708                 STX     OOFFSET,U                         ;SET OFFSET
EAB4 10AF42           (       filesys.os):00709                 STY     OFIRST,U                          ;SET FIRST
                      (       filesys.os):00710         ;* IF OLSTSEC IS ZERO, NO READ/WRITE TO DISK YET, OSECTOR IS FIRST IN FILE
EAB7 ED46             (       filesys.os):00711                 STD     OLSTSEC,U                         ;RESET LAST SECTOR
EAB9 2605             (       filesys.os):00712                 BNE     RESU1                             ;ITS OK
EABB 10AF44           (       filesys.os):00713                 STY     OSECTOR,U                         ;SET CURRENT SECTOR
EABE 2005             (       filesys.os):00714                 BRA     RESU2                             ;CONTINUE
                      (       filesys.os):00715         ;* ELSE OSECTOR IS NEXT AFTER OLSTSEC
EAC0                  (       filesys.os):00716         RESU1
EAC0 BDE5F3           (       filesys.os):00717                 JSR     FNDLNK                            ;GET LINK
EAC3 ED44             (       filesys.os):00718                 STD     OSECTOR,U                         ;SET UP NEXT SECTOR
                      (       filesys.os):00719         ;* CHECK FOR ACTUAL SECTOR IN MEMORY
EAC5                  (       filesys.os):00720         RESU2
EAC5 EC48             (       filesys.os):00721                 LDD     OOFFSET,U                         ;CHAR OPERATIONS?
EAC7 2707             (       filesys.os):00722                 BEQ     RESU3                             ;NO, ALL IS OK
                      (       filesys.os):00723         ;* NON-ZERO OFFSET, SECTOR MUST BE READ INTO RAM
EAC9 EC44             (       filesys.os):00724                 LDD     OSECTOR,U                         ;GET SECTOR
EACB 304A             (       filesys.os):00725                 LEAX    OSIZ,U                            ;ADVANCE TO BUFFER
EACD BDEAF8           (       filesys.os):00726                 JSR     RDISK                             ;READ IN SECTOR
EAD0                  (       filesys.os):00727         RESU3
EAD0 B6DCE2           (       filesys.os):00728                 LDA     >SAVDRV                           ;RESTORE DRIVE
EAD3 B7DCF3           (       filesys.os):00729                 STA     >SDRIVE                           ;RESET IT
EAD6 20B2             (       filesys.os):00730                 BRA     SUSP1                             ;RETURN TO CALLER
                      (       filesys.os):00731         ;*
                      (       filesys.os):00732         ;* CALCULATE CYLINDER, SECTOR, AND HEAD FROM ABSOLUTE SECTOR NUMBER
                      (       filesys.os):00733         ;*
EAD8                  (       filesys.os):00734         SECTOR
EAD8 3416             (       filesys.os):00735                 PSHS    A,B,X                             ;SAVE SECTOR ID
EADA 1F01             (       filesys.os):00736                 TFR     D,X                               ;SECT ID IN 'X'
EADC A643             (       filesys.os):00737                 LDA     NSEC,U                            ;GET SECTORS/TRACK
EADE E642             (       filesys.os):00738                 LDB     NHEAD,U                           ;GET # HEADS
EAE0 3D               (       filesys.os):00739                 MUL                                       ;CALCULATE SECTORS/CYLINDER
EAE1 BDF724           (       filesys.os):00740                 JSR     DIV16                             ;X=CYLINDER ID, D=SECTOR IN CYLINDER
EAE4 6F45             (       filesys.os):00741                 CLR     HEAD,U                            ;ASSUME HEAD 0
EAE6                  (       filesys.os):00742         SEC1
EAE6 E143             (       filesys.os):00743                 CMPB    NSEC,U                            ;WHICH HEAD?
EAE8 2506             (       filesys.os):00744                 BLO     SEC2                              ;ASSUMPTION CORRECT
EAEA E043             (       filesys.os):00745                 SUBB    NSEC,U                            ;CONVERT
EAEC 6C45             (       filesys.os):00746                 INC     HEAD,U                            ;ADVANCE TO NEXT HEAD
EAEE 20F6             (       filesys.os):00747                 BRA     SEC1                              ;TRY AGAIN
EAF0                  (       filesys.os):00748         SEC2
EAF0 E746             (       filesys.os):00749                 STB     SEC,U                             ;INDICATE SECTOR
EAF2 1F10             (       filesys.os):00750                 TFR     X,D                               ;GET CYLINDER ID
EAF4 E744             (       filesys.os):00751                 STB     CYL,U                             ;SAVE CYLINDER ID
EAF6 3596             (       filesys.os):00752                 PULS    A,B,X,PC
                      (       filesys.os):00753         ;*
                      (       filesys.os):00754         ;* READ SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00755         ;*
EAF8                  (       filesys.os):00756         RDISK
EAF8 3476             (       filesys.os):00757                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EAFA 7FDCF4           (       filesys.os):00758                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EAFD 8D20             (       filesys.os):00759                 BSR     GETCTL                            ;SET UP 'U'
EAFF                  (       filesys.os):00760         RTRY1
EAFF ECE4             (       filesys.os):00761                 LDD     ,S                                ;GET SECTOR
EB01 8DD5             (       filesys.os):00762                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EB03                  (       filesys.os):00763         RTRY2
EB03 AE62             (       filesys.os):00764                 LDX     2,S                               ;RESTORE 'X'
EB05 BDF755           (       filesys.os):00765                 JSR     RDSEC                             ;ATTEMPT READ
EB08 2713             (       filesys.os):00766                 BEQ     RDONE                             ;SUCESS, ITS OK
EB0A 7CDCF4           (       filesys.os):00767                 INC     >ERRCNT                           ;ADVANCE
EB0D F6DCF4           (       filesys.os):00768                 LDB     >ERRCNT                           ;GET VALUE
EB10 C105             (       filesys.os):00769                 CMPB    #5                                ;TOO MANY ERRORS?
EB12 273C             (       filesys.os):00770                 BEQ     HDE                               ;YES, SKIP IT
EB14 C103             (       filesys.os):00771                 CMPB    #3                                ;TIME FOR RE-SEEK?
EB16 26EB             (       filesys.os):00772                 BNE     RTRY2                             ;NO, DON'T RE-SEEK
EB18 BDF74B           (       filesys.os):00773                 JSR     HOME                              ;RECALIBRATE
EB1B 20E2             (       filesys.os):00774                 BRA     RTRY1                             ;AND RESEEK
EB1D                  (       filesys.os):00775         RDONE
EB1D 35F6             (       filesys.os):00776                 PULS    A,B,X,Y,U,PC
                      (       filesys.os):00777         ;*
                      (       filesys.os):00778         ;* GET DRIVE(A) CONTROL BLOCK IN 'D' & 'U'
                      (       filesys.os):00779         ;*
EB1F                  (       filesys.os):00780         GETCTL
EB1F B6DCF3           (       filesys.os):00781                 LDA     >SDRIVE                           ;GET SELECTED DRIVE
EB22                  (       filesys.os):00782         GETCTL1
EB22 C607             (       filesys.os):00783                 LDB     #CSIZE                            ;SIZE OF EACH BLOCK
EB24 3D               (       filesys.os):00784                 MUL                                       ;CALCULATE OFFSET
EB25 C3DC50           (       filesys.os):00785                 ADDD    #DCTRL                            ;OFFSET TO DATA AREA
EB28 1F03             (       filesys.os):00786                 TFR     D,U                               ;SET UP U
EB2A 39               (       filesys.os):00787                 RTS
                      (       filesys.os):00788         ;*
                      (       filesys.os):00789         ;* WRITE SECTOR BY SECTOR ID(D) TO MEMORY(X)
                      (       filesys.os):00790         ;*
EB2B                  (       filesys.os):00791         WDISK
EB2B 3476             (       filesys.os):00792                 PSHS    A,B,X,Y,U                         ;SAVE REGISTERS
EB2D 7FDCF4           (       filesys.os):00793                 CLR     >ERRCNT                           ;ZERO ERROR COUNT
EB30 8DED             (       filesys.os):00794                 BSR     GETCTL                            ;SET UP 'U'
EB32                  (       filesys.os):00795         WTRY1
EB32 ECE4             (       filesys.os):00796                 LDD     ,S                                ;GET SECTOR
EB34 8DA2             (       filesys.os):00797                 BSR     SECTOR                            ;CALCULATE CYLINDER, HEAD & SECTOR
EB36                  (       filesys.os):00798         WTRY2
EB36 AE62             (       filesys.os):00799                 LDX     2,S                               ;RESTORE 'X'
EB38 BDF759           (       filesys.os):00800                 JSR     WRSEC                             ;ATTEMPT WRITE
EB3B 27E0             (       filesys.os):00801                 BEQ     RDONE                             ;SUCCESS, ITS OK
EB3D 7CDCF4           (       filesys.os):00802                 INC     >ERRCNT                           ;ADVANCE
EB40 F6DCF4           (       filesys.os):00803                 LDB     >ERRCNT                           ;GET VALUE
EB43 C105             (       filesys.os):00804                 CMPB    #5                                ;TOO MANY ERRORS?
EB45 2709             (       filesys.os):00805                 BEQ     HDE                               ;YES, SKIP IT
EB47 C103             (       filesys.os):00806                 CMPB    #3                                ;TIME FOR RE-SEEK
EB49 26EB             (       filesys.os):00807                 BNE     WTRY2                             ;NO, DON'T RE-SEEK
EB4B BDF74B           (       filesys.os):00808                 JSR     HOME                              ;RECALIBRATE
EB4E 20E2             (       filesys.os):00809                 BRA     WTRY1                             ;AND RESEEK
                      (       filesys.os):00810         ;* REPORT DISK ERROR
EB50                  (       filesys.os):00811         HDE
EB50 B7DCD3           (       filesys.os):00812                 STA     >TEMP                             ;SAVE ERROR CODE
EB53 3576             (       filesys.os):00813                 PULS    A,B,X,Y,U                         ;RESTORE REGS CUZ 'U' NOT SAVED
EB55 10B3DCE7         (       filesys.os):00814                 CMPD    >WRKSEC                           ;WAS IT WORK SECTOR?
EB59 2612             (       filesys.os):00815                 BNE     HDE1                              ;NO, ITS NOT
EB5B 3402             (       filesys.os):00816                 PSHS    A                                 ;SAVE A
EB5D B6DCF3           (       filesys.os):00817                 LDA     >SDRIVE                           ;GET CURRENT DRIVE
EB60 B1DCE6           (       filesys.os):00818                 CMPA    >WRKDRV                           ;ON WORK DRIVE?
EB63 3502             (       filesys.os):00819                 PULS    A                                 ;RESTORE A
EB65 2606             (       filesys.os):00820                 BNE     HDE1                              ;NOT WORK DRIVE
EB67 BDE639           (       filesys.os):00821                 JSR     PURGE1                            ;INSURE NO WORK SECTOR IN CORE
EB6A 7FDCE5           (       filesys.os):00822                 CLR     >WRKCHG                           ;INSURE NO UPDATE RECORDED
EB6D                  (       filesys.os):00823         HDE1
EB6D BDE562           (       filesys.os):00824                 JSR     WRLIN                             ;OUTPUT STRING
EB70 4572726F72206163 (       filesys.os):00825                 FCC     'Error accessing block '
     63657373696E6720
     626C6F636B20
EB86 00               (       filesys.os):00826                 FCB     $00
EB87 BDE492           (       filesys.os):00827                 JSR     WRDEC                             ;DISPLAY BLOCK
EB8A BDE562           (       filesys.os):00828                 JSR     WRLIN                             ;OUTPUT STRING
EB8D 206F6E2064726976 (       filesys.os):00829                 FCC     ' on drive: '
     653A20
EB98 00               (       filesys.os):00830                 FCB     $00
EB99 B6DCF3           (       filesys.os):00831                 LDA     >SDRIVE                           ;GET DRIVE ID
EB9C 8B41             (       filesys.os):00832                 ADDA    #'A'                              ;OFFSET
EB9E BDE5AE           (       filesys.os):00833                 JSR     PUTCHR
EBA1 BDE59C           (       filesys.os):00834                 JSR     LFCR                              ;NEW LINE
EBA4 8EEBC1           (       filesys.os):00835                 LDX     #DETAB                            ;PT TO TABLE
EBA7                  (       filesys.os):00836         HDE2
EBA7 7ADCD3           (       filesys.os):00837                 DEC     >TEMP                             ;REDUCE ERROR COUNT
EBAA 270A             (       filesys.os):00838                 BEQ     HDE4                              ;THIS IS IT
EBAC                  (       filesys.os):00839         HDE3
EBAC A680             (       filesys.os):00840                 LDA     ,X+                               ;GET CHAR
EBAE 26FC             (       filesys.os):00841                 BNE     HDE3                              ;KEEP LOOKING
EBB0 A684             (       filesys.os):00842                 LDA     ,X                                ;MORE?
EBB2 26F3             (       filesys.os):00843                 BNE     HDE2                              ;NO, ERROR
EBB4 3001             (       filesys.os):00844                 LEAX    1,X                               ;SKIP MARKER
EBB6                  (       filesys.os):00845         HDE4
EBB6 BDE588           (       filesys.os):00846                 JSR     WRSTR                             ;OUTPUT STRING
EBB9 BDE59C           (       filesys.os):00847                 JSR     LFCR                              ;NEW LINE
EBBC 8609             (       filesys.os):00848                 LDA     #RCDSK                            ;INDICATE DISK ERROR
EBBE 7EE30C           (       filesys.os):00849                 JMP     ERRRET                            ;RETURN
                      (       filesys.os):00850         ;* DISK ERROR MESSAGES
EBC1                  (       filesys.os):00851         DETAB
EBC1 4469736B20666F72 (       filesys.os):00852                 FCC     'Disk format error'
     6D6174206572726F
     72
EBD2 00               (       filesys.os):00853                 FCB     $00
EBD3 4261642073656374 (       filesys.os):00854                 FCC     'Bad sector'
     6F72
EBDD 00               (       filesys.os):00855                 FCB     $00
EBDE 536563746F72206E (       filesys.os):00856                 FCC     'Sector not found'
     6F7420666F756E64
EBEE 00               (       filesys.os):00857                 FCB     $00
EBEF 4469736B20777269 (       filesys.os):00858                 FCC     'Disk write protected'
     74652070726F7465
     63746564
EC03 00               (       filesys.os):00859                 FCB     $00
EC04 00               (       filesys.os):00860                 FCB     0                                 ;END OF TABLE
EC05 4469736B20737973 (       filesys.os):00861                 FCC     'Disk system error'
     74656D206572726F
     72
EC16 00               (       filesys.os):00862                 FCB     $00
                      (        cubix.asm):01205                 INCLUDE command.os                        ;INTERNAL COMMANDS
                      (       command.os):00001         ;*
                      (       command.os):00002         ;* CUBIX Internal (built in) command handlers
                      (       command.os):00003         ;*
                      (       command.os):00004         ;* FORMAT COMMAND
                      (       command.os):00005         ;*
EC17                  (       command.os):00006         INIT
EC17 BDE637           (       command.os):00007                 JSR     PURGE                             ;INSURE NO DISK I/O IN PROG
EC1A BDE413           (       command.os):00008                 JSR     GETDRV                            ;GET DRIVE ID
EC1D B7DCF3           (       command.os):00009                 STA     >SDRIVE                           ;SELECT IT
EC20 BDEB1F           (       command.os):00010                 JSR     GETCTL                            ;PT 'U' TO CTRL BLOCK
EC23 CC0203           (       command.os):00011                 LDD     #$0203                            ;DEFAULT INTERLEAVE & ALLOCATION
EC26 FDDCDB           (       command.os):00012                 STD     >TEMP4                            ;SAVE IT
                      (       command.os):00013         ;* GET FORMAT OPERANDS
EC29                  (       command.os):00014         INI00
EC29 BDE4F0           (       command.os):00015                 JSR     SKIP                              ;ANY MORE OPERANDS?
EC2C 2728             (       command.os):00016                 BEQ     INI1                              ;NO, THTS ALL
EC2E 8EF46E           (       command.os):00017                 LDX     #INITAB                           ;POINT TO TABLE
EC31 BDF129           (       command.os):00018                 JSR     TLOOKE                            ;GET DATA
EC34 3404             (       command.os):00019                 PSHS    B                                 ;SAVE ID
EC36 BDE425           (       command.os):00020                 JSR     GETNUM                            ;GET VALUE
EC39 3502             (       command.os):00021                 PULS    A                                 ;RESTORE A
EC3B 4D               (       command.os):00022                 TSTA                                      ;INTERLEAVE?
EC3C 2605             (       command.os):00023                 BNE     INI01                             ;NO
EC3E F7DCDB           (       command.os):00024                 STB     >TEMP4                            ;SAVE INTERLEAVE
EC41 20E6             (       command.os):00025                 BRA     INI00                             ;TRY FOR NEXT
EC43                  (       command.os):00026         INI01
EC43 4A               (       command.os):00027                 DECA    DIRECTORY?
EC44 2605             (       command.os):00028                 BNE     INI02                             ;NO, USE STANDARD OPTIONS
EC46 F7DCDC           (       command.os):00029                 STB     >TEMP4+1                          ;SET DIRECTORY ALLOCATION
EC49 20DE             (       command.os):00030                 BRA     INI00                             ;TRY FOR NEXT
EC4B                  (       command.os):00031         INI02
EC4B 4A               (       command.os):00032                 DECA    CONVERT
EC4C 8103             (       command.os):00033                 CMPA    #3                                ;IN RANGE?
EC4E 1022F67A         (       command.os):00034                 LBHI    BADOPR                            ;NO, REPORT ERROR
EC52 E7C6             (       command.os):00035                 STB     A,U                               ;SET UP DRIVE
EC54 20D3             (       command.os):00036                 BRA     INI00                             ;TRY FOR NEXT
                      (       command.os):00037         ;* DISPLAY FORMAT
EC56                  (       command.os):00038         INI1
EC56 BDE562           (       command.os):00039                 JSR     WRLIN
EC59 466F726D61747469 (       command.os):00040                 FCC     'Formatting '
     6E6720
EC64 00               (       command.os):00041                 FCB     $00
EC65 B6DCF3           (       command.os):00042                 LDA     >SDRIVE
EC68 BDF276           (       command.os):00043                 JSR     SHODRV                            ;SHOW THE DISK
EC6B 8EF46E           (       command.os):00044                 LDX     #INITAB                           ;POINT TO TABLE
EC6E 4F               (       command.os):00045                 CLRA                                      ;DISPLAY INTERLEAVE
EC6F F6DCDB           (       command.os):00046                 LDB     >TEMP4                            ;GET INTERLEAVE FACTOR
EC72 BDF2B5           (       command.os):00047                 JSR     SHODRB                            ;DISPLAY IT
EC75 8601             (       command.os):00048                 LDA     #1                                ;DISPLAY DIRECTORY EXTENSION
EC77 F6DCDC           (       command.os):00049                 LDB     >TEMP4+1                          ;GET DIRECTORY EXTENSION
EC7A BDF2AF           (       command.os):00050                 JSR     SHODRA                            ;DISPLAY IT
EC7D BDE562           (       command.os):00051                 JSR     WRLIN                             ;MESSAGE
EC80 0A0D             (       command.os):00052                 FCB     $0A,$0D                           ;NEW LINE
EC82 4F6B3F20         (       command.os):00053                 FCC     'Ok? '
EC86 00               (       command.os):00054                 FCB     $00
EC87 BDE5EE           (       command.os):00055                 JSR     GETCHR
EC8A BDE5AE           (       command.os):00056                 JSR     PUTCHR                            ;ECHO
EC8D 84DF             (       command.os):00057                 ANDA    #$DF                              ;GET IT
EC8F 8159             (       command.os):00058                 CMPA    #'Y'
EC91 1026F907         (       command.os):00059                 LBNE    LFCR
EC95 BDE59C           (       command.os):00060                 JSR     LFCR                              ;NEW LINE
                      (       command.os):00061         ;* FORMAT PHYSICAL DISK
EC98 B6DCDB           (       command.os):00062                 LDA     >TEMP4                            ;GET INTERLEAVE FACTOR
EC9B BDF747           (       command.os):00063                 JSR     FORMAT                            ;FORMAT THE DISK
EC9E B6DCDC           (       command.os):00064                 LDA     >TEMP4+1                          ;GET DIRECTORY ALLOC
ECA1 B7DCDB           (       command.os):00065                 STA     >TEMP4                            ;LOCAL COPY OF DIR ALLOC
                      (       command.os):00066         ;* SET UP DIRECTORY & LINK TABLE ON DISK
ECA4 8EDE00           (       command.os):00067                 LDX     #WRKSPC                           ;POINT TO IT
ECA7                  (       command.os):00068         INI2
ECA7 6F80             (       command.os):00069                 CLR     ,X+                               ;CLEAR ONE
ECA9 8CE000           (       command.os):00070                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
ECAC 25F9             (       command.os):00071                 BLO     INI2                              ;NO, KEEP CLEARING
                      (       command.os):00072         ;* WRITE BASE DIRECTORY SECTOR
ECAE 8EDE00           (       command.os):00073                 LDX     #WRKSPC                           ;PT BACK TO IT
ECB1 CC0000           (       command.os):00074                 LDD     #DIRSEC                           ;DIRECTORY SECTOR
ECB4 BDEB2B           (       command.os):00075                 JSR     WDISK                             ;WRITE DIRECTORY (NO FILES)
                      (       command.os):00076         ;* WRITE NON-BASE LINK SECTORS
ECB7 BDE726           (       command.os):00077                 JSR     CURSIZ                            ;GET SIZE OF CURRENT DRIVE
ECBA 830001           (       command.os):00078                 SUBD    #1                                ;CONVERT TO HIGHEST SECTOR ID
ECBD 1F89             (       command.os):00079                 TFR     A,B                               ;COPY A&B = D/256(ENTRIES/LINKSEC)
ECBF FDDCD9           (       command.os):00080                 STD     >TEMP3                            ;SAVE FOR LATER
ECC2 CC0002           (       command.os):00081                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
ECC5 7CDCDA           (       command.os):00082                 INC     >TEMP3+1                          ;bump COUNT
ECC8 7CDCDB           (       command.os):00083                 INC     >TEMP4                            ;bump COUNT
ECCB                  (       command.os):00084         INI3
ECCB 7ADCDA           (       command.os):00085                 DEC     >TEMP3+1                          ;REDUCE COUNT
ECCE 2708             (       command.os):00086                 BEQ     INI4                              ;END
ECD0 BDEB2B           (       command.os):00087                 JSR     WDISK                             ;WRITE IT
ECD3 C30001           (       command.os):00088                 ADDD    #1                                ;NEXT SECTOR
ECD6 20F3             (       command.os):00089                 BRA     INI3                              ;KEEP GOING
                      (       command.os):00090         ;* WRITE NON-BASE DIRECTORY SECTORS
ECD8                  (       command.os):00091         INI4
ECD8 7ADCDB           (       command.os):00092                 DEC     >TEMP4                            ;BACKUP
ECDB 2708             (       command.os):00093                 BEQ     INI5                              ;THATS ALL
ECDD BDEB2B           (       command.os):00094                 JSR     WDISK                             ;WRITE IT
ECE0 C30001           (       command.os):00095                 ADDD    #1                                ;NEXT ONE
ECE3 20F3             (       command.os):00096                 BRA     INI4                              ;DO EM ALL
                      (       command.os):00097         ;* WRITE BASE LINK SECTOR
ECE5                  (       command.os):00098         INI5
ECE5 CCFFFF           (       command.os):00099                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ECE8 ED84             (       command.os):00100                 STD     DIRSEC*2,X                        ;SET DIRECTORY FREE
ECEA 3002             (       command.os):00101                 LEAX    LNKSEC*2,X                        ;OFFSET TO IT
ECEC 108E01FE         (       command.os):00102                 LDY     #$0200-LNKSEC*2
ECF0 CC0002           (       command.os):00103                 LDD     #LNKSEC+1                         ;POINT TO LINK SECTOR
ECF3 7CDCD9           (       command.os):00104                 INC     >TEMP3                            ;INC COUNT to adjust loop
ECF6                  (       command.os):00105         INI6
ECF6 7ADCD9           (       command.os):00106                 DEC     >TEMP3                            ;REDUCE COUNT
ECF9 270B             (       command.os):00107                 BEQ     INI7                              ;END
ECFB ED81             (       command.os):00108                 STD     ,X++                              ;WRITE IT OUT
ECFD 313F             (       command.os):00109                 DEY
ECFF 313F             (       command.os):00110                 DEY
ED01 C30001           (       command.os):00111                 ADDD    #1                                ;ADVANCE
ED04 20F0             (       command.os):00112                 BRA     INI6                              ;DO EM ALL
ED06                  (       command.os):00113         INI7
ED06 3406             (       command.os):00114                 PSHS    A,B                               ;SAVE SECTOR ID
ED08 7DDCDC           (       command.os):00115                 TST     >TEMP4+1                          ;ANY ADDITIONAL DIR?
ED0B 2703             (       command.os):00116                 BEQ     INI8                              ;NO
ED0D FDDE00           (       command.os):00117                 STD     >2*DIRSEC+WRKSPC                  ;SET IT
ED10                  (       command.os):00118         INI8
ED10 CCFFFF           (       command.os):00119                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ED13 ED81             (       command.os):00120                 STD     ,X++                              ;CLOSE OFF LINKS
ED15 313F             (       command.os):00121                 DEY
ED17 313F             (       command.os):00122                 DEY
ED19 CC0001           (       command.os):00123                 LDD     #LNKSEC
ED1C FDDCD9           (       command.os):00124                 STD     >TEMP3
ED1F 3506             (       command.os):00125                 PULS    A,B                               ;RESTORE SECTOR ID
ED21 7CDCDC           (       command.os):00126                 INC     >TEMP4+1                          ;BUMP COUNT
ED24                  (       command.os):00127         INI9
                      (       command.os):00128         ; if we have crossed the sector boundry, it is important to write the sector, reset x, and continue . . .
ED24 108C0000         (       command.os):00129                 CMPY    #0
ED28 2602             (       command.os):00130                 BNE     INI9A
ED2A 8D1E             (       command.os):00131                 BSR     INI11
ED2C                  (       command.os):00132         INI9A:
ED2C 7ADCDC           (       command.os):00133                 DEC     >TEMP4+1                          ;REDUCE COUNT
ED2F 270B             (       command.os):00134                 BEQ     INI10                             ;EXIT
ED31 C30001           (       command.os):00135                 ADDD    #1                                ;NEXT SECTOR
ED34 ED81             (       command.os):00136                 STD     ,X++                              ;SET LINK FOR DIRECTORY
ED36 313F             (       command.os):00137                 DEY
ED38 313F             (       command.os):00138                 DEY
ED3A 20E8             (       command.os):00139                 BRA     INI9                              ;DO EM ALL
ED3C                  (       command.os):00140         INI10
ED3C CCFFFF           (       command.os):00141                 LDD     #$FFFF                            ;END OF CHAIN INDICATOR
ED3F ED1E             (       command.os):00142                 STD     -2,X                              ;CLOSE OFF DIRECTORY
ED41 8EDE00           (       command.os):00143                 LDX     #WRKSPC                           ;RESET
ED44 FCDCD9           (       command.os):00144                 LDD     >TEMP3                            ;PT TO IT
ED47 7EEB2B           (       command.os):00145                 JMP     WDISK                             ;WRITE TO DISK
ED4A                  (       command.os):00146         INI11:
ED4A 3406             (       command.os):00147                 PSHS    d
ED4C 8EDE00           (       command.os):00148                 LDX     #WRKSPC
ED4F FCDCD9           (       command.os):00149                 LDD     >TEMP3                            ;PT TO IT
ED52 BDEB2B           (       command.os):00150                 JSR     WDISK                             ;WRITE TO DISK
                      (       command.os):00151         ;
ED55 108E0200         (       command.os):00152                 LDY     #$0200
                      (       command.os):00153         !
ED59 4F               (       command.os):00154                 CLRA
ED5A A780             (       command.os):00155                 STA     ,x+
ED5C 313F             (       command.os):00156                 DEY
ED5E 26F9             (       command.os):00157                 BNE     <
                      (       command.os):00158         ;
ED60 7CDCDA           (       command.os):00159                 INC     >TEMP3+1
ED63 8EDE00           (       command.os):00160                 LDX     #WRKSPC
ED66 108E0200         (       command.os):00161                 LDY     #$0200
ED6A 3506             (       command.os):00162                 PULS    D
ED6C 39               (       command.os):00163                 RTS
                      (       command.os):00164         ;*
                      (       command.os):00165         ;* READ DISK COMMAND
                      (       command.os):00166         ;*
ED6D                  (       command.os):00167         CREAD
ED6D BDE413           (       command.os):00168                 JSR     GETDRV
ED70 B7DCF3           (       command.os):00169                 STA     >SDRIVE
ED73 BDE425           (       command.os):00170                 JSR     GETNUM                            ;GET SECTOR ID
ED76 3410             (       command.os):00171                 PSHS    X                                 ;SAVE
ED78 BDE430           (       command.os):00172                 JSR     GETHEX                            ;GET MEMORY ADDRESS
ED7B 3410             (       command.os):00173                 PSHS    X                                 ;SAVE
ED7D 8E0001           (       command.os):00174                 LDX     #1                                ;DEFAULT TO ONE
ED80 BDE4F0           (       command.os):00175                 JSR     SKIP                              ;ADVANCE
ED83 2703             (       command.os):00176                 BEQ     CRD1                              ;NO MORE
ED85 BDE425           (       command.os):00177                 JSR     GETNUM                            ;GET # SECTORS
ED88                  (       command.os):00178         CRD1
ED88 1F12             (       command.os):00179                 TFR     X,Y                               ;SET UP COUNTER
ED8A 3510             (       command.os):00180                 PULS    X                                 ;RESTORE MEM ADDR
ED8C 3506             (       command.os):00181                 PULS    A,B                               ;RESTORE SECTOR ID
ED8E                  (       command.os):00182         CRD2
ED8E BDEAF8           (       command.os):00183                 JSR     RDISK                             ;READ IT
ED91 30890200         (       command.os):00184                 LEAX    512,X                             ;NEXT LOCATION
ED95 C30001           (       command.os):00185                 ADDD    #1                                ;NEXT SECTOR
ED98 313F             (       command.os):00186                 LEAY    -1,Y                              ;REDUCE COUNT
ED9A 26F2             (       command.os):00187                 BNE     CRD2
ED9C 39               (       command.os):00188                 RTS
                      (       command.os):00189         ;*
                      (       command.os):00190         ;* WRITE DISK COMMAND
                      (       command.os):00191         ;*
ED9D                  (       command.os):00192         CWRITE
ED9D BDE413           (       command.os):00193                 JSR     GETDRV
EDA0 B7DCF3           (       command.os):00194                 STA     >SDRIVE
EDA3 BDE425           (       command.os):00195                 JSR     GETNUM                            ;GET SECTOR ID
EDA6 3410             (       command.os):00196                 PSHS    X                                 ;SAVE
EDA8 BDE430           (       command.os):00197                 JSR     GETHEX                            ;GET MEMORY ADDRESS
EDAB 3410             (       command.os):00198                 PSHS    X                                 ;SAVE
EDAD 8E0001           (       command.os):00199                 LDX     #1                                ;DEFAULT TO ONE
EDB0 BDE4F0           (       command.os):00200                 JSR     SKIP                              ;ADVANCE
EDB3 2703             (       command.os):00201                 BEQ     CWR1                              ;NO MORE
EDB5 BDE425           (       command.os):00202                 JSR     GETNUM                            ;GET # SECTORS
EDB8                  (       command.os):00203         CWR1
EDB8 1F12             (       command.os):00204                 TFR     X,Y                               ;SET UP COUNTER
EDBA 3510             (       command.os):00205                 PULS    X                                 ;RESTORE MEM ADDR
EDBC 3506             (       command.os):00206                 PULS    A,B                               ;RESTORE SECTOR ID
EDBE                  (       command.os):00207         CWR2
EDBE BDEB2B           (       command.os):00208                 JSR     WDISK                             ;WRITE IT
EDC1 30890200         (       command.os):00209                 LEAX    512,X                             ;NEXT LOCATION
EDC5 C30001           (       command.os):00210                 ADDD    #1                                ;NEXT SECTOR
EDC8 313F             (       command.os):00211                 LEAY    -1,Y                              ;REDUCE COUNT
EDCA 26F2             (       command.os):00212                 BNE     CWR2
EDCC 39               (       command.os):00213                 RTS
                      (       command.os):00214         ;*
                      (       command.os):00215         ;* 'FILES' COMMAND, DISPLAY DISK DIRECTORY
                      (       command.os):00216         ;*
EDCD                  (       command.os):00217         FILES
EDCD 8EDCC0           (       command.os):00218                 LDX     #PREFIX                           ;POINT TO FILENAME
EDD0 C613             (       command.os):00219                 LDB     #19                               ;CLEAR 19 CHARS
EDD2                  (       command.os):00220         FIL1
EDD2 6F80             (       command.os):00221                 CLR     ,X+
EDD4 5A               (       command.os):00222                 DECB
EDD5 26FB             (       command.os):00223                 BNE     FIL1
EDD7 862A             (       command.os):00224                 LDA     #'*'                              ;WILDCARD
EDD9 B7DCC8           (       command.os):00225                 STA     >PREFIX+8
EDDC B7DCD0           (       command.os):00226                 STA     >PREFIX+16
EDDF 3420             (       command.os):00227                 PSHS    Y                                 ;SAVE CMD PTR
EDE1 BDE3C4           (       command.os):00228                 JSR     GETDIR                            ;GET DIRECTORY NAME
EDE4 BDE4FD           (       command.os):00229                 JSR     TSTERM                            ;ANY MORE?
EDE7 3520             (       command.os):00230                 PULS    Y                                 ;RESTORE Y
EDE9 2703             (       command.os):00231                 BEQ     FIL2                              ;NO, DISPAY
EDEB BDE38B           (       command.os):00232                 JSR     GETNAM                            ;GET FULL FILE PATTERN
EDEE                  (       command.os):00233         FIL2
EDEE 7EE6CA           (       command.os):00234                 JMP     DISDIR                            ;OUTPUT IT
                      (       command.os):00235         ;*
                      (       command.os):00236         ;* 'CREATE' COMMAND, CREATE A FILE
                      (       command.os):00237         ;*
EDF1                  (       command.os):00238         CREFIL
EDF1 FCE002           (       command.os):00239                 LDD     >MBASE                            ;DEFAULT LOAD ADDRESS
EDF4 FDDCDB           (       command.os):00240                 STD     >TEMP4                            ;SAVE IT
EDF7 BDE384           (       command.os):00241                 JSR     GETVAL                            ;GET FILENAME
EDFA BDE4F0           (       command.os):00242                 JSR     SKIP                              ;MORE OPERANDS?
EDFD 2706             (       command.os):00243                 BEQ     CREF1                             ;NO, SKIP IT
EDFF BDE430           (       command.os):00244                 JSR     GETHEX                            ;GET VALUE
EE02 BFDCDB           (       command.os):00245                 STX     >TEMP4                            ;SAVE IT
EE05                  (       command.os):00246         CREF1
EE05 7EE73D           (       command.os):00247                 JMP     CREATE                            ;MAKE THE FILE
                      (       command.os):00248         ;*
                      (       command.os):00249         ;* 'DELETE' COMMAND
                      (       command.os):00250         ;*
EE08                  (       command.os):00251         DELFIL
EE08 BDE38B           (       command.os):00252                 JSR     GETNAM                            ;GET FILENAME
EE0B                  (       command.os):00253         DELETE
EE0B BDE66D           (       command.os):00254                 JSR     LOCERR                            ;LOOK IT UP
EE0E BDE370           (       command.os):00255                 JSR     VALID                             ;VALID AS A SINGLE?
EE11 262C             (       command.os):00256                 BNE     MULDEL                            ;NO.
EE13 A68817           (       command.os):00257                 LDA     DATTR,X                           ;GET ATTRIBUTES
EE16 8510             (       command.os):00258                 BITA    #DPERM                            ;CAN WE DELETE
EE18 1027FAAA         (       command.os):00259                 LBEQ    PROERR                            ;NO, REPORT ERROR
EE1C 6F84             (       command.os):00260                 CLR     ,X                                ;INDICATE THIS ENTRY FREE
EE1E BDE7BA           (       command.os):00261                 JSR     CHGWRK                            ;MARK IT AS CHANGED
EE21 EC8813           (       command.os):00262                 LDD     DDADR,X                           ;GET DISK ADDRESS
                      (       command.os):00263         ;* RELEASE ALL CAHINED SECTORS
EE24                  (       command.os):00264         UNCHAIN
EE24 BDE5F3           (       command.os):00265                 JSR     FNDLNK                            ;LOCATE ITS LINK
EE27 270F             (       command.os):00266                 BEQ     UNC1                              ;LAST ONE
EE29 10830000         (       command.os):00267                 CMPD    #0                                ;DID WE GET LOOSE SOMEHOW
EE2D 2709             (       command.os):00268                 BEQ     UNC1                              ;STOP
EE2F 6F84             (       command.os):00269                 CLR     ,X                                ;ZERO THE ENTRY...
EE31 6F01             (       command.os):00270                 CLR     1,X                               ;MAKEING IT FREE
EE33 BDE7BA           (       command.os):00271                 JSR     CHGWRK                            ;INDICATE WE CHANGED
EE36 20EC             (       command.os):00272                 BRA     UNCHAIN                           ;CONTINUE
EE38                  (       command.os):00273         UNC1
EE38 6F84             (       command.os):00274                 CLR     ,X
EE3A 6F01             (       command.os):00275                 CLR     1,X
EE3C 7EE7BA           (       command.os):00276                 JMP     CHGWRK                            ;END OF DELETE
                      (       command.os):00277         ;* FILENAME CONTAINED WILDCARDS, PROMPT FOR EACH FILE
EE3F                  (       command.os):00278         MULDEL
EE3F CC0000           (       command.os):00279                 LDD     #DIRSEC                           ;DIRECTORY STARTS HERE
EE42                  (       command.os):00280         MULD1
EE42 BDE610           (       command.os):00281                 JSR     RDWRK                             ;READ WORK SECTOR
EE45                  (       command.os):00282         MULD2
EE45 BDE337           (       command.os):00283                 JSR     COMNAM                            ;IS THIS ONE?
EE48 2654             (       command.os):00284                 BNE     MULD3                             ;NO
EE4A BDE6FE           (       command.os):00285                 JSR     SHONAM                            ;DISPLAY
EE4D A68817           (       command.os):00286                 LDA     DATTR,X                           ;GET ATTRIBUTES
EE50 8510             (       command.os):00287                 BITA    #DPERM                            ;CAN WE DELETE
EE52 2610             (       command.os):00288                 BNE     MULD5                             ;YES WE CAN
EE54 BDE592           (       command.os):00289                 JSR     WRMSG                             ;OUTPUT MESSAGE
EE57 2050726F74656374 (       command.os):00290                 FCC     ' Protected'
     6564
EE61 00               (       command.os):00291                 FCB     $00
EE62 203A             (       command.os):00292                 BRA     MULD3
EE64                  (       command.os):00293         MULD5
EE64 BDE562           (       command.os):00294                 JSR     WRLIN                             ;OUTPUT MESSAGE
EE67 2028592F4E2F5129 (       command.os):00295                 FCC     ' (Y/N/Q)?'
     3F
EE70 00               (       command.os):00296                 FCB     $00
EE71 BDE5EE           (       command.os):00297                 JSR     GETCHR                            ;GET CHAR
EE74 BDE5AE           (       command.os):00298                 JSR     PUTCHR                            ;ECHO
EE77 BDE59C           (       command.os):00299                 JSR     LFCR                              ;NEW LINE
EE7A 84DF             (       command.os):00300                 ANDA    #$DF                              ;CONVERT TO UPPER
EE7C 8151             (       command.os):00301                 CMPA    #'Q'                              ;QUIT?
EE7E 272E             (       command.os):00302                 BEQ     MULD4
EE80 8159             (       command.os):00303                 CMPA    #'Y'                              ;DO WE KILL?
EE82 261A             (       command.os):00304                 BNE     MULD3                             ;NO
EE84 6F84             (       command.os):00305                 CLR     ,X                                ;ZAP IT
EE86 BDE7BA           (       command.os):00306                 JSR     CHGWRK                            ;INDICATE CHANGED
EE89 3414             (       command.os):00307                 PSHS    B,X                               ;SAVE REGS
EE8B FCDCE7           (       command.os):00308                 LDD     >WRKSEC                           ;GET WORK SECTOR
EE8E FDDCD5           (       command.os):00309                 STD     >TEMP1                            ;SAVE
EE91 EC8813           (       command.os):00310                 LDD     DDADR,X                           ;GET DISK ADDRESS
EE94 8D8E             (       command.os):00311                 BSR     UNCHAIN                           ;RELEASE
EE96 FCDCD5           (       command.os):00312                 LDD     >TEMP1                            ;GET SECTOR BACK
EE99 BDE610           (       command.os):00313                 JSR     RDWRK                             ;RE-READ
EE9C 3514             (       command.os):00314                 PULS    B,X
EE9E                  (       command.os):00315         MULD3
EE9E 308820           (       command.os):00316                 LEAX    32,X                              ;ADVANCE TO NEXT
EEA1 8CE000           (       command.os):00317                 CMPX    #WRKSPC+512                       ;ARE WE OVER?
EEA4 259F             (       command.os):00318                 BLO     MULD2                             ;NO
EEA6 FCDCE7           (       command.os):00319                 LDD     >WRKSEC                           ;GET SECTOR ID
EEA9 BDE5F3           (       command.os):00320                 JSR     FNDLNK                            ;LOOK FOR LINK
EEAC 2694             (       command.os):00321                 BNE     MULD1
EEAE                  (       command.os):00322         MULD4
EEAE 39               (       command.os):00323                 RTS
                      (       command.os):00324         ;*
                      (       command.os):00325         ;* BINARY LOAD A FILE AT MEMORY(X)
                      (       command.os):00326         ;*
EEAF                  (       command.os):00327         BLOAD
EEAF 3410             (       command.os):00328                 PSHS    X                                 ;SAVE ADDRESS
EEB1 BDE8BC           (       command.os):00329                 JSR     LOCRED                            ;LOOKUP FILE
EEB4 EC8813           (       command.os):00330                 LDD     DDADR,X                           ;GET DISK ADDRESS
EEB7 3510             (       command.os):00331                 PULS    X                                 ;RESTORE MEMORY ADDRESS
EEB9 2018             (       command.os):00332                 BRA     LCHAIN                            ;LOAD IN THE CHAIN
                      (       command.os):00333         ;*
                      (       command.os):00334         ;* 'LOAD' COMMAND, LOADS A FILE INTO MEMORY
                      (       command.os):00335         ;*
EEBB                  (       command.os):00336         LODFIL
EEBB BDE384           (       command.os):00337                 JSR     GETVAL                            ;GET FILENAME
EEBE BDE8BC           (       command.os):00338                 JSR     LOCRED                            ;INSURE IT EXISTS
EEC1 EC8813           (       command.os):00339                 LDD     DDADR,X                           ;GET DISK ADDRESS
EEC4 3406             (       command.os):00340                 PSHS    A,B                               ;SAVE
EEC6 AE8815           (       command.os):00341                 LDX     DRADR,X                           ;GET RUN ADDRESS
EEC9 BDE4F0           (       command.os):00342                 JSR     SKIP                              ;ANY MORE OPERANDS
EECC 2703             (       command.os):00343                 BEQ     LODF1                             ;NO, CONTINUE
EECE BDE430           (       command.os):00344                 JSR     GETHEX                            ;GET ADDRESS
EED1                  (       command.os):00345         LODF1
EED1 3506             (       command.os):00346                 PULS    A,B                               ;RESTORE DISK ADDR
                      (       command.os):00347         ;* LOAD A CHAIN OF SECTORS
EED3                  (       command.os):00348         LCHAIN
EED3 BDEAF8           (       command.os):00349                 JSR     RDISK                             ;READ DISK
EED6 30890200         (       command.os):00350                 LEAX    512,X                             ;MOVE TO NEXT ADDRESS
EEDA 3410             (       command.os):00351                 PSHS    X                                 ;SAVE PTR
EEDC BDE5F3           (       command.os):00352                 JSR     FNDLNK                            ;LOOKUP LINK
EEDF 3510             (       command.os):00353                 PULS    X                                 ;RESTORE
EEE1 26F0             (       command.os):00354                 BNE     LCHAIN                            ;KEEP GOING
EEE3                  (       command.os):00355         OKRET
EEE3 39               (       command.os):00356                 RTS
                      (       command.os):00357         ;*
                      (       command.os):00358         ;* BINARY SAVE OF A FILE FROM MEMORY(X) FOR # SECTORS(D)
                      (       command.os):00359         ;*
EEE4                  (       command.os):00360         BSAVE
EEE4 BFDCDB           (       command.os):00361                 STX     >TEMP4                            ;SET LOAD ADDRESS
EEE7 FDDCD9           (       command.os):00362                 STD     >TEMP3                            ;SAVE # SECTORS
EEEA 200F             (       command.os):00363                 BRA     SAVF1                             ;PERFORM SAVE
                      (       command.os):00364         ;*
                      (       command.os):00365         ;* 'SAVE' COMMAND, SAVES A FILE AS A BLOCK
                      (       command.os):00366         ;*
EEEC                  (       command.os):00367         SAVFIL
EEEC BDE384           (       command.os):00368                 JSR     GETVAL                            ;GET FILENAME
EEEF BDE430           (       command.os):00369                 JSR     GETHEX                            ;GET START ADDRESS
EEF2 BFDCDB           (       command.os):00370                 STX     >TEMP4                            ;SET UP DEFAULT LOAD-ADR
EEF5 BDE425           (       command.os):00371                 JSR     GETNUM                            ;GET # SECTORS
EEF8 BFDCD9           (       command.os):00372                 STX     >TEMP3                            ;SAVE LENGTH
EEFB                  (       command.os):00373         SAVF1
EEFB 7DDCDA           (       command.os):00374                 TST     >TEMP3+1                          ;TEST FOR INVALID LENMGTH
EEFE 1027F3CA         (       command.os):00375                 LBEQ    BADOPR                            ;INVALID
EF02 BDE8EA           (       command.os):00376                 JSR     LOCWRI                            ;OPEN FILE, WE WILL WRITE IT
EF05 EC8813           (       command.os):00377                 LDD     DDADR,X                           ;GET DISK ADDRESS
EF08                  (       command.os):00378         SAVF2
EF08 FDDCD7           (       command.os):00379                 STD     >TEMP2                            ;SAVE SECTOR ID
EF0B BEDCDB           (       command.os):00380                 LDX     >TEMP4                            ;GET LOAD ADDRESS
EF0E BDEB2B           (       command.os):00381                 JSR     WDISK                             ;WRITE THE SECTOR
                      (       command.os):00382         
EF11 30890200         (       command.os):00383                 LEAX    512,X                             ;ADVANCE 1 BLOCK
EF15 BFDCDB           (       command.os):00384                 STX     >TEMP4                            ;NEW LOAD ADDRESS
EF18 FCDCD7           (       command.os):00385                 LDD     >TEMP2                            ;GET OPEN SECTOR
EF1B 7ADCDA           (       command.os):00386                 DEC     >TEMP3+1                          ;REDUCE NUMBER
EF1E 2719             (       command.os):00387                 BEQ     SAVF3                             ;QUIT IF DONE
EF20 BDE5F3           (       command.os):00388                 JSR     FNDLNK                            ;LOOK UP ITS LINK
EF23 26E3             (       command.os):00389                 BNE     SAVF2                             ;THERE IS SPACE, ITS OK
EF25 BDE7C3           (       command.os):00390                 JSR     FRESEC                            ;GET A FREE SECTOR
EF28 3406             (       command.os):00391                 PSHS    A,B                               ;SAVE ID
EF2A FCDCD7           (       command.os):00392                 LDD     >TEMP2                            ;GET OPEN SECTOR
EF2D BDE5F3           (       command.os):00393                 JSR     FNDLNK                            ;GET LINK BACK
EF30 3506             (       command.os):00394                 PULS    A,B                               ;GET NEW SECT BACK
EF32 ED84             (       command.os):00395                 STD     ,X                                ;SET LINK CHAIN
EF34 BDE7BA           (       command.os):00396                 JSR     CHGWRK                            ;INDICATE CHANGED
EF37 20CF             (       command.os):00397                 BRA     SAVF2                             ;WRITE NEXT SECTOR
EF39                  (       command.os):00398         SAVF3
EF39 BDE5F3           (       command.os):00399                 JSR     FNDLNK                            ;LOK UP LINK
EF3C 27A5             (       command.os):00400                 BEQ     OKRET                             ;NO FURTHER LINKS
EF3E 3406             (       command.os):00401                 PSHS    A,B                               ;SAVE REGS
EF40 CCFFFF           (       command.os):00402                 LDD     #$FFFF                            ;GET END OF FILE MARKER
EF43 ED84             (       command.os):00403                 STD     ,X                                ;MARK SECTOR
EF45 B7DCE5           (       command.os):00404                 STA     >WRKCHG                           ;INDICATE CHANGED
EF48 3506             (       command.os):00405                 PULS    A,B                               ;GET CHAINED SECTOR BACK
EF4A 7EEE24           (       command.os):00406                 JMP     UNCHAIN                           ;SET IT FREE
                      (       command.os):00407         ;*
                      (       command.os):00408         ;* 'RETURN' COMMAND
                      (       command.os):00409         ;*
EF4D                  (       command.os):00410         RETURN
EF4D FCDCF1           (       command.os):00411                 LDD     >OLDSTK                           ;GET OLD STACK
EF50 2704             (       command.os):00412                 BEQ     NOSUSP                            ;NONE, SKIP IT
EF52 1F04             (       command.os):00413                 TFR     D,S                               ;SET UP STACK
EF54 4F               (       command.os):00414                 CLRA                                      ;ZERO IT
EF55 39               (       command.os):00415                 RTS
EF56                  (       command.os):00416         NOSUSP
EF56 BDE592           (       command.os):00417                 JSR     WRMSG                             ;OUTPUT MESSAGE
EF59 4E6F207375737065 (       command.os):00418                 FCC     'No suspended program'
     6E6465642070726F
     6772616D
EF6D 00               (       command.os):00419                 FCB     $00
EF6E 10FEDCE3         (       command.os):00420                 LDS     >SAVSTK                           ;RESTORE STACK
EF72                  (       command.os):00421         DNLRTS
EF72 4F               (       command.os):00422                 CLRA                                      ;ZERO RC
EF73 39               (       command.os):00423                 RTS
                      (       command.os):00424         ;*
                      (       command.os):00425         ;* 'DOWNLOAD' COMMAND
                      (       command.os):00426         ;*
EF74                  (       command.os):00427         DNLD
EF74 BDF162           (       command.os):00428                 JSR     GETDEV                            ;GET DEVICE ID
EF77 F7DCD7           (       command.os):00429                 STB     >TEMP2                            ;SAVE IT
EF7A 7FDCDA           (       command.os):00430                 CLR     >TEMP3+1                          ;ZERO COUNT
EF7D CCFFFF           (       command.os):00431                 LDD     #$FFFF                            ;INIT LOW ADDR
EF80 FDDCDB           (       command.os):00432                 STD     >TEMP4                            ;SAVE LOW ADDRESS
EF83 4F               (       command.os):00433                 CLRA
EF84 5F               (       command.os):00434                 CLRB
EF85 3406             (       command.os):00435                 PSHS    A,B                               ;SAVE HIGH ADDR
EF87                  (       command.os):00436         DNL0
EF87 860D             (       command.os):00437                 LDA     #$0D
EF89 BDE5AE           (       command.os):00438                 JSR     PUTCHR                            ;OUTPUT
EF8C B6DCDA           (       command.os):00439                 LDA     >TEMP3+1
EF8F BDE56E           (       command.os):00440                 JSR     WRHEX                             ;OUTPUT IN HEX
EF92 7CDCDA           (       command.os):00441                 INC     >TEMP3+1
EF95 8D28             (       command.os):00442                 BSR     DNL1                              ;DOWNLOAD RECORD
EF97 2608             (       command.os):00443                 BNE     DNLEND                            ;END, QUIT
EF99 ACE4             (       command.os):00444                 CMPX    ,S                                ;HIGEST YET?
EF9B 23EA             (       command.os):00445                 BLS     DNL0                              ;NO, SKIP
EF9D AFE4             (       command.os):00446                 STX     ,S                                ;SAVE HIGH
EF9F 20E6             (       command.os):00447                 BRA     DNL0                              ;OK, KEEP GOING
EFA1                  (       command.os):00448         DNLEND
EFA1 BDE59C           (       command.os):00449                 JSR     LFCR                              ;NEW LINE
EFA4 3506             (       command.os):00450                 PULS    A,B                               ;GET HIGEST
EFA6 B3DCDB           (       command.os):00451                 SUBD    >TEMP4                            ;CALCULATE SIZE
EFA9 830001           (       command.os):00452                 SUBD    #1                                ;CONVERT
EFAC 44               (       command.os):00453                 LSRA                                      ;/512, CONVERT TO # SECTORS
EFAD 4C               (       command.os):00454                 INCA    CONVERT
EFAE B7DCDA           (       command.os):00455                 STA     >TEMP3+1                          ;SAVE LENGTH
EFB1 BDE4F0           (       command.os):00456                 JSR     SKIP                              ;OPERAND?
EFB4 27BC             (       command.os):00457                 BEQ     DNLRTS                            ;NO FILE TO SAVE INTO
EFB6 BDE384           (       command.os):00458                 JSR     GETVAL                            ;GET FILENAME
EFB9 7EEEFB           (       command.os):00459                 JMP     SAVF1                             ;PERFORM SAVE
                      (       command.os):00460         ;* DOWNLOAD A RECORD FROM A DEVICE
EFBC                  (       command.os):00461         DNLDEV
EFBC B7DCD7           (       command.os):00462                 STA     >TEMP2                            ;SAVE DEVICE ID
EFBF                  (       command.os):00463         DNL1
EFBF 8D5B             (       command.os):00464                 BSR     RDDLC                             ;GET CHAR
EFC1 8153             (       command.os):00465                 CMPA    #'S'                              ;START OF RECORD?
EFC3 26FA             (       command.os):00466                 BNE     DNL1                              ;NO
EFC5 8D55             (       command.os):00467                 BSR     RDDLC                             ;GET NEXT CHAR
EFC7 8130             (       command.os):00468                 CMPA    #'0'                              ;HEADER?
EFC9 27F4             (       command.os):00469                 BEQ     DNL1                              ;IGNORE
EFCB 8139             (       command.os):00470                 CMPA    #'9'                              ;END OF FILE
EFCD 2603             (       command.os):00471                 BNE     DNL2                              ;YES, END OF FILE
EFCF 8606             (       command.os):00472                 LDA     #RCEOF
EFD1 39               (       command.os):00473                 RTS
EFD2                  (       command.os):00474         DNL2
EFD2 8131             (       command.os):00475                 CMPA    #'1'                              ;DATA RECORD
EFD4 263E             (       command.os):00476                 BNE     LODERR                            ;INVALID
EFD6 8D4A             (       command.os):00477                 BSR     GETBYT                            ;GET LENGTH
EFD8 B7DCD8           (       command.os):00478                 STA     >TEMP2+1                          ;START CKSUM
EFDB 8003             (       command.os):00479                 SUBA    #3                                ;CONVERT
EFDD B7DCD9           (       command.os):00480                 STA     >TEMP3                            ;SAVE LENGTH
EFE0 8D40             (       command.os):00481                 BSR     GETBYT                            ;GET HIGH ADDR
EFE2 3402             (       command.os):00482                 PSHS    A                                 ;SAVE
EFE4 8D3C             (       command.os):00483                 BSR     GETBYT                            ;GET LOW ADDR
EFE6 1F89             (       command.os):00484                 TFR     A,B                               ;SAVE
EFE8 ABE4             (       command.os):00485                 ADDA    ,S                                ;ADD HIGH
EFEA BBDCD8           (       command.os):00486                 ADDA    >TEMP2+1                          ;& CKSUM
EFED B7DCD8           (       command.os):00487                 STA     >TEMP2+1                          ;RESAVE
EFF0 3502             (       command.os):00488                 PULS    A                                 ;RESTORE
EFF2 1F01             (       command.os):00489                 TFR     D,X                               ;SET UP PTR
EFF4 10B3DCDB         (       command.os):00490                 CMPD    >TEMP4                            ;HIGHER?
EFF8 2403             (       command.os):00491                 BHS     DNL3                              ;YES
EFFA FDDCDB           (       command.os):00492                 STD     >TEMP4                            ;NEW VALUE
EFFD                  (       command.os):00493         DNL3
EFFD 8D23             (       command.os):00494                 BSR     GETBYT                            ;GET BYTE
EFFF A780             (       command.os):00495                 STA     ,X+                               ;SAVE IT
F001 BBDCD8           (       command.os):00496                 ADDA    >TEMP2+1                          ;INCL CKSUM
F004 B7DCD8           (       command.os):00497                 STA     >TEMP2+1                          ;RESAVE CKSUM
F007 7ADCD9           (       command.os):00498                 DEC     >TEMP3                            ;REDUCE LENGTH
F00A 26F1             (       command.os):00499                 BNE     DNL3                              ;GET FULL REC.
F00C 8D14             (       command.os):00500                 BSR     GETBYT                            ;GET CKSUM
F00E BBDCD8           (       command.os):00501                 ADDA    >TEMP2+1                          ;+ CALC CKSUM
F011 4C               (       command.os):00502                 INCA    TEST FOR OK
F012 271A             (       command.os):00503                 BEQ     DNL4                              ;YES, GET NEXT REC
F014                  (       command.os):00504         LODERR
F014 8EF841           (       command.os):00505                 LDX     #DNLMSG                           ;PT TO ERROR MESSAGE
F017 860B             (       command.os):00506                 LDA     #RCDNL                            ;RETURN CODE
F019 7EE2D1           (       command.os):00507                 JMP     ERRMRC                            ;RETURN
F01C                  (       command.os):00508         RDDLC
F01C F6DCD7           (       command.os):00509                 LDB     >TEMP2                            ;GET DEV
F01F 7EE5D0           (       command.os):00510                 JMP     RDDEV                             ;GET CHAR
F022                  (       command.os):00511         GETBYT
F022 8D0B             (       command.os):00512                 BSR     GETNIB                            ;GET IT
F024 48               (       command.os):00513                 LSLA
F025 48               (       command.os):00514                 LSLA
F026 48               (       command.os):00515                 LSLA
F027 48               (       command.os):00516                 LSLA
F028 3402             (       command.os):00517                 PSHS    A
F02A 8D03             (       command.os):00518                 BSR     GETNIB
F02C AAE0             (       command.os):00519                 ORA     ,S+
F02E                  (       command.os):00520         DNL4
F02E 39               (       command.os):00521                 RTS
F02F                  (       command.os):00522         GETNIB
F02F 8DEB             (       command.os):00523                 BSR     RDDLC                             ;GET CHAR
F031 8030             (       command.os):00524                 SUBA    #'0'                              ;CONVERT
F033 8109             (       command.os):00525                 CMPA    #9                                ;OK?
F035 230A             (       command.os):00526                 BLS     GETN1                             ;YES
F037 8111             (       command.os):00527                 CMPA    #$11                              ;<A
F039 25D9             (       command.os):00528                 BLO     LODERR                            ;INVALID
F03B 8007             (       command.os):00529                 SUBA    #7                                ;CONVERT
F03D 8110             (       command.os):00530                 CMPA    #$10                              ;IN RANGE
F03F 24D3             (       command.os):00531                 BHS     LODERR                            ;INVALID
F041                  (       command.os):00532         GETN1
F041 39               (       command.os):00533                 RTS
                      (       command.os):00534         ;*
                      (       command.os):00535         ;* 'CONNECT' COMMAND
                      (       command.os):00536         ;*
F042                  (       command.os):00537         CNCT
F042 BDF162           (       command.os):00538                 JSR     GETDEV                            ;GET DEVICE
F045 F7DCD7           (       command.os):00539                 STB     >TEMP2                            ;SAVE
F048                  (       command.os):00540         CNC1
F048 BDE5E7           (       command.os):00541                 JSR     TSTCHR                            ;TEST FOR CHAR FROM CONSOLE
F04B 260C             (       command.os):00542                 BNE     CNC2                              ;NO, NONE
F04D 811B             (       command.os):00543                 CMPA    #$1B                              ;ESCAPE?
F04F 1027F549         (       command.os):00544                 LBEQ    LFCR                              ;IF SO, EXIT
F053 F6DCD7           (       command.os):00545                 LDB     >TEMP2                            ;GET DEVICE BACK
F056 BDE5B5           (       command.os):00546                 JSR     WRDEV                             ;OUTPUT TO DEVICE
F059                  (       command.os):00547         CNC2
F059 F6DCD7           (       command.os):00548                 LDB     >TEMP2                            ;GET DEVICE ID
F05C BDE5D5           (       command.os):00549                 JSR     TSTDEV                            ;TEST FOR CHARACTER
F05F 26E7             (       command.os):00550                 BNE     CNC1                              ;NO CHAR RECEIVED
F061 BDE5AE           (       command.os):00551                 JSR     PUTCHR                            ;WRITE TO CONSOLE
F064 20E2             (       command.os):00552                 BRA     CNC1                              ;CONTINUE
                      (       command.os):00553         ;*
                      (       command.os):00554         ;* 'SET' COMMAND
                      (       command.os):00555         ;*
F066                  (       command.os):00556         SET
F066 8EF3E6           (       command.os):00557                 LDX     #SETTAB                           ;POINT TO TABLE
F069 BDE519           (       command.os):00558                 JSR     TLOOK                             ;LOOK IT UP
F06C BDE4F0           (       command.os):00559                 JSR     SKIP                              ;ADVANCE
F06F 2777             (       command.os):00560                 BEQ     BADOP3                            ;INVALID
F071 8EF429           (       command.os):00561                 LDX     #SETADR
F074 58               (       command.os):00562                 ASLB
F075 6E95             (       command.os):00563                 JMP     [B,X]
                      (       command.os):00564         ;* SET DEFAULT
F077                  (       command.os):00565         SET0
F077 BDE3C4           (       command.os):00566                 JSR     GETDIR                            ;GET DEFAULT DIR
F07A BDE4F0           (       command.os):00567                 JSR     SKIP                              ;ANY MORE INFO
F07D 2669             (       command.os):00568                 BNE     BADOP3
F07F                  (       command.os):00569         SETDEF
F07F 3436             (       command.os):00570                 PSHS    A,B,X,Y                           ;SAVE REGS
F081 8EDCA5           (       command.os):00571                 LDX     #DEFDRV                           ;POINT TO DEFAULT
F084 2010             (       command.os):00572                 BRA     MOVDIR                            ;MOVE IT
                      (       command.os):00573         ;* SET COMMAND
F086                  (       command.os):00574         SET1
F086 8EDCAE           (       command.os):00575                 LDX     #SYSDRV                           ;DEFAULT FROM SYSTEM
F089 BDE3C7           (       command.os):00576                 JSR     GETDIR1                           ;GET DIR
F08C BDE4F0           (       command.os):00577                 JSR     SKIP
F08F 2657             (       command.os):00578                 BNE     BADOP3
F091                  (       command.os):00579         SETCMD
F091 3436             (       command.os):00580                 PSHS    A,B,X,Y                           ;SAVE REGS
F093 8EDCAE           (       command.os):00581                 LDX     #SYSDRV                           ;POINT TO IT
F096                  (       command.os):00582         MOVDIR
F096 108EDCBF         (       command.os):00583                 LDY     #FDRIVE                           ;POINT TO FILENAME
F09A C609             (       command.os):00584                 LDB     #9                                ;MOVE 9 CHARS
F09C                  (       command.os):00585         MOVD1
F09C A6A0             (       command.os):00586                 LDA     ,Y+                               ;GET 1
F09E A780             (       command.os):00587                 STA     ,X+                               ;SAVE IT
F0A0 5A               (       command.os):00588                 DECB
F0A1 26F9             (       command.os):00589                 BNE     MOVD1                             ;CONTINUE
F0A3 35B6             (       command.os):00590                 PULS    A,B,X,Y,PC
                      (       command.os):00591         ;* SET FILE
F0A5                  (       command.os):00592         SET2
F0A5 BDE384           (       command.os):00593                 JSR     GETVAL                            ;GET NAME
F0A8 BDE66D           (       command.os):00594                 JSR     LOCERR                            ;LOOK IT UP
F0AB                  (       command.os):00595         SETF0
F0AB 3410             (       command.os):00596                 PSHS    X                                 ;SAVE PTR
F0AD 8EF455           (       command.os):00597                 LDX     #SFTAB                            ;PT TO TABLE
F0B0 BDF129           (       command.os):00598                 JSR     TLOOKE                            ;LOOK IT UP
F0B3 5D               (       command.os):00599                 TSTB                                      ;IS IT SET LOADADDRESS
F0B4 260C             (       command.os):00600                 BNE     SETF1                             ;NO, TRY SOMETHING ELSE
F0B6 BDE430           (       command.os):00601                 JSR     GETHEX                            ;GET ADDRESS
F0B9 1F10             (       command.os):00602                 TFR     X,D                               ;COPY
F0BB 3510             (       command.os):00603                 PULS    X                                 ;RESTORE
F0BD ED8815           (       command.os):00604                 STD     DRADR,X                           ;SAVE
F0C0 200A             (       command.os):00605                 BRA     SETF2                             ;TEST FOR END
F0C2                  (       command.os):00606         SETF1
F0C2 5A               (       command.os):00607                 DECB
F0C3 2623             (       command.os):00608                 BNE     BADOP3
F0C5 8D0D             (       command.os):00609                 BSR     GETATR                            ;GET ATTRIBUTES
F0C7 3510             (       command.os):00610                 PULS    X                                 ;RESTORE
F0C9 A78817           (       command.os):00611                 STA     DATTR,X                           ;SAVE
F0CC                  (       command.os):00612         SETF2
F0CC BDE4F0           (       command.os):00613                 JSR     SKIP                              ;ADVANCE
F0CF 26DA             (       command.os):00614                 BNE     SETF0
F0D1 7EE7BA           (       command.os):00615                 JMP     CHGWRK                            ;INDICATE WE CHANGED
                      (       command.os):00616         ;* GET FILE ATTRIBUTES FROM COMMAND LINE
F0D4                  (       command.os):00617         GETATR
F0D4 4F               (       command.os):00618                 CLRA    CLEAR IT
F0D5 3416             (       command.os):00619                 PSHS    A,B,X                             ;SAVE ON STACK
F0D7                  (       command.os):00620         GETA1
F0D7 8EF0F3           (       command.os):00621                 LDX     #ATRTAB                           ;POINT TO TABLE
F0DA BDE4FD           (       command.os):00622                 JSR     TSTERM                            ;GET CHARACTER
F0DD 2712             (       command.os):00623                 BEQ     GETA4                             ;END
F0DF C680             (       command.os):00624                 LDB     #%10000000                        ;START WITH FIRST ATTR
F0E1                  (       command.os):00625         GETA2
F0E1 A180             (       command.os):00626                 CMPA    ,X+                               ;IS THIS IT?
F0E3 2706             (       command.os):00627                 BEQ     GETA3                             ;YES
F0E5 54               (       command.os):00628                 LSRB                                      ;SHIFT IT
F0E6 26F9             (       command.os):00629                 BNE     GETA2                             ;MORE
F0E8                  (       command.os):00630         BADOP3
F0E8 7EE2CC           (       command.os):00631                 JMP     BADOPR                            ;REPORT ERROR
F0EB                  (       command.os):00632         GETA3
F0EB EAE4             (       command.os):00633                 ORB     ,S                                ;INCLUDE IN ATTRIBUTES
F0ED E7E4             (       command.os):00634                 STB     ,S                                ;RESAVE
F0EF 20E6             (       command.os):00635                 BRA     GETA1                             ;AND CONTINUE
F0F1                  (       command.os):00636         GETA4
F0F1 3596             (       command.os):00637                 PULS    A,B,X,PC                          ;RESTORE REGS
F0F3                  (       command.os):00638         ATRTAB
F0F3 525745443F3F3F3F (       command.os):00639                 FCC     'RWED????'                        ;AVAILABLE ATTRIBUTE BITS
                      (       command.os):00640         ;*
                      (       command.os):00641         ;* SET DRIVE COMMAND
                      (       command.os):00642         ;*
F0FB                  (       command.os):00643         SET3
F0FB BDE637           (       command.os):00644                 JSR     PURGE                             ;INSURE ALL WRITTEN
F0FE BDE413           (       command.os):00645                 JSR     GETDRV                            ;GET DRIVE ID
F101 B7DCF3           (       command.os):00646                 STA     >SDRIVE                           ;SELECT IT
F104 BDEB1F           (       command.os):00647                 JSR     GETCTL                            ;GET CTRL BLOCK
F107 3420             (       command.os):00648                 PSHS    Y                                 ;SAVE CMD POINTER
F109 BDF74B           (       command.os):00649                 JSR     HOME                              ;HOME HEAD
F10C 3520             (       command.os):00650                 PULS    Y                                 ;RESTORE CMD POINTER
F10E                  (       command.os):00651         CHGDRV
F10E 8EF48D           (       command.os):00652                 LDX     #SDTAB                            ;POINT TO TABLE
F111 BDF129           (       command.os):00653                 JSR     TLOOKE                            ;LOOK FOR IT
F114 3404             (       command.os):00654                 PSHS    B                                 ;SAVE
F116 BDE425           (       command.os):00655                 JSR     GETNUM                            ;GET IT
F119 1F10             (       command.os):00656                 TFR     X,D                               ;GET NUMBER
F11B 3502             (       command.os):00657                 PULS    A                                 ;RESTORE
F11D 8103             (       command.os):00658                 CMPA    #3                                ;VALID?
F11F 22C7             (       command.os):00659                 BHI     BADOP3                            ;ERROR
F121 E7C6             (       command.os):00660                 STB     A,U                               ;SET IT
F123 BDE4F0           (       command.os):00661                 JSR     SKIP                              ;AT END?
F126 26E6             (       command.os):00662                 BNE     CHGDRV                            ;NO
F128 39               (       command.os):00663                 RTS
                      (       command.os):00664         ;*
                      (       command.os):00665         ;* LOOKUP TABLE ENTRY & INSURE IT ENDS WITH '='
                      (       command.os):00666         ;*
F129                  (       command.os):00667         TLOOKE
F129 BDE519           (       command.os):00668                 JSR     TLOOK                             ;LOOKUP ENTRY
F12C A6A0             (       command.os):00669                 LDA     ,Y+                               ;GET NEXT CHAR
F12E 813D             (       command.os):00670                 CMPA    #'='                              ;IS IT EQUALS?
F130 26B6             (       command.os):00671                 BNE     BADOP3                            ;REPORT ERROR
F132 39               (       command.os):00672                 RTS
                      (       command.os):00673         ;*
                      (       command.os):00674         ;* SET MEMORY
                      (       command.os):00675         ;*
F133                  (       command.os):00676         SET4
F133 BDE430           (       command.os):00677                 JSR     GETHEX                            ;GET ADDRESS
F136                  (       command.os):00678         ST1
F136 3410             (       command.os):00679                 PSHS    X                                 ;SAVE ADDR
F138 BDE430           (       command.os):00680                 JSR     GETHEX                            ;GET DATA
F13B 1F10             (       command.os):00681                 TFR     X,D                               ;SAVE IT
F13D 3510             (       command.os):00682                 PULS    X                                 ;RECOVER
F13F E780             (       command.os):00683                 STB     ,X+                               ;SAVE IT
F141 BDE4F0           (       command.os):00684                 JSR     SKIP                              ;END OF LINE?
F144 26F0             (       command.os):00685                 BNE     ST1                               ;CONTINUE
F146 39               (       command.os):00686                 RTS
                      (       command.os):00687         ;* SET CONSOLE
F147                  (       command.os):00688         SET5
F147 8EF4BC           (       command.os):00689                 LDX     #IOTAB                            ;POINT TO TABLE
F14A BDF129           (       command.os):00690                 JSR     TLOOKE                            ;LOOK IT UP
F14D C102             (       command.os):00691                 CMPB    #2                                ;OVER?
F14F 2497             (       command.os):00692                 BHS     BADOP3                            ;INVALID
F151 3404             (       command.os):00693                 PSHS    B                                 ;SAVE ID
F153 8D0D             (       command.os):00694                 BSR     GETDEV                            ;GET DEVICE NUMBER
F155 3502             (       command.os):00695                 PULS    A                                 ;GET ID BACK
F157 8EDC6C           (       command.os):00696                 LDX     #CONIN
F15A E786             (       command.os):00697                 STB     A,X                               ;SET IT
F15C BDE4F0           (       command.os):00698                 JSR     SKIP
F15F 26E6             (       command.os):00699                 BNE     SET5
F161 39               (       command.os):00700                 RTS
                      (       command.os):00701         ;* GET A DEVICE ID FROM THE CONSOLE
F162                  (       command.os):00702         GETDEV
F162 BDE425           (       command.os):00703                 JSR     GETNUM                            ;GET DECIMAL NUMBER
F165 8C0008           (       command.os):00704                 CMPX    #NDEV                             ;IS IT OVER THE LIMIT
F168 1024F45C         (       command.os):00705                 LBHS    BADDEV                            ;YES, REPORT ERROR
F16C 1F10             (       command.os):00706                 TFR     X,D                               ;'B' = DEVICE ID
F16E 39               (       command.os):00707                 RTS
                      (       command.os):00708         ;* SET FLAG ON/OFF
F16F                  (       command.os):00709         STFLAG
F16F 54               (       command.os):00710                 LSRB                                      ;CONVERT BACK
F170 3404             (       command.os):00711                 PSHS    B                                 ;SAVE
F172 8EF4B4           (       command.os):00712                 LDX     #OOTAB                            ;PT TO IT
F175 BDE519           (       command.os):00713                 JSR     TLOOK                             ;LOOKUP IN TABLE
F178 3502             (       command.os):00714                 PULS    A                                 ;RESTORE VECT NUM
F17A 5D               (       command.os):00715                 TSTB                                      ;IS IT OFF?
F17B 270B             (       command.os):00716                 BEQ     CLRFLG                            ;YES, CLEAR IT
F17D 5A               (       command.os):00717                 DECB                                      ;IS IT ON
F17E 1026F14A         (       command.os):00718                 LBNE    BADOPR                            ;NO, ITS INVALID
                      (       command.os):00719         ;* SET AN OS FLAG
F182                  (       command.os):00720         SETFLG
F182 3414             (       command.os):00721                 PSHS    B,X
F184 C6FF             (       command.os):00722                 LDB     #$FF
F186 2003             (       command.os):00723                 BRA     GOFLG
                      (       command.os):00724         ;* CLEAR A OS FLAG
F188                  (       command.os):00725         CLRFLG
F188 3414             (       command.os):00726                 PSHS    B,X
F18A 5F               (       command.os):00727                 CLRB
F18B                  (       command.os):00728         GOFLG
F18B 8103             (       command.os):00729                 CMPA    #NUMFLG
F18D 1024F13B         (       command.os):00730                 LBHS    BADOPR
F191 8EDCA2           (       command.os):00731                 LDX     #MSGFLG
F194 3086             (       command.os):00732                 LEAX    A,X
F196 A684             (       command.os):00733                 LDA     ,X
F198 E784             (       command.os):00734                 STB     ,X
F19A 1A04             (       command.os):00735                 ORCC    #4
F19C 3594             (       command.os):00736                 PULS    B,X,PC
                      (       command.os):00737         ;*
                      (       command.os):00738         ;* SHOW COMMAND
                      (       command.os):00739         ;*
F19E                  (       command.os):00740         SHOW
F19E 8EF3E6           (       command.os):00741                 LDX     #SETTAB                           ;POINT TO IT
F1A1 BDE519           (       command.os):00742                 JSR     TLOOK                             ;LOOK FOR IT
F1A4 58               (       command.os):00743                 LSLB
F1A5 8EF43F           (       command.os):00744                 LDX     #SHOADR
F1A8 6E95             (       command.os):00745                 JMP     [B,X]
                      (       command.os):00746         ;* SHOW DEFAULT
F1AA                  (       command.os):00747         SHOW0
F1AA 8EDCA5           (       command.os):00748                 LDX     #DEFDRV                           ;PT TO IT
F1AD 2003             (       command.os):00749                 BRA     SDCMD                             ;SHOW IT
F1AF                  (       command.os):00750         SHOW1
F1AF 8EDCAE           (       command.os):00751                 LDX     #SYSDRV                           ;PT TO IT
F1B2                  (       command.os):00752         SDCMD
F1B2 A680             (       command.os):00753                 LDA     ,X+                               ;GET DRIVE ID
F1B4 8B41             (       command.os):00754                 ADDA    #'A'                              ;CONVERT
F1B6 BDE5AE           (       command.os):00755                 JSR     PUTCHR
F1B9 BDE562           (       command.os):00756                 JSR     WRLIN
F1BC 3A5B             (       command.os):00757                 FCC     ':['
F1BE 00               (       command.os):00758                 FCB     $00
F1BF C608             (       command.os):00759                 LDB     #8
F1C1                  (       command.os):00760         SDC1
F1C1 A680             (       command.os):00761                 LDA     ,X+
F1C3 2703             (       command.os):00762                 BEQ     SDC2
F1C5 BDE5AE           (       command.os):00763                 JSR     PUTCHR
F1C8                  (       command.os):00764         SDC2
F1C8 5A               (       command.os):00765                 DECB
F1C9 26F6             (       command.os):00766                 BNE     SDC1
F1CB 865D             (       command.os):00767                 LDA     #']'
F1CD BDE5AE           (       command.os):00768                 JSR     PUTCHR
F1D0 7EE59C           (       command.os):00769                 JMP     LFCR                              ;EXIT
                      (       command.os):00770         ;* SHOW FILE
F1D3                  (       command.os):00771         SHOW2
F1D3 BDE384           (       command.os):00772                 JSR     GETVAL                            ;GET NAME
F1D6 BDE66D           (       command.os):00773                 JSR     LOCERR                            ;LOOK IT UP
F1D9 BDE562           (       command.os):00774                 JSR     WRLIN
F1DC 46696C653A20     (       command.os):00775                 FCC     'File: '
F1E2 00               (       command.os):00776                 FCB     $00
F1E3 BDE6FE           (       command.os):00777                 JSR     SHONAM                            ;OUTPUT
F1E6 BDE562           (       command.os):00778                 JSR     WRLIN
F1E9 0A0D             (       command.os):00779                 FCB     $0A,$0D
F1EB 4469736B20616464 (       command.os):00780                 FCC     'Disk address='
     726573733D
F1F8 00               (       command.os):00781                 FCB     $00
F1F9 EC8813           (       command.os):00782                 LDD     DDADR,X
F1FC BDE492           (       command.os):00783                 JSR     WRDEC
F1FF BDE562           (       command.os):00784                 JSR     WRLIN
F202 2C204C6F61642061 (       command.os):00785                 FCC     ', Load address=$'
     6464726573733D24
F212 00               (       command.os):00786                 FCB     $00
F213 EC8815           (       command.os):00787                 LDD     DRADR,X
F216 BDE559           (       command.os):00788                 JSR     WRHEXW
F219 BDE562           (       command.os):00789                 JSR     WRLIN
F21C 2C2050726F746563 (       command.os):00790                 FCC     ', Protection='
     74696F6E3D
F229 00               (       command.os):00791                 FCB     $00
F22A E68817           (       command.os):00792                 LDB     DATTR,X
F22D 108EF0F3         (       command.os):00793                 LDY     #ATRTAB
F231                  (       command.os):00794         SH21
F231 A6A0             (       command.os):00795                 LDA     ,Y+
F233 58               (       command.os):00796                 LSLB
F234 2403             (       command.os):00797                 BCC     SH22
F236 BDE5AE           (       command.os):00798                 JSR     PUTCHR
F239                  (       command.os):00799         SH22
F239 5D               (       command.os):00800                 TSTB
F23A 26F5             (       command.os):00801                 BNE     SH21
F23C BDE59C           (       command.os):00802                 JSR     LFCR
F23F 108E0000         (       command.os):00803                 LDY     #0                                ;0 BLOCKS
F243 EC8813           (       command.os):00804                 LDD     DDADR,X
F246                  (       command.os):00805         SH23
F246 3121             (       command.os):00806                 LEAY    1,Y                               ;ADVANCE
F248 BDE5F3           (       command.os):00807                 JSR     FNDLNK                            ;LOOK UP LINK
F24B 26F9             (       command.os):00808                 BNE     SH23                              ;FIND EM ALL
F24D BDE562           (       command.os):00809                 JSR     WRLIN
F250 46696C6520636F6E (       command.os):00810                 FCC     'File contains '
     7461696E7320
F25E 00               (       command.os):00811                 FCB     $00
F25F 1F20             (       command.os):00812                 TFR     Y,D
F261 BDE492           (       command.os):00813                 JSR     WRDEC
F264 BDE592           (       command.os):00814                 JSR     WRMSG
F267 20626C6F636B2873 (       command.os):00815                 FCC     ' block(s).'
     292E
F271 00               (       command.os):00816                 FCB     $00
F272 39               (       command.os):00817                 RTS
                      (       command.os):00818         ;* SHOW DISK FORMAT
F273                  (       command.os):00819         SHOW3
F273 BDE413           (       command.os):00820                 JSR     GETDRV
F276                  (       command.os):00821         SHODRV
F276 3442             (       command.os):00822                 PSHS    A,U                               ;SAVE REGISTERS
F278 BDEB22           (       command.os):00823                 JSR     GETCTL1                           ;GET DRIVE CONTROL BLOCK
F27B BDE562           (       command.os):00824                 JSR     WRLIN                             ;OUTPUT MESSAGE
F27E 44726976653A20   (       command.os):00825                 FCC     'Drive: '
F285 00               (       command.os):00826                 FCB     $00
F286 A6E4             (       command.os):00827                 LDA     ,S                                ;GET DRIVE ID
F288 8B41             (       command.os):00828                 ADDA    #'A'                              ;CONVERT TO DRIVE ID
F28A BDE5AE           (       command.os):00829                 JSR     PUTCHR                            ;OUTPUT IT
F28D BDE59C           (       command.os):00830                 JSR     LFCR                              ;NEW LINE
F290 8EF48D           (       command.os):00831                 LDX     #SDTAB                            ;POINT TO TABLE
F293 4F               (       command.os):00832                 CLRA                                      ;DISPLAY ADDRESS
F294 E6C4             (       command.os):00833                 LDB     DRIVE,U                           ;GET DRIVE ID
F296 8D1D             (       command.os):00834                 BSR     SHODRB                            ;DISPLAY IT
F298 8601             (       command.os):00835                 LDA     #1                                ;DISPLAY CYLINDERS
F29A E641             (       command.os):00836                 LDB     NCYL,U                            ;GET # CYLINDERS
F29C 8D11             (       command.os):00837                 BSR     SHODRA                            ;DISPLAY IT
F29E 8602             (       command.os):00838                 LDA     #2                                ;DISPLAY HEADS
F2A0 E642             (       command.os):00839                 LDB     NHEAD,U                           ;GET # HEADS
F2A2 8D0B             (       command.os):00840                 BSR     SHODRA                            ;DISPLAY IT
F2A4 8603             (       command.os):00841                 LDA     #3                                ;DISPLAY SECTORS/TRACK
F2A6 E643             (       command.os):00842                 LDB     NSEC,U                            ;GET # SECTORS/TRACK
F2A8 8D05             (       command.os):00843                 BSR     SHODRA                            ;DISPLAY IT
F2AA 3542             (       command.os):00844                 PULS    A,U                               ;RESTORE REGS
F2AC 7EE59C           (       command.os):00845                 JMP     LFCR                              ;NEW LINE
                      (       command.os):00846         
F2AF                  (       command.os):00847         SHODRA
F2AF BDE562           (       command.os):00848                 JSR     WRLIN                             ;OUTPUT MESSAGE
F2B2 2C20             (       command.os):00849                 FCC     ', '                              ;STRING
F2B4 00               (       command.os):00850                 FCB     $00
F2B5                  (       command.os):00851         SHODRB
F2B5 8D08             (       command.os):00852                 BSR     SHOTAB                            ;DISPLAY TABLE ENTRY
F2B7 863D             (       command.os):00853                 LDA     #'='                              ;GET FOLLOWING '='
F2B9 BDE5AE           (       command.os):00854                 JSR     PUTCHR                            ;OUTPUT IT
F2BC 7EE491           (       command.os):00855                 JMP     WRDEC8                            ;AND DISPLAY VALUE
                      (       command.os):00856         ;*
                      (       command.os):00857         ;* DISPLAY ENTRY(A) IN TABLE(X)
                      (       command.os):00858         ;*
F2BF                  (       command.os):00859         SHOTAB
F2BF 3414             (       command.os):00860                 PSHS    B,X                               ;SAVE REGS
F2C1 4C               (       command.os):00861                 INCA                                      ;ADVANCE FOR COUNT
F2C2                  (       command.os):00862         SHOT1
F2C2 E680             (       command.os):00863                 LDB     ,X+                               ;GET CHAR FROM TABLE
F2C4 2AFC             (       command.os):00864                 BPL     SHOT1                             ;NOT FLAG, KEEP LOOKING
F2C6 C47F             (       command.os):00865                 ANDB    #%01111111                        ;IS IT LAST ONE?
F2C8 270F             (       command.os):00866                 BEQ     SHOT4                             ;YES, RETURN NOT-FOUND
F2CA 4A               (       command.os):00867                 DECA                                      ;IS THIS IT?
F2CB 26F5             (       command.os):00868                 BNE     SHOT1                             ;NO, KEEP LOOKING
F2CD                  (       command.os):00869         SHOT2
F2CD A680             (       command.os):00870                 LDA     ,X+                               ;GET CHAR
F2CF 2B05             (       command.os):00871                 BMI     SHOT3                             ;END, EXIT
F2D1 BDE5AE           (       command.os):00872                 JSR     PUTCHR                            ;DISPLAY
F2D4 20F7             (       command.os):00873                 BRA     SHOT2                             ;DO NEXT
F2D6                  (       command.os):00874         SHOT3
F2D6 4F               (       command.os):00875                 CLRA    ZERO RC
F2D7 3594             (       command.os):00876                 PULS    B,X,PC
F2D9                  (       command.os):00877         SHOT4
F2D9 8601             (       command.os):00878                 LDA     #RCBOP                            ;INVALID OPERAND PASSED
F2DB 3594             (       command.os):00879                 PULS    B,X,PC                            ;RETURN
                      (       command.os):00880         ;* SHOW CONSOLE I/O ASSIGNMENTS
F2DD                  (       command.os):00881         SHOW5
F2DD 8EF4BC           (       command.os):00882                 LDX     #IOTAB                            ;POINT TO TABLE
F2E0 4F               (       command.os):00883                 CLRA                                      ;DISPLAY INPUT
F2E1 F6DC6C           (       command.os):00884                 LDB     >CONIN                            ;GET INPUT
F2E4 8DCF             (       command.os):00885                 BSR     SHODRB                            ;DISPLAY IT
F2E6 8601             (       command.os):00886                 LDA     #1                                ;DISPLAY OUTPUT
F2E8 F6DC6D           (       command.os):00887                 LDB     >CONOUT                           ;GET OUTPUT
F2EB 8DC2             (       command.os):00888                 BSR     SHODRA                            ;DISPLAY IT
F2ED 7EE59C           (       command.os):00889                 JMP     LFCR                              ;NEW LINE
                      (       command.os):00890         ;* DISPLAY FLAGS
F2F0                  (       command.os):00891         SHFLAG
F2F0 54               (       command.os):00892                 LSRB
F2F1 1F98             (       command.os):00893                 TFR     B,A                               ;COPY
F2F3 8EF3E6           (       command.os):00894                 LDX     #SETTAB                           ;POINT TO TABLE
F2F6 8DC7             (       command.os):00895                 BSR     SHOTAB                            ;DISPLAY IT
F2F8 863D             (       command.os):00896                 LDA     #'='                              ;GET EQUALS SIGN
F2FA BDE5AE           (       command.os):00897                 JSR     PUTCHR                            ;OUTPUT IT
F2FD 8EDCA2           (       command.os):00898                 LDX     #MSGFLG                           ;PT TO AREA
F300 A685             (       command.os):00899                 LDA     B,X                               ;GET FLAG VALUE
F302 2702             (       command.os):00900                 BEQ     SHOOFF                            ;OFF, SHOW IT
F304 8601             (       command.os):00901                 LDA     #1                                ;CONVERT TO ON
F306                  (       command.os):00902         SHOOFF
F306 8EF4B4           (       command.os):00903                 LDX     #OOTAB                            ;POINT TO ON/OFF TABLE
F309 8DB4             (       command.os):00904                 BSR     SHOTAB                            ;OUTPUT TABLE ENTRY
F30B 7EE59C           (       command.os):00905                 JMP     LFCR                              ;NEW LINE & EXIT
                      (       command.os):00906         ;*
                      (       command.os):00907         ;* SHOW MEMORY COMAND
                      (       command.os):00908         ;*
F30E                  (       command.os):00909         SHOW4
F30E BDE430           (       command.os):00910                 JSR     GETHEX                            ;     GET STARTING ADDRESS
F311 3410             (       command.os):00911                 PSHS    X                                 ;SAVE IT
F313 BDE4F0           (       command.os):00912                 JSR     SKIP                              ;     MORE OPERANDS?
F316 2703             (       command.os):00913                 BEQ     EX1                               ;NO, THATS IT
F318 BDE430           (       command.os):00914                 JSR     GETHEX                            ;     GET ENDING ADDRESS
F31B                  (       command.os):00915         EX1
F31B BFDCD5           (       command.os):00916                 STX     >TEMP1                            ;     SAVE ADDR
F31E 3510             (       command.os):00917                 PULS    X                                 ;GET STARTING BACK
F320                  (       command.os):00918         EX2
F320 1F10             (       command.os):00919                 TFR     X,D                               ;GET ADDRESS
F322 BDE559           (       command.os):00920                 JSR     WRHEXW                            ;     DISPLAY
F325 C610             (       command.os):00921                 LDB     #16                               ;16 BYTES/LINE
F327                  (       command.os):00922         EX3
F327 C503             (       command.os):00923                 BITB    #3                                ;BOUNDARY?
F329 2603             (       command.os):00924                 BNE     EX4
F32B BDE5A6           (       command.os):00925                 JSR     SPACE                             ;EXTRA SPACE
F32E                  (       command.os):00926         EX4
F32E BDE5A6           (       command.os):00927                 JSR     SPACE                             ;OUTPUT SPACE
F331 A680             (       command.os):00928                 LDA     ,X+                               ;GET DATA
F333 BDE56E           (       command.os):00929                 JSR     WRHEX                             ;OUTPUT
F336 5A               (       command.os):00930                 DECB                                      ;BACKUP COUNT
F337 26EE             (       command.os):00931                 BNE     EX3                               ;DO EM ALL
F339 C604             (       command.os):00932                 LDB     #4
F33B                  (       command.os):00933         EX5
F33B BDE5A6           (       command.os):00934                 JSR     SPACE                             ;MORE SPACES
F33E 5A               (       command.os):00935                 DECB
F33F 26FA             (       command.os):00936                 BNE     EX5
F341 3010             (       command.os):00937                 LEAX    -16,X                             ;BACKUP
F343 C610             (       command.os):00938                 LDB     #16
F345                  (       command.os):00939         EX6
F345 A680             (       command.os):00940                 LDA     ,X+
F347 8120             (       command.os):00941                 CMPA    #' '                              ;SPACE?
F349 2504             (       command.os):00942                 BLO     EX7
F34B 817F             (       command.os):00943                 CMPA    #$7F                              ;DELETE
F34D 2502             (       command.os):00944                 BLO     EX8                               ;OK
F34F                  (       command.os):00945         EX7
F34F 862E             (       command.os):00946                 LDA     #'.'                              ;INDICATE BAD
F351                  (       command.os):00947         EX8
F351 BDE5AE           (       command.os):00948                 JSR     PUTCHR                            ;OUTPUT
F354 5A               (       command.os):00949                 DECB    BACKUP
F355 26EE             (       command.os):00950                 BNE     EX6                               ;CONTINUE
F357 BDE59C           (       command.os):00951                 JSR     LFCR                              ;NEW LINE
F35A BDE5E7           (       command.os):00952                 JSR     TSTCHR
F35D 2705             (       command.os):00953                 BEQ     EX9
F35F BCDCD5           (       command.os):00954                 CMPX    >TEMP1                            ;PAST END?
F362 23BC             (       command.os):00955                 BLS     EX2                               ;NO, KEEP GOING
F364                  (       command.os):00956         EX9
F364 4F               (       command.os):00957                 CLRA
F365 39               (       command.os):00958                 RTS
                      (       command.os):00959         ;* SHOW FREE
F366                  (       command.os):00960         SHOW6
F366 BDE413           (       command.os):00961                 JSR     GETDRV                            ;GET DRIVE ID
F369 B7DCF3           (       command.os):00962                 STA     >SDRIVE                           ;SELECT IT
F36C 8D3E             (       command.os):00963                 BSR     CALFRE                            ;CALCULATE SIZE & FREE
F36E BDE562           (       command.os):00964                 JSR     WRLIN                             ;OUTPUT MESSAGE
F371 447269766520     (       command.os):00965                 FCC     'Drive '
F377 00               (       command.os):00966                 FCB     $00
F378 B6DCF3           (       command.os):00967                 LDA     >SDRIVE                           ;GET DRIVE ID
F37B 8B41             (       command.os):00968                 ADDA    #'A'                              ;CONVERT TO PRINTABLE
F37D BDE5AE           (       command.os):00969                 JSR     PUTCHR                            ;DISPLAY
F380 BDE562           (       command.os):00970                 JSR     WRLIN                             ;OUTPUT MESSAGE
F383 2068617320       (       command.os):00971                 FCC     ' has '
F388 00               (       command.os):00972                 FCB     $00
F389 FCDCD7           (       command.os):00973                 LDD     >TEMP2                            ;GET DISK SIZE
F38C BDE492           (       command.os):00974                 JSR     WRDEC                             ;DISPLAY IN DECIMAL
F38F BDE562           (       command.os):00975                 JSR     WRLIN                             ;OUTPUT MESSAGE
F392 20626C6F636B732C (       command.os):00976                 FCC     ' blocks, '
     20
F39B 00               (       command.os):00977                 FCB     $00
F39C FCDCD5           (       command.os):00978                 LDD     >TEMP1                            ;GET FREE BLOCKS
F39F BDE492           (       command.os):00979                 JSR     WRDEC                             ;OUTPUT IN DECIMAL
F3A2 BDE592           (       command.os):00980                 JSR     WRMSG                             ;OUTPUT MESSAGE
F3A5 2066726565       (       command.os):00981                 FCC     ' free'
F3AA 00               (       command.os):00982                 FCB     $00
F3AB 39               (       command.os):00983                 RTS
                      (       command.os):00984         ;*
                      (       command.os):00985         ;* CALCULATE # FREE SECTORS ON DISK
                      (       command.os):00986         ;*
F3AC                  (       command.os):00987         CALFRE
F3AC 3430             (       command.os):00988                 PSHS    X,Y
F3AE BDE726           (       command.os):00989                 JSR     CURSIZ                            ;GET DRIVE SIZE
F3B1 FDDCD7           (       command.os):00990                 STD     >TEMP2                            ;SAVE # BLOCKS
F3B4 1F02             (       command.os):00991                 TFR     D,Y                               ;SAVE IT
F3B6 4F               (       command.os):00992                 CLRA
F3B7 5F               (       command.os):00993                 CLRB
F3B8 FDDCD5           (       command.os):00994                 STD     >TEMP1                            ;SAVE COUNT
F3BB C601             (       command.os):00995                 LDB     #LNKSEC                           ;GET LINK SECTORS
F3BD                  (       command.os):00996         DISF1
F3BD FDDCD3           (       command.os):00997                 STD     >TEMP                             ;CURRENT SECTOR
F3C0 BDE610           (       command.os):00998                 JSR     RDWRK                             ;READ IT
F3C3                  (       command.os):00999         DISF2
F3C3 EC81             (       command.os):01000                 LDD     ,X++                              ;GET SECTOR ID
F3C5 2607             (       command.os):01001                 BNE     DISF3                             ;USED
F3C7 5C               (       command.os):01002                 INCB                                      ;GET A ONE
F3C8 F3DCD5           (       command.os):01003                 ADDD    >TEMP1                            ;ADVANCE COUNT
F3CB FDDCD5           (       command.os):01004                 STD     >TEMP1                            ;RESAVE COUNT
F3CE                  (       command.os):01005         DISF3
F3CE 313F             (       command.os):01006                 LEAY    -1,Y                              ;REDUCE BY ONE
F3D0 270D             (       command.os):01007                 BEQ     DISF4                             ;ALL DONE
F3D2 8CE000           (       command.os):01008                 CMPX    #WRKSPC+512                       ;ARE WE OVER
F3D5 25EC             (       command.os):01009                 BLO     DISF2                             ;NO, ITS OK
F3D7 FCDCD3           (       command.os):01010                 LDD     >TEMP                             ;GET SECTOR
F3DA C30001           (       command.os):01011                 ADDD    #1                                ;ADVANCE
F3DD 20DE             (       command.os):01012                 BRA     DISF1
F3DF                  (       command.os):01013         DISF4
F3DF FCDCD5           (       command.os):01014                 LDD     >TEMP1                            ;RECOVER IT
F3E2 1A04             (       command.os):01015                 ORCC    #4
F3E4 35B0             (       command.os):01016                 PULS    X,Y,PC
                      (       command.os):01017         ;* 'SET' OPERAND TABLES
F3E6                  (       command.os):01018         SETTAB
F3E6 83               (       command.os):01019                 FCB     $83
F3E7 4D657373616765   (       command.os):01020                 FCC     'Message'
F3EE 83               (       command.os):01021                 FCB     $83
F3EF 4465627567       (       command.os):01022                 FCC     'Debug'
F3F4 82               (       command.os):01023                 FCB     $82
F3F5 5472616365       (       command.os):01024                 FCC     'Trace'
F3FA 83               (       command.os):01025                 FCB     $83
F3FB 44454641554C54   (       command.os):01026                 FCC     'DEFAULT'
F402 82               (       command.os):01027                 FCB     $82
F403 53595354454D     (       command.os):01028                 FCC     'SYSTEM'
F409 82               (       command.os):01029                 FCB     $82
F40A 46494C45         (       command.os):01030                 FCC     'FILE'
F40E 82               (       command.os):01031                 FCB     $82
F40F 4452495645       (       command.os):01032                 FCC     'DRIVE'
F414 83               (       command.os):01033                 FCB     $83
F415 4D454D4F5259     (       command.os):01034                 FCC     'MEMORY'
F41B 82               (       command.os):01035                 FCB     $82
F41C 434F4E534F4C45   (       command.os):01036                 FCC     'CONSOLE'
F423 82               (       command.os):01037                 FCB     $82
F424 46524545         (       command.os):01038                 FCC     'FREE'
F428 80               (       command.os):01039                 FCB     $80
                      (       command.os):01040         ;* 'SET' OPERAND HANDLERS
F429                  (       command.os):01041         SETADR
F429 F16F             (       command.os):01042                 FDB     STFLAG                            ;MESSAGE
F42B F16F             (       command.os):01043                 FDB     STFLAG                            ;DEBUG
F42D F16F             (       command.os):01044                 FDB     STFLAG                            ;TRACE
F42F F077             (       command.os):01045                 FDB     SET0                              ;DEFAULT
F431 F086             (       command.os):01046                 FDB     SET1                              ;SYSTEM
F433 F0A5             (       command.os):01047                 FDB     SET2                              ;FILE
F435 F0FB             (       command.os):01048                 FDB     SET3                              ;DRIVE
F437 F133             (       command.os):01049                 FDB     SET4                              ;MEMORY
F439 F147             (       command.os):01050                 FDB     SET5                              ;CONSOLE
F43B E2CC             (       command.os):01051                 FDB     BADOPR                            ;FREE
F43D E2CC             (       command.os):01052                 FDB     BADOPR                            ;INVALID
                      (       command.os):01053         ;* 'SHOW' OPERAND HANDLERS
F43F                  (       command.os):01054         SHOADR
F43F F2F0             (       command.os):01055                 FDB     SHFLAG                            ;MESSAGE
F441 F2F0             (       command.os):01056                 FDB     SHFLAG                            ;DEBUG
F443 F2F0             (       command.os):01057                 FDB     SHFLAG                            ;TRACE
F445 F1AA             (       command.os):01058                 FDB     SHOW0                             ;DEFAULT
F447 F1AF             (       command.os):01059                 FDB     SHOW1                             ;SYSTEM
F449 F1D3             (       command.os):01060                 FDB     SHOW2                             ;FILE
F44B F273             (       command.os):01061                 FDB     SHOW3                             ;DRIVE
F44D F30E             (       command.os):01062                 FDB     SHOW4                             ;MEMORY
F44F F2DD             (       command.os):01063                 FDB     SHOW5                             ;CONSOLE
F451 F366             (       command.os):01064                 FDB     SHOW6                             ;FREE
F453 E2CC             (       command.os):01065                 FDB     BADOPR                            ;INVALID
                      (       command.os):01066         ;* 'SET FILE' OPTIONS
F455                  (       command.os):01067         SFTAB
F455 81               (       command.os):01068                 FCB     $81
F456 4C4F41445F414444 (       command.os):01069                 FCC     'LOAD_ADDRESS'
     52455353
F462 81               (       command.os):01070                 FCB     $81
F463 50524F5445435449 (       command.os):01071                 FCC     'PROTECTION'
     4F4E
F46D 80               (       command.os):01072                 FCB     $80
                      (       command.os):01073         ;* 'INITIALIZE' OPTIONS
F46E                  (       command.os):01074         INITAB
F46E 81               (       command.os):01075                 FCB     $81
F46F 496E7465726C6561 (       command.os):01076                 FCC     'Interleave'
     7665
F479 81               (       command.os):01077                 FCB     $81
F47A 4469726563746F72 (       command.os):01078                 FCC     'Directory extension'
     7920657874656E73
     696F6E
                      (       command.os):01079         ;* 'SET DISK' OPTIONS
F48D                  (       command.os):01080         SDTAB
F48D 81               (       command.os):01081                 FCB     $81
F48E 41646472657373   (       command.os):01082                 FCC     'Address'
F495 81               (       command.os):01083                 FCB     $81
F496 43796C696E646572 (       command.os):01084                 FCC     'Cylinders'
     73
F49F 81               (       command.os):01085                 FCB     $81
F4A0 4865616473       (       command.os):01086                 FCC     'Heads'
F4A5 81               (       command.os):01087                 FCB     $81
F4A6 536563746F72732F (       command.os):01088                 FCC     'Sectors/Track'
     547261636B
F4B3 80               (       command.os):01089                 FCB     $80
                      (       command.os):01090         ;* FLAG ON/OFF TABLE
F4B4                  (       command.os):01091         OOTAB
F4B4 82               (       command.os):01092                 FCB     $82
F4B5 4F4646           (       command.os):01093                 FCC     'OFF'
F4B8 82               (       command.os):01094                 FCB     $82
F4B9 4F4E             (       command.os):01095                 FCC     'ON'
F4BB 80               (       command.os):01096                 FCB     $80
                      (       command.os):01097         ;* 'SET CONSOLE' OPTIONS
F4BC                  (       command.os):01098         IOTAB
F4BC 81               (       command.os):01099                 FCB     $81
F4BD 496E707574       (       command.os):01100                 FCC     'Input'
F4C2 81               (       command.os):01101                 FCB     $81
F4C3 4F7574707574     (       command.os):01102                 FCC     'Output'
F4C9 80               (       command.os):01103                 FCB     $80
                      (        cubix.asm):01206                 INCLUDE comfile.os                        ;BATCH FILE PROCESSOR
                      (       comfile.os):00001         ;*
                      (       comfile.os):00002         ;* CUBIX Command (batch) file processor
                      (       comfile.os):00003         ;*
                      (       comfile.os):00004         ;* END OF FILE ON COMMAND FILE
F4CA                  (       comfile.os):00005         CMDEOF
F4CA 3506             (       comfile.os):00006                 PULS    A,B
F4CC FDDCEE           (       comfile.os):00007                 STD     >CMDSTK
F4CF B6DCF0           (       comfile.os):00008                 LDA     >CMDRC
F4D2 39               (       comfile.os):00009                 RTS
                      (       comfile.os):00010         ;*
                      (       comfile.os):00011         ;* COMMAND FILE PROCESSOR
                      (       comfile.os):00012         ;*
F4D3                  (       comfile.os):00013         COMFIL
F4D3 3121             (       comfile.os):00014                 LEAY    1,Y                               ;SKIP '@'
F4D5 B7DCD5           (       comfile.os):00015                 STA     >TEMP1                            ;INDICATE NOT IMPLIED
F4D8                  (       comfile.os):00016         CMDEX
F4D8 BDE3C4           (       comfile.os):00017                 JSR     GETDIR                            ;GET DIRECTORY
F4DB BDE2B2           (       comfile.os):00018                 JSR     NAMGET                            ;GET NAME
F4DE CC4000           (       comfile.os):00019                 LDD     #$4000                            ;'@'
F4E1 ED81             (       comfile.os):00020                 STD     ,X++                              ;SET IT
F4E3 6F80             (       comfile.os):00021                 CLR     ,X+                               ;ZERO LAST
F4E5 BDE66D           (       comfile.os):00022                 JSR     LOCERR                            ;LOOK IT UP
                      (       comfile.os):00023         ;* START UP COMMAND FILE DIR ENT(X)
F4E8                  (       comfile.os):00024         COMGO
F4E8 A68817           (       comfile.os):00025                 LDA     DATTR,X                           ;GET PROTS
F4EB 8520             (       comfile.os):00026                 BITA    #EPERM                            ;CAN WE EXECUTE?
F4ED 1027F3D5         (       comfile.os):00027                 LBEQ    PROERR                            ;NO, ERROR
F4F1 B6DCBF           (       comfile.os):00028                 LDA     >FDRIVE                           ;GET COMMAND FILE DRIVE
F4F4 B7DCE9           (       comfile.os):00029                 STA     >CMDDRV                           ;SAVE IT
F4F7 EC8813           (       comfile.os):00030                 LDD     DDADR,X                           ;GET ADDRESS
F4FA FDDCEA           (       comfile.os):00031                 STD     >CMDSEC                           ;SAVE COMMAND SECTOR
F4FD 4F               (       comfile.os):00032                 CLRA
F4FE 5F               (       comfile.os):00033                 CLRB
F4FF FDDCEC           (       comfile.os):00034                 STD     >CMDOFF                           ;SAVE COMMAND FILE OFFSET
F502 FCDCEE           (       comfile.os):00035                 LDD     >CMDSTK                           ;GET COMMAND STACK
F505 3406             (       comfile.os):00036                 PSHS    A,B                               ;SAVE OLD STACK
F507 7FDCF0           (       comfile.os):00037                 CLR     >CMDRC                            ;CLEAR RETURN CODE
F50A 10BEDCD7         (       comfile.os):00038                 LDY     >TEMP2                            ;RESTORE COMMAND LINE POINTER
F50E BDF60D           (       comfile.os):00039                 JSR     SAVPRM                            ;SAVE PARAMETERS
F511                  (       comfile.os):00040         NEWLIN
F511 8EDC00           (       comfile.os):00041                 LDX     #INBUFF                           ;PT TO BUFFER
F514                  (       comfile.os):00042         REDCHR
F514 BDF681           (       comfile.os):00043                 JSR     RCCHR                             ;READ CHAR FROM CMD FILE
F517 27B1             (       comfile.os):00044                 BEQ     CMDEOF                            ;END OF FILE
F519 813F             (       comfile.os):00045                 CMPA    #'?'                              ;PARM?
F51B 262D             (       comfile.os):00046                 BNE     NOMAC                             ;NOPE
F51D BDF681           (       comfile.os):00047                 JSR     RCCHR                             ;GET CHAR
F520 8030             (       comfile.os):00048                 SUBA    #'0'                              ;CONVERT
F522 8109             (       comfile.os):00049                 CMPA    #9                                ;OVER
F524 2308             (       comfile.os):00050                 BLS     PAROK                             ;OK
F526 C63F             (       comfile.os):00051                 LDB     #'?'
F528 E780             (       comfile.os):00052                 STB     ,X+
F52A 8B30             (       comfile.os):00053                 ADDA    #'0'
F52C 201C             (       comfile.os):00054                 BRA     NOMAC                             ;NOT VAR
                      (       comfile.os):00055         ;* PARAMETER SUB TO PERFORM
F52E                  (       comfile.os):00056         PAROK
F52E 1F89             (       comfile.os):00057                 TFR     A,B                               ;COPY
F530 108EDCF5         (       comfile.os):00058                 LDY     #CMDBUF                           ;POINT TO BUFFER
F534                  (       comfile.os):00059         PAR1
F534 BDE4F0           (       comfile.os):00060                 JSR     SKIP                              ;ADVANCE
F537 5A               (       comfile.os):00061                 DECB                                      ;REDUCE COUNT
F538 2B07             (       comfile.os):00062                 BMI     PAR3                              ;WE HAVE IT
F53A                  (       comfile.os):00063         PAR2
F53A BDE4FD           (       comfile.os):00064                 JSR     TSTERM                            ;KEEP LOOKING
F53D 26FB             (       comfile.os):00065                 BNE     PAR2                              ;KEEP LOOKING
F53F 20F3             (       comfile.os):00066                 BRA     PAR1                              ;CONTINUE
F541                  (       comfile.os):00067         PAR3
F541 BDE4FD           (       comfile.os):00068                 JSR     TSTERM                            ;IS THIS
F544 27CE             (       comfile.os):00069                 BEQ     REDCHR                            ;YES, QUIT
F546 A780             (       comfile.os):00070                 STA     ,X+                               ;SAVE
F548 20F7             (       comfile.os):00071                 BRA     PAR3
                      (       comfile.os):00072         ;* EXECUTE COMMAND
F54A                  (       comfile.os):00073         NOMAC
F54A A780             (       comfile.os):00074                 STA     ,X+                               ;CLEAR IT
F54C 810D             (       comfile.os):00075                 CMPA    #$0D                              ;END OF LINE?
F54E 26C4             (       comfile.os):00076                 BNE     REDCHR
F550 108EDC00         (       comfile.os):00077                 LDY     #INBUFF                           ;POINT TO BUFFER
F554 7DDCA4           (       comfile.os):00078                 TST     >TRCFLG                           ;TEST FOR TRACE ON
F557 2717             (       comfile.os):00079                 BEQ     GOCMD                             ;NO, DON'T TRACE
F559 862A             (       comfile.os):00080                 LDA     #'*'
F55B BDE5AE           (       comfile.os):00081                 JSR     PUTCHR                            ;FAKE DOS PROMPT
F55E 1F21             (       comfile.os):00082                 TFR     Y,X                               ;COPY
F560                  (       comfile.os):00083         TRAC1
F560 A680             (       comfile.os):00084                 LDA     ,X+
F562 2709             (       comfile.os):00085                 BEQ     TRAC2
F564 810D             (       comfile.os):00086                 CMPA    #$0D
F566 2705             (       comfile.os):00087                 BEQ     TRAC2
F568 BDE5AE           (       comfile.os):00088                 JSR     PUTCHR
F56B 20F3             (       comfile.os):00089                 BRA     TRAC1
F56D                  (       comfile.os):00090         TRAC2
F56D BDE59C           (       comfile.os):00091                 JSR     LFCR
F570                  (       comfile.os):00092         GOCMD
F570 BDE4F0           (       comfile.os):00093                 JSR     SKIP                              ;ADVANCE
F573 813F             (       comfile.os):00094                 CMPA    #'?'                              ;COMMAND CODE
F575 2659             (       comfile.os):00095                 BNE     EXDCOM                            ;NO, SKIP IT
F577 ECA1             (       comfile.os):00096                 LDD     ,Y++                              ;GET OPERAND
F579 BDE4F0           (       comfile.os):00097                 JSR     SKIP
                      (       comfile.os):00098         ;* '?O' OUTPUT LINE
F57C C14F             (       comfile.os):00099                 CMPB    #'O'                              ;OUTPUT?
F57E 2704             (       comfile.os):00100                 BEQ     CMPR
                      (       comfile.os):00101         ;* '?P' ONTPUT LINE - CR
F580 C150             (       comfile.os):00102                 CMPB    #'P'                              ;PRINT?
F582 2616             (       comfile.os):00103                 BNE     RCOND                             ;CONDITIONAL
F584                  (       comfile.os):00104         CMPR
F584 A6A0             (       comfile.os):00105                 LDA     ,Y+                               ;GET LINE
F586 2709             (       comfile.os):00106                 BEQ     CMPR1
F588 810D             (       comfile.os):00107                 CMPA    #$0D
F58A 2705             (       comfile.os):00108                 BEQ     CMPR1
F58C BDE5AE           (       comfile.os):00109                 JSR     PUTCHR
F58F 20F3             (       comfile.os):00110                 BRA     CMPR
F591                  (       comfile.os):00111         CMPR1
F591 C14F             (       comfile.os):00112                 CMPB    #'O'                              ;OUTPUT?
F593 2766             (       comfile.os):00113                 BEQ     CMDRT1                            ;NO LFCR
F595 BDE59C           (       comfile.os):00114                 JSR     LFCR
F598 2061             (       comfile.os):00115                 BRA     CMDRT1                            ;BACK
                      (       comfile.os):00116         ;* '?F' EXECUTE ON LAST COMMAND FAILED
F59A                  (       comfile.os):00117         RCOND
F59A C146             (       comfile.os):00118                 CMPB    #'F'                              ;?F?
F59C 2607             (       comfile.os):00119                 BNE     RSUCC                             ;NO
F59E B6DCF0           (       comfile.os):00120                 LDA     >CMDRC                            ;GET RC
F5A1 2758             (       comfile.os):00121                 BEQ     CMDRT1                            ;RETURN
F5A3 20CB             (       comfile.os):00122                 BRA     GOCMD                             ;EXECUTE THIS
                      (       comfile.os):00123         ;* '?S' EXECUTE ON LAST COMMAND SUCESSFUL
F5A5                  (       comfile.os):00124         RSUCC
F5A5 C153             (       comfile.os):00125                 CMPB    #'S'                              ;?S?
F5A7 2603             (       comfile.os):00126                 BNE     CSRC                              ;NO, TRY EXIT
F5A9 5F               (       comfile.os):00127                 CLRB
F5AA 2009             (       comfile.os):00128                 BRA     TSTRET                            ;PEFORM TEST
                      (       comfile.os):00129         ;* '?R' EXECUTE ON SPECIFIC RETURN CODE
F5AC                  (       comfile.os):00130         CSRC
F5AC C152             (       comfile.os):00131                 CMPB    #'R'                              ;?R?
F5AE 260C             (       comfile.os):00132                 BNE     CEXIT                             ;TRY EXIT
F5B0 BDE425           (       comfile.os):00133                 JSR     GETNUM                            ;GET VALUE
F5B3 1F10             (       comfile.os):00134                 TFR     X,D                               ;COPY
F5B5                  (       comfile.os):00135         TSTRET
F5B5 F1DCF0           (       comfile.os):00136                 CMPB    >CMDRC                            ;WUZ THIS IT?
F5B8 2641             (       comfile.os):00137                 BNE     CMDRT1                            ;NO, DONT EXECUTE
F5BA 20B4             (       comfile.os):00138                 BRA     GOCMD                             ;DO IT
                      (       comfile.os):00139         ;* '?E' EXIT COMMAND FILE
F5BC                  (       comfile.os):00140         CEXIT
F5BC C145             (       comfile.os):00141                 CMPB    #'E'                              ;EXIT
F5BE 263E             (       comfile.os):00142                 BNE     CMDIN                             ;NO, TRY SET VARIABLES
F5C0 BDE4F0           (       comfile.os):00143                 JSR     SKIP                              ;ANY OPERANDS
F5C3 2708             (       comfile.os):00144                 BEQ     CEXI                              ;NO
F5C5 BDE425           (       comfile.os):00145                 JSR     GETNUM                            ;GT VALUE
F5C8 1F10             (       comfile.os):00146                 TFR     X,D                               ;COPY
F5CA F7DCF0           (       comfile.os):00147                 STB     >CMDRC                            ;SET IT
F5CD                  (       comfile.os):00148         CEXI
F5CD 7EF4CA           (       comfile.os):00149                 JMP     CMDEOF                            ;END OF FILE
                      (       comfile.os):00150         ;* EXECUTE DOS COMMAND
F5D0                  (       comfile.os):00151         EXDCOM
F5D0 BEDCEC           (       comfile.os):00152                 LDX     >CMDOFF                           ;GET OFFSET
F5D3 FCDCEA           (       comfile.os):00153                 LDD     >CMDSEC                           ;GET SECTOR
F5D6 3416             (       comfile.os):00154                 PSHS    A,B,X                             ;SAVE
F5D8 B6DCE9           (       comfile.os):00155                 LDA     >CMDDRV                           ;GET DRIVE
F5DB 3402             (       comfile.os):00156                 PSHS    A                                 ;SAVE
F5DD 10FFDCEE         (       comfile.os):00157                 STS     >CMDSTK                           ;SET STACK
F5E1 BDE1E1           (       comfile.os):00158                 JSR     EXECMD                            ;EXECUTE
F5E4                  (       comfile.os):00159         CMDRET
F5E4 2601             (       comfile.os):00160                 BNE     CMDRT0
F5E6 4F               (       comfile.os):00161                 CLRA
F5E7                  (       comfile.os):00162         CMDRT0
F5E7 B7DCF0           (       comfile.os):00163                 STA     >CMDRC                            ;SET RC
F5EA 10FEDCEE         (       comfile.os):00164                 LDS     >CMDSTK                           ;GET STACK
F5EE 3502             (       comfile.os):00165                 PULS    A                                 ;RESTORE DRIVE
F5F0 B7DCE9           (       comfile.os):00166                 STA     >CMDDRV                           ;RESAVE
F5F3 3516             (       comfile.os):00167                 PULS    A,B,X                             ;RESTORE VARS
F5F5 FDDCEA           (       comfile.os):00168                 STD     >CMDSEC                           ;RESET SECTOR
F5F8 BFDCEC           (       comfile.os):00169                 STX     >CMDOFF                           ;RESET OFFSET
F5FB                  (       comfile.os):00170         CMDRT1
F5FB 7EF511           (       comfile.os):00171                 JMP     NEWLIN                            ;LFCR & RETURN
                      (       comfile.os):00172         ;* '?=' SET COMMAND FILE VARIABLES
F5FE                  (       comfile.os):00173         CMDIN
F5FE C13D             (       comfile.os):00174                 CMPB    #'='
F600 2707             (       comfile.os):00175                 BEQ     SETVAR                            ;SET THEM
                      (       comfile.os):00176         ;* '?I' INPUT NEW PARMS
F602 C149             (       comfile.os):00177                 CMPB    #'I'                              ;NEW PARMS?
F604 2618             (       comfile.os):00178                 BNE     CHAIN                             ;NO, TRY CHAIN
F606 BDE4B9           (       comfile.os):00179                 JSR     GLINE                             ;GET LINE
F609                  (       comfile.os):00180         SETVAR
F609 8D02             (       comfile.os):00181                 BSR     SAVPRM                            ;SAVE THEM
F60B 20EE             (       comfile.os):00182                 BRA     CMDRT1                            ;CONTINUE
                      (       comfile.os):00183         ;* SAVE COMMAND LINE PARAMETERS IN BUFFER
F60D                  (       comfile.os):00184         SAVPRM
F60D 3410             (       comfile.os):00185                 PSHS    X                                 ;SAVE REGS
F60F 8EDCF5           (       comfile.os):00186                 LDX     #CMDBUF                           ;POINT TO IT
F612                  (       comfile.os):00187         SAVP1
F612 A6A0             (       comfile.os):00188                 LDA     ,Y+                               ;GET IT
F614 A780             (       comfile.os):00189                 STA     ,X+                               ;WRITE IT
F616 2704             (       comfile.os):00190                 BEQ     SAVP2                             ;END
F618 810D             (       comfile.os):00191                 CMPA    #$0D                              ;OK?
F61A 26F6             (       comfile.os):00192                 BNE     SAVP1                             ;KEEP GOING
F61C                  (       comfile.os):00193         SAVP2
F61C 3590             (       comfile.os):00194                 PULS    X,PC                              ;GO HOME
                      (       comfile.os):00195         ;* '?@' CHAIN TO NEW CMD FILE
F61E                  (       comfile.os):00196         CHAIN
F61E C140             (       comfile.os):00197                 CMPB    #'@'
F620 2608             (       comfile.os):00198                 BNE     CMDSKP
F622 3506             (       comfile.os):00199                 PULS    A,B                               ;RESTORE STACK
F624 FDDCEE           (       comfile.os):00200                 STD     >CMDSTK                           ;RESET SAVED STACK
F627 7EF4D8           (       comfile.os):00201                 JMP     CMDEX                             ;EXECUTE IT
                      (       comfile.os):00202         ;* '?A' ADVANCE LINES
F62A                  (       comfile.os):00203         CMDSKP
F62A C141             (       comfile.os):00204                 CMPB    #'A'                              ;?A?
F62C 2613             (       comfile.os):00205                 BNE     CMDKEY                            ;CONTINUE
F62E BDE425           (       comfile.os):00206                 JSR     GETNUM                            ;GET # TO SKIP
F631 3001             (       comfile.os):00207                 LEAX    1,X                               ;ADVANCE
F633                  (       comfile.os):00208         LOCLP
F633 301F             (       comfile.os):00209                 LEAX    -1,X                              ;REDUCE COUNT
F635 27C4             (       comfile.os):00210                 BEQ     CMDRT1                            ;NEW LINE
F637                  (       comfile.os):00211         LOCCR
F637 8D48             (       comfile.os):00212                 BSR     RCCHR                             ;READ A CHAR
F639 2792             (       comfile.os):00213                 BEQ     CEXI                              ;END OF FILE
F63B 810D             (       comfile.os):00214                 CMPA    #$0D                              ;END OF LINE?
F63D 26F8             (       comfile.os):00215                 BNE     LOCCR                             ;NO, KEEP LOOKING
F63F 20F2             (       comfile.os):00216                 BRA     LOCLP                             ;DO THEM ALL
                      (       comfile.os):00217         ;* '?K' READ SINGLE KEY
F641                  (       comfile.os):00218         CMDKEY
F641 C14B             (       comfile.os):00219                 CMPB    #'K'                              ;?K?
F643 2608             (       comfile.os):00220                 BNE     CMDCMP                            ;NO, TRY COMPARE
F645 BDE5EE           (       comfile.os):00221                 JSR     GETCHR                            ;GET SINGLE KEY
F648 B7DCF0           (       comfile.os):00222                 STA     >CMDRC                            ;SAVE RETURN CODE
F64B 2031             (       comfile.os):00223                 BRA     CMDRT2                            ;EXIT
                      (       comfile.os):00224         ;* '??' COMPARE STRINGS
F64D                  (       comfile.os):00225         CMDCMP
F64D C13F             (       comfile.os):00226                 CMPB    #'?'                              ;???
F64F 262D             (       comfile.os):00227                 BNE     CMDRT2                            ;IGNORE
F651 BDE4F0           (       comfile.os):00228                 JSR     SKIP                              ;TEST FOR EOL
F654 2716             (       comfile.os):00229                 BEQ     CMDC3                             ;FAIL
F656 1F21             (       comfile.os):00230                 TFR     Y,X                               ;SAVE PTR
F658                  (       comfile.os):00231         CMDC1
F658 A6A0             (       comfile.os):00232                 LDA     ,Y+                               ;GET CHAR
F65A 810D             (       comfile.os):00233                 CMPA    #$0D                              ;CR?
F65C 270E             (       comfile.os):00234                 BEQ     CMDC3                             ;FAIL
F65E 8120             (       comfile.os):00235                 CMPA    #' '                              ;SPACE?
F660 26F6             (       comfile.os):00236                 BNE     CMDC1                             ;KEEP LOOKING
F662                  (       comfile.os):00237         CMDC2
F662 A680             (       comfile.os):00238                 LDA     ,X+                               ;GET CHAR
F664 8120             (       comfile.os):00239                 CMPA    #' '                              ;SPACE?
F666 2708             (       comfile.os):00240                 BEQ     CMDC4                             ;END
F668 A1A0             (       comfile.os):00241                 CMPA    ,Y+                               ;ARE THEY SAME?
F66A 27F6             (       comfile.os):00242                 BEQ     CMDC2                             ;YES, A-OK
F66C                  (       comfile.os):00243         CMDC3
F66C 86FF             (       comfile.os):00244                 LDA     #255                              ;RETURN CODE
F66E 200B             (       comfile.os):00245                 BRA     CMDC6                             ;QUIT
F670                  (       comfile.os):00246         CMDC4
F670 A6A0             (       comfile.os):00247                 LDA     ,Y+                               ;GET CHAR FROM SOURCE
F672 810D             (       comfile.os):00248                 CMPA    #$0D                              ;PASS?
F674 2704             (       comfile.os):00249                 BEQ     CMDC5                             ;YES
F676 8120             (       comfile.os):00250                 CMPA    #' '                              ;SPACE
F678 26F2             (       comfile.os):00251                 BNE     CMDC3                             ;NO, FAIL
F67A                  (       comfile.os):00252         CMDC5
F67A 4F               (       comfile.os):00253                 CLRA                                      ;ZERO RETURN CODE
F67B                  (       comfile.os):00254         CMDC6
F67B B7DCF0           (       comfile.os):00255                 STA     >CMDRC                            ;SAVE RETURN CODE
F67E                  (       comfile.os):00256         CMDRT2
F67E 7EF511           (       comfile.os):00257                 JMP     NEWLIN                            ;NEXT LINE
                      (       comfile.os):00258         ;* READ A CHARACTER FROM THE COMMAND FILE
F681                  (       comfile.os):00259         RCCHR
F681 3410             (       comfile.os):00260                 PSHS    X                                 ;SAVE X
F683 B6DCE9           (       comfile.os):00261                 LDA     >CMDDRV                           ;GET CMD FILE DRIVE
F686 B7DCF3           (       comfile.os):00262                 STA     >SDRIVE                           ;SET DRIVE
F689 FCDCEC           (       comfile.os):00263                 LDD     >CMDOFF                           ;GET OFFSET
F68C                  (       comfile.os):00264         RCC1
F68C 10830200         (       comfile.os):00265                 CMPD    #512                              ;OVER?
F690 250D             (       comfile.os):00266                 BLO     RCC2                              ;ITS OK
F692 FCDCEA           (       comfile.os):00267                 LDD     >CMDSEC                           ;GET SECTOR
F695 BDE5F3           (       comfile.os):00268                 JSR     FNDLNK                            ;LOOK UP LINK
F698 271E             (       comfile.os):00269                 BEQ     RCC3                              ;END
F69A FDDCEA           (       comfile.os):00270                 STD     >CMDSEC                           ;RESAVE
F69D 4F               (       comfile.os):00271                 CLRA    ZERO OFFSET
F69E 5F               (       comfile.os):00272                 CLRB    FOR READ
F69F                  (       comfile.os):00273         RCC2
F69F 8EDE00           (       comfile.os):00274                 LDX     #WRKSPC                           ;POINT TO IT
F6A2 308B             (       comfile.os):00275                 LEAX    D,X                               ;OFFSET
F6A4 C30001           (       comfile.os):00276                 ADDD    #1                                ;ADVANCE
F6A7 FDDCEC           (       comfile.os):00277                 STD     >CMDOFF                           ;RESAVE
F6AA 3410             (       comfile.os):00278                 PSHS    X                                 ;SAVE REGS
F6AC FCDCEA           (       comfile.os):00279                 LDD     >CMDSEC                           ;GET SECTOR
F6AF BDE610           (       comfile.os):00280                 JSR     RDWRK                             ;READ IT
F6B2 3510             (       comfile.os):00281                 PULS    X                                 ;RESTORE
F6B4 A680             (       comfile.os):00282                 LDA     ,X+                               ;GET CHAR
F6B6 81FF             (       comfile.os):00283                 CMPA    #$FF                              ;END OF FILE
F6B8                  (       comfile.os):00284         RCC3
F6B8 3590             (       comfile.os):00285                 PULS    X,PC
                      (        cubix.asm):01207         ;*
                      (        cubix.asm):01208         ;* MISC SYSTEM CALLS
                      (        cubix.asm):01209         ;*
                      (        cubix.asm):01210         ;* QUERY CONSOLE INPUT DEVICE
F6BA                  (        cubix.asm):01211         REDIN
F6BA B6DC6C           (        cubix.asm):01212                 LDA     >CONIN                            ;LOAD DEVICE INPUT VECTOR
F6BD 2020             (        cubix.asm):01213                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01214         ;* QUERY CONSOLE OUTPUT DEVICE
F6BF                  (        cubix.asm):01215         REDOUT
F6BF B6DC6D           (        cubix.asm):01216                 LDA     >CONOUT                           ;LOAD DEVICE OUTPUT VECTOR
F6C2 201B             (        cubix.asm):01217                 BRA     RETZ                              ;RETURN SUCCESS
                      (        cubix.asm):01218         ;* SET CONSOLE INPUT DEVICE
F6C4                  (        cubix.asm):01219         SETIN
F6C4 3404             (        cubix.asm):01220                 PSHS    B                                 ;SAVE REGISTER
F6C6 F6DC6C           (        cubix.asm):01221                 LDB     >CONIN                            ;LOAD OLD INPUT DEVICE
F6C9 B7DC6C           (        cubix.asm):01222                 STA     >CONIN                            ;SAVE NEW INPUT DEVICE
F6CC 2008             (        cubix.asm):01223                 BRA     REEXG                             ;SWAP & RETURN
                      (        cubix.asm):01224         ;* SET CONSOLE OUTPUT DEVICE
F6CE                  (        cubix.asm):01225         SETOUT
F6CE 3404             (        cubix.asm):01226                 PSHS    B                                 ;SAVE REGISTER
F6D0 F6DC6D           (        cubix.asm):01227                 LDB     >CONOUT                           ;LOAD OLD OUTPUT DEVICE
F6D3 B7DC6D           (        cubix.asm):01228                 STA     >CONOUT                           ;SAVE NEW OUTPUT DEVICE
F6D6                  (        cubix.asm):01229         REEXG
F6D6 1F98             (        cubix.asm):01230                 TFR     B,A                               ;COPY OLD DEVICE ID TO 'A'
F6D8 1A04             (        cubix.asm):01231                 ORCC    #4                                ;SET 'Z' CODE
F6DA 3584             (        cubix.asm):01232                 PULS    B,PC                              ;RESTORE & RETURN
                      (        cubix.asm):01233         ;* SELECT DISK DRIVE
F6DC                  (        cubix.asm):01234         SELDRV
F6DC B7DCF3           (        cubix.asm):01235                 STA     >SDRIVE                           ;SELECT ACTIVE DISK DRIVE
F6DF                  (        cubix.asm):01236         RETZ
F6DF 1A04             (        cubix.asm):01237                 ORCC    #4                                ;SET 'Z' CODE
F6E1 39               (        cubix.asm):01238                 RTS
                      (        cubix.asm):01239         ;* QUERY DEVICE VECTOR
F6E2                  (        cubix.asm):01240         QVECT
F6E2 3440             (        cubix.asm):01241                 PSHS    U                                 ;SAVE REGISTER
F6E4 CEDC6E           (        cubix.asm):01242                 LDU     #DITAB                            ;POINT TO TABLE
F6E7 48               (        cubix.asm):01243                 LSLA                                      ;X2 FOR WORD ENTRIES
F6E8 ECC6             (        cubix.asm):01244                 LDD     A,U                               ;GET VECTOR
F6EA 200C             (        cubix.asm):01245                 BRA     RETZ1                             ;AND EXIT
                      (        cubix.asm):01246         ;* SET DEVICE VECTOR
F6EC                  (        cubix.asm):01247         SVECT
F6EC 3440             (        cubix.asm):01248                 PSHS    U                                 ;SAVE REGISTER
F6EE CEDC6E           (        cubix.asm):01249                 LDU     #DITAB                            ;POINT TO TABLE
F6F1 48               (        cubix.asm):01250                 LSLA                                      ;X2  FOR WORD ENTRIES
F6F2 33C6             (        cubix.asm):01251                 LEAU    A,U                               ;OFFSET TO ENTRY
F6F4 ECC4             (        cubix.asm):01252                 LDD     ,U                                ;GET OLD VECTOR VALUE
F6F6 AFC4             (        cubix.asm):01253                 STX     ,U                                ;SET NEW VECTOR VALUE
F6F8                  (        cubix.asm):01254         RETZ1
F6F8 1A04             (        cubix.asm):01255                 ORCC    #4                                ;SET 'Z' CODE
F6FA 35C0             (        cubix.asm):01256                 PULS    U,PC                              ;RESTORE & RETURN
F6FC                  (        cubix.asm):01257         GETDRVTBL                                         ;SSR 111-GET DRIVE TABLE
F6FC CCDCB7           (        cubix.asm):01258                 LDD     #DRIVEMAP
F6FF 39               (        cubix.asm):01259                 RTS
F700                  (        cubix.asm):01260         GETDRVPTBL                                        ;SSR 112-GET DRIVE PARAMETER TABLE
F700 CCDC50           (        cubix.asm):01261                 LDD     #DCTRL
F703 39               (        cubix.asm):01262                 RTS
                      (        cubix.asm):01263         ;*
                      (        cubix.asm):01264         ;* PERFORMS 16 BIT MULTIPLICATION (D=X*D)
                      (        cubix.asm):01265         ;*
F704                  (        cubix.asm):01266         MUL16
F704 3416             (        cubix.asm):01267                 PSHS    D,X                               ;SAVE PARAMETERS
F706 A661             (        cubix.asm):01268                 LDA     1,S
F708 E663             (        cubix.asm):01269                 LDB     3,S
F70A 3D               (        cubix.asm):01270                 MUL
F70B 3406             (        cubix.asm):01271                 PSHS    A,B                               ;RESAVE
F70D A662             (        cubix.asm):01272                 LDA     2,S
F70F E665             (        cubix.asm):01273                 LDB     5,S
F711 3D               (        cubix.asm):01274                 MUL
F712 EBE4             (        cubix.asm):01275                 ADDB    ,S
F714 E7E4             (        cubix.asm):01276                 STB     ,S
F716 A663             (        cubix.asm):01277                 LDA     3,S
F718 E664             (        cubix.asm):01278                 LDB     4,S
F71A 3D               (        cubix.asm):01279                 MUL
F71B EBE4             (        cubix.asm):01280                 ADDB    ,S
F71D E7E4             (        cubix.asm):01281                 STB     ,S
F71F 3506             (        cubix.asm):01282                 PULS    A,B                               ;GET RESULT
F721 3264             (        cubix.asm):01283                 LEAS    4,S                               ;SKIP CRAP
F723 39               (        cubix.asm):01284                 RTS
                      (        cubix.asm):01285         ;*
                      (        cubix.asm):01286         ;* PERFORMS 16 BIT DIVISION. (X=X/D, D=REMAINDER)
                      (        cubix.asm):01287         ;*
F724                  (        cubix.asm):01288         DIV16
F724 3416             (        cubix.asm):01289                 PSHS    D,X
F726 CC0000           (        cubix.asm):01290                 LDD     #0
F729 8E0011           (        cubix.asm):01291                 LDX     #17
F72C                  (        cubix.asm):01292         DIV1
F72C 1CFE             (        cubix.asm):01293                 ANDCC   #$FE
F72E                  (        cubix.asm):01294         DIV2
F72E 6963             (        cubix.asm):01295                 ROL     3,S
F730 6962             (        cubix.asm):01296                 ROL     2,S
F732 301F             (        cubix.asm):01297                 LEAX    -1,X
F734 270D             (        cubix.asm):01298                 BEQ     DIV3
F736 59               (        cubix.asm):01299                 ROLB
F737 49               (        cubix.asm):01300                 ROLA
F738 10A3E4           (        cubix.asm):01301                 CMPD    ,S
F73B 25EF             (        cubix.asm):01302                 BLO     DIV1
F73D A3E4             (        cubix.asm):01303                 SUBD    ,S
F73F 1A01             (        cubix.asm):01304                 ORCC    #1
F741 20EB             (        cubix.asm):01305                 BRA     DIV2
F743                  (        cubix.asm):01306         DIV3
F743 3262             (        cubix.asm):01307                 LEAS    2,S
F745 3590             (        cubix.asm):01308                 PULS    X,PC
                      (        cubix.asm):01309         ;* DISK DRIVERS
F747                  (        cubix.asm):01310         FORMAT
F747 AD9FDC94         (        cubix.asm):01311                 JSR     [XFORMAT]
F74B                  (        cubix.asm):01312         HOME
F74B 6F44             (        cubix.asm):01313                 CLR     CYL,U                             ;CYLINDER 0
F74D 6F45             (        cubix.asm):01314                 CLR     HEAD,U                            ;HEAD 0
F74F 6F46             (        cubix.asm):01315                 CLR     SEC,U                             ;SECTOR 0
F751 6E9FDC8E         (        cubix.asm):01316                 JMP     [XHOME]
F755                  (        cubix.asm):01317         RDSEC
F755 6E9FDC90         (        cubix.asm):01318                 JMP     [XRDSEC]
F759                  (        cubix.asm):01319         WRSEC
F759 6E9FDC92         (        cubix.asm):01320                 JMP     [XWRSEC]
                      (        cubix.asm):01321         ;* INTERRUPT HANDLERS
F75D                  (        cubix.asm):01322         SWI
F75D 6E9FDC96         (        cubix.asm):01323                 JMP     [SWIVEC]
F761                  (        cubix.asm):01324         SWI2
F761 6E9FDC98         (        cubix.asm):01325                 JMP     [SWI2VEC]
F765                  (        cubix.asm):01326         SWI3
F765 6E9FDC9A         (        cubix.asm):01327                 JMP     [SWI3VEC]
F769                  (        cubix.asm):01328         IRQ
F769 6E9FDC9C         (        cubix.asm):01329                 JMP     [IRQVEC]
F76D                  (        cubix.asm):01330         FIRQ
F76D 6E9FDC9E         (        cubix.asm):01331                 JMP     [FIRQVEC]
F771                  (        cubix.asm):01332         NMI
F771 6E9FDCA0         (        cubix.asm):01333                 JMP     [NMIVEC]
                      (        cubix.asm):01334         ;* STRINGS & MESSAGES
F775                  (        cubix.asm):01335         IPLFILE
F775 535441525455502E (        cubix.asm):01336                 FCC     'STARTUP.*'
     2A
F77E 00               (        cubix.asm):01337                 FCB     $00
F77F                  (        cubix.asm):01338         UNCMD
F77F 556E7265636F676E (        cubix.asm):01339                 FCC     'Unrecognized command'
     697A656420636F6D
     6D616E64
F793 00               (        cubix.asm):01340                 FCB     $00
F794                  (        cubix.asm):01341         BADOPM
F794 4F706572616E6420 (        cubix.asm):01342                 FCC     'Operand missing or invalid'
     6D697373696E6720
     6F7220696E76616C
     6964
F7AE 00               (        cubix.asm):01343                 FCB     $00
F7AF                  (        cubix.asm):01344         NOTMSG
F7AF 46696C65206E6F74 (        cubix.asm):01345                 FCC     'File not found'
     20666F756E64
F7BD 00               (        cubix.asm):01346                 FCB     $00
F7BE                  (        cubix.asm):01347         EXIMSG
F7BE 46696C6520616C72 (        cubix.asm):01348                 FCC     'File already exists'
     6561647920657869
     737473
F7D1 00               (        cubix.asm):01349                 FCB     $00
F7D2                  (        cubix.asm):01350         NOSMSG
F7D2 496E737566666963 (        cubix.asm):01351                 FCC     'Insufficent disk space'
     656E74206469736B
     207370616365
F7E8 00               (        cubix.asm):01352                 FCB     $00
F7E9                  (        cubix.asm):01353         OREMSG
F7E9 46696C65206E6F74 (        cubix.asm):01354                 FCC     'File not open for read'
     206F70656E20666F
     722072656164
F7FF 00               (        cubix.asm):01355                 FCB     $00
F800                  (        cubix.asm):01356         OWEMSG
F800 46696C65206E6F74 (        cubix.asm):01357                 FCC     'File not open for write'
     206F70656E20666F
     72207772697465
F817 00               (        cubix.asm):01358                 FCB     $00
F818                  (        cubix.asm):01359         PROMSG
F818 46696C652070726F (        cubix.asm):01360                 FCC     'File protection violation'
     74656374696F6E20
     76696F6C6174696F
     6E
F831 00               (        cubix.asm):01361                 FCB     $00
F832                  (        cubix.asm):01362         DEVMSG
F832 496E76616C696420 (        cubix.asm):01363                 FCC     'Invalid device'
     646576696365
F840 00               (        cubix.asm):01364                 FCB     $00
F841                  (        cubix.asm):01365         DNLMSG
F841 446F776E6C6F6164 (        cubix.asm):01366                 FCC     'Download format error'
     20666F726D617420
     6572726F72
F856 00               (        cubix.asm):01367                 FCB     $00
                      (        cubix.asm):01368         ;* COMMAND NAME TABLE
F857                  (        cubix.asm):01369         CMDNAM
F857 84               (        cubix.asm):01370                 FCB     $84
F858 464F524D4154     (        cubix.asm):01371                 FCC     'FORMAT'
F85E 82               (        cubix.asm):01372                 FCB     $82
F85F 52454144         (        cubix.asm):01373                 FCC     'READ'
F863 82               (        cubix.asm):01374                 FCB     $82
F864 5752495445       (        cubix.asm):01375                 FCC     'WRITE'
F869 82               (        cubix.asm):01376                 FCB     $82
F86A 46494C4553       (        cubix.asm):01377                 FCC     'FILES'
F86F 82               (        cubix.asm):01378                 FCB     $82
F870 435245415445     (        cubix.asm):01379                 FCC     'CREATE'
F876 83               (        cubix.asm):01380                 FCB     $83
F877 44454C455445     (        cubix.asm):01381                 FCC     'DELETE'
F87D 82               (        cubix.asm):01382                 FCB     $82
F87E 4C4F4144         (        cubix.asm):01383                 FCC     'LOAD'
F882 82               (        cubix.asm):01384                 FCB     $82
F883 53415645         (        cubix.asm):01385                 FCC     'SAVE'
F887 82               (        cubix.asm):01386                 FCB     $82
F888 52554E           (        cubix.asm):01387                 FCC     'RUN'
F88B 82               (        cubix.asm):01388                 FCB     $82
F88C 52455455524E     (        cubix.asm):01389                 FCC     'RETURN'
F892 82               (        cubix.asm):01390                 FCB     $82
F893 534554           (        cubix.asm):01391                 FCC     'SET'
F896 82               (        cubix.asm):01392                 FCB     $82
F897 53484F57         (        cubix.asm):01393                 FCC     'SHOW'
F89B 82               (        cubix.asm):01394                 FCB     $82
F89C 444F574E4C4F4144 (        cubix.asm):01395                 FCC     'DOWNLOAD'
F8A4 82               (        cubix.asm):01396                 FCB     $82
F8A5 434F4E4E454354   (        cubix.asm):01397                 FCC     'CONNECT'
F8AC 80               (        cubix.asm):01398                 FCB     $80
                      (        cubix.asm):01399         ;* COMMAND ADDRESS TABLE
F8AD                  (        cubix.asm):01400         CMDADR
F8AD EC17             (        cubix.asm):01401                 FDB     INIT
F8AF ED6D             (        cubix.asm):01402                 FDB     CREAD
F8B1 ED9D             (        cubix.asm):01403                 FDB     CWRITE
F8B3 EDCD             (        cubix.asm):01404                 FDB     FILES
F8B5 EDF1             (        cubix.asm):01405                 FDB     CREFIL
F8B7 EE08             (        cubix.asm):01406                 FDB     DELFIL
F8B9 EEBB             (        cubix.asm):01407                 FDB     LODFIL
F8BB EEEC             (        cubix.asm):01408                 FDB     SAVFIL
F8BD E20B             (        cubix.asm):01409                 FDB     RUN
F8BF EF4D             (        cubix.asm):01410                 FDB     RETURN
F8C1 F066             (        cubix.asm):01411                 FDB     SET
F8C3 F19E             (        cubix.asm):01412                 FDB     SHOW
F8C5 EF74             (        cubix.asm):01413                 FDB     DNLD
F8C7 F042             (        cubix.asm):01414                 FDB     CNCT
     000E             (        cubix.asm):01415         NUMCMD          EQU (*-CMDADR)/2                  ;NUMBER OF COMMANDS
                      (        cubix.asm):01416         ;* APPLICATION PROGRAM INTERFACE ADDRESS TABLE
F8C9                  (        cubix.asm):01417         SSRTAB
F8C9 E1C0             (        cubix.asm):01418                 FDB     REENT                             ;00-DOS RE-ENTRY
                      (        cubix.asm):01419         ;* PARAM. & LINE INPUT
F8CB E4B9             (        cubix.asm):01420                 FDB     GLINE                             ;01-GET LINE/PROMPT
F8CD E4B6             (        cubix.asm):01421                 FDB     GLFCR                             ;02-GET LINE/NEW LINE
F8CF E4BE             (        cubix.asm):01422                 FDB     GLNOP                             ;03-GET LINE/NO PROMPT
F8D1 E4F0             (        cubix.asm):01423                 FDB     SKIP                              ;04-SKIP TO NEXT NON-BLANK, 'Z' IF EOL
F8D3 E4FD             (        cubix.asm):01424                 FDB     TSTERM                            ;05-GET CHR(Y+), TEST FOR TERMINATOR
F8D5 E46A             (        cubix.asm):01425                 FDB     GETDEC                            ;06-GET DECIMAL NUMBER
F8D7 E430             (        cubix.asm):01426                 FDB     GETHEX                            ;07-GET HEX NUMBER
F8D9 E425             (        cubix.asm):01427                 FDB     GETNUM                            ;08-GET DECIMAL OR HEX VALUE
F8DB E38B             (        cubix.asm):01428                 FDB     GETNAM                            ;09-GET FILENAME
F8DD E384             (        cubix.asm):01429                 FDB     GETVAL                            ;10-GET & INSURE SINGLE FILE
F8DF E2AA             (        cubix.asm):01430                 FDB     GETSNA                            ;11-GET FILENAME/NO TYPE
F8E1 E32E             (        cubix.asm):01431                 FDB     GETSYS                            ;12-GET FILENAME/NO TYPE/DEFAULT SYSTEM
F8E3 E331             (        cubix.asm):01432                 FDB     GETSDI                            ;13-GET FILENAME/NO TYPE/DEFAULT(X)
F8E5 E3C4             (        cubix.asm):01433                 FDB     GETDIR                            ;14-GET DIRECTORY NAME
F8E7 E3C7             (        cubix.asm):01434                 FDB     GETDIR1                           ;15-GET DIRECTORY, DEFAULT(X)
F8E9 E413             (        cubix.asm):01435                 FDB     GETDRV                            ;16-GET DRIVE ID
F8EB F0D4             (        cubix.asm):01436                 FDB     GETATR                            ;17-GET ATTRIBUTES
F8ED E519             (        cubix.asm):01437                 FDB     TLOOK                             ;18-TABLE LOOKUP
F8EF E337             (        cubix.asm):01438                 FDB     COMNAM                            ;19-COMPARE NAMES
F8F1 E370             (        cubix.asm):01439                 FDB     VALID                             ;20-TEST FOR VALID AS SINGLE?
                      (        cubix.asm):01440         ;* CONSOLE OUTPUT
F8F3 E5A6             (        cubix.asm):01441                 FDB     SPACE                             ;21-OUTPUT SPACE
F8F5 E59C             (        cubix.asm):01442                 FDB     LFCR                              ;22-OUTPUT LFCR
F8F7 E588             (        cubix.asm):01443                 FDB     WRSTR                             ;23-OUTPUT STRING(X)
F8F9 E562             (        cubix.asm):01444                 FDB     WRLIN                             ;24-OUTPUT STRING(PC)/NO LFCR
F8FB E592             (        cubix.asm):01445                 FDB     WRMSG                             ;25-OUTPUT STRING(PC)/LFCR
F8FD E492             (        cubix.asm):01446                 FDB     WRDEC                             ;26-OUTPUT WORD(D) DECIMAL
F8FF E559             (        cubix.asm):01447                 FDB     WRHEXW                            ;27-OUTPUT WORD(D) IN HEX
F901 E56E             (        cubix.asm):01448                 FDB     WRHEX                             ;28-OUTPUT BYTE(A) IN HEX
F903 E57C             (        cubix.asm):01449                 FDB     HOUT                              ;29-OUTPUT NIBBLE(A) IN HEX
F905 E6EB             (        cubix.asm):01450                 FDB     SHOSAV                            ;30-DISPLAY SAVED FILENAME
F907 E6FE             (        cubix.asm):01451                 FDB     SHONAM                            ;31-DISPLAY FILENAME(X)
F909 F2BF             (        cubix.asm):01452                 FDB     SHOTAB                            ;32-SHOW TABLE(X) ENTRY(A)
                      (        cubix.asm):01453         ;* SERIAL DEVICE I/O
F90B E5AE             (        cubix.asm):01454                 FDB     PUTCHR                            ;33-OUTPUT CHAR(A)
F90D E5EE             (        cubix.asm):01455                 FDB     GETCHR                            ;34-GET A CHAR
F90F E5E7             (        cubix.asm):01456                 FDB     TSTCHR                            ;35-TEST FOR CHAR
F911 E5B5             (        cubix.asm):01457                 FDB     WRDEV                             ;36-OUTPUT CHAR(A) TO DEVICE(B)
F913 E5D0             (        cubix.asm):01458                 FDB     RDDEV                             ;37-GET CHAR FROM DEVICE(B)
F915 E5D5             (        cubix.asm):01459                 FDB     TSTDEV                            ;38-TEST FOR CHAR FROM DEV(B)
F917 F6BA             (        cubix.asm):01460                 FDB     REDIN                             ;39-READ INPUT DEVICE NUMBER
F919 F6BF             (        cubix.asm):01461                 FDB     REDOUT                            ;40-READ OUTPUT DEVICE NUMBER
F91B F6C4             (        cubix.asm):01462                 FDB     SETIN                             ;41-SET INPUT DEVICE
F91D F6CE             (        cubix.asm):01463                 FDB     SETOUT                            ;42-SET OUTPUT DEVICE
                      (        cubix.asm):01464         ;* CANNED ERROR MESSAGES
F91F E2CC             (        cubix.asm):01465                 FDB     BADOPR                            ;43-OPERAND MISSING OR INVALID
F921 E671             (        cubix.asm):01466                 FDB     NOTFND                            ;44-FILE NOT FOUND
F923 E8C6             (        cubix.asm):01467                 FDB     PROERR                            ;45-PROTECTION VIOLATION
F925 E8CF             (        cubix.asm):01468                 FDB     ORERR                             ;46-FILE NOT OPEN FOR READ
F927 E943             (        cubix.asm):01469                 FDB     OWERR                             ;47-FILE NOT OPEN FOR WRITE
F929 E749             (        cubix.asm):01470                 FDB     FEXISTS                           ;48-FILE ALREADY EXISTS
F92B E7EC             (        cubix.asm):01471                 FDB     NOSPAC                            ;49-INSUFFICENT DISK SPACE
F92D E5C8             (        cubix.asm):01472                 FDB     BADDEV                            ;50-INVALID DEVICE
F92F F014             (        cubix.asm):01473                 FDB     LODERR                            ;51-DOWNLOAD FORMAT ERROR
F931 E677             (        cubix.asm):01474                 FDB     FILERR                            ;52-ISSUE ERROR MSG(Y) FOR SAVED FILE
                      (        cubix.asm):01475         ;* FILE I/O
F933 EEAF             (        cubix.asm):01476                 FDB     BLOAD                             ;53-LOAD COMPLETE FILE TO MEMORY
F935 EEE4             (        cubix.asm):01477                 FDB     BSAVE                             ;54-SAVE COMPLETE FILE FROM MEMORY
F937 E825             (        cubix.asm):01478                 FDB     OPENR                             ;55-OPEN A FILE FOR READ
F939 E901             (        cubix.asm):01479                 FDB     OPENW                             ;56-OPEN A FILE FOR WRITE
F93B E989             (        cubix.asm):01480                 FDB     CLOSE                             ;57-CLOSE A FILE
F93D E892             (        cubix.asm):01481                 FDB     READB                             ;58-READ BLOCK FROM FILE
F93F E847             (        cubix.asm):01482                 FDB     READC                             ;59-READ CHAR FROM FILE
F941 E94B             (        cubix.asm):01483                 FDB     WRITEB                            ;60-WRITE A BLOCK TO FILE
F943 E924             (        cubix.asm):01484                 FDB     WRITEC                            ;61-WRITE A CHAR TO FILE
F945 E8DC             (        cubix.asm):01485                 FDB     REWIND                            ;62-RESET FILE TO BEGINNING
F947 E9D8             (        cubix.asm):01486                 FDB     SEEKREL                           ;63-SEEK RELATIVE POSITION IN FILE
F949 E9D5             (        cubix.asm):01487                 FDB     SEEKABS                           ;64-SEEK ABSOLUTE LOCATION IN FILE
F94B EA26             (        cubix.asm):01488                 FDB     FTELL                             ;65-RETURN POSITION IN FILE
F94D EA52             (        cubix.asm):01489                 FDB     SUSPEND                           ;66-SUSPEND FILE OPERATIONS
F94F EAA4             (        cubix.asm):01490                 FDB     RESUME                            ;67-RESUME FILE OPERATIONS
                      (        cubix.asm):01491         ;* FILE SYSTEM MAINTAINENCE
F951 E6A6             (        cubix.asm):01492                 FDB     LOCDIR                            ;68-LOCATE FILE IN DIRECTORY, NO ERROR/MESSAGE
F953 E66D             (        cubix.asm):01493                 FDB     LOCERR                            ;69-LOCATE FILE IN DIR/ISSUE ERROR IF NOT FOUND
F955 E8BC             (        cubix.asm):01494                 FDB     LOCRED                            ;70-LOCATE FILE WITH INTENT TO READ
F957 E8EA             (        cubix.asm):01495                 FDB     LOCWRI                            ;71-LOCATE FILE WITH INTENT TO WRITE
F959 E73D             (        cubix.asm):01496                 FDB     CREATE                            ;72-CREATE A FILE
F95B EE0B             (        cubix.asm):01497                 FDB     DELETE                            ;73-DELETE A FILE
F95D F07F             (        cubix.asm):01498                 FDB     SETDEF                            ;74-SET DEFAULT DIRECTORY
F95F F091             (        cubix.asm):01499                 FDB     SETCMD                            ;75-SET COMMAND DIRECTORY
F961 F6DC             (        cubix.asm):01500                 FDB     SELDRV                            ;76-SET CURRENT OS DRIVE
F963 E5F3             (        cubix.asm):01501                 FDB     FNDLNK                            ;77-LOCATE LINK FOR SECTOR
F965 EED3             (        cubix.asm):01502                 FDB     LCHAIN                            ;78-LOAD CHAIN OF SECTOR TO MEMORY
F967 E7C3             (        cubix.asm):01503                 FDB     FRESEC                            ;79-ALLOCATE A FREE SECTOR
F969 EE24             (        cubix.asm):01504                 FDB     UNCHAIN                           ;80-RELEASE SECTOR CHAIN
F96B E729             (        cubix.asm):01505                 FDB     DRVSIZ                            ;81-CALCULATE SIZE OF DISK(A)
F96D E726             (        cubix.asm):01506                 FDB     CURSIZ                            ;82-CALCULATE SIZE OF CURRENT DISK
F96F F3AC             (        cubix.asm):01507                 FDB     CALFRE                            ;83-CALCULATE # FREE SECTORS ON DISK
F971 E610             (        cubix.asm):01508                 FDB     RDWRK                             ;84-READ WORK SECTOR INTO DOS
F973 E7BA             (        cubix.asm):01509                 FDB     CHGWRK                            ;85-INDICATE WORK SECTOR CHANGED
F975 E647             (        cubix.asm):01510                 FDB     WRTST                             ;86-WRITE WORK SECTOR IF UPDATED
F977 E64C             (        cubix.asm):01511                 FDB     WRWRK                             ;87-WRITE WORK SECTOR UNCONDITIONALLY
F979 E637             (        cubix.asm):01512                 FDB     PURGE                             ;88-CLEAR WORK SECTOR & FORCE READ
F97B EB22             (        cubix.asm):01513                 FDB     GETCTL1                           ;89-GET CONTROL BLOCK
F97D EB1F             (        cubix.asm):01514                 FDB     GETCTL                            ;90-GET CTRL BLK FOR SELECTED
F97F EAD8             (        cubix.asm):01515                 FDB     SECTOR                            ;91-SET UP CTRL-BLOCK FROM DISK ID
F981 EAF8             (        cubix.asm):01516                 FDB     RDISK                             ;92-READ SECTOR(D) TO MEM(X) FROM DISK
F983 EB2B             (        cubix.asm):01517                 FDB     WDISK                             ;93-WRITE SECTOR(D) FROM MEM(X) TO DISK
F985 E6CA             (        cubix.asm):01518                 FDB     DISDIR                            ;94-DISPLAY DISK DIRECTORY
                      (        cubix.asm):01519         ;* DIRECT DISK ACCESS
F987 E004             (        cubix.asm):01520                 FDB     DOINIT                            ;95-INIT HARDWARE
F989 F74B             (        cubix.asm):01521                 FDB     HOME                              ;96-HOME HEAD ON DISK
F98B F755             (        cubix.asm):01522                 FDB     RDSEC                             ;97-READ SECTOR FROM TRACK
F98D F759             (        cubix.asm):01523                 FDB     WRSEC                             ;98-WRITE SECTOR FROM TRACK
F98F F747             (        cubix.asm):01524                 FDB     FORMAT                            ;99-FORMAT DISK
                      (        cubix.asm):01525         ;* MISC DOS ROUTINES
F991 E1E1             (        cubix.asm):01526                 FDB     EXECMD                            ;100-EXECUTE DOS COMMAND
F993 E1D6             (        cubix.asm):01527                 FDB     TMPENT                            ;101-TEMPORARY DOS ENTRY
F995 F6E2             (        cubix.asm):01528                 FDB     QVECT                             ;102-QUERY DEVICE VECTOR
F997 F6EC             (        cubix.asm):01529                 FDB     SVECT                             ;103-SET DEVICE VECTOR
F999 F182             (        cubix.asm):01530                 FDB     SETFLG                            ;104-SET FLAG
F99B F188             (        cubix.asm):01531                 FDB     CLRFLG                            ;105-CLEAR FLAG
F99D F60D             (        cubix.asm):01532                 FDB     SAVPRM                            ;106-SET COMMAND FILE PARAMETERS
F99F F704             (        cubix.asm):01533                 FDB     MUL16                             ;107-16 BIT MULTIPLY (D=X*D)
F9A1 F724             (        cubix.asm):01534                 FDB     DIV16                             ;108-16 BIT DIVISION (X=X/D, D=REMAINDER)
F9A3 E08A             (        cubix.asm):01535                 FDB     DMPREG                            ;109-DISPLAY REGISTERS
F9A5 EFBC             (        cubix.asm):01536                 FDB     DNLDEV                            ;110-DOWNLOAD FROM DEVICE
F9A7 F6FC             (        cubix.asm):01537                 FDB     GETDRVTBL                         ;111-GET DRIVE TABLE
F9A9 F700             (        cubix.asm):01538                 FDB     GETDRVPTBL                        ;112-GET DRIVE PARAMETER TABLE
     0071             (        cubix.asm):01539         NUMSSR          EQU (*-SSRTAB)/2                  ;# SSR'S IMPLEMENTED
                      (        cubix.asm):01540         ;*
                      (        cubix.asm):01541         ;* HARDWARE DEPENDANT I/O DRIVERS
                      (        cubix.asm):01542         ;*
                      (        cubix.asm):01543                 IFDEF   nhyodyne
                      (        cubix.asm):01544                 INCLUDE ../nhyodyne/drivers.asm
                      (../nhyodyne/drive):00001         ;       TITLE   I/O DRIVERS
                      (../nhyodyne/drive):00002         ;***************************************************************
                      (../nhyodyne/drive):00003         ;*     I/O drivers for the CUBIX operating system.             *
                      (../nhyodyne/drive):00004         ;***************************************************************
                      (../nhyodyne/drive):00005         ;*
                      (../nhyodyne/drive):00006         ;* CUBIX SYSTEM ADDRESSES
                      (../nhyodyne/drive):00007         ;*
                      (../nhyodyne/drive):00008                 INCLUDE cubix_values.asm
                      ( cubix_values.asm):00001         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00002         ;
                      ( cubix_values.asm):00003         ;       Duodyne Cubix System storage locations
                      ( cubix_values.asm):00004         ;
                      ( cubix_values.asm):00005         ;  DWERNER 10/15/2023   Initial
                      ( cubix_values.asm):00006         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00007         
     0200             ( cubix_values.asm):00008         MD_PAGERA       = $0200                           ; PAGE DRIVER ADDRESS
     02F5             ( cubix_values.asm):00009         PAGER_STACK     = $02F5
     02F6             ( cubix_values.asm):00010         PAGER_U         = $02F6
     02F8             ( cubix_values.asm):00011         PAGER_D         = $02F8
     02FA             ( cubix_values.asm):00012         PAGER_X         = $02FA
     02FC             ( cubix_values.asm):00013         PAGER_Y         = $02FC
     02FE             ( cubix_values.asm):00014         PAGER_S         = $02FE
     0100             ( cubix_values.asm):00015         CONSOLEDEVICE   = $0100                           ; (BYTE)
     01E3             ( cubix_values.asm):00016         ST0             = $01E3                           ; (BYTE)
     01E4             ( cubix_values.asm):00017         FCMD            = $01E4                           ; (BYTE)
     01E5             ( cubix_values.asm):00018         FLERR           = $01E5                           ; (BYTE)
     01E6             ( cubix_values.asm):00019         DSKUNIT         = $01E6                           ; (BYTE)
     01E7             ( cubix_values.asm):00020         FLOPPY_DETCT    = $01E7                           ; (BYTE)
     01E8             ( cubix_values.asm):00021         FLRETRY         = $01E8                           ; (BYTE)
     01E9             ( cubix_values.asm):00022         FLRETRY1        = $01E9                           ; (BYTE)
     01EA             ( cubix_values.asm):00023         DSKY_BUF        = $01EA                           ; (8 BYTES)
     01F3             ( cubix_values.asm):00024         DSKY_HEXBUF     = $01F3                           ; (4 BYTES)
     01F7             ( cubix_values.asm):00025         DISKERROR       = $01F7                           ; (BYTE)
     01F8             ( cubix_values.asm):00026         CURRENTHEAD     = $01F8                           ; (BYTE)
     01F9             ( cubix_values.asm):00027         CURRENTCYL      = $01F9                           ; (BYTE)
     01FA             ( cubix_values.asm):00028         CURRENTSEC      = $01FA                           ; (BYTE)
     01FB             ( cubix_values.asm):00029         CURRENTDEVICE   = $01FB                           ; (BYTE)
     01FC             ( cubix_values.asm):00030         CURRENTSLICE    = $01FC                           ; (WORD)
     01FE             ( cubix_values.asm):00031         farpointer      = $01FE                           ; (WORD)                      ;
     0300             ( cubix_values.asm):00032         HSTBUF          = $0300
                      ( cubix_values.asm):00033         
     8800             ( cubix_values.asm):00034         BANKED_DRIVER_DISPATCHER = $8800
                      (../nhyodyne/drive):00009         ;*
                      (../nhyodyne/drive):00010         ;* DISK CONTROL BLOCK FORMAT
                      (../nhyodyne/drive):00011         ;*
                      (../nhyodyne/drive):00012         ;       ORG     0
                      (../nhyodyne/drive):00013         ;DRIVE  RMB     1               DRIVE ID (ADDRESS)
                      (../nhyodyne/drive):00014         ;NCYL   RMB     1               NUMBER OF CYLINDERS
                      (../nhyodyne/drive):00015         ;NHEAD  RMB     1               NUMBER OF HEADS
                      (../nhyodyne/drive):00016         ;NSEC   RMB     1               NUMBER OF SECTORS/TRACK
                      (../nhyodyne/drive):00017         ;CYL    RMB     1               CURRENT CYLINDER
                      (../nhyodyne/drive):00018         ;HEAD   RMB     1               CURRENT HEAD
                      (../nhyodyne/drive):00019         ;SEC    RMB     1               CURRENT SECTOR
                      (../nhyodyne/drive):00020         ;*
                      (../nhyodyne/drive):00021         ;*
                      (../nhyodyne/drive):00022         ;* INITIALIZE SYSTEM HARDWARE. ON ENTRY 'Y'
                      (../nhyodyne/drive):00023         ;* POINTS TO SYSTEM TABLE TO BE FILLED IN.
                      (../nhyodyne/drive):00024         ;*
                      (../nhyodyne/drive):00025         ;* INITIALIZE CUBIX SYSTEM TABLE
F9AB                  (../nhyodyne/drive):00026         HWINIT
F9AB 8EFF09           (../nhyodyne/drive):00027                 LDX     #RITAB                            ;POINT TO OUR TABLE
F9AE C66F             (../nhyodyne/drive):00028                 LDB     #RISIZ                            ;SIZE OF TABLE
F9B0                  (../nhyodyne/drive):00029         HWIN1
F9B0 A680             (../nhyodyne/drive):00030                 LDA     ,X+                               ;GET A BYTE FROM TABLE
F9B2 A7A0             (../nhyodyne/drive):00031                 STA     ,Y+                               ;WRITE IT TO CUBIX RAM
F9B4 5A               (../nhyodyne/drive):00032                 DECB                                      ;REDUCE COUNT
F9B5 26F9             (../nhyodyne/drive):00033                 BNE     HWIN1                             ;MOVE ENTIRE TABLE
                      (../nhyodyne/drive):00034         
F9B7 8600             (../nhyodyne/drive):00035                 LDA     #00
F9B9 B70100           (../nhyodyne/drive):00036                 STA     CONSOLEDEVICE                     ; set console device for driver output
                      (../nhyodyne/drive):00037         
F9BC BDFA8D           (../nhyodyne/drive):00038                 JSR     PAGER_INIT                        ;INIT PAGER
                      (../nhyodyne/drive):00039         ;
F9BF C602             (../nhyodyne/drive):00040                 LDB     #02                               ;INIT SERIAL PORT
F9C1 BD0200           (../nhyodyne/drive):00041                 JSR     MD_PAGERA
                      (../nhyodyne/drive):00042         ;
F9C4 C612             (../nhyodyne/drive):00043                 LDB     #18                               ;INIT Floppy
F9C6 BD0200           (../nhyodyne/drive):00044                 JSR     MD_PAGERA
                      (../nhyodyne/drive):00045         ;
F9C9 C615             (../nhyodyne/drive):00046                 LDB     #21                               ;INIT IDE
F9CB BD0200           (../nhyodyne/drive):00047                 JSR     MD_PAGERA
                      (../nhyodyne/drive):00048         ;
F9CE C61B             (../nhyodyne/drive):00049                 LDB     #27                               ;INIT DSKY/NG
F9D0 BD0200           (../nhyodyne/drive):00050                 JSR     MD_PAGERA
                      (../nhyodyne/drive):00051         ;
F9D3 39               (../nhyodyne/drive):00052                 RTS
                      (../nhyodyne/drive):00053         
F9D4                  (../nhyodyne/drive):00054         WRSER:
F9D4 C600             (../nhyodyne/drive):00055                 LDB     #00                               ;WRITE SERIAL PORT
F9D6 7E0200           (../nhyodyne/drive):00056                 JMP     MD_PAGERA
                      (../nhyodyne/drive):00057         
F9D9                  (../nhyodyne/drive):00058         RDSER:
F9D9 C601             (../nhyodyne/drive):00059                 LDB     #01                               ;READ SERIAL PORT
F9DB BD0200           (../nhyodyne/drive):00060                 JSR     MD_PAGERA
F9DE 81FF             (../nhyodyne/drive):00061                 CMPA    #$FF
F9E0 2703             (../nhyodyne/drive):00062                 BEQ     >
F9E2 1A04             (../nhyodyne/drive):00063                 ORCC    #%00000100                        ; SET 'Z'
F9E4 39               (../nhyodyne/drive):00064                 RTS
                      (../nhyodyne/drive):00065         !
F9E5 86FF             (../nhyodyne/drive):00066                 LDA     #$FF                              ; CLEAR 'Z'
F9E7 39               (../nhyodyne/drive):00067                 RTS                                       ;
                      (../nhyodyne/drive):00068         ;
                      (../nhyodyne/drive):00069         
                      (../nhyodyne/drive):00070         ;* NULL DEVICE DRIVERS
F9E8                  (../nhyodyne/drive):00071         RDNULL
F9E8 86FF             (../nhyodyne/drive):00072                 LDA     #$FF                              ;INDICATE NO CHARACTER
F9EA                  (../nhyodyne/drive):00073         WRNULL
F9EA 39               (../nhyodyne/drive):00074                 RTS     IGNORE OPERATION
                      (../nhyodyne/drive):00075         
                      (../nhyodyne/drive):00076         ;*
                      (../nhyodyne/drive):00077         ;* FORMAT DISK ('U' POINTS TO DCB), INTERLEAVE FACTOR IN 'A'
                      (../nhyodyne/drive):00078         ;*
F9EB                  (../nhyodyne/drive):00079         DFORMAT
                      (../nhyodyne/drive):00080         ;*      LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00081         ;*      CMPA    #$01                    ; DRIVE B?
                      (../nhyodyne/drive):00082         ;*      BNE     NOTFDB                  ;
                      (../nhyodyne/drive):00083         ;*      JMP     FORMFL                  ; DIRECT ATTACHED FLOPPY FORMAT
                      (../nhyodyne/drive):00084         ;*NOTFDB:
F9EB 39               (../nhyodyne/drive):00085                 RTS
                      (../nhyodyne/drive):00086         
                      (../nhyodyne/drive):00087         ;*
                      (../nhyodyne/drive):00088         ;* HOME HEAD ON DRIVE ('U' POINTS TO DCB)
                      (../nhyodyne/drive):00089         ;*
F9EC                  (../nhyodyne/drive):00090         DHOME
                      (../nhyodyne/drive):00091         ;*      LDAA    DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00092         ;*      CMPA    #$01                    ; DRIVE A?
                      (../nhyodyne/drive):00093         ;*      BNE     NOTHDB                  ;
                      (../nhyodyne/drive):00094         ;*      LDAA    #$00
                      (../nhyodyne/drive):00095         ;*      JMP     SETTRACK                ; DIRECT ATTACHED FLOPPY HOME
                      (../nhyodyne/drive):00096         ;*NOTHDB:
                      (../nhyodyne/drive):00097         ;        LDA     #$03                              ; HOME DISK
                      (../nhyodyne/drive):00098         ;       JSR     ECB_OUTCHAR             ;
                      (../nhyodyne/drive):00099         ;       LDA     DRIVE,U                 ; GET DRIVE
                      (../nhyodyne/drive):00100         ;       JSR     ECB_ENC_OUTCHAR         ; SEND TO Z80
F9EC 39               (../nhyodyne/drive):00101                 RTS
                      (../nhyodyne/drive):00102         
                      (../nhyodyne/drive):00103         
                      (../nhyodyne/drive):00104         ;*
                      (../nhyodyne/drive):00105         ;* READ A SECTOR, FROM DISK ('U' POINTS TO DCB) TO MEMORY(X)
                      (../nhyodyne/drive):00106         ;*
F9ED                  (../nhyodyne/drive):00107         DRDSEC
F9ED BDFA66           (../nhyodyne/drive):00108                 JSR     DECODEDRIVE
F9F0 84F0             (../nhyodyne/drive):00109                 ANDA    #$F0
F9F2 8110             (../nhyodyne/drive):00110                 CMPA    #$10                              ; FLOPPY?
F9F4 260D             (../nhyodyne/drive):00111                 BNE     >                                 ;
F9F6 C613             (../nhyodyne/drive):00112                 LDB     #19                               ;Floppy_READ_SECTOR
F9F8 BD0200           (../nhyodyne/drive):00113                 JSR     MD_PAGERA
F9FB 8D18             (../nhyodyne/drive):00114                 BSR     CPYHOSTBUF
F9FD B601F7           (../nhyodyne/drive):00115                 LDA     DISKERROR                         ; GET ERROR CONDITION
FA00 8100             (../nhyodyne/drive):00116                 CMPA    #$00
FA02 39               (../nhyodyne/drive):00117                 RTS
                      (../nhyodyne/drive):00118         !
FA03 8120             (../nhyodyne/drive):00119                 CMPA    #$20                              ; IDE?
FA05 260D             (../nhyodyne/drive):00120                 BNE     >                                 ;
FA07 C616             (../nhyodyne/drive):00121                 LDB     #22                               ;IDE_READ_SECTOR
FA09 BD0200           (../nhyodyne/drive):00122                 JSR     MD_PAGERA
FA0C 8D07             (../nhyodyne/drive):00123                 BSR     CPYHOSTBUF
FA0E B601F7           (../nhyodyne/drive):00124                 LDA     DISKERROR                         ; GET ERROR CONDITION
FA11 8100             (../nhyodyne/drive):00125                 CMPA    #$00
FA13 39               (../nhyodyne/drive):00126                 RTS
                      (../nhyodyne/drive):00127         !
FA14 39               (../nhyodyne/drive):00128                 RTS
FA15                  (../nhyodyne/drive):00129         CPYHOSTBUF:
FA15 3420             (../nhyodyne/drive):00130                 PSHS    Y
FA17 108E0000         (../nhyodyne/drive):00131                 LDY     #$0000
                      (../nhyodyne/drive):00132         !
FA1B A6A90300         (../nhyodyne/drive):00133                 LDA     HSTBUF,Y
FA1F A780             (../nhyodyne/drive):00134                 STA     ,X+
FA21 3121             (../nhyodyne/drive):00135                 INY
FA23 108C0200         (../nhyodyne/drive):00136                 CMPY    #$0200
FA27 26F2             (../nhyodyne/drive):00137                 BNE     <
FA29 3520             (../nhyodyne/drive):00138                 PULS    Y
FA2B 39               (../nhyodyne/drive):00139                 RTS
                      (../nhyodyne/drive):00140         
                      (../nhyodyne/drive):00141         ;*
                      (../nhyodyne/drive):00142         ;* WRITE A SECTOR TO DISK ('U' POINTS TO DCB) FROM MEMORY(X)
                      (../nhyodyne/drive):00143         ;*
FA2C                  (../nhyodyne/drive):00144         DWRSEC
                      (../nhyodyne/drive):00145         ; START BY POPULATING THE HOST BUFFER
FA2C 3420             (../nhyodyne/drive):00146                 PSHS    Y
FA2E 108E0000         (../nhyodyne/drive):00147                 LDY     #$0000
                      (../nhyodyne/drive):00148         !
FA32 A680             (../nhyodyne/drive):00149                 LDA     ,X+
FA34 A7A90300         (../nhyodyne/drive):00150                 STA     HSTBUF,Y
FA38 3121             (../nhyodyne/drive):00151                 INY
FA3A 108C0200         (../nhyodyne/drive):00152                 CMPY    #$0200
FA3E 26F2             (../nhyodyne/drive):00153                 BNE     <
FA40 3520             (../nhyodyne/drive):00154                 PULS    Y
                      (../nhyodyne/drive):00155         ; NOW DO SOME DRIVE MAGIC
FA42 BDFA66           (../nhyodyne/drive):00156                 JSR     DECODEDRIVE
FA45 84F0             (../nhyodyne/drive):00157                 ANDA    #$F0
FA47 8110             (../nhyodyne/drive):00158                 CMPA    #$10                              ; FLOPPY?
FA49 260B             (../nhyodyne/drive):00159                 BNE     >                                 ;
FA4B C614             (../nhyodyne/drive):00160                 LDB     #20                               ;floppy_WRITE_SECTOR
FA4D BD0200           (../nhyodyne/drive):00161                 JSR     MD_PAGERA
FA50 B601F7           (../nhyodyne/drive):00162                 LDA     DISKERROR                         ; GET ERROR CONDITION
FA53 8100             (../nhyodyne/drive):00163                 CMPA    #$00
FA55 39               (../nhyodyne/drive):00164                 RTS
                      (../nhyodyne/drive):00165         !
FA56 8120             (../nhyodyne/drive):00166                 CMPA    #$20                              ; IDD?
FA58 260B             (../nhyodyne/drive):00167                 BNE     >                                 ;
FA5A C617             (../nhyodyne/drive):00168                 LDB     #23                               ;IDE_WRITE_SECTOR
FA5C BD0200           (../nhyodyne/drive):00169                 JSR     MD_PAGERA
FA5F B601F7           (../nhyodyne/drive):00170                 LDA     DISKERROR                         ; GET ERROR CONDITION
FA62 8100             (../nhyodyne/drive):00171                 CMPA    #$00
FA64 39               (../nhyodyne/drive):00172                 RTS
                      (../nhyodyne/drive):00173         !
FA65 39               (../nhyodyne/drive):00174                 RTS
                      (../nhyodyne/drive):00175         
FA66                  (../nhyodyne/drive):00176         DECODEDRIVE:
FA66 3420             (../nhyodyne/drive):00177                 PSHS    y
FA68 A645             (../nhyodyne/drive):00178                 LDA     HEAD,U
FA6A B701F8           (../nhyodyne/drive):00179                 STA     CURRENTHEAD
FA6D A644             (../nhyodyne/drive):00180                 LDA     CYL,U
FA6F B701F9           (../nhyodyne/drive):00181                 STA     CURRENTCYL
FA72 A646             (../nhyodyne/drive):00182                 LDA     SEC,U
FA74 B701FA           (../nhyodyne/drive):00183                 STA     CURRENTSEC
FA77 4F               (../nhyodyne/drive):00184                 CLRA
FA78 E6C4             (../nhyodyne/drive):00185                 LDB     DRIVE,U                           ; GET DRIVE
FA7A 58               (../nhyodyne/drive):00186                 ASLB                                      ; a=a*2
FA7B 1F02             (../nhyodyne/drive):00187                 TFR     D,Y
FA7D A6A9DCB7         (../nhyodyne/drive):00188                 LDA     DRIVEMAP,Y
FA81 E6A9DCB8         (../nhyodyne/drive):00189                 LDB     DRIVEMAP+1,Y
FA85 B701FB           (../nhyodyne/drive):00190                 STA     CURRENTDEVICE
FA88 F701FC           (../nhyodyne/drive):00191                 STB     CURRENTSLICE
FA8B 35A0             (../nhyodyne/drive):00192                 PULS    y,pc
                      (../nhyodyne/drive):00193         
                      (../nhyodyne/drive):00194                 INCLUDE ../nhyodyne/cubix_pager.asm
                      (../nhyodyne/cubix):00001         ;__pager_________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00002         ;
                      (../nhyodyne/cubix):00003         ;       Nhyodyne Memory page management code
                      (../nhyodyne/cubix):00004         ;
                      (../nhyodyne/cubix):00005         ;       Entry points:
                      (../nhyodyne/cubix):00006         ;               PAGER_INIT          - called during OS init
                      (../nhyodyne/cubix):00007         ;________________________________________________________________________________________________________________________________
                      (../nhyodyne/cubix):00008         ;
                      (../nhyodyne/cubix):00009         ; RAM BANK $0C is RAM area for Drivers
                      (../nhyodyne/cubix):00010         ; RAM BANK $0E is operating bank for CUBIX $8000-$FFFF
                      (../nhyodyne/cubix):00011         ; RAM BANK $0F is fixed bank $0000-$7FFF
                      (../nhyodyne/cubix):00012         ;
                      (../nhyodyne/cubix):00013         ; ROM BANKS $00 and $0C-$0F are reserved for ROMWBW code
                      (../nhyodyne/cubix):00014         ;
     057C             (../nhyodyne/cubix):00015         MPCL_ROM        = $057C                           ; ROM MAPPER
     0578             (../nhyodyne/cubix):00016         MPCL_RAM        = $0578                           ; RAM MAPPER
                      (../nhyodyne/cubix):00017         ;
                      (../nhyodyne/cubix):00018         ;
                      (../nhyodyne/cubix):00019         ; ROM MEMORY PAGE CONFIGURATION LATCH CONTROL PORT
                      (../nhyodyne/cubix):00020         ;       A15 IS INVERTED FOR THE NYHODYNE 6809 CPU . . .
                      (../nhyodyne/cubix):00021         ;       7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
                      (../nhyodyne/cubix):00022         ;       ^ ^ ^ ^  ^ ^ ^ ^
                      (../nhyodyne/cubix):00023         ;       : : : :  : : : :--0 = A15 ROM ONLY ADDRESS LINE DEFAULT IS 0 x
                      (../nhyodyne/cubix):00024         ;       : : : :  : : :----0 = A16 ROM ONLY ADDRESS LINE DEFAULT IS 0
                      (../nhyodyne/cubix):00025         ;       : : : :  : :------0 = A17 ROM ONLY ADDRESS LINE DEFAULT IS 0
                      (../nhyodyne/cubix):00026         ;       : : : :  :--------0 = A18 ROM ONLY ADDRESS LINE DEFAULT IS 0 X
                      (../nhyodyne/cubix):00027         ;       : : : :-----------0 = A19 ROM ONLY ADDRESS LINE DEFAULT IS 0
                      (../nhyodyne/cubix):00028         ;       : : :-------------0 = A20 ROM ONLY ADDRESS LINE DEFAULT IS 0
                      (../nhyodyne/cubix):00029         ;       : :---------------0 = ROM BOOT OVERRIDE DEFAULT IS 0
                      (../nhyodyne/cubix):00030         ;       :-----------------0 = LOWER PAGE ROM SELECT (0=ROM, 1=NOTHING) DEFAULT IS 0
                      (../nhyodyne/cubix):00031         ;
                      (../nhyodyne/cubix):00032         ; RAM PAGE CONFIGURATION LATCH CONTROL PORT
                      (../nhyodyne/cubix):00033         ;
                      (../nhyodyne/cubix):00034         ;       7 6 5 4  3 2 1 0      APPLICABLE TO THE UPPER MEMORY PAGE $8000-$FFFF
                      (../nhyodyne/cubix):00035         ;       ^ ^ ^ ^  ^ ^ ^ ^
                      (../nhyodyne/cubix):00036         ;       : : : :  : : : :--0 = A15 RAM ONLY ADDRESS LINE DEFAULT IS 0
                      (../nhyodyne/cubix):00037         ;       : : : :  : : :----0 = A16 RAM ONLY ADDRESS LINE DEFAULT IS 0
                      (../nhyodyne/cubix):00038         ;       : : : :  : :------0 = A17 RAM ONLY ADDRESS LINE DEFAULT IS 0
                      (../nhyodyne/cubix):00039         ;       : : : :  :--------0 = A18 RAM ONLY ADDRESS LINE DEFAULT IS 0
                      (../nhyodyne/cubix):00040         ;       : : : :-----------0 = A19 RAM ONLY ADDRESS LINE DEFAULT IS 0
                      (../nhyodyne/cubix):00041         ;       : : :-------------0 = UNDEFINED DEFAULT IS 0
                      (../nhyodyne/cubix):00042         ;       : :---------------0 = RAM BOOT OVERRIDE DEFAULT IS 0
                      (../nhyodyne/cubix):00043         ;       :-----------------0 = LOWER PAGE RAM SELECT (0=NOTHING, 1=RAM) DEFAULT IS 0;
                      (../nhyodyne/cubix):00044         
                      (../nhyodyne/cubix):00045         
                      (../nhyodyne/cubix):00046         ;__PAGER_INIT___________________________________________________________________________________________
                      (../nhyodyne/cubix):00047         ;
                      (../nhyodyne/cubix):00048         ;  INIT -- Copy code into $0200-$02FF for controling banking
                      (../nhyodyne/cubix):00049         ;____________________________________________________________________________________________________
FA8D                  (../nhyodyne/cubix):00050         PAGER_INIT:
FA8D 8E0000           (../nhyodyne/cubix):00051                 LDX     #$0000
                      (../nhyodyne/cubix):00052         !
FA90 A689FAA0         (../nhyodyne/cubix):00053                 LDA     md_pagecode,X
FA94 A7890200         (../nhyodyne/cubix):00054                 STA     MD_PAGERA,X
FA98 3001             (../nhyodyne/cubix):00055                 INX
FA9A 8C0100           (../nhyodyne/cubix):00056                 CMPX    #$0100
FA9D 26F1             (../nhyodyne/cubix):00057                 BNE     <
FA9F 39               (../nhyodyne/cubix):00058                 RTS
                      (../nhyodyne/cubix):00059         
                      (../nhyodyne/cubix):00060         ; CODE FOR PAGER OPERATIONS
FAA0                  (../nhyodyne/cubix):00061         md_pagecode:
                      (../nhyodyne/cubix):00062         ; CODE TO CALL A "FAR FUNCTION"
                      (../nhyodyne/cubix):00063         ; THIS CHANGES PAGES AND THEN CALLS THE DISPATCHER
FAA0 FD02F8           (../nhyodyne/cubix):00064                 STD     >PAGER_D                          ; SAVE 'D'
FAA3 BF02FA           (../nhyodyne/cubix):00065                 STX     >PAGER_X                          ; SAVE 'X'
FAA6 10BF02FC         (../nhyodyne/cubix):00066                 STY     >PAGER_Y                          ; SAVE 'Y'
FAAA FF02F6           (../nhyodyne/cubix):00067                 STU     >PAGER_U                          ; SAVE 'U'
FAAD 10FF02FE         (../nhyodyne/cubix):00068                 STS     >PAGER_S                          ; SAVE STACK
FAB1 10CE02F5         (../nhyodyne/cubix):00069                 LDS     #PAGER_STACK                      ; SET TEMP STACK
FAB5 868C             (../nhyodyne/cubix):00070                 LDA     #$8C
FAB7 B70578           (../nhyodyne/cubix):00071                 STA     MPCL_RAM
FABA 12               (../nhyodyne/cubix):00072                 NOP
FABB 12               (../nhyodyne/cubix):00073                 NOP
FABC BD8800           (../nhyodyne/cubix):00074                 JSR     BANKED_DRIVER_DISPATCHER
FABF 868E             (../nhyodyne/cubix):00075                 LDA     #$8E
FAC1 B70578           (../nhyodyne/cubix):00076                 STA     MPCL_RAM
FAC4 10FE02FE         (../nhyodyne/cubix):00077                 LDS     >PAGER_S                          ; RESTORE STACK
FAC8 BE02FA           (../nhyodyne/cubix):00078                 LDX     >PAGER_X                          ; RESTORE 'X'
FACB 10BE02FC         (../nhyodyne/cubix):00079                 LDY     >PAGER_Y                          ; RESTORE 'Y'
FACF FE02F6           (../nhyodyne/cubix):00080                 LDU     >PAGER_U                          ; RESTORE 'U'
FAD2 FC02F8           (../nhyodyne/cubix):00081                 LDD     >PAGER_D                          ; RESTORE 'D'
FAD5 39               (../nhyodyne/cubix):00082                 RTS
                      (../nhyodyne/drive):00195         
                      (../nhyodyne/drive):00196                 ORG     $FF00
                      (../nhyodyne/drive):00197         ;
                      (../nhyodyne/drive):00198         ; DISK COMMAND BLOCK
                      (../nhyodyne/drive):00199         ;
                      (../nhyodyne/drive):00200         ;* IGNORE ANY UNUSED INTERRUPTS
FF00                  (../nhyodyne/drive):00201         IGNORE
FF00 3B               (../nhyodyne/drive):00202                 RTI
                      (../nhyodyne/drive):00203         ;* RESULT CODES FOR FDC OPERATIONS
FF01                  (../nhyodyne/drive):00204         RESTAB
FF01 0300020000030401 (../nhyodyne/drive):00205                 FCB     3,0,2,0,0,3,4,1
                      (../nhyodyne/drive):00206         ;*
                      (../nhyodyne/drive):00207         ;* INITIALIZATION TABLE FOR CUBIX RAM
                      (../nhyodyne/drive):00208         ;*
     FF09             (../nhyodyne/drive):00209         RITAB           EQU *
                      (../nhyodyne/drive):00210         ;* DEFAULT DRIVE CHARACTISTICS
FF09 00500209000000   (../nhyodyne/drive):00211                 FCB     0,80,2,9,0,0,0                    ;ADR 0, 80 CYL, 2 HEAD, 9 SEC/TRK
FF10 01FF01FF000000   (../nhyodyne/drive):00212                 FCB     1,255,1,255,0,0,0                 ;ADR 1, 255 CYL, 1 HEAD, 255 SEC/TRK
FF17 02FF01FF000000   (../nhyodyne/drive):00213                 FCB     2,255,1,255,0,0,0                 ;ADR 2, 255 CYL, 1 HEAD, 255 SEC/TRK
FF1E 03FF01FF000000   (../nhyodyne/drive):00214                 FCB     3,255,1,255,0,0,0                 ;ADR 4, 255 CYL, 1 HEAD, 255 SEC/TRK
                      (../nhyodyne/drive):00215         ;* CONSOLE DEVICE ASSIGNMENTS
FF25 01               (../nhyodyne/drive):00216                 FCB     1                                 ;CONSOLE INPUT DEVICE
FF26 01               (../nhyodyne/drive):00217                 FCB     1                                 ;CONSOLE OUTPUT DEVICE
                      (../nhyodyne/drive):00218         ;* SERIAL DEVICE DRIVERS
FF27 F9E8F9D900000000 (../nhyodyne/drive):00219                 FDB     RDNULL,RDSER,0,0,0,0,0,0
     0000000000000000
FF37 F9EAF9D400000000 (../nhyodyne/drive):00220                 FDB     WRNULL,WRSER,0,0,0,0,0,0
     0000000000000000
                      (../nhyodyne/drive):00221         ;* DISK DEVICE DRIVERS
FF47 F9ECF9EDFA2CF9EB (../nhyodyne/drive):00222                 FDB     DHOME,DRDSEC,DWRSEC,DFORMAT
                      (../nhyodyne/drive):00223         ;* 6809 HARDWARE VECTORS
FF4F E00B             (../nhyodyne/drive):00224                 FDB     SSR                               ;SWI VECTOR (USED FOR SSRS)
FF51 FF00             (../nhyodyne/drive):00225                 FDB     IGNORE                            ;SWI2 VECTOR
FF53 FF00             (../nhyodyne/drive):00226                 FDB     IGNORE                            ;SWI3 VECTOR
FF55 FF00             (../nhyodyne/drive):00227                 FDB     IGNORE                            ;IRQ  VECTOR
FF57 FF00             (../nhyodyne/drive):00228                 FDB     IGNORE                            ;FIRQ VECTOR
FF59 FF00             (../nhyodyne/drive):00229                 FDB     IGNORE                            ;NMI VECTOR
                      (../nhyodyne/drive):00230         ;* MISC FLAGS & VARIABLES
FF5B FF               (../nhyodyne/drive):00231                 FCB     $FF                               ;ERROR MESSAGES ENABLED
FF5C 00               (../nhyodyne/drive):00232                 FCB     0                                 ;TRACE DISABLED
FF5D 00               (../nhyodyne/drive):00233                 FCB     0                                 ;DEBUG DISABLED
FF5E 03               (../nhyodyne/drive):00234                 FCB     3                                 ;DEFAULT DRIVE (A)
FF5F 4D41494E         (../nhyodyne/drive):00235                 FCC     'MAIN'                            ;DEFAULT DIRECTORY
FF63 00000000         (../nhyodyne/drive):00236                 FCB     0,0,0,0                           ;(FILLER)
FF67 01               (../nhyodyne/drive):00237                 FCB     1                                 ;SYSTEM DRIVE (A)
FF68 53595354454D     (../nhyodyne/drive):00238                 FCC     'SYSTEM'                          ;SYSTEM DIRECTORY
FF6E 0000             (../nhyodyne/drive):00239                 FCB     0,0                               ;(FILLER)
                      (../nhyodyne/drive):00240         ; DRIVE MAPPING TABLE
FF70 2100             (../nhyodyne/drive):00241                 FCB     $21,$00                           ; TABLE IS DRIVE TYPE, SLICE OFFSET
FF72 2100             (../nhyodyne/drive):00242                 FCB     $21,$00                           ; DRIVE IDS ARE $00=NONE, $1x=FLOPPY, $2X=PPIDE
FF74 2101             (../nhyodyne/drive):00243                 FCB     $21,$01                           ;     LOW NIBBLE IS DEVICE ADDRESS
FF76 2102             (../nhyodyne/drive):00244                 FCB     $21,$02                           ; SLICE OFFSET IS THE UPPER 8 BITS OF THE DRIVE LBA ADDRESS
                      (../nhyodyne/drive):00245                                                           ; ALLOWING IDE DRIVES TO HOST UP TO 256 VIRTUAL DRIVES PER PHYSICAL DRIVE
                      (../nhyodyne/drive):00246         
     006F             (../nhyodyne/drive):00247         RISIZ           EQU *-RITAB                       ;SIZE OF INITILAIZED RAM
                      (../nhyodyne/drive):00248         ;
                      (        cubix.asm):01545                 ENDIF
                      (        cubix.asm):01546                 IFDEF   duodyne
                      (        cubix.asm):01547                 INCLUDE ../duodyne/drivers.asm
                      (        cubix.asm):01548                 ENDIF
                      (        cubix.asm):01549         
                      (        cubix.asm):01550         ;*
                      (        cubix.asm):01551         ;* INTERRUPT VECTORS
                      (        cubix.asm):01552         ;*
                      (        cubix.asm):01553                 IFNDEF  test
                      (        cubix.asm):01554                 ORG     $FFF2                             ;VECTORS GO HERE
FFF2 F765             (        cubix.asm):01555                 FDB     SWI3
FFF4 F761             (        cubix.asm):01556                 FDB     SWI2
FFF6 F76D             (        cubix.asm):01557                 FDB     FIRQ
FFF8 F769             (        cubix.asm):01558                 FDB     IRQ
FFFA F75D             (        cubix.asm):01559                 FDB     SWI
FFFC F771             (        cubix.asm):01560                 FDB     NMI
FFFE E108             (        cubix.asm):01561                 FDB     BEGIN                             ;RESET - COLD START OF SYSTEM
                      (        cubix.asm):01562                 ENDIF

Symbol Table:
[ G] ATRTAB                           F0F3
[ G] BADCMD                           E268
[ G] BADDEV                           E5C8
[ G] BADOP1                           E407
[ G] BADOP2                           E3AA
[ G] BADOP3                           F0E8
[ G] BADOPM                           F794
[ G] BADOPR                           E2CC
[ G] BANKED_DRIVER_DISPATCHER         8800
[ G] BEG1                             E114
[ G] BEGIN                            E108
[ G] BLOAD                            EEAF
[ G] BRET                             E36D
[ G] BSAVE                            EEE4
[ G] CALFRE                           F3AC
[ G] CEND                             E354
[ G] CEXI                             F5CD
[ G] CEXIT                            F5BC
[ G] CHAIN                            F61E
[ G] CHGDRV                           F10E
[ G] CHGWRK                           E7BA
[ G] CLO0                             E99E
[ G] CLO1                             E9A2
[ G] CLO2                             E9B1
[ G] CLO3                             E9B5
[ G] CLO4                             E9CA
[ G] CLOC1                            E8F4
[ G] CLOC2                            E8FB
[ G] CLOSE                            E989
[ G] CLRFLG                           F188
[ G] CMD                              E1A1
[ G] CMDADR                           F8AD
[ G] CMDBUF                           DCF5
[ G] CMDC1                            F658
[ G] CMDC2                            F662
[ G] CMDC3                            F66C
[ G] CMDC4                            F670
[ G] CMDC5                            F67A
[ G] CMDC6                            F67B
[ G] CMDCMP                           F64D
[ G] CMDDRV                           DCE9
[ G] CMDEOF                           F4CA
[ G] CMDEX                            F4D8
[ G] CMDGO                            E1D1
[ G] CMDIN                            F5FE
[ G] CMDKEY                           F641
[ G] CMDNAM                           F857
[ G] CMDOFF                           DCEC
[ G] CMDRC                            DCF0
[ G] CMDRET                           F5E4
[ G] CMDRT0                           F5E7
[ G] CMDRT1                           F5FB
[ G] CMDRT2                           F67E
[ G] CMDSEC                           DCEA
[ G] CMDSKP                           F62A
[ G] CMDSTK                           DCEE
[ G] CMPR                             F584
[ G] CMPR1                            F591
[ G] CNC1                             F048
[ G] CNC2                             F059
[ G] CNCT                             F042
[ G] COMFIL                           F4D3
[ G] COMGO                            F4E8
[ G] COMNAM                           E337
[ G] COMX                             E356
[ G] CONIN                            DC6C
[ G] CONOUT                           DC6D
[ G] CONSOLEDEVICE                    0100
[ G] CPYHOSTBUF                       FA15
[ G] CRD1                             ED88
[ G] CRD2                             ED8E
[ G] CRE1                             E752
[ G] CRE2                             E75A
[ G] CRE3                             E75F
[ G] CRE5                             E78B
[ G] CRE6                             E795
[ G] CRE7                             E79D
[ G] CREAD                            ED6D
[ G] CREATE                           E73D
[ G] CREF1                            EE05
[ G] CREFIL                           EDF1
[ G] CSIZE                            0007
[ G] CSRC                             F5AC
[ G] CURRENTCYL                       01F9
[ G] CURRENTDEVICE                    01FB
[ G] CURRENTHEAD                      01F8
[ G] CURRENTSEC                       01FA
[ G] CURRENTSLICE                     01FC
[ G] CURSIZ                           E726
[ G] CWR1                             EDB8
[ G] CWR2                             EDBE
[ G] CWRITE                           ED9D
[ G] CYL                              0004
[ G] DATTR                            0017
[ G] DBGFLG                           DCA3
[ G] DBGSSR                           E040
[ G] DCTRL                            DC50
[ G] DDADR                            0013
[ G] DECDIG                           E474
[ G] DECODEDRIVE                      FA66
[ G] DEFATR                           00F0
[ G] DEFDIR                           DCA6
[ G] DEFDRV                           DCA5
[ G] DELETE                           EE0B
[ G] DELFIL                           EE08
[ G] DETAB                            EBC1
[ G] DEVMSG                           F832
[ G] DFORMAT                          F9EB
[ G] DHOME                            F9EC
[ G] DIGOK                            E44D
[ G] DIRSEC                           0000
[ G] DISDIR                           E6CA
[ G] DISF1                            F3BD
[ G] DISF2                            F3C3
[ G] DISF3                            F3CE
[ G] DISF4                            F3DF
[ G] DISKERROR                        01F7
[ G] DISP8                            E719
[ G] DISPX                            E71B
[SG] dist                             0001
[ G] DITAB                            DC6E
[ G] DIV1                             F72C
[ G] DIV16                            F724
[ G] DIV2                             F72E
[ G] DIV3                             F743
[ G] DMPREG                           E08A
[ G] DMPREG1                          E08D
[ G] DNAME                            0008
[ G] DNL0                             EF87
[ G] DNL1                             EFBF
[ G] DNL2                             EFD2
[ G] DNL3                             EFFD
[ G] DNL4                             F02E
[ G] DNLD                             EF74
[ G] DNLDEV                           EFBC
[ G] DNLEND                           EFA1
[ G] DNLMSG                           F841
[ G] DNLRTS                           EF72
[ G] DOINIT                           E004
[ G] DOSKCM                           E1DA
[ G] DOTAB                            DC7E
[ G] DPERM                            0010
[ G] DPREFIX                          0000
[ G] DRADR                            0015
[ G] DRDSEC                           F9ED
[ G] DRIVE                            0000
[ G] DRIVEMAP                         DCB7
[ G] DRVSIZ                           E729
[ G] DSHFT                            E455
[ G] DSKUNIT                          01E6
[ G] DSKY_BUF                         01EA
[ G] DSKY_HEXBUF                      01F3
[ G] DTYPE                            0010
[ G] DWRSEC                           FA2C
[ G] EOF                              E8D7
[ G] EPERM                            0020
[ G] ERRCNT                           DCF4
[ G] ERRM1                            E2E4
[ G] ERRM2                            E2E9
[ G] ERRM3                            E2FA
[ G] ERRM4                            E2FF
[ G] ERRMRC                           E2D1
[ G] ERRRET                           E30C
[ G] EX1                              F31B
[ G] EX2                              F320
[ G] EX3                              F327
[ G] EX4                              F32E
[ G] EX5                              F33B
[ G] EX6                              F345
[ G] EX7                              F34F
[ G] EX8                              F351
[ G] EX9                              F364
[ G] EXDCOM                           F5D0
[ G] EXE                              E238
[ G] EXE1                             E250
[ G] EXE2                             E253
[ G] EXE3                             E26F
[ G] EXE4                             E290
[ G] EXE5                             E29C
[ G] EXECMD                           E1E1
[ G] EXIMSG                           F7BE
[ G] farpointer                       01FE
[ G] FCMD                             01E4
[ G] FDRIVE                           DCBF
[ G] FEXISTS                          E749
[ G] FIL1                             EDD2
[ G] FIL2                             EDEE
[ G] FILERR                           E677
[ G] FILES                            EDCD
[ G] FILFND                           E6C9
[ G] FIRQ                             F76D
[ G] FIRQVEC                          DC9E
[ G] FLERR                            01E5
[ G] FLOPPY_DETCT                     01E7
[ G] FLRETRY                          01E8
[ G] FLRETRY1                         01E9
[ G] FNAME                            DCC8
[ G] FNDF1                            E7FA
[ G] FNDF2                            E803
[ G] FNDF3                            E805
[ G] FNDFRE                           E7F4
[ G] FNDLNK                           E5F3
[ G] FORMAT                           F747
[ G] FRES1                            E7E3
[ G] FRES2                            E7E5
[ G] FRESEC                           E7C3
[ G] FTEL1                            EA33
[ G] FTEL2                            EA41
[ G] FTELL                            EA26
[ G] FTYPE                            DCD0
[ G] GETA1                            F0D7
[ G] GETA2                            F0E1
[ G] GETA3                            F0EB
[ G] GETA4                            F0F1
[ G] GETATR                           F0D4
[ G] GETBYT                           F022
[ G] GETCHR                           E5EE
[ G] GETCTL                           EB1F
[ G] GETCTL1                          EB22
[ G] GETD1                            E3DC
[ G] GETD2                            E3E5
[ G] GETD3                            E3FB
[ G] GETD4                            E40A
[ G] GETD5                            E411
[ G] GETDEC                           E46A
[ G] GETDEV                           F162
[ G] GETDIR                           E3C4
[ G] GETDIR1                          E3C7
[ G] GETDRV                           E413
[ G] GETDRV1                          E416
[ G] GETDRVPTBL                       F700
[ G] GETDRVTBL                        F6FC
[ G] GETDV                            E471
[ G] GETHEX                           E430
[ G] GETHV                            E435
[ G] GETL1                            E438
[ G] GETN1                            F041
[ G] GETNAM                           E38B
[ G] GETNIB                           F02F
[ G] GETNUM                           E425
[ G] GETSDI                           E331
[ G] GETSN0                           E2AD
[ G] GETSN1                           E2B4
[ G] GETSN2                           E2C2
[ G] GETSNA                           E2AA
[ G] GETSYS                           E32E
[ G] GETVAL                           E384
[ G] GF1                              E38F
[ G] GF2                              E3A0
[ G] GF3                              E3AD
[ G] GFNAM                            E38D
[ G] GFTYP                            E39C
[ G] GLFCR                            E4B6
[ G] GLINE                            E4B9
[ G] GLINE1                           E4C2
[ G] GLINE2                           E4D3
[ G] GLINE3                           E4DE
[ G] GLNOP                            E4BE
[ G] GOCMD                            F570
[ G] GOFLG                            F18B
[ G] GOPAD                            E2BF
[ G] GRTS                             E60F
[ G] HDE                              EB50
[ G] HDE1                             EB6D
[ G] HDE2                             EBA7
[ G] HDE3                             EBAC
[ G] HDE4                             EBB6
[ G] HEAD                             0005
[ G] HELLO                            E129
[ G] HEXEND                           E465
[ G] HOME                             F74B
[ G] HOUT                             E57C
[ G] HSTBUF                           0300
[ G] HWIN1                            F9B0
[ G] HWINIT                           F9AB
[ G] IGNORE                           FF00
[ G] INBUFF                           DC00
[ G] INI00                            EC29
[ G] INI01                            EC43
[ G] INI02                            EC4B
[ G] INI1                             EC56
[ G] INI10                            ED3C
[ G] INI11                            ED4A
[ G] INI2                             ECA7
[ G] INI3                             ECCB
[ G] INI4                             ECD8
[ G] INI5                             ECE5
[ G] INI6                             ECF6
[ G] INI7                             ED06
[ G] INI8                             ED10
[ G] INI9                             ED24
[ G] INI9A                            ED2C
[ G] INIT                             EC17
[ G] INITAB                           F46E
[ G] INVSSR                           E05E
[ G] IOTAB                            F4BC
[ G] IPLFILE                          F775
[ G] IRAM                             DC50
[ G] IRQ                              F769
[ G] IRQVEC                           DC9C
[ G] LCHAIN                           EED3
[ G] LFCR                             E59C
[ G] LNKSEC                           0001
[ G] LOCCR                            F637
[ G] LOCDIR                           E6A6
[ G] LOCERR                           E66D
[ G] LOCFIL                           E6B2
[ G] LOCLP                            F633
[ G] LOCRED                           E8BC
[ G] LOCSEC                           E6AF
[ G] LOCWRI                           E8EA
[ G] LODERR                           F014
[ G] LODF1                            EED1
[ G] LODFIL                           EEBB
[ G] MBASE                            E002
[ G] md_pagecode                      FAA0
[ G] MD_PAGERA                        0200
[ G] MOVD1                            F09C
[ G] MOVDIR                           F096
[ G] MPCL_RAM                         0578
[ G] MPCL_ROM                         057C
[ G] MSGFLG                           DCA2
[ G] MUL16                            F704
[ G] MULD1                            EE42
[ G] MULD2                            EE45
[ G] MULD3                            EE9E
[ G] MULD4                            EEAE
[ G] MULD5                            EE64
[ G] MULDEL                           EE3F
[ G] NAMGET                           E2B2
[ G] NCYL                             0001
[ G] NDEV                             0008
[ G] NDSK                             0004
[ G] NEWLIN                           F511
[ G] NHEAD                            0002
[SG] nhyodyne                         0001
[ G] NMI                              F771
[ G] NMIVEC                           DCA0
[ G] NOEMSG                           E30A
[ G] NOFMSG                           E69F
[ G] NOMAC                            F54A
[ G] NOSHO                            E6D1
[ G] NOSMSG                           F7D2
[ G] NOSPAC                           E7EC
[ G] NOSUSP                           EF56
[ G] NOTFND                           E671
[ G] NOTMSG                           F7AF
[ G] NOTNUL                           E344
[ G] NSEC                             0003
[ G] NULCMD                           E20A
[ G] NUMCMD                           000E
[ G] NUMFLG                           0003
[ G] NUMSSR                           0071
[ G] ODRIVE                           0001
[ G] OFIRST                           0002
[ G] OKRET                            EEE3
[ G] OLDSTK                           DCF1
[ G] OLSTSEC                          0006
[ G] OOFFSET                          0008
[ G] OOTAB                            F4B4
[ G] OPENR                            E825
[ G] OPENW                            E901
[ G] OREMSG                           F7E9
[ G] ORERR                            E8CF
[ G] OSECTOR                          0004
[ G] OSIZ                             000A
[ G] OTYPE                            0000
[ G] OWEMSG                           F800
[ G] OWERR                            E943
[ G] PAD                              E3BD
[ G] PAGER_D                          02F8
[ G] PAGER_INIT                       FA8D
[ G] PAGER_S                          02FE
[ G] PAGER_STACK                      02F5
[ G] PAGER_U                          02F6
[ G] PAGER_X                          02FA
[ G] PAGER_Y                          02FC
[ G] PAR1                             F534
[ G] PAR2                             F53A
[ G] PAR3                             F541
[ G] PAROK                            F52E
[ G] PREFIX                           DCC0
[ G] PROERR                           E8C6
[ G] PROMSG                           F818
[ G] PURGE                            E637
[ G] PURGE1                           E639
[ G] PUTCHR                           E5AE
[ G] QVECT                            F6E2
[ G] RAM                              DC00
[ G] RCBOP                            0001
[ G] RCC1                             F68C
[ G] RCC2                             F69F
[ G] RCC3                             F6B8
[ G] RCCHR                            F681
[ G] RCCMD                            00FF
[ G] RCDEV                            000A
[ G] RCDNL                            000B
[ G] RCDSK                            0009
[ G] RCEOF                            0006
[ G] RCEXI                            0007
[ G] RCNOS                            0008
[ G] RCNOTF                           0002
[ G] RCOND                            F59A
[ G] RCORE                            0004
[ G] RCOWE                            0005
[ G] RCPRO                            0003
[ G] RCRET                            E1AD
[ G] RDDEV                            E5D0
[ G] RDDLC                            F01C
[ G] RDISK                            EAF8
[ G] RDNULL                           F9E8
[ G] RDONE                            EB1D
[ G] RDSEC                            F755
[ G] RDSER                            F9D9
[ G] RDW1                             E625
[ G] RDWRK                            E610
[ G] READB                            E892
[ G] READC                            E847
[ G] REC1                             E866
[ G] REC2                             E880
[ G] REDCHR                           F514
[ G] REDIN                            F6BA
[ G] REDOUT                           F6BF
[ G] REENT                            E1C0
[ G] REEXG                            F6D6
[ G] RESTAB                           FF01
[ G] RESU1                            EAC0
[ G] RESU2                            EAC5
[ G] RESU3                            EAD0
[ G] RESUME                           EAA4
[ G] RETNZ                            E381
[ G] RETURN                           EF4D
[ G] RETZ                             F6DF
[ G] RETZ1                            F6F8
[ G] REWIND                           E8DC
[ G] RISIZ                            006F
[ G] RITAB                            FF09
[ G] RNXT                             E364
[ G] RNXT1                            E366
[ G] ROM                              E000
[ G] ROMCHK                           E000
[ G] RPERM                            0080
[ G] RRTS                             E635
[ G] RSUCC                            F5A5
[ G] RTRY1                            EAFF
[ G] RTRY2                            EB03
[ G] RUN                              E20B
[ G] RUN1                             E20E
[ G] RUN2                             E219
[ G] SAVB                             DCDD
[ G] SAVDRV                           DCE2
[ G] SAVF1                            EEFB
[ G] SAVF2                            EF08
[ G] SAVF3                            EF39
[ G] SAVFIL                           EEEC
[ G] SAVP1                            F612
[ G] SAVP2                            F61C
[ G] SAVPRM                           F60D
[ G] SAVSTK                           DCE3
[ G] SAVX                             DCDE
[ G] SAVY                             DCE0
[ G] SDC1                             F1C1
[ G] SDC2                             F1C8
[ G] SDCMD                            F1B2
[ G] SDRIVE                           DCF3
[ G] SDTAB                            F48D
[ G] SEC                              0006
[ G] SEC1                             EAE6
[ G] SEC2                             EAF0
[ G] SECTOR                           EAD8
[ G] SEEK1                            E9EA
[ G] SEEK2                            EA0A
[ G] SEEK3                            EA1D
[ G] SEEKABS                          E9D5
[ G] SEEKREL                          E9D8
[ G] SELDRV                           F6DC
[ G] SET                              F066
[ G] SET0                             F077
[ G] SET1                             F086
[ G] SET2                             F0A5
[ G] SET3                             F0FB
[ G] SET4                             F133
[ G] SET5                             F147
[ G] SETADR                           F429
[ G] SETCMD                           F091
[ G] SETDEF                           F07F
[ G] SETF0                            F0AB
[ G] SETF1                            F0C2
[ G] SETF2                            F0CC
[ G] SETFLG                           F182
[ G] SETIN                            F6C4
[ G] SETOUT                           F6CE
[ G] SETTAB                           F3E6
[ G] SETVAR                           F609
[ G] SFTAB                            F455
[ G] SH21                             F231
[ G] SH22                             F239
[ G] SH23                             F246
[ G] SHFLAG                           F2F0
[ G] SHOADR                           F43F
[ G] SHODRA                           F2AF
[ G] SHODRB                           F2B5
[ G] SHODRV                           F276
[ G] SHOFIL                           E6E4
[ G] SHOME                            E6CC
[ G] SHON1                            E700
[ G] SHONAM                           E6FE
[ G] SHOOFF                           F306
[ G] SHOSAV                           E6EB
[ G] SHOT1                            F2C2
[ G] SHOT2                            F2CD
[ G] SHOT3                            F2D6
[ G] SHOT4                            F2D9
[ G] SHOTAB                           F2BF
[ G] SHOW                             F19E
[ G] SHOW0                            F1AA
[ G] SHOW1                            F1AF
[ G] SHOW2                            F1D3
[ G] SHOW3                            F273
[ G] SHOW4                            F30E
[ G] SHOW5                            F2DD
[ G] SHOW6                            F366
[ G] SHRT                             E722
[ G] SKIP                             E4F0
[ G] SKRTS                            E4FC
[ G] SPACE                            E5A6
[ G] SPC1                             E5AA
[ G] SSR                              E00B
[ G] SSRTAB                           F8C9
[ G] ST0                              01E3
[ G] ST1                              F136
[ G] STACK                            DE00
[ G] STFLAG                           F16F
[ G] SUSP1                            EA8A
[ G] SUSP2                            EA95
[ G] SUSPEND                          EA52
[ G] SVECT                            F6EC
[ G] SWI                              F75D
[ G] SWI2                             F761
[ G] SWI2VEC                          DC98
[ G] SWI3                             F765
[ G] SWI3VEC                          DC9A
[ G] SWIVEC                           DC96
[ G] SYSDIR                           DCAF
[ G] SYSDRV                           DCAE
[ G] TEMP                             DCD3
[ G] TEMP1                            DCD5
[ G] TEMP2                            DCD7
[ G] TEMP3                            DCD9
[ G] TEMP4                            DCDB
[ G] TLOOK                            E519
[ G] TLOOK1                           E51C
[ G] TLOOK2                           E52B
[ G] TLOOK3                           E548
[ G] TLOOK4                           E54D
[ G] TLOOK5                           E54F
[ G] TLOOK6                           E554
[ G] TLOOKE                           F129
[ G] TMPENT                           E1D6
[ G] TOUPPER                          E50E
[ G] TRAC1                            F560
[ G] TRAC2                            F56D
[ G] TRCFLG                           DCA4
[ G] TRET                             E50D
[ G] TSTCHR                           E5E7
[ G] TSTDE1                           E5D7
[ G] TSTDEV                           E5D5
[ G] TSTE1                            E509
[ G] TSTERM                           E4FD
[ G] TSTRET                           F5B5
[ G] UNC1                             EE38
[ G] UNCHAIN                          EE24
[ G] UNCMD                            F77F
[ G] USREND                           DFFF
[ G] USRRAM                           2000
[ G] VALCHR                           E3B7
[ G] VALID                            E370
[ G] VALTST                           E377
[ G] WDISK                            EB2B
[ G] WPERM                            0040
[ G] WRB1                             E973
[ G] WRC1                             E934
[ G] WRDE1                            E49A
[ G] WRDE2                            E4A9
[ G] WRDEC                            E492
[ G] WRDEC8                           E491
[ G] WRDEV                            E5B5
[ G] WRDEV1                           E5B7
[ G] WRHEX                            E56E
[ G] WRHEXW                           E559
[ G] WRITEB                           E94B
[ G] WRITEC                           E924
[ G] WRKCHG                           DCE5
[ G] WRKDRV                           DCE6
[ G] WRKSEC                           DCE7
[ G] WRKSPC                           DE00
[ G] WRLIN                            E562
[ G] WRMSG                            E592
[ G] WRNULL                           F9EA
[ G] WRSEC                            F759
[ G] WRSER                            F9D4
[ G] WRST1                            E58A
[ G] WRST2                            E5AC
[ G] WRSTR                            E588
[ G] WRTST                            E647
[ G] WRWRK                            E64C
[ G] WTRY1                            EB32
[ G] WTRY2                            EB36
[ G] XFORMAT                          DC94
[ G] XHOME                            DC8E
[ G] XRDSEC                           DC90
[ G] XWRSEC                           DC92
[ G] ZERORC                           E327
