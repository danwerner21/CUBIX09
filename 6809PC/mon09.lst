                      (        mon09.asm):00001         ;*
                      (        mon09.asm):00002         ;* MON09: A software debug monitor for the 6809
                      (        mon09.asm):00003         ;*
                      (        mon09.asm):00004         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (        mon09.asm):00005         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and RAM
                      (        mon09.asm):00006         ;* from $0000-$BFFF. The 256 byte block from $DF00-$DFFF is used for I/O devices
                      (        mon09.asm):00007         ;* etc. MON09 uses 256 bytes of memory at the very top of available RAM,
                      (        mon09.asm):00008         ;* and the user stack pointer is initialized to point to the beginning of
                      (        mon09.asm):00009         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (        mon09.asm):00010         ;*
                      (        mon09.asm):00011         ;* ?COPY.TXT 1985-2007 Dave Dunfield
                      (        mon09.asm):00012         ;* **See COPY.TXT**.
                      (        mon09.asm):00013         ;*
                      (        mon09.asm):00014         ;*
                      (        mon09.asm):00015         ;*   Modified for the 6809PC board by D. Werner 5/17/2025
                      (        mon09.asm):00016         ;*   Single 6551 UART supported at 9600,n,8,1
                      (        mon09.asm):00017         ;*
                      (        mon09.asm):00018         ;*   Commands have been removed to conserve
                      (        mon09.asm):00019         ;*   ROM space
                      (        mon09.asm):00020         
     0001             (        mon09.asm):00021         BIOS6809PC      EQU $01
                      (        mon09.asm):00022         
                      (        mon09.asm):00023         ;* HARDWARE INFORMATION
     F000             (        mon09.asm):00024         ROM             EQU $F000                         ; MON09 code goes here
     BF00             (        mon09.asm):00025         RAM             EQU $BF00                         ; MON09 data goes here
     BFF0             (        mon09.asm):00026         STACK           EQU RAM+$F0                       ; MON09 Stack (Top of RAM)
     0100             (        mon09.asm):00027         HSTBUF          EQU $0100                         ; DISK BUFFER
     0300             (        mon09.asm):00028         BRKTAB          EQU $0300
                      (        mon09.asm):00029         ;*
     EF00             (        mon09.asm):00030         IOSPACE         EQU $EF00
     EF84             (        mon09.asm):00031         UART1DATA       EQU IOSPACE+$84                   ; SERIAL PORT 1 (I/O Card)
     EF85             (        mon09.asm):00032         UART1STATUS     EQU IOSPACE+$85                   ; SERIAL PORT 1 (I/O Card)
     EF86             (        mon09.asm):00033         UART1COMMAND    EQU IOSPACE+$86                   ; SERIAL PORT 1 (I/O Card)
     EF87             (        mon09.asm):00034         UART1CONTROL    EQU IOSPACE+$87                   ; SERIAL PORT 1 (I/O Card)
     E000             (        mon09.asm):00035         CUBIX_IO_BASE   EQU $E000
                      (        mon09.asm):00036         ;*
                      (        mon09.asm):00037         ;*
                      (        mon09.asm):00038                 ORG     RAM                               ;Internal MON09 variables
                      (        mon09.asm):00039         ;*
                      (        mon09.asm):00040         ;* MON09 INTERNAL MEMORY
                      (        mon09.asm):00041         ;*
BF00                  (        mon09.asm):00042         SWIADR:
BF00                  (        mon09.asm):00043                 RMB     2                                 ;SWI VECTOR ADDRESS
BF02                  (        mon09.asm):00044         SWI2ADR:
BF02                  (        mon09.asm):00045                 RMB     2                                 ;SWI2 VECTOR ADDRESS
BF04                  (        mon09.asm):00046         SWI3ADR:
BF04                  (        mon09.asm):00047                 RMB     2                                 ;SWI3 VECTOR ADDRESS
BF06                  (        mon09.asm):00048         IRQADR:
BF06                  (        mon09.asm):00049                 RMB     2                                 ;IRQ VECTOR ADDRESS
BF08                  (        mon09.asm):00050         FIRQADR:
BF08                  (        mon09.asm):00051                 RMB     2                                 ;FIRQ VECTOR ADDRESS
BF0A                  (        mon09.asm):00052         SAVCC:
BF0A                  (        mon09.asm):00053                 RMB     1                                 ;SAVED CONDITION CODE REGISTER
BF0B                  (        mon09.asm):00054         SAVA:
BF0B                  (        mon09.asm):00055                 RMB     1                                 ;SAVED 6809 A REGISTER
BF0C                  (        mon09.asm):00056         SAVB:
BF0C                  (        mon09.asm):00057                 RMB     1                                 ;SAVED 6809 B REGISTER
BF0D                  (        mon09.asm):00058         SAVDP:
BF0D                  (        mon09.asm):00059                 RMB     1                                 ;SAVED DIRECT PAGE REGISTER
BF0E                  (        mon09.asm):00060         SAVX:
BF0E                  (        mon09.asm):00061                 RMB     2                                 ;SAVED X REGISTER
BF10                  (        mon09.asm):00062         SAVY:
BF10                  (        mon09.asm):00063                 RMB     2                                 ;SAVED Y REGISTER
BF12                  (        mon09.asm):00064         SAVU:
BF12                  (        mon09.asm):00065                 RMB     2                                 ;SAVED U REGISTER
BF14                  (        mon09.asm):00066         SAVPC:
BF14                  (        mon09.asm):00067                 RMB     2                                 ;SAVED PROGRAM COUNTER
BF16                  (        mon09.asm):00068         SAVS:
BF16                  (        mon09.asm):00069                 RMB     2                                 ;SAVED S REGISTER
BF18                  (        mon09.asm):00070         TEMP:
BF18                  (        mon09.asm):00071                 RMB     2                                 ;TEMPORARY STORAGE
BF1A                  (        mon09.asm):00072         STPFLG:
BF1A                  (        mon09.asm):00073                 RMB     1                                 ;REGISTER DISPLAY WHILE STEPPING FLAG
BF1B                  (        mon09.asm):00074         PTRSAV:
BF1B                  (        mon09.asm):00075                 RMB     2                                 ;SINGLE STEP AND DISASSEMBLER CODE POINTER
BF1D                  (        mon09.asm):00076         INSTYP:
BF1D                  (        mon09.asm):00077                 RMB     1                                 ;DISASSEMBLED INSTRUCTION TYPE
BF1E                  (        mon09.asm):00078         POSBYT:
BF1E                  (        mon09.asm):00079                 RMB     1                                 ;POSTBYTE STORAGE AREA
BF1F                  (        mon09.asm):00080         INSRAM:
BF1F                  (        mon09.asm):00081                 RMB     7                                 ;INSTRUCTION EXECUTION ADDRESS
BF26                  (        mon09.asm):00082         XTIDETIMEOUT:
BF26                  (        mon09.asm):00083                 RMB     2                                 ;DISK TIMEOUT
BF28                  (        mon09.asm):00084         DISKERROR:
BF28                  (        mon09.asm):00085                 RMB     1                                 ;DISK ERROR
BF29                  (        mon09.asm):00086         ESPEXISTS:
BF29                  (        mon09.asm):00087                 RMB     1                                 ;CONSOLE DETECT STATUS
                      (        mon09.asm):00088         ;*
                      (        mon09.asm):00089                 ORG     ROM                               ;MONITOR CODE
                      (        mon09.asm):00090         ;*
                      (        mon09.asm):00091         ;* INITIALIZATIONS.
                      (        mon09.asm):00092         ;*
F000                  (        mon09.asm):00093         RESET:
F000 10CEBFF0         (        mon09.asm):00094                 LDS     #STACK                            ;SET UP STACK
                      (        mon09.asm):00095         
F004 8EBF00           (        mon09.asm):00096                 LDX     #SWIADR                           ;POINT TO START
F007                  (        mon09.asm):00097         CLRRAM:
F007 6F80             (        mon09.asm):00098                 CLR     ,X+                               ;CLEAR IT
F009 8CBF1F           (        mon09.asm):00099                 CMPX    #INSRAM                           ;AT BUFFER?
F00C 25F9             (        mon09.asm):00100                 BLO     CLRRAM                            ;KEEP GOING
                      (        mon09.asm):00101         
F00E 170C27           (        mon09.asm):00102                 LBSR    INIT                              ;INITIALIZE UART
F011 CCBF00           (        mon09.asm):00103                 LDD     #RAM                              ;DEFAULT STACK AT TOP OF RAM
F014 FDBF16           (        mon09.asm):00104                 STD     SAVS                              ;SAVE IT
F017 86D0             (        mon09.asm):00105                 LDA     #$D0                              ;SET CC
F019 B7BF0A           (        mon09.asm):00106                 STA     SAVCC                             ;SAVE IT
F01C 8600             (        mon09.asm):00107                 LDA     #$00                              ;SET CONSOLE
F01E B7BF29           (        mon09.asm):00108                 STA     ESPEXISTS
                      (        mon09.asm):00109         
F021                  (        mon09.asm):00110         MONITOR:
F021 17060F           (        mon09.asm):00111                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F024 0A0D0A0D0A0D     (        mon09.asm):00112                 FCB     $0A,$0D,$0A,$0D,$0A,$0D
F02A 20205F5F5F5F205F (        mon09.asm):00113                 FCC     '  ____ ___  ___  ___  ___  _____'
     5F5F20205F5F5F20
     205F5F5F20205F5F
     5F20205F5F5F5F5F
F04A 0A0D             (        mon09.asm):00114                 FCB     $0A,$0D
F04C 202F205F5F2F2820 (        mon09.asm):00115                 FCC     ' / __/( _ )/ _ \/ _ \/ _ \/ ___/'
     5F20292F205F205C
     2F205F205C2F205F
     205C2F205F5F5F2F
F06C 0A0D             (        mon09.asm):00116                 FCB     $0A,$0D
F06E 2F205F205C2F205F (        mon09.asm):00117                 FCC     '/ _ \/ _  / // /\_, / ___/ /__'
     20202F202F2F202F
     5C5F2C202F205F5F
     5F2F202F5F5F
F08C 0A0D             (        mon09.asm):00118                 FCB     $0A,$0D
F08E 5C5F5F5F2F5C5F5F (        mon09.asm):00119                 FCC     '\___/\___/\___//___/_/   \___/'
     5F2F5C5F5F5F2F2F
     5F5F5F2F5F2F2020
     205C5F5F5F2F
F0AC 0A0D             (        mon09.asm):00120                 FCB     $0A,$0D
F0AE 4D4F4E3039205665 (        mon09.asm):00121                 FCC     'MON09 Version 3.3a   1985-2007 Dave Dunfield'
     7273696F6E20332E
     3361202020313938
     352D323030372044
     6176652044756E66
     69656C64
F0DA 0A0D             (        mon09.asm):00122                 FCB     $0A,$0D
F0DC 2A2A205072657373 (        mon09.asm):00123                 FCC     '** Press ? for a list of commands **'
     203F20666F722061
     206C697374206F66
     20636F6D6D616E64
     73202A2A
F100 0AFF             (        mon09.asm):00124                 FCB     $0A,$FF
F102                  (        mon09.asm):00125         MAIN
F102 10CEBFF0         (        mon09.asm):00126                 LDS     #STACK                            ;FIX STACK IN CASE ERROR
F106 17052A           (        mon09.asm):00127                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F109 2A2000           (        mon09.asm):00128                 FCN     '* '
F10C 17053B           (        mon09.asm):00129                 LBSR    GETECH                            ;GET CHARACTER
F10F 5F               (        mon09.asm):00130                 CLRB                                      ;INDICATE NO SECOND CHAR
                      (        mon09.asm):00131         ;* LOOK FOR COMMAND IN TABLE
F110                  (        mon09.asm):00132         LOOKC
F110 8EF148           (        mon09.asm):00133                 LDX     #CMDTAB                           ;POINT TO COMMAND TABLE
F113 7FBF18           (        mon09.asm):00134                 CLR     TEMP                              ;INDICATE NO PARTIAL MATCH
F116                  (        mon09.asm):00135         LOOK1
F116 10A381           (        mon09.asm):00136                 CMPD    ,X++                              ;DOES IT MATCH
F119 271E             (        mon09.asm):00137                 BEQ     LOOK3                             ;YES IT DOES
F11B A11E             (        mon09.asm):00138                 CMPA    -2,X                              ;DOES FIRST CHAR MATCH?
F11D 2603             (        mon09.asm):00139                 BNE     LOOK2                             ;NO, DON'T RECORD
F11F 7ABF18           (        mon09.asm):00140                 DEC     TEMP                              ;SET FLAG
F122                  (        mon09.asm):00141         LOOK2
F122 3002             (        mon09.asm):00142                 LEAX    2,X                               ;ADVANCE TO NEXT
F124 6D84             (        mon09.asm):00143                 TST     ,X                                ;HAVE WE HIT THE END
F126 26EE             (        mon09.asm):00144                 BNE     LOOK1                             ;NO, KEEP LOOKING
F128 5D               (        mon09.asm):00145                 TSTB                                      ;ALREADY HAVE TWO CHARS?
F129 2615             (        mon09.asm):00146                 BNE     ERROR                             ;YES, ERROR
F12B F6BF18           (        mon09.asm):00147                 LDB     TEMP                              ;ANY PARTIAL MATCHES?
F12E 2710             (        mon09.asm):00148                 BEQ     ERROR                             ;NO, ERROR
F130 1F89             (        mon09.asm):00149                 TFR     A,B                               ;SAVE CHAR IN 'A'
F132 170515           (        mon09.asm):00150                 LBSR    GETECH                            ;GET NEXT CHAR
F135 1E89             (        mon09.asm):00151                 EXG     A,B                               ; SWAP BACK
F137 20D7             (        mon09.asm):00152                 BRA     LOOKC                             ;AND CONTINUE
                      (        mon09.asm):00153         ;* COMMAND WAS FOUND, EXECUTE IT
F139                  (        mon09.asm):00154         LOOK3
F139 17051C           (        mon09.asm):00155                 LBSR    SPACE                             ;OUTPUT SPACE
F13C AD94             (        mon09.asm):00156                 JSR     [,X]                              ;EXECUTE COMMAND
F13E 20C2             (        mon09.asm):00157                 BRA     MAIN                              ;AND RETURN
                      (        mon09.asm):00158         ;* ERROR HAS OCCURED
F140                  (        mon09.asm):00159         ERROR
F140 1704F0           (        mon09.asm):00160                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F143 203F             (        mon09.asm):00161                 FCC     ' ?'
F145 FF               (        mon09.asm):00162                 FCB     $FF
F146 20BA             (        mon09.asm):00163                 BRA     MAIN                              ; TRY AGAIN
                      (        mon09.asm):00164         ;* COMMAND LOOKUP TABLE
F148                  (        mon09.asm):00165         CMDTAB
F148 444D             (        mon09.asm):00166                 FCB     'D','M'                           ; DISPLAY MEMORY
F14A F1CB             (        mon09.asm):00167                 FDB     MEMORY
F14C 4449             (        mon09.asm):00168                 FCB     'D','I'                           ; DISASSEMBLE
F14E F2D8             (        mon09.asm):00169                 FDB     DISREG
F150 4456             (        mon09.asm):00170                 FCB     'D','V'                           ;DISPLAY VECTORS
F152 F26F             (        mon09.asm):00171                 FDB     DISVEC
F154 4352             (        mon09.asm):00172                 FCB     'C','R'                           ;CHANGE REGISTER
F156 F354             (        mon09.asm):00173                 FDB     CHGREG
F158 4356             (        mon09.asm):00174                 FCB     'C','V'                           ;CHANGE VECTORS
F15A F2A6             (        mon09.asm):00175                 FDB     CHGVEC
F15C 4500             (        mon09.asm):00176                 FCB     'E',0                             ;SUBSTITUTE MEMORY
F15E F22C             (        mon09.asm):00177                 FDB     SUBMEM
F160 4C00             (        mon09.asm):00178                 FCB     'L',0                             ;DOWNLOAD
F162 F489             (        mon09.asm):00179                 FDB     LOAD
F164 4700             (        mon09.asm):00180                 FCB     'G',0                             ;GO
F166 F3A9             (        mon09.asm):00181                 FDB     GOEXEC
F168 464D             (        mon09.asm):00182                 FCB     'F','M'                           ;FILL MEMORY
F16A F199             (        mon09.asm):00183                 FDB     FILMEM
F16C 5252             (        mon09.asm):00184                 FCB     'R','R'                           ;REPEATING READ
F16E F3CE             (        mon09.asm):00185                 FDB     RDLOOP
F170 5257             (        mon09.asm):00186                 FCB     'R','W'                           ;REPEATING WRITE
F172 F3DE             (        mon09.asm):00187                 FDB     WRLOOP
F174 5700             (        mon09.asm):00188                 FCB     'W',0                             ;WRITE MEMORY
F176 F21C             (        mon09.asm):00189                 FDB     WRIMEM
F178 4D4D             (        mon09.asm):00190                 FCB     'M','M'                           ;MOVE MEMORY
F17A F1B1             (        mon09.asm):00191                 FDB     MOVMEM
F17C 5852             (        mon09.asm):00192                 FCB     'X','R'                           ;REPEATING 16 BIT READ
F17E F3FD             (        mon09.asm):00193                 FDB     XRLOOP
F180 5857             (        mon09.asm):00194                 FCB     'X','W'                           ;REPEATING 16 BIT WRITE
F182 F40D             (        mon09.asm):00195                 FDB     XWLOOP
F184 2B00             (        mon09.asm):00196                 FCB     '+',0                             ;HEX ADDITION
F186 F428             (        mon09.asm):00197                 FDB     HEXADD
F188 2D00             (        mon09.asm):00198                 FCB     '-',0                             ;HEX SUBTRACTION
F18A F439             (        mon09.asm):00199                 FDB     HEXSUB
F18C 3F00             (        mon09.asm):00200                 FCB     '?',0                             ;HELP COMMAND
F18E F45B             (        mon09.asm):00201                 FDB     HELP
F190 4F53             (        mon09.asm):00202                 FCB     'O','S'                           ;BOOT COMMAND
F192 F7D5             (        mon09.asm):00203                 FDB     BOOTOS
F194 4F57             (        mon09.asm):00204                 FCB     'O','W'                           ;WRITE BOOT COMMAND
F196 F765             (        mon09.asm):00205                 FDB     WRITEOS
F198 00               (        mon09.asm):00206                 FCB     0                                 ;MARK END OF TABLE
                      (        mon09.asm):00207         ;*
                      (        mon09.asm):00208         ;* 'F' - FILL MEMORY
                      (        mon09.asm):00209         ;*
F199                  (        mon09.asm):00210         FILMEM
F199 1703DE           (        mon09.asm):00211                 LBSR    GETRNG                            ;GET ADDRESSES
F19C FDBF18           (        mon09.asm):00212                 STD     TEMP                              ;SAVE IT
F19F 1704B6           (        mon09.asm):00213                 LBSR    SPACE                             ;SPACE OVER
F1A2 170439           (        mon09.asm):00214                 LBSR    GETBYT                            ;GET DATA BYTE
F1A5 2699             (        mon09.asm):00215                 BNE     ERROR                             ;INVALID
F1A7                  (        mon09.asm):00216         FILL1
F1A7 A780             (        mon09.asm):00217                 STA     ,X+                               ;WRITE IT
F1A9 BCBF18           (        mon09.asm):00218                 CMPX    TEMP                              ;ARE WE THERE
F1AC 23F9             (        mon09.asm):00219                 BLS     FILL1                             ;NO, KEEP GOING
F1AE 1604AD           (        mon09.asm):00220                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00221         ;*
                      (        mon09.asm):00222         ;* 'MM' - MOVE MEMORY
                      (        mon09.asm):00223         ;*
F1B1                  (        mon09.asm):00224         MOVMEM
F1B1 1703C6           (        mon09.asm):00225                 LBSR    GETRNG                            ;GET A RANGE
F1B4 FDBF18           (        mon09.asm):00226                 STD     TEMP                              ;SAVE LAST VALUE
F1B7 17049E           (        mon09.asm):00227                 LBSR    SPACE                             ;SEPERATOR
F1BA 1703DA           (        mon09.asm):00228                 LBSR    GETADR                            ;GET DEST ADDRESS
F1BD 1F02             (        mon09.asm):00229                 TFR     D,Y                               ;SET IT UP
F1BF                  (        mon09.asm):00230         MOVM1
F1BF A680             (        mon09.asm):00231                 LDA     ,X+                               ;GET SOURCE BYTE
F1C1 A7A0             (        mon09.asm):00232                 STA     ,Y+                               ;SAVE IN DEST
F1C3 BCBF18           (        mon09.asm):00233                 CMPX    TEMP                              ;SAVE IT
F1C6 23F7             (        mon09.asm):00234                 BLS     MOVM1                             ;KEEP MOVEING
F1C8 160493           (        mon09.asm):00235                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00236         ;*
                      (        mon09.asm):00237         ;* 'DM' - DISPLAY MEMORY
                      (        mon09.asm):00238         ;*
F1CB                  (        mon09.asm):00239         MEMORY
F1CB 1703AC           (        mon09.asm):00240                 LBSR    GETRNG                            ;GET ADDRESS
F1CE FDBF18           (        mon09.asm):00241                 STD     TEMP                              ;SAVE
F1D1                  (        mon09.asm):00242         MEM1
F1D1 17048A           (        mon09.asm):00243                 LBSR    LFCR                              ;NEW LINE
F1D4 1704A5           (        mon09.asm):00244                 LBSR    CHKCHR                            ;CHECK FOR CHAR
F1D7 1027FF27         (        mon09.asm):00245                 LBEQ    MAIN                              ;ESCAPE, QUIT
F1DB 1F10             (        mon09.asm):00246                 TFR     X,D                               ;GET ADDRESS
F1DD 3406             (        mon09.asm):00247                 PSHS    A,B                               ;SAVE FOR LATER
F1DF 170437           (        mon09.asm):00248                 LBSR    WRDOUT                            ;DISPLAY
F1E2 C610             (        mon09.asm):00249                 LDB     #16                               ;DISPLAY 16 TO A LINE
F1E4                  (        mon09.asm):00250         MEM2
F1E4 170471           (        mon09.asm):00251                 LBSR    SPACE                             ;OUTPUT A SPACE
F1E7 C503             (        mon09.asm):00252                 BITB    #3                                ;ON A BOUNDARY?
F1E9 2603             (        mon09.asm):00253                 BNE     MEM3                              ;NO, SPACE
F1EB 17046A           (        mon09.asm):00254                 LBSR    SPACE                             ;EXTRA SPACE
F1EE                  (        mon09.asm):00255         MEM3
F1EE A680             (        mon09.asm):00256                 LDA     ,X+                               ;GET BYTE
F1F0 17042A           (        mon09.asm):00257                 LBSR    HEXOUT                            ;DISPLAY
F1F3 5A               (        mon09.asm):00258                 DECB                                      ;REDUCE COUNT
F1F4 26EE             (        mon09.asm):00259                 BNE     MEM2                              ;CONTINUE
F1F6 C604             (        mon09.asm):00260                 LDB     #4                                ;FOUR SPACE
F1F8                  (        mon09.asm):00261         MEM4
F1F8 17045D           (        mon09.asm):00262                 LBSR    SPACE                             ;DISPLAY A SPACE
F1FB 5A               (        mon09.asm):00263                 DECB                                      ;REDUCE COUNT
F1FC 26FA             (        mon09.asm):00264                 BNE     MEM4                              ; CONTINUE
F1FE 3510             (        mon09.asm):00265                 PULS    X                                 ;RESTORE X
F200 C610             (        mon09.asm):00266                 LDB     #16                               ;COUNT OF 16
F202                  (        mon09.asm):00267         MEM5
F202 A680             (        mon09.asm):00268                 LDA     ,X+                               ;GET CHAR
F204 8120             (        mon09.asm):00269                 CMPA    #' '                              ; <SPACE
F206 2504             (        mon09.asm):00270                 BLO     MEM6                              ; CONVERT TO DOT
F208 817F             (        mon09.asm):00271                 CMPA    #$7F                              ; PRINTABLE?
F20A 2502             (        mon09.asm):00272                 BLO     MEM7                              ; OK TO DISPLAY
F20C                  (        mon09.asm):00273         MEM6
F20C 862E             (        mon09.asm):00274                 LDA     #'.'                              ;CHANGE TO DOT
F20E                  (        mon09.asm):00275         MEM7
F20E 170464           (        mon09.asm):00276                 LBSR    PUTCHR                            ;OUTPUT
F211 5A               (        mon09.asm):00277                 DECB                                      ;REDUCE COUNT
F212 26EE             (        mon09.asm):00278                 BNE     MEM5                              ; DISPLAY THEM ALL
F214 BCBF18           (        mon09.asm):00279                 CMPX    TEMP                              ; PAST END?
F217 23B8             (        mon09.asm):00280                 BLS     MEM1                              ; NO, KEEP GOING
F219 160442           (        mon09.asm):00281                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00282         ;*
                      (        mon09.asm):00283         ;* 'W' - WRITE TO MEMORY
                      (        mon09.asm):00284         ;*
F21C                  (        mon09.asm):00285         WRIMEM
F21C 170378           (        mon09.asm):00286                 LBSR    GETADR                            ;GET ADDRESS
F21F 1F01             (        mon09.asm):00287                 TFR     D,X                               ;SET IT UP
F221 170434           (        mon09.asm):00288                 LBSR    SPACE                             ; STEP OVER
F224 1703B7           (        mon09.asm):00289                 LBSR    GETBYT                            ;GET BYTE
F227 A784             (        mon09.asm):00290                 STA     ,X                                ;WRITE TO MEMORY
F229 160432           (        mon09.asm):00291                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00292         ;*
                      (        mon09.asm):00293         ;* 'E' - EDIT MEMORY
                      (        mon09.asm):00294         ;*
F22C                  (        mon09.asm):00295         SUBMEM
F22C 170368           (        mon09.asm):00296                 LBSR    GETADR                            ;GET ADDRESS
F22F 1F01             (        mon09.asm):00297                 TFR     D,X                               ;COPY
F231                  (        mon09.asm):00298         SUBM1
F231 17042A           (        mon09.asm):00299                 LBSR    LFCR                              ; NEW LINE
F234 1F10             (        mon09.asm):00300                 TFR     X,D                               ;GET ADDRESS
F236 1703E0           (        mon09.asm):00301                 LBSR    WRDOUT                            ; OUTPUT
F239 C608             (        mon09.asm):00302                 LDB     #8                                ;NEW COUNT
F23B                  (        mon09.asm):00303         SUBM2
F23B 17041A           (        mon09.asm):00304                 LBSR    SPACE                             ; SEPERATOR
F23E A684             (        mon09.asm):00305                 LDA     ,X                                ;GET BYTE
F240 1703DA           (        mon09.asm):00306                 LBSR    HEXOUT                            ; DISPLAY
F243 862D             (        mon09.asm):00307                 LDA     #'-'                              ; PROMPT
F245 17042D           (        mon09.asm):00308                 LBSR    PUTCHR                            ; OUTPUT
F248 170393           (        mon09.asm):00309                 LBSR    GETBYT                            ; GET A BYTE
F24B 2609             (        mon09.asm):00310                 BNE     SUBM4                             ; INVALID
F24D A784             (        mon09.asm):00311                 STA     ,X                                ;RESAVE
F24F                  (        mon09.asm):00312         SUBM3
F24F 3001             (        mon09.asm):00313                 LEAX    1,X                               ;ADVANCE
F251 5A               (        mon09.asm):00314                 DECB                                      ;REDUCE COUNT
F252 26E7             (        mon09.asm):00315                 BNE     SUBM2                             ;MORE, CONTINUE
F254 20DB             (        mon09.asm):00316                 BRA     SUBM1                             ;NEW LINE
F256                  (        mon09.asm):00317         SUBM4
F256 810D             (        mon09.asm):00318                 CMPA    #$0D                              ;CR?
F258 10270402         (        mon09.asm):00319                 LBEQ    LFCR                              ;IF SO, QUIT
F25C 8120             (        mon09.asm):00320                 CMPA    #' '                              ;SPACE?
F25E 2605             (        mon09.asm):00321                 BNE     SUBM5                             ;NO
F260 1703F5           (        mon09.asm):00322                 LBSR    SPACE                             ;FILL FOR TWO DIGITS
F263 20EA             (        mon09.asm):00323                 BRA     SUBM3                             ;ADVANCE
F265                  (        mon09.asm):00324         SUBM5
F265 8108             (        mon09.asm):00325                 CMPA    #$08                              ; BACKSPACE?
F267 1026FED5         (        mon09.asm):00326                 LBNE    ERROR                             ; INVALID
F26B 301F             (        mon09.asm):00327                 LEAX    -1,X                              ; BACKUP
F26D 20C2             (        mon09.asm):00328                 BRA     SUBM1                             ; NEW LINE
                      (        mon09.asm):00329         ;*
                      (        mon09.asm):00330         ;* 'DV' - DISPLAY VECTORS
                      (        mon09.asm):00331         ;*
F26F                  (        mon09.asm):00332         DISVEC
F26F 8EF285           (        mon09.asm):00333                 LDX     #VECTXT                           ; POINT TO VECTOR TEXT
F272 108EBF00         (        mon09.asm):00334                 LDY     #SWIADR                           ; POINT TO FIRST VECTOR
F276                  (        mon09.asm):00335         DISV1
F276 1703C4           (        mon09.asm):00336                 LBSR    WRLIN                             ; OUTPUT A MESSAGE
F279 ECA1             (        mon09.asm):00337                 LDD     ,Y++                              ; GET A VECTOR
F27B 17039B           (        mon09.asm):00338                 LBSR    WRDOUT                            ; OUTPUT VECTOR ADDRESS
F27E A684             (        mon09.asm):00339                 LDA     ,X                                ;MORE TEXT?
F280 26F4             (        mon09.asm):00340                 BNE     DISV1                             ; AND CONTINUE
F282 1603D9           (        mon09.asm):00341                 LBRA    LFCR                              ; NEW LINE
F285                  (        mon09.asm):00342         VECTXT
F285 5357493D00       (        mon09.asm):00343                 FCN     'SWI='
F28A 20535749323D00   (        mon09.asm):00344                 FCN     ' SWI2='
F291 20535749333D00   (        mon09.asm):00345                 FCN     ' SWI3='
F298 204952513D00     (        mon09.asm):00346                 FCN     ' IRQ='
F29E 20464952513D00   (        mon09.asm):00347                 FCN     ' FIRQ='
F2A5 00               (        mon09.asm):00348                 FCB     0                                 ; END OF TABLE
                      (        mon09.asm):00349         ;*
                      (        mon09.asm):00350         ;* 'CV' - CHANGE VECTOR
                      (        mon09.asm):00351         ;*
F2A6                  (        mon09.asm):00352         CHGVEC
F2A6 1703A1           (        mon09.asm):00353                 LBSR    GETECH                            ;GET CHAR & ECHO
F2A9 8153             (        mon09.asm):00354                 CMPA    #'S'                              ;SWI?
F2AB 2604             (        mon09.asm):00355                 BNE     CHGV1                             ;NO
F2AD 8631             (        mon09.asm):00356                 LDA     #'1'                              ;SAME AS '1'
F2AF 200E             (        mon09.asm):00357                 BRA     CHGV3                             ;CONTINUE
F2B1                  (        mon09.asm):00358         CHGV1
F2B1 8149             (        mon09.asm):00359                 CMPA    #'I'                              ;IRQ?
F2B3 2604             (        mon09.asm):00360                 BNE     CHGV2                             ;NO, ITS OK
F2B5 8634             (        mon09.asm):00361                 LDA     #'4'                              ;CONVERT
F2B7 2006             (        mon09.asm):00362                 BRA     CHGV3                             ;AND CONTINUE
F2B9                  (        mon09.asm):00363         CHGV2
F2B9 8146             (        mon09.asm):00364                 CMPA    #'F'                              ;FIRQ?
F2BB 2602             (        mon09.asm):00365                 BNE     CHGV3                             ;NO
F2BD 8635             (        mon09.asm):00366                 LDA     #'5'                              ;CONVERT
F2BF                  (        mon09.asm):00367         CHGV3
F2BF 8031             (        mon09.asm):00368                 SUBA    #'1'                              ;TEST IT
F2C1 8104             (        mon09.asm):00369                 CMPA    #4                                ;CHECK RANGE
F2C3 1022FE79         (        mon09.asm):00370                 LBHI    ERROR                             ; INVALID
F2C7 8EBF00           (        mon09.asm):00371                 LDX     #SWIADR                           ;POINT TO IT
F2CA                  (        mon09.asm):00372         CHGV4
F2CA 48               (        mon09.asm):00373                 LSLA                                      ;X2 FOR 2 BYTE ENTRIES
F2CB 3086             (        mon09.asm):00374                 LEAX    A,X     ADVANCE TO VECTOR
F2CD 170388           (        mon09.asm):00375                 LBSR    SPACE                             ; SEPERATOR
F2D0 1702C4           (        mon09.asm):00376                 LBSR    GETADR                            ;GET NEW VALUE
F2D3 ED84             (        mon09.asm):00377                 STD     ,X                                ; WRITE NEW VECTOR
F2D5 160386           (        mon09.asm):00378                 LBRA    LFCR                              ; NEW LINE & EXIT
                      (        mon09.asm):00379         ;*
                      (        mon09.asm):00380         ;* 'DR' - DISPLAY REGISTERS
                      (        mon09.asm):00381         ;*
F2D8                  (        mon09.asm):00382         DISREG
F2D8 8EF322           (        mon09.asm):00383                 LDX     #REGTXT                           ;POINT TO TEXT
F2DB 108EBF0A         (        mon09.asm):00384                 LDY     #SAVCC                            ;POINT TO VALUE
F2DF 8D31             (        mon09.asm):00385                 BSR     RSUB1                             ;'CC='
F2E1 170359           (        mon09.asm):00386                 LBSR    WRLIN                             ;' ['
F2E4 CEF34C           (        mon09.asm):00387                 LDU     #CCBITS                           ;POINT TO BIT TABLE
F2E7 E63F             (        mon09.asm):00388                 LDB     -1,Y                              ;GET BITS BACK
F2E9 3420             (        mon09.asm):00389                 PSHS    Y                                 ;SAVE POINTER
F2EB 108E0008         (        mon09.asm):00390                 LDY     #8                                ;EIGHT BITS IN BYTE
F2EF                  (        mon09.asm):00391         REGB1
F2EF A6C0             (        mon09.asm):00392                 LDA     ,U+                               ; GET BIT IDENTIFIER
F2F1 58               (        mon09.asm):00393                 ASLB                                      ;IS IT SET?
F2F2 2502             (        mon09.asm):00394                 BCS     RBITS                             ;YES, DISPLAY IT
F2F4 862D             (        mon09.asm):00395                 LDA     #'-'                              ;NO, DISPLAY DASH
F2F6                  (        mon09.asm):00396         RBITS
F2F6 17037C           (        mon09.asm):00397                 LBSR    PUTCHR                            ; OUTPUT A CHARACTER
F2F9 313F             (        mon09.asm):00398                 LEAY    -1,Y                              ; REDUCE COUNT
F2FB 26F2             (        mon09.asm):00399                 BNE     REGB1                             ; MORE TO GO
F2FD 3520             (        mon09.asm):00400                 PULS    Y                                 ; RESTORE Y
F2FF 8D11             (        mon09.asm):00401                 BSR     RSUB1                             ;'] A='
F301 8D0F             (        mon09.asm):00402                 BSR     RSUB1                             ;' B='
F303 8D0D             (        mon09.asm):00403                 BSR     RSUB1                             ;' DP='
F305 8D13             (        mon09.asm):00404                 BSR     RSUB2                             ;' X='
F307 8D11             (        mon09.asm):00405                 BSR     RSUB2                             ;' Y='
F309 8D0F             (        mon09.asm):00406                 BSR     RSUB2                             ;' U='
F30B 8D0D             (        mon09.asm):00407                 BSR     RSUB2                             ;' PC='
F30D 8D0B             (        mon09.asm):00408                 BSR     RSUB2                             ;' S='
F30F 16034C           (        mon09.asm):00409                 LBRA    LFCR                              ;QUIT
                      (        mon09.asm):00410         ;* DISPLAY 8 BIT REGISTER VALUE
F312                  (        mon09.asm):00411         RSUB1
F312 170328           (        mon09.asm):00412                 LBSR    WRLIN                             ;OUTPUT BYTE VALUE
F315 A6A0             (        mon09.asm):00413                 LDA     ,Y+                               ; GET REGISTER VALUE
F317 160303           (        mon09.asm):00414                 LBRA    HEXOUT                            ;OUTPUT IN HEX
                      (        mon09.asm):00415         ;* DISPLAY 16 BIT REGISTER VALUE
F31A                  (        mon09.asm):00416         RSUB2
F31A 170320           (        mon09.asm):00417                 LBSR    WRLIN                             ; OUTPUT WORD VALUE
F31D ECA1             (        mon09.asm):00418                 LDD     ,Y++                              ; GET REGISTER VALUE
F31F 1602F7           (        mon09.asm):00419                 LBRA    WRDOUT                            ; OUTPUT IN HEX
                      (        mon09.asm):00420         ;* TABLE OF TEXT FOR REGISTER DISPLAY
F322                  (        mon09.asm):00421         REGTXT
F322 43433D00         (        mon09.asm):00422                 FCN     'CC='
F326 205B00           (        mon09.asm):00423                 FCN     ' ['
F329 5D20413D00       (        mon09.asm):00424                 FCN     '] A='
F32E 20423D00         (        mon09.asm):00425                 FCN     ' B='
F332 2044503D00       (        mon09.asm):00426                 FCN     ' DP='
F337 20583D00         (        mon09.asm):00427                 FCN     ' X='
F33B 20593D00         (        mon09.asm):00428                 FCN     ' Y='
F33F 20553D00         (        mon09.asm):00429                 FCN     ' U='
F343 2050433D00       (        mon09.asm):00430                 FCN     ' PC='
F348 20533D00         (        mon09.asm):00431                 FCN     ' S='
                      (        mon09.asm):00432         ;* TABLE OF CONDITION CODE BIT MEANINGS
F34C                  (        mon09.asm):00433         CCBITS
F34C 454648494E5A5643 (        mon09.asm):00434                 FCC     'EFHINZVC'
                      (        mon09.asm):00435         ;*
                      (        mon09.asm):00436         ;* 'CR' - CHANGE REGISTER
                      (        mon09.asm):00437         ;*
F354                  (        mon09.asm):00438         CHGREG
F354 1702F3           (        mon09.asm):00439                 LBSR    GETECH      GET OPERAND
F357 8120             (        mon09.asm):00440                 CMPA    #' '        A+B?
F359 2727             (        mon09.asm):00441                 BEQ     CHG4        YES
F35B 8EF39F           (        mon09.asm):00442                 LDX     #CHGTAB     POINT TO TABLE
F35E 5F               (        mon09.asm):00443                 CLRB    ZERO INDICATOR
F35F                  (        mon09.asm):00444         CHG1
F35F A184             (        mon09.asm):00445                 CMPA    ,X      IS THIS IT?
F361 2708             (        mon09.asm):00446                 BEQ     CHG2        YES
F363 5C               (        mon09.asm):00447                 INCB    ADVANCE COUNT
F364 6D80             (        mon09.asm):00448                 TST     ,X+     END OF TABLE
F366 26F7             (        mon09.asm):00449                 BNE     CHG1        NO, KEEP TRYING
F368 16FDD5           (        mon09.asm):00450                 LBRA    ERROR       INDICATE ERROR
F36B                  (        mon09.asm):00451         CHG2
F36B 1702EA           (        mon09.asm):00452                 LBSR    SPACE       OUTPUT SPACE
F36E 8EBF0A           (        mon09.asm):00453                 LDX     #SAVCC      POINT TO START OF REGISTERS
F371 C104             (        mon09.asm):00454                 CMPB    #4      16 BIT?
F373 241B             (        mon09.asm):00455                 BHS     R16     YES
F375 3085             (        mon09.asm):00456                 LEAX    B,X     OFFSET TO ADDRESS
F377 170264           (        mon09.asm):00457                 LBSR    GETBYT      GET NEW VALUE
F37A 1026FDC2         (        mon09.asm):00458                 LBNE    ERROR       INVALID
F37E A784             (        mon09.asm):00459                 STA     ,X      SAVE IN REGISTER
F380 201A             (        mon09.asm):00460                 BRA     CHG3        AND QUIT
F382                  (        mon09.asm):00461         CHG4
F382 1702AE           (        mon09.asm):00462                 LBSR    WRMSG       OUTPUT MESSAGE
F385 5B41425D2000     (        mon09.asm):00463                 FCN     '[AB] '
F38B 8EBF0B           (        mon09.asm):00464                 LDX     #SAVA       POINT TO 'D'
F38E 2007             (        mon09.asm):00465                 BRA     R17     MAKE LIKE 16 BIT REG
F390                  (        mon09.asm):00466         R16
F390 3004             (        mon09.asm):00467                 LEAX    4,X     OFFSET TO 16 BIT REGISTERS
F392 C004             (        mon09.asm):00468                 SUBB    #4      CONVERT TO ZERO ORIGIN
F394 58               (        mon09.asm):00469                 LSLB    DOUBLE FOR WORD VALUES
F395 3085             (        mon09.asm):00470                 LEAX    B,X     MOVE TO CORRECT OFFSET
F397                  (        mon09.asm):00471         R17
F397 1701FD           (        mon09.asm):00472                 LBSR    GETADR      GET WORD VALUE
F39A ED84             (        mon09.asm):00473                 STD     ,X      SET REGISTER VALUE
F39C                  (        mon09.asm):00474         CHG3
F39C 1602BF           (        mon09.asm):00475                 LBRA    LFCR        QUIT
                      (        mon09.asm):00476         ;* TABLE OF REGISTER NAMES
F39F                  (        mon09.asm):00477         CHGTAB
F39F 4341424458595550 (        mon09.asm):00478                 FCN     'CABDXYUPS'
     5300
                      (        mon09.asm):00479         ;*
                      (        mon09.asm):00480         ;* 'G' - GO (EXECUTE)
                      (        mon09.asm):00481         ;*
F3A9                  (        mon09.asm):00482         GOEXEC
F3A9 1701B6           (        mon09.asm):00483                 LBSR    GETPC       GET ADDRESS
F3AC 1702AF           (        mon09.asm):00484                 LBSR    LFCR        NEW LINE
F3AF 10FEBF16         (        mon09.asm):00485                 LDS     SAVS        RESTORE STACK POINTER
F3B3 B6BF0A           (        mon09.asm):00486                 LDA     SAVCC       GET SAVED CC
F3B6 F6BF0D           (        mon09.asm):00487                 LDB     SAVDP       GET SAVED DPR
F3B9 3406             (        mon09.asm):00488                 PSHS    A,B     SAVE ON STACK FOR LAST RESTORE
F3BB FCBF0B           (        mon09.asm):00489                 LDD     SAVA        RESTORE A, B REGISTERS
F3BE BEBF0E           (        mon09.asm):00490                 LDX     SAVX        RESTORE X REGISTER
F3C1 10BEBF10         (        mon09.asm):00491                 LDY     SAVY        RESTORE Y REGISTER
F3C5 FEBF12           (        mon09.asm):00492                 LDU     SAVU        RESTORE U REGISTER
F3C8 3509             (        mon09.asm):00493                 PULS    CC,DP       RESTORE CC + DP
F3CA 6E9FBF14         (        mon09.asm):00494                 JMP     [SAVPC]     EXECUTE USER PGM
                      (        mon09.asm):00495         ;*
                      (        mon09.asm):00496         ;* 'RR' - REPEATING READ
                      (        mon09.asm):00497         ;*
F3CE                  (        mon09.asm):00498         RDLOOP:
F3CE 1701C6           (        mon09.asm):00499                 LBSR    GETADR                            ;GET ADDRESS
F3D1 1F01             (        mon09.asm):00500                 TFR     D,X                               ;SET UP 'X'
F3D3 170288           (        mon09.asm):00501                 LBSR    LFCR                              ;NEW LINE
F3D6                  (        mon09.asm):00502         RDLP1:
F3D6 A684             (        mon09.asm):00503                 LDA     ,X                                ;READ LOCATION
F3D8 1702A1           (        mon09.asm):00504                 LBSR    CHKCHR                            ;ABORT?
F3DB 26F9             (        mon09.asm):00505                 BNE     RDLP1                             ;NO, ITS OK
F3DD 39               (        mon09.asm):00506                 RTS
                      (        mon09.asm):00507         ;*
                      (        mon09.asm):00508         ;* 'RW' - REPEATING WRITE
                      (        mon09.asm):00509         ;*
F3DE                  (        mon09.asm):00510         WRLOOP:
F3DE 1701B6           (        mon09.asm):00511                 LBSR    GETADR                            ;GET ADDRESS
F3E1 1F01             (        mon09.asm):00512                 TFR     D,X                               ;SET UP 'X'
F3E3 170272           (        mon09.asm):00513                 LBSR    SPACE                             ;SPACE OVER
F3E6 1701F5           (        mon09.asm):00514                 LBSR    GETBYT                            ;GET DATA
F3E9 1026FD53         (        mon09.asm):00515                 LBNE    ERROR                             ;INVALID
F3ED 3402             (        mon09.asm):00516                 PSHS    A                                 ;SAVE ACCA
F3EF 17026C           (        mon09.asm):00517                 LBSR    LFCR                              ;NEW LINE
F3F2                  (        mon09.asm):00518         WRLP1:
F3F2 A6E4             (        mon09.asm):00519                 LDA     ,S                                ;GET CHAR
F3F4 A784             (        mon09.asm):00520                 STA     ,X                                ;WRITE IT OUT
F3F6 170283           (        mon09.asm):00521                 LBSR    CHKCHR                            ;ABORT COMMAND?
F3F9 26F7             (        mon09.asm):00522                 BNE     WRLP1                             ;CONTINUE
F3FB 3582             (        mon09.asm):00523                 PULS    A,PC                              ;GO HOME
                      (        mon09.asm):00524         ;*
                      (        mon09.asm):00525         ;* 'XR' - REPEATING 16 BIT READ
                      (        mon09.asm):00526         ;*
F3FD                  (        mon09.asm):00527         XRLOOP
F3FD 170197           (        mon09.asm):00528                 LBSR    GETADR      GET ADDRESS
F400 1F01             (        mon09.asm):00529                 TFR     D,X     SET UP 'X'
F402 170259           (        mon09.asm):00530                 LBSR    LFCR        NEW LINE
F405                  (        mon09.asm):00531         XRLP1
F405 EC84             (        mon09.asm):00532                 LDD     ,X      READ LOCATION
F407 170272           (        mon09.asm):00533                 LBSR    CHKCHR      ABORT?
F40A 26F9             (        mon09.asm):00534                 BNE     XRLP1       NO, ITS OK
F40C 39               (        mon09.asm):00535                 RTS
                      (        mon09.asm):00536         ;*
                      (        mon09.asm):00537         ;* 'XW' - REPEATING 16 BITWRITE
                      (        mon09.asm):00538         ;*
F40D                  (        mon09.asm):00539         XWLOOP
F40D 170187           (        mon09.asm):00540                 LBSR    GETADR      GET ADDRESS
F410 1F01             (        mon09.asm):00541                 TFR     D,X     SET UP 'X'
F412 170243           (        mon09.asm):00542                 LBSR    SPACE       SPACE OVER
F415 17017F           (        mon09.asm):00543                 LBSR    GETADR      GET DATA
F418 3406             (        mon09.asm):00544                 PSHS    A,B     SAVE ACCA
F41A 170241           (        mon09.asm):00545                 LBSR    LFCR        NEW LINE
F41D                  (        mon09.asm):00546         XWLP1
F41D ECE4             (        mon09.asm):00547                 LDD     ,S      GET CHAR
F41F ED84             (        mon09.asm):00548                 STD     ,X      WRITE IT OUT
F421 170258           (        mon09.asm):00549                 LBSR    CHKCHR      ABORT COMMAND?
F424 26F7             (        mon09.asm):00550                 BNE     XWLP1       CONTINUE
F426 3586             (        mon09.asm):00551                 PULS    A,B,PC      GO HOME
                      (        mon09.asm):00552         ;*
                      (        mon09.asm):00553         ;* '+' - HEXIDECIMAL ADDITION
                      (        mon09.asm):00554         ;*
F428                  (        mon09.asm):00555         HEXADD
F428 17016C           (        mon09.asm):00556                 LBSR    GETADR      GET FIRST VALUE
F42B 3406             (        mon09.asm):00557                 PSHS    A,B     SAVE IT
F42D 862B             (        mon09.asm):00558                 LDA     #'+'        PLUS SIGN
F42F 170243           (        mon09.asm):00559                 LBSR    PUTCHR      DISPLAY
F432 170162           (        mon09.asm):00560                 LBSR    GETADR      GET SECOND VALUE
F435 E3E4             (        mon09.asm):00561                 ADDD    ,S      PERFORM ADDITION
F437 2013             (        mon09.asm):00562                 BRA     HEXSHO      DISPLAY IT
                      (        mon09.asm):00563         ;*
                      (        mon09.asm):00564         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (        mon09.asm):00565         ;*
F439                  (        mon09.asm):00566         HEXSUB
F439 17015B           (        mon09.asm):00567                 LBSR    GETADR      GET FIRST
F43C 3406             (        mon09.asm):00568                 PSHS    A,B     SAVE IT
F43E 862D             (        mon09.asm):00569                 LDA     #'-'        MINUS SIGN
F440 170232           (        mon09.asm):00570                 LBSR    PUTCHR      DISPLAY
F443 170151           (        mon09.asm):00571                 LBSR    GETADR      GET SECOND ADDRESS
F446 3406             (        mon09.asm):00572                 PSHS    A,B     SAVE IT
F448 EC62             (        mon09.asm):00573                 LDD     2,S     GET FIRST VALUE
F44A A3E1             (        mon09.asm):00574                 SUBD    ,S++        PERFORM SUBTRACTION
F44C                  (        mon09.asm):00575         HEXSHO
F44C EDE4             (        mon09.asm):00576                 STD     ,S      SAVE RESULT
F44E 863D             (        mon09.asm):00577                 LDA     #'='        =ALS SIGN
F450 170222           (        mon09.asm):00578                 LBSR    PUTCHR      DISPLAY
F453 3506             (        mon09.asm):00579                 PULS    A,B     RESTORE RESULT
F455 1701C1           (        mon09.asm):00580                 LBSR    WRDOUT      OUTPUT
F458 160203           (        mon09.asm):00581                 LBRA    LFCR        NEW LINE & RETURN
                      (        mon09.asm):00582         ;*
                      (        mon09.asm):00583         ;* '?' - HELP COMMAND
                      (        mon09.asm):00584         ;*
F45B                  (        mon09.asm):00585         HELP
F45B 8EF9B0           (        mon09.asm):00586                 LDX     #HTEXT      POINT TO HELP TEXT
F45E                  (        mon09.asm):00587         HLP1
F45E C619             (        mon09.asm):00588                 LDB     #25     COLUMN COUNTER
F460                  (        mon09.asm):00589         HLP2
F460 A680             (        mon09.asm):00590                 LDA     ,X+     GET CHAR FROM TEXT
F462 2718             (        mon09.asm):00591                 BEQ     HLP4        EXIT THIS LINE
F464 817C             (        mon09.asm):00592                 CMPA    #'|'        SEPERATOR?
F466 2706             (        mon09.asm):00593                 BEQ     HLP3        YES, EXIT
F468 17020A           (        mon09.asm):00594                 LBSR    PUTCHR      OUTPUT
F46B 5A               (        mon09.asm):00595                 DECB    BACKUP
F46C 20F2             (        mon09.asm):00596                 BRA     HLP2        NEXT
F46E                  (        mon09.asm):00597         HLP3
F46E 1701E7           (        mon09.asm):00598                 LBSR    SPACE       OUTPUT SPACE
F471 5A               (        mon09.asm):00599                 DECB    REDUCE COUNT
F472 26FA             (        mon09.asm):00600                 BNE     HLP3        KEEP GOING
F474 1701BC           (        mon09.asm):00601                 LBSR    WRMSG       OUTPUT MESSAGE
F477 2D2000           (        mon09.asm):00602                 FCN     '- '        SEPERATOR
F47A 20E4             (        mon09.asm):00603                 BRA     HLP2        AND CONTINUE
F47C                  (        mon09.asm):00604         HLP4
F47C 1701DF           (        mon09.asm):00605                 LBSR    LFCR        NEW LINE
F47F 1701FA           (        mon09.asm):00606                 LBSR    CHKCHR      TEST FOR CHARACTER ENTERED
F482 2704             (        mon09.asm):00607                 BEQ     HLP5        IF SO, EXIT
F484 A684             (        mon09.asm):00608                 LDA     ,X      IS THIS THE END?
F486 2AD6             (        mon09.asm):00609                 BPL     HLP1        NO, KEEP GOING
F488                  (        mon09.asm):00610         HLP5
F488 39               (        mon09.asm):00611                 RTS
                      (        mon09.asm):00612         ;*
                      (        mon09.asm):00613         ;* 'DL' - DOWNLOAD
                      (        mon09.asm):00614         ;*
F489                  (        mon09.asm):00615         LOAD
F489 1701D2           (        mon09.asm):00616                 LBSR    LFCR        NEW LINE
F48C                  (        mon09.asm):00617         DLO1
F48C 8D0E             (        mon09.asm):00618                 BSR     DLOAD       DOWNLOAD RECORD
F48E 2409             (        mon09.asm):00619                 BCC     DLO2        END
F490 A6E4             (        mon09.asm):00620                 LDA     ,S      GET OLD I/O CONFIG
F492 862E             (        mon09.asm):00621                 LDA     #'.'        GET DOT
F494 1701DE           (        mon09.asm):00622                 LBSR    PUTCHR      OUTPUT
F497 20F3             (        mon09.asm):00623                 BRA     DLO1        CONTINUE
F499                  (        mon09.asm):00624         DLO2
F499 1601C2           (        mon09.asm):00625                 LBRA    LFCR        New line & return
                      (        mon09.asm):00626         ;* Download a record in either MOTOROLA or INTEL hex format
F49C                  (        mon09.asm):00627         DLOAD
F49C 1701CB           (        mon09.asm):00628                 LBSR    GETCHR      Get a character
F49F 813A             (        mon09.asm):00629                 CMPA    #':'        Start of INTEL record?
F4A1 276B             (        mon09.asm):00630                 BEQ     DLINT       Yes, download INTEL
F4A3 8153             (        mon09.asm):00631                 CMPA    #'S'        Start of MOTOROLA record?
F4A5 26F5             (        mon09.asm):00632                 BNE     DLOAD       No, keep looking
                      (        mon09.asm):00633         ;* Download a record in MOTOROLA hex format
F4A7                  (        mon09.asm):00634         DLMOT
F4A7 1701C0           (        mon09.asm):00635                 LBSR    GETCHR      GET NEXT CHAR
F4AA 8130             (        mon09.asm):00636                 CMPA    #'0'        HEADER RECORD?
F4AC 27EE             (        mon09.asm):00637                 BEQ     DLOAD       SKIP IT
F4AE 8139             (        mon09.asm):00638                 CMPA    #'9'        END OF FILE?
F4B0 275B             (        mon09.asm):00639                 BEQ     DLEOF       END OF FILE
F4B2 8131             (        mon09.asm):00640                 CMPA    #'1'        DATA RECORD?
F4B4 2642             (        mon09.asm):00641                 BNE     LODERR      LOAD ERROR
F4B6 170125           (        mon09.asm):00642                 LBSR    GETBYT      GET LENGTH
F4B9 263D             (        mon09.asm):00643                 BNE     LODERR      Report error
F4BB B7BF18           (        mon09.asm):00644                 STA     TEMP        START CHECKSUM
F4BE 8003             (        mon09.asm):00645                 SUBA    #3      CONVERT
F4C0 B7BF19           (        mon09.asm):00646                 STA     TEMP+1      Set length
F4C3 170118           (        mon09.asm):00647                 LBSR    GETBYT      Get first byte of address
F4C6 2630             (        mon09.asm):00648                 BNE     LODERR      Report error
F4C8 1F89             (        mon09.asm):00649                 TFR     A,B     Save for later
F4CA BBBF18           (        mon09.asm):00650                 ADDA    TEMP        Include in checksum
F4CD B7BF18           (        mon09.asm):00651                 STA     TEMP        Resave
F4D0 17010B           (        mon09.asm):00652                 LBSR    GETBYT      Get next byte of address
F4D3 2623             (        mon09.asm):00653                 BNE     LODERR      Report error
F4D5 1E89             (        mon09.asm):00654                 EXG     A,B     Swap
F4D7 1F01             (        mon09.asm):00655                 TFR     D,X     Set pointer
F4D9 FBBF18           (        mon09.asm):00656                 ADDB    TEMP        Include in checksum
F4DC F7BF18           (        mon09.asm):00657                 STB     TEMP        Resave checksum
F4DF                  (        mon09.asm):00658         DLMOT1
F4DF 1700FC           (        mon09.asm):00659                 LBSR    GETBYT      Get a data byte
F4E2 A780             (        mon09.asm):00660                 STA     ,X+     Save in RAM
F4E4 BBBF18           (        mon09.asm):00661                 ADDA    TEMP        Include checksum
F4E7 B7BF18           (        mon09.asm):00662                 STA     TEMP        Resave
F4EA 7ABF19           (        mon09.asm):00663                 DEC     TEMP+1      Reduce length
F4ED 26F0             (        mon09.asm):00664                 BNE     DLMOT1      Do them all
F4EF 1700EC           (        mon09.asm):00665                 LBSR    GETBYT      Get a byte
F4F2 BBBF18           (        mon09.asm):00666                 ADDA    TEMP        Add computed checksum
F4F5 4C               (        mon09.asm):00667                 INCA    Test for success
F4F6 2713             (        mon09.asm):00668                 BEQ     DLRTS       Download OK
                      (        mon09.asm):00669         ;* Error occured on loading
F4F8                  (        mon09.asm):00670         LODERR
F4F8 170138           (        mon09.asm):00671                 LBSR    WRMSG       OUTPUT
F4FB 203F4C6F61642065 (        mon09.asm):00672                 FCC     ' ?Load error'
     72726F72
F507 FF               (        mon09.asm):00673                 FCB     $FF
F508 16FBF7           (        mon09.asm):00674                 LBRA    MAIN        BACK FOR COMMAND
                      (        mon09.asm):00675         ;* Return indicating another record
F50B                  (        mon09.asm):00676         DLRTS
F50B 1A01             (        mon09.asm):00677                 ORCC    #$01        SET 'C' FLAG
F50D                  (        mon09.asm):00678         DLEOF
F50D 39               (        mon09.asm):00679                 RTS
                      (        mon09.asm):00680         ;* Download record in INTEL format
F50E                  (        mon09.asm):00681         DLINT
F50E 1700CD           (        mon09.asm):00682                 LBSR    GETBYT      Get count
F511 26E5             (        mon09.asm):00683                 BNE     LODERR      Report error
F513 B7BF18           (        mon09.asm):00684                 STA     TEMP        Start checksum
F516 B7BF19           (        mon09.asm):00685                 STA     TEMP+1      Record length
F519 8100             (        mon09.asm):00686                 CMPA    #0      Test & clear C
F51B 27F0             (        mon09.asm):00687                 BEQ     DLEOF       End of file
                      (        mon09.asm):00688         ;* Get address
F51D 1700BE           (        mon09.asm):00689                 LBSR    GETBYT      Get first byte of address
F520 26D6             (        mon09.asm):00690                 BNE     LODERR      Report error
F522 1F89             (        mon09.asm):00691                 TFR     A,B     Save for later
F524 BBBF18           (        mon09.asm):00692                 ADDA    TEMP        Include in checksum
F527 B7BF18           (        mon09.asm):00693                 STA     TEMP        Resave
F52A 1700B1           (        mon09.asm):00694                 LBSR    GETBYT      Get next byte of address
F52D 26C9             (        mon09.asm):00695                 BNE     LODERR      Report error
F52F 1E89             (        mon09.asm):00696                 EXG     A,B     Swap
F531 1F01             (        mon09.asm):00697                 TFR     D,X     Set pointer
F533 FBBF18           (        mon09.asm):00698                 ADDB    TEMP        Include in checksum
F536 F7BF18           (        mon09.asm):00699                 STB     TEMP        Resave checksum
                      (        mon09.asm):00700         ;* Get record type
F539 1700A2           (        mon09.asm):00701                 LBSR    GETBYT      Get type value
F53C 26BA             (        mon09.asm):00702                 BNE     LODERR      Report error
F53E BBBF18           (        mon09.asm):00703                 ADDA    TEMP        Include checksum
F541 B7BF18           (        mon09.asm):00704                 STA     TEMP        Resave checksum
                      (        mon09.asm):00705         ;* Get data bytes
F544                  (        mon09.asm):00706         DLINT1
F544 170097           (        mon09.asm):00707                 LBSR    GETBYT      Get data byte
F547 26AF             (        mon09.asm):00708                 BNE     LODERR      Report error
F549 A780             (        mon09.asm):00709                 STA     ,X+     Write to memory
F54B BBBF18           (        mon09.asm):00710                 ADDA    TEMP        Include checksum
F54E B7BF18           (        mon09.asm):00711                 STA     TEMP        Resave checksum
F551 7ABF19           (        mon09.asm):00712                 DEC     TEMP+1      Reduce length
F554 26EE             (        mon09.asm):00713                 BNE     DLINT1      Do them all
                      (        mon09.asm):00714         ;* Get checksum
F556 BDF5DE           (        mon09.asm):00715                 JSR     GETBYT      Read a byte
F559 269D             (        mon09.asm):00716                 BNE     LODERR      Report error
F55B BBBF18           (        mon09.asm):00717                 ADDA    TEMP        Include checksum
F55E 27AB             (        mon09.asm):00718                 BEQ     DLRTS       Report success
F560 2096             (        mon09.asm):00719                 BRA     LODERR      Report failure
                      (        mon09.asm):00720         ;*
                      (        mon09.asm):00721         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (        mon09.asm):00722         ;*
F562                  (        mon09.asm):00723         GETPC
F562 8D3A             (        mon09.asm):00724                 BSR     GETAD1      Get address
F564 2710             (        mon09.asm):00725                 BEQ     GETPC1      Normal data
F566 8120             (        mon09.asm):00726                 CMPA    #' '        Space?
F568 2631             (        mon09.asm):00727                 BNE     GETERR      Report error
F56A 1700C6           (        mon09.asm):00728                 LBSR    WRMSG       Output message
F56D 2D3E00           (        mon09.asm):00729                 FCN     '->'        Display address
F570 FCBF14           (        mon09.asm):00730                 LDD     SAVPC       Get PC value
F573 1600A3           (        mon09.asm):00731                 LBRA    WRDOUT      Display
F576                  (        mon09.asm):00732         GETPC1
F576 FDBF14           (        mon09.asm):00733                 STD     SAVPC       Set new PC
F579 39               (        mon09.asm):00734                 RTS
                      (        mon09.asm):00735         ;*
                      (        mon09.asm):00736         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (        mon09.asm):00737         ;*
F57A                  (        mon09.asm):00738         GETRNG
F57A 8D1B             (        mon09.asm):00739                 BSR     GETADR      Get first address
F57C 1F01             (        mon09.asm):00740                 TFR     D,X     Save in X
F57E 862C             (        mon09.asm):00741                 LDA     #','        Separator
F580 1700F2           (        mon09.asm):00742                 LBSR    PUTCHR      Display
F583 8D19             (        mon09.asm):00743                 BSR     GETAD1      Get second address
F585 2786             (        mon09.asm):00744                 BEQ     DLEOF       Normal data
F587 8120             (        mon09.asm):00745                 CMPA    #' '        Space?
F589 2610             (        mon09.asm):00746                 BNE     GETERR      No, report error
F58B 1700A5           (        mon09.asm):00747                 LBSR    WRMSG       Output message
F58E 4646464600       (        mon09.asm):00748                 FCN     'FFFF'
F593 CCFFFF           (        mon09.asm):00749                 LDD     #$FFFF      Assume top of RAM
F596 39               (        mon09.asm):00750                 RTS
                      (        mon09.asm):00751         ;*
                      (        mon09.asm):00752         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (        mon09.asm):00753         ;*
F597                  (        mon09.asm):00754         GETADR
F597 8D05             (        mon09.asm):00755                 BSR     GETAD1      Get word value
F599 270F             (        mon09.asm):00756                 BEQ     GETAD2      Its OK
F59B                  (        mon09.asm):00757         GETERR
F59B 16FBA2           (        mon09.asm):00758                 LBRA    ERROR       Report error
                      (        mon09.asm):00759         ;* Get word value without error checking
F59E                  (        mon09.asm):00760         GETAD1
F59E 8D3E             (        mon09.asm):00761                 BSR     GETBYT      Get HIGH byte
F5A0 2609             (        mon09.asm):00762                 BNE     GETAD3      Test for special register
F5A2 1F89             (        mon09.asm):00763                 TFR     A,B     Copy for later
F5A4 8D38             (        mon09.asm):00764                 BSR     GETBYT      Get LOW byte
F5A6 26F3             (        mon09.asm):00765                 BNE     GETERR      Report error
F5A8 1E89             (        mon09.asm):00766                 EXG     A,B     Correct order
F5AA                  (        mon09.asm):00767         GETAD2
F5AA 39               (        mon09.asm):00768                 RTS
                      (        mon09.asm):00769         ;* Handle special register names
F5AB                  (        mon09.asm):00770         GETAD3
F5AB 3410             (        mon09.asm):00771                 PSHS    X       Save X
F5AD BEBF0E           (        mon09.asm):00772                 LDX     SAVX        Assume X
F5B0 8158             (        mon09.asm):00773                 CMPA    #'X'        Is it X?
F5B2 271C             (        mon09.asm):00774                 BEQ     GETAD4      Yes
F5B4 BEBF10           (        mon09.asm):00775                 LDX     SAVY        Assume Y
F5B7 8159             (        mon09.asm):00776                 CMPA    #'Y'        Is it Y?
F5B9 2715             (        mon09.asm):00777                 BEQ     GETAD4      Yes
F5BB BEBF12           (        mon09.asm):00778                 LDX     SAVU        Assume U
F5BE 8155             (        mon09.asm):00779                 CMPA    #'U'        Is it U?
F5C0 270E             (        mon09.asm):00780                 BEQ     GETAD4      Yes
F5C2 BEBF0E           (        mon09.asm):00781                 LDX     SAVX        Assume S
F5C5 8153             (        mon09.asm):00782                 CMPA    #'S'        Is it S?
F5C7 2707             (        mon09.asm):00783                 BEQ     GETAD4      Yes
F5C9 BEBF14           (        mon09.asm):00784                 LDX     SAVPC       Assume PC?
F5CC 8150             (        mon09.asm):00785                 CMPA    #'P'        Is it PC?
F5CE 260C             (        mon09.asm):00786                 BNE     GETAD5      No, error
F5D0                  (        mon09.asm):00787         GETAD4
F5D0 863D             (        mon09.asm):00788                 LDA     #'='        Separator
F5D2 1700A0           (        mon09.asm):00789                 LBSR    PUTCHR      Echo it
F5D5 1F10             (        mon09.asm):00790                 TFR     X,D     D = value
F5D7 8D40             (        mon09.asm):00791                 BSR     WRDOUT      Display it
F5D9 4F               (        mon09.asm):00792                 CLRA    Set 'Z'
F5DA 1F10             (        mon09.asm):00793                 TFR     X,D     Get value back
F5DC                  (        mon09.asm):00794         GETAD5
F5DC 3590             (        mon09.asm):00795                 PULS    X,PC        Restore & return
                      (        mon09.asm):00796         ;*
                      (        mon09.asm):00797         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (        mon09.asm):00798         ;*
F5DE                  (        mon09.asm):00799         GETBYT
F5DE 8D20             (        mon09.asm):00800                 BSR     GETNIB      Get FIRST nibble
F5E0 2611             (        mon09.asm):00801                 BNE     GETB3       Invalid, test for quote
F5E2 48               (        mon09.asm):00802                 LSLA    Rotate
F5E3 48               (        mon09.asm):00803                 LSLA    into
F5E4 48               (        mon09.asm):00804                 LSLA    high
F5E5 48               (        mon09.asm):00805                 LSLA    nibble
F5E6 3402             (        mon09.asm):00806                 PSHS    A       Save for later
F5E8 8D16             (        mon09.asm):00807                 BSR     GETNIB      Get SECOND nibble
F5EA 2604             (        mon09.asm):00808                 BNE     GETB2       Report error
F5EC AAE4             (        mon09.asm):00809                 ORA     ,S      Include high
F5EE                  (        mon09.asm):00810         GETB4
F5EE 1A04             (        mon09.asm):00811                 ORCC    #$04        Indicate success (SET 'Z')
F5F0                  (        mon09.asm):00812         GETB2
F5F0 3261             (        mon09.asm):00813                 LEAS    1,S     Skip saved value
F5F2                  (        mon09.asm):00814         GETB1
F5F2 39               (        mon09.asm):00815                 RTS
F5F3                  (        mon09.asm):00816         GETB3
F5F3 8127             (        mon09.asm):00817                 CMPA    #$27        Single quote?
F5F5 26FB             (        mon09.asm):00818                 BNE     GETB1       No, abort
F5F7 170070           (        mon09.asm):00819                 LBSR    GETCHR      Get ASCII character
F5FA 170078           (        mon09.asm):00820                 LBSR    PUTCHR      Echo on terminal
F5FD 1A04             (        mon09.asm):00821                 ORCC    #$04        Indicate success (SET 'Z')
F5FF 39               (        mon09.asm):00822                 RTS
                      (        mon09.asm):00823         ;*
                      (        mon09.asm):00824         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (        mon09.asm):00825         ;*
F600                  (        mon09.asm):00826         GETNIB
F600 170047           (        mon09.asm):00827                 LBSR    GETECH      Get character
F603 8030             (        mon09.asm):00828                 SUBA    #'0'        Convert numbers
F605 8109             (        mon09.asm):00829                 CMPA    #9      Numeric?
F607 230A             (        mon09.asm):00830                 BLS     GETN1       Yes, OK
F609 8007             (        mon09.asm):00831                 SUBA    #7      Convert alphas
F60B 810A             (        mon09.asm):00832                 CMPA    #$A     Under?
F60D 2507             (        mon09.asm):00833                 BLO     GETN2       Yer, error
F60F 810F             (        mon09.asm):00834                 CMPA    #$F     Over?
F611 2203             (        mon09.asm):00835                 BHI     GETN2       Yes, error
F613                  (        mon09.asm):00836         GETN1
F613 1A04             (        mon09.asm):00837                 ORCC    #$04        SET 'Z' FLAG, INDICATE OK
F615 39               (        mon09.asm):00838                 RTS
F616                  (        mon09.asm):00839         GETN2
F616 8B37             (        mon09.asm):00840                 ADDA    #$37        Normalize character + clear Z
F618 39               (        mon09.asm):00841                 RTS
                      (        mon09.asm):00842         ;*
                      (        mon09.asm):00843         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (        mon09.asm):00844         ;*
F619                  (        mon09.asm):00845         WRDOUT
F619 8D02             (        mon09.asm):00846                 BSR     HEXOUT      Output first byte
F61B 1F98             (        mon09.asm):00847                 TFR     B,A     Get second byte
                      (        mon09.asm):00848         ;*
                      (        mon09.asm):00849         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00850         ;*
F61D                  (        mon09.asm):00851         HEXOUT
F61D 3402             (        mon09.asm):00852                 PSHS    A       Save low nibble
F61F 44               (        mon09.asm):00853                 LSRA    Rotate
F620 44               (        mon09.asm):00854                 LSRA    upper nibble
F621 44               (        mon09.asm):00855                 LSRA    into
F622 44               (        mon09.asm):00856                 LSRA    lower nibble
F623 8D02             (        mon09.asm):00857                 BSR     HOUT        Output high nibble
F625 3502             (        mon09.asm):00858                 PULS    A       Rertore low nibble
                      (        mon09.asm):00859         ;*
                      (        mon09.asm):00860         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00861         ;*
F627                  (        mon09.asm):00862         HOUT:
F627 840F             (        mon09.asm):00863                 ANDA    #$0F                              ; Remove upper half
F629 8B30             (        mon09.asm):00864                 ADDA    #'0'                              ; Convert to printable
F62B 8139             (        mon09.asm):00865                 CMPA    #'9'                              ; In range?
F62D 2302             (        mon09.asm):00866                 BLS     HOUT1                             ; Yes, display
F62F 8B07             (        mon09.asm):00867                 ADDA    #7                                ;Convert to alpha
F631                  (        mon09.asm):00868         HOUT1:
F631 2042             (        mon09.asm):00869                 BRA     PUTCHR                            ; Output character
                      (        mon09.asm):00870         ;*
                      (        mon09.asm):00871         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (        mon09.asm):00872         ;*
F633                  (        mon09.asm):00873         WRMSG:
F633 3410             (        mon09.asm):00874                 PSHS    X                                 ;SAVE X
F635 AE62             (        mon09.asm):00875                 LDX     2,S                               ;GET OLD PC
F637 8D04             (        mon09.asm):00876                 BSR     WRLIN                             ;OUTPUT LINE
F639 AF62             (        mon09.asm):00877                 STX     2,S                               ;UPDATE OLD PC
F63B 3590             (        mon09.asm):00878                 PULS    X,PC                              ;RESTORE X, RETURN
                      (        mon09.asm):00879         ;*
                      (        mon09.asm):00880         ;* DISPLAY MESSAGE(X)
                      (        mon09.asm):00881         ;*
F63D                  (        mon09.asm):00882         WRLIN:
F63D A680             (        mon09.asm):00883                 LDA     ,X+                               ;GET CHAR FROM MESSAGE
F63F 2708             (        mon09.asm):00884                 BEQ     WRLND                             ;END, QUIT
F641 81FF             (        mon09.asm):00885                 CMPA    #$FF                              ;NEWLINE END, LFCR & EXIT
F643 2719             (        mon09.asm):00886                 BEQ     LFCR                              ;IF SO, NEW LINE, RETURN
F645 8D2E             (        mon09.asm):00887                 BSR     PUTCHR                            ;OUTPUT TO TERM
F647 20F4             (        mon09.asm):00888                 BRA     WRLIN                             ;KEEP GOING
F649                  (        mon09.asm):00889         WRLND
F649 39               (        mon09.asm):00890                 RTS
                      (        mon09.asm):00891         ;*
                      (        mon09.asm):00892         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (        mon09.asm):00893         ;*
F64A                  (        mon09.asm):00894         GETECH:
F64A 8D1E             (        mon09.asm):00895                 BSR     GETCHR                            ;GET CHARACTER
F64C 8120             (        mon09.asm):00896                 CMPA    #' '                              ;SPACE?
F64E 23F9             (        mon09.asm):00897                 BLS     WRLND                             ;IF < DON'T DISPLAY
F650 8161             (        mon09.asm):00898                 CMPA    #$61                              ;LOWER CASE?
F652 2521             (        mon09.asm):00899                 BLO     PUTCHR                            ;OK
F654 845F             (        mon09.asm):00900                 ANDA    #$5F                              ;CONVERT TO UPPER
F656 201D             (        mon09.asm):00901                 BRA     PUTCHR                            ;ECHO
                      (        mon09.asm):00902         ;*
                      (        mon09.asm):00903         ;* DISPLAY A SPACE ON THE TERMINAL
                      (        mon09.asm):00904         ;*
F658                  (        mon09.asm):00905         SPACE:
F658 3402             (        mon09.asm):00906                 PSHS    A                                 ;SAVE A
F65A 8620             (        mon09.asm):00907                 LDA     #' '                              ;GET SPACE
F65C 2008             (        mon09.asm):00908                 BRA     LFC1                              ;DISLAY AND GO HOME
                      (        mon09.asm):00909         ;*
                      (        mon09.asm):00910         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (        mon09.asm):00911         ;*
F65E                  (        mon09.asm):00912         LFCR:
F65E 3402             (        mon09.asm):00913                 PSHS    A                                 ;SAVE
F660 860A             (        mon09.asm):00914                 LDA     #$0A                              ;GET LF
F662 8D11             (        mon09.asm):00915                 BSR     PUTCHR                            ;OUTPUT
F664 860D             (        mon09.asm):00916                 LDA     #$0D                              ;GET CR
F666                  (        mon09.asm):00917         LFC1:
F666 8D0D             (        mon09.asm):00918                 BSR     PUTCHR                            ;OUTPUT
F668 3582             (        mon09.asm):00919                 PULS    A,PC                              ;RESTORE AND GO HOME
                      (        mon09.asm):00920         ;*
                      (        mon09.asm):00921         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (        mon09.asm):00922         ;*
F66A                  (        mon09.asm):00923         GETCHR:
F66A 3410             (        mon09.asm):00924                 PSHS    X                                 ;SAVE 'X'
F66C                  (        mon09.asm):00925         GETC1:
F66C 1705E3           (        mon09.asm):00926                 LBSR    READ                              ;READ TERMINAL
F66F 81FF             (        mon09.asm):00927                 CMPA    #$FF
F671 27F9             (        mon09.asm):00928                 BEQ     GETC1                             ;KEEP TRYING
F673 3590             (        mon09.asm):00929                 PULS    X,PC
                      (        mon09.asm):00930         ;*
                      (        mon09.asm):00931         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (        mon09.asm):00932         ;*
F675                  (        mon09.asm):00933         PUTCHR:
F675 3416             (        mon09.asm):00934                 PSHS    A,B,X                             ;SAVE REGS
F677 1705EE           (        mon09.asm):00935                 LBSR    WRITE                             ;OUTPUT TO TERMINAL
F67A 3596             (        mon09.asm):00936                 PULS    A,B,X,PC                          ;RESTORE AND GO HOME
                      (        mon09.asm):00937         ;*
                      (        mon09.asm):00938         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (        mon09.asm):00939         ;* SCREEN OUTPUT FLOW CONTROL.
                      (        mon09.asm):00940         ;*
F67C                  (        mon09.asm):00941         CHKCHR:
F67C 3410             (        mon09.asm):00942                 PSHS    X                                 ;SAVE PTR
F67E 1705D1           (        mon09.asm):00943                 LBSR    READ                              ;READ TERMINAL
F681 8120             (        mon09.asm):00944                 CMPA    #' '                              ;SPACE?
F683 2613             (        mon09.asm):00945                 BNE     CHKC3                             ;NO, IGNORE IT
F685                  (        mon09.asm):00946         CHKC1:
F685 CA80             (        mon09.asm):00947                 ORB     #%10000000                        ;SET HELD BIT
F687 1705C8           (        mon09.asm):00948                 LBSR    READ                              ;GET KEY FROM CONSOLE
F68A 8120             (        mon09.asm):00949                 CMPA    #' '                              ;SPACE?
F68C 270A             (        mon09.asm):00950                 BEQ     CHKC3                             ;YES, ALLOW
F68E C47F             (        mon09.asm):00951                 ANDB    #%01111111                        ;DISABLE HELD BIT
F690 810D             (        mon09.asm):00952                 CMPA    #$0D                              ;CARRIAGE RETURN?
F692 2704             (        mon09.asm):00953                 BEQ     CHKC3                             ;ALLOW
F694 811B             (        mon09.asm):00954                 CMPA    #$1B                              ;ESCAPE?
F696 26ED             (        mon09.asm):00955                 BNE     CHKC1                             ;NO, IGNORE
F698                  (        mon09.asm):00956         CHKC3:
F698 811B             (        mon09.asm):00957                 CMPA    #$1B                              ;TEST FOR ESCAPE CHARACTER
F69A 3590             (        mon09.asm):00958                 PULS    X,PC
                      (        mon09.asm):00959         ;*
                      (        mon09.asm):00960         ;* SUBROUTINES
                      (        mon09.asm):00961         ;*
F69C                  (        mon09.asm):00962         WRHEXB
F69C 3402             (        mon09.asm):00963                 PSHS    A       SAVE IT
F69E 8624             (        mon09.asm):00964                 LDA     #'$'        INDICATE HEX
F6A0 A7C0             (        mon09.asm):00965                 STA     ,U+     SAVE
F6A2 2008             (        mon09.asm):00966                 BRA     WRHEX1      CONTINUE
F6A4                  (        mon09.asm):00967         WRHEXW
F6A4 3404             (        mon09.asm):00968                 PSHS    B       SAVE B
F6A6 C624             (        mon09.asm):00969                 LDB     #'$'        INDICATE HEX
F6A8 E7C0             (        mon09.asm):00970                 STB     ,U+     SAVE IT
F6AA 8D02             (        mon09.asm):00971                 BSR     WRHEX       OUTPUT
F6AC                  (        mon09.asm):00972         WRHEX1
F6AC 3502             (        mon09.asm):00973                 PULS    A       RESTORE
F6AE                  (        mon09.asm):00974         WRHEX
F6AE 3402             (        mon09.asm):00975                 PSHS    A       SAVE IT
F6B0 44               (        mon09.asm):00976                 LSRA    SHIFT
F6B1 44               (        mon09.asm):00977                 LSRA    HIGH BYTE
F6B2 44               (        mon09.asm):00978                 LSRA    INTO
F6B3 44               (        mon09.asm):00979                 LSRA    LOW FOR OUTPUT
F6B4 8D02             (        mon09.asm):00980                 BSR     WRHEXN      OUTPUT NIBBLE
F6B6 3502             (        mon09.asm):00981                 PULS    A       RETORE
F6B8                  (        mon09.asm):00982         WRHEXN
F6B8 840F             (        mon09.asm):00983                 ANDA    #$0F        REMOVE CRAP
F6BA 8B30             (        mon09.asm):00984                 ADDA    #$30        CONVERT
F6BC 8139             (        mon09.asm):00985                 CMPA    #$39        OK?
F6BE 2302             (        mon09.asm):00986                 BLS     WRNOK       OK
F6C0 8B07             (        mon09.asm):00987                 ADDA    #7      CONVERT
F6C2                  (        mon09.asm):00988         WRNOK
F6C2 A7C0             (        mon09.asm):00989                 STA     ,U+     SAVE IT
F6C4 39               (        mon09.asm):00990                 RTS
                      (        mon09.asm):00991         ;*
                      (        mon09.asm):00992         ;* NMI HANDLER
                      (        mon09.asm):00993         ;*
F6C5                  (        mon09.asm):00994         NMIHND
F6C5 8EBF0A           (        mon09.asm):00995                 LDX     #SAVCC      POINT TO START OF SAVED REGS
F6C8 C60C             (        mon09.asm):00996                 LDB     #12     MOVE 12 BYTES
F6CA                  (        mon09.asm):00997         NMIH1
F6CA A6E0             (        mon09.asm):00998                 LDA     ,S+     GET BYTE
F6CC A780             (        mon09.asm):00999                 STA     ,X+     SAVE
F6CE 5A               (        mon09.asm):01000                 DECB    DECREMENT COUNT
F6CF 26F9             (        mon09.asm):01001                 BNE     NMIH1       DO THEM ALL
F6D1 10FFBF16         (        mon09.asm):01002                 STS     SAVS        SAVE STACK POINTER
F6D5 17FF5B           (        mon09.asm):01003                 LBSR    WRMSG       DISPLAY MESSAGE
F6D8 2A2A2A204E4D4920 (        mon09.asm):01004                 FCC     '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
F6ED FF               (        mon09.asm):01005                 FCB     $FF     NEW LINE
F6EE 205C             (        mon09.asm):01006                 BRA     BRKREG      DISPLAY REGISTERS
                      (        mon09.asm):01007         ;*
                      (        mon09.asm):01008         ;* SWI HANDLER
                      (        mon09.asm):01009         ;*
F6F0                  (        mon09.asm):01010         SWIHND
F6F0 108E0300         (        mon09.asm):01011                 LDY     #BRKTAB     POINT TO BREAKPOINT TABLE
F6F4 AE6A             (        mon09.asm):01012                 LDX     10,S        GET STORED PC
F6F6 301F             (        mon09.asm):01013                 LEAX    -1,X        BACKUP TO BREAKPOINT ADDRESS
F6F8 C608             (        mon09.asm):01014                 LDB     #8      CHECK EIGHT BREAKPOINTS
F6FA                  (        mon09.asm):01015         SWIHN1
F6FA ACA4             (        mon09.asm):01016                 CMPX    ,Y      IS THIS IT?
F6FC 2710             (        mon09.asm):01017                 BEQ     SWIHN2      YES
F6FE 3123             (        mon09.asm):01018                 LEAY    3,Y     SKIP OPCODE
F700 5A               (        mon09.asm):01019                 DECB    REDUCE COUNT
F701 26F7             (        mon09.asm):01020                 BNE     SWIHN1      CONTINUE
F703 E662             (        mon09.asm):01021                 LDB     2,S     RESTORE B.
F705 AE64             (        mon09.asm):01022                 LDX     4,S     RESTORE X.
F707 10AE66           (        mon09.asm):01023                 LDY     6,S     RESTORE Y.
F70A 6E9FBF00         (        mon09.asm):01024                 JMP     [SWIADR]    NOT A BREAKPOINT, EXECUTE SWI HANDLER
F70E                  (        mon09.asm):01025         SWIHN2
F70E F7BF1D           (        mon09.asm):01026                 STB     INSTYP      SAVE BREAKPOINT NUMBER
F711 8EBF0A           (        mon09.asm):01027                 LDX     #SAVCC      POINT TO START OF SAVED REGS
F714 C60A             (        mon09.asm):01028                 LDB     #10     MOVE 10
F716                  (        mon09.asm):01029         SWIHN25
F716 A6E0             (        mon09.asm):01030                 LDA     ,S+     GET BYTE
F718 A780             (        mon09.asm):01031                 STA     ,X+     SAVE
F71A 5A               (        mon09.asm):01032                 DECB    DECREMENT COUNT
F71B 26F9             (        mon09.asm):01033                 BNE     SWIHN25     DO THEM ALL
F71D 3510             (        mon09.asm):01034                 PULS    X       GET PC
F71F 301F             (        mon09.asm):01035                 LEAX    -1,X        SET BACK TO REAL PC
F721 BFBF14           (        mon09.asm):01036                 STX     SAVPC       SAVED PC
F724 10FFBF16         (        mon09.asm):01037                 STS     SAVS        SAVE STACK POINTER
F728 17FF08           (        mon09.asm):01038                 LBSR    WRMSG       DISPLAY MESSAGE
F72B 2A2A2A2042726561 (        mon09.asm):01039                 FCN     '*** Breakpoint #'
     6B706F696E742023
     00
F73C 8638             (        mon09.asm):01040                 LDA     #$38        GET NUMBER, PLUS ASCII CONVERT
F73E B0BF1D           (        mon09.asm):01041                 SUBA    INSTYP      CONVERT TO PROPER DIGIT
F741 17FF31           (        mon09.asm):01042                 LBSR    PUTCHR      DISPLAY
F744 17FEEC           (        mon09.asm):01043                 LBSR    WRMSG       OUTPUT MESSAGE
F747 202A2A2A         (        mon09.asm):01044                 FCC     ' ***'      TRAILING MESSAGE
F74B FF               (        mon09.asm):01045                 FCB     $FF     NEW LINE
F74C                  (        mon09.asm):01046         BRKREG
F74C 17FB89           (        mon09.asm):01047                 LBSR    DISREG      DISPLAY
F74F                  (        mon09.asm):01048         BRKRES
F74F 8E0300           (        mon09.asm):01049                 LDX     #BRKTAB     POINT TO BREAKPOINT TABLE
F752 C608             (        mon09.asm):01050                 LDB     #8      DO IT EIGHT TIMES
F754                  (        mon09.asm):01051         SWIHN3
F754 10AE81           (        mon09.asm):01052                 LDY     ,X++        GET REG
F757 2704             (        mon09.asm):01053                 BEQ     SWIHN4      NO BRK, NEXT
F759 A684             (        mon09.asm):01054                 LDA     ,X      GET OPCODE
F75B A7A4             (        mon09.asm):01055                 STA     ,Y      REPLACE IN RAM
F75D                  (        mon09.asm):01056         SWIHN4
F75D 3001             (        mon09.asm):01057                 LEAX    1,X     SKIP OPCODE
F75F 5A               (        mon09.asm):01058                 DECB    REDUCE COUNT
F760 26F2             (        mon09.asm):01059                 BNE     SWIHN3      GO AGAIN
F762 16F99D           (        mon09.asm):01060                 LBRA    MAIN        DO PROMPT
                      (        mon09.asm):01061         
                      (        mon09.asm):01062         ;* Write OS
F765                  (        mon09.asm):01063         WRITEOS:
F765 17FECB           (        mon09.asm):01064                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F768 575254494E47204F (        mon09.asm):01065                 FCC     'WRTING OS TO XT-IDE'
     5320544F2058542D
     494445
F77B 0A0DFF           (        mon09.asm):01066                 FCB     $0A,$0D,$FF
F77E BDF848           (        mon09.asm):01067                 JSR     XTIDE_INIT
F781 C6E0             (        mon09.asm):01068                 LDB     #$E0                              ; E0=MST  F0=SLV
F783 F7E30C           (        mon09.asm):01069                 STB     XTIDE_DEVICE
F786 C600             (        mon09.asm):01070                 LDB     #$00
F788 F7E30A           (        mon09.asm):01071                 STB     XTIDE_LBAHI
F78B F7E308           (        mon09.asm):01072                 STB     XTIDE_LBAMID
F78E F7E306           (        mon09.asm):01073                 STB     XTIDE_LBALOW
F791 F7BF0B           (        mon09.asm):01074                 STB     SAVA
F794 C601             (        mon09.asm):01075                 LDB     #$01
F796 F7E304           (        mon09.asm):01076                 STB     XTIDE_SEC_CNT
F799 8E2000           (        mon09.asm):01077                 LDX     #$2000
F79C                  (        mon09.asm):01078         WRITEOS_1:
F79C 108E0000         (        mon09.asm):01079                 LDY     #$0000
                      (        mon09.asm):01080         !
F7A0 A680             (        mon09.asm):01081                 LDA     ,X+
F7A2 A7A90100         (        mon09.asm):01082                 STA     HSTBUF,Y
F7A6 3121             (        mon09.asm):01083                 INY
F7A8 108C0200         (        mon09.asm):01084                 CMPY    #$0200
F7AC 26F2             (        mon09.asm):01085                 BNE     <
F7AE 3410             (        mon09.asm):01086                 PSHS    X
F7B0 BDF92C           (        mon09.asm):01087                 JSR     IDE_WRITE_SECTOR
F7B3 3510             (        mon09.asm):01088                 PULS    X
F7B5 C6E0             (        mon09.asm):01089                 LDB     #$E0                              ; E0=MST  F0=SLV
F7B7 F7E30C           (        mon09.asm):01090                 STB     XTIDE_DEVICE
F7BA C600             (        mon09.asm):01091                 LDB     #$00
F7BC F7E30A           (        mon09.asm):01092                 STB     XTIDE_LBAHI
F7BF F7E308           (        mon09.asm):01093                 STB     XTIDE_LBAMID
F7C2 F7E306           (        mon09.asm):01094                 STB     XTIDE_LBALOW
F7C5 7CBF0B           (        mon09.asm):01095                 INC     SAVA
F7C8 F6BF0B           (        mon09.asm):01096                 LDB     SAVA
F7CB F7E306           (        mon09.asm):01097                 STB     XTIDE_LBALOW
F7CE C122             (        mon09.asm):01098                 CMPB    #$22
F7D0 26CA             (        mon09.asm):01099                 BNE     WRITEOS_1
F7D2 7EF000           (        mon09.asm):01100                 JMP     RESET
                      (        mon09.asm):01101         ;* BOOT OS
F7D5                  (        mon09.asm):01102         BOOTOS:
F7D5 17FE5B           (        mon09.asm):01103                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F7D8 424F4F54494E4720 (        mon09.asm):01104                 FCC     'BOOTING OS FROM XT-IDE'
     4F532046524F4D20
     58542D494445
F7EE 0A0DFF           (        mon09.asm):01105                 FCB     $0A,$0D,$FF
F7F1 BDF848           (        mon09.asm):01106                 JSR     XTIDE_INIT
F7F4 C6E0             (        mon09.asm):01107                 LDB     #$E0                              ; E0=MST  F0=SLV
F7F6 F7E30C           (        mon09.asm):01108                 STB     XTIDE_DEVICE
F7F9 C600             (        mon09.asm):01109                 LDB     #$00
F7FB F7E30A           (        mon09.asm):01110                 STB     XTIDE_LBAHI
F7FE F7E308           (        mon09.asm):01111                 STB     XTIDE_LBAMID
F801 F7E306           (        mon09.asm):01112                 STB     XTIDE_LBALOW
F804 F7BF0B           (        mon09.asm):01113                 STB     SAVA
F807 C601             (        mon09.asm):01114                 LDB     #$01
F809 F7E304           (        mon09.asm):01115                 STB     XTIDE_SEC_CNT
F80C 8E2000           (        mon09.asm):01116                 LDX     #$2000
F80F                  (        mon09.asm):01117         BOOTOS_1:
F80F 3410             (        mon09.asm):01118                 PSHS    X
F811 BDF8A2           (        mon09.asm):01119                 JSR     IDE_READ_SECTOR
F814 3510             (        mon09.asm):01120                 PULS    X
F816 108E0000         (        mon09.asm):01121                 LDY     #$0000
                      (        mon09.asm):01122         !
F81A A6A90100         (        mon09.asm):01123                 LDA     HSTBUF,Y
F81E 3121             (        mon09.asm):01124                 INY
F820 A780             (        mon09.asm):01125                 STA     ,X+
F822 108C0200         (        mon09.asm):01126                 CMPY    #$0200
F826 26F2             (        mon09.asm):01127                 BNE     <
F828 C6E0             (        mon09.asm):01128                 LDB     #$E0                              ; E0=MST  F0=SLV
F82A F7E30C           (        mon09.asm):01129                 STB     XTIDE_DEVICE
F82D C600             (        mon09.asm):01130                 LDB     #$00
F82F F7E30A           (        mon09.asm):01131                 STB     XTIDE_LBAHI
F832 F7E308           (        mon09.asm):01132                 STB     XTIDE_LBAMID
F835 F7E306           (        mon09.asm):01133                 STB     XTIDE_LBALOW
F838 7CBF0B           (        mon09.asm):01134                 INC     SAVA
F83B F6BF0B           (        mon09.asm):01135                 LDB     SAVA
F83E F7E306           (        mon09.asm):01136                 STB     XTIDE_LBALOW
F841 C122             (        mon09.asm):01137                 CMPB    #$22
F843 26CA             (        mon09.asm):01138                 BNE     BOOTOS_1
F845 7E2000           (        mon09.asm):01139                 JMP     $2000
                      (        mon09.asm):01140         
                      (        mon09.asm):01141         ;* Drivers
                      (        mon09.asm):01142                 INCLUDE cubix_ide.asm
                      (    cubix_ide.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00002         ;
                      (    cubix_ide.asm):00003         ;       CUBIX IDE disk drivers 6809PC - XT IDE ISA CARD
                      (    cubix_ide.asm):00004         ;
                      (    cubix_ide.asm):00005         ;       Entry points:
                      (    cubix_ide.asm):00006         ;               XTIDE_INIT      - CALLED DURING OS INIT
                      (    cubix_ide.asm):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00009         ;________________________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00010         ;
                      (    cubix_ide.asm):00011         
     E300             (    cubix_ide.asm):00012         XTIDE_DATA_LO   = CUBIX_IO_BASE+$300
     E301             (    cubix_ide.asm):00013         XTIDE_DATA_HI   = CUBIX_IO_BASE+$301
     E302             (    cubix_ide.asm):00014         XTIDE_ERR       = CUBIX_IO_BASE+$302
     E302             (    cubix_ide.asm):00015         XTIDE_FECODE    = CUBIX_IO_BASE+$302
     E304             (    cubix_ide.asm):00016         XTIDE_SEC_CNT   = CUBIX_IO_BASE+$304
     E306             (    cubix_ide.asm):00017         XTIDE_LBALOW    = CUBIX_IO_BASE+$306
     E308             (    cubix_ide.asm):00018         XTIDE_LBAMID    = CUBIX_IO_BASE+$308
     E30A             (    cubix_ide.asm):00019         XTIDE_LBAHI     = CUBIX_IO_BASE+$30A
     E30C             (    cubix_ide.asm):00020         XTIDE_DEVICE    = CUBIX_IO_BASE+$30C
     E30E             (    cubix_ide.asm):00021         XTIDE_COMMAND   = CUBIX_IO_BASE+$30E
     E30E             (    cubix_ide.asm):00022         XTIDE_STATUS    = CUBIX_IO_BASE+$30E
                      (    cubix_ide.asm):00023         
                      (    cubix_ide.asm):00024         
                      (    cubix_ide.asm):00025         
                      (    cubix_ide.asm):00026         
                      (    cubix_ide.asm):00027         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (    cubix_ide.asm):00028         XTIDE_CMD_RECAL = $10
     0020             (    cubix_ide.asm):00029         XTIDE_CMD_READ  = $20
     0030             (    cubix_ide.asm):00030         XTIDE_CMD_WRITE = $30
     0091             (    cubix_ide.asm):00031         XTIDE_CMD_INIT  = $91
     00EC             (    cubix_ide.asm):00032         XTIDE_CMD_ID    = $EC
     00EF             (    cubix_ide.asm):00033         XTIDE_CMD_FEAT  = $EF
     00E0             (    cubix_ide.asm):00034         XTIDE_CMD_SPINDOWN = $E0
     00E1             (    cubix_ide.asm):00035         XTIDE_CMD_SPINUP = $E1
                      (    cubix_ide.asm):00036         
                      (    cubix_ide.asm):00037         
                      (    cubix_ide.asm):00038                 IFDEF   BIOS6809PC
F848                  (    cubix_ide.asm):00039         XTIDE_INIT:
F848 BDF860           (    cubix_ide.asm):00040                 JSR     XTIDE_PROBE
F84B 86E0             (    cubix_ide.asm):00041                 LDA     #$E0                              ; E0=MST  F0=SLV
F84D B7E30C           (    cubix_ide.asm):00042                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00043         
F850 BDF8BF           (    cubix_ide.asm):00044                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
F853 250A             (    cubix_ide.asm):00045                 BCS     >
                      (    cubix_ide.asm):00046         
F855 8601             (    cubix_ide.asm):00047                 LDA     #$01                              ; ENABLE 8-BIT MODE (XT-CF-LITE)
F857 B7E302           (    cubix_ide.asm):00048                 STA     XTIDE_FECODE
F85A 86EF             (    cubix_ide.asm):00049                 LDA     #XTIDE_CMD_FEAT
F85C B7E30E           (    cubix_ide.asm):00050                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00051         !
F85F 39               (    cubix_ide.asm):00052                 RTS
                      (    cubix_ide.asm):00053                 ENDIF
                      (    cubix_ide.asm):00054         
                      (    cubix_ide.asm):00055         
                      (    cubix_ide.asm):00056                 IFNDEF  BIOS6809PC
F860                  (    cubix_ide.asm):00057         XTIDETIMEOUT:
                      (    cubix_ide.asm):00058                 .BYTE   $00,$00
                      (    cubix_ide.asm):00059         
                      (    cubix_ide.asm):00060         
                      (    cubix_ide.asm):00061         
                      (    cubix_ide.asm):00062         ;__XTIDE_INIT________________________________________________________________________________________
                      (    cubix_ide.asm):00063         ;
                      (    cubix_ide.asm):00064         ;  INIT AND DISPLAY IDE INFO
                      (    cubix_ide.asm):00065         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00066         ;
F860                  (    cubix_ide.asm):00067         XTIDE_INIT:
                      (    cubix_ide.asm):00068                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00069                 LDX     #MESSAGE1
                      (    cubix_ide.asm):00070                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00071                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00072         ;
                      (    cubix_ide.asm):00073                 LDX     #MESSAGE2
                      (    cubix_ide.asm):00074                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00075                 LDD     #XTIDE_DATA_LO                    ; GET BASE PORT
                      (    cubix_ide.asm):00076                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_ide.asm):00077         ;
                      (    cubix_ide.asm):00078                 JSR     XTIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
                      (    cubix_ide.asm):00079                 BCS     IDE_ABORT
                      (    cubix_ide.asm):00080                 JMP     IDE_PRINT_INFO
F860                  (    cubix_ide.asm):00081         IDE_ABORT:
                      (    cubix_ide.asm):00082                 LDX     #MESSAGE3
                      (    cubix_ide.asm):00083                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00084                 JMP     IDE_INITA
F860                  (    cubix_ide.asm):00085         IDE_PRINT_INFO:
                      (    cubix_ide.asm):00086                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00087                 LDX     #MESSAGE4
                      (    cubix_ide.asm):00088                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00089                 LDA     #$00
                      (    cubix_ide.asm):00090                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
                      (    cubix_ide.asm):00091                 LDX     #MESSAGE5
                      (    cubix_ide.asm):00092                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00093                 LDA     #$01
                      (    cubix_ide.asm):00094                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
F860                  (    cubix_ide.asm):00095         IDE_INITA:
                      (    cubix_ide.asm):00096                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00097                 RTS                                       ; DONE
                      (    cubix_ide.asm):00098                 ENDIF
                      (    cubix_ide.asm):00099         ;
                      (    cubix_ide.asm):00100         ;__XTIDE_PROBE_______________________________________________________________________________________
                      (    cubix_ide.asm):00101         ;
                      (    cubix_ide.asm):00102         ;  XTPROBE FOR IDE HARDWARE
                      (    cubix_ide.asm):00103         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00104         ;
F860                  (    cubix_ide.asm):00105         XTIDE_PROBE:
                      (    cubix_ide.asm):00106         ;
                      (    cubix_ide.asm):00107         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (    cubix_ide.asm):00108         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (    cubix_ide.asm):00109         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (    cubix_ide.asm):00110         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (    cubix_ide.asm):00111         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (    cubix_ide.asm):00112         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (    cubix_ide.asm):00113         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (    cubix_ide.asm):00114         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (    cubix_ide.asm):00115         
                      (    cubix_ide.asm):00116         ; CHECK SIGNATURE
                      (    cubix_ide.asm):00117         
F860 8E0000           (    cubix_ide.asm):00118                 LDX     #$0000
                      (    cubix_ide.asm):00119         ;       SOMETIMES THE CF-XTIDE WILL ONLY READ 80, THIS CAN BE RESET BY WRITING ZEROS UNTIL VALUES ARE PROPERLY READ
                      (    cubix_ide.asm):00120         !
F863 F6E300           (    cubix_ide.asm):00121                 LDB     XTIDE_DATA_LO
F866 C180             (    cubix_ide.asm):00122                 CMPB    #$80
F868 262B             (    cubix_ide.asm):00123                 BNE     >
F86A C600             (    cubix_ide.asm):00124                 LDB     #$00
F86C F7E300           (    cubix_ide.asm):00125                 STB     XTIDE_DATA_LO
F86F 12               (    cubix_ide.asm):00126                 NOP
F870 F7E301           (    cubix_ide.asm):00127                 STB     XTIDE_DATA_HI
F873 12               (    cubix_ide.asm):00128                 NOP
F874 F7E306           (    cubix_ide.asm):00129                 STB     XTIDE_LBALOW
F877 12               (    cubix_ide.asm):00130                 NOP
F878 F7E308           (    cubix_ide.asm):00131                 STB     XTIDE_LBAMID
F87B 12               (    cubix_ide.asm):00132                 NOP
F87C F7E30A           (    cubix_ide.asm):00133                 STB     XTIDE_LBAHI
F87F 12               (    cubix_ide.asm):00134                 NOP
F880 F7E30C           (    cubix_ide.asm):00135                 STB     XTIDE_DEVICE
F883 12               (    cubix_ide.asm):00136                 NOP
F884 F7E30E           (    cubix_ide.asm):00137                 STB     XTIDE_COMMAND
F887 12               (    cubix_ide.asm):00138                 NOP
F888 F7E30E           (    cubix_ide.asm):00139                 STB     XTIDE_STATUS
F88B 12               (    cubix_ide.asm):00140                 NOP
F88C 3001             (    cubix_ide.asm):00141                 INX
F88E 8C0300           (    cubix_ide.asm):00142                 CPX     #$0300
F891 26D0             (    cubix_ide.asm):00143                 BNE     <
F893 200A             (    cubix_ide.asm):00144                 BRA     XTIDE_PROBE_FAIL                  ; TIMED OUT
                      (    cubix_ide.asm):00145         !
F895 BDF8BF           (    cubix_ide.asm):00146                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
F898 2505             (    cubix_ide.asm):00147                 BCS     XTIDE_PROBE_FAIL
F89A 1CFE             (    cubix_ide.asm):00148                 CLC
F89C 7EF8A1           (    cubix_ide.asm):00149                 JMP     XTIDE_PROBE_SUCCESS
F89F                  (    cubix_ide.asm):00150         XTIDE_PROBE_FAIL:
F89F 1A01             (    cubix_ide.asm):00151                 SEC
F8A1                  (    cubix_ide.asm):00152         XTIDE_PROBE_SUCCESS:
F8A1 39               (    cubix_ide.asm):00153                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (    cubix_ide.asm):00154         
                      (    cubix_ide.asm):00155                 IFNDEF  BIOS6809PC
                      (    cubix_ide.asm):00156         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (    cubix_ide.asm):00157         ;*
                      (    cubix_ide.asm):00158         ;*  READ IDE INFORMATION
                      (    cubix_ide.asm):00159         ;*      CARRY SET ON ERROR
                      (    cubix_ide.asm):00160         ;*      A=MST/SLV
                      (    cubix_ide.asm):00161         ;*____________________________________________________________________________________________________
F8A2                  (    cubix_ide.asm):00162         IDE_READ_INFO:
                      (    cubix_ide.asm):00163         ; SET DRIVE BIT
                      (    cubix_ide.asm):00164                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
                      (    cubix_ide.asm):00165                 ASLA                                      ; SHIFT 4
                      (    cubix_ide.asm):00166                 ASLA                                      ;
                      (    cubix_ide.asm):00167                 ASLA                                      ;
                      (    cubix_ide.asm):00168                 ASLA                                      ;
                      (    cubix_ide.asm):00169                 ORA     #$E0                              ; E0=MST  F0=SLV
                      (    cubix_ide.asm):00170                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00171         
                      (    cubix_ide.asm):00172                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
                      (    cubix_ide.asm):00173                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00174         
                      (    cubix_ide.asm):00175                 LDA     #$01                              ; ENABLE 8-BIT MODE (XT-CF-LITE)
                      (    cubix_ide.asm):00176                 STA     XTIDE_FECODE
                      (    cubix_ide.asm):00177                 LDA     #XTIDE_CMD_FEAT
                      (    cubix_ide.asm):00178                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00179         
                      (    cubix_ide.asm):00180                 NOP                                       ; TINY DELAY, JUST IN CASE
                      (    cubix_ide.asm):00181                 NOP
                      (    cubix_ide.asm):00182                 NOP
                      (    cubix_ide.asm):00183                 NOP
                      (    cubix_ide.asm):00184                 NOP
                      (    cubix_ide.asm):00185                 NOP
                      (    cubix_ide.asm):00186                 NOP
                      (    cubix_ide.asm):00187                 NOP
                      (    cubix_ide.asm):00188                 NOP
                      (    cubix_ide.asm):00189                 NOP
                      (    cubix_ide.asm):00190                 NOP
                      (    cubix_ide.asm):00191         
                      (    cubix_ide.asm):00192         
                      (    cubix_ide.asm):00193                 LDA     #XTIDE_CMD_ID                     ; ID COMMAND
                      (    cubix_ide.asm):00194                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00195         
                      (    cubix_ide.asm):00196                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
                      (    cubix_ide.asm):00197                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00198         
                      (    cubix_ide.asm):00199                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
                      (    cubix_ide.asm):00200         
                      (    cubix_ide.asm):00201                 LDX     #MESSAGE6
                      (    cubix_ide.asm):00202                 JSR     WRSTR
                      (    cubix_ide.asm):00203                 LDA     HSTBUF+123
                      (    cubix_ide.asm):00204                 JSR     WRHEX
                      (    cubix_ide.asm):00205                 LDA     HSTBUF+122
                      (    cubix_ide.asm):00206                 JSR     WRHEX
                      (    cubix_ide.asm):00207                 LDA     HSTBUF+121
                      (    cubix_ide.asm):00208                 JSR     WRHEX
                      (    cubix_ide.asm):00209                 LDA     HSTBUF+120
                      (    cubix_ide.asm):00210                 JSR     WRHEX
                      (    cubix_ide.asm):00211                 JMP     IDE_READ_INFO_OK
F8A2                  (    cubix_ide.asm):00212         IDE_READ_INFO_ABORT:
                      (    cubix_ide.asm):00213                 LDX     #MESSAGE3
                      (    cubix_ide.asm):00214                 JSR     WRSTR                             ;DO PROMPT
                      (    cubix_ide.asm):00215                 JSR     LFCR                              ;AND CRLF
                      (    cubix_ide.asm):00216                 SEC
                      (    cubix_ide.asm):00217                 RTS                                       ;
F8A2                  (    cubix_ide.asm):00218         IDE_READ_INFO_OK:
                      (    cubix_ide.asm):00219                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00220                 CLC
                      (    cubix_ide.asm):00221                 RTS
                      (    cubix_ide.asm):00222                 ENDIF
                      (    cubix_ide.asm):00223         
                      (    cubix_ide.asm):00224         
                      (    cubix_ide.asm):00225         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (    cubix_ide.asm):00226         ;*
                      (    cubix_ide.asm):00227         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (    cubix_ide.asm):00228         ;*
                      (    cubix_ide.asm):00229         ;*____________________________________________________________________________________________________
F8A2                  (    cubix_ide.asm):00230         IDE_READ_SECTOR:
F8A2 BDF8BF           (    cubix_ide.asm):00231                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
F8A5 2512             (    cubix_ide.asm):00232                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
F8A7                  (    cubix_ide.asm):00233         IDE_READ_SECTOR_1:
                      (    cubix_ide.asm):00234                 IFNDEF  BIOS6809PC
                      (    cubix_ide.asm):00235                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
                      (    cubix_ide.asm):00236                 ENDIF
F8A7 8620             (    cubix_ide.asm):00237                 LDA     #XTIDE_CMD_READ
F8A9 B7E30E           (    cubix_ide.asm):00238                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00239         
F8AC BDF8E3           (    cubix_ide.asm):00240                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
F8AF 2508             (    cubix_ide.asm):00241                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
F8B1 BDF90F           (    cubix_ide.asm):00242                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
F8B4 4F               (    cubix_ide.asm):00243                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
F8B5 B7BF28           (    cubix_ide.asm):00244                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
F8B8 39               (    cubix_ide.asm):00245                 RTS
F8B9                  (    cubix_ide.asm):00246         IDE_READ_SECTOR_ERROR:
F8B9 8602             (    cubix_ide.asm):00247                 LDA     #$02                              ; SET ERROR CONDITION
F8BB B7BF28           (    cubix_ide.asm):00248                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
F8BE 39               (    cubix_ide.asm):00249                 RTS
                      (    cubix_ide.asm):00250         
                      (    cubix_ide.asm):00251         
                      (    cubix_ide.asm):00252         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (    cubix_ide.asm):00253         ;*
                      (    cubix_ide.asm):00254         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (    cubix_ide.asm):00255         ;*
                      (    cubix_ide.asm):00256         ;*____________________________________________________________________________________________________
F8BF                  (    cubix_ide.asm):00257         IDE_WAIT_NOT_BUSY:
F8BF 3406             (    cubix_ide.asm):00258                 PSHS    A,B
F8C1 8600             (    cubix_ide.asm):00259                 LDA     #$00
F8C3 B7BF26           (    cubix_ide.asm):00260                 STA     XTIDETIMEOUT
F8C6 B7BF27           (    cubix_ide.asm):00261                 STA     XTIDETIMEOUT+1
F8C9                  (    cubix_ide.asm):00262         IDE_WAIT_NOT_BUSY1:
F8C9 F6E30E           (    cubix_ide.asm):00263                 LDB     XTIDE_STATUS                      ;WAIT FOR RDY BIT TO BE SET
F8CC C480             (    cubix_ide.asm):00264                 ANDB    #$80
F8CE 270F             (    cubix_ide.asm):00265                 BEQ     IDE_WAIT_NOT_BUSY2
F8D0 7CBF26           (    cubix_ide.asm):00266                 INC     XTIDETIMEOUT
F8D3 26F4             (    cubix_ide.asm):00267                 BNE     IDE_WAIT_NOT_BUSY1
F8D5 7CBF27           (    cubix_ide.asm):00268                 INC     XTIDETIMEOUT+1
F8D8 26EF             (    cubix_ide.asm):00269                 BNE     IDE_WAIT_NOT_BUSY1
F8DA 1A01             (    cubix_ide.asm):00270                 SEC
F8DC 7EF8E1           (    cubix_ide.asm):00271                 JMP     IDE_WAIT_NOT_BUSY3
F8DF                  (    cubix_ide.asm):00272         IDE_WAIT_NOT_BUSY2:
F8DF 1CFE             (    cubix_ide.asm):00273                 CLC
F8E1                  (    cubix_ide.asm):00274         IDE_WAIT_NOT_BUSY3:
F8E1 3586             (    cubix_ide.asm):00275                 PULS    PC,A,B
                      (    cubix_ide.asm):00276         
                      (    cubix_ide.asm):00277         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (    cubix_ide.asm):00278         ;*
                      (    cubix_ide.asm):00279         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (    cubix_ide.asm):00280         ;*
                      (    cubix_ide.asm):00281         ;*____________________________________________________________________________________________________
F8E3                  (    cubix_ide.asm):00282         IDE_WAIT_DRQ:
F8E3 3426             (    cubix_ide.asm):00283                 PSHS    A,B,Y
F8E5 8600             (    cubix_ide.asm):00284                 LDA     #$00
F8E7 B7BF26           (    cubix_ide.asm):00285                 STA     XTIDETIMEOUT
F8EA B7BF27           (    cubix_ide.asm):00286                 STA     XTIDETIMEOUT+1
F8ED                  (    cubix_ide.asm):00287         IDE_WAIT_DRQ1:
F8ED F6E30E           (    cubix_ide.asm):00288                 LDB     XTIDE_STATUS                      ;WAIT FOR DRQ BIT TO BE SET
F8F0 C488             (    cubix_ide.asm):00289                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
F8F2 C108             (    cubix_ide.asm):00290                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
F8F4 2715             (    cubix_ide.asm):00291                 BEQ     IDE_WAIT_DRQ2
F8F6 C401             (    cubix_ide.asm):00292                 ANDB    #%00000001                        ; IS ERROR?
F8F8 C101             (    cubix_ide.asm):00293                 CMPB    #%00000001                        ;
F8FA 270A             (    cubix_ide.asm):00294                 BEQ     IDE_WAIT_DRQE
F8FC 7CBF26           (    cubix_ide.asm):00295                 INC     XTIDETIMEOUT
F8FF 26EC             (    cubix_ide.asm):00296                 BNE     IDE_WAIT_DRQ1
F901 7CBF27           (    cubix_ide.asm):00297                 INC     XTIDETIMEOUT+1
F904 26E7             (    cubix_ide.asm):00298                 BNE     IDE_WAIT_DRQ1
F906                  (    cubix_ide.asm):00299         IDE_WAIT_DRQE:
F906 1A01             (    cubix_ide.asm):00300                 SEC
F908 7EF90D           (    cubix_ide.asm):00301                 JMP     IDE_WAIT_DRQ3
F90B                  (    cubix_ide.asm):00302         IDE_WAIT_DRQ2:
F90B 1CFE             (    cubix_ide.asm):00303                 CLC
F90D                  (    cubix_ide.asm):00304         IDE_WAIT_DRQ3:
F90D 35A6             (    cubix_ide.asm):00305                 PULS    PC,A,B,Y
                      (    cubix_ide.asm):00306         
                      (    cubix_ide.asm):00307         
                      (    cubix_ide.asm):00308         
                      (    cubix_ide.asm):00309         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00310         ;*
                      (    cubix_ide.asm):00311         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00312         ;*
                      (    cubix_ide.asm):00313         ;*____________________________________________________________________________________________________
F90F                  (    cubix_ide.asm):00314         IDE_READ_BUFFER:
F90F 108E0000         (    cubix_ide.asm):00315                 LDY     #$0000                            ; INDEX
F913                  (    cubix_ide.asm):00316         IDEBUFRD:
F913 F6E300           (    cubix_ide.asm):00317                 LDB     XTIDE_DATA_LO
F916 E7A90100         (    cubix_ide.asm):00318                 STB     HSTBUF,Y                          ;
F91A 3121             (    cubix_ide.asm):00319                 INY
F91C F6E301           (    cubix_ide.asm):00320                 LDB     XTIDE_DATA_HI
F91F E7A90100         (    cubix_ide.asm):00321                 STB     HSTBUF,Y                          ;
F923 3121             (    cubix_ide.asm):00322                 INY
F925 108C0200         (    cubix_ide.asm):00323                 CMPY    #$0200                            ;
F929 26E8             (    cubix_ide.asm):00324                 BNE     IDEBUFRD                          ;
F92B 39               (    cubix_ide.asm):00325                 RTS                                       ;
                      (    cubix_ide.asm):00326         
                      (    cubix_ide.asm):00327         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (    cubix_ide.asm):00328         ;*
                      (    cubix_ide.asm):00329         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (    cubix_ide.asm):00330         ;*
                      (    cubix_ide.asm):00331         ;*____________________________________________________________________________________________________
F92C                  (    cubix_ide.asm):00332         IDE_WRITE_SECTOR:
F92C BDF8BF           (    cubix_ide.asm):00333                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
F92F 2517             (    cubix_ide.asm):00334                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
                      (    cubix_ide.asm):00335                 IFNDEF  BIOS6809PC
                      (    cubix_ide.asm):00336                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
                      (    cubix_ide.asm):00337                 ENDIF
F931 8630             (    cubix_ide.asm):00338                 LDA     #XTIDE_CMD_WRITE
F933 B7E30E           (    cubix_ide.asm):00339                 STA     XTIDE_COMMAND
F936 BDF8E3           (    cubix_ide.asm):00340                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
F939 250D             (    cubix_ide.asm):00341                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
F93B BDF94E           (    cubix_ide.asm):00342                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
F93E BDF8BF           (    cubix_ide.asm):00343                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
F941 2505             (    cubix_ide.asm):00344                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
F943 4F               (    cubix_ide.asm):00345                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
F944 B7BF28           (    cubix_ide.asm):00346                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
F947 39               (    cubix_ide.asm):00347                 RTS
F948                  (    cubix_ide.asm):00348         IDE_WRITE_SECTOR_ERROR:
F948 8602             (    cubix_ide.asm):00349                 LDA     #$02
F94A B7BF28           (    cubix_ide.asm):00350                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
F94D 39               (    cubix_ide.asm):00351                 RTS
                      (    cubix_ide.asm):00352         
                      (    cubix_ide.asm):00353         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00354         ;*
                      (    cubix_ide.asm):00355         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00356         ;*
                      (    cubix_ide.asm):00357         ;*____________________________________________________________________________________________________
F94E                  (    cubix_ide.asm):00358         IDE_WRITE_BUFFER:
F94E 108E0000         (    cubix_ide.asm):00359                 LDY     #$0000                            ; INDEX
F952                  (    cubix_ide.asm):00360         IDEBUFWT:
F952 E6A90100         (    cubix_ide.asm):00361                 LDB     HSTBUF,Y                          ;
F956 F7E300           (    cubix_ide.asm):00362                 STB     XTIDE_DATA_LO
F959 3121             (    cubix_ide.asm):00363                 INY
F95B E6A90100         (    cubix_ide.asm):00364                 LDB     HSTBUF,Y                          ;
F95F F7E301           (    cubix_ide.asm):00365                 STB     XTIDE_DATA_HI
F962 3121             (    cubix_ide.asm):00366                 INY
F964 108C0200         (    cubix_ide.asm):00367                 CMPY    #$0200                            ;
F968 26E8             (    cubix_ide.asm):00368                 BNE     IDEBUFWT                          ;
F96A 39               (    cubix_ide.asm):00369                 RTS                                       ;
                      (    cubix_ide.asm):00370         
                      (    cubix_ide.asm):00371         
                      (    cubix_ide.asm):00372                 IFNDEF  BIOS6809PC
F96B                  (    cubix_ide.asm):00373         MESSAGE1
                      (    cubix_ide.asm):00374                 FCC     "PPIDE :"
                      (    cubix_ide.asm):00375                 FCB     00
F96B                  (    cubix_ide.asm):00376         MESSAGE2
                      (    cubix_ide.asm):00377                 FCC     " IO=0x"
                      (    cubix_ide.asm):00378                 FCB     00
F96B                  (    cubix_ide.asm):00379         MESSAGE3
                      (    cubix_ide.asm):00380                 FCC     " NOT PRESENT"
                      (    cubix_ide.asm):00381                 FCB     00
F96B                  (    cubix_ide.asm):00382         MESSAGE4
                      (    cubix_ide.asm):00383                 FCC     " PPIDE0: BLOCKS="
                      (    cubix_ide.asm):00384                 FCB     00
F96B                  (    cubix_ide.asm):00385         MESSAGE5
                      (    cubix_ide.asm):00386                 FCC     " PPIDE1: BLOCKS="
                      (    cubix_ide.asm):00387                 FCB     00
F96B                  (    cubix_ide.asm):00388         MESSAGE6
                      (    cubix_ide.asm):00389                 FCC     "0x"
                      (    cubix_ide.asm):00390                 FCB     00
                      (    cubix_ide.asm):00391         
                      (    cubix_ide.asm):00392         
                      (    cubix_ide.asm):00393         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (    cubix_ide.asm):00394         ;*
                      (    cubix_ide.asm):00395         ;*
                      (    cubix_ide.asm):00396         ;        SETUP   LBA DATA
                      (    cubix_ide.asm):00397         ;*____________________________________________________________________________________________________
F96B                  (    cubix_ide.asm):00398         IDE_SETUP_LBA:
                      (    cubix_ide.asm):00399                 PSHS    D
                      (    cubix_ide.asm):00400                 LDB     CURRENTDEVICE
                      (    cubix_ide.asm):00401                 ANDB    #$01                              ; only want drive cfg
                      (    cubix_ide.asm):00402                 ASLB                                      ; SHIFT 4
                      (    cubix_ide.asm):00403                 ASLB                                      ;
                      (    cubix_ide.asm):00404                 ASLB                                      ;
                      (    cubix_ide.asm):00405                 ASLB                                      ;
                      (    cubix_ide.asm):00406                 ORB     #$E0                              ; E0=MST  F0=SLV
                      (    cubix_ide.asm):00407                 STB     XTIDE_DEVICE
                      (    cubix_ide.asm):00408         
                      (    cubix_ide.asm):00409                 LDB     CURRENTSLICE
                      (    cubix_ide.asm):00410                 STB     XTIDE_LBAHI
                      (    cubix_ide.asm):00411         
                      (    cubix_ide.asm):00412                 LDB     CURRENTCYL                        ;
                      (    cubix_ide.asm):00413                 INCB                                      ; CYL 0 reserved for boot image
                      (    cubix_ide.asm):00414                 STB     XTIDE_LBAMID
                      (    cubix_ide.asm):00415         
                      (    cubix_ide.asm):00416                 LDB     CURRENTSEC                        ;
                      (    cubix_ide.asm):00417                 STB     XTIDE_LBALOW
                      (    cubix_ide.asm):00418         
                      (    cubix_ide.asm):00419                 LDB     #$01
                      (    cubix_ide.asm):00420                 STB     XTIDE_SEC_CNT
                      (    cubix_ide.asm):00421         
                      (    cubix_ide.asm):00422                 PULS    D,PC
                      (    cubix_ide.asm):00423                 ENDIF
                      (        mon09.asm):01143         ;* CONSTANTS
F96B                  (        mon09.asm):01144         PCRG
F96B 2C504352         (        mon09.asm):01145                 FCC     ',PCR'
                      (        mon09.asm):01146         ;* TRANSFER/EXCHANGE REGISTER TABLE
F96F                  (        mon09.asm):01147         REGTAB
F96F 4400             (        mon09.asm):01148                 FCN     'D'     0
F971 5800             (        mon09.asm):01149                 FCN     'X'     1
F973 5900             (        mon09.asm):01150                 FCN     'Y'     2
F975 5500             (        mon09.asm):01151                 FCN     'U'     3
F977 5300             (        mon09.asm):01152                 FCN     'S'     4
F979 5043             (        mon09.asm):01153                 FCC     'PC'        5
F97B 3F00             (        mon09.asm):01154                 FCN     '?'     6
F97D 3F00             (        mon09.asm):01155                 FCN     '?'     7
F97F 4100             (        mon09.asm):01156                 FCN     'A'     8
F981 4200             (        mon09.asm):01157                 FCN     'B'     9
F983 4343             (        mon09.asm):01158                 FCC     'CC'        A
F985 4450             (        mon09.asm):01159                 FCC     'DP'        B
F987 3F00             (        mon09.asm):01160                 FCN     '?'     C
F989 3F00             (        mon09.asm):01161                 FCN     '?'     D
F98B 3F00             (        mon09.asm):01162                 FCN     '?'     E
F98D 3F00             (        mon09.asm):01163                 FCN     '?'     F
                      (        mon09.asm):01164         ;* PUSH/PULL REGISTER TABLE
F98F                  (        mon09.asm):01165         PSHTAB:
F98F 4343             (        mon09.asm):01166                 FCC     'CC'
F991 4100             (        mon09.asm):01167                 FCN     'A'
F993 4200             (        mon09.asm):01168                 FCN     'B'
F995 4450             (        mon09.asm):01169                 FCC     'DP'
F997 5800             (        mon09.asm):01170                 FCN     'X'
F999 5900             (        mon09.asm):01171                 FCN     'Y'
F99B 5500             (        mon09.asm):01172                 FCN     'U'
F99D 504300           (        mon09.asm):01173                 FCN     'PC'
                      (        mon09.asm):01174         ;* VECTOR HANDLERS
F9A0                  (        mon09.asm):01175         SWI3:
F9A0 6E9FBF04         (        mon09.asm):01176                 JMP     [SWI3ADR]
F9A4                  (        mon09.asm):01177         SWI2:
F9A4 6E9FBF02         (        mon09.asm):01178                 JMP     [SWI2ADR]
F9A8                  (        mon09.asm):01179         IRQ:
F9A8 6E9FBF06         (        mon09.asm):01180                 JMP     [IRQADR]
F9AC                  (        mon09.asm):01181         FIRQ:
F9AC 6E9FBF08         (        mon09.asm):01182                 JMP     [FIRQADR]
                      (        mon09.asm):01183         ;* HELP TEXT
F9B0                  (        mon09.asm):01184         HTEXT:
F9B0 00               (        mon09.asm):01185                 FCB     0       NEW LINE TO START
F9B1 4352203C7265673E (        mon09.asm):01186                 FCN     'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
F9D1 4356203C7665633E (        mon09.asm):01187                 FCN     'CV <vec> <addr>|Change interrupt vector'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7200
F9F9 444D203C61646472 (        mon09.asm):01188                 FCN     'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
FA2C 44527C446973706C (        mon09.asm):01189                 FCN     'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
FA4B 44567C446973706C (        mon09.asm):01190                 FCN     'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
FA68 45203C616464723E (        mon09.asm):01191                 FCN     'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
FA7D 464D203C61646472 (        mon09.asm):01192                 FCN     'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
FAA1 47205B3C61646472 (        mon09.asm):01193                 FCN     'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
FAC1 4C7C4C6F61642061 (        mon09.asm):01194                 FCN     'L|Load an image into RAM from uart2'
     6E20696D61676520
     696E746F2052414D
     2066726F6D207561
     72743200
FAE5 4D4D203C61646472 (        mon09.asm):01195                 FCN     'MM <addr>,<addr> <addr>|Move memory'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F727900
FB09 4F537C426F6F7420 (        mon09.asm):01196                 FCN     'OS|Boot OS from XT-IDE'
     4F532066726F6D20
     58542D49444500
FB20 4F577C5772697465 (        mon09.asm):01197                 FCN     'OW|Write OS to XT-IDE'
     204F5320746F2058
     542D49444500
FB36 5252203C61646472 (        mon09.asm):01198                 FCN     'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
FB56 5257203C61646472 (        mon09.asm):01199                 FCN     'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
FB7E 57203C616464723E (        mon09.asm):01200                 FCN     'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
FB9E 5852203C61646472 (        mon09.asm):01201                 FCN     'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
FBBE 5857203C61646472 (        mon09.asm):01202                 FCN     'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
FBE6 2B203C76616C7565 (        mon09.asm):01203                 FCN     '+ <value>+<value>|Hexidecimal addition'
     3E2B3C76616C7565
     3E7C486578696465
     63696D616C206164
     646974696F6E00
FC0D 2D203C76616C7565 (        mon09.asm):01204                 FCN     '- <value>-<value>|Hexidecimal subtraction'
     3E2D3C76616C7565
     3E7C486578696465
     63696D616C207375
     627472616374696F
     6E00
FC37 FF               (        mon09.asm):01205                 FCB     -1      END OF TABLE
                      (        mon09.asm):01206         
                      (        mon09.asm):01207         ;*
                      (        mon09.asm):01208         ;* MACHINE DEPENDANT I/O ROUTINES FOR 6551 UART
                      (        mon09.asm):01209         ;*
FC38                  (        mon09.asm):01210         INIT:
FC38 8600             (        mon09.asm):01211                 LDA     #$00                              ; RESET UART
FC3A B7EF85           (        mon09.asm):01212                 STA     UART1STATUS                       ;
FC3D 860B             (        mon09.asm):01213                 LDA     #$0B                              ;
FC3F B7EF86           (        mon09.asm):01214                 STA     UART1COMMAND                      ;
FC42 861E             (        mon09.asm):01215                 LDA     #$1E                              ; 9600, 8 BITS, NO PARITY, 1 STOP BIT
FC44 B7EF87           (        mon09.asm):01216                 STA     UART1CONTROL                      ;
FC47 8E0000           (        mon09.asm):01217                 LDX     #$0000
                      (        mon09.asm):01218         !
FC4A 301F             (        mon09.asm):01219                 DEX
FC4C 8C0000           (        mon09.asm):01220                 CMPX    #$0000
FC4F 26F9             (        mon09.asm):01221                 BNE     <
FC51 39               (        mon09.asm):01222                 RTS
                      (        mon09.asm):01223         ;* READ UART
FC52                  (        mon09.asm):01224         READ:
FC52 B6EF85           (        mon09.asm):01225                 LDA     UART1STATUS                       ; GET STATUS REGISTER
FC55 8408             (        mon09.asm):01226                 ANDA    #%00001000                        ; IS RX READY
FC57 2704             (        mon09.asm):01227                 BEQ     NOCHR                             ; No DATA IS READY
FC59 B6EF84           (        mon09.asm):01228                 LDA     UART1DATA                         ; GET DATA CHAR
FC5C 39               (        mon09.asm):01229                 RTS
FC5D                  (        mon09.asm):01230         NOCHR:
FC5D B6BF29           (        mon09.asm):01231                 LDA     ESPEXISTS
FC60 81FF             (        mon09.asm):01232                 CMPA    #$FF
FC62 2703             (        mon09.asm):01233                 BEQ     >
FC64 BDFC92           (        mon09.asm):01234                 JSR     ESPPS2IN
                      (        mon09.asm):01235         !
FC67 39               (        mon09.asm):01236                 RTS
                      (        mon09.asm):01237         ;* WRITE UART
FC68                  (        mon09.asm):01238         WRITE:
FC68 F6EF85           (        mon09.asm):01239                 LDB     UART1STATUS                       ; GET STATUS
FC6B C410             (        mon09.asm):01240                 ANDB    #%00010000                        ; IS TX READY
FC6D 27F9             (        mon09.asm):01241                 BEQ     WRITE                             ; NO, WAIT FOR IT
FC6F B7EF84           (        mon09.asm):01242                 STA     UART1DATA                         ; WRITE DATA
FC72 F6BF29           (        mon09.asm):01243                 LDB     ESPEXISTS
FC75 C1FF             (        mon09.asm):01244                 CMPB    #$FF
FC77 2706             (        mon09.asm):01245                 BEQ     >
FC79 BDFC85           (        mon09.asm):01246                 JSR     ESPVIDEOOUT
FC7C 2501             (        mon09.asm):01247                 BCS     >
FC7E 39               (        mon09.asm):01248                 RTS
                      (        mon09.asm):01249         !
FC7F C6FF             (        mon09.asm):01250                 LDB     #$FF
FC81 F7BF29           (        mon09.asm):01251                 STB     ESPEXISTS
FC84 39               (        mon09.asm):01252                 RTS
                      (        mon09.asm):01253         
                      (        mon09.asm):01254                 INCLUDE cubix_esp.asm
                      (    cubix_esp.asm):00001         ;__ESP DRIVERS______________________________________________________________________________________________________________
                      (    cubix_esp.asm):00002         ;
                      (    cubix_esp.asm):00003         ;       CUBIX ISA DUAL ESP IO drivers for 6809PC
                      (    cubix_esp.asm):00004         ;
                      (    cubix_esp.asm):00005         ;       Entry points:
                      (    cubix_esp.asm):00006         ;               ESPINIT     - INIT HARDWARE
                      (    cubix_esp.asm):00007         ;               ESPVIDEOOUT - OUTPUT A CHARACTER TO VIDEO (ANSI)
                      (    cubix_esp.asm):00008         ;               ESPPS2IN    - read a character from the ps/2 keyboard ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00009         ;               LPT_OUT     - send a character to the printer
                      (    cubix_esp.asm):00010         ;________________________________________________________________________________________________________________________________
                      (    cubix_esp.asm):00011         ;
                      (    cubix_esp.asm):00012         ;*
                      (    cubix_esp.asm):00013         ;*        HARDWARE I/O ADDRESSES
                      (    cubix_esp.asm):00014         ;*
                      (    cubix_esp.asm):00015         ;
     E100             (    cubix_esp.asm):00016         ESP_BASE        EQU CUBIX_IO_BASE+$100
     E100             (    cubix_esp.asm):00017         ESP0_DAT        EQU ESP_BASE                      ;
     E101             (    cubix_esp.asm):00018         ESP1_DAT        EQU ESP_BASE+1                    ;
     E102             (    cubix_esp.asm):00019         ESP_STAT        EQU ESP_BASE+2                    ;
                      (    cubix_esp.asm):00020         
                      (    cubix_esp.asm):00021         
                      (    cubix_esp.asm):00022         
                      (    cubix_esp.asm):00023         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00024         ;
                      (    cubix_esp.asm):00025         ; STATUS BITS (FOR KBD_STATUS)
                      (    cubix_esp.asm):00026         ;
     0001             (    cubix_esp.asm):00027         ESP0_RDY        EQU $01                           ; BIT 0, ESP0 READY
     0002             (    cubix_esp.asm):00028         ESP0_BUSY       EQU $02                           ; BIT 1, ESP0 BUSY
     0008             (    cubix_esp.asm):00029         ESP1_RDY        EQU $08                           ; BIT 3, ESP1 READY
     0010             (    cubix_esp.asm):00030         ESP1_BUSY       EQU $10                           ; BIT 4, ESP1 BUSY
                      (    cubix_esp.asm):00031         ;
                      (    cubix_esp.asm):00032         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00033         ; DATA
                      (    cubix_esp.asm):00034         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00035         ;
                      (    cubix_esp.asm):00036         ;
                      (    cubix_esp.asm):00037         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00038         ; ESP IO INITIALIZATION
                      (    cubix_esp.asm):00039         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00040         ;
                      (    cubix_esp.asm):00041                 IFNDEF  BIOS6809PC
FC85                  (    cubix_esp.asm):00042         ESPINIT:
                      (    cubix_esp.asm):00043         ;
                      (    cubix_esp.asm):00044                 JSR     LFCR                              ; AND CRLF
                      (    cubix_esp.asm):00045                 LDX     #ESPMESSAGE1
                      (    cubix_esp.asm):00046                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_esp.asm):00047                 JSR     LFCR                              ; AND CRLF
                      (    cubix_esp.asm):00048         ; KEYBOARD INITIALIZATION
                      (    cubix_esp.asm):00049                 LDX     #MESSAGE2
                      (    cubix_esp.asm):00050                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_esp.asm):00051                 LDD     #ESP_BASE                         ; GET BASE PORT
                      (    cubix_esp.asm):00052                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_esp.asm):00053                 JSR     LFCR                              ; AND CRLF
                      (    cubix_esp.asm):00054         ;
                      (    cubix_esp.asm):00055                 JSR     ESP0_PROBE                        ; DETECT ESP0
                      (    cubix_esp.asm):00056                 JSR     LFCR                              ; AND CRLF
                      (    cubix_esp.asm):00057                 JSR     ESP1_PROBE                        ; DETECT ESP1
                      (    cubix_esp.asm):00058                 JSR     LFCR                              ; AND CRLF
                      (    cubix_esp.asm):00059                 RTS                                       ; DONE
                      (    cubix_esp.asm):00060         
                      (    cubix_esp.asm):00061         
FC85                  (    cubix_esp.asm):00062         ESP0_PROBE:
                      (    cubix_esp.asm):00063         ;
                      (    cubix_esp.asm):00064                 LDX     #ESPMESSAGE2                      ; PRINT 'ESP0'
                      (    cubix_esp.asm):00065                 JSR     WRSTR
                      (    cubix_esp.asm):00066         
                      (    cubix_esp.asm):00067                 LDA     #$FF                              ; ESP IDENTITY PROBE
                      (    cubix_esp.asm):00068                 JSR     PUTESP0                           ; SEND IT
                      (    cubix_esp.asm):00069                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00070         
                      (    cubix_esp.asm):00071                 JSR     GETESP0
                      (    cubix_esp.asm):00072                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00073                 CMPA    #'E'
                      (    cubix_esp.asm):00074                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00075                 JSR     GETESP0
                      (    cubix_esp.asm):00076                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00077                 CMPA    #'S'
                      (    cubix_esp.asm):00078                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00079                 JSR     GETESP0
                      (    cubix_esp.asm):00080                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00081                 CMPA    #'P'
                      (    cubix_esp.asm):00082                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00083                 JSR     GETESP0
                      (    cubix_esp.asm):00084                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00085                 CMPA    #'3'
                      (    cubix_esp.asm):00086                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00087                 JSR     GETESP0
                      (    cubix_esp.asm):00088                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00089                 CMPA    #'2'
                      (    cubix_esp.asm):00090                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00091                 JSR     GETESP0
                      (    cubix_esp.asm):00092                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00093                 CMPA    #'V'
                      (    cubix_esp.asm):00094                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00095                 JSR     GETESP0
                      (    cubix_esp.asm):00096                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00097                 CMPA    #'1'
                      (    cubix_esp.asm):00098                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00099                 LDX     #ESPMESSAGE5                      ; PRINT 'FOUND'
                      (    cubix_esp.asm):00100                 JSR     WRSTR
                      (    cubix_esp.asm):00101                 CLC
                      (    cubix_esp.asm):00102                 RTS
                      (    cubix_esp.asm):00103         ;
                      (    cubix_esp.asm):00104         ;
FC85                  (    cubix_esp.asm):00105         ESP_ERROR:
                      (    cubix_esp.asm):00106                 LDX     #ESPMESSAGE4                      ; PRINT NOT FOUND
                      (    cubix_esp.asm):00107                 JSR     WRSTR
                      (    cubix_esp.asm):00108                 JSR     LFCR                              ; AND CRLF
                      (    cubix_esp.asm):00109                 RTS
                      (    cubix_esp.asm):00110         
                      (    cubix_esp.asm):00111         ;
FC85                  (    cubix_esp.asm):00112         ESP1_PROBE:
                      (    cubix_esp.asm):00113         ;
                      (    cubix_esp.asm):00114                 LDX     #ESPMESSAGE3                      ; PRINT 'ESP1'
                      (    cubix_esp.asm):00115                 JSR     WRSTR
                      (    cubix_esp.asm):00116         
                      (    cubix_esp.asm):00117                 LDA     #$FF                              ; ESP IDENTITY PROBE
                      (    cubix_esp.asm):00118                 JSR     PUTESP1                           ; SEND IT
                      (    cubix_esp.asm):00119                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00120         
                      (    cubix_esp.asm):00121                 JSR     GETESP1
                      (    cubix_esp.asm):00122                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00123                 CMPA    #'E'
                      (    cubix_esp.asm):00124                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00125                 JSR     GETESP1
                      (    cubix_esp.asm):00126                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00127                 CMPA    #'S'
                      (    cubix_esp.asm):00128                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00129                 JSR     GETESP1
                      (    cubix_esp.asm):00130                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00131                 CMPA    #'P'
                      (    cubix_esp.asm):00132                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00133                 JSR     GETESP1
                      (    cubix_esp.asm):00134                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00135                 CMPA    #'3'
                      (    cubix_esp.asm):00136                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00137                 JSR     GETESP1
                      (    cubix_esp.asm):00138                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00139                 CMPA    #'2'
                      (    cubix_esp.asm):00140                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00141                 JSR     GETESP1
                      (    cubix_esp.asm):00142                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00143                 CMPA    #'V'
                      (    cubix_esp.asm):00144                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00145                 JSR     GETESP1
                      (    cubix_esp.asm):00146                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00147                 CMPA    #'1'
                      (    cubix_esp.asm):00148                 BNE     ESP_ERROR
                      (    cubix_esp.asm):00149                 LDX     #ESPMESSAGE5                      ; PRINT 'FOUND'
                      (    cubix_esp.asm):00150                 JSR     WRSTR
                      (    cubix_esp.asm):00151                 CLC
                      (    cubix_esp.asm):00152                 RTS
                      (    cubix_esp.asm):00153                 ENDIF
                      (    cubix_esp.asm):00154         
FC85                  (    cubix_esp.asm):00155         ESPVIDEOOUT:
FC85 3402             (    cubix_esp.asm):00156                 PSHS    A
FC87 8601             (    cubix_esp.asm):00157                 LDA     #01                               ; ESP OUT TO SCREEN
FC89 BDFCA6           (    cubix_esp.asm):00158                 JSR     PUTESP0                           ; SEND IT
FC8C 3502             (    cubix_esp.asm):00159                 PULS    A
FC8E BDFCA6           (    cubix_esp.asm):00160                 JSR     PUTESP0                           ; SEND IT
FC91 39               (    cubix_esp.asm):00161                 RTS
                      (    cubix_esp.asm):00162         
FC92                  (    cubix_esp.asm):00163         ESPPS2IN:
FC92 8603             (    cubix_esp.asm):00164                 LDA     #03                               ; ESP IN FROM PS2
FC94 BDFCA6           (    cubix_esp.asm):00165                 JSR     PUTESP0                           ; SEND IT
FC97 250A             (    cubix_esp.asm):00166                 BCS     >
FC99 BDFCC3           (    cubix_esp.asm):00167                 JSR     GETESP0                           ; GET IT
FC9C 2505             (    cubix_esp.asm):00168                 BCS     >
FC9E 8100             (    cubix_esp.asm):00169                 CMPA    #$00
FCA0 2701             (    cubix_esp.asm):00170                 BEQ     >
                      (    cubix_esp.asm):00171                 IFNDEF  BIOS6809PC
                      (    cubix_esp.asm):00172                 STA     >PAGER_D                          ; SAVE 'D'
                      (    cubix_esp.asm):00173                 ENDIF
FCA2 39               (    cubix_esp.asm):00174                 RTS
                      (    cubix_esp.asm):00175         !
FCA3 86FF             (    cubix_esp.asm):00176                 LDA     #$FF
                      (    cubix_esp.asm):00177                 IFNDEF  BIOS6809PC
                      (    cubix_esp.asm):00178                 STA     >PAGER_D                          ; SAVE 'D'
                      (    cubix_esp.asm):00179                 ENDIF
FCA5 39               (    cubix_esp.asm):00180                 RTS
                      (    cubix_esp.asm):00181         
                      (    cubix_esp.asm):00182         
                      (    cubix_esp.asm):00183         ;
                      (    cubix_esp.asm):00184         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00185         ; HARDWARE INTERFACE
                      (    cubix_esp.asm):00186         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00187         ;
                      (    cubix_esp.asm):00188         ; a=VALUE AND RETURN
                      (    cubix_esp.asm):00189         ; Carry set on timeout
                      (    cubix_esp.asm):00190         ;
                      (    cubix_esp.asm):00191         ;__________________________________________________________________________________________________
FCA6                  (    cubix_esp.asm):00192         PUTESP0:
FCA6 3414             (    cubix_esp.asm):00193                 PSHS    X,B
FCA8 8E2500           (    cubix_esp.asm):00194                 LDX     #$2500
                      (    cubix_esp.asm):00195         !
FCAB F6E102           (    cubix_esp.asm):00196                 LDB     ESP_STAT
FCAE C402             (    cubix_esp.asm):00197                 ANDB    #ESP0_BUSY
FCB0 2709             (    cubix_esp.asm):00198                 BEQ     >
FCB2 301F             (    cubix_esp.asm):00199                 DEX
FCB4 26F5             (    cubix_esp.asm):00200                 BNE     <
FCB6 3514             (    cubix_esp.asm):00201                 PULS    X,B
FCB8 1A01             (    cubix_esp.asm):00202                 SEC
FCBA 39               (    cubix_esp.asm):00203                 RTS
                      (    cubix_esp.asm):00204         !
FCBB B7E100           (    cubix_esp.asm):00205                 STA     ESP0_DAT
FCBE 3514             (    cubix_esp.asm):00206                 PULS    X,B
FCC0 1CFE             (    cubix_esp.asm):00207                 CLC
FCC2 39               (    cubix_esp.asm):00208                 RTS
                      (    cubix_esp.asm):00209         
FCC3                  (    cubix_esp.asm):00210         GETESP0:
FCC3 3414             (    cubix_esp.asm):00211                 PSHS    X,B
FCC5 8EFF00           (    cubix_esp.asm):00212                 LDX     #$FF00
                      (    cubix_esp.asm):00213         !
FCC8 F6E102           (    cubix_esp.asm):00214                 LDB     ESP_STAT
FCCB C402             (    cubix_esp.asm):00215                 ANDB    #ESP0_BUSY
FCCD 2709             (    cubix_esp.asm):00216                 BEQ     >
FCCF 301F             (    cubix_esp.asm):00217                 DEX
FCD1 26F5             (    cubix_esp.asm):00218                 BNE     <
FCD3 3514             (    cubix_esp.asm):00219                 PULS    X,B
FCD5 1A01             (    cubix_esp.asm):00220                 SEC
FCD7 39               (    cubix_esp.asm):00221                 RTS
                      (    cubix_esp.asm):00222         !
FCD8 8EFF00           (    cubix_esp.asm):00223                 LDX     #$FF00
                      (    cubix_esp.asm):00224         !
FCDB F6E102           (    cubix_esp.asm):00225                 LDB     ESP_STAT
FCDE C401             (    cubix_esp.asm):00226                 ANDB    #ESP0_RDY
FCE0 2609             (    cubix_esp.asm):00227                 BNE     >
FCE2 301F             (    cubix_esp.asm):00228                 DEX
FCE4 26F5             (    cubix_esp.asm):00229                 BNE     <
FCE6 3514             (    cubix_esp.asm):00230                 PULS    X,B
FCE8 1A01             (    cubix_esp.asm):00231                 SEC
FCEA 39               (    cubix_esp.asm):00232                 RTS
                      (    cubix_esp.asm):00233         !
FCEB B6E100           (    cubix_esp.asm):00234                 LDA     ESP0_DAT
FCEE 3514             (    cubix_esp.asm):00235                 PULS    X,B
FCF0 1CFE             (    cubix_esp.asm):00236                 CLC
FCF2 39               (    cubix_esp.asm):00237                 RTS
                      (    cubix_esp.asm):00238         
FCF3                  (    cubix_esp.asm):00239         PUTESP1:
FCF3 3414             (    cubix_esp.asm):00240                 PSHS    X,B
FCF5 8E2500           (    cubix_esp.asm):00241                 LDX     #$2500
                      (    cubix_esp.asm):00242         !
FCF8 F6E102           (    cubix_esp.asm):00243                 LDB     ESP_STAT
FCFB C410             (    cubix_esp.asm):00244                 ANDB    #ESP1_BUSY
FCFD 2709             (    cubix_esp.asm):00245                 BEQ     >
FCFF 301F             (    cubix_esp.asm):00246                 DEX
FD01 26F5             (    cubix_esp.asm):00247                 BNE     <
FD03 3514             (    cubix_esp.asm):00248                 PULS    X,B
FD05 1A01             (    cubix_esp.asm):00249                 SEC
FD07 39               (    cubix_esp.asm):00250                 RTS
                      (    cubix_esp.asm):00251         !
FD08 B7E101           (    cubix_esp.asm):00252                 STA     ESP1_DAT
FD0B 3514             (    cubix_esp.asm):00253                 PULS    X,B
FD0D 1CFE             (    cubix_esp.asm):00254                 CLC
FD0F 39               (    cubix_esp.asm):00255                 RTS
                      (    cubix_esp.asm):00256         
FD10                  (    cubix_esp.asm):00257         GETESP1:
FD10 3414             (    cubix_esp.asm):00258                 PSHS    X,B
FD12 8EFF00           (    cubix_esp.asm):00259                 LDX     #$FF00
                      (    cubix_esp.asm):00260         !
FD15 F6E102           (    cubix_esp.asm):00261                 LDB     ESP_STAT
FD18 C410             (    cubix_esp.asm):00262                 ANDB    #ESP1_BUSY
FD1A 2709             (    cubix_esp.asm):00263                 BEQ     >
FD1C 301F             (    cubix_esp.asm):00264                 DEX
FD1E 26F5             (    cubix_esp.asm):00265                 BNE     <
FD20 3514             (    cubix_esp.asm):00266                 PULS    X,B
FD22 1A01             (    cubix_esp.asm):00267                 SEC
FD24 39               (    cubix_esp.asm):00268                 RTS
                      (    cubix_esp.asm):00269         !
FD25 8EFF00           (    cubix_esp.asm):00270                 LDX     #$FF00
                      (    cubix_esp.asm):00271         !
FD28 F6E102           (    cubix_esp.asm):00272                 LDB     ESP_STAT
FD2B C408             (    cubix_esp.asm):00273                 ANDB    #ESP1_RDY
FD2D 2609             (    cubix_esp.asm):00274                 BNE     >
FD2F 301F             (    cubix_esp.asm):00275                 DEX
FD31 26F5             (    cubix_esp.asm):00276                 BNE     <
FD33 3514             (    cubix_esp.asm):00277                 PULS    X,B
FD35 1A01             (    cubix_esp.asm):00278                 SEC
FD37 39               (    cubix_esp.asm):00279                 RTS
                      (    cubix_esp.asm):00280         !
FD38 B6E101           (    cubix_esp.asm):00281                 LDA     ESP1_DAT
FD3B 3514             (    cubix_esp.asm):00282                 PULS    X,B
FD3D 1CFE             (    cubix_esp.asm):00283                 CLC
FD3F 39               (    cubix_esp.asm):00284                 RTS
                      (    cubix_esp.asm):00285         
                      (    cubix_esp.asm):00286         
                      (    cubix_esp.asm):00287                 IFNDEF  BIOS6809PC
                      (    cubix_esp.asm):00288         ;
                      (    cubix_esp.asm):00289         ; DRIVER DATA
                      (    cubix_esp.asm):00290         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00291         ; MESSAGES
                      (    cubix_esp.asm):00292         ;__________________________________________________________________________________________________
FD40                  (    cubix_esp.asm):00293         ESPMESSAGE1:
                      (    cubix_esp.asm):00294                 FCC     "DUAL ESP IO:"
                      (    cubix_esp.asm):00295                 FCB     00
FD40                  (    cubix_esp.asm):00296         ESPMESSAGE2:
                      (    cubix_esp.asm):00297                 FCC     "  ESP0: "
                      (    cubix_esp.asm):00298                 FCB     00
FD40                  (    cubix_esp.asm):00299         ESPMESSAGE3:
                      (    cubix_esp.asm):00300                 FCC     "  ESP1: "
                      (    cubix_esp.asm):00301                 FCB     00
FD40                  (    cubix_esp.asm):00302         ESPMESSAGE4:
                      (    cubix_esp.asm):00303                 FCC     "NOT "
FD40                  (    cubix_esp.asm):00304         ESPMESSAGE5:
                      (    cubix_esp.asm):00305                 FCC     "FOUND."
                      (    cubix_esp.asm):00306                 FCB     00
                      (    cubix_esp.asm):00307                 ENDIF
                      (        mon09.asm):01255         
                      (        mon09.asm):01256         ;*
                      (        mon09.asm):01257         ;* MACHINE VECTORS
                      (        mon09.asm):01258         ;*
                      (        mon09.asm):01259                 ORG     $FFF2
FFF2 F9A0             (        mon09.asm):01260                 FDB     SWI3
FFF4 F9A4             (        mon09.asm):01261                 FDB     SWI2
FFF6 F9AC             (        mon09.asm):01262                 FDB     FIRQ
FFF8 F9A8             (        mon09.asm):01263                 FDB     IRQ
FFFA F6F0             (        mon09.asm):01264                 FDB     SWIHND
FFFC F6C5             (        mon09.asm):01265                 FDB     NMIHND
FFFE F000             (        mon09.asm):01266                 FDB     RESET

Symbol Table:
[ G] BIOS6809PC                       0001
[ G] BOOTOS                           F7D5
[ G] BOOTOS_1                         F80F
[ G] BRKREG                           F74C
[ G] BRKRES                           F74F
[ G] BRKTAB                           0300
[ G] CCBITS                           F34C
[ G] CHG1                             F35F
[ G] CHG2                             F36B
[ G] CHG3                             F39C
[ G] CHG4                             F382
[ G] CHGREG                           F354
[ G] CHGTAB                           F39F
[ G] CHGV1                            F2B1
[ G] CHGV2                            F2B9
[ G] CHGV3                            F2BF
[ G] CHGV4                            F2CA
[ G] CHGVEC                           F2A6
[ G] CHKC1                            F685
[ G] CHKC3                            F698
[ G] CHKCHR                           F67C
[ G] CLRRAM                           F007
[ G] CMDTAB                           F148
[ G] CUBIX_IO_BASE                    E000
[ G] DISKERROR                        BF28
[ G] DISREG                           F2D8
[ G] DISV1                            F276
[ G] DISVEC                           F26F
[ G] DLEOF                            F50D
[ G] DLINT                            F50E
[ G] DLINT1                           F544
[ G] DLMOT                            F4A7
[ G] DLMOT1                           F4DF
[ G] DLO1                             F48C
[ G] DLO2                             F499
[ G] DLOAD                            F49C
[ G] DLRTS                            F50B
[ G] ERROR                            F140
[ G] ESP0_BUSY                        0002
[ G] ESP0_DAT                         E100
[ G] ESP0_RDY                         0001
[ G] ESP1_BUSY                        0010
[ G] ESP1_DAT                         E101
[ G] ESP1_RDY                         0008
[ G] ESP_BASE                         E100
[ G] ESP_STAT                         E102
[ G] ESPEXISTS                        BF29
[ G] ESPPS2IN                         FC92
[ G] ESPVIDEOOUT                      FC85
[ G] FILL1                            F1A7
[ G] FILMEM                           F199
[ G] FIRQ                             F9AC
[ G] FIRQADR                          BF08
[ G] GETAD1                           F59E
[ G] GETAD2                           F5AA
[ G] GETAD3                           F5AB
[ G] GETAD4                           F5D0
[ G] GETAD5                           F5DC
[ G] GETADR                           F597
[ G] GETB1                            F5F2
[ G] GETB2                            F5F0
[ G] GETB3                            F5F3
[ G] GETB4                            F5EE
[ G] GETBYT                           F5DE
[ G] GETC1                            F66C
[ G] GETCHR                           F66A
[ G] GETECH                           F64A
[ G] GETERR                           F59B
[ G] GETESP0                          FCC3
[ G] GETESP1                          FD10
[ G] GETN1                            F613
[ G] GETN2                            F616
[ G] GETNIB                           F600
[ G] GETPC                            F562
[ G] GETPC1                           F576
[ G] GETRNG                           F57A
[ G] GOEXEC                           F3A9
[ G] HELP                             F45B
[ G] HEXADD                           F428
[ G] HEXOUT                           F61D
[ G] HEXSHO                           F44C
[ G] HEXSUB                           F439
[ G] HLP1                             F45E
[ G] HLP2                             F460
[ G] HLP3                             F46E
[ G] HLP4                             F47C
[ G] HLP5                             F488
[ G] HOUT                             F627
[ G] HOUT1                            F631
[ G] HSTBUF                           0100
[ G] HTEXT                            F9B0
[ G] IDE_READ_BUFFER                  F90F
[ G] IDE_READ_SECTOR                  F8A2
[ G] IDE_READ_SECTOR_1                F8A7
[ G] IDE_READ_SECTOR_ERROR            F8B9
[ G] IDE_WAIT_DRQ                     F8E3
[ G] IDE_WAIT_DRQ1                    F8ED
[ G] IDE_WAIT_DRQ2                    F90B
[ G] IDE_WAIT_DRQ3                    F90D
[ G] IDE_WAIT_DRQE                    F906
[ G] IDE_WAIT_NOT_BUSY                F8BF
[ G] IDE_WAIT_NOT_BUSY1               F8C9
[ G] IDE_WAIT_NOT_BUSY2               F8DF
[ G] IDE_WAIT_NOT_BUSY3               F8E1
[ G] IDE_WRITE_BUFFER                 F94E
[ G] IDE_WRITE_SECTOR                 F92C
[ G] IDE_WRITE_SECTOR_ERROR           F948
[ G] IDEBUFRD                         F913
[ G] IDEBUFWT                         F952
[ G] INIT                             FC38
[ G] INSRAM                           BF1F
[ G] INSTYP                           BF1D
[ G] IOSPACE                          EF00
[ G] IRQ                              F9A8
[ G] IRQADR                           BF06
[ G] LFC1                             F666
[ G] LFCR                             F65E
[ G] LOAD                             F489
[ G] LODERR                           F4F8
[ G] LOOK1                            F116
[ G] LOOK2                            F122
[ G] LOOK3                            F139
[ G] LOOKC                            F110
[ G] MAIN                             F102
[ G] MEM1                             F1D1
[ G] MEM2                             F1E4
[ G] MEM3                             F1EE
[ G] MEM4                             F1F8
[ G] MEM5                             F202
[ G] MEM6                             F20C
[ G] MEM7                             F20E
[ G] MEMORY                           F1CB
[ G] MONITOR                          F021
[ G] MOVM1                            F1BF
[ G] MOVMEM                           F1B1
[ G] NMIH1                            F6CA
[ G] NMIHND                           F6C5
[ G] NOCHR                            FC5D
[ G] PCRG                             F96B
[ G] POSBYT                           BF1E
[ G] PSHTAB                           F98F
[ G] PTRSAV                           BF1B
[ G] PUTCHR                           F675
[ G] PUTESP0                          FCA6
[ G] PUTESP1                          FCF3
[ G] R16                              F390
[ G] R17                              F397
[ G] RAM                              BF00
[ G] RBITS                            F2F6
[ G] RDLOOP                           F3CE
[ G] RDLP1                            F3D6
[ G] READ                             FC52
[ G] REGB1                            F2EF
[ G] REGTAB                           F96F
[ G] REGTXT                           F322
[ G] RESET                            F000
[ G] ROM                              F000
[ G] RSUB1                            F312
[ G] RSUB2                            F31A
[ G] SAVA                             BF0B
[ G] SAVB                             BF0C
[ G] SAVCC                            BF0A
[ G] SAVDP                            BF0D
[ G] SAVPC                            BF14
[ G] SAVS                             BF16
[ G] SAVU                             BF12
[ G] SAVX                             BF0E
[ G] SAVY                             BF10
[ G] SPACE                            F658
[ G] STACK                            BFF0
[ G] STPFLG                           BF1A
[ G] SUBM1                            F231
[ G] SUBM2                            F23B
[ G] SUBM3                            F24F
[ G] SUBM4                            F256
[ G] SUBM5                            F265
[ G] SUBMEM                           F22C
[ G] SWI2                             F9A4
[ G] SWI2ADR                          BF02
[ G] SWI3                             F9A0
[ G] SWI3ADR                          BF04
[ G] SWIADR                           BF00
[ G] SWIHN1                           F6FA
[ G] SWIHN2                           F70E
[ G] SWIHN25                          F716
[ G] SWIHN3                           F754
[ G] SWIHN4                           F75D
[ G] SWIHND                           F6F0
[ G] TEMP                             BF18
[ G] UART1COMMAND                     EF86
[ G] UART1CONTROL                     EF87
[ G] UART1DATA                        EF84
[ G] UART1STATUS                      EF85
[ G] VECTXT                           F285
[ G] WRDOUT                           F619
[ G] WRHEX                            F6AE
[ G] WRHEX1                           F6AC
[ G] WRHEXB                           F69C
[ G] WRHEXN                           F6B8
[ G] WRHEXW                           F6A4
[ G] WRIMEM                           F21C
[ G] WRITE                            FC68
[ G] WRITEOS                          F765
[ G] WRITEOS_1                        F79C
[ G] WRLIN                            F63D
[ G] WRLND                            F649
[ G] WRLOOP                           F3DE
[ G] WRLP1                            F3F2
[ G] WRMSG                            F633
[ G] WRNOK                            F6C2
[ G] XRLOOP                           F3FD
[ G] XRLP1                            F405
[ G] XTIDE_CMD_FEAT                   00EF
[ G] XTIDE_CMD_ID                     00EC
[ G] XTIDE_CMD_INIT                   0091
[ G] XTIDE_CMD_READ                   0020
[ G] XTIDE_CMD_RECAL                  0010
[ G] XTIDE_CMD_SPINDOWN               00E0
[ G] XTIDE_CMD_SPINUP                 00E1
[ G] XTIDE_CMD_WRITE                  0030
[ G] XTIDE_COMMAND                    E30E
[ G] XTIDE_DATA_HI                    E301
[ G] XTIDE_DATA_LO                    E300
[ G] XTIDE_DEVICE                     E30C
[ G] XTIDE_ERR                        E302
[ G] XTIDE_FECODE                     E302
[ G] XTIDE_INIT                       F848
[ G] XTIDE_LBAHI                      E30A
[ G] XTIDE_LBALOW                     E306
[ G] XTIDE_LBAMID                     E308
[ G] XTIDE_PROBE                      F860
[ G] XTIDE_PROBE_FAIL                 F89F
[ G] XTIDE_PROBE_SUCCESS              F8A1
[ G] XTIDE_SEC_CNT                    E304
[ G] XTIDE_STATUS                     E30E
[ G] XTIDETIMEOUT                     BF26
[ G] XWLOOP                           F40D
[ G] XWLP1                            F41D
