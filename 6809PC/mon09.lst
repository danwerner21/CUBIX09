                      (        mon09.asm):00001         ;*
                      (        mon09.asm):00002         ;* MON09: A software debug monitor for the 6809
                      (        mon09.asm):00003         ;*
                      (        mon09.asm):00004         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (        mon09.asm):00005         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and RAM
                      (        mon09.asm):00006         ;* from $0000-$BFFF. The 256 byte block from $DF00-$DFFF is used for I/O devices
                      (        mon09.asm):00007         ;* etc. MON09 uses 256 bytes of memory at the very top of available RAM,
                      (        mon09.asm):00008         ;* and the user stack pointer is initialized to point to the beginning of
                      (        mon09.asm):00009         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (        mon09.asm):00010         ;*
                      (        mon09.asm):00011         ;* ?COPY.TXT 1985-2007 Dave Dunfield
                      (        mon09.asm):00012         ;* **See COPY.TXT**.
                      (        mon09.asm):00013         ;*
                      (        mon09.asm):00014         ;*
                      (        mon09.asm):00015         ;*   Modified for the 6809PC board by D. Werner 5/17/2025
                      (        mon09.asm):00016         ;*   Single 6551 UART supported at 9600,n,8,1
                      (        mon09.asm):00017         ;*
                      (        mon09.asm):00018         ;*   Commands have been removed to conserve
                      (        mon09.asm):00019         ;*   ROM space
                      (        mon09.asm):00020         
                      (        mon09.asm):00021         
                      (        mon09.asm):00022         ;* HARDWARE INFORMATION
     F000             (        mon09.asm):00023         ROM             EQU $F000                         ; MON09 code goes here
     BF00             (        mon09.asm):00024         RAM             EQU $BF00                         ; MON09 data goes here
     BFF0             (        mon09.asm):00025         STACK           EQU RAM+$F0                       ; MON09 Stack (Top of RAM)
                      (        mon09.asm):00026         ;*
     EF00             (        mon09.asm):00027         IOSPACE         EQU $EF00
     EF84             (        mon09.asm):00028         UART1DATA       EQU IOSPACE+$84                   ; SERIAL PORT 1 (I/O Card)
     EF85             (        mon09.asm):00029         UART1STATUS     EQU IOSPACE+$85                   ; SERIAL PORT 1 (I/O Card)
     EF86             (        mon09.asm):00030         UART1COMMAND    EQU IOSPACE+$86                   ; SERIAL PORT 1 (I/O Card)
     EF87             (        mon09.asm):00031         UART1CONTROL    EQU IOSPACE+$87                   ; SERIAL PORT 1 (I/O Card)
                      (        mon09.asm):00032         ;*
                      (        mon09.asm):00033         ;*
                      (        mon09.asm):00034                 ORG     RAM                               ;Internal MON09 variables
                      (        mon09.asm):00035         ;*
                      (        mon09.asm):00036         ;* MON09 INTERNAL MEMORY
                      (        mon09.asm):00037         ;*
BF00                  (        mon09.asm):00038         SWIADR:
BF00                  (        mon09.asm):00039                 RMB     2                                 ;SWI VECTOR ADDRESS
BF02                  (        mon09.asm):00040         SWI2ADR:
BF02                  (        mon09.asm):00041                 RMB     2                                 ;SWI2 VECTOR ADDRESS
BF04                  (        mon09.asm):00042         SWI3ADR:
BF04                  (        mon09.asm):00043                 RMB     2                                 ;SWI3 VECTOR ADDRESS
BF06                  (        mon09.asm):00044         IRQADR:
BF06                  (        mon09.asm):00045                 RMB     2                                 ;IRQ VECTOR ADDRESS
BF08                  (        mon09.asm):00046         FIRQADR:
BF08                  (        mon09.asm):00047                 RMB     2                                 ;FIRQ VECTOR ADDRESS
BF0A                  (        mon09.asm):00048         SAVCC:
BF0A                  (        mon09.asm):00049                 RMB     1                                 ;SAVED CONDITION CODE REGISTER
BF0B                  (        mon09.asm):00050         SAVA:
BF0B                  (        mon09.asm):00051                 RMB     1                                 ;SAVED 6809 A REGISTER
BF0C                  (        mon09.asm):00052         SAVB:
BF0C                  (        mon09.asm):00053                 RMB     1                                 ;SAVED 6809 B REGISTER
BF0D                  (        mon09.asm):00054         SAVDP:
BF0D                  (        mon09.asm):00055                 RMB     1                                 ;SAVED DIRECT PAGE REGISTER
BF0E                  (        mon09.asm):00056         SAVX:
BF0E                  (        mon09.asm):00057                 RMB     2                                 ;SAVED X REGISTER
BF10                  (        mon09.asm):00058         SAVY:
BF10                  (        mon09.asm):00059                 RMB     2                                 ;SAVED Y REGISTER
BF12                  (        mon09.asm):00060         SAVU:
BF12                  (        mon09.asm):00061                 RMB     2                                 ;SAVED U REGISTER
BF14                  (        mon09.asm):00062         SAVPC:
BF14                  (        mon09.asm):00063                 RMB     2                                 ;SAVED PROGRAM COUNTER
BF16                  (        mon09.asm):00064         SAVS:
BF16                  (        mon09.asm):00065                 RMB     2                                 ;SAVED S REGISTER
BF18                  (        mon09.asm):00066         TEMP:
BF18                  (        mon09.asm):00067                 RMB     2                                 ;TEMPORARY STORAGE
BF1A                  (        mon09.asm):00068         STPFLG:
BF1A                  (        mon09.asm):00069                 RMB     1                                 ;REGISTER DISPLAY WHILE STEPPING FLAG
BF1B                  (        mon09.asm):00070         PTRSAV:
BF1B                  (        mon09.asm):00071                 RMB     2                                 ;SINGLE STEP AND DISASSEMBLER CODE POINTER
BF1D                  (        mon09.asm):00072         INSTYP:
BF1D                  (        mon09.asm):00073                 RMB     1                                 ;DISASSEMBLED INSTRUCTION TYPE
BF1E                  (        mon09.asm):00074         POSBYT:
BF1E                  (        mon09.asm):00075                 RMB     1                                 ;POSTBYTE STORAGE AREA
BF1F                  (        mon09.asm):00076         BRKTAB:
BF1F                  (        mon09.asm):00077                 RMB     24                                ;BREAKPOINT TABLE
BF37                  (        mon09.asm):00078         DSPBUF:
BF37                  (        mon09.asm):00079                 RMB     50                                ;DISASSEMBLER DISPLAY BUFFER
BF69                  (        mon09.asm):00080         INSRAM:
BF69                  (        mon09.asm):00081                 RMB     7                                 ;INSTRUCTION EXECUTION ADDRESS
                      (        mon09.asm):00082         ;*
                      (        mon09.asm):00083                 ORG     ROM                               ;MONITOR CODE
                      (        mon09.asm):00084         ;*
                      (        mon09.asm):00085         ;* INITIALIZATIONS.
                      (        mon09.asm):00086         ;*
F000                  (        mon09.asm):00087         RESET:
F000 10CEBFF0         (        mon09.asm):00088                 LDS     #STACK                            ;SET UP STACK
                      (        mon09.asm):00089         
F004 8EBF00           (        mon09.asm):00090                 LDX     #SWIADR                           ;POINT TO START
F007                  (        mon09.asm):00091         CLRRAM:
F007 6F80             (        mon09.asm):00092                 CLR     ,X+                               ;CLEAR IT
F009 8CBF69           (        mon09.asm):00093                 CMPX    #INSRAM                           ;AT BUFFER?
F00C 25F9             (        mon09.asm):00094                 BLO     CLRRAM                            ;KEEP GOING
                      (        mon09.asm):00095         
F00E 1709EA           (        mon09.asm):00096                 LBSR    INIT                              ;INITIALIZE UART
F011 CCBF00           (        mon09.asm):00097                 LDD     #RAM                              ;DEFAULT STACK AT TOP OF RAM
F014 FDBF16           (        mon09.asm):00098                 STD     SAVS                              ;SAVE IT
F017 86D0             (        mon09.asm):00099                 LDA     #$D0                              ;SET CC
F019 B7BF0A           (        mon09.asm):00100                 STA     SAVCC                             ;SAVE IT
F01C                  (        mon09.asm):00101         MONITOR:
F01C 17060A           (        mon09.asm):00102                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F01F 0A0D0A0D0A0D     (        mon09.asm):00103                 FCB     $0A,$0D,$0A,$0D,$0A,$0D
F025 202020205F5F5F5F (        mon09.asm):00104                 FCC     '    ____ ___  ___  ___  ___  _____'
     205F5F5F20205F5F
     5F20205F5F5F2020
     5F5F5F20205F5F5F
     5F5F
F047 0A0D             (        mon09.asm):00105                 FCB     $0A,$0D
F049 20202F205F5F2F28 (        mon09.asm):00106                 FCC     '  / __/( _ )/ _ \/ _ \/ _ \/ ___/'
     205F20292F205F20
     5C2F205F205C2F20
     5F205C2F205F5F5F
     2F
F06A 0A0D             (        mon09.asm):00107                 FCB     $0A,$0D
F06C 2F205F205C2F205F (        mon09.asm):00108                 FCC     '/ _ \/ _  / // /\_, / ___/ /__'
     20202F202F2F202F
     5C5F2C202F205F5F
     5F2F202F5F5F
F08A 0A0D             (        mon09.asm):00109                 FCB     $0A,$0D
F08C 5C5F5F5F2F5C5F5F (        mon09.asm):00110                 FCC     '\___/\___/\___//___/_/   \___/'
     5F2F5C5F5F5F2F2F
     5F5F5F2F5F2F2020
     205C5F5F5F2F
F0AA 0A0D             (        mon09.asm):00111                 FCB     $0A,$0D
F0AC 4D4F4E3039205665 (        mon09.asm):00112                 FCC     'MON09 Version 3.3a   1985-2007 Dave Dunfield'
     7273696F6E20332E
     3361202020313938
     352D323030372044
     6176652044756E66
     69656C64
F0D8 0A0D             (        mon09.asm):00113                 FCB     $0A,$0D
F0DA 2A2A205072657373 (        mon09.asm):00114                 FCC     '** Press ? for a list of commands **'
     203F20666F722061
     206C697374206F66
     20636F6D6D616E64
     73202A2A
F0FE 0AFF             (        mon09.asm):00115                 FCB     $0A,$FF
F100                  (        mon09.asm):00116         MAIN
F100 10CEBFF0         (        mon09.asm):00117                 LDS     #STACK                            ;FIX STACK IN CASE ERROR
F104 170522           (        mon09.asm):00118                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F107 2A2000           (        mon09.asm):00119                 FCN     '* '
F10A 170533           (        mon09.asm):00120                 LBSR    GETECH                            ;GET CHARACTER
F10D 5F               (        mon09.asm):00121                 CLRB                                      ;INDICATE NO SECOND CHAR
                      (        mon09.asm):00122         ;* LOOK FOR COMMAND IN TABLE
F10E                  (        mon09.asm):00123         LOOKC
F10E 8EF146           (        mon09.asm):00124                 LDX     #CMDTAB                           ;POINT TO COMMAND TABLE
F111 7FBF18           (        mon09.asm):00125                 CLR     TEMP                              ;INDICATE NO PARTIAL MATCH
F114                  (        mon09.asm):00126         LOOK1
F114 10A381           (        mon09.asm):00127                 CMPD    ,X++                              ;DOES IT MATCH
F117 271E             (        mon09.asm):00128                 BEQ     LOOK3                             ;YES IT DOES
F119 A11E             (        mon09.asm):00129                 CMPA    -2,X                              ;DOES FIRST CHAR MATCH?
F11B 2603             (        mon09.asm):00130                 BNE     LOOK2                             ;NO, DON'T RECORD
F11D 7ABF18           (        mon09.asm):00131                 DEC     TEMP                              ;SET FLAG
F120                  (        mon09.asm):00132         LOOK2
F120 3002             (        mon09.asm):00133                 LEAX    2,X                               ;ADVANCE TO NEXT
F122 6D84             (        mon09.asm):00134                 TST     ,X                                ;HAVE WE HIT THE END
F124 26EE             (        mon09.asm):00135                 BNE     LOOK1                             ;NO, KEEP LOOKING
F126 5D               (        mon09.asm):00136                 TSTB                                      ;ALREADY HAVE TWO CHARS?
F127 2615             (        mon09.asm):00137                 BNE     ERROR                             ;YES, ERROR
F129 F6BF18           (        mon09.asm):00138                 LDB     TEMP                              ;ANY PARTIAL MATCHES?
F12C 2710             (        mon09.asm):00139                 BEQ     ERROR                             ;NO, ERROR
F12E 1F89             (        mon09.asm):00140                 TFR     A,B                               ;SAVE CHAR IN 'A'
F130 17050D           (        mon09.asm):00141                 LBSR    GETECH                            ;GET NEXT CHAR
F133 1E89             (        mon09.asm):00142                 EXG     A,B                               ; SWAP BACK
F135 20D7             (        mon09.asm):00143                 BRA     LOOKC                             ;AND CONTINUE
                      (        mon09.asm):00144         ;* COMMAND WAS FOUND, EXECUTE IT
F137                  (        mon09.asm):00145         LOOK3
F137 170514           (        mon09.asm):00146                 LBSR    SPACE                             ;OUTPUT SPACE
F13A AD94             (        mon09.asm):00147                 JSR     [,X]                              ;EXECUTE COMMAND
F13C 20C2             (        mon09.asm):00148                 BRA     MAIN                              ;AND RETURN
                      (        mon09.asm):00149         ;* ERROR HAS OCCURED
F13E                  (        mon09.asm):00150         ERROR
F13E 1704E8           (        mon09.asm):00151                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F141 203F             (        mon09.asm):00152                 FCC     ' ?'
F143 FF               (        mon09.asm):00153                 FCB     $FF
F144 20BA             (        mon09.asm):00154                 BRA     MAIN                              ; TRY AGAIN
                      (        mon09.asm):00155         ;* COMMAND LOOKUP TABLE
F146                  (        mon09.asm):00156         CMDTAB
F146 444D             (        mon09.asm):00157                 FCB     'D','M'                           ; DISPLAY MEMORY
F148 F1C1             (        mon09.asm):00158                 FDB     MEMORY
F14A 4449             (        mon09.asm):00159                 FCB     'D','I'                           ; DISASSEMBLE
F14C F2CE             (        mon09.asm):00160                 FDB     DISREG
F14E 4456             (        mon09.asm):00161                 FCB     'D','V'                           ;DISPLAY VECTORS
F150 F265             (        mon09.asm):00162                 FDB     DISVEC
F152 4352             (        mon09.asm):00163                 FCB     'C','R'                           ;CHANGE REGISTER
F154 F34A             (        mon09.asm):00164                 FDB     CHGREG
F156 4356             (        mon09.asm):00165                 FCB     'C','V'                           ;CHANGE VECTORS
F158 F29C             (        mon09.asm):00166                 FDB     CHGVEC
F15A 4500             (        mon09.asm):00167                 FCB     'E',0                             ;SUBSTITUTE MEMORY
F15C F222             (        mon09.asm):00168                 FDB     SUBMEM
F15E 4C00             (        mon09.asm):00169                 FCB     'L',0                             ;DOWNLOAD
F160 F47F             (        mon09.asm):00170                 FDB     LOAD
F162 4700             (        mon09.asm):00171                 FCB     'G',0                             ;GO
F164 F39F             (        mon09.asm):00172                 FDB     GOEXEC
F166 464D             (        mon09.asm):00173                 FCB     'F','M'                           ;FILL MEMORY
F168 F18F             (        mon09.asm):00174                 FDB     FILMEM
F16A 5252             (        mon09.asm):00175                 FCB     'R','R'                           ;REPEATING READ
F16C F3C4             (        mon09.asm):00176                 FDB     RDLOOP
F16E 5257             (        mon09.asm):00177                 FCB     'R','W'                           ;REPEATING WRITE
F170 F3D4             (        mon09.asm):00178                 FDB     WRLOOP
F172 5700             (        mon09.asm):00179                 FCB     'W',0                             ;WRITE MEMORY
F174 F212             (        mon09.asm):00180                 FDB     WRIMEM
F176 4D4D             (        mon09.asm):00181                 FCB     'M','M'                           ;MOVE MEMORY
F178 F1A7             (        mon09.asm):00182                 FDB     MOVMEM
F17A 5852             (        mon09.asm):00183                 FCB     'X','R'                           ;REPEATING 16 BIT READ
F17C F3F3             (        mon09.asm):00184                 FDB     XRLOOP
F17E 5857             (        mon09.asm):00185                 FCB     'X','W'                           ;REPEATING 16 BIT WRITE
F180 F403             (        mon09.asm):00186                 FDB     XWLOOP
F182 2B00             (        mon09.asm):00187                 FCB     '+',0                             ;HEX ADDITION
F184 F41E             (        mon09.asm):00188                 FDB     HEXADD
F186 2D00             (        mon09.asm):00189                 FCB     '-',0                             ;HEX SUBTRACTION
F188 F42F             (        mon09.asm):00190                 FDB     HEXSUB
F18A 3F00             (        mon09.asm):00191                 FCB     '?',0                             ;HELP COMMAND
F18C F451             (        mon09.asm):00192                 FDB     HELP
F18E 00               (        mon09.asm):00193                 FCB     0                                 ;MARK END OF TABLE
                      (        mon09.asm):00194         ;*
                      (        mon09.asm):00195         ;* 'F' - FILL MEMORY
                      (        mon09.asm):00196         ;*
F18F                  (        mon09.asm):00197         FILMEM
F18F 1703DE           (        mon09.asm):00198                 LBSR    GETRNG                            ;GET ADDRESSES
F192 FDBF18           (        mon09.asm):00199                 STD     TEMP                              ;SAVE IT
F195 1704B6           (        mon09.asm):00200                 LBSR    SPACE                             ;SPACE OVER
F198 170439           (        mon09.asm):00201                 LBSR    GETBYT                            ;GET DATA BYTE
F19B 26A1             (        mon09.asm):00202                 BNE     ERROR                             ;INVALID
F19D                  (        mon09.asm):00203         FILL1
F19D A780             (        mon09.asm):00204                 STA     ,X+                               ;WRITE IT
F19F BCBF18           (        mon09.asm):00205                 CMPX    TEMP                              ;ARE WE THERE
F1A2 23F9             (        mon09.asm):00206                 BLS     FILL1                             ;NO, KEEP GOING
F1A4 1604AD           (        mon09.asm):00207                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00208         ;*
                      (        mon09.asm):00209         ;* 'MM' - MOVE MEMORY
                      (        mon09.asm):00210         ;*
F1A7                  (        mon09.asm):00211         MOVMEM
F1A7 1703C6           (        mon09.asm):00212                 LBSR    GETRNG                            ;GET A RANGE
F1AA FDBF18           (        mon09.asm):00213                 STD     TEMP                              ;SAVE LAST VALUE
F1AD 17049E           (        mon09.asm):00214                 LBSR    SPACE                             ;SEPERATOR
F1B0 1703DA           (        mon09.asm):00215                 LBSR    GETADR                            ;GET DEST ADDRESS
F1B3 1F02             (        mon09.asm):00216                 TFR     D,Y                               ;SET IT UP
F1B5                  (        mon09.asm):00217         MOVM1
F1B5 A680             (        mon09.asm):00218                 LDA     ,X+                               ;GET SOURCE BYTE
F1B7 A7A0             (        mon09.asm):00219                 STA     ,Y+                               ;SAVE IN DEST
F1B9 BCBF18           (        mon09.asm):00220                 CMPX    TEMP                              ;SAVE IT
F1BC 23F7             (        mon09.asm):00221                 BLS     MOVM1                             ;KEEP MOVEING
F1BE 160493           (        mon09.asm):00222                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00223         ;*
                      (        mon09.asm):00224         ;* 'DM' - DISPLAY MEMORY
                      (        mon09.asm):00225         ;*
F1C1                  (        mon09.asm):00226         MEMORY
F1C1 1703AC           (        mon09.asm):00227                 LBSR    GETRNG                            ;GET ADDRESS
F1C4 FDBF18           (        mon09.asm):00228                 STD     TEMP                              ;SAVE
F1C7                  (        mon09.asm):00229         MEM1
F1C7 17048A           (        mon09.asm):00230                 LBSR    LFCR                              ;NEW LINE
F1CA 1704A5           (        mon09.asm):00231                 LBSR    CHKCHR                            ;CHECK FOR CHAR
F1CD 1027FF2F         (        mon09.asm):00232                 LBEQ    MAIN                              ;ESCAPE, QUIT
F1D1 1F10             (        mon09.asm):00233                 TFR     X,D                               ;GET ADDRESS
F1D3 3406             (        mon09.asm):00234                 PSHS    A,B                               ;SAVE FOR LATER
F1D5 170437           (        mon09.asm):00235                 LBSR    WRDOUT                            ;DISPLAY
F1D8 C610             (        mon09.asm):00236                 LDB     #16                               ;DISPLAY 16 TO A LINE
F1DA                  (        mon09.asm):00237         MEM2
F1DA 170471           (        mon09.asm):00238                 LBSR    SPACE                             ;OUTPUT A SPACE
F1DD C503             (        mon09.asm):00239                 BITB    #3                                ;ON A BOUNDARY?
F1DF 2603             (        mon09.asm):00240                 BNE     MEM3                              ;NO, SPACE
F1E1 17046A           (        mon09.asm):00241                 LBSR    SPACE                             ;EXTRA SPACE
F1E4                  (        mon09.asm):00242         MEM3
F1E4 A680             (        mon09.asm):00243                 LDA     ,X+                               ;GET BYTE
F1E6 17042A           (        mon09.asm):00244                 LBSR    HEXOUT                            ;DISPLAY
F1E9 5A               (        mon09.asm):00245                 DECB                                      ;REDUCE COUNT
F1EA 26EE             (        mon09.asm):00246                 BNE     MEM2                              ;CONTINUE
F1EC C604             (        mon09.asm):00247                 LDB     #4                                ;FOUR SPACE
F1EE                  (        mon09.asm):00248         MEM4
F1EE 17045D           (        mon09.asm):00249                 LBSR    SPACE                             ;DISPLAY A SPACE
F1F1 5A               (        mon09.asm):00250                 DECB                                      ;REDUCE COUNT
F1F2 26FA             (        mon09.asm):00251                 BNE     MEM4                              ; CONTINUE
F1F4 3510             (        mon09.asm):00252                 PULS    X                                 ;RESTORE X
F1F6 C610             (        mon09.asm):00253                 LDB     #16                               ;COUNT OF 16
F1F8                  (        mon09.asm):00254         MEM5
F1F8 A680             (        mon09.asm):00255                 LDA     ,X+                               ;GET CHAR
F1FA 8120             (        mon09.asm):00256                 CMPA    #' '                              ; <SPACE
F1FC 2504             (        mon09.asm):00257                 BLO     MEM6                              ; CONVERT TO DOT
F1FE 817F             (        mon09.asm):00258                 CMPA    #$7F                              ; PRINTABLE?
F200 2502             (        mon09.asm):00259                 BLO     MEM7                              ; OK TO DISPLAY
F202                  (        mon09.asm):00260         MEM6
F202 862E             (        mon09.asm):00261                 LDA     #'.'                              ;CHANGE TO DOT
F204                  (        mon09.asm):00262         MEM7
F204 170464           (        mon09.asm):00263                 LBSR    PUTCHR                            ;OUTPUT
F207 5A               (        mon09.asm):00264                 DECB                                      ;REDUCE COUNT
F208 26EE             (        mon09.asm):00265                 BNE     MEM5                              ; DISPLAY THEM ALL
F20A BCBF18           (        mon09.asm):00266                 CMPX    TEMP                              ; PAST END?
F20D 23B8             (        mon09.asm):00267                 BLS     MEM1                              ; NO, KEEP GOING
F20F 160442           (        mon09.asm):00268                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00269         ;*
                      (        mon09.asm):00270         ;* 'W' - WRITE TO MEMORY
                      (        mon09.asm):00271         ;*
F212                  (        mon09.asm):00272         WRIMEM
F212 170378           (        mon09.asm):00273                 LBSR    GETADR                            ;GET ADDRESS
F215 1F01             (        mon09.asm):00274                 TFR     D,X                               ;SET IT UP
F217 170434           (        mon09.asm):00275                 LBSR    SPACE                             ; STEP OVER
F21A 1703B7           (        mon09.asm):00276                 LBSR    GETBYT                            ;GET BYTE
F21D A784             (        mon09.asm):00277                 STA     ,X                                ;WRITE TO MEMORY
F21F 160432           (        mon09.asm):00278                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00279         ;*
                      (        mon09.asm):00280         ;* 'E' - EDIT MEMORY
                      (        mon09.asm):00281         ;*
F222                  (        mon09.asm):00282         SUBMEM
F222 170368           (        mon09.asm):00283                 LBSR    GETADR                            ;GET ADDRESS
F225 1F01             (        mon09.asm):00284                 TFR     D,X                               ;COPY
F227                  (        mon09.asm):00285         SUBM1
F227 17042A           (        mon09.asm):00286                 LBSR    LFCR                              ; NEW LINE
F22A 1F10             (        mon09.asm):00287                 TFR     X,D                               ;GET ADDRESS
F22C 1703E0           (        mon09.asm):00288                 LBSR    WRDOUT                            ; OUTPUT
F22F C608             (        mon09.asm):00289                 LDB     #8                                ;NEW COUNT
F231                  (        mon09.asm):00290         SUBM2
F231 17041A           (        mon09.asm):00291                 LBSR    SPACE                             ; SEPERATOR
F234 A684             (        mon09.asm):00292                 LDA     ,X                                ;GET BYTE
F236 1703DA           (        mon09.asm):00293                 LBSR    HEXOUT                            ; DISPLAY
F239 862D             (        mon09.asm):00294                 LDA     #'-'                              ; PROMPT
F23B 17042D           (        mon09.asm):00295                 LBSR    PUTCHR                            ; OUTPUT
F23E 170393           (        mon09.asm):00296                 LBSR    GETBYT                            ; GET A BYTE
F241 2609             (        mon09.asm):00297                 BNE     SUBM4                             ; INVALID
F243 A784             (        mon09.asm):00298                 STA     ,X                                ;RESAVE
F245                  (        mon09.asm):00299         SUBM3
F245 3001             (        mon09.asm):00300                 LEAX    1,X                               ;ADVANCE
F247 5A               (        mon09.asm):00301                 DECB                                      ;REDUCE COUNT
F248 26E7             (        mon09.asm):00302                 BNE     SUBM2                             ;MORE, CONTINUE
F24A 20DB             (        mon09.asm):00303                 BRA     SUBM1                             ;NEW LINE
F24C                  (        mon09.asm):00304         SUBM4
F24C 810D             (        mon09.asm):00305                 CMPA    #$0D                              ;CR?
F24E 10270402         (        mon09.asm):00306                 LBEQ    LFCR                              ;IF SO, QUIT
F252 8120             (        mon09.asm):00307                 CMPA    #' '                              ;SPACE?
F254 2605             (        mon09.asm):00308                 BNE     SUBM5                             ;NO
F256 1703F5           (        mon09.asm):00309                 LBSR    SPACE                             ;FILL FOR TWO DIGITS
F259 20EA             (        mon09.asm):00310                 BRA     SUBM3                             ;ADVANCE
F25B                  (        mon09.asm):00311         SUBM5
F25B 8108             (        mon09.asm):00312                 CMPA    #$08                              ; BACKSPACE?
F25D 1026FEDD         (        mon09.asm):00313                 LBNE    ERROR                             ; INVALID
F261 301F             (        mon09.asm):00314                 LEAX    -1,X                              ; BACKUP
F263 20C2             (        mon09.asm):00315                 BRA     SUBM1                             ; NEW LINE
                      (        mon09.asm):00316         ;*
                      (        mon09.asm):00317         ;* 'DV' - DISPLAY VECTORS
                      (        mon09.asm):00318         ;*
F265                  (        mon09.asm):00319         DISVEC
F265 8EF27B           (        mon09.asm):00320                 LDX     #VECTXT                           ; POINT TO VECTOR TEXT
F268 108EBF00         (        mon09.asm):00321                 LDY     #SWIADR                           ; POINT TO FIRST VECTOR
F26C                  (        mon09.asm):00322         DISV1
F26C 1703C4           (        mon09.asm):00323                 LBSR    WRLIN                             ; OUTPUT A MESSAGE
F26F ECA1             (        mon09.asm):00324                 LDD     ,Y++                              ; GET A VECTOR
F271 17039B           (        mon09.asm):00325                 LBSR    WRDOUT                            ; OUTPUT VECTOR ADDRESS
F274 A684             (        mon09.asm):00326                 LDA     ,X                                ;MORE TEXT?
F276 26F4             (        mon09.asm):00327                 BNE     DISV1                             ; AND CONTINUE
F278 1603D9           (        mon09.asm):00328                 LBRA    LFCR                              ; NEW LINE
F27B                  (        mon09.asm):00329         VECTXT
F27B 5357493D00       (        mon09.asm):00330                 FCN     'SWI='
F280 20535749323D00   (        mon09.asm):00331                 FCN     ' SWI2='
F287 20535749333D00   (        mon09.asm):00332                 FCN     ' SWI3='
F28E 204952513D00     (        mon09.asm):00333                 FCN     ' IRQ='
F294 20464952513D00   (        mon09.asm):00334                 FCN     ' FIRQ='
F29B 00               (        mon09.asm):00335                 FCB     0                                 ; END OF TABLE
                      (        mon09.asm):00336         ;*
                      (        mon09.asm):00337         ;* 'CV' - CHANGE VECTOR
                      (        mon09.asm):00338         ;*
F29C                  (        mon09.asm):00339         CHGVEC
F29C 1703A1           (        mon09.asm):00340                 LBSR    GETECH                            ;GET CHAR & ECHO
F29F 8153             (        mon09.asm):00341                 CMPA    #'S'                              ;SWI?
F2A1 2604             (        mon09.asm):00342                 BNE     CHGV1                             ;NO
F2A3 8631             (        mon09.asm):00343                 LDA     #'1'                              ;SAME AS '1'
F2A5 200E             (        mon09.asm):00344                 BRA     CHGV3                             ;CONTINUE
F2A7                  (        mon09.asm):00345         CHGV1
F2A7 8149             (        mon09.asm):00346                 CMPA    #'I'                              ;IRQ?
F2A9 2604             (        mon09.asm):00347                 BNE     CHGV2                             ;NO, ITS OK
F2AB 8634             (        mon09.asm):00348                 LDA     #'4'                              ;CONVERT
F2AD 2006             (        mon09.asm):00349                 BRA     CHGV3                             ;AND CONTINUE
F2AF                  (        mon09.asm):00350         CHGV2
F2AF 8146             (        mon09.asm):00351                 CMPA    #'F'                              ;FIRQ?
F2B1 2602             (        mon09.asm):00352                 BNE     CHGV3                             ;NO
F2B3 8635             (        mon09.asm):00353                 LDA     #'5'                              ;CONVERT
F2B5                  (        mon09.asm):00354         CHGV3
F2B5 8031             (        mon09.asm):00355                 SUBA    #'1'                              ;TEST IT
F2B7 8104             (        mon09.asm):00356                 CMPA    #4                                ;CHECK RANGE
F2B9 1022FE81         (        mon09.asm):00357                 LBHI    ERROR                             ; INVALID
F2BD 8EBF00           (        mon09.asm):00358                 LDX     #SWIADR                           ;POINT TO IT
F2C0                  (        mon09.asm):00359         CHGV4
F2C0 48               (        mon09.asm):00360                 LSLA                                      ;X2 FOR 2 BYTE ENTRIES
F2C1 3086             (        mon09.asm):00361                 LEAX    A,X     ADVANCE TO VECTOR
F2C3 170388           (        mon09.asm):00362                 LBSR    SPACE                             ; SEPERATOR
F2C6 1702C4           (        mon09.asm):00363                 LBSR    GETADR                            ;GET NEW VALUE
F2C9 ED84             (        mon09.asm):00364                 STD     ,X                                ; WRITE NEW VECTOR
F2CB 160386           (        mon09.asm):00365                 LBRA    LFCR                              ; NEW LINE & EXIT
                      (        mon09.asm):00366         ;*
                      (        mon09.asm):00367         ;* 'DR' - DISPLAY REGISTERS
                      (        mon09.asm):00368         ;*
F2CE                  (        mon09.asm):00369         DISREG
F2CE 8EF318           (        mon09.asm):00370                 LDX     #REGTXT                           ;POINT TO TEXT
F2D1 108EBF0A         (        mon09.asm):00371                 LDY     #SAVCC                            ;POINT TO VALUE
F2D5 8D31             (        mon09.asm):00372                 BSR     RSUB1                             ;'CC='
F2D7 170359           (        mon09.asm):00373                 LBSR    WRLIN                             ;' ['
F2DA CEF342           (        mon09.asm):00374                 LDU     #CCBITS                           ;POINT TO BIT TABLE
F2DD E63F             (        mon09.asm):00375                 LDB     -1,Y                              ;GET BITS BACK
F2DF 3420             (        mon09.asm):00376                 PSHS    Y                                 ;SAVE POINTER
F2E1 108E0008         (        mon09.asm):00377                 LDY     #8                                ;EIGHT BITS IN BYTE
F2E5                  (        mon09.asm):00378         REGB1
F2E5 A6C0             (        mon09.asm):00379                 LDA     ,U+                               ; GET BIT IDENTIFIER
F2E7 58               (        mon09.asm):00380                 ASLB                                      ;IS IT SET?
F2E8 2502             (        mon09.asm):00381                 BCS     RBITS                             ;YES, DISPLAY IT
F2EA 862D             (        mon09.asm):00382                 LDA     #'-'                              ;NO, DISPLAY DASH
F2EC                  (        mon09.asm):00383         RBITS
F2EC 17037C           (        mon09.asm):00384                 LBSR    PUTCHR                            ; OUTPUT A CHARACTER
F2EF 313F             (        mon09.asm):00385                 LEAY    -1,Y                              ; REDUCE COUNT
F2F1 26F2             (        mon09.asm):00386                 BNE     REGB1                             ; MORE TO GO
F2F3 3520             (        mon09.asm):00387                 PULS    Y                                 ; RESTORE Y
F2F5 8D11             (        mon09.asm):00388                 BSR     RSUB1                             ;'] A='
F2F7 8D0F             (        mon09.asm):00389                 BSR     RSUB1                             ;' B='
F2F9 8D0D             (        mon09.asm):00390                 BSR     RSUB1                             ;' DP='
F2FB 8D13             (        mon09.asm):00391                 BSR     RSUB2                             ;' X='
F2FD 8D11             (        mon09.asm):00392                 BSR     RSUB2                             ;' Y='
F2FF 8D0F             (        mon09.asm):00393                 BSR     RSUB2                             ;' U='
F301 8D0D             (        mon09.asm):00394                 BSR     RSUB2                             ;' PC='
F303 8D0B             (        mon09.asm):00395                 BSR     RSUB2                             ;' S='
F305 16034C           (        mon09.asm):00396                 LBRA    LFCR                              ;QUIT
                      (        mon09.asm):00397         ;* DISPLAY 8 BIT REGISTER VALUE
F308                  (        mon09.asm):00398         RSUB1
F308 170328           (        mon09.asm):00399                 LBSR    WRLIN                             ;OUTPUT BYTE VALUE
F30B A6A0             (        mon09.asm):00400                 LDA     ,Y+                               ; GET REGISTER VALUE
F30D 160303           (        mon09.asm):00401                 LBRA    HEXOUT                            ;OUTPUT IN HEX
                      (        mon09.asm):00402         ;* DISPLAY 16 BIT REGISTER VALUE
F310                  (        mon09.asm):00403         RSUB2
F310 170320           (        mon09.asm):00404                 LBSR    WRLIN                             ; OUTPUT WORD VALUE
F313 ECA1             (        mon09.asm):00405                 LDD     ,Y++                              ; GET REGISTER VALUE
F315 1602F7           (        mon09.asm):00406                 LBRA    WRDOUT                            ; OUTPUT IN HEX
                      (        mon09.asm):00407         ;* TABLE OF TEXT FOR REGISTER DISPLAY
F318                  (        mon09.asm):00408         REGTXT
F318 43433D00         (        mon09.asm):00409                 FCN     'CC='
F31C 205B00           (        mon09.asm):00410                 FCN     ' ['
F31F 5D20413D00       (        mon09.asm):00411                 FCN     '] A='
F324 20423D00         (        mon09.asm):00412                 FCN     ' B='
F328 2044503D00       (        mon09.asm):00413                 FCN     ' DP='
F32D 20583D00         (        mon09.asm):00414                 FCN     ' X='
F331 20593D00         (        mon09.asm):00415                 FCN     ' Y='
F335 20553D00         (        mon09.asm):00416                 FCN     ' U='
F339 2050433D00       (        mon09.asm):00417                 FCN     ' PC='
F33E 20533D00         (        mon09.asm):00418                 FCN     ' S='
                      (        mon09.asm):00419         ;* TABLE OF CONDITION CODE BIT MEANINGS
F342                  (        mon09.asm):00420         CCBITS
F342 454648494E5A5643 (        mon09.asm):00421                 FCC     'EFHINZVC'
                      (        mon09.asm):00422         ;*
                      (        mon09.asm):00423         ;* 'CR' - CHANGE REGISTER
                      (        mon09.asm):00424         ;*
F34A                  (        mon09.asm):00425         CHGREG
F34A 1702F3           (        mon09.asm):00426                 LBSR    GETECH      GET OPERAND
F34D 8120             (        mon09.asm):00427                 CMPA    #' '        A+B?
F34F 2727             (        mon09.asm):00428                 BEQ     CHG4        YES
F351 8EF395           (        mon09.asm):00429                 LDX     #CHGTAB     POINT TO TABLE
F354 5F               (        mon09.asm):00430                 CLRB    ZERO INDICATOR
F355                  (        mon09.asm):00431         CHG1
F355 A184             (        mon09.asm):00432                 CMPA    ,X      IS THIS IT?
F357 2708             (        mon09.asm):00433                 BEQ     CHG2        YES
F359 5C               (        mon09.asm):00434                 INCB    ADVANCE COUNT
F35A 6D80             (        mon09.asm):00435                 TST     ,X+     END OF TABLE
F35C 26F7             (        mon09.asm):00436                 BNE     CHG1        NO, KEEP TRYING
F35E 16FDDD           (        mon09.asm):00437                 LBRA    ERROR       INDICATE ERROR
F361                  (        mon09.asm):00438         CHG2
F361 1702EA           (        mon09.asm):00439                 LBSR    SPACE       OUTPUT SPACE
F364 8EBF0A           (        mon09.asm):00440                 LDX     #SAVCC      POINT TO START OF REGISTERS
F367 C104             (        mon09.asm):00441                 CMPB    #4      16 BIT?
F369 241B             (        mon09.asm):00442                 BHS     R16     YES
F36B 3085             (        mon09.asm):00443                 LEAX    B,X     OFFSET TO ADDRESS
F36D 170264           (        mon09.asm):00444                 LBSR    GETBYT      GET NEW VALUE
F370 1026FDCA         (        mon09.asm):00445                 LBNE    ERROR       INVALID
F374 A784             (        mon09.asm):00446                 STA     ,X      SAVE IN REGISTER
F376 201A             (        mon09.asm):00447                 BRA     CHG3        AND QUIT
F378                  (        mon09.asm):00448         CHG4
F378 1702AE           (        mon09.asm):00449                 LBSR    WRMSG       OUTPUT MESSAGE
F37B 5B41425D2000     (        mon09.asm):00450                 FCN     '[AB] '
F381 8EBF0B           (        mon09.asm):00451                 LDX     #SAVA       POINT TO 'D'
F384 2007             (        mon09.asm):00452                 BRA     R17     MAKE LIKE 16 BIT REG
F386                  (        mon09.asm):00453         R16
F386 3004             (        mon09.asm):00454                 LEAX    4,X     OFFSET TO 16 BIT REGISTERS
F388 C004             (        mon09.asm):00455                 SUBB    #4      CONVERT TO ZERO ORIGIN
F38A 58               (        mon09.asm):00456                 LSLB    DOUBLE FOR WORD VALUES
F38B 3085             (        mon09.asm):00457                 LEAX    B,X     MOVE TO CORRECT OFFSET
F38D                  (        mon09.asm):00458         R17
F38D 1701FD           (        mon09.asm):00459                 LBSR    GETADR      GET WORD VALUE
F390 ED84             (        mon09.asm):00460                 STD     ,X      SET REGISTER VALUE
F392                  (        mon09.asm):00461         CHG3
F392 1602BF           (        mon09.asm):00462                 LBRA    LFCR        QUIT
                      (        mon09.asm):00463         ;* TABLE OF REGISTER NAMES
F395                  (        mon09.asm):00464         CHGTAB
F395 4341424458595550 (        mon09.asm):00465                 FCN     'CABDXYUPS'
     5300
                      (        mon09.asm):00466         ;*
                      (        mon09.asm):00467         ;* 'G' - GO (EXECUTE)
                      (        mon09.asm):00468         ;*
F39F                  (        mon09.asm):00469         GOEXEC
F39F 1701B6           (        mon09.asm):00470                 LBSR    GETPC       GET ADDRESS
F3A2 1702AF           (        mon09.asm):00471                 LBSR    LFCR        NEW LINE
F3A5 10FEBF16         (        mon09.asm):00472                 LDS     SAVS        RESTORE STACK POINTER
F3A9 B6BF0A           (        mon09.asm):00473                 LDA     SAVCC       GET SAVED CC
F3AC F6BF0D           (        mon09.asm):00474                 LDB     SAVDP       GET SAVED DPR
F3AF 3406             (        mon09.asm):00475                 PSHS    A,B     SAVE ON STACK FOR LAST RESTORE
F3B1 FCBF0B           (        mon09.asm):00476                 LDD     SAVA        RESTORE A, B REGISTERS
F3B4 BEBF0E           (        mon09.asm):00477                 LDX     SAVX        RESTORE X REGISTER
F3B7 10BEBF10         (        mon09.asm):00478                 LDY     SAVY        RESTORE Y REGISTER
F3BB FEBF12           (        mon09.asm):00479                 LDU     SAVU        RESTORE U REGISTER
F3BE 3509             (        mon09.asm):00480                 PULS    CC,DP       RESTORE CC + DP
F3C0 6E9FBF14         (        mon09.asm):00481                 JMP     [SAVPC]     EXECUTE USER PGM
                      (        mon09.asm):00482         ;*
                      (        mon09.asm):00483         ;* 'RR' - REPEATING READ
                      (        mon09.asm):00484         ;*
F3C4                  (        mon09.asm):00485         RDLOOP:
F3C4 1701C6           (        mon09.asm):00486                 LBSR    GETADR                            ;GET ADDRESS
F3C7 1F01             (        mon09.asm):00487                 TFR     D,X                               ;SET UP 'X'
F3C9 170288           (        mon09.asm):00488                 LBSR    LFCR                              ;NEW LINE
F3CC                  (        mon09.asm):00489         RDLP1:
F3CC A684             (        mon09.asm):00490                 LDA     ,X                                ;READ LOCATION
F3CE 1702A1           (        mon09.asm):00491                 LBSR    CHKCHR                            ;ABORT?
F3D1 26F9             (        mon09.asm):00492                 BNE     RDLP1                             ;NO, ITS OK
F3D3 39               (        mon09.asm):00493                 RTS
                      (        mon09.asm):00494         ;*
                      (        mon09.asm):00495         ;* 'RW' - REPEATING WRITE
                      (        mon09.asm):00496         ;*
F3D4                  (        mon09.asm):00497         WRLOOP:
F3D4 1701B6           (        mon09.asm):00498                 LBSR    GETADR                            ;GET ADDRESS
F3D7 1F01             (        mon09.asm):00499                 TFR     D,X                               ;SET UP 'X'
F3D9 170272           (        mon09.asm):00500                 LBSR    SPACE                             ;SPACE OVER
F3DC 1701F5           (        mon09.asm):00501                 LBSR    GETBYT                            ;GET DATA
F3DF 1026FD5B         (        mon09.asm):00502                 LBNE    ERROR                             ;INVALID
F3E3 3402             (        mon09.asm):00503                 PSHS    A                                 ;SAVE ACCA
F3E5 17026C           (        mon09.asm):00504                 LBSR    LFCR                              ;NEW LINE
F3E8                  (        mon09.asm):00505         WRLP1:
F3E8 A6E4             (        mon09.asm):00506                 LDA     ,S                                ;GET CHAR
F3EA A784             (        mon09.asm):00507                 STA     ,X                                ;WRITE IT OUT
F3EC 170283           (        mon09.asm):00508                 LBSR    CHKCHR                            ;ABORT COMMAND?
F3EF 26F7             (        mon09.asm):00509                 BNE     WRLP1                             ;CONTINUE
F3F1 3582             (        mon09.asm):00510                 PULS    A,PC                              ;GO HOME
                      (        mon09.asm):00511         ;*
                      (        mon09.asm):00512         ;* 'XR' - REPEATING 16 BIT READ
                      (        mon09.asm):00513         ;*
F3F3                  (        mon09.asm):00514         XRLOOP
F3F3 170197           (        mon09.asm):00515                 LBSR    GETADR      GET ADDRESS
F3F6 1F01             (        mon09.asm):00516                 TFR     D,X     SET UP 'X'
F3F8 170259           (        mon09.asm):00517                 LBSR    LFCR        NEW LINE
F3FB                  (        mon09.asm):00518         XRLP1
F3FB EC84             (        mon09.asm):00519                 LDD     ,X      READ LOCATION
F3FD 170272           (        mon09.asm):00520                 LBSR    CHKCHR      ABORT?
F400 26F9             (        mon09.asm):00521                 BNE     XRLP1       NO, ITS OK
F402 39               (        mon09.asm):00522                 RTS
                      (        mon09.asm):00523         ;*
                      (        mon09.asm):00524         ;* 'XW' - REPEATING 16 BITWRITE
                      (        mon09.asm):00525         ;*
F403                  (        mon09.asm):00526         XWLOOP
F403 170187           (        mon09.asm):00527                 LBSR    GETADR      GET ADDRESS
F406 1F01             (        mon09.asm):00528                 TFR     D,X     SET UP 'X'
F408 170243           (        mon09.asm):00529                 LBSR    SPACE       SPACE OVER
F40B 17017F           (        mon09.asm):00530                 LBSR    GETADR      GET DATA
F40E 3406             (        mon09.asm):00531                 PSHS    A,B     SAVE ACCA
F410 170241           (        mon09.asm):00532                 LBSR    LFCR        NEW LINE
F413                  (        mon09.asm):00533         XWLP1
F413 ECE4             (        mon09.asm):00534                 LDD     ,S      GET CHAR
F415 ED84             (        mon09.asm):00535                 STD     ,X      WRITE IT OUT
F417 170258           (        mon09.asm):00536                 LBSR    CHKCHR      ABORT COMMAND?
F41A 26F7             (        mon09.asm):00537                 BNE     XWLP1       CONTINUE
F41C 3586             (        mon09.asm):00538                 PULS    A,B,PC      GO HOME
                      (        mon09.asm):00539         ;*
                      (        mon09.asm):00540         ;* '+' - HEXIDECIMAL ADDITION
                      (        mon09.asm):00541         ;*
F41E                  (        mon09.asm):00542         HEXADD
F41E 17016C           (        mon09.asm):00543                 LBSR    GETADR      GET FIRST VALUE
F421 3406             (        mon09.asm):00544                 PSHS    A,B     SAVE IT
F423 862B             (        mon09.asm):00545                 LDA     #'+'        PLUS SIGN
F425 170243           (        mon09.asm):00546                 LBSR    PUTCHR      DISPLAY
F428 170162           (        mon09.asm):00547                 LBSR    GETADR      GET SECOND VALUE
F42B E3E4             (        mon09.asm):00548                 ADDD    ,S      PERFORM ADDITION
F42D 2013             (        mon09.asm):00549                 BRA     HEXSHO      DISPLAY IT
                      (        mon09.asm):00550         ;*
                      (        mon09.asm):00551         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (        mon09.asm):00552         ;*
F42F                  (        mon09.asm):00553         HEXSUB
F42F 17015B           (        mon09.asm):00554                 LBSR    GETADR      GET FIRST
F432 3406             (        mon09.asm):00555                 PSHS    A,B     SAVE IT
F434 862D             (        mon09.asm):00556                 LDA     #'-'        MINUS SIGN
F436 170232           (        mon09.asm):00557                 LBSR    PUTCHR      DISPLAY
F439 170151           (        mon09.asm):00558                 LBSR    GETADR      GET SECOND ADDRESS
F43C 3406             (        mon09.asm):00559                 PSHS    A,B     SAVE IT
F43E EC62             (        mon09.asm):00560                 LDD     2,S     GET FIRST VALUE
F440 A3E1             (        mon09.asm):00561                 SUBD    ,S++        PERFORM SUBTRACTION
F442                  (        mon09.asm):00562         HEXSHO
F442 EDE4             (        mon09.asm):00563                 STD     ,S      SAVE RESULT
F444 863D             (        mon09.asm):00564                 LDA     #'='        =ALS SIGN
F446 170222           (        mon09.asm):00565                 LBSR    PUTCHR      DISPLAY
F449 3506             (        mon09.asm):00566                 PULS    A,B     RESTORE RESULT
F44B 1701C1           (        mon09.asm):00567                 LBSR    WRDOUT      OUTPUT
F44E 160203           (        mon09.asm):00568                 LBRA    LFCR        NEW LINE & RETURN
                      (        mon09.asm):00569         ;*
                      (        mon09.asm):00570         ;* '?' - HELP COMMAND
                      (        mon09.asm):00571         ;*
F451                  (        mon09.asm):00572         HELP
F451 8EF7A0           (        mon09.asm):00573                 LDX     #HTEXT      POINT TO HELP TEXT
F454                  (        mon09.asm):00574         HLP1
F454 C619             (        mon09.asm):00575                 LDB     #25     COLUMN COUNTER
F456                  (        mon09.asm):00576         HLP2
F456 A680             (        mon09.asm):00577                 LDA     ,X+     GET CHAR FROM TEXT
F458 2718             (        mon09.asm):00578                 BEQ     HLP4        EXIT THIS LINE
F45A 817C             (        mon09.asm):00579                 CMPA    #'|'        SEPERATOR?
F45C 2706             (        mon09.asm):00580                 BEQ     HLP3        YES, EXIT
F45E 17020A           (        mon09.asm):00581                 LBSR    PUTCHR      OUTPUT
F461 5A               (        mon09.asm):00582                 DECB    BACKUP
F462 20F2             (        mon09.asm):00583                 BRA     HLP2        NEXT
F464                  (        mon09.asm):00584         HLP3
F464 1701E7           (        mon09.asm):00585                 LBSR    SPACE       OUTPUT SPACE
F467 5A               (        mon09.asm):00586                 DECB    REDUCE COUNT
F468 26FA             (        mon09.asm):00587                 BNE     HLP3        KEEP GOING
F46A 1701BC           (        mon09.asm):00588                 LBSR    WRMSG       OUTPUT MESSAGE
F46D 2D2000           (        mon09.asm):00589                 FCN     '- '        SEPERATOR
F470 20E4             (        mon09.asm):00590                 BRA     HLP2        AND CONTINUE
F472                  (        mon09.asm):00591         HLP4
F472 1701DF           (        mon09.asm):00592                 LBSR    LFCR        NEW LINE
F475 1701FA           (        mon09.asm):00593                 LBSR    CHKCHR      TEST FOR CHARACTER ENTERED
F478 2704             (        mon09.asm):00594                 BEQ     HLP5        IF SO, EXIT
F47A A684             (        mon09.asm):00595                 LDA     ,X      IS THIS THE END?
F47C 2AD6             (        mon09.asm):00596                 BPL     HLP1        NO, KEEP GOING
F47E                  (        mon09.asm):00597         HLP5
F47E 39               (        mon09.asm):00598                 RTS
                      (        mon09.asm):00599         ;*
                      (        mon09.asm):00600         ;* 'DL' - DOWNLOAD
                      (        mon09.asm):00601         ;*
F47F                  (        mon09.asm):00602         LOAD
F47F 1701D2           (        mon09.asm):00603                 LBSR    LFCR        NEW LINE
F482                  (        mon09.asm):00604         DLO1
F482 8D0E             (        mon09.asm):00605                 BSR     DLOAD       DOWNLOAD RECORD
F484 2409             (        mon09.asm):00606                 BCC     DLO2        END
F486 A6E4             (        mon09.asm):00607                 LDA     ,S      GET OLD I/O CONFIG
F488 862E             (        mon09.asm):00608                 LDA     #'.'        GET DOT
F48A 1701DE           (        mon09.asm):00609                 LBSR    PUTCHR      OUTPUT
F48D 20F3             (        mon09.asm):00610                 BRA     DLO1        CONTINUE
F48F                  (        mon09.asm):00611         DLO2
F48F 1601C2           (        mon09.asm):00612                 LBRA    LFCR        New line & return
                      (        mon09.asm):00613         ;* Download a record in either MOTOROLA or INTEL hex format
F492                  (        mon09.asm):00614         DLOAD
F492 1701CB           (        mon09.asm):00615                 LBSR    GETCHR      Get a character
F495 813A             (        mon09.asm):00616                 CMPA    #':'        Start of INTEL record?
F497 276B             (        mon09.asm):00617                 BEQ     DLINT       Yes, download INTEL
F499 8153             (        mon09.asm):00618                 CMPA    #'S'        Start of MOTOROLA record?
F49B 26F5             (        mon09.asm):00619                 BNE     DLOAD       No, keep looking
                      (        mon09.asm):00620         ;* Download a record in MOTOROLA hex format
F49D                  (        mon09.asm):00621         DLMOT
F49D 1701C0           (        mon09.asm):00622                 LBSR    GETCHR      GET NEXT CHAR
F4A0 8130             (        mon09.asm):00623                 CMPA    #'0'        HEADER RECORD?
F4A2 27EE             (        mon09.asm):00624                 BEQ     DLOAD       SKIP IT
F4A4 8139             (        mon09.asm):00625                 CMPA    #'9'        END OF FILE?
F4A6 275B             (        mon09.asm):00626                 BEQ     DLEOF       END OF FILE
F4A8 8131             (        mon09.asm):00627                 CMPA    #'1'        DATA RECORD?
F4AA 2642             (        mon09.asm):00628                 BNE     LODERR      LOAD ERROR
F4AC 170125           (        mon09.asm):00629                 LBSR    GETBYT      GET LENGTH
F4AF 263D             (        mon09.asm):00630                 BNE     LODERR      Report error
F4B1 B7BF18           (        mon09.asm):00631                 STA     TEMP        START CHECKSUM
F4B4 8003             (        mon09.asm):00632                 SUBA    #3      CONVERT
F4B6 B7BF19           (        mon09.asm):00633                 STA     TEMP+1      Set length
F4B9 170118           (        mon09.asm):00634                 LBSR    GETBYT      Get first byte of address
F4BC 2630             (        mon09.asm):00635                 BNE     LODERR      Report error
F4BE 1F89             (        mon09.asm):00636                 TFR     A,B     Save for later
F4C0 BBBF18           (        mon09.asm):00637                 ADDA    TEMP        Include in checksum
F4C3 B7BF18           (        mon09.asm):00638                 STA     TEMP        Resave
F4C6 17010B           (        mon09.asm):00639                 LBSR    GETBYT      Get next byte of address
F4C9 2623             (        mon09.asm):00640                 BNE     LODERR      Report error
F4CB 1E89             (        mon09.asm):00641                 EXG     A,B     Swap
F4CD 1F01             (        mon09.asm):00642                 TFR     D,X     Set pointer
F4CF FBBF18           (        mon09.asm):00643                 ADDB    TEMP        Include in checksum
F4D2 F7BF18           (        mon09.asm):00644                 STB     TEMP        Resave checksum
F4D5                  (        mon09.asm):00645         DLMOT1
F4D5 1700FC           (        mon09.asm):00646                 LBSR    GETBYT      Get a data byte
F4D8 A780             (        mon09.asm):00647                 STA     ,X+     Save in RAM
F4DA BBBF18           (        mon09.asm):00648                 ADDA    TEMP        Include checksum
F4DD B7BF18           (        mon09.asm):00649                 STA     TEMP        Resave
F4E0 7ABF19           (        mon09.asm):00650                 DEC     TEMP+1      Reduce length
F4E3 26F0             (        mon09.asm):00651                 BNE     DLMOT1      Do them all
F4E5 1700EC           (        mon09.asm):00652                 LBSR    GETBYT      Get a byte
F4E8 BBBF18           (        mon09.asm):00653                 ADDA    TEMP        Add computed checksum
F4EB 4C               (        mon09.asm):00654                 INCA    Test for success
F4EC 2713             (        mon09.asm):00655                 BEQ     DLRTS       Download OK
                      (        mon09.asm):00656         ;* Error occured on loading
F4EE                  (        mon09.asm):00657         LODERR
F4EE 170138           (        mon09.asm):00658                 LBSR    WRMSG       OUTPUT
F4F1 203F4C6F61642065 (        mon09.asm):00659                 FCC     ' ?Load error'
     72726F72
F4FD FF               (        mon09.asm):00660                 FCB     $FF
F4FE 16FBFF           (        mon09.asm):00661                 LBRA    MAIN        BACK FOR COMMAND
                      (        mon09.asm):00662         ;* Return indicating another record
F501                  (        mon09.asm):00663         DLRTS
F501 1A01             (        mon09.asm):00664                 ORCC    #$01        SET 'C' FLAG
F503                  (        mon09.asm):00665         DLEOF
F503 39               (        mon09.asm):00666                 RTS
                      (        mon09.asm):00667         ;* Download record in INTEL format
F504                  (        mon09.asm):00668         DLINT
F504 1700CD           (        mon09.asm):00669                 LBSR    GETBYT      Get count
F507 26E5             (        mon09.asm):00670                 BNE     LODERR      Report error
F509 B7BF18           (        mon09.asm):00671                 STA     TEMP        Start checksum
F50C B7BF19           (        mon09.asm):00672                 STA     TEMP+1      Record length
F50F 8100             (        mon09.asm):00673                 CMPA    #0      Test & clear C
F511 27F0             (        mon09.asm):00674                 BEQ     DLEOF       End of file
                      (        mon09.asm):00675         ;* Get address
F513 1700BE           (        mon09.asm):00676                 LBSR    GETBYT      Get first byte of address
F516 26D6             (        mon09.asm):00677                 BNE     LODERR      Report error
F518 1F89             (        mon09.asm):00678                 TFR     A,B     Save for later
F51A BBBF18           (        mon09.asm):00679                 ADDA    TEMP        Include in checksum
F51D B7BF18           (        mon09.asm):00680                 STA     TEMP        Resave
F520 1700B1           (        mon09.asm):00681                 LBSR    GETBYT      Get next byte of address
F523 26C9             (        mon09.asm):00682                 BNE     LODERR      Report error
F525 1E89             (        mon09.asm):00683                 EXG     A,B     Swap
F527 1F01             (        mon09.asm):00684                 TFR     D,X     Set pointer
F529 FBBF18           (        mon09.asm):00685                 ADDB    TEMP        Include in checksum
F52C F7BF18           (        mon09.asm):00686                 STB     TEMP        Resave checksum
                      (        mon09.asm):00687         ;* Get record type
F52F 1700A2           (        mon09.asm):00688                 LBSR    GETBYT      Get type value
F532 26BA             (        mon09.asm):00689                 BNE     LODERR      Report error
F534 BBBF18           (        mon09.asm):00690                 ADDA    TEMP        Include checksum
F537 B7BF18           (        mon09.asm):00691                 STA     TEMP        Resave checksum
                      (        mon09.asm):00692         ;* Get data bytes
F53A                  (        mon09.asm):00693         DLINT1
F53A 170097           (        mon09.asm):00694                 LBSR    GETBYT      Get data byte
F53D 26AF             (        mon09.asm):00695                 BNE     LODERR      Report error
F53F A780             (        mon09.asm):00696                 STA     ,X+     Write to memory
F541 BBBF18           (        mon09.asm):00697                 ADDA    TEMP        Include checksum
F544 B7BF18           (        mon09.asm):00698                 STA     TEMP        Resave checksum
F547 7ABF19           (        mon09.asm):00699                 DEC     TEMP+1      Reduce length
F54A 26EE             (        mon09.asm):00700                 BNE     DLINT1      Do them all
                      (        mon09.asm):00701         ;* Get checksum
F54C BDF5D4           (        mon09.asm):00702                 JSR     GETBYT      Read a byte
F54F 269D             (        mon09.asm):00703                 BNE     LODERR      Report error
F551 BBBF18           (        mon09.asm):00704                 ADDA    TEMP        Include checksum
F554 27AB             (        mon09.asm):00705                 BEQ     DLRTS       Report success
F556 2096             (        mon09.asm):00706                 BRA     LODERR      Report failure
                      (        mon09.asm):00707         ;*
                      (        mon09.asm):00708         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (        mon09.asm):00709         ;*
F558                  (        mon09.asm):00710         GETPC
F558 8D3A             (        mon09.asm):00711                 BSR     GETAD1      Get address
F55A 2710             (        mon09.asm):00712                 BEQ     GETPC1      Normal data
F55C 8120             (        mon09.asm):00713                 CMPA    #' '        Space?
F55E 2631             (        mon09.asm):00714                 BNE     GETERR      Report error
F560 1700C6           (        mon09.asm):00715                 LBSR    WRMSG       Output message
F563 2D3E00           (        mon09.asm):00716                 FCN     '->'        Display address
F566 FCBF14           (        mon09.asm):00717                 LDD     SAVPC       Get PC value
F569 1600A3           (        mon09.asm):00718                 LBRA    WRDOUT      Display
F56C                  (        mon09.asm):00719         GETPC1
F56C FDBF14           (        mon09.asm):00720                 STD     SAVPC       Set new PC
F56F 39               (        mon09.asm):00721                 RTS
                      (        mon09.asm):00722         ;*
                      (        mon09.asm):00723         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (        mon09.asm):00724         ;*
F570                  (        mon09.asm):00725         GETRNG
F570 8D1B             (        mon09.asm):00726                 BSR     GETADR      Get first address
F572 1F01             (        mon09.asm):00727                 TFR     D,X     Save in X
F574 862C             (        mon09.asm):00728                 LDA     #','        Separator
F576 1700F2           (        mon09.asm):00729                 LBSR    PUTCHR      Display
F579 8D19             (        mon09.asm):00730                 BSR     GETAD1      Get second address
F57B 2786             (        mon09.asm):00731                 BEQ     DLEOF       Normal data
F57D 8120             (        mon09.asm):00732                 CMPA    #' '        Space?
F57F 2610             (        mon09.asm):00733                 BNE     GETERR      No, report error
F581 1700A5           (        mon09.asm):00734                 LBSR    WRMSG       Output message
F584 4646464600       (        mon09.asm):00735                 FCN     'FFFF'
F589 CCFFFF           (        mon09.asm):00736                 LDD     #$FFFF      Assume top of RAM
F58C 39               (        mon09.asm):00737                 RTS
                      (        mon09.asm):00738         ;*
                      (        mon09.asm):00739         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (        mon09.asm):00740         ;*
F58D                  (        mon09.asm):00741         GETADR
F58D 8D05             (        mon09.asm):00742                 BSR     GETAD1      Get word value
F58F 270F             (        mon09.asm):00743                 BEQ     GETAD2      Its OK
F591                  (        mon09.asm):00744         GETERR
F591 16FBAA           (        mon09.asm):00745                 LBRA    ERROR       Report error
                      (        mon09.asm):00746         ;* Get word value without error checking
F594                  (        mon09.asm):00747         GETAD1
F594 8D3E             (        mon09.asm):00748                 BSR     GETBYT      Get HIGH byte
F596 2609             (        mon09.asm):00749                 BNE     GETAD3      Test for special register
F598 1F89             (        mon09.asm):00750                 TFR     A,B     Copy for later
F59A 8D38             (        mon09.asm):00751                 BSR     GETBYT      Get LOW byte
F59C 26F3             (        mon09.asm):00752                 BNE     GETERR      Report error
F59E 1E89             (        mon09.asm):00753                 EXG     A,B     Correct order
F5A0                  (        mon09.asm):00754         GETAD2
F5A0 39               (        mon09.asm):00755                 RTS
                      (        mon09.asm):00756         ;* Handle special register names
F5A1                  (        mon09.asm):00757         GETAD3
F5A1 3410             (        mon09.asm):00758                 PSHS    X       Save X
F5A3 BEBF0E           (        mon09.asm):00759                 LDX     SAVX        Assume X
F5A6 8158             (        mon09.asm):00760                 CMPA    #'X'        Is it X?
F5A8 271C             (        mon09.asm):00761                 BEQ     GETAD4      Yes
F5AA BEBF10           (        mon09.asm):00762                 LDX     SAVY        Assume Y
F5AD 8159             (        mon09.asm):00763                 CMPA    #'Y'        Is it Y?
F5AF 2715             (        mon09.asm):00764                 BEQ     GETAD4      Yes
F5B1 BEBF12           (        mon09.asm):00765                 LDX     SAVU        Assume U
F5B4 8155             (        mon09.asm):00766                 CMPA    #'U'        Is it U?
F5B6 270E             (        mon09.asm):00767                 BEQ     GETAD4      Yes
F5B8 BEBF0E           (        mon09.asm):00768                 LDX     SAVX        Assume S
F5BB 8153             (        mon09.asm):00769                 CMPA    #'S'        Is it S?
F5BD 2707             (        mon09.asm):00770                 BEQ     GETAD4      Yes
F5BF BEBF14           (        mon09.asm):00771                 LDX     SAVPC       Assume PC?
F5C2 8150             (        mon09.asm):00772                 CMPA    #'P'        Is it PC?
F5C4 260C             (        mon09.asm):00773                 BNE     GETAD5      No, error
F5C6                  (        mon09.asm):00774         GETAD4
F5C6 863D             (        mon09.asm):00775                 LDA     #'='        Separator
F5C8 1700A0           (        mon09.asm):00776                 LBSR    PUTCHR      Echo it
F5CB 1F10             (        mon09.asm):00777                 TFR     X,D     D = value
F5CD 8D40             (        mon09.asm):00778                 BSR     WRDOUT      Display it
F5CF 4F               (        mon09.asm):00779                 CLRA    Set 'Z'
F5D0 1F10             (        mon09.asm):00780                 TFR     X,D     Get value back
F5D2                  (        mon09.asm):00781         GETAD5
F5D2 3590             (        mon09.asm):00782                 PULS    X,PC        Restore & return
                      (        mon09.asm):00783         ;*
                      (        mon09.asm):00784         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (        mon09.asm):00785         ;*
F5D4                  (        mon09.asm):00786         GETBYT
F5D4 8D20             (        mon09.asm):00787                 BSR     GETNIB      Get FIRST nibble
F5D6 2611             (        mon09.asm):00788                 BNE     GETB3       Invalid, test for quote
F5D8 48               (        mon09.asm):00789                 LSLA    Rotate
F5D9 48               (        mon09.asm):00790                 LSLA    into
F5DA 48               (        mon09.asm):00791                 LSLA    high
F5DB 48               (        mon09.asm):00792                 LSLA    nibble
F5DC 3402             (        mon09.asm):00793                 PSHS    A       Save for later
F5DE 8D16             (        mon09.asm):00794                 BSR     GETNIB      Get SECOND nibble
F5E0 2604             (        mon09.asm):00795                 BNE     GETB2       Report error
F5E2 AAE4             (        mon09.asm):00796                 ORA     ,S      Include high
F5E4                  (        mon09.asm):00797         GETB4
F5E4 1A04             (        mon09.asm):00798                 ORCC    #$04        Indicate success (SET 'Z')
F5E6                  (        mon09.asm):00799         GETB2
F5E6 3261             (        mon09.asm):00800                 LEAS    1,S     Skip saved value
F5E8                  (        mon09.asm):00801         GETB1
F5E8 39               (        mon09.asm):00802                 RTS
F5E9                  (        mon09.asm):00803         GETB3
F5E9 8127             (        mon09.asm):00804                 CMPA    #$27        Single quote?
F5EB 26FB             (        mon09.asm):00805                 BNE     GETB1       No, abort
F5ED 170070           (        mon09.asm):00806                 LBSR    GETCHR      Get ASCII character
F5F0 170078           (        mon09.asm):00807                 LBSR    PUTCHR      Echo on terminal
F5F3 1A04             (        mon09.asm):00808                 ORCC    #$04        Indicate success (SET 'Z')
F5F5 39               (        mon09.asm):00809                 RTS
                      (        mon09.asm):00810         ;*
                      (        mon09.asm):00811         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (        mon09.asm):00812         ;*
F5F6                  (        mon09.asm):00813         GETNIB
F5F6 170047           (        mon09.asm):00814                 LBSR    GETECH      Get character
F5F9 8030             (        mon09.asm):00815                 SUBA    #'0'        Convert numbers
F5FB 8109             (        mon09.asm):00816                 CMPA    #9      Numeric?
F5FD 230A             (        mon09.asm):00817                 BLS     GETN1       Yes, OK
F5FF 8007             (        mon09.asm):00818                 SUBA    #7      Convert alphas
F601 810A             (        mon09.asm):00819                 CMPA    #$A     Under?
F603 2507             (        mon09.asm):00820                 BLO     GETN2       Yer, error
F605 810F             (        mon09.asm):00821                 CMPA    #$F     Over?
F607 2203             (        mon09.asm):00822                 BHI     GETN2       Yes, error
F609                  (        mon09.asm):00823         GETN1
F609 1A04             (        mon09.asm):00824                 ORCC    #$04        SET 'Z' FLAG, INDICATE OK
F60B 39               (        mon09.asm):00825                 RTS
F60C                  (        mon09.asm):00826         GETN2
F60C 8B37             (        mon09.asm):00827                 ADDA    #$37        Normalize character + clear Z
F60E 39               (        mon09.asm):00828                 RTS
                      (        mon09.asm):00829         ;*
                      (        mon09.asm):00830         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (        mon09.asm):00831         ;*
F60F                  (        mon09.asm):00832         WRDOUT
F60F 8D02             (        mon09.asm):00833                 BSR     HEXOUT      Output first byte
F611 1F98             (        mon09.asm):00834                 TFR     B,A     Get second byte
                      (        mon09.asm):00835         ;*
                      (        mon09.asm):00836         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00837         ;*
F613                  (        mon09.asm):00838         HEXOUT
F613 3402             (        mon09.asm):00839                 PSHS    A       Save low nibble
F615 44               (        mon09.asm):00840                 LSRA    Rotate
F616 44               (        mon09.asm):00841                 LSRA    upper nibble
F617 44               (        mon09.asm):00842                 LSRA    into
F618 44               (        mon09.asm):00843                 LSRA    lower nibble
F619 8D02             (        mon09.asm):00844                 BSR     HOUT        Output high nibble
F61B 3502             (        mon09.asm):00845                 PULS    A       Rertore low nibble
                      (        mon09.asm):00846         ;*
                      (        mon09.asm):00847         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00848         ;*
F61D                  (        mon09.asm):00849         HOUT:
F61D 840F             (        mon09.asm):00850                 ANDA    #$0F                              ; Remove upper half
F61F 8B30             (        mon09.asm):00851                 ADDA    #'0'                              ; Convert to printable
F621 8139             (        mon09.asm):00852                 CMPA    #'9'                              ; In range?
F623 2302             (        mon09.asm):00853                 BLS     HOUT1                             ; Yes, display
F625 8B07             (        mon09.asm):00854                 ADDA    #7                                ;Convert to alpha
F627                  (        mon09.asm):00855         HOUT1:
F627 2042             (        mon09.asm):00856                 BRA     PUTCHR                            ; Output character
                      (        mon09.asm):00857         ;*
                      (        mon09.asm):00858         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (        mon09.asm):00859         ;*
F629                  (        mon09.asm):00860         WRMSG:
F629 3410             (        mon09.asm):00861                 PSHS    X                                 ;SAVE X
F62B AE62             (        mon09.asm):00862                 LDX     2,S                               ;GET OLD PC
F62D 8D04             (        mon09.asm):00863                 BSR     WRLIN                             ;OUTPUT LINE
F62F AF62             (        mon09.asm):00864                 STX     2,S                               ;UPDATE OLD PC
F631 3590             (        mon09.asm):00865                 PULS    X,PC                              ;RESTORE X, RETURN
                      (        mon09.asm):00866         ;*
                      (        mon09.asm):00867         ;* DISPLAY MESSAGE(X)
                      (        mon09.asm):00868         ;*
F633                  (        mon09.asm):00869         WRLIN:
F633 A680             (        mon09.asm):00870                 LDA     ,X+                               ;GET CHAR FROM MESSAGE
F635 2708             (        mon09.asm):00871                 BEQ     WRLND                             ;END, QUIT
F637 81FF             (        mon09.asm):00872                 CMPA    #$FF                              ;NEWLINE END, LFCR & EXIT
F639 2719             (        mon09.asm):00873                 BEQ     LFCR                              ;IF SO, NEW LINE, RETURN
F63B 8D2E             (        mon09.asm):00874                 BSR     PUTCHR                            ;OUTPUT TO TERM
F63D 20F4             (        mon09.asm):00875                 BRA     WRLIN                             ;KEEP GOING
F63F                  (        mon09.asm):00876         WRLND
F63F 39               (        mon09.asm):00877                 RTS
                      (        mon09.asm):00878         ;*
                      (        mon09.asm):00879         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (        mon09.asm):00880         ;*
F640                  (        mon09.asm):00881         GETECH:
F640 8D1E             (        mon09.asm):00882                 BSR     GETCHR                            ;GET CHARACTER
F642 8120             (        mon09.asm):00883                 CMPA    #' '                              ;SPACE?
F644 23F9             (        mon09.asm):00884                 BLS     WRLND                             ;IF < DON'T DISPLAY
F646 8161             (        mon09.asm):00885                 CMPA    #$61                              ;LOWER CASE?
F648 2521             (        mon09.asm):00886                 BLO     PUTCHR                            ;OK
F64A 845F             (        mon09.asm):00887                 ANDA    #$5F                              ;CONVERT TO UPPER
F64C 201D             (        mon09.asm):00888                 BRA     PUTCHR                            ;ECHO
                      (        mon09.asm):00889         ;*
                      (        mon09.asm):00890         ;* DISPLAY A SPACE ON THE TERMINAL
                      (        mon09.asm):00891         ;*
F64E                  (        mon09.asm):00892         SPACE:
F64E 3402             (        mon09.asm):00893                 PSHS    A                                 ;SAVE A
F650 8620             (        mon09.asm):00894                 LDA     #' '                              ;GET SPACE
F652 2008             (        mon09.asm):00895                 BRA     LFC1                              ;DISLAY AND GO HOME
                      (        mon09.asm):00896         ;*
                      (        mon09.asm):00897         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (        mon09.asm):00898         ;*
F654                  (        mon09.asm):00899         LFCR:
F654 3402             (        mon09.asm):00900                 PSHS    A                                 ;SAVE
F656 860A             (        mon09.asm):00901                 LDA     #$0A                              ;GET LF
F658 8D11             (        mon09.asm):00902                 BSR     PUTCHR                            ;OUTPUT
F65A 860D             (        mon09.asm):00903                 LDA     #$0D                              ;GET CR
F65C                  (        mon09.asm):00904         LFC1:
F65C 8D0D             (        mon09.asm):00905                 BSR     PUTCHR                            ;OUTPUT
F65E 3582             (        mon09.asm):00906                 PULS    A,PC                              ;RESTORE AND GO HOME
                      (        mon09.asm):00907         ;*
                      (        mon09.asm):00908         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (        mon09.asm):00909         ;*
F660                  (        mon09.asm):00910         GETCHR:
F660 3410             (        mon09.asm):00911                 PSHS    X                                 ;SAVE 'X'
F662                  (        mon09.asm):00912         GETC1:
F662 1703A6           (        mon09.asm):00913                 LBSR    READ                              ;READ TERMINAL
F665 81FF             (        mon09.asm):00914                 CMPA    #$FF
F667 27F9             (        mon09.asm):00915                 BEQ     GETC1                             ;KEEP TRYING
F669 3590             (        mon09.asm):00916                 PULS    X,PC
                      (        mon09.asm):00917         ;*
                      (        mon09.asm):00918         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (        mon09.asm):00919         ;*
F66B                  (        mon09.asm):00920         PUTCHR:
F66B 3416             (        mon09.asm):00921                 PSHS    A,B,X                             ;SAVE REGS
F66D 1703A9           (        mon09.asm):00922                 LBSR    WRITE                             ;OUTPUT TO TERMINAL
F670 3596             (        mon09.asm):00923                 PULS    A,B,X,PC                          ;RESTORE AND GO HOME
                      (        mon09.asm):00924         ;*
                      (        mon09.asm):00925         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (        mon09.asm):00926         ;* SCREEN OUTPUT FLOW CONTROL.
                      (        mon09.asm):00927         ;*
F672                  (        mon09.asm):00928         CHKCHR:
F672 3410             (        mon09.asm):00929                 PSHS    X                                 ;SAVE PTR
F674 170394           (        mon09.asm):00930                 LBSR    READ                              ;READ TERMINAL
F677 8120             (        mon09.asm):00931                 CMPA    #' '                              ;SPACE?
F679 2613             (        mon09.asm):00932                 BNE     CHKC3                             ;NO, IGNORE IT
F67B                  (        mon09.asm):00933         CHKC1:
F67B CA80             (        mon09.asm):00934                 ORB     #%10000000                        ;SET HELD BIT
F67D 17038B           (        mon09.asm):00935                 LBSR    READ                              ;GET KEY FROM CONSOLE
F680 8120             (        mon09.asm):00936                 CMPA    #' '                              ;SPACE?
F682 270A             (        mon09.asm):00937                 BEQ     CHKC3                             ;YES, ALLOW
F684 C47F             (        mon09.asm):00938                 ANDB    #%01111111                        ;DISABLE HELD BIT
F686 810D             (        mon09.asm):00939                 CMPA    #$0D                              ;CARRIAGE RETURN?
F688 2704             (        mon09.asm):00940                 BEQ     CHKC3                             ;ALLOW
F68A 811B             (        mon09.asm):00941                 CMPA    #$1B                              ;ESCAPE?
F68C 26ED             (        mon09.asm):00942                 BNE     CHKC1                             ;NO, IGNORE
F68E                  (        mon09.asm):00943         CHKC3:
F68E 811B             (        mon09.asm):00944                 CMPA    #$1B                              ;TEST FOR ESCAPE CHARACTER
F690 3590             (        mon09.asm):00945                 PULS    X,PC
                      (        mon09.asm):00946         ;*
                      (        mon09.asm):00947         ;* SUBROUTINES
                      (        mon09.asm):00948         ;*
F692                  (        mon09.asm):00949         WRHEXB
F692 3402             (        mon09.asm):00950                 PSHS    A       SAVE IT
F694 8624             (        mon09.asm):00951                 LDA     #'$'        INDICATE HEX
F696 A7C0             (        mon09.asm):00952                 STA     ,U+     SAVE
F698 2008             (        mon09.asm):00953                 BRA     WRHEX1      CONTINUE
F69A                  (        mon09.asm):00954         WRHEXW
F69A 3404             (        mon09.asm):00955                 PSHS    B       SAVE B
F69C C624             (        mon09.asm):00956                 LDB     #'$'        INDICATE HEX
F69E E7C0             (        mon09.asm):00957                 STB     ,U+     SAVE IT
F6A0 8D02             (        mon09.asm):00958                 BSR     WRHEX       OUTPUT
F6A2                  (        mon09.asm):00959         WRHEX1
F6A2 3502             (        mon09.asm):00960                 PULS    A       RESTORE
F6A4                  (        mon09.asm):00961         WRHEX
F6A4 3402             (        mon09.asm):00962                 PSHS    A       SAVE IT
F6A6 44               (        mon09.asm):00963                 LSRA    SHIFT
F6A7 44               (        mon09.asm):00964                 LSRA    HIGH BYTE
F6A8 44               (        mon09.asm):00965                 LSRA    INTO
F6A9 44               (        mon09.asm):00966                 LSRA    LOW FOR OUTPUT
F6AA 8D02             (        mon09.asm):00967                 BSR     WRHEXN      OUTPUT NIBBLE
F6AC 3502             (        mon09.asm):00968                 PULS    A       RETORE
F6AE                  (        mon09.asm):00969         WRHEXN
F6AE 840F             (        mon09.asm):00970                 ANDA    #$0F        REMOVE CRAP
F6B0 8B30             (        mon09.asm):00971                 ADDA    #$30        CONVERT
F6B2 8139             (        mon09.asm):00972                 CMPA    #$39        OK?
F6B4 2302             (        mon09.asm):00973                 BLS     WRNOK       OK
F6B6 8B07             (        mon09.asm):00974                 ADDA    #7      CONVERT
F6B8                  (        mon09.asm):00975         WRNOK
F6B8 A7C0             (        mon09.asm):00976                 STA     ,U+     SAVE IT
F6BA 39               (        mon09.asm):00977                 RTS
                      (        mon09.asm):00978         ;*
                      (        mon09.asm):00979         ;* NMI HANDLER
                      (        mon09.asm):00980         ;*
F6BB                  (        mon09.asm):00981         NMIHND
F6BB 8EBF0A           (        mon09.asm):00982                 LDX     #SAVCC      POINT TO START OF SAVED REGS
F6BE C60C             (        mon09.asm):00983                 LDB     #12     MOVE 12 BYTES
F6C0                  (        mon09.asm):00984         NMIH1
F6C0 A6E0             (        mon09.asm):00985                 LDA     ,S+     GET BYTE
F6C2 A780             (        mon09.asm):00986                 STA     ,X+     SAVE
F6C4 5A               (        mon09.asm):00987                 DECB    DECREMENT COUNT
F6C5 26F9             (        mon09.asm):00988                 BNE     NMIH1       DO THEM ALL
F6C7 10FFBF16         (        mon09.asm):00989                 STS     SAVS        SAVE STACK POINTER
F6CB 17FF5B           (        mon09.asm):00990                 LBSR    WRMSG       DISPLAY MESSAGE
F6CE 2A2A2A204E4D4920 (        mon09.asm):00991                 FCC     '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
F6E3 FF               (        mon09.asm):00992                 FCB     $FF     NEW LINE
F6E4 205C             (        mon09.asm):00993                 BRA     BRKREG      DISPLAY REGISTERS
                      (        mon09.asm):00994         ;*
                      (        mon09.asm):00995         ;* SWI HANDLER
                      (        mon09.asm):00996         ;*
F6E6                  (        mon09.asm):00997         SWIHND
F6E6 108EBF1F         (        mon09.asm):00998                 LDY     #BRKTAB     POINT TO BREAKPOINT TABLE
F6EA AE6A             (        mon09.asm):00999                 LDX     10,S        GET STORED PC
F6EC 301F             (        mon09.asm):01000                 LEAX    -1,X        BACKUP TO BREAKPOINT ADDRESS
F6EE C608             (        mon09.asm):01001                 LDB     #8      CHECK EIGHT BREAKPOINTS
F6F0                  (        mon09.asm):01002         SWIHN1
F6F0 ACA4             (        mon09.asm):01003                 CMPX    ,Y      IS THIS IT?
F6F2 2710             (        mon09.asm):01004                 BEQ     SWIHN2      YES
F6F4 3123             (        mon09.asm):01005                 LEAY    3,Y     SKIP OPCODE
F6F6 5A               (        mon09.asm):01006                 DECB    REDUCE COUNT
F6F7 26F7             (        mon09.asm):01007                 BNE     SWIHN1      CONTINUE
F6F9 E662             (        mon09.asm):01008                 LDB     2,S     RESTORE B.
F6FB AE64             (        mon09.asm):01009                 LDX     4,S     RESTORE X.
F6FD 10AE66           (        mon09.asm):01010                 LDY     6,S     RESTORE Y.
F700 6E9FBF00         (        mon09.asm):01011                 JMP     [SWIADR]    NOT A BREAKPOINT, EXECUTE SWI HANDLER
F704                  (        mon09.asm):01012         SWIHN2
F704 F7BF1D           (        mon09.asm):01013                 STB     INSTYP      SAVE BREAKPOINT NUMBER
F707 8EBF0A           (        mon09.asm):01014                 LDX     #SAVCC      POINT TO START OF SAVED REGS
F70A C60A             (        mon09.asm):01015                 LDB     #10     MOVE 10
F70C                  (        mon09.asm):01016         SWIHN25
F70C A6E0             (        mon09.asm):01017                 LDA     ,S+     GET BYTE
F70E A780             (        mon09.asm):01018                 STA     ,X+     SAVE
F710 5A               (        mon09.asm):01019                 DECB    DECREMENT COUNT
F711 26F9             (        mon09.asm):01020                 BNE     SWIHN25     DO THEM ALL
F713 3510             (        mon09.asm):01021                 PULS    X       GET PC
F715 301F             (        mon09.asm):01022                 LEAX    -1,X        SET BACK TO REAL PC
F717 BFBF14           (        mon09.asm):01023                 STX     SAVPC       SAVED PC
F71A 10FFBF16         (        mon09.asm):01024                 STS     SAVS        SAVE STACK POINTER
F71E 17FF08           (        mon09.asm):01025                 LBSR    WRMSG       DISPLAY MESSAGE
F721 2A2A2A2042726561 (        mon09.asm):01026                 FCN     '*** Breakpoint #'
     6B706F696E742023
     00
F732 8638             (        mon09.asm):01027                 LDA     #$38        GET NUMBER, PLUS ASCII CONVERT
F734 B0BF1D           (        mon09.asm):01028                 SUBA    INSTYP      CONVERT TO PROPER DIGIT
F737 17FF31           (        mon09.asm):01029                 LBSR    PUTCHR      DISPLAY
F73A 17FEEC           (        mon09.asm):01030                 LBSR    WRMSG       OUTPUT MESSAGE
F73D 202A2A2A         (        mon09.asm):01031                 FCC     ' ***'      TRAILING MESSAGE
F741 FF               (        mon09.asm):01032                 FCB     $FF     NEW LINE
F742                  (        mon09.asm):01033         BRKREG
F742 17FB89           (        mon09.asm):01034                 LBSR    DISREG      DISPLAY
F745                  (        mon09.asm):01035         BRKRES
F745 8EBF1F           (        mon09.asm):01036                 LDX     #BRKTAB     POINT TO BREAKPOINT TABLE
F748 C608             (        mon09.asm):01037                 LDB     #8      DO IT EIGHT TIMES
F74A                  (        mon09.asm):01038         SWIHN3
F74A 10AE81           (        mon09.asm):01039                 LDY     ,X++        GET REG
F74D 2704             (        mon09.asm):01040                 BEQ     SWIHN4      NO BRK, NEXT
F74F A684             (        mon09.asm):01041                 LDA     ,X      GET OPCODE
F751 A7A4             (        mon09.asm):01042                 STA     ,Y      REPLACE IN RAM
F753                  (        mon09.asm):01043         SWIHN4
F753 3001             (        mon09.asm):01044                 LEAX    1,X     SKIP OPCODE
F755 5A               (        mon09.asm):01045                 DECB    REDUCE COUNT
F756 26F2             (        mon09.asm):01046                 BNE     SWIHN3      GO AGAIN
F758 16F9A5           (        mon09.asm):01047                 LBRA    MAIN        DO PROMPT
                      (        mon09.asm):01048         ;* CONSTANTS
F75B                  (        mon09.asm):01049         PCRG
F75B 2C504352         (        mon09.asm):01050                 FCC     ',PCR'
                      (        mon09.asm):01051         ;* TRANSFER/EXCHANGE REGISTER TABLE
F75F                  (        mon09.asm):01052         REGTAB
F75F 4400             (        mon09.asm):01053                 FCN     'D'     0
F761 5800             (        mon09.asm):01054                 FCN     'X'     1
F763 5900             (        mon09.asm):01055                 FCN     'Y'     2
F765 5500             (        mon09.asm):01056                 FCN     'U'     3
F767 5300             (        mon09.asm):01057                 FCN     'S'     4
F769 5043             (        mon09.asm):01058                 FCC     'PC'        5
F76B 3F00             (        mon09.asm):01059                 FCN     '?'     6
F76D 3F00             (        mon09.asm):01060                 FCN     '?'     7
F76F 4100             (        mon09.asm):01061                 FCN     'A'     8
F771 4200             (        mon09.asm):01062                 FCN     'B'     9
F773 4343             (        mon09.asm):01063                 FCC     'CC'        A
F775 4450             (        mon09.asm):01064                 FCC     'DP'        B
F777 3F00             (        mon09.asm):01065                 FCN     '?'     C
F779 3F00             (        mon09.asm):01066                 FCN     '?'     D
F77B 3F00             (        mon09.asm):01067                 FCN     '?'     E
F77D 3F00             (        mon09.asm):01068                 FCN     '?'     F
                      (        mon09.asm):01069         ;* PUSH/PULL REGISTER TABLE
F77F                  (        mon09.asm):01070         PSHTAB:
F77F 4343             (        mon09.asm):01071                 FCC     'CC'
F781 4100             (        mon09.asm):01072                 FCN     'A'
F783 4200             (        mon09.asm):01073                 FCN     'B'
F785 4450             (        mon09.asm):01074                 FCC     'DP'
F787 5800             (        mon09.asm):01075                 FCN     'X'
F789 5900             (        mon09.asm):01076                 FCN     'Y'
F78B 5500             (        mon09.asm):01077                 FCN     'U'
F78D 504300           (        mon09.asm):01078                 FCN     'PC'
                      (        mon09.asm):01079         ;* VECTOR HANDLERS
F790                  (        mon09.asm):01080         SWI3:
F790 6E9FBF04         (        mon09.asm):01081                 JMP     [SWI3ADR]
F794                  (        mon09.asm):01082         SWI2:
F794 6E9FBF02         (        mon09.asm):01083                 JMP     [SWI2ADR]
F798                  (        mon09.asm):01084         IRQ:
F798 6E9FBF06         (        mon09.asm):01085                 JMP     [IRQADR]
F79C                  (        mon09.asm):01086         FIRQ:
F79C 6E9FBF08         (        mon09.asm):01087                 JMP     [FIRQADR]
                      (        mon09.asm):01088         ;* HELP TEXT
F7A0                  (        mon09.asm):01089         HTEXT:
F7A0 00               (        mon09.asm):01090                 FCB     0       NEW LINE TO START
F7A1 4352203C7265673E (        mon09.asm):01091                 FCN     'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
F7C1 4356203C7665633E (        mon09.asm):01092                 FCN     'CV <vec> <addr>|Change interrupt vector'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7200
F7E9 444D203C61646472 (        mon09.asm):01093                 FCN     'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
F81C 44527C446973706C (        mon09.asm):01094                 FCN     'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
F83B 44567C446973706C (        mon09.asm):01095                 FCN     'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
F858 45203C616464723E (        mon09.asm):01096                 FCN     'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
F86D 464D203C61646472 (        mon09.asm):01097                 FCN     'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
F891 47205B3C61646472 (        mon09.asm):01098                 FCN     'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
F8B1 4C7C4C6F61642061 (        mon09.asm):01099                 FCN     'L|Load an image into RAM from uart2'
     6E20696D61676520
     696E746F2052414D
     2066726F6D207561
     72743200
F8D5 4D4D203C61646472 (        mon09.asm):01100                 FCN     'MM <addr>,<addr> <addr>|Move memory'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F727900
F8F9 5252203C61646472 (        mon09.asm):01101                 FCN     'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
F919 5257203C61646472 (        mon09.asm):01102                 FCN     'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
F941 57203C616464723E (        mon09.asm):01103                 FCN     'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
F961 5852203C61646472 (        mon09.asm):01104                 FCN     'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
F981 5857203C61646472 (        mon09.asm):01105                 FCN     'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
F9A9 2B203C76616C7565 (        mon09.asm):01106                 FCN     '+ <value>+<value>|Hexidecimal addition'
     3E2B3C76616C7565
     3E7C486578696465
     63696D616C206164
     646974696F6E00
F9D0 2D203C76616C7565 (        mon09.asm):01107                 FCN     '- <value>-<value>|Hexidecimal subtraction'
     3E2D3C76616C7565
     3E7C486578696465
     63696D616C207375
     627472616374696F
     6E00
F9FA FF               (        mon09.asm):01108                 FCB     -1      END OF TABLE
                      (        mon09.asm):01109         
                      (        mon09.asm):01110         ;*
                      (        mon09.asm):01111         ;* MACHINE DEPENDANT I/O ROUTINES FOR 6551 UART
                      (        mon09.asm):01112         ;*
F9FB                  (        mon09.asm):01113         INIT:
F9FB 8600             (        mon09.asm):01114                 LDA     #$00                              ; RESET UART
F9FD B7EF85           (        mon09.asm):01115                 STA     UART1STATUS                       ;
FA00 860B             (        mon09.asm):01116                 LDA     #$0B                              ;
FA02 B7EF86           (        mon09.asm):01117                 STA     UART1COMMAND                      ;
FA05 861E             (        mon09.asm):01118                 LDA     #$1E                              ; 9600, 8 BITS, NO PARITY, 1 STOP BIT
FA07 B7EF87           (        mon09.asm):01119                 STA     UART1CONTROL                      ;
FA0A 39               (        mon09.asm):01120                 RTS
                      (        mon09.asm):01121         ;* READ UART
FA0B                  (        mon09.asm):01122         READ:
FA0B B6EF85           (        mon09.asm):01123                 LDA     UART1STATUS                       ; GET STATUS REGISTER
FA0E 8408             (        mon09.asm):01124                 ANDA    #%00001000                        ; IS RX READY
FA10 2704             (        mon09.asm):01125                 BEQ     NOCHR                             ; No DATA IS READY
FA12 B6EF84           (        mon09.asm):01126                 LDA     UART1DATA                         ; GET DATA CHAR
FA15 39               (        mon09.asm):01127                 RTS
FA16                  (        mon09.asm):01128         NOCHR:
FA16 86FF             (        mon09.asm):01129                 LDA     #$FF                              ; NO CHAR
FA18 39               (        mon09.asm):01130                 RTS
                      (        mon09.asm):01131         ;* WRITE UART
FA19                  (        mon09.asm):01132         WRITE:
FA19 F6EF85           (        mon09.asm):01133                 LDB     UART1STATUS                       ; GET STATUS
FA1C C410             (        mon09.asm):01134                 ANDB    #%00010000                        ; IS TX READY
FA1E 27F9             (        mon09.asm):01135                 BEQ     WRITE                             ; NO, WAIT FOR IT
FA20 B7EF84           (        mon09.asm):01136                 STA     UART1DATA                         ; WRITE DATA
FA23 39               (        mon09.asm):01137                 RTS
                      (        mon09.asm):01138         
                      (        mon09.asm):01139         ;*
                      (        mon09.asm):01140         ;* MACHINE VECTORS
                      (        mon09.asm):01141         ;*
                      (        mon09.asm):01142                 ORG     $FFF2
FFF2 F790             (        mon09.asm):01143                 FDB     SWI3
FFF4 F794             (        mon09.asm):01144                 FDB     SWI2
FFF6 F79C             (        mon09.asm):01145                 FDB     FIRQ
FFF8 F798             (        mon09.asm):01146                 FDB     IRQ
FFFA F6E6             (        mon09.asm):01147                 FDB     SWIHND
FFFC F6BB             (        mon09.asm):01148                 FDB     NMIHND
FFFE F000             (        mon09.asm):01149                 FDB     RESET

Symbol Table:
[ G] BRKREG                           F742
[ G] BRKRES                           F745
[ G] BRKTAB                           BF1F
[ G] CCBITS                           F342
[ G] CHG1                             F355
[ G] CHG2                             F361
[ G] CHG3                             F392
[ G] CHG4                             F378
[ G] CHGREG                           F34A
[ G] CHGTAB                           F395
[ G] CHGV1                            F2A7
[ G] CHGV2                            F2AF
[ G] CHGV3                            F2B5
[ G] CHGV4                            F2C0
[ G] CHGVEC                           F29C
[ G] CHKC1                            F67B
[ G] CHKC3                            F68E
[ G] CHKCHR                           F672
[ G] CLRRAM                           F007
[ G] CMDTAB                           F146
[ G] DISREG                           F2CE
[ G] DISV1                            F26C
[ G] DISVEC                           F265
[ G] DLEOF                            F503
[ G] DLINT                            F504
[ G] DLINT1                           F53A
[ G] DLMOT                            F49D
[ G] DLMOT1                           F4D5
[ G] DLO1                             F482
[ G] DLO2                             F48F
[ G] DLOAD                            F492
[ G] DLRTS                            F501
[ G] DSPBUF                           BF37
[ G] ERROR                            F13E
[ G] FILL1                            F19D
[ G] FILMEM                           F18F
[ G] FIRQ                             F79C
[ G] FIRQADR                          BF08
[ G] GETAD1                           F594
[ G] GETAD2                           F5A0
[ G] GETAD3                           F5A1
[ G] GETAD4                           F5C6
[ G] GETAD5                           F5D2
[ G] GETADR                           F58D
[ G] GETB1                            F5E8
[ G] GETB2                            F5E6
[ G] GETB3                            F5E9
[ G] GETB4                            F5E4
[ G] GETBYT                           F5D4
[ G] GETC1                            F662
[ G] GETCHR                           F660
[ G] GETECH                           F640
[ G] GETERR                           F591
[ G] GETN1                            F609
[ G] GETN2                            F60C
[ G] GETNIB                           F5F6
[ G] GETPC                            F558
[ G] GETPC1                           F56C
[ G] GETRNG                           F570
[ G] GOEXEC                           F39F
[ G] HELP                             F451
[ G] HEXADD                           F41E
[ G] HEXOUT                           F613
[ G] HEXSHO                           F442
[ G] HEXSUB                           F42F
[ G] HLP1                             F454
[ G] HLP2                             F456
[ G] HLP3                             F464
[ G] HLP4                             F472
[ G] HLP5                             F47E
[ G] HOUT                             F61D
[ G] HOUT1                            F627
[ G] HTEXT                            F7A0
[ G] INIT                             F9FB
[ G] INSRAM                           BF69
[ G] INSTYP                           BF1D
[ G] IOSPACE                          EF00
[ G] IRQ                              F798
[ G] IRQADR                           BF06
[ G] LFC1                             F65C
[ G] LFCR                             F654
[ G] LOAD                             F47F
[ G] LODERR                           F4EE
[ G] LOOK1                            F114
[ G] LOOK2                            F120
[ G] LOOK3                            F137
[ G] LOOKC                            F10E
[ G] MAIN                             F100
[ G] MEM1                             F1C7
[ G] MEM2                             F1DA
[ G] MEM3                             F1E4
[ G] MEM4                             F1EE
[ G] MEM5                             F1F8
[ G] MEM6                             F202
[ G] MEM7                             F204
[ G] MEMORY                           F1C1
[ G] MONITOR                          F01C
[ G] MOVM1                            F1B5
[ G] MOVMEM                           F1A7
[ G] NMIH1                            F6C0
[ G] NMIHND                           F6BB
[ G] NOCHR                            FA16
[ G] PCRG                             F75B
[ G] POSBYT                           BF1E
[ G] PSHTAB                           F77F
[ G] PTRSAV                           BF1B
[ G] PUTCHR                           F66B
[ G] R16                              F386
[ G] R17                              F38D
[ G] RAM                              BF00
[ G] RBITS                            F2EC
[ G] RDLOOP                           F3C4
[ G] RDLP1                            F3CC
[ G] READ                             FA0B
[ G] REGB1                            F2E5
[ G] REGTAB                           F75F
[ G] REGTXT                           F318
[ G] RESET                            F000
[ G] ROM                              F000
[ G] RSUB1                            F308
[ G] RSUB2                            F310
[ G] SAVA                             BF0B
[ G] SAVB                             BF0C
[ G] SAVCC                            BF0A
[ G] SAVDP                            BF0D
[ G] SAVPC                            BF14
[ G] SAVS                             BF16
[ G] SAVU                             BF12
[ G] SAVX                             BF0E
[ G] SAVY                             BF10
[ G] SPACE                            F64E
[ G] STACK                            BFF0
[ G] STPFLG                           BF1A
[ G] SUBM1                            F227
[ G] SUBM2                            F231
[ G] SUBM3                            F245
[ G] SUBM4                            F24C
[ G] SUBM5                            F25B
[ G] SUBMEM                           F222
[ G] SWI2                             F794
[ G] SWI2ADR                          BF02
[ G] SWI3                             F790
[ G] SWI3ADR                          BF04
[ G] SWIADR                           BF00
[ G] SWIHN1                           F6F0
[ G] SWIHN2                           F704
[ G] SWIHN25                          F70C
[ G] SWIHN3                           F74A
[ G] SWIHN4                           F753
[ G] SWIHND                           F6E6
[ G] TEMP                             BF18
[ G] UART1COMMAND                     EF86
[ G] UART1CONTROL                     EF87
[ G] UART1DATA                        EF84
[ G] UART1STATUS                      EF85
[ G] VECTXT                           F27B
[ G] WRDOUT                           F60F
[ G] WRHEX                            F6A4
[ G] WRHEX1                           F6A2
[ G] WRHEXB                           F692
[ G] WRHEXN                           F6AE
[ G] WRHEXW                           F69A
[ G] WRIMEM                           F212
[ G] WRITE                            FA19
[ G] WRLIN                            F633
[ G] WRLND                            F63F
[ G] WRLOOP                           F3D4
[ G] WRLP1                            F3E8
[ G] WRMSG                            F629
[ G] WRNOK                            F6B8
[ G] XRLOOP                           F3F3
[ G] XRLP1                            F3FB
[ G] XWLOOP                           F403
[ G] XWLP1                            F413
