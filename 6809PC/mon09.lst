                      (        mon09.asm):00001         ;*
                      (        mon09.asm):00002         ;* MON09: A software debug monitor for the 6809
                      (        mon09.asm):00003         ;*
                      (        mon09.asm):00004         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (        mon09.asm):00005         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and RAM
                      (        mon09.asm):00006         ;* from $0000-$BFFF. The 256 byte block from $DF00-$DFFF is used for I/O devices
                      (        mon09.asm):00007         ;* etc. MON09 uses 256 bytes of memory at the very top of available RAM,
                      (        mon09.asm):00008         ;* and the user stack pointer is initialized to point to the beginning of
                      (        mon09.asm):00009         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (        mon09.asm):00010         ;*
                      (        mon09.asm):00011         ;* ?COPY.TXT 1985-2007 Dave Dunfield
                      (        mon09.asm):00012         ;* **See COPY.TXT**.
                      (        mon09.asm):00013         ;*
                      (        mon09.asm):00014         ;*
                      (        mon09.asm):00015         ;*   Modified for the 6809PC board by D. Werner 5/17/2025
                      (        mon09.asm):00016         ;*   Single 6551 UART supported at 9600,n,8,1
                      (        mon09.asm):00017         ;*
                      (        mon09.asm):00018         ;*   Commands have been removed to conserve
                      (        mon09.asm):00019         ;*   ROM space
                      (        mon09.asm):00020         
                      (        mon09.asm):00021         
                      (        mon09.asm):00022         ;* HARDWARE INFORMATION
     F000             (        mon09.asm):00023         ROM             EQU $F000                         ; MON09 code goes here
     BF00             (        mon09.asm):00024         RAM             EQU $BF00                         ; MON09 data goes here
     BFF0             (        mon09.asm):00025         STACK           EQU RAM+$F0                       ; MON09 Stack (Top of RAM)
                      (        mon09.asm):00026         ;*
     EF00             (        mon09.asm):00027         IOSPACE         EQU $EF00
     EF84             (        mon09.asm):00028         UART1DATA       EQU IOSPACE+$84                   ; SERIAL PORT 1 (I/O Card)
     EF85             (        mon09.asm):00029         UART1STATUS     EQU IOSPACE+$85                   ; SERIAL PORT 1 (I/O Card)
     EF86             (        mon09.asm):00030         UART1COMMAND    EQU IOSPACE+$86                   ; SERIAL PORT 1 (I/O Card)
     EF87             (        mon09.asm):00031         UART1CONTROL    EQU IOSPACE+$87                   ; SERIAL PORT 1 (I/O Card)
                      (        mon09.asm):00032         ;*
                      (        mon09.asm):00033         ;*
                      (        mon09.asm):00034                 ORG     RAM                               ;Internal MON09 variables
                      (        mon09.asm):00035         ;*
                      (        mon09.asm):00036         ;* MON09 INTERNAL MEMORY
                      (        mon09.asm):00037         ;*
BF00                  (        mon09.asm):00038         SWIADR:
BF00                  (        mon09.asm):00039                 RMB     2                                 ;SWI VECTOR ADDRESS
BF02                  (        mon09.asm):00040         SWI2ADR:
BF02                  (        mon09.asm):00041                 RMB     2                                 ;SWI2 VECTOR ADDRESS
BF04                  (        mon09.asm):00042         SWI3ADR:
BF04                  (        mon09.asm):00043                 RMB     2                                 ;SWI3 VECTOR ADDRESS
BF06                  (        mon09.asm):00044         IRQADR:
BF06                  (        mon09.asm):00045                 RMB     2                                 ;IRQ VECTOR ADDRESS
BF08                  (        mon09.asm):00046         FIRQADR:
BF08                  (        mon09.asm):00047                 RMB     2                                 ;FIRQ VECTOR ADDRESS
BF0A                  (        mon09.asm):00048         SAVCC:
BF0A                  (        mon09.asm):00049                 RMB     1                                 ;SAVED CONDITION CODE REGISTER
BF0B                  (        mon09.asm):00050         SAVA:
BF0B                  (        mon09.asm):00051                 RMB     1                                 ;SAVED 6809 A REGISTER
BF0C                  (        mon09.asm):00052         SAVB:
BF0C                  (        mon09.asm):00053                 RMB     1                                 ;SAVED 6809 B REGISTER
BF0D                  (        mon09.asm):00054         SAVDP:
BF0D                  (        mon09.asm):00055                 RMB     1                                 ;SAVED DIRECT PAGE REGISTER
BF0E                  (        mon09.asm):00056         SAVX:
BF0E                  (        mon09.asm):00057                 RMB     2                                 ;SAVED X REGISTER
BF10                  (        mon09.asm):00058         SAVY:
BF10                  (        mon09.asm):00059                 RMB     2                                 ;SAVED Y REGISTER
BF12                  (        mon09.asm):00060         SAVU:
BF12                  (        mon09.asm):00061                 RMB     2                                 ;SAVED U REGISTER
BF14                  (        mon09.asm):00062         SAVPC:
BF14                  (        mon09.asm):00063                 RMB     2                                 ;SAVED PROGRAM COUNTER
BF16                  (        mon09.asm):00064         SAVS:
BF16                  (        mon09.asm):00065                 RMB     2                                 ;SAVED S REGISTER
BF18                  (        mon09.asm):00066         TEMP:
BF18                  (        mon09.asm):00067                 RMB     2                                 ;TEMPORARY STORAGE
BF1A                  (        mon09.asm):00068         STPFLG:
BF1A                  (        mon09.asm):00069                 RMB     1                                 ;REGISTER DISPLAY WHILE STEPPING FLAG
BF1B                  (        mon09.asm):00070         PTRSAV:
BF1B                  (        mon09.asm):00071                 RMB     2                                 ;SINGLE STEP AND DISASSEMBLER CODE POINTER
BF1D                  (        mon09.asm):00072         INSTYP:
BF1D                  (        mon09.asm):00073                 RMB     1                                 ;DISASSEMBLED INSTRUCTION TYPE
BF1E                  (        mon09.asm):00074         POSBYT:
BF1E                  (        mon09.asm):00075                 RMB     1                                 ;POSTBYTE STORAGE AREA
BF1F                  (        mon09.asm):00076         BRKTAB:
BF1F                  (        mon09.asm):00077                 RMB     24                                ;BREAKPOINT TABLE
BF37                  (        mon09.asm):00078         DSPBUF:
BF37                  (        mon09.asm):00079                 RMB     50                                ;DISASSEMBLER DISPLAY BUFFER
BF69                  (        mon09.asm):00080         INSRAM:
BF69                  (        mon09.asm):00081                 RMB     7                                 ;INSTRUCTION EXECUTION ADDRESS
                      (        mon09.asm):00082         ;*
                      (        mon09.asm):00083                 ORG     ROM                               ;MONITOR CODE
                      (        mon09.asm):00084         ;*
                      (        mon09.asm):00085         ;* INITIALIZATIONS.
                      (        mon09.asm):00086         ;*
F000                  (        mon09.asm):00087         RESET:
F000 10CEBFF0         (        mon09.asm):00088                 LDS     #STACK                            ;SET UP STACK
                      (        mon09.asm):00089         
F004 8EBF00           (        mon09.asm):00090                 LDX     #SWIADR                           ;POINT TO START
F007                  (        mon09.asm):00091         CLRRAM:
F007 6F80             (        mon09.asm):00092                 CLR     ,X+                               ;CLEAR IT
F009 8CBF69           (        mon09.asm):00093                 CMPX    #INSRAM                           ;AT BUFFER?
F00C 25F9             (        mon09.asm):00094                 BLO     CLRRAM                            ;KEEP GOING
                      (        mon09.asm):00095         
F00E 1709E7           (        mon09.asm):00096                 LBSR    INIT                              ;INITIALIZE UART
F011 CCBF00           (        mon09.asm):00097                 LDD     #RAM                              ;DEFAULT STACK AT TOP OF RAM
F014 FDBF16           (        mon09.asm):00098                 STD     SAVS                              ;SAVE IT
F017 86D0             (        mon09.asm):00099                 LDA     #$D0                              ;SET CC
F019 B7BF0A           (        mon09.asm):00100                 STA     SAVCC                             ;SAVE IT
F01C                  (        mon09.asm):00101         MONITOR:
F01C 170607           (        mon09.asm):00102                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F01F 0A0D0A0D0A0D     (        mon09.asm):00103                 FCB     $0A,$0D,$0A,$0D,$0A,$0D
F025 20205F5F5F5F205F (        mon09.asm):00104                 FCC     '  ____ ___  ___  ___  ___  _____'
     5F5F20205F5F5F20
     205F5F5F20205F5F
     5F20205F5F5F5F5F
F045 0A0D             (        mon09.asm):00105                 FCB     $0A,$0D
F047 202F205F5F2F2820 (        mon09.asm):00106                 FCC     ' / __/( _ )/ _ \/ _ \/ _ \/ ___/'
     5F20292F205F205C
     2F205F205C2F205F
     205C2F205F5F5F2F
F067 0A0D             (        mon09.asm):00107                 FCB     $0A,$0D
F069 2F205F205C2F205F (        mon09.asm):00108                 FCC     '/ _ \/ _  / // /\_, / ___/ /__'
     20202F202F2F202F
     5C5F2C202F205F5F
     5F2F202F5F5F
F087 0A0D             (        mon09.asm):00109                 FCB     $0A,$0D
F089 5C5F5F5F2F5C5F5F (        mon09.asm):00110                 FCC     '\___/\___/\___//___/_/   \___/'
     5F2F5C5F5F5F2F2F
     5F5F5F2F5F2F2020
     205C5F5F5F2F
F0A7 0A0D             (        mon09.asm):00111                 FCB     $0A,$0D
F0A9 4D4F4E3039205665 (        mon09.asm):00112                 FCC     'MON09 Version 3.3a   1985-2007 Dave Dunfield'
     7273696F6E20332E
     3361202020313938
     352D323030372044
     6176652044756E66
     69656C64
F0D5 0A0D             (        mon09.asm):00113                 FCB     $0A,$0D
F0D7 2A2A205072657373 (        mon09.asm):00114                 FCC     '** Press ? for a list of commands **'
     203F20666F722061
     206C697374206F66
     20636F6D6D616E64
     73202A2A
F0FB 0AFF             (        mon09.asm):00115                 FCB     $0A,$FF
F0FD                  (        mon09.asm):00116         MAIN
F0FD 10CEBFF0         (        mon09.asm):00117                 LDS     #STACK                            ;FIX STACK IN CASE ERROR
F101 170522           (        mon09.asm):00118                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F104 2A2000           (        mon09.asm):00119                 FCN     '* '
F107 170533           (        mon09.asm):00120                 LBSR    GETECH                            ;GET CHARACTER
F10A 5F               (        mon09.asm):00121                 CLRB                                      ;INDICATE NO SECOND CHAR
                      (        mon09.asm):00122         ;* LOOK FOR COMMAND IN TABLE
F10B                  (        mon09.asm):00123         LOOKC
F10B 8EF143           (        mon09.asm):00124                 LDX     #CMDTAB                           ;POINT TO COMMAND TABLE
F10E 7FBF18           (        mon09.asm):00125                 CLR     TEMP                              ;INDICATE NO PARTIAL MATCH
F111                  (        mon09.asm):00126         LOOK1
F111 10A381           (        mon09.asm):00127                 CMPD    ,X++                              ;DOES IT MATCH
F114 271E             (        mon09.asm):00128                 BEQ     LOOK3                             ;YES IT DOES
F116 A11E             (        mon09.asm):00129                 CMPA    -2,X                              ;DOES FIRST CHAR MATCH?
F118 2603             (        mon09.asm):00130                 BNE     LOOK2                             ;NO, DON'T RECORD
F11A 7ABF18           (        mon09.asm):00131                 DEC     TEMP                              ;SET FLAG
F11D                  (        mon09.asm):00132         LOOK2
F11D 3002             (        mon09.asm):00133                 LEAX    2,X                               ;ADVANCE TO NEXT
F11F 6D84             (        mon09.asm):00134                 TST     ,X                                ;HAVE WE HIT THE END
F121 26EE             (        mon09.asm):00135                 BNE     LOOK1                             ;NO, KEEP LOOKING
F123 5D               (        mon09.asm):00136                 TSTB                                      ;ALREADY HAVE TWO CHARS?
F124 2615             (        mon09.asm):00137                 BNE     ERROR                             ;YES, ERROR
F126 F6BF18           (        mon09.asm):00138                 LDB     TEMP                              ;ANY PARTIAL MATCHES?
F129 2710             (        mon09.asm):00139                 BEQ     ERROR                             ;NO, ERROR
F12B 1F89             (        mon09.asm):00140                 TFR     A,B                               ;SAVE CHAR IN 'A'
F12D 17050D           (        mon09.asm):00141                 LBSR    GETECH                            ;GET NEXT CHAR
F130 1E89             (        mon09.asm):00142                 EXG     A,B                               ; SWAP BACK
F132 20D7             (        mon09.asm):00143                 BRA     LOOKC                             ;AND CONTINUE
                      (        mon09.asm):00144         ;* COMMAND WAS FOUND, EXECUTE IT
F134                  (        mon09.asm):00145         LOOK3
F134 170514           (        mon09.asm):00146                 LBSR    SPACE                             ;OUTPUT SPACE
F137 AD94             (        mon09.asm):00147                 JSR     [,X]                              ;EXECUTE COMMAND
F139 20C2             (        mon09.asm):00148                 BRA     MAIN                              ;AND RETURN
                      (        mon09.asm):00149         ;* ERROR HAS OCCURED
F13B                  (        mon09.asm):00150         ERROR
F13B 1704E8           (        mon09.asm):00151                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F13E 203F             (        mon09.asm):00152                 FCC     ' ?'
F140 FF               (        mon09.asm):00153                 FCB     $FF
F141 20BA             (        mon09.asm):00154                 BRA     MAIN                              ; TRY AGAIN
                      (        mon09.asm):00155         ;* COMMAND LOOKUP TABLE
F143                  (        mon09.asm):00156         CMDTAB
F143 444D             (        mon09.asm):00157                 FCB     'D','M'                           ; DISPLAY MEMORY
F145 F1BE             (        mon09.asm):00158                 FDB     MEMORY
F147 4449             (        mon09.asm):00159                 FCB     'D','I'                           ; DISASSEMBLE
F149 F2CB             (        mon09.asm):00160                 FDB     DISREG
F14B 4456             (        mon09.asm):00161                 FCB     'D','V'                           ;DISPLAY VECTORS
F14D F262             (        mon09.asm):00162                 FDB     DISVEC
F14F 4352             (        mon09.asm):00163                 FCB     'C','R'                           ;CHANGE REGISTER
F151 F347             (        mon09.asm):00164                 FDB     CHGREG
F153 4356             (        mon09.asm):00165                 FCB     'C','V'                           ;CHANGE VECTORS
F155 F299             (        mon09.asm):00166                 FDB     CHGVEC
F157 4500             (        mon09.asm):00167                 FCB     'E',0                             ;SUBSTITUTE MEMORY
F159 F21F             (        mon09.asm):00168                 FDB     SUBMEM
F15B 4C00             (        mon09.asm):00169                 FCB     'L',0                             ;DOWNLOAD
F15D F47C             (        mon09.asm):00170                 FDB     LOAD
F15F 4700             (        mon09.asm):00171                 FCB     'G',0                             ;GO
F161 F39C             (        mon09.asm):00172                 FDB     GOEXEC
F163 464D             (        mon09.asm):00173                 FCB     'F','M'                           ;FILL MEMORY
F165 F18C             (        mon09.asm):00174                 FDB     FILMEM
F167 5252             (        mon09.asm):00175                 FCB     'R','R'                           ;REPEATING READ
F169 F3C1             (        mon09.asm):00176                 FDB     RDLOOP
F16B 5257             (        mon09.asm):00177                 FCB     'R','W'                           ;REPEATING WRITE
F16D F3D1             (        mon09.asm):00178                 FDB     WRLOOP
F16F 5700             (        mon09.asm):00179                 FCB     'W',0                             ;WRITE MEMORY
F171 F20F             (        mon09.asm):00180                 FDB     WRIMEM
F173 4D4D             (        mon09.asm):00181                 FCB     'M','M'                           ;MOVE MEMORY
F175 F1A4             (        mon09.asm):00182                 FDB     MOVMEM
F177 5852             (        mon09.asm):00183                 FCB     'X','R'                           ;REPEATING 16 BIT READ
F179 F3F0             (        mon09.asm):00184                 FDB     XRLOOP
F17B 5857             (        mon09.asm):00185                 FCB     'X','W'                           ;REPEATING 16 BIT WRITE
F17D F400             (        mon09.asm):00186                 FDB     XWLOOP
F17F 2B00             (        mon09.asm):00187                 FCB     '+',0                             ;HEX ADDITION
F181 F41B             (        mon09.asm):00188                 FDB     HEXADD
F183 2D00             (        mon09.asm):00189                 FCB     '-',0                             ;HEX SUBTRACTION
F185 F42C             (        mon09.asm):00190                 FDB     HEXSUB
F187 3F00             (        mon09.asm):00191                 FCB     '?',0                             ;HELP COMMAND
F189 F44E             (        mon09.asm):00192                 FDB     HELP
F18B 00               (        mon09.asm):00193                 FCB     0                                 ;MARK END OF TABLE
                      (        mon09.asm):00194         ;*
                      (        mon09.asm):00195         ;* 'F' - FILL MEMORY
                      (        mon09.asm):00196         ;*
F18C                  (        mon09.asm):00197         FILMEM
F18C 1703DE           (        mon09.asm):00198                 LBSR    GETRNG                            ;GET ADDRESSES
F18F FDBF18           (        mon09.asm):00199                 STD     TEMP                              ;SAVE IT
F192 1704B6           (        mon09.asm):00200                 LBSR    SPACE                             ;SPACE OVER
F195 170439           (        mon09.asm):00201                 LBSR    GETBYT                            ;GET DATA BYTE
F198 26A1             (        mon09.asm):00202                 BNE     ERROR                             ;INVALID
F19A                  (        mon09.asm):00203         FILL1
F19A A780             (        mon09.asm):00204                 STA     ,X+                               ;WRITE IT
F19C BCBF18           (        mon09.asm):00205                 CMPX    TEMP                              ;ARE WE THERE
F19F 23F9             (        mon09.asm):00206                 BLS     FILL1                             ;NO, KEEP GOING
F1A1 1604AD           (        mon09.asm):00207                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00208         ;*
                      (        mon09.asm):00209         ;* 'MM' - MOVE MEMORY
                      (        mon09.asm):00210         ;*
F1A4                  (        mon09.asm):00211         MOVMEM
F1A4 1703C6           (        mon09.asm):00212                 LBSR    GETRNG                            ;GET A RANGE
F1A7 FDBF18           (        mon09.asm):00213                 STD     TEMP                              ;SAVE LAST VALUE
F1AA 17049E           (        mon09.asm):00214                 LBSR    SPACE                             ;SEPERATOR
F1AD 1703DA           (        mon09.asm):00215                 LBSR    GETADR                            ;GET DEST ADDRESS
F1B0 1F02             (        mon09.asm):00216                 TFR     D,Y                               ;SET IT UP
F1B2                  (        mon09.asm):00217         MOVM1
F1B2 A680             (        mon09.asm):00218                 LDA     ,X+                               ;GET SOURCE BYTE
F1B4 A7A0             (        mon09.asm):00219                 STA     ,Y+                               ;SAVE IN DEST
F1B6 BCBF18           (        mon09.asm):00220                 CMPX    TEMP                              ;SAVE IT
F1B9 23F7             (        mon09.asm):00221                 BLS     MOVM1                             ;KEEP MOVEING
F1BB 160493           (        mon09.asm):00222                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00223         ;*
                      (        mon09.asm):00224         ;* 'DM' - DISPLAY MEMORY
                      (        mon09.asm):00225         ;*
F1BE                  (        mon09.asm):00226         MEMORY
F1BE 1703AC           (        mon09.asm):00227                 LBSR    GETRNG                            ;GET ADDRESS
F1C1 FDBF18           (        mon09.asm):00228                 STD     TEMP                              ;SAVE
F1C4                  (        mon09.asm):00229         MEM1
F1C4 17048A           (        mon09.asm):00230                 LBSR    LFCR                              ;NEW LINE
F1C7 1704A5           (        mon09.asm):00231                 LBSR    CHKCHR                            ;CHECK FOR CHAR
F1CA 1027FF2F         (        mon09.asm):00232                 LBEQ    MAIN                              ;ESCAPE, QUIT
F1CE 1F10             (        mon09.asm):00233                 TFR     X,D                               ;GET ADDRESS
F1D0 3406             (        mon09.asm):00234                 PSHS    A,B                               ;SAVE FOR LATER
F1D2 170437           (        mon09.asm):00235                 LBSR    WRDOUT                            ;DISPLAY
F1D5 C610             (        mon09.asm):00236                 LDB     #16                               ;DISPLAY 16 TO A LINE
F1D7                  (        mon09.asm):00237         MEM2
F1D7 170471           (        mon09.asm):00238                 LBSR    SPACE                             ;OUTPUT A SPACE
F1DA C503             (        mon09.asm):00239                 BITB    #3                                ;ON A BOUNDARY?
F1DC 2603             (        mon09.asm):00240                 BNE     MEM3                              ;NO, SPACE
F1DE 17046A           (        mon09.asm):00241                 LBSR    SPACE                             ;EXTRA SPACE
F1E1                  (        mon09.asm):00242         MEM3
F1E1 A680             (        mon09.asm):00243                 LDA     ,X+                               ;GET BYTE
F1E3 17042A           (        mon09.asm):00244                 LBSR    HEXOUT                            ;DISPLAY
F1E6 5A               (        mon09.asm):00245                 DECB                                      ;REDUCE COUNT
F1E7 26EE             (        mon09.asm):00246                 BNE     MEM2                              ;CONTINUE
F1E9 C604             (        mon09.asm):00247                 LDB     #4                                ;FOUR SPACE
F1EB                  (        mon09.asm):00248         MEM4
F1EB 17045D           (        mon09.asm):00249                 LBSR    SPACE                             ;DISPLAY A SPACE
F1EE 5A               (        mon09.asm):00250                 DECB                                      ;REDUCE COUNT
F1EF 26FA             (        mon09.asm):00251                 BNE     MEM4                              ; CONTINUE
F1F1 3510             (        mon09.asm):00252                 PULS    X                                 ;RESTORE X
F1F3 C610             (        mon09.asm):00253                 LDB     #16                               ;COUNT OF 16
F1F5                  (        mon09.asm):00254         MEM5
F1F5 A680             (        mon09.asm):00255                 LDA     ,X+                               ;GET CHAR
F1F7 8120             (        mon09.asm):00256                 CMPA    #' '                              ; <SPACE
F1F9 2504             (        mon09.asm):00257                 BLO     MEM6                              ; CONVERT TO DOT
F1FB 817F             (        mon09.asm):00258                 CMPA    #$7F                              ; PRINTABLE?
F1FD 2502             (        mon09.asm):00259                 BLO     MEM7                              ; OK TO DISPLAY
F1FF                  (        mon09.asm):00260         MEM6
F1FF 862E             (        mon09.asm):00261                 LDA     #'.'                              ;CHANGE TO DOT
F201                  (        mon09.asm):00262         MEM7
F201 170464           (        mon09.asm):00263                 LBSR    PUTCHR                            ;OUTPUT
F204 5A               (        mon09.asm):00264                 DECB                                      ;REDUCE COUNT
F205 26EE             (        mon09.asm):00265                 BNE     MEM5                              ; DISPLAY THEM ALL
F207 BCBF18           (        mon09.asm):00266                 CMPX    TEMP                              ; PAST END?
F20A 23B8             (        mon09.asm):00267                 BLS     MEM1                              ; NO, KEEP GOING
F20C 160442           (        mon09.asm):00268                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00269         ;*
                      (        mon09.asm):00270         ;* 'W' - WRITE TO MEMORY
                      (        mon09.asm):00271         ;*
F20F                  (        mon09.asm):00272         WRIMEM
F20F 170378           (        mon09.asm):00273                 LBSR    GETADR                            ;GET ADDRESS
F212 1F01             (        mon09.asm):00274                 TFR     D,X                               ;SET IT UP
F214 170434           (        mon09.asm):00275                 LBSR    SPACE                             ; STEP OVER
F217 1703B7           (        mon09.asm):00276                 LBSR    GETBYT                            ;GET BYTE
F21A A784             (        mon09.asm):00277                 STA     ,X                                ;WRITE TO MEMORY
F21C 160432           (        mon09.asm):00278                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00279         ;*
                      (        mon09.asm):00280         ;* 'E' - EDIT MEMORY
                      (        mon09.asm):00281         ;*
F21F                  (        mon09.asm):00282         SUBMEM
F21F 170368           (        mon09.asm):00283                 LBSR    GETADR                            ;GET ADDRESS
F222 1F01             (        mon09.asm):00284                 TFR     D,X                               ;COPY
F224                  (        mon09.asm):00285         SUBM1
F224 17042A           (        mon09.asm):00286                 LBSR    LFCR                              ; NEW LINE
F227 1F10             (        mon09.asm):00287                 TFR     X,D                               ;GET ADDRESS
F229 1703E0           (        mon09.asm):00288                 LBSR    WRDOUT                            ; OUTPUT
F22C C608             (        mon09.asm):00289                 LDB     #8                                ;NEW COUNT
F22E                  (        mon09.asm):00290         SUBM2
F22E 17041A           (        mon09.asm):00291                 LBSR    SPACE                             ; SEPERATOR
F231 A684             (        mon09.asm):00292                 LDA     ,X                                ;GET BYTE
F233 1703DA           (        mon09.asm):00293                 LBSR    HEXOUT                            ; DISPLAY
F236 862D             (        mon09.asm):00294                 LDA     #'-'                              ; PROMPT
F238 17042D           (        mon09.asm):00295                 LBSR    PUTCHR                            ; OUTPUT
F23B 170393           (        mon09.asm):00296                 LBSR    GETBYT                            ; GET A BYTE
F23E 2609             (        mon09.asm):00297                 BNE     SUBM4                             ; INVALID
F240 A784             (        mon09.asm):00298                 STA     ,X                                ;RESAVE
F242                  (        mon09.asm):00299         SUBM3
F242 3001             (        mon09.asm):00300                 LEAX    1,X                               ;ADVANCE
F244 5A               (        mon09.asm):00301                 DECB                                      ;REDUCE COUNT
F245 26E7             (        mon09.asm):00302                 BNE     SUBM2                             ;MORE, CONTINUE
F247 20DB             (        mon09.asm):00303                 BRA     SUBM1                             ;NEW LINE
F249                  (        mon09.asm):00304         SUBM4
F249 810D             (        mon09.asm):00305                 CMPA    #$0D                              ;CR?
F24B 10270402         (        mon09.asm):00306                 LBEQ    LFCR                              ;IF SO, QUIT
F24F 8120             (        mon09.asm):00307                 CMPA    #' '                              ;SPACE?
F251 2605             (        mon09.asm):00308                 BNE     SUBM5                             ;NO
F253 1703F5           (        mon09.asm):00309                 LBSR    SPACE                             ;FILL FOR TWO DIGITS
F256 20EA             (        mon09.asm):00310                 BRA     SUBM3                             ;ADVANCE
F258                  (        mon09.asm):00311         SUBM5
F258 8108             (        mon09.asm):00312                 CMPA    #$08                              ; BACKSPACE?
F25A 1026FEDD         (        mon09.asm):00313                 LBNE    ERROR                             ; INVALID
F25E 301F             (        mon09.asm):00314                 LEAX    -1,X                              ; BACKUP
F260 20C2             (        mon09.asm):00315                 BRA     SUBM1                             ; NEW LINE
                      (        mon09.asm):00316         ;*
                      (        mon09.asm):00317         ;* 'DV' - DISPLAY VECTORS
                      (        mon09.asm):00318         ;*
F262                  (        mon09.asm):00319         DISVEC
F262 8EF278           (        mon09.asm):00320                 LDX     #VECTXT                           ; POINT TO VECTOR TEXT
F265 108EBF00         (        mon09.asm):00321                 LDY     #SWIADR                           ; POINT TO FIRST VECTOR
F269                  (        mon09.asm):00322         DISV1
F269 1703C4           (        mon09.asm):00323                 LBSR    WRLIN                             ; OUTPUT A MESSAGE
F26C ECA1             (        mon09.asm):00324                 LDD     ,Y++                              ; GET A VECTOR
F26E 17039B           (        mon09.asm):00325                 LBSR    WRDOUT                            ; OUTPUT VECTOR ADDRESS
F271 A684             (        mon09.asm):00326                 LDA     ,X                                ;MORE TEXT?
F273 26F4             (        mon09.asm):00327                 BNE     DISV1                             ; AND CONTINUE
F275 1603D9           (        mon09.asm):00328                 LBRA    LFCR                              ; NEW LINE
F278                  (        mon09.asm):00329         VECTXT
F278 5357493D00       (        mon09.asm):00330                 FCN     'SWI='
F27D 20535749323D00   (        mon09.asm):00331                 FCN     ' SWI2='
F284 20535749333D00   (        mon09.asm):00332                 FCN     ' SWI3='
F28B 204952513D00     (        mon09.asm):00333                 FCN     ' IRQ='
F291 20464952513D00   (        mon09.asm):00334                 FCN     ' FIRQ='
F298 00               (        mon09.asm):00335                 FCB     0                                 ; END OF TABLE
                      (        mon09.asm):00336         ;*
                      (        mon09.asm):00337         ;* 'CV' - CHANGE VECTOR
                      (        mon09.asm):00338         ;*
F299                  (        mon09.asm):00339         CHGVEC
F299 1703A1           (        mon09.asm):00340                 LBSR    GETECH                            ;GET CHAR & ECHO
F29C 8153             (        mon09.asm):00341                 CMPA    #'S'                              ;SWI?
F29E 2604             (        mon09.asm):00342                 BNE     CHGV1                             ;NO
F2A0 8631             (        mon09.asm):00343                 LDA     #'1'                              ;SAME AS '1'
F2A2 200E             (        mon09.asm):00344                 BRA     CHGV3                             ;CONTINUE
F2A4                  (        mon09.asm):00345         CHGV1
F2A4 8149             (        mon09.asm):00346                 CMPA    #'I'                              ;IRQ?
F2A6 2604             (        mon09.asm):00347                 BNE     CHGV2                             ;NO, ITS OK
F2A8 8634             (        mon09.asm):00348                 LDA     #'4'                              ;CONVERT
F2AA 2006             (        mon09.asm):00349                 BRA     CHGV3                             ;AND CONTINUE
F2AC                  (        mon09.asm):00350         CHGV2
F2AC 8146             (        mon09.asm):00351                 CMPA    #'F'                              ;FIRQ?
F2AE 2602             (        mon09.asm):00352                 BNE     CHGV3                             ;NO
F2B0 8635             (        mon09.asm):00353                 LDA     #'5'                              ;CONVERT
F2B2                  (        mon09.asm):00354         CHGV3
F2B2 8031             (        mon09.asm):00355                 SUBA    #'1'                              ;TEST IT
F2B4 8104             (        mon09.asm):00356                 CMPA    #4                                ;CHECK RANGE
F2B6 1022FE81         (        mon09.asm):00357                 LBHI    ERROR                             ; INVALID
F2BA 8EBF00           (        mon09.asm):00358                 LDX     #SWIADR                           ;POINT TO IT
F2BD                  (        mon09.asm):00359         CHGV4
F2BD 48               (        mon09.asm):00360                 LSLA                                      ;X2 FOR 2 BYTE ENTRIES
F2BE 3086             (        mon09.asm):00361                 LEAX    A,X     ADVANCE TO VECTOR
F2C0 170388           (        mon09.asm):00362                 LBSR    SPACE                             ; SEPERATOR
F2C3 1702C4           (        mon09.asm):00363                 LBSR    GETADR                            ;GET NEW VALUE
F2C6 ED84             (        mon09.asm):00364                 STD     ,X                                ; WRITE NEW VECTOR
F2C8 160386           (        mon09.asm):00365                 LBRA    LFCR                              ; NEW LINE & EXIT
                      (        mon09.asm):00366         ;*
                      (        mon09.asm):00367         ;* 'DR' - DISPLAY REGISTERS
                      (        mon09.asm):00368         ;*
F2CB                  (        mon09.asm):00369         DISREG
F2CB 8EF315           (        mon09.asm):00370                 LDX     #REGTXT                           ;POINT TO TEXT
F2CE 108EBF0A         (        mon09.asm):00371                 LDY     #SAVCC                            ;POINT TO VALUE
F2D2 8D31             (        mon09.asm):00372                 BSR     RSUB1                             ;'CC='
F2D4 170359           (        mon09.asm):00373                 LBSR    WRLIN                             ;' ['
F2D7 CEF33F           (        mon09.asm):00374                 LDU     #CCBITS                           ;POINT TO BIT TABLE
F2DA E63F             (        mon09.asm):00375                 LDB     -1,Y                              ;GET BITS BACK
F2DC 3420             (        mon09.asm):00376                 PSHS    Y                                 ;SAVE POINTER
F2DE 108E0008         (        mon09.asm):00377                 LDY     #8                                ;EIGHT BITS IN BYTE
F2E2                  (        mon09.asm):00378         REGB1
F2E2 A6C0             (        mon09.asm):00379                 LDA     ,U+                               ; GET BIT IDENTIFIER
F2E4 58               (        mon09.asm):00380                 ASLB                                      ;IS IT SET?
F2E5 2502             (        mon09.asm):00381                 BCS     RBITS                             ;YES, DISPLAY IT
F2E7 862D             (        mon09.asm):00382                 LDA     #'-'                              ;NO, DISPLAY DASH
F2E9                  (        mon09.asm):00383         RBITS
F2E9 17037C           (        mon09.asm):00384                 LBSR    PUTCHR                            ; OUTPUT A CHARACTER
F2EC 313F             (        mon09.asm):00385                 LEAY    -1,Y                              ; REDUCE COUNT
F2EE 26F2             (        mon09.asm):00386                 BNE     REGB1                             ; MORE TO GO
F2F0 3520             (        mon09.asm):00387                 PULS    Y                                 ; RESTORE Y
F2F2 8D11             (        mon09.asm):00388                 BSR     RSUB1                             ;'] A='
F2F4 8D0F             (        mon09.asm):00389                 BSR     RSUB1                             ;' B='
F2F6 8D0D             (        mon09.asm):00390                 BSR     RSUB1                             ;' DP='
F2F8 8D13             (        mon09.asm):00391                 BSR     RSUB2                             ;' X='
F2FA 8D11             (        mon09.asm):00392                 BSR     RSUB2                             ;' Y='
F2FC 8D0F             (        mon09.asm):00393                 BSR     RSUB2                             ;' U='
F2FE 8D0D             (        mon09.asm):00394                 BSR     RSUB2                             ;' PC='
F300 8D0B             (        mon09.asm):00395                 BSR     RSUB2                             ;' S='
F302 16034C           (        mon09.asm):00396                 LBRA    LFCR                              ;QUIT
                      (        mon09.asm):00397         ;* DISPLAY 8 BIT REGISTER VALUE
F305                  (        mon09.asm):00398         RSUB1
F305 170328           (        mon09.asm):00399                 LBSR    WRLIN                             ;OUTPUT BYTE VALUE
F308 A6A0             (        mon09.asm):00400                 LDA     ,Y+                               ; GET REGISTER VALUE
F30A 160303           (        mon09.asm):00401                 LBRA    HEXOUT                            ;OUTPUT IN HEX
                      (        mon09.asm):00402         ;* DISPLAY 16 BIT REGISTER VALUE
F30D                  (        mon09.asm):00403         RSUB2
F30D 170320           (        mon09.asm):00404                 LBSR    WRLIN                             ; OUTPUT WORD VALUE
F310 ECA1             (        mon09.asm):00405                 LDD     ,Y++                              ; GET REGISTER VALUE
F312 1602F7           (        mon09.asm):00406                 LBRA    WRDOUT                            ; OUTPUT IN HEX
                      (        mon09.asm):00407         ;* TABLE OF TEXT FOR REGISTER DISPLAY
F315                  (        mon09.asm):00408         REGTXT
F315 43433D00         (        mon09.asm):00409                 FCN     'CC='
F319 205B00           (        mon09.asm):00410                 FCN     ' ['
F31C 5D20413D00       (        mon09.asm):00411                 FCN     '] A='
F321 20423D00         (        mon09.asm):00412                 FCN     ' B='
F325 2044503D00       (        mon09.asm):00413                 FCN     ' DP='
F32A 20583D00         (        mon09.asm):00414                 FCN     ' X='
F32E 20593D00         (        mon09.asm):00415                 FCN     ' Y='
F332 20553D00         (        mon09.asm):00416                 FCN     ' U='
F336 2050433D00       (        mon09.asm):00417                 FCN     ' PC='
F33B 20533D00         (        mon09.asm):00418                 FCN     ' S='
                      (        mon09.asm):00419         ;* TABLE OF CONDITION CODE BIT MEANINGS
F33F                  (        mon09.asm):00420         CCBITS
F33F 454648494E5A5643 (        mon09.asm):00421                 FCC     'EFHINZVC'
                      (        mon09.asm):00422         ;*
                      (        mon09.asm):00423         ;* 'CR' - CHANGE REGISTER
                      (        mon09.asm):00424         ;*
F347                  (        mon09.asm):00425         CHGREG
F347 1702F3           (        mon09.asm):00426                 LBSR    GETECH      GET OPERAND
F34A 8120             (        mon09.asm):00427                 CMPA    #' '        A+B?
F34C 2727             (        mon09.asm):00428                 BEQ     CHG4        YES
F34E 8EF392           (        mon09.asm):00429                 LDX     #CHGTAB     POINT TO TABLE
F351 5F               (        mon09.asm):00430                 CLRB    ZERO INDICATOR
F352                  (        mon09.asm):00431         CHG1
F352 A184             (        mon09.asm):00432                 CMPA    ,X      IS THIS IT?
F354 2708             (        mon09.asm):00433                 BEQ     CHG2        YES
F356 5C               (        mon09.asm):00434                 INCB    ADVANCE COUNT
F357 6D80             (        mon09.asm):00435                 TST     ,X+     END OF TABLE
F359 26F7             (        mon09.asm):00436                 BNE     CHG1        NO, KEEP TRYING
F35B 16FDDD           (        mon09.asm):00437                 LBRA    ERROR       INDICATE ERROR
F35E                  (        mon09.asm):00438         CHG2
F35E 1702EA           (        mon09.asm):00439                 LBSR    SPACE       OUTPUT SPACE
F361 8EBF0A           (        mon09.asm):00440                 LDX     #SAVCC      POINT TO START OF REGISTERS
F364 C104             (        mon09.asm):00441                 CMPB    #4      16 BIT?
F366 241B             (        mon09.asm):00442                 BHS     R16     YES
F368 3085             (        mon09.asm):00443                 LEAX    B,X     OFFSET TO ADDRESS
F36A 170264           (        mon09.asm):00444                 LBSR    GETBYT      GET NEW VALUE
F36D 1026FDCA         (        mon09.asm):00445                 LBNE    ERROR       INVALID
F371 A784             (        mon09.asm):00446                 STA     ,X      SAVE IN REGISTER
F373 201A             (        mon09.asm):00447                 BRA     CHG3        AND QUIT
F375                  (        mon09.asm):00448         CHG4
F375 1702AE           (        mon09.asm):00449                 LBSR    WRMSG       OUTPUT MESSAGE
F378 5B41425D2000     (        mon09.asm):00450                 FCN     '[AB] '
F37E 8EBF0B           (        mon09.asm):00451                 LDX     #SAVA       POINT TO 'D'
F381 2007             (        mon09.asm):00452                 BRA     R17     MAKE LIKE 16 BIT REG
F383                  (        mon09.asm):00453         R16
F383 3004             (        mon09.asm):00454                 LEAX    4,X     OFFSET TO 16 BIT REGISTERS
F385 C004             (        mon09.asm):00455                 SUBB    #4      CONVERT TO ZERO ORIGIN
F387 58               (        mon09.asm):00456                 LSLB    DOUBLE FOR WORD VALUES
F388 3085             (        mon09.asm):00457                 LEAX    B,X     MOVE TO CORRECT OFFSET
F38A                  (        mon09.asm):00458         R17
F38A 1701FD           (        mon09.asm):00459                 LBSR    GETADR      GET WORD VALUE
F38D ED84             (        mon09.asm):00460                 STD     ,X      SET REGISTER VALUE
F38F                  (        mon09.asm):00461         CHG3
F38F 1602BF           (        mon09.asm):00462                 LBRA    LFCR        QUIT
                      (        mon09.asm):00463         ;* TABLE OF REGISTER NAMES
F392                  (        mon09.asm):00464         CHGTAB
F392 4341424458595550 (        mon09.asm):00465                 FCN     'CABDXYUPS'
     5300
                      (        mon09.asm):00466         ;*
                      (        mon09.asm):00467         ;* 'G' - GO (EXECUTE)
                      (        mon09.asm):00468         ;*
F39C                  (        mon09.asm):00469         GOEXEC
F39C 1701B6           (        mon09.asm):00470                 LBSR    GETPC       GET ADDRESS
F39F 1702AF           (        mon09.asm):00471                 LBSR    LFCR        NEW LINE
F3A2 10FEBF16         (        mon09.asm):00472                 LDS     SAVS        RESTORE STACK POINTER
F3A6 B6BF0A           (        mon09.asm):00473                 LDA     SAVCC       GET SAVED CC
F3A9 F6BF0D           (        mon09.asm):00474                 LDB     SAVDP       GET SAVED DPR
F3AC 3406             (        mon09.asm):00475                 PSHS    A,B     SAVE ON STACK FOR LAST RESTORE
F3AE FCBF0B           (        mon09.asm):00476                 LDD     SAVA        RESTORE A, B REGISTERS
F3B1 BEBF0E           (        mon09.asm):00477                 LDX     SAVX        RESTORE X REGISTER
F3B4 10BEBF10         (        mon09.asm):00478                 LDY     SAVY        RESTORE Y REGISTER
F3B8 FEBF12           (        mon09.asm):00479                 LDU     SAVU        RESTORE U REGISTER
F3BB 3509             (        mon09.asm):00480                 PULS    CC,DP       RESTORE CC + DP
F3BD 6E9FBF14         (        mon09.asm):00481                 JMP     [SAVPC]     EXECUTE USER PGM
                      (        mon09.asm):00482         ;*
                      (        mon09.asm):00483         ;* 'RR' - REPEATING READ
                      (        mon09.asm):00484         ;*
F3C1                  (        mon09.asm):00485         RDLOOP:
F3C1 1701C6           (        mon09.asm):00486                 LBSR    GETADR                            ;GET ADDRESS
F3C4 1F01             (        mon09.asm):00487                 TFR     D,X                               ;SET UP 'X'
F3C6 170288           (        mon09.asm):00488                 LBSR    LFCR                              ;NEW LINE
F3C9                  (        mon09.asm):00489         RDLP1:
F3C9 A684             (        mon09.asm):00490                 LDA     ,X                                ;READ LOCATION
F3CB 1702A1           (        mon09.asm):00491                 LBSR    CHKCHR                            ;ABORT?
F3CE 26F9             (        mon09.asm):00492                 BNE     RDLP1                             ;NO, ITS OK
F3D0 39               (        mon09.asm):00493                 RTS
                      (        mon09.asm):00494         ;*
                      (        mon09.asm):00495         ;* 'RW' - REPEATING WRITE
                      (        mon09.asm):00496         ;*
F3D1                  (        mon09.asm):00497         WRLOOP:
F3D1 1701B6           (        mon09.asm):00498                 LBSR    GETADR                            ;GET ADDRESS
F3D4 1F01             (        mon09.asm):00499                 TFR     D,X                               ;SET UP 'X'
F3D6 170272           (        mon09.asm):00500                 LBSR    SPACE                             ;SPACE OVER
F3D9 1701F5           (        mon09.asm):00501                 LBSR    GETBYT                            ;GET DATA
F3DC 1026FD5B         (        mon09.asm):00502                 LBNE    ERROR                             ;INVALID
F3E0 3402             (        mon09.asm):00503                 PSHS    A                                 ;SAVE ACCA
F3E2 17026C           (        mon09.asm):00504                 LBSR    LFCR                              ;NEW LINE
F3E5                  (        mon09.asm):00505         WRLP1:
F3E5 A6E4             (        mon09.asm):00506                 LDA     ,S                                ;GET CHAR
F3E7 A784             (        mon09.asm):00507                 STA     ,X                                ;WRITE IT OUT
F3E9 170283           (        mon09.asm):00508                 LBSR    CHKCHR                            ;ABORT COMMAND?
F3EC 26F7             (        mon09.asm):00509                 BNE     WRLP1                             ;CONTINUE
F3EE 3582             (        mon09.asm):00510                 PULS    A,PC                              ;GO HOME
                      (        mon09.asm):00511         ;*
                      (        mon09.asm):00512         ;* 'XR' - REPEATING 16 BIT READ
                      (        mon09.asm):00513         ;*
F3F0                  (        mon09.asm):00514         XRLOOP
F3F0 170197           (        mon09.asm):00515                 LBSR    GETADR      GET ADDRESS
F3F3 1F01             (        mon09.asm):00516                 TFR     D,X     SET UP 'X'
F3F5 170259           (        mon09.asm):00517                 LBSR    LFCR        NEW LINE
F3F8                  (        mon09.asm):00518         XRLP1
F3F8 EC84             (        mon09.asm):00519                 LDD     ,X      READ LOCATION
F3FA 170272           (        mon09.asm):00520                 LBSR    CHKCHR      ABORT?
F3FD 26F9             (        mon09.asm):00521                 BNE     XRLP1       NO, ITS OK
F3FF 39               (        mon09.asm):00522                 RTS
                      (        mon09.asm):00523         ;*
                      (        mon09.asm):00524         ;* 'XW' - REPEATING 16 BITWRITE
                      (        mon09.asm):00525         ;*
F400                  (        mon09.asm):00526         XWLOOP
F400 170187           (        mon09.asm):00527                 LBSR    GETADR      GET ADDRESS
F403 1F01             (        mon09.asm):00528                 TFR     D,X     SET UP 'X'
F405 170243           (        mon09.asm):00529                 LBSR    SPACE       SPACE OVER
F408 17017F           (        mon09.asm):00530                 LBSR    GETADR      GET DATA
F40B 3406             (        mon09.asm):00531                 PSHS    A,B     SAVE ACCA
F40D 170241           (        mon09.asm):00532                 LBSR    LFCR        NEW LINE
F410                  (        mon09.asm):00533         XWLP1
F410 ECE4             (        mon09.asm):00534                 LDD     ,S      GET CHAR
F412 ED84             (        mon09.asm):00535                 STD     ,X      WRITE IT OUT
F414 170258           (        mon09.asm):00536                 LBSR    CHKCHR      ABORT COMMAND?
F417 26F7             (        mon09.asm):00537                 BNE     XWLP1       CONTINUE
F419 3586             (        mon09.asm):00538                 PULS    A,B,PC      GO HOME
                      (        mon09.asm):00539         ;*
                      (        mon09.asm):00540         ;* '+' - HEXIDECIMAL ADDITION
                      (        mon09.asm):00541         ;*
F41B                  (        mon09.asm):00542         HEXADD
F41B 17016C           (        mon09.asm):00543                 LBSR    GETADR      GET FIRST VALUE
F41E 3406             (        mon09.asm):00544                 PSHS    A,B     SAVE IT
F420 862B             (        mon09.asm):00545                 LDA     #'+'        PLUS SIGN
F422 170243           (        mon09.asm):00546                 LBSR    PUTCHR      DISPLAY
F425 170162           (        mon09.asm):00547                 LBSR    GETADR      GET SECOND VALUE
F428 E3E4             (        mon09.asm):00548                 ADDD    ,S      PERFORM ADDITION
F42A 2013             (        mon09.asm):00549                 BRA     HEXSHO      DISPLAY IT
                      (        mon09.asm):00550         ;*
                      (        mon09.asm):00551         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (        mon09.asm):00552         ;*
F42C                  (        mon09.asm):00553         HEXSUB
F42C 17015B           (        mon09.asm):00554                 LBSR    GETADR      GET FIRST
F42F 3406             (        mon09.asm):00555                 PSHS    A,B     SAVE IT
F431 862D             (        mon09.asm):00556                 LDA     #'-'        MINUS SIGN
F433 170232           (        mon09.asm):00557                 LBSR    PUTCHR      DISPLAY
F436 170151           (        mon09.asm):00558                 LBSR    GETADR      GET SECOND ADDRESS
F439 3406             (        mon09.asm):00559                 PSHS    A,B     SAVE IT
F43B EC62             (        mon09.asm):00560                 LDD     2,S     GET FIRST VALUE
F43D A3E1             (        mon09.asm):00561                 SUBD    ,S++        PERFORM SUBTRACTION
F43F                  (        mon09.asm):00562         HEXSHO
F43F EDE4             (        mon09.asm):00563                 STD     ,S      SAVE RESULT
F441 863D             (        mon09.asm):00564                 LDA     #'='        =ALS SIGN
F443 170222           (        mon09.asm):00565                 LBSR    PUTCHR      DISPLAY
F446 3506             (        mon09.asm):00566                 PULS    A,B     RESTORE RESULT
F448 1701C1           (        mon09.asm):00567                 LBSR    WRDOUT      OUTPUT
F44B 160203           (        mon09.asm):00568                 LBRA    LFCR        NEW LINE & RETURN
                      (        mon09.asm):00569         ;*
                      (        mon09.asm):00570         ;* '?' - HELP COMMAND
                      (        mon09.asm):00571         ;*
F44E                  (        mon09.asm):00572         HELP
F44E 8EF79D           (        mon09.asm):00573                 LDX     #HTEXT      POINT TO HELP TEXT
F451                  (        mon09.asm):00574         HLP1
F451 C619             (        mon09.asm):00575                 LDB     #25     COLUMN COUNTER
F453                  (        mon09.asm):00576         HLP2
F453 A680             (        mon09.asm):00577                 LDA     ,X+     GET CHAR FROM TEXT
F455 2718             (        mon09.asm):00578                 BEQ     HLP4        EXIT THIS LINE
F457 817C             (        mon09.asm):00579                 CMPA    #'|'        SEPERATOR?
F459 2706             (        mon09.asm):00580                 BEQ     HLP3        YES, EXIT
F45B 17020A           (        mon09.asm):00581                 LBSR    PUTCHR      OUTPUT
F45E 5A               (        mon09.asm):00582                 DECB    BACKUP
F45F 20F2             (        mon09.asm):00583                 BRA     HLP2        NEXT
F461                  (        mon09.asm):00584         HLP3
F461 1701E7           (        mon09.asm):00585                 LBSR    SPACE       OUTPUT SPACE
F464 5A               (        mon09.asm):00586                 DECB    REDUCE COUNT
F465 26FA             (        mon09.asm):00587                 BNE     HLP3        KEEP GOING
F467 1701BC           (        mon09.asm):00588                 LBSR    WRMSG       OUTPUT MESSAGE
F46A 2D2000           (        mon09.asm):00589                 FCN     '- '        SEPERATOR
F46D 20E4             (        mon09.asm):00590                 BRA     HLP2        AND CONTINUE
F46F                  (        mon09.asm):00591         HLP4
F46F 1701DF           (        mon09.asm):00592                 LBSR    LFCR        NEW LINE
F472 1701FA           (        mon09.asm):00593                 LBSR    CHKCHR      TEST FOR CHARACTER ENTERED
F475 2704             (        mon09.asm):00594                 BEQ     HLP5        IF SO, EXIT
F477 A684             (        mon09.asm):00595                 LDA     ,X      IS THIS THE END?
F479 2AD6             (        mon09.asm):00596                 BPL     HLP1        NO, KEEP GOING
F47B                  (        mon09.asm):00597         HLP5
F47B 39               (        mon09.asm):00598                 RTS
                      (        mon09.asm):00599         ;*
                      (        mon09.asm):00600         ;* 'DL' - DOWNLOAD
                      (        mon09.asm):00601         ;*
F47C                  (        mon09.asm):00602         LOAD
F47C 1701D2           (        mon09.asm):00603                 LBSR    LFCR        NEW LINE
F47F                  (        mon09.asm):00604         DLO1
F47F 8D0E             (        mon09.asm):00605                 BSR     DLOAD       DOWNLOAD RECORD
F481 2409             (        mon09.asm):00606                 BCC     DLO2        END
F483 A6E4             (        mon09.asm):00607                 LDA     ,S      GET OLD I/O CONFIG
F485 862E             (        mon09.asm):00608                 LDA     #'.'        GET DOT
F487 1701DE           (        mon09.asm):00609                 LBSR    PUTCHR      OUTPUT
F48A 20F3             (        mon09.asm):00610                 BRA     DLO1        CONTINUE
F48C                  (        mon09.asm):00611         DLO2
F48C 1601C2           (        mon09.asm):00612                 LBRA    LFCR        New line & return
                      (        mon09.asm):00613         ;* Download a record in either MOTOROLA or INTEL hex format
F48F                  (        mon09.asm):00614         DLOAD
F48F 1701CB           (        mon09.asm):00615                 LBSR    GETCHR      Get a character
F492 813A             (        mon09.asm):00616                 CMPA    #':'        Start of INTEL record?
F494 276B             (        mon09.asm):00617                 BEQ     DLINT       Yes, download INTEL
F496 8153             (        mon09.asm):00618                 CMPA    #'S'        Start of MOTOROLA record?
F498 26F5             (        mon09.asm):00619                 BNE     DLOAD       No, keep looking
                      (        mon09.asm):00620         ;* Download a record in MOTOROLA hex format
F49A                  (        mon09.asm):00621         DLMOT
F49A 1701C0           (        mon09.asm):00622                 LBSR    GETCHR      GET NEXT CHAR
F49D 8130             (        mon09.asm):00623                 CMPA    #'0'        HEADER RECORD?
F49F 27EE             (        mon09.asm):00624                 BEQ     DLOAD       SKIP IT
F4A1 8139             (        mon09.asm):00625                 CMPA    #'9'        END OF FILE?
F4A3 275B             (        mon09.asm):00626                 BEQ     DLEOF       END OF FILE
F4A5 8131             (        mon09.asm):00627                 CMPA    #'1'        DATA RECORD?
F4A7 2642             (        mon09.asm):00628                 BNE     LODERR      LOAD ERROR
F4A9 170125           (        mon09.asm):00629                 LBSR    GETBYT      GET LENGTH
F4AC 263D             (        mon09.asm):00630                 BNE     LODERR      Report error
F4AE B7BF18           (        mon09.asm):00631                 STA     TEMP        START CHECKSUM
F4B1 8003             (        mon09.asm):00632                 SUBA    #3      CONVERT
F4B3 B7BF19           (        mon09.asm):00633                 STA     TEMP+1      Set length
F4B6 170118           (        mon09.asm):00634                 LBSR    GETBYT      Get first byte of address
F4B9 2630             (        mon09.asm):00635                 BNE     LODERR      Report error
F4BB 1F89             (        mon09.asm):00636                 TFR     A,B     Save for later
F4BD BBBF18           (        mon09.asm):00637                 ADDA    TEMP        Include in checksum
F4C0 B7BF18           (        mon09.asm):00638                 STA     TEMP        Resave
F4C3 17010B           (        mon09.asm):00639                 LBSR    GETBYT      Get next byte of address
F4C6 2623             (        mon09.asm):00640                 BNE     LODERR      Report error
F4C8 1E89             (        mon09.asm):00641                 EXG     A,B     Swap
F4CA 1F01             (        mon09.asm):00642                 TFR     D,X     Set pointer
F4CC FBBF18           (        mon09.asm):00643                 ADDB    TEMP        Include in checksum
F4CF F7BF18           (        mon09.asm):00644                 STB     TEMP        Resave checksum
F4D2                  (        mon09.asm):00645         DLMOT1
F4D2 1700FC           (        mon09.asm):00646                 LBSR    GETBYT      Get a data byte
F4D5 A780             (        mon09.asm):00647                 STA     ,X+     Save in RAM
F4D7 BBBF18           (        mon09.asm):00648                 ADDA    TEMP        Include checksum
F4DA B7BF18           (        mon09.asm):00649                 STA     TEMP        Resave
F4DD 7ABF19           (        mon09.asm):00650                 DEC     TEMP+1      Reduce length
F4E0 26F0             (        mon09.asm):00651                 BNE     DLMOT1      Do them all
F4E2 1700EC           (        mon09.asm):00652                 LBSR    GETBYT      Get a byte
F4E5 BBBF18           (        mon09.asm):00653                 ADDA    TEMP        Add computed checksum
F4E8 4C               (        mon09.asm):00654                 INCA    Test for success
F4E9 2713             (        mon09.asm):00655                 BEQ     DLRTS       Download OK
                      (        mon09.asm):00656         ;* Error occured on loading
F4EB                  (        mon09.asm):00657         LODERR
F4EB 170138           (        mon09.asm):00658                 LBSR    WRMSG       OUTPUT
F4EE 203F4C6F61642065 (        mon09.asm):00659                 FCC     ' ?Load error'
     72726F72
F4FA FF               (        mon09.asm):00660                 FCB     $FF
F4FB 16FBFF           (        mon09.asm):00661                 LBRA    MAIN        BACK FOR COMMAND
                      (        mon09.asm):00662         ;* Return indicating another record
F4FE                  (        mon09.asm):00663         DLRTS
F4FE 1A01             (        mon09.asm):00664                 ORCC    #$01        SET 'C' FLAG
F500                  (        mon09.asm):00665         DLEOF
F500 39               (        mon09.asm):00666                 RTS
                      (        mon09.asm):00667         ;* Download record in INTEL format
F501                  (        mon09.asm):00668         DLINT
F501 1700CD           (        mon09.asm):00669                 LBSR    GETBYT      Get count
F504 26E5             (        mon09.asm):00670                 BNE     LODERR      Report error
F506 B7BF18           (        mon09.asm):00671                 STA     TEMP        Start checksum
F509 B7BF19           (        mon09.asm):00672                 STA     TEMP+1      Record length
F50C 8100             (        mon09.asm):00673                 CMPA    #0      Test & clear C
F50E 27F0             (        mon09.asm):00674                 BEQ     DLEOF       End of file
                      (        mon09.asm):00675         ;* Get address
F510 1700BE           (        mon09.asm):00676                 LBSR    GETBYT      Get first byte of address
F513 26D6             (        mon09.asm):00677                 BNE     LODERR      Report error
F515 1F89             (        mon09.asm):00678                 TFR     A,B     Save for later
F517 BBBF18           (        mon09.asm):00679                 ADDA    TEMP        Include in checksum
F51A B7BF18           (        mon09.asm):00680                 STA     TEMP        Resave
F51D 1700B1           (        mon09.asm):00681                 LBSR    GETBYT      Get next byte of address
F520 26C9             (        mon09.asm):00682                 BNE     LODERR      Report error
F522 1E89             (        mon09.asm):00683                 EXG     A,B     Swap
F524 1F01             (        mon09.asm):00684                 TFR     D,X     Set pointer
F526 FBBF18           (        mon09.asm):00685                 ADDB    TEMP        Include in checksum
F529 F7BF18           (        mon09.asm):00686                 STB     TEMP        Resave checksum
                      (        mon09.asm):00687         ;* Get record type
F52C 1700A2           (        mon09.asm):00688                 LBSR    GETBYT      Get type value
F52F 26BA             (        mon09.asm):00689                 BNE     LODERR      Report error
F531 BBBF18           (        mon09.asm):00690                 ADDA    TEMP        Include checksum
F534 B7BF18           (        mon09.asm):00691                 STA     TEMP        Resave checksum
                      (        mon09.asm):00692         ;* Get data bytes
F537                  (        mon09.asm):00693         DLINT1
F537 170097           (        mon09.asm):00694                 LBSR    GETBYT      Get data byte
F53A 26AF             (        mon09.asm):00695                 BNE     LODERR      Report error
F53C A780             (        mon09.asm):00696                 STA     ,X+     Write to memory
F53E BBBF18           (        mon09.asm):00697                 ADDA    TEMP        Include checksum
F541 B7BF18           (        mon09.asm):00698                 STA     TEMP        Resave checksum
F544 7ABF19           (        mon09.asm):00699                 DEC     TEMP+1      Reduce length
F547 26EE             (        mon09.asm):00700                 BNE     DLINT1      Do them all
                      (        mon09.asm):00701         ;* Get checksum
F549 BDF5D1           (        mon09.asm):00702                 JSR     GETBYT      Read a byte
F54C 269D             (        mon09.asm):00703                 BNE     LODERR      Report error
F54E BBBF18           (        mon09.asm):00704                 ADDA    TEMP        Include checksum
F551 27AB             (        mon09.asm):00705                 BEQ     DLRTS       Report success
F553 2096             (        mon09.asm):00706                 BRA     LODERR      Report failure
                      (        mon09.asm):00707         ;*
                      (        mon09.asm):00708         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (        mon09.asm):00709         ;*
F555                  (        mon09.asm):00710         GETPC
F555 8D3A             (        mon09.asm):00711                 BSR     GETAD1      Get address
F557 2710             (        mon09.asm):00712                 BEQ     GETPC1      Normal data
F559 8120             (        mon09.asm):00713                 CMPA    #' '        Space?
F55B 2631             (        mon09.asm):00714                 BNE     GETERR      Report error
F55D 1700C6           (        mon09.asm):00715                 LBSR    WRMSG       Output message
F560 2D3E00           (        mon09.asm):00716                 FCN     '->'        Display address
F563 FCBF14           (        mon09.asm):00717                 LDD     SAVPC       Get PC value
F566 1600A3           (        mon09.asm):00718                 LBRA    WRDOUT      Display
F569                  (        mon09.asm):00719         GETPC1
F569 FDBF14           (        mon09.asm):00720                 STD     SAVPC       Set new PC
F56C 39               (        mon09.asm):00721                 RTS
                      (        mon09.asm):00722         ;*
                      (        mon09.asm):00723         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (        mon09.asm):00724         ;*
F56D                  (        mon09.asm):00725         GETRNG
F56D 8D1B             (        mon09.asm):00726                 BSR     GETADR      Get first address
F56F 1F01             (        mon09.asm):00727                 TFR     D,X     Save in X
F571 862C             (        mon09.asm):00728                 LDA     #','        Separator
F573 1700F2           (        mon09.asm):00729                 LBSR    PUTCHR      Display
F576 8D19             (        mon09.asm):00730                 BSR     GETAD1      Get second address
F578 2786             (        mon09.asm):00731                 BEQ     DLEOF       Normal data
F57A 8120             (        mon09.asm):00732                 CMPA    #' '        Space?
F57C 2610             (        mon09.asm):00733                 BNE     GETERR      No, report error
F57E 1700A5           (        mon09.asm):00734                 LBSR    WRMSG       Output message
F581 4646464600       (        mon09.asm):00735                 FCN     'FFFF'
F586 CCFFFF           (        mon09.asm):00736                 LDD     #$FFFF      Assume top of RAM
F589 39               (        mon09.asm):00737                 RTS
                      (        mon09.asm):00738         ;*
                      (        mon09.asm):00739         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (        mon09.asm):00740         ;*
F58A                  (        mon09.asm):00741         GETADR
F58A 8D05             (        mon09.asm):00742                 BSR     GETAD1      Get word value
F58C 270F             (        mon09.asm):00743                 BEQ     GETAD2      Its OK
F58E                  (        mon09.asm):00744         GETERR
F58E 16FBAA           (        mon09.asm):00745                 LBRA    ERROR       Report error
                      (        mon09.asm):00746         ;* Get word value without error checking
F591                  (        mon09.asm):00747         GETAD1
F591 8D3E             (        mon09.asm):00748                 BSR     GETBYT      Get HIGH byte
F593 2609             (        mon09.asm):00749                 BNE     GETAD3      Test for special register
F595 1F89             (        mon09.asm):00750                 TFR     A,B     Copy for later
F597 8D38             (        mon09.asm):00751                 BSR     GETBYT      Get LOW byte
F599 26F3             (        mon09.asm):00752                 BNE     GETERR      Report error
F59B 1E89             (        mon09.asm):00753                 EXG     A,B     Correct order
F59D                  (        mon09.asm):00754         GETAD2
F59D 39               (        mon09.asm):00755                 RTS
                      (        mon09.asm):00756         ;* Handle special register names
F59E                  (        mon09.asm):00757         GETAD3
F59E 3410             (        mon09.asm):00758                 PSHS    X       Save X
F5A0 BEBF0E           (        mon09.asm):00759                 LDX     SAVX        Assume X
F5A3 8158             (        mon09.asm):00760                 CMPA    #'X'        Is it X?
F5A5 271C             (        mon09.asm):00761                 BEQ     GETAD4      Yes
F5A7 BEBF10           (        mon09.asm):00762                 LDX     SAVY        Assume Y
F5AA 8159             (        mon09.asm):00763                 CMPA    #'Y'        Is it Y?
F5AC 2715             (        mon09.asm):00764                 BEQ     GETAD4      Yes
F5AE BEBF12           (        mon09.asm):00765                 LDX     SAVU        Assume U
F5B1 8155             (        mon09.asm):00766                 CMPA    #'U'        Is it U?
F5B3 270E             (        mon09.asm):00767                 BEQ     GETAD4      Yes
F5B5 BEBF0E           (        mon09.asm):00768                 LDX     SAVX        Assume S
F5B8 8153             (        mon09.asm):00769                 CMPA    #'S'        Is it S?
F5BA 2707             (        mon09.asm):00770                 BEQ     GETAD4      Yes
F5BC BEBF14           (        mon09.asm):00771                 LDX     SAVPC       Assume PC?
F5BF 8150             (        mon09.asm):00772                 CMPA    #'P'        Is it PC?
F5C1 260C             (        mon09.asm):00773                 BNE     GETAD5      No, error
F5C3                  (        mon09.asm):00774         GETAD4
F5C3 863D             (        mon09.asm):00775                 LDA     #'='        Separator
F5C5 1700A0           (        mon09.asm):00776                 LBSR    PUTCHR      Echo it
F5C8 1F10             (        mon09.asm):00777                 TFR     X,D     D = value
F5CA 8D40             (        mon09.asm):00778                 BSR     WRDOUT      Display it
F5CC 4F               (        mon09.asm):00779                 CLRA    Set 'Z'
F5CD 1F10             (        mon09.asm):00780                 TFR     X,D     Get value back
F5CF                  (        mon09.asm):00781         GETAD5
F5CF 3590             (        mon09.asm):00782                 PULS    X,PC        Restore & return
                      (        mon09.asm):00783         ;*
                      (        mon09.asm):00784         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (        mon09.asm):00785         ;*
F5D1                  (        mon09.asm):00786         GETBYT
F5D1 8D20             (        mon09.asm):00787                 BSR     GETNIB      Get FIRST nibble
F5D3 2611             (        mon09.asm):00788                 BNE     GETB3       Invalid, test for quote
F5D5 48               (        mon09.asm):00789                 LSLA    Rotate
F5D6 48               (        mon09.asm):00790                 LSLA    into
F5D7 48               (        mon09.asm):00791                 LSLA    high
F5D8 48               (        mon09.asm):00792                 LSLA    nibble
F5D9 3402             (        mon09.asm):00793                 PSHS    A       Save for later
F5DB 8D16             (        mon09.asm):00794                 BSR     GETNIB      Get SECOND nibble
F5DD 2604             (        mon09.asm):00795                 BNE     GETB2       Report error
F5DF AAE4             (        mon09.asm):00796                 ORA     ,S      Include high
F5E1                  (        mon09.asm):00797         GETB4
F5E1 1A04             (        mon09.asm):00798                 ORCC    #$04        Indicate success (SET 'Z')
F5E3                  (        mon09.asm):00799         GETB2
F5E3 3261             (        mon09.asm):00800                 LEAS    1,S     Skip saved value
F5E5                  (        mon09.asm):00801         GETB1
F5E5 39               (        mon09.asm):00802                 RTS
F5E6                  (        mon09.asm):00803         GETB3
F5E6 8127             (        mon09.asm):00804                 CMPA    #$27        Single quote?
F5E8 26FB             (        mon09.asm):00805                 BNE     GETB1       No, abort
F5EA 170070           (        mon09.asm):00806                 LBSR    GETCHR      Get ASCII character
F5ED 170078           (        mon09.asm):00807                 LBSR    PUTCHR      Echo on terminal
F5F0 1A04             (        mon09.asm):00808                 ORCC    #$04        Indicate success (SET 'Z')
F5F2 39               (        mon09.asm):00809                 RTS
                      (        mon09.asm):00810         ;*
                      (        mon09.asm):00811         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (        mon09.asm):00812         ;*
F5F3                  (        mon09.asm):00813         GETNIB
F5F3 170047           (        mon09.asm):00814                 LBSR    GETECH      Get character
F5F6 8030             (        mon09.asm):00815                 SUBA    #'0'        Convert numbers
F5F8 8109             (        mon09.asm):00816                 CMPA    #9      Numeric?
F5FA 230A             (        mon09.asm):00817                 BLS     GETN1       Yes, OK
F5FC 8007             (        mon09.asm):00818                 SUBA    #7      Convert alphas
F5FE 810A             (        mon09.asm):00819                 CMPA    #$A     Under?
F600 2507             (        mon09.asm):00820                 BLO     GETN2       Yer, error
F602 810F             (        mon09.asm):00821                 CMPA    #$F     Over?
F604 2203             (        mon09.asm):00822                 BHI     GETN2       Yes, error
F606                  (        mon09.asm):00823         GETN1
F606 1A04             (        mon09.asm):00824                 ORCC    #$04        SET 'Z' FLAG, INDICATE OK
F608 39               (        mon09.asm):00825                 RTS
F609                  (        mon09.asm):00826         GETN2
F609 8B37             (        mon09.asm):00827                 ADDA    #$37        Normalize character + clear Z
F60B 39               (        mon09.asm):00828                 RTS
                      (        mon09.asm):00829         ;*
                      (        mon09.asm):00830         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (        mon09.asm):00831         ;*
F60C                  (        mon09.asm):00832         WRDOUT
F60C 8D02             (        mon09.asm):00833                 BSR     HEXOUT      Output first byte
F60E 1F98             (        mon09.asm):00834                 TFR     B,A     Get second byte
                      (        mon09.asm):00835         ;*
                      (        mon09.asm):00836         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00837         ;*
F610                  (        mon09.asm):00838         HEXOUT
F610 3402             (        mon09.asm):00839                 PSHS    A       Save low nibble
F612 44               (        mon09.asm):00840                 LSRA    Rotate
F613 44               (        mon09.asm):00841                 LSRA    upper nibble
F614 44               (        mon09.asm):00842                 LSRA    into
F615 44               (        mon09.asm):00843                 LSRA    lower nibble
F616 8D02             (        mon09.asm):00844                 BSR     HOUT        Output high nibble
F618 3502             (        mon09.asm):00845                 PULS    A       Rertore low nibble
                      (        mon09.asm):00846         ;*
                      (        mon09.asm):00847         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00848         ;*
F61A                  (        mon09.asm):00849         HOUT:
F61A 840F             (        mon09.asm):00850                 ANDA    #$0F                              ; Remove upper half
F61C 8B30             (        mon09.asm):00851                 ADDA    #'0'                              ; Convert to printable
F61E 8139             (        mon09.asm):00852                 CMPA    #'9'                              ; In range?
F620 2302             (        mon09.asm):00853                 BLS     HOUT1                             ; Yes, display
F622 8B07             (        mon09.asm):00854                 ADDA    #7                                ;Convert to alpha
F624                  (        mon09.asm):00855         HOUT1:
F624 2042             (        mon09.asm):00856                 BRA     PUTCHR                            ; Output character
                      (        mon09.asm):00857         ;*
                      (        mon09.asm):00858         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (        mon09.asm):00859         ;*
F626                  (        mon09.asm):00860         WRMSG:
F626 3410             (        mon09.asm):00861                 PSHS    X                                 ;SAVE X
F628 AE62             (        mon09.asm):00862                 LDX     2,S                               ;GET OLD PC
F62A 8D04             (        mon09.asm):00863                 BSR     WRLIN                             ;OUTPUT LINE
F62C AF62             (        mon09.asm):00864                 STX     2,S                               ;UPDATE OLD PC
F62E 3590             (        mon09.asm):00865                 PULS    X,PC                              ;RESTORE X, RETURN
                      (        mon09.asm):00866         ;*
                      (        mon09.asm):00867         ;* DISPLAY MESSAGE(X)
                      (        mon09.asm):00868         ;*
F630                  (        mon09.asm):00869         WRLIN:
F630 A680             (        mon09.asm):00870                 LDA     ,X+                               ;GET CHAR FROM MESSAGE
F632 2708             (        mon09.asm):00871                 BEQ     WRLND                             ;END, QUIT
F634 81FF             (        mon09.asm):00872                 CMPA    #$FF                              ;NEWLINE END, LFCR & EXIT
F636 2719             (        mon09.asm):00873                 BEQ     LFCR                              ;IF SO, NEW LINE, RETURN
F638 8D2E             (        mon09.asm):00874                 BSR     PUTCHR                            ;OUTPUT TO TERM
F63A 20F4             (        mon09.asm):00875                 BRA     WRLIN                             ;KEEP GOING
F63C                  (        mon09.asm):00876         WRLND
F63C 39               (        mon09.asm):00877                 RTS
                      (        mon09.asm):00878         ;*
                      (        mon09.asm):00879         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (        mon09.asm):00880         ;*
F63D                  (        mon09.asm):00881         GETECH:
F63D 8D1E             (        mon09.asm):00882                 BSR     GETCHR                            ;GET CHARACTER
F63F 8120             (        mon09.asm):00883                 CMPA    #' '                              ;SPACE?
F641 23F9             (        mon09.asm):00884                 BLS     WRLND                             ;IF < DON'T DISPLAY
F643 8161             (        mon09.asm):00885                 CMPA    #$61                              ;LOWER CASE?
F645 2521             (        mon09.asm):00886                 BLO     PUTCHR                            ;OK
F647 845F             (        mon09.asm):00887                 ANDA    #$5F                              ;CONVERT TO UPPER
F649 201D             (        mon09.asm):00888                 BRA     PUTCHR                            ;ECHO
                      (        mon09.asm):00889         ;*
                      (        mon09.asm):00890         ;* DISPLAY A SPACE ON THE TERMINAL
                      (        mon09.asm):00891         ;*
F64B                  (        mon09.asm):00892         SPACE:
F64B 3402             (        mon09.asm):00893                 PSHS    A                                 ;SAVE A
F64D 8620             (        mon09.asm):00894                 LDA     #' '                              ;GET SPACE
F64F 2008             (        mon09.asm):00895                 BRA     LFC1                              ;DISLAY AND GO HOME
                      (        mon09.asm):00896         ;*
                      (        mon09.asm):00897         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (        mon09.asm):00898         ;*
F651                  (        mon09.asm):00899         LFCR:
F651 3402             (        mon09.asm):00900                 PSHS    A                                 ;SAVE
F653 860A             (        mon09.asm):00901                 LDA     #$0A                              ;GET LF
F655 8D11             (        mon09.asm):00902                 BSR     PUTCHR                            ;OUTPUT
F657 860D             (        mon09.asm):00903                 LDA     #$0D                              ;GET CR
F659                  (        mon09.asm):00904         LFC1:
F659 8D0D             (        mon09.asm):00905                 BSR     PUTCHR                            ;OUTPUT
F65B 3582             (        mon09.asm):00906                 PULS    A,PC                              ;RESTORE AND GO HOME
                      (        mon09.asm):00907         ;*
                      (        mon09.asm):00908         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (        mon09.asm):00909         ;*
F65D                  (        mon09.asm):00910         GETCHR:
F65D 3410             (        mon09.asm):00911                 PSHS    X                                 ;SAVE 'X'
F65F                  (        mon09.asm):00912         GETC1:
F65F 1703A6           (        mon09.asm):00913                 LBSR    READ                              ;READ TERMINAL
F662 81FF             (        mon09.asm):00914                 CMPA    #$FF
F664 27F9             (        mon09.asm):00915                 BEQ     GETC1                             ;KEEP TRYING
F666 3590             (        mon09.asm):00916                 PULS    X,PC
                      (        mon09.asm):00917         ;*
                      (        mon09.asm):00918         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (        mon09.asm):00919         ;*
F668                  (        mon09.asm):00920         PUTCHR:
F668 3416             (        mon09.asm):00921                 PSHS    A,B,X                             ;SAVE REGS
F66A 1703A9           (        mon09.asm):00922                 LBSR    WRITE                             ;OUTPUT TO TERMINAL
F66D 3596             (        mon09.asm):00923                 PULS    A,B,X,PC                          ;RESTORE AND GO HOME
                      (        mon09.asm):00924         ;*
                      (        mon09.asm):00925         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (        mon09.asm):00926         ;* SCREEN OUTPUT FLOW CONTROL.
                      (        mon09.asm):00927         ;*
F66F                  (        mon09.asm):00928         CHKCHR:
F66F 3410             (        mon09.asm):00929                 PSHS    X                                 ;SAVE PTR
F671 170394           (        mon09.asm):00930                 LBSR    READ                              ;READ TERMINAL
F674 8120             (        mon09.asm):00931                 CMPA    #' '                              ;SPACE?
F676 2613             (        mon09.asm):00932                 BNE     CHKC3                             ;NO, IGNORE IT
F678                  (        mon09.asm):00933         CHKC1:
F678 CA80             (        mon09.asm):00934                 ORB     #%10000000                        ;SET HELD BIT
F67A 17038B           (        mon09.asm):00935                 LBSR    READ                              ;GET KEY FROM CONSOLE
F67D 8120             (        mon09.asm):00936                 CMPA    #' '                              ;SPACE?
F67F 270A             (        mon09.asm):00937                 BEQ     CHKC3                             ;YES, ALLOW
F681 C47F             (        mon09.asm):00938                 ANDB    #%01111111                        ;DISABLE HELD BIT
F683 810D             (        mon09.asm):00939                 CMPA    #$0D                              ;CARRIAGE RETURN?
F685 2704             (        mon09.asm):00940                 BEQ     CHKC3                             ;ALLOW
F687 811B             (        mon09.asm):00941                 CMPA    #$1B                              ;ESCAPE?
F689 26ED             (        mon09.asm):00942                 BNE     CHKC1                             ;NO, IGNORE
F68B                  (        mon09.asm):00943         CHKC3:
F68B 811B             (        mon09.asm):00944                 CMPA    #$1B                              ;TEST FOR ESCAPE CHARACTER
F68D 3590             (        mon09.asm):00945                 PULS    X,PC
                      (        mon09.asm):00946         ;*
                      (        mon09.asm):00947         ;* SUBROUTINES
                      (        mon09.asm):00948         ;*
F68F                  (        mon09.asm):00949         WRHEXB
F68F 3402             (        mon09.asm):00950                 PSHS    A       SAVE IT
F691 8624             (        mon09.asm):00951                 LDA     #'$'        INDICATE HEX
F693 A7C0             (        mon09.asm):00952                 STA     ,U+     SAVE
F695 2008             (        mon09.asm):00953                 BRA     WRHEX1      CONTINUE
F697                  (        mon09.asm):00954         WRHEXW
F697 3404             (        mon09.asm):00955                 PSHS    B       SAVE B
F699 C624             (        mon09.asm):00956                 LDB     #'$'        INDICATE HEX
F69B E7C0             (        mon09.asm):00957                 STB     ,U+     SAVE IT
F69D 8D02             (        mon09.asm):00958                 BSR     WRHEX       OUTPUT
F69F                  (        mon09.asm):00959         WRHEX1
F69F 3502             (        mon09.asm):00960                 PULS    A       RESTORE
F6A1                  (        mon09.asm):00961         WRHEX
F6A1 3402             (        mon09.asm):00962                 PSHS    A       SAVE IT
F6A3 44               (        mon09.asm):00963                 LSRA    SHIFT
F6A4 44               (        mon09.asm):00964                 LSRA    HIGH BYTE
F6A5 44               (        mon09.asm):00965                 LSRA    INTO
F6A6 44               (        mon09.asm):00966                 LSRA    LOW FOR OUTPUT
F6A7 8D02             (        mon09.asm):00967                 BSR     WRHEXN      OUTPUT NIBBLE
F6A9 3502             (        mon09.asm):00968                 PULS    A       RETORE
F6AB                  (        mon09.asm):00969         WRHEXN
F6AB 840F             (        mon09.asm):00970                 ANDA    #$0F        REMOVE CRAP
F6AD 8B30             (        mon09.asm):00971                 ADDA    #$30        CONVERT
F6AF 8139             (        mon09.asm):00972                 CMPA    #$39        OK?
F6B1 2302             (        mon09.asm):00973                 BLS     WRNOK       OK
F6B3 8B07             (        mon09.asm):00974                 ADDA    #7      CONVERT
F6B5                  (        mon09.asm):00975         WRNOK
F6B5 A7C0             (        mon09.asm):00976                 STA     ,U+     SAVE IT
F6B7 39               (        mon09.asm):00977                 RTS
                      (        mon09.asm):00978         ;*
                      (        mon09.asm):00979         ;* NMI HANDLER
                      (        mon09.asm):00980         ;*
F6B8                  (        mon09.asm):00981         NMIHND
F6B8 8EBF0A           (        mon09.asm):00982                 LDX     #SAVCC      POINT TO START OF SAVED REGS
F6BB C60C             (        mon09.asm):00983                 LDB     #12     MOVE 12 BYTES
F6BD                  (        mon09.asm):00984         NMIH1
F6BD A6E0             (        mon09.asm):00985                 LDA     ,S+     GET BYTE
F6BF A780             (        mon09.asm):00986                 STA     ,X+     SAVE
F6C1 5A               (        mon09.asm):00987                 DECB    DECREMENT COUNT
F6C2 26F9             (        mon09.asm):00988                 BNE     NMIH1       DO THEM ALL
F6C4 10FFBF16         (        mon09.asm):00989                 STS     SAVS        SAVE STACK POINTER
F6C8 17FF5B           (        mon09.asm):00990                 LBSR    WRMSG       DISPLAY MESSAGE
F6CB 2A2A2A204E4D4920 (        mon09.asm):00991                 FCC     '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
F6E0 FF               (        mon09.asm):00992                 FCB     $FF     NEW LINE
F6E1 205C             (        mon09.asm):00993                 BRA     BRKREG      DISPLAY REGISTERS
                      (        mon09.asm):00994         ;*
                      (        mon09.asm):00995         ;* SWI HANDLER
                      (        mon09.asm):00996         ;*
F6E3                  (        mon09.asm):00997         SWIHND
F6E3 108EBF1F         (        mon09.asm):00998                 LDY     #BRKTAB     POINT TO BREAKPOINT TABLE
F6E7 AE6A             (        mon09.asm):00999                 LDX     10,S        GET STORED PC
F6E9 301F             (        mon09.asm):01000                 LEAX    -1,X        BACKUP TO BREAKPOINT ADDRESS
F6EB C608             (        mon09.asm):01001                 LDB     #8      CHECK EIGHT BREAKPOINTS
F6ED                  (        mon09.asm):01002         SWIHN1
F6ED ACA4             (        mon09.asm):01003                 CMPX    ,Y      IS THIS IT?
F6EF 2710             (        mon09.asm):01004                 BEQ     SWIHN2      YES
F6F1 3123             (        mon09.asm):01005                 LEAY    3,Y     SKIP OPCODE
F6F3 5A               (        mon09.asm):01006                 DECB    REDUCE COUNT
F6F4 26F7             (        mon09.asm):01007                 BNE     SWIHN1      CONTINUE
F6F6 E662             (        mon09.asm):01008                 LDB     2,S     RESTORE B.
F6F8 AE64             (        mon09.asm):01009                 LDX     4,S     RESTORE X.
F6FA 10AE66           (        mon09.asm):01010                 LDY     6,S     RESTORE Y.
F6FD 6E9FBF00         (        mon09.asm):01011                 JMP     [SWIADR]    NOT A BREAKPOINT, EXECUTE SWI HANDLER
F701                  (        mon09.asm):01012         SWIHN2
F701 F7BF1D           (        mon09.asm):01013                 STB     INSTYP      SAVE BREAKPOINT NUMBER
F704 8EBF0A           (        mon09.asm):01014                 LDX     #SAVCC      POINT TO START OF SAVED REGS
F707 C60A             (        mon09.asm):01015                 LDB     #10     MOVE 10
F709                  (        mon09.asm):01016         SWIHN25
F709 A6E0             (        mon09.asm):01017                 LDA     ,S+     GET BYTE
F70B A780             (        mon09.asm):01018                 STA     ,X+     SAVE
F70D 5A               (        mon09.asm):01019                 DECB    DECREMENT COUNT
F70E 26F9             (        mon09.asm):01020                 BNE     SWIHN25     DO THEM ALL
F710 3510             (        mon09.asm):01021                 PULS    X       GET PC
F712 301F             (        mon09.asm):01022                 LEAX    -1,X        SET BACK TO REAL PC
F714 BFBF14           (        mon09.asm):01023                 STX     SAVPC       SAVED PC
F717 10FFBF16         (        mon09.asm):01024                 STS     SAVS        SAVE STACK POINTER
F71B 17FF08           (        mon09.asm):01025                 LBSR    WRMSG       DISPLAY MESSAGE
F71E 2A2A2A2042726561 (        mon09.asm):01026                 FCN     '*** Breakpoint #'
     6B706F696E742023
     00
F72F 8638             (        mon09.asm):01027                 LDA     #$38        GET NUMBER, PLUS ASCII CONVERT
F731 B0BF1D           (        mon09.asm):01028                 SUBA    INSTYP      CONVERT TO PROPER DIGIT
F734 17FF31           (        mon09.asm):01029                 LBSR    PUTCHR      DISPLAY
F737 17FEEC           (        mon09.asm):01030                 LBSR    WRMSG       OUTPUT MESSAGE
F73A 202A2A2A         (        mon09.asm):01031                 FCC     ' ***'      TRAILING MESSAGE
F73E FF               (        mon09.asm):01032                 FCB     $FF     NEW LINE
F73F                  (        mon09.asm):01033         BRKREG
F73F 17FB89           (        mon09.asm):01034                 LBSR    DISREG      DISPLAY
F742                  (        mon09.asm):01035         BRKRES
F742 8EBF1F           (        mon09.asm):01036                 LDX     #BRKTAB     POINT TO BREAKPOINT TABLE
F745 C608             (        mon09.asm):01037                 LDB     #8      DO IT EIGHT TIMES
F747                  (        mon09.asm):01038         SWIHN3
F747 10AE81           (        mon09.asm):01039                 LDY     ,X++        GET REG
F74A 2704             (        mon09.asm):01040                 BEQ     SWIHN4      NO BRK, NEXT
F74C A684             (        mon09.asm):01041                 LDA     ,X      GET OPCODE
F74E A7A4             (        mon09.asm):01042                 STA     ,Y      REPLACE IN RAM
F750                  (        mon09.asm):01043         SWIHN4
F750 3001             (        mon09.asm):01044                 LEAX    1,X     SKIP OPCODE
F752 5A               (        mon09.asm):01045                 DECB    REDUCE COUNT
F753 26F2             (        mon09.asm):01046                 BNE     SWIHN3      GO AGAIN
F755 16F9A5           (        mon09.asm):01047                 LBRA    MAIN        DO PROMPT
                      (        mon09.asm):01048         ;* CONSTANTS
F758                  (        mon09.asm):01049         PCRG
F758 2C504352         (        mon09.asm):01050                 FCC     ',PCR'
                      (        mon09.asm):01051         ;* TRANSFER/EXCHANGE REGISTER TABLE
F75C                  (        mon09.asm):01052         REGTAB
F75C 4400             (        mon09.asm):01053                 FCN     'D'     0
F75E 5800             (        mon09.asm):01054                 FCN     'X'     1
F760 5900             (        mon09.asm):01055                 FCN     'Y'     2
F762 5500             (        mon09.asm):01056                 FCN     'U'     3
F764 5300             (        mon09.asm):01057                 FCN     'S'     4
F766 5043             (        mon09.asm):01058                 FCC     'PC'        5
F768 3F00             (        mon09.asm):01059                 FCN     '?'     6
F76A 3F00             (        mon09.asm):01060                 FCN     '?'     7
F76C 4100             (        mon09.asm):01061                 FCN     'A'     8
F76E 4200             (        mon09.asm):01062                 FCN     'B'     9
F770 4343             (        mon09.asm):01063                 FCC     'CC'        A
F772 4450             (        mon09.asm):01064                 FCC     'DP'        B
F774 3F00             (        mon09.asm):01065                 FCN     '?'     C
F776 3F00             (        mon09.asm):01066                 FCN     '?'     D
F778 3F00             (        mon09.asm):01067                 FCN     '?'     E
F77A 3F00             (        mon09.asm):01068                 FCN     '?'     F
                      (        mon09.asm):01069         ;* PUSH/PULL REGISTER TABLE
F77C                  (        mon09.asm):01070         PSHTAB:
F77C 4343             (        mon09.asm):01071                 FCC     'CC'
F77E 4100             (        mon09.asm):01072                 FCN     'A'
F780 4200             (        mon09.asm):01073                 FCN     'B'
F782 4450             (        mon09.asm):01074                 FCC     'DP'
F784 5800             (        mon09.asm):01075                 FCN     'X'
F786 5900             (        mon09.asm):01076                 FCN     'Y'
F788 5500             (        mon09.asm):01077                 FCN     'U'
F78A 504300           (        mon09.asm):01078                 FCN     'PC'
                      (        mon09.asm):01079         ;* VECTOR HANDLERS
F78D                  (        mon09.asm):01080         SWI3:
F78D 6E9FBF04         (        mon09.asm):01081                 JMP     [SWI3ADR]
F791                  (        mon09.asm):01082         SWI2:
F791 6E9FBF02         (        mon09.asm):01083                 JMP     [SWI2ADR]
F795                  (        mon09.asm):01084         IRQ:
F795 6E9FBF06         (        mon09.asm):01085                 JMP     [IRQADR]
F799                  (        mon09.asm):01086         FIRQ:
F799 6E9FBF08         (        mon09.asm):01087                 JMP     [FIRQADR]
                      (        mon09.asm):01088         ;* HELP TEXT
F79D                  (        mon09.asm):01089         HTEXT:
F79D 00               (        mon09.asm):01090                 FCB     0       NEW LINE TO START
F79E 4352203C7265673E (        mon09.asm):01091                 FCN     'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
F7BE 4356203C7665633E (        mon09.asm):01092                 FCN     'CV <vec> <addr>|Change interrupt vector'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7200
F7E6 444D203C61646472 (        mon09.asm):01093                 FCN     'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
F819 44527C446973706C (        mon09.asm):01094                 FCN     'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
F838 44567C446973706C (        mon09.asm):01095                 FCN     'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
F855 45203C616464723E (        mon09.asm):01096                 FCN     'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
F86A 464D203C61646472 (        mon09.asm):01097                 FCN     'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
F88E 47205B3C61646472 (        mon09.asm):01098                 FCN     'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
F8AE 4C7C4C6F61642061 (        mon09.asm):01099                 FCN     'L|Load an image into RAM from uart2'
     6E20696D61676520
     696E746F2052414D
     2066726F6D207561
     72743200
F8D2 4D4D203C61646472 (        mon09.asm):01100                 FCN     'MM <addr>,<addr> <addr>|Move memory'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F727900
F8F6 5252203C61646472 (        mon09.asm):01101                 FCN     'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
F916 5257203C61646472 (        mon09.asm):01102                 FCN     'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
F93E 57203C616464723E (        mon09.asm):01103                 FCN     'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
F95E 5852203C61646472 (        mon09.asm):01104                 FCN     'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
F97E 5857203C61646472 (        mon09.asm):01105                 FCN     'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
F9A6 2B203C76616C7565 (        mon09.asm):01106                 FCN     '+ <value>+<value>|Hexidecimal addition'
     3E2B3C76616C7565
     3E7C486578696465
     63696D616C206164
     646974696F6E00
F9CD 2D203C76616C7565 (        mon09.asm):01107                 FCN     '- <value>-<value>|Hexidecimal subtraction'
     3E2D3C76616C7565
     3E7C486578696465
     63696D616C207375
     627472616374696F
     6E00
F9F7 FF               (        mon09.asm):01108                 FCB     -1      END OF TABLE
                      (        mon09.asm):01109         
                      (        mon09.asm):01110         ;*
                      (        mon09.asm):01111         ;* MACHINE DEPENDANT I/O ROUTINES FOR 6551 UART
                      (        mon09.asm):01112         ;*
F9F8                  (        mon09.asm):01113         INIT:
F9F8 8600             (        mon09.asm):01114                 LDA     #$00                              ; RESET UART
F9FA B7EF85           (        mon09.asm):01115                 STA     UART1STATUS                       ;
F9FD 860B             (        mon09.asm):01116                 LDA     #$0B                              ;
F9FF B7EF86           (        mon09.asm):01117                 STA     UART1COMMAND                      ;
FA02 861E             (        mon09.asm):01118                 LDA     #$1E                              ; 9600, 8 BITS, NO PARITY, 1 STOP BIT
FA04 B7EF87           (        mon09.asm):01119                 STA     UART1CONTROL                      ;
FA07 39               (        mon09.asm):01120                 RTS
                      (        mon09.asm):01121         ;* READ UART
FA08                  (        mon09.asm):01122         READ:
FA08 B6EF85           (        mon09.asm):01123                 LDA     UART1STATUS                       ; GET STATUS REGISTER
FA0B 8408             (        mon09.asm):01124                 ANDA    #%00001000                        ; IS RX READY
FA0D 2704             (        mon09.asm):01125                 BEQ     NOCHR                             ; No DATA IS READY
FA0F B6EF84           (        mon09.asm):01126                 LDA     UART1DATA                         ; GET DATA CHAR
FA12 39               (        mon09.asm):01127                 RTS
FA13                  (        mon09.asm):01128         NOCHR:
FA13 86FF             (        mon09.asm):01129                 LDA     #$FF                              ; NO CHAR
FA15 39               (        mon09.asm):01130                 RTS
                      (        mon09.asm):01131         ;* WRITE UART
FA16                  (        mon09.asm):01132         WRITE:
FA16 F6EF85           (        mon09.asm):01133                 LDB     UART1STATUS                       ; GET STATUS
FA19 C410             (        mon09.asm):01134                 ANDB    #%00010000                        ; IS TX READY
FA1B 27F9             (        mon09.asm):01135                 BEQ     WRITE                             ; NO, WAIT FOR IT
FA1D B7EF84           (        mon09.asm):01136                 STA     UART1DATA                         ; WRITE DATA
FA20 39               (        mon09.asm):01137                 RTS
                      (        mon09.asm):01138         
                      (        mon09.asm):01139         ;*
                      (        mon09.asm):01140         ;* MACHINE VECTORS
                      (        mon09.asm):01141         ;*
                      (        mon09.asm):01142                 ORG     $FFF2
FFF2 F78D             (        mon09.asm):01143                 FDB     SWI3
FFF4 F791             (        mon09.asm):01144                 FDB     SWI2
FFF6 F799             (        mon09.asm):01145                 FDB     FIRQ
FFF8 F795             (        mon09.asm):01146                 FDB     IRQ
FFFA F6E3             (        mon09.asm):01147                 FDB     SWIHND
FFFC F6B8             (        mon09.asm):01148                 FDB     NMIHND
FFFE F000             (        mon09.asm):01149                 FDB     RESET

Symbol Table:
[ G] BRKREG                           F73F
[ G] BRKRES                           F742
[ G] BRKTAB                           BF1F
[ G] CCBITS                           F33F
[ G] CHG1                             F352
[ G] CHG2                             F35E
[ G] CHG3                             F38F
[ G] CHG4                             F375
[ G] CHGREG                           F347
[ G] CHGTAB                           F392
[ G] CHGV1                            F2A4
[ G] CHGV2                            F2AC
[ G] CHGV3                            F2B2
[ G] CHGV4                            F2BD
[ G] CHGVEC                           F299
[ G] CHKC1                            F678
[ G] CHKC3                            F68B
[ G] CHKCHR                           F66F
[ G] CLRRAM                           F007
[ G] CMDTAB                           F143
[ G] DISREG                           F2CB
[ G] DISV1                            F269
[ G] DISVEC                           F262
[ G] DLEOF                            F500
[ G] DLINT                            F501
[ G] DLINT1                           F537
[ G] DLMOT                            F49A
[ G] DLMOT1                           F4D2
[ G] DLO1                             F47F
[ G] DLO2                             F48C
[ G] DLOAD                            F48F
[ G] DLRTS                            F4FE
[ G] DSPBUF                           BF37
[ G] ERROR                            F13B
[ G] FILL1                            F19A
[ G] FILMEM                           F18C
[ G] FIRQ                             F799
[ G] FIRQADR                          BF08
[ G] GETAD1                           F591
[ G] GETAD2                           F59D
[ G] GETAD3                           F59E
[ G] GETAD4                           F5C3
[ G] GETAD5                           F5CF
[ G] GETADR                           F58A
[ G] GETB1                            F5E5
[ G] GETB2                            F5E3
[ G] GETB3                            F5E6
[ G] GETB4                            F5E1
[ G] GETBYT                           F5D1
[ G] GETC1                            F65F
[ G] GETCHR                           F65D
[ G] GETECH                           F63D
[ G] GETERR                           F58E
[ G] GETN1                            F606
[ G] GETN2                            F609
[ G] GETNIB                           F5F3
[ G] GETPC                            F555
[ G] GETPC1                           F569
[ G] GETRNG                           F56D
[ G] GOEXEC                           F39C
[ G] HELP                             F44E
[ G] HEXADD                           F41B
[ G] HEXOUT                           F610
[ G] HEXSHO                           F43F
[ G] HEXSUB                           F42C
[ G] HLP1                             F451
[ G] HLP2                             F453
[ G] HLP3                             F461
[ G] HLP4                             F46F
[ G] HLP5                             F47B
[ G] HOUT                             F61A
[ G] HOUT1                            F624
[ G] HTEXT                            F79D
[ G] INIT                             F9F8
[ G] INSRAM                           BF69
[ G] INSTYP                           BF1D
[ G] IOSPACE                          EF00
[ G] IRQ                              F795
[ G] IRQADR                           BF06
[ G] LFC1                             F659
[ G] LFCR                             F651
[ G] LOAD                             F47C
[ G] LODERR                           F4EB
[ G] LOOK1                            F111
[ G] LOOK2                            F11D
[ G] LOOK3                            F134
[ G] LOOKC                            F10B
[ G] MAIN                             F0FD
[ G] MEM1                             F1C4
[ G] MEM2                             F1D7
[ G] MEM3                             F1E1
[ G] MEM4                             F1EB
[ G] MEM5                             F1F5
[ G] MEM6                             F1FF
[ G] MEM7                             F201
[ G] MEMORY                           F1BE
[ G] MONITOR                          F01C
[ G] MOVM1                            F1B2
[ G] MOVMEM                           F1A4
[ G] NMIH1                            F6BD
[ G] NMIHND                           F6B8
[ G] NOCHR                            FA13
[ G] PCRG                             F758
[ G] POSBYT                           BF1E
[ G] PSHTAB                           F77C
[ G] PTRSAV                           BF1B
[ G] PUTCHR                           F668
[ G] R16                              F383
[ G] R17                              F38A
[ G] RAM                              BF00
[ G] RBITS                            F2E9
[ G] RDLOOP                           F3C1
[ G] RDLP1                            F3C9
[ G] READ                             FA08
[ G] REGB1                            F2E2
[ G] REGTAB                           F75C
[ G] REGTXT                           F315
[ G] RESET                            F000
[ G] ROM                              F000
[ G] RSUB1                            F305
[ G] RSUB2                            F30D
[ G] SAVA                             BF0B
[ G] SAVB                             BF0C
[ G] SAVCC                            BF0A
[ G] SAVDP                            BF0D
[ G] SAVPC                            BF14
[ G] SAVS                             BF16
[ G] SAVU                             BF12
[ G] SAVX                             BF0E
[ G] SAVY                             BF10
[ G] SPACE                            F64B
[ G] STACK                            BFF0
[ G] STPFLG                           BF1A
[ G] SUBM1                            F224
[ G] SUBM2                            F22E
[ G] SUBM3                            F242
[ G] SUBM4                            F249
[ G] SUBM5                            F258
[ G] SUBMEM                           F21F
[ G] SWI2                             F791
[ G] SWI2ADR                          BF02
[ G] SWI3                             F78D
[ G] SWI3ADR                          BF04
[ G] SWIADR                           BF00
[ G] SWIHN1                           F6ED
[ G] SWIHN2                           F701
[ G] SWIHN25                          F709
[ G] SWIHN3                           F747
[ G] SWIHN4                           F750
[ G] SWIHND                           F6E3
[ G] TEMP                             BF18
[ G] UART1COMMAND                     EF86
[ G] UART1CONTROL                     EF87
[ G] UART1DATA                        EF84
[ G] UART1STATUS                      EF85
[ G] VECTXT                           F278
[ G] WRDOUT                           F60C
[ G] WRHEX                            F6A1
[ G] WRHEX1                           F69F
[ G] WRHEXB                           F68F
[ G] WRHEXN                           F6AB
[ G] WRHEXW                           F697
[ G] WRIMEM                           F20F
[ G] WRITE                            FA16
[ G] WRLIN                            F630
[ G] WRLND                            F63C
[ G] WRLOOP                           F3D1
[ G] WRLP1                            F3E5
[ G] WRMSG                            F626
[ G] WRNOK                            F6B5
[ G] XRLOOP                           F3F0
[ G] XRLP1                            F3F8
[ G] XWLOOP                           F400
[ G] XWLP1                            F410
