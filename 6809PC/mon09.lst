                      (        mon09.asm):00001         ;*
                      (        mon09.asm):00002         ;* MON09: A software debug monitor for the 6809
                      (        mon09.asm):00003         ;*
                      (        mon09.asm):00004         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (        mon09.asm):00005         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and RAM
                      (        mon09.asm):00006         ;* from $0000-$BFFF. The 256 byte block from $DF00-$DFFF is used for I/O devices
                      (        mon09.asm):00007         ;* etc. MON09 uses 256 bytes of memory at the very top of available RAM,
                      (        mon09.asm):00008         ;* and the user stack pointer is initialized to point to the beginning of
                      (        mon09.asm):00009         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (        mon09.asm):00010         ;*
                      (        mon09.asm):00011         ;* ?COPY.TXT 1985-2007 Dave Dunfield
                      (        mon09.asm):00012         ;* **See COPY.TXT**.
                      (        mon09.asm):00013         ;*
                      (        mon09.asm):00014         ;*
                      (        mon09.asm):00015         ;*   Modified for the 6809PC board by D. Werner 5/17/2025
                      (        mon09.asm):00016         ;*   Single 6551 UART supported at 9600,n,8,1
                      (        mon09.asm):00017         ;*
                      (        mon09.asm):00018         ;*   Commands have been removed to conserve
                      (        mon09.asm):00019         ;*   ROM space
                      (        mon09.asm):00020         
     0001             (        mon09.asm):00021         BIOS6809PC      EQU $01
                      (        mon09.asm):00022         
                      (        mon09.asm):00023         ;* HARDWARE INFORMATION
     F000             (        mon09.asm):00024         ROM             EQU $F000                         ; MON09 code goes here
     BF00             (        mon09.asm):00025         RAM             EQU $BF00                         ; MON09 data goes here
     BFF0             (        mon09.asm):00026         STACK           EQU RAM+$F0                       ; MON09 Stack (Top of RAM)
     0100             (        mon09.asm):00027         HSTBUF          EQU $0100                         ; DISK BUFFER
     0300             (        mon09.asm):00028         BRKTAB          EQU $0300
                      (        mon09.asm):00029         ;*
     EF00             (        mon09.asm):00030         IOSPACE         EQU $EF00
     EF84             (        mon09.asm):00031         UART1DATA       EQU IOSPACE+$84                   ; SERIAL PORT 1 (I/O Card)
     EF85             (        mon09.asm):00032         UART1STATUS     EQU IOSPACE+$85                   ; SERIAL PORT 1 (I/O Card)
     EF86             (        mon09.asm):00033         UART1COMMAND    EQU IOSPACE+$86                   ; SERIAL PORT 1 (I/O Card)
     EF87             (        mon09.asm):00034         UART1CONTROL    EQU IOSPACE+$87                   ; SERIAL PORT 1 (I/O Card)
     E000             (        mon09.asm):00035         CUBIX_IO_BASE   EQU $E000
                      (        mon09.asm):00036         ;*
                      (        mon09.asm):00037         ;*
                      (        mon09.asm):00038                 ORG     RAM                               ;Internal MON09 variables
                      (        mon09.asm):00039         ;*
                      (        mon09.asm):00040         ;* MON09 INTERNAL MEMORY
                      (        mon09.asm):00041         ;*
BF00                  (        mon09.asm):00042         SWIADR:
BF00                  (        mon09.asm):00043                 RMB     2                                 ;SWI VECTOR ADDRESS
BF02                  (        mon09.asm):00044         SWI2ADR:
BF02                  (        mon09.asm):00045                 RMB     2                                 ;SWI2 VECTOR ADDRESS
BF04                  (        mon09.asm):00046         SWI3ADR:
BF04                  (        mon09.asm):00047                 RMB     2                                 ;SWI3 VECTOR ADDRESS
BF06                  (        mon09.asm):00048         IRQADR:
BF06                  (        mon09.asm):00049                 RMB     2                                 ;IRQ VECTOR ADDRESS
BF08                  (        mon09.asm):00050         FIRQADR:
BF08                  (        mon09.asm):00051                 RMB     2                                 ;FIRQ VECTOR ADDRESS
BF0A                  (        mon09.asm):00052         SAVCC:
BF0A                  (        mon09.asm):00053                 RMB     1                                 ;SAVED CONDITION CODE REGISTER
BF0B                  (        mon09.asm):00054         SAVA:
BF0B                  (        mon09.asm):00055                 RMB     1                                 ;SAVED 6809 A REGISTER
BF0C                  (        mon09.asm):00056         SAVB:
BF0C                  (        mon09.asm):00057                 RMB     1                                 ;SAVED 6809 B REGISTER
BF0D                  (        mon09.asm):00058         SAVDP:
BF0D                  (        mon09.asm):00059                 RMB     1                                 ;SAVED DIRECT PAGE REGISTER
BF0E                  (        mon09.asm):00060         SAVX:
BF0E                  (        mon09.asm):00061                 RMB     2                                 ;SAVED X REGISTER
BF10                  (        mon09.asm):00062         SAVY:
BF10                  (        mon09.asm):00063                 RMB     2                                 ;SAVED Y REGISTER
BF12                  (        mon09.asm):00064         SAVU:
BF12                  (        mon09.asm):00065                 RMB     2                                 ;SAVED U REGISTER
BF14                  (        mon09.asm):00066         SAVPC:
BF14                  (        mon09.asm):00067                 RMB     2                                 ;SAVED PROGRAM COUNTER
BF16                  (        mon09.asm):00068         SAVS:
BF16                  (        mon09.asm):00069                 RMB     2                                 ;SAVED S REGISTER
BF18                  (        mon09.asm):00070         TEMP:
BF18                  (        mon09.asm):00071                 RMB     2                                 ;TEMPORARY STORAGE
BF1A                  (        mon09.asm):00072         STPFLG:
BF1A                  (        mon09.asm):00073                 RMB     1                                 ;REGISTER DISPLAY WHILE STEPPING FLAG
BF1B                  (        mon09.asm):00074         PTRSAV:
BF1B                  (        mon09.asm):00075                 RMB     2                                 ;SINGLE STEP AND DISASSEMBLER CODE POINTER
BF1D                  (        mon09.asm):00076         INSTYP:
BF1D                  (        mon09.asm):00077                 RMB     1                                 ;DISASSEMBLED INSTRUCTION TYPE
BF1E                  (        mon09.asm):00078         POSBYT:
BF1E                  (        mon09.asm):00079                 RMB     1                                 ;POSTBYTE STORAGE AREA
BF1F                  (        mon09.asm):00080         INSRAM:
BF1F                  (        mon09.asm):00081                 RMB     7                                 ;INSTRUCTION EXECUTION ADDRESS
BF26                  (        mon09.asm):00082         XTIDETIMEOUT:
BF26                  (        mon09.asm):00083                 RMB     2                                 ;DISK TIMEOUT
BF28                  (        mon09.asm):00084         DISKERROR:
BF28                  (        mon09.asm):00085                 RMB     1                                 ;DISK ERROR
                      (        mon09.asm):00086         ;*
                      (        mon09.asm):00087                 ORG     ROM                               ;MONITOR CODE
                      (        mon09.asm):00088         ;*
                      (        mon09.asm):00089         ;* INITIALIZATIONS.
                      (        mon09.asm):00090         ;*
F000                  (        mon09.asm):00091         RESET:
F000 10CEBFF0         (        mon09.asm):00092                 LDS     #STACK                            ;SET UP STACK
                      (        mon09.asm):00093         
F004 8EBF00           (        mon09.asm):00094                 LDX     #SWIADR                           ;POINT TO START
F007                  (        mon09.asm):00095         CLRRAM:
F007 6F80             (        mon09.asm):00096                 CLR     ,X+                               ;CLEAR IT
F009 8CBF1F           (        mon09.asm):00097                 CMPX    #INSRAM                           ;AT BUFFER?
F00C 25F9             (        mon09.asm):00098                 BLO     CLRRAM                            ;KEEP GOING
                      (        mon09.asm):00099         
F00E 170C22           (        mon09.asm):00100                 LBSR    INIT                              ;INITIALIZE UART
F011 CCBF00           (        mon09.asm):00101                 LDD     #RAM                              ;DEFAULT STACK AT TOP OF RAM
F014 FDBF16           (        mon09.asm):00102                 STD     SAVS                              ;SAVE IT
F017 86D0             (        mon09.asm):00103                 LDA     #$D0                              ;SET CC
F019 B7BF0A           (        mon09.asm):00104                 STA     SAVCC                             ;SAVE IT
F01C                  (        mon09.asm):00105         MONITOR:
F01C 17060F           (        mon09.asm):00106                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F01F 0A0D0A0D0A0D     (        mon09.asm):00107                 FCB     $0A,$0D,$0A,$0D,$0A,$0D
F025 20205F5F5F5F205F (        mon09.asm):00108                 FCC     '  ____ ___  ___  ___  ___  _____'
     5F5F20205F5F5F20
     205F5F5F20205F5F
     5F20205F5F5F5F5F
F045 0A0D             (        mon09.asm):00109                 FCB     $0A,$0D
F047 202F205F5F2F2820 (        mon09.asm):00110                 FCC     ' / __/( _ )/ _ \/ _ \/ _ \/ ___/'
     5F20292F205F205C
     2F205F205C2F205F
     205C2F205F5F5F2F
F067 0A0D             (        mon09.asm):00111                 FCB     $0A,$0D
F069 2F205F205C2F205F (        mon09.asm):00112                 FCC     '/ _ \/ _  / // /\_, / ___/ /__'
     20202F202F2F202F
     5C5F2C202F205F5F
     5F2F202F5F5F
F087 0A0D             (        mon09.asm):00113                 FCB     $0A,$0D
F089 5C5F5F5F2F5C5F5F (        mon09.asm):00114                 FCC     '\___/\___/\___//___/_/   \___/'
     5F2F5C5F5F5F2F2F
     5F5F5F2F5F2F2020
     205C5F5F5F2F
F0A7 0A0D             (        mon09.asm):00115                 FCB     $0A,$0D
F0A9 4D4F4E3039205665 (        mon09.asm):00116                 FCC     'MON09 Version 3.3a   1985-2007 Dave Dunfield'
     7273696F6E20332E
     3361202020313938
     352D323030372044
     6176652044756E66
     69656C64
F0D5 0A0D             (        mon09.asm):00117                 FCB     $0A,$0D
F0D7 2A2A205072657373 (        mon09.asm):00118                 FCC     '** Press ? for a list of commands **'
     203F20666F722061
     206C697374206F66
     20636F6D6D616E64
     73202A2A
F0FB 0AFF             (        mon09.asm):00119                 FCB     $0A,$FF
F0FD                  (        mon09.asm):00120         MAIN
F0FD 10CEBFF0         (        mon09.asm):00121                 LDS     #STACK                            ;FIX STACK IN CASE ERROR
F101 17052A           (        mon09.asm):00122                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F104 2A2000           (        mon09.asm):00123                 FCN     '* '
F107 17053B           (        mon09.asm):00124                 LBSR    GETECH                            ;GET CHARACTER
F10A 5F               (        mon09.asm):00125                 CLRB                                      ;INDICATE NO SECOND CHAR
                      (        mon09.asm):00126         ;* LOOK FOR COMMAND IN TABLE
F10B                  (        mon09.asm):00127         LOOKC
F10B 8EF143           (        mon09.asm):00128                 LDX     #CMDTAB                           ;POINT TO COMMAND TABLE
F10E 7FBF18           (        mon09.asm):00129                 CLR     TEMP                              ;INDICATE NO PARTIAL MATCH
F111                  (        mon09.asm):00130         LOOK1
F111 10A381           (        mon09.asm):00131                 CMPD    ,X++                              ;DOES IT MATCH
F114 271E             (        mon09.asm):00132                 BEQ     LOOK3                             ;YES IT DOES
F116 A11E             (        mon09.asm):00133                 CMPA    -2,X                              ;DOES FIRST CHAR MATCH?
F118 2603             (        mon09.asm):00134                 BNE     LOOK2                             ;NO, DON'T RECORD
F11A 7ABF18           (        mon09.asm):00135                 DEC     TEMP                              ;SET FLAG
F11D                  (        mon09.asm):00136         LOOK2
F11D 3002             (        mon09.asm):00137                 LEAX    2,X                               ;ADVANCE TO NEXT
F11F 6D84             (        mon09.asm):00138                 TST     ,X                                ;HAVE WE HIT THE END
F121 26EE             (        mon09.asm):00139                 BNE     LOOK1                             ;NO, KEEP LOOKING
F123 5D               (        mon09.asm):00140                 TSTB                                      ;ALREADY HAVE TWO CHARS?
F124 2615             (        mon09.asm):00141                 BNE     ERROR                             ;YES, ERROR
F126 F6BF18           (        mon09.asm):00142                 LDB     TEMP                              ;ANY PARTIAL MATCHES?
F129 2710             (        mon09.asm):00143                 BEQ     ERROR                             ;NO, ERROR
F12B 1F89             (        mon09.asm):00144                 TFR     A,B                               ;SAVE CHAR IN 'A'
F12D 170515           (        mon09.asm):00145                 LBSR    GETECH                            ;GET NEXT CHAR
F130 1E89             (        mon09.asm):00146                 EXG     A,B                               ; SWAP BACK
F132 20D7             (        mon09.asm):00147                 BRA     LOOKC                             ;AND CONTINUE
                      (        mon09.asm):00148         ;* COMMAND WAS FOUND, EXECUTE IT
F134                  (        mon09.asm):00149         LOOK3
F134 17051C           (        mon09.asm):00150                 LBSR    SPACE                             ;OUTPUT SPACE
F137 AD94             (        mon09.asm):00151                 JSR     [,X]                              ;EXECUTE COMMAND
F139 20C2             (        mon09.asm):00152                 BRA     MAIN                              ;AND RETURN
                      (        mon09.asm):00153         ;* ERROR HAS OCCURED
F13B                  (        mon09.asm):00154         ERROR
F13B 1704F0           (        mon09.asm):00155                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F13E 203F             (        mon09.asm):00156                 FCC     ' ?'
F140 FF               (        mon09.asm):00157                 FCB     $FF
F141 20BA             (        mon09.asm):00158                 BRA     MAIN                              ; TRY AGAIN
                      (        mon09.asm):00159         ;* COMMAND LOOKUP TABLE
F143                  (        mon09.asm):00160         CMDTAB
F143 444D             (        mon09.asm):00161                 FCB     'D','M'                           ; DISPLAY MEMORY
F145 F1C6             (        mon09.asm):00162                 FDB     MEMORY
F147 4449             (        mon09.asm):00163                 FCB     'D','I'                           ; DISASSEMBLE
F149 F2D3             (        mon09.asm):00164                 FDB     DISREG
F14B 4456             (        mon09.asm):00165                 FCB     'D','V'                           ;DISPLAY VECTORS
F14D F26A             (        mon09.asm):00166                 FDB     DISVEC
F14F 4352             (        mon09.asm):00167                 FCB     'C','R'                           ;CHANGE REGISTER
F151 F34F             (        mon09.asm):00168                 FDB     CHGREG
F153 4356             (        mon09.asm):00169                 FCB     'C','V'                           ;CHANGE VECTORS
F155 F2A1             (        mon09.asm):00170                 FDB     CHGVEC
F157 4500             (        mon09.asm):00171                 FCB     'E',0                             ;SUBSTITUTE MEMORY
F159 F227             (        mon09.asm):00172                 FDB     SUBMEM
F15B 4C00             (        mon09.asm):00173                 FCB     'L',0                             ;DOWNLOAD
F15D F484             (        mon09.asm):00174                 FDB     LOAD
F15F 4700             (        mon09.asm):00175                 FCB     'G',0                             ;GO
F161 F3A4             (        mon09.asm):00176                 FDB     GOEXEC
F163 464D             (        mon09.asm):00177                 FCB     'F','M'                           ;FILL MEMORY
F165 F194             (        mon09.asm):00178                 FDB     FILMEM
F167 5252             (        mon09.asm):00179                 FCB     'R','R'                           ;REPEATING READ
F169 F3C9             (        mon09.asm):00180                 FDB     RDLOOP
F16B 5257             (        mon09.asm):00181                 FCB     'R','W'                           ;REPEATING WRITE
F16D F3D9             (        mon09.asm):00182                 FDB     WRLOOP
F16F 5700             (        mon09.asm):00183                 FCB     'W',0                             ;WRITE MEMORY
F171 F217             (        mon09.asm):00184                 FDB     WRIMEM
F173 4D4D             (        mon09.asm):00185                 FCB     'M','M'                           ;MOVE MEMORY
F175 F1AC             (        mon09.asm):00186                 FDB     MOVMEM
F177 5852             (        mon09.asm):00187                 FCB     'X','R'                           ;REPEATING 16 BIT READ
F179 F3F8             (        mon09.asm):00188                 FDB     XRLOOP
F17B 5857             (        mon09.asm):00189                 FCB     'X','W'                           ;REPEATING 16 BIT WRITE
F17D F408             (        mon09.asm):00190                 FDB     XWLOOP
F17F 2B00             (        mon09.asm):00191                 FCB     '+',0                             ;HEX ADDITION
F181 F423             (        mon09.asm):00192                 FDB     HEXADD
F183 2D00             (        mon09.asm):00193                 FCB     '-',0                             ;HEX SUBTRACTION
F185 F434             (        mon09.asm):00194                 FDB     HEXSUB
F187 3F00             (        mon09.asm):00195                 FCB     '?',0                             ;HELP COMMAND
F189 F456             (        mon09.asm):00196                 FDB     HELP
F18B 4F53             (        mon09.asm):00197                 FCB     'O','S'                           ;BOOT COMMAND
F18D F7D0             (        mon09.asm):00198                 FDB     BOOTOS
F18F 4F57             (        mon09.asm):00199                 FCB     'O','W'                           ;WRITE BOOT COMMAND
F191 F760             (        mon09.asm):00200                 FDB     WRITEOS
F193 00               (        mon09.asm):00201                 FCB     0                                 ;MARK END OF TABLE
                      (        mon09.asm):00202         ;*
                      (        mon09.asm):00203         ;* 'F' - FILL MEMORY
                      (        mon09.asm):00204         ;*
F194                  (        mon09.asm):00205         FILMEM
F194 1703DE           (        mon09.asm):00206                 LBSR    GETRNG                            ;GET ADDRESSES
F197 FDBF18           (        mon09.asm):00207                 STD     TEMP                              ;SAVE IT
F19A 1704B6           (        mon09.asm):00208                 LBSR    SPACE                             ;SPACE OVER
F19D 170439           (        mon09.asm):00209                 LBSR    GETBYT                            ;GET DATA BYTE
F1A0 2699             (        mon09.asm):00210                 BNE     ERROR                             ;INVALID
F1A2                  (        mon09.asm):00211         FILL1
F1A2 A780             (        mon09.asm):00212                 STA     ,X+                               ;WRITE IT
F1A4 BCBF18           (        mon09.asm):00213                 CMPX    TEMP                              ;ARE WE THERE
F1A7 23F9             (        mon09.asm):00214                 BLS     FILL1                             ;NO, KEEP GOING
F1A9 1604AD           (        mon09.asm):00215                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00216         ;*
                      (        mon09.asm):00217         ;* 'MM' - MOVE MEMORY
                      (        mon09.asm):00218         ;*
F1AC                  (        mon09.asm):00219         MOVMEM
F1AC 1703C6           (        mon09.asm):00220                 LBSR    GETRNG                            ;GET A RANGE
F1AF FDBF18           (        mon09.asm):00221                 STD     TEMP                              ;SAVE LAST VALUE
F1B2 17049E           (        mon09.asm):00222                 LBSR    SPACE                             ;SEPERATOR
F1B5 1703DA           (        mon09.asm):00223                 LBSR    GETADR                            ;GET DEST ADDRESS
F1B8 1F02             (        mon09.asm):00224                 TFR     D,Y                               ;SET IT UP
F1BA                  (        mon09.asm):00225         MOVM1
F1BA A680             (        mon09.asm):00226                 LDA     ,X+                               ;GET SOURCE BYTE
F1BC A7A0             (        mon09.asm):00227                 STA     ,Y+                               ;SAVE IN DEST
F1BE BCBF18           (        mon09.asm):00228                 CMPX    TEMP                              ;SAVE IT
F1C1 23F7             (        mon09.asm):00229                 BLS     MOVM1                             ;KEEP MOVEING
F1C3 160493           (        mon09.asm):00230                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00231         ;*
                      (        mon09.asm):00232         ;* 'DM' - DISPLAY MEMORY
                      (        mon09.asm):00233         ;*
F1C6                  (        mon09.asm):00234         MEMORY
F1C6 1703AC           (        mon09.asm):00235                 LBSR    GETRNG                            ;GET ADDRESS
F1C9 FDBF18           (        mon09.asm):00236                 STD     TEMP                              ;SAVE
F1CC                  (        mon09.asm):00237         MEM1
F1CC 17048A           (        mon09.asm):00238                 LBSR    LFCR                              ;NEW LINE
F1CF 1704A5           (        mon09.asm):00239                 LBSR    CHKCHR                            ;CHECK FOR CHAR
F1D2 1027FF27         (        mon09.asm):00240                 LBEQ    MAIN                              ;ESCAPE, QUIT
F1D6 1F10             (        mon09.asm):00241                 TFR     X,D                               ;GET ADDRESS
F1D8 3406             (        mon09.asm):00242                 PSHS    A,B                               ;SAVE FOR LATER
F1DA 170437           (        mon09.asm):00243                 LBSR    WRDOUT                            ;DISPLAY
F1DD C610             (        mon09.asm):00244                 LDB     #16                               ;DISPLAY 16 TO A LINE
F1DF                  (        mon09.asm):00245         MEM2
F1DF 170471           (        mon09.asm):00246                 LBSR    SPACE                             ;OUTPUT A SPACE
F1E2 C503             (        mon09.asm):00247                 BITB    #3                                ;ON A BOUNDARY?
F1E4 2603             (        mon09.asm):00248                 BNE     MEM3                              ;NO, SPACE
F1E6 17046A           (        mon09.asm):00249                 LBSR    SPACE                             ;EXTRA SPACE
F1E9                  (        mon09.asm):00250         MEM3
F1E9 A680             (        mon09.asm):00251                 LDA     ,X+                               ;GET BYTE
F1EB 17042A           (        mon09.asm):00252                 LBSR    HEXOUT                            ;DISPLAY
F1EE 5A               (        mon09.asm):00253                 DECB                                      ;REDUCE COUNT
F1EF 26EE             (        mon09.asm):00254                 BNE     MEM2                              ;CONTINUE
F1F1 C604             (        mon09.asm):00255                 LDB     #4                                ;FOUR SPACE
F1F3                  (        mon09.asm):00256         MEM4
F1F3 17045D           (        mon09.asm):00257                 LBSR    SPACE                             ;DISPLAY A SPACE
F1F6 5A               (        mon09.asm):00258                 DECB                                      ;REDUCE COUNT
F1F7 26FA             (        mon09.asm):00259                 BNE     MEM4                              ; CONTINUE
F1F9 3510             (        mon09.asm):00260                 PULS    X                                 ;RESTORE X
F1FB C610             (        mon09.asm):00261                 LDB     #16                               ;COUNT OF 16
F1FD                  (        mon09.asm):00262         MEM5
F1FD A680             (        mon09.asm):00263                 LDA     ,X+                               ;GET CHAR
F1FF 8120             (        mon09.asm):00264                 CMPA    #' '                              ; <SPACE
F201 2504             (        mon09.asm):00265                 BLO     MEM6                              ; CONVERT TO DOT
F203 817F             (        mon09.asm):00266                 CMPA    #$7F                              ; PRINTABLE?
F205 2502             (        mon09.asm):00267                 BLO     MEM7                              ; OK TO DISPLAY
F207                  (        mon09.asm):00268         MEM6
F207 862E             (        mon09.asm):00269                 LDA     #'.'                              ;CHANGE TO DOT
F209                  (        mon09.asm):00270         MEM7
F209 170464           (        mon09.asm):00271                 LBSR    PUTCHR                            ;OUTPUT
F20C 5A               (        mon09.asm):00272                 DECB                                      ;REDUCE COUNT
F20D 26EE             (        mon09.asm):00273                 BNE     MEM5                              ; DISPLAY THEM ALL
F20F BCBF18           (        mon09.asm):00274                 CMPX    TEMP                              ; PAST END?
F212 23B8             (        mon09.asm):00275                 BLS     MEM1                              ; NO, KEEP GOING
F214 160442           (        mon09.asm):00276                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00277         ;*
                      (        mon09.asm):00278         ;* 'W' - WRITE TO MEMORY
                      (        mon09.asm):00279         ;*
F217                  (        mon09.asm):00280         WRIMEM
F217 170378           (        mon09.asm):00281                 LBSR    GETADR                            ;GET ADDRESS
F21A 1F01             (        mon09.asm):00282                 TFR     D,X                               ;SET IT UP
F21C 170434           (        mon09.asm):00283                 LBSR    SPACE                             ; STEP OVER
F21F 1703B7           (        mon09.asm):00284                 LBSR    GETBYT                            ;GET BYTE
F222 A784             (        mon09.asm):00285                 STA     ,X                                ;WRITE TO MEMORY
F224 160432           (        mon09.asm):00286                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00287         ;*
                      (        mon09.asm):00288         ;* 'E' - EDIT MEMORY
                      (        mon09.asm):00289         ;*
F227                  (        mon09.asm):00290         SUBMEM
F227 170368           (        mon09.asm):00291                 LBSR    GETADR                            ;GET ADDRESS
F22A 1F01             (        mon09.asm):00292                 TFR     D,X                               ;COPY
F22C                  (        mon09.asm):00293         SUBM1
F22C 17042A           (        mon09.asm):00294                 LBSR    LFCR                              ; NEW LINE
F22F 1F10             (        mon09.asm):00295                 TFR     X,D                               ;GET ADDRESS
F231 1703E0           (        mon09.asm):00296                 LBSR    WRDOUT                            ; OUTPUT
F234 C608             (        mon09.asm):00297                 LDB     #8                                ;NEW COUNT
F236                  (        mon09.asm):00298         SUBM2
F236 17041A           (        mon09.asm):00299                 LBSR    SPACE                             ; SEPERATOR
F239 A684             (        mon09.asm):00300                 LDA     ,X                                ;GET BYTE
F23B 1703DA           (        mon09.asm):00301                 LBSR    HEXOUT                            ; DISPLAY
F23E 862D             (        mon09.asm):00302                 LDA     #'-'                              ; PROMPT
F240 17042D           (        mon09.asm):00303                 LBSR    PUTCHR                            ; OUTPUT
F243 170393           (        mon09.asm):00304                 LBSR    GETBYT                            ; GET A BYTE
F246 2609             (        mon09.asm):00305                 BNE     SUBM4                             ; INVALID
F248 A784             (        mon09.asm):00306                 STA     ,X                                ;RESAVE
F24A                  (        mon09.asm):00307         SUBM3
F24A 3001             (        mon09.asm):00308                 LEAX    1,X                               ;ADVANCE
F24C 5A               (        mon09.asm):00309                 DECB                                      ;REDUCE COUNT
F24D 26E7             (        mon09.asm):00310                 BNE     SUBM2                             ;MORE, CONTINUE
F24F 20DB             (        mon09.asm):00311                 BRA     SUBM1                             ;NEW LINE
F251                  (        mon09.asm):00312         SUBM4
F251 810D             (        mon09.asm):00313                 CMPA    #$0D                              ;CR?
F253 10270402         (        mon09.asm):00314                 LBEQ    LFCR                              ;IF SO, QUIT
F257 8120             (        mon09.asm):00315                 CMPA    #' '                              ;SPACE?
F259 2605             (        mon09.asm):00316                 BNE     SUBM5                             ;NO
F25B 1703F5           (        mon09.asm):00317                 LBSR    SPACE                             ;FILL FOR TWO DIGITS
F25E 20EA             (        mon09.asm):00318                 BRA     SUBM3                             ;ADVANCE
F260                  (        mon09.asm):00319         SUBM5
F260 8108             (        mon09.asm):00320                 CMPA    #$08                              ; BACKSPACE?
F262 1026FED5         (        mon09.asm):00321                 LBNE    ERROR                             ; INVALID
F266 301F             (        mon09.asm):00322                 LEAX    -1,X                              ; BACKUP
F268 20C2             (        mon09.asm):00323                 BRA     SUBM1                             ; NEW LINE
                      (        mon09.asm):00324         ;*
                      (        mon09.asm):00325         ;* 'DV' - DISPLAY VECTORS
                      (        mon09.asm):00326         ;*
F26A                  (        mon09.asm):00327         DISVEC
F26A 8EF280           (        mon09.asm):00328                 LDX     #VECTXT                           ; POINT TO VECTOR TEXT
F26D 108EBF00         (        mon09.asm):00329                 LDY     #SWIADR                           ; POINT TO FIRST VECTOR
F271                  (        mon09.asm):00330         DISV1
F271 1703C4           (        mon09.asm):00331                 LBSR    WRLIN                             ; OUTPUT A MESSAGE
F274 ECA1             (        mon09.asm):00332                 LDD     ,Y++                              ; GET A VECTOR
F276 17039B           (        mon09.asm):00333                 LBSR    WRDOUT                            ; OUTPUT VECTOR ADDRESS
F279 A684             (        mon09.asm):00334                 LDA     ,X                                ;MORE TEXT?
F27B 26F4             (        mon09.asm):00335                 BNE     DISV1                             ; AND CONTINUE
F27D 1603D9           (        mon09.asm):00336                 LBRA    LFCR                              ; NEW LINE
F280                  (        mon09.asm):00337         VECTXT
F280 5357493D00       (        mon09.asm):00338                 FCN     'SWI='
F285 20535749323D00   (        mon09.asm):00339                 FCN     ' SWI2='
F28C 20535749333D00   (        mon09.asm):00340                 FCN     ' SWI3='
F293 204952513D00     (        mon09.asm):00341                 FCN     ' IRQ='
F299 20464952513D00   (        mon09.asm):00342                 FCN     ' FIRQ='
F2A0 00               (        mon09.asm):00343                 FCB     0                                 ; END OF TABLE
                      (        mon09.asm):00344         ;*
                      (        mon09.asm):00345         ;* 'CV' - CHANGE VECTOR
                      (        mon09.asm):00346         ;*
F2A1                  (        mon09.asm):00347         CHGVEC
F2A1 1703A1           (        mon09.asm):00348                 LBSR    GETECH                            ;GET CHAR & ECHO
F2A4 8153             (        mon09.asm):00349                 CMPA    #'S'                              ;SWI?
F2A6 2604             (        mon09.asm):00350                 BNE     CHGV1                             ;NO
F2A8 8631             (        mon09.asm):00351                 LDA     #'1'                              ;SAME AS '1'
F2AA 200E             (        mon09.asm):00352                 BRA     CHGV3                             ;CONTINUE
F2AC                  (        mon09.asm):00353         CHGV1
F2AC 8149             (        mon09.asm):00354                 CMPA    #'I'                              ;IRQ?
F2AE 2604             (        mon09.asm):00355                 BNE     CHGV2                             ;NO, ITS OK
F2B0 8634             (        mon09.asm):00356                 LDA     #'4'                              ;CONVERT
F2B2 2006             (        mon09.asm):00357                 BRA     CHGV3                             ;AND CONTINUE
F2B4                  (        mon09.asm):00358         CHGV2
F2B4 8146             (        mon09.asm):00359                 CMPA    #'F'                              ;FIRQ?
F2B6 2602             (        mon09.asm):00360                 BNE     CHGV3                             ;NO
F2B8 8635             (        mon09.asm):00361                 LDA     #'5'                              ;CONVERT
F2BA                  (        mon09.asm):00362         CHGV3
F2BA 8031             (        mon09.asm):00363                 SUBA    #'1'                              ;TEST IT
F2BC 8104             (        mon09.asm):00364                 CMPA    #4                                ;CHECK RANGE
F2BE 1022FE79         (        mon09.asm):00365                 LBHI    ERROR                             ; INVALID
F2C2 8EBF00           (        mon09.asm):00366                 LDX     #SWIADR                           ;POINT TO IT
F2C5                  (        mon09.asm):00367         CHGV4
F2C5 48               (        mon09.asm):00368                 LSLA                                      ;X2 FOR 2 BYTE ENTRIES
F2C6 3086             (        mon09.asm):00369                 LEAX    A,X     ADVANCE TO VECTOR
F2C8 170388           (        mon09.asm):00370                 LBSR    SPACE                             ; SEPERATOR
F2CB 1702C4           (        mon09.asm):00371                 LBSR    GETADR                            ;GET NEW VALUE
F2CE ED84             (        mon09.asm):00372                 STD     ,X                                ; WRITE NEW VECTOR
F2D0 160386           (        mon09.asm):00373                 LBRA    LFCR                              ; NEW LINE & EXIT
                      (        mon09.asm):00374         ;*
                      (        mon09.asm):00375         ;* 'DR' - DISPLAY REGISTERS
                      (        mon09.asm):00376         ;*
F2D3                  (        mon09.asm):00377         DISREG
F2D3 8EF31D           (        mon09.asm):00378                 LDX     #REGTXT                           ;POINT TO TEXT
F2D6 108EBF0A         (        mon09.asm):00379                 LDY     #SAVCC                            ;POINT TO VALUE
F2DA 8D31             (        mon09.asm):00380                 BSR     RSUB1                             ;'CC='
F2DC 170359           (        mon09.asm):00381                 LBSR    WRLIN                             ;' ['
F2DF CEF347           (        mon09.asm):00382                 LDU     #CCBITS                           ;POINT TO BIT TABLE
F2E2 E63F             (        mon09.asm):00383                 LDB     -1,Y                              ;GET BITS BACK
F2E4 3420             (        mon09.asm):00384                 PSHS    Y                                 ;SAVE POINTER
F2E6 108E0008         (        mon09.asm):00385                 LDY     #8                                ;EIGHT BITS IN BYTE
F2EA                  (        mon09.asm):00386         REGB1
F2EA A6C0             (        mon09.asm):00387                 LDA     ,U+                               ; GET BIT IDENTIFIER
F2EC 58               (        mon09.asm):00388                 ASLB                                      ;IS IT SET?
F2ED 2502             (        mon09.asm):00389                 BCS     RBITS                             ;YES, DISPLAY IT
F2EF 862D             (        mon09.asm):00390                 LDA     #'-'                              ;NO, DISPLAY DASH
F2F1                  (        mon09.asm):00391         RBITS
F2F1 17037C           (        mon09.asm):00392                 LBSR    PUTCHR                            ; OUTPUT A CHARACTER
F2F4 313F             (        mon09.asm):00393                 LEAY    -1,Y                              ; REDUCE COUNT
F2F6 26F2             (        mon09.asm):00394                 BNE     REGB1                             ; MORE TO GO
F2F8 3520             (        mon09.asm):00395                 PULS    Y                                 ; RESTORE Y
F2FA 8D11             (        mon09.asm):00396                 BSR     RSUB1                             ;'] A='
F2FC 8D0F             (        mon09.asm):00397                 BSR     RSUB1                             ;' B='
F2FE 8D0D             (        mon09.asm):00398                 BSR     RSUB1                             ;' DP='
F300 8D13             (        mon09.asm):00399                 BSR     RSUB2                             ;' X='
F302 8D11             (        mon09.asm):00400                 BSR     RSUB2                             ;' Y='
F304 8D0F             (        mon09.asm):00401                 BSR     RSUB2                             ;' U='
F306 8D0D             (        mon09.asm):00402                 BSR     RSUB2                             ;' PC='
F308 8D0B             (        mon09.asm):00403                 BSR     RSUB2                             ;' S='
F30A 16034C           (        mon09.asm):00404                 LBRA    LFCR                              ;QUIT
                      (        mon09.asm):00405         ;* DISPLAY 8 BIT REGISTER VALUE
F30D                  (        mon09.asm):00406         RSUB1
F30D 170328           (        mon09.asm):00407                 LBSR    WRLIN                             ;OUTPUT BYTE VALUE
F310 A6A0             (        mon09.asm):00408                 LDA     ,Y+                               ; GET REGISTER VALUE
F312 160303           (        mon09.asm):00409                 LBRA    HEXOUT                            ;OUTPUT IN HEX
                      (        mon09.asm):00410         ;* DISPLAY 16 BIT REGISTER VALUE
F315                  (        mon09.asm):00411         RSUB2
F315 170320           (        mon09.asm):00412                 LBSR    WRLIN                             ; OUTPUT WORD VALUE
F318 ECA1             (        mon09.asm):00413                 LDD     ,Y++                              ; GET REGISTER VALUE
F31A 1602F7           (        mon09.asm):00414                 LBRA    WRDOUT                            ; OUTPUT IN HEX
                      (        mon09.asm):00415         ;* TABLE OF TEXT FOR REGISTER DISPLAY
F31D                  (        mon09.asm):00416         REGTXT
F31D 43433D00         (        mon09.asm):00417                 FCN     'CC='
F321 205B00           (        mon09.asm):00418                 FCN     ' ['
F324 5D20413D00       (        mon09.asm):00419                 FCN     '] A='
F329 20423D00         (        mon09.asm):00420                 FCN     ' B='
F32D 2044503D00       (        mon09.asm):00421                 FCN     ' DP='
F332 20583D00         (        mon09.asm):00422                 FCN     ' X='
F336 20593D00         (        mon09.asm):00423                 FCN     ' Y='
F33A 20553D00         (        mon09.asm):00424                 FCN     ' U='
F33E 2050433D00       (        mon09.asm):00425                 FCN     ' PC='
F343 20533D00         (        mon09.asm):00426                 FCN     ' S='
                      (        mon09.asm):00427         ;* TABLE OF CONDITION CODE BIT MEANINGS
F347                  (        mon09.asm):00428         CCBITS
F347 454648494E5A5643 (        mon09.asm):00429                 FCC     'EFHINZVC'
                      (        mon09.asm):00430         ;*
                      (        mon09.asm):00431         ;* 'CR' - CHANGE REGISTER
                      (        mon09.asm):00432         ;*
F34F                  (        mon09.asm):00433         CHGREG
F34F 1702F3           (        mon09.asm):00434                 LBSR    GETECH      GET OPERAND
F352 8120             (        mon09.asm):00435                 CMPA    #' '        A+B?
F354 2727             (        mon09.asm):00436                 BEQ     CHG4        YES
F356 8EF39A           (        mon09.asm):00437                 LDX     #CHGTAB     POINT TO TABLE
F359 5F               (        mon09.asm):00438                 CLRB    ZERO INDICATOR
F35A                  (        mon09.asm):00439         CHG1
F35A A184             (        mon09.asm):00440                 CMPA    ,X      IS THIS IT?
F35C 2708             (        mon09.asm):00441                 BEQ     CHG2        YES
F35E 5C               (        mon09.asm):00442                 INCB    ADVANCE COUNT
F35F 6D80             (        mon09.asm):00443                 TST     ,X+     END OF TABLE
F361 26F7             (        mon09.asm):00444                 BNE     CHG1        NO, KEEP TRYING
F363 16FDD5           (        mon09.asm):00445                 LBRA    ERROR       INDICATE ERROR
F366                  (        mon09.asm):00446         CHG2
F366 1702EA           (        mon09.asm):00447                 LBSR    SPACE       OUTPUT SPACE
F369 8EBF0A           (        mon09.asm):00448                 LDX     #SAVCC      POINT TO START OF REGISTERS
F36C C104             (        mon09.asm):00449                 CMPB    #4      16 BIT?
F36E 241B             (        mon09.asm):00450                 BHS     R16     YES
F370 3085             (        mon09.asm):00451                 LEAX    B,X     OFFSET TO ADDRESS
F372 170264           (        mon09.asm):00452                 LBSR    GETBYT      GET NEW VALUE
F375 1026FDC2         (        mon09.asm):00453                 LBNE    ERROR       INVALID
F379 A784             (        mon09.asm):00454                 STA     ,X      SAVE IN REGISTER
F37B 201A             (        mon09.asm):00455                 BRA     CHG3        AND QUIT
F37D                  (        mon09.asm):00456         CHG4
F37D 1702AE           (        mon09.asm):00457                 LBSR    WRMSG       OUTPUT MESSAGE
F380 5B41425D2000     (        mon09.asm):00458                 FCN     '[AB] '
F386 8EBF0B           (        mon09.asm):00459                 LDX     #SAVA       POINT TO 'D'
F389 2007             (        mon09.asm):00460                 BRA     R17     MAKE LIKE 16 BIT REG
F38B                  (        mon09.asm):00461         R16
F38B 3004             (        mon09.asm):00462                 LEAX    4,X     OFFSET TO 16 BIT REGISTERS
F38D C004             (        mon09.asm):00463                 SUBB    #4      CONVERT TO ZERO ORIGIN
F38F 58               (        mon09.asm):00464                 LSLB    DOUBLE FOR WORD VALUES
F390 3085             (        mon09.asm):00465                 LEAX    B,X     MOVE TO CORRECT OFFSET
F392                  (        mon09.asm):00466         R17
F392 1701FD           (        mon09.asm):00467                 LBSR    GETADR      GET WORD VALUE
F395 ED84             (        mon09.asm):00468                 STD     ,X      SET REGISTER VALUE
F397                  (        mon09.asm):00469         CHG3
F397 1602BF           (        mon09.asm):00470                 LBRA    LFCR        QUIT
                      (        mon09.asm):00471         ;* TABLE OF REGISTER NAMES
F39A                  (        mon09.asm):00472         CHGTAB
F39A 4341424458595550 (        mon09.asm):00473                 FCN     'CABDXYUPS'
     5300
                      (        mon09.asm):00474         ;*
                      (        mon09.asm):00475         ;* 'G' - GO (EXECUTE)
                      (        mon09.asm):00476         ;*
F3A4                  (        mon09.asm):00477         GOEXEC
F3A4 1701B6           (        mon09.asm):00478                 LBSR    GETPC       GET ADDRESS
F3A7 1702AF           (        mon09.asm):00479                 LBSR    LFCR        NEW LINE
F3AA 10FEBF16         (        mon09.asm):00480                 LDS     SAVS        RESTORE STACK POINTER
F3AE B6BF0A           (        mon09.asm):00481                 LDA     SAVCC       GET SAVED CC
F3B1 F6BF0D           (        mon09.asm):00482                 LDB     SAVDP       GET SAVED DPR
F3B4 3406             (        mon09.asm):00483                 PSHS    A,B     SAVE ON STACK FOR LAST RESTORE
F3B6 FCBF0B           (        mon09.asm):00484                 LDD     SAVA        RESTORE A, B REGISTERS
F3B9 BEBF0E           (        mon09.asm):00485                 LDX     SAVX        RESTORE X REGISTER
F3BC 10BEBF10         (        mon09.asm):00486                 LDY     SAVY        RESTORE Y REGISTER
F3C0 FEBF12           (        mon09.asm):00487                 LDU     SAVU        RESTORE U REGISTER
F3C3 3509             (        mon09.asm):00488                 PULS    CC,DP       RESTORE CC + DP
F3C5 6E9FBF14         (        mon09.asm):00489                 JMP     [SAVPC]     EXECUTE USER PGM
                      (        mon09.asm):00490         ;*
                      (        mon09.asm):00491         ;* 'RR' - REPEATING READ
                      (        mon09.asm):00492         ;*
F3C9                  (        mon09.asm):00493         RDLOOP:
F3C9 1701C6           (        mon09.asm):00494                 LBSR    GETADR                            ;GET ADDRESS
F3CC 1F01             (        mon09.asm):00495                 TFR     D,X                               ;SET UP 'X'
F3CE 170288           (        mon09.asm):00496                 LBSR    LFCR                              ;NEW LINE
F3D1                  (        mon09.asm):00497         RDLP1:
F3D1 A684             (        mon09.asm):00498                 LDA     ,X                                ;READ LOCATION
F3D3 1702A1           (        mon09.asm):00499                 LBSR    CHKCHR                            ;ABORT?
F3D6 26F9             (        mon09.asm):00500                 BNE     RDLP1                             ;NO, ITS OK
F3D8 39               (        mon09.asm):00501                 RTS
                      (        mon09.asm):00502         ;*
                      (        mon09.asm):00503         ;* 'RW' - REPEATING WRITE
                      (        mon09.asm):00504         ;*
F3D9                  (        mon09.asm):00505         WRLOOP:
F3D9 1701B6           (        mon09.asm):00506                 LBSR    GETADR                            ;GET ADDRESS
F3DC 1F01             (        mon09.asm):00507                 TFR     D,X                               ;SET UP 'X'
F3DE 170272           (        mon09.asm):00508                 LBSR    SPACE                             ;SPACE OVER
F3E1 1701F5           (        mon09.asm):00509                 LBSR    GETBYT                            ;GET DATA
F3E4 1026FD53         (        mon09.asm):00510                 LBNE    ERROR                             ;INVALID
F3E8 3402             (        mon09.asm):00511                 PSHS    A                                 ;SAVE ACCA
F3EA 17026C           (        mon09.asm):00512                 LBSR    LFCR                              ;NEW LINE
F3ED                  (        mon09.asm):00513         WRLP1:
F3ED A6E4             (        mon09.asm):00514                 LDA     ,S                                ;GET CHAR
F3EF A784             (        mon09.asm):00515                 STA     ,X                                ;WRITE IT OUT
F3F1 170283           (        mon09.asm):00516                 LBSR    CHKCHR                            ;ABORT COMMAND?
F3F4 26F7             (        mon09.asm):00517                 BNE     WRLP1                             ;CONTINUE
F3F6 3582             (        mon09.asm):00518                 PULS    A,PC                              ;GO HOME
                      (        mon09.asm):00519         ;*
                      (        mon09.asm):00520         ;* 'XR' - REPEATING 16 BIT READ
                      (        mon09.asm):00521         ;*
F3F8                  (        mon09.asm):00522         XRLOOP
F3F8 170197           (        mon09.asm):00523                 LBSR    GETADR      GET ADDRESS
F3FB 1F01             (        mon09.asm):00524                 TFR     D,X     SET UP 'X'
F3FD 170259           (        mon09.asm):00525                 LBSR    LFCR        NEW LINE
F400                  (        mon09.asm):00526         XRLP1
F400 EC84             (        mon09.asm):00527                 LDD     ,X      READ LOCATION
F402 170272           (        mon09.asm):00528                 LBSR    CHKCHR      ABORT?
F405 26F9             (        mon09.asm):00529                 BNE     XRLP1       NO, ITS OK
F407 39               (        mon09.asm):00530                 RTS
                      (        mon09.asm):00531         ;*
                      (        mon09.asm):00532         ;* 'XW' - REPEATING 16 BITWRITE
                      (        mon09.asm):00533         ;*
F408                  (        mon09.asm):00534         XWLOOP
F408 170187           (        mon09.asm):00535                 LBSR    GETADR      GET ADDRESS
F40B 1F01             (        mon09.asm):00536                 TFR     D,X     SET UP 'X'
F40D 170243           (        mon09.asm):00537                 LBSR    SPACE       SPACE OVER
F410 17017F           (        mon09.asm):00538                 LBSR    GETADR      GET DATA
F413 3406             (        mon09.asm):00539                 PSHS    A,B     SAVE ACCA
F415 170241           (        mon09.asm):00540                 LBSR    LFCR        NEW LINE
F418                  (        mon09.asm):00541         XWLP1
F418 ECE4             (        mon09.asm):00542                 LDD     ,S      GET CHAR
F41A ED84             (        mon09.asm):00543                 STD     ,X      WRITE IT OUT
F41C 170258           (        mon09.asm):00544                 LBSR    CHKCHR      ABORT COMMAND?
F41F 26F7             (        mon09.asm):00545                 BNE     XWLP1       CONTINUE
F421 3586             (        mon09.asm):00546                 PULS    A,B,PC      GO HOME
                      (        mon09.asm):00547         ;*
                      (        mon09.asm):00548         ;* '+' - HEXIDECIMAL ADDITION
                      (        mon09.asm):00549         ;*
F423                  (        mon09.asm):00550         HEXADD
F423 17016C           (        mon09.asm):00551                 LBSR    GETADR      GET FIRST VALUE
F426 3406             (        mon09.asm):00552                 PSHS    A,B     SAVE IT
F428 862B             (        mon09.asm):00553                 LDA     #'+'        PLUS SIGN
F42A 170243           (        mon09.asm):00554                 LBSR    PUTCHR      DISPLAY
F42D 170162           (        mon09.asm):00555                 LBSR    GETADR      GET SECOND VALUE
F430 E3E4             (        mon09.asm):00556                 ADDD    ,S      PERFORM ADDITION
F432 2013             (        mon09.asm):00557                 BRA     HEXSHO      DISPLAY IT
                      (        mon09.asm):00558         ;*
                      (        mon09.asm):00559         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (        mon09.asm):00560         ;*
F434                  (        mon09.asm):00561         HEXSUB
F434 17015B           (        mon09.asm):00562                 LBSR    GETADR      GET FIRST
F437 3406             (        mon09.asm):00563                 PSHS    A,B     SAVE IT
F439 862D             (        mon09.asm):00564                 LDA     #'-'        MINUS SIGN
F43B 170232           (        mon09.asm):00565                 LBSR    PUTCHR      DISPLAY
F43E 170151           (        mon09.asm):00566                 LBSR    GETADR      GET SECOND ADDRESS
F441 3406             (        mon09.asm):00567                 PSHS    A,B     SAVE IT
F443 EC62             (        mon09.asm):00568                 LDD     2,S     GET FIRST VALUE
F445 A3E1             (        mon09.asm):00569                 SUBD    ,S++        PERFORM SUBTRACTION
F447                  (        mon09.asm):00570         HEXSHO
F447 EDE4             (        mon09.asm):00571                 STD     ,S      SAVE RESULT
F449 863D             (        mon09.asm):00572                 LDA     #'='        =ALS SIGN
F44B 170222           (        mon09.asm):00573                 LBSR    PUTCHR      DISPLAY
F44E 3506             (        mon09.asm):00574                 PULS    A,B     RESTORE RESULT
F450 1701C1           (        mon09.asm):00575                 LBSR    WRDOUT      OUTPUT
F453 160203           (        mon09.asm):00576                 LBRA    LFCR        NEW LINE & RETURN
                      (        mon09.asm):00577         ;*
                      (        mon09.asm):00578         ;* '?' - HELP COMMAND
                      (        mon09.asm):00579         ;*
F456                  (        mon09.asm):00580         HELP
F456 8EF9AB           (        mon09.asm):00581                 LDX     #HTEXT      POINT TO HELP TEXT
F459                  (        mon09.asm):00582         HLP1
F459 C619             (        mon09.asm):00583                 LDB     #25     COLUMN COUNTER
F45B                  (        mon09.asm):00584         HLP2
F45B A680             (        mon09.asm):00585                 LDA     ,X+     GET CHAR FROM TEXT
F45D 2718             (        mon09.asm):00586                 BEQ     HLP4        EXIT THIS LINE
F45F 817C             (        mon09.asm):00587                 CMPA    #'|'        SEPERATOR?
F461 2706             (        mon09.asm):00588                 BEQ     HLP3        YES, EXIT
F463 17020A           (        mon09.asm):00589                 LBSR    PUTCHR      OUTPUT
F466 5A               (        mon09.asm):00590                 DECB    BACKUP
F467 20F2             (        mon09.asm):00591                 BRA     HLP2        NEXT
F469                  (        mon09.asm):00592         HLP3
F469 1701E7           (        mon09.asm):00593                 LBSR    SPACE       OUTPUT SPACE
F46C 5A               (        mon09.asm):00594                 DECB    REDUCE COUNT
F46D 26FA             (        mon09.asm):00595                 BNE     HLP3        KEEP GOING
F46F 1701BC           (        mon09.asm):00596                 LBSR    WRMSG       OUTPUT MESSAGE
F472 2D2000           (        mon09.asm):00597                 FCN     '- '        SEPERATOR
F475 20E4             (        mon09.asm):00598                 BRA     HLP2        AND CONTINUE
F477                  (        mon09.asm):00599         HLP4
F477 1701DF           (        mon09.asm):00600                 LBSR    LFCR        NEW LINE
F47A 1701FA           (        mon09.asm):00601                 LBSR    CHKCHR      TEST FOR CHARACTER ENTERED
F47D 2704             (        mon09.asm):00602                 BEQ     HLP5        IF SO, EXIT
F47F A684             (        mon09.asm):00603                 LDA     ,X      IS THIS THE END?
F481 2AD6             (        mon09.asm):00604                 BPL     HLP1        NO, KEEP GOING
F483                  (        mon09.asm):00605         HLP5
F483 39               (        mon09.asm):00606                 RTS
                      (        mon09.asm):00607         ;*
                      (        mon09.asm):00608         ;* 'DL' - DOWNLOAD
                      (        mon09.asm):00609         ;*
F484                  (        mon09.asm):00610         LOAD
F484 1701D2           (        mon09.asm):00611                 LBSR    LFCR        NEW LINE
F487                  (        mon09.asm):00612         DLO1
F487 8D0E             (        mon09.asm):00613                 BSR     DLOAD       DOWNLOAD RECORD
F489 2409             (        mon09.asm):00614                 BCC     DLO2        END
F48B A6E4             (        mon09.asm):00615                 LDA     ,S      GET OLD I/O CONFIG
F48D 862E             (        mon09.asm):00616                 LDA     #'.'        GET DOT
F48F 1701DE           (        mon09.asm):00617                 LBSR    PUTCHR      OUTPUT
F492 20F3             (        mon09.asm):00618                 BRA     DLO1        CONTINUE
F494                  (        mon09.asm):00619         DLO2
F494 1601C2           (        mon09.asm):00620                 LBRA    LFCR        New line & return
                      (        mon09.asm):00621         ;* Download a record in either MOTOROLA or INTEL hex format
F497                  (        mon09.asm):00622         DLOAD
F497 1701CB           (        mon09.asm):00623                 LBSR    GETCHR      Get a character
F49A 813A             (        mon09.asm):00624                 CMPA    #':'        Start of INTEL record?
F49C 276B             (        mon09.asm):00625                 BEQ     DLINT       Yes, download INTEL
F49E 8153             (        mon09.asm):00626                 CMPA    #'S'        Start of MOTOROLA record?
F4A0 26F5             (        mon09.asm):00627                 BNE     DLOAD       No, keep looking
                      (        mon09.asm):00628         ;* Download a record in MOTOROLA hex format
F4A2                  (        mon09.asm):00629         DLMOT
F4A2 1701C0           (        mon09.asm):00630                 LBSR    GETCHR      GET NEXT CHAR
F4A5 8130             (        mon09.asm):00631                 CMPA    #'0'        HEADER RECORD?
F4A7 27EE             (        mon09.asm):00632                 BEQ     DLOAD       SKIP IT
F4A9 8139             (        mon09.asm):00633                 CMPA    #'9'        END OF FILE?
F4AB 275B             (        mon09.asm):00634                 BEQ     DLEOF       END OF FILE
F4AD 8131             (        mon09.asm):00635                 CMPA    #'1'        DATA RECORD?
F4AF 2642             (        mon09.asm):00636                 BNE     LODERR      LOAD ERROR
F4B1 170125           (        mon09.asm):00637                 LBSR    GETBYT      GET LENGTH
F4B4 263D             (        mon09.asm):00638                 BNE     LODERR      Report error
F4B6 B7BF18           (        mon09.asm):00639                 STA     TEMP        START CHECKSUM
F4B9 8003             (        mon09.asm):00640                 SUBA    #3      CONVERT
F4BB B7BF19           (        mon09.asm):00641                 STA     TEMP+1      Set length
F4BE 170118           (        mon09.asm):00642                 LBSR    GETBYT      Get first byte of address
F4C1 2630             (        mon09.asm):00643                 BNE     LODERR      Report error
F4C3 1F89             (        mon09.asm):00644                 TFR     A,B     Save for later
F4C5 BBBF18           (        mon09.asm):00645                 ADDA    TEMP        Include in checksum
F4C8 B7BF18           (        mon09.asm):00646                 STA     TEMP        Resave
F4CB 17010B           (        mon09.asm):00647                 LBSR    GETBYT      Get next byte of address
F4CE 2623             (        mon09.asm):00648                 BNE     LODERR      Report error
F4D0 1E89             (        mon09.asm):00649                 EXG     A,B     Swap
F4D2 1F01             (        mon09.asm):00650                 TFR     D,X     Set pointer
F4D4 FBBF18           (        mon09.asm):00651                 ADDB    TEMP        Include in checksum
F4D7 F7BF18           (        mon09.asm):00652                 STB     TEMP        Resave checksum
F4DA                  (        mon09.asm):00653         DLMOT1
F4DA 1700FC           (        mon09.asm):00654                 LBSR    GETBYT      Get a data byte
F4DD A780             (        mon09.asm):00655                 STA     ,X+     Save in RAM
F4DF BBBF18           (        mon09.asm):00656                 ADDA    TEMP        Include checksum
F4E2 B7BF18           (        mon09.asm):00657                 STA     TEMP        Resave
F4E5 7ABF19           (        mon09.asm):00658                 DEC     TEMP+1      Reduce length
F4E8 26F0             (        mon09.asm):00659                 BNE     DLMOT1      Do them all
F4EA 1700EC           (        mon09.asm):00660                 LBSR    GETBYT      Get a byte
F4ED BBBF18           (        mon09.asm):00661                 ADDA    TEMP        Add computed checksum
F4F0 4C               (        mon09.asm):00662                 INCA    Test for success
F4F1 2713             (        mon09.asm):00663                 BEQ     DLRTS       Download OK
                      (        mon09.asm):00664         ;* Error occured on loading
F4F3                  (        mon09.asm):00665         LODERR
F4F3 170138           (        mon09.asm):00666                 LBSR    WRMSG       OUTPUT
F4F6 203F4C6F61642065 (        mon09.asm):00667                 FCC     ' ?Load error'
     72726F72
F502 FF               (        mon09.asm):00668                 FCB     $FF
F503 16FBF7           (        mon09.asm):00669                 LBRA    MAIN        BACK FOR COMMAND
                      (        mon09.asm):00670         ;* Return indicating another record
F506                  (        mon09.asm):00671         DLRTS
F506 1A01             (        mon09.asm):00672                 ORCC    #$01        SET 'C' FLAG
F508                  (        mon09.asm):00673         DLEOF
F508 39               (        mon09.asm):00674                 RTS
                      (        mon09.asm):00675         ;* Download record in INTEL format
F509                  (        mon09.asm):00676         DLINT
F509 1700CD           (        mon09.asm):00677                 LBSR    GETBYT      Get count
F50C 26E5             (        mon09.asm):00678                 BNE     LODERR      Report error
F50E B7BF18           (        mon09.asm):00679                 STA     TEMP        Start checksum
F511 B7BF19           (        mon09.asm):00680                 STA     TEMP+1      Record length
F514 8100             (        mon09.asm):00681                 CMPA    #0      Test & clear C
F516 27F0             (        mon09.asm):00682                 BEQ     DLEOF       End of file
                      (        mon09.asm):00683         ;* Get address
F518 1700BE           (        mon09.asm):00684                 LBSR    GETBYT      Get first byte of address
F51B 26D6             (        mon09.asm):00685                 BNE     LODERR      Report error
F51D 1F89             (        mon09.asm):00686                 TFR     A,B     Save for later
F51F BBBF18           (        mon09.asm):00687                 ADDA    TEMP        Include in checksum
F522 B7BF18           (        mon09.asm):00688                 STA     TEMP        Resave
F525 1700B1           (        mon09.asm):00689                 LBSR    GETBYT      Get next byte of address
F528 26C9             (        mon09.asm):00690                 BNE     LODERR      Report error
F52A 1E89             (        mon09.asm):00691                 EXG     A,B     Swap
F52C 1F01             (        mon09.asm):00692                 TFR     D,X     Set pointer
F52E FBBF18           (        mon09.asm):00693                 ADDB    TEMP        Include in checksum
F531 F7BF18           (        mon09.asm):00694                 STB     TEMP        Resave checksum
                      (        mon09.asm):00695         ;* Get record type
F534 1700A2           (        mon09.asm):00696                 LBSR    GETBYT      Get type value
F537 26BA             (        mon09.asm):00697                 BNE     LODERR      Report error
F539 BBBF18           (        mon09.asm):00698                 ADDA    TEMP        Include checksum
F53C B7BF18           (        mon09.asm):00699                 STA     TEMP        Resave checksum
                      (        mon09.asm):00700         ;* Get data bytes
F53F                  (        mon09.asm):00701         DLINT1
F53F 170097           (        mon09.asm):00702                 LBSR    GETBYT      Get data byte
F542 26AF             (        mon09.asm):00703                 BNE     LODERR      Report error
F544 A780             (        mon09.asm):00704                 STA     ,X+     Write to memory
F546 BBBF18           (        mon09.asm):00705                 ADDA    TEMP        Include checksum
F549 B7BF18           (        mon09.asm):00706                 STA     TEMP        Resave checksum
F54C 7ABF19           (        mon09.asm):00707                 DEC     TEMP+1      Reduce length
F54F 26EE             (        mon09.asm):00708                 BNE     DLINT1      Do them all
                      (        mon09.asm):00709         ;* Get checksum
F551 BDF5D9           (        mon09.asm):00710                 JSR     GETBYT      Read a byte
F554 269D             (        mon09.asm):00711                 BNE     LODERR      Report error
F556 BBBF18           (        mon09.asm):00712                 ADDA    TEMP        Include checksum
F559 27AB             (        mon09.asm):00713                 BEQ     DLRTS       Report success
F55B 2096             (        mon09.asm):00714                 BRA     LODERR      Report failure
                      (        mon09.asm):00715         ;*
                      (        mon09.asm):00716         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (        mon09.asm):00717         ;*
F55D                  (        mon09.asm):00718         GETPC
F55D 8D3A             (        mon09.asm):00719                 BSR     GETAD1      Get address
F55F 2710             (        mon09.asm):00720                 BEQ     GETPC1      Normal data
F561 8120             (        mon09.asm):00721                 CMPA    #' '        Space?
F563 2631             (        mon09.asm):00722                 BNE     GETERR      Report error
F565 1700C6           (        mon09.asm):00723                 LBSR    WRMSG       Output message
F568 2D3E00           (        mon09.asm):00724                 FCN     '->'        Display address
F56B FCBF14           (        mon09.asm):00725                 LDD     SAVPC       Get PC value
F56E 1600A3           (        mon09.asm):00726                 LBRA    WRDOUT      Display
F571                  (        mon09.asm):00727         GETPC1
F571 FDBF14           (        mon09.asm):00728                 STD     SAVPC       Set new PC
F574 39               (        mon09.asm):00729                 RTS
                      (        mon09.asm):00730         ;*
                      (        mon09.asm):00731         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (        mon09.asm):00732         ;*
F575                  (        mon09.asm):00733         GETRNG
F575 8D1B             (        mon09.asm):00734                 BSR     GETADR      Get first address
F577 1F01             (        mon09.asm):00735                 TFR     D,X     Save in X
F579 862C             (        mon09.asm):00736                 LDA     #','        Separator
F57B 1700F2           (        mon09.asm):00737                 LBSR    PUTCHR      Display
F57E 8D19             (        mon09.asm):00738                 BSR     GETAD1      Get second address
F580 2786             (        mon09.asm):00739                 BEQ     DLEOF       Normal data
F582 8120             (        mon09.asm):00740                 CMPA    #' '        Space?
F584 2610             (        mon09.asm):00741                 BNE     GETERR      No, report error
F586 1700A5           (        mon09.asm):00742                 LBSR    WRMSG       Output message
F589 4646464600       (        mon09.asm):00743                 FCN     'FFFF'
F58E CCFFFF           (        mon09.asm):00744                 LDD     #$FFFF      Assume top of RAM
F591 39               (        mon09.asm):00745                 RTS
                      (        mon09.asm):00746         ;*
                      (        mon09.asm):00747         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (        mon09.asm):00748         ;*
F592                  (        mon09.asm):00749         GETADR
F592 8D05             (        mon09.asm):00750                 BSR     GETAD1      Get word value
F594 270F             (        mon09.asm):00751                 BEQ     GETAD2      Its OK
F596                  (        mon09.asm):00752         GETERR
F596 16FBA2           (        mon09.asm):00753                 LBRA    ERROR       Report error
                      (        mon09.asm):00754         ;* Get word value without error checking
F599                  (        mon09.asm):00755         GETAD1
F599 8D3E             (        mon09.asm):00756                 BSR     GETBYT      Get HIGH byte
F59B 2609             (        mon09.asm):00757                 BNE     GETAD3      Test for special register
F59D 1F89             (        mon09.asm):00758                 TFR     A,B     Copy for later
F59F 8D38             (        mon09.asm):00759                 BSR     GETBYT      Get LOW byte
F5A1 26F3             (        mon09.asm):00760                 BNE     GETERR      Report error
F5A3 1E89             (        mon09.asm):00761                 EXG     A,B     Correct order
F5A5                  (        mon09.asm):00762         GETAD2
F5A5 39               (        mon09.asm):00763                 RTS
                      (        mon09.asm):00764         ;* Handle special register names
F5A6                  (        mon09.asm):00765         GETAD3
F5A6 3410             (        mon09.asm):00766                 PSHS    X       Save X
F5A8 BEBF0E           (        mon09.asm):00767                 LDX     SAVX        Assume X
F5AB 8158             (        mon09.asm):00768                 CMPA    #'X'        Is it X?
F5AD 271C             (        mon09.asm):00769                 BEQ     GETAD4      Yes
F5AF BEBF10           (        mon09.asm):00770                 LDX     SAVY        Assume Y
F5B2 8159             (        mon09.asm):00771                 CMPA    #'Y'        Is it Y?
F5B4 2715             (        mon09.asm):00772                 BEQ     GETAD4      Yes
F5B6 BEBF12           (        mon09.asm):00773                 LDX     SAVU        Assume U
F5B9 8155             (        mon09.asm):00774                 CMPA    #'U'        Is it U?
F5BB 270E             (        mon09.asm):00775                 BEQ     GETAD4      Yes
F5BD BEBF0E           (        mon09.asm):00776                 LDX     SAVX        Assume S
F5C0 8153             (        mon09.asm):00777                 CMPA    #'S'        Is it S?
F5C2 2707             (        mon09.asm):00778                 BEQ     GETAD4      Yes
F5C4 BEBF14           (        mon09.asm):00779                 LDX     SAVPC       Assume PC?
F5C7 8150             (        mon09.asm):00780                 CMPA    #'P'        Is it PC?
F5C9 260C             (        mon09.asm):00781                 BNE     GETAD5      No, error
F5CB                  (        mon09.asm):00782         GETAD4
F5CB 863D             (        mon09.asm):00783                 LDA     #'='        Separator
F5CD 1700A0           (        mon09.asm):00784                 LBSR    PUTCHR      Echo it
F5D0 1F10             (        mon09.asm):00785                 TFR     X,D     D = value
F5D2 8D40             (        mon09.asm):00786                 BSR     WRDOUT      Display it
F5D4 4F               (        mon09.asm):00787                 CLRA    Set 'Z'
F5D5 1F10             (        mon09.asm):00788                 TFR     X,D     Get value back
F5D7                  (        mon09.asm):00789         GETAD5
F5D7 3590             (        mon09.asm):00790                 PULS    X,PC        Restore & return
                      (        mon09.asm):00791         ;*
                      (        mon09.asm):00792         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (        mon09.asm):00793         ;*
F5D9                  (        mon09.asm):00794         GETBYT
F5D9 8D20             (        mon09.asm):00795                 BSR     GETNIB      Get FIRST nibble
F5DB 2611             (        mon09.asm):00796                 BNE     GETB3       Invalid, test for quote
F5DD 48               (        mon09.asm):00797                 LSLA    Rotate
F5DE 48               (        mon09.asm):00798                 LSLA    into
F5DF 48               (        mon09.asm):00799                 LSLA    high
F5E0 48               (        mon09.asm):00800                 LSLA    nibble
F5E1 3402             (        mon09.asm):00801                 PSHS    A       Save for later
F5E3 8D16             (        mon09.asm):00802                 BSR     GETNIB      Get SECOND nibble
F5E5 2604             (        mon09.asm):00803                 BNE     GETB2       Report error
F5E7 AAE4             (        mon09.asm):00804                 ORA     ,S      Include high
F5E9                  (        mon09.asm):00805         GETB4
F5E9 1A04             (        mon09.asm):00806                 ORCC    #$04        Indicate success (SET 'Z')
F5EB                  (        mon09.asm):00807         GETB2
F5EB 3261             (        mon09.asm):00808                 LEAS    1,S     Skip saved value
F5ED                  (        mon09.asm):00809         GETB1
F5ED 39               (        mon09.asm):00810                 RTS
F5EE                  (        mon09.asm):00811         GETB3
F5EE 8127             (        mon09.asm):00812                 CMPA    #$27        Single quote?
F5F0 26FB             (        mon09.asm):00813                 BNE     GETB1       No, abort
F5F2 170070           (        mon09.asm):00814                 LBSR    GETCHR      Get ASCII character
F5F5 170078           (        mon09.asm):00815                 LBSR    PUTCHR      Echo on terminal
F5F8 1A04             (        mon09.asm):00816                 ORCC    #$04        Indicate success (SET 'Z')
F5FA 39               (        mon09.asm):00817                 RTS
                      (        mon09.asm):00818         ;*
                      (        mon09.asm):00819         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (        mon09.asm):00820         ;*
F5FB                  (        mon09.asm):00821         GETNIB
F5FB 170047           (        mon09.asm):00822                 LBSR    GETECH      Get character
F5FE 8030             (        mon09.asm):00823                 SUBA    #'0'        Convert numbers
F600 8109             (        mon09.asm):00824                 CMPA    #9      Numeric?
F602 230A             (        mon09.asm):00825                 BLS     GETN1       Yes, OK
F604 8007             (        mon09.asm):00826                 SUBA    #7      Convert alphas
F606 810A             (        mon09.asm):00827                 CMPA    #$A     Under?
F608 2507             (        mon09.asm):00828                 BLO     GETN2       Yer, error
F60A 810F             (        mon09.asm):00829                 CMPA    #$F     Over?
F60C 2203             (        mon09.asm):00830                 BHI     GETN2       Yes, error
F60E                  (        mon09.asm):00831         GETN1
F60E 1A04             (        mon09.asm):00832                 ORCC    #$04        SET 'Z' FLAG, INDICATE OK
F610 39               (        mon09.asm):00833                 RTS
F611                  (        mon09.asm):00834         GETN2
F611 8B37             (        mon09.asm):00835                 ADDA    #$37        Normalize character + clear Z
F613 39               (        mon09.asm):00836                 RTS
                      (        mon09.asm):00837         ;*
                      (        mon09.asm):00838         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (        mon09.asm):00839         ;*
F614                  (        mon09.asm):00840         WRDOUT
F614 8D02             (        mon09.asm):00841                 BSR     HEXOUT      Output first byte
F616 1F98             (        mon09.asm):00842                 TFR     B,A     Get second byte
                      (        mon09.asm):00843         ;*
                      (        mon09.asm):00844         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00845         ;*
F618                  (        mon09.asm):00846         HEXOUT
F618 3402             (        mon09.asm):00847                 PSHS    A       Save low nibble
F61A 44               (        mon09.asm):00848                 LSRA    Rotate
F61B 44               (        mon09.asm):00849                 LSRA    upper nibble
F61C 44               (        mon09.asm):00850                 LSRA    into
F61D 44               (        mon09.asm):00851                 LSRA    lower nibble
F61E 8D02             (        mon09.asm):00852                 BSR     HOUT        Output high nibble
F620 3502             (        mon09.asm):00853                 PULS    A       Rertore low nibble
                      (        mon09.asm):00854         ;*
                      (        mon09.asm):00855         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00856         ;*
F622                  (        mon09.asm):00857         HOUT:
F622 840F             (        mon09.asm):00858                 ANDA    #$0F                              ; Remove upper half
F624 8B30             (        mon09.asm):00859                 ADDA    #'0'                              ; Convert to printable
F626 8139             (        mon09.asm):00860                 CMPA    #'9'                              ; In range?
F628 2302             (        mon09.asm):00861                 BLS     HOUT1                             ; Yes, display
F62A 8B07             (        mon09.asm):00862                 ADDA    #7                                ;Convert to alpha
F62C                  (        mon09.asm):00863         HOUT1:
F62C 2042             (        mon09.asm):00864                 BRA     PUTCHR                            ; Output character
                      (        mon09.asm):00865         ;*
                      (        mon09.asm):00866         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (        mon09.asm):00867         ;*
F62E                  (        mon09.asm):00868         WRMSG:
F62E 3410             (        mon09.asm):00869                 PSHS    X                                 ;SAVE X
F630 AE62             (        mon09.asm):00870                 LDX     2,S                               ;GET OLD PC
F632 8D04             (        mon09.asm):00871                 BSR     WRLIN                             ;OUTPUT LINE
F634 AF62             (        mon09.asm):00872                 STX     2,S                               ;UPDATE OLD PC
F636 3590             (        mon09.asm):00873                 PULS    X,PC                              ;RESTORE X, RETURN
                      (        mon09.asm):00874         ;*
                      (        mon09.asm):00875         ;* DISPLAY MESSAGE(X)
                      (        mon09.asm):00876         ;*
F638                  (        mon09.asm):00877         WRLIN:
F638 A680             (        mon09.asm):00878                 LDA     ,X+                               ;GET CHAR FROM MESSAGE
F63A 2708             (        mon09.asm):00879                 BEQ     WRLND                             ;END, QUIT
F63C 81FF             (        mon09.asm):00880                 CMPA    #$FF                              ;NEWLINE END, LFCR & EXIT
F63E 2719             (        mon09.asm):00881                 BEQ     LFCR                              ;IF SO, NEW LINE, RETURN
F640 8D2E             (        mon09.asm):00882                 BSR     PUTCHR                            ;OUTPUT TO TERM
F642 20F4             (        mon09.asm):00883                 BRA     WRLIN                             ;KEEP GOING
F644                  (        mon09.asm):00884         WRLND
F644 39               (        mon09.asm):00885                 RTS
                      (        mon09.asm):00886         ;*
                      (        mon09.asm):00887         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (        mon09.asm):00888         ;*
F645                  (        mon09.asm):00889         GETECH:
F645 8D1E             (        mon09.asm):00890                 BSR     GETCHR                            ;GET CHARACTER
F647 8120             (        mon09.asm):00891                 CMPA    #' '                              ;SPACE?
F649 23F9             (        mon09.asm):00892                 BLS     WRLND                             ;IF < DON'T DISPLAY
F64B 8161             (        mon09.asm):00893                 CMPA    #$61                              ;LOWER CASE?
F64D 2521             (        mon09.asm):00894                 BLO     PUTCHR                            ;OK
F64F 845F             (        mon09.asm):00895                 ANDA    #$5F                              ;CONVERT TO UPPER
F651 201D             (        mon09.asm):00896                 BRA     PUTCHR                            ;ECHO
                      (        mon09.asm):00897         ;*
                      (        mon09.asm):00898         ;* DISPLAY A SPACE ON THE TERMINAL
                      (        mon09.asm):00899         ;*
F653                  (        mon09.asm):00900         SPACE:
F653 3402             (        mon09.asm):00901                 PSHS    A                                 ;SAVE A
F655 8620             (        mon09.asm):00902                 LDA     #' '                              ;GET SPACE
F657 2008             (        mon09.asm):00903                 BRA     LFC1                              ;DISLAY AND GO HOME
                      (        mon09.asm):00904         ;*
                      (        mon09.asm):00905         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (        mon09.asm):00906         ;*
F659                  (        mon09.asm):00907         LFCR:
F659 3402             (        mon09.asm):00908                 PSHS    A                                 ;SAVE
F65B 860A             (        mon09.asm):00909                 LDA     #$0A                              ;GET LF
F65D 8D11             (        mon09.asm):00910                 BSR     PUTCHR                            ;OUTPUT
F65F 860D             (        mon09.asm):00911                 LDA     #$0D                              ;GET CR
F661                  (        mon09.asm):00912         LFC1:
F661 8D0D             (        mon09.asm):00913                 BSR     PUTCHR                            ;OUTPUT
F663 3582             (        mon09.asm):00914                 PULS    A,PC                              ;RESTORE AND GO HOME
                      (        mon09.asm):00915         ;*
                      (        mon09.asm):00916         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (        mon09.asm):00917         ;*
F665                  (        mon09.asm):00918         GETCHR:
F665 3410             (        mon09.asm):00919                 PSHS    X                                 ;SAVE 'X'
F667                  (        mon09.asm):00920         GETC1:
F667 1705D9           (        mon09.asm):00921                 LBSR    READ                              ;READ TERMINAL
F66A 81FF             (        mon09.asm):00922                 CMPA    #$FF
F66C 27F9             (        mon09.asm):00923                 BEQ     GETC1                             ;KEEP TRYING
F66E 3590             (        mon09.asm):00924                 PULS    X,PC
                      (        mon09.asm):00925         ;*
                      (        mon09.asm):00926         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (        mon09.asm):00927         ;*
F670                  (        mon09.asm):00928         PUTCHR:
F670 3416             (        mon09.asm):00929                 PSHS    A,B,X                             ;SAVE REGS
F672 1705DC           (        mon09.asm):00930                 LBSR    WRITE                             ;OUTPUT TO TERMINAL
F675 3596             (        mon09.asm):00931                 PULS    A,B,X,PC                          ;RESTORE AND GO HOME
                      (        mon09.asm):00932         ;*
                      (        mon09.asm):00933         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (        mon09.asm):00934         ;* SCREEN OUTPUT FLOW CONTROL.
                      (        mon09.asm):00935         ;*
F677                  (        mon09.asm):00936         CHKCHR:
F677 3410             (        mon09.asm):00937                 PSHS    X                                 ;SAVE PTR
F679 1705C7           (        mon09.asm):00938                 LBSR    READ                              ;READ TERMINAL
F67C 8120             (        mon09.asm):00939                 CMPA    #' '                              ;SPACE?
F67E 2613             (        mon09.asm):00940                 BNE     CHKC3                             ;NO, IGNORE IT
F680                  (        mon09.asm):00941         CHKC1:
F680 CA80             (        mon09.asm):00942                 ORB     #%10000000                        ;SET HELD BIT
F682 1705BE           (        mon09.asm):00943                 LBSR    READ                              ;GET KEY FROM CONSOLE
F685 8120             (        mon09.asm):00944                 CMPA    #' '                              ;SPACE?
F687 270A             (        mon09.asm):00945                 BEQ     CHKC3                             ;YES, ALLOW
F689 C47F             (        mon09.asm):00946                 ANDB    #%01111111                        ;DISABLE HELD BIT
F68B 810D             (        mon09.asm):00947                 CMPA    #$0D                              ;CARRIAGE RETURN?
F68D 2704             (        mon09.asm):00948                 BEQ     CHKC3                             ;ALLOW
F68F 811B             (        mon09.asm):00949                 CMPA    #$1B                              ;ESCAPE?
F691 26ED             (        mon09.asm):00950                 BNE     CHKC1                             ;NO, IGNORE
F693                  (        mon09.asm):00951         CHKC3:
F693 811B             (        mon09.asm):00952                 CMPA    #$1B                              ;TEST FOR ESCAPE CHARACTER
F695 3590             (        mon09.asm):00953                 PULS    X,PC
                      (        mon09.asm):00954         ;*
                      (        mon09.asm):00955         ;* SUBROUTINES
                      (        mon09.asm):00956         ;*
F697                  (        mon09.asm):00957         WRHEXB
F697 3402             (        mon09.asm):00958                 PSHS    A       SAVE IT
F699 8624             (        mon09.asm):00959                 LDA     #'$'        INDICATE HEX
F69B A7C0             (        mon09.asm):00960                 STA     ,U+     SAVE
F69D 2008             (        mon09.asm):00961                 BRA     WRHEX1      CONTINUE
F69F                  (        mon09.asm):00962         WRHEXW
F69F 3404             (        mon09.asm):00963                 PSHS    B       SAVE B
F6A1 C624             (        mon09.asm):00964                 LDB     #'$'        INDICATE HEX
F6A3 E7C0             (        mon09.asm):00965                 STB     ,U+     SAVE IT
F6A5 8D02             (        mon09.asm):00966                 BSR     WRHEX       OUTPUT
F6A7                  (        mon09.asm):00967         WRHEX1
F6A7 3502             (        mon09.asm):00968                 PULS    A       RESTORE
F6A9                  (        mon09.asm):00969         WRHEX
F6A9 3402             (        mon09.asm):00970                 PSHS    A       SAVE IT
F6AB 44               (        mon09.asm):00971                 LSRA    SHIFT
F6AC 44               (        mon09.asm):00972                 LSRA    HIGH BYTE
F6AD 44               (        mon09.asm):00973                 LSRA    INTO
F6AE 44               (        mon09.asm):00974                 LSRA    LOW FOR OUTPUT
F6AF 8D02             (        mon09.asm):00975                 BSR     WRHEXN      OUTPUT NIBBLE
F6B1 3502             (        mon09.asm):00976                 PULS    A       RETORE
F6B3                  (        mon09.asm):00977         WRHEXN
F6B3 840F             (        mon09.asm):00978                 ANDA    #$0F        REMOVE CRAP
F6B5 8B30             (        mon09.asm):00979                 ADDA    #$30        CONVERT
F6B7 8139             (        mon09.asm):00980                 CMPA    #$39        OK?
F6B9 2302             (        mon09.asm):00981                 BLS     WRNOK       OK
F6BB 8B07             (        mon09.asm):00982                 ADDA    #7      CONVERT
F6BD                  (        mon09.asm):00983         WRNOK
F6BD A7C0             (        mon09.asm):00984                 STA     ,U+     SAVE IT
F6BF 39               (        mon09.asm):00985                 RTS
                      (        mon09.asm):00986         ;*
                      (        mon09.asm):00987         ;* NMI HANDLER
                      (        mon09.asm):00988         ;*
F6C0                  (        mon09.asm):00989         NMIHND
F6C0 8EBF0A           (        mon09.asm):00990                 LDX     #SAVCC      POINT TO START OF SAVED REGS
F6C3 C60C             (        mon09.asm):00991                 LDB     #12     MOVE 12 BYTES
F6C5                  (        mon09.asm):00992         NMIH1
F6C5 A6E0             (        mon09.asm):00993                 LDA     ,S+     GET BYTE
F6C7 A780             (        mon09.asm):00994                 STA     ,X+     SAVE
F6C9 5A               (        mon09.asm):00995                 DECB    DECREMENT COUNT
F6CA 26F9             (        mon09.asm):00996                 BNE     NMIH1       DO THEM ALL
F6CC 10FFBF16         (        mon09.asm):00997                 STS     SAVS        SAVE STACK POINTER
F6D0 17FF5B           (        mon09.asm):00998                 LBSR    WRMSG       DISPLAY MESSAGE
F6D3 2A2A2A204E4D4920 (        mon09.asm):00999                 FCC     '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
F6E8 FF               (        mon09.asm):01000                 FCB     $FF     NEW LINE
F6E9 205C             (        mon09.asm):01001                 BRA     BRKREG      DISPLAY REGISTERS
                      (        mon09.asm):01002         ;*
                      (        mon09.asm):01003         ;* SWI HANDLER
                      (        mon09.asm):01004         ;*
F6EB                  (        mon09.asm):01005         SWIHND
F6EB 108E0300         (        mon09.asm):01006                 LDY     #BRKTAB     POINT TO BREAKPOINT TABLE
F6EF AE6A             (        mon09.asm):01007                 LDX     10,S        GET STORED PC
F6F1 301F             (        mon09.asm):01008                 LEAX    -1,X        BACKUP TO BREAKPOINT ADDRESS
F6F3 C608             (        mon09.asm):01009                 LDB     #8      CHECK EIGHT BREAKPOINTS
F6F5                  (        mon09.asm):01010         SWIHN1
F6F5 ACA4             (        mon09.asm):01011                 CMPX    ,Y      IS THIS IT?
F6F7 2710             (        mon09.asm):01012                 BEQ     SWIHN2      YES
F6F9 3123             (        mon09.asm):01013                 LEAY    3,Y     SKIP OPCODE
F6FB 5A               (        mon09.asm):01014                 DECB    REDUCE COUNT
F6FC 26F7             (        mon09.asm):01015                 BNE     SWIHN1      CONTINUE
F6FE E662             (        mon09.asm):01016                 LDB     2,S     RESTORE B.
F700 AE64             (        mon09.asm):01017                 LDX     4,S     RESTORE X.
F702 10AE66           (        mon09.asm):01018                 LDY     6,S     RESTORE Y.
F705 6E9FBF00         (        mon09.asm):01019                 JMP     [SWIADR]    NOT A BREAKPOINT, EXECUTE SWI HANDLER
F709                  (        mon09.asm):01020         SWIHN2
F709 F7BF1D           (        mon09.asm):01021                 STB     INSTYP      SAVE BREAKPOINT NUMBER
F70C 8EBF0A           (        mon09.asm):01022                 LDX     #SAVCC      POINT TO START OF SAVED REGS
F70F C60A             (        mon09.asm):01023                 LDB     #10     MOVE 10
F711                  (        mon09.asm):01024         SWIHN25
F711 A6E0             (        mon09.asm):01025                 LDA     ,S+     GET BYTE
F713 A780             (        mon09.asm):01026                 STA     ,X+     SAVE
F715 5A               (        mon09.asm):01027                 DECB    DECREMENT COUNT
F716 26F9             (        mon09.asm):01028                 BNE     SWIHN25     DO THEM ALL
F718 3510             (        mon09.asm):01029                 PULS    X       GET PC
F71A 301F             (        mon09.asm):01030                 LEAX    -1,X        SET BACK TO REAL PC
F71C BFBF14           (        mon09.asm):01031                 STX     SAVPC       SAVED PC
F71F 10FFBF16         (        mon09.asm):01032                 STS     SAVS        SAVE STACK POINTER
F723 17FF08           (        mon09.asm):01033                 LBSR    WRMSG       DISPLAY MESSAGE
F726 2A2A2A2042726561 (        mon09.asm):01034                 FCN     '*** Breakpoint #'
     6B706F696E742023
     00
F737 8638             (        mon09.asm):01035                 LDA     #$38        GET NUMBER, PLUS ASCII CONVERT
F739 B0BF1D           (        mon09.asm):01036                 SUBA    INSTYP      CONVERT TO PROPER DIGIT
F73C 17FF31           (        mon09.asm):01037                 LBSR    PUTCHR      DISPLAY
F73F 17FEEC           (        mon09.asm):01038                 LBSR    WRMSG       OUTPUT MESSAGE
F742 202A2A2A         (        mon09.asm):01039                 FCC     ' ***'      TRAILING MESSAGE
F746 FF               (        mon09.asm):01040                 FCB     $FF     NEW LINE
F747                  (        mon09.asm):01041         BRKREG
F747 17FB89           (        mon09.asm):01042                 LBSR    DISREG      DISPLAY
F74A                  (        mon09.asm):01043         BRKRES
F74A 8E0300           (        mon09.asm):01044                 LDX     #BRKTAB     POINT TO BREAKPOINT TABLE
F74D C608             (        mon09.asm):01045                 LDB     #8      DO IT EIGHT TIMES
F74F                  (        mon09.asm):01046         SWIHN3
F74F 10AE81           (        mon09.asm):01047                 LDY     ,X++        GET REG
F752 2704             (        mon09.asm):01048                 BEQ     SWIHN4      NO BRK, NEXT
F754 A684             (        mon09.asm):01049                 LDA     ,X      GET OPCODE
F756 A7A4             (        mon09.asm):01050                 STA     ,Y      REPLACE IN RAM
F758                  (        mon09.asm):01051         SWIHN4
F758 3001             (        mon09.asm):01052                 LEAX    1,X     SKIP OPCODE
F75A 5A               (        mon09.asm):01053                 DECB    REDUCE COUNT
F75B 26F2             (        mon09.asm):01054                 BNE     SWIHN3      GO AGAIN
F75D 16F99D           (        mon09.asm):01055                 LBRA    MAIN        DO PROMPT
                      (        mon09.asm):01056         
                      (        mon09.asm):01057         ;* Write OS
F760                  (        mon09.asm):01058         WRITEOS:
F760 17FECB           (        mon09.asm):01059                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F763 575254494E47204F (        mon09.asm):01060                 FCC     'WRTING OS TO XT-IDE'
     5320544F2058542D
     494445
F776 0A0DFF           (        mon09.asm):01061                 FCB     $0A,$0D,$FF
F779 BDF843           (        mon09.asm):01062                 JSR     XTIDE_INIT
F77C C6E0             (        mon09.asm):01063                 LDB     #$E0                              ; E0=MST  F0=SLV
F77E F7E30C           (        mon09.asm):01064                 STB     XTIDE_DEVICE
F781 C600             (        mon09.asm):01065                 LDB     #$00
F783 F7E30A           (        mon09.asm):01066                 STB     XTIDE_LBAHI
F786 F7E308           (        mon09.asm):01067                 STB     XTIDE_LBAMID
F789 F7E306           (        mon09.asm):01068                 STB     XTIDE_LBALOW
F78C F7BF0B           (        mon09.asm):01069                 STB     SAVA
F78F C601             (        mon09.asm):01070                 LDB     #$01
F791 F7E304           (        mon09.asm):01071                 STB     XTIDE_SEC_CNT
F794 8E2000           (        mon09.asm):01072                 LDX     #$2000
F797                  (        mon09.asm):01073         WRITEOS_1:
F797 108E0000         (        mon09.asm):01074                 LDY     #$0000
                      (        mon09.asm):01075         !
F79B A680             (        mon09.asm):01076                 LDA     ,X+
F79D A7A90100         (        mon09.asm):01077                 STA     HSTBUF,Y
F7A1 3121             (        mon09.asm):01078                 INY
F7A3 108C0200         (        mon09.asm):01079                 CMPY    #$0200
F7A7 26F2             (        mon09.asm):01080                 BNE     <
F7A9 3410             (        mon09.asm):01081                 PSHS    X
F7AB BDF927           (        mon09.asm):01082                 JSR     IDE_WRITE_SECTOR
F7AE 3510             (        mon09.asm):01083                 PULS    X
F7B0 C6E0             (        mon09.asm):01084                 LDB     #$E0                              ; E0=MST  F0=SLV
F7B2 F7E30C           (        mon09.asm):01085                 STB     XTIDE_DEVICE
F7B5 C600             (        mon09.asm):01086                 LDB     #$00
F7B7 F7E30A           (        mon09.asm):01087                 STB     XTIDE_LBAHI
F7BA F7E308           (        mon09.asm):01088                 STB     XTIDE_LBAMID
F7BD F7E306           (        mon09.asm):01089                 STB     XTIDE_LBALOW
F7C0 7CBF0B           (        mon09.asm):01090                 INC     SAVA
F7C3 F6BF0B           (        mon09.asm):01091                 LDB     SAVA
F7C6 F7E306           (        mon09.asm):01092                 STB     XTIDE_LBALOW
F7C9 C122             (        mon09.asm):01093                 CMPB    #$22
F7CB 26CA             (        mon09.asm):01094                 BNE     WRITEOS_1
F7CD 7EF000           (        mon09.asm):01095                 JMP     RESET
                      (        mon09.asm):01096         ;* BOOT OS
F7D0                  (        mon09.asm):01097         BOOTOS:
F7D0 17FE5B           (        mon09.asm):01098                 LBSR    WRMSG                             ;OUTPUT MESSAGE
F7D3 424F4F54494E4720 (        mon09.asm):01099                 FCC     'BOOTING OS FROM XT-IDE'
     4F532046524F4D20
     58542D494445
F7E9 0A0DFF           (        mon09.asm):01100                 FCB     $0A,$0D,$FF
F7EC BDF843           (        mon09.asm):01101                 JSR     XTIDE_INIT
F7EF C6E0             (        mon09.asm):01102                 LDB     #$E0                              ; E0=MST  F0=SLV
F7F1 F7E30C           (        mon09.asm):01103                 STB     XTIDE_DEVICE
F7F4 C600             (        mon09.asm):01104                 LDB     #$00
F7F6 F7E30A           (        mon09.asm):01105                 STB     XTIDE_LBAHI
F7F9 F7E308           (        mon09.asm):01106                 STB     XTIDE_LBAMID
F7FC F7E306           (        mon09.asm):01107                 STB     XTIDE_LBALOW
F7FF F7BF0B           (        mon09.asm):01108                 STB     SAVA
F802 C601             (        mon09.asm):01109                 LDB     #$01
F804 F7E304           (        mon09.asm):01110                 STB     XTIDE_SEC_CNT
F807 8E2000           (        mon09.asm):01111                 LDX     #$2000
F80A                  (        mon09.asm):01112         BOOTOS_1:
F80A 3410             (        mon09.asm):01113                 PSHS    X
F80C BDF89D           (        mon09.asm):01114                 JSR     IDE_READ_SECTOR
F80F 3510             (        mon09.asm):01115                 PULS    X
F811 108E0000         (        mon09.asm):01116                 LDY     #$0000
                      (        mon09.asm):01117         !
F815 A6A90100         (        mon09.asm):01118                 LDA     HSTBUF,Y
F819 3121             (        mon09.asm):01119                 INY
F81B A780             (        mon09.asm):01120                 STA     ,X+
F81D 108C0200         (        mon09.asm):01121                 CMPY    #$0200
F821 26F2             (        mon09.asm):01122                 BNE     <
F823 C6E0             (        mon09.asm):01123                 LDB     #$E0                              ; E0=MST  F0=SLV
F825 F7E30C           (        mon09.asm):01124                 STB     XTIDE_DEVICE
F828 C600             (        mon09.asm):01125                 LDB     #$00
F82A F7E30A           (        mon09.asm):01126                 STB     XTIDE_LBAHI
F82D F7E308           (        mon09.asm):01127                 STB     XTIDE_LBAMID
F830 F7E306           (        mon09.asm):01128                 STB     XTIDE_LBALOW
F833 7CBF0B           (        mon09.asm):01129                 INC     SAVA
F836 F6BF0B           (        mon09.asm):01130                 LDB     SAVA
F839 F7E306           (        mon09.asm):01131                 STB     XTIDE_LBALOW
F83C C122             (        mon09.asm):01132                 CMPB    #$22
F83E 26CA             (        mon09.asm):01133                 BNE     BOOTOS_1
F840 7E2000           (        mon09.asm):01134                 JMP     $2000
                      (        mon09.asm):01135         
                      (        mon09.asm):01136         ;* Drivers
                      (        mon09.asm):01137                 INCLUDE cubix_ide.asm
                      (    cubix_ide.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00002         ;
                      (    cubix_ide.asm):00003         ;       CUBIX IDE disk drivers 6809PC - XT IDE ISA CARD
                      (    cubix_ide.asm):00004         ;
                      (    cubix_ide.asm):00005         ;       Entry points:
                      (    cubix_ide.asm):00006         ;               XTIDE_INIT      - CALLED DURING OS INIT
                      (    cubix_ide.asm):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00009         ;________________________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00010         ;
                      (    cubix_ide.asm):00011         
     E300             (    cubix_ide.asm):00012         XTIDE_DATA_LO   = CUBIX_IO_BASE+$300
     E301             (    cubix_ide.asm):00013         XTIDE_DATA_HI   = CUBIX_IO_BASE+$301
     E302             (    cubix_ide.asm):00014         XTIDE_ERR       = CUBIX_IO_BASE+$302
     E302             (    cubix_ide.asm):00015         XTIDE_FECODE    = CUBIX_IO_BASE+$302
     E304             (    cubix_ide.asm):00016         XTIDE_SEC_CNT   = CUBIX_IO_BASE+$304
     E306             (    cubix_ide.asm):00017         XTIDE_LBALOW    = CUBIX_IO_BASE+$306
     E308             (    cubix_ide.asm):00018         XTIDE_LBAMID    = CUBIX_IO_BASE+$308
     E30A             (    cubix_ide.asm):00019         XTIDE_LBAHI     = CUBIX_IO_BASE+$30A
     E30C             (    cubix_ide.asm):00020         XTIDE_DEVICE    = CUBIX_IO_BASE+$30C
     E30E             (    cubix_ide.asm):00021         XTIDE_COMMAND   = CUBIX_IO_BASE+$30E
     E30E             (    cubix_ide.asm):00022         XTIDE_STATUS    = CUBIX_IO_BASE+$30E
                      (    cubix_ide.asm):00023         
                      (    cubix_ide.asm):00024         
                      (    cubix_ide.asm):00025         
                      (    cubix_ide.asm):00026         
                      (    cubix_ide.asm):00027         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (    cubix_ide.asm):00028         XTIDE_CMD_RECAL = $10
     0020             (    cubix_ide.asm):00029         XTIDE_CMD_READ  = $20
     0030             (    cubix_ide.asm):00030         XTIDE_CMD_WRITE = $30
     0091             (    cubix_ide.asm):00031         XTIDE_CMD_INIT  = $91
     00EC             (    cubix_ide.asm):00032         XTIDE_CMD_ID    = $EC
     00EF             (    cubix_ide.asm):00033         XTIDE_CMD_FEAT  = $EF
     00E0             (    cubix_ide.asm):00034         XTIDE_CMD_SPINDOWN = $E0
     00E1             (    cubix_ide.asm):00035         XTIDE_CMD_SPINUP = $E1
                      (    cubix_ide.asm):00036         
                      (    cubix_ide.asm):00037         
                      (    cubix_ide.asm):00038                 IFDEF   BIOS6809PC
F843                  (    cubix_ide.asm):00039         XTIDE_INIT:
F843 BDF85B           (    cubix_ide.asm):00040                 JSR     XTIDE_PROBE
F846 86E0             (    cubix_ide.asm):00041                 LDA     #$E0                              ; E0=MST  F0=SLV
F848 B7E30C           (    cubix_ide.asm):00042                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00043         
F84B BDF8BA           (    cubix_ide.asm):00044                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
F84E 250A             (    cubix_ide.asm):00045                 BCS     >
                      (    cubix_ide.asm):00046         
F850 8601             (    cubix_ide.asm):00047                 LDA     #$01                              ; ENABLE 8-BIT MODE (XT-CF-LITE)
F852 B7E302           (    cubix_ide.asm):00048                 STA     XTIDE_FECODE
F855 86EF             (    cubix_ide.asm):00049                 LDA     #XTIDE_CMD_FEAT
F857 B7E30E           (    cubix_ide.asm):00050                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00051         !
F85A 39               (    cubix_ide.asm):00052                 RTS
                      (    cubix_ide.asm):00053                 ENDIF
                      (    cubix_ide.asm):00054         
                      (    cubix_ide.asm):00055         
                      (    cubix_ide.asm):00056                 IFNDEF   BIOS6809PC
F85B                  (    cubix_ide.asm):00057         XTIDETIMEOUT:
                      (    cubix_ide.asm):00058                 .BYTE   $00,$00
                      (    cubix_ide.asm):00059         
                      (    cubix_ide.asm):00060         
                      (    cubix_ide.asm):00061         
                      (    cubix_ide.asm):00062         ;__XTIDE_INIT________________________________________________________________________________________
                      (    cubix_ide.asm):00063         ;
                      (    cubix_ide.asm):00064         ;  INIT AND DISPLAY IDE INFO
                      (    cubix_ide.asm):00065         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00066         ;
F85B                  (    cubix_ide.asm):00067         XTIDE_INIT:
                      (    cubix_ide.asm):00068                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00069                 LDX     #MESSAGE1
                      (    cubix_ide.asm):00070                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00071                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00072         ;
                      (    cubix_ide.asm):00073                 LDX     #MESSAGE2
                      (    cubix_ide.asm):00074                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00075                 LDD     #XTIDE_DATA_LO                    ; GET BASE PORT
                      (    cubix_ide.asm):00076                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_ide.asm):00077         ;
                      (    cubix_ide.asm):00078                 JSR     XTIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
                      (    cubix_ide.asm):00079                 BCS     IDE_ABORT
                      (    cubix_ide.asm):00080                 JMP     IDE_PRINT_INFO
F85B                  (    cubix_ide.asm):00081         IDE_ABORT:
                      (    cubix_ide.asm):00082                 LDX     #MESSAGE3
                      (    cubix_ide.asm):00083                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00084                 JMP     IDE_INITA
F85B                  (    cubix_ide.asm):00085         IDE_PRINT_INFO:
                      (    cubix_ide.asm):00086                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00087                 LDX     #MESSAGE4
                      (    cubix_ide.asm):00088                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00089                 LDA     #$00
                      (    cubix_ide.asm):00090                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
                      (    cubix_ide.asm):00091                 LDX     #MESSAGE5
                      (    cubix_ide.asm):00092                 JSR     WRSTR                             ; DO PROMPT
                      (    cubix_ide.asm):00093                 LDA     #$01
                      (    cubix_ide.asm):00094                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
F85B                  (    cubix_ide.asm):00095         IDE_INITA:
                      (    cubix_ide.asm):00096                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00097                 RTS                                       ; DONE
                      (    cubix_ide.asm):00098                 ENDIF
                      (    cubix_ide.asm):00099         ;
                      (    cubix_ide.asm):00100         ;__XTIDE_PROBE_______________________________________________________________________________________
                      (    cubix_ide.asm):00101         ;
                      (    cubix_ide.asm):00102         ;  XTPROBE FOR IDE HARDWARE
                      (    cubix_ide.asm):00103         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00104         ;
F85B                  (    cubix_ide.asm):00105         XTIDE_PROBE:
                      (    cubix_ide.asm):00106         ;
                      (    cubix_ide.asm):00107         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (    cubix_ide.asm):00108         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (    cubix_ide.asm):00109         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (    cubix_ide.asm):00110         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (    cubix_ide.asm):00111         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (    cubix_ide.asm):00112         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (    cubix_ide.asm):00113         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (    cubix_ide.asm):00114         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (    cubix_ide.asm):00115         
                      (    cubix_ide.asm):00116         ; CHECK SIGNATURE
                      (    cubix_ide.asm):00117         
F85B 8E0000           (    cubix_ide.asm):00118                 LDX     #$0000
                      (    cubix_ide.asm):00119         ;       SOMETIMES THE CF-XTIDE WILL ONLY READ 80, THIS CAN BE RESET BY WRITING ZEROS UNTIL VALUES ARE PROPERLY READ
                      (    cubix_ide.asm):00120         !
F85E F6E300           (    cubix_ide.asm):00121                 LDB     XTIDE_DATA_LO
F861 C180             (    cubix_ide.asm):00122                 CMPB    #$80
F863 262B             (    cubix_ide.asm):00123                 BNE     >
F865 C600             (    cubix_ide.asm):00124                 LDB     #$00
F867 F7E300           (    cubix_ide.asm):00125                 STB     XTIDE_DATA_LO
F86A 12               (    cubix_ide.asm):00126                 NOP
F86B F7E301           (    cubix_ide.asm):00127                 STB     XTIDE_DATA_HI
F86E 12               (    cubix_ide.asm):00128                 NOP
F86F F7E306           (    cubix_ide.asm):00129                 STB     XTIDE_LBALOW
F872 12               (    cubix_ide.asm):00130                 NOP
F873 F7E308           (    cubix_ide.asm):00131                 STB     XTIDE_LBAMID
F876 12               (    cubix_ide.asm):00132                 NOP
F877 F7E30A           (    cubix_ide.asm):00133                 STB     XTIDE_LBAHI
F87A 12               (    cubix_ide.asm):00134                 NOP
F87B F7E30C           (    cubix_ide.asm):00135                 STB     XTIDE_DEVICE
F87E 12               (    cubix_ide.asm):00136                 NOP
F87F F7E30E           (    cubix_ide.asm):00137                 STB     XTIDE_COMMAND
F882 12               (    cubix_ide.asm):00138                 NOP
F883 F7E30E           (    cubix_ide.asm):00139                 STB     XTIDE_STATUS
F886 12               (    cubix_ide.asm):00140                 NOP
F887 3001             (    cubix_ide.asm):00141                 INX
F889 8C0300           (    cubix_ide.asm):00142                 CPX     #$0300
F88C 26D0             (    cubix_ide.asm):00143                 BNE     <
F88E 200A             (    cubix_ide.asm):00144                 BRA     XTIDE_PROBE_FAIL                  ; TIMED OUT
                      (    cubix_ide.asm):00145         !
F890 BDF8BA           (    cubix_ide.asm):00146                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
F893 2505             (    cubix_ide.asm):00147                 BCS     XTIDE_PROBE_FAIL
F895 1CFE             (    cubix_ide.asm):00148                 CLC
F897 7EF89C           (    cubix_ide.asm):00149                 JMP     XTIDE_PROBE_SUCCESS
F89A                  (    cubix_ide.asm):00150         XTIDE_PROBE_FAIL:
F89A 1A01             (    cubix_ide.asm):00151                 SEC
F89C                  (    cubix_ide.asm):00152         XTIDE_PROBE_SUCCESS:
F89C 39               (    cubix_ide.asm):00153                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (    cubix_ide.asm):00154         
                      (    cubix_ide.asm):00155                 IFNDEF   BIOS6809PC
                      (    cubix_ide.asm):00156         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (    cubix_ide.asm):00157         ;*
                      (    cubix_ide.asm):00158         ;*  READ IDE INFORMATION
                      (    cubix_ide.asm):00159         ;*      CARRY SET ON ERROR
                      (    cubix_ide.asm):00160         ;*      A=MST/SLV
                      (    cubix_ide.asm):00161         ;*____________________________________________________________________________________________________
F89D                  (    cubix_ide.asm):00162         IDE_READ_INFO:
                      (    cubix_ide.asm):00163         ; SET DRIVE BIT
                      (    cubix_ide.asm):00164                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
                      (    cubix_ide.asm):00165                 ASLA                                      ; SHIFT 4
                      (    cubix_ide.asm):00166                 ASLA                                      ;
                      (    cubix_ide.asm):00167                 ASLA                                      ;
                      (    cubix_ide.asm):00168                 ASLA                                      ;
                      (    cubix_ide.asm):00169                 ORA     #$E0                              ; E0=MST  F0=SLV
                      (    cubix_ide.asm):00170                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00171         
                      (    cubix_ide.asm):00172                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
                      (    cubix_ide.asm):00173                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00174         
                      (    cubix_ide.asm):00175                 LDA     #$01                              ; ENABLE 8-BIT MODE (XT-CF-LITE)
                      (    cubix_ide.asm):00176                 STA     XTIDE_FECODE
                      (    cubix_ide.asm):00177                 LDA     #XTIDE_CMD_FEAT
                      (    cubix_ide.asm):00178                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00179         
                      (    cubix_ide.asm):00180                 NOP                                       ; TINY DELAY, JUST IN CASE
                      (    cubix_ide.asm):00181                 NOP
                      (    cubix_ide.asm):00182                 NOP
                      (    cubix_ide.asm):00183                 NOP
                      (    cubix_ide.asm):00184                 NOP
                      (    cubix_ide.asm):00185                 NOP
                      (    cubix_ide.asm):00186                 NOP
                      (    cubix_ide.asm):00187                 NOP
                      (    cubix_ide.asm):00188                 NOP
                      (    cubix_ide.asm):00189                 NOP
                      (    cubix_ide.asm):00190                 NOP
                      (    cubix_ide.asm):00191         
                      (    cubix_ide.asm):00192         
                      (    cubix_ide.asm):00193                 LDA     #XTIDE_CMD_ID                     ; ID COMMAND
                      (    cubix_ide.asm):00194                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00195         
                      (    cubix_ide.asm):00196                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
                      (    cubix_ide.asm):00197                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00198         
                      (    cubix_ide.asm):00199                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
                      (    cubix_ide.asm):00200         
                      (    cubix_ide.asm):00201                 LDX     #MESSAGE6
                      (    cubix_ide.asm):00202                 JSR     WRSTR
                      (    cubix_ide.asm):00203                 LDA     HSTBUF+123
                      (    cubix_ide.asm):00204                 JSR     WRHEX
                      (    cubix_ide.asm):00205                 LDA     HSTBUF+122
                      (    cubix_ide.asm):00206                 JSR     WRHEX
                      (    cubix_ide.asm):00207                 LDA     HSTBUF+121
                      (    cubix_ide.asm):00208                 JSR     WRHEX
                      (    cubix_ide.asm):00209                 LDA     HSTBUF+120
                      (    cubix_ide.asm):00210                 JSR     WRHEX
                      (    cubix_ide.asm):00211                 JMP     IDE_READ_INFO_OK
F89D                  (    cubix_ide.asm):00212         IDE_READ_INFO_ABORT:
                      (    cubix_ide.asm):00213                 LDX     #MESSAGE3
                      (    cubix_ide.asm):00214                 JSR     WRSTR                             ;DO PROMPT
                      (    cubix_ide.asm):00215                 JSR     LFCR                              ;AND CRLF
                      (    cubix_ide.asm):00216                 SEC
                      (    cubix_ide.asm):00217                 RTS                                       ;
F89D                  (    cubix_ide.asm):00218         IDE_READ_INFO_OK:
                      (    cubix_ide.asm):00219                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00220                 CLC
                      (    cubix_ide.asm):00221                 RTS
                      (    cubix_ide.asm):00222                 ENDIF
                      (    cubix_ide.asm):00223         
                      (    cubix_ide.asm):00224         
                      (    cubix_ide.asm):00225         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (    cubix_ide.asm):00226         ;*
                      (    cubix_ide.asm):00227         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (    cubix_ide.asm):00228         ;*
                      (    cubix_ide.asm):00229         ;*____________________________________________________________________________________________________
F89D                  (    cubix_ide.asm):00230         IDE_READ_SECTOR:
F89D BDF8BA           (    cubix_ide.asm):00231                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
F8A0 2512             (    cubix_ide.asm):00232                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
F8A2                  (    cubix_ide.asm):00233         IDE_READ_SECTOR_1:
                      (    cubix_ide.asm):00234                 IFNDEF   BIOS6809PC
                      (    cubix_ide.asm):00235                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
                      (    cubix_ide.asm):00236                 ENDIF
F8A2 8620             (    cubix_ide.asm):00237                 LDA     #XTIDE_CMD_READ
F8A4 B7E30E           (    cubix_ide.asm):00238                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00239         
F8A7 BDF8DE           (    cubix_ide.asm):00240                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
F8AA 2508             (    cubix_ide.asm):00241                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
F8AC BDF90A           (    cubix_ide.asm):00242                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
F8AF 4F               (    cubix_ide.asm):00243                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
F8B0 B7BF28           (    cubix_ide.asm):00244                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
F8B3 39               (    cubix_ide.asm):00245                 RTS
F8B4                  (    cubix_ide.asm):00246         IDE_READ_SECTOR_ERROR:
F8B4 8602             (    cubix_ide.asm):00247                 LDA     #$02                              ; SET ERROR CONDITION
F8B6 B7BF28           (    cubix_ide.asm):00248                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
F8B9 39               (    cubix_ide.asm):00249                 RTS
                      (    cubix_ide.asm):00250         
                      (    cubix_ide.asm):00251         
                      (    cubix_ide.asm):00252         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (    cubix_ide.asm):00253         ;*
                      (    cubix_ide.asm):00254         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (    cubix_ide.asm):00255         ;*
                      (    cubix_ide.asm):00256         ;*____________________________________________________________________________________________________
F8BA                  (    cubix_ide.asm):00257         IDE_WAIT_NOT_BUSY:
F8BA 3406             (    cubix_ide.asm):00258                 PSHS    A,B
F8BC 8600             (    cubix_ide.asm):00259                 LDA     #$00
F8BE B7BF26           (    cubix_ide.asm):00260                 STA     XTIDETIMEOUT
F8C1 B7BF27           (    cubix_ide.asm):00261                 STA     XTIDETIMEOUT+1
F8C4                  (    cubix_ide.asm):00262         IDE_WAIT_NOT_BUSY1:
F8C4 F6E30E           (    cubix_ide.asm):00263                 LDB     XTIDE_STATUS                      ;WAIT FOR RDY BIT TO BE SET
F8C7 C480             (    cubix_ide.asm):00264                 ANDB    #$80
F8C9 270F             (    cubix_ide.asm):00265                 BEQ     IDE_WAIT_NOT_BUSY2
F8CB 7CBF26           (    cubix_ide.asm):00266                 INC     XTIDETIMEOUT
F8CE 26F4             (    cubix_ide.asm):00267                 BNE     IDE_WAIT_NOT_BUSY1
F8D0 7CBF27           (    cubix_ide.asm):00268                 INC     XTIDETIMEOUT+1
F8D3 26EF             (    cubix_ide.asm):00269                 BNE     IDE_WAIT_NOT_BUSY1
F8D5 1A01             (    cubix_ide.asm):00270                 SEC
F8D7 7EF8DC           (    cubix_ide.asm):00271                 JMP     IDE_WAIT_NOT_BUSY3
F8DA                  (    cubix_ide.asm):00272         IDE_WAIT_NOT_BUSY2:
F8DA 1CFE             (    cubix_ide.asm):00273                 CLC
F8DC                  (    cubix_ide.asm):00274         IDE_WAIT_NOT_BUSY3:
F8DC 3586             (    cubix_ide.asm):00275                 PULS    PC,A,B
                      (    cubix_ide.asm):00276         
                      (    cubix_ide.asm):00277         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (    cubix_ide.asm):00278         ;*
                      (    cubix_ide.asm):00279         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (    cubix_ide.asm):00280         ;*
                      (    cubix_ide.asm):00281         ;*____________________________________________________________________________________________________
F8DE                  (    cubix_ide.asm):00282         IDE_WAIT_DRQ:
F8DE 3426             (    cubix_ide.asm):00283                 PSHS    A,B,Y
F8E0 8600             (    cubix_ide.asm):00284                 LDA     #$00
F8E2 B7BF26           (    cubix_ide.asm):00285                 STA     XTIDETIMEOUT
F8E5 B7BF27           (    cubix_ide.asm):00286                 STA     XTIDETIMEOUT+1
F8E8                  (    cubix_ide.asm):00287         IDE_WAIT_DRQ1:
F8E8 F6E30E           (    cubix_ide.asm):00288                 LDB     XTIDE_STATUS                      ;WAIT FOR DRQ BIT TO BE SET
F8EB C488             (    cubix_ide.asm):00289                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
F8ED C108             (    cubix_ide.asm):00290                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
F8EF 2715             (    cubix_ide.asm):00291                 BEQ     IDE_WAIT_DRQ2
F8F1 C401             (    cubix_ide.asm):00292                 ANDB    #%00000001                        ; IS ERROR?
F8F3 C101             (    cubix_ide.asm):00293                 CMPB    #%00000001                        ;
F8F5 270A             (    cubix_ide.asm):00294                 BEQ     IDE_WAIT_DRQE
F8F7 7CBF26           (    cubix_ide.asm):00295                 INC     XTIDETIMEOUT
F8FA 26EC             (    cubix_ide.asm):00296                 BNE     IDE_WAIT_DRQ1
F8FC 7CBF27           (    cubix_ide.asm):00297                 INC     XTIDETIMEOUT+1
F8FF 26E7             (    cubix_ide.asm):00298                 BNE     IDE_WAIT_DRQ1
F901                  (    cubix_ide.asm):00299         IDE_WAIT_DRQE:
F901 1A01             (    cubix_ide.asm):00300                 SEC
F903 7EF908           (    cubix_ide.asm):00301                 JMP     IDE_WAIT_DRQ3
F906                  (    cubix_ide.asm):00302         IDE_WAIT_DRQ2:
F906 1CFE             (    cubix_ide.asm):00303                 CLC
F908                  (    cubix_ide.asm):00304         IDE_WAIT_DRQ3:
F908 35A6             (    cubix_ide.asm):00305                 PULS    PC,A,B,Y
                      (    cubix_ide.asm):00306         
                      (    cubix_ide.asm):00307         
                      (    cubix_ide.asm):00308         
                      (    cubix_ide.asm):00309         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00310         ;*
                      (    cubix_ide.asm):00311         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00312         ;*
                      (    cubix_ide.asm):00313         ;*____________________________________________________________________________________________________
F90A                  (    cubix_ide.asm):00314         IDE_READ_BUFFER:
F90A 108E0000         (    cubix_ide.asm):00315                 LDY     #$0000                            ; INDEX
F90E                  (    cubix_ide.asm):00316         IDEBUFRD:
F90E F6E300           (    cubix_ide.asm):00317                 LDB     XTIDE_DATA_LO
F911 E7A90100         (    cubix_ide.asm):00318                 STB     HSTBUF,Y                          ;
F915 3121             (    cubix_ide.asm):00319                 INY
F917 F6E301           (    cubix_ide.asm):00320                 LDB     XTIDE_DATA_HI
F91A E7A90100         (    cubix_ide.asm):00321                 STB     HSTBUF,Y                          ;
F91E 3121             (    cubix_ide.asm):00322                 INY
F920 108C0200         (    cubix_ide.asm):00323                 CMPY    #$0200                            ;
F924 26E8             (    cubix_ide.asm):00324                 BNE     IDEBUFRD                          ;
F926 39               (    cubix_ide.asm):00325                 RTS                                       ;
                      (    cubix_ide.asm):00326         
                      (    cubix_ide.asm):00327         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (    cubix_ide.asm):00328         ;*
                      (    cubix_ide.asm):00329         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (    cubix_ide.asm):00330         ;*
                      (    cubix_ide.asm):00331         ;*____________________________________________________________________________________________________
F927                  (    cubix_ide.asm):00332         IDE_WRITE_SECTOR:
F927 BDF8BA           (    cubix_ide.asm):00333                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
F92A 2517             (    cubix_ide.asm):00334                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
                      (    cubix_ide.asm):00335                 IFNDEF   BIOS6809PC
                      (    cubix_ide.asm):00336                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
                      (    cubix_ide.asm):00337                 ENDIF
F92C 8630             (    cubix_ide.asm):00338                 LDA     #XTIDE_CMD_WRITE
F92E B7E30E           (    cubix_ide.asm):00339                 STA     XTIDE_COMMAND
F931 BDF8DE           (    cubix_ide.asm):00340                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
F934 250D             (    cubix_ide.asm):00341                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
F936 BDF949           (    cubix_ide.asm):00342                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
F939 BDF8BA           (    cubix_ide.asm):00343                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
F93C 2505             (    cubix_ide.asm):00344                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
F93E 4F               (    cubix_ide.asm):00345                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
F93F B7BF28           (    cubix_ide.asm):00346                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
F942 39               (    cubix_ide.asm):00347                 RTS
F943                  (    cubix_ide.asm):00348         IDE_WRITE_SECTOR_ERROR:
F943 8602             (    cubix_ide.asm):00349                 LDA     #$02
F945 B7BF28           (    cubix_ide.asm):00350                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
F948 39               (    cubix_ide.asm):00351                 RTS
                      (    cubix_ide.asm):00352         
                      (    cubix_ide.asm):00353         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00354         ;*
                      (    cubix_ide.asm):00355         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00356         ;*
                      (    cubix_ide.asm):00357         ;*____________________________________________________________________________________________________
F949                  (    cubix_ide.asm):00358         IDE_WRITE_BUFFER:
F949 108E0000         (    cubix_ide.asm):00359                 LDY     #$0000                            ; INDEX
F94D                  (    cubix_ide.asm):00360         IDEBUFWT:
F94D E6A90100         (    cubix_ide.asm):00361                 LDB     HSTBUF,Y                          ;
F951 F7E300           (    cubix_ide.asm):00362                 STB     XTIDE_DATA_LO
F954 3121             (    cubix_ide.asm):00363                 INY
F956 E6A90100         (    cubix_ide.asm):00364                 LDB     HSTBUF,Y                          ;
F95A F7E301           (    cubix_ide.asm):00365                 STB     XTIDE_DATA_HI
F95D 3121             (    cubix_ide.asm):00366                 INY
F95F 108C0200         (    cubix_ide.asm):00367                 CMPY    #$0200                            ;
F963 26E8             (    cubix_ide.asm):00368                 BNE     IDEBUFWT                          ;
F965 39               (    cubix_ide.asm):00369                 RTS                                       ;
                      (    cubix_ide.asm):00370         
                      (    cubix_ide.asm):00371         
                      (    cubix_ide.asm):00372                 IFNDEF   BIOS6809PC
F966                  (    cubix_ide.asm):00373         MESSAGE1
                      (    cubix_ide.asm):00374                 FCC     "PPIDE :"
                      (    cubix_ide.asm):00375                 FCB     00
F966                  (    cubix_ide.asm):00376         MESSAGE2
                      (    cubix_ide.asm):00377                 FCC     " IO=0x"
                      (    cubix_ide.asm):00378                 FCB     00
F966                  (    cubix_ide.asm):00379         MESSAGE3
                      (    cubix_ide.asm):00380                 FCC     " NOT PRESENT"
                      (    cubix_ide.asm):00381                 FCB     00
F966                  (    cubix_ide.asm):00382         MESSAGE4
                      (    cubix_ide.asm):00383                 FCC     " PPIDE0: BLOCKS="
                      (    cubix_ide.asm):00384                 FCB     00
F966                  (    cubix_ide.asm):00385         MESSAGE5
                      (    cubix_ide.asm):00386                 FCC     " PPIDE1: BLOCKS="
                      (    cubix_ide.asm):00387                 FCB     00
F966                  (    cubix_ide.asm):00388         MESSAGE6
                      (    cubix_ide.asm):00389                 FCC     "0x"
                      (    cubix_ide.asm):00390                 FCB     00
                      (    cubix_ide.asm):00391         
                      (    cubix_ide.asm):00392         
                      (    cubix_ide.asm):00393         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (    cubix_ide.asm):00394         ;*
                      (    cubix_ide.asm):00395         ;*
                      (    cubix_ide.asm):00396         ;        SETUP   LBA DATA
                      (    cubix_ide.asm):00397         ;*____________________________________________________________________________________________________
F966                  (    cubix_ide.asm):00398         IDE_SETUP_LBA:
                      (    cubix_ide.asm):00399                 PSHS    D
                      (    cubix_ide.asm):00400                 LDB     CURRENTDEVICE
                      (    cubix_ide.asm):00401                 ANDB    #$01                              ; only want drive cfg
                      (    cubix_ide.asm):00402                 ASLB                                      ; SHIFT 4
                      (    cubix_ide.asm):00403                 ASLB                                      ;
                      (    cubix_ide.asm):00404                 ASLB                                      ;
                      (    cubix_ide.asm):00405                 ASLB                                      ;
                      (    cubix_ide.asm):00406                 ORB     #$E0                              ; E0=MST  F0=SLV
                      (    cubix_ide.asm):00407                 STB     XTIDE_DEVICE
                      (    cubix_ide.asm):00408         
                      (    cubix_ide.asm):00409                 LDB     CURRENTSLICE
                      (    cubix_ide.asm):00410                 STB     XTIDE_LBAHI
                      (    cubix_ide.asm):00411         
                      (    cubix_ide.asm):00412                 LDB     CURRENTCYL                        ;
                      (    cubix_ide.asm):00413                 INCB                                      ; CYL 0 reserved for boot image
                      (    cubix_ide.asm):00414                 STB     XTIDE_LBAMID
                      (    cubix_ide.asm):00415         
                      (    cubix_ide.asm):00416                 LDB     CURRENTSEC                        ;
                      (    cubix_ide.asm):00417                 STB     XTIDE_LBALOW
                      (    cubix_ide.asm):00418         
                      (    cubix_ide.asm):00419                 LDB     #$01
                      (    cubix_ide.asm):00420                 STB     XTIDE_SEC_CNT
                      (    cubix_ide.asm):00421         
                      (    cubix_ide.asm):00422                 PULS    D,PC
                      (    cubix_ide.asm):00423                 ENDIF
                      (        mon09.asm):01138         ;* CONSTANTS
F966                  (        mon09.asm):01139         PCRG
F966 2C504352         (        mon09.asm):01140                 FCC     ',PCR'
                      (        mon09.asm):01141         ;* TRANSFER/EXCHANGE REGISTER TABLE
F96A                  (        mon09.asm):01142         REGTAB
F96A 4400             (        mon09.asm):01143                 FCN     'D'     0
F96C 5800             (        mon09.asm):01144                 FCN     'X'     1
F96E 5900             (        mon09.asm):01145                 FCN     'Y'     2
F970 5500             (        mon09.asm):01146                 FCN     'U'     3
F972 5300             (        mon09.asm):01147                 FCN     'S'     4
F974 5043             (        mon09.asm):01148                 FCC     'PC'        5
F976 3F00             (        mon09.asm):01149                 FCN     '?'     6
F978 3F00             (        mon09.asm):01150                 FCN     '?'     7
F97A 4100             (        mon09.asm):01151                 FCN     'A'     8
F97C 4200             (        mon09.asm):01152                 FCN     'B'     9
F97E 4343             (        mon09.asm):01153                 FCC     'CC'        A
F980 4450             (        mon09.asm):01154                 FCC     'DP'        B
F982 3F00             (        mon09.asm):01155                 FCN     '?'     C
F984 3F00             (        mon09.asm):01156                 FCN     '?'     D
F986 3F00             (        mon09.asm):01157                 FCN     '?'     E
F988 3F00             (        mon09.asm):01158                 FCN     '?'     F
                      (        mon09.asm):01159         ;* PUSH/PULL REGISTER TABLE
F98A                  (        mon09.asm):01160         PSHTAB:
F98A 4343             (        mon09.asm):01161                 FCC     'CC'
F98C 4100             (        mon09.asm):01162                 FCN     'A'
F98E 4200             (        mon09.asm):01163                 FCN     'B'
F990 4450             (        mon09.asm):01164                 FCC     'DP'
F992 5800             (        mon09.asm):01165                 FCN     'X'
F994 5900             (        mon09.asm):01166                 FCN     'Y'
F996 5500             (        mon09.asm):01167                 FCN     'U'
F998 504300           (        mon09.asm):01168                 FCN     'PC'
                      (        mon09.asm):01169         ;* VECTOR HANDLERS
F99B                  (        mon09.asm):01170         SWI3:
F99B 6E9FBF04         (        mon09.asm):01171                 JMP     [SWI3ADR]
F99F                  (        mon09.asm):01172         SWI2:
F99F 6E9FBF02         (        mon09.asm):01173                 JMP     [SWI2ADR]
F9A3                  (        mon09.asm):01174         IRQ:
F9A3 6E9FBF06         (        mon09.asm):01175                 JMP     [IRQADR]
F9A7                  (        mon09.asm):01176         FIRQ:
F9A7 6E9FBF08         (        mon09.asm):01177                 JMP     [FIRQADR]
                      (        mon09.asm):01178         ;* HELP TEXT
F9AB                  (        mon09.asm):01179         HTEXT:
F9AB 00               (        mon09.asm):01180                 FCB     0       NEW LINE TO START
F9AC 4352203C7265673E (        mon09.asm):01181                 FCN     'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
F9CC 4356203C7665633E (        mon09.asm):01182                 FCN     'CV <vec> <addr>|Change interrupt vector'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7200
F9F4 444D203C61646472 (        mon09.asm):01183                 FCN     'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
FA27 44527C446973706C (        mon09.asm):01184                 FCN     'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
FA46 44567C446973706C (        mon09.asm):01185                 FCN     'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
FA63 45203C616464723E (        mon09.asm):01186                 FCN     'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
FA78 464D203C61646472 (        mon09.asm):01187                 FCN     'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
FA9C 47205B3C61646472 (        mon09.asm):01188                 FCN     'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
FABC 4C7C4C6F61642061 (        mon09.asm):01189                 FCN     'L|Load an image into RAM from uart2'
     6E20696D61676520
     696E746F2052414D
     2066726F6D207561
     72743200
FAE0 4D4D203C61646472 (        mon09.asm):01190                 FCN     'MM <addr>,<addr> <addr>|Move memory'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F727900
FB04 4F537C426F6F7420 (        mon09.asm):01191                 FCN     'OS|Boot OS from XT-IDE'
     4F532066726F6D20
     58542D49444500
FB1B 4F577C5772697465 (        mon09.asm):01192                 FCN     'OW|Write OS to XT-IDE'
     204F5320746F2058
     542D49444500
FB31 5252203C61646472 (        mon09.asm):01193                 FCN     'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
FB51 5257203C61646472 (        mon09.asm):01194                 FCN     'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
FB79 57203C616464723E (        mon09.asm):01195                 FCN     'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
FB99 5852203C61646472 (        mon09.asm):01196                 FCN     'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
FBB9 5857203C61646472 (        mon09.asm):01197                 FCN     'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
FBE1 2B203C76616C7565 (        mon09.asm):01198                 FCN     '+ <value>+<value>|Hexidecimal addition'
     3E2B3C76616C7565
     3E7C486578696465
     63696D616C206164
     646974696F6E00
FC08 2D203C76616C7565 (        mon09.asm):01199                 FCN     '- <value>-<value>|Hexidecimal subtraction'
     3E2D3C76616C7565
     3E7C486578696465
     63696D616C207375
     627472616374696F
     6E00
FC32 FF               (        mon09.asm):01200                 FCB     -1      END OF TABLE
                      (        mon09.asm):01201         
                      (        mon09.asm):01202         ;*
                      (        mon09.asm):01203         ;* MACHINE DEPENDANT I/O ROUTINES FOR 6551 UART
                      (        mon09.asm):01204         ;*
FC33                  (        mon09.asm):01205         INIT:
FC33 8600             (        mon09.asm):01206                 LDA     #$00                              ; RESET UART
FC35 B7EF85           (        mon09.asm):01207                 STA     UART1STATUS                       ;
FC38 860B             (        mon09.asm):01208                 LDA     #$0B                              ;
FC3A B7EF86           (        mon09.asm):01209                 STA     UART1COMMAND                      ;
FC3D 861E             (        mon09.asm):01210                 LDA     #$1E                              ; 9600, 8 BITS, NO PARITY, 1 STOP BIT
FC3F B7EF87           (        mon09.asm):01211                 STA     UART1CONTROL                      ;
FC42 39               (        mon09.asm):01212                 RTS
                      (        mon09.asm):01213         ;* READ UART
FC43                  (        mon09.asm):01214         READ:
FC43 B6EF85           (        mon09.asm):01215                 LDA     UART1STATUS                       ; GET STATUS REGISTER
FC46 8408             (        mon09.asm):01216                 ANDA    #%00001000                        ; IS RX READY
FC48 2704             (        mon09.asm):01217                 BEQ     NOCHR                             ; No DATA IS READY
FC4A B6EF84           (        mon09.asm):01218                 LDA     UART1DATA                         ; GET DATA CHAR
FC4D 39               (        mon09.asm):01219                 RTS
FC4E                  (        mon09.asm):01220         NOCHR:
FC4E 86FF             (        mon09.asm):01221                 LDA     #$FF                              ; NO CHAR
FC50 39               (        mon09.asm):01222                 RTS
                      (        mon09.asm):01223         ;* WRITE UART
FC51                  (        mon09.asm):01224         WRITE:
FC51 F6EF85           (        mon09.asm):01225                 LDB     UART1STATUS                       ; GET STATUS
FC54 C410             (        mon09.asm):01226                 ANDB    #%00010000                        ; IS TX READY
FC56 27F9             (        mon09.asm):01227                 BEQ     WRITE                             ; NO, WAIT FOR IT
FC58 B7EF84           (        mon09.asm):01228                 STA     UART1DATA                         ; WRITE DATA
FC5B 39               (        mon09.asm):01229                 RTS
                      (        mon09.asm):01230         
                      (        mon09.asm):01231         ;*
                      (        mon09.asm):01232         ;* MACHINE VECTORS
                      (        mon09.asm):01233         ;*
                      (        mon09.asm):01234                 ORG     $FFF2
FFF2 F99B             (        mon09.asm):01235                 FDB     SWI3
FFF4 F99F             (        mon09.asm):01236                 FDB     SWI2
FFF6 F9A7             (        mon09.asm):01237                 FDB     FIRQ
FFF8 F9A3             (        mon09.asm):01238                 FDB     IRQ
FFFA F6EB             (        mon09.asm):01239                 FDB     SWIHND
FFFC F6C0             (        mon09.asm):01240                 FDB     NMIHND
FFFE F000             (        mon09.asm):01241                 FDB     RESET

Symbol Table:
[ G] BIOS6809PC                       0001
[ G] BOOTOS                           F7D0
[ G] BOOTOS_1                         F80A
[ G] BRKREG                           F747
[ G] BRKRES                           F74A
[ G] BRKTAB                           0300
[ G] CCBITS                           F347
[ G] CHG1                             F35A
[ G] CHG2                             F366
[ G] CHG3                             F397
[ G] CHG4                             F37D
[ G] CHGREG                           F34F
[ G] CHGTAB                           F39A
[ G] CHGV1                            F2AC
[ G] CHGV2                            F2B4
[ G] CHGV3                            F2BA
[ G] CHGV4                            F2C5
[ G] CHGVEC                           F2A1
[ G] CHKC1                            F680
[ G] CHKC3                            F693
[ G] CHKCHR                           F677
[ G] CLRRAM                           F007
[ G] CMDTAB                           F143
[ G] CUBIX_IO_BASE                    E000
[ G] DISKERROR                        BF28
[ G] DISREG                           F2D3
[ G] DISV1                            F271
[ G] DISVEC                           F26A
[ G] DLEOF                            F508
[ G] DLINT                            F509
[ G] DLINT1                           F53F
[ G] DLMOT                            F4A2
[ G] DLMOT1                           F4DA
[ G] DLO1                             F487
[ G] DLO2                             F494
[ G] DLOAD                            F497
[ G] DLRTS                            F506
[ G] ERROR                            F13B
[ G] FILL1                            F1A2
[ G] FILMEM                           F194
[ G] FIRQ                             F9A7
[ G] FIRQADR                          BF08
[ G] GETAD1                           F599
[ G] GETAD2                           F5A5
[ G] GETAD3                           F5A6
[ G] GETAD4                           F5CB
[ G] GETAD5                           F5D7
[ G] GETADR                           F592
[ G] GETB1                            F5ED
[ G] GETB2                            F5EB
[ G] GETB3                            F5EE
[ G] GETB4                            F5E9
[ G] GETBYT                           F5D9
[ G] GETC1                            F667
[ G] GETCHR                           F665
[ G] GETECH                           F645
[ G] GETERR                           F596
[ G] GETN1                            F60E
[ G] GETN2                            F611
[ G] GETNIB                           F5FB
[ G] GETPC                            F55D
[ G] GETPC1                           F571
[ G] GETRNG                           F575
[ G] GOEXEC                           F3A4
[ G] HELP                             F456
[ G] HEXADD                           F423
[ G] HEXOUT                           F618
[ G] HEXSHO                           F447
[ G] HEXSUB                           F434
[ G] HLP1                             F459
[ G] HLP2                             F45B
[ G] HLP3                             F469
[ G] HLP4                             F477
[ G] HLP5                             F483
[ G] HOUT                             F622
[ G] HOUT1                            F62C
[ G] HSTBUF                           0100
[ G] HTEXT                            F9AB
[ G] IDE_READ_BUFFER                  F90A
[ G] IDE_READ_SECTOR                  F89D
[ G] IDE_READ_SECTOR_1                F8A2
[ G] IDE_READ_SECTOR_ERROR            F8B4
[ G] IDE_WAIT_DRQ                     F8DE
[ G] IDE_WAIT_DRQ1                    F8E8
[ G] IDE_WAIT_DRQ2                    F906
[ G] IDE_WAIT_DRQ3                    F908
[ G] IDE_WAIT_DRQE                    F901
[ G] IDE_WAIT_NOT_BUSY                F8BA
[ G] IDE_WAIT_NOT_BUSY1               F8C4
[ G] IDE_WAIT_NOT_BUSY2               F8DA
[ G] IDE_WAIT_NOT_BUSY3               F8DC
[ G] IDE_WRITE_BUFFER                 F949
[ G] IDE_WRITE_SECTOR                 F927
[ G] IDE_WRITE_SECTOR_ERROR           F943
[ G] IDEBUFRD                         F90E
[ G] IDEBUFWT                         F94D
[ G] INIT                             FC33
[ G] INSRAM                           BF1F
[ G] INSTYP                           BF1D
[ G] IOSPACE                          EF00
[ G] IRQ                              F9A3
[ G] IRQADR                           BF06
[ G] LFC1                             F661
[ G] LFCR                             F659
[ G] LOAD                             F484
[ G] LODERR                           F4F3
[ G] LOOK1                            F111
[ G] LOOK2                            F11D
[ G] LOOK3                            F134
[ G] LOOKC                            F10B
[ G] MAIN                             F0FD
[ G] MEM1                             F1CC
[ G] MEM2                             F1DF
[ G] MEM3                             F1E9
[ G] MEM4                             F1F3
[ G] MEM5                             F1FD
[ G] MEM6                             F207
[ G] MEM7                             F209
[ G] MEMORY                           F1C6
[ G] MONITOR                          F01C
[ G] MOVM1                            F1BA
[ G] MOVMEM                           F1AC
[ G] NMIH1                            F6C5
[ G] NMIHND                           F6C0
[ G] NOCHR                            FC4E
[ G] PCRG                             F966
[ G] POSBYT                           BF1E
[ G] PSHTAB                           F98A
[ G] PTRSAV                           BF1B
[ G] PUTCHR                           F670
[ G] R16                              F38B
[ G] R17                              F392
[ G] RAM                              BF00
[ G] RBITS                            F2F1
[ G] RDLOOP                           F3C9
[ G] RDLP1                            F3D1
[ G] READ                             FC43
[ G] REGB1                            F2EA
[ G] REGTAB                           F96A
[ G] REGTXT                           F31D
[ G] RESET                            F000
[ G] ROM                              F000
[ G] RSUB1                            F30D
[ G] RSUB2                            F315
[ G] SAVA                             BF0B
[ G] SAVB                             BF0C
[ G] SAVCC                            BF0A
[ G] SAVDP                            BF0D
[ G] SAVPC                            BF14
[ G] SAVS                             BF16
[ G] SAVU                             BF12
[ G] SAVX                             BF0E
[ G] SAVY                             BF10
[ G] SPACE                            F653
[ G] STACK                            BFF0
[ G] STPFLG                           BF1A
[ G] SUBM1                            F22C
[ G] SUBM2                            F236
[ G] SUBM3                            F24A
[ G] SUBM4                            F251
[ G] SUBM5                            F260
[ G] SUBMEM                           F227
[ G] SWI2                             F99F
[ G] SWI2ADR                          BF02
[ G] SWI3                             F99B
[ G] SWI3ADR                          BF04
[ G] SWIADR                           BF00
[ G] SWIHN1                           F6F5
[ G] SWIHN2                           F709
[ G] SWIHN25                          F711
[ G] SWIHN3                           F74F
[ G] SWIHN4                           F758
[ G] SWIHND                           F6EB
[ G] TEMP                             BF18
[ G] UART1COMMAND                     EF86
[ G] UART1CONTROL                     EF87
[ G] UART1DATA                        EF84
[ G] UART1STATUS                      EF85
[ G] VECTXT                           F280
[ G] WRDOUT                           F614
[ G] WRHEX                            F6A9
[ G] WRHEX1                           F6A7
[ G] WRHEXB                           F697
[ G] WRHEXN                           F6B3
[ G] WRHEXW                           F69F
[ G] WRIMEM                           F217
[ G] WRITE                            FC51
[ G] WRITEOS                          F760
[ G] WRITEOS_1                        F797
[ G] WRLIN                            F638
[ G] WRLND                            F644
[ G] WRLOOP                           F3D9
[ G] WRLP1                            F3ED
[ G] WRMSG                            F62E
[ G] WRNOK                            F6BD
[ G] XRLOOP                           F3F8
[ G] XRLP1                            F400
[ G] XTIDE_CMD_FEAT                   00EF
[ G] XTIDE_CMD_ID                     00EC
[ G] XTIDE_CMD_INIT                   0091
[ G] XTIDE_CMD_READ                   0020
[ G] XTIDE_CMD_RECAL                  0010
[ G] XTIDE_CMD_SPINDOWN               00E0
[ G] XTIDE_CMD_SPINUP                 00E1
[ G] XTIDE_CMD_WRITE                  0030
[ G] XTIDE_COMMAND                    E30E
[ G] XTIDE_DATA_HI                    E301
[ G] XTIDE_DATA_LO                    E300
[ G] XTIDE_DEVICE                     E30C
[ G] XTIDE_ERR                        E302
[ G] XTIDE_FECODE                     E302
[ G] XTIDE_INIT                       F843
[ G] XTIDE_LBAHI                      E30A
[ G] XTIDE_LBALOW                     E306
[ G] XTIDE_LBAMID                     E308
[ G] XTIDE_PROBE                      F85B
[ G] XTIDE_PROBE_FAIL                 F89A
[ G] XTIDE_PROBE_SUCCESS              F89C
[ G] XTIDE_SEC_CNT                    E304
[ G] XTIDE_STATUS                     E30E
[ G] XTIDETIMEOUT                     BF26
[ G] XWLOOP                           F408
[ G] XWLP1                            F418
