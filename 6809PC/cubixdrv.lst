                      (     cubixdrv.asm):00001         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00002         ;
                      (     cubixdrv.asm):00003         ;       6809PC Cubix banked driver code
                      (     cubixdrv.asm):00004         ;
                      (     cubixdrv.asm):00005         ;  DWERNER 5/17/2025    Initial
                      (     cubixdrv.asm):00006         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00007         
                      (     cubixdrv.asm):00008         ;*
                      (     cubixdrv.asm):00009                 INCLUDE cubix_values.asm
                      ( cubix_values.asm):00001         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00002         ;
                      ( cubix_values.asm):00003         ;       6809PC Cubix System storage locations
                      ( cubix_values.asm):00004         ;
                      ( cubix_values.asm):00005         ;  DWERNER 5/17/2025    Initial
                      ( cubix_values.asm):00006         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00007         ; $0000-$00FF DRIVER/PAGER STACK
                      ( cubix_values.asm):00008         ; $0100-$01FF OS Driver Storage
     0100             ( cubix_values.asm):00009         CONSOLEDEVICE   = $0100                           ; (BYTE)
     0101             ( cubix_values.asm):00010         farpointer      = $0101
     0103             ( cubix_values.asm):00011         DISKERROR       = $0103
     0104             ( cubix_values.asm):00012         CURRENTDEVICE   = $0104
     0105             ( cubix_values.asm):00013         CURRENTSLICE    = $0105
     0106             ( cubix_values.asm):00014         CURRENTCYL      = $0106
     0107             ( cubix_values.asm):00015         CURRENTSEC      = $0107
     0108             ( cubix_values.asm):00016         CURRENTHEAD     = $0108
     0109             ( cubix_values.asm):00017         PAGER_D         = $0109
     010B             ( cubix_values.asm):00018         PAGER_X         = $010B
     010D             ( cubix_values.asm):00019         PAGER_Y         = $010D
     010F             ( cubix_values.asm):00020         PAGER_S         = $010F
     0111             ( cubix_values.asm):00021         PAGER_U         = $0111
                      ( cubix_values.asm):00022         
                      ( cubix_values.asm):00023         
                      ( cubix_values.asm):00024         ; $200-$3FF Host Buffer Driver Storage
     0200             ( cubix_values.asm):00025         HSTBUF          = $0200
                      ( cubix_values.asm):00026         ; $400-$7FF OS LOCAL STORAGE
                      ( cubix_values.asm):00027         ; $1000-$1FFF Hardware Access Window
     1000             ( cubix_values.asm):00028         CUBIX_IO_BASE   = $1000                           ; BIOS DEFAULT IO LOCATION
                      ( cubix_values.asm):00029         ; $2000-$DFFF User RAM
                      ( cubix_values.asm):00030         ; $E000-$FFFF CUBIX
                      ( cubix_values.asm):00031         
     C100             ( cubix_values.asm):00032         BANKED_DRIVER_DISPATCHER = $C100
                      (     cubixdrv.asm):00010         ;*
                      (     cubixdrv.asm):00011         
                      (     cubixdrv.asm):00012                 ORG     $C100
                      (     cubixdrv.asm):00013         
                      (     cubixdrv.asm):00014         ;__DISPATCHER________________________________________________________________________________________
                      (     cubixdrv.asm):00015         ;
                      (     cubixdrv.asm):00016         ;  Function dispatcher
                      (     cubixdrv.asm):00017         ;  function to call is located in "farfunct"
                      (     cubixdrv.asm):00018         ;____________________________________________________________________________________________________
                      (     cubixdrv.asm):00019         ;
C100                  (     cubixdrv.asm):00020         FUNCTION_DISPATCHER:
C100 58               (     cubixdrv.asm):00021                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
C101 8600             (     cubixdrv.asm):00022                 LDA     #$00
C103 1F01             (     cubixdrv.asm):00023                 TFR     D,X
C105 EC89C113         (     cubixdrv.asm):00024                 LDD     DISPATCHTABLE,X
C109 FD0101           (     cubixdrv.asm):00025                 STD     farpointer
C10C FC0109           (     cubixdrv.asm):00026                 LDD     >PAGER_D                          ; RESTORE 'D'
C10F 6E9F0101         (     cubixdrv.asm):00027                 JMP     [farpointer]
                      (     cubixdrv.asm):00028         
                      (     cubixdrv.asm):00029         
C113                  (     cubixdrv.asm):00030         DISPATCHTABLE:
C113 C184             (     cubixdrv.asm):00031                 .WORD   WRSER1                            ; FUNCTION 00 - WRITE SERIAL PORT
C115 C18F             (     cubixdrv.asm):00032                 .WORD   RDSER1                            ; FUNCTION 01 - READ SERIAL PORT
C117 C173             (     cubixdrv.asm):00033                 .WORD   SERIALINIT                        ; FUNCTION 02 - SERIAL PORT INIT
                      (     cubixdrv.asm):00034         
C119 C384             (     cubixdrv.asm):00035                 .WORD   drv_noop                          ; FUNCTION 03 - WRITE VIDEO
C11B C384             (     cubixdrv.asm):00036                 .WORD   drv_noop                          ; FUNCTION 04 - READ KEYBOARD
C11D C384             (     cubixdrv.asm):00037                 .WORD   drv_noop                          ; FUNCTION 05 - INIT INTERFACE
                      (     cubixdrv.asm):00038         
C11F C384             (     cubixdrv.asm):00039                 .WORD   drv_noop                          ; FUNCTION 06
C121 C384             (     cubixdrv.asm):00040                 .WORD   drv_noop                          ; FUNCTION 07
C123 C384             (     cubixdrv.asm):00041                 .WORD   drv_noop                          ; FUNCTION 08
                      (     cubixdrv.asm):00042         
C125 C384             (     cubixdrv.asm):00043                 .WORD   drv_noop                          ; FUNCTION 09
C127 C384             (     cubixdrv.asm):00044                 .WORD   drv_noop                          ; FUNCTION 10
C129 C384             (     cubixdrv.asm):00045                 .WORD   drv_noop                          ; FUNCTION 11
                      (     cubixdrv.asm):00046         
C12B C384             (     cubixdrv.asm):00047                 .WORD   drv_noop                          ; FUNCTION 12
C12D C384             (     cubixdrv.asm):00048                 .WORD   drv_noop                          ; FUNCTION 13
C12F C384             (     cubixdrv.asm):00049                 .WORD   drv_noop                          ; FUNCTION 14
                      (     cubixdrv.asm):00050         
C131 C384             (     cubixdrv.asm):00051                 .WORD   drv_noop                          ; FUNCTION 15 - called during OS init
C133 C384             (     cubixdrv.asm):00052                 .WORD   drv_noop                          ; FUNCTION 16 - read a sector from drive
C135 C384             (     cubixdrv.asm):00053                 .WORD   drv_noop                          ; FUNCTION 17 - write a sector to drive
                      (     cubixdrv.asm):00054         ;
C137 C384             (     cubixdrv.asm):00055                 .WORD   drv_noop                          ;FL_SETUP                          ; FUNCTION 18 - init floppy device
C139 C384             (     cubixdrv.asm):00056                 .WORD   drv_noop                          ;FL_READ_SECTOR                    ; FUNCTION 19 - read a sector from floppy device
C13B C384             (     cubixdrv.asm):00057                 .WORD   drv_noop                          ;FL_WRITE_SECTOR                   ; FUNCTION 20 - write a sector to floppy device
                      (     cubixdrv.asm):00058         ;
C13D C1A3             (     cubixdrv.asm):00059                 .WORD   XTIDE_INIT                        ; FUNCTION 21 - init XT IDE device
C13F C25D             (     cubixdrv.asm):00060                 .WORD   IDE_READ_SECTOR                   ; FUNCTION 22 - read a sector from XT IDE device
C141 C27D             (     cubixdrv.asm):00061                 .WORD   IDE_WRITE_SECTOR                  ; FUNCTION 23 - write a sector to XT IDE device
                      (     cubixdrv.asm):00062         ;
C143 C384             (     cubixdrv.asm):00063                 .WORD   drv_noop                          ;FPSD_INIT                         ; FUNCTION 24 - init PPIDE device
C145 C384             (     cubixdrv.asm):00064                 .WORD   drv_noop                          ;FPSD_READ_SECTOR                  ; FUNCTION 25 - read a sector from PPIDE device
C147 C384             (     cubixdrv.asm):00065                 .WORD   drv_noop                          ;FPSD_WRITE_SECTOR                 ; FUNCTION 26 - write a sector to PPIDE device
                      (     cubixdrv.asm):00066         ;
C149 C384             (     cubixdrv.asm):00067                 .WORD   drv_noop                          ;DSKY_INIT                         ; FUNCTION 27 -
C14B C384             (     cubixdrv.asm):00068                 .WORD   drv_noop                          ;DSKY_SHOW                         ; FUNCTION 28 -
C14D C384             (     cubixdrv.asm):00069                 .WORD   drv_noop                          ;DSKY_BIN2SEG                      ; FUNCTION 29 -
C14F C384             (     cubixdrv.asm):00070                 .WORD   drv_noop                          ;DSKY_RESET                        ; FUNCTION 30 -
C151 C384             (     cubixdrv.asm):00071                 .WORD   drv_noop                          ;DSKY_STAT                         ; FUNCTION 31 -
C153 C384             (     cubixdrv.asm):00072                 .WORD   drv_noop                          ;DSKY_GETKEY                       ; FUNCTION 32 -
C155 C384             (     cubixdrv.asm):00073                 .WORD   drv_noop                          ;DSKY_BEEP                         ; FUNCTION 33 -
C157 C384             (     cubixdrv.asm):00074                 .WORD   drv_noop                          ;DSKY_DSPL                         ; FUNCTION 34 -
C159 C384             (     cubixdrv.asm):00075                 .WORD   drv_noop                          ;DSKY_PUTLED                       ; FUNCTION 35 -
C15B C384             (     cubixdrv.asm):00076                 .WORD   drv_noop                          ;DSKY_BLANK                        ; FUNCTION 36 -
C15D C384             (     cubixdrv.asm):00077                 .WORD   drv_noop                          ;FP_INIT                           ; FUNCTION 37 -
C15F C384             (     cubixdrv.asm):00078                 .WORD   drv_noop                          ;FP_SETLED                         ; FUNCTION 38 -
C161 C384             (     cubixdrv.asm):00079                 .WORD   drv_noop                          ;FP_GETSWITCH                      ; FUNCTION 39 -
C163 C384             (     cubixdrv.asm):00080                 .WORD   drv_noop                          ;PCF_INIT                          ; FUNCTION 40 -
C165 C384             (     cubixdrv.asm):00081                 .WORD   drv_noop                          ;PCF_READBYTES                     ; FUNCTION 41 -
C167 C384             (     cubixdrv.asm):00082                 .WORD   drv_noop                          ;PCF_SENDBYTES                     ; FUNCTION 42 -
C169 C384             (     cubixdrv.asm):00083                 .WORD   drv_noop                          ;PCF_INITDEV                       ; FUNCTION 43 -
C16B C384             (     cubixdrv.asm):00084                 .WORD   drv_noop                          ;FPDIS_INIT                        ; FUNCTION 44 - Init Front Panel Display
C16D C384             (     cubixdrv.asm):00085                 .WORD   drv_noop                          ;FPDIS_CLEAR                       ; FUNCTION 45 - Clear Front Panel Display
C16F C384             (     cubixdrv.asm):00086                 .WORD   drv_noop                          ;FPDIS_SETXY                       ; FUNCTION 46 - SET XY ON Front Panel Display
C171 C384             (     cubixdrv.asm):00087                 .WORD   drv_noop                          ;FPDIS_OUTCH                       ; FUNCTION 47 - Output char on Front Panel Display
                      (     cubixdrv.asm):00088         ;
                      (     cubixdrv.asm):00089         
                      (     cubixdrv.asm):00090         
                      (     cubixdrv.asm):00091         ;__DRIVERS___________________________________________________________________________________________
                      (     cubixdrv.asm):00092         ;
                      (     cubixdrv.asm):00093                 INCLUDE cubix_serial.asm
                      ( cubix_serial.asm):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00002         ;
                      ( cubix_serial.asm):00003         ;       CUBIX serial drivers for 6809PC
                      ( cubix_serial.asm):00004         ;
                      ( cubix_serial.asm):00005         ;       Entry points:
                      ( cubix_serial.asm):00006         ;               SERIALINIT  - called during OS init
                      ( cubix_serial.asm):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00009         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00010         ;
                      ( cubix_serial.asm):00011         ;*
                      ( cubix_serial.asm):00012         ;*        HARDWARE I/O ADDRESSES
                      ( cubix_serial.asm):00013         ;*
                      ( cubix_serial.asm):00014         ; UART 6551 SERIAL
     1F84             ( cubix_serial.asm):00015         UART1DATA       EQU CUBIX_IO_BASE+$F84            ; SERIAL PORT 1 (I/O Card)
     1F85             ( cubix_serial.asm):00016         UART1STATUS     EQU CUBIX_IO_BASE+$F85            ; SERIAL PORT 1 (I/O Card)
     1F86             ( cubix_serial.asm):00017         UART1COMMAND    EQU CUBIX_IO_BASE+$F86            ; SERIAL PORT 1 (I/O Card)
     1F87             ( cubix_serial.asm):00018         UART1CONTROL    EQU CUBIX_IO_BASE+$F87            ; SERIAL PORT 1 (I/O Card)
                      ( cubix_serial.asm):00019         
                      ( cubix_serial.asm):00020         
                      ( cubix_serial.asm):00021         
                      ( cubix_serial.asm):00022         ;__SERIALINIT____________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00023         ;
                      ( cubix_serial.asm):00024         ;       INITIALIZE SERIAL PORTS
                      ( cubix_serial.asm):00025         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00026         ;
C173                  ( cubix_serial.asm):00027         SERIALINIT:
C173 8600             ( cubix_serial.asm):00028                 LDA     #$00                              ; RESET UART
C175 B71F85           ( cubix_serial.asm):00029                 STA     UART1STATUS                       ;
C178 860B             ( cubix_serial.asm):00030                 LDA     #$0B                              ;
C17A B71F86           ( cubix_serial.asm):00031                 STA     UART1COMMAND                      ;
C17D 861E             ( cubix_serial.asm):00032                 LDA     #$1E                              ; 9600, 8 BITS, NO PARITY, 1 STOP BIT
C17F B71F87           ( cubix_serial.asm):00033                 STA     UART1CONTROL                      ;
C182 39               ( cubix_serial.asm):00034                 RTS
C183 39               ( cubix_serial.asm):00035                 RTS
                      ( cubix_serial.asm):00036         
                      ( cubix_serial.asm):00037         ;__WRSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00038         ;
                      ( cubix_serial.asm):00039         ;       WRITE CHARACTER(A) TO UART
                      ( cubix_serial.asm):00040         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00041         ;
C184                  ( cubix_serial.asm):00042         WRSER1
                      ( cubix_serial.asm):00043         !
C184 F61F85           ( cubix_serial.asm):00044                 LDB     UART1STATUS                       ; GET STATUS
C187 C410             ( cubix_serial.asm):00045                 ANDB    #%00010000                        ; IS TX READY
C189 27F9             ( cubix_serial.asm):00046                 BEQ     <                                 ; IF NOT REPEAT
C18B B71F84           ( cubix_serial.asm):00047                 STA     UART1DATA                         ; WRITE DATA
C18E 39               ( cubix_serial.asm):00048                 RTS
                      ( cubix_serial.asm):00049         
                      ( cubix_serial.asm):00050         ;__RDSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00051         ;
                      ( cubix_serial.asm):00052         ;       READ CHARACTER FROM UART TO (A)
                      ( cubix_serial.asm):00053         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00054         ;
C18F                  ( cubix_serial.asm):00055         RDSER1
C18F B61F85           ( cubix_serial.asm):00056                 LDA     UART1STATUS                       ; GET STATUS REGISTER
C192 8408             ( cubix_serial.asm):00057                 ANDA    #%00001000                        ; IS RX READY
C194 2705             ( cubix_serial.asm):00058                 BEQ     >                                 ; No DATA IS READY
C196 B61F84           ( cubix_serial.asm):00059                 LDA     UART1DATA                         ; GET DATA CHAR
C199 39               ( cubix_serial.asm):00060                 RTS
                      ( cubix_serial.asm):00061         
C19A 39               ( cubix_serial.asm):00062                 RTS
                      ( cubix_serial.asm):00063         !
C19B 86FF             ( cubix_serial.asm):00064                 LDA     #$FF                              ;
C19D B70109           ( cubix_serial.asm):00065                 STA     >PAGER_D                          ; SAVE 'D'
C1A0 39               ( cubix_serial.asm):00066                 RTS                                       ;
                      (     cubixdrv.asm):00094                 INCLUDE cubix_ide.asm
                      (    cubix_ide.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00002         ;
                      (    cubix_ide.asm):00003         ;       CUBIX IDE disk drivers 6809PC - XT IDE ISA CARD
                      (    cubix_ide.asm):00004         ;
                      (    cubix_ide.asm):00005         ;       Entry points:
                      (    cubix_ide.asm):00006         ;               XTIDE_INIT      - CALLED DURING OS INIT
                      (    cubix_ide.asm):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00009         ;________________________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00010         ;
                      (    cubix_ide.asm):00011         
     1300             (    cubix_ide.asm):00012         XTIDE_DATA      = CUBIX_IO_BASE+$300
     1302             (    cubix_ide.asm):00013         XTIDE_ERR       = CUBIX_IO_BASE+$302
     1304             (    cubix_ide.asm):00014         XTIDE_SEC_CNT   = CUBIX_IO_BASE+$304
     1306             (    cubix_ide.asm):00015         XTIDE_LBALOW    = CUBIX_IO_BASE+$306
     1308             (    cubix_ide.asm):00016         XTIDE_LBAMID    = CUBIX_IO_BASE+$308
     130A             (    cubix_ide.asm):00017         XTIDE_LBAHI     = CUBIX_IO_BASE+$30A
     130C             (    cubix_ide.asm):00018         XTIDE_DEVICE    = CUBIX_IO_BASE+$30C
     130E             (    cubix_ide.asm):00019         XTIDE_COMMAND   = CUBIX_IO_BASE+$30E
     130E             (    cubix_ide.asm):00020         XTIDE_STATUS    = CUBIX_IO_BASE+$30E
     131C             (    cubix_ide.asm):00021         XTIDE_CONTROL   = CUBIX_IO_BASE+$31C
     131E             (    cubix_ide.asm):00022         XTIDE_ASTATUS   = CUBIX_IO_BASE+$31E
                      (    cubix_ide.asm):00023         
                      (    cubix_ide.asm):00024         
                      (    cubix_ide.asm):00025         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (    cubix_ide.asm):00026         XTIDE_CMD_RECAL = $10
     0020             (    cubix_ide.asm):00027         XTIDE_CMD_READ  = $20
     0030             (    cubix_ide.asm):00028         XTIDE_CMD_WRITE = $30
     0091             (    cubix_ide.asm):00029         XTIDE_CMD_INIT  = $91
     00EC             (    cubix_ide.asm):00030         XTIDE_CMD_ID    = $EC
     00E0             (    cubix_ide.asm):00031         XTIDE_CMD_SPINDOWN = $E0
     00E1             (    cubix_ide.asm):00032         XTIDE_CMD_SPINUP = $E1
                      (    cubix_ide.asm):00033         
                      (    cubix_ide.asm):00034         
                      (    cubix_ide.asm):00035         
C1A1                  (    cubix_ide.asm):00036         XTIDETIMEOUT:
C1A1 0000             (    cubix_ide.asm):00037                 .BYTE   $00,$00
                      (    cubix_ide.asm):00038         
                      (    cubix_ide.asm):00039         
                      (    cubix_ide.asm):00040         
                      (    cubix_ide.asm):00041         ;__XTIDE_INIT________________________________________________________________________________________
                      (    cubix_ide.asm):00042         ;
                      (    cubix_ide.asm):00043         ;  INIT AND DISPLAY IDE INFO
                      (    cubix_ide.asm):00044         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00045         ;
C1A3                  (    cubix_ide.asm):00046         XTIDE_INIT:
C1A3 BDC385           (    cubix_ide.asm):00047                 JSR     LFCR                              ; AND CRLF
C1A6 8EC31A           (    cubix_ide.asm):00048                 LDX     #MESSAGE1
C1A9 BDC399           (    cubix_ide.asm):00049                 JSR     WRSTR                             ; DO PROMPT
C1AC BDC385           (    cubix_ide.asm):00050                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00051         ;
C1AF 8EC322           (    cubix_ide.asm):00052                 LDX     #MESSAGE2
C1B2 BDC399           (    cubix_ide.asm):00053                 JSR     WRSTR                             ; DO PROMPT
C1B5 CC1300           (    cubix_ide.asm):00054                 LDD     #XTIDE_DATA                       ; GET BASE PORT
C1B8 BDC3A5           (    cubix_ide.asm):00055                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_ide.asm):00056         ;
C1BB BDC1E9           (    cubix_ide.asm):00057                 JSR     XTIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
C1BE 2503             (    cubix_ide.asm):00058                 BCS     IDE_ABORT
C1C0 7EC1CC           (    cubix_ide.asm):00059                 JMP     IDE_PRINT_INFO
C1C3                  (    cubix_ide.asm):00060         IDE_ABORT:
C1C3 8EC329           (    cubix_ide.asm):00061                 LDX     #MESSAGE3
C1C6 BDC399           (    cubix_ide.asm):00062                 JSR     WRSTR                             ; DO PROMPT
C1C9 7EC1E5           (    cubix_ide.asm):00063                 JMP     IDE_INITA
C1CC                  (    cubix_ide.asm):00064         IDE_PRINT_INFO:
C1CC BDC385           (    cubix_ide.asm):00065                 JSR     LFCR                              ; AND CRLF
C1CF 8EC336           (    cubix_ide.asm):00066                 LDX     #MESSAGE4
C1D2 BDC399           (    cubix_ide.asm):00067                 JSR     WRSTR                             ; DO PROMPT
C1D5 8600             (    cubix_ide.asm):00068                 LDA     #$00
C1D7 BDC20D           (    cubix_ide.asm):00069                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
C1DA 8EC347           (    cubix_ide.asm):00070                 LDX     #MESSAGE5
C1DD BDC399           (    cubix_ide.asm):00071                 JSR     WRSTR                             ; DO PROMPT
C1E0 8601             (    cubix_ide.asm):00072                 LDA     #$01
C1E2 BDC20D           (    cubix_ide.asm):00073                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
C1E5                  (    cubix_ide.asm):00074         IDE_INITA:
C1E5 BDC385           (    cubix_ide.asm):00075                 JSR     LFCR                              ; AND CRLF
C1E8 39               (    cubix_ide.asm):00076                 RTS                                       ; DONE
                      (    cubix_ide.asm):00077         ;
                      (    cubix_ide.asm):00078         ;__XTIDE_PROBE_______________________________________________________________________________________
                      (    cubix_ide.asm):00079         ;
                      (    cubix_ide.asm):00080         ;  XTPROBE FOR IDE HARDWARE
                      (    cubix_ide.asm):00081         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00082         ;
C1E9                  (    cubix_ide.asm):00083         XTIDE_PROBE:
                      (    cubix_ide.asm):00084         ;
                      (    cubix_ide.asm):00085         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (    cubix_ide.asm):00086         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (    cubix_ide.asm):00087         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (    cubix_ide.asm):00088         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (    cubix_ide.asm):00089         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (    cubix_ide.asm):00090         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (    cubix_ide.asm):00091         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (    cubix_ide.asm):00092         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (    cubix_ide.asm):00093         
                      (    cubix_ide.asm):00094         ; CHECK SIGNATURE
C1E9 F61304           (    cubix_ide.asm):00095                 LDB     XTIDE_SEC_CNT
C1EC C101             (    cubix_ide.asm):00096                 CMPB    #$01
C1EE 261A             (    cubix_ide.asm):00097                 BNE     XTIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
C1F0 F61306           (    cubix_ide.asm):00098                 LDB     XTIDE_LBALOW
C1F3 C101             (    cubix_ide.asm):00099                 CMPB    #$01
C1F5 2613             (    cubix_ide.asm):00100                 BNE     XTIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
C1F7 F61308           (    cubix_ide.asm):00101                 LDB     XTIDE_LBAMID
C1FA C100             (    cubix_ide.asm):00102                 CMPB    #$00
C1FC 260C             (    cubix_ide.asm):00103                 BNE     XTIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
C1FE F6130A           (    cubix_ide.asm):00104                 LDB     XTIDE_LBAHI
C201 C100             (    cubix_ide.asm):00105                 CMPB    #$00
C203 2605             (    cubix_ide.asm):00106                 BNE     XTIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
C205 1CFE             (    cubix_ide.asm):00107                 CLC
C207 7EC20C           (    cubix_ide.asm):00108                 JMP     XTIDE_PROBE_SUCCESS
C20A                  (    cubix_ide.asm):00109         XTIDE_PROBE_FAIL:
C20A 1A01             (    cubix_ide.asm):00110                 SEC
C20C                  (    cubix_ide.asm):00111         XTIDE_PROBE_SUCCESS:
C20C 39               (    cubix_ide.asm):00112                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (    cubix_ide.asm):00113         
                      (    cubix_ide.asm):00114         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (    cubix_ide.asm):00115         ;*
                      (    cubix_ide.asm):00116         ;*  READ IDE INFORMATION
                      (    cubix_ide.asm):00117         ;*      CARRY SET ON ERROR
                      (    cubix_ide.asm):00118         ;*      A=MST/SLV
                      (    cubix_ide.asm):00119         ;*____________________________________________________________________________________________________
C20D                  (    cubix_ide.asm):00120         IDE_READ_INFO:
                      (    cubix_ide.asm):00121         ; SET DRIVE BIT
C20D 8401             (    cubix_ide.asm):00122                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
C20F 48               (    cubix_ide.asm):00123                 ASLA                                      ; SHIFT 4
C210 48               (    cubix_ide.asm):00124                 ASLA                                      ;
C211 48               (    cubix_ide.asm):00125                 ASLA                                      ;
C212 48               (    cubix_ide.asm):00126                 ASLA                                      ;
C213 8AE0             (    cubix_ide.asm):00127                 ORA     #$E0                              ; E0=MST  F0=SLV
C215 B7130C           (    cubix_ide.asm):00128                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00129         
C218 BDC2A2           (    cubix_ide.asm):00130                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C21B 252E             (    cubix_ide.asm):00131                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00132         
C21D 86EC             (    cubix_ide.asm):00133                 LDA     #XTIDE_CMD_ID
C21F B7130E           (    cubix_ide.asm):00134                 STA     XTIDE_COMMAND                     ;SELECT IDE REGISTER
                      (    cubix_ide.asm):00135         
C222 BDC2C6           (    cubix_ide.asm):00136                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
C225 2524             (    cubix_ide.asm):00137                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00138         
C227 BDC2F2           (    cubix_ide.asm):00139                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
                      (    cubix_ide.asm):00140         
C22A 8EC358           (    cubix_ide.asm):00141                 LDX     #MESSAGE6
C22D BDC399           (    cubix_ide.asm):00142                 JSR     WRSTR
C230 B6027B           (    cubix_ide.asm):00143                 LDA     HSTBUF+123
C233 BDC3B1           (    cubix_ide.asm):00144                 JSR     WRHEX
C236 B6027A           (    cubix_ide.asm):00145                 LDA     HSTBUF+122
C239 BDC3B1           (    cubix_ide.asm):00146                 JSR     WRHEX
C23C B60279           (    cubix_ide.asm):00147                 LDA     HSTBUF+121
C23F BDC3B1           (    cubix_ide.asm):00148                 JSR     WRHEX
C242 B60278           (    cubix_ide.asm):00149                 LDA     HSTBUF+120
C245 BDC3B1           (    cubix_ide.asm):00150                 JSR     WRHEX
C248 7EC257           (    cubix_ide.asm):00151                 JMP     IDE_READ_INFO_OK
C24B                  (    cubix_ide.asm):00152         IDE_READ_INFO_ABORT:
C24B 8EC329           (    cubix_ide.asm):00153                 LDX     #MESSAGE3
C24E BDC399           (    cubix_ide.asm):00154                 JSR     WRSTR                             ;DO PROMPT
C251 BDC385           (    cubix_ide.asm):00155                 JSR     LFCR                              ;AND CRLF
C254 1A01             (    cubix_ide.asm):00156                 SEC
C256 39               (    cubix_ide.asm):00157                 RTS                                       ;
C257                  (    cubix_ide.asm):00158         IDE_READ_INFO_OK:
C257 BDC385           (    cubix_ide.asm):00159                 JSR     LFCR                              ; AND CRLF
C25A 1CFE             (    cubix_ide.asm):00160                 CLC
C25C 39               (    cubix_ide.asm):00161                 RTS
                      (    cubix_ide.asm):00162         
                      (    cubix_ide.asm):00163         
                      (    cubix_ide.asm):00164         
                      (    cubix_ide.asm):00165         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (    cubix_ide.asm):00166         ;*
                      (    cubix_ide.asm):00167         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (    cubix_ide.asm):00168         ;*
                      (    cubix_ide.asm):00169         ;*____________________________________________________________________________________________________
C25D                  (    cubix_ide.asm):00170         IDE_READ_SECTOR:
C25D BDC2A2           (    cubix_ide.asm):00171                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C260 2515             (    cubix_ide.asm):00172                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
C262                  (    cubix_ide.asm):00173         IDE_READ_SECTOR_1:
C262 BDC35B           (    cubix_ide.asm):00174                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
C265 8620             (    cubix_ide.asm):00175                 LDA     #XTIDE_CMD_READ
C267 B7130E           (    cubix_ide.asm):00176                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00177         
C26A BDC2C6           (    cubix_ide.asm):00178                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
C26D 2508             (    cubix_ide.asm):00179                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
C26F BDC2F2           (    cubix_ide.asm):00180                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
C272 4F               (    cubix_ide.asm):00181                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
C273 B70103           (    cubix_ide.asm):00182                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C276 39               (    cubix_ide.asm):00183                 RTS
C277                  (    cubix_ide.asm):00184         IDE_READ_SECTOR_ERROR:
C277 8602             (    cubix_ide.asm):00185                 LDA     #$02                              ; SET ERROR CONDITION
C279 B70103           (    cubix_ide.asm):00186                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C27C 39               (    cubix_ide.asm):00187                 RTS
                      (    cubix_ide.asm):00188         
                      (    cubix_ide.asm):00189         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (    cubix_ide.asm):00190         ;*
                      (    cubix_ide.asm):00191         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (    cubix_ide.asm):00192         ;*
                      (    cubix_ide.asm):00193         ;*____________________________________________________________________________________________________
C27D                  (    cubix_ide.asm):00194         IDE_WRITE_SECTOR:
C27D BDC2A2           (    cubix_ide.asm):00195                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C280 251A             (    cubix_ide.asm):00196                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C282 BDC35B           (    cubix_ide.asm):00197                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
C285 8630             (    cubix_ide.asm):00198                 LDA     #XTIDE_CMD_WRITE
C287 B7130E           (    cubix_ide.asm):00199                 STA     XTIDE_COMMAND
C28A BDC2C6           (    cubix_ide.asm):00200                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
C28D 250D             (    cubix_ide.asm):00201                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C28F BDC306           (    cubix_ide.asm):00202                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
C292 BDC2A2           (    cubix_ide.asm):00203                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
C295 2505             (    cubix_ide.asm):00204                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C297 4F               (    cubix_ide.asm):00205                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
C298 B70103           (    cubix_ide.asm):00206                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C29B 39               (    cubix_ide.asm):00207                 RTS
C29C                  (    cubix_ide.asm):00208         IDE_WRITE_SECTOR_ERROR:
C29C 8602             (    cubix_ide.asm):00209                 LDA     #$02
C29E B70103           (    cubix_ide.asm):00210                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C2A1 39               (    cubix_ide.asm):00211                 RTS
                      (    cubix_ide.asm):00212         
                      (    cubix_ide.asm):00213         
                      (    cubix_ide.asm):00214         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (    cubix_ide.asm):00215         ;*
                      (    cubix_ide.asm):00216         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (    cubix_ide.asm):00217         ;*
                      (    cubix_ide.asm):00218         ;*____________________________________________________________________________________________________
C2A2                  (    cubix_ide.asm):00219         IDE_WAIT_NOT_BUSY:
C2A2 3406             (    cubix_ide.asm):00220                 PSHS    A,B
C2A4 8600             (    cubix_ide.asm):00221                 LDA     #$00
C2A6 B7C1A1           (    cubix_ide.asm):00222                 STA     XTIDETIMEOUT
C2A9 B7C1A2           (    cubix_ide.asm):00223                 STA     XTIDETIMEOUT+1
C2AC                  (    cubix_ide.asm):00224         IDE_WAIT_NOT_BUSY1:
C2AC F6130E           (    cubix_ide.asm):00225                 LDB     XTIDE_STATUS                      ;WAIT FOR RDY BIT TO BE SET
C2AF C480             (    cubix_ide.asm):00226                 ANDB    #$80
C2B1 270F             (    cubix_ide.asm):00227                 BEQ     IDE_WAIT_NOT_BUSY2
C2B3 7CC1A1           (    cubix_ide.asm):00228                 INC     XTIDETIMEOUT
C2B6 26F4             (    cubix_ide.asm):00229                 BNE     IDE_WAIT_NOT_BUSY1
C2B8 7CC1A2           (    cubix_ide.asm):00230                 INC     XTIDETIMEOUT+1
C2BB 26EF             (    cubix_ide.asm):00231                 BNE     IDE_WAIT_NOT_BUSY1
C2BD 1A01             (    cubix_ide.asm):00232                 SEC
C2BF 7EC2C4           (    cubix_ide.asm):00233                 JMP     IDE_WAIT_NOT_BUSY3
C2C2                  (    cubix_ide.asm):00234         IDE_WAIT_NOT_BUSY2:
C2C2 1CFE             (    cubix_ide.asm):00235                 CLC
C2C4                  (    cubix_ide.asm):00236         IDE_WAIT_NOT_BUSY3:
C2C4 3586             (    cubix_ide.asm):00237                 PULS    PC,A,B
                      (    cubix_ide.asm):00238         
                      (    cubix_ide.asm):00239         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (    cubix_ide.asm):00240         ;*
                      (    cubix_ide.asm):00241         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (    cubix_ide.asm):00242         ;*
                      (    cubix_ide.asm):00243         ;*____________________________________________________________________________________________________
C2C6                  (    cubix_ide.asm):00244         IDE_WAIT_DRQ:
C2C6 3426             (    cubix_ide.asm):00245                 PSHS    A,B,Y
C2C8 8600             (    cubix_ide.asm):00246                 LDA     #$00
C2CA B7C1A1           (    cubix_ide.asm):00247                 STA     XTIDETIMEOUT
C2CD B7C1A2           (    cubix_ide.asm):00248                 STA     XTIDETIMEOUT+1
C2D0                  (    cubix_ide.asm):00249         IDE_WAIT_DRQ1:
C2D0 F6130E           (    cubix_ide.asm):00250                 LDB     XTIDE_STATUS                      ;WAIT FOR DRQ BIT TO BE SET
C2D3 C488             (    cubix_ide.asm):00251                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
C2D5 C108             (    cubix_ide.asm):00252                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
C2D7 2715             (    cubix_ide.asm):00253                 BEQ     IDE_WAIT_DRQ2
C2D9 C401             (    cubix_ide.asm):00254                 ANDB    #%00000001                        ; IS ERROR?
C2DB C101             (    cubix_ide.asm):00255                 CMPB    #%00000001                        ;
C2DD 270A             (    cubix_ide.asm):00256                 BEQ     IDE_WAIT_DRQE
C2DF 7CC1A1           (    cubix_ide.asm):00257                 INC     XTIDETIMEOUT
C2E2 26EC             (    cubix_ide.asm):00258                 BNE     IDE_WAIT_DRQ1
C2E4 7CC1A2           (    cubix_ide.asm):00259                 INC     XTIDETIMEOUT+1
C2E7 26E7             (    cubix_ide.asm):00260                 BNE     IDE_WAIT_DRQ1
C2E9                  (    cubix_ide.asm):00261         IDE_WAIT_DRQE:
C2E9 1A01             (    cubix_ide.asm):00262                 SEC
C2EB 7EC2F0           (    cubix_ide.asm):00263                 JMP     IDE_WAIT_DRQ3
C2EE                  (    cubix_ide.asm):00264         IDE_WAIT_DRQ2:
C2EE 1CFE             (    cubix_ide.asm):00265                 CLC
C2F0                  (    cubix_ide.asm):00266         IDE_WAIT_DRQ3:
C2F0 35A6             (    cubix_ide.asm):00267                 PULS    PC,A,B,Y
                      (    cubix_ide.asm):00268         
                      (    cubix_ide.asm):00269         
                      (    cubix_ide.asm):00270         
                      (    cubix_ide.asm):00271         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00272         ;*
                      (    cubix_ide.asm):00273         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00274         ;*
                      (    cubix_ide.asm):00275         ;*____________________________________________________________________________________________________
C2F2                  (    cubix_ide.asm):00276         IDE_READ_BUFFER:
C2F2 108E0000         (    cubix_ide.asm):00277                 LDY     #$0000                            ; INDEX
C2F6                  (    cubix_ide.asm):00278         IDEBUFRD:
C2F6 F61300           (    cubix_ide.asm):00279                 LDB     XTIDE_DATA
C2F9 E7A90200         (    cubix_ide.asm):00280                 STB     HSTBUF,Y                          ; 'ID DRIVE' IDE RESPONSE IS LITTLE ENDIAN FORMAT
C2FD 3121             (    cubix_ide.asm):00281                 INY
C2FF 108C0200         (    cubix_ide.asm):00282                 CMPY    #$0200                            ;
C303 26F1             (    cubix_ide.asm):00283                 BNE     IDEBUFRD                          ;
C305 39               (    cubix_ide.asm):00284                 RTS                                       ;
                      (    cubix_ide.asm):00285         
                      (    cubix_ide.asm):00286         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00287         ;*
                      (    cubix_ide.asm):00288         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00289         ;*
                      (    cubix_ide.asm):00290         ;*____________________________________________________________________________________________________
C306                  (    cubix_ide.asm):00291         IDE_WRITE_BUFFER:
C306 108E0000         (    cubix_ide.asm):00292                 LDY     #$0000                            ; INDEX
C30A                  (    cubix_ide.asm):00293         IDEBUFWT:
C30A E6A90200         (    cubix_ide.asm):00294                 LDB     HSTBUF,Y                          ; SECTORS ARE BIG ENDIAN
C30E 3121             (    cubix_ide.asm):00295                 INY
C310 F71300           (    cubix_ide.asm):00296                 STB     XTIDE_DATA
C313 108C0200         (    cubix_ide.asm):00297                 CMPY    #$0200                            ;
C317 26F1             (    cubix_ide.asm):00298                 BNE     IDEBUFWT                          ;
C319 39               (    cubix_ide.asm):00299                 RTS                                       ;
                      (    cubix_ide.asm):00300         
                      (    cubix_ide.asm):00301         
                      (    cubix_ide.asm):00302         
C31A                  (    cubix_ide.asm):00303         MESSAGE1
C31A 5050494445203A   (    cubix_ide.asm):00304                 FCC     "PPIDE :"
C321 00               (    cubix_ide.asm):00305                 FCB     00
C322                  (    cubix_ide.asm):00306         MESSAGE2
C322 20494F3D3078     (    cubix_ide.asm):00307                 FCC     " IO=0x"
C328 00               (    cubix_ide.asm):00308                 FCB     00
C329                  (    cubix_ide.asm):00309         MESSAGE3
C329 204E4F5420505245 (    cubix_ide.asm):00310                 FCC     " NOT PRESENT"
     53454E54
C335 00               (    cubix_ide.asm):00311                 FCB     00
C336                  (    cubix_ide.asm):00312         MESSAGE4
C336 205050494445303A (    cubix_ide.asm):00313                 FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
C346 00               (    cubix_ide.asm):00314                 FCB     00
C347                  (    cubix_ide.asm):00315         MESSAGE5
C347 205050494445313A (    cubix_ide.asm):00316                 FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
C357 00               (    cubix_ide.asm):00317                 FCB     00
C358                  (    cubix_ide.asm):00318         MESSAGE6
C358 3078             (    cubix_ide.asm):00319                 FCC     "0x"
C35A 00               (    cubix_ide.asm):00320                 FCB     00
                      (    cubix_ide.asm):00321         
                      (    cubix_ide.asm):00322         
                      (    cubix_ide.asm):00323         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (    cubix_ide.asm):00324         ;*
                      (    cubix_ide.asm):00325         ;*
                      (    cubix_ide.asm):00326         ;        SETUP   LBA DATA
                      (    cubix_ide.asm):00327         ;*
                      (    cubix_ide.asm):00328         ;*    This assumes the drive is setup for 128 sectors, 128 Cylinders, 4 heads. = 65536 total sectors.
                      (    cubix_ide.asm):00329         ;     LBA ADDRESS   LLLLLLLL CCCCCCCS SSSSSSHH
                      (    cubix_ide.asm):00330         ;     L=SLICE
                      (    cubix_ide.asm):00331         ;     H=HEAD
                      (    cubix_ide.asm):00332         ;     C=CYLINDER
                      (    cubix_ide.asm):00333         ;     S=SECTOR
                      (    cubix_ide.asm):00334         ;*
                      (    cubix_ide.asm):00335         ;*____________________________________________________________________________________________________
C35B                  (    cubix_ide.asm):00336         IDE_SETUP_LBA:
C35B 3406             (    cubix_ide.asm):00337                 PSHS    D
C35D F60104           (    cubix_ide.asm):00338                 LDB     CURRENTDEVICE
C360 C401             (    cubix_ide.asm):00339                 ANDB    #$01                              ; only want drive cfg
C362 58               (    cubix_ide.asm):00340                 ASLB                                      ; SHIFT 4
C363 58               (    cubix_ide.asm):00341                 ASLB                                      ;
C364 58               (    cubix_ide.asm):00342                 ASLB                                      ;
C365 58               (    cubix_ide.asm):00343                 ASLB                                      ;
C366 CAE0             (    cubix_ide.asm):00344                 ORB     #$E0                              ; E0=MST  F0=SLV
C368 F7130C           (    cubix_ide.asm):00345                 STB     XTIDE_DEVICE
                      (    cubix_ide.asm):00346         
C36B F60105           (    cubix_ide.asm):00347                 LDB     CURRENTSLICE
C36E F7130A           (    cubix_ide.asm):00348                 STB     XTIDE_LBAHI
                      (    cubix_ide.asm):00349         
C371 F60106           (    cubix_ide.asm):00350                 LDB     CURRENTCYL                        ;
C374 F71308           (    cubix_ide.asm):00351                 STB     XTIDE_LBAMID
                      (    cubix_ide.asm):00352         
C377 F60107           (    cubix_ide.asm):00353                 LDB     CURRENTSEC                        ;
C37A F71306           (    cubix_ide.asm):00354                 STB     XTIDE_LBALOW
                      (    cubix_ide.asm):00355         
C37D C601             (    cubix_ide.asm):00356                 LDB     #$01
C37F F71304           (    cubix_ide.asm):00357                 STB     XTIDE_SEC_CNT
                      (    cubix_ide.asm):00358         
C382 3586             (    cubix_ide.asm):00359                 PULS    D,PC
                      (     cubixdrv.asm):00095         ;        INCLUDE cubix_dskyng.asm
                      (     cubixdrv.asm):00096         ;        INCLUDE cubix_floppy.asm
                      (     cubixdrv.asm):00097         ;        INCLUDE cubix_fp.asm
                      (     cubixdrv.asm):00098         ;        INCLUDE cubix_i2c.asm
                      (     cubixdrv.asm):00099         ;        INCLUDE cubix_esp32.asm
                      (     cubixdrv.asm):00100         ;        INCLUDE cubix_dsky.asm
                      (     cubixdrv.asm):00101         
                      (     cubixdrv.asm):00102         
                      (     cubixdrv.asm):00103         
C384                  (     cubixdrv.asm):00104         drv_noop:
C384 39               (     cubixdrv.asm):00105                 RTS
                      (     cubixdrv.asm):00106         
                      (     cubixdrv.asm):00107         ;*
                      (     cubixdrv.asm):00108         ;* OUTPUT LFCR TO CONSOLE
                      (     cubixdrv.asm):00109         ;*
C385                  (     cubixdrv.asm):00110         LFCR:
C385 3406             (     cubixdrv.asm):00111                 PSHS    a,b
C387 860A             (     cubixdrv.asm):00112                 LDA     #10
C389 8D40             (     cubixdrv.asm):00113                 BSR     PUTCHR
C38B 860D             (     cubixdrv.asm):00114                 LDA     #13
C38D 8D3C             (     cubixdrv.asm):00115                 BSR     PUTCHR
C38F 3586             (     cubixdrv.asm):00116                 PULS    A,B,pc
C391                  (     cubixdrv.asm):00117         SPACE:
C391 3406             (     cubixdrv.asm):00118                 PSHS    a,b
C393 8620             (     cubixdrv.asm):00119                 LDA     #32
C395 8D34             (     cubixdrv.asm):00120                 BSR     PUTCHR
C397 3586             (     cubixdrv.asm):00121                 PULS    A,B,pc
                      (     cubixdrv.asm):00122         ;*
                      (     cubixdrv.asm):00123         ;* WRITE STRING(X) TO CONSOLE
                      (     cubixdrv.asm):00124         ;*
C399                  (     cubixdrv.asm):00125         WRSTR:
C399 3406             (     cubixdrv.asm):00126                 PSHS    A,B                               ;SAVE A
C39B                  (     cubixdrv.asm):00127         WRST1:
C39B A680             (     cubixdrv.asm):00128                 LDA     ,X+                               ;GET CHAR
C39D 2704             (     cubixdrv.asm):00129                 BEQ     WRST2                             ;END, QUIT
C39F 8D2A             (     cubixdrv.asm):00130                 BSR     PUTCHR
C3A1 20F8             (     cubixdrv.asm):00131                 BRA     WRST1                             ;CONTINUE
C3A3                  (     cubixdrv.asm):00132         WRST2:
C3A3 3586             (     cubixdrv.asm):00133                 PULS    A,B,pc
                      (     cubixdrv.asm):00134         ;*
                      (     cubixdrv.asm):00135         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (     cubixdrv.asm):00136         ;*
C3A5                  (     cubixdrv.asm):00137         WRHEXW
C3A5 3406             (     cubixdrv.asm):00138                 PSHS    d
C3A7 8D08             (     cubixdrv.asm):00139                 BSR     WRHEX                             ;OUTPUT
C3A9 1E89             (     cubixdrv.asm):00140                 EXG     A,B                               ;SWAP
C3AB 8D04             (     cubixdrv.asm):00141                 BSR     WRHEX                             ;OUTPUT
C3AD 1E89             (     cubixdrv.asm):00142                 EXG     A,B                               ;BACK
C3AF 3586             (     cubixdrv.asm):00143                 PULS    d,pc
                      (     cubixdrv.asm):00144         
                      (     cubixdrv.asm):00145         ;*
                      (     cubixdrv.asm):00146         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (     cubixdrv.asm):00147         ;*
C3B1                  (     cubixdrv.asm):00148         WRHEX
C3B1 3406             (     cubixdrv.asm):00149                 PSHS    A,B                               ;SAVE IT
C3B3 44               (     cubixdrv.asm):00150                 LSRA                                      ;SHIFT
C3B4 44               (     cubixdrv.asm):00151                 LSRA                                      ;HIGH NIBBLE
C3B5 44               (     cubixdrv.asm):00152                 LSRA                                      ;INTO
C3B6 44               (     cubixdrv.asm):00153                 LSRA                                      ;LOW NIBBLE
C3B7 8D06             (     cubixdrv.asm):00154                 BSR     HOUT                              ;HIGH
C3B9 A6E4             (     cubixdrv.asm):00155                 LDA     ,S                                ;GET LOW
C3BB 8D02             (     cubixdrv.asm):00156                 BSR     HOUT                              ;OUTPUT
C3BD 3586             (     cubixdrv.asm):00157                 PULS    A,B,PC                            ;RESTORE IT
                      (     cubixdrv.asm):00158         ;* OUTPUT NIBBLE IN HEX
C3BF                  (     cubixdrv.asm):00159         HOUT
C3BF 840F             (     cubixdrv.asm):00160                 ANDA    #%00001111                        ;REMOVE HIGH
C3C1 8B30             (     cubixdrv.asm):00161                 ADDA    #'0'                              ;CONVERT
C3C3 8139             (     cubixdrv.asm):00162                 CMPA    #'9'                              ;OK?
C3C5 2304             (     cubixdrv.asm):00163                 BLS     PUTCHR                            ;OK, OUTPUT
C3C7 8B07             (     cubixdrv.asm):00164                 ADDA    #7                                ;CONVERT TO 'A'-'F'
C3C9 2000             (     cubixdrv.asm):00165                 BRA     PUTCHR                            ;OUTPUT
C3CB                  (     cubixdrv.asm):00166         PUTCHR:
C3CB 7EC184           (     cubixdrv.asm):00167                 JMP     WRSER1
C3CE 3404             (     cubixdrv.asm):00168                 PSHS    B
C3D0 3402             (     cubixdrv.asm):00169                 PSHS    A
C3D2 58               (     cubixdrv.asm):00170                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
C3D3 8600             (     cubixdrv.asm):00171                 LDA     #$00
C3D5 F60100           (     cubixdrv.asm):00172                 LDB     CONSOLEDEVICE
C3D8 1F01             (     cubixdrv.asm):00173                 TFR     D,X
C3DA EC89C113         (     cubixdrv.asm):00174                 LDD     DISPATCHTABLE,X
C3DE FD0101           (     cubixdrv.asm):00175                 STD     farpointer
C3E1 3502             (     cubixdrv.asm):00176                 PULS    A
C3E3 AD9F0101         (     cubixdrv.asm):00177                 JSR     [farpointer]
C3E7 3504             (     cubixdrv.asm):00178                 PULS    B
C3E9 39               (     cubixdrv.asm):00179                 RTS
                      (     cubixdrv.asm):00180         
                      (     cubixdrv.asm):00181                 END

Symbol Table:
[ G] BANKED_DRIVER_DISPATCHER         C100
[ G] CONSOLEDEVICE                    0100
[ G] CUBIX_IO_BASE                    1000
[ G] CURRENTCYL                       0106
[ G] CURRENTDEVICE                    0104
[ G] CURRENTHEAD                      0108
[ G] CURRENTSEC                       0107
[ G] CURRENTSLICE                     0105
[ G] DISKERROR                        0103
[ G] DISPATCHTABLE                    C113
[ G] drv_noop                         C384
[ G] farpointer                       0101
[ G] FUNCTION_DISPATCHER              C100
[ G] HOUT                             C3BF
[ G] HSTBUF                           0200
[ G] IDE_ABORT                        C1C3
[ G] IDE_INITA                        C1E5
[ G] IDE_PRINT_INFO                   C1CC
[ G] IDE_READ_BUFFER                  C2F2
[ G] IDE_READ_INFO                    C20D
[ G] IDE_READ_INFO_ABORT              C24B
[ G] IDE_READ_INFO_OK                 C257
[ G] IDE_READ_SECTOR                  C25D
[ G] IDE_READ_SECTOR_1                C262
[ G] IDE_READ_SECTOR_ERROR            C277
[ G] IDE_SETUP_LBA                    C35B
[ G] IDE_WAIT_DRQ                     C2C6
[ G] IDE_WAIT_DRQ1                    C2D0
[ G] IDE_WAIT_DRQ2                    C2EE
[ G] IDE_WAIT_DRQ3                    C2F0
[ G] IDE_WAIT_DRQE                    C2E9
[ G] IDE_WAIT_NOT_BUSY                C2A2
[ G] IDE_WAIT_NOT_BUSY1               C2AC
[ G] IDE_WAIT_NOT_BUSY2               C2C2
[ G] IDE_WAIT_NOT_BUSY3               C2C4
[ G] IDE_WRITE_BUFFER                 C306
[ G] IDE_WRITE_SECTOR                 C27D
[ G] IDE_WRITE_SECTOR_ERROR           C29C
[ G] IDEBUFRD                         C2F6
[ G] IDEBUFWT                         C30A
[ G] LFCR                             C385
[ G] MESSAGE1                         C31A
[ G] MESSAGE2                         C322
[ G] MESSAGE3                         C329
[ G] MESSAGE4                         C336
[ G] MESSAGE5                         C347
[ G] MESSAGE6                         C358
[ G] PAGER_D                          0109
[ G] PAGER_S                          010F
[ G] PAGER_U                          0111
[ G] PAGER_X                          010B
[ G] PAGER_Y                          010D
[ G] PUTCHR                           C3CB
[ G] RDSER1                           C18F
[ G] SERIALINIT                       C173
[ G] SPACE                            C391
[ G] UART1COMMAND                     1F86
[ G] UART1CONTROL                     1F87
[ G] UART1DATA                        1F84
[ G] UART1STATUS                      1F85
[ G] WRHEX                            C3B1
[ G] WRHEXW                           C3A5
[ G] WRSER1                           C184
[ G] WRST1                            C39B
[ G] WRST2                            C3A3
[ G] WRSTR                            C399
[ G] XTIDE_ASTATUS                    131E
[ G] XTIDE_CMD_ID                     00EC
[ G] XTIDE_CMD_INIT                   0091
[ G] XTIDE_CMD_READ                   0020
[ G] XTIDE_CMD_RECAL                  0010
[ G] XTIDE_CMD_SPINDOWN               00E0
[ G] XTIDE_CMD_SPINUP                 00E1
[ G] XTIDE_CMD_WRITE                  0030
[ G] XTIDE_COMMAND                    130E
[ G] XTIDE_CONTROL                    131C
[ G] XTIDE_DATA                       1300
[ G] XTIDE_DEVICE                     130C
[ G] XTIDE_ERR                        1302
[ G] XTIDE_INIT                       C1A3
[ G] XTIDE_LBAHI                      130A
[ G] XTIDE_LBALOW                     1306
[ G] XTIDE_LBAMID                     1308
[ G] XTIDE_PROBE                      C1E9
[ G] XTIDE_PROBE_FAIL                 C20A
[ G] XTIDE_PROBE_SUCCESS              C20C
[ G] XTIDE_SEC_CNT                    1304
[ G] XTIDE_STATUS                     130E
[ G] XTIDETIMEOUT                     C1A1
