                      (     cubixdrv.asm):00001         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00002         ;
                      (     cubixdrv.asm):00003         ;       6809PC Cubix banked driver code
                      (     cubixdrv.asm):00004         ;
                      (     cubixdrv.asm):00005         ;  DWERNER 5/17/2025    Initial
                      (     cubixdrv.asm):00006         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00007         
                      (     cubixdrv.asm):00008         ;*
                      (     cubixdrv.asm):00009                 INCLUDE cubix_values.asm
                      ( cubix_values.asm):00001         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00002         ;
                      ( cubix_values.asm):00003         ;       6809PC Cubix System storage locations
                      ( cubix_values.asm):00004         ;
                      ( cubix_values.asm):00005         ;  DWERNER 5/17/2025    Initial
                      ( cubix_values.asm):00006         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00007         ; $0000-$00FF DRIVER/PAGER STACK
                      ( cubix_values.asm):00008         ; $0100-$01FF OS Driver Storage
     0101             ( cubix_values.asm):00009         farpointer      = $0101
     0103             ( cubix_values.asm):00010         DISKERROR       = $0103
     0104             ( cubix_values.asm):00011         CURRENTDEVICE   = $0104
     0105             ( cubix_values.asm):00012         CURRENTSLICE    = $0105
     0106             ( cubix_values.asm):00013         CURRENTCYL      = $0106
     0107             ( cubix_values.asm):00014         CURRENTSEC      = $0107
     0108             ( cubix_values.asm):00015         CURRENTHEAD     = $0108
     0109             ( cubix_values.asm):00016         PAGER_D         = $0109
     010B             ( cubix_values.asm):00017         PAGER_X         = $010B
     010D             ( cubix_values.asm):00018         PAGER_Y         = $010D
     010F             ( cubix_values.asm):00019         PAGER_S         = $010F
     0111             ( cubix_values.asm):00020         PAGER_U         = $0111
                      ( cubix_values.asm):00021         
                      ( cubix_values.asm):00022         
                      ( cubix_values.asm):00023         ; $200-$3FF Host Buffer Driver Storage
     0200             ( cubix_values.asm):00024         HSTBUF          = $0200
                      ( cubix_values.asm):00025         ; $400-$7FF OS LOCAL STORAGE
                      ( cubix_values.asm):00026         ; $1000-$1FFF Hardware Access Window
     1000             ( cubix_values.asm):00027         CUBIX_IO_BASE   = $1000                           ; BIOS DEFAULT IO LOCATION
                      ( cubix_values.asm):00028         ; $2000-$DFFF User RAM
                      ( cubix_values.asm):00029         ; $E000-$FFFF CUBIX
                      ( cubix_values.asm):00030         
     C100             ( cubix_values.asm):00031         BANKED_DRIVER_DISPATCHER = $C100
                      (     cubixdrv.asm):00010         ;*
                      (     cubixdrv.asm):00011         
                      (     cubixdrv.asm):00012                 ORG     $C100
                      (     cubixdrv.asm):00013         
                      (     cubixdrv.asm):00014         ;__DISPATCHER________________________________________________________________________________________
                      (     cubixdrv.asm):00015         ;
                      (     cubixdrv.asm):00016         ;  Function dispatcher
                      (     cubixdrv.asm):00017         ;  function to call is located in "farfunct"
                      (     cubixdrv.asm):00018         ;____________________________________________________________________________________________________
                      (     cubixdrv.asm):00019         ;
C100                  (     cubixdrv.asm):00020         FUNCTION_DISPATCHER:
                      (     cubixdrv.asm):00021         
C100 58               (     cubixdrv.asm):00022                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
C101 8600             (     cubixdrv.asm):00023                 LDA     #$00
C103 1F01             (     cubixdrv.asm):00024                 TFR     D,X
C105 EC89C113         (     cubixdrv.asm):00025                 LDD     DISPATCHTABLE,X
C109 FD0101           (     cubixdrv.asm):00026                 STD     farpointer
C10C FC0109           (     cubixdrv.asm):00027                 LDD     >PAGER_D                          ; RESTORE 'D'
C10F 6E9F0101         (     cubixdrv.asm):00028                 JMP     [farpointer]
                      (     cubixdrv.asm):00029         
                      (     cubixdrv.asm):00030         
C113                  (     cubixdrv.asm):00031         DISPATCHTABLE:
C113 C191             (     cubixdrv.asm):00032                 .WORD   WRSER1                            ; FUNCTION 00 - WRITE SERIAL PORT
C115 C19C             (     cubixdrv.asm):00033                 .WORD   RDSER1                            ; FUNCTION 01 - READ SERIAL PORT
C117 C181             (     cubixdrv.asm):00034                 .WORD   SERIALINIT                        ; FUNCTION 02 - SERIAL PORT INIT
                      (     cubixdrv.asm):00035         
C119 C91E             (     cubixdrv.asm):00036                 .WORD   drv_noop                          ; FUNCTION 03 - WRITE VIDEO
C11B C91E             (     cubixdrv.asm):00037                 .WORD   drv_noop                          ; FUNCTION 04 - READ KEYBOARD
C11D C91E             (     cubixdrv.asm):00038                 .WORD   drv_noop                          ; FUNCTION 05 - INIT INTERFACE
                      (     cubixdrv.asm):00039         
C11F C91E             (     cubixdrv.asm):00040                 .WORD   drv_noop                          ; FUNCTION 06
C121 C91E             (     cubixdrv.asm):00041                 .WORD   drv_noop                          ; FUNCTION 07
C123 C91E             (     cubixdrv.asm):00042                 .WORD   drv_noop                          ; FUNCTION 08
                      (     cubixdrv.asm):00043         
C125 C91E             (     cubixdrv.asm):00044                 .WORD   drv_noop                          ; FUNCTION 09
C127 C91E             (     cubixdrv.asm):00045                 .WORD   drv_noop                          ; FUNCTION 10
C129 C91E             (     cubixdrv.asm):00046                 .WORD   drv_noop                          ; FUNCTION 11
                      (     cubixdrv.asm):00047         
C12B C91E             (     cubixdrv.asm):00048                 .WORD   drv_noop                          ; FUNCTION 12
C12D C91E             (     cubixdrv.asm):00049                 .WORD   drv_noop                          ; FUNCTION 13
C12F C91E             (     cubixdrv.asm):00050                 .WORD   drv_noop                          ; FUNCTION 14
                      (     cubixdrv.asm):00051         
C131 C91E             (     cubixdrv.asm):00052                 .WORD   drv_noop                          ; FUNCTION 15 - called during OS init
C133 C91E             (     cubixdrv.asm):00053                 .WORD   drv_noop                          ; FUNCTION 16 - read a sector from drive
C135 C91E             (     cubixdrv.asm):00054                 .WORD   drv_noop                          ; FUNCTION 17 - write a sector to drive
                      (     cubixdrv.asm):00055         ;
C137 C91E             (     cubixdrv.asm):00056                 .WORD   drv_noop                          ;FL_SETUP                          ; FUNCTION 18 - init floppy device
C139 C91E             (     cubixdrv.asm):00057                 .WORD   drv_noop                          ;FL_READ_SECTOR                    ; FUNCTION 19 - read a sector from floppy device
C13B C91E             (     cubixdrv.asm):00058                 .WORD   drv_noop                          ;FL_WRITE_SECTOR                   ; FUNCTION 20 - write a sector to floppy device
                      (     cubixdrv.asm):00059         ;
C13D C1B3             (     cubixdrv.asm):00060                 .WORD   XTIDE_INIT                        ; FUNCTION 21 - init XT IDE device
C13F C2A0             (     cubixdrv.asm):00061                 .WORD   IDE_READ_SECTOR                   ; FUNCTION 22 - read a sector from XT IDE device
C141 C32D             (     cubixdrv.asm):00062                 .WORD   IDE_WRITE_SECTOR                  ; FUNCTION 23 - write a sector to XT IDE device
                      (     cubixdrv.asm):00063         ;
C143 C91E             (     cubixdrv.asm):00064                 .WORD   drv_noop                          ;FPSD_INIT                         ; FUNCTION 24 - init PPIDE device
C145 C91E             (     cubixdrv.asm):00065                 .WORD   drv_noop                          ;FPSD_READ_SECTOR                  ; FUNCTION 25 - read a sector from PPIDE device
C147 C91E             (     cubixdrv.asm):00066                 .WORD   drv_noop                          ;FPSD_WRITE_SECTOR                 ; FUNCTION 26 - write a sector to PPIDE device
                      (     cubixdrv.asm):00067         ;
C149 C91E             (     cubixdrv.asm):00068                 .WORD   drv_noop                          ; FUNCTION 27 -
C14B C91E             (     cubixdrv.asm):00069                 .WORD   drv_noop                          ; FUNCTION 28 -
C14D C91E             (     cubixdrv.asm):00070                 .WORD   drv_noop                          ; FUNCTION 29 -
                      (     cubixdrv.asm):00071         ;
C14F C91E             (     cubixdrv.asm):00072                 .WORD   drv_noop                          ; FUNCTION 30 -
C151 C91E             (     cubixdrv.asm):00073                 .WORD   drv_noop                          ; FUNCTION 31 -
C153 C91E             (     cubixdrv.asm):00074                 .WORD   drv_noop                          ; FUNCTION 32 -
                      (     cubixdrv.asm):00075         ;
C155 C91E             (     cubixdrv.asm):00076                 .WORD   drv_noop                          ; FUNCTION 33 -
C157 C91E             (     cubixdrv.asm):00077                 .WORD   drv_noop                          ; FUNCTION 34 -
C159 C91E             (     cubixdrv.asm):00078                 .WORD   drv_noop                          ; FUNCTION 35 -
                      (     cubixdrv.asm):00079         ;
C15B C91E             (     cubixdrv.asm):00080                 .WORD   drv_noop                          ; FUNCTION 36 -
C15D C91E             (     cubixdrv.asm):00081                 .WORD   drv_noop                          ; FUNCTION 37 -
C15F C91E             (     cubixdrv.asm):00082                 .WORD   drv_noop                          ; FUNCTION 38 -
                      (     cubixdrv.asm):00083         ;
C161 C91E             (     cubixdrv.asm):00084                 .WORD   drv_noop                          ; FUNCTION 39 -
C163 C91E             (     cubixdrv.asm):00085                 .WORD   drv_noop                          ; FUNCTION 40 -
C165 C91E             (     cubixdrv.asm):00086                 .WORD   drv_noop                          ; FUNCTION 41 -
                      (     cubixdrv.asm):00087         ;
C167 C91E             (     cubixdrv.asm):00088                 .WORD   drv_noop                          ; FUNCTION 42 -
C169 C91E             (     cubixdrv.asm):00089                 .WORD   drv_noop                          ; FUNCTION 43 -
C16B C91E             (     cubixdrv.asm):00090                 .WORD   drv_noop                          ; FUNCTION 44 -
                      (     cubixdrv.asm):00091         ;
C16D C91E             (     cubixdrv.asm):00092                 .WORD   drv_noop                          ; FUNCTION 45 -
C16F C91E             (     cubixdrv.asm):00093                 .WORD   drv_noop                          ; FUNCTION 46 -
C171 C91E             (     cubixdrv.asm):00094                 .WORD   drv_noop                          ; FUNCTION 47 -
                      (     cubixdrv.asm):00095         ;
C173 C91E             (     cubixdrv.asm):00096                 .WORD   drv_noop                          ; FUNCTION 48 -
C175 C91E             (     cubixdrv.asm):00097                 .WORD   drv_noop                          ; FUNCTION 49 -
C177 C91E             (     cubixdrv.asm):00098                 .WORD   drv_noop                          ; FUNCTION 50 -
                      (     cubixdrv.asm):00099         ;
C179 C3E4             (     cubixdrv.asm):00100                 .WORD   MULTIOINIT                        ; FUNCTION 51 - INIT MULTI IO CARD
C17B C528             (     cubixdrv.asm):00101                 .WORD   KBD_GETKEY                        ; FUNCTION 52 - KEYBOARD INPUT
C17D C8F3             (     cubixdrv.asm):00102                 .WORD   LPT_OUT                           ; FUNCTION 53 - LPT OUTPUT
C17F C91E             (     cubixdrv.asm):00103                 .WORD   drv_noop                          ; FUNCTION 54 -
                      (     cubixdrv.asm):00104         ;
                      (     cubixdrv.asm):00105         
                      (     cubixdrv.asm):00106         
                      (     cubixdrv.asm):00107         ;__DRIVERS___________________________________________________________________________________________
                      (     cubixdrv.asm):00108         ;
                      (     cubixdrv.asm):00109                 INCLUDE cubix_serial.asm
                      ( cubix_serial.asm):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00002         ;
                      ( cubix_serial.asm):00003         ;       CUBIX serial drivers for 6809PC
                      ( cubix_serial.asm):00004         ;
                      ( cubix_serial.asm):00005         ;       Entry points:
                      ( cubix_serial.asm):00006         ;               SERIALINIT  - called during OS init
                      ( cubix_serial.asm):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00009         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00010         ;
                      ( cubix_serial.asm):00011         ;*
                      ( cubix_serial.asm):00012         ;*        HARDWARE I/O ADDRESSES
                      ( cubix_serial.asm):00013         ;*
                      ( cubix_serial.asm):00014         ; UART 6551 SERIAL
     1F84             ( cubix_serial.asm):00015         UART1DATA       EQU CUBIX_IO_BASE+$F84            ; SERIAL PORT 1 (I/O Card)
     1F85             ( cubix_serial.asm):00016         UART1STATUS     EQU CUBIX_IO_BASE+$F85            ; SERIAL PORT 1 (I/O Card)
     1F86             ( cubix_serial.asm):00017         UART1COMMAND    EQU CUBIX_IO_BASE+$F86            ; SERIAL PORT 1 (I/O Card)
     1F87             ( cubix_serial.asm):00018         UART1CONTROL    EQU CUBIX_IO_BASE+$F87            ; SERIAL PORT 1 (I/O Card)
                      ( cubix_serial.asm):00019         
                      ( cubix_serial.asm):00020         
                      ( cubix_serial.asm):00021         
                      ( cubix_serial.asm):00022         ;__SERIALINIT____________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00023         ;
                      ( cubix_serial.asm):00024         ;       INITIALIZE SERIAL PORTS
                      ( cubix_serial.asm):00025         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00026         ;
C181                  ( cubix_serial.asm):00027         SERIALINIT:
C181 8600             ( cubix_serial.asm):00028                 LDA     #$00                              ; RESET UART
C183 B71F85           ( cubix_serial.asm):00029                 STA     UART1STATUS                       ;
C186 860B             ( cubix_serial.asm):00030                 LDA     #$0B                              ;
C188 B71F86           ( cubix_serial.asm):00031                 STA     UART1COMMAND                      ;
C18B 861E             ( cubix_serial.asm):00032                 LDA     #$1E                              ; 9600, 8 BITS, NO PARITY, 1 STOP BIT
C18D B71F87           ( cubix_serial.asm):00033                 STA     UART1CONTROL                      ;
C190 39               ( cubix_serial.asm):00034                 RTS
                      ( cubix_serial.asm):00035         
                      ( cubix_serial.asm):00036         ;__WRSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00037         ;
                      ( cubix_serial.asm):00038         ;       WRITE CHARACTER(A) TO UART
                      ( cubix_serial.asm):00039         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00040         ;
C191                  ( cubix_serial.asm):00041         WRSER1
                      ( cubix_serial.asm):00042         !
C191 F61F85           ( cubix_serial.asm):00043                 LDB     UART1STATUS                       ; GET STATUS
C194 C410             ( cubix_serial.asm):00044                 ANDB    #%00010000                        ; IS TX READY
C196 27F9             ( cubix_serial.asm):00045                 BEQ     <                                 ; IF NOT REPEAT
C198 B71F84           ( cubix_serial.asm):00046                 STA     UART1DATA                         ; WRITE DATA
C19B 39               ( cubix_serial.asm):00047                 RTS
                      ( cubix_serial.asm):00048         
                      ( cubix_serial.asm):00049         ;__RDSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00050         ;
                      ( cubix_serial.asm):00051         ;       READ CHARACTER FROM UART TO (A)
                      ( cubix_serial.asm):00052         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00053         ;
C19C                  ( cubix_serial.asm):00054         RDSER1
C19C B61F85           ( cubix_serial.asm):00055                 LDA     UART1STATUS                       ; GET STATUS REGISTER
C19F 8408             ( cubix_serial.asm):00056                 ANDA    #%00001000                        ; IS RX READY
C1A1 2708             ( cubix_serial.asm):00057                 BEQ     >                                 ; No DATA IS READY
C1A3 B61F84           ( cubix_serial.asm):00058                 LDA     UART1DATA                         ; GET DATA CHAR
C1A6 B70109           ( cubix_serial.asm):00059                 STA     >PAGER_D                          ; SAVE 'D'
C1A9 39               ( cubix_serial.asm):00060                 RTS
                      ( cubix_serial.asm):00061         
C1AA 39               ( cubix_serial.asm):00062                 RTS
                      ( cubix_serial.asm):00063         !
C1AB 86FF             ( cubix_serial.asm):00064                 LDA     #$FF                              ;
C1AD B70109           ( cubix_serial.asm):00065                 STA     >PAGER_D                          ; SAVE 'D'
C1B0 39               ( cubix_serial.asm):00066                 RTS                                       ;
                      (     cubixdrv.asm):00110                 INCLUDE cubix_ide.asm
                      (    cubix_ide.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00002         ;
                      (    cubix_ide.asm):00003         ;       CUBIX IDE disk drivers 6809PC - XT IDE ISA CARD
                      (    cubix_ide.asm):00004         ;
                      (    cubix_ide.asm):00005         ;       Entry points:
                      (    cubix_ide.asm):00006         ;               XTIDE_INIT      - CALLED DURING OS INIT
                      (    cubix_ide.asm):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00009         ;________________________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00010         ;
                      (    cubix_ide.asm):00011         
     1300             (    cubix_ide.asm):00012         XTIDE_DATA_LO   = CUBIX_IO_BASE+$300
     1301             (    cubix_ide.asm):00013         XTIDE_DATA_HI   = CUBIX_IO_BASE+$301
     1302             (    cubix_ide.asm):00014         XTIDE_ERR       = CUBIX_IO_BASE+$302
     1302             (    cubix_ide.asm):00015         XTIDE_FECODE    = CUBIX_IO_BASE+$302
     1304             (    cubix_ide.asm):00016         XTIDE_SEC_CNT   = CUBIX_IO_BASE+$304
     1306             (    cubix_ide.asm):00017         XTIDE_LBALOW    = CUBIX_IO_BASE+$306
     1308             (    cubix_ide.asm):00018         XTIDE_LBAMID    = CUBIX_IO_BASE+$308
     130A             (    cubix_ide.asm):00019         XTIDE_LBAHI     = CUBIX_IO_BASE+$30A
     130C             (    cubix_ide.asm):00020         XTIDE_DEVICE    = CUBIX_IO_BASE+$30C
     130E             (    cubix_ide.asm):00021         XTIDE_COMMAND   = CUBIX_IO_BASE+$30E
     130E             (    cubix_ide.asm):00022         XTIDE_STATUS    = CUBIX_IO_BASE+$30E
                      (    cubix_ide.asm):00023         
                      (    cubix_ide.asm):00024         
                      (    cubix_ide.asm):00025         
                      (    cubix_ide.asm):00026         
                      (    cubix_ide.asm):00027         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (    cubix_ide.asm):00028         XTIDE_CMD_RECAL = $10
     0020             (    cubix_ide.asm):00029         XTIDE_CMD_READ  = $20
     0030             (    cubix_ide.asm):00030         XTIDE_CMD_WRITE = $30
     0091             (    cubix_ide.asm):00031         XTIDE_CMD_INIT  = $91
     00EC             (    cubix_ide.asm):00032         XTIDE_CMD_ID    = $EC
     00EF             (    cubix_ide.asm):00033         XTIDE_CMD_FEAT  = $EF
     00E0             (    cubix_ide.asm):00034         XTIDE_CMD_SPINDOWN = $E0
     00E1             (    cubix_ide.asm):00035         XTIDE_CMD_SPINUP = $E1
                      (    cubix_ide.asm):00036         
                      (    cubix_ide.asm):00037         
                      (    cubix_ide.asm):00038                 IFDEF   BIOS6809PC
C1B1                  (    cubix_ide.asm):00039         XTIDE_INIT:
                      (    cubix_ide.asm):00040                 JSR     XTIDE_PROBE
                      (    cubix_ide.asm):00041                 LDA     #$E0                              ; E0=MST  F0=SLV
                      (    cubix_ide.asm):00042                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00043         
                      (    cubix_ide.asm):00044                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
                      (    cubix_ide.asm):00045                 BCS     >
                      (    cubix_ide.asm):00046         
                      (    cubix_ide.asm):00047                 LDA     #$01                              ; ENABLE 8-BIT MODE (XT-CF-LITE)
                      (    cubix_ide.asm):00048                 STA     XTIDE_FECODE
                      (    cubix_ide.asm):00049                 LDA     #XTIDE_CMD_FEAT
                      (    cubix_ide.asm):00050                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00051         !
                      (    cubix_ide.asm):00052                 RTS
                      (    cubix_ide.asm):00053                 ENDIF
                      (    cubix_ide.asm):00054         
                      (    cubix_ide.asm):00055         
                      (    cubix_ide.asm):00056                 IFNDEF   BIOS6809PC
C1B1                  (    cubix_ide.asm):00057         XTIDETIMEOUT:
C1B1 0000             (    cubix_ide.asm):00058                 .BYTE   $00,$00
                      (    cubix_ide.asm):00059         
                      (    cubix_ide.asm):00060         
                      (    cubix_ide.asm):00061         
                      (    cubix_ide.asm):00062         ;__XTIDE_INIT________________________________________________________________________________________
                      (    cubix_ide.asm):00063         ;
                      (    cubix_ide.asm):00064         ;  INIT AND DISPLAY IDE INFO
                      (    cubix_ide.asm):00065         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00066         ;
C1B3                  (    cubix_ide.asm):00067         XTIDE_INIT:
C1B3 BDC91F           (    cubix_ide.asm):00068                 JSR     LFCR                              ; AND CRLF
C1B6 8EC36F           (    cubix_ide.asm):00069                 LDX     #MESSAGE1
C1B9 BDC933           (    cubix_ide.asm):00070                 JSR     WRSTR                             ; DO PROMPT
C1BC BDC91F           (    cubix_ide.asm):00071                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00072         ;
C1BF 8EC377           (    cubix_ide.asm):00073                 LDX     #MESSAGE2
C1C2 BDC933           (    cubix_ide.asm):00074                 JSR     WRSTR                             ; DO PROMPT
C1C5 CC1300           (    cubix_ide.asm):00075                 LDD     #XTIDE_DATA_LO                    ; GET BASE PORT
C1C8 BDC93F           (    cubix_ide.asm):00076                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_ide.asm):00077         ;
C1CB BDC1F9           (    cubix_ide.asm):00078                 JSR     XTIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
C1CE 2503             (    cubix_ide.asm):00079                 BCS     IDE_ABORT
C1D0 7EC1DC           (    cubix_ide.asm):00080                 JMP     IDE_PRINT_INFO
C1D3                  (    cubix_ide.asm):00081         IDE_ABORT:
C1D3 8EC37E           (    cubix_ide.asm):00082                 LDX     #MESSAGE3
C1D6 BDC933           (    cubix_ide.asm):00083                 JSR     WRSTR                             ; DO PROMPT
C1D9 7EC1F5           (    cubix_ide.asm):00084                 JMP     IDE_INITA
C1DC                  (    cubix_ide.asm):00085         IDE_PRINT_INFO:
C1DC BDC91F           (    cubix_ide.asm):00086                 JSR     LFCR                              ; AND CRLF
C1DF 8EC38B           (    cubix_ide.asm):00087                 LDX     #MESSAGE4
C1E2 BDC933           (    cubix_ide.asm):00088                 JSR     WRSTR                             ; DO PROMPT
C1E5 8600             (    cubix_ide.asm):00089                 LDA     #$00
C1E7 BDC23B           (    cubix_ide.asm):00090                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
C1EA 8EC39C           (    cubix_ide.asm):00091                 LDX     #MESSAGE5
C1ED BDC933           (    cubix_ide.asm):00092                 JSR     WRSTR                             ; DO PROMPT
C1F0 8601             (    cubix_ide.asm):00093                 LDA     #$01
C1F2 BDC23B           (    cubix_ide.asm):00094                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
C1F5                  (    cubix_ide.asm):00095         IDE_INITA:
C1F5 BDC91F           (    cubix_ide.asm):00096                 JSR     LFCR                              ; AND CRLF
C1F8 39               (    cubix_ide.asm):00097                 RTS                                       ; DONE
                      (    cubix_ide.asm):00098                 ENDIF
                      (    cubix_ide.asm):00099         ;
                      (    cubix_ide.asm):00100         ;__XTIDE_PROBE_______________________________________________________________________________________
                      (    cubix_ide.asm):00101         ;
                      (    cubix_ide.asm):00102         ;  XTPROBE FOR IDE HARDWARE
                      (    cubix_ide.asm):00103         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00104         ;
C1F9                  (    cubix_ide.asm):00105         XTIDE_PROBE:
                      (    cubix_ide.asm):00106         ;
                      (    cubix_ide.asm):00107         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (    cubix_ide.asm):00108         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (    cubix_ide.asm):00109         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (    cubix_ide.asm):00110         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (    cubix_ide.asm):00111         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (    cubix_ide.asm):00112         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (    cubix_ide.asm):00113         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (    cubix_ide.asm):00114         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (    cubix_ide.asm):00115         
                      (    cubix_ide.asm):00116         ; CHECK SIGNATURE
                      (    cubix_ide.asm):00117         
C1F9 8E0000           (    cubix_ide.asm):00118                 LDX     #$0000
                      (    cubix_ide.asm):00119         ;       SOMETIMES THE CF-XTIDE WILL ONLY READ 80, THIS CAN BE RESET BY WRITING ZEROS UNTIL VALUES ARE PROPERLY READ
                      (    cubix_ide.asm):00120         !
C1FC F61300           (    cubix_ide.asm):00121                 LDB     XTIDE_DATA_LO
C1FF C180             (    cubix_ide.asm):00122                 CMPB    #$80
C201 262B             (    cubix_ide.asm):00123                 BNE     >
C203 C600             (    cubix_ide.asm):00124                 LDB     #$00
C205 F71300           (    cubix_ide.asm):00125                 STB     XTIDE_DATA_LO
C208 12               (    cubix_ide.asm):00126                 NOP
C209 F71301           (    cubix_ide.asm):00127                 STB     XTIDE_DATA_HI
C20C 12               (    cubix_ide.asm):00128                 NOP
C20D F71306           (    cubix_ide.asm):00129                 STB     XTIDE_LBALOW
C210 12               (    cubix_ide.asm):00130                 NOP
C211 F71308           (    cubix_ide.asm):00131                 STB     XTIDE_LBAMID
C214 12               (    cubix_ide.asm):00132                 NOP
C215 F7130A           (    cubix_ide.asm):00133                 STB     XTIDE_LBAHI
C218 12               (    cubix_ide.asm):00134                 NOP
C219 F7130C           (    cubix_ide.asm):00135                 STB     XTIDE_DEVICE
C21C 12               (    cubix_ide.asm):00136                 NOP
C21D F7130E           (    cubix_ide.asm):00137                 STB     XTIDE_COMMAND
C220 12               (    cubix_ide.asm):00138                 NOP
C221 F7130E           (    cubix_ide.asm):00139                 STB     XTIDE_STATUS
C224 12               (    cubix_ide.asm):00140                 NOP
C225 3001             (    cubix_ide.asm):00141                 INX
C227 8C0300           (    cubix_ide.asm):00142                 CPX     #$0300
C22A 26D0             (    cubix_ide.asm):00143                 BNE     <
C22C 200A             (    cubix_ide.asm):00144                 BRA     XTIDE_PROBE_FAIL                  ; TIMED OUT
                      (    cubix_ide.asm):00145         !
C22E BDC2C0           (    cubix_ide.asm):00146                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C231 2505             (    cubix_ide.asm):00147                 BCS     XTIDE_PROBE_FAIL
C233 1CFE             (    cubix_ide.asm):00148                 CLC
C235 7EC23A           (    cubix_ide.asm):00149                 JMP     XTIDE_PROBE_SUCCESS
C238                  (    cubix_ide.asm):00150         XTIDE_PROBE_FAIL:
C238 1A01             (    cubix_ide.asm):00151                 SEC
C23A                  (    cubix_ide.asm):00152         XTIDE_PROBE_SUCCESS:
C23A 39               (    cubix_ide.asm):00153                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (    cubix_ide.asm):00154         
                      (    cubix_ide.asm):00155                 IFNDEF   BIOS6809PC
                      (    cubix_ide.asm):00156         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (    cubix_ide.asm):00157         ;*
                      (    cubix_ide.asm):00158         ;*  READ IDE INFORMATION
                      (    cubix_ide.asm):00159         ;*      CARRY SET ON ERROR
                      (    cubix_ide.asm):00160         ;*      A=MST/SLV
                      (    cubix_ide.asm):00161         ;*____________________________________________________________________________________________________
C23B                  (    cubix_ide.asm):00162         IDE_READ_INFO:
                      (    cubix_ide.asm):00163         ; SET DRIVE BIT
C23B 8401             (    cubix_ide.asm):00164                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
C23D 48               (    cubix_ide.asm):00165                 ASLA                                      ; SHIFT 4
C23E 48               (    cubix_ide.asm):00166                 ASLA                                      ;
C23F 48               (    cubix_ide.asm):00167                 ASLA                                      ;
C240 48               (    cubix_ide.asm):00168                 ASLA                                      ;
C241 8AE0             (    cubix_ide.asm):00169                 ORA     #$E0                              ; E0=MST  F0=SLV
C243 B7130C           (    cubix_ide.asm):00170                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00171         
C246 BDC2C0           (    cubix_ide.asm):00172                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C249 2543             (    cubix_ide.asm):00173                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00174         
C24B 8601             (    cubix_ide.asm):00175                 LDA     #$01                              ; ENABLE 8-BIT MODE (XT-CF-LITE)
C24D B71302           (    cubix_ide.asm):00176                 STA     XTIDE_FECODE
C250 86EF             (    cubix_ide.asm):00177                 LDA     #XTIDE_CMD_FEAT
C252 B7130E           (    cubix_ide.asm):00178                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00179         
C255 12               (    cubix_ide.asm):00180                 NOP                                       ; TINY DELAY, JUST IN CASE
C256 12               (    cubix_ide.asm):00181                 NOP
C257 12               (    cubix_ide.asm):00182                 NOP
C258 12               (    cubix_ide.asm):00183                 NOP
C259 12               (    cubix_ide.asm):00184                 NOP
C25A 12               (    cubix_ide.asm):00185                 NOP
C25B 12               (    cubix_ide.asm):00186                 NOP
C25C 12               (    cubix_ide.asm):00187                 NOP
C25D 12               (    cubix_ide.asm):00188                 NOP
C25E 12               (    cubix_ide.asm):00189                 NOP
C25F 12               (    cubix_ide.asm):00190                 NOP
                      (    cubix_ide.asm):00191         
                      (    cubix_ide.asm):00192         
C260 86EC             (    cubix_ide.asm):00193                 LDA     #XTIDE_CMD_ID                     ; ID COMMAND
C262 B7130E           (    cubix_ide.asm):00194                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00195         
C265 BDC2E4           (    cubix_ide.asm):00196                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
C268 2524             (    cubix_ide.asm):00197                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00198         
C26A BDC310           (    cubix_ide.asm):00199                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
                      (    cubix_ide.asm):00200         
C26D 8EC3AD           (    cubix_ide.asm):00201                 LDX     #MESSAGE6
C270 BDC933           (    cubix_ide.asm):00202                 JSR     WRSTR
C273 B6027B           (    cubix_ide.asm):00203                 LDA     HSTBUF+123
C276 BDC94B           (    cubix_ide.asm):00204                 JSR     WRHEX
C279 B6027A           (    cubix_ide.asm):00205                 LDA     HSTBUF+122
C27C BDC94B           (    cubix_ide.asm):00206                 JSR     WRHEX
C27F B60279           (    cubix_ide.asm):00207                 LDA     HSTBUF+121
C282 BDC94B           (    cubix_ide.asm):00208                 JSR     WRHEX
C285 B60278           (    cubix_ide.asm):00209                 LDA     HSTBUF+120
C288 BDC94B           (    cubix_ide.asm):00210                 JSR     WRHEX
C28B 7EC29A           (    cubix_ide.asm):00211                 JMP     IDE_READ_INFO_OK
C28E                  (    cubix_ide.asm):00212         IDE_READ_INFO_ABORT:
C28E 8EC37E           (    cubix_ide.asm):00213                 LDX     #MESSAGE3
C291 BDC933           (    cubix_ide.asm):00214                 JSR     WRSTR                             ;DO PROMPT
C294 BDC91F           (    cubix_ide.asm):00215                 JSR     LFCR                              ;AND CRLF
C297 1A01             (    cubix_ide.asm):00216                 SEC
C299 39               (    cubix_ide.asm):00217                 RTS                                       ;
C29A                  (    cubix_ide.asm):00218         IDE_READ_INFO_OK:
C29A BDC91F           (    cubix_ide.asm):00219                 JSR     LFCR                              ; AND CRLF
C29D 1CFE             (    cubix_ide.asm):00220                 CLC
C29F 39               (    cubix_ide.asm):00221                 RTS
                      (    cubix_ide.asm):00222                 ENDIF
                      (    cubix_ide.asm):00223         
                      (    cubix_ide.asm):00224         
                      (    cubix_ide.asm):00225         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (    cubix_ide.asm):00226         ;*
                      (    cubix_ide.asm):00227         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (    cubix_ide.asm):00228         ;*
                      (    cubix_ide.asm):00229         ;*____________________________________________________________________________________________________
C2A0                  (    cubix_ide.asm):00230         IDE_READ_SECTOR:
C2A0 BDC2C0           (    cubix_ide.asm):00231                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C2A3 2515             (    cubix_ide.asm):00232                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
C2A5                  (    cubix_ide.asm):00233         IDE_READ_SECTOR_1:
                      (    cubix_ide.asm):00234                 IFNDEF   BIOS6809PC
C2A5 BDC3B0           (    cubix_ide.asm):00235                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
                      (    cubix_ide.asm):00236                 ENDIF
C2A8 8620             (    cubix_ide.asm):00237                 LDA     #XTIDE_CMD_READ
C2AA B7130E           (    cubix_ide.asm):00238                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00239         
C2AD BDC2E4           (    cubix_ide.asm):00240                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
C2B0 2508             (    cubix_ide.asm):00241                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
C2B2 BDC310           (    cubix_ide.asm):00242                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
C2B5 4F               (    cubix_ide.asm):00243                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
C2B6 B70103           (    cubix_ide.asm):00244                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C2B9 39               (    cubix_ide.asm):00245                 RTS
C2BA                  (    cubix_ide.asm):00246         IDE_READ_SECTOR_ERROR:
C2BA 8602             (    cubix_ide.asm):00247                 LDA     #$02                              ; SET ERROR CONDITION
C2BC B70103           (    cubix_ide.asm):00248                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C2BF 39               (    cubix_ide.asm):00249                 RTS
                      (    cubix_ide.asm):00250         
                      (    cubix_ide.asm):00251         
                      (    cubix_ide.asm):00252         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (    cubix_ide.asm):00253         ;*
                      (    cubix_ide.asm):00254         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (    cubix_ide.asm):00255         ;*
                      (    cubix_ide.asm):00256         ;*____________________________________________________________________________________________________
C2C0                  (    cubix_ide.asm):00257         IDE_WAIT_NOT_BUSY:
C2C0 3406             (    cubix_ide.asm):00258                 PSHS    A,B
C2C2 8600             (    cubix_ide.asm):00259                 LDA     #$00
C2C4 B7C1B1           (    cubix_ide.asm):00260                 STA     XTIDETIMEOUT
C2C7 B7C1B2           (    cubix_ide.asm):00261                 STA     XTIDETIMEOUT+1
C2CA                  (    cubix_ide.asm):00262         IDE_WAIT_NOT_BUSY1:
C2CA F6130E           (    cubix_ide.asm):00263                 LDB     XTIDE_STATUS                      ;WAIT FOR RDY BIT TO BE SET
C2CD C480             (    cubix_ide.asm):00264                 ANDB    #$80
C2CF 270F             (    cubix_ide.asm):00265                 BEQ     IDE_WAIT_NOT_BUSY2
C2D1 7CC1B1           (    cubix_ide.asm):00266                 INC     XTIDETIMEOUT
C2D4 26F4             (    cubix_ide.asm):00267                 BNE     IDE_WAIT_NOT_BUSY1
C2D6 7CC1B2           (    cubix_ide.asm):00268                 INC     XTIDETIMEOUT+1
C2D9 26EF             (    cubix_ide.asm):00269                 BNE     IDE_WAIT_NOT_BUSY1
C2DB 1A01             (    cubix_ide.asm):00270                 SEC
C2DD 7EC2E2           (    cubix_ide.asm):00271                 JMP     IDE_WAIT_NOT_BUSY3
C2E0                  (    cubix_ide.asm):00272         IDE_WAIT_NOT_BUSY2:
C2E0 1CFE             (    cubix_ide.asm):00273                 CLC
C2E2                  (    cubix_ide.asm):00274         IDE_WAIT_NOT_BUSY3:
C2E2 3586             (    cubix_ide.asm):00275                 PULS    PC,A,B
                      (    cubix_ide.asm):00276         
                      (    cubix_ide.asm):00277         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (    cubix_ide.asm):00278         ;*
                      (    cubix_ide.asm):00279         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (    cubix_ide.asm):00280         ;*
                      (    cubix_ide.asm):00281         ;*____________________________________________________________________________________________________
C2E4                  (    cubix_ide.asm):00282         IDE_WAIT_DRQ:
C2E4 3426             (    cubix_ide.asm):00283                 PSHS    A,B,Y
C2E6 8600             (    cubix_ide.asm):00284                 LDA     #$00
C2E8 B7C1B1           (    cubix_ide.asm):00285                 STA     XTIDETIMEOUT
C2EB B7C1B2           (    cubix_ide.asm):00286                 STA     XTIDETIMEOUT+1
C2EE                  (    cubix_ide.asm):00287         IDE_WAIT_DRQ1:
C2EE F6130E           (    cubix_ide.asm):00288                 LDB     XTIDE_STATUS                      ;WAIT FOR DRQ BIT TO BE SET
C2F1 C488             (    cubix_ide.asm):00289                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
C2F3 C108             (    cubix_ide.asm):00290                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
C2F5 2715             (    cubix_ide.asm):00291                 BEQ     IDE_WAIT_DRQ2
C2F7 C401             (    cubix_ide.asm):00292                 ANDB    #%00000001                        ; IS ERROR?
C2F9 C101             (    cubix_ide.asm):00293                 CMPB    #%00000001                        ;
C2FB 270A             (    cubix_ide.asm):00294                 BEQ     IDE_WAIT_DRQE
C2FD 7CC1B1           (    cubix_ide.asm):00295                 INC     XTIDETIMEOUT
C300 26EC             (    cubix_ide.asm):00296                 BNE     IDE_WAIT_DRQ1
C302 7CC1B2           (    cubix_ide.asm):00297                 INC     XTIDETIMEOUT+1
C305 26E7             (    cubix_ide.asm):00298                 BNE     IDE_WAIT_DRQ1
C307                  (    cubix_ide.asm):00299         IDE_WAIT_DRQE:
C307 1A01             (    cubix_ide.asm):00300                 SEC
C309 7EC30E           (    cubix_ide.asm):00301                 JMP     IDE_WAIT_DRQ3
C30C                  (    cubix_ide.asm):00302         IDE_WAIT_DRQ2:
C30C 1CFE             (    cubix_ide.asm):00303                 CLC
C30E                  (    cubix_ide.asm):00304         IDE_WAIT_DRQ3:
C30E 35A6             (    cubix_ide.asm):00305                 PULS    PC,A,B,Y
                      (    cubix_ide.asm):00306         
                      (    cubix_ide.asm):00307         
                      (    cubix_ide.asm):00308         
                      (    cubix_ide.asm):00309         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00310         ;*
                      (    cubix_ide.asm):00311         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00312         ;*
                      (    cubix_ide.asm):00313         ;*____________________________________________________________________________________________________
C310                  (    cubix_ide.asm):00314         IDE_READ_BUFFER:
C310 108E0000         (    cubix_ide.asm):00315                 LDY     #$0000                            ; INDEX
C314                  (    cubix_ide.asm):00316         IDEBUFRD:
C314 F61300           (    cubix_ide.asm):00317                 LDB     XTIDE_DATA_LO
C317 E7A90200         (    cubix_ide.asm):00318                 STB     HSTBUF,Y                          ;
C31B 3121             (    cubix_ide.asm):00319                 INY
C31D F61301           (    cubix_ide.asm):00320                 LDB     XTIDE_DATA_HI
C320 E7A90200         (    cubix_ide.asm):00321                 STB     HSTBUF,Y                          ;
C324 3121             (    cubix_ide.asm):00322                 INY
C326 108C0200         (    cubix_ide.asm):00323                 CMPY    #$0200                            ;
C32A 26E8             (    cubix_ide.asm):00324                 BNE     IDEBUFRD                          ;
C32C 39               (    cubix_ide.asm):00325                 RTS                                       ;
                      (    cubix_ide.asm):00326         
                      (    cubix_ide.asm):00327         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (    cubix_ide.asm):00328         ;*
                      (    cubix_ide.asm):00329         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (    cubix_ide.asm):00330         ;*
                      (    cubix_ide.asm):00331         ;*____________________________________________________________________________________________________
C32D                  (    cubix_ide.asm):00332         IDE_WRITE_SECTOR:
C32D BDC2C0           (    cubix_ide.asm):00333                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C330 251A             (    cubix_ide.asm):00334                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
                      (    cubix_ide.asm):00335                 IFNDEF   BIOS6809PC
C332 BDC3B0           (    cubix_ide.asm):00336                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
                      (    cubix_ide.asm):00337                 ENDIF
C335 8630             (    cubix_ide.asm):00338                 LDA     #XTIDE_CMD_WRITE
C337 B7130E           (    cubix_ide.asm):00339                 STA     XTIDE_COMMAND
C33A BDC2E4           (    cubix_ide.asm):00340                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
C33D 250D             (    cubix_ide.asm):00341                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C33F BDC352           (    cubix_ide.asm):00342                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
C342 BDC2C0           (    cubix_ide.asm):00343                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
C345 2505             (    cubix_ide.asm):00344                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C347 4F               (    cubix_ide.asm):00345                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
C348 B70103           (    cubix_ide.asm):00346                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C34B 39               (    cubix_ide.asm):00347                 RTS
C34C                  (    cubix_ide.asm):00348         IDE_WRITE_SECTOR_ERROR:
C34C 8602             (    cubix_ide.asm):00349                 LDA     #$02
C34E B70103           (    cubix_ide.asm):00350                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C351 39               (    cubix_ide.asm):00351                 RTS
                      (    cubix_ide.asm):00352         
                      (    cubix_ide.asm):00353         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00354         ;*
                      (    cubix_ide.asm):00355         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00356         ;*
                      (    cubix_ide.asm):00357         ;*____________________________________________________________________________________________________
C352                  (    cubix_ide.asm):00358         IDE_WRITE_BUFFER:
C352 108E0000         (    cubix_ide.asm):00359                 LDY     #$0000                            ; INDEX
C356                  (    cubix_ide.asm):00360         IDEBUFWT:
C356 E6A90200         (    cubix_ide.asm):00361                 LDB     HSTBUF,Y                          ;
C35A F71300           (    cubix_ide.asm):00362                 STB     XTIDE_DATA_LO
C35D 3121             (    cubix_ide.asm):00363                 INY
C35F E6A90200         (    cubix_ide.asm):00364                 LDB     HSTBUF,Y                          ;
C363 F71301           (    cubix_ide.asm):00365                 STB     XTIDE_DATA_HI
C366 3121             (    cubix_ide.asm):00366                 INY
C368 108C0200         (    cubix_ide.asm):00367                 CMPY    #$0200                            ;
C36C 26E8             (    cubix_ide.asm):00368                 BNE     IDEBUFWT                          ;
C36E 39               (    cubix_ide.asm):00369                 RTS                                       ;
                      (    cubix_ide.asm):00370         
                      (    cubix_ide.asm):00371         
                      (    cubix_ide.asm):00372                 IFNDEF   BIOS6809PC
C36F                  (    cubix_ide.asm):00373         MESSAGE1
C36F 5050494445203A   (    cubix_ide.asm):00374                 FCC     "PPIDE :"
C376 00               (    cubix_ide.asm):00375                 FCB     00
C377                  (    cubix_ide.asm):00376         MESSAGE2
C377 20494F3D3078     (    cubix_ide.asm):00377                 FCC     " IO=0x"
C37D 00               (    cubix_ide.asm):00378                 FCB     00
C37E                  (    cubix_ide.asm):00379         MESSAGE3
C37E 204E4F5420505245 (    cubix_ide.asm):00380                 FCC     " NOT PRESENT"
     53454E54
C38A 00               (    cubix_ide.asm):00381                 FCB     00
C38B                  (    cubix_ide.asm):00382         MESSAGE4
C38B 205050494445303A (    cubix_ide.asm):00383                 FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
C39B 00               (    cubix_ide.asm):00384                 FCB     00
C39C                  (    cubix_ide.asm):00385         MESSAGE5
C39C 205050494445313A (    cubix_ide.asm):00386                 FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
C3AC 00               (    cubix_ide.asm):00387                 FCB     00
C3AD                  (    cubix_ide.asm):00388         MESSAGE6
C3AD 3078             (    cubix_ide.asm):00389                 FCC     "0x"
C3AF 00               (    cubix_ide.asm):00390                 FCB     00
                      (    cubix_ide.asm):00391         
                      (    cubix_ide.asm):00392         
                      (    cubix_ide.asm):00393         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (    cubix_ide.asm):00394         ;*
                      (    cubix_ide.asm):00395         ;*
                      (    cubix_ide.asm):00396         ;        SETUP   LBA DATA
                      (    cubix_ide.asm):00397         ;*____________________________________________________________________________________________________
C3B0                  (    cubix_ide.asm):00398         IDE_SETUP_LBA:
C3B0 3406             (    cubix_ide.asm):00399                 PSHS    D
C3B2 F60104           (    cubix_ide.asm):00400                 LDB     CURRENTDEVICE
C3B5 C401             (    cubix_ide.asm):00401                 ANDB    #$01                              ; only want drive cfg
C3B7 58               (    cubix_ide.asm):00402                 ASLB                                      ; SHIFT 4
C3B8 58               (    cubix_ide.asm):00403                 ASLB                                      ;
C3B9 58               (    cubix_ide.asm):00404                 ASLB                                      ;
C3BA 58               (    cubix_ide.asm):00405                 ASLB                                      ;
C3BB CAE0             (    cubix_ide.asm):00406                 ORB     #$E0                              ; E0=MST  F0=SLV
C3BD F7130C           (    cubix_ide.asm):00407                 STB     XTIDE_DEVICE
                      (    cubix_ide.asm):00408         
C3C0 F60105           (    cubix_ide.asm):00409                 LDB     CURRENTSLICE
C3C3 F7130A           (    cubix_ide.asm):00410                 STB     XTIDE_LBAHI
                      (    cubix_ide.asm):00411         
C3C6 F60106           (    cubix_ide.asm):00412                 LDB     CURRENTCYL                        ;
C3C9 5C               (    cubix_ide.asm):00413                 INCB                                      ; CYL 0 reserved for boot image
C3CA F71308           (    cubix_ide.asm):00414                 STB     XTIDE_LBAMID
                      (    cubix_ide.asm):00415         
C3CD F60107           (    cubix_ide.asm):00416                 LDB     CURRENTSEC                        ;
C3D0 F71306           (    cubix_ide.asm):00417                 STB     XTIDE_LBALOW
                      (    cubix_ide.asm):00418         
C3D3 C601             (    cubix_ide.asm):00419                 LDB     #$01
C3D5 F71304           (    cubix_ide.asm):00420                 STB     XTIDE_SEC_CNT
                      (    cubix_ide.asm):00421         
C3D8 3586             (    cubix_ide.asm):00422                 PULS    D,PC
                      (    cubix_ide.asm):00423                 ENDIF
                      (     cubixdrv.asm):00111                 INCLUDE cubix_multio.asm
                      ( cubix_multio.asm):00001         ;__MULTI IO DRIVERS______________________________________________________________________________________________________________
                      ( cubix_multio.asm):00002         ;
                      ( cubix_multio.asm):00003         ;       CUBIX ISA MULTI IO drivers for 6809PC
                      ( cubix_multio.asm):00004         ;
                      ( cubix_multio.asm):00005         ;       Entry points:
                      ( cubix_multio.asm):00006         ;               MULTIOINIT  - JSR ed during OS init
                      ( cubix_multio.asm):00007         ;               KBD_GETKEY  - read a character from the ps/2 keyboard ('A' POINTS TO BYTE)
                      ( cubix_multio.asm):00008         ;               LPT_OUT     - send a character to the printer
                      ( cubix_multio.asm):00009         ;________________________________________________________________________________________________________________________________
                      ( cubix_multio.asm):00010         ;
                      ( cubix_multio.asm):00011         ;*
                      ( cubix_multio.asm):00012         ;*        HARDWARE I/O ADDRESSES
                      ( cubix_multio.asm):00013         ;*
                      ( cubix_multio.asm):00014         ;
     13E0             ( cubix_multio.asm):00015         MULTIO_BASE     EQU CUBIX_IO_BASE+$3E0
     13FE             ( cubix_multio.asm):00016         KBD_DAT         EQU MULTIO_BASE+$1E               ;
     13FF             ( cubix_multio.asm):00017         KBD_ST          EQU MULTIO_BASE+$1F               ;
     13FF             ( cubix_multio.asm):00018         KBD_CMD         EQU MULTIO_BASE+$1F               ;
                      ( cubix_multio.asm):00019         
     13F0             ( cubix_multio.asm):00020         LPT_0           EQU MULTIO_BASE+$10               ;
     13F1             ( cubix_multio.asm):00021         LPT_1           EQU MULTIO_BASE+$11               ;
     13F2             ( cubix_multio.asm):00022         LPT_2           EQU MULTIO_BASE+$12               ;
                      ( cubix_multio.asm):00023         
                      ( cubix_multio.asm):00024         
                      ( cubix_multio.asm):00025         
                      ( cubix_multio.asm):00026         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00027         ;
                      ( cubix_multio.asm):00028         ; STATUS BITS (FOR KBD_STATUS)
                      ( cubix_multio.asm):00029         ;
     0001             ( cubix_multio.asm):00030         KBD_EXT         EQU $01                           ; BIT 0, EXTENDED SCANCODE ACTIVE
     0002             ( cubix_multio.asm):00031         KBD_BREAK       EQU $02                           ; BIT 1, THIS IS A KEY UP (BREAK) EVENT
     0080             ( cubix_multio.asm):00032         KBD_KEYRDY      EQU $80                           ; BIT 7, INDICATES A DECODED KEYCODE IS READY
                      ( cubix_multio.asm):00033         ;
                      ( cubix_multio.asm):00034         ; STATE BITS (FOR KBD_STATE, KBD_LSTATE, KBD_RSTATE)
                      ( cubix_multio.asm):00035         ;
     0001             ( cubix_multio.asm):00036         KBD_SHIFT       EQU $01                           ; BIT 0, SHIFT ACTIVE (PRESSED)
     0002             ( cubix_multio.asm):00037         KBD_CTRL        EQU $02                           ; BIT 1, CONTROL ACTIVE (PRESSED)
     0004             ( cubix_multio.asm):00038         KBD_ALT         EQU $04                           ; BIT 2, ALT ACTIVE (PRESSED)
     0008             ( cubix_multio.asm):00039         KBD_WIN         EQU $08                           ; BIT 3, WIN ACTIVE (PRESSED)
     0010             ( cubix_multio.asm):00040         KBD_SCRLCK      EQU $10                           ; BIT 4, CAPS LOCK ACTIVE (TOGGLED ON)
     0020             ( cubix_multio.asm):00041         KBD_NUMLCK      EQU $20                           ; BIT 5, NUM LOCK ACTIVE (TOGGLED ON)
     0040             ( cubix_multio.asm):00042         KBD_CAPSLCK     EQU $40                           ; BIT 6, SCROLL LOCK ACTIVE (TOGGLED ON)
     0080             ( cubix_multio.asm):00043         KBD_NUMPAD      EQU $80                           ; BIT 7, NUM PAD KEY (KEY PRESSED IS ON NUM PAD)
                      ( cubix_multio.asm):00044         ;
     0040             ( cubix_multio.asm):00045         KBD_DEFRPT      EQU $40                           ; DEFAULT REPEAT RATE (.5 SEC DELAY, 30CPS)
     0070             ( cubix_multio.asm):00046         KBD_DEFSTATE    EQU KBD_NUMLCK|KBD_CAPSLCK|KBD_SCRLCK ; DEFAULT STATE (NUM LOCK ON)
                      ( cubix_multio.asm):00047         
     30FF             ( cubix_multio.asm):00048         KBD_WAITTO      EQU $30FF                         ; DEFAULT TIMEOUT
     30FF             ( cubix_multio.asm):00049         LPT_WAITTO      EQU $30FF                         ; DEFAULT TIMEOUT
                      ( cubix_multio.asm):00050         ;
                      ( cubix_multio.asm):00051         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00052         ; DATA
                      ( cubix_multio.asm):00053         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00054         ;
C3DA                  ( cubix_multio.asm):00055         KBD_SCANCODE
C3DA 00               ( cubix_multio.asm):00056                 FCB     0                                 ; RAW SCANCODE
C3DB                  ( cubix_multio.asm):00057         KBD_KEYCODE
C3DB 00               ( cubix_multio.asm):00058                 FCB     0                                 ; RESULTANT KEYCODE AFTER DECODING
C3DC                  ( cubix_multio.asm):00059         KBD_STATE
C3DC 70               ( cubix_multio.asm):00060                 FCB     KBD_DEFSTATE                      ; STATE BITS (SEE ABOVE)
C3DD                  ( cubix_multio.asm):00061         KBD_LSTATE
C3DD 00               ( cubix_multio.asm):00062                 FCB     0                                 ; STATE BITS FOR "LEFT" KEYS
C3DE                  ( cubix_multio.asm):00063         KBD_RSTATE
C3DE 00               ( cubix_multio.asm):00064                 FCB     0                                 ; STATE BITS FOR "RIGHT" KEYS
C3DF                  ( cubix_multio.asm):00065         KBD_STATUS
C3DF 00               ( cubix_multio.asm):00066                 FCB     0                                 ; CURRENT STATUS BITS (SEE ABOVE)
C3E0                  ( cubix_multio.asm):00067         KBD_REPEAT
C3E0 40               ( cubix_multio.asm):00068                 FCB     KBD_DEFRPT                        ; CURRENT REPEAT RATE
C3E1                  ( cubix_multio.asm):00069         KBD_IDLE
C3E1 00               ( cubix_multio.asm):00070                 FCB     0                                 ; IDLE COUNT
C3E2                  ( cubix_multio.asm):00071         KBD_TEMP
C3E2 0000             ( cubix_multio.asm):00072                 FCB     0,0                               ; WORKING STORAGE
                      ( cubix_multio.asm):00073         
                      ( cubix_multio.asm):00074         ;
                      ( cubix_multio.asm):00075         ;  IBM PC STANDARD PARALLEL PORT (SPP):
                      ( cubix_multio.asm):00076         ;
                      ( cubix_multio.asm):00077         ;  PORT 0 (OUTPUT):
                      ( cubix_multio.asm):00078         ;
                      ( cubix_multio.asm):00079         ;       D7      D6      D5      D4      D3      D2      D1      D0
                      ( cubix_multio.asm):00080         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00081         ;     | PD7   | PD6   | PD5   | PD4   | PD3   | PD2   | PD1   | PD0   |
                      ( cubix_multio.asm):00082         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00083         ;
                      ( cubix_multio.asm):00084         ;  PORT 1 (INPUT):
                      ( cubix_multio.asm):00085         ;
                      ( cubix_multio.asm):00086         ;       D7      D6      D5      D4      D3      D2      D1      D0
                      ( cubix_multio.asm):00087         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00088         ;     | /BUSY | /ACK  | POUT  | SEL   | /ERR  | 0     | 0     | 0     |
                      ( cubix_multio.asm):00089         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00090         ;
                      ( cubix_multio.asm):00091         ;  PORT 2 (OUTPUT):
                      ( cubix_multio.asm):00092         ;
                      ( cubix_multio.asm):00093         ;       D7      D6      D5      D4      D3      D2      D1      D0
                      ( cubix_multio.asm):00094         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00095         ;     | STAT1 | STAT0 | ENBL  | PINT  | SEL   | RES   | LF    | STB   |
                      ( cubix_multio.asm):00096         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00097         ;
                      ( cubix_multio.asm):00098         ;
                      ( cubix_multio.asm):00099         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00100         ; MULTI IO INITIALIZATION
                      ( cubix_multio.asm):00101         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00102         ;
C3E4                  ( cubix_multio.asm):00103         MULTIOINIT:
                      ( cubix_multio.asm):00104         ;
C3E4 BDC91F           ( cubix_multio.asm):00105                 JSR     LFCR                              ; AND CRLF
C3E7 8EC74B           ( cubix_multio.asm):00106                 LDX     #MIOMESSAGE1
C3EA BDC933           ( cubix_multio.asm):00107                 JSR     WRSTR                             ; DO PROMPT
C3ED BDC91F           ( cubix_multio.asm):00108                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00109         ; KEYBOARD INITIALIZATION
C3F0 8EC377           ( cubix_multio.asm):00110                 LDX     #MESSAGE2
C3F3 BDC933           ( cubix_multio.asm):00111                 JSR     WRSTR                             ; DO PROMPT
C3F6 CC13E0           ( cubix_multio.asm):00112                 LDD     #MULTIO_BASE                      ; GET BASE PORT
C3F9 BDC93F           ( cubix_multio.asm):00113                 JSR     WRHEXW                            ; PRINT BASE PORT
C3FC BDC91F           ( cubix_multio.asm):00114                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00115         ;
C3FF BDC425           ( cubix_multio.asm):00116                 JSR     KBD_PROBE                         ; DETECT A KEYBOARD, ABORT IF NOT FOUND
C402 251E             ( cubix_multio.asm):00117                 BCS     >
                      ( cubix_multio.asm):00118         ; LPT INITIALIZATION ROUTINE
C404 8EC787           ( cubix_multio.asm):00119                 LDX     #MIOMESSAGE5
C407 BDC933           ( cubix_multio.asm):00120                 JSR     WRSTR                             ; DO PROMPT
C40A BDC91F           ( cubix_multio.asm):00121                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00122         
C40D 8600             ( cubix_multio.asm):00123                 LDA     #$00
C40F B713F0           ( cubix_multio.asm):00124                 STA     LPT_0                   ; PORT 0 (DATA)
C412 8608             ( cubix_multio.asm):00125                 LDA     #%00001000              ; SELECT AND ASSERT RESET, LEDS OFF
C414 B713F2           ( cubix_multio.asm):00126                 STA     LPT_2                   ; PORT 2 (STATUS)
C417 BDC73C           ( cubix_multio.asm):00127                 JSR     LDELAY                  ; HALF SECOND DELAY
C41A 860C             ( cubix_multio.asm):00128                 LDA     #%00001100              ; SELECT AND DEASSERT RESET, LEDS OFF
C41C B713F2           ( cubix_multio.asm):00129                 STA     LPT_2                   ; PORT 2 (STATUS)
C41F 1CFE             ( cubix_multio.asm):00130                 CLC                             ; SIGNAL SUCCESS
C421 39               ( cubix_multio.asm):00131                 RTS                             ; RETURN
                      ( cubix_multio.asm):00132         !
C422 1A01             ( cubix_multio.asm):00133                 SEC
C424 39               ( cubix_multio.asm):00134                 RTS                                       ; DONE
                      ( cubix_multio.asm):00135         
                      ( cubix_multio.asm):00136         
C425                  ( cubix_multio.asm):00137         KBD_PROBE:
                      ( cubix_multio.asm):00138         ;
C425 86AA             ( cubix_multio.asm):00139                 LDA     #$AA                              ; CONTROLLER SELF TEST
C427 BDC45F           ( cubix_multio.asm):00140                 JSR     KBD_PUTCMD                        ; SEND IT
C42A BDC493           ( cubix_multio.asm):00141                 JSR     KBD_GETDATA                       ; CONTROLLER SHOULD RESPOND WITH $55 (ACK)
                      ( cubix_multio.asm):00142         ;
C42D 8155             ( cubix_multio.asm):00143                 CMPA    #$55                              ; IS IT THERE?
C42F 270C             ( cubix_multio.asm):00144                 BEQ     >                                 ; IF SO, CONTINUE
C431 8EC759           ( cubix_multio.asm):00145                 LDX     #MIOMESSAGE3                      ; PRINT NOT PRESENT ERROR
C434 BDC933           ( cubix_multio.asm):00146                 JSR     WRSTR
C437 BDC91F           ( cubix_multio.asm):00147                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00148         ;
C43A 1A01             ( cubix_multio.asm):00149                 SEC                                       ; SET ERROR
C43C 39               ( cubix_multio.asm):00150                 RTS                                       ; BAIL OUT
                      ( cubix_multio.asm):00151         ;
                      ( cubix_multio.asm):00152         !
C43D 8EC773           ( cubix_multio.asm):00153                 LDX     #MIOMESSAGE4                      ; PRINT KB FOUND
C440 BDC933           ( cubix_multio.asm):00154                 JSR     WRSTR
C443 BDC91F           ( cubix_multio.asm):00155                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00156         
                      ( cubix_multio.asm):00157         ;
C446 8660             ( cubix_multio.asm):00158                 LDA     #$60                              ; SET COMMAND REGISTER
C448 BDC45F           ( cubix_multio.asm):00159                 JSR     KBD_PUTCMD                        ; SEND IT
C44B 8620             ( cubix_multio.asm):00160                 LDA     #$20                              ; XLAT DISABLED, MOUSE DISABLED, NO INTS
C44D BDC479           ( cubix_multio.asm):00161                 JSR     KBD_PUTDATA                       ; SEND IT
                      ( cubix_multio.asm):00162         
C450 BDC493           ( cubix_multio.asm):00163                 JSR     KBD_GETDATA                       ; GOBBLE UP $AA FROM POWER UP, AS NEEDED
                      ( cubix_multio.asm):00164         
C453 BDC4BB           ( cubix_multio.asm):00165                 JSR     KBD_RESET                         ; RESET THE KEYBOARD
C456 BDC4D9           ( cubix_multio.asm):00166                 JSR     KBD_SETLEDS                       ; UPDATE LEDS BASED ON CURRENT TOGGLE STATE BITS
C459 BDC506           ( cubix_multio.asm):00167                 JSR     KBD_SETRPT                        ; UPDATE REPEAT RATE BASED ON CURRENT SETTING
                      ( cubix_multio.asm):00168         
C45C 1CFE             ( cubix_multio.asm):00169                 CLC                                       ; SIGNAL SUCCESS
C45E 39               ( cubix_multio.asm):00170                 RTS
                      ( cubix_multio.asm):00171         
                      ( cubix_multio.asm):00172         
                      ( cubix_multio.asm):00173         ;
                      ( cubix_multio.asm):00174         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00175         ; HARDWARE INTERFACE
                      ( cubix_multio.asm):00176         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00177         ;
                      ( cubix_multio.asm):00178         ;__________________________________________________________________________________________________
C45F                  ( cubix_multio.asm):00179         KBD_PUTCMD:
                      ( cubix_multio.asm):00180         ; PUT A CMD BYTE FROM A TO THE KEYBOARD INTERFACE WITH TIMEOUT
                      ( cubix_multio.asm):00181         ;
C45F 8E30FF           ( cubix_multio.asm):00182                 LDX     #KBD_WAITTO                       ; SETUP TO LOOP
C462                  ( cubix_multio.asm):00183         KBD_PUTCMD0:
C462 F613FF           ( cubix_multio.asm):00184                 LDB     KBD_ST                            ; STATUS PORT
C465 C402             ( cubix_multio.asm):00185                 ANDB    #$02                              ; ISOLATE EMPTY BIT
C467 270A             ( cubix_multio.asm):00186                 BEQ     KBD_PUTCMD1                       ; EMPTY, GO TO WRITE
C469 BDC72B           ( cubix_multio.asm):00187                 JSR     DELAY                             ; WAIT A BIT
C46C 301F             ( cubix_multio.asm):00188                 DEX
C46E 26F2             ( cubix_multio.asm):00189                 BNE     KBD_PUTCMD0                       ; LOOP UNTIL COUNTER EXHAUSTED
                      ( cubix_multio.asm):00190         
C470 1A01             ( cubix_multio.asm):00191                 SEC                                       ; TIMED OUT
C472 39               ( cubix_multio.asm):00192                 RTS
C473                  ( cubix_multio.asm):00193         KBD_PUTCMD1:
C473 B713FF           ( cubix_multio.asm):00194                 STA     KBD_CMD                           ; WRITE TO COMMAND PORT
                      ( cubix_multio.asm):00195         
C476 1CFE             ( cubix_multio.asm):00196                 CLC                                       ; SIGNAL SUCCESS
C478 39               ( cubix_multio.asm):00197                 RTS
                      ( cubix_multio.asm):00198         ;
                      ( cubix_multio.asm):00199         ;__________________________________________________________________________________________________
C479                  ( cubix_multio.asm):00200         KBD_PUTDATA:
                      ( cubix_multio.asm):00201         ;
                      ( cubix_multio.asm):00202         ; PUT A DATA BYTE FROM A TO THE KEYBOARD INTERFACE WITH TIMEOUT
                      ( cubix_multio.asm):00203         ;
C479 8E30FF           ( cubix_multio.asm):00204                 LDX     #KBD_WAITTO                       ; SETUP TO LOOP
C47C                  ( cubix_multio.asm):00205         KBD_PUTDATA0:
C47C F613FF           ( cubix_multio.asm):00206                 LDB     KBD_ST                            ; STATUS PORT
C47F C402             ( cubix_multio.asm):00207                 ANDB    #$02                              ; ISOLATE OUTPUT EMPTY BIT
C481 270A             ( cubix_multio.asm):00208                 BEQ     KBD_PUTDATA1                      ; EMPTY, GO TO WRITE
C483 BDC72B           ( cubix_multio.asm):00209                 JSR     DELAY                             ; WAIT A BIT
C486 301F             ( cubix_multio.asm):00210                 DEX
C488 26F2             ( cubix_multio.asm):00211                 BNE     KBD_PUTDATA0                      ; LOOP UNTIL COUNTER EXHAUSTED
                      ( cubix_multio.asm):00212         
C48A 1A01             ( cubix_multio.asm):00213                 SEC                                       ; TIMED OUT
C48C 39               ( cubix_multio.asm):00214                 RTS
C48D                  ( cubix_multio.asm):00215         KBD_PUTDATA1:
C48D B713FE           ( cubix_multio.asm):00216                 STA     KBD_DAT                           ; WRITE TO DATA PORT
                      ( cubix_multio.asm):00217         
C490 1CFE             ( cubix_multio.asm):00218                 CLC                                       ; SIGNAL SUCCESS
C492 39               ( cubix_multio.asm):00219                 RTS
                      ( cubix_multio.asm):00220         ;
                      ( cubix_multio.asm):00221         ;__________________________________________________________________________________________________
C493                  ( cubix_multio.asm):00222         KBD_GETDATA:
                      ( cubix_multio.asm):00223         ;
                      ( cubix_multio.asm):00224         ; GET A RAW DATA BYTE FROM KEYBOARD INTERFACE INTO A WITH TIMEOUT
                      ( cubix_multio.asm):00225         ;
C493 8E30FF           ( cubix_multio.asm):00226                 LDX     #KBD_WAITTO                       ; SETUP TO LOOP
C496                  ( cubix_multio.asm):00227         KBD_GETDATA0:
C496 B613FF           ( cubix_multio.asm):00228                 LDA     KBD_ST                            ; GET STATUS PORT
C499 8401             ( cubix_multio.asm):00229                 ANDA    #$01                              ; ISOLATE INPUT PENDING BIT
C49B 260C             ( cubix_multio.asm):00230                 BNE     KBD_GETDATA1                      ; READY, GET DATA
C49D BDC72B           ( cubix_multio.asm):00231                 JSR     DELAY                             ; WAIT A BIT
C4A0 301F             ( cubix_multio.asm):00232                 DEX
C4A2 26F2             ( cubix_multio.asm):00233                 BNE     KBD_GETDATA0                      ; LOOP UNTIL COUNTER EXHAUSTED
C4A4 8600             ( cubix_multio.asm):00234                 LDA     #$00
                      ( cubix_multio.asm):00235         
C4A6 1A01             ( cubix_multio.asm):00236                 SEC                                       ; NO DATA, RETURN ZERO
C4A8 39               ( cubix_multio.asm):00237                 RTS
C4A9                  ( cubix_multio.asm):00238         KBD_GETDATA1:
                      ( cubix_multio.asm):00239         
C4A9 B613FE           ( cubix_multio.asm):00240                 LDA     KBD_DAT                           ; GET DATA PORT
C4AC 1CFE             ( cubix_multio.asm):00241                 CLC                                       ; SET FLAGS
C4AE 39               ( cubix_multio.asm):00242                 RTS
                      ( cubix_multio.asm):00243         ;
                      ( cubix_multio.asm):00244         ;__________________________________________________________________________________________________
C4AF                  ( cubix_multio.asm):00245         KBD_GETDATAX:
                      ( cubix_multio.asm):00246         ;
                      ( cubix_multio.asm):00247         ; GET A RAW DATA BYTE FROM KEYBOARD INTERFACE INTO A WITH NOTIMEOUT
                      ( cubix_multio.asm):00248         ;
C4AF B613FF           ( cubix_multio.asm):00249                 LDA     KBD_ST                            ; STATUS PORT
C4B2 8401             ( cubix_multio.asm):00250                 ANDA    #$01                              ; ISOLATE INPUT PENDING BIT
C4B4 26F3             ( cubix_multio.asm):00251                 BNE     KBD_GETDATA1                      ; BYTE PENDING, GO GET IT
C4B6 8600             ( cubix_multio.asm):00252                 LDA     #$00
                      ( cubix_multio.asm):00253         
C4B8 1A01             ( cubix_multio.asm):00254                 SEC                                       ; NO DATA, RETURN ZERO
C4BA 39               ( cubix_multio.asm):00255                 RTS
                      ( cubix_multio.asm):00256         ;
                      ( cubix_multio.asm):00257         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00258         ; RESET KEYBOARD
                      ( cubix_multio.asm):00259         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00260         ;
C4BB                  ( cubix_multio.asm):00261         KBD_RESET:
C4BB 86FF             ( cubix_multio.asm):00262                 LDA     #$FF                              ; RESET COMMAND
C4BD BDC479           ( cubix_multio.asm):00263                 JSR     KBD_PUTDATA                       ; SEND IT
C4C0 BDC493           ( cubix_multio.asm):00264                 JSR     KBD_GETDATA                       ; GET THE ACK
C4C3 8EF100           ( cubix_multio.asm):00265                 LDX     #$F100                            ; SETUP LOOP COUNTER
C4C6                  ( cubix_multio.asm):00266         KBD_RESET0:
C4C6 3410             ( cubix_multio.asm):00267                 PSHS    X                                 ; PRESERVE COUNTER
C4C8 BDC493           ( cubix_multio.asm):00268                 JSR     KBD_GETDATA                       ; TRY TO GET THE RESPONSE
C4CB 3510             ( cubix_multio.asm):00269                 PULS    X                                 ; RECOVER COUNTER
C4CD 2607             ( cubix_multio.asm):00270                 BNE     KBD_RESET1                        ; GOT A BYTE?  IF SO, GET OUT OF LOOP
C4CF 301F             ( cubix_multio.asm):00271                 DEX
C4D1 26F3             ( cubix_multio.asm):00272                 BNE     KBD_RESET0                        ; LOOP TILL COUNTER EXHAUSTED
                      ( cubix_multio.asm):00273         
C4D3 1A01             ( cubix_multio.asm):00274                 SEC                                       ; SIGNAL FAILURE
C4D5 39               ( cubix_multio.asm):00275                 RTS                                       ; DONE
C4D6                  ( cubix_multio.asm):00276         KBD_RESET1:
                      ( cubix_multio.asm):00277         
C4D6 1CFE             ( cubix_multio.asm):00278                 CLC                                       ; SIGNAL SUCCESS (RESPONSE IS IGNORED...)
C4D8 39               ( cubix_multio.asm):00279                 RTS                                       ; DONE
                      ( cubix_multio.asm):00280         ;
                      ( cubix_multio.asm):00281         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00282         ; UPDATE KEYBOARD LEDS BASED ON CURRENT TOGGLE FLAGS
                      ( cubix_multio.asm):00283         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00284         ;
C4D9                  ( cubix_multio.asm):00285         KBD_SETLEDS:
C4D9 86ED             ( cubix_multio.asm):00286                 LDA     #$ED                              ; SET/RESET LED'S COMMAND
C4DB BDC479           ( cubix_multio.asm):00287                 JSR     KBD_PUTDATA                       ; SEND THE COMMAND
C4DE BDC493           ( cubix_multio.asm):00288                 JSR     KBD_GETDATA                       ; READ THE RESPONSE
C4E1 81FA             ( cubix_multio.asm):00289                 CMPA    #$FA                              ; MAKE SURE WE GET ACK
C4E3 2703             ( cubix_multio.asm):00290                 BEQ     >
                      ( cubix_multio.asm):00291         
C4E5 1A01             ( cubix_multio.asm):00292                 SEC
C4E7 39               ( cubix_multio.asm):00293                 RTS                                       ; ABORT IF NO ACK
                      ( cubix_multio.asm):00294         !
C4E8 B6C3DC           ( cubix_multio.asm):00295                 LDA     KBD_STATE                         ; LOAD THE STATE BYTE
C4EB 46               ( cubix_multio.asm):00296                 RORA                                      ; ROTATE TOGGLE KEY BITS AS NEEDED
C4EC 46               ( cubix_multio.asm):00297                 RORA
C4ED 46               ( cubix_multio.asm):00298                 RORA
C4EE 46               ( cubix_multio.asm):00299                 RORA
C4EF 8407             ( cubix_multio.asm):00300                 ANDA    #$07                              ; CLEAR THE IRRELEVANT BITS
C4F1 BDC479           ( cubix_multio.asm):00301                 JSR     KBD_PUTDATA                       ; SEND THE LED DATA
C4F4 BDC493           ( cubix_multio.asm):00302                 JSR     KBD_GETDATA                       ; READ THE ACK
C4F7 81FA             ( cubix_multio.asm):00303                 CMPA    #$FA                              ; MAKE SURE WE GET ACK
C4F9 2703             ( cubix_multio.asm):00304                 BEQ     >
                      ( cubix_multio.asm):00305         
C4FB 1A01             ( cubix_multio.asm):00306                 SEC
C4FD 39               ( cubix_multio.asm):00307                 RTS                                       ; ABORT IF NO ACK
                      ( cubix_multio.asm):00308         !
C4FE 8600             ( cubix_multio.asm):00309                 LDA     #$00                              ; A=0
C500 B7C3DF           ( cubix_multio.asm):00310                 STA     KBD_STATUS                        ; CLEAR STATUS
                      ( cubix_multio.asm):00311         
C503 1CFE             ( cubix_multio.asm):00312                 CLC
C505 39               ( cubix_multio.asm):00313                 RTS
                      ( cubix_multio.asm):00314         ;
                      ( cubix_multio.asm):00315         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00316         ; UPDATE KEYBOARD REPEAT RATE BASED ON CURRENT SETTING
                      ( cubix_multio.asm):00317         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00318         ;
C506                  ( cubix_multio.asm):00319         KBD_SETRPT:
C506 86F3             ( cubix_multio.asm):00320                 LDA     #$F3                              ; COMMAND = SET TYPEMATIC RATE/DELAY
C508 BDC479           ( cubix_multio.asm):00321                 JSR     KBD_PUTDATA                       ; SEND IT
C50B BDC493           ( cubix_multio.asm):00322                 JSR     KBD_GETDATA                       ; GET THE ACK
C50E 81FA             ( cubix_multio.asm):00323                 CMPA    #$FA                              ; MAKE SURE WE GET ACK
C510 2703             ( cubix_multio.asm):00324                 BEQ     >
                      ( cubix_multio.asm):00325         
C512 1A01             ( cubix_multio.asm):00326                 SEC
C514 39               ( cubix_multio.asm):00327                 RTS                                       ; ABORT IF NO ACK
                      ( cubix_multio.asm):00328         !
C515 B6C3E0           ( cubix_multio.asm):00329                 LDA     KBD_REPEAT                        ; LOAD THE CURRENT RATE/DELAY BYTE
C518 BDC479           ( cubix_multio.asm):00330                 JSR     KBD_PUTDATA                       ; SEND IT
C51B BDC493           ( cubix_multio.asm):00331                 JSR     KBD_GETDATA                       ; GET THE ACK
C51E 81FA             ( cubix_multio.asm):00332                 CMPA    #$FA                              ; MAKE SURE WE GET ACK
C520 2703             ( cubix_multio.asm):00333                 BEQ     >
                      ( cubix_multio.asm):00334         
C522 1A01             ( cubix_multio.asm):00335                 SEC
C524 39               ( cubix_multio.asm):00336                 RTS                                       ; ABORT IF NO ACK
                      ( cubix_multio.asm):00337         !
C525 1CFE             ( cubix_multio.asm):00338                 CLC
C527 39               ( cubix_multio.asm):00339                 RTS
                      ( cubix_multio.asm):00340         
                      ( cubix_multio.asm):00341         ;__GETKEY__________________________________________________________________________________________
                      ( cubix_multio.asm):00342         ; Get char from Keyboard, return in A
                      ( cubix_multio.asm):00343         ;__________________________________________________________________________________________________
C528                  ( cubix_multio.asm):00344         KBD_GETKEY:
C528 BDC546           ( cubix_multio.asm):00345                 JSR     KBD_DECODE
C52B 2408             ( cubix_multio.asm):00346                 BCC     >
C52D 86FF             ( cubix_multio.asm):00347                 LDA     #$FF                              ;
C52F B70109           ( cubix_multio.asm):00348                 STA     >PAGER_D                          ; SAVE 'D'
C532 1A01             ( cubix_multio.asm):00349                 SEC
C534 39               ( cubix_multio.asm):00350                 RTS
                      ( cubix_multio.asm):00351         !
C535 B6C3DB           ( cubix_multio.asm):00352                 LDA     KBD_KEYCODE
C538 B70109           ( cubix_multio.asm):00353                 STA     >PAGER_D                          ; SAVE 'D'
C53B B6C3DF           ( cubix_multio.asm):00354                 LDA     KBD_STATUS
C53E 847F             ( cubix_multio.asm):00355                 ANDA    #$7F
C540 B7C3DF           ( cubix_multio.asm):00356                 STA     KBD_STATUS
C543 1CFE             ( cubix_multio.asm):00357                 CLC
C545 39               ( cubix_multio.asm):00358                 RTS
                      ( cubix_multio.asm):00359         
                      ( cubix_multio.asm):00360         ;
                      ( cubix_multio.asm):00361         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00362         ; DECODING ENGINE
                      ( cubix_multio.asm):00363         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00364         ;
                      ( cubix_multio.asm):00365         ;__________________________________________________________________________________________________
C546                  ( cubix_multio.asm):00366         KBD_DECODE:
                      ( cubix_multio.asm):00367         ;
                      ( cubix_multio.asm):00368         ;  RUN THE DECODING ENGINE UNTIL EITHER: 1) NO MORE SCANCODES ARE AVAILABLE
                      ( cubix_multio.asm):00369         ;  FROM THE KEYBOARD, OR 2) A DECODED KEY VALUE IS AVAILABLE
                      ( cubix_multio.asm):00370         ;
                      ( cubix_multio.asm):00371         ;  RETURNS A=0 AND Z SET IF NO KEYCODE READY, OTHERWISE A DECODED KEY VALUE IS AVAILABLE.
                      ( cubix_multio.asm):00372         ;  THE DECODED KEY VALUE AND KEY STATE IS STORED IN KBD_KEYCODE AND KBD_STATE.
                      ( cubix_multio.asm):00373         ;
                      ( cubix_multio.asm):00374         ;  KBD_STATUS IS NOT CLEARED AT START. IT IS THE JSR ER'S RESPONSIBILITY
                      ( cubix_multio.asm):00375         ;  TO CLEAR KBD_STATUS WHEN IT HAS RETRIEVED A PENDING VALUE.  IF DECODE IS JSR ED
                      ( cubix_multio.asm):00376         ;  WITH A KEYCODE STILL PENDING, IT WILL JUST RETURN WITHOUT DOING ANYTHING.
                      ( cubix_multio.asm):00377         ;
                      ( cubix_multio.asm):00378         ; Step 0: Check keycode buffer
                      ( cubix_multio.asm):00379         ;   if status[keyrdy]
                      ( cubix_multio.asm):00380         ;     return
                      ( cubix_multio.asm):00381         ;
                      ( cubix_multio.asm):00382         ; Step 1: Get scancode
                      ( cubix_multio.asm):00383         ;   if no scancode ready
                      ( cubix_multio.asm):00384         ;     return
                      ( cubix_multio.asm):00385         ;   read scancode
                      ( cubix_multio.asm):00386         ;
                      ( cubix_multio.asm):00387         ; Step 2: Detect and handle special keycodes
                      ( cubix_multio.asm):00388         ;   if scancode == $AA
                      ( cubix_multio.asm):00389         ;     *** handle hot insert somehow ***
                      ( cubix_multio.asm):00390         ;
                      ( cubix_multio.asm):00391         ; Step 3: Detect and handle scancode prefixes
                      ( cubix_multio.asm):00392         ;   if scancode == $E0
                      ( cubix_multio.asm):00393         ;     set status[extended]
                      ( cubix_multio.asm):00394         ;     goto Step 1
                      ( cubix_multio.asm):00395         ;
                      ( cubix_multio.asm):00396         ;   if scancode == $E1
                      ( cubix_multio.asm):00397         ;     *** handle pause key somehow ***
                      ( cubix_multio.asm):00398         ;
                      ( cubix_multio.asm):00399         ; Step 4: Detect and flag break event
                      ( cubix_multio.asm):00400         ;   *** scancode set #1 variation ***
                      ( cubix_multio.asm):00401         ;     set status[break] = high bit of scancode
                      ( cubix_multio.asm):00402         ;     clear high order bit
                      ( cubix_multio.asm):00403         ;     continue to Step 5
                      ( cubix_multio.asm):00404         ;   *** scancode set #2 variation ***
                      ( cubix_multio.asm):00405         ;     if scancode == $F0
                      ( cubix_multio.asm):00406         ;       set status[break]
                      ( cubix_multio.asm):00407         ;       goto Step 1
                      ( cubix_multio.asm):00408         ;
                      ( cubix_multio.asm):00409         ; Step 5: Map scancode to keycode
                      ( cubix_multio.asm):00410         ;   if status[extended]
                      ( cubix_multio.asm):00411         ;     apply extended-map[scancode] -> keycode
                      ( cubix_multio.asm):00412         ;   else if state[shifted]
                      ( cubix_multio.asm):00413         ;     apply shifted-map[scancode] -> keycode
                      ( cubix_multio.asm):00414         ;   else
                      ( cubix_multio.asm):00415         ;     apply normal-map[scancode] -> keycode
                      ( cubix_multio.asm):00416         ;
                      ( cubix_multio.asm):00417         ; Step 6: Handle modifier keys
                      ( cubix_multio.asm):00418         ;   if keycode is modifier (shift, ctrl, alt, win)
                      ( cubix_multio.asm):00419         ;     set (l/r)state[<modifier>] = not status[break]
                      ( cubix_multio.asm):00420         ;     clear modifier bits in state
                      ( cubix_multio.asm):00421         ;     set state = (lstate OR rstate OR state)
                      ( cubix_multio.asm):00422         ;     goto New Key
                      ( cubix_multio.asm):00423         ;
                      ( cubix_multio.asm):00424         ; Step 7: Complete procesing of key break events
                      ( cubix_multio.asm):00425         ;   if status[break]
                      ( cubix_multio.asm):00426         ;     goto New Key
                      ( cubix_multio.asm):00427         ;
                      ( cubix_multio.asm):00428         ; Step 8: Handle toggle keys
                      ( cubix_multio.asm):00429         ;   if keycode is toggle (capslock, numlock, scrolllock)
                      ( cubix_multio.asm):00430         ;     invert (XOR) state[<toggle>]
                      ( cubix_multio.asm):00431         ;     update keyboard LED's
                      ( cubix_multio.asm):00432         ;     goto New Key
                      ( cubix_multio.asm):00433         ;
                      ( cubix_multio.asm):00434         ; Step 9: Adjust keycode for control modifier
                      ( cubix_multio.asm):00435         ;   if state[ctrl]
                      ( cubix_multio.asm):00436         ;     if keycode is 'a'-'z'
                      ( cubix_multio.asm):00437         ;       subtract 20 (clear bit 5) from keycode
                      ( cubix_multio.asm):00438         ;     if keycode is '@'-'_'
                      ( cubix_multio.asm):00439         ;       subtract 40 (clear bit 6) from keycode
                      ( cubix_multio.asm):00440         ;
                      ( cubix_multio.asm):00441         ; Step 10: Adjust keycode for caps lock
                      ( cubix_multio.asm):00442         ;   if state[capslock]
                      ( cubix_multio.asm):00443         ;     if keycode is 'a'-'z' OR 'A'-'Z'
                      ( cubix_multio.asm):00444         ;       toggle (XOR) bit 5 of keycode
                      ( cubix_multio.asm):00445         ;
                      ( cubix_multio.asm):00446         ; Step 11: Handle num pad keys
                      ( cubix_multio.asm):00447         ;   clear state[numpad]
                      ( cubix_multio.asm):00448         ;   if keycode is numpad
                      ( cubix_multio.asm):00449         ;     set state[numpad]
                      ( cubix_multio.asm):00450         ;     if state[numlock]
                      ( cubix_multio.asm):00451         ;       toggle (XOR) bit 4 of keycode
                      ( cubix_multio.asm):00452         ;     apply numpad-map[keycode] -> keycode
                      ( cubix_multio.asm):00453         ;
                      ( cubix_multio.asm):00454         ; Step 12: Detect unknown/invalid keycodes
                      ( cubix_multio.asm):00455         ;   if keycode == $FF
                      ( cubix_multio.asm):00456         ;     goto New Key
                      ( cubix_multio.asm):00457         ;
                      ( cubix_multio.asm):00458         ; Step 13: Done
                      ( cubix_multio.asm):00459         ;   set status[keyrdy]
                      ( cubix_multio.asm):00460         ;   return
                      ( cubix_multio.asm):00461         ;
                      ( cubix_multio.asm):00462         ; New Key:
                      ( cubix_multio.asm):00463         ;   clear status
                      ( cubix_multio.asm):00464         ;   goto Step 1
                      ( cubix_multio.asm):00465         ;
C546                  ( cubix_multio.asm):00466         KBD_DEC0:                                         ; CHECK KEYCODE BUFFER
C546 B6C3DF           ( cubix_multio.asm):00467                 LDA     KBD_STATUS                        ; GET CURRENT STATUS
C549 8480             ( cubix_multio.asm):00468                 ANDA    #KBD_KEYRDY                       ; ISOLATE KEY READY FLAG
C54B 2703             ( cubix_multio.asm):00469                 BEQ     KBD_DEC1
C54D 1A01             ( cubix_multio.asm):00470                 SEC
C54F 39               ( cubix_multio.asm):00471                 RTS                                       ; ABORT IF KEY IS ALREADY PENDING
                      ( cubix_multio.asm):00472         
C550                  ( cubix_multio.asm):00473         KBD_DEC1:                                         ; PROCESS NEXT SCANCODE
C550 BDC4AF           ( cubix_multio.asm):00474                 JSR     KBD_GETDATAX                      ; GET THE SCANCODE
C553 2403             ( cubix_multio.asm):00475                 BCC     KBD_DEC2
C555 1A01             ( cubix_multio.asm):00476                 SEC
C557 39               ( cubix_multio.asm):00477                 RTS                                       ; NO KEY READY, RETURN WITH A=0, SET ERROR
                      ( cubix_multio.asm):00478         
C558                  ( cubix_multio.asm):00479         KBD_DEC2:                                         ; DETECT AND HANDLE SPECIAL KEYCODES
C558 B7C3DA           ( cubix_multio.asm):00480                 STA     KBD_SCANCODE                      ; SAVE SCANCODE
C55B 81AA             ( cubix_multio.asm):00481                 CMPA    #$AA                              ; KEYBOARD INSERTION?
C55D 260F             ( cubix_multio.asm):00482                 BNE     KBD_DEC3                          ; NOPE, BYPASS
C55F BDC73C           ( cubix_multio.asm):00483                 JSR     LDELAY                            ; WAIT A BIT
C562 BDC4BB           ( cubix_multio.asm):00484                 JSR     KBD_RESET                         ; RESET KEYBOARD
C565 BDC4D9           ( cubix_multio.asm):00485                 JSR     KBD_SETLEDS                       ; SET LEDS
C568 BDC506           ( cubix_multio.asm):00486                 JSR     KBD_SETRPT                        ; SET REPEAT RATE
C56B 7EC723           ( cubix_multio.asm):00487                 JMP     KBD_DECNEW                        ; RESTART THE ENGINE
                      ( cubix_multio.asm):00488         
C56E                  ( cubix_multio.asm):00489         KBD_DEC3:                                         ; DETECT AND HANDLE SCANCODE PREFIXES
C56E 81E0             ( cubix_multio.asm):00490                 CMPA    #$E0                              ; EXTENDED KEY PREFIX $E0?
C570 260B             ( cubix_multio.asm):00491                 BNE     KBD_DEC3B                         ; NOPE MOVE ON
C572 F6C3DF           ( cubix_multio.asm):00492                 LDB     KBD_STATUS                        ; GET STATUS
C575 CA01             ( cubix_multio.asm):00493                 ORB     #KBD_EXT                          ; SET EXTENDED BIT
C577 F7C3DF           ( cubix_multio.asm):00494                 STB     KBD_STATUS                        ; SAVE STATUS
C57A 7EC550           ( cubix_multio.asm):00495                 JMP     KBD_DEC1                          ; LOOP TO DO NEXT SCANCODE
                      ( cubix_multio.asm):00496         
C57D                  ( cubix_multio.asm):00497         KBD_DEC3B:                                        ; HANDLE SCANCODE PREFIX $E1 (PAUSE KEY)
C57D 81E1             ( cubix_multio.asm):00498                 CMPA    #$E1                              ; EXTENDED KEY PREFIX $E1
C57F 2616             ( cubix_multio.asm):00499                 BNE     KBD_DEC4                          ; NOPE MOVE ON
C581 86EE             ( cubix_multio.asm):00500                 LDA     #$EE                              ; MAP TO KEYCODE $EE
C583 B7C3DB           ( cubix_multio.asm):00501                 STA     KBD_KEYCODE                       ; SAVE IT
                      ( cubix_multio.asm):00502         ; SWALLOW NEXT 7 SCANCODES
C586 8E0007           ( cubix_multio.asm):00503                 LDX     #7                                ; LOOP 7 TIMES
C589                  ( cubix_multio.asm):00504         KBD_DEC3B1:
C589 3410             ( cubix_multio.asm):00505                 PSHS    X
C58B BDC493           ( cubix_multio.asm):00506                 JSR     KBD_GETDATA                       ; RETRIEVE NEXT SCANCODE
C58E 3510             ( cubix_multio.asm):00507                 PULS    X
C590 301F             ( cubix_multio.asm):00508                 DEX
C592 26F5             ( cubix_multio.asm):00509                 BNE     KBD_DEC3B1                        ; LOOP AS NEEDED
C594 7EC600           ( cubix_multio.asm):00510                 JMP     KBD_DEC6                          ; RESUME AFTER MAPPING
                      ( cubix_multio.asm):00511         
C597                  ( cubix_multio.asm):00512         KBD_DEC4:                                         ; DETECT AND FLAG BREAK EVENT
C597 81F0             ( cubix_multio.asm):00513                 CMPA    #$F0                              ; BREAK (KEY UP) PREFIX?
C599 260B             ( cubix_multio.asm):00514                 BNE     KBD_DEC5                          ; NOPE MOVE ON
C59B F6C3DF           ( cubix_multio.asm):00515                 LDB     KBD_STATUS                        ; GET STATUS
C59E CA02             ( cubix_multio.asm):00516                 ORB     #KBD_BREAK                        ; SET BREAK BIT
C5A0 F7C3DF           ( cubix_multio.asm):00517                 STB     KBD_STATUS                        ; SAVE STATUS
C5A3 7EC550           ( cubix_multio.asm):00518                 JMP     KBD_DEC1                          ; LOOP TO DO NEXT SCANCODE
                      ( cubix_multio.asm):00519         
C5A6                  ( cubix_multio.asm):00520         KBD_DEC5:                                         ; MAP SCANCODE TO KEYCODE
C5A6 B6C3DF           ( cubix_multio.asm):00521                 LDA     KBD_STATUS                        ; GET STATUS
C5A9 8401             ( cubix_multio.asm):00522                 ANDA    #KBD_EXT                          ; EXTENDED BIT SET?
C5AB 272A             ( cubix_multio.asm):00523                 BEQ     KBD_DEC5C                         ; NOPE, MOVE ON
                      ( cubix_multio.asm):00524         
                      ( cubix_multio.asm):00525         ; PERFORM EXTENDED KEY MAPPING
C5AD F6C3DA           ( cubix_multio.asm):00526                 LDB     KBD_SCANCODE                      ; GET SCANCODE
C5B0 8600             ( cubix_multio.asm):00527                 LDA     #$00
C5B2 1F01             ( cubix_multio.asm):00528                 TFR     D,X
C5B4 BEC8A5           ( cubix_multio.asm):00529                 LDX     KBD_MAPEXT                        ; POINT TO START OF EXT MAP TABLE
C5B7                  ( cubix_multio.asm):00530         KBD_DEC5A:
C5B7 A689C8A5         ( cubix_multio.asm):00531                 LDA     KBD_MAPEXT,X                      ; GET FIRST BYTE OF PAIR FROM EXT MAP TABLE
C5BB 3001             ( cubix_multio.asm):00532                 INX
C5BD 8100             ( cubix_multio.asm):00533                 CMPA    #$00                              ; END OF TABLE?
C5BF 10270160         ( cubix_multio.asm):00534                 LBEQ    KBD_DECNEW                        ; UNKNOWN OR BOGUS, START OVER
C5C3 B1C3DA           ( cubix_multio.asm):00535                 CMPA    KBD_SCANCODE                      ; DOES MATCH BYTE EQUAL SCANCODE?
C5C6 2705             ( cubix_multio.asm):00536                 BEQ     KBD_DEC5B                         ; YES! JUMP OUT
C5C8 3001             ( cubix_multio.asm):00537                 INX                                       ; BUMP TO START OF NEXT PAIR
C5CA 7EC5B7           ( cubix_multio.asm):00538                 JMP     KBD_DEC5A                         ; LOOP TO CHECK NEXT TABLE ENTRY
C5CD                  ( cubix_multio.asm):00539         KBD_DEC5B:
C5CD A689C8A5         ( cubix_multio.asm):00540                 LDA     KBD_MAPEXT,X                      ; GET THE KEYCODE VIA MAPPING TABLE
C5D1 B7C3DB           ( cubix_multio.asm):00541                 STA     KBD_KEYCODE                       ; SAVE IT
C5D4 7EC600           ( cubix_multio.asm):00542                 JMP     KBD_DEC6
                      ( cubix_multio.asm):00543         
C5D7                  ( cubix_multio.asm):00544         KBD_DEC5C:                                        ; PERFORM REGULAR KEY (NOT EXTENDED) KEY MAPPING
C5D7 B6C3DA           ( cubix_multio.asm):00545                 LDA     KBD_SCANCODE                      ; GET THE SCANCODE
C5DA 8185             ( cubix_multio.asm):00546                 CMPA    #KBD_MAPSIZ                       ; COMPARE TO SIZE OF TABLE
C5DC 2222             ( cubix_multio.asm):00547                 BHI     KBD_DEC6                          ; PAST END, SKIP OVER LOOKUP
                      ( cubix_multio.asm):00548         
                      ( cubix_multio.asm):00549         ; SETUP POINTER TO MAPPING TABLE BASED ON SHIFTED OR UNSHIFTED STATE
C5DE F6C3DC           ( cubix_multio.asm):00550                 LDB     KBD_STATE                         ; GET STATE
C5E1 C401             ( cubix_multio.asm):00551                 ANDB    #KBD_SHIFT                        ; SHIFT ACTIVE?
C5E3 270D             ( cubix_multio.asm):00552                 BEQ     KBD_DEC5D                         ; NON-SHIFTED, MOVE ON
                      ( cubix_multio.asm):00553         
C5E5 F6C3DA           ( cubix_multio.asm):00554                 LDB     KBD_SCANCODE                      ; GET THE SCANCODE
C5E8 8600             ( cubix_multio.asm):00555                 LDA     #$00
C5EA 1F01             ( cubix_multio.asm):00556                 TFR     D,X
C5EC A689C820         ( cubix_multio.asm):00557                 LDA     KBD_MAPSHIFT,X                    ; GET SHIFTED
C5F0 200B             ( cubix_multio.asm):00558                 BRA     >
C5F2                  ( cubix_multio.asm):00559         KBD_DEC5D:
C5F2 F6C3DA           ( cubix_multio.asm):00560                 LDB     KBD_SCANCODE                      ; GET THE SCANCODE
C5F5 8600             ( cubix_multio.asm):00561                 LDA     #$00
C5F7 1F01             ( cubix_multio.asm):00562                 TFR     D,X
C5F9 A689C79B         ( cubix_multio.asm):00563                 LDA     KBD_MAPSTD,X                      ; GET STANDARD
                      ( cubix_multio.asm):00564         !
C5FD B7C3DB           ( cubix_multio.asm):00565                 STA     KBD_KEYCODE                       ; SAVE KEYCODE
                      ( cubix_multio.asm):00566         
C600                  ( cubix_multio.asm):00567         KBD_DEC6:                                         ; HANDLE MODIFIER KEYS
C600 B6C3DB           ( cubix_multio.asm):00568                 LDA     KBD_KEYCODE                       ; MAKE SURE WE HAVE KEYCODE
C603 81B8             ( cubix_multio.asm):00569                 CMPA    #$B8                              ; END OF MODIFIER KEYS
C605 2C52             ( cubix_multio.asm):00570                 BGE     KBD_DEC7                          ; BYPASS MODIFIER KEY CHECKING
C607 81B0             ( cubix_multio.asm):00571                 CMPA    #$B0                              ; START OF MODIFIER KEYS
C609 254E             ( cubix_multio.asm):00572                 BLO     KBD_DEC7                          ; BYPASS MODIFIER KEY CHECKING
                      ( cubix_multio.asm):00573         
C60B 8E0004           ( cubix_multio.asm):00574                 LDX     #4                                ; LOOP COUNTER TO LOOP THRU 4 MODIFIER BITS
C60E 80AF             ( cubix_multio.asm):00575                 SUBA    #$AF                              ; SETUP A TO DECREMENT THROUGH MODIFIER VALUES
C610 C600             ( cubix_multio.asm):00576                 LDB     #$00                              ; SETUP B TO ROATE THROUGH MODIFIER STATE BITS
C612 1A01             ( cubix_multio.asm):00577                 SEC                                       ; SET CARRY FOR ROTATE
                      ( cubix_multio.asm):00578         
C614                  ( cubix_multio.asm):00579         KBD_DEC6A:
C614 59               ( cubix_multio.asm):00580                 ROLB                                      ; SHIFT TO NEXT MODIFIER STATE BIT
C615 4A               ( cubix_multio.asm):00581                 DECA                                      ; L-MODIFIER?
C616 270A             ( cubix_multio.asm):00582                 BEQ     KBD_DEC6B                         ; YES, HANDLE L-MODIFIER MAKE/BREAK
C618 4A               ( cubix_multio.asm):00583                 DECA                                      ; R-MODIFIER?
C619 270D             ( cubix_multio.asm):00584                 BEQ     KBD_DEC6C                         ; YES, HANDLE R-MODIFIER MAKE/BREAK
C61B 301F             ( cubix_multio.asm):00585                 DEX
C61D 26F5             ( cubix_multio.asm):00586                 BNE     KBD_DEC6A                         ; LOOP THRU 4 MODIFIER BITS
C61F 7EC659           ( cubix_multio.asm):00587                 JMP     KBD_DEC7                          ; FAILSAFE, SHOULD NEVER GET HERE!
                      ( cubix_multio.asm):00588         
C622                  ( cubix_multio.asm):00589         KBD_DEC6B:                                        ; LEFT STATE KEY MAKE/BREAK (STATE BIT TO SET/CLEAR IN B)
C622 8EC3DD           ( cubix_multio.asm):00590                 LDX     #KBD_LSTATE                       ; POINT TO LEFT STATE BYTE
C625 7EC62E           ( cubix_multio.asm):00591                 JMP     KBD_DEC6D                         ; CONTINUE
                      ( cubix_multio.asm):00592         
C628                  ( cubix_multio.asm):00593         KBD_DEC6C:                                        ; RIGHT STATE KEY MAKE/BREAK (STATE BIT TO SET/CLEAR IN B)
C628 8EC3DE           ( cubix_multio.asm):00594                 LDX     #KBD_RSTATE                       ; POINT TO RIGHT STATE BYTE
C62B 7EC62E           ( cubix_multio.asm):00595                 JMP     KBD_DEC6D                         ; CONTINUE
                      ( cubix_multio.asm):00596         
C62E                  ( cubix_multio.asm):00597         KBD_DEC6D:                                        ; BRANCH BASED ON WHETHER THIS IS A MAKE OR BREAK EVENT
C62E B6C3DF           ( cubix_multio.asm):00598                 LDA     KBD_STATUS                        ; GET STATUS FLAGS
C631 8402             ( cubix_multio.asm):00599                 ANDA    #KBD_BREAK                        ; BREAK EVENT?
C633 2703             ( cubix_multio.asm):00600                 BEQ     KBD_DEC6E                         ; NO, HANDLE A MODIFIER KEY MAKE EVENT
C635 7EC63F           ( cubix_multio.asm):00601                 JMP     KBD_DEC6F                         ; YES, HANDLE A MODIFIER BREAK EVENT
                      ( cubix_multio.asm):00602         
C638                  ( cubix_multio.asm):00603         KBD_DEC6E:                                        ; HANDLE STATE KEY MAKE EVENT
C638 EA84             ( cubix_multio.asm):00604                 ORB     ,X                                ; OR IN THE BIT TO SET
C63A E784             ( cubix_multio.asm):00605                 STB     ,X                                ; SAVE THE RESULT
C63C 7EC648           ( cubix_multio.asm):00606                 JMP     KBD_DEC6G                         ; CONTINUE
                      ( cubix_multio.asm):00607         
C63F                  ( cubix_multio.asm):00608         KBD_DEC6F:                                        ; HANDLE STATE KEY BREAK EVENT
C63F C8FF             ( cubix_multio.asm):00609                 EORB    #$FF                              ; FLIP ALL BITS TO SETUP FOR A CLEAR OPERATION
C641 E484             ( cubix_multio.asm):00610                 ANDB    ,X                                ; AND IN THE FLIPPED BITS TO CLEAR DESIRED BIT
C643 E784             ( cubix_multio.asm):00611                 STB     ,X                                ; SAVE THE RESULT
C645 7EC648           ( cubix_multio.asm):00612                 JMP     KBD_DEC6G                         ; CONTINUE
                      ( cubix_multio.asm):00613         
C648                  ( cubix_multio.asm):00614         KBD_DEC6G:                                        ; COALESCE L/R STATE FLAGS
C648 B6C3DC           ( cubix_multio.asm):00615                 LDA     KBD_STATE                         ; GET EXISTING STATE BITS
C64B 84F0             ( cubix_multio.asm):00616                 ANDA    #$F0                              ; GET RID OF OLD MODIFIER BITS
C64D BAC3DD           ( cubix_multio.asm):00617                 ORA     KBD_LSTATE                        ; MERGE IN LEFT STATE BITS
C650 BAC3DE           ( cubix_multio.asm):00618                 ORA     KBD_RSTATE                        ; MERGE IN RIGHT STATE BITS
C653 B7C3DC           ( cubix_multio.asm):00619                 STA     KBD_STATE                         ; SAVE IT
C656 7EC723           ( cubix_multio.asm):00620                 JMP     KBD_DECNEW                        ; DONE WITH CURRENT KEYSTROKE
                      ( cubix_multio.asm):00621         
C659                  ( cubix_multio.asm):00622         KBD_DEC7:                                         ; COMPLETE PROCESSING OF EXTENDED AND KEY BREAK EVENTS
C659 B6C3DF           ( cubix_multio.asm):00623                 LDA     KBD_STATUS                        ; GET CURRENT STATUS FLAGS
C65C 8402             ( cubix_multio.asm):00624                 ANDA    #KBD_BREAK                        ; IS THIS A KEY BREAK EVENT?
C65E 102600C1         ( cubix_multio.asm):00625                 LBNE    KBD_DECNEW                        ; PROCESS NEXT KEY
                      ( cubix_multio.asm):00626         
C662                  ( cubix_multio.asm):00627         KBD_DEC8:                                         ; HANDLE TOGGLE KEYS
C662 B6C3DB           ( cubix_multio.asm):00628                 LDA     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE INTO A
C665 C640             ( cubix_multio.asm):00629                 LDB     #KBD_CAPSLCK                      ; SETUP E WITH CAPS LOCK STATE BIT
C667 81BC             ( cubix_multio.asm):00630                 CMPA    #$BC                              ; IS THIS THE CAPS LOCK KEY?
C669 270F             ( cubix_multio.asm):00631                 BEQ     KBD_DEC8A                         ; YES, GO TO BIT SET ROUTINE
C66B C620             ( cubix_multio.asm):00632                 LDB     #KBD_NUMLCK                       ; SETUP E WITH NUM LOCK STATE BIT
C66D 81BD             ( cubix_multio.asm):00633                 CMPA    #$BD                              ; IS THIS THE NUM LOCK KEY?
C66F 2709             ( cubix_multio.asm):00634                 BEQ     KBD_DEC8A                         ; YES, GO TO BIT SET ROUTINE
C671 C610             ( cubix_multio.asm):00635                 LDB     #KBD_SCRLCK                       ; SETUP E WITH SCROLL LOCK STATE BIT
C673 81BE             ( cubix_multio.asm):00636                 CMPA    #$BE                              ; IS THIS THE SCROLL LOCK KEY?
C675 2703             ( cubix_multio.asm):00637                 BEQ     KBD_DEC8A                         ; YES, GO TO BIT SET ROUTINE
C677 7EC688           ( cubix_multio.asm):00638                 JMP     KBD_DEC9                          ; NOT A TOGGLE KEY, CONTINUE
                      ( cubix_multio.asm):00639         
C67A                  ( cubix_multio.asm):00640         KBD_DEC8A:                                        ; RECORD THE TOGGLE
C67A F8C3DC           ( cubix_multio.asm):00641                 EORB    KBD_STATE                         ; SET THE TOGGLE KEY BIT FROM ABOVE
C67D F7C3DC           ( cubix_multio.asm):00642                 STB     KBD_STATE                         ; SAVE IT
C680 1F98             ( cubix_multio.asm):00643                 TFR     B,A
C682 BDC4D9           ( cubix_multio.asm):00644                 JSR     KBD_SETLEDS                       ; UPDATE LED LIGHTS ON KBD
C685 7EC723           ( cubix_multio.asm):00645                 JMP     KBD_DECNEW                        ; RESTART DECODER FOR A NEW KEY
                      ( cubix_multio.asm):00646         
C688                  ( cubix_multio.asm):00647         KBD_DEC9:                                         ; ADJUST KEYCODE FOR CONTROL MODIFIER
C688 B6C3DC           ( cubix_multio.asm):00648                 LDA     KBD_STATE                         ; GET THE CURRENT STATE BITS
C68B 8402             ( cubix_multio.asm):00649                 ANDA    #KBD_CTRL                         ; CHECK THE CONTROL BIT
C68D 271A             ( cubix_multio.asm):00650                 BEQ     KBD_DEC10                         ; CONTROL KEY NOT PRESSED, MOVE ON
C68F B6C3DB           ( cubix_multio.asm):00651                 LDA     KBD_KEYCODE                       ; GET CURRENT KEYCODE IN A
C692 8161             ( cubix_multio.asm):00652                 CMPA    #'a'                              ; COMPARE TO LOWERCASE A
C694 2506             ( cubix_multio.asm):00653                 BLO     KBD_DEC9A                         ; BELOW IT, BYPASS
C696 817A             ( cubix_multio.asm):00654                 CMPA    #'z'                              ; COMPARE TO LOWERCASE Z+1
C698 2202             ( cubix_multio.asm):00655                 BHI     KBD_DEC9A                         ; ABOVE IT, BYPASS
C69A 84DF             ( cubix_multio.asm):00656                 ANDA    #$DF                              ; KEYCODE IN LOWERCASE A-Z RANGE CLEAR BIT 5 TO MAKE IT UPPERCASE
C69C                  ( cubix_multio.asm):00657         KBD_DEC9A:
C69C 8140             ( cubix_multio.asm):00658                 CMPA    #'@'                              ; COMPARE TO @
C69E 2509             ( cubix_multio.asm):00659                 BLO     KBD_DEC10                         ; BELOW IT, BYPASS
C6A0 815F             ( cubix_multio.asm):00660                 CMPA    #'_'                              ; COMPARE TO _+1
C6A2 2205             ( cubix_multio.asm):00661                 BHI     KBD_DEC10                         ; ABOVE IT, BYPASS
C6A4 84BF             ( cubix_multio.asm):00662                 ANDA    #$BF                              ; CONVERT TO CONTROL VALUE BY CLEARING BIT 6
C6A6 B7C3DB           ( cubix_multio.asm):00663                 STA     KBD_KEYCODE                       ; UPDATE KEYCODE TO CONTROL VALUE
                      ( cubix_multio.asm):00664         
C6A9                  ( cubix_multio.asm):00665         KBD_DEC10:                                        ; ADJUST KEYCODE FOR CAPS LOCK
C6A9 B6C3DC           ( cubix_multio.asm):00666                 LDA     KBD_STATE                         ; LOAD THE STATE FLAGS
C6AC 8440             ( cubix_multio.asm):00667                 ANDA    #KBD_CAPSLCK                      ; CHECK CAPS LOCK
C6AE 2721             ( cubix_multio.asm):00668                 BEQ     KBD_DEC11                         ; CAPS LOCK NOT ACTIVE, MOVE ON
C6B0 B6C3DB           ( cubix_multio.asm):00669                 LDA     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE VALUE
C6B3 8161             ( cubix_multio.asm):00670                 CMPA    #'a'                              ; COMPARE TO LOWERCASE A
C6B5 2507             ( cubix_multio.asm):00671                 BLO     KBD_DEC10A                        ; BELOW IT, BYPASS
C6B7 817A             ( cubix_multio.asm):00672                 CMPA    #'z'                              ; COMPARE TO LOWERCASE Z+1
C6B9 2203             ( cubix_multio.asm):00673                 BHI     KBD_DEC10A                        ; ABOVE IT, BYPASS
C6BB 7EC6C9           ( cubix_multio.asm):00674                 JMP     KBD_DEC10B                        ; IN RANGE LOWERCASE A-Z, GO TO CASE SWAPPING LOGIC
C6BE                  ( cubix_multio.asm):00675         KBD_DEC10A:
C6BE 8141             ( cubix_multio.asm):00676                 CMPA    #'A'                              ; COMPARE TO UPPERCASE A
C6C0 250F             ( cubix_multio.asm):00677                 BLO     KBD_DEC11                         ; BELOW IT, BYPASS
C6C2 815A             ( cubix_multio.asm):00678                 CMPA    #'Z'                              ; COMPARE TO UPPERCASE Z+1
C6C4 220B             ( cubix_multio.asm):00679                 BHI     KBD_DEC11                         ; ABOVE IT, BYPASS
C6C6 7EC6C9           ( cubix_multio.asm):00680                 JMP     KBD_DEC10B                        ; IN RANGE UPPERCASE A-Z, GO TO CASE SWAPPING LOGIC
C6C9                  ( cubix_multio.asm):00681         KBD_DEC10B:
C6C9 B6C3DB           ( cubix_multio.asm):00682                 LDA     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE
C6CC 8820             ( cubix_multio.asm):00683                 EORA    #$20                              ; FLIP BIT 5 TO SWAP UPPER/LOWER CASE
C6CE B7C3DB           ( cubix_multio.asm):00684                 STA     KBD_KEYCODE                       ; SAVE IT
                      ( cubix_multio.asm):00685         
C6D1                  ( cubix_multio.asm):00686         KBD_DEC11:                                        ; HANDLE NUM PAD KEYS
C6D1 B6C3DC           ( cubix_multio.asm):00687                 LDA     KBD_STATE                         ; GET THE CURRENT STATE FLAGS
C6D4 847F             ( cubix_multio.asm):00688                 ANDA    #~KBD_NUMPAD                      ; ASSUME NOT A NUMPAD KEY, CLEAR THE NUMPAD BIT
C6D6 B7C3DC           ( cubix_multio.asm):00689                 STA     KBD_STATE                         ; SAVE IT
                      ( cubix_multio.asm):00690         
C6D9 B6C3DB           ( cubix_multio.asm):00691                 LDA     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE
C6DC 84E0             ( cubix_multio.asm):00692                 ANDA    #%11100000                        ; ISOLATE TOP 3 BITS
C6DE 81C0             ( cubix_multio.asm):00693                 CMPA    #%11000000                        ; IS IN NUMPAD RANGE?
C6E0 262D             ( cubix_multio.asm):00694                 BNE     KBD_DEC12                         ; NOPE, GET OUT
                      ( cubix_multio.asm):00695         
C6E2 B6C3DC           ( cubix_multio.asm):00696                 LDA     KBD_STATE                         ; LOAD THE CURRENT STATE FLAGS
C6E5 8A80             ( cubix_multio.asm):00697                 ORA     #KBD_NUMPAD                       ; TURN ON THE NUMPAD BIT
C6E7 B7C3DC           ( cubix_multio.asm):00698                 STA     KBD_STATE                         ; SAVE IT
                      ( cubix_multio.asm):00699         
C6EA 8420             ( cubix_multio.asm):00700                 ANDA    #KBD_NUMLCK                       ; IS NUM LOCK BIT SET?
C6EC 2708             ( cubix_multio.asm):00701                 BEQ     KBD_DEC11A                        ; NO, SKIP NUMLOCK PROCESSING
C6EE B6C3DB           ( cubix_multio.asm):00702                 LDA     KBD_KEYCODE                       ; GET THE KEYCODE
C6F1 8810             ( cubix_multio.asm):00703                 EORA    #$10                              ; FLIP VALUES FOR NUMLOCK
C6F3 B7C3DB           ( cubix_multio.asm):00704                 STA     KBD_KEYCODE                       ; SAVE IT
                      ( cubix_multio.asm):00705         
C6F6                  ( cubix_multio.asm):00706         KBD_DEC11A:                                       ; APPLY NUMPAD MAPPING
C6F6 F6C3DB           ( cubix_multio.asm):00707                 LDB     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE
C6F9 C0C0             ( cubix_multio.asm):00708                 SUBB    #$C0                              ; KEYCODES START AT $C0
C6FB 8600             ( cubix_multio.asm):00709                 LDA     #$00
C6FD FDC3E2           ( cubix_multio.asm):00710                 STD     KBD_TEMP
C700 CCC8D3           ( cubix_multio.asm):00711                 LDD     #KBD_MAPNUMPAD                    ; LOAD THE START OF THE MAPPING TABLE
C703 1CFE             ( cubix_multio.asm):00712                 CLC
C705 F3C3E2           ( cubix_multio.asm):00713                 ADDD    KBD_TEMP
C708 1F01             ( cubix_multio.asm):00714                 TFR     D,X                               ; INDEX IN X
                      ( cubix_multio.asm):00715         
C70A A684             ( cubix_multio.asm):00716                 LDA     ,X                                ; GET IT IN A
C70C B7C3DB           ( cubix_multio.asm):00717                 STA     KBD_KEYCODE                       ; SAVE IT
                      ( cubix_multio.asm):00718         
C70F                  ( cubix_multio.asm):00719         KBD_DEC12:                                        ; DETECT UNKNOWN/INVALID KEYCODES
C70F B6C3DB           ( cubix_multio.asm):00720                 LDA     KBD_KEYCODE                       ; GET THE FINAL KEYCODE
C712 81FF             ( cubix_multio.asm):00721                 CMPA    #$FF                              ; IS IT $FF (UNKNOWN/INVALID)
C714 270D             ( cubix_multio.asm):00722                 BEQ     KBD_DECNEW                        ; IF SO, JUST RESTART THE ENGINE
                      ( cubix_multio.asm):00723         
C716                  ( cubix_multio.asm):00724         KBD_DEC13:                                        ; DONE - RECORD RESULTS
C716 B6C3DF           ( cubix_multio.asm):00725                 LDA     KBD_STATUS                        ; GET CURRENT STATUS
C719 8A80             ( cubix_multio.asm):00726                 ORA     #KBD_KEYRDY                       ; SET KEY READY BIT
C71B B7C3DF           ( cubix_multio.asm):00727                 STA     KBD_STATUS                        ; SAVE IT
C71E 8600             ( cubix_multio.asm):00728                 LDA     #$00                              ; A=0
C720 1CFE             ( cubix_multio.asm):00729                 CLC                                       ; SIGNAL SUCCESS WITH A=1, CARRY CLEAR
C722 39               ( cubix_multio.asm):00730                 RTS
                      ( cubix_multio.asm):00731         
C723                  ( cubix_multio.asm):00732         KBD_DECNEW:                                       ; START NEW KEYPRESS (CLEAR ALL STATUS BITS)
C723 8600             ( cubix_multio.asm):00733                 LDA     #$00                              ; A=0
C725 B7C3DF           ( cubix_multio.asm):00734                 STA     KBD_STATUS                        ; CLEAR STATUS
C728 7EC550           ( cubix_multio.asm):00735                 JMP     KBD_DEC1                          ; RESTART THE ENGINE
                      ( cubix_multio.asm):00736         
C72B                  ( cubix_multio.asm):00737         DELAY:
C72B 3476             ( cubix_multio.asm):00738                 PSHS    A,B,X,Y,U
C72D 3576             ( cubix_multio.asm):00739                 PULS    A,B,X,Y,U
C72F 3476             ( cubix_multio.asm):00740                 PSHS    A,B,X,Y,U
C731 3576             ( cubix_multio.asm):00741                 PULS    A,B,X,Y,U
C733 3476             ( cubix_multio.asm):00742                 PSHS    A,B,X,Y,U
C735 3576             ( cubix_multio.asm):00743                 PULS    A,B,X,Y,U
C737 3476             ( cubix_multio.asm):00744                 PSHS    A,B,X,Y,U
C739 3576             ( cubix_multio.asm):00745                 PULS    A,B,X,Y,U
C73B 39               ( cubix_multio.asm):00746                 RTS
                      ( cubix_multio.asm):00747         
C73C                  ( cubix_multio.asm):00748         LDELAY:
C73C 3476             ( cubix_multio.asm):00749                 PSHS    A,B,X,Y,U
C73E 8E0100           ( cubix_multio.asm):00750                 LDX     #$100
                      ( cubix_multio.asm):00751         !
C741 BDC72B           ( cubix_multio.asm):00752                 JSR     DELAY
C744 301F             ( cubix_multio.asm):00753                 DEX
C746 26F9             ( cubix_multio.asm):00754                 BNE     <
C748 3576             ( cubix_multio.asm):00755                 PULS    A,B,X,Y,U
C74A 39               ( cubix_multio.asm):00756                 RTS
                      ( cubix_multio.asm):00757         
                      ( cubix_multio.asm):00758         ;
                      ( cubix_multio.asm):00759         ; DRIVER DATA
                      ( cubix_multio.asm):00760         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00761         ; MESSAGES
                      ( cubix_multio.asm):00762         ;__________________________________________________________________________________________________
C74B                  ( cubix_multio.asm):00763         MIOMESSAGE1:
C74B 495341204D554C54 ( cubix_multio.asm):00764                 FCC     "ISA MULTI-IO:"
     492D494F3A
C758 00               ( cubix_multio.asm):00765                 FCB     00
C759                  ( cubix_multio.asm):00766         MIOMESSAGE3:
C759 20204B42443A2056 ( cubix_multio.asm):00767                 FCC     "  KBD: VT82C42 NOT FOUND."
     543832433432204E
     4F5420464F554E44
     2E
C772 00               ( cubix_multio.asm):00768                 FCB     00
C773                  ( cubix_multio.asm):00769         MIOMESSAGE4:
C773 20204B42443A2049 ( cubix_multio.asm):00770                 FCC     "  KBD: INITIALIZED."
     4E495449414C495A
     45442E
C786 00               ( cubix_multio.asm):00771                 FCB     00
C787                  ( cubix_multio.asm):00772         MIOMESSAGE5:
C787 20204C50543A2049 ( cubix_multio.asm):00773                 FCC     "  LPT: INITIALIZED."
     4E495449414C495A
     45442E
C79A 00               ( cubix_multio.asm):00774                 FCB     00
                      ( cubix_multio.asm):00775         
                      ( cubix_multio.asm):00776         ;
                      ( cubix_multio.asm):00777         ; MAPPING
                      ( cubix_multio.asm):00778         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00779         ;
C79B                  ( cubix_multio.asm):00780         KBD_MAPSTD:                                       ; SCANCODE IS INDEX INTO TABLE TO RESULTANT LOOKUP KEYCODE
C79B FFE8FFE4E2E0E1EB ( cubix_multio.asm):00781                 FCB     $FF,$E8,$FF,$E4,$E2,$E0,$E1,$EB,$FF,$E9,$E7,$E5,$E3,$09,'`',$FF
     FFE9E7E5E30960FF
C7AB FFB4B0FFB27131FF ( cubix_multio.asm):00782                 FCB     $FF,$B4,$B0,$FF,$B2,'q','1',$FF,$FF,$FF,'z','s','a','w','2',$FF
     FFFF7A73617732FF
C7BB FF637864653433FF ( cubix_multio.asm):00783                 FCB     $FF,'c','x','d','e','4','3',$FF,$FF,' ','v','f','t','r','5',$FF
     FF207666747235FF
C7CB FF6E6268677936FF ( cubix_multio.asm):00784                 FCB     $FF,'n','b','h','g','y','6',$FF,$FF,$FF,'m','j','u','7','8',$FF
     FFFF6D6A753738FF
C7DB FF2C6B696F3039FF ( cubix_multio.asm):00785                 FCB     $FF,',','k','i','o','0','9',$FF,$FF,'.','/','l',';','p','-',$FF
     FF2E2F6C3B702DFF
C7EB FFFF27FF5B3DFFFF ( cubix_multio.asm):00786                 FCB     $FF,$FF,$27,$FF,'[','=',$FF,$FF,$BC,$B1,$0D,']',$FF,'\',$FF,$FF
     BCB10D5DFF5CFFFF
C7FB FFFFFFFFFFFF08FF ( cubix_multio.asm):00787                 FCB     $FF,$FF,$FF,$FF,$FF,$FF,$08,$FF,$FF,$C0,$FF,$C3,$C6,$FF,$FF,$FF
     FFC0FFC3C6FFFFFF
C80B C9CAC1C4C5C71BBD ( cubix_multio.asm):00788                 FCB     $C9,$CA,$C1,$C4,$C5,$C7,$1B,$BD,$FA,$CE,$C2,$CD,$CC,$C8,$BE,$FF
     FACEC2CDCCC8BEFF
C81B FFFFFFE6EC       ( cubix_multio.asm):00789                 FCB     $FF,$FF,$FF,$E6,$EC
C820                  ( cubix_multio.asm):00790         BD_MAPSTDEND:
                      ( cubix_multio.asm):00791         ;
     0085             ( cubix_multio.asm):00792         KBD_MAPSIZ      EQU BD_MAPSTDEND-KBD_MAPSTD
                      ( cubix_multio.asm):00793         ;
C820                  ( cubix_multio.asm):00794         KBD_MAPSHIFT:                                     ; SCANCODE IS INDEX INTO TABLE TO RESULTANT LOOKUP KEYCODE WHEN SHIFT ACTIVE
C820 FFE8FFE4E2E0E1EB ( cubix_multio.asm):00795                 FCB     $FF,$E8,$FF,$E4,$E2,$E0,$E1,$EB,$FF,$E9,$E7,$E5,$E3,$09,'~',$FF
     FFE9E7E5E3097EFF
C830 FFB4B0FFB25121FF ( cubix_multio.asm):00796                 FCB     $FF,$B4,$B0,$FF,$B2,'Q','!',$FF,$FF,$FF,'Z','S','A','W','@',$FF
     FFFF5A53415740FF
C840 FF435844452423FF ( cubix_multio.asm):00797                 FCB     $FF,'C','X','D','E','$','#',$FF,$FF,' ','V','F','T','R','%',$FF
     FF205646545225FF
C850 FF4E424847595EFF ( cubix_multio.asm):00798                 FCB     $FF,'N','B','H','G','Y','^',$FF,$FF,$FF,'M','J','U','&','*',$FF
     FFFF4D4A55262AFF
C860 FF3C4B494F2928FF ( cubix_multio.asm):00799                 FCB     $FF,'<','K','I','O',')','(',$FF,$FF,'>','?','L',':','P','_',$FF
     FF3E3F4C3A505FFF
C870 FFFF22FF7B2BFFFF ( cubix_multio.asm):00800                 FCB     $FF,$FF,$22,$FF,'{','+',$FF,$FF,$BC,$B1,$0D,'}',$FF,'|',$FF,$FF
     BCB10D7DFF7CFFFF
C880 FFFFFFFFFFFF08FF ( cubix_multio.asm):00801                 FCB     $FF,$FF,$FF,$FF,$FF,$FF,$08,$FF,$FF,$D0,$FF,$D3,$D6,$FF,$FF,$FF
     FFD0FFD3D6FFFFFF
C890 D9DAD1D4D5D71BBD ( cubix_multio.asm):00802                 FCB     $D9,$DA,$D1,$D4,$D5,$D7,$1B,$BD,$FA,$DE,$D2,$DD,$DC,$D8,$BE,$FF
     FADED2DDDCD8BEFF
C8A0 FFFFFFE6EC       ( cubix_multio.asm):00803                 FCB     $FF,$FF,$FF,$E6,$EC
                      ( cubix_multio.asm):00804         ;
C8A5                  ( cubix_multio.asm):00805         KBD_MAPEXT:                                       ; PAIRS ARE [SCANCODE,KEYCODE] FOR EXTENDED SCANCODES
C8A5 11B514B31FB627B7 ( cubix_multio.asm):00806                 FCB     $11,$B5,$14,$B3,$1F,$B6,$27,$B7
C8AD 2FEF37FA3FFB4ACB ( cubix_multio.asm):00807                 FCB     $2F,$EF,$37,$FA,$3F,$FB,$4A,$CB
C8B5 5ACF5EFC69F36BF8 ( cubix_multio.asm):00808                 FCB     $5A,$CF,$5E,$FC,$69,$F3,$6B,$F8
C8BD 6CF270F071F172F7 ( cubix_multio.asm):00809                 FCB     $6C,$F2,$70,$F0,$71,$F1,$72,$F7
C8C5 74F975F67AF57CED ( cubix_multio.asm):00810                 FCB     $74,$F9,$75,$F6,$7A,$F5,$7C,$ED
C8CD 7DF47EFD0000     ( cubix_multio.asm):00811                 FCB     $7D,$F4,$7E,$FD,$00,$00
                      ( cubix_multio.asm):00812         ;
C8D3                  ( cubix_multio.asm):00813         KBD_MAPNUMPAD:                                    ; KEYCODE TRANSLATION FROM NUMPAD RANGE TO STD ASCII/KEYCODES
C8D3 F3F7F5F8FFF9F2F6 ( cubix_multio.asm):00814                 FCB     $F3,$F7,$F5,$F8,$FF,$F9,$F2,$F6,$F4,$F0,$F1,$2F,$2A,$2D,$2B,$0D
     F4F0F12F2A2D2B0D
C8E3 3132333435363738 ( cubix_multio.asm):00815                 FCB     $31,$32,$33,$34,$35,$36,$37,$38,$39,$30,$2E,$2F,$2A,$2D,$2B,$0D
     39302E2F2A2D2B0D
                      ( cubix_multio.asm):00816         ;
                      ( cubix_multio.asm):00817         ;
                      ( cubix_multio.asm):00818         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00819         ; KEYCODE VALUES RETURNED BY THE DECODER
                      ( cubix_multio.asm):00820         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00821         ;
                      ( cubix_multio.asm):00822         ; VALUES 0-127 ARE STANDARD ASCII, SPECIAL KEYS WILL HAVE THE FOLLOWING VALUES:
                      ( cubix_multio.asm):00823         ;
                      ( cubix_multio.asm):00824         ; F1            $E0
                      ( cubix_multio.asm):00825         ; F2            $E1
                      ( cubix_multio.asm):00826         ; F3            $E2
                      ( cubix_multio.asm):00827         ; F4            $E3
                      ( cubix_multio.asm):00828         ; F5            $E4
                      ( cubix_multio.asm):00829         ; F6            $E5
                      ( cubix_multio.asm):00830         ; F7            $E6
                      ( cubix_multio.asm):00831         ; F8            $E7
                      ( cubix_multio.asm):00832         ; F9            $E8
                      ( cubix_multio.asm):00833         ; F10           $E9
                      ( cubix_multio.asm):00834         ; F11           $EA
                      ( cubix_multio.asm):00835         ; F12           $EB
                      ( cubix_multio.asm):00836         ; SYSRQ         $EC
                      ( cubix_multio.asm):00837         ; PRTSC         $ED
                      ( cubix_multio.asm):00838         ; PAUSE         $EE
                      ( cubix_multio.asm):00839         ; APP           $EF
                      ( cubix_multio.asm):00840         ; INS           $F0
                      ( cubix_multio.asm):00841         ; DEL           $F1
                      ( cubix_multio.asm):00842         ; HOME          $F2
                      ( cubix_multio.asm):00843         ; END           $F3
                      ( cubix_multio.asm):00844         ; PGUP          $F4
                      ( cubix_multio.asm):00845         ; PGDN          $F5
                      ( cubix_multio.asm):00846         ; UP            $F6
                      ( cubix_multio.asm):00847         ; DOWN          $F7
                      ( cubix_multio.asm):00848         ; LEFT          $F8
                      ( cubix_multio.asm):00849         ; RIGHT         $F9
                      ( cubix_multio.asm):00850         ; POWER         $FA
                      ( cubix_multio.asm):00851         ; SLEEP         $FB
                      ( cubix_multio.asm):00852         ; WAKE          $FC
                      ( cubix_multio.asm):00853         ; BREAK         $FD
                      ( cubix_multio.asm):00854         ;___________________________________________________________________________________________________________________
                      ( cubix_multio.asm):00855         ;
                      ( cubix_multio.asm):00856         ; CENTRONICS (LPT) INTERFACE DRIVER
                      ( cubix_multio.asm):00857         ;___________________________________________________________________________________________________________________
                      ( cubix_multio.asm):00858         ;
                      ( cubix_multio.asm):00859         ; BYTE OUTPUT
                      ( cubix_multio.asm):00860         ;
C8F3                  ( cubix_multio.asm):00861         LPT_OUT:
C8F3 8E30FF           ( cubix_multio.asm):00862                 LDX     #LPT_WAITTO
                      ( cubix_multio.asm):00863         !
C8F6 BDC918           ( cubix_multio.asm):00864                 JSR     LPT_OST                 ; READY TO SEND?
C8F9 2607             ( cubix_multio.asm):00865                 BNE     >                       ; GO IF READY
C8FB 301F             ( cubix_multio.asm):00866                 DEX
C8FD 26F7             ( cubix_multio.asm):00867                 BNE     <                       ; LOOP IF NOT READY
C8FF 1A01             ( cubix_multio.asm):00868                 SEC                             ; SIGNAL ERROR
C901 39               ( cubix_multio.asm):00869                 RTS
                      ( cubix_multio.asm):00870         !
C902 B713F0           ( cubix_multio.asm):00871                 STA     LPT_0                   ; OUTPUT TO PORT 0 (DATA)
C905 860D             ( cubix_multio.asm):00872                 LDA     #%00001101              ; SELECT & STROBE, LEDS OFF
C907 B713F2           ( cubix_multio.asm):00873                 STA     LPT_2                   ; OUTPUT DATA TO PORT
C90A BDC72B           ( cubix_multio.asm):00874                 JSR     DELAY
C90D 860C             ( cubix_multio.asm):00875                 LDA     #%00001100              ; SELECT, LEDS OFF
C90F B713F2           ( cubix_multio.asm):00876                 STA     LPT_2                   ; OUTPUT DATA TO PORT
C912 BDC72B           ( cubix_multio.asm):00877                 JSR     DELAY
C915 1CFE             ( cubix_multio.asm):00878                 CLC
C917 39               ( cubix_multio.asm):00879                 RTS
                      ( cubix_multio.asm):00880         ;
                      ( cubix_multio.asm):00881         ; OUTPUT STATUS
                      ( cubix_multio.asm):00882         ;
C918                  ( cubix_multio.asm):00883         LPT_OST:
C918 F613F2           ( cubix_multio.asm):00884                 LDB     LPT_2                   ; GET STATUS INFO
C91B C480             ( cubix_multio.asm):00885                 ANDB    #%10000000              ; ISOLATE /BUSY
C91D 39               ( cubix_multio.asm):00886                 RTS                             ; DONE
                      (     cubixdrv.asm):00112         ;        INCLUDE cubix_dskyng.asm
                      (     cubixdrv.asm):00113         ;        INCLUDE cubix_floppy.asm
                      (     cubixdrv.asm):00114         ;        INCLUDE cubix_fp.asm
                      (     cubixdrv.asm):00115         ;        INCLUDE cubix_i2c.asm
                      (     cubixdrv.asm):00116         ;        INCLUDE cubix_esp32.asm
                      (     cubixdrv.asm):00117         ;        INCLUDE cubix_dsky.asm
                      (     cubixdrv.asm):00118         
                      (     cubixdrv.asm):00119         
                      (     cubixdrv.asm):00120         
C91E                  (     cubixdrv.asm):00121         drv_noop:
C91E 39               (     cubixdrv.asm):00122                 RTS
                      (     cubixdrv.asm):00123         
                      (     cubixdrv.asm):00124         ;*
                      (     cubixdrv.asm):00125         ;* OUTPUT LFCR TO CONSOLE
                      (     cubixdrv.asm):00126         ;*
C91F                  (     cubixdrv.asm):00127         LFCR:
C91F 3406             (     cubixdrv.asm):00128                 PSHS    a,b
C921 860A             (     cubixdrv.asm):00129                 LDA     #10
C923 8D40             (     cubixdrv.asm):00130                 BSR     PUTCHR
C925 860D             (     cubixdrv.asm):00131                 LDA     #13
C927 8D3C             (     cubixdrv.asm):00132                 BSR     PUTCHR
C929 3586             (     cubixdrv.asm):00133                 PULS    A,B,pc
C92B                  (     cubixdrv.asm):00134         SPACE:
C92B 3406             (     cubixdrv.asm):00135                 PSHS    a,b
C92D 8620             (     cubixdrv.asm):00136                 LDA     #32
C92F 8D34             (     cubixdrv.asm):00137                 BSR     PUTCHR
C931 3586             (     cubixdrv.asm):00138                 PULS    A,B,pc
                      (     cubixdrv.asm):00139         ;*
                      (     cubixdrv.asm):00140         ;* WRITE STRING(X) TO CONSOLE
                      (     cubixdrv.asm):00141         ;*
C933                  (     cubixdrv.asm):00142         WRSTR:
C933 3406             (     cubixdrv.asm):00143                 PSHS    A,B                               ;SAVE A
C935                  (     cubixdrv.asm):00144         WRST1:
C935 A680             (     cubixdrv.asm):00145                 LDA     ,X+                               ;GET CHAR
C937 2704             (     cubixdrv.asm):00146                 BEQ     WRST2                             ;END, QUIT
C939 8D2A             (     cubixdrv.asm):00147                 BSR     PUTCHR
C93B 20F8             (     cubixdrv.asm):00148                 BRA     WRST1                             ;CONTINUE
C93D                  (     cubixdrv.asm):00149         WRST2:
C93D 3586             (     cubixdrv.asm):00150                 PULS    A,B,pc
                      (     cubixdrv.asm):00151         ;*
                      (     cubixdrv.asm):00152         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (     cubixdrv.asm):00153         ;*
C93F                  (     cubixdrv.asm):00154         WRHEXW
C93F 3406             (     cubixdrv.asm):00155                 PSHS    d
C941 8D08             (     cubixdrv.asm):00156                 BSR     WRHEX                             ;OUTPUT
C943 1E89             (     cubixdrv.asm):00157                 EXG     A,B                               ;SWAP
C945 8D04             (     cubixdrv.asm):00158                 BSR     WRHEX                             ;OUTPUT
C947 1E89             (     cubixdrv.asm):00159                 EXG     A,B                               ;BACK
C949 3586             (     cubixdrv.asm):00160                 PULS    d,pc
                      (     cubixdrv.asm):00161         
                      (     cubixdrv.asm):00162         ;*
                      (     cubixdrv.asm):00163         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (     cubixdrv.asm):00164         ;*
C94B                  (     cubixdrv.asm):00165         WRHEX
C94B 3406             (     cubixdrv.asm):00166                 PSHS    A,B                               ;SAVE IT
C94D 44               (     cubixdrv.asm):00167                 LSRA                                      ;SHIFT
C94E 44               (     cubixdrv.asm):00168                 LSRA                                      ;HIGH NIBBLE
C94F 44               (     cubixdrv.asm):00169                 LSRA                                      ;INTO
C950 44               (     cubixdrv.asm):00170                 LSRA                                      ;LOW NIBBLE
C951 8D06             (     cubixdrv.asm):00171                 BSR     HOUT                              ;HIGH
C953 A6E4             (     cubixdrv.asm):00172                 LDA     ,S                                ;GET LOW
C955 8D02             (     cubixdrv.asm):00173                 BSR     HOUT                              ;OUTPUT
C957 3586             (     cubixdrv.asm):00174                 PULS    A,B,PC                            ;RESTORE IT
                      (     cubixdrv.asm):00175         ;* OUTPUT NIBBLE IN HEX
C959                  (     cubixdrv.asm):00176         HOUT
C959 840F             (     cubixdrv.asm):00177                 ANDA    #%00001111                        ;REMOVE HIGH
C95B 8B30             (     cubixdrv.asm):00178                 ADDA    #'0'                              ;CONVERT
C95D 8139             (     cubixdrv.asm):00179                 CMPA    #'9'                              ;OK?
C95F 2304             (     cubixdrv.asm):00180                 BLS     PUTCHR                            ;OK, OUTPUT
C961 8B07             (     cubixdrv.asm):00181                 ADDA    #7                                ;CONVERT TO 'A'-'F'
C963 2000             (     cubixdrv.asm):00182                 BRA     PUTCHR                            ;OUTPUT
C965                  (     cubixdrv.asm):00183         PUTCHR:
                      (     cubixdrv.asm):00184         ;       NOTE THAT EVENTUALLY THIS NEEDS TO BE THE SYSTEM SSR NOT A DIRECT CALL
C965 7EC191           (     cubixdrv.asm):00185                 JMP     WRSER1
                      (     cubixdrv.asm):00186         
                      (     cubixdrv.asm):00187                 END

Symbol Table:
[ G] BANKED_DRIVER_DISPATCHER         C100
[ G] BD_MAPSTDEND                     C820
[ G] CUBIX_IO_BASE                    1000
[ G] CURRENTCYL                       0106
[ G] CURRENTDEVICE                    0104
[ G] CURRENTHEAD                      0108
[ G] CURRENTSEC                       0107
[ G] CURRENTSLICE                     0105
[ G] DELAY                            C72B
[ G] DISKERROR                        0103
[ G] DISPATCHTABLE                    C113
[ G] drv_noop                         C91E
[ G] farpointer                       0101
[ G] FUNCTION_DISPATCHER              C100
[ G] HOUT                             C959
[ G] HSTBUF                           0200
[ G] IDE_ABORT                        C1D3
[ G] IDE_INITA                        C1F5
[ G] IDE_PRINT_INFO                   C1DC
[ G] IDE_READ_BUFFER                  C310
[ G] IDE_READ_INFO                    C23B
[ G] IDE_READ_INFO_ABORT              C28E
[ G] IDE_READ_INFO_OK                 C29A
[ G] IDE_READ_SECTOR                  C2A0
[ G] IDE_READ_SECTOR_1                C2A5
[ G] IDE_READ_SECTOR_ERROR            C2BA
[ G] IDE_SETUP_LBA                    C3B0
[ G] IDE_WAIT_DRQ                     C2E4
[ G] IDE_WAIT_DRQ1                    C2EE
[ G] IDE_WAIT_DRQ2                    C30C
[ G] IDE_WAIT_DRQ3                    C30E
[ G] IDE_WAIT_DRQE                    C307
[ G] IDE_WAIT_NOT_BUSY                C2C0
[ G] IDE_WAIT_NOT_BUSY1               C2CA
[ G] IDE_WAIT_NOT_BUSY2               C2E0
[ G] IDE_WAIT_NOT_BUSY3               C2E2
[ G] IDE_WRITE_BUFFER                 C352
[ G] IDE_WRITE_SECTOR                 C32D
[ G] IDE_WRITE_SECTOR_ERROR           C34C
[ G] IDEBUFRD                         C314
[ G] IDEBUFWT                         C356
[ G] KBD_ALT                          0004
[ G] KBD_BREAK                        0002
[ G] KBD_CAPSLCK                      0040
[ G] KBD_CMD                          13FF
[ G] KBD_CTRL                         0002
[ G] KBD_DAT                          13FE
[ G] KBD_DEC0                         C546
[ G] KBD_DEC1                         C550
[ G] KBD_DEC10                        C6A9
[ G] KBD_DEC10A                       C6BE
[ G] KBD_DEC10B                       C6C9
[ G] KBD_DEC11                        C6D1
[ G] KBD_DEC11A                       C6F6
[ G] KBD_DEC12                        C70F
[ G] KBD_DEC13                        C716
[ G] KBD_DEC2                         C558
[ G] KBD_DEC3                         C56E
[ G] KBD_DEC3B                        C57D
[ G] KBD_DEC3B1                       C589
[ G] KBD_DEC4                         C597
[ G] KBD_DEC5                         C5A6
[ G] KBD_DEC5A                        C5B7
[ G] KBD_DEC5B                        C5CD
[ G] KBD_DEC5C                        C5D7
[ G] KBD_DEC5D                        C5F2
[ G] KBD_DEC6                         C600
[ G] KBD_DEC6A                        C614
[ G] KBD_DEC6B                        C622
[ G] KBD_DEC6C                        C628
[ G] KBD_DEC6D                        C62E
[ G] KBD_DEC6E                        C638
[ G] KBD_DEC6F                        C63F
[ G] KBD_DEC6G                        C648
[ G] KBD_DEC7                         C659
[ G] KBD_DEC8                         C662
[ G] KBD_DEC8A                        C67A
[ G] KBD_DEC9                         C688
[ G] KBD_DEC9A                        C69C
[ G] KBD_DECNEW                       C723
[ G] KBD_DECODE                       C546
[ G] KBD_DEFRPT                       0040
[ G] KBD_DEFSTATE                     0070
[ G] KBD_EXT                          0001
[ G] KBD_GETDATA                      C493
[ G] KBD_GETDATA0                     C496
[ G] KBD_GETDATA1                     C4A9
[ G] KBD_GETDATAX                     C4AF
[ G] KBD_GETKEY                       C528
[ G] KBD_IDLE                         C3E1
[ G] KBD_KEYCODE                      C3DB
[ G] KBD_KEYRDY                       0080
[ G] KBD_LSTATE                       C3DD
[ G] KBD_MAPEXT                       C8A5
[ G] KBD_MAPNUMPAD                    C8D3
[ G] KBD_MAPSHIFT                     C820
[ G] KBD_MAPSIZ                       0085
[ G] KBD_MAPSTD                       C79B
[ G] KBD_NUMLCK                       0020
[ G] KBD_NUMPAD                       0080
[ G] KBD_PROBE                        C425
[ G] KBD_PUTCMD                       C45F
[ G] KBD_PUTCMD0                      C462
[ G] KBD_PUTCMD1                      C473
[ G] KBD_PUTDATA                      C479
[ G] KBD_PUTDATA0                     C47C
[ G] KBD_PUTDATA1                     C48D
[ G] KBD_REPEAT                       C3E0
[ G] KBD_RESET                        C4BB
[ G] KBD_RESET0                       C4C6
[ G] KBD_RESET1                       C4D6
[ G] KBD_RSTATE                       C3DE
[ G] KBD_SCANCODE                     C3DA
[ G] KBD_SCRLCK                       0010
[ G] KBD_SETLEDS                      C4D9
[ G] KBD_SETRPT                       C506
[ G] KBD_SHIFT                        0001
[ G] KBD_ST                           13FF
[ G] KBD_STATE                        C3DC
[ G] KBD_STATUS                       C3DF
[ G] KBD_TEMP                         C3E2
[ G] KBD_WAITTO                       30FF
[ G] KBD_WIN                          0008
[ G] LDELAY                           C73C
[ G] LFCR                             C91F
[ G] LPT_0                            13F0
[ G] LPT_1                            13F1
[ G] LPT_2                            13F2
[ G] LPT_OST                          C918
[ G] LPT_OUT                          C8F3
[ G] LPT_WAITTO                       30FF
[ G] MESSAGE1                         C36F
[ G] MESSAGE2                         C377
[ G] MESSAGE3                         C37E
[ G] MESSAGE4                         C38B
[ G] MESSAGE5                         C39C
[ G] MESSAGE6                         C3AD
[ G] MIOMESSAGE1                      C74B
[ G] MIOMESSAGE3                      C759
[ G] MIOMESSAGE4                      C773
[ G] MIOMESSAGE5                      C787
[ G] MULTIO_BASE                      13E0
[ G] MULTIOINIT                       C3E4
[ G] PAGER_D                          0109
[ G] PAGER_S                          010F
[ G] PAGER_U                          0111
[ G] PAGER_X                          010B
[ G] PAGER_Y                          010D
[ G] PUTCHR                           C965
[ G] RDSER1                           C19C
[ G] SERIALINIT                       C181
[ G] SPACE                            C92B
[ G] UART1COMMAND                     1F86
[ G] UART1CONTROL                     1F87
[ G] UART1DATA                        1F84
[ G] UART1STATUS                      1F85
[ G] WRHEX                            C94B
[ G] WRHEXW                           C93F
[ G] WRSER1                           C191
[ G] WRST1                            C935
[ G] WRST2                            C93D
[ G] WRSTR                            C933
[ G] XTIDE_CMD_FEAT                   00EF
[ G] XTIDE_CMD_ID                     00EC
[ G] XTIDE_CMD_INIT                   0091
[ G] XTIDE_CMD_READ                   0020
[ G] XTIDE_CMD_RECAL                  0010
[ G] XTIDE_CMD_SPINDOWN               00E0
[ G] XTIDE_CMD_SPINUP                 00E1
[ G] XTIDE_CMD_WRITE                  0030
[ G] XTIDE_COMMAND                    130E
[ G] XTIDE_DATA_HI                    1301
[ G] XTIDE_DATA_LO                    1300
[ G] XTIDE_DEVICE                     130C
[ G] XTIDE_ERR                        1302
[ G] XTIDE_FECODE                     1302
[ G] XTIDE_INIT                       C1B3
[ G] XTIDE_LBAHI                      130A
[ G] XTIDE_LBALOW                     1306
[ G] XTIDE_LBAMID                     1308
[ G] XTIDE_PROBE                      C1F9
[ G] XTIDE_PROBE_FAIL                 C238
[ G] XTIDE_PROBE_SUCCESS              C23A
[ G] XTIDE_SEC_CNT                    1304
[ G] XTIDE_STATUS                     130E
[ G] XTIDETIMEOUT                     C1B1
