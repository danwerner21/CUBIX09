                      (     cubixdrv.asm):00001         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00002         ;
                      (     cubixdrv.asm):00003         ;       6809PC Cubix banked driver code
                      (     cubixdrv.asm):00004         ;
                      (     cubixdrv.asm):00005         ;  DWERNER 5/17/2025    Initial
                      (     cubixdrv.asm):00006         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00007         
                      (     cubixdrv.asm):00008         ;*
                      (     cubixdrv.asm):00009                 INCLUDE cubix_values.asm
                      ( cubix_values.asm):00001         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00002         ;
                      ( cubix_values.asm):00003         ;       6809PC Cubix System storage locations
                      ( cubix_values.asm):00004         ;
                      ( cubix_values.asm):00005         ;  DWERNER 5/17/2025    Initial
                      ( cubix_values.asm):00006         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00007         ; $0000-$00FF DRIVER/PAGER STACK
                      ( cubix_values.asm):00008         ; $0100-$01FF OS Driver Storage
     0100             ( cubix_values.asm):00009         CONSOLEDEVICE   = $0100                           ; (BYTE)
     0101             ( cubix_values.asm):00010         farpointer      = $0101
     0103             ( cubix_values.asm):00011         DISKERROR       = $0103
     0104             ( cubix_values.asm):00012         CURRENTDEVICE   = $0104
     0105             ( cubix_values.asm):00013         CURRENTSLICE    = $0105
     0106             ( cubix_values.asm):00014         CURRENTCYL      = $0106
     0107             ( cubix_values.asm):00015         CURRENTSEC      = $0107
     0108             ( cubix_values.asm):00016         CURRENTHEAD     = $0108
     0109             ( cubix_values.asm):00017         PAGER_D         = $0109
     010B             ( cubix_values.asm):00018         PAGER_X         = $010B
     010D             ( cubix_values.asm):00019         PAGER_Y         = $010D
     010F             ( cubix_values.asm):00020         PAGER_S         = $010F
     0111             ( cubix_values.asm):00021         PAGER_U         = $0111
                      ( cubix_values.asm):00022         
                      ( cubix_values.asm):00023         
                      ( cubix_values.asm):00024         ; $200-$3FF Host Buffer Driver Storage
     0200             ( cubix_values.asm):00025         HSTBUF          = $0200
                      ( cubix_values.asm):00026         ; $400-$7FF OS LOCAL STORAGE
                      ( cubix_values.asm):00027         ; $1000-$1FFF Hardware Access Window
     1000             ( cubix_values.asm):00028         CUBIX_IO_BASE   = $1000                           ; BIOS DEFAULT IO LOCATION
                      ( cubix_values.asm):00029         ; $2000-$DFFF User RAM
                      ( cubix_values.asm):00030         ; $E000-$FFFF CUBIX
                      ( cubix_values.asm):00031         
     C100             ( cubix_values.asm):00032         BANKED_DRIVER_DISPATCHER = $C100
                      (     cubixdrv.asm):00010         ;*
                      (     cubixdrv.asm):00011         
                      (     cubixdrv.asm):00012                 ORG     $C100
                      (     cubixdrv.asm):00013         
                      (     cubixdrv.asm):00014         ;__DISPATCHER________________________________________________________________________________________
                      (     cubixdrv.asm):00015         ;
                      (     cubixdrv.asm):00016         ;  Function dispatcher
                      (     cubixdrv.asm):00017         ;  function to call is located in "farfunct"
                      (     cubixdrv.asm):00018         ;____________________________________________________________________________________________________
                      (     cubixdrv.asm):00019         ;
C100                  (     cubixdrv.asm):00020         FUNCTION_DISPATCHER:
                      (     cubixdrv.asm):00021         
C100 58               (     cubixdrv.asm):00022                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
C101 8600             (     cubixdrv.asm):00023                 LDA     #$00
C103 1F01             (     cubixdrv.asm):00024                 TFR     D,X
C105 EC89C113         (     cubixdrv.asm):00025                 LDD     DISPATCHTABLE,X
C109 FD0101           (     cubixdrv.asm):00026                 STD     farpointer
C10C FC0109           (     cubixdrv.asm):00027                 LDD     >PAGER_D                          ; RESTORE 'D'
C10F 6E9F0101         (     cubixdrv.asm):00028                 JMP     [farpointer]
                      (     cubixdrv.asm):00029         
                      (     cubixdrv.asm):00030         
C113                  (     cubixdrv.asm):00031         DISPATCHTABLE:
C113 C184             (     cubixdrv.asm):00032                 .WORD   WRSER1                            ; FUNCTION 00 - WRITE SERIAL PORT
C115 C18F             (     cubixdrv.asm):00033                 .WORD   RDSER1                            ; FUNCTION 01 - READ SERIAL PORT
C117 C173             (     cubixdrv.asm):00034                 .WORD   SERIALINIT                        ; FUNCTION 02 - SERIAL PORT INIT
                      (     cubixdrv.asm):00035         
C119 C3CE             (     cubixdrv.asm):00036                 .WORD   drv_noop                          ; FUNCTION 03 - WRITE VIDEO
C11B C3CE             (     cubixdrv.asm):00037                 .WORD   drv_noop                          ; FUNCTION 04 - READ KEYBOARD
C11D C3CE             (     cubixdrv.asm):00038                 .WORD   drv_noop                          ; FUNCTION 05 - INIT INTERFACE
                      (     cubixdrv.asm):00039         
C11F C3CE             (     cubixdrv.asm):00040                 .WORD   drv_noop                          ; FUNCTION 06
C121 C3CE             (     cubixdrv.asm):00041                 .WORD   drv_noop                          ; FUNCTION 07
C123 C3CE             (     cubixdrv.asm):00042                 .WORD   drv_noop                          ; FUNCTION 08
                      (     cubixdrv.asm):00043         
C125 C3CE             (     cubixdrv.asm):00044                 .WORD   drv_noop                          ; FUNCTION 09
C127 C3CE             (     cubixdrv.asm):00045                 .WORD   drv_noop                          ; FUNCTION 10
C129 C3CE             (     cubixdrv.asm):00046                 .WORD   drv_noop                          ; FUNCTION 11
                      (     cubixdrv.asm):00047         
C12B C3CE             (     cubixdrv.asm):00048                 .WORD   drv_noop                          ; FUNCTION 12
C12D C3CE             (     cubixdrv.asm):00049                 .WORD   drv_noop                          ; FUNCTION 13
C12F C3CE             (     cubixdrv.asm):00050                 .WORD   drv_noop                          ; FUNCTION 14
                      (     cubixdrv.asm):00051         
C131 C3CE             (     cubixdrv.asm):00052                 .WORD   drv_noop                          ; FUNCTION 15 - called during OS init
C133 C3CE             (     cubixdrv.asm):00053                 .WORD   drv_noop                          ; FUNCTION 16 - read a sector from drive
C135 C3CE             (     cubixdrv.asm):00054                 .WORD   drv_noop                          ; FUNCTION 17 - write a sector to drive
                      (     cubixdrv.asm):00055         ;
C137 C3CE             (     cubixdrv.asm):00056                 .WORD   drv_noop                          ;FL_SETUP                          ; FUNCTION 18 - init floppy device
C139 C3CE             (     cubixdrv.asm):00057                 .WORD   drv_noop                          ;FL_READ_SECTOR                    ; FUNCTION 19 - read a sector from floppy device
C13B C3CE             (     cubixdrv.asm):00058                 .WORD   drv_noop                          ;FL_WRITE_SECTOR                   ; FUNCTION 20 - write a sector to floppy device
                      (     cubixdrv.asm):00059         ;
C13D C1A6             (     cubixdrv.asm):00060                 .WORD   XTIDE_INIT                        ; FUNCTION 21 - init XT IDE device
C13F C295             (     cubixdrv.asm):00061                 .WORD   IDE_READ_SECTOR                   ; FUNCTION 22 - read a sector from XT IDE device
C141 C2B5             (     cubixdrv.asm):00062                 .WORD   IDE_WRITE_SECTOR                  ; FUNCTION 23 - write a sector to XT IDE device
                      (     cubixdrv.asm):00063         ;
C143 C3CE             (     cubixdrv.asm):00064                 .WORD   drv_noop                          ;FPSD_INIT                         ; FUNCTION 24 - init PPIDE device
C145 C3CE             (     cubixdrv.asm):00065                 .WORD   drv_noop                          ;FPSD_READ_SECTOR                  ; FUNCTION 25 - read a sector from PPIDE device
C147 C3CE             (     cubixdrv.asm):00066                 .WORD   drv_noop                          ;FPSD_WRITE_SECTOR                 ; FUNCTION 26 - write a sector to PPIDE device
                      (     cubixdrv.asm):00067         ;
C149 C3CE             (     cubixdrv.asm):00068                 .WORD   drv_noop                          ;DSKY_INIT                         ; FUNCTION 27 -
C14B C3CE             (     cubixdrv.asm):00069                 .WORD   drv_noop                          ;DSKY_SHOW                         ; FUNCTION 28 -
C14D C3CE             (     cubixdrv.asm):00070                 .WORD   drv_noop                          ;DSKY_BIN2SEG                      ; FUNCTION 29 -
C14F C3CE             (     cubixdrv.asm):00071                 .WORD   drv_noop                          ;DSKY_RESET                        ; FUNCTION 30 -
C151 C3CE             (     cubixdrv.asm):00072                 .WORD   drv_noop                          ;DSKY_STAT                         ; FUNCTION 31 -
C153 C3CE             (     cubixdrv.asm):00073                 .WORD   drv_noop                          ;DSKY_GETKEY                       ; FUNCTION 32 -
C155 C3CE             (     cubixdrv.asm):00074                 .WORD   drv_noop                          ;DSKY_BEEP                         ; FUNCTION 33 -
C157 C3CE             (     cubixdrv.asm):00075                 .WORD   drv_noop                          ;DSKY_DSPL                         ; FUNCTION 34 -
C159 C3CE             (     cubixdrv.asm):00076                 .WORD   drv_noop                          ;DSKY_PUTLED                       ; FUNCTION 35 -
C15B C3CE             (     cubixdrv.asm):00077                 .WORD   drv_noop                          ;DSKY_BLANK                        ; FUNCTION 36 -
C15D C3CE             (     cubixdrv.asm):00078                 .WORD   drv_noop                          ;FP_INIT                           ; FUNCTION 37 -
C15F C3CE             (     cubixdrv.asm):00079                 .WORD   drv_noop                          ;FP_SETLED                         ; FUNCTION 38 -
C161 C3CE             (     cubixdrv.asm):00080                 .WORD   drv_noop                          ;FP_GETSWITCH                      ; FUNCTION 39 -
C163 C3CE             (     cubixdrv.asm):00081                 .WORD   drv_noop                          ;PCF_INIT                          ; FUNCTION 40 -
C165 C3CE             (     cubixdrv.asm):00082                 .WORD   drv_noop                          ;PCF_READBYTES                     ; FUNCTION 41 -
C167 C3CE             (     cubixdrv.asm):00083                 .WORD   drv_noop                          ;PCF_SENDBYTES                     ; FUNCTION 42 -
C169 C3CE             (     cubixdrv.asm):00084                 .WORD   drv_noop                          ;PCF_INITDEV                       ; FUNCTION 43 -
C16B C3CE             (     cubixdrv.asm):00085                 .WORD   drv_noop                          ;FPDIS_INIT                        ; FUNCTION 44 - Init Front Panel Display
C16D C3CE             (     cubixdrv.asm):00086                 .WORD   drv_noop                          ;FPDIS_CLEAR                       ; FUNCTION 45 - Clear Front Panel Display
C16F C3CE             (     cubixdrv.asm):00087                 .WORD   drv_noop                          ;FPDIS_SETXY                       ; FUNCTION 46 - SET XY ON Front Panel Display
C171 C3CE             (     cubixdrv.asm):00088                 .WORD   drv_noop                          ;FPDIS_OUTCH                       ; FUNCTION 47 - Output char on Front Panel Display
                      (     cubixdrv.asm):00089         ;
                      (     cubixdrv.asm):00090         
                      (     cubixdrv.asm):00091         
                      (     cubixdrv.asm):00092         ;__DRIVERS___________________________________________________________________________________________
                      (     cubixdrv.asm):00093         ;
                      (     cubixdrv.asm):00094                 INCLUDE cubix_serial.asm
                      ( cubix_serial.asm):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00002         ;
                      ( cubix_serial.asm):00003         ;       CUBIX serial drivers for 6809PC
                      ( cubix_serial.asm):00004         ;
                      ( cubix_serial.asm):00005         ;       Entry points:
                      ( cubix_serial.asm):00006         ;               SERIALINIT  - called during OS init
                      ( cubix_serial.asm):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00009         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00010         ;
                      ( cubix_serial.asm):00011         ;*
                      ( cubix_serial.asm):00012         ;*        HARDWARE I/O ADDRESSES
                      ( cubix_serial.asm):00013         ;*
                      ( cubix_serial.asm):00014         ; UART 6551 SERIAL
     1F84             ( cubix_serial.asm):00015         UART1DATA       EQU CUBIX_IO_BASE+$F84            ; SERIAL PORT 1 (I/O Card)
     1F85             ( cubix_serial.asm):00016         UART1STATUS     EQU CUBIX_IO_BASE+$F85            ; SERIAL PORT 1 (I/O Card)
     1F86             ( cubix_serial.asm):00017         UART1COMMAND    EQU CUBIX_IO_BASE+$F86            ; SERIAL PORT 1 (I/O Card)
     1F87             ( cubix_serial.asm):00018         UART1CONTROL    EQU CUBIX_IO_BASE+$F87            ; SERIAL PORT 1 (I/O Card)
                      ( cubix_serial.asm):00019         
                      ( cubix_serial.asm):00020         
                      ( cubix_serial.asm):00021         
                      ( cubix_serial.asm):00022         ;__SERIALINIT____________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00023         ;
                      ( cubix_serial.asm):00024         ;       INITIALIZE SERIAL PORTS
                      ( cubix_serial.asm):00025         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00026         ;
C173                  ( cubix_serial.asm):00027         SERIALINIT:
C173 8600             ( cubix_serial.asm):00028                 LDA     #$00                              ; RESET UART
C175 B71F85           ( cubix_serial.asm):00029                 STA     UART1STATUS                       ;
C178 860B             ( cubix_serial.asm):00030                 LDA     #$0B                              ;
C17A B71F86           ( cubix_serial.asm):00031                 STA     UART1COMMAND                      ;
C17D 861E             ( cubix_serial.asm):00032                 LDA     #$1E                              ; 9600, 8 BITS, NO PARITY, 1 STOP BIT
C17F B71F87           ( cubix_serial.asm):00033                 STA     UART1CONTROL                      ;
C182 39               ( cubix_serial.asm):00034                 RTS
C183 39               ( cubix_serial.asm):00035                 RTS
                      ( cubix_serial.asm):00036         
                      ( cubix_serial.asm):00037         ;__WRSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00038         ;
                      ( cubix_serial.asm):00039         ;       WRITE CHARACTER(A) TO UART
                      ( cubix_serial.asm):00040         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00041         ;
C184                  ( cubix_serial.asm):00042         WRSER1
                      ( cubix_serial.asm):00043         !
C184 F61F85           ( cubix_serial.asm):00044                 LDB     UART1STATUS                       ; GET STATUS
C187 C410             ( cubix_serial.asm):00045                 ANDB    #%00010000                        ; IS TX READY
C189 27F9             ( cubix_serial.asm):00046                 BEQ     <                                 ; IF NOT REPEAT
C18B B71F84           ( cubix_serial.asm):00047                 STA     UART1DATA                         ; WRITE DATA
C18E 39               ( cubix_serial.asm):00048                 RTS
                      ( cubix_serial.asm):00049         
                      ( cubix_serial.asm):00050         ;__RDSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00051         ;
                      ( cubix_serial.asm):00052         ;       READ CHARACTER FROM UART TO (A)
                      ( cubix_serial.asm):00053         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00054         ;
C18F                  ( cubix_serial.asm):00055         RDSER1
C18F B61F85           ( cubix_serial.asm):00056                 LDA     UART1STATUS                       ; GET STATUS REGISTER
C192 8408             ( cubix_serial.asm):00057                 ANDA    #%00001000                        ; IS RX READY
C194 2708             ( cubix_serial.asm):00058                 BEQ     >                                 ; No DATA IS READY
C196 B61F84           ( cubix_serial.asm):00059                 LDA     UART1DATA                         ; GET DATA CHAR
C199 B70109           ( cubix_serial.asm):00060                 STA     >PAGER_D                          ; SAVE 'D'
C19C 39               ( cubix_serial.asm):00061                 RTS
                      ( cubix_serial.asm):00062         
C19D 39               ( cubix_serial.asm):00063                 RTS
                      ( cubix_serial.asm):00064         !
C19E 86FF             ( cubix_serial.asm):00065                 LDA     #$FF                              ;
C1A0 B70109           ( cubix_serial.asm):00066                 STA     >PAGER_D                          ; SAVE 'D'
C1A3 39               ( cubix_serial.asm):00067                 RTS                                       ;
                      (     cubixdrv.asm):00095                 INCLUDE cubix_ide.asm
                      (    cubix_ide.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00002         ;
                      (    cubix_ide.asm):00003         ;       CUBIX IDE disk drivers 6809PC - XT IDE ISA CARD
                      (    cubix_ide.asm):00004         ;
                      (    cubix_ide.asm):00005         ;       Entry points:
                      (    cubix_ide.asm):00006         ;               XTIDE_INIT      - CALLED DURING OS INIT
                      (    cubix_ide.asm):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00009         ;________________________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00010         ;
                      (    cubix_ide.asm):00011         
     1300             (    cubix_ide.asm):00012         XTIDE_DATA_LO   = CUBIX_IO_BASE+$300
     1301             (    cubix_ide.asm):00013         XTIDE_DATA_HI   = CUBIX_IO_BASE+$301
     1302             (    cubix_ide.asm):00014         XTIDE_ERR       = CUBIX_IO_BASE+$302
     1302             (    cubix_ide.asm):00015         XTIDE_FECODE    = CUBIX_IO_BASE+$302
     1304             (    cubix_ide.asm):00016         XTIDE_SEC_CNT   = CUBIX_IO_BASE+$304
     1306             (    cubix_ide.asm):00017         XTIDE_LBALOW    = CUBIX_IO_BASE+$306
     1308             (    cubix_ide.asm):00018         XTIDE_LBAMID    = CUBIX_IO_BASE+$308
     130A             (    cubix_ide.asm):00019         XTIDE_LBAHI     = CUBIX_IO_BASE+$30A
     130C             (    cubix_ide.asm):00020         XTIDE_DEVICE    = CUBIX_IO_BASE+$30C
     130E             (    cubix_ide.asm):00021         XTIDE_COMMAND   = CUBIX_IO_BASE+$30E
     130E             (    cubix_ide.asm):00022         XTIDE_STATUS    = CUBIX_IO_BASE+$30E
                      (    cubix_ide.asm):00023         
                      (    cubix_ide.asm):00024         
                      (    cubix_ide.asm):00025         
                      (    cubix_ide.asm):00026         
                      (    cubix_ide.asm):00027         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (    cubix_ide.asm):00028         XTIDE_CMD_RECAL = $10
     0020             (    cubix_ide.asm):00029         XTIDE_CMD_READ  = $20
     0030             (    cubix_ide.asm):00030         XTIDE_CMD_WRITE = $30
     0091             (    cubix_ide.asm):00031         XTIDE_CMD_INIT  = $91
     00EC             (    cubix_ide.asm):00032         XTIDE_CMD_ID    = $EC
     00EF             (    cubix_ide.asm):00033         XTIDE_CMD_FEAT  = $EF
     00E0             (    cubix_ide.asm):00034         XTIDE_CMD_SPINDOWN = $E0
     00E1             (    cubix_ide.asm):00035         XTIDE_CMD_SPINUP = $E1
                      (    cubix_ide.asm):00036         
                      (    cubix_ide.asm):00037         
                      (    cubix_ide.asm):00038         
C1A4                  (    cubix_ide.asm):00039         XTIDETIMEOUT:
C1A4 0000             (    cubix_ide.asm):00040                 .BYTE   $00,$00
                      (    cubix_ide.asm):00041         
                      (    cubix_ide.asm):00042         
                      (    cubix_ide.asm):00043         
                      (    cubix_ide.asm):00044         ;__XTIDE_INIT________________________________________________________________________________________
                      (    cubix_ide.asm):00045         ;
                      (    cubix_ide.asm):00046         ;  INIT AND DISPLAY IDE INFO
                      (    cubix_ide.asm):00047         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00048         ;
C1A6                  (    cubix_ide.asm):00049         XTIDE_INIT:
C1A6 BDC3CF           (    cubix_ide.asm):00050                 JSR     LFCR                              ; AND CRLF
C1A9 8EC364           (    cubix_ide.asm):00051                 LDX     #MESSAGE1
C1AC BDC3E3           (    cubix_ide.asm):00052                 JSR     WRSTR                             ; DO PROMPT
C1AF BDC3CF           (    cubix_ide.asm):00053                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00054         ;
C1B2 8EC36C           (    cubix_ide.asm):00055                 LDX     #MESSAGE2
C1B5 BDC3E3           (    cubix_ide.asm):00056                 JSR     WRSTR                             ; DO PROMPT
C1B8 CC1300           (    cubix_ide.asm):00057                 LDD     #XTIDE_DATA_LO                    ; GET BASE PORT
C1BB BDC3EF           (    cubix_ide.asm):00058                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_ide.asm):00059         ;
C1BE BDC1EC           (    cubix_ide.asm):00060                 JSR     XTIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
C1C1 2503             (    cubix_ide.asm):00061                 BCS     IDE_ABORT
C1C3 7EC1CF           (    cubix_ide.asm):00062                 JMP     IDE_PRINT_INFO
C1C6                  (    cubix_ide.asm):00063         IDE_ABORT:
C1C6 8EC373           (    cubix_ide.asm):00064                 LDX     #MESSAGE3
C1C9 BDC3E3           (    cubix_ide.asm):00065                 JSR     WRSTR                             ; DO PROMPT
C1CC 7EC1E8           (    cubix_ide.asm):00066                 JMP     IDE_INITA
C1CF                  (    cubix_ide.asm):00067         IDE_PRINT_INFO:
C1CF BDC3CF           (    cubix_ide.asm):00068                 JSR     LFCR                              ; AND CRLF
C1D2 8EC380           (    cubix_ide.asm):00069                 LDX     #MESSAGE4
C1D5 BDC3E3           (    cubix_ide.asm):00070                 JSR     WRSTR                             ; DO PROMPT
C1D8 8600             (    cubix_ide.asm):00071                 LDA     #$00
C1DA BDC230           (    cubix_ide.asm):00072                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
C1DD 8EC391           (    cubix_ide.asm):00073                 LDX     #MESSAGE5
C1E0 BDC3E3           (    cubix_ide.asm):00074                 JSR     WRSTR                             ; DO PROMPT
C1E3 8601             (    cubix_ide.asm):00075                 LDA     #$01
C1E5 BDC230           (    cubix_ide.asm):00076                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
C1E8                  (    cubix_ide.asm):00077         IDE_INITA:
C1E8 BDC3CF           (    cubix_ide.asm):00078                 JSR     LFCR                              ; AND CRLF
C1EB 39               (    cubix_ide.asm):00079                 RTS                                       ; DONE
                      (    cubix_ide.asm):00080         ;
                      (    cubix_ide.asm):00081         ;__XTIDE_PROBE_______________________________________________________________________________________
                      (    cubix_ide.asm):00082         ;
                      (    cubix_ide.asm):00083         ;  XTPROBE FOR IDE HARDWARE
                      (    cubix_ide.asm):00084         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00085         ;
C1EC                  (    cubix_ide.asm):00086         XTIDE_PROBE:
                      (    cubix_ide.asm):00087         ;
                      (    cubix_ide.asm):00088         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (    cubix_ide.asm):00089         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (    cubix_ide.asm):00090         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (    cubix_ide.asm):00091         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (    cubix_ide.asm):00092         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (    cubix_ide.asm):00093         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (    cubix_ide.asm):00094         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (    cubix_ide.asm):00095         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (    cubix_ide.asm):00096         
                      (    cubix_ide.asm):00097         ; CHECK SIGNATURE
                      (    cubix_ide.asm):00098         
C1EC 8E0000           (    cubix_ide.asm):00099                 LDX     #$0000
                      (    cubix_ide.asm):00100         ;       SOMETIMES THE CF-XTIDE WILL ONLY READ 80, THIS CAN BE RESET BY WRITING ZEROS UNTIL THE 80s GO AWAY
                      (    cubix_ide.asm):00101         !
C1EF F61300           (    cubix_ide.asm):00102                 LDB     XTIDE_DATA_LO
C1F2 C180             (    cubix_ide.asm):00103                 CMPB    #$80
C1F4 262B             (    cubix_ide.asm):00104                 BNE     >
C1F6 C600             (    cubix_ide.asm):00105                 LDB     #$00
C1F8 F71300           (    cubix_ide.asm):00106                 STB     XTIDE_DATA_LO
C1FB 12               (    cubix_ide.asm):00107                 NOP
C1FC F71301           (    cubix_ide.asm):00108                 STB     XTIDE_DATA_HI
C1FF 12               (    cubix_ide.asm):00109                 NOP
C200 F71306           (    cubix_ide.asm):00110                 STB     XTIDE_LBALOW
C203 12               (    cubix_ide.asm):00111                 NOP
C204 F71308           (    cubix_ide.asm):00112                 STB     XTIDE_LBAMID
C207 12               (    cubix_ide.asm):00113                 NOP
C208 F7130A           (    cubix_ide.asm):00114                 STB     XTIDE_LBAHI
C20B 12               (    cubix_ide.asm):00115                 NOP
C20C F7130C           (    cubix_ide.asm):00116                 STB     XTIDE_DEVICE
C20F 12               (    cubix_ide.asm):00117                 NOP
C210 F7130E           (    cubix_ide.asm):00118                 STB     XTIDE_COMMAND
C213 12               (    cubix_ide.asm):00119                 NOP
C214 F7130E           (    cubix_ide.asm):00120                 STB     XTIDE_STATUS
C217 12               (    cubix_ide.asm):00121                 NOP
C218 3001             (    cubix_ide.asm):00122                 INX
C21A 8C0300           (    cubix_ide.asm):00123                 CPX     #$0300
C21D 26D0             (    cubix_ide.asm):00124                 BNE     <
C21F 200C             (    cubix_ide.asm):00125                 BRA     XTIDE_PROBE_FAIL                  ; TIMED OUT
                      (    cubix_ide.asm):00126         !
C221 F61304           (    cubix_ide.asm):00127                 LDB     XTIDE_SEC_CNT
C224 C101             (    cubix_ide.asm):00128                 CMPB    #$01
C226 2605             (    cubix_ide.asm):00129                 BNE     XTIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
C228 1CFE             (    cubix_ide.asm):00130                 CLC
C22A 7EC22F           (    cubix_ide.asm):00131                 JMP     XTIDE_PROBE_SUCCESS
C22D                  (    cubix_ide.asm):00132         XTIDE_PROBE_FAIL:
C22D 1A01             (    cubix_ide.asm):00133                 SEC
C22F                  (    cubix_ide.asm):00134         XTIDE_PROBE_SUCCESS:
C22F 39               (    cubix_ide.asm):00135                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (    cubix_ide.asm):00136         
                      (    cubix_ide.asm):00137         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (    cubix_ide.asm):00138         ;*
                      (    cubix_ide.asm):00139         ;*  READ IDE INFORMATION
                      (    cubix_ide.asm):00140         ;*      CARRY SET ON ERROR
                      (    cubix_ide.asm):00141         ;*      A=MST/SLV
                      (    cubix_ide.asm):00142         ;*____________________________________________________________________________________________________
C230                  (    cubix_ide.asm):00143         IDE_READ_INFO:
                      (    cubix_ide.asm):00144         ; SET DRIVE BIT
C230 8401             (    cubix_ide.asm):00145                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
C232 48               (    cubix_ide.asm):00146                 ASLA                                      ; SHIFT 4
C233 48               (    cubix_ide.asm):00147                 ASLA                                      ;
C234 48               (    cubix_ide.asm):00148                 ASLA                                      ;
C235 48               (    cubix_ide.asm):00149                 ASLA                                      ;
C236 8AE0             (    cubix_ide.asm):00150                 ORA     #$E0                              ; E0=MST  F0=SLV
C238 B7130C           (    cubix_ide.asm):00151                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00152         
C23B BDC2DA           (    cubix_ide.asm):00153                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C23E 2543             (    cubix_ide.asm):00154                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00155         
C240 8601             (    cubix_ide.asm):00156                 LDA     #$01                              ; ENABLE 8-BIT MODE (XT-CF-LITE)
C242 B71302           (    cubix_ide.asm):00157                 STA     XTIDE_FECODE
C245 86EF             (    cubix_ide.asm):00158                 LDA     #XTIDE_CMD_FEAT
C247 B7130E           (    cubix_ide.asm):00159                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00160         
C24A 12               (    cubix_ide.asm):00161                 NOP                                       ; TINY DELAY, JUST IN CASE
C24B 12               (    cubix_ide.asm):00162                 NOP
C24C 12               (    cubix_ide.asm):00163                 NOP
C24D 12               (    cubix_ide.asm):00164                 NOP
C24E 12               (    cubix_ide.asm):00165                 NOP
C24F 12               (    cubix_ide.asm):00166                 NOP
C250 12               (    cubix_ide.asm):00167                 NOP
C251 12               (    cubix_ide.asm):00168                 NOP
C252 12               (    cubix_ide.asm):00169                 NOP
C253 12               (    cubix_ide.asm):00170                 NOP
C254 12               (    cubix_ide.asm):00171                 NOP
                      (    cubix_ide.asm):00172         
                      (    cubix_ide.asm):00173         
C255 86EC             (    cubix_ide.asm):00174                 LDA     #XTIDE_CMD_ID                     ; ID COMMAND
C257 B7130E           (    cubix_ide.asm):00175                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00176         
C25A BDC2FE           (    cubix_ide.asm):00177                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
C25D 2524             (    cubix_ide.asm):00178                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00179         
C25F BDC32A           (    cubix_ide.asm):00180                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
                      (    cubix_ide.asm):00181         
C262 8EC3A2           (    cubix_ide.asm):00182                 LDX     #MESSAGE6
C265 BDC3E3           (    cubix_ide.asm):00183                 JSR     WRSTR
C268 B6027B           (    cubix_ide.asm):00184                 LDA     HSTBUF+123
C26B BDC3FB           (    cubix_ide.asm):00185                 JSR     WRHEX
C26E B6027A           (    cubix_ide.asm):00186                 LDA     HSTBUF+122
C271 BDC3FB           (    cubix_ide.asm):00187                 JSR     WRHEX
C274 B60279           (    cubix_ide.asm):00188                 LDA     HSTBUF+121
C277 BDC3FB           (    cubix_ide.asm):00189                 JSR     WRHEX
C27A B60278           (    cubix_ide.asm):00190                 LDA     HSTBUF+120
C27D BDC3FB           (    cubix_ide.asm):00191                 JSR     WRHEX
C280 7EC28F           (    cubix_ide.asm):00192                 JMP     IDE_READ_INFO_OK
C283                  (    cubix_ide.asm):00193         IDE_READ_INFO_ABORT:
C283 8EC373           (    cubix_ide.asm):00194                 LDX     #MESSAGE3
C286 BDC3E3           (    cubix_ide.asm):00195                 JSR     WRSTR                             ;DO PROMPT
C289 BDC3CF           (    cubix_ide.asm):00196                 JSR     LFCR                              ;AND CRLF
C28C 1A01             (    cubix_ide.asm):00197                 SEC
C28E 39               (    cubix_ide.asm):00198                 RTS                                       ;
C28F                  (    cubix_ide.asm):00199         IDE_READ_INFO_OK:
C28F BDC3CF           (    cubix_ide.asm):00200                 JSR     LFCR                              ; AND CRLF
C292 1CFE             (    cubix_ide.asm):00201                 CLC
C294 39               (    cubix_ide.asm):00202                 RTS
                      (    cubix_ide.asm):00203         
                      (    cubix_ide.asm):00204         
                      (    cubix_ide.asm):00205         
                      (    cubix_ide.asm):00206         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (    cubix_ide.asm):00207         ;*
                      (    cubix_ide.asm):00208         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (    cubix_ide.asm):00209         ;*
                      (    cubix_ide.asm):00210         ;*____________________________________________________________________________________________________
C295                  (    cubix_ide.asm):00211         IDE_READ_SECTOR:
C295 BDC2DA           (    cubix_ide.asm):00212                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C298 2515             (    cubix_ide.asm):00213                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
C29A                  (    cubix_ide.asm):00214         IDE_READ_SECTOR_1:
C29A BDC3A5           (    cubix_ide.asm):00215                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
C29D 8620             (    cubix_ide.asm):00216                 LDA     #XTIDE_CMD_READ
C29F B7130E           (    cubix_ide.asm):00217                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00218         
C2A2 BDC2FE           (    cubix_ide.asm):00219                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
C2A5 2508             (    cubix_ide.asm):00220                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
C2A7 BDC32A           (    cubix_ide.asm):00221                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
C2AA 4F               (    cubix_ide.asm):00222                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
C2AB B70103           (    cubix_ide.asm):00223                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C2AE 39               (    cubix_ide.asm):00224                 RTS
C2AF                  (    cubix_ide.asm):00225         IDE_READ_SECTOR_ERROR:
C2AF 8602             (    cubix_ide.asm):00226                 LDA     #$02                              ; SET ERROR CONDITION
C2B1 B70103           (    cubix_ide.asm):00227                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C2B4 39               (    cubix_ide.asm):00228                 RTS
                      (    cubix_ide.asm):00229         
                      (    cubix_ide.asm):00230         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (    cubix_ide.asm):00231         ;*
                      (    cubix_ide.asm):00232         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (    cubix_ide.asm):00233         ;*
                      (    cubix_ide.asm):00234         ;*____________________________________________________________________________________________________
C2B5                  (    cubix_ide.asm):00235         IDE_WRITE_SECTOR:
C2B5 BDC2DA           (    cubix_ide.asm):00236                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C2B8 251A             (    cubix_ide.asm):00237                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C2BA BDC3A5           (    cubix_ide.asm):00238                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
C2BD 8630             (    cubix_ide.asm):00239                 LDA     #XTIDE_CMD_WRITE
C2BF B7130E           (    cubix_ide.asm):00240                 STA     XTIDE_COMMAND
C2C2 BDC2FE           (    cubix_ide.asm):00241                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
C2C5 250D             (    cubix_ide.asm):00242                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C2C7 BDC347           (    cubix_ide.asm):00243                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
C2CA BDC2DA           (    cubix_ide.asm):00244                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
C2CD 2505             (    cubix_ide.asm):00245                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C2CF 4F               (    cubix_ide.asm):00246                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
C2D0 B70103           (    cubix_ide.asm):00247                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C2D3 39               (    cubix_ide.asm):00248                 RTS
C2D4                  (    cubix_ide.asm):00249         IDE_WRITE_SECTOR_ERROR:
C2D4 8602             (    cubix_ide.asm):00250                 LDA     #$02
C2D6 B70103           (    cubix_ide.asm):00251                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C2D9 39               (    cubix_ide.asm):00252                 RTS
                      (    cubix_ide.asm):00253         
                      (    cubix_ide.asm):00254         
                      (    cubix_ide.asm):00255         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (    cubix_ide.asm):00256         ;*
                      (    cubix_ide.asm):00257         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (    cubix_ide.asm):00258         ;*
                      (    cubix_ide.asm):00259         ;*____________________________________________________________________________________________________
C2DA                  (    cubix_ide.asm):00260         IDE_WAIT_NOT_BUSY:
C2DA 3406             (    cubix_ide.asm):00261                 PSHS    A,B
C2DC 8600             (    cubix_ide.asm):00262                 LDA     #$00
C2DE B7C1A4           (    cubix_ide.asm):00263                 STA     XTIDETIMEOUT
C2E1 B7C1A5           (    cubix_ide.asm):00264                 STA     XTIDETIMEOUT+1
C2E4                  (    cubix_ide.asm):00265         IDE_WAIT_NOT_BUSY1:
C2E4 F6130E           (    cubix_ide.asm):00266                 LDB     XTIDE_STATUS                      ;WAIT FOR RDY BIT TO BE SET
C2E7 C480             (    cubix_ide.asm):00267                 ANDB    #$80
C2E9 270F             (    cubix_ide.asm):00268                 BEQ     IDE_WAIT_NOT_BUSY2
C2EB 7CC1A4           (    cubix_ide.asm):00269                 INC     XTIDETIMEOUT
C2EE 26F4             (    cubix_ide.asm):00270                 BNE     IDE_WAIT_NOT_BUSY1
C2F0 7CC1A5           (    cubix_ide.asm):00271                 INC     XTIDETIMEOUT+1
C2F3 26EF             (    cubix_ide.asm):00272                 BNE     IDE_WAIT_NOT_BUSY1
C2F5 1A01             (    cubix_ide.asm):00273                 SEC
C2F7 7EC2FC           (    cubix_ide.asm):00274                 JMP     IDE_WAIT_NOT_BUSY3
C2FA                  (    cubix_ide.asm):00275         IDE_WAIT_NOT_BUSY2:
C2FA 1CFE             (    cubix_ide.asm):00276                 CLC
C2FC                  (    cubix_ide.asm):00277         IDE_WAIT_NOT_BUSY3:
C2FC 3586             (    cubix_ide.asm):00278                 PULS    PC,A,B
                      (    cubix_ide.asm):00279         
                      (    cubix_ide.asm):00280         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (    cubix_ide.asm):00281         ;*
                      (    cubix_ide.asm):00282         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (    cubix_ide.asm):00283         ;*
                      (    cubix_ide.asm):00284         ;*____________________________________________________________________________________________________
C2FE                  (    cubix_ide.asm):00285         IDE_WAIT_DRQ:
C2FE 3426             (    cubix_ide.asm):00286                 PSHS    A,B,Y
C300 8600             (    cubix_ide.asm):00287                 LDA     #$00
C302 B7C1A4           (    cubix_ide.asm):00288                 STA     XTIDETIMEOUT
C305 B7C1A5           (    cubix_ide.asm):00289                 STA     XTIDETIMEOUT+1
C308                  (    cubix_ide.asm):00290         IDE_WAIT_DRQ1:
C308 F6130E           (    cubix_ide.asm):00291                 LDB     XTIDE_STATUS                      ;WAIT FOR DRQ BIT TO BE SET
C30B C488             (    cubix_ide.asm):00292                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
C30D C108             (    cubix_ide.asm):00293                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
C30F 2715             (    cubix_ide.asm):00294                 BEQ     IDE_WAIT_DRQ2
C311 C401             (    cubix_ide.asm):00295                 ANDB    #%00000001                        ; IS ERROR?
C313 C101             (    cubix_ide.asm):00296                 CMPB    #%00000001                        ;
C315 270A             (    cubix_ide.asm):00297                 BEQ     IDE_WAIT_DRQE
C317 7CC1A4           (    cubix_ide.asm):00298                 INC     XTIDETIMEOUT
C31A 26EC             (    cubix_ide.asm):00299                 BNE     IDE_WAIT_DRQ1
C31C 7CC1A5           (    cubix_ide.asm):00300                 INC     XTIDETIMEOUT+1
C31F 26E7             (    cubix_ide.asm):00301                 BNE     IDE_WAIT_DRQ1
C321                  (    cubix_ide.asm):00302         IDE_WAIT_DRQE:
C321 1A01             (    cubix_ide.asm):00303                 SEC
C323 7EC328           (    cubix_ide.asm):00304                 JMP     IDE_WAIT_DRQ3
C326                  (    cubix_ide.asm):00305         IDE_WAIT_DRQ2:
C326 1CFE             (    cubix_ide.asm):00306                 CLC
C328                  (    cubix_ide.asm):00307         IDE_WAIT_DRQ3:
C328 35A6             (    cubix_ide.asm):00308                 PULS    PC,A,B,Y
                      (    cubix_ide.asm):00309         
                      (    cubix_ide.asm):00310         
                      (    cubix_ide.asm):00311         
                      (    cubix_ide.asm):00312         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00313         ;*
                      (    cubix_ide.asm):00314         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00315         ;*
                      (    cubix_ide.asm):00316         ;*____________________________________________________________________________________________________
C32A                  (    cubix_ide.asm):00317         IDE_READ_BUFFER:
C32A 108E0000         (    cubix_ide.asm):00318                 LDY     #$0000                            ; INDEX
C32E                  (    cubix_ide.asm):00319         IDEBUFRD:
C32E F61300           (    cubix_ide.asm):00320                 LDB     XTIDE_DATA_LO
C331 E7A90200         (    cubix_ide.asm):00321                 STB     HSTBUF,Y                          ;
C335 3121             (    cubix_ide.asm):00322                 INY
C337 F61301           (    cubix_ide.asm):00323                 LDB     XTIDE_DATA_HI
C33A E7A90200         (    cubix_ide.asm):00324                 STB     HSTBUF,Y                          ;
C33E 3121             (    cubix_ide.asm):00325                 INY
C340 108C0200         (    cubix_ide.asm):00326                 CMPY    #$0200                            ;
C344 26E8             (    cubix_ide.asm):00327                 BNE     IDEBUFRD                          ;
C346 39               (    cubix_ide.asm):00328                 RTS                                       ;
                      (    cubix_ide.asm):00329         
                      (    cubix_ide.asm):00330         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00331         ;*
                      (    cubix_ide.asm):00332         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00333         ;*
                      (    cubix_ide.asm):00334         ;*____________________________________________________________________________________________________
C347                  (    cubix_ide.asm):00335         IDE_WRITE_BUFFER:
C347 108E0000         (    cubix_ide.asm):00336                 LDY     #$0000                            ; INDEX
C34B                  (    cubix_ide.asm):00337         IDEBUFWT:
C34B E6A90200         (    cubix_ide.asm):00338                 LDB     HSTBUF,Y                          ;
C34F F71300           (    cubix_ide.asm):00339                 STB     XTIDE_DATA_LO
C352 3121             (    cubix_ide.asm):00340                 INY
C354 E6A90200         (    cubix_ide.asm):00341                 LDB     HSTBUF,Y                          ;
C358 F71301           (    cubix_ide.asm):00342                 STB     XTIDE_DATA_HI
C35B 3121             (    cubix_ide.asm):00343                 INY
C35D 108C0200         (    cubix_ide.asm):00344                 CMPY    #$0200                            ;
C361 26E8             (    cubix_ide.asm):00345                 BNE     IDEBUFWT                          ;
C363 39               (    cubix_ide.asm):00346                 RTS                                       ;
                      (    cubix_ide.asm):00347         
                      (    cubix_ide.asm):00348         
                      (    cubix_ide.asm):00349         
C364                  (    cubix_ide.asm):00350         MESSAGE1
C364 5050494445203A   (    cubix_ide.asm):00351                 FCC     "PPIDE :"
C36B 00               (    cubix_ide.asm):00352                 FCB     00
C36C                  (    cubix_ide.asm):00353         MESSAGE2
C36C 20494F3D3078     (    cubix_ide.asm):00354                 FCC     " IO=0x"
C372 00               (    cubix_ide.asm):00355                 FCB     00
C373                  (    cubix_ide.asm):00356         MESSAGE3
C373 204E4F5420505245 (    cubix_ide.asm):00357                 FCC     " NOT PRESENT"
     53454E54
C37F 00               (    cubix_ide.asm):00358                 FCB     00
C380                  (    cubix_ide.asm):00359         MESSAGE4
C380 205050494445303A (    cubix_ide.asm):00360                 FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
C390 00               (    cubix_ide.asm):00361                 FCB     00
C391                  (    cubix_ide.asm):00362         MESSAGE5
C391 205050494445313A (    cubix_ide.asm):00363                 FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
C3A1 00               (    cubix_ide.asm):00364                 FCB     00
C3A2                  (    cubix_ide.asm):00365         MESSAGE6
C3A2 3078             (    cubix_ide.asm):00366                 FCC     "0x"
C3A4 00               (    cubix_ide.asm):00367                 FCB     00
                      (    cubix_ide.asm):00368         
                      (    cubix_ide.asm):00369         
                      (    cubix_ide.asm):00370         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (    cubix_ide.asm):00371         ;*
                      (    cubix_ide.asm):00372         ;*
                      (    cubix_ide.asm):00373         ;        SETUP   LBA DATA
                      (    cubix_ide.asm):00374         ;*
                      (    cubix_ide.asm):00375         ;*    This assumes the drive is setup for 128 sectors, 128 Cylinders, 4 heads. = 65536 total sectors.
                      (    cubix_ide.asm):00376         ;     LBA ADDRESS   LLLLLLLL CCCCCCCS SSSSSSHH
                      (    cubix_ide.asm):00377         ;     L=SLICE
                      (    cubix_ide.asm):00378         ;     H=HEAD
                      (    cubix_ide.asm):00379         ;     C=CYLINDER
                      (    cubix_ide.asm):00380         ;     S=SECTOR
                      (    cubix_ide.asm):00381         ;*
                      (    cubix_ide.asm):00382         ;*____________________________________________________________________________________________________
C3A5                  (    cubix_ide.asm):00383         IDE_SETUP_LBA:
C3A5 3406             (    cubix_ide.asm):00384                 PSHS    D
C3A7 F60104           (    cubix_ide.asm):00385                 LDB     CURRENTDEVICE
C3AA C401             (    cubix_ide.asm):00386                 ANDB    #$01                              ; only want drive cfg
C3AC 58               (    cubix_ide.asm):00387                 ASLB                                      ; SHIFT 4
C3AD 58               (    cubix_ide.asm):00388                 ASLB                                      ;
C3AE 58               (    cubix_ide.asm):00389                 ASLB                                      ;
C3AF 58               (    cubix_ide.asm):00390                 ASLB                                      ;
C3B0 CAE0             (    cubix_ide.asm):00391                 ORB     #$E0                              ; E0=MST  F0=SLV
C3B2 F7130C           (    cubix_ide.asm):00392                 STB     XTIDE_DEVICE
                      (    cubix_ide.asm):00393         
C3B5 F60105           (    cubix_ide.asm):00394                 LDB     CURRENTSLICE
C3B8 F7130A           (    cubix_ide.asm):00395                 STB     XTIDE_LBAHI
                      (    cubix_ide.asm):00396         
C3BB F60106           (    cubix_ide.asm):00397                 LDB     CURRENTCYL                        ;
C3BE F71308           (    cubix_ide.asm):00398                 STB     XTIDE_LBAMID
                      (    cubix_ide.asm):00399         
C3C1 F60107           (    cubix_ide.asm):00400                 LDB     CURRENTSEC                        ;
C3C4 F71306           (    cubix_ide.asm):00401                 STB     XTIDE_LBALOW
                      (    cubix_ide.asm):00402         
C3C7 C601             (    cubix_ide.asm):00403                 LDB     #$01
C3C9 F71304           (    cubix_ide.asm):00404                 STB     XTIDE_SEC_CNT
                      (    cubix_ide.asm):00405         
C3CC 3586             (    cubix_ide.asm):00406                 PULS    D,PC
                      (     cubixdrv.asm):00096         ;        INCLUDE cubix_dskyng.asm
                      (     cubixdrv.asm):00097         ;        INCLUDE cubix_floppy.asm
                      (     cubixdrv.asm):00098         ;        INCLUDE cubix_fp.asm
                      (     cubixdrv.asm):00099         ;        INCLUDE cubix_i2c.asm
                      (     cubixdrv.asm):00100         ;        INCLUDE cubix_esp32.asm
                      (     cubixdrv.asm):00101         ;        INCLUDE cubix_dsky.asm
                      (     cubixdrv.asm):00102         
                      (     cubixdrv.asm):00103         
                      (     cubixdrv.asm):00104         
C3CE                  (     cubixdrv.asm):00105         drv_noop:
C3CE 39               (     cubixdrv.asm):00106                 RTS
                      (     cubixdrv.asm):00107         
                      (     cubixdrv.asm):00108         ;*
                      (     cubixdrv.asm):00109         ;* OUTPUT LFCR TO CONSOLE
                      (     cubixdrv.asm):00110         ;*
C3CF                  (     cubixdrv.asm):00111         LFCR:
C3CF 3406             (     cubixdrv.asm):00112                 PSHS    a,b
C3D1 860A             (     cubixdrv.asm):00113                 LDA     #10
C3D3 8D40             (     cubixdrv.asm):00114                 BSR     PUTCHR
C3D5 860D             (     cubixdrv.asm):00115                 LDA     #13
C3D7 8D3C             (     cubixdrv.asm):00116                 BSR     PUTCHR
C3D9 3586             (     cubixdrv.asm):00117                 PULS    A,B,pc
C3DB                  (     cubixdrv.asm):00118         SPACE:
C3DB 3406             (     cubixdrv.asm):00119                 PSHS    a,b
C3DD 8620             (     cubixdrv.asm):00120                 LDA     #32
C3DF 8D34             (     cubixdrv.asm):00121                 BSR     PUTCHR
C3E1 3586             (     cubixdrv.asm):00122                 PULS    A,B,pc
                      (     cubixdrv.asm):00123         ;*
                      (     cubixdrv.asm):00124         ;* WRITE STRING(X) TO CONSOLE
                      (     cubixdrv.asm):00125         ;*
C3E3                  (     cubixdrv.asm):00126         WRSTR:
C3E3 3406             (     cubixdrv.asm):00127                 PSHS    A,B                               ;SAVE A
C3E5                  (     cubixdrv.asm):00128         WRST1:
C3E5 A680             (     cubixdrv.asm):00129                 LDA     ,X+                               ;GET CHAR
C3E7 2704             (     cubixdrv.asm):00130                 BEQ     WRST2                             ;END, QUIT
C3E9 8D2A             (     cubixdrv.asm):00131                 BSR     PUTCHR
C3EB 20F8             (     cubixdrv.asm):00132                 BRA     WRST1                             ;CONTINUE
C3ED                  (     cubixdrv.asm):00133         WRST2:
C3ED 3586             (     cubixdrv.asm):00134                 PULS    A,B,pc
                      (     cubixdrv.asm):00135         ;*
                      (     cubixdrv.asm):00136         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (     cubixdrv.asm):00137         ;*
C3EF                  (     cubixdrv.asm):00138         WRHEXW
C3EF 3406             (     cubixdrv.asm):00139                 PSHS    d
C3F1 8D08             (     cubixdrv.asm):00140                 BSR     WRHEX                             ;OUTPUT
C3F3 1E89             (     cubixdrv.asm):00141                 EXG     A,B                               ;SWAP
C3F5 8D04             (     cubixdrv.asm):00142                 BSR     WRHEX                             ;OUTPUT
C3F7 1E89             (     cubixdrv.asm):00143                 EXG     A,B                               ;BACK
C3F9 3586             (     cubixdrv.asm):00144                 PULS    d,pc
                      (     cubixdrv.asm):00145         
                      (     cubixdrv.asm):00146         ;*
                      (     cubixdrv.asm):00147         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (     cubixdrv.asm):00148         ;*
C3FB                  (     cubixdrv.asm):00149         WRHEX
C3FB 3406             (     cubixdrv.asm):00150                 PSHS    A,B                               ;SAVE IT
C3FD 44               (     cubixdrv.asm):00151                 LSRA                                      ;SHIFT
C3FE 44               (     cubixdrv.asm):00152                 LSRA                                      ;HIGH NIBBLE
C3FF 44               (     cubixdrv.asm):00153                 LSRA                                      ;INTO
C400 44               (     cubixdrv.asm):00154                 LSRA                                      ;LOW NIBBLE
C401 8D06             (     cubixdrv.asm):00155                 BSR     HOUT                              ;HIGH
C403 A6E4             (     cubixdrv.asm):00156                 LDA     ,S                                ;GET LOW
C405 8D02             (     cubixdrv.asm):00157                 BSR     HOUT                              ;OUTPUT
C407 3586             (     cubixdrv.asm):00158                 PULS    A,B,PC                            ;RESTORE IT
                      (     cubixdrv.asm):00159         ;* OUTPUT NIBBLE IN HEX
C409                  (     cubixdrv.asm):00160         HOUT
C409 840F             (     cubixdrv.asm):00161                 ANDA    #%00001111                        ;REMOVE HIGH
C40B 8B30             (     cubixdrv.asm):00162                 ADDA    #'0'                              ;CONVERT
C40D 8139             (     cubixdrv.asm):00163                 CMPA    #'9'                              ;OK?
C40F 2304             (     cubixdrv.asm):00164                 BLS     PUTCHR                            ;OK, OUTPUT
C411 8B07             (     cubixdrv.asm):00165                 ADDA    #7                                ;CONVERT TO 'A'-'F'
C413 2000             (     cubixdrv.asm):00166                 BRA     PUTCHR                            ;OUTPUT
C415                  (     cubixdrv.asm):00167         PUTCHR:
C415 7EC184           (     cubixdrv.asm):00168                 JMP     WRSER1
C418 3404             (     cubixdrv.asm):00169                 PSHS    B
C41A 3402             (     cubixdrv.asm):00170                 PSHS    A
C41C 58               (     cubixdrv.asm):00171                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
C41D 8600             (     cubixdrv.asm):00172                 LDA     #$00
C41F F60100           (     cubixdrv.asm):00173                 LDB     CONSOLEDEVICE
C422 1F01             (     cubixdrv.asm):00174                 TFR     D,X
C424 EC89C113         (     cubixdrv.asm):00175                 LDD     DISPATCHTABLE,X
C428 FD0101           (     cubixdrv.asm):00176                 STD     farpointer
C42B 3502             (     cubixdrv.asm):00177                 PULS    A
C42D AD9F0101         (     cubixdrv.asm):00178                 JSR     [farpointer]
C431 3504             (     cubixdrv.asm):00179                 PULS    B
C433 39               (     cubixdrv.asm):00180                 RTS
                      (     cubixdrv.asm):00181         
                      (     cubixdrv.asm):00182                 END

Symbol Table:
[ G] BANKED_DRIVER_DISPATCHER         C100
[ G] CONSOLEDEVICE                    0100
[ G] CUBIX_IO_BASE                    1000
[ G] CURRENTCYL                       0106
[ G] CURRENTDEVICE                    0104
[ G] CURRENTHEAD                      0108
[ G] CURRENTSEC                       0107
[ G] CURRENTSLICE                     0105
[ G] DISKERROR                        0103
[ G] DISPATCHTABLE                    C113
[ G] drv_noop                         C3CE
[ G] farpointer                       0101
[ G] FUNCTION_DISPATCHER              C100
[ G] HOUT                             C409
[ G] HSTBUF                           0200
[ G] IDE_ABORT                        C1C6
[ G] IDE_INITA                        C1E8
[ G] IDE_PRINT_INFO                   C1CF
[ G] IDE_READ_BUFFER                  C32A
[ G] IDE_READ_INFO                    C230
[ G] IDE_READ_INFO_ABORT              C283
[ G] IDE_READ_INFO_OK                 C28F
[ G] IDE_READ_SECTOR                  C295
[ G] IDE_READ_SECTOR_1                C29A
[ G] IDE_READ_SECTOR_ERROR            C2AF
[ G] IDE_SETUP_LBA                    C3A5
[ G] IDE_WAIT_DRQ                     C2FE
[ G] IDE_WAIT_DRQ1                    C308
[ G] IDE_WAIT_DRQ2                    C326
[ G] IDE_WAIT_DRQ3                    C328
[ G] IDE_WAIT_DRQE                    C321
[ G] IDE_WAIT_NOT_BUSY                C2DA
[ G] IDE_WAIT_NOT_BUSY1               C2E4
[ G] IDE_WAIT_NOT_BUSY2               C2FA
[ G] IDE_WAIT_NOT_BUSY3               C2FC
[ G] IDE_WRITE_BUFFER                 C347
[ G] IDE_WRITE_SECTOR                 C2B5
[ G] IDE_WRITE_SECTOR_ERROR           C2D4
[ G] IDEBUFRD                         C32E
[ G] IDEBUFWT                         C34B
[ G] LFCR                             C3CF
[ G] MESSAGE1                         C364
[ G] MESSAGE2                         C36C
[ G] MESSAGE3                         C373
[ G] MESSAGE4                         C380
[ G] MESSAGE5                         C391
[ G] MESSAGE6                         C3A2
[ G] PAGER_D                          0109
[ G] PAGER_S                          010F
[ G] PAGER_U                          0111
[ G] PAGER_X                          010B
[ G] PAGER_Y                          010D
[ G] PUTCHR                           C415
[ G] RDSER1                           C18F
[ G] SERIALINIT                       C173
[ G] SPACE                            C3DB
[ G] UART1COMMAND                     1F86
[ G] UART1CONTROL                     1F87
[ G] UART1DATA                        1F84
[ G] UART1STATUS                      1F85
[ G] WRHEX                            C3FB
[ G] WRHEXW                           C3EF
[ G] WRSER1                           C184
[ G] WRST1                            C3E5
[ G] WRST2                            C3ED
[ G] WRSTR                            C3E3
[ G] XTIDE_CMD_FEAT                   00EF
[ G] XTIDE_CMD_ID                     00EC
[ G] XTIDE_CMD_INIT                   0091
[ G] XTIDE_CMD_READ                   0020
[ G] XTIDE_CMD_RECAL                  0010
[ G] XTIDE_CMD_SPINDOWN               00E0
[ G] XTIDE_CMD_SPINUP                 00E1
[ G] XTIDE_CMD_WRITE                  0030
[ G] XTIDE_COMMAND                    130E
[ G] XTIDE_DATA_HI                    1301
[ G] XTIDE_DATA_LO                    1300
[ G] XTIDE_DEVICE                     130C
[ G] XTIDE_ERR                        1302
[ G] XTIDE_FECODE                     1302
[ G] XTIDE_INIT                       C1A6
[ G] XTIDE_LBAHI                      130A
[ G] XTIDE_LBALOW                     1306
[ G] XTIDE_LBAMID                     1308
[ G] XTIDE_PROBE                      C1EC
[ G] XTIDE_PROBE_FAIL                 C22D
[ G] XTIDE_PROBE_SUCCESS              C22F
[ G] XTIDE_SEC_CNT                    1304
[ G] XTIDE_STATUS                     130E
[ G] XTIDETIMEOUT                     C1A4
