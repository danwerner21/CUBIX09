                      (     cubixdrv.asm):00001         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00002         ;
                      (     cubixdrv.asm):00003         ;       6809PC Cubix banked driver code
                      (     cubixdrv.asm):00004         ;
                      (     cubixdrv.asm):00005         ;  DWERNER 5/17/2025    Initial
                      (     cubixdrv.asm):00006         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00007         
                      (     cubixdrv.asm):00008         ;*
                      (     cubixdrv.asm):00009                 INCLUDE cubix_values.asm
                      ( cubix_values.asm):00001         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00002         ;
                      ( cubix_values.asm):00003         ;       6809PC Cubix System storage locations
                      ( cubix_values.asm):00004         ;
                      ( cubix_values.asm):00005         ;  DWERNER 5/17/2025    Initial
                      ( cubix_values.asm):00006         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00007         ; $0000-$00FF DRIVER/PAGER STACK
                      ( cubix_values.asm):00008         ; $0100-$01FF OS Driver Storage
     0100             ( cubix_values.asm):00009         consoleConnect  = $0100
     0101             ( cubix_values.asm):00010         farpointer      = $0101
     0103             ( cubix_values.asm):00011         DISKERROR       = $0103
     0104             ( cubix_values.asm):00012         CURRENTDEVICE   = $0104
     0105             ( cubix_values.asm):00013         CURRENTSLICE    = $0105
     0106             ( cubix_values.asm):00014         CURRENTCYL      = $0106
     0107             ( cubix_values.asm):00015         CURRENTSEC      = $0107
     0108             ( cubix_values.asm):00016         CURRENTHEAD     = $0108
     0109             ( cubix_values.asm):00017         PAGER_D         = $0109
     010B             ( cubix_values.asm):00018         PAGER_X         = $010B
     010D             ( cubix_values.asm):00019         PAGER_Y         = $010D
     010F             ( cubix_values.asm):00020         PAGER_S         = $010F
     0111             ( cubix_values.asm):00021         PAGER_U         = $0111
                      ( cubix_values.asm):00022         
                      ( cubix_values.asm):00023         
                      ( cubix_values.asm):00024         ; $200-$3FF Host Buffer Driver Storage
     0200             ( cubix_values.asm):00025         HSTBUF          = $0200
                      ( cubix_values.asm):00026         ; $400-$7FF OS LOCAL STORAGE
                      ( cubix_values.asm):00027         ; $1000-$1FFF Hardware Access Window
     1000             ( cubix_values.asm):00028         CUBIX_IO_BASE   = $1000                           ; BIOS DEFAULT IO LOCATION
                      ( cubix_values.asm):00029         ; $2000-$DFFF User RAM
                      ( cubix_values.asm):00030         ; $E000-$FFFF CUBIX
                      ( cubix_values.asm):00031         
     C100             ( cubix_values.asm):00032         BANKED_DRIVER_DISPATCHER = $C100
                      (     cubixdrv.asm):00010         ;*
                      (     cubixdrv.asm):00011         
                      (     cubixdrv.asm):00012                 ORG     $C100
                      (     cubixdrv.asm):00013         
                      (     cubixdrv.asm):00014         ;__DISPATCHER________________________________________________________________________________________
                      (     cubixdrv.asm):00015         ;
                      (     cubixdrv.asm):00016         ;  Function dispatcher
                      (     cubixdrv.asm):00017         ;  function to call is located in "farfunct"
                      (     cubixdrv.asm):00018         ;____________________________________________________________________________________________________
                      (     cubixdrv.asm):00019         ;
C100                  (     cubixdrv.asm):00020         FUNCTION_DISPATCHER:
                      (     cubixdrv.asm):00021         
C100 58               (     cubixdrv.asm):00022                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
C101 8600             (     cubixdrv.asm):00023                 LDA     #$00
C103 1F01             (     cubixdrv.asm):00024                 TFR     D,X
C105 EC89C113         (     cubixdrv.asm):00025                 LDD     DISPATCHTABLE,X
C109 FD0101           (     cubixdrv.asm):00026                 STD     farpointer
C10C FC0109           (     cubixdrv.asm):00027                 LDD     >PAGER_D                          ; RESTORE 'D'
C10F 6E9F0101         (     cubixdrv.asm):00028                 JMP     [farpointer]
                      (     cubixdrv.asm):00029         
                      (     cubixdrv.asm):00030         
C113                  (     cubixdrv.asm):00031         DISPATCHTABLE:
C113 C1AD             (     cubixdrv.asm):00032                 .WORD   WRSER1                            ; FUNCTION 00 - WRITE SERIAL PORT
C115 C1B8             (     cubixdrv.asm):00033                 .WORD   RDSER1                            ; FUNCTION 01 - READ SERIAL PORT
C117 C19D             (     cubixdrv.asm):00034                 .WORD   SERIALINIT                        ; FUNCTION 02 - SERIAL PORT INIT
                      (     cubixdrv.asm):00035         
C119 CADE             (     cubixdrv.asm):00036                 .WORD   ESPVIDEOOUT                       ; FUNCTION 03 - WRITE ESP VIDEO
C11B CAEB             (     cubixdrv.asm):00037                 .WORD   ESPPS2IN                          ; FUNCTION 04 - READ ESP KEYBOARD
C11D C93F             (     cubixdrv.asm):00038                 .WORD   ESPINIT                           ; FUNCTION 05 - INIT ESP
                      (     cubixdrv.asm):00039         
C11F CE67             (     cubixdrv.asm):00040                 .WORD   drv_noop                          ; FUNCTION 06
C121 CE67             (     cubixdrv.asm):00041                 .WORD   drv_noop                          ; FUNCTION 07
C123 CE67             (     cubixdrv.asm):00042                 .WORD   drv_noop                          ; FUNCTION 08
                      (     cubixdrv.asm):00043         
C125 CE67             (     cubixdrv.asm):00044                 .WORD   drv_noop                          ; FUNCTION 09
C127 CE67             (     cubixdrv.asm):00045                 .WORD   drv_noop                          ; FUNCTION 10
C129 CE67             (     cubixdrv.asm):00046                 .WORD   drv_noop                          ; FUNCTION 11
                      (     cubixdrv.asm):00047         
C12B CE67             (     cubixdrv.asm):00048                 .WORD   drv_noop                          ; FUNCTION 12
C12D CE67             (     cubixdrv.asm):00049                 .WORD   drv_noop                          ; FUNCTION 13
C12F CE67             (     cubixdrv.asm):00050                 .WORD   drv_noop                          ; FUNCTION 14
                      (     cubixdrv.asm):00051         
C131 CE67             (     cubixdrv.asm):00052                 .WORD   drv_noop                          ; FUNCTION 15 - called during OS init
C133 CE67             (     cubixdrv.asm):00053                 .WORD   drv_noop                          ; FUNCTION 16 - read a sector from drive
C135 CE67             (     cubixdrv.asm):00054                 .WORD   drv_noop                          ; FUNCTION 17 - write a sector to drive
                      (     cubixdrv.asm):00055         ;
C137 CE67             (     cubixdrv.asm):00056                 .WORD   drv_noop                          ;FL_SETUP                          ; FUNCTION 18 - init floppy device
C139 CE67             (     cubixdrv.asm):00057                 .WORD   drv_noop                          ;FL_READ_SECTOR                    ; FUNCTION 19 - read a sector from floppy device
C13B CE67             (     cubixdrv.asm):00058                 .WORD   drv_noop                          ;FL_WRITE_SECTOR                   ; FUNCTION 20 - write a sector to floppy device
                      (     cubixdrv.asm):00059         ;
C13D C1CF             (     cubixdrv.asm):00060                 .WORD   XTIDE_INIT                        ; FUNCTION 21 - init XT IDE device
C13F C2B9             (     cubixdrv.asm):00061                 .WORD   IDE_READ_SECTOR                   ; FUNCTION 22 - read a sector from XT IDE device
C141 C346             (     cubixdrv.asm):00062                 .WORD   IDE_WRITE_SECTOR                  ; FUNCTION 23 - write a sector to XT IDE device
                      (     cubixdrv.asm):00063         ;
C143 CBC9             (     cubixdrv.asm):00064                 .WORD   CH375INIT                         ; FUNCTION 24 - init CH375 USB device
C145 CD59             (     cubixdrv.asm):00065                 .WORD   CH_READSEC                        ; FUNCTION 25 - read a sector from CH375 USB device
C147 CD99             (     cubixdrv.asm):00066                 .WORD   CH_WRITESEC                       ; FUNCTION 26 - write a sector to CH375 USB device
                      (     cubixdrv.asm):00067         ;
C149 CE67             (     cubixdrv.asm):00068                 .WORD   drv_noop                          ; FUNCTION 27 -
C14B CE67             (     cubixdrv.asm):00069                 .WORD   drv_noop                          ; FUNCTION 28 -
C14D CE67             (     cubixdrv.asm):00070                 .WORD   drv_noop                          ; FUNCTION 29 -
                      (     cubixdrv.asm):00071         ;
C14F CE67             (     cubixdrv.asm):00072                 .WORD   drv_noop                          ; FUNCTION 30 -
C151 CE67             (     cubixdrv.asm):00073                 .WORD   drv_noop                          ; FUNCTION 31 -
C153 CE67             (     cubixdrv.asm):00074                 .WORD   drv_noop                          ; FUNCTION 32 -
                      (     cubixdrv.asm):00075         ;
C155 CE67             (     cubixdrv.asm):00076                 .WORD   drv_noop                          ; FUNCTION 33 -
C157 CE67             (     cubixdrv.asm):00077                 .WORD   drv_noop                          ; FUNCTION 34 -
C159 CE67             (     cubixdrv.asm):00078                 .WORD   drv_noop                          ; FUNCTION 35 -
                      (     cubixdrv.asm):00079         ;
C15B CE67             (     cubixdrv.asm):00080                 .WORD   drv_noop                          ; FUNCTION 36 -
C15D CE67             (     cubixdrv.asm):00081                 .WORD   drv_noop                          ; FUNCTION 37 -
C15F CE67             (     cubixdrv.asm):00082                 .WORD   drv_noop                          ; FUNCTION 38 -
                      (     cubixdrv.asm):00083         ;
C161 CE67             (     cubixdrv.asm):00084                 .WORD   drv_noop                          ; FUNCTION 39 -
C163 CE67             (     cubixdrv.asm):00085                 .WORD   drv_noop                          ; FUNCTION 40 -
C165 CE67             (     cubixdrv.asm):00086                 .WORD   drv_noop                          ; FUNCTION 41 -
                      (     cubixdrv.asm):00087         ;
C167 CE67             (     cubixdrv.asm):00088                 .WORD   drv_noop                          ; FUNCTION 42 -
C169 CE67             (     cubixdrv.asm):00089                 .WORD   drv_noop                          ; FUNCTION 43 -
C16B CE67             (     cubixdrv.asm):00090                 .WORD   drv_noop                          ; FUNCTION 44 -
                      (     cubixdrv.asm):00091         ;
C16D CE67             (     cubixdrv.asm):00092                 .WORD   drv_noop                          ; FUNCTION 45 -
C16F CE67             (     cubixdrv.asm):00093                 .WORD   drv_noop                          ; FUNCTION 46 -
C171 CE67             (     cubixdrv.asm):00094                 .WORD   drv_noop                          ; FUNCTION 47 -
                      (     cubixdrv.asm):00095         ;
C173 CE67             (     cubixdrv.asm):00096                 .WORD   drv_noop                          ; FUNCTION 48 -
C175 CE67             (     cubixdrv.asm):00097                 .WORD   drv_noop                          ; FUNCTION 49 -
C177 CE67             (     cubixdrv.asm):00098                 .WORD   drv_noop                          ; FUNCTION 50 -
                      (     cubixdrv.asm):00099         ;
C179 C3FF             (     cubixdrv.asm):00100                 .WORD   MULTIOINIT                        ; FUNCTION 51 - INIT MULTI IO CARD
C17B C549             (     cubixdrv.asm):00101                 .WORD   KBD_GETKEY                        ; FUNCTION 52 - KEYBOARD INPUT
C17D C914             (     cubixdrv.asm):00102                 .WORD   LPT_OUT                           ; FUNCTION 53 - LPT OUTPUT
                      (     cubixdrv.asm):00103         ;
C17F CA97             (     cubixdrv.asm):00104                 .WORD   ESPPS2BUFL                        ; FUNCTION 54 - return number of characters in the keyboard buffer in 'A'
C181 CA33             (     cubixdrv.asm):00105                 .WORD   ESPCURSORV                        ; FUNCTION 55 - Set Cursor Visibility (A=0 cursor off, A=1 cursor on)
C183 CA40             (     cubixdrv.asm):00106                 .WORD   ESPSER0OUT                        ; FUNCTION 56 - OUTPUT A CHARACTER TO Serial 0 ('A' POINTS TO BYTE)
C185 CA4D             (     cubixdrv.asm):00107                 .WORD   ESPSER0IN                         ; FUNCTION 57 - read a character from Serial 0 ('A' POINTS TO BYTE)
C187 CAAD             (     cubixdrv.asm):00108                 .WORD   ESPSER0BUFL                       ; FUNCTION 58 - return number of characters in the Serial 0 buffer in 'A'
C189 CA52             (     cubixdrv.asm):00109                 .WORD   ESPSER1OUT                        ; FUNCTION 59 - OUTPUT A CHARACTER TO Serial 1 ('A' POINTS TO BYTE)
C18B CA5F             (     cubixdrv.asm):00110                 .WORD   ESPSER1IN                         ; FUNCTION 60 - read a character from Serial 1 ('A' POINTS TO BYTE)
C18D CAC3             (     cubixdrv.asm):00111                 .WORD   ESPSER1BUFL                       ; FUNCTION 61 - return number of characters in the Serial 1 buffer in 'A'
C18F CA79             (     cubixdrv.asm):00112                 .WORD   ESPNETCOUT                        ; FUNCTION 62 - OUTPUT A CHARACTER TO Network Console Connection ('A' POINTS TO BYTE)
C191 CA8C             (     cubixdrv.asm):00113                 .WORD   ESPNETCIN                         ; FUNCTION 63 - read a character from Network Console Connection ('A' POINTS TO BYTE)
C193 CAD9             (     cubixdrv.asm):00114                 .WORD   ESPNETCBUFL                       ; FUNCTION 64 - return number of characters in the Network Connection buffer in 'A'
C195 CB05             (     cubixdrv.asm):00115                 .WORD   PUTESP0                           ; FUNCTION 65 - put opcode/data to ESP0
C197 CB52             (     cubixdrv.asm):00116                 .WORD   PUTESP1                           ; FUNCTION 66 - put opcode/data to ESP1
C199 CB22             (     cubixdrv.asm):00117                 .WORD   GETESP0                           ; FUNCTION 67 - get opcode/data from ESP0
C19B CB6F             (     cubixdrv.asm):00118                 .WORD   GETESP1                           ; FUNCTION 68 - get opcode/data from ESP1
                      (     cubixdrv.asm):00119         
                      (     cubixdrv.asm):00120         ;__DRIVERS___________________________________________________________________________________________
                      (     cubixdrv.asm):00121         ;
                      (     cubixdrv.asm):00122                 INCLUDE cubix_serial.asm
                      ( cubix_serial.asm):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00002         ;
                      ( cubix_serial.asm):00003         ;       CUBIX serial drivers for 6809PC
                      ( cubix_serial.asm):00004         ;
                      ( cubix_serial.asm):00005         ;       Entry points:
                      ( cubix_serial.asm):00006         ;               SERIALINIT  - called during OS init
                      ( cubix_serial.asm):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00009         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00010         ;
                      ( cubix_serial.asm):00011         ;*
                      ( cubix_serial.asm):00012         ;*        HARDWARE I/O ADDRESSES
                      ( cubix_serial.asm):00013         ;*
                      ( cubix_serial.asm):00014         ; UART 6551 SERIAL
     1F84             ( cubix_serial.asm):00015         UART1DATA       EQU CUBIX_IO_BASE+$F84            ; SERIAL PORT 1 (I/O Card)
     1F85             ( cubix_serial.asm):00016         UART1STATUS     EQU CUBIX_IO_BASE+$F85            ; SERIAL PORT 1 (I/O Card)
     1F86             ( cubix_serial.asm):00017         UART1COMMAND    EQU CUBIX_IO_BASE+$F86            ; SERIAL PORT 1 (I/O Card)
     1F87             ( cubix_serial.asm):00018         UART1CONTROL    EQU CUBIX_IO_BASE+$F87            ; SERIAL PORT 1 (I/O Card)
                      ( cubix_serial.asm):00019         
                      ( cubix_serial.asm):00020         
                      ( cubix_serial.asm):00021         
                      ( cubix_serial.asm):00022         ;__SERIALINIT____________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00023         ;
                      ( cubix_serial.asm):00024         ;       INITIALIZE SERIAL PORTS
                      ( cubix_serial.asm):00025         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00026         ;
C19D                  ( cubix_serial.asm):00027         SERIALINIT:
C19D 8600             ( cubix_serial.asm):00028                 LDA     #$00                              ; RESET UART
C19F B71F85           ( cubix_serial.asm):00029                 STA     UART1STATUS                       ;
C1A2 860B             ( cubix_serial.asm):00030                 LDA     #$0B                              ;
C1A4 B71F86           ( cubix_serial.asm):00031                 STA     UART1COMMAND                      ;
C1A7 861E             ( cubix_serial.asm):00032                 LDA     #$1E                              ; 9600, 8 BITS, NO PARITY, 1 STOP BIT
C1A9 B71F87           ( cubix_serial.asm):00033                 STA     UART1CONTROL                      ;
C1AC 39               ( cubix_serial.asm):00034                 RTS
                      ( cubix_serial.asm):00035         
                      ( cubix_serial.asm):00036         ;__WRSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00037         ;
                      ( cubix_serial.asm):00038         ;       WRITE CHARACTER(A) TO UART
                      ( cubix_serial.asm):00039         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00040         ;
C1AD                  ( cubix_serial.asm):00041         WRSER1
                      ( cubix_serial.asm):00042         !
C1AD F61F85           ( cubix_serial.asm):00043                 LDB     UART1STATUS                       ; GET STATUS
C1B0 C410             ( cubix_serial.asm):00044                 ANDB    #%00010000                        ; IS TX READY
C1B2 27F9             ( cubix_serial.asm):00045                 BEQ     <                                 ; IF NOT REPEAT
C1B4 B71F84           ( cubix_serial.asm):00046                 STA     UART1DATA                         ; WRITE DATA
C1B7 39               ( cubix_serial.asm):00047                 RTS
                      ( cubix_serial.asm):00048         
                      ( cubix_serial.asm):00049         ;__RDSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00050         ;
                      ( cubix_serial.asm):00051         ;       READ CHARACTER FROM UART TO (A)
                      ( cubix_serial.asm):00052         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00053         ;
C1B8                  ( cubix_serial.asm):00054         RDSER1
C1B8 B61F85           ( cubix_serial.asm):00055                 LDA     UART1STATUS                       ; GET STATUS REGISTER
C1BB 8408             ( cubix_serial.asm):00056                 ANDA    #%00001000                        ; IS RX READY
C1BD 2708             ( cubix_serial.asm):00057                 BEQ     >                                 ; No DATA IS READY
C1BF B61F84           ( cubix_serial.asm):00058                 LDA     UART1DATA                         ; GET DATA CHAR
C1C2 B70109           ( cubix_serial.asm):00059                 STA     >PAGER_D                          ; SAVE 'D'
C1C5 39               ( cubix_serial.asm):00060                 RTS
                      ( cubix_serial.asm):00061         
C1C6 39               ( cubix_serial.asm):00062                 RTS
                      ( cubix_serial.asm):00063         !
C1C7 86FF             ( cubix_serial.asm):00064                 LDA     #$FF                              ;
C1C9 B70109           ( cubix_serial.asm):00065                 STA     >PAGER_D                          ; SAVE 'D'
C1CC 39               ( cubix_serial.asm):00066                 RTS                                       ;
                      (     cubixdrv.asm):00123                 INCLUDE cubix_ide.asm
                      (    cubix_ide.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00002         ;
                      (    cubix_ide.asm):00003         ;       CUBIX IDE disk drivers 6809PC - XT IDE ISA CARD
                      (    cubix_ide.asm):00004         ;
                      (    cubix_ide.asm):00005         ;       Entry points:
                      (    cubix_ide.asm):00006         ;               XTIDE_INIT      - CALLED DURING OS INIT
                      (    cubix_ide.asm):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00009         ;________________________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00010         ;
                      (    cubix_ide.asm):00011         
     1300             (    cubix_ide.asm):00012         XTIDE_DATA_LO   = CUBIX_IO_BASE+$300
     1301             (    cubix_ide.asm):00013         XTIDE_DATA_HI   = CUBIX_IO_BASE+$301
     1302             (    cubix_ide.asm):00014         XTIDE_ERR       = CUBIX_IO_BASE+$302
     1302             (    cubix_ide.asm):00015         XTIDE_FECODE    = CUBIX_IO_BASE+$302
     1304             (    cubix_ide.asm):00016         XTIDE_SEC_CNT   = CUBIX_IO_BASE+$304
     1306             (    cubix_ide.asm):00017         XTIDE_LBALOW    = CUBIX_IO_BASE+$306
     1308             (    cubix_ide.asm):00018         XTIDE_LBAMID    = CUBIX_IO_BASE+$308
     130A             (    cubix_ide.asm):00019         XTIDE_LBAHI     = CUBIX_IO_BASE+$30A
     130C             (    cubix_ide.asm):00020         XTIDE_DEVICE    = CUBIX_IO_BASE+$30C
     130E             (    cubix_ide.asm):00021         XTIDE_COMMAND   = CUBIX_IO_BASE+$30E
     130E             (    cubix_ide.asm):00022         XTIDE_STATUS    = CUBIX_IO_BASE+$30E
                      (    cubix_ide.asm):00023         
                      (    cubix_ide.asm):00024         
                      (    cubix_ide.asm):00025         
                      (    cubix_ide.asm):00026         
                      (    cubix_ide.asm):00027         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (    cubix_ide.asm):00028         XTIDE_CMD_RECAL = $10
     0020             (    cubix_ide.asm):00029         XTIDE_CMD_READ  = $20
     0030             (    cubix_ide.asm):00030         XTIDE_CMD_WRITE = $30
     0091             (    cubix_ide.asm):00031         XTIDE_CMD_INIT  = $91
     00EC             (    cubix_ide.asm):00032         XTIDE_CMD_ID    = $EC
     00EF             (    cubix_ide.asm):00033         XTIDE_CMD_FEAT  = $EF
     00E0             (    cubix_ide.asm):00034         XTIDE_CMD_SPINDOWN = $E0
     00E1             (    cubix_ide.asm):00035         XTIDE_CMD_SPINUP = $E1
                      (    cubix_ide.asm):00036         
                      (    cubix_ide.asm):00037         
                      (    cubix_ide.asm):00038                 IFDEF   BIOS6809PC
C1CD                  (    cubix_ide.asm):00039         XTIDE_INIT:
                      (    cubix_ide.asm):00040                 JSR     XTIDE_PROBE
                      (    cubix_ide.asm):00041                 LDA     #$E0                              ; E0=MST  F0=SLV
                      (    cubix_ide.asm):00042                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00043         
                      (    cubix_ide.asm):00044                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
                      (    cubix_ide.asm):00045                 BCS     >
                      (    cubix_ide.asm):00046         
                      (    cubix_ide.asm):00047                 LDA     #$01                              ; ENABLE 8-BIT MODE (XT-CF-LITE)
                      (    cubix_ide.asm):00048                 STA     XTIDE_FECODE
                      (    cubix_ide.asm):00049                 LDA     #XTIDE_CMD_FEAT
                      (    cubix_ide.asm):00050                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00051         !
                      (    cubix_ide.asm):00052                 RTS
                      (    cubix_ide.asm):00053                 ENDIF
                      (    cubix_ide.asm):00054         
                      (    cubix_ide.asm):00055         
                      (    cubix_ide.asm):00056                 IFNDEF  BIOS6809PC
C1CD                  (    cubix_ide.asm):00057         XTIDETIMEOUT:
C1CD 0000             (    cubix_ide.asm):00058                 .BYTE   $00,$00
                      (    cubix_ide.asm):00059         
                      (    cubix_ide.asm):00060         
                      (    cubix_ide.asm):00061         
                      (    cubix_ide.asm):00062         ;__XTIDE_INIT________________________________________________________________________________________
                      (    cubix_ide.asm):00063         ;
                      (    cubix_ide.asm):00064         ;  INIT AND DISPLAY IDE INFO
                      (    cubix_ide.asm):00065         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00066         ;
C1CF                  (    cubix_ide.asm):00067         XTIDE_INIT:
C1CF BDCE68           (    cubix_ide.asm):00068                 JSR     LFCR                              ; AND CRLF
C1D2 8EC388           (    cubix_ide.asm):00069                 LDX     #MESSAGE1
C1D5 BDCE7C           (    cubix_ide.asm):00070                 JSR     WRSTR                             ; DO PROMPT
C1D8 BDCE68           (    cubix_ide.asm):00071                 JSR     LFCR                              ; AND CRLF
                      (    cubix_ide.asm):00072         ;
C1DB 8EC390           (    cubix_ide.asm):00073                 LDX     #MESSAGE2
C1DE BDCE7C           (    cubix_ide.asm):00074                 JSR     WRSTR                             ; DO PROMPT
C1E1 CC1300           (    cubix_ide.asm):00075                 LDD     #XTIDE_DATA_LO                    ; GET BASE PORT
C1E4 BDCE88           (    cubix_ide.asm):00076                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_ide.asm):00077         ;
C1E7 BDC212           (    cubix_ide.asm):00078                 JSR     XTIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
C1EA 2503             (    cubix_ide.asm):00079                 BCS     IDE_ABORT
C1EC 7EC1F8           (    cubix_ide.asm):00080                 JMP     IDE_PRINT_INFO
C1EF                  (    cubix_ide.asm):00081         IDE_ABORT:
C1EF 8EC397           (    cubix_ide.asm):00082                 LDX     #MESSAGE3
C1F2 BDCE7C           (    cubix_ide.asm):00083                 JSR     WRSTR                             ; DO PROMPT
C1F5 7EC211           (    cubix_ide.asm):00084                 JMP     IDE_INITA
C1F8                  (    cubix_ide.asm):00085         IDE_PRINT_INFO:
C1F8 BDCE68           (    cubix_ide.asm):00086                 JSR     LFCR                              ; AND CRLF
C1FB 8EC3A4           (    cubix_ide.asm):00087                 LDX     #MESSAGE4
C1FE BDCE7C           (    cubix_ide.asm):00088                 JSR     WRSTR                             ; DO PROMPT
C201 8600             (    cubix_ide.asm):00089                 LDA     #$00
C203 BDC254           (    cubix_ide.asm):00090                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
C206 8EC3B6           (    cubix_ide.asm):00091                 LDX     #MESSAGE5
C209 BDCE7C           (    cubix_ide.asm):00092                 JSR     WRSTR                             ; DO PROMPT
C20C 8601             (    cubix_ide.asm):00093                 LDA     #$01
C20E BDC254           (    cubix_ide.asm):00094                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
C211                  (    cubix_ide.asm):00095         IDE_INITA:
C211 39               (    cubix_ide.asm):00096                 RTS                                       ; DONE
                      (    cubix_ide.asm):00097                 ENDIF
                      (    cubix_ide.asm):00098         ;
                      (    cubix_ide.asm):00099         ;__XTIDE_PROBE_______________________________________________________________________________________
                      (    cubix_ide.asm):00100         ;
                      (    cubix_ide.asm):00101         ;  XTPROBE FOR IDE HARDWARE
                      (    cubix_ide.asm):00102         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00103         ;
C212                  (    cubix_ide.asm):00104         XTIDE_PROBE:
                      (    cubix_ide.asm):00105         ;
                      (    cubix_ide.asm):00106         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (    cubix_ide.asm):00107         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (    cubix_ide.asm):00108         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (    cubix_ide.asm):00109         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (    cubix_ide.asm):00110         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (    cubix_ide.asm):00111         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (    cubix_ide.asm):00112         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (    cubix_ide.asm):00113         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (    cubix_ide.asm):00114         
                      (    cubix_ide.asm):00115         ; CHECK SIGNATURE
                      (    cubix_ide.asm):00116         
C212 8E0000           (    cubix_ide.asm):00117                 LDX     #$0000
                      (    cubix_ide.asm):00118         ;       SOMETIMES THE CF-XTIDE WILL ONLY READ 80, THIS CAN BE RESET BY WRITING ZEROS UNTIL VALUES ARE PROPERLY READ
                      (    cubix_ide.asm):00119         !
C215 F61300           (    cubix_ide.asm):00120                 LDB     XTIDE_DATA_LO
C218 C180             (    cubix_ide.asm):00121                 CMPB    #$80
C21A 262B             (    cubix_ide.asm):00122                 BNE     >
C21C C600             (    cubix_ide.asm):00123                 LDB     #$00
C21E F71300           (    cubix_ide.asm):00124                 STB     XTIDE_DATA_LO
C221 12               (    cubix_ide.asm):00125                 NOP
C222 F71301           (    cubix_ide.asm):00126                 STB     XTIDE_DATA_HI
C225 12               (    cubix_ide.asm):00127                 NOP
C226 F71306           (    cubix_ide.asm):00128                 STB     XTIDE_LBALOW
C229 12               (    cubix_ide.asm):00129                 NOP
C22A F71308           (    cubix_ide.asm):00130                 STB     XTIDE_LBAMID
C22D 12               (    cubix_ide.asm):00131                 NOP
C22E F7130A           (    cubix_ide.asm):00132                 STB     XTIDE_LBAHI
C231 12               (    cubix_ide.asm):00133                 NOP
C232 F7130C           (    cubix_ide.asm):00134                 STB     XTIDE_DEVICE
C235 12               (    cubix_ide.asm):00135                 NOP
C236 F7130E           (    cubix_ide.asm):00136                 STB     XTIDE_COMMAND
C239 12               (    cubix_ide.asm):00137                 NOP
C23A F7130E           (    cubix_ide.asm):00138                 STB     XTIDE_STATUS
C23D 12               (    cubix_ide.asm):00139                 NOP
C23E 3001             (    cubix_ide.asm):00140                 INX
C240 8C0300           (    cubix_ide.asm):00141                 CPX     #$0300
C243 26D0             (    cubix_ide.asm):00142                 BNE     <
C245 200A             (    cubix_ide.asm):00143                 BRA     XTIDE_PROBE_FAIL                  ; TIMED OUT
                      (    cubix_ide.asm):00144         !
C247 BDC2D9           (    cubix_ide.asm):00145                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C24A 2505             (    cubix_ide.asm):00146                 BCS     XTIDE_PROBE_FAIL
C24C 1CFE             (    cubix_ide.asm):00147                 CLC
C24E 7EC253           (    cubix_ide.asm):00148                 JMP     XTIDE_PROBE_SUCCESS
C251                  (    cubix_ide.asm):00149         XTIDE_PROBE_FAIL:
C251 1A01             (    cubix_ide.asm):00150                 SEC
C253                  (    cubix_ide.asm):00151         XTIDE_PROBE_SUCCESS:
C253 39               (    cubix_ide.asm):00152                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (    cubix_ide.asm):00153         
                      (    cubix_ide.asm):00154                 IFNDEF  BIOS6809PC
                      (    cubix_ide.asm):00155         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (    cubix_ide.asm):00156         ;*
                      (    cubix_ide.asm):00157         ;*  READ IDE INFORMATION
                      (    cubix_ide.asm):00158         ;*      CARRY SET ON ERROR
                      (    cubix_ide.asm):00159         ;*      A=MST/SLV
                      (    cubix_ide.asm):00160         ;*____________________________________________________________________________________________________
C254                  (    cubix_ide.asm):00161         IDE_READ_INFO:
                      (    cubix_ide.asm):00162         ; SET DRIVE BIT
C254 8401             (    cubix_ide.asm):00163                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
C256 48               (    cubix_ide.asm):00164                 ASLA                                      ; SHIFT 4
C257 48               (    cubix_ide.asm):00165                 ASLA                                      ;
C258 48               (    cubix_ide.asm):00166                 ASLA                                      ;
C259 48               (    cubix_ide.asm):00167                 ASLA                                      ;
C25A 8AE0             (    cubix_ide.asm):00168                 ORA     #$E0                              ; E0=MST  F0=SLV
C25C B7130C           (    cubix_ide.asm):00169                 STA     XTIDE_DEVICE
                      (    cubix_ide.asm):00170         
C25F BDC2D9           (    cubix_ide.asm):00171                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C262 2543             (    cubix_ide.asm):00172                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00173         
C264 8601             (    cubix_ide.asm):00174                 LDA     #$01                              ; ENABLE 8-BIT MODE (XT-CF-LITE)
C266 B71302           (    cubix_ide.asm):00175                 STA     XTIDE_FECODE
C269 86EF             (    cubix_ide.asm):00176                 LDA     #XTIDE_CMD_FEAT
C26B B7130E           (    cubix_ide.asm):00177                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00178         
C26E 12               (    cubix_ide.asm):00179                 NOP                                       ; TINY DELAY, JUST IN CASE
C26F 12               (    cubix_ide.asm):00180                 NOP
C270 12               (    cubix_ide.asm):00181                 NOP
C271 12               (    cubix_ide.asm):00182                 NOP
C272 12               (    cubix_ide.asm):00183                 NOP
C273 12               (    cubix_ide.asm):00184                 NOP
C274 12               (    cubix_ide.asm):00185                 NOP
C275 12               (    cubix_ide.asm):00186                 NOP
C276 12               (    cubix_ide.asm):00187                 NOP
C277 12               (    cubix_ide.asm):00188                 NOP
C278 12               (    cubix_ide.asm):00189                 NOP
                      (    cubix_ide.asm):00190         
                      (    cubix_ide.asm):00191         
C279 86EC             (    cubix_ide.asm):00192                 LDA     #XTIDE_CMD_ID                     ; ID COMMAND
C27B B7130E           (    cubix_ide.asm):00193                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00194         
C27E BDC2FD           (    cubix_ide.asm):00195                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
C281 2524             (    cubix_ide.asm):00196                 BCS     IDE_READ_INFO_ABORT
                      (    cubix_ide.asm):00197         
C283 BDC329           (    cubix_ide.asm):00198                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
                      (    cubix_ide.asm):00199         
C286 8EC3C8           (    cubix_ide.asm):00200                 LDX     #MESSAGE6
C289 BDCE7C           (    cubix_ide.asm):00201                 JSR     WRSTR
C28C B6027B           (    cubix_ide.asm):00202                 LDA     HSTBUF+123
C28F BDCE94           (    cubix_ide.asm):00203                 JSR     WRHEX
C292 B6027A           (    cubix_ide.asm):00204                 LDA     HSTBUF+122
C295 BDCE94           (    cubix_ide.asm):00205                 JSR     WRHEX
C298 B60279           (    cubix_ide.asm):00206                 LDA     HSTBUF+121
C29B BDCE94           (    cubix_ide.asm):00207                 JSR     WRHEX
C29E B60278           (    cubix_ide.asm):00208                 LDA     HSTBUF+120
C2A1 BDCE94           (    cubix_ide.asm):00209                 JSR     WRHEX
C2A4 7EC2B3           (    cubix_ide.asm):00210                 JMP     IDE_READ_INFO_OK
C2A7                  (    cubix_ide.asm):00211         IDE_READ_INFO_ABORT:
C2A7 8EC397           (    cubix_ide.asm):00212                 LDX     #MESSAGE3
C2AA BDCE7C           (    cubix_ide.asm):00213                 JSR     WRSTR                             ;DO PROMPT
C2AD BDCE68           (    cubix_ide.asm):00214                 JSR     LFCR                              ;AND CRLF
C2B0 1A01             (    cubix_ide.asm):00215                 SEC
C2B2 39               (    cubix_ide.asm):00216                 RTS                                       ;
C2B3                  (    cubix_ide.asm):00217         IDE_READ_INFO_OK:
C2B3 BDCE68           (    cubix_ide.asm):00218                 JSR     LFCR                              ; AND CRLF
C2B6 1CFE             (    cubix_ide.asm):00219                 CLC
C2B8 39               (    cubix_ide.asm):00220                 RTS
                      (    cubix_ide.asm):00221                 ENDIF
                      (    cubix_ide.asm):00222         
                      (    cubix_ide.asm):00223         
                      (    cubix_ide.asm):00224         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (    cubix_ide.asm):00225         ;*
                      (    cubix_ide.asm):00226         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (    cubix_ide.asm):00227         ;*
                      (    cubix_ide.asm):00228         ;*____________________________________________________________________________________________________
C2B9                  (    cubix_ide.asm):00229         IDE_READ_SECTOR:
C2B9 BDC2D9           (    cubix_ide.asm):00230                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C2BC 2515             (    cubix_ide.asm):00231                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
C2BE                  (    cubix_ide.asm):00232         IDE_READ_SECTOR_1:
                      (    cubix_ide.asm):00233                 IFNDEF  BIOS6809PC
C2BE BDC3CB           (    cubix_ide.asm):00234                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
                      (    cubix_ide.asm):00235                 ENDIF
C2C1 8620             (    cubix_ide.asm):00236                 LDA     #XTIDE_CMD_READ
C2C3 B7130E           (    cubix_ide.asm):00237                 STA     XTIDE_COMMAND
                      (    cubix_ide.asm):00238         
C2C6 BDC2FD           (    cubix_ide.asm):00239                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
C2C9 2508             (    cubix_ide.asm):00240                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
C2CB BDC329           (    cubix_ide.asm):00241                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
C2CE 4F               (    cubix_ide.asm):00242                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
C2CF B70103           (    cubix_ide.asm):00243                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C2D2 39               (    cubix_ide.asm):00244                 RTS
C2D3                  (    cubix_ide.asm):00245         IDE_READ_SECTOR_ERROR:
C2D3 8602             (    cubix_ide.asm):00246                 LDA     #$02                              ; SET ERROR CONDITION
C2D5 B70103           (    cubix_ide.asm):00247                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C2D8 39               (    cubix_ide.asm):00248                 RTS
                      (    cubix_ide.asm):00249         
                      (    cubix_ide.asm):00250         
                      (    cubix_ide.asm):00251         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (    cubix_ide.asm):00252         ;*
                      (    cubix_ide.asm):00253         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (    cubix_ide.asm):00254         ;*
                      (    cubix_ide.asm):00255         ;*____________________________________________________________________________________________________
C2D9                  (    cubix_ide.asm):00256         IDE_WAIT_NOT_BUSY:
C2D9 3406             (    cubix_ide.asm):00257                 PSHS    A,B
C2DB 8600             (    cubix_ide.asm):00258                 LDA     #$00
C2DD B7C1CD           (    cubix_ide.asm):00259                 STA     XTIDETIMEOUT
C2E0 B7C1CE           (    cubix_ide.asm):00260                 STA     XTIDETIMEOUT+1
C2E3                  (    cubix_ide.asm):00261         IDE_WAIT_NOT_BUSY1:
C2E3 F6130E           (    cubix_ide.asm):00262                 LDB     XTIDE_STATUS                      ;WAIT FOR RDY BIT TO BE SET
C2E6 C480             (    cubix_ide.asm):00263                 ANDB    #$80
C2E8 270F             (    cubix_ide.asm):00264                 BEQ     IDE_WAIT_NOT_BUSY2
C2EA 7CC1CD           (    cubix_ide.asm):00265                 INC     XTIDETIMEOUT
C2ED 26F4             (    cubix_ide.asm):00266                 BNE     IDE_WAIT_NOT_BUSY1
C2EF 7CC1CE           (    cubix_ide.asm):00267                 INC     XTIDETIMEOUT+1
C2F2 26EF             (    cubix_ide.asm):00268                 BNE     IDE_WAIT_NOT_BUSY1
C2F4 1A01             (    cubix_ide.asm):00269                 SEC
C2F6 7EC2FB           (    cubix_ide.asm):00270                 JMP     IDE_WAIT_NOT_BUSY3
C2F9                  (    cubix_ide.asm):00271         IDE_WAIT_NOT_BUSY2:
C2F9 1CFE             (    cubix_ide.asm):00272                 CLC
C2FB                  (    cubix_ide.asm):00273         IDE_WAIT_NOT_BUSY3:
C2FB 3586             (    cubix_ide.asm):00274                 PULS    PC,A,B
                      (    cubix_ide.asm):00275         
                      (    cubix_ide.asm):00276         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (    cubix_ide.asm):00277         ;*
                      (    cubix_ide.asm):00278         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (    cubix_ide.asm):00279         ;*
                      (    cubix_ide.asm):00280         ;*____________________________________________________________________________________________________
C2FD                  (    cubix_ide.asm):00281         IDE_WAIT_DRQ:
C2FD 3426             (    cubix_ide.asm):00282                 PSHS    A,B,Y
C2FF 8600             (    cubix_ide.asm):00283                 LDA     #$00
C301 B7C1CD           (    cubix_ide.asm):00284                 STA     XTIDETIMEOUT
C304 B7C1CE           (    cubix_ide.asm):00285                 STA     XTIDETIMEOUT+1
C307                  (    cubix_ide.asm):00286         IDE_WAIT_DRQ1:
C307 F6130E           (    cubix_ide.asm):00287                 LDB     XTIDE_STATUS                      ;WAIT FOR DRQ BIT TO BE SET
C30A C488             (    cubix_ide.asm):00288                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
C30C C108             (    cubix_ide.asm):00289                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
C30E 2715             (    cubix_ide.asm):00290                 BEQ     IDE_WAIT_DRQ2
C310 C401             (    cubix_ide.asm):00291                 ANDB    #%00000001                        ; IS ERROR?
C312 C101             (    cubix_ide.asm):00292                 CMPB    #%00000001                        ;
C314 270A             (    cubix_ide.asm):00293                 BEQ     IDE_WAIT_DRQE
C316 7CC1CD           (    cubix_ide.asm):00294                 INC     XTIDETIMEOUT
C319 26EC             (    cubix_ide.asm):00295                 BNE     IDE_WAIT_DRQ1
C31B 7CC1CE           (    cubix_ide.asm):00296                 INC     XTIDETIMEOUT+1
C31E 26E7             (    cubix_ide.asm):00297                 BNE     IDE_WAIT_DRQ1
C320                  (    cubix_ide.asm):00298         IDE_WAIT_DRQE:
C320 1A01             (    cubix_ide.asm):00299                 SEC
C322 7EC327           (    cubix_ide.asm):00300                 JMP     IDE_WAIT_DRQ3
C325                  (    cubix_ide.asm):00301         IDE_WAIT_DRQ2:
C325 1CFE             (    cubix_ide.asm):00302                 CLC
C327                  (    cubix_ide.asm):00303         IDE_WAIT_DRQ3:
C327 35A6             (    cubix_ide.asm):00304                 PULS    PC,A,B,Y
                      (    cubix_ide.asm):00305         
                      (    cubix_ide.asm):00306         
                      (    cubix_ide.asm):00307         
                      (    cubix_ide.asm):00308         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00309         ;*
                      (    cubix_ide.asm):00310         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00311         ;*
                      (    cubix_ide.asm):00312         ;*____________________________________________________________________________________________________
C329                  (    cubix_ide.asm):00313         IDE_READ_BUFFER:
C329 108E0000         (    cubix_ide.asm):00314                 LDY     #$0000                            ; INDEX
C32D                  (    cubix_ide.asm):00315         IDEBUFRD:
C32D F61300           (    cubix_ide.asm):00316                 LDB     XTIDE_DATA_LO
C330 E7A90200         (    cubix_ide.asm):00317                 STB     HSTBUF,Y                          ;
C334 3121             (    cubix_ide.asm):00318                 INY
C336 F61301           (    cubix_ide.asm):00319                 LDB     XTIDE_DATA_HI
C339 E7A90200         (    cubix_ide.asm):00320                 STB     HSTBUF,Y                          ;
C33D 3121             (    cubix_ide.asm):00321                 INY
C33F 108C0200         (    cubix_ide.asm):00322                 CMPY    #$0200                            ;
C343 26E8             (    cubix_ide.asm):00323                 BNE     IDEBUFRD                          ;
C345 39               (    cubix_ide.asm):00324                 RTS                                       ;
                      (    cubix_ide.asm):00325         
                      (    cubix_ide.asm):00326         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (    cubix_ide.asm):00327         ;*
                      (    cubix_ide.asm):00328         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (    cubix_ide.asm):00329         ;*
                      (    cubix_ide.asm):00330         ;*____________________________________________________________________________________________________
C346                  (    cubix_ide.asm):00331         IDE_WRITE_SECTOR:
C346 BDC2D9           (    cubix_ide.asm):00332                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
C349 251A             (    cubix_ide.asm):00333                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
                      (    cubix_ide.asm):00334                 IFNDEF  BIOS6809PC
C34B BDC3CB           (    cubix_ide.asm):00335                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
                      (    cubix_ide.asm):00336                 ENDIF
C34E 8630             (    cubix_ide.asm):00337                 LDA     #XTIDE_CMD_WRITE
C350 B7130E           (    cubix_ide.asm):00338                 STA     XTIDE_COMMAND
C353 BDC2FD           (    cubix_ide.asm):00339                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
C356 250D             (    cubix_ide.asm):00340                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C358 BDC36B           (    cubix_ide.asm):00341                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
C35B BDC2D9           (    cubix_ide.asm):00342                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
C35E 2505             (    cubix_ide.asm):00343                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
C360 4F               (    cubix_ide.asm):00344                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
C361 B70103           (    cubix_ide.asm):00345                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C364 39               (    cubix_ide.asm):00346                 RTS
C365                  (    cubix_ide.asm):00347         IDE_WRITE_SECTOR_ERROR:
C365 8602             (    cubix_ide.asm):00348                 LDA     #$02
C367 B70103           (    cubix_ide.asm):00349                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
C36A 39               (    cubix_ide.asm):00350                 RTS
                      (    cubix_ide.asm):00351         
                      (    cubix_ide.asm):00352         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00353         ;*
                      (    cubix_ide.asm):00354         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00355         ;*
                      (    cubix_ide.asm):00356         ;*____________________________________________________________________________________________________
C36B                  (    cubix_ide.asm):00357         IDE_WRITE_BUFFER:
C36B 108E0000         (    cubix_ide.asm):00358                 LDY     #$0000                            ; INDEX
C36F                  (    cubix_ide.asm):00359         IDEBUFWT:
C36F E6A90200         (    cubix_ide.asm):00360                 LDB     HSTBUF,Y                          ;
C373 F71300           (    cubix_ide.asm):00361                 STB     XTIDE_DATA_LO
C376 3121             (    cubix_ide.asm):00362                 INY
C378 E6A90200         (    cubix_ide.asm):00363                 LDB     HSTBUF,Y                          ;
C37C F71301           (    cubix_ide.asm):00364                 STB     XTIDE_DATA_HI
C37F 3121             (    cubix_ide.asm):00365                 INY
C381 108C0200         (    cubix_ide.asm):00366                 CMPY    #$0200                            ;
C385 26E8             (    cubix_ide.asm):00367                 BNE     IDEBUFWT                          ;
C387 39               (    cubix_ide.asm):00368                 RTS                                       ;
                      (    cubix_ide.asm):00369         
                      (    cubix_ide.asm):00370         
                      (    cubix_ide.asm):00371                 IFNDEF  BIOS6809PC
C388                  (    cubix_ide.asm):00372         MESSAGE1
C388 58542D4944453A   (    cubix_ide.asm):00373                 FCC     "XT-IDE:"
C38F 00               (    cubix_ide.asm):00374                 FCB     00
C390                  (    cubix_ide.asm):00375         MESSAGE2
C390 20494F3D3078     (    cubix_ide.asm):00376                 FCC     " IO=0x"
C396 00               (    cubix_ide.asm):00377                 FCB     00
C397                  (    cubix_ide.asm):00378         MESSAGE3
C397 204E4F5420505245 (    cubix_ide.asm):00379                 FCC     " NOT PRESENT"
     53454E54
C3A3 00               (    cubix_ide.asm):00380                 FCB     00
C3A4                  (    cubix_ide.asm):00381         MESSAGE4
C3A4 2058542D49444530 (    cubix_ide.asm):00382                 FCC     " XT-IDE0: BLOCKS="
     3A20424C4F434B53
     3D
C3B5 00               (    cubix_ide.asm):00383                 FCB     00
C3B6                  (    cubix_ide.asm):00384         MESSAGE5
C3B6 2058542D49444531 (    cubix_ide.asm):00385                 FCC     " XT-IDE1: BLOCKS="
     3A20424C4F434B53
     3D
C3C7 00               (    cubix_ide.asm):00386                 FCB     00
C3C8                  (    cubix_ide.asm):00387         MESSAGE6
C3C8 3078             (    cubix_ide.asm):00388                 FCC     "0x"
C3CA 00               (    cubix_ide.asm):00389                 FCB     00
                      (    cubix_ide.asm):00390         
                      (    cubix_ide.asm):00391         
                      (    cubix_ide.asm):00392         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (    cubix_ide.asm):00393         ;*
                      (    cubix_ide.asm):00394         ;*
                      (    cubix_ide.asm):00395         ;        SETUP   LBA DATA
                      (    cubix_ide.asm):00396         ;*____________________________________________________________________________________________________
C3CB                  (    cubix_ide.asm):00397         IDE_SETUP_LBA:
C3CB 3406             (    cubix_ide.asm):00398                 PSHS    D
C3CD F60104           (    cubix_ide.asm):00399                 LDB     CURRENTDEVICE
C3D0 C401             (    cubix_ide.asm):00400                 ANDB    #$01                              ; only want drive cfg
C3D2 58               (    cubix_ide.asm):00401                 ASLB                                      ; SHIFT 4
C3D3 58               (    cubix_ide.asm):00402                 ASLB                                      ;
C3D4 58               (    cubix_ide.asm):00403                 ASLB                                      ;
C3D5 58               (    cubix_ide.asm):00404                 ASLB                                      ;
C3D6 CAE0             (    cubix_ide.asm):00405                 ORB     #$E0                              ; E0=MST  F0=SLV
C3D8 F7130C           (    cubix_ide.asm):00406                 STB     XTIDE_DEVICE
                      (    cubix_ide.asm):00407         
C3DB F60105           (    cubix_ide.asm):00408                 LDB     CURRENTSLICE
C3DE F7130A           (    cubix_ide.asm):00409                 STB     XTIDE_LBAHI
                      (    cubix_ide.asm):00410         
C3E1 F60106           (    cubix_ide.asm):00411                 LDB     CURRENTCYL                        ;
C3E4 5C               (    cubix_ide.asm):00412                 INCB                                      ; CYL 0 reserved for boot image
C3E5 F71308           (    cubix_ide.asm):00413                 STB     XTIDE_LBAMID
                      (    cubix_ide.asm):00414         
C3E8 F60107           (    cubix_ide.asm):00415                 LDB     CURRENTSEC                        ;
C3EB F71306           (    cubix_ide.asm):00416                 STB     XTIDE_LBALOW
                      (    cubix_ide.asm):00417         
C3EE C601             (    cubix_ide.asm):00418                 LDB     #$01
C3F0 F71304           (    cubix_ide.asm):00419                 STB     XTIDE_SEC_CNT
                      (    cubix_ide.asm):00420         
C3F3 3586             (    cubix_ide.asm):00421                 PULS    D,PC
                      (    cubix_ide.asm):00422                 ENDIF
                      (     cubixdrv.asm):00124                 INCLUDE cubix_multio.asm
                      ( cubix_multio.asm):00001         ;__MULTI IO DRIVERS______________________________________________________________________________________________________________
                      ( cubix_multio.asm):00002         ;
                      ( cubix_multio.asm):00003         ;       CUBIX ISA MULTI IO drivers for 6809PC
                      ( cubix_multio.asm):00004         ;
                      ( cubix_multio.asm):00005         ;       Entry points:
                      ( cubix_multio.asm):00006         ;               MULTIOINIT  - JSR ed during OS init
                      ( cubix_multio.asm):00007         ;               KBD_GETKEY  - read a character from the ps/2 keyboard ('A' POINTS TO BYTE)
                      ( cubix_multio.asm):00008         ;               LPT_OUT     - send a character to the printer
                      ( cubix_multio.asm):00009         ;________________________________________________________________________________________________________________________________
                      ( cubix_multio.asm):00010         ;
                      ( cubix_multio.asm):00011         ;*
                      ( cubix_multio.asm):00012         ;*        HARDWARE I/O ADDRESSES
                      ( cubix_multio.asm):00013         ;*
                      ( cubix_multio.asm):00014         ;
     13E0             ( cubix_multio.asm):00015         MULTIO_BASE     EQU CUBIX_IO_BASE+$3E0
     13FE             ( cubix_multio.asm):00016         KBD_DAT         EQU MULTIO_BASE+$1E               ;
     13FF             ( cubix_multio.asm):00017         KBD_ST          EQU MULTIO_BASE+$1F               ;
     13FF             ( cubix_multio.asm):00018         KBD_CMD         EQU MULTIO_BASE+$1F               ;
                      ( cubix_multio.asm):00019         
     13F0             ( cubix_multio.asm):00020         LPT_0           EQU MULTIO_BASE+$10               ;
     13F1             ( cubix_multio.asm):00021         LPT_1           EQU MULTIO_BASE+$11               ;
     13F2             ( cubix_multio.asm):00022         LPT_2           EQU MULTIO_BASE+$12               ;
                      ( cubix_multio.asm):00023         
                      ( cubix_multio.asm):00024         
                      ( cubix_multio.asm):00025         
                      ( cubix_multio.asm):00026         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00027         ;
                      ( cubix_multio.asm):00028         ; STATUS BITS (FOR KBD_STATUS)
                      ( cubix_multio.asm):00029         ;
     0001             ( cubix_multio.asm):00030         KBD_EXT         EQU $01                           ; BIT 0, EXTENDED SCANCODE ACTIVE
     0002             ( cubix_multio.asm):00031         KBD_BREAK       EQU $02                           ; BIT 1, THIS IS A KEY UP (BREAK) EVENT
     0080             ( cubix_multio.asm):00032         KBD_KEYRDY      EQU $80                           ; BIT 7, INDICATES A DECODED KEYCODE IS READY
                      ( cubix_multio.asm):00033         ;
                      ( cubix_multio.asm):00034         ; STATE BITS (FOR KBD_STATE, KBD_LSTATE, KBD_RSTATE)
                      ( cubix_multio.asm):00035         ;
     0001             ( cubix_multio.asm):00036         KBD_SHIFT       EQU $01                           ; BIT 0, SHIFT ACTIVE (PRESSED)
     0002             ( cubix_multio.asm):00037         KBD_CTRL        EQU $02                           ; BIT 1, CONTROL ACTIVE (PRESSED)
     0004             ( cubix_multio.asm):00038         KBD_ALT         EQU $04                           ; BIT 2, ALT ACTIVE (PRESSED)
     0008             ( cubix_multio.asm):00039         KBD_WIN         EQU $08                           ; BIT 3, WIN ACTIVE (PRESSED)
     0010             ( cubix_multio.asm):00040         KBD_SCRLCK      EQU $10                           ; BIT 4, CAPS LOCK ACTIVE (TOGGLED ON)
     0020             ( cubix_multio.asm):00041         KBD_NUMLCK      EQU $20                           ; BIT 5, NUM LOCK ACTIVE (TOGGLED ON)
     0040             ( cubix_multio.asm):00042         KBD_CAPSLCK     EQU $40                           ; BIT 6, SCROLL LOCK ACTIVE (TOGGLED ON)
     0080             ( cubix_multio.asm):00043         KBD_NUMPAD      EQU $80                           ; BIT 7, NUM PAD KEY (KEY PRESSED IS ON NUM PAD)
                      ( cubix_multio.asm):00044         ;
     0040             ( cubix_multio.asm):00045         KBD_DEFRPT      EQU $40                           ; DEFAULT REPEAT RATE (.5 SEC DELAY, 30CPS)
     0070             ( cubix_multio.asm):00046         KBD_DEFSTATE    EQU KBD_NUMLCK|KBD_CAPSLCK|KBD_SCRLCK
                      ( cubix_multio.asm):00047                                                           ; DEFAULT STATE (NUM LOCK ON)
                      ( cubix_multio.asm):00048         
     30FF             ( cubix_multio.asm):00049         KBD_WAITTO      EQU $30FF                         ; DEFAULT TIMEOUT
     30FF             ( cubix_multio.asm):00050         LPT_WAITTO      EQU $30FF                         ; DEFAULT TIMEOUT
                      ( cubix_multio.asm):00051         ;
                      ( cubix_multio.asm):00052         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00053         ; DATA
                      ( cubix_multio.asm):00054         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00055         ;
C3F5                  ( cubix_multio.asm):00056         KBD_SCANCODE
C3F5 00               ( cubix_multio.asm):00057                 FCB     0                                 ; RAW SCANCODE
C3F6                  ( cubix_multio.asm):00058         KBD_KEYCODE
C3F6 00               ( cubix_multio.asm):00059                 FCB     0                                 ; RESULTANT KEYCODE AFTER DECODING
C3F7                  ( cubix_multio.asm):00060         KBD_STATE
C3F7 70               ( cubix_multio.asm):00061                 FCB     KBD_DEFSTATE                      ; STATE BITS (SEE ABOVE)
C3F8                  ( cubix_multio.asm):00062         KBD_LSTATE
C3F8 00               ( cubix_multio.asm):00063                 FCB     0                                 ; STATE BITS FOR "LEFT" KEYS
C3F9                  ( cubix_multio.asm):00064         KBD_RSTATE
C3F9 00               ( cubix_multio.asm):00065                 FCB     0                                 ; STATE BITS FOR "RIGHT" KEYS
C3FA                  ( cubix_multio.asm):00066         KBD_STATUS
C3FA 00               ( cubix_multio.asm):00067                 FCB     0                                 ; CURRENT STATUS BITS (SEE ABOVE)
C3FB                  ( cubix_multio.asm):00068         KBD_REPEAT
C3FB 40               ( cubix_multio.asm):00069                 FCB     KBD_DEFRPT                        ; CURRENT REPEAT RATE
C3FC                  ( cubix_multio.asm):00070         KBD_IDLE
C3FC 00               ( cubix_multio.asm):00071                 FCB     0                                 ; IDLE COUNT
C3FD                  ( cubix_multio.asm):00072         KBD_TEMP
C3FD 0000             ( cubix_multio.asm):00073                 FCB     0,0                               ; WORKING STORAGE
                      ( cubix_multio.asm):00074         
                      ( cubix_multio.asm):00075         ;
                      ( cubix_multio.asm):00076         ;  IBM PC STANDARD PARALLEL PORT (SPP):
                      ( cubix_multio.asm):00077         ;
                      ( cubix_multio.asm):00078         ;  PORT 0 (OUTPUT):
                      ( cubix_multio.asm):00079         ;
                      ( cubix_multio.asm):00080         ;       D7      D6      D5      D4      D3      D2      D1      D0
                      ( cubix_multio.asm):00081         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00082         ;     | PD7   | PD6   | PD5   | PD4   | PD3   | PD2   | PD1   | PD0   |
                      ( cubix_multio.asm):00083         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00084         ;
                      ( cubix_multio.asm):00085         ;  PORT 1 (INPUT):
                      ( cubix_multio.asm):00086         ;
                      ( cubix_multio.asm):00087         ;       D7      D6      D5      D4      D3      D2      D1      D0
                      ( cubix_multio.asm):00088         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00089         ;     | /BUSY | /ACK  | POUT  | SEL   | /ERR  | 0     | 0     | 0     |
                      ( cubix_multio.asm):00090         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00091         ;
                      ( cubix_multio.asm):00092         ;  PORT 2 (OUTPUT):
                      ( cubix_multio.asm):00093         ;
                      ( cubix_multio.asm):00094         ;       D7      D6      D5      D4      D3      D2      D1      D0
                      ( cubix_multio.asm):00095         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00096         ;     | STAT1 | STAT0 | ENBL  | PINT  | SEL   | RES   | LF    | STB   |
                      ( cubix_multio.asm):00097         ;     +-------+-------+-------+-------+-------+-------+-------+-------+
                      ( cubix_multio.asm):00098         ;
                      ( cubix_multio.asm):00099         ;
                      ( cubix_multio.asm):00100         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00101         ; MULTI IO INITIALIZATION
                      ( cubix_multio.asm):00102         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00103         ;
C3FF                  ( cubix_multio.asm):00104         MULTIOINIT:
                      ( cubix_multio.asm):00105         ;
C3FF BDCE68           ( cubix_multio.asm):00106                 JSR     LFCR                              ; AND CRLF
C402 8EC76C           ( cubix_multio.asm):00107                 LDX     #MIOMESSAGE1
C405 BDCE7C           ( cubix_multio.asm):00108                 JSR     WRSTR                             ; DO PROMPT
C408 BDCE68           ( cubix_multio.asm):00109                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00110         ; KEYBOARD INITIALIZATION
C40B 8EC390           ( cubix_multio.asm):00111                 LDX     #MESSAGE2
C40E BDCE7C           ( cubix_multio.asm):00112                 JSR     WRSTR                             ; DO PROMPT
C411 CC13E0           ( cubix_multio.asm):00113                 LDD     #MULTIO_BASE                      ; GET BASE PORT
C414 BDCE88           ( cubix_multio.asm):00114                 JSR     WRHEXW                            ; PRINT BASE PORT
C417 BDCE68           ( cubix_multio.asm):00115                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00116         ;
C41A BDC440           ( cubix_multio.asm):00117                 JSR     KBD_PROBE                         ; DETECT A KEYBOARD, ABORT IF NOT FOUND
C41D 251E             ( cubix_multio.asm):00118                 BCS     >
                      ( cubix_multio.asm):00119         ; LPT INITIALIZATION ROUTINE
C41F 8EC7A8           ( cubix_multio.asm):00120                 LDX     #MIOMESSAGE5
C422 BDCE7C           ( cubix_multio.asm):00121                 JSR     WRSTR                             ; DO PROMPT
C425 BDCE68           ( cubix_multio.asm):00122                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00123         
C428 8600             ( cubix_multio.asm):00124                 LDA     #$00
C42A B713F0           ( cubix_multio.asm):00125                 STA     LPT_0                             ; PORT 0 (DATA)
C42D 8608             ( cubix_multio.asm):00126                 LDA     #%00001000                        ; SELECT AND ASSERT RESET, LEDS OFF
C42F B713F2           ( cubix_multio.asm):00127                 STA     LPT_2                             ; PORT 2 (STATUS)
C432 BDC75D           ( cubix_multio.asm):00128                 JSR     LDELAY                            ; HALF SECOND DELAY
C435 860C             ( cubix_multio.asm):00129                 LDA     #%00001100                        ; SELECT AND DEASSERT RESET, LEDS OFF
C437 B713F2           ( cubix_multio.asm):00130                 STA     LPT_2                             ; PORT 2 (STATUS)
C43A 1CFE             ( cubix_multio.asm):00131                 CLC                                       ; SIGNAL SUCCESS
C43C 39               ( cubix_multio.asm):00132                 RTS                                       ; RETURN
                      ( cubix_multio.asm):00133         !
C43D 1A01             ( cubix_multio.asm):00134                 SEC
C43F 39               ( cubix_multio.asm):00135                 RTS                                       ; DONE
                      ( cubix_multio.asm):00136         
                      ( cubix_multio.asm):00137         
C440                  ( cubix_multio.asm):00138         KBD_PROBE:
                      ( cubix_multio.asm):00139         ;
C440 86AA             ( cubix_multio.asm):00140                 LDA     #$AA                              ; CONTROLLER SELF TEST
C442 BDC480           ( cubix_multio.asm):00141                 JSR     KBD_PUTCMD                        ; SEND IT
C445 BDC4B4           ( cubix_multio.asm):00142                 JSR     KBD_GETDATA                       ; CONTROLLER SHOULD RESPOND WITH $55 (ACK)
                      ( cubix_multio.asm):00143         ;
C448 8155             ( cubix_multio.asm):00144                 CMPA    #$55                              ; IS IT THERE?
C44A 270C             ( cubix_multio.asm):00145                 BEQ     >                                 ; IF SO, CONTINUE
C44C 8EC77A           ( cubix_multio.asm):00146                 LDX     #MIOMESSAGE3                      ; PRINT NOT PRESENT ERROR
C44F BDCE7C           ( cubix_multio.asm):00147                 JSR     WRSTR
C452 BDCE68           ( cubix_multio.asm):00148                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00149         ;
C455                  ( cubix_multio.asm):00150         KBD_ERROR:
C455 1A01             ( cubix_multio.asm):00151                 SEC                                       ; SET ERROR
C457 39               ( cubix_multio.asm):00152                 RTS                                       ; BAIL OUT
                      ( cubix_multio.asm):00153         ;
                      ( cubix_multio.asm):00154         !
C458 8EC794           ( cubix_multio.asm):00155                 LDX     #MIOMESSAGE4                      ; PRINT KB FOUND
C45B BDCE7C           ( cubix_multio.asm):00156                 JSR     WRSTR
C45E BDCE68           ( cubix_multio.asm):00157                 JSR     LFCR                              ; AND CRLF
                      ( cubix_multio.asm):00158         
                      ( cubix_multio.asm):00159         ;
C461 8660             ( cubix_multio.asm):00160                 LDA     #$60                              ; SET COMMAND REGISTER
C463 BDC480           ( cubix_multio.asm):00161                 JSR     KBD_PUTCMD                        ; SEND IT
C466 25ED             ( cubix_multio.asm):00162                 BCS     KBD_ERROR
C468 8620             ( cubix_multio.asm):00163                 LDA     #$20                              ; XLAT DISABLED, MOUSE DISABLED, NO INTS
C46A BDC49A           ( cubix_multio.asm):00164                 JSR     KBD_PUTDATA                       ; SEND IT
C46D 25E6             ( cubix_multio.asm):00165                 BCS     KBD_ERROR
                      ( cubix_multio.asm):00166         
C46F BDC4B4           ( cubix_multio.asm):00167                 JSR     KBD_GETDATA                       ; GOBBLE UP $AA FROM POWER UP, AS NEEDED
C472 25E1             ( cubix_multio.asm):00168                 BCS     KBD_ERROR
                      ( cubix_multio.asm):00169         
C474 BDC4DC           ( cubix_multio.asm):00170                 JSR     KBD_RESET                         ; RESET THE KEYBOARD
C477 BDC4FA           ( cubix_multio.asm):00171                 JSR     KBD_SETLEDS                       ; UPDATE LEDS BASED ON CURRENT TOGGLE STATE BITS
C47A BDC527           ( cubix_multio.asm):00172                 JSR     KBD_SETRPT                        ; UPDATE REPEAT RATE BASED ON CURRENT SETTING
                      ( cubix_multio.asm):00173         
C47D 1CFE             ( cubix_multio.asm):00174                 CLC                                       ; SIGNAL SUCCESS
C47F 39               ( cubix_multio.asm):00175                 RTS
                      ( cubix_multio.asm):00176         
                      ( cubix_multio.asm):00177         
                      ( cubix_multio.asm):00178         ;
                      ( cubix_multio.asm):00179         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00180         ; HARDWARE INTERFACE
                      ( cubix_multio.asm):00181         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00182         ;
                      ( cubix_multio.asm):00183         ;__________________________________________________________________________________________________
C480                  ( cubix_multio.asm):00184         KBD_PUTCMD:
                      ( cubix_multio.asm):00185         ; PUT A CMD BYTE FROM A TO THE KEYBOARD INTERFACE WITH TIMEOUT
                      ( cubix_multio.asm):00186         ;
C480 8E30FF           ( cubix_multio.asm):00187                 LDX     #KBD_WAITTO                       ; SETUP TO LOOP
C483                  ( cubix_multio.asm):00188         KBD_PUTCMD0:
C483 F613FF           ( cubix_multio.asm):00189                 LDB     KBD_ST                            ; STATUS PORT
C486 C402             ( cubix_multio.asm):00190                 ANDB    #$02                              ; ISOLATE EMPTY BIT
C488 270A             ( cubix_multio.asm):00191                 BEQ     KBD_PUTCMD1                       ; EMPTY, GO TO WRITE
C48A BDC74C           ( cubix_multio.asm):00192                 JSR     DELAY                             ; WAIT A BIT
C48D 301F             ( cubix_multio.asm):00193                 DEX
C48F 26F2             ( cubix_multio.asm):00194                 BNE     KBD_PUTCMD0                       ; LOOP UNTIL COUNTER EXHAUSTED
                      ( cubix_multio.asm):00195         
C491 1A01             ( cubix_multio.asm):00196                 SEC                                       ; TIMED OUT
C493 39               ( cubix_multio.asm):00197                 RTS
C494                  ( cubix_multio.asm):00198         KBD_PUTCMD1:
C494 B713FF           ( cubix_multio.asm):00199                 STA     KBD_CMD                           ; WRITE TO COMMAND PORT
                      ( cubix_multio.asm):00200         
C497 1CFE             ( cubix_multio.asm):00201                 CLC                                       ; SIGNAL SUCCESS
C499 39               ( cubix_multio.asm):00202                 RTS
                      ( cubix_multio.asm):00203         ;
                      ( cubix_multio.asm):00204         ;__________________________________________________________________________________________________
C49A                  ( cubix_multio.asm):00205         KBD_PUTDATA:
                      ( cubix_multio.asm):00206         ;
                      ( cubix_multio.asm):00207         ; PUT A DATA BYTE FROM A TO THE KEYBOARD INTERFACE WITH TIMEOUT
                      ( cubix_multio.asm):00208         ;
C49A 8E30FF           ( cubix_multio.asm):00209                 LDX     #KBD_WAITTO                       ; SETUP TO LOOP
C49D                  ( cubix_multio.asm):00210         KBD_PUTDATA0:
C49D F613FF           ( cubix_multio.asm):00211                 LDB     KBD_ST                            ; STATUS PORT
C4A0 C402             ( cubix_multio.asm):00212                 ANDB    #$02                              ; ISOLATE OUTPUT EMPTY BIT
C4A2 270A             ( cubix_multio.asm):00213                 BEQ     KBD_PUTDATA1                      ; EMPTY, GO TO WRITE
C4A4 BDC74C           ( cubix_multio.asm):00214                 JSR     DELAY                             ; WAIT A BIT
C4A7 301F             ( cubix_multio.asm):00215                 DEX
C4A9 26F2             ( cubix_multio.asm):00216                 BNE     KBD_PUTDATA0                      ; LOOP UNTIL COUNTER EXHAUSTED
                      ( cubix_multio.asm):00217         
C4AB 1A01             ( cubix_multio.asm):00218                 SEC                                       ; TIMED OUT
C4AD 39               ( cubix_multio.asm):00219                 RTS
C4AE                  ( cubix_multio.asm):00220         KBD_PUTDATA1:
C4AE B713FE           ( cubix_multio.asm):00221                 STA     KBD_DAT                           ; WRITE TO DATA PORT
                      ( cubix_multio.asm):00222         
C4B1 1CFE             ( cubix_multio.asm):00223                 CLC                                       ; SIGNAL SUCCESS
C4B3 39               ( cubix_multio.asm):00224                 RTS
                      ( cubix_multio.asm):00225         ;
                      ( cubix_multio.asm):00226         ;__________________________________________________________________________________________________
C4B4                  ( cubix_multio.asm):00227         KBD_GETDATA:
                      ( cubix_multio.asm):00228         ;
                      ( cubix_multio.asm):00229         ; GET A RAW DATA BYTE FROM KEYBOARD INTERFACE INTO A WITH TIMEOUT
                      ( cubix_multio.asm):00230         ;
C4B4 8E30FF           ( cubix_multio.asm):00231                 LDX     #KBD_WAITTO                       ; SETUP TO LOOP
C4B7                  ( cubix_multio.asm):00232         KBD_GETDATA0:
C4B7 B613FF           ( cubix_multio.asm):00233                 LDA     KBD_ST                            ; GET STATUS PORT
C4BA 8401             ( cubix_multio.asm):00234                 ANDA    #$01                              ; ISOLATE INPUT PENDING BIT
C4BC 260C             ( cubix_multio.asm):00235                 BNE     KBD_GETDATA1                      ; READY, GET DATA
C4BE BDC74C           ( cubix_multio.asm):00236                 JSR     DELAY                             ; WAIT A BIT
C4C1 301F             ( cubix_multio.asm):00237                 DEX
C4C3 26F2             ( cubix_multio.asm):00238                 BNE     KBD_GETDATA0                      ; LOOP UNTIL COUNTER EXHAUSTED
C4C5 8600             ( cubix_multio.asm):00239                 LDA     #$00
                      ( cubix_multio.asm):00240         
C4C7 1A01             ( cubix_multio.asm):00241                 SEC                                       ; NO DATA, RETURN ZERO
C4C9 39               ( cubix_multio.asm):00242                 RTS
C4CA                  ( cubix_multio.asm):00243         KBD_GETDATA1:
                      ( cubix_multio.asm):00244         
C4CA B613FE           ( cubix_multio.asm):00245                 LDA     KBD_DAT                           ; GET DATA PORT
C4CD 1CFE             ( cubix_multio.asm):00246                 CLC                                       ; SET FLAGS
C4CF 39               ( cubix_multio.asm):00247                 RTS
                      ( cubix_multio.asm):00248         ;
                      ( cubix_multio.asm):00249         ;__________________________________________________________________________________________________
C4D0                  ( cubix_multio.asm):00250         KBD_GETDATAX:
                      ( cubix_multio.asm):00251         ;
                      ( cubix_multio.asm):00252         ; GET A RAW DATA BYTE FROM KEYBOARD INTERFACE INTO A WITH NOTIMEOUT
                      ( cubix_multio.asm):00253         ;
C4D0 B613FF           ( cubix_multio.asm):00254                 LDA     KBD_ST                            ; STATUS PORT
C4D3 8401             ( cubix_multio.asm):00255                 ANDA    #$01                              ; ISOLATE INPUT PENDING BIT
C4D5 26F3             ( cubix_multio.asm):00256                 BNE     KBD_GETDATA1                      ; BYTE PENDING, GO GET IT
C4D7 8600             ( cubix_multio.asm):00257                 LDA     #$00
                      ( cubix_multio.asm):00258         
C4D9 1A01             ( cubix_multio.asm):00259                 SEC                                       ; NO DATA, RETURN ZERO
C4DB 39               ( cubix_multio.asm):00260                 RTS
                      ( cubix_multio.asm):00261         ;
                      ( cubix_multio.asm):00262         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00263         ; RESET KEYBOARD
                      ( cubix_multio.asm):00264         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00265         ;
C4DC                  ( cubix_multio.asm):00266         KBD_RESET:
C4DC 86FF             ( cubix_multio.asm):00267                 LDA     #$FF                              ; RESET COMMAND
C4DE BDC49A           ( cubix_multio.asm):00268                 JSR     KBD_PUTDATA                       ; SEND IT
C4E1 BDC4B4           ( cubix_multio.asm):00269                 JSR     KBD_GETDATA                       ; GET THE ACK
C4E4 8EF100           ( cubix_multio.asm):00270                 LDX     #$F100                            ; SETUP LOOP COUNTER
C4E7                  ( cubix_multio.asm):00271         KBD_RESET0:
C4E7 3410             ( cubix_multio.asm):00272                 PSHS    X                                 ; PRESERVE COUNTER
C4E9 BDC4B4           ( cubix_multio.asm):00273                 JSR     KBD_GETDATA                       ; TRY TO GET THE RESPONSE
C4EC 3510             ( cubix_multio.asm):00274                 PULS    X                                 ; RECOVER COUNTER
C4EE 2607             ( cubix_multio.asm):00275                 BNE     KBD_RESET1                        ; GOT A BYTE?  IF SO, GET OUT OF LOOP
C4F0 301F             ( cubix_multio.asm):00276                 DEX
C4F2 26F3             ( cubix_multio.asm):00277                 BNE     KBD_RESET0                        ; LOOP TILL COUNTER EXHAUSTED
C4F4 1A01             ( cubix_multio.asm):00278                 SEC                                       ; SIGNAL FAILURE
C4F6 39               ( cubix_multio.asm):00279                 RTS                                       ; DONE
C4F7                  ( cubix_multio.asm):00280         KBD_RESET1:
                      ( cubix_multio.asm):00281         
C4F7 1CFE             ( cubix_multio.asm):00282                 CLC                                       ; SIGNAL SUCCESS (RESPONSE IS IGNORED...)
C4F9 39               ( cubix_multio.asm):00283                 RTS                                       ; DONE
                      ( cubix_multio.asm):00284         ;
                      ( cubix_multio.asm):00285         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00286         ; UPDATE KEYBOARD LEDS BASED ON CURRENT TOGGLE FLAGS
                      ( cubix_multio.asm):00287         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00288         ;
C4FA                  ( cubix_multio.asm):00289         KBD_SETLEDS:
C4FA 86ED             ( cubix_multio.asm):00290                 LDA     #$ED                              ; SET/RESET LED'S COMMAND
C4FC BDC49A           ( cubix_multio.asm):00291                 JSR     KBD_PUTDATA                       ; SEND THE COMMAND
C4FF BDC4B4           ( cubix_multio.asm):00292                 JSR     KBD_GETDATA                       ; READ THE RESPONSE
C502 81FA             ( cubix_multio.asm):00293                 CMPA    #$FA                              ; MAKE SURE WE GET ACK
C504 2703             ( cubix_multio.asm):00294                 BEQ     >
                      ( cubix_multio.asm):00295         
C506 1A01             ( cubix_multio.asm):00296                 SEC
C508 39               ( cubix_multio.asm):00297                 RTS                                       ; ABORT IF NO ACK
                      ( cubix_multio.asm):00298         !
C509 B6C3F7           ( cubix_multio.asm):00299                 LDA     KBD_STATE                         ; LOAD THE STATE BYTE
C50C 46               ( cubix_multio.asm):00300                 RORA                                      ; ROTATE TOGGLE KEY BITS AS NEEDED
C50D 46               ( cubix_multio.asm):00301                 RORA
C50E 46               ( cubix_multio.asm):00302                 RORA
C50F 46               ( cubix_multio.asm):00303                 RORA
C510 8407             ( cubix_multio.asm):00304                 ANDA    #$07                              ; CLEAR THE IRRELEVANT BITS
C512 BDC49A           ( cubix_multio.asm):00305                 JSR     KBD_PUTDATA                       ; SEND THE LED DATA
C515 BDC4B4           ( cubix_multio.asm):00306                 JSR     KBD_GETDATA                       ; READ THE ACK
C518 81FA             ( cubix_multio.asm):00307                 CMPA    #$FA                              ; MAKE SURE WE GET ACK
C51A 2703             ( cubix_multio.asm):00308                 BEQ     >
                      ( cubix_multio.asm):00309         
C51C 1A01             ( cubix_multio.asm):00310                 SEC
C51E 39               ( cubix_multio.asm):00311                 RTS                                       ; ABORT IF NO ACK
                      ( cubix_multio.asm):00312         !
C51F 8600             ( cubix_multio.asm):00313                 LDA     #$00                              ; A=0
C521 B7C3FA           ( cubix_multio.asm):00314                 STA     KBD_STATUS                        ; CLEAR STATUS
                      ( cubix_multio.asm):00315         
C524 1CFE             ( cubix_multio.asm):00316                 CLC
C526 39               ( cubix_multio.asm):00317                 RTS
                      ( cubix_multio.asm):00318         ;
                      ( cubix_multio.asm):00319         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00320         ; UPDATE KEYBOARD REPEAT RATE BASED ON CURRENT SETTING
                      ( cubix_multio.asm):00321         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00322         ;
C527                  ( cubix_multio.asm):00323         KBD_SETRPT:
C527 86F3             ( cubix_multio.asm):00324                 LDA     #$F3                              ; COMMAND = SET TYPEMATIC RATE/DELAY
C529 BDC49A           ( cubix_multio.asm):00325                 JSR     KBD_PUTDATA                       ; SEND IT
C52C BDC4B4           ( cubix_multio.asm):00326                 JSR     KBD_GETDATA                       ; GET THE ACK
C52F 81FA             ( cubix_multio.asm):00327                 CMPA    #$FA                              ; MAKE SURE WE GET ACK
C531 2703             ( cubix_multio.asm):00328                 BEQ     >
                      ( cubix_multio.asm):00329         
C533 1A01             ( cubix_multio.asm):00330                 SEC
C535 39               ( cubix_multio.asm):00331                 RTS                                       ; ABORT IF NO ACK
                      ( cubix_multio.asm):00332         !
C536 B6C3FB           ( cubix_multio.asm):00333                 LDA     KBD_REPEAT                        ; LOAD THE CURRENT RATE/DELAY BYTE
C539 BDC49A           ( cubix_multio.asm):00334                 JSR     KBD_PUTDATA                       ; SEND IT
C53C BDC4B4           ( cubix_multio.asm):00335                 JSR     KBD_GETDATA                       ; GET THE ACK
C53F 81FA             ( cubix_multio.asm):00336                 CMPA    #$FA                              ; MAKE SURE WE GET ACK
C541 2703             ( cubix_multio.asm):00337                 BEQ     >
                      ( cubix_multio.asm):00338         
C543 1A01             ( cubix_multio.asm):00339                 SEC
C545 39               ( cubix_multio.asm):00340                 RTS                                       ; ABORT IF NO ACK
                      ( cubix_multio.asm):00341         !
C546 1CFE             ( cubix_multio.asm):00342                 CLC
C548 39               ( cubix_multio.asm):00343                 RTS
                      ( cubix_multio.asm):00344         
                      ( cubix_multio.asm):00345         ;__GETKEY__________________________________________________________________________________________
                      ( cubix_multio.asm):00346         ; Get char from Keyboard, return in A
                      ( cubix_multio.asm):00347         ;__________________________________________________________________________________________________
C549                  ( cubix_multio.asm):00348         KBD_GETKEY:
C549 BDC567           ( cubix_multio.asm):00349                 JSR     KBD_DECODE
C54C 2408             ( cubix_multio.asm):00350                 BCC     >
C54E 86FF             ( cubix_multio.asm):00351                 LDA     #$FF                              ;
C550 B70109           ( cubix_multio.asm):00352                 STA     >PAGER_D                          ; SAVE 'D'
C553 1A01             ( cubix_multio.asm):00353                 SEC
C555 39               ( cubix_multio.asm):00354                 RTS
                      ( cubix_multio.asm):00355         !
C556 B6C3F6           ( cubix_multio.asm):00356                 LDA     KBD_KEYCODE
C559 B70109           ( cubix_multio.asm):00357                 STA     >PAGER_D                          ; SAVE 'D'
C55C B6C3FA           ( cubix_multio.asm):00358                 LDA     KBD_STATUS
C55F 847F             ( cubix_multio.asm):00359                 ANDA    #$7F
C561 B7C3FA           ( cubix_multio.asm):00360                 STA     KBD_STATUS
C564 1CFE             ( cubix_multio.asm):00361                 CLC
C566 39               ( cubix_multio.asm):00362                 RTS
                      ( cubix_multio.asm):00363         
                      ( cubix_multio.asm):00364         ;
                      ( cubix_multio.asm):00365         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00366         ; DECODING ENGINE
                      ( cubix_multio.asm):00367         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00368         ;
                      ( cubix_multio.asm):00369         ;__________________________________________________________________________________________________
C567                  ( cubix_multio.asm):00370         KBD_DECODE:
                      ( cubix_multio.asm):00371         ;
                      ( cubix_multio.asm):00372         ;  RUN THE DECODING ENGINE UNTIL EITHER: 1) NO MORE SCANCODES ARE AVAILABLE
                      ( cubix_multio.asm):00373         ;  FROM THE KEYBOARD, OR 2) A DECODED KEY VALUE IS AVAILABLE
                      ( cubix_multio.asm):00374         ;
                      ( cubix_multio.asm):00375         ;  RETURNS A=0 AND Z SET IF NO KEYCODE READY, OTHERWISE A DECODED KEY VALUE IS AVAILABLE.
                      ( cubix_multio.asm):00376         ;  THE DECODED KEY VALUE AND KEY STATE IS STORED IN KBD_KEYCODE AND KBD_STATE.
                      ( cubix_multio.asm):00377         ;
                      ( cubix_multio.asm):00378         ;  KBD_STATUS IS NOT CLEARED AT START. IT IS THE JSR ER'S RESPONSIBILITY
                      ( cubix_multio.asm):00379         ;  TO CLEAR KBD_STATUS WHEN IT HAS RETRIEVED A PENDING VALUE.  IF DECODE IS JSR ED
                      ( cubix_multio.asm):00380         ;  WITH A KEYCODE STILL PENDING, IT WILL JUST RETURN WITHOUT DOING ANYTHING.
                      ( cubix_multio.asm):00381         ;
                      ( cubix_multio.asm):00382         ; Step 0: Check keycode buffer
                      ( cubix_multio.asm):00383         ;   if status[keyrdy]
                      ( cubix_multio.asm):00384         ;     return
                      ( cubix_multio.asm):00385         ;
                      ( cubix_multio.asm):00386         ; Step 1: Get scancode
                      ( cubix_multio.asm):00387         ;   if no scancode ready
                      ( cubix_multio.asm):00388         ;     return
                      ( cubix_multio.asm):00389         ;   read scancode
                      ( cubix_multio.asm):00390         ;
                      ( cubix_multio.asm):00391         ; Step 2: Detect and handle special keycodes
                      ( cubix_multio.asm):00392         ;   if scancode == $AA
                      ( cubix_multio.asm):00393         ;     *** handle hot insert somehow ***
                      ( cubix_multio.asm):00394         ;
                      ( cubix_multio.asm):00395         ; Step 3: Detect and handle scancode prefixes
                      ( cubix_multio.asm):00396         ;   if scancode == $E0
                      ( cubix_multio.asm):00397         ;     set status[extended]
                      ( cubix_multio.asm):00398         ;     goto Step 1
                      ( cubix_multio.asm):00399         ;
                      ( cubix_multio.asm):00400         ;   if scancode == $E1
                      ( cubix_multio.asm):00401         ;     *** handle pause key somehow ***
                      ( cubix_multio.asm):00402         ;
                      ( cubix_multio.asm):00403         ; Step 4: Detect and flag break event
                      ( cubix_multio.asm):00404         ;   *** scancode set #1 variation ***
                      ( cubix_multio.asm):00405         ;     set status[break] = high bit of scancode
                      ( cubix_multio.asm):00406         ;     clear high order bit
                      ( cubix_multio.asm):00407         ;     continue to Step 5
                      ( cubix_multio.asm):00408         ;   *** scancode set #2 variation ***
                      ( cubix_multio.asm):00409         ;     if scancode == $F0
                      ( cubix_multio.asm):00410         ;       set status[break]
                      ( cubix_multio.asm):00411         ;       goto Step 1
                      ( cubix_multio.asm):00412         ;
                      ( cubix_multio.asm):00413         ; Step 5: Map scancode to keycode
                      ( cubix_multio.asm):00414         ;   if status[extended]
                      ( cubix_multio.asm):00415         ;     apply extended-map[scancode] -> keycode
                      ( cubix_multio.asm):00416         ;   else if state[shifted]
                      ( cubix_multio.asm):00417         ;     apply shifted-map[scancode] -> keycode
                      ( cubix_multio.asm):00418         ;   else
                      ( cubix_multio.asm):00419         ;     apply normal-map[scancode] -> keycode
                      ( cubix_multio.asm):00420         ;
                      ( cubix_multio.asm):00421         ; Step 6: Handle modifier keys
                      ( cubix_multio.asm):00422         ;   if keycode is modifier (shift, ctrl, alt, win)
                      ( cubix_multio.asm):00423         ;     set (l/r)state[<modifier>] = not status[break]
                      ( cubix_multio.asm):00424         ;     clear modifier bits in state
                      ( cubix_multio.asm):00425         ;     set state = (lstate OR rstate OR state)
                      ( cubix_multio.asm):00426         ;     goto New Key
                      ( cubix_multio.asm):00427         ;
                      ( cubix_multio.asm):00428         ; Step 7: Complete procesing of key break events
                      ( cubix_multio.asm):00429         ;   if status[break]
                      ( cubix_multio.asm):00430         ;     goto New Key
                      ( cubix_multio.asm):00431         ;
                      ( cubix_multio.asm):00432         ; Step 8: Handle toggle keys
                      ( cubix_multio.asm):00433         ;   if keycode is toggle (capslock, numlock, scrolllock)
                      ( cubix_multio.asm):00434         ;     invert (XOR) state[<toggle>]
                      ( cubix_multio.asm):00435         ;     update keyboard LED's
                      ( cubix_multio.asm):00436         ;     goto New Key
                      ( cubix_multio.asm):00437         ;
                      ( cubix_multio.asm):00438         ; Step 9: Adjust keycode for control modifier
                      ( cubix_multio.asm):00439         ;   if state[ctrl]
                      ( cubix_multio.asm):00440         ;     if keycode is 'a'-'z'
                      ( cubix_multio.asm):00441         ;       subtract 20 (clear bit 5) from keycode
                      ( cubix_multio.asm):00442         ;     if keycode is '@'-'_'
                      ( cubix_multio.asm):00443         ;       subtract 40 (clear bit 6) from keycode
                      ( cubix_multio.asm):00444         ;
                      ( cubix_multio.asm):00445         ; Step 10: Adjust keycode for caps lock
                      ( cubix_multio.asm):00446         ;   if state[capslock]
                      ( cubix_multio.asm):00447         ;     if keycode is 'a'-'z' OR 'A'-'Z'
                      ( cubix_multio.asm):00448         ;       toggle (XOR) bit 5 of keycode
                      ( cubix_multio.asm):00449         ;
                      ( cubix_multio.asm):00450         ; Step 11: Handle num pad keys
                      ( cubix_multio.asm):00451         ;   clear state[numpad]
                      ( cubix_multio.asm):00452         ;   if keycode is numpad
                      ( cubix_multio.asm):00453         ;     set state[numpad]
                      ( cubix_multio.asm):00454         ;     if state[numlock]
                      ( cubix_multio.asm):00455         ;       toggle (XOR) bit 4 of keycode
                      ( cubix_multio.asm):00456         ;     apply numpad-map[keycode] -> keycode
                      ( cubix_multio.asm):00457         ;
                      ( cubix_multio.asm):00458         ; Step 12: Detect unknown/invalid keycodes
                      ( cubix_multio.asm):00459         ;   if keycode == $FF
                      ( cubix_multio.asm):00460         ;     goto New Key
                      ( cubix_multio.asm):00461         ;
                      ( cubix_multio.asm):00462         ; Step 13: Done
                      ( cubix_multio.asm):00463         ;   set status[keyrdy]
                      ( cubix_multio.asm):00464         ;   return
                      ( cubix_multio.asm):00465         ;
                      ( cubix_multio.asm):00466         ; New Key:
                      ( cubix_multio.asm):00467         ;   clear status
                      ( cubix_multio.asm):00468         ;   goto Step 1
                      ( cubix_multio.asm):00469         ;
C567                  ( cubix_multio.asm):00470         KBD_DEC0:                                         ; CHECK KEYCODE BUFFER
C567 B6C3FA           ( cubix_multio.asm):00471                 LDA     KBD_STATUS                        ; GET CURRENT STATUS
C56A 8480             ( cubix_multio.asm):00472                 ANDA    #KBD_KEYRDY                       ; ISOLATE KEY READY FLAG
C56C 2703             ( cubix_multio.asm):00473                 BEQ     KBD_DEC1
C56E 1A01             ( cubix_multio.asm):00474                 SEC
C570 39               ( cubix_multio.asm):00475                 RTS                                       ; ABORT IF KEY IS ALREADY PENDING
                      ( cubix_multio.asm):00476         
C571                  ( cubix_multio.asm):00477         KBD_DEC1:                                         ; PROCESS NEXT SCANCODE
C571 BDC4D0           ( cubix_multio.asm):00478                 JSR     KBD_GETDATAX                      ; GET THE SCANCODE
C574 2403             ( cubix_multio.asm):00479                 BCC     KBD_DEC2
C576 1A01             ( cubix_multio.asm):00480                 SEC
C578 39               ( cubix_multio.asm):00481                 RTS                                       ; NO KEY READY, RETURN WITH A=0, SET ERROR
                      ( cubix_multio.asm):00482         
C579                  ( cubix_multio.asm):00483         KBD_DEC2:                                         ; DETECT AND HANDLE SPECIAL KEYCODES
C579 B7C3F5           ( cubix_multio.asm):00484                 STA     KBD_SCANCODE                      ; SAVE SCANCODE
C57C 81AA             ( cubix_multio.asm):00485                 CMPA    #$AA                              ; KEYBOARD INSERTION?
C57E 260F             ( cubix_multio.asm):00486                 BNE     KBD_DEC3                          ; NOPE, BYPASS
C580 BDC75D           ( cubix_multio.asm):00487                 JSR     LDELAY                            ; WAIT A BIT
C583 BDC4DC           ( cubix_multio.asm):00488                 JSR     KBD_RESET                         ; RESET KEYBOARD
C586 BDC4FA           ( cubix_multio.asm):00489                 JSR     KBD_SETLEDS                       ; SET LEDS
C589 BDC527           ( cubix_multio.asm):00490                 JSR     KBD_SETRPT                        ; SET REPEAT RATE
C58C 7EC744           ( cubix_multio.asm):00491                 JMP     KBD_DECNEW                        ; RESTART THE ENGINE
                      ( cubix_multio.asm):00492         
C58F                  ( cubix_multio.asm):00493         KBD_DEC3:                                         ; DETECT AND HANDLE SCANCODE PREFIXES
C58F 81E0             ( cubix_multio.asm):00494                 CMPA    #$E0                              ; EXTENDED KEY PREFIX $E0?
C591 260B             ( cubix_multio.asm):00495                 BNE     KBD_DEC3B                         ; NOPE MOVE ON
C593 F6C3FA           ( cubix_multio.asm):00496                 LDB     KBD_STATUS                        ; GET STATUS
C596 CA01             ( cubix_multio.asm):00497                 ORB     #KBD_EXT                          ; SET EXTENDED BIT
C598 F7C3FA           ( cubix_multio.asm):00498                 STB     KBD_STATUS                        ; SAVE STATUS
C59B 7EC571           ( cubix_multio.asm):00499                 JMP     KBD_DEC1                          ; LOOP TO DO NEXT SCANCODE
                      ( cubix_multio.asm):00500         
C59E                  ( cubix_multio.asm):00501         KBD_DEC3B:                                        ; HANDLE SCANCODE PREFIX $E1 (PAUSE KEY)
C59E 81E1             ( cubix_multio.asm):00502                 CMPA    #$E1                              ; EXTENDED KEY PREFIX $E1
C5A0 2616             ( cubix_multio.asm):00503                 BNE     KBD_DEC4                          ; NOPE MOVE ON
C5A2 86EE             ( cubix_multio.asm):00504                 LDA     #$EE                              ; MAP TO KEYCODE $EE
C5A4 B7C3F6           ( cubix_multio.asm):00505                 STA     KBD_KEYCODE                       ; SAVE IT
                      ( cubix_multio.asm):00506         ; SWALLOW NEXT 7 SCANCODES
C5A7 8E0007           ( cubix_multio.asm):00507                 LDX     #7                                ; LOOP 7 TIMES
C5AA                  ( cubix_multio.asm):00508         KBD_DEC3B1:
C5AA 3410             ( cubix_multio.asm):00509                 PSHS    X
C5AC BDC4B4           ( cubix_multio.asm):00510                 JSR     KBD_GETDATA                       ; RETRIEVE NEXT SCANCODE
C5AF 3510             ( cubix_multio.asm):00511                 PULS    X
C5B1 301F             ( cubix_multio.asm):00512                 DEX
C5B3 26F5             ( cubix_multio.asm):00513                 BNE     KBD_DEC3B1                        ; LOOP AS NEEDED
C5B5 7EC621           ( cubix_multio.asm):00514                 JMP     KBD_DEC6                          ; RESUME AFTER MAPPING
                      ( cubix_multio.asm):00515         
C5B8                  ( cubix_multio.asm):00516         KBD_DEC4:                                         ; DETECT AND FLAG BREAK EVENT
C5B8 81F0             ( cubix_multio.asm):00517                 CMPA    #$F0                              ; BREAK (KEY UP) PREFIX?
C5BA 260B             ( cubix_multio.asm):00518                 BNE     KBD_DEC5                          ; NOPE MOVE ON
C5BC F6C3FA           ( cubix_multio.asm):00519                 LDB     KBD_STATUS                        ; GET STATUS
C5BF CA02             ( cubix_multio.asm):00520                 ORB     #KBD_BREAK                        ; SET BREAK BIT
C5C1 F7C3FA           ( cubix_multio.asm):00521                 STB     KBD_STATUS                        ; SAVE STATUS
C5C4 7EC571           ( cubix_multio.asm):00522                 JMP     KBD_DEC1                          ; LOOP TO DO NEXT SCANCODE
                      ( cubix_multio.asm):00523         
C5C7                  ( cubix_multio.asm):00524         KBD_DEC5:                                         ; MAP SCANCODE TO KEYCODE
C5C7 B6C3FA           ( cubix_multio.asm):00525                 LDA     KBD_STATUS                        ; GET STATUS
C5CA 8401             ( cubix_multio.asm):00526                 ANDA    #KBD_EXT                          ; EXTENDED BIT SET?
C5CC 272A             ( cubix_multio.asm):00527                 BEQ     KBD_DEC5C                         ; NOPE, MOVE ON
                      ( cubix_multio.asm):00528         
                      ( cubix_multio.asm):00529         ; PERFORM EXTENDED KEY MAPPING
C5CE F6C3F5           ( cubix_multio.asm):00530                 LDB     KBD_SCANCODE                      ; GET SCANCODE
C5D1 8600             ( cubix_multio.asm):00531                 LDA     #$00
C5D3 1F01             ( cubix_multio.asm):00532                 TFR     D,X
C5D5 BEC8C6           ( cubix_multio.asm):00533                 LDX     KBD_MAPEXT                        ; POINT TO START OF EXT MAP TABLE
C5D8                  ( cubix_multio.asm):00534         KBD_DEC5A:
C5D8 A689C8C6         ( cubix_multio.asm):00535                 LDA     KBD_MAPEXT,X                      ; GET FIRST BYTE OF PAIR FROM EXT MAP TABLE
C5DC 3001             ( cubix_multio.asm):00536                 INX
C5DE 8100             ( cubix_multio.asm):00537                 CMPA    #$00                              ; END OF TABLE?
C5E0 10270160         ( cubix_multio.asm):00538                 LBEQ    KBD_DECNEW                        ; UNKNOWN OR BOGUS, START OVER
C5E4 B1C3F5           ( cubix_multio.asm):00539                 CMPA    KBD_SCANCODE                      ; DOES MATCH BYTE EQUAL SCANCODE?
C5E7 2705             ( cubix_multio.asm):00540                 BEQ     KBD_DEC5B                         ; YES! JUMP OUT
C5E9 3001             ( cubix_multio.asm):00541                 INX                                       ; BUMP TO START OF NEXT PAIR
C5EB 7EC5D8           ( cubix_multio.asm):00542                 JMP     KBD_DEC5A                         ; LOOP TO CHECK NEXT TABLE ENTRY
C5EE                  ( cubix_multio.asm):00543         KBD_DEC5B:
C5EE A689C8C6         ( cubix_multio.asm):00544                 LDA     KBD_MAPEXT,X                      ; GET THE KEYCODE VIA MAPPING TABLE
C5F2 B7C3F6           ( cubix_multio.asm):00545                 STA     KBD_KEYCODE                       ; SAVE IT
C5F5 7EC621           ( cubix_multio.asm):00546                 JMP     KBD_DEC6
                      ( cubix_multio.asm):00547         
C5F8                  ( cubix_multio.asm):00548         KBD_DEC5C:                                        ; PERFORM REGULAR KEY (NOT EXTENDED) KEY MAPPING
C5F8 B6C3F5           ( cubix_multio.asm):00549                 LDA     KBD_SCANCODE                      ; GET THE SCANCODE
C5FB 8185             ( cubix_multio.asm):00550                 CMPA    #KBD_MAPSIZ                       ; COMPARE TO SIZE OF TABLE
C5FD 2222             ( cubix_multio.asm):00551                 BHI     KBD_DEC6                          ; PAST END, SKIP OVER LOOKUP
                      ( cubix_multio.asm):00552         
                      ( cubix_multio.asm):00553         ; SETUP POINTER TO MAPPING TABLE BASED ON SHIFTED OR UNSHIFTED STATE
C5FF F6C3F7           ( cubix_multio.asm):00554                 LDB     KBD_STATE                         ; GET STATE
C602 C401             ( cubix_multio.asm):00555                 ANDB    #KBD_SHIFT                        ; SHIFT ACTIVE?
C604 270D             ( cubix_multio.asm):00556                 BEQ     KBD_DEC5D                         ; NON-SHIFTED, MOVE ON
                      ( cubix_multio.asm):00557         
C606 F6C3F5           ( cubix_multio.asm):00558                 LDB     KBD_SCANCODE                      ; GET THE SCANCODE
C609 8600             ( cubix_multio.asm):00559                 LDA     #$00
C60B 1F01             ( cubix_multio.asm):00560                 TFR     D,X
C60D A689C841         ( cubix_multio.asm):00561                 LDA     KBD_MAPSHIFT,X                    ; GET SHIFTED
C611 200B             ( cubix_multio.asm):00562                 BRA     >
C613                  ( cubix_multio.asm):00563         KBD_DEC5D:
C613 F6C3F5           ( cubix_multio.asm):00564                 LDB     KBD_SCANCODE                      ; GET THE SCANCODE
C616 8600             ( cubix_multio.asm):00565                 LDA     #$00
C618 1F01             ( cubix_multio.asm):00566                 TFR     D,X
C61A A689C7BC         ( cubix_multio.asm):00567                 LDA     KBD_MAPSTD,X                      ; GET STANDARD
                      ( cubix_multio.asm):00568         !
C61E B7C3F6           ( cubix_multio.asm):00569                 STA     KBD_KEYCODE                       ; SAVE KEYCODE
                      ( cubix_multio.asm):00570         
C621                  ( cubix_multio.asm):00571         KBD_DEC6:                                         ; HANDLE MODIFIER KEYS
C621 B6C3F6           ( cubix_multio.asm):00572                 LDA     KBD_KEYCODE                       ; MAKE SURE WE HAVE KEYCODE
C624 81B8             ( cubix_multio.asm):00573                 CMPA    #$B8                              ; END OF MODIFIER KEYS
C626 2C52             ( cubix_multio.asm):00574                 BGE     KBD_DEC7                          ; BYPASS MODIFIER KEY CHECKING
C628 81B0             ( cubix_multio.asm):00575                 CMPA    #$B0                              ; START OF MODIFIER KEYS
C62A 254E             ( cubix_multio.asm):00576                 BLO     KBD_DEC7                          ; BYPASS MODIFIER KEY CHECKING
                      ( cubix_multio.asm):00577         
C62C 8E0004           ( cubix_multio.asm):00578                 LDX     #4                                ; LOOP COUNTER TO LOOP THRU 4 MODIFIER BITS
C62F 80AF             ( cubix_multio.asm):00579                 SUBA    #$AF                              ; SETUP A TO DECREMENT THROUGH MODIFIER VALUES
C631 C600             ( cubix_multio.asm):00580                 LDB     #$00                              ; SETUP B TO ROATE THROUGH MODIFIER STATE BITS
C633 1A01             ( cubix_multio.asm):00581                 SEC                                       ; SET CARRY FOR ROTATE
                      ( cubix_multio.asm):00582         
C635                  ( cubix_multio.asm):00583         KBD_DEC6A:
C635 59               ( cubix_multio.asm):00584                 ROLB                                      ; SHIFT TO NEXT MODIFIER STATE BIT
C636 4A               ( cubix_multio.asm):00585                 DECA                                      ; L-MODIFIER?
C637 270A             ( cubix_multio.asm):00586                 BEQ     KBD_DEC6B                         ; YES, HANDLE L-MODIFIER MAKE/BREAK
C639 4A               ( cubix_multio.asm):00587                 DECA                                      ; R-MODIFIER?
C63A 270D             ( cubix_multio.asm):00588                 BEQ     KBD_DEC6C                         ; YES, HANDLE R-MODIFIER MAKE/BREAK
C63C 301F             ( cubix_multio.asm):00589                 DEX
C63E 26F5             ( cubix_multio.asm):00590                 BNE     KBD_DEC6A                         ; LOOP THRU 4 MODIFIER BITS
C640 7EC67A           ( cubix_multio.asm):00591                 JMP     KBD_DEC7                          ; FAILSAFE, SHOULD NEVER GET HERE!
                      ( cubix_multio.asm):00592         
C643                  ( cubix_multio.asm):00593         KBD_DEC6B:                                        ; LEFT STATE KEY MAKE/BREAK (STATE BIT TO SET/CLEAR IN B)
C643 8EC3F8           ( cubix_multio.asm):00594                 LDX     #KBD_LSTATE                       ; POINT TO LEFT STATE BYTE
C646 7EC64F           ( cubix_multio.asm):00595                 JMP     KBD_DEC6D                         ; CONTINUE
                      ( cubix_multio.asm):00596         
C649                  ( cubix_multio.asm):00597         KBD_DEC6C:                                        ; RIGHT STATE KEY MAKE/BREAK (STATE BIT TO SET/CLEAR IN B)
C649 8EC3F9           ( cubix_multio.asm):00598                 LDX     #KBD_RSTATE                       ; POINT TO RIGHT STATE BYTE
C64C 7EC64F           ( cubix_multio.asm):00599                 JMP     KBD_DEC6D                         ; CONTINUE
                      ( cubix_multio.asm):00600         
C64F                  ( cubix_multio.asm):00601         KBD_DEC6D:                                        ; BRANCH BASED ON WHETHER THIS IS A MAKE OR BREAK EVENT
C64F B6C3FA           ( cubix_multio.asm):00602                 LDA     KBD_STATUS                        ; GET STATUS FLAGS
C652 8402             ( cubix_multio.asm):00603                 ANDA    #KBD_BREAK                        ; BREAK EVENT?
C654 2703             ( cubix_multio.asm):00604                 BEQ     KBD_DEC6E                         ; NO, HANDLE A MODIFIER KEY MAKE EVENT
C656 7EC660           ( cubix_multio.asm):00605                 JMP     KBD_DEC6F                         ; YES, HANDLE A MODIFIER BREAK EVENT
                      ( cubix_multio.asm):00606         
C659                  ( cubix_multio.asm):00607         KBD_DEC6E:                                        ; HANDLE STATE KEY MAKE EVENT
C659 EA84             ( cubix_multio.asm):00608                 ORB     ,X                                ; OR IN THE BIT TO SET
C65B E784             ( cubix_multio.asm):00609                 STB     ,X                                ; SAVE THE RESULT
C65D 7EC669           ( cubix_multio.asm):00610                 JMP     KBD_DEC6G                         ; CONTINUE
                      ( cubix_multio.asm):00611         
C660                  ( cubix_multio.asm):00612         KBD_DEC6F:                                        ; HANDLE STATE KEY BREAK EVENT
C660 C8FF             ( cubix_multio.asm):00613                 EORB    #$FF                              ; FLIP ALL BITS TO SETUP FOR A CLEAR OPERATION
C662 E484             ( cubix_multio.asm):00614                 ANDB    ,X                                ; AND IN THE FLIPPED BITS TO CLEAR DESIRED BIT
C664 E784             ( cubix_multio.asm):00615                 STB     ,X                                ; SAVE THE RESULT
C666 7EC669           ( cubix_multio.asm):00616                 JMP     KBD_DEC6G                         ; CONTINUE
                      ( cubix_multio.asm):00617         
C669                  ( cubix_multio.asm):00618         KBD_DEC6G:                                        ; COALESCE L/R STATE FLAGS
C669 B6C3F7           ( cubix_multio.asm):00619                 LDA     KBD_STATE                         ; GET EXISTING STATE BITS
C66C 84F0             ( cubix_multio.asm):00620                 ANDA    #$F0                              ; GET RID OF OLD MODIFIER BITS
C66E BAC3F8           ( cubix_multio.asm):00621                 ORA     KBD_LSTATE                        ; MERGE IN LEFT STATE BITS
C671 BAC3F9           ( cubix_multio.asm):00622                 ORA     KBD_RSTATE                        ; MERGE IN RIGHT STATE BITS
C674 B7C3F7           ( cubix_multio.asm):00623                 STA     KBD_STATE                         ; SAVE IT
C677 7EC744           ( cubix_multio.asm):00624                 JMP     KBD_DECNEW                        ; DONE WITH CURRENT KEYSTROKE
                      ( cubix_multio.asm):00625         
C67A                  ( cubix_multio.asm):00626         KBD_DEC7:                                         ; COMPLETE PROCESSING OF EXTENDED AND KEY BREAK EVENTS
C67A B6C3FA           ( cubix_multio.asm):00627                 LDA     KBD_STATUS                        ; GET CURRENT STATUS FLAGS
C67D 8402             ( cubix_multio.asm):00628                 ANDA    #KBD_BREAK                        ; IS THIS A KEY BREAK EVENT?
C67F 102600C1         ( cubix_multio.asm):00629                 LBNE    KBD_DECNEW                        ; PROCESS NEXT KEY
                      ( cubix_multio.asm):00630         
C683                  ( cubix_multio.asm):00631         KBD_DEC8:                                         ; HANDLE TOGGLE KEYS
C683 B6C3F6           ( cubix_multio.asm):00632                 LDA     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE INTO A
C686 C640             ( cubix_multio.asm):00633                 LDB     #KBD_CAPSLCK                      ; SETUP E WITH CAPS LOCK STATE BIT
C688 81BC             ( cubix_multio.asm):00634                 CMPA    #$BC                              ; IS THIS THE CAPS LOCK KEY?
C68A 270F             ( cubix_multio.asm):00635                 BEQ     KBD_DEC8A                         ; YES, GO TO BIT SET ROUTINE
C68C C620             ( cubix_multio.asm):00636                 LDB     #KBD_NUMLCK                       ; SETUP E WITH NUM LOCK STATE BIT
C68E 81BD             ( cubix_multio.asm):00637                 CMPA    #$BD                              ; IS THIS THE NUM LOCK KEY?
C690 2709             ( cubix_multio.asm):00638                 BEQ     KBD_DEC8A                         ; YES, GO TO BIT SET ROUTINE
C692 C610             ( cubix_multio.asm):00639                 LDB     #KBD_SCRLCK                       ; SETUP E WITH SCROLL LOCK STATE BIT
C694 81BE             ( cubix_multio.asm):00640                 CMPA    #$BE                              ; IS THIS THE SCROLL LOCK KEY?
C696 2703             ( cubix_multio.asm):00641                 BEQ     KBD_DEC8A                         ; YES, GO TO BIT SET ROUTINE
C698 7EC6A9           ( cubix_multio.asm):00642                 JMP     KBD_DEC9                          ; NOT A TOGGLE KEY, CONTINUE
                      ( cubix_multio.asm):00643         
C69B                  ( cubix_multio.asm):00644         KBD_DEC8A:                                        ; RECORD THE TOGGLE
C69B F8C3F7           ( cubix_multio.asm):00645                 EORB    KBD_STATE                         ; SET THE TOGGLE KEY BIT FROM ABOVE
C69E F7C3F7           ( cubix_multio.asm):00646                 STB     KBD_STATE                         ; SAVE IT
C6A1 1F98             ( cubix_multio.asm):00647                 TFR     B,A
C6A3 BDC4FA           ( cubix_multio.asm):00648                 JSR     KBD_SETLEDS                       ; UPDATE LED LIGHTS ON KBD
C6A6 7EC744           ( cubix_multio.asm):00649                 JMP     KBD_DECNEW                        ; RESTART DECODER FOR A NEW KEY
                      ( cubix_multio.asm):00650         
C6A9                  ( cubix_multio.asm):00651         KBD_DEC9:                                         ; ADJUST KEYCODE FOR CONTROL MODIFIER
C6A9 B6C3F7           ( cubix_multio.asm):00652                 LDA     KBD_STATE                         ; GET THE CURRENT STATE BITS
C6AC 8402             ( cubix_multio.asm):00653                 ANDA    #KBD_CTRL                         ; CHECK THE CONTROL BIT
C6AE 271A             ( cubix_multio.asm):00654                 BEQ     KBD_DEC10                         ; CONTROL KEY NOT PRESSED, MOVE ON
C6B0 B6C3F6           ( cubix_multio.asm):00655                 LDA     KBD_KEYCODE                       ; GET CURRENT KEYCODE IN A
C6B3 8161             ( cubix_multio.asm):00656                 CMPA    #'a'                              ; COMPARE TO LOWERCASE A
C6B5 2506             ( cubix_multio.asm):00657                 BLO     KBD_DEC9A                         ; BELOW IT, BYPASS
C6B7 817A             ( cubix_multio.asm):00658                 CMPA    #'z'                              ; COMPARE TO LOWERCASE Z+1
C6B9 2202             ( cubix_multio.asm):00659                 BHI     KBD_DEC9A                         ; ABOVE IT, BYPASS
C6BB 84DF             ( cubix_multio.asm):00660                 ANDA    #$DF                              ; KEYCODE IN LOWERCASE A-Z RANGE CLEAR BIT 5 TO MAKE IT UPPERCASE
C6BD                  ( cubix_multio.asm):00661         KBD_DEC9A:
C6BD 8140             ( cubix_multio.asm):00662                 CMPA    #'@'                              ; COMPARE TO @
C6BF 2509             ( cubix_multio.asm):00663                 BLO     KBD_DEC10                         ; BELOW IT, BYPASS
C6C1 815F             ( cubix_multio.asm):00664                 CMPA    #'_'                              ; COMPARE TO _+1
C6C3 2205             ( cubix_multio.asm):00665                 BHI     KBD_DEC10                         ; ABOVE IT, BYPASS
C6C5 84BF             ( cubix_multio.asm):00666                 ANDA    #$BF                              ; CONVERT TO CONTROL VALUE BY CLEARING BIT 6
C6C7 B7C3F6           ( cubix_multio.asm):00667                 STA     KBD_KEYCODE                       ; UPDATE KEYCODE TO CONTROL VALUE
                      ( cubix_multio.asm):00668         
C6CA                  ( cubix_multio.asm):00669         KBD_DEC10:                                        ; ADJUST KEYCODE FOR CAPS LOCK
C6CA B6C3F7           ( cubix_multio.asm):00670                 LDA     KBD_STATE                         ; LOAD THE STATE FLAGS
C6CD 8440             ( cubix_multio.asm):00671                 ANDA    #KBD_CAPSLCK                      ; CHECK CAPS LOCK
C6CF 2721             ( cubix_multio.asm):00672                 BEQ     KBD_DEC11                         ; CAPS LOCK NOT ACTIVE, MOVE ON
C6D1 B6C3F6           ( cubix_multio.asm):00673                 LDA     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE VALUE
C6D4 8161             ( cubix_multio.asm):00674                 CMPA    #'a'                              ; COMPARE TO LOWERCASE A
C6D6 2507             ( cubix_multio.asm):00675                 BLO     KBD_DEC10A                        ; BELOW IT, BYPASS
C6D8 817A             ( cubix_multio.asm):00676                 CMPA    #'z'                              ; COMPARE TO LOWERCASE Z+1
C6DA 2203             ( cubix_multio.asm):00677                 BHI     KBD_DEC10A                        ; ABOVE IT, BYPASS
C6DC 7EC6EA           ( cubix_multio.asm):00678                 JMP     KBD_DEC10B                        ; IN RANGE LOWERCASE A-Z, GO TO CASE SWAPPING LOGIC
C6DF                  ( cubix_multio.asm):00679         KBD_DEC10A:
C6DF 8141             ( cubix_multio.asm):00680                 CMPA    #'A'                              ; COMPARE TO UPPERCASE A
C6E1 250F             ( cubix_multio.asm):00681                 BLO     KBD_DEC11                         ; BELOW IT, BYPASS
C6E3 815A             ( cubix_multio.asm):00682                 CMPA    #'Z'                              ; COMPARE TO UPPERCASE Z+1
C6E5 220B             ( cubix_multio.asm):00683                 BHI     KBD_DEC11                         ; ABOVE IT, BYPASS
C6E7 7EC6EA           ( cubix_multio.asm):00684                 JMP     KBD_DEC10B                        ; IN RANGE UPPERCASE A-Z, GO TO CASE SWAPPING LOGIC
C6EA                  ( cubix_multio.asm):00685         KBD_DEC10B:
C6EA B6C3F6           ( cubix_multio.asm):00686                 LDA     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE
C6ED 8820             ( cubix_multio.asm):00687                 EORA    #$20                              ; FLIP BIT 5 TO SWAP UPPER/LOWER CASE
C6EF B7C3F6           ( cubix_multio.asm):00688                 STA     KBD_KEYCODE                       ; SAVE IT
                      ( cubix_multio.asm):00689         
C6F2                  ( cubix_multio.asm):00690         KBD_DEC11:                                        ; HANDLE NUM PAD KEYS
C6F2 B6C3F7           ( cubix_multio.asm):00691                 LDA     KBD_STATE                         ; GET THE CURRENT STATE FLAGS
C6F5 847F             ( cubix_multio.asm):00692                 ANDA    #~KBD_NUMPAD                      ; ASSUME NOT A NUMPAD KEY, CLEAR THE NUMPAD BIT
C6F7 B7C3F7           ( cubix_multio.asm):00693                 STA     KBD_STATE                         ; SAVE IT
                      ( cubix_multio.asm):00694         
C6FA B6C3F6           ( cubix_multio.asm):00695                 LDA     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE
C6FD 84E0             ( cubix_multio.asm):00696                 ANDA    #%11100000                        ; ISOLATE TOP 3 BITS
C6FF 81C0             ( cubix_multio.asm):00697                 CMPA    #%11000000                        ; IS IN NUMPAD RANGE?
C701 262D             ( cubix_multio.asm):00698                 BNE     KBD_DEC12                         ; NOPE, GET OUT
                      ( cubix_multio.asm):00699         
C703 B6C3F7           ( cubix_multio.asm):00700                 LDA     KBD_STATE                         ; LOAD THE CURRENT STATE FLAGS
C706 8A80             ( cubix_multio.asm):00701                 ORA     #KBD_NUMPAD                       ; TURN ON THE NUMPAD BIT
C708 B7C3F7           ( cubix_multio.asm):00702                 STA     KBD_STATE                         ; SAVE IT
                      ( cubix_multio.asm):00703         
C70B 8420             ( cubix_multio.asm):00704                 ANDA    #KBD_NUMLCK                       ; IS NUM LOCK BIT SET?
C70D 2708             ( cubix_multio.asm):00705                 BEQ     KBD_DEC11A                        ; NO, SKIP NUMLOCK PROCESSING
C70F B6C3F6           ( cubix_multio.asm):00706                 LDA     KBD_KEYCODE                       ; GET THE KEYCODE
C712 8810             ( cubix_multio.asm):00707                 EORA    #$10                              ; FLIP VALUES FOR NUMLOCK
C714 B7C3F6           ( cubix_multio.asm):00708                 STA     KBD_KEYCODE                       ; SAVE IT
                      ( cubix_multio.asm):00709         
C717                  ( cubix_multio.asm):00710         KBD_DEC11A:                                       ; APPLY NUMPAD MAPPING
C717 F6C3F6           ( cubix_multio.asm):00711                 LDB     KBD_KEYCODE                       ; GET THE CURRENT KEYCODE
C71A C0C0             ( cubix_multio.asm):00712                 SUBB    #$C0                              ; KEYCODES START AT $C0
C71C 8600             ( cubix_multio.asm):00713                 LDA     #$00
C71E FDC3FD           ( cubix_multio.asm):00714                 STD     KBD_TEMP
C721 CCC8F4           ( cubix_multio.asm):00715                 LDD     #KBD_MAPNUMPAD                    ; LOAD THE START OF THE MAPPING TABLE
C724 1CFE             ( cubix_multio.asm):00716                 CLC
C726 F3C3FD           ( cubix_multio.asm):00717                 ADDD    KBD_TEMP
C729 1F01             ( cubix_multio.asm):00718                 TFR     D,X                               ; INDEX IN X
                      ( cubix_multio.asm):00719         
C72B A684             ( cubix_multio.asm):00720                 LDA     ,X                                ; GET IT IN A
C72D B7C3F6           ( cubix_multio.asm):00721                 STA     KBD_KEYCODE                       ; SAVE IT
                      ( cubix_multio.asm):00722         
C730                  ( cubix_multio.asm):00723         KBD_DEC12:                                        ; DETECT UNKNOWN/INVALID KEYCODES
C730 B6C3F6           ( cubix_multio.asm):00724                 LDA     KBD_KEYCODE                       ; GET THE FINAL KEYCODE
C733 81FF             ( cubix_multio.asm):00725                 CMPA    #$FF                              ; IS IT $FF (UNKNOWN/INVALID)
C735 270D             ( cubix_multio.asm):00726                 BEQ     KBD_DECNEW                        ; IF SO, JUST RESTART THE ENGINE
                      ( cubix_multio.asm):00727         
C737                  ( cubix_multio.asm):00728         KBD_DEC13:                                        ; DONE - RECORD RESULTS
C737 B6C3FA           ( cubix_multio.asm):00729                 LDA     KBD_STATUS                        ; GET CURRENT STATUS
C73A 8A80             ( cubix_multio.asm):00730                 ORA     #KBD_KEYRDY                       ; SET KEY READY BIT
C73C B7C3FA           ( cubix_multio.asm):00731                 STA     KBD_STATUS                        ; SAVE IT
C73F 8600             ( cubix_multio.asm):00732                 LDA     #$00                              ; A=0
C741 1CFE             ( cubix_multio.asm):00733                 CLC                                       ; SIGNAL SUCCESS WITH A=1, CARRY CLEAR
C743 39               ( cubix_multio.asm):00734                 RTS
                      ( cubix_multio.asm):00735         
C744                  ( cubix_multio.asm):00736         KBD_DECNEW:                                       ; START NEW KEYPRESS (CLEAR ALL STATUS BITS)
C744 8600             ( cubix_multio.asm):00737                 LDA     #$00                              ; A=0
C746 B7C3FA           ( cubix_multio.asm):00738                 STA     KBD_STATUS                        ; CLEAR STATUS
C749 7EC571           ( cubix_multio.asm):00739                 JMP     KBD_DEC1                          ; RESTART THE ENGINE
                      ( cubix_multio.asm):00740         
C74C                  ( cubix_multio.asm):00741         DELAY:
C74C 3476             ( cubix_multio.asm):00742                 PSHS    A,B,X,Y,U
C74E 3576             ( cubix_multio.asm):00743                 PULS    A,B,X,Y,U
C750 3476             ( cubix_multio.asm):00744                 PSHS    A,B,X,Y,U
C752 3576             ( cubix_multio.asm):00745                 PULS    A,B,X,Y,U
C754 3476             ( cubix_multio.asm):00746                 PSHS    A,B,X,Y,U
C756 3576             ( cubix_multio.asm):00747                 PULS    A,B,X,Y,U
C758 3476             ( cubix_multio.asm):00748                 PSHS    A,B,X,Y,U
C75A 3576             ( cubix_multio.asm):00749                 PULS    A,B,X,Y,U
C75C 39               ( cubix_multio.asm):00750                 RTS
                      ( cubix_multio.asm):00751         
C75D                  ( cubix_multio.asm):00752         LDELAY:
C75D 3476             ( cubix_multio.asm):00753                 PSHS    A,B,X,Y,U
C75F 8E0100           ( cubix_multio.asm):00754                 LDX     #$100
                      ( cubix_multio.asm):00755         !
C762 BDC74C           ( cubix_multio.asm):00756                 JSR     DELAY
C765 301F             ( cubix_multio.asm):00757                 DEX
C767 26F9             ( cubix_multio.asm):00758                 BNE     <
C769 3576             ( cubix_multio.asm):00759                 PULS    A,B,X,Y,U
C76B 39               ( cubix_multio.asm):00760                 RTS
                      ( cubix_multio.asm):00761         
                      ( cubix_multio.asm):00762         ;
                      ( cubix_multio.asm):00763         ; DRIVER DATA
                      ( cubix_multio.asm):00764         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00765         ; MESSAGES
                      ( cubix_multio.asm):00766         ;__________________________________________________________________________________________________
C76C                  ( cubix_multio.asm):00767         MIOMESSAGE1:
C76C 495341204D554C54 ( cubix_multio.asm):00768                 FCC     "ISA MULTI-IO:"
     492D494F3A
C779 00               ( cubix_multio.asm):00769                 FCB     00
C77A                  ( cubix_multio.asm):00770         MIOMESSAGE3:
C77A 20204B42443A2056 ( cubix_multio.asm):00771                 FCC     "  KBD: VT82C42 NOT FOUND."
     543832433432204E
     4F5420464F554E44
     2E
C793 00               ( cubix_multio.asm):00772                 FCB     00
C794                  ( cubix_multio.asm):00773         MIOMESSAGE4:
C794 20204B42443A2049 ( cubix_multio.asm):00774                 FCC     "  KBD: INITIALIZED."
     4E495449414C495A
     45442E
C7A7 00               ( cubix_multio.asm):00775                 FCB     00
C7A8                  ( cubix_multio.asm):00776         MIOMESSAGE5:
C7A8 20204C50543A2049 ( cubix_multio.asm):00777                 FCC     "  LPT: INITIALIZED."
     4E495449414C495A
     45442E
C7BB 00               ( cubix_multio.asm):00778                 FCB     00
                      ( cubix_multio.asm):00779         
                      ( cubix_multio.asm):00780         ;
                      ( cubix_multio.asm):00781         ; MAPPING
                      ( cubix_multio.asm):00782         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00783         ;
C7BC                  ( cubix_multio.asm):00784         KBD_MAPSTD:                                       ; SCANCODE IS INDEX INTO TABLE TO RESULTANT LOOKUP KEYCODE
C7BC FFE8FFE4E2E0E1EB ( cubix_multio.asm):00785                 FCB     $FF,$E8,$FF,$E4,$E2,$E0,$E1,$EB,$FF,$E9,$E7,$E5,$E3,$09,'`',$FF
     FFE9E7E5E30960FF
C7CC FFB4B0FFB27131FF ( cubix_multio.asm):00786                 FCB     $FF,$B4,$B0,$FF,$B2,'q','1',$FF,$FF,$FF,'z','s','a','w','2',$FF
     FFFF7A73617732FF
C7DC FF637864653433FF ( cubix_multio.asm):00787                 FCB     $FF,'c','x','d','e','4','3',$FF,$FF,' ','v','f','t','r','5',$FF
     FF207666747235FF
C7EC FF6E6268677936FF ( cubix_multio.asm):00788                 FCB     $FF,'n','b','h','g','y','6',$FF,$FF,$FF,'m','j','u','7','8',$FF
     FFFF6D6A753738FF
C7FC FF2C6B696F3039FF ( cubix_multio.asm):00789                 FCB     $FF,',','k','i','o','0','9',$FF,$FF,'.','/','l',';','p','-',$FF
     FF2E2F6C3B702DFF
C80C FFFF27FF5B3DFFFF ( cubix_multio.asm):00790                 FCB     $FF,$FF,$27,$FF,'[','=',$FF,$FF,$BC,$B1,$0D,']',$FF,'\',$FF,$FF
     BCB10D5DFF5CFFFF
C81C FFFFFFFFFFFF08FF ( cubix_multio.asm):00791                 FCB     $FF,$FF,$FF,$FF,$FF,$FF,$08,$FF,$FF,$C0,$FF,$C3,$C6,$FF,$FF,$FF
     FFC0FFC3C6FFFFFF
C82C C9CAC1C4C5C71BBD ( cubix_multio.asm):00792                 FCB     $C9,$CA,$C1,$C4,$C5,$C7,$1B,$BD,$FA,$CE,$C2,$CD,$CC,$C8,$BE,$FF
     FACEC2CDCCC8BEFF
C83C FFFFFFE6EC       ( cubix_multio.asm):00793                 FCB     $FF,$FF,$FF,$E6,$EC
C841                  ( cubix_multio.asm):00794         BD_MAPSTDEND:
                      ( cubix_multio.asm):00795         ;
     0085             ( cubix_multio.asm):00796         KBD_MAPSIZ      EQU BD_MAPSTDEND-KBD_MAPSTD
                      ( cubix_multio.asm):00797         ;
C841                  ( cubix_multio.asm):00798         KBD_MAPSHIFT:                                     ; SCANCODE IS INDEX INTO TABLE TO RESULTANT LOOKUP KEYCODE WHEN SHIFT ACTIVE
C841 FFE8FFE4E2E0E1EB ( cubix_multio.asm):00799                 FCB     $FF,$E8,$FF,$E4,$E2,$E0,$E1,$EB,$FF,$E9,$E7,$E5,$E3,$09,'~',$FF
     FFE9E7E5E3097EFF
C851 FFB4B0FFB25121FF ( cubix_multio.asm):00800                 FCB     $FF,$B4,$B0,$FF,$B2,'Q','!',$FF,$FF,$FF,'Z','S','A','W','@',$FF
     FFFF5A53415740FF
C861 FF435844452423FF ( cubix_multio.asm):00801                 FCB     $FF,'C','X','D','E','$','#',$FF,$FF,' ','V','F','T','R','%',$FF
     FF205646545225FF
C871 FF4E424847595EFF ( cubix_multio.asm):00802                 FCB     $FF,'N','B','H','G','Y','^',$FF,$FF,$FF,'M','J','U','&','*',$FF
     FFFF4D4A55262AFF
C881 FF3C4B494F2928FF ( cubix_multio.asm):00803                 FCB     $FF,'<','K','I','O',')','(',$FF,$FF,'>','?','L',':','P','_',$FF
     FF3E3F4C3A505FFF
C891 FFFF22FF7B2BFFFF ( cubix_multio.asm):00804                 FCB     $FF,$FF,$22,$FF,'{','+',$FF,$FF,$BC,$B1,$0D,'}',$FF,'|',$FF,$FF
     BCB10D7DFF7CFFFF
C8A1 FFFFFFFFFFFF08FF ( cubix_multio.asm):00805                 FCB     $FF,$FF,$FF,$FF,$FF,$FF,$08,$FF,$FF,$D0,$FF,$D3,$D6,$FF,$FF,$FF
     FFD0FFD3D6FFFFFF
C8B1 D9DAD1D4D5D71BBD ( cubix_multio.asm):00806                 FCB     $D9,$DA,$D1,$D4,$D5,$D7,$1B,$BD,$FA,$DE,$D2,$DD,$DC,$D8,$BE,$FF
     FADED2DDDCD8BEFF
C8C1 FFFFFFE6EC       ( cubix_multio.asm):00807                 FCB     $FF,$FF,$FF,$E6,$EC
                      ( cubix_multio.asm):00808         ;
C8C6                  ( cubix_multio.asm):00809         KBD_MAPEXT:                                       ; PAIRS ARE [SCANCODE,KEYCODE] FOR EXTENDED SCANCODES
C8C6 11B514B31FB627B7 ( cubix_multio.asm):00810                 FCB     $11,$B5,$14,$B3,$1F,$B6,$27,$B7
C8CE 2FEF37FA3FFB4ACB ( cubix_multio.asm):00811                 FCB     $2F,$EF,$37,$FA,$3F,$FB,$4A,$CB
C8D6 5ACF5EFC69F36BF8 ( cubix_multio.asm):00812                 FCB     $5A,$CF,$5E,$FC,$69,$F3,$6B,$F8
C8DE 6CF270F071F172F7 ( cubix_multio.asm):00813                 FCB     $6C,$F2,$70,$F0,$71,$F1,$72,$F7
C8E6 74F975F67AF57CED ( cubix_multio.asm):00814                 FCB     $74,$F9,$75,$F6,$7A,$F5,$7C,$ED
C8EE 7DF47EFD0000     ( cubix_multio.asm):00815                 FCB     $7D,$F4,$7E,$FD,$00,$00
                      ( cubix_multio.asm):00816         ;
C8F4                  ( cubix_multio.asm):00817         KBD_MAPNUMPAD:                                    ; KEYCODE TRANSLATION FROM NUMPAD RANGE TO STD ASCII/KEYCODES
C8F4 F3F7F5F8FFF9F2F6 ( cubix_multio.asm):00818                 FCB     $F3,$F7,$F5,$F8,$FF,$F9,$F2,$F6,$F4,$F0,$F1,$2F,$2A,$2D,$2B,$0D
     F4F0F12F2A2D2B0D
C904 3132333435363738 ( cubix_multio.asm):00819                 FCB     $31,$32,$33,$34,$35,$36,$37,$38,$39,$30,$2E,$2F,$2A,$2D,$2B,$0D
     39302E2F2A2D2B0D
                      ( cubix_multio.asm):00820         ;
                      ( cubix_multio.asm):00821         ;
                      ( cubix_multio.asm):00822         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00823         ; KEYCODE VALUES RETURNED BY THE DECODER
                      ( cubix_multio.asm):00824         ;__________________________________________________________________________________________________
                      ( cubix_multio.asm):00825         ;
                      ( cubix_multio.asm):00826         ; VALUES 0-127 ARE STANDARD ASCII, SPECIAL KEYS WILL HAVE THE FOLLOWING VALUES:
                      ( cubix_multio.asm):00827         ;
                      ( cubix_multio.asm):00828         ; F1            $E0
                      ( cubix_multio.asm):00829         ; F2            $E1
                      ( cubix_multio.asm):00830         ; F3            $E2
                      ( cubix_multio.asm):00831         ; F4            $E3
                      ( cubix_multio.asm):00832         ; F5            $E4
                      ( cubix_multio.asm):00833         ; F6            $E5
                      ( cubix_multio.asm):00834         ; F7            $E6
                      ( cubix_multio.asm):00835         ; F8            $E7
                      ( cubix_multio.asm):00836         ; F9            $E8
                      ( cubix_multio.asm):00837         ; F10           $E9
                      ( cubix_multio.asm):00838         ; F11           $EA
                      ( cubix_multio.asm):00839         ; F12           $EB
                      ( cubix_multio.asm):00840         ; SYSRQ         $EC
                      ( cubix_multio.asm):00841         ; PRTSC         $ED
                      ( cubix_multio.asm):00842         ; PAUSE         $EE
                      ( cubix_multio.asm):00843         ; APP           $EF
                      ( cubix_multio.asm):00844         ; INS           $F0
                      ( cubix_multio.asm):00845         ; DEL           $F1
                      ( cubix_multio.asm):00846         ; HOME          $F2
                      ( cubix_multio.asm):00847         ; END           $F3
                      ( cubix_multio.asm):00848         ; PGUP          $F4
                      ( cubix_multio.asm):00849         ; PGDN          $F5
                      ( cubix_multio.asm):00850         ; UP            $F6
                      ( cubix_multio.asm):00851         ; DOWN          $F7
                      ( cubix_multio.asm):00852         ; LEFT          $F8
                      ( cubix_multio.asm):00853         ; RIGHT         $F9
                      ( cubix_multio.asm):00854         ; POWER         $FA
                      ( cubix_multio.asm):00855         ; SLEEP         $FB
                      ( cubix_multio.asm):00856         ; WAKE          $FC
                      ( cubix_multio.asm):00857         ; BREAK         $FD
                      ( cubix_multio.asm):00858         ;___________________________________________________________________________________________________________________
                      ( cubix_multio.asm):00859         ;
                      ( cubix_multio.asm):00860         ; CENTRONICS (LPT) INTERFACE DRIVER
                      ( cubix_multio.asm):00861         ;___________________________________________________________________________________________________________________
                      ( cubix_multio.asm):00862         ;
                      ( cubix_multio.asm):00863         ; BYTE OUTPUT
                      ( cubix_multio.asm):00864         ;
C914                  ( cubix_multio.asm):00865         LPT_OUT:
C914 8E30FF           ( cubix_multio.asm):00866                 LDX     #LPT_WAITTO
                      ( cubix_multio.asm):00867         !
C917 BDC939           ( cubix_multio.asm):00868                 JSR     LPT_OST                           ; READY TO SEND?
C91A 2607             ( cubix_multio.asm):00869                 BNE     >                                 ; GO IF READY
C91C 301F             ( cubix_multio.asm):00870                 DEX
C91E 26F7             ( cubix_multio.asm):00871                 BNE     <                                 ; LOOP IF NOT READY
C920 1A01             ( cubix_multio.asm):00872                 SEC                                       ; SIGNAL ERROR
C922 39               ( cubix_multio.asm):00873                 RTS
                      ( cubix_multio.asm):00874         !
C923 B713F0           ( cubix_multio.asm):00875                 STA     LPT_0                             ; OUTPUT TO PORT 0 (DATA)
C926 860D             ( cubix_multio.asm):00876                 LDA     #%00001101                        ; SELECT & STROBE, LEDS OFF
C928 B713F2           ( cubix_multio.asm):00877                 STA     LPT_2                             ; OUTPUT DATA TO PORT
C92B BDC74C           ( cubix_multio.asm):00878                 JSR     DELAY
C92E 860C             ( cubix_multio.asm):00879                 LDA     #%00001100                        ; SELECT, LEDS OFF
C930 B713F2           ( cubix_multio.asm):00880                 STA     LPT_2                             ; OUTPUT DATA TO PORT
C933 BDC74C           ( cubix_multio.asm):00881                 JSR     DELAY
C936 1CFE             ( cubix_multio.asm):00882                 CLC
C938 39               ( cubix_multio.asm):00883                 RTS
                      ( cubix_multio.asm):00884         ;
                      ( cubix_multio.asm):00885         ; OUTPUT STATUS
                      ( cubix_multio.asm):00886         ;
C939                  ( cubix_multio.asm):00887         LPT_OST:
C939 F613F2           ( cubix_multio.asm):00888                 LDB     LPT_2                             ; GET STATUS INFO
C93C C480             ( cubix_multio.asm):00889                 ANDB    #%10000000                        ; ISOLATE /BUSY
C93E 39               ( cubix_multio.asm):00890                 RTS                                       ; DONE
                      (     cubixdrv.asm):00125                 INCLUDE cubix_esp.asm
                      (    cubix_esp.asm):00001         ;__ESP DRIVERS______________________________________________________________________________________________________________
                      (    cubix_esp.asm):00002         ;
                      (    cubix_esp.asm):00003         ;       CUBIX ISA DUAL ESP IO drivers for 6809PC
                      (    cubix_esp.asm):00004         ;
                      (    cubix_esp.asm):00005         ;       Entry points:
                      (    cubix_esp.asm):00006         ;               ESPINIT     - INIT HARDWARE
                      (    cubix_esp.asm):00007         ;               ESPVIDEOOUT - OUTPUT A CHARACTER TO VIDEO (ANSI)
                      (    cubix_esp.asm):00008         ;               ESPPS2IN    - read a character from the ps/2 keyboard ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00009         ;               ESPPS2BUFL  - return number of characters in the keyboard buffer in 'A'
                      (    cubix_esp.asm):00010         ;               ESPCURSORV  - Set Cursor Visibility (A=0 cursor off, A=1 cursor on)
                      (    cubix_esp.asm):00011         ;               ESPSER0OUT  - OUTPUT A CHARACTER TO Serial 0 ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00012         ;               ESPSER0IN   - read a character from Serial 0 ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00013         ;               ESPSER0BUFL - return number of characters in the Serial 0 buffer in 'A'
                      (    cubix_esp.asm):00014         ;               ESPSER1OUT  - OUTPUT A CHARACTER TO Serial 1 ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00015         ;               ESPSER1IN   - read a character from Serial 1 ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00016         ;               ESPSER1BUFL - return number of characters in the Serial 1 buffer in 'A'
                      (    cubix_esp.asm):00017         ;               ESPNETCOUT  - OUTPUT A CHARACTER TO Network Console Connection ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00018         ;               ESPNETCIN   - read a character from Network Console Connection ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00019         ;               ESPNETCBUFL - return number of characters in the Network Connection buffer in 'A'
                      (    cubix_esp.asm):00020         ;               PUTESP0     - put opcode/data to ESP0
                      (    cubix_esp.asm):00021         ;               PUTESP1     - put opcode/data to ESP1
                      (    cubix_esp.asm):00022         ;               GETESP0     - get opcode/data from ESP0
                      (    cubix_esp.asm):00023         ;               GETESP1     - get opcode/data from ESP1
                      (    cubix_esp.asm):00024         ;________________________________________________________________________________________________________________________________
                      (    cubix_esp.asm):00025         ;
                      (    cubix_esp.asm):00026         ;*
                      (    cubix_esp.asm):00027         ;*        HARDWARE I/O ADDRESSES
                      (    cubix_esp.asm):00028         ;*
                      (    cubix_esp.asm):00029         ;
     1100             (    cubix_esp.asm):00030         ESP_BASE        EQU CUBIX_IO_BASE+$100
     1100             (    cubix_esp.asm):00031         ESP0_DAT        EQU ESP_BASE                      ;
     1101             (    cubix_esp.asm):00032         ESP1_DAT        EQU ESP_BASE+1                    ;
     1102             (    cubix_esp.asm):00033         ESP_STAT        EQU ESP_BASE+2                    ;
                      (    cubix_esp.asm):00034         
                      (    cubix_esp.asm):00035         
                      (    cubix_esp.asm):00036         
                      (    cubix_esp.asm):00037         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00038         ;
                      (    cubix_esp.asm):00039         ; STATUS BITS (FOR KBD_STATUS)
                      (    cubix_esp.asm):00040         ;
     0001             (    cubix_esp.asm):00041         ESP0_RDY        EQU $01                           ; BIT 0, ESP0 READY
     0002             (    cubix_esp.asm):00042         ESP0_BUSY       EQU $02                           ; BIT 1, ESP0 BUSY
     0008             (    cubix_esp.asm):00043         ESP1_RDY        EQU $08                           ; BIT 3, ESP1 READY
     0010             (    cubix_esp.asm):00044         ESP1_BUSY       EQU $10                           ; BIT 4, ESP1 BUSY
                      (    cubix_esp.asm):00045         ;
                      (    cubix_esp.asm):00046         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00047         ; DATA
                      (    cubix_esp.asm):00048         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00049         ;
                      (    cubix_esp.asm):00050         ;
                      (    cubix_esp.asm):00051         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00052         ; ESP IO INITIALIZATION
                      (    cubix_esp.asm):00053         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00054         ;
                      (    cubix_esp.asm):00055                 IFNDEF  BIOS6809PC
C93F                  (    cubix_esp.asm):00056         ESPINIT:
                      (    cubix_esp.asm):00057         ;
C93F BDCE68           (    cubix_esp.asm):00058                 JSR     LFCR                              ; AND CRLF
C942 8ECB9F           (    cubix_esp.asm):00059                 LDX     #ESPMESSAGE1
C945 BDCE7C           (    cubix_esp.asm):00060                 JSR     WRSTR                             ; DO PROMPT
C948 BDCE68           (    cubix_esp.asm):00061                 JSR     LFCR                              ; AND CRLF
                      (    cubix_esp.asm):00062         ; KEYBOARD INITIALIZATION
C94B 8EC390           (    cubix_esp.asm):00063                 LDX     #MESSAGE2
C94E BDCE7C           (    cubix_esp.asm):00064                 JSR     WRSTR                             ; DO PROMPT
C951 CC1100           (    cubix_esp.asm):00065                 LDD     #ESP_BASE                         ; GET BASE PORT
C954 BDCE88           (    cubix_esp.asm):00066                 JSR     WRHEXW                            ; PRINT BASE PORT
C957 BDCE68           (    cubix_esp.asm):00067                 JSR     LFCR                              ; AND CRLF
                      (    cubix_esp.asm):00068         ;
C95A BDC967           (    cubix_esp.asm):00069                 JSR     ESP0_PROBE                        ; DETECT ESP0
C95D BDCE68           (    cubix_esp.asm):00070                 JSR     LFCR                              ; AND CRLF
C960 BDC9D2           (    cubix_esp.asm):00071                 JSR     ESP1_PROBE                        ; DETECT ESP1
C963 BDCE68           (    cubix_esp.asm):00072                 JSR     LFCR                              ; AND CRLF
C966 39               (    cubix_esp.asm):00073                 RTS                                       ; DONE
                      (    cubix_esp.asm):00074         
                      (    cubix_esp.asm):00075         
C967                  (    cubix_esp.asm):00076         ESP0_PROBE:
                      (    cubix_esp.asm):00077         ;
C967 8ECBAC           (    cubix_esp.asm):00078                 LDX     #ESPMESSAGE2                      ; PRINT 'ESP0'
C96A BDCE7C           (    cubix_esp.asm):00079                 JSR     WRSTR
                      (    cubix_esp.asm):00080         
C96D 86FF             (    cubix_esp.asm):00081                 LDA     #$FF                              ; ESP IDENTITY PROBE
C96F BDCB05           (    cubix_esp.asm):00082                 JSR     PUTESP0                           ; SEND IT
C972 2554             (    cubix_esp.asm):00083                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00084         
C974 BDCB22           (    cubix_esp.asm):00085                 JSR     GETESP0
C977 254F             (    cubix_esp.asm):00086                 BCS     ESP_ERROR
C979 8145             (    cubix_esp.asm):00087                 CMPA    #'E'
C97B 264B             (    cubix_esp.asm):00088                 BNE     ESP_ERROR
C97D BDCB22           (    cubix_esp.asm):00089                 JSR     GETESP0
C980 2546             (    cubix_esp.asm):00090                 BCS     ESP_ERROR
C982 8153             (    cubix_esp.asm):00091                 CMPA    #'S'
C984 2642             (    cubix_esp.asm):00092                 BNE     ESP_ERROR
C986 BDCB22           (    cubix_esp.asm):00093                 JSR     GETESP0
C989 253D             (    cubix_esp.asm):00094                 BCS     ESP_ERROR
C98B 8150             (    cubix_esp.asm):00095                 CMPA    #'P'
C98D 2639             (    cubix_esp.asm):00096                 BNE     ESP_ERROR
C98F BDCB22           (    cubix_esp.asm):00097                 JSR     GETESP0
C992 2534             (    cubix_esp.asm):00098                 BCS     ESP_ERROR
C994 8133             (    cubix_esp.asm):00099                 CMPA    #'3'
C996 2630             (    cubix_esp.asm):00100                 BNE     ESP_ERROR
C998 BDCB22           (    cubix_esp.asm):00101                 JSR     GETESP0
C99B 252B             (    cubix_esp.asm):00102                 BCS     ESP_ERROR
C99D 8132             (    cubix_esp.asm):00103                 CMPA    #'2'
C99F 2627             (    cubix_esp.asm):00104                 BNE     ESP_ERROR
C9A1 BDCB22           (    cubix_esp.asm):00105                 JSR     GETESP0
C9A4 2522             (    cubix_esp.asm):00106                 BCS     ESP_ERROR
C9A6 8156             (    cubix_esp.asm):00107                 CMPA    #'V'
C9A8 261E             (    cubix_esp.asm):00108                 BNE     ESP_ERROR
C9AA BDCB22           (    cubix_esp.asm):00109                 JSR     GETESP0
C9AD 2519             (    cubix_esp.asm):00110                 BCS     ESP_ERROR
C9AF 8131             (    cubix_esp.asm):00111                 CMPA    #'1'
C9B1 2615             (    cubix_esp.asm):00112                 BNE     ESP_ERROR
C9B3 8ECBC2           (    cubix_esp.asm):00113                 LDX     #ESPMESSAGE5                      ; PRINT 'FOUND'
C9B6 BDCE7C           (    cubix_esp.asm):00114                 JSR     WRSTR
C9B9 8E0020           (    cubix_esp.asm):00115                 LDX     #$20
                      (    cubix_esp.asm):00116         !
C9BC 8600             (    cubix_esp.asm):00117                 LDA     #00
C9BE BDCB05           (    cubix_esp.asm):00118                 JSR     PUTESP0
C9C1 301F             (    cubix_esp.asm):00119                 LEAX    -1,X
C9C3 26F7             (    cubix_esp.asm):00120                 BNE     <
C9C5 1CFE             (    cubix_esp.asm):00121                 CLC
C9C7 39               (    cubix_esp.asm):00122                 RTS
                      (    cubix_esp.asm):00123         ;
                      (    cubix_esp.asm):00124         ;
C9C8                  (    cubix_esp.asm):00125         ESP_ERROR:
C9C8 8ECBBE           (    cubix_esp.asm):00126                 LDX     #ESPMESSAGE4                      ; PRINT NOT FOUND
C9CB BDCE7C           (    cubix_esp.asm):00127                 JSR     WRSTR
C9CE BDCE68           (    cubix_esp.asm):00128                 JSR     LFCR                              ; AND CRLF
C9D1 39               (    cubix_esp.asm):00129                 RTS
                      (    cubix_esp.asm):00130         
                      (    cubix_esp.asm):00131         ;
C9D2                  (    cubix_esp.asm):00132         ESP1_PROBE:
                      (    cubix_esp.asm):00133         ;
C9D2 8ECBB5           (    cubix_esp.asm):00134                 LDX     #ESPMESSAGE3                      ; PRINT 'ESP1'
C9D5 BDCE7C           (    cubix_esp.asm):00135                 JSR     WRSTR
                      (    cubix_esp.asm):00136         
C9D8 86FF             (    cubix_esp.asm):00137                 LDA     #$FF                              ; ESP IDENTITY PROBE
C9DA BDCB52           (    cubix_esp.asm):00138                 JSR     PUTESP1                           ; SEND IT
C9DD 25E9             (    cubix_esp.asm):00139                 BCS     ESP_ERROR
                      (    cubix_esp.asm):00140         
C9DF BDCB6F           (    cubix_esp.asm):00141                 JSR     GETESP1
C9E2 25E4             (    cubix_esp.asm):00142                 BCS     ESP_ERROR
C9E4 8145             (    cubix_esp.asm):00143                 CMPA    #'E'
C9E6 26E0             (    cubix_esp.asm):00144                 BNE     ESP_ERROR
C9E8 BDCB6F           (    cubix_esp.asm):00145                 JSR     GETESP1
C9EB 25DB             (    cubix_esp.asm):00146                 BCS     ESP_ERROR
C9ED 8153             (    cubix_esp.asm):00147                 CMPA    #'S'
C9EF 26D7             (    cubix_esp.asm):00148                 BNE     ESP_ERROR
C9F1 BDCB6F           (    cubix_esp.asm):00149                 JSR     GETESP1
C9F4 25D2             (    cubix_esp.asm):00150                 BCS     ESP_ERROR
C9F6 8150             (    cubix_esp.asm):00151                 CMPA    #'P'
C9F8 26CE             (    cubix_esp.asm):00152                 BNE     ESP_ERROR
C9FA BDCB6F           (    cubix_esp.asm):00153                 JSR     GETESP1
C9FD 25C9             (    cubix_esp.asm):00154                 BCS     ESP_ERROR
C9FF 8133             (    cubix_esp.asm):00155                 CMPA    #'3'
CA01 26C5             (    cubix_esp.asm):00156                 BNE     ESP_ERROR
CA03 BDCB6F           (    cubix_esp.asm):00157                 JSR     GETESP1
CA06 25C0             (    cubix_esp.asm):00158                 BCS     ESP_ERROR
CA08 8132             (    cubix_esp.asm):00159                 CMPA    #'2'
CA0A 26BC             (    cubix_esp.asm):00160                 BNE     ESP_ERROR
CA0C BDCB6F           (    cubix_esp.asm):00161                 JSR     GETESP1
CA0F 25B7             (    cubix_esp.asm):00162                 BCS     ESP_ERROR
CA11 8156             (    cubix_esp.asm):00163                 CMPA    #'V'
CA13 26B3             (    cubix_esp.asm):00164                 BNE     ESP_ERROR
CA15 BDCB6F           (    cubix_esp.asm):00165                 JSR     GETESP1
CA18 25AE             (    cubix_esp.asm):00166                 BCS     ESP_ERROR
CA1A 8131             (    cubix_esp.asm):00167                 CMPA    #'1'
CA1C 26AA             (    cubix_esp.asm):00168                 BNE     ESP_ERROR
CA1E 8ECBC2           (    cubix_esp.asm):00169                 LDX     #ESPMESSAGE5                      ; PRINT 'FOUND'
CA21 BDCE7C           (    cubix_esp.asm):00170                 JSR     WRSTR
CA24 8E0020           (    cubix_esp.asm):00171                 LDX     #$20
                      (    cubix_esp.asm):00172         !
CA27 8600             (    cubix_esp.asm):00173                 LDA     #00
CA29 BDCB52           (    cubix_esp.asm):00174                 JSR     PUTESP1
CA2C 301F             (    cubix_esp.asm):00175                 LEAX    -1,X
CA2E 26F7             (    cubix_esp.asm):00176                 BNE     <
CA30 1CFE             (    cubix_esp.asm):00177                 CLC
CA32 39               (    cubix_esp.asm):00178                 RTS
                      (    cubix_esp.asm):00179         
                      (    cubix_esp.asm):00180         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00181         ; ESPCURSORV  - Set Cursor Visibility (A=0 cursor off, A=1 cursor on)
                      (    cubix_esp.asm):00182         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00183         ;
CA33                  (    cubix_esp.asm):00184         ESPCURSORV:
CA33 3402             (    cubix_esp.asm):00185                 PSHS    A
CA35 8605             (    cubix_esp.asm):00186                 LDA     #05                               ; ESP OPCODE
CA37 BDCB05           (    cubix_esp.asm):00187                 JSR     PUTESP0                           ; SEND IT
CA3A 3502             (    cubix_esp.asm):00188                 PULS    A
CA3C BDCB05           (    cubix_esp.asm):00189                 JSR     PUTESP0                           ; SEND IT
CA3F 39               (    cubix_esp.asm):00190                 RTS
                      (    cubix_esp.asm):00191         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00192         ; ESPSER0OUT  - OUTPUT A CHARACTER TO Serial 0 ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00193         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00194         ;
CA40                  (    cubix_esp.asm):00195         ESPSER0OUT:
CA40 3402             (    cubix_esp.asm):00196                 PSHS    A
CA42 8608             (    cubix_esp.asm):00197                 LDA     #08                               ; ESP OPCODE
CA44 BDCB05           (    cubix_esp.asm):00198                 JSR     PUTESP0                           ; SEND IT
CA47 3502             (    cubix_esp.asm):00199                 PULS    A
CA49 BDCB05           (    cubix_esp.asm):00200                 JSR     PUTESP0                           ; SEND IT
CA4C 39               (    cubix_esp.asm):00201                 RTS
                      (    cubix_esp.asm):00202         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00203         ; ESPSER0IN   - read a character from Serial 0 ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00204         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00205         ;
CA4D                  (    cubix_esp.asm):00206         ESPSER0IN:
CA4D 860A             (    cubix_esp.asm):00207                 LDA     #10                               ; ESP IN FROM Serial 0
CA4F 7ECAED           (    cubix_esp.asm):00208                 JMP     ESPCHIN
                      (    cubix_esp.asm):00209         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00210         ; ESPSER1OUT  - OUTPUT A CHARACTER TO Serial 1 ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00211         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00212         ;
CA52                  (    cubix_esp.asm):00213         ESPSER1OUT:
CA52 3402             (    cubix_esp.asm):00214                 PSHS    A
CA54 8608             (    cubix_esp.asm):00215                 LDA     #08                               ; ESP OPCODE
CA56 BDCB52           (    cubix_esp.asm):00216                 JSR     PUTESP1                           ; SEND IT
CA59 3502             (    cubix_esp.asm):00217                 PULS    A
CA5B BDCB52           (    cubix_esp.asm):00218                 JSR     PUTESP1                           ; SEND IT
CA5E 39               (    cubix_esp.asm):00219                 RTS
                      (    cubix_esp.asm):00220         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00221         ; ESPSER1IN   - read a character from Serial 1 ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00222         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00223         ;
CA5F                  (    cubix_esp.asm):00224         ESPSER1IN:
CA5F 860A             (    cubix_esp.asm):00225                 LDA     #10                               ; ESP IN FROM Serial 1
CA61                  (    cubix_esp.asm):00226         ESPCH1IN:
CA61 BDCB52           (    cubix_esp.asm):00227                 JSR     PUTESP1                           ; SEND IT
CA64 250D             (    cubix_esp.asm):00228                 BCS     >
CA66 BDCB6F           (    cubix_esp.asm):00229                 JSR     GETESP1                           ; GET IT
CA69 2508             (    cubix_esp.asm):00230                 BCS     >
CA6B 8100             (    cubix_esp.asm):00231                 CMPA    #$00
CA6D 2704             (    cubix_esp.asm):00232                 BEQ     >
CA6F B70109           (    cubix_esp.asm):00233                 STA     >PAGER_D                          ; SAVE 'D'
CA72 39               (    cubix_esp.asm):00234                 RTS
                      (    cubix_esp.asm):00235         !
CA73 86FF             (    cubix_esp.asm):00236                 LDA     #$FF
CA75 B70109           (    cubix_esp.asm):00237                 STA     >PAGER_D                          ; SAVE 'D'
CA78 39               (    cubix_esp.asm):00238                 RTS
                      (    cubix_esp.asm):00239         
                      (    cubix_esp.asm):00240         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00241         ; ESPNETCOUT  - OUTPUT A CHARACTER TO Network Console Connection ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00242         ;               Connection Stored in 'consoleConnect' value
                      (    cubix_esp.asm):00243         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00244         ;
CA79                  (    cubix_esp.asm):00245         ESPNETCOUT:
CA79 3402             (    cubix_esp.asm):00246                 PSHS    A
CA7B 8619             (    cubix_esp.asm):00247                 LDA     #25                               ; ESP OPCODE
CA7D BDCB05           (    cubix_esp.asm):00248                 JSR     PUTESP0                           ; SEND IT
CA80 B60100           (    cubix_esp.asm):00249                 LDA     consoleConnect
CA83 BDCB05           (    cubix_esp.asm):00250                 JSR     PUTESP0                           ; SEND IT
CA86 3502             (    cubix_esp.asm):00251                 PULS    A
CA88 BDCB05           (    cubix_esp.asm):00252                 JSR     PUTESP0                           ; SEND IT
CA8B 39               (    cubix_esp.asm):00253                 RTS
                      (    cubix_esp.asm):00254         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00255         ; ESPNETCIN   - read a character from Network Console Connection ('A' POINTS TO BYTE)
                      (    cubix_esp.asm):00256         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00257         ;
CA8C                  (    cubix_esp.asm):00258         ESPNETCIN:
CA8C 861A             (    cubix_esp.asm):00259                 LDA     #26                               ; ESP OPCODE
CA8E BDCB05           (    cubix_esp.asm):00260                 JSR     PUTESP0                           ; SEND IT
CA91 B60100           (    cubix_esp.asm):00261                 LDA     consoleConnect
CA94 7ECA61           (    cubix_esp.asm):00262                 JMP     ESPCH1IN
                      (    cubix_esp.asm):00263         
                      (    cubix_esp.asm):00264         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00265         ; ESPPS2BUFL - Return number of characters in keyboard buffer
                      (    cubix_esp.asm):00266         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00267         ;
CA97                  (    cubix_esp.asm):00268         ESPPS2BUFL:
CA97 8604             (    cubix_esp.asm):00269                 LDA     #04                               ; opcode to get buffer length
CA99 BDCB05           (    cubix_esp.asm):00270                 JSR     PUTESP0                           ; SEND IT
CA9C 2509             (    cubix_esp.asm):00271                 BCS     >
CA9E BDCB22           (    cubix_esp.asm):00272                 JSR     GETESP0                           ; GET IT
CAA1 2504             (    cubix_esp.asm):00273                 BCS     >
CAA3 B70109           (    cubix_esp.asm):00274                 STA     >PAGER_D                          ; SAVE 'D'
CAA6 39               (    cubix_esp.asm):00275                 RTS
                      (    cubix_esp.asm):00276         !
CAA7 8600             (    cubix_esp.asm):00277                 LDA     #$00
CAA9 B70109           (    cubix_esp.asm):00278                 STA     >PAGER_D                          ; SAVE 'D'
CAAC 39               (    cubix_esp.asm):00279                 RTS
                      (    cubix_esp.asm):00280         
                      (    cubix_esp.asm):00281         
                      (    cubix_esp.asm):00282         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00283         ; ESPSER0BUFL - return number of characters in the Serial 0 buffer in 'A'
                      (    cubix_esp.asm):00284         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00285         ;
CAAD                  (    cubix_esp.asm):00286         ESPSER0BUFL:
CAAD 860B             (    cubix_esp.asm):00287                 LDA     #11                               ; opcode to get buffer length
CAAF BDCB05           (    cubix_esp.asm):00288                 JSR     PUTESP0                           ; SEND IT
CAB2 2509             (    cubix_esp.asm):00289                 BCS     >
CAB4 BDCB22           (    cubix_esp.asm):00290                 JSR     GETESP0                           ; GET IT
CAB7 2504             (    cubix_esp.asm):00291                 BCS     >
CAB9 B70109           (    cubix_esp.asm):00292                 STA     >PAGER_D                          ; SAVE 'D'
CABC 39               (    cubix_esp.asm):00293                 RTS
                      (    cubix_esp.asm):00294         !
CABD 8600             (    cubix_esp.asm):00295                 LDA     #$00
CABF B70109           (    cubix_esp.asm):00296                 STA     >PAGER_D                          ; SAVE 'D'
CAC2 39               (    cubix_esp.asm):00297                 RTS
                      (    cubix_esp.asm):00298         
                      (    cubix_esp.asm):00299         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00300         ; ESPSER1BUFL - return number of characters in the Serial 1 buffer in 'A'
                      (    cubix_esp.asm):00301         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00302         ;
CAC3                  (    cubix_esp.asm):00303         ESPSER1BUFL:
CAC3 860B             (    cubix_esp.asm):00304                 LDA     #11                               ; opcode to get buffer length
CAC5                  (    cubix_esp.asm):00305         ESP1BUFL:
CAC5 BDCB52           (    cubix_esp.asm):00306                 JSR     PUTESP1                           ; SEND IT
CAC8 2509             (    cubix_esp.asm):00307                 BCS     >
CACA BDCB6F           (    cubix_esp.asm):00308                 JSR     GETESP1                           ; GET IT
CACD 2504             (    cubix_esp.asm):00309                 BCS     >
CACF B70109           (    cubix_esp.asm):00310                 STA     >PAGER_D                          ; SAVE 'D'
CAD2 39               (    cubix_esp.asm):00311                 RTS
                      (    cubix_esp.asm):00312         !
CAD3 8600             (    cubix_esp.asm):00313                 LDA     #$00
CAD5 B70109           (    cubix_esp.asm):00314                 STA     >PAGER_D                          ; SAVE 'D'
CAD8 39               (    cubix_esp.asm):00315                 RTS
                      (    cubix_esp.asm):00316         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00317         ; ESPNETCBUFL - return number of characters in the Network Connection buffer in 'A'
                      (    cubix_esp.asm):00318         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00319         ;
CAD9                  (    cubix_esp.asm):00320         ESPNETCBUFL:
CAD9 861C             (    cubix_esp.asm):00321                 LDA     #28                               ; opcode to get buffer length
CADB 7ECAC5           (    cubix_esp.asm):00322                 JMP     ESP1BUFL
                      (    cubix_esp.asm):00323         
                      (    cubix_esp.asm):00324                 ENDIF
                      (    cubix_esp.asm):00325         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00326         ; ESPVIDEOOUT - output character in 'A' to CRT (ANSI terminal emulation)
                      (    cubix_esp.asm):00327         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00328         ;
CADE                  (    cubix_esp.asm):00329         ESPVIDEOOUT:
CADE 3402             (    cubix_esp.asm):00330                 PSHS    A
CAE0 8601             (    cubix_esp.asm):00331                 LDA     #01                               ; ESP OUT TO SCREEN
CAE2 BDCB05           (    cubix_esp.asm):00332                 JSR     PUTESP0                           ; SEND IT
CAE5 3502             (    cubix_esp.asm):00333                 PULS    A
CAE7 BDCB05           (    cubix_esp.asm):00334                 JSR     PUTESP0                           ; SEND IT
CAEA 39               (    cubix_esp.asm):00335                 RTS
                      (    cubix_esp.asm):00336         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00337         ; ESPPS2IN - Fetch character out of Keyboard Buffer into 'A'  ($FF is no characters waiting)
                      (    cubix_esp.asm):00338         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00339         ;
CAEB                  (    cubix_esp.asm):00340         ESPPS2IN:
CAEB 8603             (    cubix_esp.asm):00341                 LDA     #03                               ; ESP IN FROM PS2
CAED                  (    cubix_esp.asm):00342         ESPCHIN:
CAED BDCB05           (    cubix_esp.asm):00343                 JSR     PUTESP0                           ; SEND IT
CAF0 250D             (    cubix_esp.asm):00344                 BCS     >
CAF2 BDCB22           (    cubix_esp.asm):00345                 JSR     GETESP0                           ; GET IT
CAF5 2508             (    cubix_esp.asm):00346                 BCS     >
CAF7 8100             (    cubix_esp.asm):00347                 CMPA    #$00
CAF9 2704             (    cubix_esp.asm):00348                 BEQ     >
                      (    cubix_esp.asm):00349                 IFNDEF  BIOS6809PC
CAFB B70109           (    cubix_esp.asm):00350                 STA     >PAGER_D                          ; SAVE 'D'
                      (    cubix_esp.asm):00351                 ENDIF
CAFE 39               (    cubix_esp.asm):00352                 RTS
                      (    cubix_esp.asm):00353         !
CAFF 86FF             (    cubix_esp.asm):00354                 LDA     #$FF
                      (    cubix_esp.asm):00355                 IFNDEF  BIOS6809PC
CB01 B70109           (    cubix_esp.asm):00356                 STA     >PAGER_D                          ; SAVE 'D'
                      (    cubix_esp.asm):00357                 ENDIF
CB04 39               (    cubix_esp.asm):00358                 RTS
                      (    cubix_esp.asm):00359         
                      (    cubix_esp.asm):00360         
                      (    cubix_esp.asm):00361         ;
                      (    cubix_esp.asm):00362         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00363         ; HARDWARE INTERFACE
                      (    cubix_esp.asm):00364         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00365         ;
                      (    cubix_esp.asm):00366         ; a=VALUE AND RETURN
                      (    cubix_esp.asm):00367         ; Carry set on timeout
                      (    cubix_esp.asm):00368         ;
                      (    cubix_esp.asm):00369         ;__________________________________________________________________________________________________
CB05                  (    cubix_esp.asm):00370         PUTESP0:
CB05 3414             (    cubix_esp.asm):00371                 PSHS    X,B
CB07 8E2500           (    cubix_esp.asm):00372                 LDX     #$2500
                      (    cubix_esp.asm):00373         !
CB0A F61102           (    cubix_esp.asm):00374                 LDB     ESP_STAT
CB0D C402             (    cubix_esp.asm):00375                 ANDB    #ESP0_BUSY
CB0F 2709             (    cubix_esp.asm):00376                 BEQ     >
CB11 301F             (    cubix_esp.asm):00377                 DEX
CB13 26F5             (    cubix_esp.asm):00378                 BNE     <
CB15 3514             (    cubix_esp.asm):00379                 PULS    X,B
CB17 1A01             (    cubix_esp.asm):00380                 SEC
CB19 39               (    cubix_esp.asm):00381                 RTS
                      (    cubix_esp.asm):00382         !
CB1A B71100           (    cubix_esp.asm):00383                 STA     ESP0_DAT
CB1D 3514             (    cubix_esp.asm):00384                 PULS    X,B
CB1F 1CFE             (    cubix_esp.asm):00385                 CLC
CB21 39               (    cubix_esp.asm):00386                 RTS
                      (    cubix_esp.asm):00387         
CB22                  (    cubix_esp.asm):00388         GETESP0:
CB22 3414             (    cubix_esp.asm):00389                 PSHS    X,B
CB24 8EFF00           (    cubix_esp.asm):00390                 LDX     #$FF00
                      (    cubix_esp.asm):00391         !
CB27 F61102           (    cubix_esp.asm):00392                 LDB     ESP_STAT
CB2A C402             (    cubix_esp.asm):00393                 ANDB    #ESP0_BUSY
CB2C 2709             (    cubix_esp.asm):00394                 BEQ     >
CB2E 301F             (    cubix_esp.asm):00395                 DEX
CB30 26F5             (    cubix_esp.asm):00396                 BNE     <
CB32 3514             (    cubix_esp.asm):00397                 PULS    X,B
CB34 1A01             (    cubix_esp.asm):00398                 SEC
CB36 39               (    cubix_esp.asm):00399                 RTS
                      (    cubix_esp.asm):00400         !
CB37 8EFF00           (    cubix_esp.asm):00401                 LDX     #$FF00
                      (    cubix_esp.asm):00402         !
CB3A F61102           (    cubix_esp.asm):00403                 LDB     ESP_STAT
CB3D C401             (    cubix_esp.asm):00404                 ANDB    #ESP0_RDY
CB3F 2609             (    cubix_esp.asm):00405                 BNE     >
CB41 301F             (    cubix_esp.asm):00406                 DEX
CB43 26F5             (    cubix_esp.asm):00407                 BNE     <
CB45 3514             (    cubix_esp.asm):00408                 PULS    X,B
CB47 1A01             (    cubix_esp.asm):00409                 SEC
CB49 39               (    cubix_esp.asm):00410                 RTS
                      (    cubix_esp.asm):00411         !
CB4A B61100           (    cubix_esp.asm):00412                 LDA     ESP0_DAT
CB4D 3514             (    cubix_esp.asm):00413                 PULS    X,B
CB4F 1CFE             (    cubix_esp.asm):00414                 CLC
CB51 39               (    cubix_esp.asm):00415                 RTS
                      (    cubix_esp.asm):00416         
CB52                  (    cubix_esp.asm):00417         PUTESP1:
CB52 3414             (    cubix_esp.asm):00418                 PSHS    X,B
CB54 8E2500           (    cubix_esp.asm):00419                 LDX     #$2500
                      (    cubix_esp.asm):00420         !
CB57 F61102           (    cubix_esp.asm):00421                 LDB     ESP_STAT
CB5A C410             (    cubix_esp.asm):00422                 ANDB    #ESP1_BUSY
CB5C 2709             (    cubix_esp.asm):00423                 BEQ     >
CB5E 301F             (    cubix_esp.asm):00424                 DEX
CB60 26F5             (    cubix_esp.asm):00425                 BNE     <
CB62 3514             (    cubix_esp.asm):00426                 PULS    X,B
CB64 1A01             (    cubix_esp.asm):00427                 SEC
CB66 39               (    cubix_esp.asm):00428                 RTS
                      (    cubix_esp.asm):00429         !
CB67 B71101           (    cubix_esp.asm):00430                 STA     ESP1_DAT
CB6A 3514             (    cubix_esp.asm):00431                 PULS    X,B
CB6C 1CFE             (    cubix_esp.asm):00432                 CLC
CB6E 39               (    cubix_esp.asm):00433                 RTS
                      (    cubix_esp.asm):00434         
CB6F                  (    cubix_esp.asm):00435         GETESP1:
CB6F 3414             (    cubix_esp.asm):00436                 PSHS    X,B
CB71 8EFF00           (    cubix_esp.asm):00437                 LDX     #$FF00
                      (    cubix_esp.asm):00438         !
CB74 F61102           (    cubix_esp.asm):00439                 LDB     ESP_STAT
CB77 C410             (    cubix_esp.asm):00440                 ANDB    #ESP1_BUSY
CB79 2709             (    cubix_esp.asm):00441                 BEQ     >
CB7B 301F             (    cubix_esp.asm):00442                 DEX
CB7D 26F5             (    cubix_esp.asm):00443                 BNE     <
CB7F 3514             (    cubix_esp.asm):00444                 PULS    X,B
CB81 1A01             (    cubix_esp.asm):00445                 SEC
CB83 39               (    cubix_esp.asm):00446                 RTS
                      (    cubix_esp.asm):00447         !
CB84 8EFF00           (    cubix_esp.asm):00448                 LDX     #$FF00
                      (    cubix_esp.asm):00449         !
CB87 F61102           (    cubix_esp.asm):00450                 LDB     ESP_STAT
CB8A C408             (    cubix_esp.asm):00451                 ANDB    #ESP1_RDY
CB8C 2609             (    cubix_esp.asm):00452                 BNE     >
CB8E 301F             (    cubix_esp.asm):00453                 DEX
CB90 26F5             (    cubix_esp.asm):00454                 BNE     <
CB92 3514             (    cubix_esp.asm):00455                 PULS    X,B
CB94 1A01             (    cubix_esp.asm):00456                 SEC
CB96 39               (    cubix_esp.asm):00457                 RTS
                      (    cubix_esp.asm):00458         !
CB97 B61101           (    cubix_esp.asm):00459                 LDA     ESP1_DAT
CB9A 3514             (    cubix_esp.asm):00460                 PULS    X,B
CB9C 1CFE             (    cubix_esp.asm):00461                 CLC
CB9E 39               (    cubix_esp.asm):00462                 RTS
                      (    cubix_esp.asm):00463         
                      (    cubix_esp.asm):00464         
                      (    cubix_esp.asm):00465                 IFNDEF  BIOS6809PC
                      (    cubix_esp.asm):00466         ;
                      (    cubix_esp.asm):00467         ; DRIVER DATA
                      (    cubix_esp.asm):00468         ;__________________________________________________________________________________________________
                      (    cubix_esp.asm):00469         ; MESSAGES
                      (    cubix_esp.asm):00470         ;__________________________________________________________________________________________________
CB9F                  (    cubix_esp.asm):00471         ESPMESSAGE1:
CB9F 4455414C20455350 (    cubix_esp.asm):00472                 FCC     "DUAL ESP IO:"
     20494F3A
CBAB 00               (    cubix_esp.asm):00473                 FCB     00
CBAC                  (    cubix_esp.asm):00474         ESPMESSAGE2:
CBAC 2020455350303A20 (    cubix_esp.asm):00475                 FCC     "  ESP0: "
CBB4 00               (    cubix_esp.asm):00476                 FCB     00
CBB5                  (    cubix_esp.asm):00477         ESPMESSAGE3:
CBB5 2020455350313A20 (    cubix_esp.asm):00478                 FCC     "  ESP1: "
CBBD 00               (    cubix_esp.asm):00479                 FCB     00
CBBE                  (    cubix_esp.asm):00480         ESPMESSAGE4:
CBBE 4E4F5420         (    cubix_esp.asm):00481                 FCC     "NOT "
CBC2                  (    cubix_esp.asm):00482         ESPMESSAGE5:
CBC2 464F554E442E     (    cubix_esp.asm):00483                 FCC     "FOUND."
CBC8 00               (    cubix_esp.asm):00484                 FCB     00
                      (    cubix_esp.asm):00485                 ENDIF
                      (     cubixdrv.asm):00126                 INCLUDE cubix_ch375.asm
                      (  cubix_ch375.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (  cubix_ch375.asm):00002         ;
                      (  cubix_ch375.asm):00003         ;       CUBIX IDE disk drivers 6809PC - CH375 USB STORAGE
                      (  cubix_ch375.asm):00004         ;
                      (  cubix_ch375.asm):00005         ;       Entry points:
                      (  cubix_ch375.asm):00006         ;               CH375INIT        - CALLED DURING OS INIT
                      (  cubix_ch375.asm):00007         ;               CH_READSEC       - read a sector from drive
                      (  cubix_ch375.asm):00008         ;               CH_WRITESEC      - write a sector to drive
                      (  cubix_ch375.asm):00009         ;________________________________________________________________________________________________________________________________
                      (  cubix_ch375.asm):00010         ;
                      (  cubix_ch375.asm):00011         ; CH375 HARDWARE ADDRESS
     1260             (  cubix_ch375.asm):00012         CH0BASE         = $1260
     1260             (  cubix_ch375.asm):00013         CH0DATA         = CH0BASE
     1261             (  cubix_ch375.asm):00014         CH0COMMAND      = CH0BASE+1
                      (  cubix_ch375.asm):00015         ;
                      (  cubix_ch375.asm):00016         ; CH375/376 COMMANDS
                      (  cubix_ch375.asm):00017         ;
     0001             (  cubix_ch375.asm):00018         CH_CMD_VER      = $01                             ; GET IC VER
     0005             (  cubix_ch375.asm):00019         CH_CMD_RESET    = $05                             ; FULL CH37X RESET
     0006             (  cubix_ch375.asm):00020         CH_CMD_EXIST    = $06                             ; CHECK EXISTS
     000A             (  cubix_ch375.asm):00021         CH_CMD_MAXLUN   = $0A                             ; GET MAX LUN NUMBER
     000B             (  cubix_ch375.asm):00022         CH_CMD_PKTSEC   = $0B                             ; SET PACKETS PER SECTOR
     000B             (  cubix_ch375.asm):00023         CH_CMD_SETRETRY = $0B                             ; SET RETRIES
     0015             (  cubix_ch375.asm):00024         CH_CMD_MODE     = $15                             ; SET USB MODE
     0016             (  cubix_ch375.asm):00025         CH_CMD_TSTCON   = $16                             ; TEST CONNECT
     0017             (  cubix_ch375.asm):00026         CH_CMD_ABRTNAK  = $17                             ; ABORT DEVICE NAK RETRIES
     0022             (  cubix_ch375.asm):00027         CH_CMD_STAT     = $22                             ; GET STATUS
     0028             (  cubix_ch375.asm):00028         CH_CMD_RD5      = $28                             ; READ USB DATA (375)
     002B             (  cubix_ch375.asm):00029         CH_CMD_WR5      = $2B                             ; WRITE USB DATA (375)
     0031             (  cubix_ch375.asm):00030         CH_CMD_DSKMNT   = $31                             ; DISK MOUNT
     0039             (  cubix_ch375.asm):00031         CH_CMD_BYTE_LOC = $39                             ; BYTE LOCATE
     003A             (  cubix_ch375.asm):00032         CH_CMD_BYTERD   = $3A                             ; BYTE READ
     003B             (  cubix_ch375.asm):00033         CH_CMD_BYTERDGO = $3B                             ; BYTE READ GO
     003C             (  cubix_ch375.asm):00034         CH_CMD_BYTEWR   = $3C                             ; BYTE WRITE
     003D             (  cubix_ch375.asm):00035         CH_CMD_BYTEWRGO = $3D                             ; BYTE WRITE GO
     003E             (  cubix_ch375.asm):00036         CH_CMD_DSKCAP   = $3E                             ; DISK CAPACITY
     004D             (  cubix_ch375.asm):00037         CH_CMD_AUTOSET  = $4D                             ; USB AUTO SETUP
     0051             (  cubix_ch375.asm):00038         CH_CMD_DSKINIT  = $51                             ; DISK INIT
     0052             (  cubix_ch375.asm):00039         CH_CMD_DSKRES   = $52                             ; DISK RESET
     0053             (  cubix_ch375.asm):00040         CH_CMD_DSKSIZ   = $53                             ; DISK SIZE
     0054             (  cubix_ch375.asm):00041         CH_CMD_DSKRD    = $54                             ; DISK READ
     0055             (  cubix_ch375.asm):00042         CH_CMD_DSKRDGO  = $55                             ; CONTINUE DISK READ
     0056             (  cubix_ch375.asm):00043         CH_CMD_DSKWR    = $56                             ; DISK WRITE
     0057             (  cubix_ch375.asm):00044         CH_CMD_DSKWRGO  = $57                             ; CONTINUE DISK WRITE
     0058             (  cubix_ch375.asm):00045         CH_CMD_DSKINQ   = $58                             ; DISK INQUIRY
     0059             (  cubix_ch375.asm):00046         CH_CMD_DSKRDY   = $59                             ; DISK READY
                      (  cubix_ch375.asm):00047         
CBC9                  (  cubix_ch375.asm):00048         CH375INIT:
CBC9 BDCE68           (  cubix_ch375.asm):00049                 JSR     LFCR
CBCC BDCC0F           (  cubix_ch375.asm):00050                 JSR     CH_DETECT
CBCF 2632             (  cubix_ch375.asm):00051                 BNE     NOTDETECTED
                      (  cubix_ch375.asm):00052         
CBD1 8ECE05           (  cubix_ch375.asm):00053                 LDX     #CHMESSAGE2
CBD4 BDCE7C           (  cubix_ch375.asm):00054                 JSR     WRSTR                             ; DO PROMPT
CBD7 BDCE68           (  cubix_ch375.asm):00055                 JSR     LFCR                              ; AND CRLF
                      (  cubix_ch375.asm):00056         
CBDA BDCCA4           (  cubix_ch375.asm):00057                 JSR     CH_DISKINIT
CBDD 2518             (  cubix_ch375.asm):00058                 BCS     >
                      (  cubix_ch375.asm):00059         
CBDF 8ECE17           (  cubix_ch375.asm):00060                 LDX     #CHMESSAGE3
CBE2 BDCE7C           (  cubix_ch375.asm):00061                 JSR     WRSTR                             ; DO PROMPT
                      (  cubix_ch375.asm):00062         
CBE5 FC0200           (  cubix_ch375.asm):00063                 LDD     HSTBUF
CBE8 BDCE88           (  cubix_ch375.asm):00064                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (  cubix_ch375.asm):00065         
CBEB FC0202           (  cubix_ch375.asm):00066                 LDD     HSTBUF+2
CBEE BDCE88           (  cubix_ch375.asm):00067                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (  cubix_ch375.asm):00068         
CBF1 BDCE68           (  cubix_ch375.asm):00069                 JSR     LFCR                              ; AND CRLF
CBF4 1CFE             (  cubix_ch375.asm):00070                 CLC
CBF6 39               (  cubix_ch375.asm):00071                 RTS
                      (  cubix_ch375.asm):00072         !
CBF7 8ECE2A           (  cubix_ch375.asm):00073                 LDX     #CHMESSAGE5
CBFA BDCE7C           (  cubix_ch375.asm):00074                 JSR     WRSTR                             ; DO PROMPT
CBFD BDCE68           (  cubix_ch375.asm):00075                 JSR     LFCR                              ; AND CRLF
CC00 1A01             (  cubix_ch375.asm):00076                 SEC
CC02 39               (  cubix_ch375.asm):00077                 RTS
CC03                  (  cubix_ch375.asm):00078         NOTDETECTED:
CC03 8ECE3F           (  cubix_ch375.asm):00079                 LDX     #CHMESSAGE6
CC06 BDCE7C           (  cubix_ch375.asm):00080                 JSR     WRSTR                             ; DO PROMPT
CC09 BDCE68           (  cubix_ch375.asm):00081                 JSR     LFCR                              ; AND CRLF
CC0C 1A01             (  cubix_ch375.asm):00082                 SEC
CC0E 39               (  cubix_ch375.asm):00083                 RTS
                      (  cubix_ch375.asm):00084         
CC0F                  (  cubix_ch375.asm):00085         CH_DETECT:
CC0F 8ECDFA           (  cubix_ch375.asm):00086                 LDX     #CHMESSAGE1
CC12 BDCE7C           (  cubix_ch375.asm):00087                 JSR     WRSTR                             ; DO PROMPT
CC15 BDCE68           (  cubix_ch375.asm):00088                 JSR     LFCR                              ; AND CRLF
                      (  cubix_ch375.asm):00089         
CC18 8EC390           (  cubix_ch375.asm):00090                 LDX     #MESSAGE2
CC1B BDCE7C           (  cubix_ch375.asm):00091                 JSR     WRSTR                             ; DO PROMPT
CC1E CC1260           (  cubix_ch375.asm):00092                 LDD     #CH0BASE                          ; GET BASE PORT
CC21 BDCE88           (  cubix_ch375.asm):00093                 JSR     WRHEXW                            ; PRINT BASE PORT
CC24 BDCC5F           (  cubix_ch375.asm):00094                 JSR     CH_RESET
                      (  cubix_ch375.asm):00095         
CC27                  (  cubix_ch375.asm):00096         CH_DETECT1:
CC27 8606             (  cubix_ch375.asm):00097                 LDA     #CH_CMD_EXIST                     ; LOAD COMMAND
CC29 BDCC3A           (  cubix_ch375.asm):00098                 JSR     CH_CMD                            ; SEND COMMAND
CC2C 86AA             (  cubix_ch375.asm):00099                 LDA     #$AA                              ; LOAD CHECK PATTERN
CC2E BDCC49           (  cubix_ch375.asm):00100                 JSR     CH_WR                             ; SEND IT
CC31 BDCC4D           (  cubix_ch375.asm):00101                 JSR     CH_NAP                            ; SMALL DELAY
CC34 BDCC45           (  cubix_ch375.asm):00102                 JSR     CH_RD                             ; GET ECHO
CC37 8155             (  cubix_ch375.asm):00103                 CMPA    #$55                              ; SHOULD BE INVERTED
CC39 39               (  cubix_ch375.asm):00104                 RTS                                       ; RETURN
                      (  cubix_ch375.asm):00105         
CC3A                  (  cubix_ch375.asm):00106         CH_CMD:
CC3A B71261           (  cubix_ch375.asm):00107                 STA     CH0COMMAND                        ; SEND COMMAND
CC3D BDCC4D           (  cubix_ch375.asm):00108                 JSR     CH_NAP                            ;
CC40 39               (  cubix_ch375.asm):00109                 RTS
                      (  cubix_ch375.asm):00110         ;
                      (  cubix_ch375.asm):00111         ; GET STATUS
                      (  cubix_ch375.asm):00112         ;
CC41                  (  cubix_ch375.asm):00113         CH_STAT:
CC41 B61261           (  cubix_ch375.asm):00114                 LDA     CH0COMMAND                        ; READ STATUS
CC44 39               (  cubix_ch375.asm):00115                 RTS
                      (  cubix_ch375.asm):00116         ;
                      (  cubix_ch375.asm):00117         ; READ A BYTE FROM DATA PORT
                      (  cubix_ch375.asm):00118         ;
CC45                  (  cubix_ch375.asm):00119         CH_RD:
CC45 B61260           (  cubix_ch375.asm):00120                 LDA     CH0DATA                           ; READ BYTE
CC48 39               (  cubix_ch375.asm):00121                 RTS
                      (  cubix_ch375.asm):00122         ;
                      (  cubix_ch375.asm):00123         ; WRITE A BYTE TO DATA PORT
                      (  cubix_ch375.asm):00124         ;
CC49                  (  cubix_ch375.asm):00125         CH_WR:
CC49 B71260           (  cubix_ch375.asm):00126                 STA     CH0DATA                           ; WRITE BYTE
CC4C 39               (  cubix_ch375.asm):00127                 RTS
                      (  cubix_ch375.asm):00128         
CC4D                  (  cubix_ch375.asm):00129         CH_NAP:
CC4D 12               (  cubix_ch375.asm):00130                 NOP
CC4E 12               (  cubix_ch375.asm):00131                 NOP
CC4F 12               (  cubix_ch375.asm):00132                 NOP
CC50 12               (  cubix_ch375.asm):00133                 NOP
CC51 12               (  cubix_ch375.asm):00134                 NOP
CC52 12               (  cubix_ch375.asm):00135                 NOP
CC53 39               (  cubix_ch375.asm):00136                 RTS
CC54 3410             (  cubix_ch375.asm):00137                 PSHS    X
CC56 8E0500           (  cubix_ch375.asm):00138                 LDX     #$500
                      (  cubix_ch375.asm):00139         !
CC59 301F             (  cubix_ch375.asm):00140                 DEX
CC5B 26FC             (  cubix_ch375.asm):00141                 BNE     <
CC5D 3590             (  cubix_ch375.asm):00142                 PULS    X,PC
                      (  cubix_ch375.asm):00143         
CC5F                  (  cubix_ch375.asm):00144         CH_RESET:
CC5F 3430             (  cubix_ch375.asm):00145                 PSHS    X,Y
CC61 8605             (  cubix_ch375.asm):00146                 LDA     #CH_CMD_RESET
CC63 BDCC3A           (  cubix_ch375.asm):00147                 JSR     CH_CMD                            ; SEND COMMAND
CC66 108E000F         (  cubix_ch375.asm):00148                 LDY     #$0F
CC6A                  (  cubix_ch375.asm):00149         CH_RES1:
CC6A 8EFFFF           (  cubix_ch375.asm):00150                 LDX     #$FFFF
                      (  cubix_ch375.asm):00151         !
CC6D 301F             (  cubix_ch375.asm):00152                 DEX
CC6F 26FC             (  cubix_ch375.asm):00153                 BNE     <
CC71 313F             (  cubix_ch375.asm):00154                 DEY
CC73 26F5             (  cubix_ch375.asm):00155                 BNE     CH_RES1
CC75 35B0             (  cubix_ch375.asm):00156                 PULS    X,Y,PC
                      (  cubix_ch375.asm):00157         
                      (  cubix_ch375.asm):00158         
                      (  cubix_ch375.asm):00159         ;
                      (  cubix_ch375.asm):00160         ; POLL WAITING FOR INTERRUPT
                      (  cubix_ch375.asm):00161         ;
CC77                  (  cubix_ch375.asm):00162         CH_POLL:
CC77 3434             (  cubix_ch375.asm):00163                 PSHS    B,X,Y
CC79 108E0030         (  cubix_ch375.asm):00164                 LDY     #$0030
CC7D                  (  cubix_ch375.asm):00165         CH_POLL0:
CC7D 8E8000           (  cubix_ch375.asm):00166                 LDX     #$8000                            ; PRIMARY LOOP COUNTER
CC80                  (  cubix_ch375.asm):00167         CH_POLL1:
CC80 BDCC41           (  cubix_ch375.asm):00168                 JSR     CH_STAT                           ; GET INT STATUS
CC83 8480             (  cubix_ch375.asm):00169                 ANDA    #%10000000
CC85 270D             (  cubix_ch375.asm):00170                 BEQ     CH_POLL2                          ; CHECK BIT
CC87 301F             (  cubix_ch375.asm):00171                 DEX
CC89 26F5             (  cubix_ch375.asm):00172                 BNE     CH_POLL1                          ; INNER LOOP AS NEEDED
CC8B 313F             (  cubix_ch375.asm):00173                 DEY
CC8D 26EE             (  cubix_ch375.asm):00174                 BNE     CH_POLL0                          ; OUTER LOOP AS NEEDED
CC8F 3534             (  cubix_ch375.asm):00175                 PULS    B,X,Y
CC91 1A01             (  cubix_ch375.asm):00176                 SEC
CC93 39               (  cubix_ch375.asm):00177                 RTS                                       ; AND RETURN
CC94                  (  cubix_ch375.asm):00178         CH_POLL2:
CC94 8622             (  cubix_ch375.asm):00179                 LDA     #CH_CMD_STAT                      ; GET STATUS
CC96 BDCC3A           (  cubix_ch375.asm):00180                 JSR     CH_CMD                            ; SEND IT
CC99 BDCC4D           (  cubix_ch375.asm):00181                 JSR     CH_NAP                            ; SMALL DELAY
CC9C BDCC45           (  cubix_ch375.asm):00182                 JSR     CH_RD                             ; GET RESULT
CC9F 3534             (  cubix_ch375.asm):00183                 PULS    B,X,Y
CCA1 1CFE             (  cubix_ch375.asm):00184                 CLC
CCA3 39               (  cubix_ch375.asm):00185                 RTS                                       ; AND RETURN
                      (  cubix_ch375.asm):00186         
                      (  cubix_ch375.asm):00187         
                      (  cubix_ch375.asm):00188         
CCA4                  (  cubix_ch375.asm):00189         CH_DISKINIT:
CCA4 3430             (  cubix_ch375.asm):00190                 PSHS    X,Y
                      (  cubix_ch375.asm):00191         
                      (  cubix_ch375.asm):00192                 ; RESET THE BUS
CCA6 8615             (  cubix_ch375.asm):00193                 LDA     #CH_CMD_MODE            ; SET MODE COMMAND
CCA8 BDCC3A           (  cubix_ch375.asm):00194                 JSR     CH_CMD                  ; SEND IT
CCAB 8607             (  cubix_ch375.asm):00195                 LDA     #7                      ; RESET BUS
CCAD BDCC49           (  cubix_ch375.asm):00196                 JSR     CH_WR                   ; SEND IT
CCB0 BDCC4D           (  cubix_ch375.asm):00197                 JSR     CH_NAP                  ; SMALL WAIT
CCB3 BDCC45           (  cubix_ch375.asm):00198                 JSR     CH_RD                   ; GET RESULT
CCB6 BDCC4D           (  cubix_ch375.asm):00199                 JSR     CH_NAP                  ; SMALL WAIT
                      (  cubix_ch375.asm):00200         ;
                      (  cubix_ch375.asm):00201                 ; ACTIVATE USB MODE
CCB9 8615             (  cubix_ch375.asm):00202                 LDA     #CH_CMD_MODE            ; SET MODE COMMAND
CCBB BDCC3A           (  cubix_ch375.asm):00203                 JSR     CH_CMD                  ; SEND IT
CCBE 8606             (  cubix_ch375.asm):00204                 LDA     #6                      ; USB ENABLED, SEND SOF
CCC0 BDCC49           (  cubix_ch375.asm):00205                 JSR     CH_WR                   ; SEND IT
CCC3 BDCC4D           (  cubix_ch375.asm):00206                 JSR     CH_NAP                  ; SMALL WAIT
CCC6 BDCC45           (  cubix_ch375.asm):00207                 JSR     CH_RD                   ; GET RESULT
CCC9 BDCC4D           (  cubix_ch375.asm):00208                 JSR     CH_NAP                  ; SMALL WAIT
                      (  cubix_ch375.asm):00209         
                      (  cubix_ch375.asm):00210         ;
CCCC 108E0100         (  cubix_ch375.asm):00211                 LDY     #$100
CCD0                  (  cubix_ch375.asm):00212         CH_DISKINIT1:
CCD0 8651             (  cubix_ch375.asm):00213                 LDA     #CH_CMD_DSKINIT
CCD2 BDCC3A           (  cubix_ch375.asm):00214                 JSR     CH_CMD                            ; SEND COMMAND
                      (  cubix_ch375.asm):00215         
CCD5 8E8000           (  cubix_ch375.asm):00216                 LDX     #$8000
                      (  cubix_ch375.asm):00217         !
CCD8 301F             (  cubix_ch375.asm):00218                 DEX
CCDA 26FC             (  cubix_ch375.asm):00219                 BNE     <
                      (  cubix_ch375.asm):00220         
CCDC BDCC77           (  cubix_ch375.asm):00221                 JSR     CH_POLL
                      (  cubix_ch375.asm):00222         
CCDF 8114             (  cubix_ch375.asm):00223                 CMPA    #$14                              ; SUCCESS?
CCE1 270E             (  cubix_ch375.asm):00224                 BEQ     CHUSB_RESET1A                     ; IF SO, CHECK READY
CCE3 8116             (  cubix_ch375.asm):00225                 CMPA    #$16                              ; NO MEDIA
CCE5 2713             (  cubix_ch375.asm):00226                 BEQ     CHUSB_NOMEDIA                     ; HANDLE IT
CCE7 BDCC4D           (  cubix_ch375.asm):00227                 JSR     CH_NAP                            ; SMALL DELAY
CCEA 313F             (  cubix_ch375.asm):00228                 DEY
CCEC 26E2             (  cubix_ch375.asm):00229                 BNE     CH_DISKINIT1                      ; LOOP AS NEEDED
CCEE 7ECCF6           (  cubix_ch375.asm):00230                 JMP     CH_DISKINIT_TO                    ; HANDLE TIMEOUT
                      (  cubix_ch375.asm):00231         
CCF1                  (  cubix_ch375.asm):00232         CHUSB_RESET1A:
CCF1 BDCD07           (  cubix_ch375.asm):00233                 JSR     CH_DSKSIZ                         ; GET AND RECORD DISK SIZE
CCF4 35B0             (  cubix_ch375.asm):00234                 PULS    X,Y,PC
                      (  cubix_ch375.asm):00235         
CCF6                  (  cubix_ch375.asm):00236         CH_DISKINIT_TO:
CCF6 1A01             (  cubix_ch375.asm):00237                 SEC
CCF8 35B0             (  cubix_ch375.asm):00238                 PULS    X,Y,PC
                      (  cubix_ch375.asm):00239         
CCFA                  (  cubix_ch375.asm):00240         CHUSB_NOMEDIA:
CCFA 8ECE55           (  cubix_ch375.asm):00241                 LDX     #CHMESSAGE7
CCFD BDCE7C           (  cubix_ch375.asm):00242                 JSR     WRSTR                             ; DO PROMPT
CD00 BDCE68           (  cubix_ch375.asm):00243                 JSR     LFCR                              ; AND CRLF
CD03 1A01             (  cubix_ch375.asm):00244                 SEC
CD05 35B0             (  cubix_ch375.asm):00245                 PULS    X,Y,PC
                      (  cubix_ch375.asm):00246         
CD07                  (  cubix_ch375.asm):00247         CH_DSKSIZ:
CD07 8653             (  cubix_ch375.asm):00248                 LDA     #CH_CMD_DSKSIZ                    ; DISK SIZE COMMAND
CD09 BDCC3A           (  cubix_ch375.asm):00249                 JSR     CH_CMD                            ; SEND IT
CD0C BDCC77           (  cubix_ch375.asm):00250                 JSR     CH_POLL                           ; WAIT FOR RESULT
                      (  cubix_ch375.asm):00251         
CD0F 8114             (  cubix_ch375.asm):00252                 CMPA    #$14                              ; SUCCESS?
CD11 2631             (  cubix_ch375.asm):00253                 BNE     CHUSB_CMDERR                      ; HANDLE CMD ERROR
CD13 BDCD4F           (  cubix_ch375.asm):00254                 JSR     CH_CMD_RD                         ; SEND READ USB DATA CMD
CD16 BDCC45           (  cubix_ch375.asm):00255                 JSR     CH_RD                             ; GET RD DATA LEN
                      (  cubix_ch375.asm):00256         
CD19 8108             (  cubix_ch375.asm):00257                 CMPA    #$08                              ; MAKE SURE IT IS 8
CD1B 2627             (  cubix_ch375.asm):00258                 BNE     CHUSB_CMDERR                      ; HANDLE CMD ERROR
                      (  cubix_ch375.asm):00259         
CD1D BDCC45           (  cubix_ch375.asm):00260                 JSR     CH_RD
CD20 B70200           (  cubix_ch375.asm):00261                 STA     HSTBUF
CD23 BDCC45           (  cubix_ch375.asm):00262                 JSR     CH_RD
CD26 B70201           (  cubix_ch375.asm):00263                 STA     HSTBUF+1
CD29 BDCC45           (  cubix_ch375.asm):00264                 JSR     CH_RD
CD2C B70202           (  cubix_ch375.asm):00265                 STA     HSTBUF+2
CD2F BDCC45           (  cubix_ch375.asm):00266                 JSR     CH_RD
CD32 B70203           (  cubix_ch375.asm):00267                 STA     HSTBUF+3
CD35 BDCC45           (  cubix_ch375.asm):00268                 JSR     CH_RD
CD38 BDCC45           (  cubix_ch375.asm):00269                 JSR     CH_RD
CD3B BDCC45           (  cubix_ch375.asm):00270                 JSR     CH_RD
CD3E BDCC45           (  cubix_ch375.asm):00271                 JSR     CH_RD
CD41 1CFE             (  cubix_ch375.asm):00272                 CLC
CD43 39               (  cubix_ch375.asm):00273                 RTS                                       ; AND DONE
CD44                  (  cubix_ch375.asm):00274         CHUSB_CMDERR:
CD44 1A01             (  cubix_ch375.asm):00275                 SEC
CD46 39               (  cubix_ch375.asm):00276                 RTS                                       ; AND DONE
                      (  cubix_ch375.asm):00277         
CD47                  (  cubix_ch375.asm):00278         CHUSB_IOERR:
CD47 8602             (  cubix_ch375.asm):00279                 LDA     #$02                              ; SET ERROR CONDITION
CD49 B70103           (  cubix_ch375.asm):00280                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
CD4C 1A01             (  cubix_ch375.asm):00281                 SEC
CD4E 39               (  cubix_ch375.asm):00282                 RTS                                       ; AND DONE
                      (  cubix_ch375.asm):00283         
                      (  cubix_ch375.asm):00284         
                      (  cubix_ch375.asm):00285         ; SEND READ USB DATA COMMAND
                      (  cubix_ch375.asm):00286         ; USING BEST OPCODE FOR DEVICE
                      (  cubix_ch375.asm):00287         ;
CD4F                  (  cubix_ch375.asm):00288         CH_CMD_RD:
CD4F 8628             (  cubix_ch375.asm):00289                 LDA     #CH_CMD_RD5
CD51 7ECC3A           (  cubix_ch375.asm):00290                 JMP     CH_CMD
                      (  cubix_ch375.asm):00291         ;
                      (  cubix_ch375.asm):00292         ; SEND WRITE USB DATA COMMAND
                      (  cubix_ch375.asm):00293         ; USING BEST OPCODE FOR DEVICE
                      (  cubix_ch375.asm):00294         ;
CD54                  (  cubix_ch375.asm):00295         CH_CMD_WR:
CD54 862B             (  cubix_ch375.asm):00296                 LDA     #CH_CMD_WR5
CD56 7ECC3A           (  cubix_ch375.asm):00297                 JMP     CH_CMD
                      (  cubix_ch375.asm):00298         
CD59                  (  cubix_ch375.asm):00299         CH_READSEC:
CD59 8654             (  cubix_ch375.asm):00300                 LDA     #CH_CMD_DSKRD           ; DISK READ COMMAND
CD5B BDCDD9           (  cubix_ch375.asm):00301                 JSR     CHUSB_RWSTART           ; SEND CMD AND LBA
                      (  cubix_ch375.asm):00302         ;
                      (  cubix_ch375.asm):00303                 ; READ THE SECTOR IN 64 BYTE CHUNKS
CD5E 8E0200           (  cubix_ch375.asm):00304                 LDX     #HSTBUF
CD61 C608             (  cubix_ch375.asm):00305                 LDB     #8                      ; 8 CHUNKS OF 64 FOR 512 BYTE SECTOR
CD63                  (  cubix_ch375.asm):00306         CHUSB_READ1:
CD63 BDCC77           (  cubix_ch375.asm):00307                 JSR     CH_POLL                 ; WAIT FOR DATA READY
CD66 811D             (  cubix_ch375.asm):00308                 CMPA    #$1D                    ; DATA READY TO READ?
CD68 26DD             (  cubix_ch375.asm):00309                 BNE     CHUSB_IOERR             ; HANDLE IO ERROR
CD6A BDCD4F           (  cubix_ch375.asm):00310                 JSR     CH_CMD_RD               ; SEND READ USB DATA CMD
CD6D BDCC45           (  cubix_ch375.asm):00311                 JSR     CH_RD                   ; READ DATA BLOCK LENGTH
CD70 8140             (  cubix_ch375.asm):00312                 CMPA    #64                     ; AS EXPECTED?
CD72 26D3             (  cubix_ch375.asm):00313                 BNE     CHUSB_IOERR             ; IF NOT, HANDLE ERROR
                      (  cubix_ch375.asm):00314                 ; BYTE READ LOOP
CD74 3404             (  cubix_ch375.asm):00315                 PSHS    B
CD76 C640             (  cubix_ch375.asm):00316                 LDB     #64                     ; READ 64 BYTES
CD78                  (  cubix_ch375.asm):00317         CHUSB_READ2:
CD78 BDCC45           (  cubix_ch375.asm):00318                 JSR     CH_RD                   ; GET NEXT BYTE
CD7B A780             (  cubix_ch375.asm):00319                 STA     ,X+                     ; SAVE IT
CD7D 5A               (  cubix_ch375.asm):00320                 DECB
CD7E 26F8             (  cubix_ch375.asm):00321                 BNE     CHUSB_READ2             ; LOOP AS NEEDED
CD80 3504             (  cubix_ch375.asm):00322                 PULS    B                       ; RESTORE LOOP CONTROL
                      (  cubix_ch375.asm):00323         ;
                      (  cubix_ch375.asm):00324                 ; PREPARE FOR NEXT CHUNK
CD82 8655             (  cubix_ch375.asm):00325                 LDA     #CH_CMD_DSKRDGO         ; CONTINUE DISK READ
CD84 BDCC3A           (  cubix_ch375.asm):00326                 JSR     CH_CMD                  ; SEND IT
CD87 5A               (  cubix_ch375.asm):00327                 DECB
CD88 26D9             (  cubix_ch375.asm):00328                 BNE     CHUSB_READ1             ; LOOP TILL DONE
                      (  cubix_ch375.asm):00329         ;
                      (  cubix_ch375.asm):00330                 ; FINAL CHECK FOR COMPLETION & SUCCESS
CD8A BDCC77           (  cubix_ch375.asm):00331                 JSR     CH_POLL                 ; WAIT FOR COMPLETION
CD8D 8114             (  cubix_ch375.asm):00332                 CMPA    #$14                    ; SUCCESS?
CD8F 26B6             (  cubix_ch375.asm):00333                 BNE     CHUSB_IOERR             ; IF NOT, HANDLE ERROR
                      (  cubix_ch375.asm):00334         ;
CD91 8600             (  cubix_ch375.asm):00335                 lda     #$00
CD93 B70103           (  cubix_ch375.asm):00336                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
CD96 1CFE             (  cubix_ch375.asm):00337                 CLC                             ; SIGNAL SUCCESS
CD98 39               (  cubix_ch375.asm):00338                 RTS
                      (  cubix_ch375.asm):00339         ;
                      (  cubix_ch375.asm):00340         ;
                      (  cubix_ch375.asm):00341         ;
CD99                  (  cubix_ch375.asm):00342         CH_WRITESEC:
CD99 8656             (  cubix_ch375.asm):00343                 LDA     #CH_CMD_DSKWR           ; DISK WRITE COMMAND
CD9B BDCDD9           (  cubix_ch375.asm):00344                 JSR     CHUSB_RWSTART           ; SEND CMD AND LBA
                      (  cubix_ch375.asm):00345         ;
                      (  cubix_ch375.asm):00346                 ; WRITE THE SECTOR IN 64 BYTE CHUNKS
CD9E 8E0200           (  cubix_ch375.asm):00347                 LDX     #HSTBUF
CDA1 C608             (  cubix_ch375.asm):00348                 LDB     #8                      ; 8 CHUNKS OF 64 FOR 512 BYTE SECTOR
CDA3                  (  cubix_ch375.asm):00349         CHUSB_WRITE1:
CDA3 BDCC77           (  cubix_ch375.asm):00350                 JSR     CH_POLL                 ; WAIT FOR DATA READY
CDA6 811E             (  cubix_ch375.asm):00351                 CMPA    #$1E                    ; DATA READY TO WRITE
CDA8 269D             (  cubix_ch375.asm):00352                 BNE     CHUSB_IOERR             ; HANDLE IO ERROR
CDAA BDCD54           (  cubix_ch375.asm):00353                 JSR     CH_CMD_WR               ; SEND WRITE USB DATA CMD
CDAD 8640             (  cubix_ch375.asm):00354                 LDA     #64                     ; 64 BYTE CHUNK
CDAF BDCC49           (  cubix_ch375.asm):00355                 JSR     CH_WR                   ; SEND DATA BLOCK LENGTH
                      (  cubix_ch375.asm):00356         ;
                      (  cubix_ch375.asm):00357                 ; BYTE WRITE LOOP
CDB2 3404             (  cubix_ch375.asm):00358                 PSHS    B                       ; SAVE LOOP CONTROL
CDB4 C640             (  cubix_ch375.asm):00359                 LDB     #64                     ; WRITE 64 BYTES
CDB6                  (  cubix_ch375.asm):00360         CHUSB_WRITE2:
CDB6 A680             (  cubix_ch375.asm):00361                 LDA     ,X+                     ; GET NEXT BYTE
CDB8 BDCC49           (  cubix_ch375.asm):00362                 JSR     CH_WR                   ; WRITE NEXT BYTE
CDBB 5A               (  cubix_ch375.asm):00363                 DECB
CDBC 26F8             (  cubix_ch375.asm):00364                 BNE     CHUSB_WRITE2            ; LOOP AS NEEDED
CDBE 3504             (  cubix_ch375.asm):00365                 PULS    B                       ; RESTORE LOOP CONTROL
                      (  cubix_ch375.asm):00366         ;
                      (  cubix_ch375.asm):00367                 ; PREPARE FOR NEXT CHUNK
CDC0 8657             (  cubix_ch375.asm):00368                 LDA     #CH_CMD_DSKWRGO         ; CONTINUE DISK READ
CDC2 BDCC3A           (  cubix_ch375.asm):00369                 JSR     CH_CMD                  ; SEND IT
CDC5 5A               (  cubix_ch375.asm):00370                 DECB
CDC6 26DB             (  cubix_ch375.asm):00371                 BNE     CHUSB_WRITE1            ; LOOP TILL DONE
                      (  cubix_ch375.asm):00372         ;
                      (  cubix_ch375.asm):00373                 ; FINAL CHECK FOR COMPLETION & SUCCESS
CDC8 BDCC77           (  cubix_ch375.asm):00374                 JSR     CH_POLL                 ; WAIT FOR COMPLETION
CDCB 8114             (  cubix_ch375.asm):00375                 CMPA    #$14                    ; SUCCESS?
CDCD 1026FF76         (  cubix_ch375.asm):00376                 LBNE    CHUSB_IOERR             ; IF NOT, HANDLE ERROR
                      (  cubix_ch375.asm):00377         ;
CDD1 8600             (  cubix_ch375.asm):00378                 lda     #$00
CDD3 B70103           (  cubix_ch375.asm):00379                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
CDD6 1CFE             (  cubix_ch375.asm):00380                 CLC                             ; SIGNAL SUCCESS
CDD8 39               (  cubix_ch375.asm):00381                 RTS
                      (  cubix_ch375.asm):00382         ;
                      (  cubix_ch375.asm):00383         ; INITIATE A DISK SECTOR READ/WRITE OPERATION
                      (  cubix_ch375.asm):00384         ; A: READ OR WRITE OPCODE
                      (  cubix_ch375.asm):00385         ;
CDD9                  (  cubix_ch375.asm):00386         CHUSB_RWSTART:
CDD9 BDCC3A           (  cubix_ch375.asm):00387                 JSR     CH_CMD                  ; SEND R/W COMMAND
                      (  cubix_ch375.asm):00388         ;
                      (  cubix_ch375.asm):00389         ; SEND LBA, 4 BYTES, LITTLE ENDIAN
CDDC B60107           (  cubix_ch375.asm):00390                 LDA     CURRENTSEC
CDDF BDCC49           (  cubix_ch375.asm):00391                 JSR     CH_WR                   ; SEND BYTE
CDE2 B60106           (  cubix_ch375.asm):00392                 LDA     CURRENTCYL
CDE5 4C               (  cubix_ch375.asm):00393                 INCA                                      ; CYL 0 reserved for boot image
CDE6 BDCC49           (  cubix_ch375.asm):00394                 JSR     CH_WR                   ; SEND BYTE
CDE9 B60105           (  cubix_ch375.asm):00395                 LDA     CURRENTSLICE                        ;
CDEC BDCC49           (  cubix_ch375.asm):00396                 JSR     CH_WR                   ; SEND BYTE
CDEF 8600             (  cubix_ch375.asm):00397                 LDA     #0              ;
CDF1 BDCC49           (  cubix_ch375.asm):00398                 JSR     CH_WR                   ; SEND BYTE
                      (  cubix_ch375.asm):00399         ; REQUEST 1 SECTOR
CDF4 8601             (  cubix_ch375.asm):00400                 LDA     #1                      ;
CDF6 BDCC49           (  cubix_ch375.asm):00401                 JSR     CH_WR                   ; SEND BYTE
CDF9 39               (  cubix_ch375.asm):00402                 RTS
                      (  cubix_ch375.asm):00403         ;
CDFA                  (  cubix_ch375.asm):00404         CHMESSAGE1:
CDFA 4348333735205553 (  cubix_ch375.asm):00405                 FCN     'CH375 USB:'
     423A00
CE05                  (  cubix_ch375.asm):00406         CHMESSAGE2:
CE05 2020434833373520 (  cubix_ch375.asm):00407                 FCN     '  CH375 DETECTED.'
     4445544543544544
     2E00
CE17                  (  cubix_ch375.asm):00408         CHMESSAGE3:
CE17 202043483337353A (  cubix_ch375.asm):00409                 FCN     '  CH375: BLOCKS=0x'
     20424C4F434B533D
     307800
CE2A                  (  cubix_ch375.asm):00410         CHMESSAGE5:
CE2A 2020434833373520 (  cubix_ch375.asm):00411                 FCN     '  CH375 MEDIA ERROR.'
     4D45444941204552
     524F522E00
CE3F                  (  cubix_ch375.asm):00412         CHMESSAGE6:
CE3F 2020434833373520 (  cubix_ch375.asm):00413                 FCN     '  CH375 NOT DETECTED.'
     4E4F542044455445
     435445442E00
CE55                  (  cubix_ch375.asm):00414         CHMESSAGE7:
CE55 2020434833373520 (  cubix_ch375.asm):00415                 FCN     '  CH375 NO MEDIA.'
     4E4F204D45444941
     2E00
                      (     cubixdrv.asm):00127         
                      (     cubixdrv.asm):00128         
                      (     cubixdrv.asm):00129         
CE67                  (     cubixdrv.asm):00130         drv_noop:
CE67 39               (     cubixdrv.asm):00131                 RTS
                      (     cubixdrv.asm):00132         
                      (     cubixdrv.asm):00133         ;*
                      (     cubixdrv.asm):00134         ;* OUTPUT LFCR TO CONSOLE
                      (     cubixdrv.asm):00135         ;*
CE68                  (     cubixdrv.asm):00136         LFCR:
CE68 3406             (     cubixdrv.asm):00137                 PSHS    a,b
CE6A 860A             (     cubixdrv.asm):00138                 LDA     #10
CE6C 8D40             (     cubixdrv.asm):00139                 BSR     PUTCHR
CE6E 860D             (     cubixdrv.asm):00140                 LDA     #13
CE70 8D3C             (     cubixdrv.asm):00141                 BSR     PUTCHR
CE72 3586             (     cubixdrv.asm):00142                 PULS    A,B,pc
CE74                  (     cubixdrv.asm):00143         SPACE:
CE74 3406             (     cubixdrv.asm):00144                 PSHS    a,b
CE76 8620             (     cubixdrv.asm):00145                 LDA     #32
CE78 8D34             (     cubixdrv.asm):00146                 BSR     PUTCHR
CE7A 3586             (     cubixdrv.asm):00147                 PULS    A,B,pc
                      (     cubixdrv.asm):00148         ;*
                      (     cubixdrv.asm):00149         ;* WRITE STRING(X) TO CONSOLE
                      (     cubixdrv.asm):00150         ;*
CE7C                  (     cubixdrv.asm):00151         WRSTR:
CE7C 3406             (     cubixdrv.asm):00152                 PSHS    A,B                               ;SAVE A
CE7E                  (     cubixdrv.asm):00153         WRST1:
CE7E A680             (     cubixdrv.asm):00154                 LDA     ,X+                               ;GET CHAR
CE80 2704             (     cubixdrv.asm):00155                 BEQ     WRST2                             ;END, QUIT
CE82 8D2A             (     cubixdrv.asm):00156                 BSR     PUTCHR
CE84 20F8             (     cubixdrv.asm):00157                 BRA     WRST1                             ;CONTINUE
CE86                  (     cubixdrv.asm):00158         WRST2:
CE86 3586             (     cubixdrv.asm):00159                 PULS    A,B,pc
                      (     cubixdrv.asm):00160         ;*
                      (     cubixdrv.asm):00161         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (     cubixdrv.asm):00162         ;*
CE88                  (     cubixdrv.asm):00163         WRHEXW
CE88 3406             (     cubixdrv.asm):00164                 PSHS    d
CE8A 8D08             (     cubixdrv.asm):00165                 BSR     WRHEX                             ;OUTPUT
CE8C 1E89             (     cubixdrv.asm):00166                 EXG     A,B                               ;SWAP
CE8E 8D04             (     cubixdrv.asm):00167                 BSR     WRHEX                             ;OUTPUT
CE90 1E89             (     cubixdrv.asm):00168                 EXG     A,B                               ;BACK
CE92 3586             (     cubixdrv.asm):00169                 PULS    d,pc
                      (     cubixdrv.asm):00170         
                      (     cubixdrv.asm):00171         ;*
                      (     cubixdrv.asm):00172         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (     cubixdrv.asm):00173         ;*
CE94                  (     cubixdrv.asm):00174         WRHEX
CE94 3406             (     cubixdrv.asm):00175                 PSHS    A,B                               ;SAVE IT
CE96 44               (     cubixdrv.asm):00176                 LSRA                                      ;SHIFT
CE97 44               (     cubixdrv.asm):00177                 LSRA                                      ;HIGH NIBBLE
CE98 44               (     cubixdrv.asm):00178                 LSRA                                      ;INTO
CE99 44               (     cubixdrv.asm):00179                 LSRA                                      ;LOW NIBBLE
CE9A 8D06             (     cubixdrv.asm):00180                 BSR     HOUT                              ;HIGH
CE9C A6E4             (     cubixdrv.asm):00181                 LDA     ,S                                ;GET LOW
CE9E 8D02             (     cubixdrv.asm):00182                 BSR     HOUT                              ;OUTPUT
CEA0 3586             (     cubixdrv.asm):00183                 PULS    A,B,PC                            ;RESTORE IT
                      (     cubixdrv.asm):00184         ;* OUTPUT NIBBLE IN HEX
CEA2                  (     cubixdrv.asm):00185         HOUT
CEA2 840F             (     cubixdrv.asm):00186                 ANDA    #%00001111                        ;REMOVE HIGH
CEA4 8B30             (     cubixdrv.asm):00187                 ADDA    #'0'                              ;CONVERT
CEA6 8139             (     cubixdrv.asm):00188                 CMPA    #'9'                              ;OK?
CEA8 2304             (     cubixdrv.asm):00189                 BLS     PUTCHR                            ;OK, OUTPUT
CEAA 8B07             (     cubixdrv.asm):00190                 ADDA    #7                                ;CONVERT TO 'A'-'F'
CEAC 2000             (     cubixdrv.asm):00191                 BRA     PUTCHR                            ;OUTPUT
CEAE                  (     cubixdrv.asm):00192         PUTCHR:
                      (     cubixdrv.asm):00193         ;       NOTE THAT EVENTUALLY THIS NEEDS TO BE THE SYSTEM SSR NOT A DIRECT CALL
CEAE 3402             (     cubixdrv.asm):00194                 PSHS    A
CEB0 BDCADE           (     cubixdrv.asm):00195                 JSR     ESPVIDEOOUT
CEB3 3502             (     cubixdrv.asm):00196                 PULS    A
CEB5 7EC1AD           (     cubixdrv.asm):00197                 JMP     WRSER1
                      (     cubixdrv.asm):00198         
                      (     cubixdrv.asm):00199         
                      (     cubixdrv.asm):00200         
CEB8 0000000000000000 (     cubixdrv.asm):00201                 fcb     00,00,00,00,00,00,00,00,00,00,00,00
     00000000
CEC4 0000000000000000 (     cubixdrv.asm):00202                 fcb     00,00,00,00,00,00,00,00,00,00,00,00
     00000000
CED0 0000000000000000 (     cubixdrv.asm):00203                 fcb     00,00,00,00,00,00,00,00,00,00,00,00
     00000000
CEDC 0000000000000000 (     cubixdrv.asm):00204                 fcb     00,00,00,00,00,00,00,00,00,00,00,00
     00000000
                      (     cubixdrv.asm):00205                 END

Symbol Table:
[ G] BANKED_DRIVER_DISPATCHER         C100
[ G] BD_MAPSTDEND                     C841
[ G] CH0BASE                          1260
[ G] CH0COMMAND                       1261
[ G] CH0DATA                          1260
[ G] CH375INIT                        CBC9
[ G] CH_CMD                           CC3A
[ G] CH_CMD_ABRTNAK                   0017
[ G] CH_CMD_AUTOSET                   004D
[ G] CH_CMD_BYTE_LOC                  0039
[ G] CH_CMD_BYTERD                    003A
[ G] CH_CMD_BYTERDGO                  003B
[ G] CH_CMD_BYTEWR                    003C
[ G] CH_CMD_BYTEWRGO                  003D
[ G] CH_CMD_DSKCAP                    003E
[ G] CH_CMD_DSKINIT                   0051
[ G] CH_CMD_DSKINQ                    0058
[ G] CH_CMD_DSKMNT                    0031
[ G] CH_CMD_DSKRD                     0054
[ G] CH_CMD_DSKRDGO                   0055
[ G] CH_CMD_DSKRDY                    0059
[ G] CH_CMD_DSKRES                    0052
[ G] CH_CMD_DSKSIZ                    0053
[ G] CH_CMD_DSKWR                     0056
[ G] CH_CMD_DSKWRGO                   0057
[ G] CH_CMD_EXIST                     0006
[ G] CH_CMD_MAXLUN                    000A
[ G] CH_CMD_MODE                      0015
[ G] CH_CMD_PKTSEC                    000B
[ G] CH_CMD_RD                        CD4F
[ G] CH_CMD_RD5                       0028
[ G] CH_CMD_RESET                     0005
[ G] CH_CMD_SETRETRY                  000B
[ G] CH_CMD_STAT                      0022
[ G] CH_CMD_TSTCON                    0016
[ G] CH_CMD_VER                       0001
[ G] CH_CMD_WR                        CD54
[ G] CH_CMD_WR5                       002B
[ G] CH_DETECT                        CC0F
[ G] CH_DETECT1                       CC27
[ G] CH_DISKINIT                      CCA4
[ G] CH_DISKINIT1                     CCD0
[ G] CH_DISKINIT_TO                   CCF6
[ G] CH_DSKSIZ                        CD07
[ G] CH_NAP                           CC4D
[ G] CH_POLL                          CC77
[ G] CH_POLL0                         CC7D
[ G] CH_POLL1                         CC80
[ G] CH_POLL2                         CC94
[ G] CH_RD                            CC45
[ G] CH_READSEC                       CD59
[ G] CH_RES1                          CC6A
[ G] CH_RESET                         CC5F
[ G] CH_STAT                          CC41
[ G] CH_WR                            CC49
[ G] CH_WRITESEC                      CD99
[ G] CHMESSAGE1                       CDFA
[ G] CHMESSAGE2                       CE05
[ G] CHMESSAGE3                       CE17
[ G] CHMESSAGE5                       CE2A
[ G] CHMESSAGE6                       CE3F
[ G] CHMESSAGE7                       CE55
[ G] CHUSB_CMDERR                     CD44
[ G] CHUSB_IOERR                      CD47
[ G] CHUSB_NOMEDIA                    CCFA
[ G] CHUSB_READ1                      CD63
[ G] CHUSB_READ2                      CD78
[ G] CHUSB_RESET1A                    CCF1
[ G] CHUSB_RWSTART                    CDD9
[ G] CHUSB_WRITE1                     CDA3
[ G] CHUSB_WRITE2                     CDB6
[ G] consoleConnect                   0100
[ G] CUBIX_IO_BASE                    1000
[ G] CURRENTCYL                       0106
[ G] CURRENTDEVICE                    0104
[ G] CURRENTHEAD                      0108
[ G] CURRENTSEC                       0107
[ G] CURRENTSLICE                     0105
[ G] DELAY                            C74C
[ G] DISKERROR                        0103
[ G] DISPATCHTABLE                    C113
[ G] drv_noop                         CE67
[ G] ESP0_BUSY                        0002
[ G] ESP0_DAT                         1100
[ G] ESP0_PROBE                       C967
[ G] ESP0_RDY                         0001
[ G] ESP1_BUSY                        0010
[ G] ESP1_DAT                         1101
[ G] ESP1_PROBE                       C9D2
[ G] ESP1_RDY                         0008
[ G] ESP1BUFL                         CAC5
[ G] ESP_BASE                         1100
[ G] ESP_ERROR                        C9C8
[ G] ESP_STAT                         1102
[ G] ESPCH1IN                         CA61
[ G] ESPCHIN                          CAED
[ G] ESPCURSORV                       CA33
[ G] ESPINIT                          C93F
[ G] ESPMESSAGE1                      CB9F
[ G] ESPMESSAGE2                      CBAC
[ G] ESPMESSAGE3                      CBB5
[ G] ESPMESSAGE4                      CBBE
[ G] ESPMESSAGE5                      CBC2
[ G] ESPNETCBUFL                      CAD9
[ G] ESPNETCIN                        CA8C
[ G] ESPNETCOUT                       CA79
[ G] ESPPS2BUFL                       CA97
[ G] ESPPS2IN                         CAEB
[ G] ESPSER0BUFL                      CAAD
[ G] ESPSER0IN                        CA4D
[ G] ESPSER0OUT                       CA40
[ G] ESPSER1BUFL                      CAC3
[ G] ESPSER1IN                        CA5F
[ G] ESPSER1OUT                       CA52
[ G] ESPVIDEOOUT                      CADE
[ G] farpointer                       0101
[ G] FUNCTION_DISPATCHER              C100
[ G] GETESP0                          CB22
[ G] GETESP1                          CB6F
[ G] HOUT                             CEA2
[ G] HSTBUF                           0200
[ G] IDE_ABORT                        C1EF
[ G] IDE_INITA                        C211
[ G] IDE_PRINT_INFO                   C1F8
[ G] IDE_READ_BUFFER                  C329
[ G] IDE_READ_INFO                    C254
[ G] IDE_READ_INFO_ABORT              C2A7
[ G] IDE_READ_INFO_OK                 C2B3
[ G] IDE_READ_SECTOR                  C2B9
[ G] IDE_READ_SECTOR_1                C2BE
[ G] IDE_READ_SECTOR_ERROR            C2D3
[ G] IDE_SETUP_LBA                    C3CB
[ G] IDE_WAIT_DRQ                     C2FD
[ G] IDE_WAIT_DRQ1                    C307
[ G] IDE_WAIT_DRQ2                    C325
[ G] IDE_WAIT_DRQ3                    C327
[ G] IDE_WAIT_DRQE                    C320
[ G] IDE_WAIT_NOT_BUSY                C2D9
[ G] IDE_WAIT_NOT_BUSY1               C2E3
[ G] IDE_WAIT_NOT_BUSY2               C2F9
[ G] IDE_WAIT_NOT_BUSY3               C2FB
[ G] IDE_WRITE_BUFFER                 C36B
[ G] IDE_WRITE_SECTOR                 C346
[ G] IDE_WRITE_SECTOR_ERROR           C365
[ G] IDEBUFRD                         C32D
[ G] IDEBUFWT                         C36F
[ G] KBD_ALT                          0004
[ G] KBD_BREAK                        0002
[ G] KBD_CAPSLCK                      0040
[ G] KBD_CMD                          13FF
[ G] KBD_CTRL                         0002
[ G] KBD_DAT                          13FE
[ G] KBD_DEC0                         C567
[ G] KBD_DEC1                         C571
[ G] KBD_DEC10                        C6CA
[ G] KBD_DEC10A                       C6DF
[ G] KBD_DEC10B                       C6EA
[ G] KBD_DEC11                        C6F2
[ G] KBD_DEC11A                       C717
[ G] KBD_DEC12                        C730
[ G] KBD_DEC13                        C737
[ G] KBD_DEC2                         C579
[ G] KBD_DEC3                         C58F
[ G] KBD_DEC3B                        C59E
[ G] KBD_DEC3B1                       C5AA
[ G] KBD_DEC4                         C5B8
[ G] KBD_DEC5                         C5C7
[ G] KBD_DEC5A                        C5D8
[ G] KBD_DEC5B                        C5EE
[ G] KBD_DEC5C                        C5F8
[ G] KBD_DEC5D                        C613
[ G] KBD_DEC6                         C621
[ G] KBD_DEC6A                        C635
[ G] KBD_DEC6B                        C643
[ G] KBD_DEC6C                        C649
[ G] KBD_DEC6D                        C64F
[ G] KBD_DEC6E                        C659
[ G] KBD_DEC6F                        C660
[ G] KBD_DEC6G                        C669
[ G] KBD_DEC7                         C67A
[ G] KBD_DEC8                         C683
[ G] KBD_DEC8A                        C69B
[ G] KBD_DEC9                         C6A9
[ G] KBD_DEC9A                        C6BD
[ G] KBD_DECNEW                       C744
[ G] KBD_DECODE                       C567
[ G] KBD_DEFRPT                       0040
[ G] KBD_DEFSTATE                     0070
[ G] KBD_ERROR                        C455
[ G] KBD_EXT                          0001
[ G] KBD_GETDATA                      C4B4
[ G] KBD_GETDATA0                     C4B7
[ G] KBD_GETDATA1                     C4CA
[ G] KBD_GETDATAX                     C4D0
[ G] KBD_GETKEY                       C549
[ G] KBD_IDLE                         C3FC
[ G] KBD_KEYCODE                      C3F6
[ G] KBD_KEYRDY                       0080
[ G] KBD_LSTATE                       C3F8
[ G] KBD_MAPEXT                       C8C6
[ G] KBD_MAPNUMPAD                    C8F4
[ G] KBD_MAPSHIFT                     C841
[ G] KBD_MAPSIZ                       0085
[ G] KBD_MAPSTD                       C7BC
[ G] KBD_NUMLCK                       0020
[ G] KBD_NUMPAD                       0080
[ G] KBD_PROBE                        C440
[ G] KBD_PUTCMD                       C480
[ G] KBD_PUTCMD0                      C483
[ G] KBD_PUTCMD1                      C494
[ G] KBD_PUTDATA                      C49A
[ G] KBD_PUTDATA0                     C49D
[ G] KBD_PUTDATA1                     C4AE
[ G] KBD_REPEAT                       C3FB
[ G] KBD_RESET                        C4DC
[ G] KBD_RESET0                       C4E7
[ G] KBD_RESET1                       C4F7
[ G] KBD_RSTATE                       C3F9
[ G] KBD_SCANCODE                     C3F5
[ G] KBD_SCRLCK                       0010
[ G] KBD_SETLEDS                      C4FA
[ G] KBD_SETRPT                       C527
[ G] KBD_SHIFT                        0001
[ G] KBD_ST                           13FF
[ G] KBD_STATE                        C3F7
[ G] KBD_STATUS                       C3FA
[ G] KBD_TEMP                         C3FD
[ G] KBD_WAITTO                       30FF
[ G] KBD_WIN                          0008
[ G] LDELAY                           C75D
[ G] LFCR                             CE68
[ G] LPT_0                            13F0
[ G] LPT_1                            13F1
[ G] LPT_2                            13F2
[ G] LPT_OST                          C939
[ G] LPT_OUT                          C914
[ G] LPT_WAITTO                       30FF
[ G] MESSAGE1                         C388
[ G] MESSAGE2                         C390
[ G] MESSAGE3                         C397
[ G] MESSAGE4                         C3A4
[ G] MESSAGE5                         C3B6
[ G] MESSAGE6                         C3C8
[ G] MIOMESSAGE1                      C76C
[ G] MIOMESSAGE3                      C77A
[ G] MIOMESSAGE4                      C794
[ G] MIOMESSAGE5                      C7A8
[ G] MULTIO_BASE                      13E0
[ G] MULTIOINIT                       C3FF
[ G] NOTDETECTED                      CC03
[ G] PAGER_D                          0109
[ G] PAGER_S                          010F
[ G] PAGER_U                          0111
[ G] PAGER_X                          010B
[ G] PAGER_Y                          010D
[ G] PUTCHR                           CEAE
[ G] PUTESP0                          CB05
[ G] PUTESP1                          CB52
[ G] RDSER1                           C1B8
[ G] SERIALINIT                       C19D
[ G] SPACE                            CE74
[ G] UART1COMMAND                     1F86
[ G] UART1CONTROL                     1F87
[ G] UART1DATA                        1F84
[ G] UART1STATUS                      1F85
[ G] WRHEX                            CE94
[ G] WRHEXW                           CE88
[ G] WRSER1                           C1AD
[ G] WRST1                            CE7E
[ G] WRST2                            CE86
[ G] WRSTR                            CE7C
[ G] XTIDE_CMD_FEAT                   00EF
[ G] XTIDE_CMD_ID                     00EC
[ G] XTIDE_CMD_INIT                   0091
[ G] XTIDE_CMD_READ                   0020
[ G] XTIDE_CMD_RECAL                  0010
[ G] XTIDE_CMD_SPINDOWN               00E0
[ G] XTIDE_CMD_SPINUP                 00E1
[ G] XTIDE_CMD_WRITE                  0030
[ G] XTIDE_COMMAND                    130E
[ G] XTIDE_DATA_HI                    1301
[ G] XTIDE_DATA_LO                    1300
[ G] XTIDE_DEVICE                     130C
[ G] XTIDE_ERR                        1302
[ G] XTIDE_FECODE                     1302
[ G] XTIDE_INIT                       C1CF
[ G] XTIDE_LBAHI                      130A
[ G] XTIDE_LBALOW                     1306
[ G] XTIDE_LBAMID                     1308
[ G] XTIDE_PROBE                      C212
[ G] XTIDE_PROBE_FAIL                 C251
[ G] XTIDE_PROBE_SUCCESS              C253
[ G] XTIDE_SEC_CNT                    1304
[ G] XTIDE_STATUS                     130E
[ G] XTIDETIMEOUT                     C1CD
