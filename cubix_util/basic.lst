                      (        basic.asm):00001         ;build  SET     cubix
     2000             (        basic.asm):00002         CODE            = $2000
     3000             (        basic.asm):00003         RAM             = $3000
     D000             (        basic.asm):00004         STACK           = $D000
     1000             (        basic.asm):00005         FORindicator    = $1000
     1001             (        basic.asm):00006         GOSUBIndicator  = FORindicator+1
     0030             (        basic.asm):00007         RAMHB           = $30
                      (        basic.asm):00008         
                      (        basic.asm):00009                 ORG     RAM
3000                  (        basic.asm):00010         pgm_start
3000                  (        basic.asm):00011                 RMB     2                                 ; Program starting line pointer
3002                  (        basic.asm):00012         runptr
3002                  (        basic.asm):00013                 RMB     2                                 ; Executing line pointer
3004                  (        basic.asm):00014         readptr
3004                  (        basic.asm):00015                 RMB     2                                 ; Data read line pointer
3006                  (        basic.asm):00016         dataptr
3006                  (        basic.asm):00017                 RMB     2                                 ; Data read element pointer
3008                  (        basic.asm):00018         line
3008                  (        basic.asm):00019                 RMB     2                                 ; Current line number
300A                  (        basic.asm):00020         randseed
300A                  (        basic.asm):00021                 RMB     2                                 ; Random number seed
300C                  (        basic.asm):00022         temp
300C                  (        basic.asm):00023                 RMB     2                                 ; Temporary location
300E                  (        basic.asm):00024         temp1
300E                  (        basic.asm):00025                 RMB     2                                 ; Temporary location
3010                  (        basic.asm):00026         ctl_ptr
3010                  (        basic.asm):00027                 RMB     1                                 ; Control stack pointer
3011                  (        basic.asm):00028         expr_type
3011                  (        basic.asm):00029                 RMB     1                                 ; Expression type (0=Num, 1=Char)
3012                  (        basic.asm):00030         nest
3012                  (        basic.asm):00031                 RMB     1                                 ; Expression nesting level
3013                  (        basic.asm):00032         mode
3013                  (        basic.asm):00033                 RMB     1                                 ; Execution mode (0=Interactive, 1=Run)
3014                  (        basic.asm):00034         keypress
3014                  (        basic.asm):00035                 RMB     1                                 ; Key has been pressed
                      (        basic.asm):00036         
3015                  (        basic.asm):00037         file
3015                  (        basic.asm):00038                 RMB     2                                 ; Active file indicator
3017                  (        basic.asm):00039         files
3017                  (        basic.asm):00040                 RMB     10*2                              ; File handles
                      (        basic.asm):00041         
302B                  (        basic.asm):00042         buffer
302B                  (        basic.asm):00043                 RMB     100                               ; General buffer
308F                  (        basic.asm):00044         sa1
308F                  (        basic.asm):00045                 RMB     100                               ; String accumulator#1
30F3                  (        basic.asm):00046         sa2
30F3                  (        basic.asm):00047                 RMB     100                               ; String accumulator#2
3157                  (        basic.asm):00048         ctl_stk
3157                  (        basic.asm):00049                 RMB     100                               ; Control stack
31BB                  (        basic.asm):00050         char_vars
31BB                  (        basic.asm):00051                 RMB     260*2                             ; Character variable pointers
33C3                  (        basic.asm):00052         num_vars
33C3                  (        basic.asm):00053                 RMB     260*2                             ; Numeric variable values
35CB                  (        basic.asm):00054         dim_vars
35CB                  (        basic.asm):00055                 RMB     260*2                             ; Dimensioned variable pointers
37D3                  (        basic.asm):00056         dim_check
37D3                  (        basic.asm):00057                 RMB     260*2                             ; Dimensioned variable sizes
     39DB             (        basic.asm):00058         heap            EQU *
                      (        basic.asm):00059         ;
                      (        basic.asm):00060                 ORG     CODE
                      (        basic.asm):00061         
2000 813F             (        basic.asm):00062                 CMPA    #'?'                              ; Help?
2002 2619             (        basic.asm):00063                 BNE     begin                             ; No
2004 3F19             (        basic.asm):00064                 FCB     $3F,25                            ; Output message
2006 5573653A20424153 (        basic.asm):00065                 FCN     'Use: BASIC [program]'
     4943205B70726F67
     72616D5D00
201B 3F00             (        basic.asm):00066                 FCB     $3F,0
                      (        basic.asm):00067         
201D                  (        basic.asm):00068         begin
201D 10CED000         (        basic.asm):00069                 LDS     #STACK
2021 8630             (        basic.asm):00070                 LDA     #RAMHB                            ; Point to RAM
2023 1F8B             (        basic.asm):00071                 TFR     A,DP                              ; Set DP
     30               (        basic.asm):00072                 SETDP   RAMHB
2025                  (        basic.asm):00073         V_NEW:
2025 1700A0           (        basic.asm):00074                 LBSR    clrall                            ; Zero all of RAM
2028 3F04             (        basic.asm):00075                 FCB     $3F,4                             ; SSR 11 - check for data
202A 2708             (        basic.asm):00076                 BEQ     top                               ; Not it
202C 1700C6           (        basic.asm):00077                 LBSR    xload                             ; Load the file
202F 9E00             (        basic.asm):00078                 LDX     pgm_start                         ; Start of program
2031 170353           (        basic.asm):00079                 LBSR    run1                              ; Execute
2034                  (        basic.asm):00080         top:
2034 10CED000         (        basic.asm):00081                 LDS     #STACK                            ; Reset stack
2038 0F15             (        basic.asm):00082                 CLR     file                              ; Reset to console
203A 0F16             (        basic.asm):00083                 CLR     file+1                            ; Reset to console
203C 170D4F           (        basic.asm):00084                 LBSR    putm                              ; Output message
203F 5265616479       (        basic.asm):00085                 FCC     'Ready'                           ; Text
2044 0A0D00           (        basic.asm):00086                 FCB     $0A,$0D,0                         ; Newline
2047                  (        basic.asm):00087         top1:
2047 4F               (        basic.asm):00088                 CLRA                                      ; Zero high
2048 9710             (        basic.asm):00089                 STA     ctl_ptr                           ; Disable program
204A 9713             (        basic.asm):00090                 STA     mode                              ; Not running
204C 108E302B         (        basic.asm):00091                 LDY     #buffer                           ; Point to buffer
2050 170D51           (        basic.asm):00092                 LBSR    gets                              ; Get string
2053 17084C           (        basic.asm):00093                 LBSR    edit                              ; Do line edit
2056 27EF             (        basic.asm):00094                 BEQ     top1                              ; No prompt on edit
2058 962B             (        basic.asm):00095                 LDA     buffer                            ; Get data
205A 2A06             (        basic.asm):00096                 BPL     top2                              ; Not a keyboard
205C 3121             (        basic.asm):00097                 LEAY    1,Y                               ; Skip keyword
205E 8D0A             (        basic.asm):00098                 BSR     execute                           ; Process keyword
2060 20D2             (        basic.asm):00099                 BRA     top                               ; next command
2062                  (        basic.asm):00100         top2
2062 27D0             (        basic.asm):00101                 BEQ     top                               ; Null line
2064 8601             (        basic.asm):00102                 LDA     #LET                              ; Assume LET
2066 8D02             (        basic.asm):00103                 BSR     execute                           ; Process LET
2068 20CA             (        basic.asm):00104                 BRA     top                               ; And continue
                      (        basic.asm):00105         ;
                      (        basic.asm):00106         ; Execute a BASIC command
                      (        basic.asm):00107         ;
206A                  (        basic.asm):00108         execute:
206A 847F             (        basic.asm):00109                 ANDA    #$7F                              ; Strip high bit
206C 811C             (        basic.asm):00110                 CMPA    #TO                               ; In range
206E 10240637         (        basic.asm):00111                 LBHS    synerr                            ; Error
2072 1F89             (        basic.asm):00112                 TFR     A,B                               ; B = value
2074 0F15             (        basic.asm):00113                 CLR     file                              ; Reset to console
2076 0F16             (        basic.asm):00114                 CLR     file+1                            ; Reset to console
2078 170C76           (        basic.asm):00115                 LBSR    switch                            ; Perform switch
207B 26A9249620B32533 (        basic.asm):00116                 FDB     synerr,V_let,V_EXIT,V_LIST,V_NEW,V_RUN,V_CLEAR
     202523712991
2089 25BC25D325E124EB (        basic.asm):00117                 FDB     V_GOSUB,V_GOTO,V_RETURN,V_PRINT,V_FOR
     23D3
2093 241E21EE221123C7 (        basic.asm):00118                 FDB     V_NEXT,V_IF,V_LIF,V_REM,V_STOP,V_END,V_INPUT
     235423622226
20A1 246F22CE22EB23C4 (        basic.asm):00119                 FDB     V_DIM,V_ORDER,V_READ,V_DATA,V_POKE
     21E0
20AB 212B20F9216B21C8 (        basic.asm):00120                 FDB     V_SAVE,V_LOAD,V_OPEN,_CLOSE
20B3                  (        basic.asm):00121         V_EXIT
20B3 4F               (        basic.asm):00122                 CLRA                                      ; Zero return code
20B4 3F00             (        basic.asm):00123                 FCB     $3F,0                             ; And exit
                      (        basic.asm):00124         ; Clear program
20B6                  (        basic.asm):00125         clrpgm:
20B6 0D13             (        basic.asm):00126                 TST     mode                              ; Running?
20B8 270E             (        basic.asm):00127                 BEQ     clrall                            ; No - clear all
20BA 9E00             (        basic.asm):00128                 LDX     pgm_start                         ; Get program start
20BC 2709             (        basic.asm):00129                 BEQ     clrpg2                            ; No program
20BE                  (        basic.asm):00130         clrpg1
20BE 170777           (        basic.asm):00131                 LBSR    free                              ; Release it
20C1 AE02             (        basic.asm):00132                 LDX     2,X                               ; Get next
20C3 26F9             (        basic.asm):00133                 BNE     clrpg1                            ; Release all
20C5 9F00             (        basic.asm):00134                 STX     pgm_start                         ; Zero pointer
20C7                  (        basic.asm):00135         clrpg2:
20C7 39               (        basic.asm):00136                 RTS
20C8                  (        basic.asm):00137         clrall:
20C8 8E3000           (        basic.asm):00138                 LDX     #RAM                              ; Point to buffer
20CB                  (        basic.asm):00139         clra1
20CB 6F80             (        basic.asm):00140                 CLR     ,X+                               ; Zero one byte
20CD 8C39DB           (        basic.asm):00141                 CMPX    #heap                             ; At heap?
20D0 23F9             (        basic.asm):00142                 BLS     clra1                             ; Zero it all
20D2 39               (        basic.asm):00143                 RTS
                      (        basic.asm):00144         ; Process load/save filename
20D3                  (        basic.asm):00145         lsname:
20D3 1708F2           (        basic.asm):00146                 LBSR    evalchr                           ; Get string
20D6 108E308F         (        basic.asm):00147                 LDY     #sa1                              ; Point to it
20DA 8D69             (        basic.asm):00148                 BSR     ucsa1                             ; Convert to upper case
20DC                  (        basic.asm):00149         lsn1
20DC 3F0B             (        basic.asm):00150                 FCB     $3F,11                            ; Accept filename
20DE 1026FF52         (        basic.asm):00151                 LBNE    top                               ; Error
20E2 CC4241           (        basic.asm):00152                 LDD     #$4241                            ; 'BA' Get .BA
20E5 ED84             (        basic.asm):00153                 STD     ,X                                ; Set extension
20E7 8653             (        basic.asm):00154                 LDA     #'S'                              ; Get 'S'
20E9 A702             (        basic.asm):00155                 STA     2,X                               ; Set extension
20EB 3510             (        basic.asm):00156                 PULS    X                                 ; X = return address
20ED 32E9FDF6         (        basic.asm):00157                 LEAS    -522,S                            ; Allocate buffer
20F1 1F43             (        basic.asm):00158                 TFR     S,U                               ; U = buffer
20F3 6E84             (        basic.asm):00159                 JMP     ,X
                      (        basic.asm):00160         ;
                      (        basic.asm):00161         ; Load program
                      (        basic.asm):00162         ;
20F5                  (        basic.asm):00163         xload
20F5 8DE5             (        basic.asm):00164                 BSR     lsn1                              ; Get name
20F7 2002             (        basic.asm):00165                 BRA     load0
20F9                  (        basic.asm):00166         V_LOAD
20F9 8DD8             (        basic.asm):00167                 BSR     lsname                            ; Get name
20FB                  (        basic.asm):00168         load0:
20FB 3F37             (        basic.asm):00169                 FCB     $3F,55                            ; Open for read
20FD 2617             (        basic.asm):00170                 BNE     load3                             ; Failed
20FF 8DB5             (        basic.asm):00171                 BSR     clrpgm                            ; Zero
2101 DF15             (        basic.asm):00172                 STU     file                              ; Save file
2103                  (        basic.asm):00173         load1:
2103 108E302B         (        basic.asm):00174                 LDY     #buffer                           ; Point to buffer
2107 170C9A           (        basic.asm):00175                 LBSR    gets                              ; Get line
210A 5D               (        basic.asm):00176                 TSTB                                      ; End of file
210B 2705             (        basic.asm):00177                 BEQ     load2                             ; Exit
210D 170792           (        basic.asm):00178                 LBSR    edit                              ; Edit line
2110 20F1             (        basic.asm):00179                 BRA     load1                             ; Do them all
2112                  (        basic.asm):00180         load2:
2112 DE15             (        basic.asm):00181                 LDU     file                              ; Get FCB
2114 3F39             (        basic.asm):00182                 FCB     $3F,57                            ; Closeit
2116                  (        basic.asm):00183         load3:
2116 0D13             (        basic.asm):00184                 TST     mode                              ; Running?
                      (        basic.asm):00185         ;       LBEQ    top             ; No, stop
2118 270C             (        basic.asm):00186                 BEQ     load4
211A 9E00             (        basic.asm):00187                 LDX     pgm_start                         ; Get start
211C 10CED000         (        basic.asm):00188                 LDS     #STACK                            ; Reset stack
2120 170266           (        basic.asm):00189                 LBSR    V_RUN2                            ; And proceed
2123 16FF0E           (        basic.asm):00190                 LBRA    top                               ; And proceed
2126                  (        basic.asm):00191         load4:
2126 32E9020A         (        basic.asm):00192                 LEAS    522,S                             ; Clean stack
212A 39               (        basic.asm):00193                 RTS
                      (        basic.asm):00194         ;
                      (        basic.asm):00195         ; Save program
                      (        basic.asm):00196         ;
212B                  (        basic.asm):00197         V_SAVE
212B 8DA6             (        basic.asm):00198                 BSR     lsname                            ; Get name
212D 3F38             (        basic.asm):00199                 FCB     $3F,56                            ; Open for write
212F 260F             (        basic.asm):00200                 BNE     save1                             ; Error - exit
2131 DF15             (        basic.asm):00201                 STU     file                              ; File pointer
2133 8E0000           (        basic.asm):00202                 LDX     #0                                ; Lowest line
2136 CEFFFF           (        basic.asm):00203                 LDU     #65535                            ; Highest line
2139 170425           (        basic.asm):00204                 LBSR    V_LIST1                           ; Write the file
213C DE15             (        basic.asm):00205                 LDU     file                              ; Get FCB
213E 3F39             (        basic.asm):00206                 FCB     $3F,57                            ; Close
2140                  (        basic.asm):00207         save1
2140 32E9020A         (        basic.asm):00208                 LEAS    522,S                             ; Clean stack
2144 39               (        basic.asm):00209                 RTS
                      (        basic.asm):00210         ; Translate SA1 to upper case for Cubix filenames
2145                  (        basic.asm):00211         ucsa1
2145 3420             (        basic.asm):00212                 PSHS    Y                                 ; Save pointer
2147                  (        basic.asm):00213         ucsa2
2147 170579           (        basic.asm):00214                 LBSR    getuc                             ; Get char
214A 2704             (        basic.asm):00215                 BEQ     ucsa3                             ; End
214C A73F             (        basic.asm):00216                 STA     -1,Y                              ; Set to upper
214E 20F7             (        basic.asm):00217                 BRA     ucsa2                             ; Continue
2150                  (        basic.asm):00218         ucsa3
2150 35A0             (        basic.asm):00219                 PULS    Y,PC                              ; Restore & return
                      (        basic.asm):00220         ;
                      (        basic.asm):00221         ; Get file specification
                      (        basic.asm):00222         ;
2152                  (        basic.asm):00223         getfil:
2152 8623             (        basic.asm):00224                 LDA     #'#'                              ; Indiciator
2154 17054A           (        basic.asm):00225                 LBSR    expect                            ; Expect it
2157                  (        basic.asm):00226         getf1:
2157 170863           (        basic.asm):00227                 LBSR    evalnum                           ; Get number
215A 10830009         (        basic.asm):00228                 CMPD    #9                                ; Are we over
215E 10220547         (        basic.asm):00229                 LBHI    synerr                            ; Report error
2162 58               (        basic.asm):00230                 LSLB                                      ; x2
2163 8E3017           (        basic.asm):00231                 LDX     #files                            ; Get file
2166 3A               (        basic.asm):00232                 ABX                                       ; X = handle address
2167 3A               (        basic.asm):00233                 ABX                                       ; x2
2168 EE84             (        basic.asm):00234                 LDU     ,X                                ; Get handle
216A 39               (        basic.asm):00235                 RTS
                      (        basic.asm):00236         ;
                      (        basic.asm):00237         ; Open a file for read/write
                      (        basic.asm):00238         ;
216B                  (        basic.asm):00239         V_OPEN
216B 8DE5             (        basic.asm):00240                 BSR     getfil                            ; Get file number
216D 2654             (        basic.asm):00241                 BNE     fooerr                            ; Already open
216F 9F0E             (        basic.asm):00242                 STX     temp1                             ; Save handle pointer
2171 17052B           (        basic.asm):00243                 LBSR    expectc                           ; ',' required
2174 170851           (        basic.asm):00244                 LBSR    evalchr                           ; Get filename
2177 DC8F             (        basic.asm):00245                 LDD     sa1                               ; Get name
2179 802A             (        basic.asm):00246                 SUBA    #'*'                              ; Device name?
217B 273B             (        basic.asm):00247                 BEQ     opend                             ; Open device
217D CC020A           (        basic.asm):00248                 LDD     #522                              ; File control block
2180 170651           (        basic.asm):00249                 LBSR    malloc                            ; Get memory
2183 1F03             (        basic.asm):00250                 TFR     D,U                               ; U = handle
2185 170517           (        basic.asm):00251                 LBSR    expectc                           ; ',' required
2188 1704F6           (        basic.asm):00252                 LBSR    GET_NEXT                          ; Get next data
218B 3422             (        basic.asm):00253                 PSHS    A,Y                               ; Save Y
218D 108E308F         (        basic.asm):00254                 LDY     #sa1                              ; Point to filename
2191 8DB2             (        basic.asm):00255                 BSR     ucsa1                             ; Convert to upper
2193 3F0A             (        basic.asm):00256                 FCB     $3F,10                            ; Get DOS filename
2195 260E             (        basic.asm):00257                 BNE     openf                             ; Open failed
2197 3522             (        basic.asm):00258                 PULS    A,Y                               ; Restore
2199 8157             (        basic.asm):00259                 CMPA    #'W'                              ; Open for write
219B 2712             (        basic.asm):00260                 BEQ     openw                             ; Open for write
219D 8152             (        basic.asm):00261                 CMPA    #'R'                              ; Open for read
219F 2604             (        basic.asm):00262                 BNE     openf                             ; Report error
21A1 3F37             (        basic.asm):00263                 FCB     $3F,55                            ; Open for read
21A3 270E             (        basic.asm):00264                 BEQ     openok                            ; Opened OK
21A5                  (        basic.asm):00265         openf:
21A5 1F31             (        basic.asm):00266                 TFR     U,X                               ; X = buffer address
21A7 17068E           (        basic.asm):00267                 LBSR    free                              ; Release it
21AA                  (        basic.asm):00268         fnoerr:
21AA 860A             (        basic.asm):00269                 LDA     #ERRfno                           ; File not open
21AC 16046F           (        basic.asm):00270                 LBRA    error                             ; Report error
21AF                  (        basic.asm):00271         openw
21AF 3F38             (        basic.asm):00272                 FCB     $3F,56                            ; Open for write
21B1 26F2             (        basic.asm):00273                 BNE     openf                             ; Failed
21B3                  (        basic.asm):00274         openok:
21B3 9E0E             (        basic.asm):00275                 LDX     temp1                             ; Get handle address
21B5 EF84             (        basic.asm):00276                 STU     ,X                                ; Write it
21B7 39               (        basic.asm):00277                 RTS
21B8                  (        basic.asm):00278         opend:
21B8 C030             (        basic.asm):00279                 SUBB    #'0'                              ; Convert to binary
21BA C107             (        basic.asm):00280                 CMPB    #7                                ; In range?
21BC 22EC             (        basic.asm):00281                 BHI     fnoerr                            ; Fail
21BE 5C               (        basic.asm):00282                 INCB                                      ; +1
21BF 1F03             (        basic.asm):00283                 TFR     D,U                               ; U = value
21C1 20F0             (        basic.asm):00284                 BRA     openok                            ; Save new pointer
                      (        basic.asm):00285         ;
21C3                  (        basic.asm):00286         fooerr:
21C3 860B             (        basic.asm):00287                 LDA     #ERRfoo                           ; File already open
21C5 160456           (        basic.asm):00288                 LBRA    error                             ; Report error
                      (        basic.asm):00289         ;
                      (        basic.asm):00290         ; Close an open file
                      (        basic.asm):00291         ;
21C8                  (        basic.asm):00292         _CLOSE
21C8 8D88             (        basic.asm):00293                 BSR     getfil                            ; Get filename
21CA 27DE             (        basic.asm):00294                 BEQ     fnoerr                            ; Get name
21CC 11830008         (        basic.asm):00295                 CMPU    #8                                ; 1-8 = Device
21D0 2309             (        basic.asm):00296                 BLS     close1                            ; Device - no need to clear
21D2 3F39             (        basic.asm):00297                 FCB     $3F,57                            ; Close file
21D4 1E13             (        basic.asm):00298                 EXG     X,U                               ; X = pointer
21D6 17065F           (        basic.asm):00299                 LBSR    free                              ; Release buffer
21D9 1E13             (        basic.asm):00300                 EXG     X,U                               ; X = handle address
21DB                  (        basic.asm):00301         close1:
21DB 6F84             (        basic.asm):00302                 CLR     ,X                                ; Zero handle
21DD 6F01             (        basic.asm):00303                 CLR     1,X                               ; Zero handle
21DF 39               (        basic.asm):00304                 RTS
                      (        basic.asm):00305         
                      (        basic.asm):00306         ;
                      (        basic.asm):00307         ; POKE command
                      (        basic.asm):00308         ;
21E0                  (        basic.asm):00309         V_POKE
21E0 170524           (        basic.asm):00310                 LBSR    getnum                            ; Get value
21E3 1F03             (        basic.asm):00311                 TFR     D,U                               ; U = value
21E5 1704B7           (        basic.asm):00312                 LBSR    expectc                           ; Expect it
21E8 17051C           (        basic.asm):00313                 LBSR    getnum                            ; Get next value
21EB E7C4             (        basic.asm):00314                 STB     ,U                                ; Write it
21ED 39               (        basic.asm):00315                 RTS
                      (        basic.asm):00316         ;
                      (        basic.asm):00317         ; IF statements
                      (        basic.asm):00318         ;
21EE                  (        basic.asm):00319         V_IF:
21EE 170797           (        basic.asm):00320                 LBSR    pgm                               ; Program only
21F1 1707C9           (        basic.asm):00321                 LBSR    evalnum                           ; Get expression
21F4 1F01             (        basic.asm):00322                 TFR     D,X                               ; X = result
21F6 869E             (        basic.asm):00323                 LDA     #THEN|128                         ; 'THEN'
21F8 1704A6           (        basic.asm):00324                 LBSR    expect                            ; Expect it
21FB 8C0000           (        basic.asm):00325                 CMPX    #0                                ; Execute
21FE 10270400         (        basic.asm):00326                 LBEQ    skpstmt                           ; No
2202                  (        basic.asm):00327         V_IF1:
2202 170470           (        basic.asm):00328                 LBSR    skip                              ; Skip to next
2205 1704A9           (        basic.asm):00329                 LBSR    isdigit                           ; Is it a number?
2208 102703CA         (        basic.asm):00330                 LBEQ    V_GOTO1                           ; Yes, handle it
220C 3262             (        basic.asm):00331                 LEAS    2,S                               ; Clean stack
220E 16018F           (        basic.asm):00332                 LBRA    V_RUN4
2211                  (        basic.asm):00333         V_LIF:
2211 170774           (        basic.asm):00334                 LBSR    pgm                               ; Program only
2214 1707A6           (        basic.asm):00335                 LBSR    evalnum                           ; Get expression
2217 1F01             (        basic.asm):00336                 TFR     D,X                               ; X = resuly
2219 869E             (        basic.asm):00337                 LDA     #THEN|128                         ; 'THEN'
221B 170483           (        basic.asm):00338                 LBSR    expect                            ; Expect it
221E 8C0000           (        basic.asm):00339                 CMPX    #0                                ; Execute
2221 26DF             (        basic.asm):00340                 BNE     V_IF1                             ; Yes
2223 1601A5           (        basic.asm):00341                 LBRA    V_REM1                            ; No
                      (        basic.asm):00342         ;
                      (        basic.asm):00343         ; Input request
                      (        basic.asm):00344         ;
2226                  (        basic.asm):00345         V_INPUT:
2226 8623             (        basic.asm):00346                 LDA     #'#'                              ; File spec?
2228 170463           (        basic.asm):00347                 LBSR    testV_NEXT                        ; Is there one?
222B 260B             (        basic.asm):00348                 BNE     inp1                              ; No, handle normally
222D 17FF27           (        basic.asm):00349                 LBSR    getf1                             ; Get the handle
2230 1027FF76         (        basic.asm):00350                 LBEQ    fnoerr                            ; Not open
2234 DF15             (        basic.asm):00351                 STU     file                              ; Set input file
2236 2011             (        basic.asm):00352                 BRA     inp2                              ; And continue
2238                  (        basic.asm):00353         inp1:
2238 CC003F           (        basic.asm):00354                 LDD     #'? '                             ; Default prompt
223B DD8F             (        basic.asm):00355                 STD     sa1                               ; Save
223D 0F91             (        basic.asm):00356                 CLR     sa1+2                             ; Zero terminate
223F 170433           (        basic.asm):00357                 LBSR    skip                              ; Advance
2242 8122             (        basic.asm):00358                 CMPA    #$22                              ; Character? '"'
2244 2606             (        basic.asm):00359                 BNE     V_INPUT1                          ; No prompt
2246 170786           (        basic.asm):00360                 LBSR    EVAL                              ; Get prompt
2249                  (        basic.asm):00361         inp2:
2249 170453           (        basic.asm):00362                 LBSR    expectc                           ; Expect it
224C                  (        basic.asm):00363         V_INPUT1
224C 1706C5           (        basic.asm):00364                 LBSR    getvar                            ; Get input variable
224F 4F               (        basic.asm):00365                 CLRA                                      ; Zero flag
2250 3432             (        basic.asm):00366                 PSHS    A,X,Y                             ; Save address & cmdptr
2252                  (        basic.asm):00367         V_INPUT0
2252 DC15             (        basic.asm):00368                 LDD     file                              ; File output
2254 2606             (        basic.asm):00369                 BNE     inp3                              ; Don't prompt
2256 8E308F           (        basic.asm):00370                 LDX     #sa1
2259 170B3C           (        basic.asm):00371                 LBSR    puts                              ; Display it
225C                  (        basic.asm):00372         inp3:
225C 108E30F3         (        basic.asm):00373                 LDY     #sa2                              ; Point to accumulator2
2260 170B41           (        basic.asm):00374                 LBSR    gets                              ; Get input
2263 0D11             (        basic.asm):00375                 TST     expr_type                         ; Get expression type
2265 2725             (        basic.asm):00376                 BEQ     V_INPUT4                          ; Not character
                      (        basic.asm):00377         ; Character input
2267 AE61             (        basic.asm):00378                 LDX     1,S                               ; Get address
2269 AE8931BB         (        basic.asm):00379                 LDX     char_vars,X                       ; Get pointer
226D 2703             (        basic.asm):00380                 BEQ     V_INPUT2                          ; Not already defined
226F 1705C6           (        basic.asm):00381                 LBSR    free                              ; Release it
2272                  (        basic.asm):00382         V_INPUT2
2272 8E30F3           (        basic.asm):00383                 LDX     #sa2                              ; Point to buffer
2275 170266           (        basic.asm):00384                 LBSR    strlen                            ; Get length
2278 170559           (        basic.asm):00385                 LBSR    malloc                            ; Allocate memory
227B EE61             (        basic.asm):00386                 LDU     1,S                               ; Get address
227D EDC931BB         (        basic.asm):00387                 STD     char_vars,U                       ; Save new address
2281 CE30F3           (        basic.asm):00388                 LDU     #sa2                              ; Point to buffer
2284                  (        basic.asm):00389         V_INPUT3
2284 A6C0             (        basic.asm):00390                 LDA     ,U+                               ; Get from source
2286 A780             (        basic.asm):00391                 STA     ,X+                               ; Save in dest
2288 26FA             (        basic.asm):00392                 BNE     V_INPUT3                          ; Do them all
228A 35B2             (        basic.asm):00393                 PULS    A,X,Y,PC                          ; Restore * return
                      (        basic.asm):00394         ; Numeric input
228C                  (        basic.asm):00395         V_INPUT4
228C 862D             (        basic.asm):00396                 LDA     #'-'                              ; Negative?
228E 1703FD           (        basic.asm):00397                 LBSR    testV_NEXT                        ; Is this it?
2291 2602             (        basic.asm):00398                 BNE     V_INPUT5                          ; Not negative
2293 6AE4             (        basic.asm):00399                 DEC     ,S                                ; Set flag
2295                  (        basic.asm):00400         V_INPUT5
2295 3420             (        basic.asm):00401                 PSHS    Y                                 ; Save pointer
2297 17046D           (        basic.asm):00402                 LBSR    getnum                            ; Get number
229A 10ACE1           (        basic.asm):00403                 CMPY    ,S++                              ; Did it move?
229D 261A             (        basic.asm):00404                 BNE     V_INPUT6                          ; Accepted
229F 170AEC           (        basic.asm):00405                 LBSR    putm                              ; Output message
22A2 496E707574206572 (        basic.asm):00406                 FCN     'Input error'
     726F7200
22AE DC15             (        basic.asm):00407                 LDD     file                              ; From file
22B0 10260388         (        basic.asm):00408                 LBNE    err3                              ; Abort
22B4 170B23           (        basic.asm):00409                 LBSR    lfcr                              ; New line
22B7 2099             (        basic.asm):00410                 BRA     V_INPUT0                          ; Reprompt
22B9                  (        basic.asm):00411         V_INPUT6
22B9 6DE0             (        basic.asm):00412                 TST     ,S+                               ; Negate?
22BB 2705             (        basic.asm):00413                 BEQ     V_INPUT7                          ; It's OK
22BD 43               (        basic.asm):00414                 COMA
22BE 53               (        basic.asm):00415                 COMB
22BF C30001           (        basic.asm):00416                 ADDD    #1
22C2                  (        basic.asm):00417         V_INPUT7
22C2 3530             (        basic.asm):00418                 PULS    X,Y                               ; Restore X & Y
22C4 3406             (        basic.asm):00419                 PSHS    A,B                               ; Save D
22C6 170688           (        basic.asm):00420                 LBSR    addr1                             ; Compute address
22C9 3506             (        basic.asm):00421                 PULS    A,B
22CB ED84             (        basic.asm):00422                 STD     ,X                                ; Save
22CD 39               (        basic.asm):00423                 RTS
                      (        basic.asm):00424         ;
                      (        basic.asm):00425         ; ORDER statement
                      (        basic.asm):00426         ;
22CE                  (        basic.asm):00427         V_ORDER:
22CE 1706EC           (        basic.asm):00428                 LBSR    evalnum                           ; Get value
22D1 17062E           (        basic.asm):00429                 LBSR    findl                             ; Locate line
22D4 9F04             (        basic.asm):00430                 STX     readptr                           ; Save read pointer
22D6 3420             (        basic.asm):00431                 PSHS    Y                                 ; Save Y
22D8 3104             (        basic.asm):00432                 LEAY    4,X                               ; Y = text portion
22DA 1703A4           (        basic.asm):00433                 LBSR    GET_NEXT                          ; Get token
22DD 8196             (        basic.asm):00434                 CMPA    #DATA|128                         ; Is it a DATA statement?
22DF 2605             (        basic.asm):00435                 BNE     daterr                            ; No, report error
22E1 109F06           (        basic.asm):00436                 STY     dataptr                           ; Save data pointer
22E4 35A0             (        basic.asm):00437                 PULS    Y,PC                              ; Restore and return
22E6                  (        basic.asm):00438         daterr:
22E6 8608             (        basic.asm):00439                 LDA     #ERRdat                           ; 'Data'
22E8 160333           (        basic.asm):00440                 LBRA    error                             ; Report error
                      (        basic.asm):00441         ;
                      (        basic.asm):00442         ; READ statement
                      (        basic.asm):00443         ;
22EB                  (        basic.asm):00444         V_READ:
22EB 17065A           (        basic.asm):00445                 LBSR    address                           ; Get variable address
22EE 9611             (        basic.asm):00446                 LDA     expr_type                         ; Get expression type
22F0 DE08             (        basic.asm):00447                 LDU     line                              ; Get line number
22F2 3432             (        basic.asm):00448                 PSHS    A,X,Y                             ; Save type, address, cmdptr, line
22F4 109E06           (        basic.asm):00449                 LDY     dataptr                           ; Get data pointer
22F7 9E04             (        basic.asm):00450                 LDX     readptr                           ; Get read pointer
22F9 27EB             (        basic.asm):00451                 BEQ     daterr                            ; No data
22FB 170377           (        basic.asm):00452                 LBSR    skip                              ; Advance
22FE 260F             (        basic.asm):00453                 BNE     V_READ1                           ; Not end of line
2300 AE02             (        basic.asm):00454                 LDX     2,X                               ; Get new read pointer
2302 27E2             (        basic.asm):00455                 BEQ     daterr                            ; No data
2304 9F04             (        basic.asm):00456                 STX     readptr                           ; Save new read pointer
2306 3104             (        basic.asm):00457                 LEAY    4,X                               ; New cmdptr
2308 170376           (        basic.asm):00458                 LBSR    GET_NEXT                          ; Get token
230B 8196             (        basic.asm):00459                 CMPA    #DATA|128                         ; 'DATA'?
230D 26D7             (        basic.asm):00460                 BNE     daterr                            ; Report error
230F                  (        basic.asm):00461         V_READ1
230F EC84             (        basic.asm):00462                 LDD     ,X                                ; Get line number
2311 DD08             (        basic.asm):00463                 STD     line                              ; Set new line number
2313 1706B9           (        basic.asm):00464                 LBSR    EVAL                              ; Evaluate
2316 1F03             (        basic.asm):00465                 TFR     D,U                               ; U = result
2318 170371           (        basic.asm):00466                 LBSR    tnc                               ; Remove ','
231B 109F06           (        basic.asm):00467                 STY     dataptr                           ; Save new data pointer
231E 3532             (        basic.asm):00468                 PULS    A,X,Y                             ; Restore
2320 9111             (        basic.asm):00469                 CMPA    expr_type                         ; Does it match?
2322 4D               (        basic.asm):00470                 TSTA                                      ; Character?
2323 2604             (        basic.asm):00471                 BNE     V_READ2                           ; Yes, handle it
2325 EF84             (        basic.asm):00472                 STU     ,X                                ; Save new value
2327 2025             (        basic.asm):00473                 BRA     V_READ5                           ; And try for next
2329                  (        basic.asm):00474         V_READ2
2329 1F13             (        basic.asm):00475                 TFR     X,U                               ; U = variable address
232B AEC4             (        basic.asm):00476                 LDX     ,U                                ; Get address
232D 2607             (        basic.asm):00477                 BNE     V_READ3                           ; Not existing
232F 170506           (        basic.asm):00478                 LBSR    free                              ; Release memory
2332 6FC4             (        basic.asm):00479                 CLR     ,U                                ; Zero it
2334 6F41             (        basic.asm):00480                 CLR     1,U                               ; Zero it
2336                  (        basic.asm):00481         V_READ3
2336 8E308F           (        basic.asm):00482                 LDX     #sa1                              ; Point to sa
2339 6DE4             (        basic.asm):00483                 TST     ,S                                ; Value present?
233B 2711             (        basic.asm):00484                 BEQ     V_READ5                           ; No, leave it
233D 17019E           (        basic.asm):00485                 LBSR    strlen                            ; Get length
2340 170491           (        basic.asm):00486                 LBSR    malloc                            ; Allocate memory
2343 EDC4             (        basic.asm):00487                 STD     ,U                                ; Set new addresss
2345 CE308F           (        basic.asm):00488                 LDU     #sa1                              ; Point to acc
2348                  (        basic.asm):00489         V_READ4
2348 A6C0             (        basic.asm):00490                 LDA     ,U+                               ; Get from source
234A A780             (        basic.asm):00491                 STA     ,X+                               ; Write to dest
234C 26FA             (        basic.asm):00492                 BNE     V_READ4                           ; Do them all
234E                  (        basic.asm):00493         V_READ5
234E 17033B           (        basic.asm):00494                 LBSR    tnc                               ; More
2351 2798             (        basic.asm):00495                 BEQ     V_READ                            ; Keep going
2353 39               (        basic.asm):00496                 RTS
                      (        basic.asm):00497         ;
                      (        basic.asm):00498         ; Stop execution
                      (        basic.asm):00499         ;
2354                  (        basic.asm):00500         V_STOP:
2354 170631           (        basic.asm):00501                 LBSR    pgm                               ; Program only
2357 170A34           (        basic.asm):00502                 LBSR    putm                              ; Output message
235A 53544F5000       (        basic.asm):00503                 FCN     'STOP'
235F 1602DA           (        basic.asm):00504                 LBRA    err3                              ; And exit
2362                  (        basic.asm):00505         V_END:
2362 170623           (        basic.asm):00506                 LBSR    pgm                               ; Program only
2365 16FCCC           (        basic.asm):00507                 LBRA    top                               ; Exit
2368                  (        basic.asm):00508         break:
2368 170A23           (        basic.asm):00509                 LBSR    putm                              ; Output message
236B 5E4300           (        basic.asm):00510                 FCN     '^C'
236E 1602CB           (        basic.asm):00511                 LBRA    err3                              ; And proceed
                      (        basic.asm):00512         ;
                      (        basic.asm):00513         ; Execute program
                      (        basic.asm):00514         ;
2371                  (        basic.asm):00515         V_RUN
2371 17060B           (        basic.asm):00516                 LBSR    direct                            ; Direct only
2374 17061A           (        basic.asm):00517                 LBSR    V_CLEAR                           ; Clear variables
2377 9E00             (        basic.asm):00518                 LDX     pgm_start                         ; Assume start of program
2379 1702F9           (        basic.asm):00519                 LBSR    skip                              ; Advance
237C 1702D9           (        basic.asm):00520                 LBSR    is_eV_END                         ; End of expression?
237F 2706             (        basic.asm):00521                 BEQ     run1                              ; Yes
2381 170639           (        basic.asm):00522                 LBSR    evalnum                           ; Get number
2384 17057B           (        basic.asm):00523                 LBSR    findl                             ; Locate number
2387                  (        basic.asm):00524         run1:
2387 0A13             (        basic.asm):00525                 DEC     mode                              ; Indicate running
2389                  (        basic.asm):00526         V_RUN2
2389 9F02             (        basic.asm):00527                 STX     runptr                            ; Set run line
238B 9E02             (        basic.asm):00528                 LDX     runptr                            ; Get run pointer
238D 2732             (        basic.asm):00529                 BEQ     V_RUN7                            ; Program has ended
238F 170A96           (        basic.asm):00530                 LBSR    testc                             ; Test for character
2392 2706             (        basic.asm):00531                 BEQ     V_RUN3                            ; No data
2394 8103             (        basic.asm):00532                 CMPA    #'C'-$40                          ; Control-C
2396 27D0             (        basic.asm):00533                 BEQ     break                             ; Terminate
2398 9714             (        basic.asm):00534                 STA     keypress                          ; Save for later
239A                  (        basic.asm):00535         V_RUN3
239A EC84             (        basic.asm):00536                 LDD     ,X                                ; Get line number
239C DD08             (        basic.asm):00537                 STD     line                              ; Save new line number
239E 3104             (        basic.asm):00538                 LEAY    4,X                               ; Y = line text
23A0                  (        basic.asm):00539         V_RUN4
23A0 1702D2           (        basic.asm):00540                 LBSR    skip                              ; Advance
23A3 4D               (        basic.asm):00541                 TSTA                                      ; Special case?
23A4 2B04             (        basic.asm):00542                 BMI     V_RUN5                            ; Yes, assume LET
23A6 8601             (        basic.asm):00543                 LDA     #LET                              ; Assume LET
23A8 2002             (        basic.asm):00544                 BRA     V_RUN6                            ; And proceed
23AA                  (        basic.asm):00545         V_RUN5
23AA 3121             (        basic.asm):00546                 LEAY    1,Y                               ; Skip command
23AC                  (        basic.asm):00547         V_RUN6
23AC 17FCBB           (        basic.asm):00548                 LBSR    execute                           ; Execute command
23AF 1702CF           (        basic.asm):00549                 LBSR    GET_NEXT                          ; Get next char
23B2 813A             (        basic.asm):00550                 CMPA    #':'                              ; Another statement
23B4 27EA             (        basic.asm):00551                 BEQ     V_RUN4                            ; Do it
23B6 4D               (        basic.asm):00552                 TSTA                                      ; End of line
23B7 102602EE         (        basic.asm):00553                 LBNE    synerr                            ; Report error
23BB 9E02             (        basic.asm):00554                 LDX     runptr                            ; Get line pointer
23BD AE02             (        basic.asm):00555                 LDX     2,X                               ; Get link
23BF 26C8             (        basic.asm):00556                 BNE     V_RUN2                            ; And proceed
23C1                  (        basic.asm):00557         V_RUN7
23C1 0F13             (        basic.asm):00558                 CLR     mode
23C3                  (        basic.asm):00559         V_RUN8
23C3 39               (        basic.asm):00560                 RTS
                      (        basic.asm):00561         ;
                      (        basic.asm):00562         ; Remark
                      (        basic.asm):00563         
23C4                  (        basic.asm):00564         V_DATA:
23C4 1705C1           (        basic.asm):00565                 LBSR    pgm                               ; Program only
23C7                  (        basic.asm):00566         V_REM:
23C7 0D13             (        basic.asm):00567                 TST     mode                              ; Running?
23C9 27F8             (        basic.asm):00568                 BEQ     V_RUN8                            ; No action
23CB                  (        basic.asm):00569         V_REM1:
23CB 9E02             (        basic.asm):00570                 LDX     runptr                            ; Get run pointer
23CD AE02             (        basic.asm):00571                 LDX     2,X                               ; Get link
23CF 3262             (        basic.asm):00572                 LEAS    2,S                               ; Clean stack
23D1 20B6             (        basic.asm):00573                 BRA     V_RUN2                            ; And continue
                      (        basic.asm):00574         ;
                      (        basic.asm):00575         ; For statement
                      (        basic.asm):00576         ;
23D3                  (        basic.asm):00577         V_FOR:
23D3 1705B2           (        basic.asm):00578                 LBSR    pgm                               ; Program only
23D6 17056F           (        basic.asm):00579                 LBSR    address                           ; Get variable address
23D9 1705E3           (        basic.asm):00580                 LBSR    chknum                            ; Insure numeric
23DC D610             (        basic.asm):00581                 LDB     ctl_ptr                           ; Get control pointer
23DE CE3157           (        basic.asm):00582                 LDU     #ctl_stk                          ; Point at stack
23E1 33C5             (        basic.asm):00583                 LEAU    B,U                               ; U = ctrl-stack
23E3 33C5             (        basic.asm):00584                 LEAU    B,U                               ; x2
23E5 CB06             (        basic.asm):00585                 ADDB    #6                                ; ++6
23E7 D710             (        basic.asm):00586                 STB     ctl_ptr                           ; Resave pointer
23E9 AF48             (        basic.asm):00587                 STX     8,U                               ; Save variable address
23EB 86A7             (        basic.asm):00588                 LDA     #EQ|128                           ; '='
23ED 1702B1           (        basic.asm):00589                 LBSR    expect                            ; Expect it
23F0 1705CA           (        basic.asm):00590                 LBSR    evalnum                           ; Evaluate expression
23F3 EDD808           (        basic.asm):00591                 STD     [8,U]                             ; Set variable
23F6 869C             (        basic.asm):00592                 LDA     #TO|128                           ; 'TO'
23F8 1702A6           (        basic.asm):00593                 LBSR    expect                            ; Expect it
23FB 1705BF           (        basic.asm):00594                 LBSR    evalnum                           ; Get final
23FE ED46             (        basic.asm):00595                 STD     6,U                               ; Set limit
2400 CC0001           (        basic.asm):00596                 LDD     #1                                ; Assume step=1
2403 ED44             (        basic.asm):00597                 STD     4,U                               ; Set step
2405 869D             (        basic.asm):00598                 LDA     #STEP|128                         ; 'STEP'
2407 170284           (        basic.asm):00599                 LBSR    testV_NEXT                        ; Does it occur?
240A 2605             (        basic.asm):00600                 BNE     V_FOR1                            ; No
240C 1705AE           (        basic.asm):00601                 LBSR    evalnum                           ; Get number
240F ED44             (        basic.asm):00602                 STD     4,U                               ; Set new step value
2411                  (        basic.asm):00603         V_FOR1
2411 DC02             (        basic.asm):00604                 LDD     runptr                            ; Get run pointer
2413 EDC4             (        basic.asm):00605                 STD     ,U                                ; Save runptr
2415 10AF42           (        basic.asm):00606                 STY     2,U                               ; save cmdptr
2418 CC1000           (        basic.asm):00607                 LDD     #FORindicator                     ; FOR indicator
241B ED4A             (        basic.asm):00608                 STD     10,U                              ; Save
241D 39               (        basic.asm):00609                 RTS
                      (        basic.asm):00610         ;
                      (        basic.asm):00611         ; NEXT statement
                      (        basic.asm):00612         ;
241E                  (        basic.asm):00613         V_NEXT:
241E 170567           (        basic.asm):00614                 LBSR    pgm                               ; Program only
2421 D610             (        basic.asm):00615                 LDB     ctl_ptr                           ; Get control pointer
2423 C006             (        basic.asm):00616                 SUBB    #6                                ; Backup
2425 58               (        basic.asm):00617                 LSLB                                      ; x2
2426 CE3157           (        basic.asm):00618                 LDU     #ctl_stk                          ; Point to stack
2429 33C5             (        basic.asm):00619                 LEAU    B,U                               ; Offset to entry
242B EC4A             (        basic.asm):00620                 LDD     10,U                              ; Get indicator
242D 10831000         (        basic.asm):00621                 CMPD    #FORindicator                     ; FOR loop?
2431 102601E7         (        basic.asm):00622                 LBNE    nsterr                            ; Report error
2435 17023D           (        basic.asm):00623                 LBSR    skip                              ; Advance
2438 17022D           (        basic.asm):00624                 LBSR    is_lV_END                         ; End of statement
243B 2709             (        basic.asm):00625                 BEQ     V_NEXT1                           ; No variable specified
243D 170508           (        basic.asm):00626                 LBSR    address                           ; Get variable address
2440 AC48             (        basic.asm):00627                 CMPX    8,U                               ; Does it match?
2442 102601D6         (        basic.asm):00628                 LBNE    nsterr                            ; No - error
2446                  (        basic.asm):00629         V_NEXT1
2446 AE48             (        basic.asm):00630                 LDX     8,U                               ; Get address
2448 EC84             (        basic.asm):00631                 LDD     ,X                                ; Get variable
244A E344             (        basic.asm):00632                 ADDD    4,U                               ; Advance by step
244C ED84             (        basic.asm):00633                 STD     ,X                                ; Resave
244E 6D44             (        basic.asm):00634                 TST     4,U                               ; Negative step?
2450 2B11             (        basic.asm):00635                 BMI     V_NEXT3                           ; Yes, handle it
2452 10A346           (        basic.asm):00636                 CMPD    6,U                               ; Are we over limit
2455 2E11             (        basic.asm):00637                 BGT     V_NEXT4                           ; Yes, stop
2457                  (        basic.asm):00638         V_NEXT2
2457 AEC4             (        basic.asm):00639                 LDX     ,U                                ; Get run ptr
2459 9F02             (        basic.asm):00640                 STX     runptr                            ; Set new run pointer
245B EC84             (        basic.asm):00641                 LDD     ,X                                ; Get line number
245D DD08             (        basic.asm):00642                 STD     line                              ; Set new line number
245F 10AE42           (        basic.asm):00643                 LDY     2,U                               ; Get cmdptr
2462 39               (        basic.asm):00644                 RTS
2463                  (        basic.asm):00645         V_NEXT3
2463 10A346           (        basic.asm):00646                 CMPD    6,U                               ; Are we under limit
2466 2CEF             (        basic.asm):00647                 BGE     V_NEXT2                           ; No, keep going
2468                  (        basic.asm):00648         V_NEXT4
2468 D610             (        basic.asm):00649                 LDB     ctl_ptr                           ; Get pointer
246A C006             (        basic.asm):00650                 SUBB    #6                                ; Backup
246C D710             (        basic.asm):00651                 STB     ctl_ptr                           ; Resave
246E 39               (        basic.asm):00652                 RTS
                      (        basic.asm):00653         ;
                      (        basic.asm):00654         ; Dimension a variable
                      (        basic.asm):00655         ;
246F                  (        basic.asm):00656         V_DIM
246F 1704A2           (        basic.asm):00657                 LBSR    getvar                            ; Get variable
2472 1F13             (        basic.asm):00658                 TFR     X,U                               ; U = address
2474 AEC935CB         (        basic.asm):00659                 LDX     dim_vars,U                        ; Get existing
2478 2703             (        basic.asm):00660                 BEQ     V_DIM1                            ; Not existing
247A 1703BB           (        basic.asm):00661                 LBSR    free                              ; Release it
247D                  (        basic.asm):00662         V_DIM1
247D 17053D           (        basic.asm):00663                 LBSR    evalnum                           ; Get number
2480 C30001           (        basic.asm):00664                 ADDD    #1                                ; Adjust
2483 EDC937D3         (        basic.asm):00665                 STD     dim_check,U                       ; Save size
2487 58               (        basic.asm):00666                 LSLB                                      ; x2
2488 49               (        basic.asm):00667                 ROLA                                      ; x2
2489 170348           (        basic.asm):00668                 LBSR    malloc                            ; Allocate the memory
248C EDC935CB         (        basic.asm):00669                 STD     dim_vars,U                        ; Save address
2490 1701F9           (        basic.asm):00670                 LBSR    tnc                               ; More?
2493 27DA             (        basic.asm):00671                 BEQ     V_DIM                             ; Yes, process
2495 39               (        basic.asm):00672                 RTS
                      (        basic.asm):00673         ;
                      (        basic.asm):00674         ; Assign value to variable
                      (        basic.asm):00675         ;
2496                  (        basic.asm):00676         V_let
2496 1704AF           (        basic.asm):00677                 LBSR    address                           ; Get variable address
2499 9611             (        basic.asm):00678                 LDA     expr_type                         ; Get expression type
249B 3402             (        basic.asm):00679                 PSHS    A                                 ; Save for later
249D 86A7             (        basic.asm):00680                 LDA     #EQ|128                           ; Assignment
249F 1701FF           (        basic.asm):00681                 LBSR    expect                            ; Expect it
24A2 17052A           (        basic.asm):00682                 LBSR    EVAL                              ; Evaluate
24A5 0D11             (        basic.asm):00683                 TST     expr_type                         ; Numeric?
24A7 2609             (        basic.asm):00684                 BNE     V_let1                            ; No, do char
24A9 6DE0             (        basic.asm):00685                 TST     ,S+                               ; Num var?
24AB 102601FA         (        basic.asm):00686                 LBNE    synerr                            ; No, error
24AF ED84             (        basic.asm):00687                 STD     ,X                                ; Write value
24B1 39               (        basic.asm):00688                 RTS
24B2                  (        basic.asm):00689         V_let1
24B2 6DE0             (        basic.asm):00690                 TST     ,S+                               ; Char var?
24B4 102701F1         (        basic.asm):00691                 LBEQ    synerr                            ; No, error
24B8 1F13             (        basic.asm):00692                 TFR     X,U                               ; U = pointer
24BA AE84             (        basic.asm):00693                 LDX     ,X                                ; Assigned
24BC 2603             (        basic.asm):00694                 BNE     V_let2                            ; No
24BE 170377           (        basic.asm):00695                 LBSR    free                              ; Release the memory
24C1                  (        basic.asm):00696         V_let2:
24C1 8E308F           (        basic.asm):00697                 LDX     #sa1                              ; Point to SA1
24C4 6D84             (        basic.asm):00698                 TST     ,X                                ; Non-0?
24C6 2605             (        basic.asm):00699                 BNE     V_let3                            ; Yes, handle it
24C8 4F               (        basic.asm):00700                 CLRA                                      ; Zero high
24C9 5F               (        basic.asm):00701                 CLRB                                      ; Zero low
24CA EDC4             (        basic.asm):00702                 STD     ,U                                ; Clear pointer
24CC 39               (        basic.asm):00703                 RTS
24CD                  (        basic.asm):00704         V_let3:
24CD 8D0F             (        basic.asm):00705                 BSR     strlen                            ; Get length of string
24CF 170302           (        basic.asm):00706                 LBSR    malloc                            ; Allocate storage
24D2 EDC4             (        basic.asm):00707                 STD     ,U                                ; U = variable pointer
24D4 CE308F           (        basic.asm):00708                 LDU     #sa1                              ; Point to string acc
24D7                  (        basic.asm):00709         V_let4:
24D7 A6C0             (        basic.asm):00710                 LDA     ,U+                               ; Get from source
24D9 A780             (        basic.asm):00711                 STA     ,X+                               ; Save in dest
24DB 26FA             (        basic.asm):00712                 BNE     V_let4                            ; Do them all
24DD 39               (        basic.asm):00713                 RTS
                      (        basic.asm):00714         ; Get length of string(X)
24DE                  (        basic.asm):00715         strlen
24DE 3410             (        basic.asm):00716                 PSHS    X                                 ; Save start address
24E0                  (        basic.asm):00717         strl1
24E0 A680             (        basic.asm):00718                 LDA     ,X+                               ; Get char
24E2 26FC             (        basic.asm):00719                 BNE     strl1                             ; Find end
24E4 1F10             (        basic.asm):00720                 TFR     X,D                               ; D = end
24E6 AEE4             (        basic.asm):00721                 LDX     ,S                                ; Restore X
24E8 A3E1             (        basic.asm):00722                 SUBD    ,S++                              ; Compute length
24EA 39               (        basic.asm):00723                 RTS
                      (        basic.asm):00724         ;
                      (        basic.asm):00725         ; Print data
                      (        basic.asm):00726         ;
24EB                  (        basic.asm):00727         V_PRINT
24EB 6FE2             (        basic.asm):00728                 CLR     ,-S                               ; Zero flag
24ED 8D2E             (        basic.asm):00729                 BSR     chkfil                            ; Check for file output
24EF                  (        basic.asm):00730         V_pri1:
24EF 170183           (        basic.asm):00731                 LBSR    skip                              ; Next char
24F2 170173           (        basic.asm):00732                 LBSR    is_lV_END                         ; End of statement
24F5 2604             (        basic.asm):00733                 BNE     V_pri2                            ; No
24F7 6AE4             (        basic.asm):00734                 DEC     ,S                                ; Set flag
24F9 2016             (        basic.asm):00735                 BRA     V_pri4                            ; And continue
24FB                  (        basic.asm):00736         V_pri2
24FB 1704D1           (        basic.asm):00737                 LBSR    EVAL                              ; Evaluate expression
24FE 0D11             (        basic.asm):00738                 TST     expr_type                         ; Numeric?
2500 2609             (        basic.asm):00739                 BNE     V_pri3                            ; No, character
2502 CE308F           (        basic.asm):00740                 LDU     #sa1                              ; Accumulator1
2505 170702           (        basic.asm):00741                 LBSR    num2str                           ; Convert to string
2508 170895           (        basic.asm):00742                 LBSR    space                             ; Output space
250B                  (        basic.asm):00743         V_pri3
250B 8E308F           (        basic.asm):00744                 LDX     #sa1                              ; Point to sa1
250E 170887           (        basic.asm):00745                 LBSR    puts                              ; Output
2511                  (        basic.asm):00746         V_pri4
2511 170178           (        basic.asm):00747                 LBSR    tnc                               ; More?
2514 27D9             (        basic.asm):00748                 BEQ     V_pri1                            ; Yes, do another
2516 A6E0             (        basic.asm):00749                 LDA     ,S+                               ; Get marker
2518 102708BE         (        basic.asm):00750                 LBEQ    lfcr                              ; New line
251C 39               (        basic.asm):00751                 RTS
                      (        basic.asm):00752         ;
                      (        basic.asm):00753         ; Check for file output
                      (        basic.asm):00754         ;
251D                  (        basic.asm):00755         chkfil
251D 8623             (        basic.asm):00756                 LDA     #'#'                              ; Device id
251F 17016C           (        basic.asm):00757                 LBSR    testV_NEXT                        ; Device ID?
2522 260E             (        basic.asm):00758                 BNE     chkfi1                            ; No, nothing special
2524 17FC30           (        basic.asm):00759                 LBSR    getf1                             ; Get filename
2527 1027FC7F         (        basic.asm):00760                 LBEQ    fnoerr                            ; Not open
252B 862C             (        basic.asm):00761                 LDA     #','                              ; Comma
252D 170171           (        basic.asm):00762                 LBSR    expect                            ; Expect it
2530 DF15             (        basic.asm):00763                 STU     file                              ; Set output handle
2532                  (        basic.asm):00764         chkfi1:
2532 39               (        basic.asm):00765                 RTS
                      (        basic.asm):00766         ;
                      (        basic.asm):00767         ; List program
                      (        basic.asm):00768         ;
2533                  (        basic.asm):00769         V_LIST
2533 8DE8             (        basic.asm):00770                 BSR     chkfil                            ; Check for file
2535 17013D           (        basic.asm):00771                 LBSR    skip                              ; Get next
2538 8E0000           (        basic.asm):00772                 LDX     #0                                ; Low = 0
253B CEFFFF           (        basic.asm):00773                 LDU     #$FFFF                            ; High = top
253E 170170           (        basic.asm):00774                 LBSR    isdigit                           ; Line number?
2541 261E             (        basic.asm):00775                 BNE     V_LIST1                           ; No, assume these
2543 1701C1           (        basic.asm):00776                 LBSR    getnum                            ; Get number
2546 1F01             (        basic.asm):00777                 TFR     D,X                               ; Low = line
2548 170136           (        basic.asm):00778                 LBSR    GET_NEXT                          ; Get next char
254B 1F03             (        basic.asm):00779                 TFR     D,U                               ; U = same line
254D 812C             (        basic.asm):00780                 CMPA    #','                              ; Separator?
254F 2610             (        basic.asm):00781                 BNE     V_LIST1                           ; No, just this line
2551 170121           (        basic.asm):00782                 LBSR    skip                              ; Advance
2554 CEFFFF           (        basic.asm):00783                 LDU     #$FFFF                            ; Assume top again
2557 170157           (        basic.asm):00784                 LBSR    isdigit                           ; Ending line?
255A 2605             (        basic.asm):00785                 BNE     V_LIST1                           ; No, do it
255C 1701A8           (        basic.asm):00786                 LBSR    getnum                            ; Get ending line
255F 1F03             (        basic.asm):00787                 TFR     D,U                               ; U = ending line
                      (        basic.asm):00788         ; Display program from X to U
2561                  (        basic.asm):00789         V_LIST1
2561 3470             (        basic.asm):00790                 PSHS    X,Y,U                             ; Save values
2563 109E00           (        basic.asm):00791                 LDY     pgm_start                         ; Get address
2566 2752             (        basic.asm):00792                 BEQ     V_LIST10                          ; No program
2568                  (        basic.asm):00793         V_LIST2
2568 ECA4             (        basic.asm):00794                 LDD     ,Y                                ; Get line number
256A 10A3E4           (        basic.asm):00795                 CMPD    ,S                                ; < lowest
256D 2546             (        basic.asm):00796                 BLO     V_LIST9                           ; Don't display
256F 10A364           (        basic.asm):00797                 CMPD    4,S                               ; > Highest
2572 2241             (        basic.asm):00798                 BHI     V_LIST9                           ; Don't display
2574 170809           (        basic.asm):00799                 LBSR    putn                              ; Display number
2577 170826           (        basic.asm):00800                 LBSR    space                             ; Display
257A 3324             (        basic.asm):00801                 LEAU    4,Y                               ; Skip to text
257C                  (        basic.asm):00802         V_LIST3
257C A6C0             (        basic.asm):00803                 LDA     ,U+                               ; Get next char
257E 2A2B             (        basic.asm):00804                 BPL     V_LIST7                           ; Not special
2580 847F             (        basic.asm):00805                 ANDA    #$7F                              ; Get name
2582 1F89             (        basic.asm):00806                 TFR     A,B                               ; Copy
2584 8E2E30           (        basic.asm):00807                 LDX     #rwordz                           ; Point to reserved words
2587                  (        basic.asm):00808         V_LIST4
2587 6D80             (        basic.asm):00809                 TST     ,X+                               ; Get next
2589 26FC             (        basic.asm):00810                 BNE     V_LIST4                           ; Find end
258B 4A               (        basic.asm):00811                 DECA                                      ; Reduce
258C 26F9             (        basic.asm):00812                 BNE     V_LIST4                           ; Till we have it
258E                  (        basic.asm):00813         V_LIST5:
258E A680             (        basic.asm):00814                 LDA     ,X+                               ; Get char
2590 2705             (        basic.asm):00815                 BEQ     V_LIST6                           ; End
2592 17084B           (        basic.asm):00816                 LBSR    putc                              ; output
2595 20F7             (        basic.asm):00817                 BRA     V_LIST5                           ; Do them all
2597                  (        basic.asm):00818         V_LIST6:
2597 C11F             (        basic.asm):00819                 CMPB    #ADD                              ; Special case
2599 24E1             (        basic.asm):00820                 BHS     V_LIST3                           ; No
259B 170802           (        basic.asm):00821                 LBSR    space                             ; Extra output
259E C10F             (        basic.asm):00822                 CMPB    #REM                              ; Remark
25A0 26DA             (        basic.asm):00823                 BNE     V_LIST3                           ; No, continue
25A2                  (        basic.asm):00824         V_LIST6b
25A2 A6C0             (        basic.asm):00825                 LDA     ,U+                               ; Get char
25A4 270C             (        basic.asm):00826                 BEQ     V_LIST8                           ; End of line
25A6 170837           (        basic.asm):00827                 LBSR    putc                              ; Display
25A9 20F7             (        basic.asm):00828                 BRA     V_LIST6b                          ; Continue
25AB                  (        basic.asm):00829         V_LIST7
25AB 2705             (        basic.asm):00830                 BEQ     V_LIST8                           ; End of line
25AD 170830           (        basic.asm):00831                 LBSR    putc                              ; Output
25B0 20CA             (        basic.asm):00832                 BRA     V_LIST3                           ; And continue
25B2                  (        basic.asm):00833         V_LIST8
25B2 170825           (        basic.asm):00834                 LBSR    lfcr                              ; New line
25B5                  (        basic.asm):00835         V_LIST9
25B5 10AE22           (        basic.asm):00836                 LDY     2,Y                               ; Point to next
25B8 26AE             (        basic.asm):00837                 BNE     V_LIST2                           ; And proceed
25BA                  (        basic.asm):00838         V_LIST10
25BA 35F0             (        basic.asm):00839                 PULS    X,Y,U,PC                          ; Restore and return
                      (        basic.asm):00840         ;
                      (        basic.asm):00841         ; GOSUB
                      (        basic.asm):00842         ;
25BC                  (        basic.asm):00843         V_GOSUB
25BC D610             (        basic.asm):00844                 LDB     ctl_ptr                           ; Get stack pointer
25BE 8E3157           (        basic.asm):00845                 LDX     #ctl_stk                          ; Point to control stack
25C1 3A               (        basic.asm):00846                 ABX                                       ; Adjust
25C2 3A               (        basic.asm):00847                 ABX                                       ; x2
25C3 DE02             (        basic.asm):00848                 LDU     runptr                            ; Get run pointer
25C5 EF84             (        basic.asm):00849                 STU     ,X                                ; ctl_stk[ctl_ptr++] = runptr
25C7 10AF02           (        basic.asm):00850                 STY     2,X                               ; ctl_stk[ctl_ptr++] = cmdptr
25CA CE1001           (        basic.asm):00851                 LDU     #GOSUBIndicator                   ; Indicate GOSUB
25CD EF04             (        basic.asm):00852                 STU     4,X                               ; ctl_stk[ctl_ptr++] = V_GOSUB
25CF CB03             (        basic.asm):00853                 ADDB    #3                                ; ++ ++ ++
25D1 D710             (        basic.asm):00854                 STB     ctl_ptr                           ; Resave pointer
25D3                  (        basic.asm):00855         V_GOTO
25D3 1703B2           (        basic.asm):00856                 LBSR    pgm                               ; Insure in program
25D6                  (        basic.asm):00857         V_GOTO1
25D6 1703E4           (        basic.asm):00858                 LBSR    evalnum                           ; Get number
25D9 170326           (        basic.asm):00859                 LBSR    findl                             ; Locate line
25DC 3262             (        basic.asm):00860                 LEAS    2,S                               ; Clean stack
25DE 16FDA8           (        basic.asm):00861                 LBRA    V_RUN2                            ; And proceed
                      (        basic.asm):00862         ;
                      (        basic.asm):00863         ; Return from subroutine
                      (        basic.asm):00864         ;
25E1                  (        basic.asm):00865         V_RETURN
25E1 1703A4           (        basic.asm):00866                 LBSR    pgm                               ; Program only
25E4 D610             (        basic.asm):00867                 LDB     ctl_ptr                           ; Get control stack pointer
25E6 C003             (        basic.asm):00868                 SUBB    #3                                ; Backup
25E8 D710             (        basic.asm):00869                 STB     ctl_ptr                           ; Resave
25EA 8E3157           (        basic.asm):00870                 LDX     #ctl_stk                          ; Point to stack
25ED 3A               (        basic.asm):00871                 ABX                                       ; Offset
25EE 3A               (        basic.asm):00872                 ABX                                       ; Offset
25EF EC04             (        basic.asm):00873                 LDD     4,X                               ; Get flag
25F1 10831001         (        basic.asm):00874                 CMPD    #GOSUBIndicator                   ; Is it GOSUB
25F5 2625             (        basic.asm):00875                 BNE     nsterr                            ; No - error
25F7 EE84             (        basic.asm):00876                 LDU     ,X                                ; Get new runptr
25F9 DF02             (        basic.asm):00877                 STU     runptr                            ; Set runptr
25FB 10AE02           (        basic.asm):00878                 LDY     2,X                               ; Set new cmdptr
25FE ECC4             (        basic.asm):00879                 LDD     ,U                                ; Get line number
2600 DD08             (        basic.asm):00880                 STD     line                              ; Set current line
                      (        basic.asm):00881         ;
                      (        basic.asm):00882         ; Skip rest of statement
                      (        basic.asm):00883         ;
2602                  (        basic.asm):00884         skpstmt:
2602 A6A4             (        basic.asm):00885                 LDA     ,Y                                ; Get data
2604 2767             (        basic.asm):00886                 BEQ     isle1                             ; End of line
2606 813A             (        basic.asm):00887                 CMPA    #':'                              ; New statement?
2608 2763             (        basic.asm):00888                 BEQ     isle1                             ; End of statement
260A 3121             (        basic.asm):00889                 LEAY    1,Y                               ; Next
260C 8122             (        basic.asm):00890                 CMPA    #$22                              ; Quote? '"'
260E 26F2             (        basic.asm):00891                 BNE     skpstmt                           ; No special action
2610                  (        basic.asm):00892         skps1:
2610 A6A4             (        basic.asm):00893                 LDA     ,Y                                ; Get next
2612 2759             (        basic.asm):00894                 BEQ     isle1                             ; End of statement
2614 3121             (        basic.asm):00895                 LEAY    1,Y                               ; Skip character
2616 8122             (        basic.asm):00896                 CMPA    #$22                              ; End of quote? '"'
2618 26F6             (        basic.asm):00897                 BNE     skps1                             ; continue quote
261A 20E6             (        basic.asm):00898                 BRA     skpstmt                           ; continue skip
                      (        basic.asm):00899         ; Incorrect ctl_stk usage
261C                  (        basic.asm):00900         nsterr:
261C 8606             (        basic.asm):00901                 LDA     #ERRnst                           ; 'Nesting'
                      (        basic.asm):00902         ;
                      (        basic.asm):00903         ; Report an error
                      (        basic.asm):00904         ;
261E                  (        basic.asm):00905         error
261E 8E2F0E           (        basic.asm):00906                 LDX     #emsg                             ; Point to error messages
2621 0F15             (        basic.asm):00907                 CLR     file                              ; Reset to console
2623 0F16             (        basic.asm):00908                 CLR     file+1                            ; Reset to console
2625 4D               (        basic.asm):00909                 TSTA                                      ; At message?
2626 2707             (        basic.asm):00910                 BEQ     err2                              ; We have it
2628                  (        basic.asm):00911         err1
2628 6D80             (        basic.asm):00912                 TST     ,X+                               ; Get next
262A 26FC             (        basic.asm):00913                 BNE     err1                              ; Find end
262C 4A               (        basic.asm):00914                 DECA                                      ; Reduce count
262D 26F9             (        basic.asm):00915                 BNE     err1                              ; Find it
262F                  (        basic.asm):00916         err2
262F 170766           (        basic.asm):00917                 LBSR    puts                              ; Display message
2632 170759           (        basic.asm):00918                 LBSR    putm                              ; Output message
2635 206572726F7200   (        basic.asm):00919                 FCN     ' error'                          ; Text
263C                  (        basic.asm):00920         err3
263C 0D13             (        basic.asm):00921                 TST     mode                              ; Running?
263E 2712             (        basic.asm):00922                 BEQ     err4                              ; No, do nothing
2640 17074B           (        basic.asm):00923                 LBSR    putm                              ; Display message
2643 20696E206C696E65 (        basic.asm):00924                 FCN     ' in line '                       ; Text
     2000
264D DC08             (        basic.asm):00925                 LDD     line                              ; Get current line
264F 17072E           (        basic.asm):00926                 LBSR    putn                              ; Display
2652                  (        basic.asm):00927         err4
2652 170785           (        basic.asm):00928                 LBSR    lfcr                              ; New line
2655 16F9DC           (        basic.asm):00929                 LBRA    top                               ; And restart
                      (        basic.asm):00930         ;
                      (        basic.asm):00931         ; Test for end of expression
                      (        basic.asm):00932         ;
2658                  (        basic.asm):00933         is_eV_END:
2658 819C             (        basic.asm):00934                 CMPA    #TO+128
265A 2504             (        basic.asm):00935                 BLO     isee1
265C 819F             (        basic.asm):00936                 CMPA    #ADD+128
265E 2538             (        basic.asm):00937                 BLO     tsne1
2660                  (        basic.asm):00938         isee1:
2660 8129             (        basic.asm):00939                 CMPA    #')'
2662 2709             (        basic.asm):00940                 BEQ     isle1
2664 812C             (        basic.asm):00941                 CMPA    #','
2666 2705             (        basic.asm):00942                 BEQ     isle1
                      (        basic.asm):00943         ;
                      (        basic.asm):00944         ; Test for end of statement
                      (        basic.asm):00945         ;
2668                  (        basic.asm):00946         is_lV_END:
2668 4D               (        basic.asm):00947                 TSTA
2669 2702             (        basic.asm):00948                 BEQ     isle1
266B 813A             (        basic.asm):00949                 CMPA    #':'
266D                  (        basic.asm):00950         isle1:
266D 39               (        basic.asm):00951                 RTS
                      (        basic.asm):00952         ;
                      (        basic.asm):00953         ; Test for terminator character
                      (        basic.asm):00954         ;
266E                  (        basic.asm):00955         isterm
266E 8120             (        basic.asm):00956                 CMPA    #' '
2670 27FB             (        basic.asm):00957                 BEQ     isle1
2672 8109             (        basic.asm):00958                 CMPA    #$09
2674 39               (        basic.asm):00959                 RTS
                      (        basic.asm):00960         ;
                      (        basic.asm):00961         ; Advance to next non-blank & retrieve data
                      (        basic.asm):00962         ;
2675                  (        basic.asm):00963         skip:
2675 A6A4             (        basic.asm):00964                 LDA     ,Y                                ; Get data
2677 2712             (        basic.asm):00965                 BEQ     skipx                             ; End of data
2679 8120             (        basic.asm):00966                 CMPA    #' '                              ; Space?
267B 260E             (        basic.asm):00967                 BNE     skipx                             ; End of data
267D 3121             (        basic.asm):00968                 LEAY    1,Y                               ; Advance
267F 20F4             (        basic.asm):00969                 BRA     skip                              ; And proced
                      (        basic.asm):00970         ;
                      (        basic.asm):00971         ; Advance to, retrieve and skip next non-blank
                      (        basic.asm):00972         ;
2681                  (        basic.asm):00973         GET_NEXT:
2681 A6A4             (        basic.asm):00974                 LDA     ,Y                                ; Get data
2683 2706             (        basic.asm):00975                 BEQ     skipx                             ; Zero - backup
2685 3121             (        basic.asm):00976                 LEAY    1,Y                               ; Advance
2687 8120             (        basic.asm):00977                 CMPA    #' '                              ; Space
2689 27F6             (        basic.asm):00978                 BEQ     GET_NEXT                          ; Keep looking
268B                  (        basic.asm):00979         skipx
268B 39               (        basic.asm):00980                 RTS
                      (        basic.asm):00981         ;
                      (        basic.asm):00982         ; Test for specific character occuring next and remove if found
                      (        basic.asm):00983         ;
268C                  (        basic.asm):00984         tnc:
268C 862C             (        basic.asm):00985                 LDA     #','                              ; Test for comma
268E                  (        basic.asm):00986         testV_NEXT:
268E 3402             (        basic.asm):00987                 PSHS    A                                 ; Save character
2690 8DE3             (        basic.asm):00988                 BSR     skip                              ; Get next char
2692 A1E0             (        basic.asm):00989                 CMPA    ,S+                               ; Does it match?
2694 26D7             (        basic.asm):00990                 BNE     isle1                             ; No
2696 3121             (        basic.asm):00991                 LEAY    1,Y                               ; Advance
2698                  (        basic.asm):00992         tsne1:
2698 1A04             (        basic.asm):00993                 ORCC    #4                                ; Set Z
269A 39               (        basic.asm):00994                 RTS
                      (        basic.asm):00995         ;
                      (        basic.asm):00996         ; Expect a specific token
                      (        basic.asm):00997         ;
269B                  (        basic.asm):00998         EXPECTB
269B 8628             (        basic.asm):00999                 LDA     #'('                              ; Opening bracket
269D 2002             (        basic.asm):01000                 BRA     expect
269F                  (        basic.asm):01001         expectc
269F 862C             (        basic.asm):01002                 LDA     #','                              ; Comma
26A1                  (        basic.asm):01003         expect:
26A1 3402             (        basic.asm):01004                 PSHS    A                                 ; Save character
26A3 8DDC             (        basic.asm):01005                 BSR     GET_NEXT                          ; Get next character
26A5 A1E0             (        basic.asm):01006                 CMPA    ,S+                               ; Does it match?
26A7 27C4             (        basic.asm):01007                 BEQ     isle1                             ; Yes
26A9                  (        basic.asm):01008         synerr:
26A9 4F               (        basic.asm):01009                 CLRA                                      ; Error 0 - SYNTAX
26AA 16FF71           (        basic.asm):01010                 LBRA    error                             ; Report error
                      (        basic.asm):01011         ;
                      (        basic.asm):01012         ; Test for alphabetic or numeric
                      (        basic.asm):01013         ;
26AD                  (        basic.asm):01014         isalnum:
26AD 8D0B             (        basic.asm):01015                 BSR     ISALPHA                           ; Test for alpha
26AF 27BC             (        basic.asm):01016                 BEQ     isle1                             ; Yes
                      (        basic.asm):01017         ;
                      (        basic.asm):01018         ; Test for digit
                      (        basic.asm):01019         ;
26B1                  (        basic.asm):01020         isdigit:
26B1 8130             (        basic.asm):01021                 CMPA    #'0'
26B3 25B8             (        basic.asm):01022                 BLO     isle1
26B5 8139             (        basic.asm):01023                 CMPA    #'9'
26B7 23DF             (        basic.asm):01024                 BLS     tsne1
26B9 39               (        basic.asm):01025                 RTS
                      (        basic.asm):01026         ;
                      (        basic.asm):01027         ; Test for ALPHA
                      (        basic.asm):01028         ;
26BA                  (        basic.asm):01029         ISALPHA:
26BA 8141             (        basic.asm):01030                 CMPA    #'A'
26BC 25AF             (        basic.asm):01031                 BLO     isle1
26BE 815A             (        basic.asm):01032                 CMPA    #'Z'
26C0 23D6             (        basic.asm):01033                 BLS     tsne1
26C2 39               (        basic.asm):01034                 RTS
                      (        basic.asm):01035         ;
                      (        basic.asm):01036         ; Get character from command & convert to upper case
                      (        basic.asm):01037         ;
26C3                  (        basic.asm):01038         getuc:
26C3 A6A4             (        basic.asm):01039                 LDA     ,Y                                ; Get character
26C5 270C             (        basic.asm):01040                 BEQ     getuc2                            ; End - stop
26C7 8161             (        basic.asm):01041                 CMPA    #'a'                              ; Lower?
26C9 2506             (        basic.asm):01042                 BLO     getuc1                            ; No change
26CB 817A             (        basic.asm):01043                 CMPA    #'z'                              ; Lower?
26CD 2202             (        basic.asm):01044                 BHI     getuc1                            ; No change
26CF 84DF             (        basic.asm):01045                 ANDA    #$DF                              ; Convert to upper
26D1                  (        basic.asm):01046         getuc1
26D1 3121             (        basic.asm):01047                 LEAY    1,Y                               ; Next
26D3                  (        basic.asm):01048         getuc2:
26D3 39               (        basic.asm):01049                 RTS
                      (        basic.asm):01050         ;
                      (        basic.asm):01051         ; Loopup word(Y) in reserved word list
                      (        basic.asm):01052         ;
26D4                  (        basic.asm):01053         lookup
26D4 3452             (        basic.asm):01054                 PSHS    A,X,U                             ; Save
26D6 CE2E31           (        basic.asm):01055                 LDU     #rwords                           ; Point to table
26D9 5F               (        basic.asm):01056                 CLRB                                      ; Zero counter
26DA 1F21             (        basic.asm):01057                 TFR     Y,X                               ; Save backup
26DC                  (        basic.asm):01058         look1
26DC A6C4             (        basic.asm):01059                 LDA     ,U                                ; End of list?
26DE 2715             (        basic.asm):01060                 BEQ     look3                             ; We found it
26E0 17FFE0           (        basic.asm):01061                 LBSR    getuc                             ; Get character from input
26E3 A1C0             (        basic.asm):01062                 CMPA    ,U+                               ; Does it match?
26E5 27F5             (        basic.asm):01063                 BEQ     look1                             ; Keep looking
26E7 5C               (        basic.asm):01064                 INCB                                      ; Next
26E8                  (        basic.asm):01065         look2
26E8 A6C0             (        basic.asm):01066                 LDA     ,U+                               ; Next word?
26EA 26FC             (        basic.asm):01067                 BNE     look2                             ; Find it
26EC 1F12             (        basic.asm):01068                 TFR     X,Y                               ; Restore pointer
26EE A6C4             (        basic.asm):01069                 LDA     ,U                                ; Are we at end?
26F0 26EA             (        basic.asm):01070                 BNE     look1                             ; No, keep looking
26F2 5F               (        basic.asm):01071                 CLRB                                      ; Zero result
26F3 35D2             (        basic.asm):01072                 PULS    A,X,U,PC                          ; And return
26F5                  (        basic.asm):01073         look3
26F5 A65F             (        basic.asm):01074                 LDA     -1,U                              ; Get last character
26F7 8DB4             (        basic.asm):01075                 BSR     isalnum                           ; alphanumeric?
26F9 2606             (        basic.asm):01076                 BNE     look5                             ; It's OK
26FB A6A4             (        basic.asm):01077                 LDA     ,Y                                ; Get next from source
26FD 8DAE             (        basic.asm):01078                 BSR     isalnum                           ; Alphanumeric?
26FF 27E7             (        basic.asm):01079                 BEQ     look2                             ; Yes, keep looking
2701                  (        basic.asm):01080         look5
2701 17FF71           (        basic.asm):01081                 LBSR    skip                              ; Advance to next
2704 5C               (        basic.asm):01082                 INCB                                      ; Adjust
2705 35D2             (        basic.asm):01083                 PULS    A,X,U,PC                          ; Restore & return
                      (        basic.asm):01084         ;
                      (        basic.asm):01085         ; Get a number from 'Y', return in D
                      (        basic.asm):01086         ;
2707                  (        basic.asm):01087         getnum
2707 3416             (        basic.asm):01088                 PSHS    A,B,X                             ; Save registers
2709 C60A             (        basic.asm):01089                 LDB     #10                               ; Assume BASE-10
270B A6A4             (        basic.asm):01090                 LDA     ,Y                                ; Get next
270D 8124             (        basic.asm):01091                 CMPA    #'$'                              ; Hex indicator
270F 2604             (        basic.asm):01092                 BNE     getn0                             ; No
2711 3121             (        basic.asm):01093                 LEAY    1,Y                               ; Skip indicator
2713 C610             (        basic.asm):01094                 LDB     #16                               ; Switch to base-16
2715                  (        basic.asm):01095         getn0
2715 4F               (        basic.asm):01096                 CLRA                                      ; Zero high
2716 1F01             (        basic.asm):01097                 TFR     D,X                               ; X = base
2718 5F               (        basic.asm):01098                 CLRB                                      ; Zero low
2719                  (        basic.asm):01099         getn1
2719 EDE4             (        basic.asm):01100                 STD     ,S                                ; Save
271B 17FFA5           (        basic.asm):01101                 LBSR    getuc                             ; Get char
271E 2726             (        basic.asm):01102                 BEQ     getn4                             ; End of line
2720 1F89             (        basic.asm):01103                 TFR     A,B                               ; Into B
2722 C030             (        basic.asm):01104                 SUBB    #'0'                              ; 0-9
2724 C10A             (        basic.asm):01105                 CMPB    #10                               ; In range?
2726 250A             (        basic.asm):01106                 BLO     getn2                             ; It's OK
2728 C007             (        basic.asm):01107                 SUBB    #7                                ; A-F
272A C10A             (        basic.asm):01108                 CMPB    #10                               ; <A
272C 2516             (        basic.asm):01109                 BLO     getn3                             ; Exit
272E C10F             (        basic.asm):01110                 CMPB    #15                               ; >F
2730 2212             (        basic.asm):01111                 BHI     getn3                             ; Exit
2732                  (        basic.asm):01112         getn2
2732 4F               (        basic.asm):01113                 CLRA                                      ; Zero high
2733 3410             (        basic.asm):01114                 PSHS    X                                 ; Save base
2735 10A3E1           (        basic.asm):01115                 CMPD    ,S++                              ; Are we over?
2738 240A             (        basic.asm):01116                 BHS     getn3                             ; Yes, exit
273A DD0C             (        basic.asm):01117                 STD     temp                              ; And save
273C ECE4             (        basic.asm):01118                 LDD     ,S                                ; Get value
273E 8D08             (        basic.asm):01119                 BSR     xMUL                              ; D = D * 10
2740 D30C             (        basic.asm):01120                 ADDD    temp                              ; Add in new
2742 20D5             (        basic.asm):01121                 BRA     getn1                             ; And continue
2744                  (        basic.asm):01122         getn3
2744 313F             (        basic.asm):01123                 LEAY    -1,Y                              ; Backup
2746                  (        basic.asm):01124         getn4
2746 3596             (        basic.asm):01125                 PULS    A,B,X,PC                          ; Restore and return
                      (        basic.asm):01126         ;
                      (        basic.asm):01127         ; Performs 16 bit multiplication (D=X*D)
                      (        basic.asm):01128         ;
2748                  (        basic.asm):01129         xMUL
2748 3416             (        basic.asm):01130                 PSHS    A,B,X           Save parameters
274A A661             (        basic.asm):01131                 LDA     1,S
274C E663             (        basic.asm):01132                 LDB     3,S
274E 3D               (        basic.asm):01133                 MUL
274F 3406             (        basic.asm):01134                 PSHS    A,B
2751 A662             (        basic.asm):01135                 LDA     2,S
2753 E665             (        basic.asm):01136                 LDB     5,S
2755 3D               (        basic.asm):01137                 MUL
2756 EBE4             (        basic.asm):01138                 ADDB    ,S
2758 E7E4             (        basic.asm):01139                 STB     ,S
275A A663             (        basic.asm):01140                 LDA     3,S
275C E664             (        basic.asm):01141                 LDB     4,S
275E 3D               (        basic.asm):01142                 MUL
275F EBE4             (        basic.asm):01143                 ADDB    ,S
2761 E7E4             (        basic.asm):01144                 STB     ,S
2763 3506             (        basic.asm):01145                 PULS    A,B             Get result
2765 3264             (        basic.asm):01146                 LEAS    4,S             Clean stack
2767 39               (        basic.asm):01147                 RTS
                      (        basic.asm):01148         ;
                      (        basic.asm):01149         ; Performs 16 bit division. (X=X/D, D=Remainder)
                      (        basic.asm):01150         ;
2768                  (        basic.asm):01151         xDIV
2768 3416             (        basic.asm):01152                 PSHS    A,B,X
276A 4F               (        basic.asm):01153                 CLRA
276B 5F               (        basic.asm):01154                 CLRB
276C 10A3E4           (        basic.asm):01155                 CMPD    ,S
276F 271E             (        basic.asm):01156                 BEQ     diverr
2771 8E0011           (        basic.asm):01157                 LDX     #17
2774                  (        basic.asm):01158         div1
2774 1CFE             (        basic.asm):01159                 ANDCC   #$FE
2776                  (        basic.asm):01160         div2
2776 6963             (        basic.asm):01161                 ROL     3,S
2778 6962             (        basic.asm):01162                 ROL     2,S
277A 301F             (        basic.asm):01163                 LEAX    -1,X
277C 270D             (        basic.asm):01164                 BEQ     div3
277E 59               (        basic.asm):01165                 ROLB
277F 49               (        basic.asm):01166                 ROLA
2780 10A3E4           (        basic.asm):01167                 CMPD    ,S
2783 25EF             (        basic.asm):01168                 BLO     div1
2785 A3E4             (        basic.asm):01169                 SUBD    ,S
2787 1A01             (        basic.asm):01170                 ORCC    #1
2789 20EB             (        basic.asm):01171                 BRA     div2
278B                  (        basic.asm):01172         div3
278B 3262             (        basic.asm):01173                 LEAS    2,S
278D 3590             (        basic.asm):01174                 PULS    X,PC
278F                  (        basic.asm):01175         diverr
278F 8605             (        basic.asm):01176                 LDA     #ERRdiv                           ; 'Divide by zero'
2791 16FE8A           (        basic.asm):01177                 LBRA    error                             ; Report error
                      (        basic.asm):01178         ;
                      (        basic.asm):01179         ; Insert line(D) in program
                      (        basic.asm):01180         ;
2794                  (        basic.asm):01181         insert:
2794 3476             (        basic.asm):01182                 PSHS    A,B,X,Y,U                         ; Save
2796 C604             (        basic.asm):01183                 LDB     #4                                ; line#,link
2798                  (        basic.asm):01184         ins1
2798 5C               (        basic.asm):01185                 INCB                                      ; Advance
2799 A6A0             (        basic.asm):01186                 LDA     ,Y+                               ; Get next
279B 26FB             (        basic.asm):01187                 BNE     ins1                              ; Count them all
279D 8D35             (        basic.asm):01188                 BSR     malloc                            ; Allocate
279F 1F03             (        basic.asm):01189                 TFR     D,U                               ; U = address
27A1 ECE4             (        basic.asm):01190                 LDD     ,S                                ; Get line#
27A3 EDC4             (        basic.asm):01191                 STD     ,U                                ; Set line#
27A5 3044             (        basic.asm):01192                 LEAX    4,U                               ; Point to text
27A7 10AE64           (        basic.asm):01193                 LDY     4,S                               ; Get cmd pointer
27AA                  (        basic.asm):01194         ins2
27AA A6A0             (        basic.asm):01195                 LDA     ,Y+                               ; Get from source
27AC A780             (        basic.asm):01196                 STA     ,X+                               ; Save in dest
27AE 26FA             (        basic.asm):01197                 BNE     ins2                              ; Copy entire line
27B0 ECE4             (        basic.asm):01198                 LDD     ,S                                ; Get line number
27B2 9E00             (        basic.asm):01199                 LDX     pgm_start                         ; Get start address
27B4 2705             (        basic.asm):01200                 BEQ     ins3                              ; No program - allocate here
27B6 10A384           (        basic.asm):01201                 CMPD    ,X                                ; Are we lower?
27B9 2406             (        basic.asm):01202                 BHS     ins4                              ; No - keep looking
27BB                  (        basic.asm):01203         ins3
27BB AF42             (        basic.asm):01204                 STX     2,U                               ; Set link
27BD DF00             (        basic.asm):01205                 STU     pgm_start                         ; Set new start
27BF 35F6             (        basic.asm):01206                 PULS    A,B,X,Y,U,PC                      ; And return
27C1                  (        basic.asm):01207         ins4
27C1 1F12             (        basic.asm):01208                 TFR     X,Y                               ; Y = old
27C3 AE02             (        basic.asm):01209                 LDX     2,X                               ; X = new
27C5 2705             (        basic.asm):01210                 BEQ     ins5                              ; Insert here
27C7 10A384           (        basic.asm):01211                 CMPD    ,X                                ; Are we lower?
27CA 22F5             (        basic.asm):01212                 BHI     ins4                              ; No, keep looking
27CC                  (        basic.asm):01213         ins5
27CC EC22             (        basic.asm):01214                 LDD     2,Y                               ; Get old link
27CE ED42             (        basic.asm):01215                 STD     2,U                               ; Set new link
27D0 EF22             (        basic.asm):01216                 STU     2,Y                               ; Link us to old
27D2 35F6             (        basic.asm):01217                 PULS    A,B,X,Y,U,PC                      ; And proceed
                      (        basic.asm):01218         ;
                      (        basic.asm):01219         ; Allocate a block of memory: char *malloc(d)
                      (        basic.asm):01220         ;
27D4                  (        basic.asm):01221         malloc
27D4 3466             (        basic.asm):01222                 PSHS    A,B,Y,U                           ; Save registers
27D6 CE39DB           (        basic.asm):01223                 LDU     #heap                             ; Point to beginning of heap
                      (        basic.asm):01224         ; Search for free block of memory
27D9                  (        basic.asm):01225         ma?1
27D9 A6C4             (        basic.asm):01226                 LDA     ,U                                ; Get flag
27DB 2729             (        basic.asm):01227                 BEQ     ma?4                              ; End of list, allocate here
27DD AE41             (        basic.asm):01228                 LDX     1,U                               ; Get size
27DF 4A               (        basic.asm):01229                 DECA                                      ; Un-allocated?
27E0 2604             (        basic.asm):01230                 BNE     ma?2                              ; No, try next
                      (        basic.asm):01231         ; Found free block, see if its large enough
27E2 ACE4             (        basic.asm):01232                 CMPX    ,S                                ; Large enough?
27E4 2408             (        basic.asm):01233                 BHS     ma?3                              ; Yes, its ok
                      (        basic.asm):01234         ; This block not suitable, advance to next
27E6                  (        basic.asm):01235         ma?2
27E6 3003             (        basic.asm):01236                 LEAX    3,X                               ; Include overhead
27E8 1F10             (        basic.asm):01237                 TFR     X,D                               ; Get into acc
27EA 33CB             (        basic.asm):01238                 LEAU    D,U                               ; Advance to next
27EC 20EB             (        basic.asm):01239                 BRA     ma?1                              ; And try again
                      (        basic.asm):01240         ; This block is OK to re-allocate
27EE                  (        basic.asm):01241         ma?3
27EE 1F10             (        basic.asm):01242                 TFR     X,D                               ; Get into ACC
27F0 A3E4             (        basic.asm):01243                 SUBD    ,S                                ; Calculate remaining
27F2 830003           (        basic.asm):01244                 SUBD    #3                                ; Convert for overhead
27F5 2325             (        basic.asm):01245                 BLS     ma?6                              ; Leaved it alone
27F7 1F02             (        basic.asm):01246                 TFR     D,Y                               ; Save for later
                      (        basic.asm):01247         ; Split this block into two blocks
27F9 ECE4             (        basic.asm):01248                 LDD     ,S                                ; Get size of block
27FB 30CB             (        basic.asm):01249                 LEAX    D,U                               ; Offset to next
27FD 6F03             (        basic.asm):01250                 CLR     3,X                               ; Set it free
27FF 6C03             (        basic.asm):01251                 INC     3,X                               ; Indicate de-allocated
2801 10AF04           (        basic.asm):01252                 STY     4,X                               ; Save size of block
2804 2014             (        basic.asm):01253                 BRA     ma?5                              ; And proceed
                      (        basic.asm):01254         ; Allocate on end of memory
2806                  (        basic.asm):01255         ma?4
2806 1F40             (        basic.asm):01256                 TFR     S,D                               ; Get stack pointer
2808 A3E4             (        basic.asm):01257                 SUBD    ,S                                ; Adjust for buffer size
280A 8303E8           (        basic.asm):01258                 SUBD    #1000                             ; Adjust for margin
280D 3440             (        basic.asm):01259                 PSHS    U                                 ; Save pointer
280F 10A3E1           (        basic.asm):01260                 CMPD    ,S++                              ; Test it
2812 231F             (        basic.asm):01261                 BLS     ma?9                              ; No, fail
                      (        basic.asm):01262         ; Ok to proceed, allocate memory
2814 ECE4             (        basic.asm):01263                 LDD     ,S                                ; Get size
2816 30CB             (        basic.asm):01264                 LEAX    D,U                               ; Offset to new area
2818 6F03             (        basic.asm):01265                 CLR     3,X                               ; Indicate end of list
281A                  (        basic.asm):01266         ma?5
281A ED41             (        basic.asm):01267                 STD     1,U                               ; Save block size
281C                  (        basic.asm):01268         ma?6
281C C602             (        basic.asm):01269                 LDB     #2                                ; Get 'Allocated' flag
281E E7C4             (        basic.asm):01270                 STB     ,U                                ; Set it
2820 3343             (        basic.asm):01271                 LEAU    3,U                               ; U points to area
2822 1F31             (        basic.asm):01272                 TFR     U,X                               ; X points to area
2824 10AEE4           (        basic.asm):01273                 LDY     ,S                                ; Get size
2827 2706             (        basic.asm):01274                 BEQ     ma?8                              ; Zero length
2829                  (        basic.asm):01275         ma?7
2829 6FC0             (        basic.asm):01276                 CLR     ,U+                               ; Zero one byte
282B 313F             (        basic.asm):01277                 LEAY    -1,Y                              ; Reduce count
282D 26FA             (        basic.asm):01278                 BNE     ma?7                              ; Do them all
282F                  (        basic.asm):01279         ma?8
282F AFE4             (        basic.asm):01280                 STX     ,S                                ; Save
2831 35E6             (        basic.asm):01281                 PULS    A,B,Y,U,PC                        ; Restore & return
2833                  (        basic.asm):01282         ma?9
2833 8609             (        basic.asm):01283                 LDA     #ERRmem                           ; "Out of memory"
2835 16FDE6           (        basic.asm):01284                 LBRA    error                             ; Report error
                      (        basic.asm):01285         
                      (        basic.asm):01286         ;
                      (        basic.asm):01287         ; Release a block of memory: free(x)
                      (        basic.asm):01288         ;
2838                  (        basic.asm):01289         free
2838 301D             (        basic.asm):01290                 LEAX    -3,X                              ; Backup to "real" beginning
283A 3476             (        basic.asm):01291                 PSHS    A,B,X,Y,U                         ; Save for compare
                      (        basic.asm):01292         ; Search the allocation list for this block
283C CE39DB           (        basic.asm):01293                 LDU     #heap                             ; Point to beginning of heap
283F                  (        basic.asm):01294         fr?10
283F A6C4             (        basic.asm):01295                 LDA     ,U                                ; Get address
2841 2711             (        basic.asm):01296                 BEQ     fr?12                             ; End of list
2843 11A362           (        basic.asm):01297                 CMPU    2,S                               ; Is this it?
2846 2708             (        basic.asm):01298                 BEQ     fr?11                             ; Yes, handle it
2848 EC41             (        basic.asm):01299                 LDD     1,U                               ; Get size
284A 33CB             (        basic.asm):01300                 LEAU    D,U                               ; Advance for size
284C 3343             (        basic.asm):01301                 LEAU    3,U                               ; Include overhead
284E 20EF             (        basic.asm):01302                 BRA     fr?10                             ; And keep looking
                      (        basic.asm):01303         ; Mark this block as un-allocated
2850                  (        basic.asm):01304         fr?11
2850 8601             (        basic.asm):01305                 LDA     #1                                ; Get 'deallocated' flag
2852 A7C4             (        basic.asm):01306                 STA     ,U                                ; Set block
                      (        basic.asm):01307         ; Garbage collection, scan allocation list and join any
                      (        basic.asm):01308         ; contiguous de-allocated blocks into single areas.
                      (        basic.asm):01309         ; Also, truncate list at last allocated block.
2854                  (        basic.asm):01310         fr?12
2854 CE39DB           (        basic.asm):01311                 LDU     #heap                             ; Point to beginning of heap
2857                  (        basic.asm):01312         fr?20
2857 A6C4             (        basic.asm):01313                 LDA     ,U                                ; Get allocation flag
2859 2724             (        basic.asm):01314                 BEQ     fr?25                             ; End, quit
285B AE41             (        basic.asm):01315                 LDX     1,U                               ; Get size of block
285D 4A               (        basic.asm):01316                 DECA                                      ; Test for de-allocated
285E 2615             (        basic.asm):01317                 BNE     fr?23                             ; No, its not
                      (        basic.asm):01318         ; This block is free, check following blocks
2860                  (        basic.asm):01319         fr?21
2860 1F10             (        basic.asm):01320                 TFR     X,D                               ; 'D' = offset
2862 31CB             (        basic.asm):01321                 LEAY    D,U                               ; 'Y' = next block
2864 A623             (        basic.asm):01322                 LDA     3,Y                               ; Get next flag
2866 2715             (        basic.asm):01323                 BEQ     fr?24                             ; End of list, its ok
2868 4A               (        basic.asm):01324                 DECA                                      ; Test for allocated?
2869 2608             (        basic.asm):01325                 BNE     fr?22                             ; Yes, stop looking
                      (        basic.asm):01326         ; Next block is also free
286B EC24             (        basic.asm):01327                 LDD     4,Y                               ; Get size of next block
286D 308B             (        basic.asm):01328                 LEAX    D,X                               ; Add in size of next block
286F 3003             (        basic.asm):01329                 LEAX    3,X                               ; Inlude overhead
2871 20ED             (        basic.asm):01330                 BRA     fr?21                             ; And keep looking
                      (        basic.asm):01331         ; Resave this block size
2873                  (        basic.asm):01332         fr?22
2873 AF41             (        basic.asm):01333                 STX     1,U                               ; Save new block size
                      (        basic.asm):01334         ; Advance to next block in list
2875                  (        basic.asm):01335         fr?23
2875 1F10             (        basic.asm):01336                 TFR     X,D                               ; Get length
2877 33CB             (        basic.asm):01337                 LEAU    D,U                               ; Offset to next
2879 3343             (        basic.asm):01338                 LEAU    3,U                               ; Include overhead
287B 20DA             (        basic.asm):01339                 BRA     fr?20                             ; And keep looking
                      (        basic.asm):01340         ; Mark this block as end of list
287D                  (        basic.asm):01341         fr?24
287D 6FC4             (        basic.asm):01342                 CLR     ,U                                ; Indicate end of list
287F                  (        basic.asm):01343         fr?25
287F 3576             (        basic.asm):01344                 PULS    A,B,X,Y,U                         ; Restore & return
2881 3003             (        basic.asm):01345                 LEAX    3,X                               ; Skip ahead
2883 39               (        basic.asm):01346                 RTS
                      (        basic.asm):01347         ;
                      (        basic.asm):01348         ; Delete line (D) from program
                      (        basic.asm):01349         ;       unsigned lnumber
                      (        basic.asm):01350         ;       struct  *link
                      (        basic.asm):01351         ;       char    text[]
                      (        basic.asm):01352         ;
2884                  (        basic.asm):01353         delete:
2884 9E00             (        basic.asm):01354                 LDX     pgm_start                         ; Get program start address
2886 2719             (        basic.asm):01355                 BEQ     del4                              ; No program
2888                  (        basic.asm):01356         del1
2888 10A384           (        basic.asm):01357                 CMPD    ,X                                ; Does it match?
288B 260E             (        basic.asm):01358                 BNE     del3                              ; No, try next
288D EC02             (        basic.asm):01359                 LDD     2,X                               ; Get link
288F 9C00             (        basic.asm):01360                 CMPX    pgm_start                         ; First_line?
2891 2604             (        basic.asm):01361                 BNE     del2                              ; No, release it
2893 DD00             (        basic.asm):01362                 STD     pgm_start                         ; Set new start address
2895 20A1             (        basic.asm):01363                 BRA     free                              ; Release this memory
2897                  (        basic.asm):01364         del2
2897 ED42             (        basic.asm):01365                 STD     2,U                               ; Set last link
2899 209D             (        basic.asm):01366                 BRA     free                              ; Release this memory
289B                  (        basic.asm):01367         del3
289B 1F13             (        basic.asm):01368                 TFR     X,U                               ; Save pointer to last
289D AE02             (        basic.asm):01369                 LDX     2,X                               ; Get link
289F 26E7             (        basic.asm):01370                 BNE     del1                              ; And proceed
28A1                  (        basic.asm):01371         del4
28A1 39               (        basic.asm):01372                 RTS
                      (        basic.asm):01373         ;
                      (        basic.asm):01374         ; Tokenize input line and add/replace source if required
                      (        basic.asm):01375         ;
28A2                  (        basic.asm):01376         edit:
28A2 108E302B         (        basic.asm):01377                 LDY     #buffer                           ; Point to buffer
28A6 1F23             (        basic.asm):01378                 TFR     Y,U                               ; Secondary pointer
28A8                  (        basic.asm):01379         edit1
28A8 6DA4             (        basic.asm):01380                 TST     ,Y                                ; Get data
28AA 2733             (        basic.asm):01381                 BEQ     edit4                             ; End of data
28AC 17FE25           (        basic.asm):01382                 LBSR    lookup                            ; Is it a reserved word
28AF 2710             (        basic.asm):01383                 BEQ     edit2                             ; No, nothing special
28B1 CA80             (        basic.asm):01384                 ORB     #%10000000                        ; Convert to token value
28B3 E7C0             (        basic.asm):01385                 STB     ,U+                               ; Save in output
28B5 C18F             (        basic.asm):01386                 CMPB    #REM+128                          ; Remark?
28B7 26EF             (        basic.asm):01387                 BNE     edit1                             ; And continue
28B9                  (        basic.asm):01388         edit1a
28B9 A6A0             (        basic.asm):01389                 LDA     ,Y+                               ; Get char
28BB 2722             (        basic.asm):01390                 BEQ     edit4                             ; End of line
28BD A7C0             (        basic.asm):01391                 STA     ,U+                               ; Save
28BF 20F8             (        basic.asm):01392                 BRA     edit1a                            ; Do them all
28C1                  (        basic.asm):01393         edit2
28C1 A6A0             (        basic.asm):01394                 LDA     ,Y+                               ; Get character
28C3 8161             (        basic.asm):01395                 CMPA    #'a'                              ; Lower?
28C5 2506             (        basic.asm):01396                 BLO     edit2a                            ; No
28C7 817A             (        basic.asm):01397                 CMPA    #'z'                              ; Lower?
28C9 2202             (        basic.asm):01398                 BHI     edit2a                            ; No
28CB 84DF             (        basic.asm):01399                 ANDA    #$DF                              ; Convert to upper
28CD                  (        basic.asm):01400         edit2a
28CD A7C0             (        basic.asm):01401                 STA     ,U+                               ; Write to source
28CF 8122             (        basic.asm):01402                 CMPA    #$22                              ; Quoted string? '"'
28D1 26D5             (        basic.asm):01403                 BNE     edit1                             ; No - next token
28D3                  (        basic.asm):01404         edit3
28D3 A6A0             (        basic.asm):01405                 LDA     ,Y+                               ; Get next char
28D5 2708             (        basic.asm):01406                 BEQ     edit4                             ; End - exit
28D7 A7C0             (        basic.asm):01407                 STA     ,U+                               ; Write to buffer
28D9 8122             (        basic.asm):01408                 CMPA    #$22                              ; End of string? '"'
28DB 26F6             (        basic.asm):01409                 BNE     edit3                             ; No, keep copying
28DD 20C9             (        basic.asm):01410                 BRA     edit1                             ; Next token
28DF                  (        basic.asm):01411         edit4
28DF 6FC4             (        basic.asm):01412                 CLR     ,U                                ; Zero terminate
28E1 108E302B         (        basic.asm):01413                 LDY     #buffer                           ; Back to beginning
28E5 17FD8D           (        basic.asm):01414                 LBSR    skip                              ; First non-blank
28E8 17FDC6           (        basic.asm):01415                 LBSR    isdigit                           ; Is it a number?
28EB 2614             (        basic.asm):01416                 BNE     edit5                             ; No, do nothing
28ED 17FE17           (        basic.asm):01417                 LBSR    getnum                            ; Get number
28F0 3406             (        basic.asm):01418                 PSHS    A,B                               ; Save
28F2 17FF8F           (        basic.asm):01419                 LBSR    delete                            ; Delete existing line
28F5 17FD7D           (        basic.asm):01420                 LBSR    skip                              ; More data
28F8 4D               (        basic.asm):01421                 TSTA                                      ; End of line
28F9 3506             (        basic.asm):01422                 PULS    A,B                               ; Restore
28FB 2704             (        basic.asm):01423                 BEQ     edit5                             ; No
28FD 17FE94           (        basic.asm):01424                 LBSR    insert                            ; Insert the line
2900 4F               (        basic.asm):01425                 CLRA                                      ; Indicate we edited
2901                  (        basic.asm):01426         edit5
2901 39               (        basic.asm):01427                 RTS
                      (        basic.asm):01428         ;
                      (        basic.asm):01429         ; Locate given line in source
                      (        basic.asm):01430         ;
2902                  (        basic.asm):01431         findl:
2902 9E00             (        basic.asm):01432                 LDX     pgm_start                         ; Get program start
2904 2709             (        basic.asm):01433                 BEQ     findl2                            ; Not found
2906                  (        basic.asm):01434         findl1
2906 10A384           (        basic.asm):01435                 CMPD    ,X                                ; Does this one match?
2909 27F6             (        basic.asm):01436                 BEQ     edit5                             ; Yes
290B AE02             (        basic.asm):01437                 LDX     2,X                               ; Get next one
290D 26F7             (        basic.asm):01438                 BNE     findl1                            ; And keep looking
290F                  (        basic.asm):01439         findl2
290F 8603             (        basic.asm):01440                 LDA     #ERRlin                           ; 'Line number'
2911 16FD0A           (        basic.asm):01441                 LBRA    error                             ; Report error
                      (        basic.asm):01442         ;
                      (        basic.asm):01443         ; Get variable index (into X)
                      (        basic.asm):01444         ;
2914                  (        basic.asm):01445         getvar:
2914 17FD6A           (        basic.asm):01446                 LBSR    GET_NEXT                          ; Get next
2917 17FDA0           (        basic.asm):01447                 LBSR    ISALPHA                           ; Alphabetic
291A 1026FD8B         (        basic.asm):01448                 LBNE    synerr                            ; No, Syntax error
291E 8041             (        basic.asm):01449                 SUBA    #'A'                              ; Convert to
2920 841F             (        basic.asm):01450                 ANDA    #%00011111                        ; Wrap for H/L case
2922 1F89             (        basic.asm):01451                 TFR     A,B                               ; B = value
2924 4F               (        basic.asm):01452                 CLRA                                      ; Zero high
2925 8E0014           (        basic.asm):01453                 LDX     #20                               ; *10 (words)
2928 17FE1D           (        basic.asm):01454                 LBSR    xMUL                              ; D = ((c-'A')&0x1F)*10
292B 1F01             (        basic.asm):01455                 TFR     D,X                               ; X = index
292D A6A4             (        basic.asm):01456                 LDA     ,Y                                ; Get next
292F 17FD7F           (        basic.asm):01457                 LBSR    isdigit                           ; Is it a number?
2932 2609             (        basic.asm):01458                 BNE     getv1                             ; No, value is OK
2934 8030             (        basic.asm):01459                 SUBA    #'0'                              ; Convert to zero offset
2936 48               (        basic.asm):01460                 LSLA                                      ; x2
2937 3086             (        basic.asm):01461                 LEAX    A,X                               ; Add to index
2939 3121             (        basic.asm):01462                 LEAY    1,Y                               ; Skip digit
293B A6A4             (        basic.asm):01463                 LDA     ,Y                                ; Get next char
293D                  (        basic.asm):01464         getv1:
293D 5F               (        basic.asm):01465                 CLRB                                      ; Assume numeric
293E 8124             (        basic.asm):01466                 CMPA    #'$'                              ; Character suffix?
2940 2603             (        basic.asm):01467                 BNE     getv2                             ; No, assumption correct
2942 3121             (        basic.asm):01468                 LEAY    1,Y                               ; Skip '$'
2944 5C               (        basic.asm):01469                 INCB                                      ; Indicate character
2945                  (        basic.asm):01470         getv2:
2945 D711             (        basic.asm):01471                 STB     expr_type                         ; save type
2947 39               (        basic.asm):01472                 RTS
                      (        basic.asm):01473         ;
                      (        basic.asm):01474         ; Compute variable address for assignment
                      (        basic.asm):01475         ;
2948                  (        basic.asm):01476         address:
2948 8DCA             (        basic.asm):01477                 BSR     getvar                            ; Get variable name
294A 2705             (        basic.asm):01478                 BEQ     addr1                             ; Numeric
294C 308931BB         (        basic.asm):01479                 LEAX    char_vars,X                       ; Offset to char var address
2950 39               (        basic.asm):01480                 RTS
2951                  (        basic.asm):01481         addr1:
2951 8628             (        basic.asm):01482                 LDA     #'('                              ; Array index?
2953 17FD38           (        basic.asm):01483                 LBSR    testV_NEXT                        ; Occuring next?
2956 2622             (        basic.asm):01484                 BNE     addr3                             ; Not an array
2958 170064           (        basic.asm):01485                 LBSR    chknum                            ; Insure numeric
295B 3440             (        basic.asm):01486                 PSHS    U                                 ; Save U
295D 338937D3         (        basic.asm):01487                 LEAU    dim_check,X                       ; U = check address
2961 AE8935CB         (        basic.asm):01488                 LDX     dim_vars,X                        ; X = variable
2965 0F12             (        basic.asm):01489                 CLR     nest                              ; Zero nesting count
2967 170073           (        basic.asm):01490                 LBSR    evalsub                           ; Evaluate expression
296A 10A3C4           (        basic.asm):01491                 CMPD    ,U                                ; Are we over
296D 2505             (        basic.asm):01492                 BLO     addr2                             ; No, index is OK
296F                  (        basic.asm):01493         dimerr:
296F 8607             (        basic.asm):01494                 LDA     #ERRdim                           ; "Dimension error"
2971 16FCAA           (        basic.asm):01495                 LBRA    error                             ; Report error
2974                  (        basic.asm):01496         addr2
2974 308B             (        basic.asm):01497                 LEAX    D,X                               ; Offset
2976 308B             (        basic.asm):01498                 LEAX    D,X                               ; Offset (16 bit)
2978 35C0             (        basic.asm):01499                 PULS    U,PC
297A                  (        basic.asm):01500         addr3
297A 308933C3         (        basic.asm):01501                 LEAX    num_vars,X                        ; Offset to num variable address
297E                  (        basic.asm):01502         addr4
297E 39               (        basic.asm):01503                 RTS
                      (        basic.asm):01504         ;
                      (        basic.asm):01505         ; Test for direct only and report error
                      (        basic.asm):01506         ;
297F                  (        basic.asm):01507         direct
297F 0D13             (        basic.asm):01508                 TST     mode                              ; Direct mode?
2981 27FB             (        basic.asm):01509                 BEQ     addr4                             ; Yes
2983 8601             (        basic.asm):01510                 LDA     #ERRpgm                           ; "Illegal program"
2985 16FC96           (        basic.asm):01511                 LBRA    error
                      (        basic.asm):01512         ;
                      (        basic.asm):01513         ; Test for program only and report error
                      (        basic.asm):01514         ;
2988                  (        basic.asm):01515         pgm
2988 0D13             (        basic.asm):01516                 TST     mode                              ; Program running
298A 26F2             (        basic.asm):01517                 BNE     addr4                             ; Yes
298C 8602             (        basic.asm):01518                 LDA     #ERRdir                           ; "Illegal direct"
298E 16FC8D           (        basic.asm):01519                 LBRA    error                             ; Report error
                      (        basic.asm):01520         ;
                      (        basic.asm):01521         ; Clear all variables
                      (        basic.asm):01522         ;
2991                  (        basic.asm):01523         V_CLEAR:
2991 CE0000           (        basic.asm):01524                 LDU     #0                                ; Begin with zero
2994                  (        basic.asm):01525         clv1
2994 AEC931BB         (        basic.asm):01526                 LDX     char_vars,U                       ; Get char var pointer
2998 2703             (        basic.asm):01527                 BEQ     clv2                              ; No char var
299A 17FE9B           (        basic.asm):01528                 LBSR    free                              ; Release the storage
299D                  (        basic.asm):01529         clv2
299D AEC935CB         (        basic.asm):01530                 LDX     dim_vars,U                        ; Get dim var pointer
29A1 2703             (        basic.asm):01531                 BEQ     clv3                              ; No dim var
29A3 17FE92           (        basic.asm):01532                 LBSR    free                              ; Release the storage
29A6                  (        basic.asm):01533         clv3
29A6 4F               (        basic.asm):01534                 CLRA                                      ; Zero high
29A7 5F               (        basic.asm):01535                 CLRB                                      ; Zero low
29A8 EDC933C3         (        basic.asm):01536                 STD     num_vars,U                        ; Clear numeric
29AC EDC931BB         (        basic.asm):01537                 STD     char_vars,U                       ; Clear char
29B0 EDC935CB         (        basic.asm):01538                 STD     dim_vars,U                        ; Clear dim
29B4 3342             (        basic.asm):01539                 LEAU    2,U                               ; Skip ahead
29B6 11830208         (        basic.asm):01540                 CMPU    #260*2                            ; Are we over?
29BA 25D8             (        basic.asm):01541                 BLO     clv1                              ; Do them all
29BC 39               (        basic.asm):01542                 RTS
                      (        basic.asm):01543         ;
                      (        basic.asm):01544         ; Evaluate number only (no Chars)
                      (        basic.asm):01545         ;
29BD                  (        basic.asm):01546         evalnum:
29BD 8D10             (        basic.asm):01547                 BSR     EVAL                              ; Evaluate expression
29BF                  (        basic.asm):01548         chknum:
29BF 0D11             (        basic.asm):01549                 TST     expr_type                         ; Is it numeric?
29C1 270B             (        basic.asm):01550                 BEQ     evcok                             ; Yes - OK
29C3                  (        basic.asm):01551         typerr:
29C3 8604             (        basic.asm):01552                 LDA     #ERRtyp                           ; "Wrong type"
29C5 16FC56           (        basic.asm):01553                 LBRA    error                             ; Issue error
                      (        basic.asm):01554         ;
                      (        basic.asm):01555         ; Evaluate character only
                      (        basic.asm):01556         ;
29C8                  (        basic.asm):01557         evalchr:
29C8 8D05             (        basic.asm):01558                 BSR     EVAL                              ; Evaluate expression
29CA                  (        basic.asm):01559         chkchr:
29CA 0D11             (        basic.asm):01560                 TST     expr_type                         ; Is it character?
29CC 27F5             (        basic.asm):01561                 BEQ     typerr                            ; Report error
29CE                  (        basic.asm):01562         evcok:
29CE 39               (        basic.asm):01563                 RTS
                      (        basic.asm):01564         ;
                      (        basic.asm):01565         ; Evaluate an expression (Result in D)
                      (        basic.asm):01566         ;
29CF                  (        basic.asm):01567         EVAL:
29CF 0F12             (        basic.asm):01568                 CLR     nest                              ; Reset nesting level
29D1 8D0A             (        basic.asm):01569                 BSR     evalsub                           ; Evaluate sub-expression
29D3 0A12             (        basic.asm):01570                 DEC     nest                              ; Were we at level-1
29D5 1026FCD0         (        basic.asm):01571                 LBNE    synerr                            ; No, report error
29D9 39               (        basic.asm):01572                 RTS
                      (        basic.asm):01573         ;
                      (        basic.asm):01574         ; Evaluate a sub-expression
                      (        basic.asm):01575         ;
                      (        basic.asm):01576         ; Stack variables:
                      (        basic.asm):01577         ;       uc      Ostack[10]      22
                      (        basic.asm):01578         ;       uw      Nstack[20]      2
                      (        basic.asm):01579         ;       uc      Optr            1
                      (        basic.asm):01580         ;       uc      Nptr            0
29DA                  (        basic.asm):01581         evalbra:
29DA 17FCBE           (        basic.asm):01582                 LBSR    EXPECTB                           ; Check for bracket
29DD                  (        basic.asm):01583         evalsub:
29DD 3456             (        basic.asm):01584                 PSHS    A,B,X,U                           ; Save registers
29DF 32E8E0           (        basic.asm):01585                 LEAS    -32,S                             ; Allocate local space
29E2 0C12             (        basic.asm):01586                 INC     nest                              ; Advance nesting level
29E4 5F               (        basic.asm):01587                 CLRB                                      ; Zero low
29E5 E7E4             (        basic.asm):01588                 STB     ,S                                ; Nptr = 0
29E7 E761             (        basic.asm):01589                 STB     1,S                               ; Optr = 0
29E9 E7E816           (        basic.asm):01590                 STB     22,S                              ; Ostack[0] = 0;
29EC 170108           (        basic.asm):01591                 LBSR    getval                            ; Get initial value
29EF 1F03             (        basic.asm):01592                 TFR     D,U                               ; U = value
29F1 6CE4             (        basic.asm):01593                 INC     ,S                                ; ++Nptr
29F3 E6E4             (        basic.asm):01594                 LDB     ,S                                ; B = Nptr
29F5 58               (        basic.asm):01595                 LSLB                                      ; x2
29F6 3062             (        basic.asm):01596                 LEAX    2,S                               ; X = Nstack
29F8 EF85             (        basic.asm):01597                 STU     B,X                               ; Nstack[++Nptr] = v
29FA 0D11             (        basic.asm):01598                 TST     expr_type                         ; String operation?
29FC 2757             (        basic.asm):01599                 BEQ     evsn1                             ; No, try numeric
                      (        basic.asm):01600         ; String operations
29FE                  (        basic.asm):01601         evss0
29FE 17FC74           (        basic.asm):01602                 LBSR    skip                              ; Get next character
2A01 17FC54           (        basic.asm):01603                 LBSR    is_eV_END                         ; End of expression
2A04 102700D9         (        basic.asm):01604                 LBEQ    evse1a                            ; Exit
2A08 3121             (        basic.asm):01605                 LEAY    1,Y                               ; Advance
2A0A 847F             (        basic.asm):01606                 ANDA    #$7F                              ; Remove high bit
2A0C 3402             (        basic.asm):01607                 PSHS    A                                 ; Save operator
2A0E 8E30F3           (        basic.asm):01608                 LDX     #sa2                              ; Point to acc2
2A11 1701A0           (        basic.asm):01609                 LBSR    getcval                           ; Get character value
2A14 8E308F           (        basic.asm):01610                 LDX     #sa1                              ; Point to SA1
2A17 CE30F3           (        basic.asm):01611                 LDU     #sa2                              ; Point to SA2
2A1A 3502             (        basic.asm):01612                 PULS    A                                 ; Restore operator
2A1C 811F             (        basic.asm):01613                 CMPA    #ADD                              ; Concatinate
2A1E 260E             (        basic.asm):01614                 BNE     evss3                             ; No, try next
                      (        basic.asm):01615         ; Concatinate two strings
2A20                  (        basic.asm):01616         evss1:
2A20 A680             (        basic.asm):01617                 LDA     ,X+                               ; Get next
2A22 26FC             (        basic.asm):01618                 BNE     evss1                             ; Go to end
2A24 301F             (        basic.asm):01619                 LEAX    -1,X                              ; Backup to last
2A26                  (        basic.asm):01620         evss2
2A26 A6C0             (        basic.asm):01621                 LDA     ,U+                               ; Get char
2A28 A780             (        basic.asm):01622                 STA     ,X+                               ; Write to string
2A2A 26FA             (        basic.asm):01623                 BNE     evss2                             ; Do them all
2A2C 20D0             (        basic.asm):01624                 BRA     evss0                             ; And proceed
                      (        basic.asm):01625         ; Compare two strings
2A2E                  (        basic.asm):01626         evss3
2A2E E680             (        basic.asm):01627                 LDB     ,X+                               ; Get from source
2A30 E1C0             (        basic.asm):01628                 CMPB    ,U+                               ; Match?
2A32 261D             (        basic.asm):01629                 BNE     evss6                             ; Mismatch
2A34 5D               (        basic.asm):01630                 TSTB                                      ; End of string?
2A35 26F7             (        basic.asm):01631                 BNE     evss3                             ; No, keep comparing
2A37                  (        basic.asm):01632         evss4:
2A37 8128             (        basic.asm):01633                 CMPA    #NE                               ; == ?
2A39 2708             (        basic.asm):01634                 BEQ     evss5                             ; Yes
2A3B 8127             (        basic.asm):01635                 CMPA    #EQ                               ; <> ?
2A3D 1026FC68         (        basic.asm):01636                 LBNE    synerr                            ; Syntax error
2A41 C801             (        basic.asm):01637                 EORB    #$01
2A43                  (        basic.asm):01638         evss5
2A43 4F               (        basic.asm):01639                 CLRA                                      ; Zero high
2A44 1F03             (        basic.asm):01640                 TFR     D,U                               ; U = value
2A46 E6E4             (        basic.asm):01641                 LDB     ,S                                ; Get Nptr
2A48 58               (        basic.asm):01642                 LSLB                                      ; x2
2A49 3062             (        basic.asm):01643                 LEAX    2,S                               ; Address Nstack
2A4B EF85             (        basic.asm):01644                 STU     B,X                               ; Nstack[Nptr] = value
2A4D 0F11             (        basic.asm):01645                 CLR     expr_type                         ; Set numeric
2A4F 20AD             (        basic.asm):01646                 BRA     evss0                             ; And proceed
2A51                  (        basic.asm):01647         evss6:
2A51 C601             (        basic.asm):01648                 LDB     #1                                ; Indicate <>
2A53 20E2             (        basic.asm):01649                 BRA     evss4                             ; And continue
                      (        basic.asm):01650         ; Numeric operations
2A55                  (        basic.asm):01651         evsn1
2A55 17FC1D           (        basic.asm):01652                 LBSR    skip                              ; Get next character
2A58 17FBFD           (        basic.asm):01653                 LBSR    is_eV_END                         ; End of expression
2A5B 1027005A         (        basic.asm):01654                 LBEQ    evsn3                             ; Exit
2A5F 3121             (        basic.asm):01655                 LEAY    1,Y                               ; Next
2A61 847F             (        basic.asm):01656                 ANDA    #$7F                              ; Remove high bit
2A63 801E             (        basic.asm):01657                 SUBA    #ADD-1                            ; 0 based priority table
2A65 A7E820           (        basic.asm):01658                 STA     32,S                              ; Save for later
2A68 CE2F9F           (        basic.asm):01659                 LDU     #priority                         ; Point to priority table
2A6B A6C6             (        basic.asm):01660                 LDA     A,U                               ; A = priority[c]
2A6D E661             (        basic.asm):01661                 LDB     1,S                               ; B = Optr
2A6F 30E816           (        basic.asm):01662                 LEAX    22,S                              ; X = Ostack
2A72 E685             (        basic.asm):01663                 LDB     B,X                               ; B = Ostack[Optr]
2A74 A1C5             (        basic.asm):01664                 CMPA    B,U                               ; priority[c] <= priority[Ostack[Optr]]?
2A76 2222             (        basic.asm):01665                 BHI     evsn2                             ; No, skip
2A78 E661             (        basic.asm):01666                 LDB     1,S                               ; B = Optr
2A7A 6A61             (        basic.asm):01667                 DEC     1,S                               ; --Optr
2A7C 30E816           (        basic.asm):01668                 LEAX    22,S                              ; X = Ostack
2A7F A685             (        basic.asm):01669                 LDA     B,X                               ; A = Ostack[Optr--]
2A81 E6E4             (        basic.asm):01670                 LDB     ,S                                ; B = Nptr
2A83 6AE4             (        basic.asm):01671                 DEC     ,S                                ; --Nptr
2A85 58               (        basic.asm):01672                 LSLB                                      ; x2
2A86 3062             (        basic.asm):01673                 LEAX    2,S                               ; X = Nstack
2A88 EE85             (        basic.asm):01674                 LDU     B,X                               ; U = Nstack[Nptr--]
2A8A C002             (        basic.asm):01675                 SUBB    #2                                ; Backup
2A8C AE85             (        basic.asm):01676                 LDX     B,X                               ; X = Nstack[Nptr]
2A8E 17026B           (        basic.asm):01677                 LBSR    arith                             ; D = arith(Ostack[Optr--],Nstack[Nptr],v)
2A91 1F03             (        basic.asm):01678                 TFR     D,U                               ; U = D
2A93 E6E4             (        basic.asm):01679                 LDB     ,S                                ; B = Nptr
2A95 58               (        basic.asm):01680                 LSLB                                      ; x2
2A96 3062             (        basic.asm):01681                 LEAX    2,S                               ; X = Nstack
2A98 EF85             (        basic.asm):01682                 STU     B,X                               ; Nstack[Nptr] = arith(...)
2A9A                  (        basic.asm):01683         evsn2
2A9A 17005A           (        basic.asm):01684                 LBSR    getval                            ; Get value
2A9D 17FF1F           (        basic.asm):01685                 LBSR    chknum                            ; Insure numeric
2AA0 1F03             (        basic.asm):01686                 TFR     D,U                               ; U = result
2AA2 6CE4             (        basic.asm):01687                 INC     ,S                                ; ++Nptr
2AA4 E6E4             (        basic.asm):01688                 LDB     ,S                                ; B = ++Nptr
2AA6 58               (        basic.asm):01689                 LSLB                                      ; x2
2AA7 3062             (        basic.asm):01690                 LEAX    2,S                               ; X = Nstack
2AA9 EF85             (        basic.asm):01691                 STU     B,X                               ; Nstack[++Nptr] = get_value()
2AAB A6E820           (        basic.asm):01692                 LDA     32,S                              ; A = c
2AAE 6C61             (        basic.asm):01693                 INC     1,S                               ; ++Optr
2AB0 E661             (        basic.asm):01694                 LDB     1,S                               ; B = Optr
2AB2 30E816           (        basic.asm):01695                 LEAX    22,S                              ; X = Ostack
2AB5 A785             (        basic.asm):01696                 STA     B,X                               ; Ostack[++Optr] = c
2AB7 209C             (        basic.asm):01697                 BRA     evsn1                             ; Do all
                      (        basic.asm):01698         ; Clean up pending operations
2AB9                  (        basic.asm):01699         evsn3
2AB9 E661             (        basic.asm):01700                 LDB     1,S                               ; Get Optr
2ABB 2722             (        basic.asm):01701                 BEQ     evse1                             ; None pending
2ABD 6A61             (        basic.asm):01702                 DEC     1,S                               ; --Optr
2ABF 30E816           (        basic.asm):01703                 LEAX    22,S                              ; X = Ostack
2AC2 A685             (        basic.asm):01704                 LDA     B,X                               ; A = Ostack[Optr--]
2AC4 E6E4             (        basic.asm):01705                 LDB     ,S                                ; B = Nptr
2AC6 6AE4             (        basic.asm):01706                 DEC     ,S                                ; --Nptr
2AC8 58               (        basic.asm):01707                 LSLB                                      ; x2
2AC9 3062             (        basic.asm):01708                 LEAX    2,S                               ; X = Nstack
2ACB EE85             (        basic.asm):01709                 LDU     B,X                               ; U = Nstack[Nptr--]
2ACD C002             (        basic.asm):01710                 SUBB    #2                                ; B = Backup
2ACF AE85             (        basic.asm):01711                 LDX     B,X                               ; X = Nstack[Nptr]
2AD1 170228           (        basic.asm):01712                 LBSR    arith                             ; arith(Ostack[Optr--],Nstack[Nptr],v)
2AD4 1F03             (        basic.asm):01713                 TFR     D,U                               ; U = D
2AD6 E6E4             (        basic.asm):01714                 LDB     ,S                                ; B = Nptr
2AD8 58               (        basic.asm):01715                 LSLB                                      ; x2
2AD9 3062             (        basic.asm):01716                 LEAX    2,S                               ; X = Nstack
2ADB EF85             (        basic.asm):01717                 STU     B,X                               ; Nstack[Nptr] = arith(...)
2ADD 20DA             (        basic.asm):01718                 BRA     evsn3                             ; Do them all
2ADF                  (        basic.asm):01719         evse1
2ADF A6A4             (        basic.asm):01720                 LDA     ,Y                                ; Get data
2AE1                  (        basic.asm):01721         evse1a
2AE1 8129             (        basic.asm):01722                 CMPA    #')'                              ; Closing brace?
2AE3 2604             (        basic.asm):01723                 BNE     evse2                             ; No
2AE5 0A12             (        basic.asm):01724                 DEC     nest                              ; --nest
2AE7 3121             (        basic.asm):01725                 LEAY    1,Y                               ; Skip ')'
2AE9                  (        basic.asm):01726         evse2
2AE9 E6E4             (        basic.asm):01727                 LDB     ,S                                ; B = Nptr
2AEB 58               (        basic.asm):01728                 LSLB                                      ; x2
2AEC 3062             (        basic.asm):01729                 LEAX    2,S                               ; X = Nstack
2AEE EC85             (        basic.asm):01730                 LDD     B,X                               ; Get value
2AF0 32E820           (        basic.asm):01731                 LEAS    32,S                              ; Release stack
2AF3 EDE4             (        basic.asm):01732                 STD     ,S                                ; Set return value
2AF5 35D6             (        basic.asm):01733                 PULS    A,B,X,U,PC                        ; Restore and return
                      (        basic.asm):01734         ;
                      (        basic.asm):01735         ; Get value element for expression
                      (        basic.asm):01736         ;
2AF7                  (        basic.asm):01737         getval
2AF7 0F11             (        basic.asm):01738                 CLR     expr_type                         ; Assume numeric
2AF9 17FB79           (        basic.asm):01739                 LBSR    skip                              ; Advance to non-blank
2AFC 17FBB2           (        basic.asm):01740                 LBSR    isdigit                           ; Is it a number?
2AFF 1027FC04         (        basic.asm):01741                 LBEQ    getnum                            ; Process number
2B03 8124             (        basic.asm):01742                 CMPA    #'$'                              ; Hex input?
2B05 1027FBFE         (        basic.asm):01743                 LBEQ    getnum                            ; Process number
2B09 3121             (        basic.asm):01744                 LEAY    1,Y                               ; Skip operator
2B0B 8128             (        basic.asm):01745                 CMPA    #'('                              ; Nesting
2B0D 1027FECC         (        basic.asm):01746                 LBEQ    evalsub                           ; New sub-expression
2B11 8121             (        basic.asm):01747                 CMPA    #'!'                              ; NOT?
2B13 2607             (        basic.asm):01748                 BNE     gval1                             ; No, try next
2B15 8DE0             (        basic.asm):01749                 BSR     getval                            ; Get value
2B17                  (        basic.asm):01750         gval0:
2B17 43               (        basic.asm):01751                 COMA                                      ; Invert high
2B18 53               (        basic.asm):01752                 COMB                                      ; Invert low
2B19 16FEA3           (        basic.asm):01753                 LBRA    chknum                            ; And exit
2B1C                  (        basic.asm):01754         gval1:
2B1C 81A0             (        basic.asm):01755                 CMPA    #SUB|128                          ; Negate
2B1E 2607             (        basic.asm):01756                 BNE     gval2                             ; No, try next
2B20 8DD5             (        basic.asm):01757                 BSR     getval                            ; Get value
2B22                  (        basic.asm):01758         getvc:
2B22 830001           (        basic.asm):01759                 SUBD    #1                                ; Adjust
2B25 20F0             (        basic.asm):01760                 BRA     gval0
2B27                  (        basic.asm):01761         gval2:
2B27 81AF             (        basic.asm):01762                 CMPA    #ASC|128                          ; Valid function?
2B29 251A             (        basic.asm):01763                 BLO     gvar1                             ; No, try variable
2B2B 80AF             (        basic.asm):01764                 SUBA    #ASC|128                          ; Convert to zero basc
2B2D 1F89             (        basic.asm):01765                 TFR     A,B                               ; B = value
2B2F 17FB69           (        basic.asm):01766                 LBSR    EXPECTB                           ; Get bracket
2B32 1701BC           (        basic.asm):01767                 LBSR    switch                            ; Execute handler
2B35 2C3D2C5C2C492C65 (        basic.asm):01768                 FDB     oASC,oABS,oNUM,oRND,oKEY,oPEEK,oLEN,oUSR
     2C802C8B2C962CC2
                      (        basic.asm):01769         ; Not an operator
2B45                  (        basic.asm):01770         gvar1:
2B45 313F             (        basic.asm):01771                 LEAY    -1,Y                              ; Backup
2B47 8E308F           (        basic.asm):01772                 LDX     #sa1                              ; Char in sa1
2B4A 17FB6D           (        basic.asm):01773                 LBSR    ISALPHA                           ; Variable?
2B4D 2665             (        basic.asm):01774                 BNE     getcval                           ; No, try character value
2B4F 17FDC2           (        basic.asm):01775                 LBSR    getvar                            ; X = variable index
2B52 2738             (        basic.asm):01776                 BEQ     gvar3                             ; Yes, handle it
                      (        basic.asm):01777         ; Character variable
2B54 CE308F           (        basic.asm):01778                 LDU     #sa1                              ; Point to SA1
2B57                  (        basic.asm):01779         gcharv:
2B57 3440             (        basic.asm):01780                 PSHS    U                                 ; Save dest
2B59 AE8931BB         (        basic.asm):01781                 LDX     char_vars,X                       ; Point to char variables
2B5D 2603             (        basic.asm):01782                 BNE     gvar2                             ; Yes
2B5F 8E2F0D           (        basic.asm):01783                 LDX     #nulls                            ; Point to null string
2B62                  (        basic.asm):01784         gvar2:
2B62 C6FF             (        basic.asm):01785                 LDB     #-1                               ; Begin with -1
2B64                  (        basic.asm):01786         gvar21:
2B64 5C               (        basic.asm):01787                 INCB                                      ; Advance
2B65 A680             (        basic.asm):01788                 LDA     ,X+                               ; Get from source
2B67 A7C0             (        basic.asm):01789                 STA     ,U+                               ; Write it
2B69 26F9             (        basic.asm):01790                 BNE     gvar21                            ; And continue
2B6B 3406             (        basic.asm):01791                 PSHS    A,B                               ; Save
2B6D 8628             (        basic.asm):01792                 LDA     #'('                              ; Indexed?
2B6F 17FB1C           (        basic.asm):01793                 LBSR    testV_NEXT                        ; Is this it?
2B72 2616             (        basic.asm):01794                 BNE     gvar22                            ; No
2B74 17FE66           (        basic.asm):01795                 LBSR    evalsub                           ; Evaluate sub-expression
2B77 17FE45           (        basic.asm):01796                 LBSR    chknum                            ; Must be numeric
2B7A 10A3E4           (        basic.asm):01797                 CMPD    ,S                                ; In range?
2B7D 1024FDEE         (        basic.asm):01798                 LBHS    dimerr                            ; No, out of range
2B81 AE62             (        basic.asm):01799                 LDX     2,S                               ; Get acc
2B83 A685             (        basic.asm):01800                 LDA     B,X                               ; Get char
2B85 5F               (        basic.asm):01801                 CLRB                                      ; Zero high
2B86 ED84             (        basic.asm):01802                 STD     ,X                                ; Set value
2B88 0C11             (        basic.asm):01803                 INC     expr_type                         ; Set character
2B8A                  (        basic.asm):01804         gvar22
2B8A 35C6             (        basic.asm):01805                 PULS    A,B,U,PC
                      (        basic.asm):01806         ; Numeric variable
2B8C                  (        basic.asm):01807         gvar3
2B8C 8628             (        basic.asm):01808                 LDA     #'('                              ; Array?
2B8E 17FAFD           (        basic.asm):01809                 LBSR    testV_NEXT                        ; Is it array?
2B91 261C             (        basic.asm):01810                 BNE     gvar4                             ; Yes, handle it
2B93 17FE47           (        basic.asm):01811                 LBSR    evalsub                           ; Get index
2B96 17FE26           (        basic.asm):01812                 LBSR    chknum                            ; Insure numeric
2B99 10A38937D3       (        basic.asm):01813                 CMPD    dim_check,X                       ; Check for overflow
2B9E 1024FDCD         (        basic.asm):01814                 LBHS    dimerr                            ; Report error
2BA2 AE8935CB         (        basic.asm):01815                 LDX     dim_vars,X                        ; Get index
2BA6 1027FDC5         (        basic.asm):01816                 LBEQ    dimerr                            ; Report error
2BAA 58               (        basic.asm):01817                 LSLB                                      ; x2
2BAB 49               (        basic.asm):01818                 ROLA                                      ; x2
2BAC EC8B             (        basic.asm):01819                 LDD     D,X                               ; Get value
2BAE 39               (        basic.asm):01820                 RTS
2BAF                  (        basic.asm):01821         gvar4
2BAF EC8933C3         (        basic.asm):01822                 LDD     num_vars,X                        ; Get value
2BB3 39               (        basic.asm):01823                 RTS
                      (        basic.asm):01824         ;
                      (        basic.asm):01825         ; Get character value (X=sa)
                      (        basic.asm):01826         ;
2BB4                  (        basic.asm):01827         getcval:
2BB4 17FACA           (        basic.asm):01828                 LBSR    GET_NEXT                          ; Get next value
2BB7 8122             (        basic.asm):01829                 CMPA    #$22                              ; Quoted string? '"'
2BB9 2613             (        basic.asm):01830                 BNE     getcv2                            ; No, try next
                      (        basic.asm):01831         ; Character string
2BBB                  (        basic.asm):01832         getcv1:
2BBB A6A0             (        basic.asm):01833                 LDA     ,Y+                               ; Get value
2BBD 1027FAE8         (        basic.asm):01834                 LBEQ    synerr                            ; Error
2BC1 A780             (        basic.asm):01835                 STA     ,X+                               ; Write to output
2BC3 8122             (        basic.asm):01836                 CMPA    #$22                              ; End of string? '"'
2BC5 26F4             (        basic.asm):01837                 BNE     getcv1                            ; Yes, exit
2BC7 6F1F             (        basic.asm):01838                 CLR     -1,X                              ; Zero terminate
2BC9 8601             (        basic.asm):01839                 LDA     #1                                ; Character type
2BCB 9711             (        basic.asm):01840                 STA     expr_type                         ; Set type
2BCD 39               (        basic.asm):01841                 RTS
2BCE                  (        basic.asm):01842         getcv2:
2BCE 1F13             (        basic.asm):01843                 TFR     X,U                               ; U = output
2BD0 17FAE7           (        basic.asm):01844                 LBSR    ISALPHA                           ; Variable?
2BD3 260C             (        basic.asm):01845                 BNE     getcv3                            ; No, try next
2BD5 313F             (        basic.asm):01846                 LEAY    -1,Y                              ; Backup
2BD7 17FD3A           (        basic.asm):01847                 LBSR    getvar                            ; X = variable index
2BDA 1027FACB         (        basic.asm):01848                 LBEQ    synerr                            ; Report error
2BDE 16FF76           (        basic.asm):01849                 LBRA    gcharv                            ; Get value into [U]
2BE1                  (        basic.asm):01850         getcv3:
2BE1 81AD             (        basic.asm):01851                 CMPA    #CHR|128                          ; Convert number into character
2BE3 260D             (        basic.asm):01852                 BNE     getcv4                            ; No, try next
2BE5 17FDF2           (        basic.asm):01853                 LBSR    evalbra                           ; Get subexpression
2BE8 17FDD4           (        basic.asm):01854                 LBSR    chknum                            ; Insure numeric
2BEB 0C11             (        basic.asm):01855                 INC     expr_type                         ; Set character
2BED E784             (        basic.asm):01856                 STB     ,X                                ; Save it
2BEF 6F01             (        basic.asm):01857                 CLR     1,X                               ; Zero terminate
2BF1 39               (        basic.asm):01858                 RTS
2BF2                  (        basic.asm):01859         getcv4:
2BF2 81AE             (        basic.asm):01860                 CMPA    #STR|128                          ; Convert string to number
2BF4 1026FAB1         (        basic.asm):01861                 LBNE    synerr                            ; Report error
2BF8 17FDDF           (        basic.asm):01862                 LBSR    evalbra                           ; Get sub-expression
2BFB 17FDC1           (        basic.asm):01863                 LBSR    chknum                            ; Insure numeric
2BFE 0C11             (        basic.asm):01864                 INC     expr_type                         ; Set character
                      (        basic.asm):01865         ;
                      (        basic.asm):01866         ; Write number(D) into string(U)
                      (        basic.asm):01867         ;
2C00                  (        basic.asm):01868         uns2str
2C00 3436             (        basic.asm):01869                 PSHS    A,B,X,Y                           ; Save value
2C02 108E0000         (        basic.asm):01870                 LDY     #0                                ; Zero counter
2C06 1F01             (        basic.asm):01871                 TFR     D,X                               ; X = number
2C08 2016             (        basic.asm):01872                 BRA     num2s1                            ; Write it
2C0A                  (        basic.asm):01873         num2str
2C0A 3436             (        basic.asm):01874                 PSHS    A,B,X,Y                           ; Save value
2C0C 108E0000         (        basic.asm):01875                 LDY     #0                                ; Reset count
2C10 1F01             (        basic.asm):01876                 TFR     D,X                               ; X = value
2C12 4D               (        basic.asm):01877                 TSTA                                      ; Negative?
2C13 2A0B             (        basic.asm):01878                 BPL     num2s1                            ; Not negative
2C15 43               (        basic.asm):01879                 COMA                                      ; Invert
2C16 53               (        basic.asm):01880                 COMB                                      ; Invert
2C17 C30001           (        basic.asm):01881                 ADDD    #1                                ; Negate
2C1A 1F01             (        basic.asm):01882                 TFR     D,X                               ; X = value
2C1C 862D             (        basic.asm):01883                 LDA     #'-'                              ; Negative indicator
2C1E A7C0             (        basic.asm):01884                 STA     ,U+                               ; Write it
2C20                  (        basic.asm):01885         num2s1
2C20 CC000A           (        basic.asm):01886                 LDD     #10                               ; / 10
2C23 17FB42           (        basic.asm):01887                 LBSR    xDIV                              ; X = X / D
2C26 3404             (        basic.asm):01888                 PSHS    B                                 ; Save result
2C28 3121             (        basic.asm):01889                 LEAY    1,Y                               ; Advance
2C2A 8C0000           (        basic.asm):01890                 CMPX    #0                                ; More to go?
2C2D 26F1             (        basic.asm):01891                 BNE     num2s1                            ; Do them all
2C2F                  (        basic.asm):01892         num2s2
2C2F 3502             (        basic.asm):01893                 PULS    A                                 ; Get result
2C31 8B30             (        basic.asm):01894                 ADDA    #'0'                              ; Convert to ASCII
2C33 A7C0             (        basic.asm):01895                 STA     ,U+                               ; Write to output
2C35 313F             (        basic.asm):01896                 LEAY    -1,Y                              ; Reduce count
2C37 26F6             (        basic.asm):01897                 BNE     num2s2                            ; Do them all
2C39 6FC4             (        basic.asm):01898                 CLR     ,U                                ; Zero
2C3B 35B6             (        basic.asm):01899                 PULS    A,B,X,Y,PC                        ; Restore & return
                      (        basic.asm):01900         ; Numeric function handlers
2C3D                  (        basic.asm):01901         oASC:
2C3D 17FD9D           (        basic.asm):01902                 LBSR    evalsub                           ; Get sub-expression
2C40 17FD87           (        basic.asm):01903                 LBSR    chkchr                            ; Insure character
2C43 D68F             (        basic.asm):01904                 LDB     sa1                               ; Get first character
2C45 4F               (        basic.asm):01905                 CLRA                                      ; Zero high
2C46 9711             (        basic.asm):01906                 STA     expr_type                         ; Numeric result
2C48 39               (        basic.asm):01907                 RTS
2C49                  (        basic.asm):01908         oNUM:
2C49 17FD91           (        basic.asm):01909                 LBSR    evalsub                           ; Evaluate sub-expression
2C4C 17FD7B           (        basic.asm):01910                 LBSR    chkchr                            ; Insure character
2C4F 3420             (        basic.asm):01911                 PSHS    Y                                 ; Save Y
2C51 108E308F         (        basic.asm):01912                 LDY     #sa1                              ; Point to string accumulator
2C55 17FAAF           (        basic.asm):01913                 LBSR    getnum                            ; Get the number
2C58 0F11             (        basic.asm):01914                 CLR     expr_type                         ; Numeric result
2C5A 35A0             (        basic.asm):01915                 PULS    Y,PC                              ; Restore & return
2C5C                  (        basic.asm):01916         oABS:
2C5C 17FD7E           (        basic.asm):01917                 LBSR    evalsub                           ; Evaluate sub-expression
2C5F 4D               (        basic.asm):01918                 TSTA                                      ; Check for negative
2C60 2A31             (        basic.asm):01919                 BPL     getvno                            ; Number only
2C62 16FEBD           (        basic.asm):01920                 LBRA    getvc                             ; Negate if so
2C65                  (        basic.asm):01921         oRND:
2C65 17FD75           (        basic.asm):01922                 LBSR    evalsub                           ; Eval sub-expression
2C68 3406             (        basic.asm):01923                 PSHS    A,B                               ; Save result
2C6A DC0A             (        basic.asm):01924                 LDD     randseed                          ; Get random seed
2C6C 8E358D           (        basic.asm):01925                 LDX     #13709                            ; First calculation
2C6F 17FAD6           (        basic.asm):01926                 LBSR    xMUL                              ; Perform it
2C72 C33619           (        basic.asm):01927                 ADDD    #13849                            ; Add second
2C75 DD0A             (        basic.asm):01928                 STD     randseed                          ; Resave seed
2C77 1F01             (        basic.asm):01929                 TFR     D,X                               ; Get result
2C79 3506             (        basic.asm):01930                 PULS    A,B                               ; Get value
2C7B 17FAEA           (        basic.asm):01931                 LBSR    xDIV                              ; D = X / D
2C7E 2013             (        basic.asm):01932                 BRA     getvno                            ; Number only
2C80                  (        basic.asm):01933         oKEY:
2C80 8629             (        basic.asm):01934                 LDA     #')'                              ; Looking for bracket
2C82 17FA1C           (        basic.asm):01935                 LBSR    expect                            ; Test for it
2C85 D614             (        basic.asm):01936                 LDB     keypress                          ; Get last keystroke
2C87 4F               (        basic.asm):01937                 CLRA                                      ; Zero high
2C88 9714             (        basic.asm):01938                 STA     keypress                          ; Reset
2C8A 39               (        basic.asm):01939                 RTS
2C8B                  (        basic.asm):01940         oPEEK:
2C8B 17FD4F           (        basic.asm):01941                 LBSR    evalsub                           ; Get value
2C8E 1F01             (        basic.asm):01942                 TFR     D,X                               ; X = result
2C90 E684             (        basic.asm):01943                 LDB     ,X                                ; Get value
2C92 4F               (        basic.asm):01944                 CLRA                                      ; Zero high
2C93                  (        basic.asm):01945         getvno:
2C93 16FD29           (        basic.asm):01946                 LBRA    chknum                            ; Insure numeric
                      (        basic.asm):01947         ; Length of variable
2C96                  (        basic.asm):01948         oLEN:
2C96 17FC7B           (        basic.asm):01949                 LBSR    getvar                            ; Get variable
2C99 8629             (        basic.asm):01950                 LDA     #')'                              ; Terminator
2C9B 17FA03           (        basic.asm):01951                 LBSR    expect                            ; Expect it
2C9E 0D11             (        basic.asm):01952                 TST     expr_type                         ; Type of variable
2CA0 260F             (        basic.asm):01953                 BNE     olen1                             ; Character
2CA2 EC8935CB         (        basic.asm):01954                 LDD     dim_vars,X                        ; Defined?
2CA6 1027FCC5         (        basic.asm):01955                 LBEQ    dimerr                            ; No - error
2CAA EC8937D3         (        basic.asm):01956                 LDD     dim_check,X                       ; Get length
2CAE                  (        basic.asm):01957         olen0:
2CAE 0F11             (        basic.asm):01958                 CLR     expr_type                         ; Numeric
2CB0 39               (        basic.asm):01959                 RTS
2CB1                  (        basic.asm):01960         olen1:
2CB1 4F               (        basic.asm):01961                 CLRA                                      ; Zero high
2CB2 5F               (        basic.asm):01962                 CLRB                                      ; Zero low
2CB3 AE8931BB         (        basic.asm):01963                 LDX     char_vars,X                       ; Get pointer
2CB7 27F5             (        basic.asm):01964                 BEQ     olen0                             ; Not defined
2CB9                  (        basic.asm):01965         olen2
2CB9 6D80             (        basic.asm):01966                 TST     ,X+                               ; End of string?
2CBB 27F1             (        basic.asm):01967                 BEQ     olen0                             ; Yes, stop
2CBD C30001           (        basic.asm):01968                 ADDD    #1                                ; Advance
2CC0 20F7             (        basic.asm):01969                 BRA     olen2                             ; And continue
                      (        basic.asm):01970         ; User supplied subroutine
2CC2                  (        basic.asm):01971         oUSR:
2CC2 17FD18           (        basic.asm):01972                 LBSR    evalsub                           ; Get address
2CC5 17FCF7           (        basic.asm):01973                 LBSR    chknum                            ; Insure numeric
2CC8 EDE3             (        basic.asm):01974                 STD     ,--S                              ; Save
2CCA 10DF0E           (        basic.asm):01975                 STS     temp1                             ; Save stack pointer
2CCD                  (        basic.asm):01976         ousr1:
2CCD 17F9BC           (        basic.asm):01977                 LBSR    tnc                               ; Aother
2CD0 2610             (        basic.asm):01978                 BNE     ousr3                             ; No
2CD2 0A12             (        basic.asm):01979                 DEC     nest                              ; Clear ','
2CD4 17FD06           (        basic.asm):01980                 LBSR    evalsub                           ; Get value
2CD7 0D11             (        basic.asm):01981                 TST     expr_type                         ; Numeric?
2CD9 2703             (        basic.asm):01982                 BEQ     ousr2                             ; Yes, pass result
2CDB CC308F           (        basic.asm):01983                 LDD     #sa1                              ; Point to string acc
2CDE                  (        basic.asm):01984         ousr2:
2CDE EDE3             (        basic.asm):01985                 STD     ,--S                              ; Save value
2CE0 20EB             (        basic.asm):01986                 BRA     ousr1                             ; Do them all
2CE2                  (        basic.asm):01987         ousr3:
2CE2 9E0E             (        basic.asm):01988                 LDX     temp1                             ; Get value
2CE4 3420             (        basic.asm):01989                 PSHS    Y                                 ; Save Y
2CE6 AD94             (        basic.asm):01990                 JSR     [,X]                              ; Execute handler
2CE8 3520             (        basic.asm):01991                 PULS    Y                                 ; Restore Y
2CEA 10DE0E           (        basic.asm):01992                 LDS     temp1                             ; Fix stack
2CED 0F11             (        basic.asm):01993                 CLR     expr_type                         ; Returns numeric
2CEF 3590             (        basic.asm):01994                 PULS    X,PC                              ; Clean and return
                      (        basic.asm):01995         ;
                      (        basic.asm):01996         ; Execute handler from following table via (A)
                      (        basic.asm):01997         ;
2CF1                  (        basic.asm):01998         switch:
2CF1 3410             (        basic.asm):01999                 PSHS    X                                 ; Save registers
2CF3 AE62             (        basic.asm):02000                 LDX     2,S                               ; Get PC
2CF5 3A               (        basic.asm):02001                 ABX                                       ; Offset
2CF6 AE85             (        basic.asm):02002                 LDX     B,X                               ; Get value
2CF8 AF62             (        basic.asm):02003                 STX     2,S                               ; Set new PC
2CFA 3590             (        basic.asm):02004                 PULS    X,PC                              ; Restore & Branch
                      (        basic.asm):02005         ;
                      (        basic.asm):02006         ; Perform an arithmetic operation (X)(A)(U)
                      (        basic.asm):02007         ;
2CFC                  (        basic.asm):02008         arith:
2CFC 4A               (        basic.asm):02009                 DECA                                      ; Convert to zero offset
2CFD 810D             (        basic.asm):02010                 CMPA    #GT-ADD                           ; Is it in range
2CFF 1022F9A6         (        basic.asm):02011                 LBHI    synerr                            ; No, report error
2D03 DF0C             (        basic.asm):02012                 STU     temp                              ; Set secondary operand
2D05 3450             (        basic.asm):02013                 PSHS    X,U                               ; Save X & reserve room
2D07 48               (        basic.asm):02014                 LSLA                                      ; x2
2D08 8E2D11           (        basic.asm):02015                 LDX     #atable                           ; Point to table
2D0B AE86             (        basic.asm):02016                 LDX     A,X                               ; Get offset
2D0D AF62             (        basic.asm):02017                 STX     2,S                               ; Set return address
2D0F 3586             (        basic.asm):02018                 PULS    A,B,PC                            ; D = result * Launch
2D11                  (        basic.asm):02019         atable:
2D11 2D2D2D302D332D38 (        basic.asm):02020                 FDB     oADD,oSUB,oMUL,oDIV,oMOD,oAND
     2D3D2D44
2D1D 2D492D4E2D532D5B (        basic.asm):02021                 FDB     oOR,oXOR,oEQ,oNE,oLE,oLT,oGE,oGT
     2D642D6B2D722D79
2D2D                  (        basic.asm):02022         oADD
2D2D D30C             (        basic.asm):02023                 ADDD    temp
2D2F 39               (        basic.asm):02024                 RTS
2D30                  (        basic.asm):02025         oSUB
2D30 930C             (        basic.asm):02026                 SUBD    temp
2D32 39               (        basic.asm):02027                 RTS
2D33                  (        basic.asm):02028         oMUL
2D33 1F31             (        basic.asm):02029                 TFR     U,X                               ; X = op2
2D35 16FA10           (        basic.asm):02030                 LBRA    xMUL                              ; D = X*D
2D38                  (        basic.asm):02031         oDIV
2D38 8D03             (        basic.asm):02032                 BSR     oMOD                              ; X=X/D
2D3A 1F10             (        basic.asm):02033                 TFR     X,D                               ; D=X/D
2D3C 39               (        basic.asm):02034                 RTS
2D3D                  (        basic.asm):02035         oMOD
2D3D 1F01             (        basic.asm):02036                 TFR     D,X                               ; X = op1
2D3F DC0C             (        basic.asm):02037                 LDD     temp                              ; Get value
2D41 16FA24           (        basic.asm):02038                 LBRA    xDIV                              ; X = X/D; d=X%D
2D44                  (        basic.asm):02039         oAND
2D44 940C             (        basic.asm):02040                 ANDA    temp
2D46 D40D             (        basic.asm):02041                 ANDB    temp+1
2D48 39               (        basic.asm):02042                 RTS
2D49                  (        basic.asm):02043         oOR
2D49 9A0C             (        basic.asm):02044                 ORA     temp
2D4B DA0D             (        basic.asm):02045                 ORB     temp+1
2D4D 39               (        basic.asm):02046                 RTS
2D4E                  (        basic.asm):02047         oXOR
2D4E 980C             (        basic.asm):02048                 EORA    temp
2D50 D80D             (        basic.asm):02049                 EORB    temp+1
2D52 39               (        basic.asm):02050                 RTS
2D53                  (        basic.asm):02051         oEQ
2D53 10930C           (        basic.asm):02052                 CMPD    temp
2D56 2708             (        basic.asm):02053                 BEQ     cret1
2D58                  (        basic.asm):02054         cret0
2D58 4F               (        basic.asm):02055                 CLRA
2D59 5F               (        basic.asm):02056                 CLRB
2D5A                  (        basic.asm):02057         cretx
2D5A 39               (        basic.asm):02058                 RTS
2D5B                  (        basic.asm):02059         oNE
2D5B 10930C           (        basic.asm):02060                 CMPD    temp
2D5E 27F8             (        basic.asm):02061                 BEQ     cret0
2D60                  (        basic.asm):02062         cret1
2D60 CC0001           (        basic.asm):02063                 LDD     #1
2D63 39               (        basic.asm):02064                 RTS
2D64                  (        basic.asm):02065         oLE
2D64 10930C           (        basic.asm):02066                 CMPD    temp
2D67 2FF7             (        basic.asm):02067                 BLE     cret1                             ; LE
2D69 20ED             (        basic.asm):02068                 BRA     cret0
2D6B                  (        basic.asm):02069         oLT
2D6B 10930C           (        basic.asm):02070                 CMPD    temp
2D6E 2DF0             (        basic.asm):02071                 BLT     cret1                             ; LO
2D70 20E6             (        basic.asm):02072                 BRA     cret0
2D72                  (        basic.asm):02073         oGE
2D72 10930C           (        basic.asm):02074                 CMPD    temp
2D75 2CE9             (        basic.asm):02075                 BGE     cret1                             ; HS
2D77 20DF             (        basic.asm):02076                 BRA     cret0
2D79                  (        basic.asm):02077         oGT
2D79 10930C           (        basic.asm):02078                 CMPD    temp
2D7C 2EE2             (        basic.asm):02079                 BGT     cret1                             ; HI
2D7E 20D8             (        basic.asm):02080                 BRA     cret0
                      (        basic.asm):02081         ;
                      (        basic.asm):02082         ; Write number(D)
                      (        basic.asm):02083         ;
2D80                  (        basic.asm):02084         putn
2D80 3450             (        basic.asm):02085                 PSHS    X,U                               ; Save U
2D82 CE302B           (        basic.asm):02086                 LDU     #buffer                           ; Point to buffer
2D85 1F31             (        basic.asm):02087                 TFR     U,X                               ; X = output
2D87 17FE76           (        basic.asm):02088                 LBSR    uns2str                           ; Get number
2D8A 8D0C             (        basic.asm):02089                 BSR     puts                              ; Output
2D8C 35D0             (        basic.asm):02090                 PULS    X,U,PC                            ; Restore & return
                      (        basic.asm):02091         ;
                      (        basic.asm):02092         ; Write message(PC)
                      (        basic.asm):02093         ;
2D8E                  (        basic.asm):02094         putm:
2D8E 3410             (        basic.asm):02095                 PSHS    X                                 ; Save X
2D90 AE62             (        basic.asm):02096                 LDX     2,S                               ; Get PC
2D92 8D04             (        basic.asm):02097                 BSR     puts                              ; Write it
2D94 AF62             (        basic.asm):02098                 STX     2,S                               ; Resave
2D96 3590             (        basic.asm):02099                 PULS    X,PC                              ; Restore and return
                      (        basic.asm):02100         ;
                      (        basic.asm):02101         ; Write string(X)
                      (        basic.asm):02102         ;
2D98                  (        basic.asm):02103         puts:
2D98 A680             (        basic.asm):02104                 LDA     ,X+                               ; Get char
2D9A 27BE             (        basic.asm):02105                 BEQ     cretx                             ; End of string
2D9C 8D42             (        basic.asm):02106                 BSR     putc                              ; Write it
2D9E 20F8             (        basic.asm):02107                 BRA     puts                              ; And continue
                      (        basic.asm):02108         ;
                      (        basic.asm):02109         ; Output space
                      (        basic.asm):02110         ;
2DA0                  (        basic.asm):02111         space:
2DA0 8620             (        basic.asm):02112                 LDA     #' '                              ; Get space
2DA2 203C             (        basic.asm):02113                 BRA     putc                              ; Output
                      (        basic.asm):02114         
                      (        basic.asm):02115         
                      (        basic.asm):02116         ;
                      (        basic.asm):02117         ; Get string
                      (        basic.asm):02118         ;
2DA4                  (        basic.asm):02119         gets:
2DA4 3440             (        basic.asm):02120                 PSHS    U                                 ; Save U
2DA6 DE15             (        basic.asm):02121                 LDU     file                              ; Input from file?
2DA8 2657             (        basic.asm):02122                 BNE     getsf
2DAA 5F               (        basic.asm):02123                 CLRB                                      ; Zero offset
2DAB                  (        basic.asm):02124         gets1
2DAB 3F22             (        basic.asm):02125                 FCB     $3F,34                            ; Read console device
2DAD 8103             (        basic.asm):02126                 CMPA    #$03                              ; Ctrl-C
2DAF 1027F5B5         (        basic.asm):02127                 LBEQ    break                             ; Exit
2DB3 8108             (        basic.asm):02128                 CMPA    #$08                              ; Backspace?
2DB5 2713             (        basic.asm):02129                 BEQ     gets2                             ; Handle it
2DB7 817F             (        basic.asm):02130                 CMPA    #$7F                              ; Delete?
2DB9 270F             (        basic.asm):02131                 BEQ     gets2                             ; Handle it
2DBB 810D             (        basic.asm):02132                 CMPA    #$0D                              ; Carriage return?
2DBD 2717             (        basic.asm):02133                 BEQ     gets3                             ; Handle it
2DBF C163             (        basic.asm):02134                 CMPB    #99                               ; Are we over?
2DC1 24E8             (        basic.asm):02135                 BHS     gets1                             ; Don't accept
2DC3 A7A5             (        basic.asm):02136                 STA     B,Y                               ; Write it
2DC5 8D19             (        basic.asm):02137                 BSR     putc                              ; Echo
2DC7 5C               (        basic.asm):02138                 INCB                                      ; Advance
2DC8 20E1             (        basic.asm):02139                 BRA     gets1
2DCA                  (        basic.asm):02140         gets2
2DCA 5D               (        basic.asm):02141                 TSTB                                      ; At start?
2DCB 27DE             (        basic.asm):02142                 BEQ     gets1                             ; Ignore
2DCD 8DBF             (        basic.asm):02143                 BSR     putm                              ; Output message
2DCF 08200800         (        basic.asm):02144                 FCB     8,' ',8,0                         ; Wipe character
2DD3 5A               (        basic.asm):02145                 DECB                                      ; Backup
2DD4 20D5             (        basic.asm):02146                 BRA     gets1                             ; And proceed
2DD6                  (        basic.asm):02147         gets3:
2DD6 6FA5             (        basic.asm):02148                 CLR     B,Y                               ; Zero data
2DD8 3540             (        basic.asm):02149                 PULS    U                                 ; Restore U
                      (        basic.asm):02150         ;
                      (        basic.asm):02151         ; Write LFCR
                      (        basic.asm):02152         ;
2DDA                  (        basic.asm):02153         lfcr:
2DDA 860A             (        basic.asm):02154                 LDA     #$0A                              ; LF
2DDC 8D02             (        basic.asm):02155                 BSR     putc                              ; Output
2DDE 860D             (        basic.asm):02156                 LDA     #$0D                              ; CR
                      (        basic.asm):02157         ;
                      (        basic.asm):02158         ; Write character
                      (        basic.asm):02159         ;
2DE0                  (        basic.asm):02160         putc
2DE0 3446             (        basic.asm):02161                 PSHS    A,B,U                             ; Save registers
2DE2 DE15             (        basic.asm):02162                 LDU     file                              ; Get handle
2DE4 270E             (        basic.asm):02163                 BEQ     putc1                             ; Console
2DE6 11830008         (        basic.asm):02164                 CMPU    #8                                ; 1-8 = device
2DEA 230C             (        basic.asm):02165                 BLS     putc2                             ; Device
2DEC 810A             (        basic.asm):02166                 CMPA    #$0A                              ; LF?
2DEE 270F             (        basic.asm):02167                 BEQ     putc3                             ; Don't write
2DF0 3F3D             (        basic.asm):02168                 FCB     $3F,61                            ; Write file
2DF2 35C6             (        basic.asm):02169                 PULS    A,B,U,PC                          ; Restore & return
2DF4                  (        basic.asm):02170         putc1
2DF4 3F21             (        basic.asm):02171                 FCB     $3F,33                            ; Write console
2DF6 35C6             (        basic.asm):02172                 PULS    A,B,U,PC                          ; Restore & return
2DF8                  (        basic.asm):02173         putc2
2DF8 1F30             (        basic.asm):02174                 TFR     U,D                               ; D = device
2DFA 5A               (        basic.asm):02175                 DECB                                      ; Backup
2DFB A6E4             (        basic.asm):02176                 LDA     ,S                                ; Get char back
2DFD 3F24             (        basic.asm):02177                 FCB     $3F,36                            ; Write device
2DFF                  (        basic.asm):02178         putc3
2DFF 35C6             (        basic.asm):02179                 PULS    A,B,U,PC                          ; Restore & return
                      (        basic.asm):02180         ;
                      (        basic.asm):02181         ; Reading from file or device
2E01                  (        basic.asm):02182         getsf:
2E01 5F               (        basic.asm):02183                 CLRB                                      ; Zero low
2E02                  (        basic.asm):02184         getsf1:
2E02 11830008         (        basic.asm):02185                 CMPU    #8                                ; Device?
2E06 2311             (        basic.asm):02186                 BLS     getsf3                            ; Reading device
2E08 3F3B             (        basic.asm):02187                 FCB     $3F,59                            ; Read file
2E0A 2618             (        basic.asm):02188                 BNE     getsf4                            ; EOF
2E0C                  (        basic.asm):02189         getsf2
2E0C 810D             (        basic.asm):02190                 CMPA    #$0D                              ; Do we have space?
2E0E 2714             (        basic.asm):02191                 BEQ     getsf4                            ; EOL
2E10 C163             (        basic.asm):02192                 CMPB    #99                               ; Do we have space?
2E12 24EE             (        basic.asm):02193                 BHS     getsf1                            ; No, don't save
2E14 A7A5             (        basic.asm):02194                 STA     B,Y                               ; Save in buffer
2E16 5C               (        basic.asm):02195                 INCB                                      ; Advance
2E17 20E9             (        basic.asm):02196                 BRA     getsf1                            ; And proceed
2E19                  (        basic.asm):02197         getsf3
2E19 3404             (        basic.asm):02198                 PSHS    B                                 ; Save index
2E1B 1F30             (        basic.asm):02199                 TFR     U,D                               ; D = device
2E1D 5A               (        basic.asm):02200                 DECB                                      ; 0 origin
2E1E 3F25             (        basic.asm):02201                 FCB     $3F,37                            ; Read device
2E20 3504             (        basic.asm):02202                 PULS    B                                 ; Restore B
2E22 20E8             (        basic.asm):02203                 BRA     getsf2                            ; And proceed
2E24                  (        basic.asm):02204         getsf4
2E24 6FA5             (        basic.asm):02205                 CLR     B,Y                               ; Zero terminate
2E26 35C0             (        basic.asm):02206                 PULS    U,PC                              ; Restore * return
                      (        basic.asm):02207         ;
                      (        basic.asm):02208         ; Test for characte from console
                      (        basic.asm):02209         ;
2E28                  (        basic.asm):02210         testc
2E28 3F23             (        basic.asm):02211                 FCB     $3F,35                            ; Test for char
2E2A 2702             (        basic.asm):02212                 BEQ     testc1                            ; We have one
2E2C 4F               (        basic.asm):02213                 CLRA                                      ; Return zero
2E2D 39               (        basic.asm):02214                 RTS
2E2E                  (        basic.asm):02215         testc1
2E2E 4D               (        basic.asm):02216                 TSTA                                      ; Clear Z
2E2F 39               (        basic.asm):02217                 RTS
                      (        basic.asm):02218         
                      (        basic.asm):02219         ;
                      (        basic.asm):02220         ; Table of BASIC reserved words
                      (        basic.asm):02221         ;
2E30                  (        basic.asm):02222         rwordz:
2E30 00               (        basic.asm):02223                 FCB     0                                 ; Marker for LIST
2E31                  (        basic.asm):02224         rwords:
2E31 4C455400         (        basic.asm):02225                 FCN     'LET'
2E35 4558495400       (        basic.asm):02226                 FCN     'EXIT'
2E3A 4C49535400       (        basic.asm):02227                 FCN     'LIST'
2E3F 4E455700         (        basic.asm):02228                 FCN     'NEW'
2E43 52554E00         (        basic.asm):02229                 FCN     'RUN'
2E47 434C45415200     (        basic.asm):02230                 FCN     'CLEAR'
2E4D 474F53554200     (        basic.asm):02231                 FCN     'GOSUB'
2E53 474F544F00       (        basic.asm):02232                 FCN     'GOTO'
2E58 52455455524E00   (        basic.asm):02233                 FCN     'RETURN'
2E5F 5052494E5400     (        basic.asm):02234                 FCN     'PRINT'
2E65 464F5200         (        basic.asm):02235                 FCN     'FOR'
2E69 4E45585400       (        basic.asm):02236                 FCN     'NEXT'
2E6E 494600           (        basic.asm):02237                 FCN     'IF'
2E71 4C494600         (        basic.asm):02238                 FCN     'LIF'
2E75 52454D00         (        basic.asm):02239                 FCN     'REM'
2E79 53544F5000       (        basic.asm):02240                 FCN     'STOP'
2E7E 454E4400         (        basic.asm):02241                 FCN     'END'
2E82 494E50555400     (        basic.asm):02242                 FCN     'INPUT'
2E88 44494D00         (        basic.asm):02243                 FCN     'DIM'
2E8C 4F5244455200     (        basic.asm):02244                 FCN     'ORDER'
2E92 5245414400       (        basic.asm):02245                 FCN     'READ'
2E97 4441544100       (        basic.asm):02246                 FCN     'DATA'
2E9C 504F4B4500       (        basic.asm):02247                 FCN     'POKE'
2EA1 5341564500       (        basic.asm):02248                 FCN     'SAVE'
2EA6 4C4F414400       (        basic.asm):02249                 FCN     'LOAD'
2EAB 4F50454E00       (        basic.asm):02250                 FCN     'OPEN'
2EB0 434C4F534500     (        basic.asm):02251                 FCN     'CLOSE'
2EB6 544F00           (        basic.asm):02252                 FCN     'TO'
2EB9 5354455000       (        basic.asm):02253                 FCN     'STEP'
2EBE 5448454E00       (        basic.asm):02254                 FCN     'THEN'
2EC3 2B00             (        basic.asm):02255                 FCN     '+'
2EC5 2D00             (        basic.asm):02256                 FCN     '-'
2EC7 2A00             (        basic.asm):02257                 FCN     '*'
2EC9 2F00             (        basic.asm):02258                 FCN     '/'
2ECB 2500             (        basic.asm):02259                 FCN     '%'
2ECD 2600             (        basic.asm):02260                 FCN     '&'
2ECF 7C00             (        basic.asm):02261                 FCN     '|'
2ED1 5E00             (        basic.asm):02262                 FCN     '^'
2ED3 3D00             (        basic.asm):02263                 FCN     '='
2ED5 3C3E00           (        basic.asm):02264                 FCN     '<>'
2ED8 3C3D00           (        basic.asm):02265                 FCN     '<='
2EDB 3C00             (        basic.asm):02266                 FCN     '<'
2EDD 3E3D00           (        basic.asm):02267                 FCN     '>='
2EE0 3E00             (        basic.asm):02268                 FCN     '>'
2EE2 4348522400       (        basic.asm):02269                 FCN     'CHR$'
2EE7 5354522400       (        basic.asm):02270                 FCN     'STR$'
2EEC 41534300         (        basic.asm):02271                 FCN     'ASC'
2EF0 41425300         (        basic.asm):02272                 FCN     'ABS'
2EF4 4E554D00         (        basic.asm):02273                 FCN     'NUM'
2EF8 524E4400         (        basic.asm):02274                 FCN     'RND'
2EFC 4B455900         (        basic.asm):02275                 FCN     'KEY'
2F00 5045454B00       (        basic.asm):02276                 FCN     'PEEK'
2F05 4C454E00         (        basic.asm):02277                 FCN     'LEN'
2F09 55535200         (        basic.asm):02278                 FCN     'USR'
2F0D                  (        basic.asm):02279         nulls:
2F0D 00               (        basic.asm):02280                 FCB     0
     0001             (        basic.asm):02281         LET             EQU 1
     0002             (        basic.asm):02282         EXIT            EQU LET+1
     0003             (        basic.asm):02283         LIST            EQU EXIT+1
     0004             (        basic.asm):02284         NEW             EQU LIST+1
     0005             (        basic.asm):02285         RUN             EQU NEW+1
     0006             (        basic.asm):02286         CLEAR           EQU RUN+1
     0007             (        basic.asm):02287         GOSUB           EQU CLEAR+1
     0008             (        basic.asm):02288         GOTO            EQU GOSUB+1
     0009             (        basic.asm):02289         RETURN          EQU GOTO+1
     000A             (        basic.asm):02290         PRINT           EQU RETURN+1
     000B             (        basic.asm):02291         FOR             EQU PRINT+1
     000C             (        basic.asm):02292         NEXT            EQU FOR+1
     000D             (        basic.asm):02293         IF              EQU NEXT+1
     000E             (        basic.asm):02294         LIF             EQU IF+1
     000F             (        basic.asm):02295         REM             EQU LIF+1
     0010             (        basic.asm):02296         STOP            EQU REM+1
     0011             (        basic.asm):02297         END             EQU STOP+1
     0012             (        basic.asm):02298         INPUT           EQU END+1
     0013             (        basic.asm):02299         DIM             EQU INPUT+1
     0014             (        basic.asm):02300         ORDER           EQU DIM+1
     0015             (        basic.asm):02301         READ            EQU ORDER+1
     0016             (        basic.asm):02302         DATA            EQU READ+1
     0017             (        basic.asm):02303         POKE            EQU DATA+1
     0018             (        basic.asm):02304         SAVE            EQU POKE+1
     0019             (        basic.asm):02305         LOAD            EQU SAVE+1
     001A             (        basic.asm):02306         OPEN            EQU LOAD+1
     001B             (        basic.asm):02307         CLOSE           EQU OPEN+1
     001C             (        basic.asm):02308         TO              EQU CLOSE+1
     001D             (        basic.asm):02309         STEP            EQU TO+1
     001E             (        basic.asm):02310         THEN            EQU STEP+1
                      (        basic.asm):02311         ; Operators
     001F             (        basic.asm):02312         ADD             EQU THEN+1                        ; Also used as marker
     0020             (        basic.asm):02313         SUB             EQU ADD+1
     0021             (        basic.asm):02314         MUL             EQU SUB+1
     0022             (        basic.asm):02315         DIV             EQU MUL+1
     0023             (        basic.asm):02316         MOD             EQU DIV+1
     0024             (        basic.asm):02317         AND             EQU MOD+1
     0025             (        basic.asm):02318         OR              EQU AND+1
     0026             (        basic.asm):02319         XOR             EQU OR+1
     0027             (        basic.asm):02320         EQ              EQU XOR+1
     0028             (        basic.asm):02321         NE              EQU EQ+1
     0029             (        basic.asm):02322         LE              EQU NE+1
     002A             (        basic.asm):02323         LT              EQU LE+1
     002B             (        basic.asm):02324         GE              EQU LT+1
     002C             (        basic.asm):02325         GT              EQU GE+1
                      (        basic.asm):02326         ; Character Functions
     002D             (        basic.asm):02327         CHR             EQU GT+1
     002E             (        basic.asm):02328         STR             EQU CHR+1
                      (        basic.asm):02329         ; Numeric functions
     002F             (        basic.asm):02330         ASC             EQU STR+1                         ; Also used as a marker
     0030             (        basic.asm):02331         ABS             EQU ASC+1
     0031             (        basic.asm):02332         NUM             EQU ABS+1
     0032             (        basic.asm):02333         RND             EQU NUM+1
     0033             (        basic.asm):02334         KEY             EQU RND+1
     0034             (        basic.asm):02335         PEEK            EQU KEY+1
     0035             (        basic.asm):02336         LEN             EQU PEEK+1
     0036             (        basic.asm):02337         USR             EQU LEN+1
                      (        basic.asm):02338         ;
                      (        basic.asm):02339         ; Error messages
                      (        basic.asm):02340         ;
2F0E                  (        basic.asm):02341         emsg:
2F0E 53796E74617800   (        basic.asm):02342                 FCN     'Syntax'
2F15 496C6C6567616C20 (        basic.asm):02343                 FCN     'Illegal program'
     70726F6772616D00
2F25 496C6C6567616C20 (        basic.asm):02344                 FCN     'Illegal direct'
     64697265637400
2F34 4C696E65206E756D (        basic.asm):02345                 FCN     'Line number'
     62657200
2F40 57726F6E67207479 (        basic.asm):02346                 FCN     'Wrong type'
     706500
2F4B 4469766964652062 (        basic.asm):02347                 FCN     'Divide by zero'
     79207A65726F00
2F5A 4E657374696E6700 (        basic.asm):02348                 FCN     'Nesting'
2F62 44696D656E73696F (        basic.asm):02349                 FCN     'Dimension'
     6E00
2F6C 4461746100       (        basic.asm):02350                 FCN     'Data'
2F71 4F7574206F66206D (        basic.asm):02351                 FCN     'Out of memory'
     656D6F727900
2F7F 46696C65206E6F74 (        basic.asm):02352                 FCN     'File not open'
     206F70656E00
2F8D 46696C6520616C72 (        basic.asm):02353                 FCN     'File already open'
     65616479206F7065
     6E00
     0000             (        basic.asm):02354         ERRsyn          EQU 0
     0001             (        basic.asm):02355         ERRpgm          EQU 1
     0002             (        basic.asm):02356         ERRdir          EQU 2
     0003             (        basic.asm):02357         ERRlin          EQU 3
     0004             (        basic.asm):02358         ERRtyp          EQU 4
     0005             (        basic.asm):02359         ERRdiv          EQU 5
     0006             (        basic.asm):02360         ERRnst          EQU 6
     0007             (        basic.asm):02361         ERRdim          EQU 7
     0008             (        basic.asm):02362         ERRdat          EQU 8
     0009             (        basic.asm):02363         ERRmem          EQU 9
     000A             (        basic.asm):02364         ERRfno          EQU 10
     000B             (        basic.asm):02365         ERRfoo          EQU 11
                      (        basic.asm):02366         ; Priority of operations
2F9F                  (        basic.asm):02367         priority
2F9F 0001010202020303 (        basic.asm):02368                 FCB     0,1,1,2,2,2,3,3,3,1,1,1,1,1,1
     03010101010101

Symbol Table:
[ G] _CLOSE                           21C8
[ G] ABS                              0030
[ G] ADD                              001F
[ G] addr1                            2951
[ G] addr2                            2974
[ G] addr3                            297A
[ G] addr4                            297E
[ G] address                          2948
[ G] AND                              0024
[ G] arith                            2CFC
[ G] ASC                              002F
[ G] atable                           2D11
[ G] begin                            201D
[ G] break                            2368
[ G] buffer                           302B
[ G] char_vars                        31BB
[ G] chkchr                           29CA
[ G] chkfi1                           2532
[ G] chkfil                           251D
[ G] chknum                           29BF
[ G] CHR                              002D
[ G] CLEAR                            0006
[ G] CLOSE                            001B
[ G] close1                           21DB
[ G] clra1                            20CB
[ G] clrall                           20C8
[ G] clrpg1                           20BE
[ G] clrpg2                           20C7
[ G] clrpgm                           20B6
[ G] clv1                             2994
[ G] clv2                             299D
[ G] clv3                             29A6
[ G] CODE                             2000
[ G] cret0                            2D58
[ G] cret1                            2D60
[ G] cretx                            2D5A
[ G] ctl_ptr                          3010
[ G] ctl_stk                          3157
[ G] DATA                             0016
[ G] dataptr                          3006
[ G] daterr                           22E6
[ G] del1                             2888
[ G] del2                             2897
[ G] del3                             289B
[ G] del4                             28A1
[ G] delete                           2884
[ G] DIM                              0013
[ G] dim_check                        37D3
[ G] dim_vars                         35CB
[ G] dimerr                           296F
[ G] direct                           297F
[ G] DIV                              0022
[ G] div1                             2774
[ G] div2                             2776
[ G] div3                             278B
[ G] diverr                           278F
[ G] edit                             28A2
[ G] edit1                            28A8
[ G] edit1a                           28B9
[ G] edit2                            28C1
[ G] edit2a                           28CD
[ G] edit3                            28D3
[ G] edit4                            28DF
[ G] edit5                            2901
[ G] emsg                             2F0E
[ G] END                              0011
[ G] EQ                               0027
[ G] err1                             2628
[ G] err2                             262F
[ G] err3                             263C
[ G] err4                             2652
[ G] ERRdat                           0008
[ G] ERRdim                           0007
[ G] ERRdir                           0002
[ G] ERRdiv                           0005
[ G] ERRfno                           000A
[ G] ERRfoo                           000B
[ G] ERRlin                           0003
[ G] ERRmem                           0009
[ G] ERRnst                           0006
[ G] error                            261E
[ G] ERRpgm                           0001
[ G] ERRsyn                           0000
[ G] ERRtyp                           0004
[ G] EVAL                             29CF
[ G] evalbra                          29DA
[ G] evalchr                          29C8
[ G] evalnum                          29BD
[ G] evalsub                          29DD
[ G] evcok                            29CE
[ G] evse1                            2ADF
[ G] evse1a                           2AE1
[ G] evse2                            2AE9
[ G] evsn1                            2A55
[ G] evsn2                            2A9A
[ G] evsn3                            2AB9
[ G] evss0                            29FE
[ G] evss1                            2A20
[ G] evss2                            2A26
[ G] evss3                            2A2E
[ G] evss4                            2A37
[ G] evss5                            2A43
[ G] evss6                            2A51
[ G] execute                          206A
[ G] EXIT                             0002
[ G] expect                           26A1
[ G] EXPECTB                          269B
[ G] expectc                          269F
[ G] expr_type                        3011
[ G] file                             3015
[ G] files                            3017
[ G] findl                            2902
[ G] findl1                           2906
[ G] findl2                           290F
[ G] fnoerr                           21AA
[ G] fooerr                           21C3
[ G] FOR                              000B
[ G] FORindicator                     1000
[ L] fr?10                            283F
[ L] fr?11                            2850
[ L] fr?12                            2854
[ L] fr?20                            2857
[ L] fr?21                            2860
[ L] fr?22                            2873
[ L] fr?23                            2875
[ L] fr?24                            287D
[ L] fr?25                            287F
[ G] free                             2838
[ G] gcharv                           2B57
[ G] GE                               002B
[ G] GET_NEXT                         2681
[ G] getcv1                           2BBB
[ G] getcv2                           2BCE
[ G] getcv3                           2BE1
[ G] getcv4                           2BF2
[ G] getcval                          2BB4
[ G] getf1                            2157
[ G] getfil                           2152
[ G] getn0                            2715
[ G] getn1                            2719
[ G] getn2                            2732
[ G] getn3                            2744
[ G] getn4                            2746
[ G] getnum                           2707
[ G] gets                             2DA4
[ G] gets1                            2DAB
[ G] gets2                            2DCA
[ G] gets3                            2DD6
[ G] getsf                            2E01
[ G] getsf1                           2E02
[ G] getsf2                           2E0C
[ G] getsf3                           2E19
[ G] getsf4                           2E24
[ G] getuc                            26C3
[ G] getuc1                           26D1
[ G] getuc2                           26D3
[ G] getv1                            293D
[ G] getv2                            2945
[ G] getval                           2AF7
[ G] getvar                           2914
[ G] getvc                            2B22
[ G] getvno                           2C93
[ G] GOSUB                            0007
[ G] GOSUBIndicator                   1001
[ G] GOTO                             0008
[ G] GT                               002C
[ G] gval0                            2B17
[ G] gval1                            2B1C
[ G] gval2                            2B27
[ G] gvar1                            2B45
[ G] gvar2                            2B62
[ G] gvar21                           2B64
[ G] gvar22                           2B8A
[ G] gvar3                            2B8C
[ G] gvar4                            2BAF
[ G] heap                             39DB
[ G] IF                               000D
[ G] inp1                             2238
[ G] inp2                             2249
[ G] inp3                             225C
[ G] INPUT                            0012
[ G] ins1                             2798
[ G] ins2                             27AA
[ G] ins3                             27BB
[ G] ins4                             27C1
[ G] ins5                             27CC
[ G] insert                           2794
[ G] is_eV_END                        2658
[ G] is_lV_END                        2668
[ G] isalnum                          26AD
[ G] ISALPHA                          26BA
[ G] isdigit                          26B1
[ G] isee1                            2660
[ G] isle1                            266D
[ G] isterm                           266E
[ G] KEY                              0033
[ G] keypress                         3014
[ G] LE                               0029
[ G] LEN                              0035
[ G] LET                              0001
[ G] lfcr                             2DDA
[ G] LIF                              000E
[ G] line                             3008
[ G] LIST                             0003
[ G] LOAD                             0019
[ G] load0                            20FB
[ G] load1                            2103
[ G] load2                            2112
[ G] load3                            2116
[ G] load4                            2126
[ G] look1                            26DC
[ G] look2                            26E8
[ G] look3                            26F5
[ G] look5                            2701
[ G] lookup                           26D4
[ G] lsn1                             20DC
[ G] lsname                           20D3
[ G] LT                               002A
[ L] ma?1                             27D9
[ L] ma?2                             27E6
[ L] ma?3                             27EE
[ L] ma?4                             2806
[ L] ma?5                             281A
[ L] ma?6                             281C
[ L] ma?7                             2829
[ L] ma?8                             282F
[ L] ma?9                             2833
[ G] malloc                           27D4
[ G] MOD                              0023
[ G] mode                             3013
[ G] MUL                              0021
[ G] NE                               0028
[ G] nest                             3012
[ G] NEW                              0004
[ G] NEXT                             000C
[ G] nsterr                           261C
[ G] nulls                            2F0D
[ G] NUM                              0031
[ G] num2s1                           2C20
[ G] num2s2                           2C2F
[ G] num2str                          2C0A
[ G] num_vars                         33C3
[ G] oABS                             2C5C
[ G] oADD                             2D2D
[ G] oAND                             2D44
[ G] oASC                             2C3D
[ G] oDIV                             2D38
[ G] oEQ                              2D53
[ G] oGE                              2D72
[ G] oGT                              2D79
[ G] oKEY                             2C80
[ G] oLE                              2D64
[ G] oLEN                             2C96
[ G] olen0                            2CAE
[ G] olen1                            2CB1
[ G] olen2                            2CB9
[ G] oLT                              2D6B
[ G] oMOD                             2D3D
[ G] oMUL                             2D33
[ G] oNE                              2D5B
[ G] oNUM                             2C49
[ G] oOR                              2D49
[ G] oPEEK                            2C8B
[ G] OPEN                             001A
[ G] opend                            21B8
[ G] openf                            21A5
[ G] openok                           21B3
[ G] openw                            21AF
[ G] OR                               0025
[ G] ORDER                            0014
[ G] oRND                             2C65
[ G] oSUB                             2D30
[ G] oUSR                             2CC2
[ G] ousr1                            2CCD
[ G] ousr2                            2CDE
[ G] ousr3                            2CE2
[ G] oXOR                             2D4E
[ G] PEEK                             0034
[ G] pgm                              2988
[ G] pgm_start                        3000
[ G] POKE                             0017
[ G] PRINT                            000A
[ G] priority                         2F9F
[ G] putc                             2DE0
[ G] putc1                            2DF4
[ G] putc2                            2DF8
[ G] putc3                            2DFF
[ G] putm                             2D8E
[ G] putn                             2D80
[ G] puts                             2D98
[ G] RAM                              3000
[ G] RAMHB                            0030
[ G] randseed                         300A
[ G] READ                             0015
[ G] readptr                          3004
[ G] REM                              000F
[ G] RETURN                           0009
[ G] RND                              0032
[ G] RUN                              0005
[ G] run1                             2387
[ G] runptr                           3002
[ G] rwords                           2E31
[ G] rwordz                           2E30
[ G] sa1                              308F
[ G] sa2                              30F3
[ G] SAVE                             0018
[ G] save1                            2140
[ G] skip                             2675
[ G] skipx                            268B
[ G] skps1                            2610
[ G] skpstmt                          2602
[ G] space                            2DA0
[ G] STACK                            D000
[ G] STEP                             001D
[ G] STOP                             0010
[ G] STR                              002E
[ G] strl1                            24E0
[ G] strlen                           24DE
[ G] SUB                              0020
[ G] switch                           2CF1
[ G] synerr                           26A9
[ G] temp                             300C
[ G] temp1                            300E
[ G] testc                            2E28
[ G] testc1                           2E2E
[ G] testV_NEXT                       268E
[ G] THEN                             001E
[ G] tnc                              268C
[ G] TO                               001C
[ G] top                              2034
[ G] top1                             2047
[ G] top2                             2062
[ G] tsne1                            2698
[ G] typerr                           29C3
[ G] ucsa1                            2145
[ G] ucsa2                            2147
[ G] ucsa3                            2150
[ G] uns2str                          2C00
[ G] USR                              0036
[ G] V_CLEAR                          2991
[ G] V_DATA                           23C4
[ G] V_DIM                            246F
[ G] V_DIM1                           247D
[ G] V_END                            2362
[ G] V_EXIT                           20B3
[ G] V_FOR                            23D3
[ G] V_FOR1                           2411
[ G] V_GOSUB                          25BC
[ G] V_GOTO                           25D3
[ G] V_GOTO1                          25D6
[ G] V_IF                             21EE
[ G] V_IF1                            2202
[ G] V_INPUT                          2226
[ G] V_INPUT0                         2252
[ G] V_INPUT1                         224C
[ G] V_INPUT2                         2272
[ G] V_INPUT3                         2284
[ G] V_INPUT4                         228C
[ G] V_INPUT5                         2295
[ G] V_INPUT6                         22B9
[ G] V_INPUT7                         22C2
[ G] V_let                            2496
[ G] V_let1                           24B2
[ G] V_let2                           24C1
[ G] V_let3                           24CD
[ G] V_let4                           24D7
[ G] V_LIF                            2211
[ G] V_LIST                           2533
[ G] V_LIST1                          2561
[ G] V_LIST10                         25BA
[ G] V_LIST2                          2568
[ G] V_LIST3                          257C
[ G] V_LIST4                          2587
[ G] V_LIST5                          258E
[ G] V_LIST6                          2597
[ G] V_LIST6b                         25A2
[ G] V_LIST7                          25AB
[ G] V_LIST8                          25B2
[ G] V_LIST9                          25B5
[ G] V_LOAD                           20F9
[ G] V_NEW                            2025
[ G] V_NEXT                           241E
[ G] V_NEXT1                          2446
[ G] V_NEXT2                          2457
[ G] V_NEXT3                          2463
[ G] V_NEXT4                          2468
[ G] V_OPEN                           216B
[ G] V_ORDER                          22CE
[ G] V_POKE                           21E0
[ G] V_pri1                           24EF
[ G] V_pri2                           24FB
[ G] V_pri3                           250B
[ G] V_pri4                           2511
[ G] V_PRINT                          24EB
[ G] V_READ                           22EB
[ G] V_READ1                          230F
[ G] V_READ2                          2329
[ G] V_READ3                          2336
[ G] V_READ4                          2348
[ G] V_READ5                          234E
[ G] V_REM                            23C7
[ G] V_REM1                           23CB
[ G] V_RETURN                         25E1
[ G] V_RUN                            2371
[ G] V_RUN2                           2389
[ G] V_RUN3                           239A
[ G] V_RUN4                           23A0
[ G] V_RUN5                           23AA
[ G] V_RUN6                           23AC
[ G] V_RUN7                           23C1
[ G] V_RUN8                           23C3
[ G] V_SAVE                           212B
[ G] V_STOP                           2354
[ G] xDIV                             2768
[ G] xload                            20F5
[ G] xMUL                             2748
[ G] XOR                              0026
