                      (        forth.asm):00001         ;       title   MICRO FORTH 1.0
                      (        forth.asm):00002         ;*
                      (        forth.asm):00003         ;* MICRO FORTH 1.0
                      (        forth.asm):00004         ;*
                      (        forth.asm):00005         ;*    This is a small fast implementation of a forth language for
                      (        forth.asm):00006         ;* the Motorola 6809 microprocessor. It is unique in that there is
                      (        forth.asm):00007         ;* no interpreter, all words are directly executable.
                      (        forth.asm):00008         ;*
                      (        forth.asm):00009         ;* Copyright 1984-2005 Dave Dunfield
                      (        forth.asm):00010         ;* All rights reserved.
                      (        forth.asm):00011         ;*
                      (        forth.asm):00012         ;* SYSTEM equATES
                      (        forth.asm):00013         ;*
     2000             (        forth.asm):00014         OSRAM           = $2000                           ;APPLICATION RAM AREA
     DBFF             (        forth.asm):00015         OSEND           = $DBFF                           ;END OF GENERAL RAM
     D000             (        forth.asm):00016         OSUTIL          = $D000                           ;UTILITY ADDRESS SPACE
     0041             (        forth.asm):00017         WIDTH           = 65                              ;TERMINAL SCREEN WIDTH MARGIN
     2000             (        forth.asm):00018         LSTLOK          = OSRAM                           ;POINTER TO LAST WORD PROCESSED FROM INPUT BUFFER
     2002             (        forth.asm):00019         TEMP            = LSTLOK+2                        ;TEMPORARY STORAGE
     2004             (        forth.asm):00020         INPBUF          = TEMP+2                          ;INPUT BUFFER
     2100             (        forth.asm):00021         RSTACK          = LSTLOK+256                      ;RETURN STACK
     2200             (        forth.asm):00022         DSTACK          = RSTACK+256                      ;DATA STACK
                      (        forth.asm):00023         ;*
                      (        forth.asm):00024                 ORG     DSTACK                            ;BEGINNING OF FORTH CODE
                      (        forth.asm):00025         ;* INITIALIZATIONS, START UP FORTH
2200 10CE2100         (        forth.asm):00026                 LDS     #RSTACK                           ;SET UP RETURN STACK
2204 CE2200           (        forth.asm):00027                 LDU     #DSTACK                           ;SET UP DATA STACK
                      (        forth.asm):00028         ;* IF DESIRED, YOU CAN IMPLEMENT A STARTUP MESSAAGE HERE
                      (        forth.asm):00029         ;* INSERT THE MESSAGE AT THE VERY END OF THIS FILE.
                      (        forth.asm):00030         ;*      LDX     #USRSPC  ;POINT TO STARTUP MESSAGE
                      (        forth.asm):00031         ;*      LBSR    PMSG1  ;DISPLAY IT
2207 AD9F2B60         (        forth.asm):00032                 JSR     [BOOT+3]                          ;EXECUTE PRESET ROUTINE (USUALLY 'QUIT')
220B 16058A           (        forth.asm):00033                 LBRA    BYE                               ;EXIT FORTH
                      (        forth.asm):00034         ;* SUBROUTINE TO OBTAIN VARIABLES ADDRESS ON STACK.
                      (        forth.asm):00035         ;* USED BY 'VARIABLE' TYPE WORDS
220E                  (        forth.asm):00036         VARIAB
220E AEE1             (        forth.asm):00037                 LDX     ,S++                              ;GET FOLLOWING ADDRESS
2210 3610             (        forth.asm):00038                 PSHU    X                                 ;SAVE
2212 39               (        forth.asm):00039                 RTS                                       ;     RETURN TO CALLER
                      (        forth.asm):00040         ;* MESSAGES
2213                  (        forth.asm):00041         PROMPT
2213 0A0D             (        forth.asm):00042                 FCB     $0A,$0D                           ;NEW LINE
2215 4F6B3E00         (        forth.asm):00043                 FCN     'Ok>'                             ;PROMPT
2219                  (        forth.asm):00044         ERMSG1
2219 4572726F723A2000 (        forth.asm):00045                 FCN     'Error: '                         ;ERROR PREFIX
2221                  (        forth.asm):00046         ERMSG2
2221 272000           (        forth.asm):00047                 FCB     $27,$20,$00                       ;ERROR SUFFIX
2224                  (        forth.asm):00048         REDMSG
2224 52656465663A2000 (        forth.asm):00049                 FCN     'Redef: '                         ;RE-DEFINITION INDICATOR
222C                  (        forth.asm):00050         DELMSG
222C 08200800         (        forth.asm):00051                 FCB     8,' ',8,0                         ;MESSAGE FOR CHARACTER DELETE
                      (        forth.asm):00052         ;*
                      (        forth.asm):00053         ;* START        OF USER DICTIONARY
                      (        forth.asm):00054         ;* DICTIONARY FORMAT:
                      (        forth.asm):00055         ;*   1) - WORD DESCRIPTOR BYTE, FORMAT:
                      (        forth.asm):00056         ;*      BIT 7       - ALWAYS SET, INDICATES THIS IS DESCRIPTOR BYTE
                      (        forth.asm):00057         ;*      BITS 7-3    - CURRENTLY NOT USED
                      (        forth.asm):00058         ;*      BIT 2       - NO-COMPILE BIT, WORD CANNOT BE USED IN COMPILES
                      (        forth.asm):00059         ;*      BIT 1       - NO-INTERACTIVE BIT, WORD CANNOT BE USED INTERACTIVELY
                      (        forth.asm):00060         ;*      BIT 0       - EXECUTE ON COMPILE BIT, COMPILER EXECUTES WORD IMMEDIATLY
                      (        forth.asm):00061         ;*  ;      INSTEAD OF COMPILING INTO DEFINITION
                      (        forth.asm):00062         ;*   2) - WORD NAME, VARIABLE LENGTH, STORED BACKWARDS
                      (        forth.asm):00063         ;*   3) - ADDRESS OF PREVIOUS WORD IN DICTIONARY, ADDRESS MUST POINT TO FIRST
                      (        forth.asm):00064         ;*        BYTE OF CODE WHICH IMMEDIATLY FOLLOWS THIS FIELD IN THE WORD
                      (        forth.asm):00065         ;*
                      (        forth.asm):00066         ;*
                      (        forth.asm):00067         ;* 'DROPN' - DROPS A NUMBER OF WORDS FROM THE STACK
2230 80               (        forth.asm):00068                 FCB     $80
2231 4E504F5244       (        forth.asm):00069                 FCC     'NPORD'
2236 0000             (        forth.asm):00070                 FDB     0                                 ;** END OF DICTIONARY **
2238                  (        forth.asm):00071         DROPN
2238 ECC1             (        forth.asm):00072                 LDD     ,U++                              ;GET OPERAND
223A 58               (        forth.asm):00073                 ASLB                                      ;     MULTIPLY BY
223B 49               (        forth.asm):00074                 ROLA                                      ;     TWO FOR WORD STACK ENTRIES
223C 33CB             (        forth.asm):00075                 LEAU    D,U                               ;MOVE USER STACK
223E 39               (        forth.asm):00076                 RTS
                      (        forth.asm):00077         ;* 'DROP' - DROP ONE WORD FROM THE STACK
223F 80               (        forth.asm):00078                 FCB     $80
2240 504F5244         (        forth.asm):00079                 FCC     'PORD'
2244 2238             (        forth.asm):00080                 FDB     DROPN
2246                  (        forth.asm):00081         DROP
2246 3342             (        forth.asm):00082                 LEAU    2,U                               ;MOVE STACK POINTER
2248 39               (        forth.asm):00083                 RTS
                      (        forth.asm):00084         ;* 'DUP' - DUPLICATE TOP OF STACK
2249 80               (        forth.asm):00085                 FCB     $80
224A 505544           (        forth.asm):00086                 FCC     'PUD'
224D 2246             (        forth.asm):00087                 FDB     DROP
224F                  (        forth.asm):00088         DUP
224F ECC4             (        forth.asm):00089                 LDD     ,U                                ;GET TOP OF USER STACK
2251 EDC3             (        forth.asm):00090                 STD     ,--U                              ;DUPLICATE
2253 39               (        forth.asm):00091                 RTS
                      (        forth.asm):00092         ;* 'OVER' DUPLICATE ONE DOWN FROM TOP OF STACK
2254 80               (        forth.asm):00093                 FCB     $80
2255 5245564F         (        forth.asm):00094                 FCC     'REVO'
2259 224F             (        forth.asm):00095                 FDB     DUP
225B                  (        forth.asm):00096         OVER
225B EC42             (        forth.asm):00097                 LDD     2,U                               ;GET ELEMENT
225D EDC3             (        forth.asm):00098                 STD     ,--U                              ;DUPLICATE
225F 39               (        forth.asm):00099                 RTS
                      (        forth.asm):00100         ;* 'ROT' - ROTATE TOP THREE ELEMENTS ON STACK
2260 80               (        forth.asm):00101                 FCB     $80
2261 544F52           (        forth.asm):00102                 FCC     'TOR'
2264 225B             (        forth.asm):00103                 FDB     OVER
2266                  (        forth.asm):00104         ROT
2266 EC44             (        forth.asm):00105                 LDD     4,U                               ;GET BOTTOM
2268 AE42             (        forth.asm):00106                 LDX     2,U                               ;GET MIDDLE
226A AF44             (        forth.asm):00107                 STX     4,U                               ;PUT ON BOTTOM
226C 2009             (        forth.asm):00108                 BRA     SWAP1                             ;DO REST
                      (        forth.asm):00109         ;* 'SWAP' - SWAP TOP TWO ELEMENTS ON STACK
226E 80               (        forth.asm):00110                 FCB     $80
226F 50415753         (        forth.asm):00111                 FCC     'PAWS'
2273 2266             (        forth.asm):00112                 FDB     ROT
2275                  (        forth.asm):00113         SWAP
2275 EC42             (        forth.asm):00114                 LDD     2,U                               ;GET LOWER ONE
2277                  (        forth.asm):00115         SWAP1
2277 AEC4             (        forth.asm):00116                 LDX     ,U                                ;GET TOP
2279 AF42             (        forth.asm):00117                 STX     2,U                               ;PLACE TOP AT LOWER
227B EDC4             (        forth.asm):00118                 STD     ,U                                ;PLACE LOWER AT TOP
227D 39               (        forth.asm):00119                 RTS
                      (        forth.asm):00120         ;* '0=' - TEST FOR TOS EQUAL TO ZERO
227E 80               (        forth.asm):00121                 FCB     $80
227F 3D30             (        forth.asm):00122                 FCC     '=0'
2281 2275             (        forth.asm):00123                 FDB     SWAP
2283                  (        forth.asm):00124         ZEQU
2283 ECC4             (        forth.asm):00125                 LDD     ,U                                ;GET TOP OF STACK
2285 2743             (        forth.asm):00126                 BEQ     RET1                              ;=AL TO ZERO?
2287 2051             (        forth.asm):00127                 BRA     RET0                              ;NO, RETURN ONE
                      (        forth.asm):00128         ;* '=' - TEST FOR EQUALITY
2289 80               (        forth.asm):00129                 FCB     $80
228A 3D               (        forth.asm):00130                 FCC     '='
228B 2283             (        forth.asm):00131                 FDB     ZEQU
228D                  (        forth.asm):00132         EQUALS
228D ECC1             (        forth.asm):00133                 LDD     ,U++                              ;GET TOP OF STACK
228F 10A3C4           (        forth.asm):00134                 CMPD    ,U                                ;COMPARE WITH NEXT
2292 2736             (        forth.asm):00135                 BEQ     RET1                              ;SAME, RETURN 1
2294 2044             (        forth.asm):00136                 BRA     RET0                              ;NO, RETURN ZERO
                      (        forth.asm):00137         ;* '<>' - TEST FOR NOT EQUAL
2296 80               (        forth.asm):00138                 FCB     $80
2297 3E3C             (        forth.asm):00139                 FCC     '><'
2299 228D             (        forth.asm):00140                 FDB     EQUALS
229B                  (        forth.asm):00141         NOTEQU
229B ECC1             (        forth.asm):00142                 LDD     ,U++                              ;GET TOS
229D 10A3C4           (        forth.asm):00143                 CMPD    ,U                                ;COMPARE WITH NEXT
22A0 2738             (        forth.asm):00144                 BEQ     RET0                              ;NOT SAME, RETURN 1
22A2 2026             (        forth.asm):00145                 BRA     RET1                              ;NO, RETURN 0
                      (        forth.asm):00146         ;* '>' - TEST FOR GREATER
22A4 80               (        forth.asm):00147                 FCB     $80
22A5 3E               (        forth.asm):00148                 FCC     '>'
22A6 229B             (        forth.asm):00149                 FDB     NOTEQU
22A8                  (        forth.asm):00150         GRTR
22A8 EC42             (        forth.asm):00151                 LDD     2,U                               ;GET LOWER ELEMENT
22AA 10A3C1           (        forth.asm):00152                 CMPD    ,U++                              ;COMPARE WITH TOS
22AD 2E1B             (        forth.asm):00153                 BGT     RET1                              ;GREATER, RETURN 1
22AF 2029             (        forth.asm):00154                 BRA     RET0                              ;NO, RETURN FALSE
                      (        forth.asm):00155         ;* '<' - TEST FOR LESS
22B1 80               (        forth.asm):00156                 FCB     $80
22B2 3C               (        forth.asm):00157                 FCC     '<'
22B3 22A8             (        forth.asm):00158                 FDB     GRTR
22B5                  (        forth.asm):00159         LESS
22B5 EC42             (        forth.asm):00160                 LDD     2,U                               ;GET LOWER ELEMENT
22B7 10A3C1           (        forth.asm):00161                 CMPD    ,U++                              ;COMPARE WITH TOS
22BA 2D0E             (        forth.asm):00162                 BLT     RET1                              ;LOWER, RETURN 1
22BC 201C             (        forth.asm):00163                 BRA     RET0                              ;NO, RETURN FALSE
                      (        forth.asm):00164         ;* '>=' - TEST FOR GREATER OR EQUAL TO
22BE 80               (        forth.asm):00165                 FCB     $80
22BF 3D3E             (        forth.asm):00166                 FCC     '=>'
22C1 22B5             (        forth.asm):00167                 FDB     LESS
22C3                  (        forth.asm):00168         GREQU
22C3 EC42             (        forth.asm):00169                 LDD     2,U                               ;GET LOWER
22C5 10A3C1           (        forth.asm):00170                 CMPD    ,U++                              ;COMPARE WITH TOS
22C8 2D10             (        forth.asm):00171                 BLT     RET0                              ;LESS, RETURN FALSE
22CA                  (        forth.asm):00172         RET1
22CA C601             (        forth.asm):00173                 LDB     #1                                ;GET ONE
22CC 200D             (        forth.asm):00174                 BRA     RETS                              ;RETURN IT
                      (        forth.asm):00175         ;* '<=' - TEST FOR LESS OR EQUAL TO
22CE 80               (        forth.asm):00176                 FCB     $80
22CF 3D3C             (        forth.asm):00177                 FCC     '=<'
22D1 22C3             (        forth.asm):00178                 FDB     GREQU
22D3                  (        forth.asm):00179         LESEQU
22D3 EC42             (        forth.asm):00180                 LDD     2,U                               ;GET LOWER
22D5 10A3C1           (        forth.asm):00181                 CMPD    ,U++                              ;COMPARE WITH TOS
22D8 2FF0             (        forth.asm):00182                 BLE     RET1                              ;LOWER OR EQUAL, RETURN ONE
22DA                  (        forth.asm):00183         RET0
22DA 5F               (        forth.asm):00184                 CLRB                                      ;     GET ZERO RESULT
22DB                  (        forth.asm):00185         RETS
22DB 4F               (        forth.asm):00186                 CLRA                                      ;     ZERO HIGH BYTE
22DC EDC4             (        forth.asm):00187                 STD     ,U                                ;SAVE ON STACK
22DE 39               (        forth.asm):00188                 RTS
                      (        forth.asm):00189         ;* '$OUT' - OUTPUT CHARACTER TO TERMINAL
22DF 80               (        forth.asm):00190                 FCB     $80
22E0 54554F24         (        forth.asm):00191                 FCC     'TUO$'
22E4 22D3             (        forth.asm):00192                 FDB     LESEQU
22E6                  (        forth.asm):00193         DOLOUT
22E6 ECC1             (        forth.asm):00194                 LDD     ,U++                              ;GET CHAR FROM STACK
22E8 1F98             (        forth.asm):00195                 TFR     B,A                               ;PUT IN RIGHT REGISTER
22EA 3F               (        forth.asm):00196                 SWI
22EB 21               (        forth.asm):00197                 FCB     33                                ;GET CHAR FROM SYSTEM
22EC 39               (        forth.asm):00198                 RTS
                      (        forth.asm):00199         ;* ' $IN' - INPUT CHARACTER FROM TERMINAL
22ED 80               (        forth.asm):00200                 FCB     $80
22EE 4E4924           (        forth.asm):00201                 FCC     'NI$'
22F1 22E6             (        forth.asm):00202                 FDB     DOLOUT
22F3                  (        forth.asm):00203         DOLIN
22F3 3F               (        forth.asm):00204                 SWI
22F4 22               (        forth.asm):00205                 FCB     34                                ;GET CHAR FROM SYSTEM
22F5 1F89             (        forth.asm):00206                 TFR     A,B                               ;GET IN RIGHT REGISTER
22F7 4F               (        forth.asm):00207                 CLRA                                      ;     ZERO HIGH BYTE
22F8 EDC3             (        forth.asm):00208                 STD     ,--U                              ;SAVE ON STACK
22FA 39               (        forth.asm):00209                 RTS
                      (        forth.asm):00210         ;* 'EMIT' - OUTPUT CHARACTER TO GENERAL OUTPUT
22FB 80               (        forth.asm):00211                 FCB     $80
22FC 54494D45         (        forth.asm):00212                 FCC     'TIME'
2300 22F3             (        forth.asm):00213                 FDB     DOLIN
2302                  (        forth.asm):00214         EMIT
2302 6E9F2B48         (        forth.asm):00215                 JMP     [DISP+3]                          ;EXECUTE OUTPUT ROUTINE IN '(OUT)' VARIABLE
                      (        forth.asm):00216         ;* 'KEY' - GET CHARACTER FROM GENERAL INPUT
2306 80               (        forth.asm):00217                 FCB     $80
2307 59454B           (        forth.asm):00218                 FCC     'YEK'
230A 2302             (        forth.asm):00219                 FDB     EMIT
230C                  (        forth.asm):00220         KEY
230C 6E9F2B54         (        forth.asm):00221                 JMP     [INPT+3]                          ;EXECUTE INPUT ROUTINE IN '(IN)' VARIABLE
                      (        forth.asm):00222         ;* 'U.' - OUTPUT UNSIGNED NUMBER IN CURRENT BASE
2310 80               (        forth.asm):00223                 FCB     $80
2311 2E55             (        forth.asm):00224                 FCC     '.U'
2313 230C             (        forth.asm):00225                 FDB     KEY
2315                  (        forth.asm):00226         UDOT
2315 2012             (        forth.asm):00227                 BRA     DOT01                             ;EXECUTE NUMBER OUTPUT ROUTINE
                      (        forth.asm):00228         ;* '.' - OUTPUT SIGNED NUMBER IN CURRENT BASE
2317 80               (        forth.asm):00229                 FCB     $80
2318 2E               (        forth.asm):00230                 FCC     '.'
2319 2315             (        forth.asm):00231                 FDB     UDOT
231B                  (        forth.asm):00232         DOT
231B ECC4             (        forth.asm):00233                 LDD     ,U                                ;GET NUMBER FROM STACK
231D 2A0A             (        forth.asm):00234                 BPL     DOT01                             ;IS POSITIVE, ITS OK
231F C62D             (        forth.asm):00235                 LDB     #'-'                              ;GET MINUS SIGN
2321 3606             (        forth.asm):00236                 PSHU    A,B                               ;SAVE ON STACK
2323 BD2302           (        forth.asm):00237                 JSR     EMIT                              ;OUTPUT MINUS SIGN
2326 BD2523           (        forth.asm):00238                 JSR     NEG                               ;NEGATE NUMBER
2329                  (        forth.asm):00239         DOT01
2329 86FF             (        forth.asm):00240                 LDA     #$FF                              ;END IF STREAM INDICATOR
232B 3402             (        forth.asm):00241                 PSHS    A                                 ;SAVE MARKER ON RETURN STACK
232D                  (        forth.asm):00242         DOT1
232D FC2B77           (        forth.asm):00243                 LDD     BASE+3                            ;GET NUMBER BASE FROM 'BASE' VARIABLE
2330 3606             (        forth.asm):00244                 PSHU    A,B                               ;SAVE BASE
2332 BD2478           (        forth.asm):00245                 JSR     USMOD                             ;PERFORM DIVISION
2335 3706             (        forth.asm):00246                 PULU    A,B                               ;GET REMAINDER
2337 3404             (        forth.asm):00247                 PSHS    B                                 ;SAVE FOR LATER
2339 ECC4             (        forth.asm):00248                 LDD     ,U                                ;GET RESULT
233B 26F0             (        forth.asm):00249                 BNE     DOT1                              ;IF MORE, KEEP GOING
233D 3342             (        forth.asm):00250                 LEAU    2,U                               ;SKIP LAST RESULT ON STACK
233F                  (        forth.asm):00251         DOT2
233F E6E0             (        forth.asm):00252                 LDB     ,S+                               ;GET CHARACTER FROM STACK
2341 102B02E8         (        forth.asm):00253                 LBMI    SPACE                             ;END OF DIGITS, OUTPUT SPACE AND EXIT
2345 CB30             (        forth.asm):00254                 ADDB    #$30                              ;CONVERT TO DECIMAL NUMBER
2347 C139             (        forth.asm):00255                 CMPB    #$39                              ;IN RANGE?
2349 2302             (        forth.asm):00256                 BLS     DOT3                              ;YES, ITS OK
234B CB07             (        forth.asm):00257                 ADDB    #7                                ;CONVERT TO ALPHA
234D                  (        forth.asm):00258         DOT3
234D 3606             (        forth.asm):00259                 PSHU    A,B                               ;SAVE ON STACK
234F 8DB1             (        forth.asm):00260                 BSR     EMIT                              ;OUTPUT CHARACTER
2351 20EC             (        forth.asm):00261                 BRA     DOT2                              ;KEEP OUTPUTING
                      (        forth.asm):00262         ;* '-!' - SUBTRACT FROM SELF AND REASSIGN
2353 80               (        forth.asm):00263                 FCB     $80
2354 212D             (        forth.asm):00264                 FCC     '!-'
2356 231B             (        forth.asm):00265                 FDB     DOT
2358                  (        forth.asm):00266         MSTOR
2358 AEC1             (        forth.asm):00267                 LDX     ,U++                              ;GET ADDRESS
235A EC84             (        forth.asm):00268                 LDD     ,X                                ;GET CONTENTS
235C A3C1             (        forth.asm):00269                 SUBD    ,U++                              ;SUBTRACT TOS
235E ED84             (        forth.asm):00270                 STD     ,X                                ;RESAVE CONTENTS
2360 39               (        forth.asm):00271                 RTS
                      (        forth.asm):00272         ;* '+!' - ADD TO SELF AND REASSIGN
2361 80               (        forth.asm):00273                 FCB     $80
2362 212B             (        forth.asm):00274                 FCC     '!+'
2364 2358             (        forth.asm):00275                 FDB     MSTOR
2366                  (        forth.asm):00276         PSTOR
2366 AEC1             (        forth.asm):00277                 LDX     ,U++                              ;GET ADDRESS
2368 EC84             (        forth.asm):00278                 LDD     ,X                                ;GET CONTENTS
236A E3C1             (        forth.asm):00279                 ADDD    ,U++                              ;ADD IS TOS
236C ED84             (        forth.asm):00280                 STD     ,X                                ;RESAVE CONTENTS
236E 39               (        forth.asm):00281                 RTS
                      (        forth.asm):00282         ;* 'C!' - CHARACTER (BYTE) STORE OPERATION
236F 80               (        forth.asm):00283                 FCB     $80
2370 2143             (        forth.asm):00284                 FCC     '!C'
2372 2366             (        forth.asm):00285                 FDB     PSTOR
2374                  (        forth.asm):00286         VSTORC
2374 AEC1             (        forth.asm):00287                 LDX     ,U++                              ;GET ADDRESS
2376 ECC1             (        forth.asm):00288                 LDD     ,U++                              ;GET DATA FROM STACK
2378 E784             (        forth.asm):00289                 STB     ,X                                ;SAVE IN VARIABLE
237A 39               (        forth.asm):00290                 RTS
                      (        forth.asm):00291         ;* '!' - WORD STORE OPERATION
237B 80               (        forth.asm):00292                 FCB     $80
237C 21               (        forth.asm):00293                 FCC     '!'
237D 2374             (        forth.asm):00294                 FDB     VSTORC
237F                  (        forth.asm):00295         VSTOR
237F AEC1             (        forth.asm):00296                 LDX     ,U++                              ;GET ADDRESS
2381 ECC1             (        forth.asm):00297                 LDD     ,U++                              ;GET DATA
2383 ED84             (        forth.asm):00298                 STD     ,X                                ;PERFORM STORE
2385 39               (        forth.asm):00299                 RTS
                      (        forth.asm):00300         ;* 'C@' - CHARACTER READ OPERATION
2386 80               (        forth.asm):00301                 FCB     $80
2387 4043             (        forth.asm):00302                 FCC     '@C'
2389 237F             (        forth.asm):00303                 FDB     VSTOR
238B                  (        forth.asm):00304         VREADC
238B E6D4             (        forth.asm):00305                 LDB     [,U]                              ;GET CHARACTER FROM ADDRESS
238D 4F               (        forth.asm):00306                 CLRA                                      ;     ZERO HIGH BYTE
238E 202E             (        forth.asm):00307                 BRA     SAVSD                             ;MOVE TO STACK
                      (        forth.asm):00308         ;* '@' - WORD READ OPERATION
2390 80               (        forth.asm):00309                 FCB     $80
2391 40               (        forth.asm):00310                 FCC     '@'
2392 238B             (        forth.asm):00311                 FDB     VREADC
2394                  (        forth.asm):00312         VREAD
2394 ECD4             (        forth.asm):00313                 LDD     [,U]                              ;GET WORD FROM ADDRESS
2396 2026             (        forth.asm):00314                 BRA     SAVSD                             ;PLACE ON STACK
                      (        forth.asm):00315         ;* '2/' - DIVIDE BY TWO
2398 80               (        forth.asm):00316                 FCB     $80
2399 2F32             (        forth.asm):00317                 FCC     '/2'
239B 2394             (        forth.asm):00318                 FDB     VREAD
239D                  (        forth.asm):00319         SHR
239D 64C4             (        forth.asm):00320                 LSR     ,U                                ;SHIFT HIGH
239F 6641             (        forth.asm):00321                 ROR     1,U                               ;SHIFT LOW
23A1 39               (        forth.asm):00322                 RTS
                      (        forth.asm):00323         ;* '2;*' - MULTIPLY BY TWO
23A2 80               (        forth.asm):00324                 FCB     $80
23A3 2A32             (        forth.asm):00325                 FCC     '*2'
23A5 239D             (        forth.asm):00326                 FDB     SHR
23A7                  (        forth.asm):00327         SHL
23A7 6841             (        forth.asm):00328                 LSL     1,U                               ;SHIFT LOW
23A9 69C4             (        forth.asm):00329                 ROL     ,U                                ;SHIFT HIGH
23AB 39               (        forth.asm):00330                 RTS
                      (        forth.asm):00331         ;* '+' - ADD OPERATOR
23AC 80               (        forth.asm):00332                 FCB     $80
23AD 2B               (        forth.asm):00333                 FCC     '+'
23AE 23A7             (        forth.asm):00334                 FDB     SHL
23B0                  (        forth.asm):00335         ADD
23B0 ECC1             (        forth.asm):00336                 LDD     ,U++                              ;GET TOS
23B2 E3C4             (        forth.asm):00337                 ADDD    ,U                                ;ADD IN NEXT
23B4 2008             (        forth.asm):00338                 BRA     SAVSD                             ;PLACE RESULT ON STACK
                      (        forth.asm):00339         ;* '-' - SUBTRACT OPERATOR
23B6 80               (        forth.asm):00340                 FCB     $80
23B7 2D               (        forth.asm):00341                 FCC     '-'
23B8 23B0             (        forth.asm):00342                 FDB     ADD
23BA                  (        forth.asm):00343         SUB
23BA EC42             (        forth.asm):00344                 LDD     2,U                               ;GET LOWER OPERAND
23BC A3C1             (        forth.asm):00345                 SUBD    ,U++                              ;SUBTRACT TOS
23BE                  (        forth.asm):00346         SAVSD
23BE EDC4             (        forth.asm):00347                 STD     ,U                                ;PLACE RESULT ON STACK
23C0 39               (        forth.asm):00348                 RTS
                      (        forth.asm):00349         ;* 'D-' DOUBLE PRECISION SUBTRACTION
23C1 80               (        forth.asm):00350                 FCB     $80
23C2 2D44             (        forth.asm):00351                 FCC     '-D'
23C4 23BA             (        forth.asm):00352                 FDB     SUB
23C6                  (        forth.asm):00353         DMINUS
23C6 EC46             (        forth.asm):00354                 LDD     6,U                               ;GET LOW WORD OF LOWER OPERAND
23C8 A342             (        forth.asm):00355                 SUBD    2,U                               ;SUBTRACT LOW WORD OFF HIGHER OPERAND
23CA ED46             (        forth.asm):00356                 STD     6,U                               ;RESAVE LOWER WORD OF OPERAND
23CC EC44             (        forth.asm):00357                 LDD     4,U                               ;GET HIGH WORD OF LOWER OPERAND
23CE E241             (        forth.asm):00358                 SBCB    1,U                               ;SUBTRACT TOP OF STACK
23D0 E2C4             (        forth.asm):00359                 SBCB    ,U                                ;WITH BORROW FROM PREVIOUS
23D2 3344             (        forth.asm):00360                 LEAU    4,U                               ;FIX UP STACK
23D4 EDC4             (        forth.asm):00361                 STD     ,U                                ;PLACE HIGH WORD OF RESULT ON STACK
23D6 39               (        forth.asm):00362                 RTS
                      (        forth.asm):00363         ;* 'D+' - DOUBLE PRECISION ADDITION
23D7 80               (        forth.asm):00364                 FCB     $80
23D8 2B44             (        forth.asm):00365                 FCC     '+D'
23DA 23C6             (        forth.asm):00366                 FDB     DMINUS
23DC                  (        forth.asm):00367         DPLUS
23DC EC42             (        forth.asm):00368                 LDD     2,U                               ;GET LOW WORD OF FIRST OPERAND
23DE E346             (        forth.asm):00369                 ADDD    6,U                               ;ADD LOW WORD OF SECOND OPERAND
23E0 ED46             (        forth.asm):00370                 STD     6,U                               ;RESAVE
23E2 ECC4             (        forth.asm):00371                 LDD     ,U                                ;GET HIGH WORD OF FIRST
23E4 E945             (        forth.asm):00372                 ADCB    5,U                               ;ADD IN HIGH WORD OF
23E6 A944             (        forth.asm):00373                 ADCA    4,U                               ;SECOND WITH CARRY
23E8 3344             (        forth.asm):00374                 LEAU    4,U                               ;FIX UP STACK
23EA EDC4             (        forth.asm):00375                 STD     ,U                                ;RESAVE
23EC 39               (        forth.asm):00376                 RTS
                      (        forth.asm):00377         ;* 'U;*' - UNSIGNED MULTIPLY
23ED 80               (        forth.asm):00378                 FCB     $80
23EE 2A55             (        forth.asm):00379                 FCC     '*U'
23F0 23DC             (        forth.asm):00380                 FDB     DPLUS
23F2                  (        forth.asm):00381         UMULT
23F2 A641             (        forth.asm):00382                 LDA     1,U
23F4 E643             (        forth.asm):00383                 LDB     3,U
23F6 3D               (        forth.asm):00384                 MUL
23F7 3406             (        forth.asm):00385                 PSHS    A,B
23F9 A6C4             (        forth.asm):00386                 LDA     ,U
23FB E642             (        forth.asm):00387                 LDB     2,U
23FD 3D               (        forth.asm):00388                 MUL
23FE 3406             (        forth.asm):00389                 PSHS    A,B
2400 A641             (        forth.asm):00390                 LDA     1,U
2402 E642             (        forth.asm):00391                 LDB     2,U
2404 3D               (        forth.asm):00392                 MUL
2405 E361             (        forth.asm):00393                 ADDD    1,S
2407 2402             (        forth.asm):00394                 BCC     UMUL1
2409 6CE4             (        forth.asm):00395                 INC     ,S
240B                  (        forth.asm):00396         UMUL1
240B ED61             (        forth.asm):00397                 STD     1,S
240D A6C4             (        forth.asm):00398                 LDA     ,U
240F E643             (        forth.asm):00399                 LDB     3,U
2411 3D               (        forth.asm):00400                 MUL
2412 E361             (        forth.asm):00401                 ADDD    1,S
2414 2402             (        forth.asm):00402                 BCC     UMUL2
2416 6CE4             (        forth.asm):00403                 INC     ,S
2418                  (        forth.asm):00404         UMUL2
2418 ED61             (        forth.asm):00405                 STD     1,S
241A 3516             (        forth.asm):00406                 PULS    D,X
241C EDC4             (        forth.asm):00407                 STD     ,U
241E AF42             (        forth.asm):00408                 STX     2,U
2420 39               (        forth.asm):00409                 RTS
                      (        forth.asm):00410         ;* ';*' - SIGNED MULTIPLY
2421 80               (        forth.asm):00411                 FCB     $80
2422 2A               (        forth.asm):00412                 FCC     '*'
2423 23F2             (        forth.asm):00413                 FDB     UMULT
2425                  (        forth.asm):00414         MULT
2425 A641             (        forth.asm):00415                 LDA     1,U
2427 E643             (        forth.asm):00416                 LDB     3,U
2429 3D               (        forth.asm):00417                 MUL
242A 3406             (        forth.asm):00418                 PSHS    A,B
242C A6C4             (        forth.asm):00419                 LDA     ,U
242E E643             (        forth.asm):00420                 LDB     3,U
2430 3D               (        forth.asm):00421                 MUL
2431 EBE4             (        forth.asm):00422                 ADDB    ,S
2433 E7E4             (        forth.asm):00423                 STB     ,S
2435 A641             (        forth.asm):00424                 LDA     1,U
2437 E642             (        forth.asm):00425                 LDB     2,U
2439 3D               (        forth.asm):00426                 MUL
243A EBE4             (        forth.asm):00427                 ADDB    ,S
243C E7E4             (        forth.asm):00428                 STB     ,S
243E 3506             (        forth.asm):00429                 PULS    D
2440 3342             (        forth.asm):00430                 LEAU    2,U
2442 EDC4             (        forth.asm):00431                 STD     ,U
2444 39               (        forth.asm):00432                 RTS
                      (        forth.asm):00433         ;* 'M/MOD' - DIVISION WITH REMAINDER
2445 80               (        forth.asm):00434                 FCB     $80
2446 444F4D2F4D       (        forth.asm):00435                 FCC     'DOM/M'
244B 2425             (        forth.asm):00436                 FDB     MULT
244D                  (        forth.asm):00437         MSMOD
244D 4F               (        forth.asm):00438                 CLRA
244E 5F               (        forth.asm):00439                 CLRB
244F 8E0021           (        forth.asm):00440                 LDX     #33
2452                  (        forth.asm):00441         MSMODL
2452 1CFE             (        forth.asm):00442                 ANDCC   #$FE
2454                  (        forth.asm):00443         MSMODM
2454 6945             (        forth.asm):00444                 ROL     5,U
2456 6944             (        forth.asm):00445                 ROL     4,U
2458 6943             (        forth.asm):00446                 ROL     3,U
245A 6942             (        forth.asm):00447                 ROL     2,U
245C 301F             (        forth.asm):00448                 LEAX    -1,X
245E 270D             (        forth.asm):00449                 BEQ     MSMODD
2460 59               (        forth.asm):00450                 ROLB
2461 49               (        forth.asm):00451                 ROLA
2462 10A3C4           (        forth.asm):00452                 CMPD    ,U
2465 25EB             (        forth.asm):00453                 BLO     MSMODL
2467 A3C4             (        forth.asm):00454                 SUBD    ,U
2469 1A01             (        forth.asm):00455                 ORCC    #1
246B 20E7             (        forth.asm):00456                 BRA     MSMODM
246D                  (        forth.asm):00457         MSMODD
246D EDC4             (        forth.asm):00458                 STD     ,U
246F 39               (        forth.asm):00459                 RTS
                      (        forth.asm):00460         ;* 'U/MOD' - UNSIGNED DIVISION WITH REMAINDER
2470 80               (        forth.asm):00461                 FCB     $80
2471 444F4D2F55       (        forth.asm):00462                 FCC     'DOM/U'
2476 244D             (        forth.asm):00463                 FDB     MSMOD
2478                  (        forth.asm):00464         USMOD
2478 ECC1             (        forth.asm):00465                 LDD     ,U++
247A 6FC2             (        forth.asm):00466                 CLR     ,-U
247C 6FC2             (        forth.asm):00467                 CLR     ,-U
247E EDC3             (        forth.asm):00468                 STD     ,--U
2480 BD244D           (        forth.asm):00469                 JSR     MSMOD
2483 ECC1             (        forth.asm):00470                 LDD     ,U++
2485 EDC4             (        forth.asm):00471                 STD     ,U
2487 39               (        forth.asm):00472                 RTS
                      (        forth.asm):00473         ;* '/MOD' - DIVISION GIVING REMAINDER
2488 80               (        forth.asm):00474                 FCB     $80
2489 444F4D2F         (        forth.asm):00475                 FCC     'DOM/'
248D 2478             (        forth.asm):00476                 FDB     USMOD
248F                  (        forth.asm):00477         SLMOD
248F A642             (        forth.asm):00478                 LDA     2,U
2491 3402             (        forth.asm):00479                 PSHS    A
2493 2A08             (        forth.asm):00480                 BPL     SLMOD2
2495 4F               (        forth.asm):00481                 CLRA
2496 5F               (        forth.asm):00482                 CLRB
2497 A342             (        forth.asm):00483                 SUBD    2,U
2499 ED42             (        forth.asm):00484                 STD     2,U
249B A6E4             (        forth.asm):00485                 LDA     ,S
249D                  (        forth.asm):00486         SLMOD2
249D A8C4             (        forth.asm):00487                 EORA    ,U
249F 3402             (        forth.asm):00488                 PSHS    A
24A1 ECC4             (        forth.asm):00489                 LDD     ,U
24A3 273A             (        forth.asm):00490                 BEQ     SLMODR
24A5 2A07             (        forth.asm):00491                 BPL     SLMOD1
24A7 43               (        forth.asm):00492                 COMA
24A8 53               (        forth.asm):00493                 COMB
24A9 C30001           (        forth.asm):00494                 ADDD    #1
24AC EDC4             (        forth.asm):00495                 STD     ,U
24AE                  (        forth.asm):00496         SLMOD1
24AE 4F               (        forth.asm):00497                 CLRA
24AF 5F               (        forth.asm):00498                 CLRB
24B0 8E0011           (        forth.asm):00499                 LDX     #17
24B3                  (        forth.asm):00500         SLMODL
24B3 1CFE             (        forth.asm):00501                 ANDCC   #$FE
24B5                  (        forth.asm):00502         SLMODM
24B5 6943             (        forth.asm):00503                 ROL     3,U
24B7 6942             (        forth.asm):00504                 ROL     2,U
24B9 301F             (        forth.asm):00505                 LEAX    -1,X
24BB 270D             (        forth.asm):00506                 BEQ     SLMODD
24BD 59               (        forth.asm):00507                 ROLB
24BE 49               (        forth.asm):00508                 ROLA
24BF 10A3C4           (        forth.asm):00509                 CMPD    ,U
24C2 25EF             (        forth.asm):00510                 BLO     SLMODL
24C4 A3C4             (        forth.asm):00511                 SUBD    ,U
24C6 1A01             (        forth.asm):00512                 ORCC    #1
24C8 20EB             (        forth.asm):00513                 BRA     SLMODM
24CA                  (        forth.asm):00514         SLMODD
24CA 6D61             (        forth.asm):00515                 TST     1,S
24CC 2A05             (        forth.asm):00516                 BPL     SLMOD3
24CE 43               (        forth.asm):00517                 COMA
24CF 53               (        forth.asm):00518                 COMB
24D0 C30001           (        forth.asm):00519                 ADDD    #1
24D3                  (        forth.asm):00520         SLMOD3
24D3 EDC4             (        forth.asm):00521                 STD     ,U
24D5 6DE1             (        forth.asm):00522                 TST     ,S++
24D7 2A06             (        forth.asm):00523                 BPL     SLMODR
24D9 4F               (        forth.asm):00524                 CLRA
24DA 5F               (        forth.asm):00525                 CLRB
24DB A342             (        forth.asm):00526                 SUBD    2,U
24DD ED42             (        forth.asm):00527                 STD     2,U
24DF                  (        forth.asm):00528         SLMODR
24DF 39               (        forth.asm):00529                 RTS
                      (        forth.asm):00530         ;* '/' - DIVISION
24E0 80               (        forth.asm):00531                 FCB     $80
24E1 2F               (        forth.asm):00532                 FCC     '/'
24E2 248F             (        forth.asm):00533                 FDB     SLMOD
24E4                  (        forth.asm):00534         SLASH
24E4 8DA9             (        forth.asm):00535                 BSR     SLMOD
24E6 3342             (        forth.asm):00536                 LEAU    2,U
24E8 39               (        forth.asm):00537                 RTS
                      (        forth.asm):00538         ;* 'AND' - LOGICAL AND
24E9 80               (        forth.asm):00539                 FCB     $80
24EA 444E41           (        forth.asm):00540                 FCC     'DNA'
24ED 24E4             (        forth.asm):00541                 FDB     SLASH
24EF                  (        forth.asm):00542         AND
24EF ECC1             (        forth.asm):00543                 LDD     ,U++                              ;GET TOP OF STACK
24F1 A4C4             (        forth.asm):00544                 ANDA    ,U                                ;AND HIGH BYTE
24F3 E441             (        forth.asm):00545                 ANDB    1,U                               ;AND LOW BYTE
24F5 2045             (        forth.asm):00546                 BRA     SAVDS                             ;SAVE RESULT AND EXIT
                      (        forth.asm):00547         ;* 'OR' - LOGICAL OR
24F7 80               (        forth.asm):00548                 FCB     $80
24F8 524F             (        forth.asm):00549                 FCC     'RO'
24FA 24EF             (        forth.asm):00550                 FDB     AND
24FC                  (        forth.asm):00551         OR
24FC ECC1             (        forth.asm):00552                 LDD     ,U++                              ;GET TOP OF STACK
24FE AAC4             (        forth.asm):00553                 ORA     ,U                                ;OR HIGH BYTE
2500 EA41             (        forth.asm):00554                 ORB     1,U                               ;OR LOW BYTE
2502 2038             (        forth.asm):00555                 BRA     SAVDS                             ;SAVE RESULT AND EXIT
                      (        forth.asm):00556         ;* 'XOR' - LOGCAL EXCLUSIVE OR
2504 80               (        forth.asm):00557                 FCB     $80
2505 524F58           (        forth.asm):00558                 FCC     'ROX'
2508 24FC             (        forth.asm):00559                 FDB     OR
250A                  (        forth.asm):00560         XOR
250A ECC1             (        forth.asm):00561                 LDD     ,U++                              ;GET TOP OF STACK
250C A8C4             (        forth.asm):00562                 EORA    ,U                                ;XOR HIGH BYTE
250E E841             (        forth.asm):00563                 EORB    1,U                               ;XOR LOW BYTE
2510 202A             (        forth.asm):00564                 BRA     SAVDS                             ;SAVE RESULT AND EXIT
                      (        forth.asm):00565         ;* 'COM' - COMPLEMENT OPERAND
2512 80               (        forth.asm):00566                 FCB     $80
2513 4D4F43           (        forth.asm):00567                 FCC     'MOC'
2516 250A             (        forth.asm):00568                 FDB     XOR
2518                  (        forth.asm):00569         COM
2518 63C4             (        forth.asm):00570                 COM     ,U                                ;COMPLEMENT HIGH BYTE
251A 6341             (        forth.asm):00571                 COM     1,U                               ;COMPLEMENT LOW BYTE
251C 39               (        forth.asm):00572                 RTS
                      (        forth.asm):00573         ;* 'NEG' - NEGATE OPERAND
251D 80               (        forth.asm):00574                 FCB     $80
251E 47454E           (        forth.asm):00575                 FCC     'GEN'
2521 2518             (        forth.asm):00576                 FDB     COM
2523                  (        forth.asm):00577         NEG
2523 8DF3             (        forth.asm):00578                 BSR     COM                               ;COMPLEMENT OPERAND
2525 2035             (        forth.asm):00579                 BRA     ONEP                              ;INCREMENT (TWO'S COMPLEMENT)
                      (        forth.asm):00580         ;* 'ABS' - GIVE ABSOLUTE VALUE OF OPERAND
2527 80               (        forth.asm):00581                 FCB     $80
2528 534241           (        forth.asm):00582                 FCC     'SBA'
252B 2523             (        forth.asm):00583                 FDB     NEG
252D                  (        forth.asm):00584         ABS
252D ECC4             (        forth.asm):00585                 LDD     ,U                                ;GET VALUE FROM STACK
252F 2BF2             (        forth.asm):00586                 BMI     NEG                               ;NEGATIVE, CONVERT
2531 39               (        forth.asm):00587                 RTS
                      (        forth.asm):00588         ;* '2-' - DECREMENT BY TWO
2532 80               (        forth.asm):00589                 FCB     $80
2533 2D32             (        forth.asm):00590                 FCC     '-2'
2535 252D             (        forth.asm):00591                 FDB     ABS
2537                  (        forth.asm):00592         TWOM
2537 ECC4             (        forth.asm):00593                 LDD     ,U                                ;GET TOP OF STACK
2539 830002           (        forth.asm):00594                 SUBD    #2                                ;DECREMENT BY TWO
253C                  (        forth.asm):00595         SAVDS
253C EDC4             (        forth.asm):00596                 STD     ,U                                ;RESAVE TOP OF STACK
253E 39               (        forth.asm):00597                 RTS
                      (        forth.asm):00598         ;* '2+' - INCREMENT BY TWO
253F 80               (        forth.asm):00599                 FCB     $80
2540 2B32             (        forth.asm):00600                 FCC     '+2'
2542 2537             (        forth.asm):00601                 FDB     TWOM
2544                  (        forth.asm):00602         TWOP
2544 ECC4             (        forth.asm):00603                 LDD     ,U                                ;GET TOP OF STACK
2546 C30002           (        forth.asm):00604                 ADDD    #2                                ;INCREMENT BY TWO
2549 20F1             (        forth.asm):00605                 BRA     SAVDS                             ;RESAVE TOP OF STACK
                      (        forth.asm):00606         ;* '1-' - DECREMENT BY ONE
254B 80               (        forth.asm):00607                 FCB     $80
254C 2D31             (        forth.asm):00608                 FCC     '-1'
254E 2544             (        forth.asm):00609                 FDB     TWOP
2550                  (        forth.asm):00610         ONEM
2550 ECC4             (        forth.asm):00611                 LDD     ,U                                ;GET TOP OF STACK
2552 830001           (        forth.asm):00612                 SUBD    #1                                ;DECREMENT BY ONE
2555 20E5             (        forth.asm):00613                 BRA     SAVDS                             ;RESAVE TOP OF STACK
                      (        forth.asm):00614         ;* '1+' - INCREMENT BY ONE
2557 80               (        forth.asm):00615                 FCB     $80
2558 2B31             (        forth.asm):00616                 FCC     '+1'
255A 2550             (        forth.asm):00617                 FDB     ONEM
255C                  (        forth.asm):00618         ONEP
255C ECC4             (        forth.asm):00619                 LDD     ,U                                ;GET TOP OF STACK
255E C30001           (        forth.asm):00620                 ADDD    #1                                ;INCREMENT BY ONE
2561 20D9             (        forth.asm):00621                 BRA     SAVDS                             ;RESAVE TOP OF STACK
                      (        forth.asm):00622         ;* 'SKIP' - ADVANCE INPUT POINTER TO NON-BLANK
2563 80               (        forth.asm):00623                 FCB     $80
2564 50494B53         (        forth.asm):00624                 FCC     'PIKS'
2568 255C             (        forth.asm):00625                 FDB     ONEP
256A                  (        forth.asm):00626         QSKIP
256A 10BE2B6B         (        forth.asm):00627                 LDY     INPTR+3                           ;GET CURRENT POSITION IN INPUT BUFFER
256E                  (        forth.asm):00628         QSKI1
256E A6A0             (        forth.asm):00629                 LDA     ,Y+                               ;GET CHARACTER FROM INPUT BUFFER
2570 8120             (        forth.asm):00630                 CMPA    #' '                              ;IS IT A SPACE
2572 27FA             (        forth.asm):00631                 BEQ     QSKI1                             ;YES, KEEP GOING
2574 313F             (        forth.asm):00632                 LEAY    -1,Y                              ;BACKUP TO IT
2576 10BF2B6B         (        forth.asm):00633                 STY     INPTR+3                           ;RESAVE INPUT POINTER
257A 4D               (        forth.asm):00634                 TSTA                                      ;     TEST FOR END OF LINE
257B 39               (        forth.asm):00635                 RTS
                      (        forth.asm):00636         ;*
                      (        forth.asm):00637         ;* SUBROUTINE TO LOOKUP WORDS IN DICTIONARY FROM INPUT LINE
                      (        forth.asm):00638         ;* ON EXIT: 'Z' IS SET IF WORD NOT FOUND
                      (        forth.asm):00639         ;*      IF WORD IS FOUND ('Z'=0), ITS ADDRESS IS STACKED ON THE
                      (        forth.asm):00640         ;*      DATA STACK, AND THE WORD DESCRIPTOR BYTE IS RETURNED IN
                      (        forth.asm):00641         ;*      THE 'A' ACCUMULATOR
                      (        forth.asm):00642         ;*
257C                  (        forth.asm):00643         LOOKUP
257C 3430             (        forth.asm):00644                 PSHS    X,Y                               ;SAVE REGISTERS
257E 8DEA             (        forth.asm):00645                 BSR     QSKIP                             ;ADVANCE TO WORD
2580 10BF2000         (        forth.asm):00646                 STY     LSTLOK                            ;SAVE INCASE ERROR
2584 BE2B8F           (        forth.asm):00647                 LDX     HERE+3                            ;GET START OF DICTIONARY
                      (        forth.asm):00648         ;* SCAN DICTIONARY, LOOKING FOR WORD
2587                  (        forth.asm):00649         LOK1
2587 3410             (        forth.asm):00650                 PSHS    X                                 ;SAVE CURRENT ADDRESS
2589 301E             (        forth.asm):00651                 LEAX    -2,X                              ;BACKUP PAST PRECEDING ADDRESS
258B                  (        forth.asm):00652         LOK2
258B A682             (        forth.asm):00653                 LDA     ,-X                               ;GET CHARACTER FROM NAME
258D 2B10             (        forth.asm):00654                 BMI     LOK3                              ;DECREIPTOR BYTE, START OF WORD
258F A1A0             (        forth.asm):00655                 CMPA    ,Y+                               ;DOES IT MATCH INPUT BUFFER?
2591 27F8             (        forth.asm):00656                 BEQ     LOK2                              ;YES, KEEP MATCHING TILL END OF WORD
2593                  (        forth.asm):00657         LOK5
2593 3510             (        forth.asm):00658                 PULS    X                                 ;RESTORE POINTER
2595 AE83             (        forth.asm):00659                 LDX     ,--X                              ;GET ADDRESS OF PREVIOUS WORD
2597 2716             (        forth.asm):00660                 BEQ     LOK4                              ;END OF DICTIONARY, QUIT
2599 10BE2B6B         (        forth.asm):00661                 LDY     INPTR+3                           ;RESTORE INPUT POINTER
259D 20E8             (        forth.asm):00662                 BRA     LOK1                              ;TRY FOR THIS WORD
259F                  (        forth.asm):00663         LOK3
259F E6A4             (        forth.asm):00664                 LDB     ,Y                                ;GET NET CHAR FROM INPUT STREAM
25A1 8D0E             (        forth.asm):00665                 BSR     TSTERM                            ;IS IT A TERMINATOR?
25A3 26EE             (        forth.asm):00666                 BNE     LOK5                              ;NO, WORD DOES NOT MATCH
25A5 3506             (        forth.asm):00667                 PULS    A,B                               ;RESTORE ADDRESS OF WORD
25A7 EDC3             (        forth.asm):00668                 STD     ,--U                              ;SAVE ON STACK
25A9 8DC3             (        forth.asm):00669                 BSR     QSKI1                             ;SKIP TO NEXT NON-BLANK
25AB A684             (        forth.asm):00670                 LDA     ,X                                ;GET DESCRIPTOR BYTE
25AD 1CFB             (        forth.asm):00671                 ANDCC   #$FB                              ;CLEAR 'Z' FLAG
25AF                  (        forth.asm):00672         LOK4
25AF 35B0             (        forth.asm):00673                 PULS    X,Y,PC
                      (        forth.asm):00674         ;* ROUTINE TO TEST FOR TERMINATOR CHARACTER
25B1                  (        forth.asm):00675         TSTERM
25B1 C120             (        forth.asm):00676                 CMPB    #' '                              ;IS IT A SPACE?
25B3 2701             (        forth.asm):00677                 BEQ     TSTER1                            ;YES, ITS OK
25B5 5D               (        forth.asm):00678                 TSTB                                      ;     IS IT NULL (END OF LINE)?
25B6                  (        forth.asm):00679         TSTER1
25B6 39               (        forth.asm):00680                 RTS
                      (        forth.asm):00681         ;* ''' - TICK: RETURN ADDRESS OF A WORD
25B7 8127             (        forth.asm):00682                 FCB     $81,$27
25B9 256A             (        forth.asm):00683                 FDB     QSKIP
25BB                  (        forth.asm):00684         TICK
25BB 8DBF             (        forth.asm):00685                 BSR     LOOKUP                            ;LOOK UP WORD
25BD 26F7             (        forth.asm):00686                 BNE     TSTER1                            ;FOUND, RETURN
25BF 160148           (        forth.asm):00687                 LBRA    LOKERR                            ;WORD NOT FOUND, CAUSE ERROR
                      (        forth.asm):00688         ;* 'EXEC' - EXECUTE AT ADDRESS
25C2 80               (        forth.asm):00689                 FCB     $80
25C3 43455845         (        forth.asm):00690                 FCC     'CEXE'
25C7 25BB             (        forth.asm):00691                 FDB     TICK
25C9                  (        forth.asm):00692         EXEC
25C9 6ED1             (        forth.asm):00693                 JMP     [,U++]                            ;EXECUTE AT ADDRESS ON [TOS]
                      (        forth.asm):00694         ;* 'NUMBER' - GET NUMBER FROM INPUT STREAM IN CURRENT BASE
25CB 0080             (        forth.asm):00695                 FDB     $80
25CD 5245424D554E     (        forth.asm):00696                 FCC     'REBMUN'
25D3 25C9             (        forth.asm):00697                 FDB     EXEC
25D5                  (        forth.asm):00698         NUMBER
25D5 3430             (        forth.asm):00699                 PSHS    X,Y                               ;SAVE REGS
25D7 17FF90           (        forth.asm):00700                 LBSR    QSKIP                             ;ADVANCE TO NEXT WORD IN INPUT STREAM
25DA 812D             (        forth.asm):00701                 CMPA    #'-'                              ;IS IT A NEGATIVE NUMBER?
25DC 3401             (        forth.asm):00702                 PSHS    CC                                ;SAVE FLAGS FO LATER TEST
25DE 2602             (        forth.asm):00703                 BNE     NUM4                              ;NO, NOT NEGATIVE
25E0 3121             (        forth.asm):00704                 LEAY    1,Y                               ;SKIP '-' SIGN
25E2                  (        forth.asm):00705         NUM4
25E2 4F               (        forth.asm):00706                 CLRA                                      ;     START OFF
25E3 5F               (        forth.asm):00707                 CLRB                                      ;     WITH A ZERO RESULT
25E4 3606             (        forth.asm):00708                 PSHU    A,B                               ;SAVE ON STACK
25E6                  (        forth.asm):00709         NUM2
25E6 E6A0             (        forth.asm):00710                 LDB     ,Y+                               ;GET CHAR FROM SOUCE
25E8 C030             (        forth.asm):00711                 SUBB    #'0'                              ;CONVERT TO BINARY
25EA C109             (        forth.asm):00712                 CMPB    #9                                ;IS IT NUMERIC DIGIT?
25EC 2306             (        forth.asm):00713                 BLS     NUM1                              ;YES, ITS OK
25EE C007             (        forth.asm):00714                 SUBB    #7                                ;CONVERT FROM ALPHA
25F0 C10A             (        forth.asm):00715                 CMPB    #$0A                              ;IS IT A VALID NUMBER?
25F2 252C             (        forth.asm):00716                 BLO     NUM3                              ;NO, CAUSE ERROR
25F4                  (        forth.asm):00717         NUM1
25F4 4F               (        forth.asm):00718                 CLRA                                      ;     ZERO HIGH BYTE
25F5 10B32B77         (        forth.asm):00719                 CMPD    BASE+3                            ;ARE WE WITHIN RANGE OF CURRENT BASE
25F9 2425             (        forth.asm):00720                 BHS     NUM3                              ;NO, CAUSE ERROR
25FB 3406             (        forth.asm):00721                 PSHS    A,B                               ;SAVE NUMBER
25FD FC2B77           (        forth.asm):00722                 LDD     BASE+3                            ;GET BASE
2600 3606             (        forth.asm):00723                 PSHU    A,B                               ;STACK
2602 BD2425           (        forth.asm):00724                 JSR     MULT                              ;PERFORM MULTIPLY (OLD VALUE ALREADY ON DATA STACK)
2605 3506             (        forth.asm):00725                 PULS    A,B                               ;GET NEW DIGIT BACK
2607 E3C4             (        forth.asm):00726                 ADDD    ,U                                ;ADD TO OLD VALUE
2609 EDC4             (        forth.asm):00727                 STD     ,U                                ;RESAVE OLD VALUE
260B E6A4             (        forth.asm):00728                 LDB     ,Y                                ;GET NEXT CHARACTER FROM NUMBER
260D 17FFA1           (        forth.asm):00729                 LBSR    TSTERM                            ;IS IT A TERMINATOR
2610 26D4             (        forth.asm):00730                 BNE     NUM2                              ;NO, KEEP EVALUATING NUMBER
2612 10BF2B6B         (        forth.asm):00731                 STY     INPTR+3                           ;RESAVE INPUT POINTER
2616 3531             (        forth.asm):00732                 PULS    CC,X,Y                            ;RESTORE REGISTERS
2618 2603             (        forth.asm):00733                 BNE     NUM5                              ;NO NEGATIVE, DON'T NEGATE
261A BD2523           (        forth.asm):00734                 JSR     NEG                               ;NEGATE VALUE
261D                  (        forth.asm):00735         NUM5
261D 160517           (        forth.asm):00736                 LBRA    ONE                               ;RETURN TRUE (SUCCESS)
2620                  (        forth.asm):00737         NUM3
2620 3531             (        forth.asm):00738                 PULS    CC,X,Y                            ;CLEAN UP STACK
2622 160509           (        forth.asm):00739                 LBRA    ZERO                              ;RETURN FALSE (FAILURE)
                      (        forth.asm):00740         ;* 'SPACE' - DISPLAY A SPACE ON GENERAL OUTPUT
2625 80               (        forth.asm):00741                 FCB     $80
2626 4543415053       (        forth.asm):00742                 FCC     'ECAPS'
262B 25D5             (        forth.asm):00743                 FDB     NUMBER
262D                  (        forth.asm):00744         SPACE
262D C620             (        forth.asm):00745                 LDB     #' '                              ;GET A SPACE
262F 3606             (        forth.asm):00746                 PSHU    A,B                               ;PLACEON DATA STACK
2631 7E2302           (        forth.asm):00747                 JMP     EMIT                              ;OUTPUT
                      (        forth.asm):00748         ;* 'CR' - DISPLAY CARRIAGE-RETURN, LINE-FEED ON GENERAL OUTPUT
2634 80               (        forth.asm):00749                 FCB     $80
2635 5243             (        forth.asm):00750                 FCC     'RC'
2637 262D             (        forth.asm):00751                 FDB     SPACE
2639                  (        forth.asm):00752         CR
2639 CC000D           (        forth.asm):00753                 LDD     #$0D                              ;GET CARRIAGE RETURN
263C 3606             (        forth.asm):00754                 PSHU    A,B                               ;PLACE ON STACK
263E BD2302           (        forth.asm):00755                 JSR     EMIT                              ;OUTPUT TO GENERAL OUTPUT
2641 C60A             (        forth.asm):00756                 LDB     #$0A                              ;GET LINE-FEED
2643 3606             (        forth.asm):00757                 PSHU    A,B                               ;PLACE ON STACK
2645 7E2302           (        forth.asm):00758                 JMP     EMIT                              ;OUTPUT TO GENERAL OUTPUT
                      (        forth.asm):00759         ;* 'READ' - READ A LINE FROM INPUT DEVICE
2648 80               (        forth.asm):00760                 FCB     $80
2649 44414552         (        forth.asm):00761                 FCC     'DAER'
264D 2639             (        forth.asm):00762                 FDB     CR
264F                  (        forth.asm):00763         READ
264F 8DE8             (        forth.asm):00764                 BSR     CR                                ;NEW LINE
2651                  (        forth.asm):00765         READNC
2651 108E2004         (        forth.asm):00766                 LDY     #INPBUF                           ;POINT TO INPUT BUFFER
2655                  (        forth.asm):00767         READ1
2655 BD230C           (        forth.asm):00768                 JSR     KEY                               ;GET A KEY
2658 C10D             (        forth.asm):00769                 CMPB    #$0D                              ;IS IT CARRIAGE RETURN
265A 271C             (        forth.asm):00770                 BEQ     READ2                             ;YES, EXIT
265C C17F             (        forth.asm):00771                 CMPB    #$7F                              ;IS IT DELETE?
265E 2611             (        forth.asm):00772                 BNE     READ3                             ;NO, NORMAL CHARACTER
                      (        forth.asm):00773         ;* DELETE KEY, DELETE PREVIOUS CHARACTER
2660 3342             (        forth.asm):00774                 LEAU    2,U                               ;REMOVE KEYCODE FROM STACK
2662 313F             (        forth.asm):00775                 LEAY    -1,Y                              ;BACKUP UP INPUT BUFFER POINTER
2664 108C2004         (        forth.asm):00776                 CMPY    #INPBUF                           ;PAST BEGINNING?
2668 25E5             (        forth.asm):00777                 BLO     READ                              ;IF SO, RE-INITIATE READ
266A 8E222C           (        forth.asm):00778                 LDX     #DELMSG                           ;POINT TO DELETE MESSAGE
266D 8D1F             (        forth.asm):00779                 BSR     PMSG1                             ;DISPLAY
266F 20E4             (        forth.asm):00780                 BRA     READ1                             ;GO BACK FOR NEXT KEY
                      (        forth.asm):00781         ;* NORMAL KEY
2671                  (        forth.asm):00782         READ3
2671 E7A0             (        forth.asm):00783                 STB     ,Y+                               ;SAVE KEY IN BUFFER
2673 BD2302           (        forth.asm):00784                 JSR     EMIT                              ;ECHO KEY
2676 20DD             (        forth.asm):00785                 BRA     READ1                             ;GO BACK FOR ANOTHER
                      (        forth.asm):00786         ;* CARRIAGE RETURN, TERMINATE INPUT
2678                  (        forth.asm):00787         READ2
2678 3342             (        forth.asm):00788                 LEAU    2,U                               ;REMOVE KEYCODE FROM STACK
267A 6FA4             (        forth.asm):00789                 CLR     ,Y                                ;INDICATE END OF INPUT LINE
267C 108E2004         (        forth.asm):00790                 LDY     #INPBUF                           ;POINT TO INPUT BUFFER
2680 10BF2B6B         (        forth.asm):00791                 STY     INPTR+3                           ;SET UP INPUT BUFFER POINTER
2684                  (        forth.asm):00792         PMSG2
2684 39               (        forth.asm):00793                 RTS
                      (        forth.asm):00794         ;* '.MSG' - DISPLAY MESSAGE, ADDRESS ON STACK
2685 80               (        forth.asm):00795                 FCB     $80
2686 47534D2E         (        forth.asm):00796                 FCC     'GSM.'
268A 264F             (        forth.asm):00797                 FDB     READ
268C                  (        forth.asm):00798         PMSG
268C AEC1             (        forth.asm):00799                 LDX     ,U++                              ;GET ADDRESS
268E                  (        forth.asm):00800         PMSG1
268E E680             (        forth.asm):00801                 LDB     ,X+                               ;GET CHARACTER FROM MESSAGE
2690 27F2             (        forth.asm):00802                 BEQ     PMSG2                             ;END OF MESSAGE, EXIT
2692 3606             (        forth.asm):00803                 PSHU    A,B                               ;SAVE ON STACK
2694 BD2302           (        forth.asm):00804                 JSR     EMIT                              ;OUTPUT TO GENERAL OUTPUT
2697 20F5             (        forth.asm):00805                 BRA     PMSG1                             ;GET NEXT CHARACTER
                      (        forth.asm):00806         ;* '.WRD' - DISPLAY A WORD ON GENERAL OUTPUT (STRING)
2699 80               (        forth.asm):00807                 FCB     $80
269A 4452572E         (        forth.asm):00808                 FCC     'DRW.'
269E 268C             (        forth.asm):00809                 FDB     PMSG
26A0                  (        forth.asm):00810         PWRD
26A0 AEC1             (        forth.asm):00811                 LDX     ,U++                              ;GET ADDRESS OF WORD
26A2                  (        forth.asm):00812         PWRD1
26A2 E680             (        forth.asm):00813                 LDB     ,X+                               ;GET CHARACTER FROM WORD
26A4 17FF0A           (        forth.asm):00814                 LBSR    TSTERM                            ;IS IT A TERMINATOR?
26A7 27DB             (        forth.asm):00815                 BEQ     PMSG2                             ;YES, QUIT
26A9 3606             (        forth.asm):00816                 PSHU    A,B                               ;SAVE DATA ON STACK
26AB BD2302           (        forth.asm):00817                 JSR     EMIT                              ;OUTPUT TO GENERAL OUTPUT
26AE 20F2             (        forth.asm):00818                 BRA     PWRD1                             ;GET NEXT WORD
                      (        forth.asm):00819         ;* 'QUIT - GENERAL COMMAND INTERPRETER, USED TO TERMINATE WORDS
26B0 80               (        forth.asm):00820                 FCB     $80
26B1 54495551         (        forth.asm):00821                 FCC     'TIUQ'
26B5 26A0             (        forth.asm):00822                 FDB     PWRD
26B7                  (        forth.asm):00823         QUIT
26B7 BD2747           (        forth.asm):00824                 JSR     RPFIX                             ;RESET RETURN STACK
26BA 8E2213           (        forth.asm):00825                 LDX     #PROMPT                           ;POINT TO PROMPT
26BD 8DCF             (        forth.asm):00826                 BSR     PMSG1                             ;DISPLAY PROMPT
26BF 17FF8F           (        forth.asm):00827                 LBSR    READNC                            ;READ A LINE OF INPUT
26C2 BD262D           (        forth.asm):00828                 JSR     SPACE                             ;SEPERATE BY A SPACE
26C5                  (        forth.asm):00829         QUI1
26C5 BD256A           (        forth.asm):00830                 JSR     QSKIP                             ;ADANCE TO NON-BLANK
26C8 27ED             (        forth.asm):00831                 BEQ     QUIT                              ;NULL LINE, DO NOTHING
26CA BD257C           (        forth.asm):00832                 JSR     LOOKUP                            ;LOOK UP WORD
26CD 271A             (        forth.asm):00833                 BEQ     QUI2                              ;NOT FOUND, TRY NUMBER
26CF 8502             (        forth.asm):00834                 BITA    #$02                              ;OK TO EXECUTE INTERACTIVLY?
26D1 2643             (        forth.asm):00835                 BNE     CONERR                            ;NO, FORCE ERROR
26D3 ADD1             (        forth.asm):00836                 JSR     [,U++]                            ;EXECUTE WORD
26D5 11832200         (        forth.asm):00837                 CMPU    #DSTACK                           ;DID STACK UNDERFLOW?
26D9 23EA             (        forth.asm):00838                 BLS     QUI1                              ;NO, KEEP INTERPRETING
26DB 8D15             (        forth.asm):00839                 BSR     ERROR                             ;GENERATE ERROR MESSAGE
26DD 537461636B20656D (        forth.asm):00840                 FCN     'Stack empty'
     70747900
                      (        forth.asm):00841         ;* NOT A WORD, TRY FOR NUMBER
26E9                  (        forth.asm):00842         QUI2
26E9 BD25D5           (        forth.asm):00843                 JSR     NUMBER                            ;TRY FOR NUMBER
26EC ECC1             (        forth.asm):00844                 LDD     ,U++                              ;GET FLAG BYTE
26EE 271A             (        forth.asm):00845                 BEQ     LOKERR                            ;NOT A NUMBER. INDICATE NOT FOUND
26F0 20D3             (        forth.asm):00846                 BRA     QUI1                              ;KEEP INTERPRETING
                      (        forth.asm):00847         ;* SUBROUTINE TO GENERATE ERROR MESSAGE, FIRST DISPLAYS 'ERROR:' MESSAGE,
                      (        forth.asm):00848         ;* THEN NAME OF LAST WORD PROCESSED, THEN ERROR MESSAGE TEXT
26F2                  (        forth.asm):00849         ERROR
26F2 8E2219           (        forth.asm):00850                 LDX     #ERMSG1                           ;GET POINTER TO ERROR MESSAGE PREFIX
26F5 8D97             (        forth.asm):00851                 BSR     PMSG1                             ;DISPLAY PREFIX
26F7 BE2000           (        forth.asm):00852                 LDX     LSTLOK                            ;GET ADDRESS OF LAST WORD FROM INPUT BUFFER
26FA 8DA6             (        forth.asm):00853                 BSR     PWRD1                             ;DISPLAY WORD
26FC 8E2221           (        forth.asm):00854                 LDX     #ERMSG2                           ;POINT TO ERROR MESSAGE SUFFIX
26FF 8D8D             (        forth.asm):00855                 BSR     PMSG1                             ;DISPLAY SUFFIX
2701 AEE1             (        forth.asm):00856                 LDX     ,S++                              ;GET ADDRESS OF ERROR MESSAGE
2703 8D89             (        forth.asm):00857                 BSR     PMSG1                             ;DISPLAY MESSAGE
2705 BD2755           (        forth.asm):00858                 JSR     SPFIX                             ;RESET DATA STACK
2708 20AD             (        forth.asm):00859                 BRA     QUIT                              ;AND ENTER COMMAND INTREPRETER
                      (        forth.asm):00860         ;* WORD WAS NOT FOUND IN THE DICTIONARY
270A                  (        forth.asm):00861         LOKERR
270A 8DE6             (        forth.asm):00862                 BSR     ERROR                             ;GENERATE ERROR MESSAGE
270C 4E6F7420666F756E (        forth.asm):00863                 FCN     'Not found'
     6400
                      (        forth.asm):00864         ;* WORD CAN NOT BE EXECUTED INTERACTIVELY
2716                  (        forth.asm):00865         CONERR
2716 8DDA             (        forth.asm):00866                 BSR     ERROR                             ;GENERATE ERROR MESSAGE
2718 43616E6E6F742065 (        forth.asm):00867                 FCN     'Cannot execute'
     78656375746500
                      (        forth.asm):00868         ;* '>R' - MOVE WORD FROM DATA TO RETURN STACK
2727 80               (        forth.asm):00869                 FCB     $80
2728 523E             (        forth.asm):00870                 FCC     'R>'
272A 26B7             (        forth.asm):00871                 FDB     QUIT
272C                  (        forth.asm):00872         TOR
272C AEE4             (        forth.asm):00873                 LDX     ,S                                ;GET RETURN ADDRESS
272E ECC1             (        forth.asm):00874                 LDD     ,U++                              ;GET DATA FROM DATA STACK
2730 EDE4             (        forth.asm):00875                 STD     ,S                                ;PLACE ON RETURN STACK
2732 1F15             (        forth.asm):00876                 TFR     X,PC                              ;RETURN TO CALLER
                      (        forth.asm):00877         ;* '<R' - MOVE WORD FROM RETURN STACK TO DATA STACK
2734 80               (        forth.asm):00878                 FCB     $80
2735 523C             (        forth.asm):00879                 FCC     'R<'
2737 272C             (        forth.asm):00880                 FDB     TOR
2739                  (        forth.asm):00881         FROMR
2739 AEE1             (        forth.asm):00882                 LDX     ,S++                              ;GET RETURN ADDRESS
273B ECE1             (        forth.asm):00883                 LDD     ,S++                              ;GET DATA FROM RETURN STACK
273D EDC3             (        forth.asm):00884                 STD     ,--U                              ;PLACE ON DATA STACK
273F 1F15             (        forth.asm):00885                 TFR     X,PC                              ;RETURN TO CALLER
                      (        forth.asm):00886         ;* 'RP!' - RESET RETURN STACK
2741 80               (        forth.asm):00887                 FCB     $80
2742 215052           (        forth.asm):00888                 FCC     '!PR'
2745 2739             (        forth.asm):00889                 FDB     FROMR
2747                  (        forth.asm):00890         RPFIX
2747 3506             (        forth.asm):00891                 PULS    A,B                               ;GET RETURN ADDRESS
2749 10CE2100         (        forth.asm):00892                 LDS     #RSTACK                           ;RESET RETURN STACK
274D 1F05             (        forth.asm):00893                 TFR     D,PC                              ;RETURN TO CALLER
                      (        forth.asm):00894         ;* 'SP!' - RESET DATA STACK
274F 80               (        forth.asm):00895                 FCB     $80
2750 215053           (        forth.asm):00896                 FCC     '!PS'
2753 2747             (        forth.asm):00897                 FDB     RPFIX
2755                  (        forth.asm):00898         SPFIX
2755 CE2200           (        forth.asm):00899                 LDU     #DSTACK                           ;RESET DATA STACK
2758                  (        forth.asm):00900         VOC9
2758 39               (        forth.asm):00901                 RTS
                      (        forth.asm):00902         ;* ''S' - OBTAIN STACK ADDRESS
2759 80               (        forth.asm):00903                 FCB     $80
275A 53               (        forth.asm):00904                 FCC     'S'
275B 00272755         (        forth.asm):00905                 FDB     $27,SPFIX
275F                  (        forth.asm):00906         TICS
275F EFC3             (        forth.asm):00907                 STU     ,--U                              ;SAVE DATA STACK POINTER
2761 39               (        forth.asm):00908                 RTS
                      (        forth.asm):00909         ;* 'VLIST' - DISPLAY WORDS IN DICTIONARY
2762 80               (        forth.asm):00910                 FCB     $80
2763 5453494C56       (        forth.asm):00911                 FCC     'TSILV'
2768 275F             (        forth.asm):00912                 FDB     TICS
276A                  (        forth.asm):00913         VOC
276A BE2B8F           (        forth.asm):00914                 LDX     HERE+3                            ;GET ADDRESS OF START OF DICTIONARY
276D                  (        forth.asm):00915         VOC1
276D BD2639           (        forth.asm):00916                 JSR     CR                                ;NEW LINE
2770 4F               (        forth.asm):00917                 CLRA                                      ;     ZERO CHARACTER COUNT
2771                  (        forth.asm):00918         VOC2
2771 3412             (        forth.asm):00919                 PSHS    A,X                               ;SAVE COUNT, CURRENT POSITION
2773 301E             (        forth.asm):00920                 LEAX    -2,X                              ;BACKUP TO WORD NAME
2775                  (        forth.asm):00921         VOC3
2775 E682             (        forth.asm):00922                 LDB     ,-X                               ;GET CHARACTER FROM WORD NAME
2777 2B09             (        forth.asm):00923                 BMI     VOC4                              ;DESCRIPTOR BYTE, END OF NAME
2779 3606             (        forth.asm):00924                 PSHU    A,B                               ;SAVE ON DATA STACK
277B BD2302           (        forth.asm):00925                 JSR     EMIT                              ;OUTPUT TO GENERAL OUTPUT
277E 6CE4             (        forth.asm):00926                 INC     ,S                                ;INCREMENT CHARACTER COUNT
2780 20F3             (        forth.asm):00927                 BRA     VOC3                              ;KEEP OUTPUTING
2782                  (        forth.asm):00928         VOC4
2782 BD262D           (        forth.asm):00929                 JSR     SPACE                             ;SEPERATE WITH A SPACE
2785 3512             (        forth.asm):00930                 PULS    A,X                               ;RESTORE CHARACTER COUNT, POSITION IN DICTIONARY
2787 4C               (        forth.asm):00931                 INCA                                      ;     ADVANCE CHARACTER COUNT FOR SPACE
2788 AE83             (        forth.asm):00932                 LDX     ,--X                              ;GET ADDRESS OF NEXT WORD
278A 27CC             (        forth.asm):00933                 BEQ     VOC9                              ;END OF DICTIONARY, EXIT
278C 8141             (        forth.asm):00934                 CMPA    #WIDTH                            ;ARE WE BEYOND TERMINAL WIDTH?
278E 25E1             (        forth.asm):00935                 BLO     VOC2                              ;NO, ITS OK
2790 20DB             (        forth.asm):00936                 BRA     VOC1                              ;CONTINUE ON NEW LINE
                      (        forth.asm):00937         ;* 'BYE' - EXIT FORTH
2792 80               (        forth.asm):00938                 FCB     $80
2793 455942           (        forth.asm):00939                 FCC     'EYB'
2796 276A             (        forth.asm):00940                 FDB     VOC
2798                  (        forth.asm):00941         BYE
2798 3F               (        forth.asm):00942                 SWI
2799 16               (        forth.asm):00943                 FCB     22                                ;NEW LINE
279A 3F               (        forth.asm):00944                 SWI
279B 00               (        forth.asm):00945                 FCB     0                                 ;EXIT TO SYSTEM
                      (        forth.asm):00946         ;* 'FORGET' - REMOVE ONE OR MORE WORDS FROM DICTIONARY
279C 80               (        forth.asm):00947                 FCB     $80
279D 544547524F46     (        forth.asm):00948                 FCC     'TEGROF'
27A3 2798             (        forth.asm):00949                 FDB     BYE
27A5                  (        forth.asm):00950         FORGET
27A5 BD25BB           (        forth.asm):00951                 JSR     TICK                              ;LOCATE WORDS ADDRESS
27A8 3710             (        forth.asm):00952                 PULU    X                                 ;GET ADDRESS
27AA 8C2B91           (        forth.asm):00953                 CMPX    #USRSPC                           ;IS IT IN KERNAL DICTIONARY?
27AD 250D             (        forth.asm):00954                 BLO     PROERR                            ;IF SO, CAN'T BE FORGOTTON
27AF EC83             (        forth.asm):00955                 LDD     ,--X                              ;GET ADDRESS OF PREVIOUS WORD
27B1 FD2B8F           (        forth.asm):00956                 STD     HERE+3                            ;NEW DICTIONARY START
27B4                  (        forth.asm):00957         FORG1
27B4 A682             (        forth.asm):00958                 LDA     ,-X                               ;GET CHARACTER FROM NAME
27B6 2AFC             (        forth.asm):00959                 BPL     FORG1                             ;KEEP GOING TILL WE FIND DESCRIPTOR BYTE
27B8 BF2B83           (        forth.asm):00960                 STX     FREE+3                            ;NEW FREE SPACE FOR DICTIONARY
27BB 39               (        forth.asm):00961                 RTS
                      (        forth.asm):00962         ;* WORD IS PROTECTED, CAN'T 'FORGET' IT
27BC                  (        forth.asm):00963         PROERR
27BC 17FF33           (        forth.asm):00964                 LBSR    ERROR                             ;GENERATE ERROR MESSAGE
27BF 50726F7465637465 (        forth.asm):00965                 FCN     'Protected'
     6400
                      (        forth.asm):00966         ;* 'CREATE' - CREATE NEW WORD IN DICTIONARY
27C9 0080             (        forth.asm):00967                 FDB     $80
27CB 455441455243     (        forth.asm):00968                 FCC     'ETAERC'
27D1 27A5             (        forth.asm):00969                 FDB     FORGET
27D3                  (        forth.asm):00970         CREATE
27D3 10BE2B6B         (        forth.asm):00971                 LDY     INPTR+3                           ;GET INPUT BUFFER POSITION
27D7 17FDA2           (        forth.asm):00972                 LBSR    LOOKUP                            ;SEE IF IT ALREADY EXISTS
27DA 270D             (        forth.asm):00973                 BEQ     CRE1                              ;NO, ITS OK
27DC 3342             (        forth.asm):00974                 LEAU    2,U                               ;REMOVE ADDRESS OF EXISTING WORD
27DE 8E2224           (        forth.asm):00975                 LDX     #REDMSG                           ;POINT TO REDEFINITION MESSAGE
27E1 17FEAA           (        forth.asm):00976                 LBSR    PMSG1                             ;OUTPUT MESSAGE
27E4 1F21             (        forth.asm):00977                 TFR     Y,X                               ;POINT TO WORD WE ARE RE-DEFINING
27E6 17FEB9           (        forth.asm):00978                 LBSR    PWRD1                             ;OUTPUT WORD TO GENERAL OUTPUT
27E9                  (        forth.asm):00979         CRE1
27E9 17FD82           (        forth.asm):00980                 LBSR    QSKI1                             ;ADVANCE TO NEXT NON-BLANK, SAVE POINTER
27EC 86FF             (        forth.asm):00981                 LDA     #$FF                              ;START WITH COUNT OF -1
27EE                  (        forth.asm):00982         CRE3
27EE E6A0             (        forth.asm):00983                 LDB     ,Y+                               ;GET CHARACTER FROM WORD
27F0 4C               (        forth.asm):00984                 INCA                                      ;     ADVANCE WORD SIZE COUNT
27F1 17FDBD           (        forth.asm):00985                 LBSR    TSTERM                            ;TERMINATOR CHARACTER
27F4 26F8             (        forth.asm):00986                 BNE     CRE3                              ;LOOK TILL WE FIND END
27F6 313F             (        forth.asm):00987                 LEAY    -1,Y                              ;BACKUP TO LAST CHAR
27F8 10BF2B6B         (        forth.asm):00988                 STY     INPTR+3                           ;SAVE NEW BUFFER POSITION
27FC BE2B83           (        forth.asm):00989                 LDX     FREE+3                            ;GET ADDRESS OF FREE DICTIONARY SPACE
27FF C680             (        forth.asm):00990                 LDB     #$80                              ;GET DEFAULT DESCRIPTOR BYTE
2801 E780             (        forth.asm):00991                 STB     ,X+                               ;SAVE IN DICTIONARY
2803                  (        forth.asm):00992         CRE2
2803 E6A2             (        forth.asm):00993                 LDB     ,-Y                               ;GET CHARACTER FROM NAME
2805 E780             (        forth.asm):00994                 STB     ,X+                               ;SAVE IN DICTIONARY
2807 4A               (        forth.asm):00995                 DECA                                      ;     REDUCE COUNT OF NAME LENGTH
2808 26F9             (        forth.asm):00996                 BNE     CRE2                              ;MOVE ALL OF NAME INTO DICTIONARY
280A FC2B8F           (        forth.asm):00997                 LDD     HERE+3                            ;GET ADDRESS OF PREVIOUS ENTRY
280D ED81             (        forth.asm):00998                 STD     ,X++                              ;SAVE IN DICTIONARY
280F BF2B8F           (        forth.asm):00999                 STX     HERE+3                            ;SAVE NEW STARTING ADDRESS
2812 BF2B83           (        forth.asm):01000                 STX     FREE+3                            ;SAVE NEW FREE SPACE ADDRESS
2815 39               (        forth.asm):01001                 RTS
                      (        forth.asm):01002         ;* 'ALLOT' - ALLOCATE SOME SPACE IN THE DICTIONARY
2816 80               (        forth.asm):01003                 FCB     $80
2817 544F4C4C41       (        forth.asm):01004                 FCC     'TOLLA'
281C 27D3             (        forth.asm):01005                 FDB     CREATE
281E                  (        forth.asm):01006         ALLOT
281E FC2B83           (        forth.asm):01007                 LDD     FREE+3                            ;GET ADDRESS OF FREE DICTIOANRY SPACE
2821 E3C1             (        forth.asm):01008                 ADDD    ,U++                              ;OFFSET BY NUMBER OF BYTES R=ESTED
2823 FD2B83           (        forth.asm):01009                 STD     FREE+3                            ;RESAVE NEW FREE POINTER
2826 39               (        forth.asm):01010                 RTS
                      (        forth.asm):01011         ;* 'VARIABLE' - CREATE A VARIABLE
2827 80               (        forth.asm):01012                 FCB     $80
2828 454C424149524156 (        forth.asm):01013                 FCC     'ELBAIRAV'
2830 281E             (        forth.asm):01014                 FDB     ALLOT
2832                  (        forth.asm):01015         VAR
2832 8D9F             (        forth.asm):01016                 BSR     CREATE                            ;CREATE THE VARIABLE NAME
2834 86BD             (        forth.asm):01017                 LDA     #$BD                              ;GET A 'JSR' EXTENDED INSTRUCTION
2836 A780             (        forth.asm):01018                 STA     ,X+                               ;INSERT INTO DICTIONARY
2838 CC220E           (        forth.asm):01019                 LDD     #VARIAB                           ;GET ADDRESS OF VARIABLE SUBROUTINE
283B ED81             (        forth.asm):01020                 STD     ,X++                              ;INSERT INTO DICTIONARY
283D ECC1             (        forth.asm):01021                 LDD     ,U++                              ;GET DEFAULT VARIABLE VALUE
283F ED81             (        forth.asm):01022                 STD     ,X++                              ;SAVE INTO DICTIONARY
2841 BF2B83           (        forth.asm):01023                 STX     FREE+3                            ;SET NEW FREE POINTER
2844 39               (        forth.asm):01024                 RTS
                      (        forth.asm):01025         ;* ';' - END A COLON DEFINITION, TERMINATE COMPILING
2845 83               (        forth.asm):01026                 FCB     $83
2846 3B               (        forth.asm):01027                 FCC     ';'
2847 2832             (        forth.asm):01028                 FDB     VAR
2849                  (        forth.asm):01029         SEMI
2849 EC1E             (        forth.asm):01030                 LDD     -2,X                              ;GET LAST INSTRUCTION COMPLIED
284B 10833606         (        forth.asm):01031                 CMPD    #$3606                            ;IS IT 'PSHU A,B'?
284F 270C             (        forth.asm):01032                 BEQ     SEMI1                             ;IF SO, ITS OK
2851 A61D             (        forth.asm):01033                 LDA     -3,X                              ;GET INSTRUCTION FROM DICTIONARY
2853 81BD             (        forth.asm):01034                 CMPA    #$BD                              ;IS IT 'JSR >'?
2855 2606             (        forth.asm):01035                 BNE     SEMI1                             ;NO, ITS OK
                      (        forth.asm):01036         ;* CONVERT 'JSR' FOLLOWED BY 'RTS' TO SIMPLE 'JMP'
2857 867E             (        forth.asm):01037                 LDA     #$7E                              ;GET 'JMP >' INSTRUCTION
2859 A71D             (        forth.asm):01038                 STA     -3,X                              ;SAVE IN DICTIONARY
285B 2004             (        forth.asm):01039                 BRA     SEMI2                             ;TERMINATE COMPILING
285D                  (        forth.asm):01040         SEMI1
285D 8639             (        forth.asm):01041                 LDA     #$39                              ;GET 'RTS' INSTRUCTION
285F A780             (        forth.asm):01042                 STA     ,X+                               ;SAVE IN DICTIONARY
2861                  (        forth.asm):01043         SEMI2
2861 BF2B83           (        forth.asm):01044                 STX     FREE+3                            ;RESAVE FREE POINTER
2864 7E26B7           (        forth.asm):01045                 JMP     QUIT                              ;RE-ENTER COMMAND INTERPRETER
                      (        forth.asm):01046         ;* ':' - COLON DEFINITION, BEGIN COMPLIING
2867 84               (        forth.asm):01047                 FCB     $84
2868 3A               (        forth.asm):01048                 FCC     ':'
2869 2849             (        forth.asm):01049                 FDB     SEMI
286B                  (        forth.asm):01050         COLON
286B BD27D3           (        forth.asm):01051                 JSR     CREATE                            ;CREATE NEW WORD
286E                  (        forth.asm):01052         COL1
286E BD256A           (        forth.asm):01053                 JSR     QSKIP                             ;ADVANCE TO NON-BLANK
2871 2605             (        forth.asm):01054                 BNE     COL11                             ;NOT END OF LINE, ITS OK
2873 BD264F           (        forth.asm):01055                 JSR     READ                              ;READ ANOTHER LINE (NO SEMICOLON YET)
2876 20F6             (        forth.asm):01056                 BRA     COL1                              ;AND CONTINUE SCANNING
                      (        forth.asm):01057         ;*WE HAVE A WORD, COMPILE INTO PRESENT DEFINITION
2878                  (        forth.asm):01058         COL11
2878 17FD01           (        forth.asm):01059                 LBSR    LOOKUP                            ;LOOKUP WORD
287B 260D             (        forth.asm):01060                 BNE     COL2                              ;FOUND, WE HAVE IT
287D BD25D5           (        forth.asm):01061                 JSR     NUMBER                            ;TRY IT AS A NUMBER
2880 ECC1             (        forth.asm):01062                 LDD     ,U++                              ;GET FLAG
2882 1027FE84         (        forth.asm):01063                 LBEQ    LOKERR                            ;NUMBER FAILED, ITS AN ERROR
                      (        forth.asm):01064         ;* NUMBER TO BE COMPILED INTO DICTIONARY
2886                  (        forth.asm):01065         COL12
2886 8D45             (        forth.asm):01066                 BSR     BRCL                              ;COMPILE LITERAL VALUE
2888 20E4             (        forth.asm):01067                 BRA     COL1                              ;AND KEEP SCANNING
                      (        forth.asm):01068         ;* WORD TO BE COMPILED INTO DICTIONARY
288A                  (        forth.asm):01069         COL2
288A 8504             (        forth.asm):01070                 BITA    #$04                              ;IS IT OK TO COMPILE?
288C 2618             (        forth.asm):01071                 BNE     INTERR                            ;NO, FORCE ERROR
288E 8501             (        forth.asm):01072                 BITA    #1                                ;DOES IT EXECUTE ON COMPILATION?
2890 2710             (        forth.asm):01073                 BEQ     COL3                              ;NO, NORMAL WORD
2892 FF2002           (        forth.asm):01074                 STU     TEMP                              ;SAVE STACK POINTER
2895 BE2B83           (        forth.asm):01075                 LDX     FREE+3                            ;GET FREE ADRESS FOR EC FUNCTIONS
2898 ADD1             (        forth.asm):01076                 JSR     [,U++]                            ;EXECUTE WORD
289A 11B32002         (        forth.asm):01077                 CMPU    TEMP                              ;DID IT LEAVE EXACTLY ONE WORD ON THE STACK?
289E 26CE             (        forth.asm):01078                 BNE     COL1                              ;NO, CONTINUE SCANNING
28A0 20E4             (        forth.asm):01079                 BRA     COL12                             ;SPECIAL CASE, COMPILE WORD AS LITERAL
                      (        forth.asm):01080         ;* NORMAL WORD, COMPILE AS WORD CALL
28A2                  (        forth.asm):01081         COL3
28A2 8D6F             (        forth.asm):01082                 BSR     COMP1                             ;COMPILE CALL TO WORD
28A4 20C8             (        forth.asm):01083                 BRA     COL1                              ;AND KEEP SCANNING
                      (        forth.asm):01084         ;* NON-COMPILE WORD ENCOUNTERED
28A6                  (        forth.asm):01085         INTERR
28A6 17FE49           (        forth.asm):01086                 LBSR    ERROR                             ;GENERATE ERROR MESAGE
28A9 43616E6E6F742043 (        forth.asm):01087                 FCN     'Cannot Compile'
     6F6D70696C6500
                      (        forth.asm):01088         ;* '[CR]' - COMPILE A RETURN INSTRUCTION
28B8 82               (        forth.asm):01089                 FCB     $82
28B9 5D52435B         (        forth.asm):01090                 FCC     ']RC['
28BD 286B             (        forth.asm):01091                 FDB     COLON
28BF                  (        forth.asm):01092         BRCR
28BF BE2B83           (        forth.asm):01093                 LDX     FREE+3                            ;GET FREE ADDRESS
28C2 C639             (        forth.asm):01094                 LDB     #$39                              ;GET 'RTS' INSTRUCTION
28C4 203B             (        forth.asm):01095                 BRA     BRC11                             ;PLACE INTO DICTIONATY
                      (        forth.asm):01096         ;* '[CL]' - COMPILE A LITERAL VALUE
28C6 82               (        forth.asm):01097                 FCB     $82
28C7 5D4C435B         (        forth.asm):01098                 FCC     ']LC['
28CB 28BF             (        forth.asm):01099                 FDB     BRCR
28CD                  (        forth.asm):01100         BRCL
28CD BE2B83           (        forth.asm):01101                 LDX     FREE+3                            ;GET FREE ADDRES
28D0 86CC             (        forth.asm):01102                 LDA     #$CC                              ;GET 'LDD #' INSTRUCTION
28D2 A780             (        forth.asm):01103                 STA     ,X+                               ;PLACE IN DICTIONARY
28D4 ECC1             (        forth.asm):01104                 LDD     ,U++                              ;GET DATA VALUE
28D6 ED81             (        forth.asm):01105                 STD     ,X++                              ;PLACE IN DICTIONAT
28D8 CC3606           (        forth.asm):01106                 LDD     #$3606                            ;GET 'PSHU A,B' INSTRUCTION
28DB 203C             (        forth.asm):01107                 BRA     COMP3                             ;PLACE IN DICTIONARY
                      (        forth.asm):01108         ;* '[CW]' - COMPILE CALL TO A WORD INTO THE DICTIONARY
28DD 82               (        forth.asm):01109                 FCB     $82
28DE 5D57435B         (        forth.asm):01110                 FCC     ']WC['
28E2 28CD             (        forth.asm):01111                 FDB     BRCL
28E4                  (        forth.asm):01112         BRCW
28E4 BE2B83           (        forth.asm):01113                 LDX     FREE+3                            ;GET FREE ADDRESS
28E7 202A             (        forth.asm):01114                 BRA     COMP1                             ;COMPILE INTO DICTIONRY
                      (        forth.asm):01115         ;* '[C2]' - COMPILE A TWO BYTE (WORD) VALUE INTO THE DICTIONARY
28E9 82               (        forth.asm):01116                 FCB     $82
28EA 5D32435B         (        forth.asm):01117                 FCC     ']2C['
28EE 28E4             (        forth.asm):01118                 FDB     BRCW
28F0                  (        forth.asm):01119         BRC2
28F0 BE2B83           (        forth.asm):01120                 LDX     FREE+3                            ;GET FREE ADDRESS
28F3 2024             (        forth.asm):01121                 BRA     COMP3                             ;COMPILE TWO BYTE VALUE
                      (        forth.asm):01122         ;* '[C1]' - COMPILE A SINGLE BYTE VALUE INTO THE DICTIONARY
28F5 82               (        forth.asm):01123                 FCB     $82
28F6 5D31435B         (        forth.asm):01124                 FCC     ']1C['
28FA 28F0             (        forth.asm):01125                 FDB     BRC2
28FC                  (        forth.asm):01126         BRC1
28FC BE2B83           (        forth.asm):01127                 LDX     FREE+3                            ;GET FREE ADDRESS
28FF ECC1             (        forth.asm):01128                 LDD     ,U++                              ;GET VALUE TO COMPILE
2901                  (        forth.asm):01129         BRC11
2901 E780             (        forth.asm):01130                 STB     ,X+                               ;PLACE IN DICTIONARY
2903 2016             (        forth.asm):01131                 BRA     COMP4                             ;RESAVE FREE POINTER
                      (        forth.asm):01132         ;* '[FC]' - FORCE COMPILATION OF NEXT WORD, EVEN IF NORMALY AUTO-EXEC
2905 83               (        forth.asm):01133                 FCB     $83
2906 5D43465B         (        forth.asm):01134                 FCC     ']CF['
290A 28FC             (        forth.asm):01135                 FDB     BRC1
290C                  (        forth.asm):01136         BRCF
290C BD25BB           (        forth.asm):01137                 JSR     TICK                              ;LOOKUP WORD ADDRESS
290F 8504             (        forth.asm):01138                 BITA    #$04                              ;CAN IT BE COMPILED?
2911 2693             (        forth.asm):01139                 BNE     INTERR                            ;NO, GET UPSET
                      (        forth.asm):01140         ;* COMPILE CALL TO A WORD INTO DICTIONARY
2913                  (        forth.asm):01141         COMP1
2913 86BD             (        forth.asm):01142                 LDA     #$BD                              ;GET 'JSR >' INSTRUCTION
2915 A780             (        forth.asm):01143                 STA     ,X+                               ;WRITE TO DICTIONARY
2917                  (        forth.asm):01144         COMP2
2917 ECC1             (        forth.asm):01145                 LDD     ,U++                              ;GET VALUE FROM DATE STACK
2919                  (        forth.asm):01146         COMP3
2919 ED81             (        forth.asm):01147                 STD     ,X++                              ;WRITE TO DICTIONARY
291B                  (        forth.asm):01148         COMP4
291B BF2B83           (        forth.asm):01149                 STX     FREE+3                            ;RESAVE FREE POINTER
291E 39               (        forth.asm):01150                 RTS
                      (        forth.asm):01151         ;* '[NI]' - CAUSE LAST (OR CURRENTLY) COMPILED WORD TO BE NON-INTERACTIVE
291F 81               (        forth.asm):01152                 FCB     $81
2920 5D494E5B         (        forth.asm):01153                 FCC     ']IN['
2924 290C             (        forth.asm):01154                 FDB     BRCF
2926                  (        forth.asm):01155         BRNI
2926 C602             (        forth.asm):01156                 LDB     #2                                ;GET [NI] BIT
2928 2014             (        forth.asm):01157                 BRA     SETBIT                            ;SET BIT IN DESCRIPTOR BYTE
                      (        forth.asm):01158         ;* '[NC]' - CAUSE LAST (OR CURRENTLY) COMPILED WORD TO BE NON-COMPILING
292A 81               (        forth.asm):01159                 FCB     $81
292B 5D434E5B         (        forth.asm):01160                 FCC     ']CN['
292F 2926             (        forth.asm):01161                 FDB     BRNI
2931                  (        forth.asm):01162         BRNC
2931 C604             (        forth.asm):01163                 LDB     #4                                ;GET [NC] BIT
2933 2009             (        forth.asm):01164                 BRA     SETBIT                            ;SET BIT IN DESCRIPTOR BYTE
                      (        forth.asm):01165         ;* '[EC]' - CAUSE LAST (OR CURRENTLY) COMPILED WORD TO EXECUTE WHEN COMPILED
2935 81               (        forth.asm):01166                 FCB     $81
2936 5D43455B         (        forth.asm):01167                 FCC     ']CE['
293A 2931             (        forth.asm):01168                 FDB     BRNC
293C                  (        forth.asm):01169         BREC
293C C601             (        forth.asm):01170                 LDB     #1                                ;GET [EC] BIT
                      (        forth.asm):01171         ;* SET A BIT IN THE DESCRIPTOR BYTE FOR LAST WORD IN DICTIONARY
293E                  (        forth.asm):01172         SETBIT
293E 10BE2B8F         (        forth.asm):01173                 LDY     HERE+3                            ;GET ADDRESS OF LAST WORD IN DICTIONARY
2942 313E             (        forth.asm):01174                 LEAY    -2,Y                              ;BACKUP TO NAME
2944                  (        forth.asm):01175         SETB1
2944 A6A2             (        forth.asm):01176                 LDA     ,-Y                               ;GET CHAR FROM NAME
2946 2AFC             (        forth.asm):01177                 BPL     SETB1                             ;KEEP READING TILL WE GET DESCRIPTOR BYTE
2948 3404             (        forth.asm):01178                 PSHS    B                                 ;SAVE BIT TO ADD
294A AAE0             (        forth.asm):01179                 ORA     ,S+                               ;INCLUDE BIT IN DESCRIPTOR BYTE
294C A7A4             (        forth.asm):01180                 STA     ,Y                                ;RESAVE NEW DESCRIPTOR
294E 39               (        forth.asm):01181                 RTS
                      (        forth.asm):01182         ;* 'EXEC>' - COMPILE JUMP TO REMAINDER OF THIS WORD INTO NEW WORD
294F 82               (        forth.asm):01183                 FCB     $82
2950 3E43455845       (        forth.asm):01184                 FCC     '>CEXE'
2955 293C             (        forth.asm):01185                 FDB     BREC
2957                  (        forth.asm):01186         DOES
2957 BE2B83           (        forth.asm):01187                 LDX     FREE+3                            ;GET ADDRESS OF FREE DICTIONARY
295A 867E             (        forth.asm):01188                 LDA     #$7E                              ;GET 'JMP >' INSTRUCTION
295C A780             (        forth.asm):01189                 STA     ,X+                               ;SAVE IN DICTIONARY
295E 3506             (        forth.asm):01190                 PULS    A,B                               ;GET ADDRESS OF REMAINDER OF THIS WORD
2960 20B7             (        forth.asm):01191                 BRA     COMP3                             ;COMPILE INTO DICTIONARY
                      (        forth.asm):01192         ;* '(' - BRACE, START OF COMMENT
2962 81               (        forth.asm):01193                 FCB     $81
2963 28               (        forth.asm):01194                 FCC     '('
2964 2957             (        forth.asm):01195                 FDB     DOES
2966                  (        forth.asm):01196         BRACE
2966 10BE2B6B         (        forth.asm):01197                 LDY     INPTR+3                           ;GET INPUT POINTER
296A                  (        forth.asm):01198         BRAC1
296A A6A0             (        forth.asm):01199                 LDA     ,Y+                               ;GET DATA FROM BUFFER
296C 270C             (        forth.asm):01200                 BEQ     BRAC3                             ;END OF LINE
296E 8129             (        forth.asm):01201                 CMPA    #')'                              ;IS IT CLOSING BRACE?
2970 270D             (        forth.asm):01202                 BEQ     BRAC2                             ;YES, EXIT
2972 8128             (        forth.asm):01203                 CMPA    #'('                              ;IS IT NESTED OPENING BRACE?
2974 26F4             (        forth.asm):01204                 BNE     BRAC1                             ;NO, ITS OK
2976 8DF2             (        forth.asm):01205                 BSR     BRAC1                             ;RECURSE
2978 20F0             (        forth.asm):01206                 BRA     BRAC1                             ;AND KEEP LOOKING
                      (        forth.asm):01207         ;* END OF LINE, WITH NO CLOSING COMMENT
297A                  (        forth.asm):01208         BRAC3
297A BD264F           (        forth.asm):01209                 JSR     READ                              ;READ ANOTHER LINE
297D 20E7             (        forth.asm):01210                 BRA     BRACE                             ;AND KEEP LOOKING
297F                  (        forth.asm):01211         BRAC2
297F 10BF2B6B         (        forth.asm):01212                 STY     INPTR+3                           ;RESAVE INPUT POINTER
2983 39               (        forth.asm):01213                 RTS
                      (        forth.asm):01214         ;* 'LEAVE' - EXIT INNERMOST DO LOOP
2984 82               (        forth.asm):01215                 FCB     $82
2985 455641454C       (        forth.asm):01216                 FCC     'EVAEL'
298A 2966             (        forth.asm):01217                 FDB     BRACE
298C                  (        forth.asm):01218         LEAVE
298C EC64             (        forth.asm):01219                 LDD     4,S                               ;GET LOOP LIMIT
298E ED62             (        forth.asm):01220                 STD     2,S                               ;SET INDEX TO SAME VALUE
2990 39               (        forth.asm):01221                 RTS
                      (        forth.asm):01222         ;* '+LOOP' - LOOP WITH VALUE TO ADD
2991 83               (        forth.asm):01223                 FCB     $83
2992 504F4F4C2B       (        forth.asm):01224                 FCC     'POOL+'
2997 298C             (        forth.asm):01225                 FDB     LEAVE
2999                  (        forth.asm):01226         PLOOP
2999 3702             (        forth.asm):01227                 PULU    A                                 ;GET STRUCTURE TYPE
299B 8181             (        forth.asm):01228                 CMPA    #$81                              ;IS IT DO LOOP?
299D 265E             (        forth.asm):01229                 BNE     NSTERR                            ;NO, NESTING ERROR
299F CCEC62           (        forth.asm):01230                 LDD     #$EC62                            ;'LDD 2,S'
29A2 ED81             (        forth.asm):01231                 STD     ,X++                              ;COMPILE INTO DICTIONARY
29A4 CCE3C1           (        forth.asm):01232                 LDD     #$E3C1                            ;'ADDD ,U++'
29A7 ED81             (        forth.asm):01233                 STD     ,X++                              ;COMPILE
29A9 86ED             (        forth.asm):01234                 LDA     #$ED                              ;'STD 2,S'
29AB A780             (        forth.asm):01235                 STA     ,X+                               ;COMPILE
29AD 201C             (        forth.asm):01236                 BRA     LOOP1                             ;END TERMINATE NORMALLY
                      (        forth.asm):01237         ;* 'LOOP' - NORMAL DO LOOP
29AF 83               (        forth.asm):01238                 FCB     $83
29B0 504F4F4C         (        forth.asm):01239                 FCC     'POOL'
29B4 2999             (        forth.asm):01240                 FDB     PLOOP
29B6                  (        forth.asm):01241         LOOP
29B6 3702             (        forth.asm):01242                 PULU    A                                 ;GET STRUCTURE TYPE
29B8 8181             (        forth.asm):01243                 CMPA    #$81                              ;IS IT DO LOOP?
29BA 2641             (        forth.asm):01244                 BNE     NSTERR                            ;NO, NESTING ERROR
29BC CCEC62           (        forth.asm):01245                 LDD     #$EC62                            ;'LDD 2,S'
29BF ED81             (        forth.asm):01246                 STD     ,X++                              ;PLACE IN DICTIONARY
29C1 CCC300           (        forth.asm):01247                 LDD     #$C300                            ;'ADDD #1'
29C4 ED81             (        forth.asm):01248                 STD     ,X++                              ;PLACE IN DICTIONARY
29C6 CC01ED           (        forth.asm):01249                 LDD     #$01ED                            ;'STD 2,S'
29C9 ED81             (        forth.asm):01250                 STD     ,X++                              ;PLACE IN DICTIONARY
29CB                  (        forth.asm):01251         LOOP1
29CB CC6210           (        forth.asm):01252                 LDD     #$6210                            ;< CATCHUP > (POSTBYTE FOR STD, PREFIX FOR CMPD)
29CE ED81             (        forth.asm):01253                 STD     ,X++                              ;SAVE IN DICTIONARY
29D0 CCA3E4           (        forth.asm):01254                 LDD     #$A3E4                            ;'CMPD ,S'
29D3 ED81             (        forth.asm):01255                 STD     ,X++                              ;COMPILE
29D5 CC1025           (        forth.asm):01256                 LDD     #$1025                            ;'LBLO'
29D8 170080           (        forth.asm):01257                 LBSR    UNT1                              ;CALCULATE OFFSET VALUE AND COMPILE
29DB CC3264           (        forth.asm):01258                 LDD     #$3264                            ;'LEAS 4,S'
29DE ED81             (        forth.asm):01259                 STD     ,X++                              ;COMPILE
29E0                  (        forth.asm):01260         COMRET
29E0 BF2B83           (        forth.asm):01261                 STX     FREE+3                            ;SAVE NEW FREE POINTER
29E3 39               (        forth.asm):01262                 RTS
                      (        forth.asm):01263         ;* 'K' - THIRD INDEX VALUE FOR DO LOOP
29E4 80               (        forth.asm):01264                 FCB     $80
29E5 4B               (        forth.asm):01265                 FCC     'K'
29E6 29B6             (        forth.asm):01266                 FDB     LOOP
29E8                  (        forth.asm):01267         K
29E8 EC6C             (        forth.asm):01268                 LDD     12,S                              ;GET INDEX VALUE
29EA 200E             (        forth.asm):01269                 BRA     IJK                               ;SAVE IT
                      (        forth.asm):01270         ;* 'J' - SECOND INDEV VALUE FOR DO LOOP
29EC 80               (        forth.asm):01271                 FCB     $80
29ED 4A               (        forth.asm):01272                 FCC     'J'
29EE 29E8             (        forth.asm):01273                 FDB     K
29F0                  (        forth.asm):01274         J
29F0 EC68             (        forth.asm):01275                 LDD     8,S                               ;GET INDEX VALUE
29F2 2006             (        forth.asm):01276                 BRA     IJK                               ;SAVE IT
                      (        forth.asm):01277         ;* 'I' FIRST INDEX VALUE FOR DO LOOP
29F4 80               (        forth.asm):01278                 FCB     $80
29F5 49               (        forth.asm):01279                 FCC     'I'
29F6 29F0             (        forth.asm):01280                 FDB     J
29F8                  (        forth.asm):01281         I
29F8 EC64             (        forth.asm):01282                 LDD     4,S                               ;GET INDEX VALUE
29FA                  (        forth.asm):01283         IJK
29FA EDC3             (        forth.asm):01284                 STD     ,--U                              ;SAVE ON STACK
29FC 39               (        forth.asm):01285                 RTS
                      (        forth.asm):01286         ;* STRUCTURE IS NESTED IMPROPERLY
29FD                  (        forth.asm):01287         NSTERR
29FD 17FCF2           (        forth.asm):01288                 LBSR    ERROR                             ;GENERATE ERROR MESSAGE
2A00 496D70726F706572 (        forth.asm):01289                 FCN     'Improper nesting'
     206E657374696E67
     00
                      (        forth.asm):01290         ;* 'DO' - START OF DO LOOP CONSTRUCT
2A11 83               (        forth.asm):01291                 FCB     $83
2A12 4F44             (        forth.asm):01292                 FCC     'OD'
2A14 29F8             (        forth.asm):01293                 FDB     I
2A16                  (        forth.asm):01294         DO
2A16 86BD             (        forth.asm):01295                 LDA     #$BD                              ;GET 'JSR >' INSTRUCTION
2A18 A780             (        forth.asm):01296                 STA     ,X+                               ;COMPILE INTO DICTIONARY
2A1A 108E272C         (        forth.asm):01297                 LDY     #TOR                              ;ADDRESS OF '>R' WORD
2A1E 10AF81           (        forth.asm):01298                 STY     ,X++                              ;COMPILE INTO DICT
2A21 A780             (        forth.asm):01299                 STA     ,X+                               ;AND ANOTHER 'JSR >'
2A23 10AF81           (        forth.asm):01300                 STY     ,X++                              ;FOR ANOTHER '>R'
2A26 8681             (        forth.asm):01301                 LDA     #$81                              ;INDICATE DO LOOP
2A28 3612             (        forth.asm):01302                 PSHU    A,X                               ;SAVE PGM COUNTER ETC
2A2A 20B4             (        forth.asm):01303                 BRA     COMRET                            ;RESAVE FREE POINTER
                      (        forth.asm):01304         ;* 'FOREVER' - BEGIN LOOP FOREVER
2A2C 83               (        forth.asm):01305                 FCB     $83
2A2D 52455645524F46   (        forth.asm):01306                 FCC     'REVEROF'
2A34 2A16             (        forth.asm):01307                 FDB     DO
2A36                  (        forth.asm):01308         FOREVE
2A36 3722             (        forth.asm):01309                 PULU    A,Y                               ;GET LOOP CONSTRUCT IDENTIFIER
2A38 8180             (        forth.asm):01310                 CMPA    #$80                              ;WAS IT A BEGIN LOOP?
2A3A 26C1             (        forth.asm):01311                 BNE     NSTERR                            ;NO, IMPROPER NESTING
2A3C 867E             (        forth.asm):01312                 LDA     #$7E                              ;'JMP >' INSTRUCTION
2A3E A780             (        forth.asm):01313                 STA     ,X+                               ;PLACE IN DICTIONARY
2A40 10AF81           (        forth.asm):01314                 STY     ,X++                              ;INCLUDE ADDRESS TO LOOP TO
2A43 209B             (        forth.asm):01315                 BRA     COMRET                            ;RESAVE FREE POINTER
                      (        forth.asm):01316         ;* 'UNTIL' - CONDITIONAL BEGIN LOOP
2A45 83               (        forth.asm):01317                 FCB     $83
2A46 4C49544E55       (        forth.asm):01318                 FCC     'LITNU'
2A4B 2A36             (        forth.asm):01319                 FDB     FOREVE
2A4D                  (        forth.asm):01320         UNTIL
2A4D 3702             (        forth.asm):01321                 PULU    A                                 ;GET STRUCTURE IDENTIFIER
2A4F 8180             (        forth.asm):01322                 CMPA    #$80                              ;IS IT A BEGIN LOOP?
2A51 26AA             (        forth.asm):01323                 BNE     NSTERR                            ;NO, BAD NESTING
2A53 CCECC1           (        forth.asm):01324                 LDD     #$ECC1                            ;'LDD ,U++'
2A56 ED81             (        forth.asm):01325                 STD     ,X++                              ;SAVE IN DICTIONARY
2A58 CC1027           (        forth.asm):01326                 LDD     #$1027                            ;'LBEQ'
                      (        forth.asm):01327         ;* COMPILE LONG BRANCH, AND CALCULATE OFFSET FROM ADDRESS ON STACK
2A5B                  (        forth.asm):01328         UNT1
2A5B ED81             (        forth.asm):01329                 STD     ,X++                              ;SAVE IN DICTIONARY
2A5D 3002             (        forth.asm):01330                 LEAX    2,X                               ;GET CURRENT ADDRESS
2A5F 3410             (        forth.asm):01331                 PSHS    X                                 ;SAVE ON STACK
2A61 3706             (        forth.asm):01332                 PULU    A,B                               ;GET ADDRESS TO JUMP TO
2A63 A3E1             (        forth.asm):01333                 SUBD    ,S++                              ;CALCULATE OFFSET
2A65 ED1E             (        forth.asm):01334                 STD     -2,X                              ;COMPILE INTO DICTIONARY
2A67                  (        forth.asm):01335         COMR1
2A67 16FF76           (        forth.asm):01336                 LBRA    COMRET                            ;RESAVE FREE POINTER
                      (        forth.asm):01337         ;* 'WHILE' - CONDITIONAL BEGIN LOOP
2A6A 83               (        forth.asm):01338                 FCB     $83
2A6B 454C494857       (        forth.asm):01339                 FCC     'ELIHW'
2A70 2A4D             (        forth.asm):01340                 FDB     UNTIL
2A72                  (        forth.asm):01341         WHILE
2A72 3702             (        forth.asm):01342                 PULU    A                                 ;GET STRUCTURE IDENTIFIER
2A74 8180             (        forth.asm):01343                 CMPA    #$80                              ;IS IT A BEGIN LOOP?
2A76 2685             (        forth.asm):01344                 BNE     NSTERR                            ;NO, IMPROPER NESTING
2A78 CCECC1           (        forth.asm):01345                 LDD     #$ECC1                            ;'LDD ,U++'
2A7B ED81             (        forth.asm):01346                 STD     ,X++                              ;COMPILE INTO DICTIONARY
2A7D CC1026           (        forth.asm):01347                 LDD     #$1026                            ;'LBNE'
2A80 20D9             (        forth.asm):01348                 BRA     UNT1                              ;COMPILE INTO DICT WITH OFFSET
                      (        forth.asm):01349         ;* 'BEGIN' - START A BEGIN LOOP
2A82 83               (        forth.asm):01350                 FCB     $83
2A83 4E49474542       (        forth.asm):01351                 FCC     'NIGEB'
2A88 2A72             (        forth.asm):01352                 FDB     WHILE
2A8A                  (        forth.asm):01353         BEGIN
2A8A 8680             (        forth.asm):01354                 LDA     #$80                              ;BEGIN LOOP IDENTIFIER
2A8C 3612             (        forth.asm):01355                 PSHU    A,X                               ;SAVE IT AND CURRENT POSITION
2A8E 39               (        forth.asm):01356                 RTS
                      (        forth.asm):01357         ;* 'ENDIF' - END AN IF STATEMENT
2A8F 83               (        forth.asm):01358                 FCB     $83
2A90 4649444E45       (        forth.asm):01359                 FCC     'FIDNE'
2A95 2A8A             (        forth.asm):01360                 FDB     BEGIN
2A97                  (        forth.asm):01361         ENDIF
2A97 3702             (        forth.asm):01362                 PULU    A                                 ;GET STRUCTURE IDENTIFIER
2A99 8182             (        forth.asm):01363                 CMPA    #$82                              ;IS IT 'IF'?
2A9B 1026FF5E         (        forth.asm):01364                 LBNE    NSTERR                            ;NO, BAD NESTING
2A9F 10AEC4           (        forth.asm):01365                 LDY     ,U                                ;GET ADDRESS
2AA2 1F10             (        forth.asm):01366                 TFR     X,D                               ;GET CURRENT FREE ADDRESS
2AA4 A3C1             (        forth.asm):01367                 SUBD    ,U++                              ;CALCULATE OFFSET
2AA6 ED3E             (        forth.asm):01368                 STD     -2,Y                              ;SAVE IN BRANCH OPERAND
2AA8 39               (        forth.asm):01369                 RTS
                      (        forth.asm):01370         ;* 'ELSE' - ELSE CLAUSE TO AN IF STATEMENT
2AA9 83               (        forth.asm):01371                 FCB     $83
2AAA 45534C45         (        forth.asm):01372                 FCC     'ESLE'
2AAE 2A97             (        forth.asm):01373                 FDB     ENDIF
2AB0                  (        forth.asm):01374         ELSE
2AB0 8616             (        forth.asm):01375                 LDA     #$16                              ;'LBRA'
2AB2 A780             (        forth.asm):01376                 STA     ,X+                               ;COMPILE INTO DICTIONARY
2AB4 3002             (        forth.asm):01377                 LEAX    2,X                               ;SKIP TO NEXT FREE
2AB6 3410             (        forth.asm):01378                 PSHS    X                                 ;SAVE ADDRESS
2AB8 8DDD             (        forth.asm):01379                 BSR     ENDIF                             ;COMPILE IN BRANCH
2ABA 3510             (        forth.asm):01380                 PULS    X                                 ;RESTORE ADDRESS
2ABC 2011             (        forth.asm):01381                 BRA     IF1                               ;SET UP NEW IF JUMPS
                      (        forth.asm):01382         ;* 'IF' - IF CONDITION
2ABE 83               (        forth.asm):01383                 FCB     $83
2ABF 4649             (        forth.asm):01384                 FCC     'FI'
2AC1 2AB0             (        forth.asm):01385                 FDB     ELSE
2AC3                  (        forth.asm):01386         IF
2AC3 CCECC1           (        forth.asm):01387                 LDD     #$ECC1                            ;'LDD ,U++'
2AC6 ED81             (        forth.asm):01388                 STD     ,X++                              ;COMPILE
2AC8 CC1027           (        forth.asm):01389                 LDD     #$1027                            ;'LBEQ'
2ACB ED81             (        forth.asm):01390                 STD     ,X++                              ;COMPILE
2ACD 3002             (        forth.asm):01391                 LEAX    2,X                               ;ADVANCE TO FREE
2ACF                  (        forth.asm):01392         IF1
2ACF 8682             (        forth.asm):01393                 LDA     #$82                              ;INDICATE IF STRUCTURE
2AD1 3612             (        forth.asm):01394                 PSHU    A,X                               ;SAVE WITH ADDRESS ON STACK
2AD3                  (        forth.asm):01395         COMR2
2AD3 16FF0A           (        forth.asm):01396                 LBRA    COMRET                            ;RESAVE FREE POINTER
                      (        forth.asm):01397         ;* '.' DISPLAY MESSAGE ON TERMINAL
2AD6 8322             (        forth.asm):01398                 FCB     $83,$22
2AD8 2E               (        forth.asm):01399                 FCC     '.'
2AD9 2AC3             (        forth.asm):01400                 FDB     IF
2ADB                  (        forth.asm):01401         DOTQ
2ADB 8D0E             (        forth.asm):01402                 BSR     QUOTE                             ;COMPILE STRING
2ADD 86BD             (        forth.asm):01403                 LDA     #$BD                              ;'JSR >'
2ADF A780             (        forth.asm):01404                 STA     ,X+                               ;COMPILE INTO DICT
2AE1 CC268C           (        forth.asm):01405                 LDD     #PMSG                             ;DISPLAY MESSAGE
2AE4 ED81             (        forth.asm):01406                 STD     ,X++                              ;COMPILE INTO DICT
2AE6 20EB             (        forth.asm):01407                 BRA     COMR2                             ;RESAVE FREE POINTER
                      (        forth.asm):01408         ;* '"' - COMPILE STRING INTO DICTIONARY
2AE8 8322DB           (        forth.asm):01409                 FCB     $83,$22,DOTQ
2AEB                  (        forth.asm):01410         QUOTE
2AEB 868D             (        forth.asm):01411                 LDA     #$8D                              ;'BSR' INSTRUCTION
2AED A781             (        forth.asm):01412                 STA     ,X++                              ;COMPILE INTO DICT
2AEF BD256A           (        forth.asm):01413                 JSR     QSKIP                             ;ADVANCE TO NON-BLANK
2AF2 3410             (        forth.asm):01414                 PSHS    X                                 ;SAVE POINTER
2AF4                  (        forth.asm):01415         QUO1
2AF4 A6A0             (        forth.asm):01416                 LDA     ,Y+                               ;GET DATA FROM INPUT BUFFER
2AF6 2722             (        forth.asm):01417                 BEQ     UNTERR                            ;END OF LINE, ERROR
2AF8 8122             (        forth.asm):01418                 CMPA    #$22                              ;IS IT CLOSING QUOTE?
2AFA 2704             (        forth.asm):01419                 BEQ     QUO2                              ;YES, EXIT
2AFC A780             (        forth.asm):01420                 STA     ,X+                               ;SAVE IN STRING
2AFE 20F4             (        forth.asm):01421                 BRA     QUO1                              ;AND KEEP PROCESSING
2B00                  (        forth.asm):01422         QUO2
2B00 10BF2B6B         (        forth.asm):01423                 STY     INPTR+3                           ;SAVE NEW INPUT BUFFER POINTER
2B04 6F80             (        forth.asm):01424                 CLR     ,X+                               ;INDICATE END OF STRING
2B06 10AEE4           (        forth.asm):01425                 LDY     ,S                                ;GET ADDRESS OF BSR OPERAND
2B09 1F10             (        forth.asm):01426                 TFR     X,D                               ;GET CURRENT ADDRESS
2B0B A3E1             (        forth.asm):01427                 SUBD    ,S++                              ;CALCULATE OFFSET FOR BSR
2B0D E73F             (        forth.asm):01428                 STB     -1,Y                              ;SAVE IN OPERAND
2B0F 86BD             (        forth.asm):01429                 LDA     #$BD                              ;'JSR >'
2B11 A780             (        forth.asm):01430                 STA     ,X+                               ;COMPILE INTO DICT
2B13 CC2739           (        forth.asm):01431                 LDD     #FROMR                            ;GET '>R' ADDRESS
2B16 ED81             (        forth.asm):01432                 STD     ,X++                              ;COMPILE
2B18 20B9             (        forth.asm):01433                 BRA     COMR2                             ;RESAVE FREE POINTER
                      (        forth.asm):01434         ;* UNTERMINATED STRING
2B1A                  (        forth.asm):01435         UNTERR
2B1A 17FBD5           (        forth.asm):01436                 LBSR    ERROR                             ;GENERATE ERROR MESSAGE
2B1D 556E7465726D696E (        forth.asm):01437                 FCN     'Unterminated'
     6174656400
                      (        forth.asm):01438         ;* '0' - QUICKER ZERO
2B2A 80               (        forth.asm):01439                 FCB     $80
2B2B 30               (        forth.asm):01440                 FCC     '0'
2B2C 2AEB             (        forth.asm):01441                 FDB     QUOTE
2B2E                  (        forth.asm):01442         ZERO
2B2E 4F               (        forth.asm):01443                 CLRA                                      ;     ZERO HIGH BYTE
2B2F 5F               (        forth.asm):01444                 CLRB                                      ;     ZERO LOW BYTE
2B30 EDC3             (        forth.asm):01445                 STD     ,--U                              ;SAVE ON DATA STACK
2B32 39               (        forth.asm):01446                 RTS
                      (        forth.asm):01447         ;* '1' - QUICKER ONE
2B33 80               (        forth.asm):01448                 FCB     $80
2B34 31               (        forth.asm):01449                 FCC     '1'
2B35 2B2E             (        forth.asm):01450                 FDB     ZERO
2B37                  (        forth.asm):01451         ONE
2B37 CC0001           (        forth.asm):01452                 LDD     #1                                ;GET A VALUE OF ONE
2B3A EDC3             (        forth.asm):01453                 STD     ,--U                              ;SAVE ON STACK
2B3C 39               (        forth.asm):01454                 RTS
                      (        forth.asm):01455         ;*
                      (        forth.asm):01456         ;* VARIABLES
                      (        forth.asm):01457         ;*
                      (        forth.asm):01458         ;* '(OUT)' - ADDRESS OF GENERAL OUTPUT DRIVER
2B3D 80               (        forth.asm):01459                 FCB     $80
2B3E 2954554F28       (        forth.asm):01460                 FCC     ')TUO('
2B43 2B37             (        forth.asm):01461                 FDB     ONE
2B45                  (        forth.asm):01462         DISP
2B45 BD220E           (        forth.asm):01463                 JSR     VARIAB                            ;VARIABLE SUBROUTINE
2B48 22E6             (        forth.asm):01464                 FDB     DOLOUT                            ;DEFAULT IS '$OUT'
                      (        forth.asm):01465         ;* '(IN)' - ADDRESS OF GENERAL INPUT DRIVER
2B4A 80               (        forth.asm):01466                 FCB     $80
2B4B 294E4928         (        forth.asm):01467                 FCC     ')NI('
2B4F 2B45             (        forth.asm):01468                 FDB     DISP
2B51                  (        forth.asm):01469         INPT
2B51 BD220E           (        forth.asm):01470                 JSR     VARIAB                            ;VARIABLE SUBROUTINE
2B54 22F3             (        forth.asm):01471                 FDB     DOLIN                             ;DEFAULT IS '$IN'
                      (        forth.asm):01472         ;* '(GO)' - ADDRESS OF WORD TO EXECUTE AT STARTUP
2B56 80               (        forth.asm):01473                 FCB     $80
2B57 294F4728         (        forth.asm):01474                 FCC     ')OG('
2B5B 2B51             (        forth.asm):01475                 FDB     INPT
2B5D                  (        forth.asm):01476         BOOT
2B5D BD220E           (        forth.asm):01477                 JSR     VARIAB                            ;VARIABLE SUBROUTINE
2B60 26B7             (        forth.asm):01478                 FDB     QUIT                              ;DEFUALT IS 'QUIT'
                      (        forth.asm):01479         ;* '>IN' - POINTER TO POSITION IN INPUT BUFFER
2B62 80               (        forth.asm):01480                 FCB     $80
2B63 4E493E           (        forth.asm):01481                 FCC     'NI>'
2B66 2B5D             (        forth.asm):01482                 FDB     BOOT
2B68                  (        forth.asm):01483         INPTR
2B68 BD220E           (        forth.asm):01484                 JSR     VARIAB                            ;VARIABLE SUBROUTINE
2B6B 2004             (        forth.asm):01485                 FDB     INPBUF                            ;DEFAULT IS START OF BUFFER
                      (        forth.asm):01486         ;* 'BASE' - CURRENT NUMBER CONVERSION BASE
2B6D 80               (        forth.asm):01487                 FCB     $80
2B6E 45534142         (        forth.asm):01488                 FCC     'ESAB'
2B72 2B68             (        forth.asm):01489                 FDB     INPTR
2B74                  (        forth.asm):01490         BASE
2B74 BD220E           (        forth.asm):01491                 JSR     VARIAB                            ;VARIABLE SUBROUTINE
2B77 000A             (        forth.asm):01492                 FDB     10                                ;DEFAULT IS BASE 10
                      (        forth.asm):01493         ;* 'FREE' - ADDRESS OF FREE MEMORY FOLLOWING DICTIONARY
2B79 80               (        forth.asm):01494                 FCB     $80
2B7A 45455246         (        forth.asm):01495                 FCC     'EERF'
2B7E 2B74             (        forth.asm):01496                 FDB     BASE
2B80                  (        forth.asm):01497         FREE
2B80 BD220E           (        forth.asm):01498                 JSR     VARIAB                            ;VARIABLE SUBROUTINE
2B83 2B91             (        forth.asm):01499                 FDB     USRSPC                            ;DEFAULT IS END OF DICTIONARY
                      (        forth.asm):01500         ;* 'HERE' - ADDRESS OF LAST WORD IN DICTIONARY
2B85 80               (        forth.asm):01501                 FCB     $80
2B86 45524548         (        forth.asm):01502                 FCC     'EREH'
2B8A 2B80             (        forth.asm):01503                 FDB     FREE
2B8C                  (        forth.asm):01504         HERE
2B8C BD220E           (        forth.asm):01505                 JSR     VARIAB                            ;VARIABLE SUBROUTINE
2B8F 2B8C             (        forth.asm):01506                 FDB     HERE                              ;DEFUALT IS ITSELF
                      (        forth.asm):01507         ;* DICTIONARY GROWS FROM HERE
     2B91             (        forth.asm):01508         USRSPC          = *

Symbol Table:
[ G] ABS                              252D
[ G] ADD                              23B0
[ G] ALLOT                            281E
[ G] AND                              24EF
[ G] BASE                             2B74
[ G] BEGIN                            2A8A
[ G] BOOT                             2B5D
[ G] BRAC1                            296A
[ G] BRAC2                            297F
[ G] BRAC3                            297A
[ G] BRACE                            2966
[ G] BRC1                             28FC
[ G] BRC11                            2901
[ G] BRC2                             28F0
[ G] BRCF                             290C
[ G] BRCL                             28CD
[ G] BRCR                             28BF
[ G] BRCW                             28E4
[ G] BREC                             293C
[ G] BRNC                             2931
[ G] BRNI                             2926
[ G] BYE                              2798
[ G] COL1                             286E
[ G] COL11                            2878
[ G] COL12                            2886
[ G] COL2                             288A
[ G] COL3                             28A2
[ G] COLON                            286B
[ G] COM                              2518
[ G] COMP1                            2913
[ G] COMP2                            2917
[ G] COMP3                            2919
[ G] COMP4                            291B
[ G] COMR1                            2A67
[ G] COMR2                            2AD3
[ G] COMRET                           29E0
[ G] CONERR                           2716
[ G] CR                               2639
[ G] CRE1                             27E9
[ G] CRE2                             2803
[ G] CRE3                             27EE
[ G] CREATE                           27D3
[ G] DELMSG                           222C
[ G] DISP                             2B45
[ G] DMINUS                           23C6
[ G] DO                               2A16
[ G] DOES                             2957
[ G] DOLIN                            22F3
[ G] DOLOUT                           22E6
[ G] DOT                              231B
[ G] DOT01                            2329
[ G] DOT1                             232D
[ G] DOT2                             233F
[ G] DOT3                             234D
[ G] DOTQ                             2ADB
[ G] DPLUS                            23DC
[ G] DROP                             2246
[ G] DROPN                            2238
[ G] DSTACK                           2200
[ G] DUP                              224F
[ G] ELSE                             2AB0
[ G] EMIT                             2302
[ G] ENDIF                            2A97
[ G] EQUALS                           228D
[ G] ERMSG1                           2219
[ G] ERMSG2                           2221
[ G] ERROR                            26F2
[ G] EXEC                             25C9
[ G] FOREVE                           2A36
[ G] FORG1                            27B4
[ G] FORGET                           27A5
[ G] FREE                             2B80
[ G] FROMR                            2739
[ G] GREQU                            22C3
[ G] GRTR                             22A8
[ G] HERE                             2B8C
[ G] I                                29F8
[ G] IF                               2AC3
[ G] IF1                              2ACF
[ G] IJK                              29FA
[ G] INPBUF                           2004
[ G] INPT                             2B51
[ G] INPTR                            2B68
[ G] INTERR                           28A6
[ G] J                                29F0
[ G] K                                29E8
[ G] KEY                              230C
[ G] LEAVE                            298C
[ G] LESEQU                           22D3
[ G] LESS                             22B5
[ G] LOK1                             2587
[ G] LOK2                             258B
[ G] LOK3                             259F
[ G] LOK4                             25AF
[ G] LOK5                             2593
[ G] LOKERR                           270A
[ G] LOOKUP                           257C
[ G] LOOP                             29B6
[ G] LOOP1                            29CB
[ G] LSTLOK                           2000
[ G] MSMOD                            244D
[ G] MSMODD                           246D
[ G] MSMODL                           2452
[ G] MSMODM                           2454
[ G] MSTOR                            2358
[ G] MULT                             2425
[ G] NEG                              2523
[ G] NOTEQU                           229B
[ G] NSTERR                           29FD
[ G] NUM1                             25F4
[ G] NUM2                             25E6
[ G] NUM3                             2620
[ G] NUM4                             25E2
[ G] NUM5                             261D
[ G] NUMBER                           25D5
[ G] ONE                              2B37
[ G] ONEM                             2550
[ G] ONEP                             255C
[ G] OR                               24FC
[ G] OSEND                            DBFF
[ G] OSRAM                            2000
[ G] OSUTIL                           D000
[ G] OVER                             225B
[ G] PLOOP                            2999
[ G] PMSG                             268C
[ G] PMSG1                            268E
[ G] PMSG2                            2684
[ G] PROERR                           27BC
[ G] PROMPT                           2213
[ G] PSTOR                            2366
[ G] PWRD                             26A0
[ G] PWRD1                            26A2
[ G] QSKI1                            256E
[ G] QSKIP                            256A
[ G] QUI1                             26C5
[ G] QUI2                             26E9
[ G] QUIT                             26B7
[ G] QUO1                             2AF4
[ G] QUO2                             2B00
[ G] QUOTE                            2AEB
[ G] READ                             264F
[ G] READ1                            2655
[ G] READ2                            2678
[ G] READ3                            2671
[ G] READNC                           2651
[ G] REDMSG                           2224
[ G] RET0                             22DA
[ G] RET1                             22CA
[ G] RETS                             22DB
[ G] ROT                              2266
[ G] RPFIX                            2747
[ G] RSTACK                           2100
[ G] SAVDS                            253C
[ G] SAVSD                            23BE
[ G] SEMI                             2849
[ G] SEMI1                            285D
[ G] SEMI2                            2861
[ G] SETB1                            2944
[ G] SETBIT                           293E
[ G] SHL                              23A7
[ G] SHR                              239D
[ G] SLASH                            24E4
[ G] SLMOD                            248F
[ G] SLMOD1                           24AE
[ G] SLMOD2                           249D
[ G] SLMOD3                           24D3
[ G] SLMODD                           24CA
[ G] SLMODL                           24B3
[ G] SLMODM                           24B5
[ G] SLMODR                           24DF
[ G] SPACE                            262D
[ G] SPFIX                            2755
[ G] SUB                              23BA
[ G] SWAP                             2275
[ G] SWAP1                            2277
[ G] TEMP                             2002
[ G] TICK                             25BB
[ G] TICS                             275F
[ G] TOR                              272C
[ G] TSTER1                           25B6
[ G] TSTERM                           25B1
[ G] TWOM                             2537
[ G] TWOP                             2544
[ G] UDOT                             2315
[ G] UMUL1                            240B
[ G] UMUL2                            2418
[ G] UMULT                            23F2
[ G] UNT1                             2A5B
[ G] UNTERR                           2B1A
[ G] UNTIL                            2A4D
[ G] USMOD                            2478
[ G] USRSPC                           2B91
[ G] VAR                              2832
[ G] VARIAB                           220E
[ G] VOC                              276A
[ G] VOC1                             276D
[ G] VOC2                             2771
[ G] VOC3                             2775
[ G] VOC4                             2782
[ G] VOC9                             2758
[ G] VREAD                            2394
[ G] VREADC                           238B
[ G] VSTOR                            237F
[ G] VSTORC                           2374
[ G] WHILE                            2A72
[ G] WIDTH                            0041
[ G] XOR                              250A
[ G] ZEQU                             2283
[ G] ZERO                             2B2E
