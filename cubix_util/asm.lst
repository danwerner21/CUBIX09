                      (          asm.asm):00001         ;*        TITLE   RESIDENT 6809 ASSEMBLER
                      (          asm.asm):00002         ;*
                      (          asm.asm):00003         ;* ASM: A resident 6809 assembler
                      (          asm.asm):00004         ;*
                      (          asm.asm):00005         ;* Copyright 1983-2005 Dave Dunfield
                      (          asm.asm):00006         ;* All rights reserved.
                      (          asm.asm):00007         ;*
     2000             (          asm.asm):00008         OSRAM           = $2000                           ; START OF OS OPERATING AREA
     4000             (          asm.asm):00009         RAM             = OSRAM+8192                      ; FREE RAM AREA
     0040             (          asm.asm):00010         RAMHB           = (OSRAM+8192)/256                ; FREE RAM AREA
                      (          asm.asm):00011         ;* STORAGE
                      (          asm.asm):00012                 ORG     RAM                               ;RESERVED AREA FOR ASSEMBLER
4000                  (          asm.asm):00013         FILPTR
4000                  (          asm.asm):00014                 RMB     2                                 ;POINTER TO SAVED FILENAME
4002                  (          asm.asm):00015         ERRORS
4002                  (          asm.asm):00016                 RMB     2                                 ;COUNT OF ASSEMBLY ERRORS
4004                  (          asm.asm):00017         VAL1
4004                  (          asm.asm):00018                 RMB     2                                 ;TEMPORARY REGISTER FOR EVAL
4006                  (          asm.asm):00019         TEMP
4006                  (          asm.asm):00020                 RMB     2                                 ;TEMPORARY REGISTER FOR MEMOP
4008                  (          asm.asm):00021         CURPC
4008                  (          asm.asm):00022                 RMB     2                                 ;CURRENT PROGRAM COUNTER
400A                  (          asm.asm):00023         CURDP
400A                  (          asm.asm):00024                 RMB     2                                 ;CURRENT DIRECT PAGE VALUE
400C                  (          asm.asm):00025         SYMLOC
400C                  (          asm.asm):00026                 RMB     2                                 ;CURRENT LOCATION IN SYMBOL TABLE
400E                  (          asm.asm):00027         LINUM
400E                  (          asm.asm):00028                 RMB     2                                 ;CURRENT LISTING LINE NUMBER
4010                  (          asm.asm):00029         PAGE
4010                  (          asm.asm):00030                 RMB     2                                 ;CURRENT PAGE NUMBER
4012                  (          asm.asm):00031         PAGLIN
4012                  (          asm.asm):00032                 RMB     1                                 ;CURRENT LINE ON PAGE
4013                  (          asm.asm):00033         VALUE
4013                  (          asm.asm):00034                 RMB     2                                 ;VALUE PRODUCED AS AN OPERAND
4015                  (          asm.asm):00035         EMSG
4015                  (          asm.asm):00036                 RMB     1                                 ;ERROR MESSAGE FLAGE VARIABLE
4016                  (          asm.asm):00037         POST
4016                  (          asm.asm):00038                 RMB     1                                 ;POSTBYTE PRODUCED
4017                  (          asm.asm):00039         INDFLG
4017                  (          asm.asm):00040                 RMB     1                                 ;INDIRECT FLAG
4018                  (          asm.asm):00041         ITYPE
4018                  (          asm.asm):00042                 RMB     1                                 ;SAVED INSTRUCTION TYPE
4019                  (          asm.asm):00043         TITLE
4019                  (          asm.asm):00044                 RMB     60                                ;TITLE SPACE
4055                  (          asm.asm):00045         CODE
4055                  (          asm.asm):00046                 RMB     80                                ;SPACE FOR CODE GENERATION
40A5                  (          asm.asm):00047         LINE
40A5                  (          asm.asm):00048                 RMB     80                                ;INPUT LINE
40F5                  (          asm.asm):00049                 RMB     100                               ;STACK SPACE
     4159             (          asm.asm):00050         STACK           EQU *                             ;PLACE STACK HERE
4159                  (          asm.asm):00051         INFIL
4159                  (          asm.asm):00052                 RMB     522                               ;INPUT FILE BUFFER
4363                  (          asm.asm):00053         LSTFIL
4363                  (          asm.asm):00054                 RMB     522                               ;LIST FILE BUFFER
456D                  (          asm.asm):00055         OBJFIL
456D                  (          asm.asm):00056                 RMB     522                               ;OBJECT FILE BUFFER
     4777             (          asm.asm):00057         SYMTAB          EQU *                             ;SYMBOL TABLE STARTS HERE
                      (          asm.asm):00058         ;*
                      (          asm.asm):00059                 ORG     OSRAM                             ;START IT HERE
                      (          asm.asm):00060         ;* PROGRAM ENTRY
2000                  (          asm.asm):00061         ASM
2000 813F             (          asm.asm):00062                 CMPA    #'?'                              ;HELP REQUEST?
2002 2637             (          asm.asm):00063                 BNE     GOASM                             ;NO
2004 3F               (          asm.asm):00064                 SWI
2005 19               (          asm.asm):00065                 FCB     25                                ;OUTPUT MESSAGE
2006 5573653A2041534D (          asm.asm):00066                 FCC     'Use: ASM[/ERROR/FAST/SYMBOL/TERM/QUIET] <filename>'
     5B2F4552524F522F
     464153542F53594D
     424F4C2F5445524D
     2F51554945545D20
     3C66696C656E616D
     653E
2038 00               (          asm.asm):00067                 FCB     00
2039 3F               (          asm.asm):00068                 SWI
203A 00               (          asm.asm):00069                 FCB     0
203B                  (          asm.asm):00070         GOASM
203B 8640             (          asm.asm):00071                 LDA     #RAMHB                            ;POINT TO HIGH BYTE OF DATA AREA
203D 1F8B             (          asm.asm):00072                 TFR     A,DP                              ;SET UP DIRECT PAGE
     40               (          asm.asm):00073                 SETDP   RAMHB                             ;LET ASSEMBLER IN ON IT
203F 10CE4159         (          asm.asm):00074                 LDS     #STACK                            ;SET UP STACK
2043 4F               (          asm.asm):00075                 CLRA                                      ;START WITH ORIGIN OF ZERO
2044 5F               (          asm.asm):00076                 CLRB                                      ;SO WE CAN START THERE
2045 DD08             (          asm.asm):00077                 STD     CURPC                             ;SAVE IT
2047 DD02             (          asm.asm):00078                 STD     ERRORS                            ;CLEAR ERROR FLAG
2049 DD0E             (          asm.asm):00079                 STD     LINUM                             ;SET UP FOR FIRST PASS
204B 0F17             (          asm.asm):00080                 CLR     INDFLG                            ;INSURE WE ARE OK
                      (          asm.asm):00081         ;*
                      (          asm.asm):00082         ;* TEST FOR QULAIFIER
                      (          asm.asm):00083         ;*
204D                  (          asm.asm):00084         QUAL
204D A6A4             (          asm.asm):00085                 LDA     ,Y                                ;GET CHARACTER FROM INPUT LINE
204F 812F             (          asm.asm):00086                 CMPA    #'/'                              ;QUALIFIER?
2051 2641             (          asm.asm):00087                 BNE     MAIN                              ;NO, QUIT
2053 8E3160           (          asm.asm):00088                 LDX     #QTABLE                           ;POINT TO QUALIFIER TABLE
2056 3F               (          asm.asm):00089                 SWI
2057 12               (          asm.asm):00090                 FCB     18                                ;IS THIS IT?
2058 C105             (          asm.asm):00091                 CMPB    #QMAX                             ;ARE WE OVER LIMIT?
205A 2407             (          asm.asm):00092                 BHS     QERR                              ;IF SO, INDICATE SO
205C 8E3183           (          asm.asm):00093                 LDX     #TERM                             ;POINT TO QUALIFIER TABLE
205F 6F85             (          asm.asm):00094                 CLR     B,X                               ;SET QUALIFIER
2061 20EA             (          asm.asm):00095                 BRA     QUAL                              ;KEEP LOOKING FOR QUALIFIERS
2063                  (          asm.asm):00096         QERR
2063 3F               (          asm.asm):00097                 SWI
2064 18               (          asm.asm):00098                 FCB     24                                ;DISPLAY MESSAGE
2065 496E76616C696420 (          asm.asm):00099                 FCC     'Invalid qualifier: '
     7175616C69666965
     723A20
2078 00               (          asm.asm):00100                 FCB     00
2079 A6A0             (          asm.asm):00101                 LDA     ,Y+                               ;GET CHARACTER
207B                  (          asm.asm):00102         DSQU1
207B 3F               (          asm.asm):00103                 SWI
207C 21               (          asm.asm):00104                 FCB     33                                ;DISPLAY
207D A6A0             (          asm.asm):00105                 LDA     ,Y+                               ;GET NEXT CHARACTER
207F 812F             (          asm.asm):00106                 CMPA    #'/'                              ;ANOTHER QUALIFIER?
2081 2708             (          asm.asm):00107                 BEQ     GOABO                             ;GO ABORT
2083 8120             (          asm.asm):00108                 CMPA    #' '                              ;SPACE
2085 2704             (          asm.asm):00109                 BEQ     GOABO                             ;IF SO, EXIT AS WELL
2087 810D             (          asm.asm):00110                 CMPA    #$0D                              ;LAST TERMINATOR
2089 26F0             (          asm.asm):00111                 BNE     DSQU1                             ;IF NOT, KEEP DISPLAYING
208B                  (          asm.asm):00112         GOABO
208B 3F               (          asm.asm):00113                 SWI
208C 19               (          asm.asm):00114                 FCB     25                                ;DISPLAY MESSAGE
208D 2700             (          asm.asm):00115                 FCB     $27,0                             ;QUOTE
208F 8601             (          asm.asm):00116                 LDA     #1                                ;INDICATE INVALID OPERATOR
2091 1605E5           (          asm.asm):00117                 LBRA    ABORT                             ;AND EXIT
                      (          asm.asm):00118         ;*
                      (          asm.asm):00119         ;* INITIALIZATIONS
                      (          asm.asm):00120         ;*
                      (          asm.asm):00121         ;* GET FILENAME & SETUP TITLE
                      (          asm.asm):00122         ;*
2094                  (          asm.asm):00123         MAIN
2094 3420             (          asm.asm):00124                 PSHS    Y                                 ;SAVE FILENAME POINTER
2096 3F               (          asm.asm):00125                 SWI
2097 0B               (          asm.asm):00126                 FCB     11                                ;GET FILENAME
2098 102605DD         (          asm.asm):00127                 LBNE    ABORT                             ;INVALID, REPORT ERROR
209C 9F00             (          asm.asm):00128                 STX     FILPTR                            ;SAVE FILENAME
209E CC4153           (          asm.asm):00129                 LDD     #$4153                            ;'AS' GET FIRST PORTION
20A1 ED84             (          asm.asm):00130                 STD     ,X                                ;SAVE IT
20A3 864D             (          asm.asm):00131                 LDA     #'M'                              ;LAST CHAR
20A5 A702             (          asm.asm):00132                 STA     2,X                               ;WRITE IT
                      (          asm.asm):00133         ;* SET UP DEFAULT TITLE
20A7 108E4019         (          asm.asm):00134                 LDY     #TITLE                            ;POINT TO TITLE
20AB 3018             (          asm.asm):00135                 LEAX    -8,X                              ;BACKUP TO DIRECTORY
20AD C608             (          asm.asm):00136                 LDB     #8                                ;COPY UP TO 8 CHARS
20AF                  (          asm.asm):00137         CPYNAM
20AF A680             (          asm.asm):00138                 LDA     ,X+                               ;GET CHAR FROM DIR
20B1 2705             (          asm.asm):00139                 BEQ     CPYN1                             ;NO MORE, QUIT
20B3 A7A0             (          asm.asm):00140                 STA     ,Y+                               ;SAVE IN TITLE
20B5 5A               (          asm.asm):00141                 DECB    REDUCE COUNT
20B6 26F7             (          asm.asm):00142                 BNE     CPYNAM                            ;CONTINUE
20B8                  (          asm.asm):00143         CPYN1
20B8 860D             (          asm.asm):00144                 LDA     #$0D                              ;GET CR
20BA A7A4             (          asm.asm):00145                 STA     ,Y                                ;TERMINATE TITLE
                      (          asm.asm):00146         ;* OPEN INPUT FILE
20BC CE4159           (          asm.asm):00147                 LDU     #INFIL                            ;POINT TO INPUT FCB
20BF 3F               (          asm.asm):00148                 SWI
20C0 37               (          asm.asm):00149                 FCB     55                                ;OPEN FILE FOR READ
20C1 102605B4         (          asm.asm):00150                 LBNE    ABORT                             ;ABORT OPERATION
                      (          asm.asm):00151         ;* OPEN LISTING FILE FOR WRITE
20C5 7D3183           (          asm.asm):00152                 TST     TERM                              ;TEST FOR LISTING FILE
20C8 2714             (          asm.asm):00153                 BEQ     INITS                             ;IF SO, DONT OPEN LISTING
20CA 9E00             (          asm.asm):00154                 LDX     FILPTR                            ;RESTORE FILE POINTER
20CC CC4C53           (          asm.asm):00155                 LDD     #$4c53                            ;'LS' GET 'LS'
20CF ED84             (          asm.asm):00156                 STD     ,X                                ;SAVE IT
20D1 8654             (          asm.asm):00157                 LDA     #'T'                              ;GET 'T'
20D3 A702             (          asm.asm):00158                 STA     2,X                               ;SAVE IN NAME
20D5 CE4363           (          asm.asm):00159                 LDU     #LSTFIL                           ;POINT TO LIST FCB
20D8 3F               (          asm.asm):00160                 SWI
20D9 38               (          asm.asm):00161                 FCB     56                                ;OPEN FILE FOR WRITE
20DA 1026059B         (          asm.asm):00162                 LBNE    ABORT                             ;ABORT OPERATION
                      (          asm.asm):00163         ;* INITIALIZE SYMBOL TABLE
20DE                  (          asm.asm):00164         INITS
20DE 8E4777           (          asm.asm):00165                 LDX     #SYMTAB                           ;POINT TO SYMBOL TABLE
20E1 9F0C             (          asm.asm):00166                 STX     SYMLOC                            ;POINT TO SYMBOL TABLE LOCATION
20E3 6F84             (          asm.asm):00167                 CLR     ,X                                ;INDICATE NO SYMBOLS
20E5 7D3187           (          asm.asm):00168                 TST     QUIET                             ;ARE WE BEING QUIET?
20E8 2711             (          asm.asm):00169                 BEQ     PASS1                             ;DONT SAY A WORD
20EA 3F               (          asm.asm):00170                 SWI
20EB 18               (          asm.asm):00171                 FCB     24                                ;DISPLAY PASS1 MESSAGE
20EC 4669727374207061 (          asm.asm):00172                 FCC     'First pass... '
     73732E2E2E20
20FA 00               (          asm.asm):00173                 FCB     00
                      (          asm.asm):00174         ;*
                      (          asm.asm):00175         ;* PASS ONE, RESOLVE SYMBOLS
                      (          asm.asm):00176         ;*
20FB                  (          asm.asm):00177         PASS1
20FB 86FF             (          asm.asm):00178                 LDA     #$FF                              ;INSURE HIGH BYTE IS NOT ZERO
20FD 970A             (          asm.asm):00179                 STA     CURDP                             ;SET DIRECT PAGE ADDRESING OFF
20FF                  (          asm.asm):00180         PLINE
20FF 108E40A5         (          asm.asm):00181                 LDY     #LINE                             ;POINT TO LINE BUFFER
2103                  (          asm.asm):00182         L1
2103 1709D2           (          asm.asm):00183                 LBSR    RDINP                             ;READ A CHARACTER FROM THE FILE
2106 1026016A         (          asm.asm):00184                 LBNE    OPTMIZ                            ;WE HAVE HIT THE END, PERFORM OPT. PASSES
210A 8109             (          asm.asm):00185                 CMPA    #9                                ;IS IT TAB?
210C 2602             (          asm.asm):00186                 BNE     SAVCHR                            ;NO, SAVE IT
210E 8620             (          asm.asm):00187                 LDA     #' '                              ;CONVERT TO BLANK
2110                  (          asm.asm):00188         SAVCHR
2110 A7A0             (          asm.asm):00189                 STA     ,Y+                               ;SAVE CHARACTER FOR LATER REFERENCE
2112 810D             (          asm.asm):00190                 CMPA    #$0D                              ;END OF LINE?
2114 26ED             (          asm.asm):00191                 BNE     L1                                ;KEEP LOOKING
2116 108E40A5         (          asm.asm):00192                 LDY     #LINE                             ;POINT TO START OF LINE
211A 0F15             (          asm.asm):00193                 CLR     EMSG                              ;INSURE NO ERROR MESSAGE
                      (          asm.asm):00194         ;* TEST FOR COMMENT LINE
211C A6A4             (          asm.asm):00195                 LDA     ,Y                                ;GET FIREST CHARACTER FROM LINE
211E 812A             (          asm.asm):00196                 CMPA    #'*'                              ;COMMENT?
2120 27DD             (          asm.asm):00197                 BEQ     PLINE                             ;SKIP TO END OF LINE
                      (          asm.asm):00198         ;* TEST FOR LABLE
2122 8120             (          asm.asm):00199                 CMPA    #' '                              ;NO LABLE?
2124 2774             (          asm.asm):00200                 BEQ     SKPLAB                            ;IF SO, IGNORE
2126 810D             (          asm.asm):00201                 CMPA    #$0D                              ;NULL LINE?
2128 2770             (          asm.asm):00202                 BEQ     SKPLAB                            ;IF SO, IGNORE
212A 170588           (          asm.asm):00203                 LBSR    LOCSYM                            ;FIND THE SYMBOL
212D 960F             (          asm.asm):00204                 LDA     LINUM+1                           ;IS THIS AN OPTOMIZATION PASS?
212F 271B             (          asm.asm):00205                 BEQ     INSYM                             ;NO, PERFORM FIRST PASS INITIALIZATION
2131 9C08             (          asm.asm):00206                 CMPX    CURPC                             ;IS THIS WHERE WE ARE
2133 2765             (          asm.asm):00207                 BEQ     SKPLAB                            ;DONT UPDATE
2135 170543           (          asm.asm):00208                 LBSR    LOCINS                            ;LOOK UP INSTRUCTION
2138 C10B             (          asm.asm):00209                 CMPB    #11                               ;IS IT 'EQU'?
213A 2761             (          asm.asm):00210                 BEQ     SKPL1                             ;IF SO, DONT FLAG
213C 3404             (          asm.asm):00211                 PSHS    B                                 ;SAVE INSTRUCTION TYPE
213E DC08             (          asm.asm):00212                 LDD     CURPC                             ;GET CURRENT PROGRAM COUNTER
2140 9E06             (          asm.asm):00213                 LDX     TEMP                              ;GET ADDRESS OF SYMBOL TABLE ENTRY
2142 ED84             (          asm.asm):00214                 STD     ,X                                ;UPDATE SYMBOL TABLE
2144 86FF             (          asm.asm):00215                 LDA     #$FF                              ;GET SET FLAG
2146 970E             (          asm.asm):00216                 STA     LINUM                             ;INDICATE WE MADE CHANGES
2148 3504             (          asm.asm):00217                 PULS    B                                 ;RESTORE INSTRUCTION TYPE
214A 2051             (          asm.asm):00218                 BRA     SKPL1                             ;CONTINUE
214C                  (          asm.asm):00219         INSYM
214C 0D15             (          asm.asm):00220                 TST     EMSG                              ;DID WE FIND IT?
214E 2627             (          asm.asm):00221                 BNE     SYMOK                             ;NOT FOUND, ITS OK
                      (          asm.asm):00222         ;* SYMBOL ALREADY EXISTS, INDICATE SO
2150 0A15             (          asm.asm):00223                 DEC     EMSG                              ;INSURE WE DISPLAY IN ERROR
2152 8E2B32           (          asm.asm):00224                 LDX     #EMSG1                            ;POINT TO MESSAGE
2155 170919           (          asm.asm):00225                 LBSR    WRIMSG                            ;DISPLAY
2158 170916           (          asm.asm):00226                 LBSR    WRIMSG                            ;DISPLAY DUPLICATE SYMBOL MESSAGE,
215B 108E40A5         (          asm.asm):00227                 LDY     #LINE                             ;POINT TO LINE
215F                  (          asm.asm):00228         OUTSYS
215F 1708B4           (          asm.asm):00229                 LBSR    TSTERM                            ;LOOK FOR TERMINATOR
2162 2705             (          asm.asm):00230                 BEQ     SYMCR                             ;IF SO, QUIT
2164 170927           (          asm.asm):00231                 LBSR    WRICHR                            ;OUTPUT CHARACTER
2167 20F6             (          asm.asm):00232                 BRA     OUTSYS                            ;KEEP DISPLAYING
2169                  (          asm.asm):00233         SYMCR
2169 860D             (          asm.asm):00234                 LDA     #$0D                              ;NEW LINE CHARACTER
216B 170920           (          asm.asm):00235                 LBSR    WRICHR                            ;OUTPUT
216E DC02             (          asm.asm):00236                 LDD     ERRORS                            ;GET ERROR FLAG
2170 C30001           (          asm.asm):00237                 ADDD    #1                                ;INCREMENT
2173 DD02             (          asm.asm):00238                 STD     ERRORS                            ;RESAVE
2175 2023             (          asm.asm):00239                 BRA     SKPLAB                            ;DONT INSERT SECOND ONE
                      (          asm.asm):00240         ;* INSERT SYMBOL INTO SYMBOL TABLE
2177                  (          asm.asm):00241         SYMOK
2177 9E0C             (          asm.asm):00242                 LDX     SYMLOC                            ;GET SYMBOL TABLE POSITION
2179 108E40A5         (          asm.asm):00243                 LDY     #LINE                             ;POINT TO START OF SYMBOL
217D                  (          asm.asm):00244         SYMM
217D 170896           (          asm.asm):00245                 LBSR    TSTERM                            ;GET CHARACTER
2180 2704             (          asm.asm):00246                 BEQ     FIXSYM                            ;IF END, STOP
2182 A780             (          asm.asm):00247                 STA     ,X+                               ;SAVE IN SYMBOL TABLE
2184 20F7             (          asm.asm):00248                 BRA     SYMM                              ;KEEP GOING
2186                  (          asm.asm):00249         FIXSYM
2186 A61F             (          asm.asm):00250                 LDA     -1,X                              ;GET OLD VALUE FROM SYMBOL
2188 8A80             (          asm.asm):00251                 ORA     #$80                              ;SET HIGH BIT
218A A71F             (          asm.asm):00252                 STA     -1,X                              ;RESAVE
218C 9F06             (          asm.asm):00253                 STX     TEMP                              ;POINT TO VALUE FOR EQUATE
218E DC08             (          asm.asm):00254                 LDD     CURPC                             ;GET CURRENT PROGRAM COUNTER
2190 ED81             (          asm.asm):00255                 STD     ,X++                              ;SAVE IN SYMBOL TABLE
2192 6F84             (          asm.asm):00256                 CLR     ,X                                ;INDICATE NEW END
2194 9F0C             (          asm.asm):00257                 STX     SYMLOC                            ;SAVE NEW SYMBOL TABLE LOCATION
2196 86FF             (          asm.asm):00258                 LDA     #$FF                              ;GET POSITIVE FLAG
2198 970E             (          asm.asm):00259                 STA     LINUM                             ;INDICATE WE CHANGED
219A                  (          asm.asm):00260         SKPLAB
219A 1704DE           (          asm.asm):00261                 LBSR    LOCINS                            ;LOOK UP INSTRUCTION
219D                  (          asm.asm):00262         SKPL1
219D 5A               (          asm.asm):00263                 DECB    CONVERT TO TYPE 0 ON
219E 58               (          asm.asm):00264                 ASLB    TIMES 2 FOR TWO BYTE ENTRIES
219F CE21A9           (          asm.asm):00265                 LDU     #P1TAB                            ;POINT TO TABLE
21A2 ECC5             (          asm.asm):00266                 LDD     B,U                               ;GET ADDRESS
21A4 3406             (          asm.asm):00267                 PSHS    A,B                               ;SAVE ON STACK
21A6 DE08             (          asm.asm):00268                 LDU     CURPC                             ;GET CURRENT PROGRAM COUNTER
21A8 39               (          asm.asm):00269                 RTS     EXECUTE CODE
                      (          asm.asm):00270         ;* TABLE OF INSTRUCTION HANDLERS FOR PASS 1
21A9                  (          asm.asm):00271         P1TAB
21A9 21D3             (          asm.asm):00272                 FDB     P1T1
21AB 21E0             (          asm.asm):00273                 FDB     P1T2
21AD 21EB             (          asm.asm):00274                 FDB     P1T3
21AF 21F0             (          asm.asm):00275                 FDB     TYP4
21B1 21F0             (          asm.asm):00276                 FDB     TYP4
21B3 21D7             (          asm.asm):00277                 FDB     TWOBYT
21B5 21F6             (          asm.asm):00278                 FDB     P1T7
21B7 21FA             (          asm.asm):00279                 FDB     P1T8
21B9 21D7             (          asm.asm):00280                 FDB     TWOBYT
21BB 21D7             (          asm.asm):00281                 FDB     TWOBYT
21BD 21FE             (          asm.asm):00282                 FDB     P1T11
21BF 2214             (          asm.asm):00283                 FDB     P1T12
21C1 221C             (          asm.asm):00284                 FDB     P1T13
21C3 2223             (          asm.asm):00285                 FDB     P1T14
21C5 223A             (          asm.asm):00286                 FDB     P1T15
21C7 2242             (          asm.asm):00287                 FDB     P1T16
21C9 2264             (          asm.asm):00288                 FDB     P1T17
21CB 21D7             (          asm.asm):00289                 FDB     TWOBYT
21CD 226D             (          asm.asm):00290                 FDB     P1T19
21CF 20FF             (          asm.asm):00291                 FDB     PLINE
21D1 20FF             (          asm.asm):00292                 FDB     PLINE
                      (          asm.asm):00293         ;* TYPE 1, INHERENT ADDRESSING
21D3                  (          asm.asm):00294         P1T1
21D3 6D01             (          asm.asm):00295                 TST     1,X                               ;IS IT A TWO BYTE OPCODE?
21D5 2702             (          asm.asm):00296                 BEQ     ONEBYT                            ;ONLY ONE BYTE
21D7                  (          asm.asm):00297         TWOBYT
21D7 3341             (          asm.asm):00298                 LEAU    1,U                               ;ADVANCE PC ONE BYTE
21D9                  (          asm.asm):00299         ONEBYT
21D9 3341             (          asm.asm):00300                 LEAU    1,U                               ;ADVANCE CURRENT PROGRAM COUNTER
21DB                  (          asm.asm):00301         SAVPC
21DB DF08             (          asm.asm):00302                 STU     CURPC                             ;SAVE CURRENT PROGRAM COUNTER
21DD 16FF1F           (          asm.asm):00303                 LBRA    PLINE                             ;PROCESS NEXT LINE
                      (          asm.asm):00304         ;* TYPE2, MEMORY REFERENCE, EIGHT BIT
21E0                  (          asm.asm):00305         P1T2
21E0 170513           (          asm.asm):00306                 LBSR    MEMOP                             ;EVALUATE MEMORY OPERAND
21E3 4D               (          asm.asm):00307                 TSTA    IS IT IMMEDIATE
21E4 2601             (          asm.asm):00308                 BNE     NPIMM                             ;NO, DONT ADJUST
21E6 5A               (          asm.asm):00309                 DECB    USE ONLY EIGHT BIT VALUE
21E7                  (          asm.asm):00310         NPIMM
21E7 33C5             (          asm.asm):00311                 LEAU    B,U                               ;ADVANCE PROGRAM COUNTER
21E9 20EE             (          asm.asm):00312                 BRA     ONEBYT                            ;INLUDE OPCODE AND UPDATE PROGRAM COUNTER
                      (          asm.asm):00313         ;* TYPE3, SAME AS TYPE 2, BUT 16BIT IMMEDIATE DATA
21EB                  (          asm.asm):00314         P1T3
21EB 170508           (          asm.asm):00315                 LBSR    MEMOP                             ;CALCULATE LENGTH
21EE 20F7             (          asm.asm):00316                 BRA     NPIMM                             ;CONTINUE
21F0                  (          asm.asm):00317         TYP4
21F0 170503           (          asm.asm):00318                 LBSR    MEMOP                             ;GET MEMORY OPERANDS
21F3 5C               (          asm.asm):00319                 INCB    ADVANCE OPERAND COUNT
21F4 20F1             (          asm.asm):00320                 BRA     NPIMM                             ;GENERATE OPCODE
                      (          asm.asm):00321         ;* TYPE 7, LONG BRANCHES
21F6                  (          asm.asm):00322         P1T7
21F6 3343             (          asm.asm):00323                 LEAU    3,U                               ;SKIP FOR FOUR BYTES
21F8 20DF             (          asm.asm):00324                 BRA     ONEBYT                            ;AND CALCULATE
                      (          asm.asm):00325         ;* LBRA AND LBSR
21FA                  (          asm.asm):00326         P1T8
21FA 3342             (          asm.asm):00327                 LEAU    2,U                               ;THREE BYTE INSTRUCTION
21FC 20DB             (          asm.asm):00328                 BRA     ONEBYT                            ;CONTINUE
                      (          asm.asm):00329         ;* TYPE 11, EQUATE STATEMENT
21FE                  (          asm.asm):00330         P1T11
21FE DE06             (          asm.asm):00331                 LDU     TEMP                              ;GET POINTER TO VALUE
2200 17075A           (          asm.asm):00332                 LBSR    EVAL                              ;GET VALUE
2203 0D0F             (          asm.asm):00333                 TST     LINUM+1                           ;IS THIS AN OPTOMIZE?
2205 2709             (          asm.asm):00334                 BEQ     SETSYM                            ;NO, SET SYMBOL VALUE
2207 10A3C4           (          asm.asm):00335                 CMPD    ,U                                ;IS IT THE SAME?
220A 2704             (          asm.asm):00336                 BEQ     SETSYM                            ;IF SO, ITS OK
220C                  (          asm.asm):00337         S1
220C 0A0E             (          asm.asm):00338                 DEC     LINUM                             ;INSURE FLAG IS SET
220E 27FC             (          asm.asm):00339                 BEQ     S1                                ;SPECIAL CASE
2210                  (          asm.asm):00340         SETSYM
2210 EDC4             (          asm.asm):00341                 STD     ,U                                ;CHANGE VALUE OF LAST SYMBOL
2212 2005             (          asm.asm):00342                 BRA     PLI1                              ;PROCESS NEXT LINE
                      (          asm.asm):00343         ;* TYPE 12, ORG STATEMENT
2214                  (          asm.asm):00344         P1T12
2214 170746           (          asm.asm):00345                 LBSR    EVAL                              ;EVALUATE NEW LOCATION
2217 DD08             (          asm.asm):00346                 STD     CURPC                             ;SAVE NEW PC
2219                  (          asm.asm):00347         PLI1
2219 16FEE3           (          asm.asm):00348                 LBRA    PLINE                             ;START FROM HERE
                      (          asm.asm):00349         ;* 'RMB' INSTRUCTION
221C                  (          asm.asm):00350         P1T13
221C 17073E           (          asm.asm):00351                 LBSR    EVAL                              ;EVALUATE OPERAND
221F 33CB             (          asm.asm):00352                 LEAU    D,U                               ;ADVANCE THAT MANY BYTES
2221                  (          asm.asm):00353         SAVP1
2221 20B8             (          asm.asm):00354                 BRA     SAVPC                             ;CONTINUE
                      (          asm.asm):00355         ;* 'FCB' DIRECTIVE
2223                  (          asm.asm):00356         P1T14
2223 8D04             (          asm.asm):00357                 BSR     FCBLEN                            ;CALCULATE LENGTH
2225 33CB             (          asm.asm):00358                 LEAU    D,U                               ;ADD TO CODE LENGTH
2227 20B2             (          asm.asm):00359                 BRA     SAVPC                             ;PROCESS
                      (          asm.asm):00360         ;*
                      (          asm.asm):00361         ;* CALCULATES LENGTH ON A 'FCB' TYPE OPERAND
                      (          asm.asm):00362         ;*
2229                  (          asm.asm):00363         FCBLEN
2229 8E0000           (          asm.asm):00364                 LDX     #0                                ;START OUT WITH ZERO
222C                  (          asm.asm):00365         ADDFCB
222C 3001             (          asm.asm):00366                 LEAX    1,X                               ;ADVANCE COUNTER
222E 17072C           (          asm.asm):00367                 LBSR    EVAL                              ;EVALUATE ON OPERAND
2231 A63F             (          asm.asm):00368                 LDA     -1,Y                              ;GET TERMINATING CHAR
2233 812C             (          asm.asm):00369                 CMPA    #','                              ;IS THERE MORE?
2235 27F5             (          asm.asm):00370                 BEQ     ADDFCB                            ;CONTINUE
2237 1F10             (          asm.asm):00371                 TFR     X,D                               ;COPY FOR LATER
2239 39               (          asm.asm):00372                 RTS
                      (          asm.asm):00373         ;* 'FDB' DIRECTIVE
223A                  (          asm.asm):00374         P1T15
223A 8DED             (          asm.asm):00375                 BSR     FCBLEN                            ;LOOK UPLENGTH
223C 33CB             (          asm.asm):00376                 LEAU    D,U                               ;ADD IN FOR ONE BYTE
223E 33CB             (          asm.asm):00377                 LEAU    D,U                               ;ADD IN FOR TWO BYTES
2240 20DF             (          asm.asm):00378                 BRA     SAVP1                             ;PROCESS
                      (          asm.asm):00379         ;* 'FCC' DIRECTIVE
2242                  (          asm.asm):00380         P1T16
2242 8D04             (          asm.asm):00381                 BSR     FCCLEN                            ;FIND OUT ITS LENGTH
2244 33CB             (          asm.asm):00382                 LEAU    D,U                               ;ADVANCE
2246 20D9             (          asm.asm):00383                 BRA     SAVP1                             ;SAVE NEW ADDRESS
                      (          asm.asm):00384         ;*
                      (          asm.asm):00385         ;* CALCULATES THE LENGTH OF A STRING
                      (          asm.asm):00386         ;*
2248                  (          asm.asm):00387         FCCLEN
2248 8EFFFF           (          asm.asm):00388                 LDX     #$FFFF                            ;START WITH -1 LENGTH
224B 1707C8           (          asm.asm):00389                 LBSR    TSTERM                            ;GET TERMINATOR
224E 810D             (          asm.asm):00390                 CMPA    #$0D                              ;TEST FOR NULL LINE
2250 270F             (          asm.asm):00391                 BEQ     STRERR                            ;ITS INVALID
2252 9706             (          asm.asm):00392                 STA     TEMP                              ;SAVE FOR LATER
2254                  (          asm.asm):00393         FCC1
2254 3001             (          asm.asm):00394                 LEAX    1,X                               ;ADVANCE
2256 1707BD           (          asm.asm):00395                 LBSR    TSTERM                            ;CONTINUE
2259 810D             (          asm.asm):00396                 CMPA    #$0D                              ;END OF LINE
225B 2704             (          asm.asm):00397                 BEQ     STRERR                            ;IF SO, ITS TERRIBLE
225D 9106             (          asm.asm):00398                 CMPA    TEMP                              ;IS IT THE SAME?
225F 26F3             (          asm.asm):00399                 BNE     FCC1                              ;NO, ITS NOT
2261                  (          asm.asm):00400         STRERR
2261 1F10             (          asm.asm):00401                 TFR     X,D                               ;COPY TO ACCUMULATOR
2263 39               (          asm.asm):00402                 RTS
                      (          asm.asm):00403         ;* 'FCCZ' DIRECTIVE
2264                  (          asm.asm):00404         P1T17
2264 8DE2             (          asm.asm):00405                 BSR     FCCLEN                            ;GET LENGTH
2266 C30001           (          asm.asm):00406                 ADDD    #1                                ;OFFSET ONE FOR ZERO BYTE
2269 33CB             (          asm.asm):00407                 LEAU    D,U                               ;ADD TO ADDRESS
226B 20B4             (          asm.asm):00408                 BRA     SAVP1                             ;SAVE NEW PROGRAM COUNTER
                      (          asm.asm):00409         ;* 'SETDP' DIRECTIVE
226D                  (          asm.asm):00410         P1T19
226D 1706ED           (          asm.asm):00411                 LBSR    EVAL                              ;GET OPERAND VALUE
2270 DD0A             (          asm.asm):00412                 STD     CURDP                             ;SET CURRENT DIRECT PAGE VALUE
2272 20A5             (          asm.asm):00413                 BRA     PLI1
                      (          asm.asm):00414         ;*
                      (          asm.asm):00415         ;* OPTIMIZATION PASSES, RERUN FIRST PASS UNTIL ALL FORWARD REFERENCES
                      (          asm.asm):00416         ;* ARE RESOLVED
                      (          asm.asm):00417         ;*
2274                  (          asm.asm):00418         OPTMIZ
2274 4F               (          asm.asm):00419                 CLRA    GET ORIGIN ADDRESS
2275 5F               (          asm.asm):00420                 CLRB    OF ZERO
2276 DD08             (          asm.asm):00421                 STD     CURPC                             ;SET PROGRAM COUNTER BACK
2278 CE4159           (          asm.asm):00422                 LDU     #INFIL
227B 3F               (          asm.asm):00423                 SWI
227C 3E               (          asm.asm):00424                 FCB     62                                ;REWIND INPUT FILE
227D DC02             (          asm.asm):00425                 LDD     ERRORS                            ;ANY DUPLICATE SYMBOLS?
227F 2621             (          asm.asm):00426                 BNE     PASS2                             ;IF SO, DONT TRY TO OPTOMIZE
2281 B63184           (          asm.asm):00427                 LDA     DEBUG                             ;ARE WE DEBUGGING?
2284 271C             (          asm.asm):00428                 BEQ     PASS2                             ;IF SO, DONT PERFORM OPTOMIZE
2286 960E             (          asm.asm):00429                 LDA     LINUM                             ;CHANGE ANYTHING?
2288 2718             (          asm.asm):00430                 BEQ     PASS2                             ;NO, AOK
228A 7D3187           (          asm.asm):00431                 TST     QUIET                             ;ARE WE BEING QUIET?
228D 270A             (          asm.asm):00432                 BEQ     OPTA                              ;IF SO, KEEP MUM
228F 3F               (          asm.asm):00433                 SWI
2290 18               (          asm.asm):00434                 FCB     24
2291 4F70742E2E2E20   (          asm.asm):00435                 FCC     'Opt... '
2298 00               (          asm.asm):00436                 FCB     00
2299                  (          asm.asm):00437         OPTA
2299 86FF             (          asm.asm):00438                 LDA     #$FF                              ;GET FLAG
229B 970F             (          asm.asm):00439                 STA     LINUM+1                           ;INDICATE OPTIMIZE
229D 0F0E             (          asm.asm):00440                 CLR     LINUM                             ;RESET CHANGE FLAG
229F 16FE59           (          asm.asm):00441                 LBRA    PASS1                             ;IF NOT, WE ARE OK
                      (          asm.asm):00442         ;*
                      (          asm.asm):00443         ;* PASS TWO, GENERATE CODE
                      (          asm.asm):00444         ;*
22A2                  (          asm.asm):00445         PASS2
22A2 7D3187           (          asm.asm):00446                 TST     QUIET                             ;ARE WE BEING QUIET?
22A5 2712             (          asm.asm):00447                 BEQ     NOM1                              ;IF SO, SHUT UP
22A7 3F               (          asm.asm):00448                 SWI
22A8 18               (          asm.asm):00449                 FCB     24
22A9 5365636F6E642070 (          asm.asm):00450                 FCC     'Second pass... '
     6173732E2E2E20
22B8 00               (          asm.asm):00451                 FCB     00
22B9                  (          asm.asm):00452         NOM1
22B9 4F               (          asm.asm):00453                 CLRA    GET HIGH ZERO
22BA 5F               (          asm.asm):00454                 CLRB    GET LOW ZERO
22BB DD0E             (          asm.asm):00455                 STD     LINUM                             ;SET UP LINE NUMBER
22BD DD10             (          asm.asm):00456                 STD     PAGE                              ;SET CURRENT PAGE NUMBER
22BF 0F12             (          asm.asm):00457                 CLR     PAGLIN                            ;INSURE WE WILL GENERATE TITLE
22C1 0F15             (          asm.asm):00458                 CLR     EMSG                              ;INDICATE NO ERROR
22C3 43               (          asm.asm):00459                 COMA    GET $FF
22C4 970A             (          asm.asm):00460                 STA     CURDP                             ;INSURE NO DIRECT PAGE ADDRESSING
                      (          asm.asm):00461         ;* OPEN OBJECT FILE FOR WRITE
22C6 9E00             (          asm.asm):00462                 LDX     FILPTR                            ;GET FILENAME POINTER BACK
22C8 CC4F42           (          asm.asm):00463                 LDD     #$4F42                            ;'OB' GET 'OB'
22CB ED84             (          asm.asm):00464                 STD     ,X                                ;SAVE IT
22CD 864A             (          asm.asm):00465                 LDA     #'J'                              ;GET 'J'
22CF A702             (          asm.asm):00466                 STA     2,X                               ;SAVE IN NAME
22D1 CE456D           (          asm.asm):00467                 LDU     #OBJFIL                           ;POINT TO OBJECT FCB
22D4 3F               (          asm.asm):00468                 SWI
22D5 38               (          asm.asm):00469                 FCB     56                                ;OPEN FILE FOR WRITE
22D6 1026039F         (          asm.asm):00470                 LBNE    ABORT                             ;ABORT OPERATION
                      (          asm.asm):00471         ;* PROCESS FOR EACH LINE
22DA                  (          asm.asm):00472         P2LIN
22DA 108E40A5         (          asm.asm):00473                 LDY     #LINE                             ;POINT TO LINE BUFFER
22DE 5F               (          asm.asm):00474                 CLRB    START ON LOCATION ZERO
22DF                  (          asm.asm):00475         P21
22DF 1707F6           (          asm.asm):00476                 LBSR    RDINP                             ;GET A CHARACTER
22E2 102602DE         (          asm.asm):00477                 LBNE    QUIT                              ;GIVE UP ON ERROR
22E6 8109             (          asm.asm):00478                 CMPA    #9                                ;CHECK FOR TAB
22E8 260B             (          asm.asm):00479                 BNE     NOTTAB                            ;NO, SAVE NORMAL CHARACTER
22EA 8620             (          asm.asm):00480                 LDA     #' '                              ;GET SPACE
22EC                  (          asm.asm):00481         STAB1
22EC A7A0             (          asm.asm):00482                 STA     ,Y+                               ;SAVE IN LINE
22EE 5C               (          asm.asm):00483                 INCB    ADVANCE SAVED CHARACTER
22EF C507             (          asm.asm):00484                 BITB    #7                                ;ARE AT A TABSTOP
22F1 26F9             (          asm.asm):00485                 BNE     STAB1                             ;NO, SKIP IT
22F3 20EA             (          asm.asm):00486                 BRA     P21                               ;GET NEXT CHARACTER
22F5                  (          asm.asm):00487         NOTTAB
22F5 A7A0             (          asm.asm):00488                 STA     ,Y+                               ;SAVE IN BUFFER
22F7 5C               (          asm.asm):00489                 INCB    ADVANCE TO NEXT
22F8 810D             (          asm.asm):00490                 CMPA    #$0D                              ;IS IT END OF LINE?
22FA 26E3             (          asm.asm):00491                 BNE     P21                               ;IF NOT, KEEP GOING
22FC 108E40A5         (          asm.asm):00492                 LDY     #LINE                             ;RESTORE POSITION IN LINE
2300 A6A4             (          asm.asm):00493                 LDA     ,Y                                ;GET CHARACTER FROM START OF LINE
2302 812A             (          asm.asm):00494                 CMPA    #'*'                              ;IS IT A COMMENT
2304 2607             (          asm.asm):00495                 BNE     FNDSPC                            ;NO, KEEP PROCESSING
2306 1707EB           (          asm.asm):00496                 LBSR    DSPTTL                            ;DISPLAY TITLE IF NESSARY
2309 9E08             (          asm.asm):00497                 LDX     CURPC                             ;SET CURRENT PROGRAM COUNTER ADDRESS
230B 2070             (          asm.asm):00498                 BRA     GENLI1                            ;GENERATE BLANK LINE IN LISTING
230D                  (          asm.asm):00499         FNDSPC
230D A6A0             (          asm.asm):00500                 LDA     ,Y+                               ;EXAMINE CHARACTER FROM LINE
230F 810D             (          asm.asm):00501                 CMPA    #$0D                              ;END OF LINE (NO INST)?
2311 2704             (          asm.asm):00502                 BEQ     GOINS                             ;IF SO, EXIT LOOP
2313 8120             (          asm.asm):00503                 CMPA    #' '                              ;IS IT A SPACE (PAST LABEL)?
2315 26F6             (          asm.asm):00504                 BNE     FNDSPC                            ;IF NOT, LOOK FOR ONE
2317                  (          asm.asm):00505         GOINS
2317 313F             (          asm.asm):00506                 LEAY    -1,Y                              ;BACKUP TO TERMINATOR
2319 17035F           (          asm.asm):00507                 LBSR    LOCINS                            ;LOOK UP INSTRUCTION
231C CE2329           (          asm.asm):00508                 LDU     #P2TAB                            ;POINT TO TABLE
231F 5A               (          asm.asm):00509                 DECB    CONVERT TO ZERO OFFSET
2320 58               (          asm.asm):00510                 ASLB    TWO BYTES/ENTRY
2321 ECC5             (          asm.asm):00511                 LDD     B,U                               ;GET ADDRESS
2323 3406             (          asm.asm):00512                 PSHS    A,B                               ;SAVE ON STACK
2325 CE4055           (          asm.asm):00513                 LDU     #CODE                             ;PLACE TO PUT THE CODE
2328 39               (          asm.asm):00514                 RTS     EXECUTE CODE
                      (          asm.asm):00515         ;* TABLE OF INSTRUCTION HANDLERS FOR PASS 2
2329                  (          asm.asm):00516         P2TAB
2329 2353             (          asm.asm):00517                 FDB     P2T1
232B 2404             (          asm.asm):00518                 FDB     P2T2
232D 242F             (          asm.asm):00519                 FDB     P2T3
232F 2434             (          asm.asm):00520                 FDB     P2T4
2331 243A             (          asm.asm):00521                 FDB     P2T5
2333 2440             (          asm.asm):00522                 FDB     P2T6
2335 2461             (          asm.asm):00523                 FDB     P2T7
2337 2471             (          asm.asm):00524                 FDB     P2T8
2339 2481             (          asm.asm):00525                 FDB     P2T9
233B 24C9             (          asm.asm):00526                 FDB     P2T10
233D 2515             (          asm.asm):00527                 FDB     P2T11
233F 252C             (          asm.asm):00528                 FDB     P2T12
2341 254D             (          asm.asm):00529                 FDB     P2T13
2343 255C             (          asm.asm):00530                 FDB     P2T14
2345 256A             (          asm.asm):00531                 FDB     P2T15
2347 2577             (          asm.asm):00532                 FDB     P2T16
2349 2599             (          asm.asm):00533                 FDB     P2T17
234B 259F             (          asm.asm):00534                 FDB     P2T18
234D 25AA             (          asm.asm):00535                 FDB     P2T19
234F 25B1             (          asm.asm):00536                 FDB     P2T20                             ;PAGE DIRECTIVE
2351 25B6             (          asm.asm):00537                 FDB     P2T21                             ;TITLE DIRECTIVE
                      (          asm.asm):00538         ;* TYPE1, INHERENT ADDRESSING
2353                  (          asm.asm):00539         P2T1
2353 A680             (          asm.asm):00540                 LDA     ,X+                               ;GET OPCODE FROM TABLE
2355 2704             (          asm.asm):00541                 BEQ     GENLIS                            ;IF END, THEN GENERATE LISTING
2357 A7C0             (          asm.asm):00542                 STA     ,U+                               ;SAVE IN MEMORY
2359 20F8             (          asm.asm):00543                 BRA     P2T1                              ;TEST FOR ANOTHER OPCODE BYTE
                      (          asm.asm):00544         ;*
                      (          asm.asm):00545         ;* GENERATE LISTING
                      (          asm.asm):00546         ;*
235B                  (          asm.asm):00547         GENLIS
235B 170796           (          asm.asm):00548                 LBSR    DSPTTL                            ;DISPLAY TITLE IF NESSARY
235E 9E08             (          asm.asm):00549                 LDX     CURPC                             ;GET OUR ADDRESS
2360 1F30             (          asm.asm):00550                 TFR     U,D                               ;COPY TO D REGISTER
2362 834055           (          asm.asm):00551                 SUBD    #CODE                             ;CONVERT TO BINARY OFFSET
2365 338B             (          asm.asm):00552                 LEAU    D,X                               ;GET NEW ADDRESS
2367 DF08             (          asm.asm):00553                 STU     CURPC                             ;SAVE IN MEMORY
2369 CE4055           (          asm.asm):00554                 LDU     #CODE                             ;POINT TO CODE SPACE
236C A6C4             (          asm.asm):00555                 LDA     ,U                                ;GET OPCODE
236E 81CF             (          asm.asm):00556                 CMPA    #$CF                              ;CHECK FOR INVALID ADDRESSING MODE
2370 260B             (          asm.asm):00557                 BNE     GENLI1                            ;ADDRESSING IS OK
2372 9618             (          asm.asm):00558                 LDA     ITYPE                             ;GET INSTRUCTION TYPE BACK
2374 810B             (          asm.asm):00559                 CMPA    #$B                               ;IS IT A DIRECTIVE
2376 2205             (          asm.asm):00560                 BHI     GENLI1                            ;DONT GENERATE ERROR FOR DIRECTIVES
2378 8603             (          asm.asm):00561                 LDA     #3                                ;'INVALID ADDRESSING MODE'
237A 1706B0           (          asm.asm):00562                 LBSR    SETERR                            ;SET ERROR MESSAGE
237D                  (          asm.asm):00563         GENLI1
237D 1F10             (          asm.asm):00564                 TFR     X,D                               ;COPY TO D REGISTER
237F 1706F8           (          asm.asm):00565                 LBSR    WRIBYT                            ;OUTPUT BYTE IN HEX
2382 1F98             (          asm.asm):00566                 TFR     B,A                               ;GET LOW BYTE
2384 1706F3           (          asm.asm):00567                 LBSR    WRIBYT                            ;OUTPUT
2387                  (          asm.asm):00568         LISOUT
2387 1706DF           (          asm.asm):00569                 LBSR    SPACE                             ;DISPLAY A SPACE
238A 1706DC           (          asm.asm):00570                 LBSR    SPACE                             ;AND ANOTHER
238D C605             (          asm.asm):00571                 LDB     #5                                ;# LISTING BYTES TO ALLOW
238F                  (          asm.asm):00572         LISO1
238F 9C08             (          asm.asm):00573                 CMPX    CURPC                             ;ARE WE AT LIMIT?
2391 2712             (          asm.asm):00574                 BEQ     LISO2                             ;IF SO, DONT DISPLAY MORE CODE
2393 3001             (          asm.asm):00575                 LEAX    1,X                               ;ADVANCE TO NEXT
2395 A6C0             (          asm.asm):00576                 LDA     ,U+                               ;GET BYTE OF CODE
2397 170747           (          asm.asm):00577                 LBSR    WRIOBB                            ;WRITE OUTPUT BYTE
239A 5A               (          asm.asm):00578                 DECB    BACKUP COUNT
239B 2BF2             (          asm.asm):00579                 BMI     LISO1                             ;DONT OUTPUT
239D 1706DA           (          asm.asm):00580                 LBSR    WRIBYT                            ;OUTPUT IN HEX
23A0 1706C6           (          asm.asm):00581                 LBSR    SPACE                             ;PRINT A SPACE
23A3 20EA             (          asm.asm):00582                 BRA     LISO1                             ;AND CONTINUE
                      (          asm.asm):00583         ;* IF NON-DISPLAYED CODE IS PRESENT, OUTPUT INDICATOR
23A5                  (          asm.asm):00584         LISO2
23A5 862B             (          asm.asm):00585                 LDA     #'+'                              ;OVERFLOW INDICATOR
23A7 5D               (          asm.asm):00586                 TSTB    DID WE OVERFLOW?
23A8 2B10             (          asm.asm):00587                 BMI     LISO5                             ;YES, OUTPUT INDICATOR
                      (          asm.asm):00588         ;* FILL LISTING WITH SPACES
23AA                  (          asm.asm):00589         LISO3
23AA 5A               (          asm.asm):00590                 DECB    REDUCE COUNT
23AB 2B0B             (          asm.asm):00591                 BMI     LISO4                             ;NO MORE SPACE
23AD 1706B9           (          asm.asm):00592                 LBSR    SPACE                             ;PRINT A SPACE
23B0 1706B6           (          asm.asm):00593                 LBSR    SPACE                             ;PRINT A SPACE
23B3 1706B3           (          asm.asm):00594                 LBSR    SPACE                             ;PRINT A SPACE
23B6 20F2             (          asm.asm):00595                 BRA     LISO3                             ;BACKUP
23B8                  (          asm.asm):00596         LISO4
23B8 8620             (          asm.asm):00597                 LDA     #' '                              ;GET SPACE
23BA                  (          asm.asm):00598         LISO5
23BA 1706D1           (          asm.asm):00599                 LBSR    WRICHR                            ;OUTPUT CHARACTER
                      (          asm.asm):00600         ;* OUTPUT LINE NUMBER
23BD DC0E             (          asm.asm):00601                 LDD     LINUM                             ;GET LINE NUMBER
23BF C30001           (          asm.asm):00602                 ADDD    #1                                ;INCREMENT
23C2 DD0E             (          asm.asm):00603                 STD     LINUM                             ;REPLACE
23C4 10832710         (          asm.asm):00604                 CMPD    #10000                            ;ARE WE < 10000
23C8 2403             (          asm.asm):00605                 BHS     NS1                               ;NO, WE ARE OK
23CA 17069C           (          asm.asm):00606                 LBSR    SPACE                             ;PAD WITH SPACE
23CD                  (          asm.asm):00607         NS1
23CD 108303E8         (          asm.asm):00608                 CMPD    #1000                             ;< 1000
23D1 2403             (          asm.asm):00609                 BHS     NS2                               ;NO, WE ARE OK
23D3 170693           (          asm.asm):00610                 LBSR    SPACE                             ;PAD WITH SPACE
23D6                  (          asm.asm):00611         NS2
23D6 10830064         (          asm.asm):00612                 CMPD    #100                              ;< 100?
23DA 2403             (          asm.asm):00613                 BHS     NS3                               ;NO, WE ARE OK
23DC 17068A           (          asm.asm):00614                 LBSR    SPACE                             ;PAD WITH SPACE
23DF                  (          asm.asm):00615         NS3
23DF 1083000A         (          asm.asm):00616                 CMPD    #10                               ;< 10
23E3 2403             (          asm.asm):00617                 BHS     NS4                               ;NO, WE ARE OK
23E5 170681           (          asm.asm):00618                 LBSR    SPACE                             ;PAD WITH SPACE
23E8                  (          asm.asm):00619         NS4
23E8 1706CA           (          asm.asm):00620                 LBSR    WRIDEC                            ;OUTPUT DECIMAL NUMBER
23EB 17067B           (          asm.asm):00621                 LBSR    SPACE                             ;DISPLAY A SPACE
23EE 170678           (          asm.asm):00622                 LBSR    SPACE                             ;AND ANOTHER
                      (          asm.asm):00623         ;* OUTPUT ASSEMBLY SOURCE LINE
23F1 108E40A5         (          asm.asm):00624                 LDY     #LINE                             ;POINT TO LINE
23F5                  (          asm.asm):00625         DSPLIN
23F5 A6A0             (          asm.asm):00626                 LDA     ,Y+                               ;GET CHARACTER FROM LINE
23F7 170694           (          asm.asm):00627                 LBSR    WRICHR                            ;DISPLAY
23FA 810D             (          asm.asm):00628                 CMPA    #$0D                              ;CARRIAGE RETURN?
23FC 26F7             (          asm.asm):00629                 BNE     DSPLIN                            ;KEEP DISPLAYING
23FE 170633           (          asm.asm):00630                 LBSR    DSPERR                            ;DISPLAY ANY ERROR MESSAGE
2401 16FED6           (          asm.asm):00631                 LBRA    P2LIN                             ;PAGE EJECT IF NESSARY
                      (          asm.asm):00632         ;* TYPE2, MEMORY REFERENCE, EIGHT BIT
2404                  (          asm.asm):00633         P2T2
2404 1702EF           (          asm.asm):00634                 LBSR    MEMOP                             ;EVALUATE MEMORY OPERAND
2407 4D               (          asm.asm):00635                 TSTA    IS IT IMMEDIATE
2408 2601             (          asm.asm):00636                 BNE     PNIMM                             ;NO, DONT ADJUST
240A 5A               (          asm.asm):00637                 DECB    USE ONLY EIGHT BIT VALUE
240B                  (          asm.asm):00638         PNIMM
240B 3402             (          asm.asm):00639                 PSHS    A                                 ;SAVE INSTRUCTON TYPE
240D A686             (          asm.asm):00640                 LDA     A,X                               ;GET OPCODE
240F A7C0             (          asm.asm):00641                 STA     ,U+                               ;SAVE OPCODE
2411 3502             (          asm.asm):00642                 PULS    A                                 ;GET TYPE BACK
2413 8102             (          asm.asm):00643                 CMPA    #2                                ;IS IT MEMORY REFERENCE?
2415 2605             (          asm.asm):00644                 BNE     NOPOST                            ;NO POSTBYTE
2417 9616             (          asm.asm):00645                 LDA     POST                              ;GET POSTBYTE
2419 A7C0             (          asm.asm):00646                 STA     ,U+                               ;SAVE POSTBYTE
241B 5A               (          asm.asm):00647                 DECB    REDUCE LENGTH BY ONE FOR POSTBYTE
241C                  (          asm.asm):00648         NOPOST
241C 5A               (          asm.asm):00649                 DECB    TEST FOR ZERO OPERANDS
241D 2B0D             (          asm.asm):00650                 BMI     T2E                               ;IF NONE, STOP
241F 9614             (          asm.asm):00651                 LDA     VALUE+1                           ;GET LOWER BYTE OF VALUE
2421 A7C0             (          asm.asm):00652                 STA     ,U+                               ;SAVE EIGHT BIT OPERAND VALUE
2423 5A               (          asm.asm):00653                 DECB    TEST FOR ONE OPERAND BYTE
2424 2B06             (          asm.asm):00654                 BMI     T2E                               ;IF SO, QUIT
2426 DC13             (          asm.asm):00655                 LDD     VALUE                             ;GET ENTIRE 16 BIT VALUE
2428 ED5F             (          asm.asm):00656                 STD     -1,U                              ;SAVE IN CODE AREA
242A 3341             (          asm.asm):00657                 LEAU    1,U                               ;SKIP LAST BYTE
242C                  (          asm.asm):00658         T2E
242C 16FF2C           (          asm.asm):00659                 LBRA    GENLIS                            ;PRODUCE LISTING
                      (          asm.asm):00660         ;* TYPE 3, 16 BIT DATA
242F                  (          asm.asm):00661         P2T3
242F 1702C4           (          asm.asm):00662                 LBSR    MEMOP                             ;EVALUATE OPERANDS
2432 20D7             (          asm.asm):00663                 BRA     PNIMM                             ;CACULATE AND PRODUCE CODE
                      (          asm.asm):00664         ;* TYPE4, SAME AS TYPE 3 BUT HAS $10 PREFIX
2434                  (          asm.asm):00665         P2T4
2434 8610             (          asm.asm):00666                 LDA     #$10                              ;GET PREFIX
2436 A7C0             (          asm.asm):00667                 STA     ,U+                               ;SAVE IN MEMORY
2438 20F5             (          asm.asm):00668                 BRA     P2T3                              ;CONTINUE
                      (          asm.asm):00669         ;* TYPE5, SAME AS TYPE 3 BUT HAS $11 PREFIX
243A                  (          asm.asm):00670         P2T5
243A 8611             (          asm.asm):00671                 LDA     #$11                              ;GET PREFIX
243C A7C0             (          asm.asm):00672                 STA     ,U+                               ;SAVE IN MEMORY
243E 20EF             (          asm.asm):00673                 BRA     P2T3                              ;CONTINUE
                      (          asm.asm):00674         ;* TYPE6, SHORT BRANCHES
2440                  (          asm.asm):00675         P2T6
2440 A684             (          asm.asm):00676                 LDA     ,X                                ;GET OPCODE
2442 A7C0             (          asm.asm):00677                 STA     ,U+                               ;SAVE IN MEMORY
2444 170516           (          asm.asm):00678                 LBSR    EVAL                              ;GET OPERAND VALUE
2447 9308             (          asm.asm):00679                 SUBD    CURPC                             ;CONVERT TO PC RELATIVE OFFSET
2449 830002           (          asm.asm):00680                 SUBD    #2                                ;ADJUST FOR OFFSET OF CURRENT INSTRUCT
244C 10830080         (          asm.asm):00681                 CMPD    #128                              ;POSITIVE RANGE
2450 250B             (          asm.asm):00682                 BLO     RANOK                             ;ITS OK
2452 1083FF80         (          asm.asm):00683                 CMPD    #-128                             ;NEGATIVE RANGE
2456 2405             (          asm.asm):00684                 BHS     RANOK                             ;ALSO IS WITHIN RANGE
2458 8602             (          asm.asm):00685                 LDA     #2                                ;'ADDRESS OUT OF RANGE'
245A 1705D0           (          asm.asm):00686                 LBSR    SETERR                            ;INDICATE ERROR
245D                  (          asm.asm):00687         RANOK
245D E7C0             (          asm.asm):00688                 STB     ,U+                               ;SAVE LOWER EIGHT BITS
245F 20CB             (          asm.asm):00689                 BRA     T2E                               ;GENERATE LISTING
                      (          asm.asm):00690         ;* LONG CONDITIONAL BRANCHES
2461                  (          asm.asm):00691         P2T7
2461 EC84             (          asm.asm):00692                 LDD     ,X                                ;GET PREFIX AND OPCODE
2463 EDC1             (          asm.asm):00693                 STD     ,U++                              ;SAVE IN CODE
2465 1704F5           (          asm.asm):00694                 LBSR    EVAL                              ;EVALUATE OPERANDS
2468 9308             (          asm.asm):00695                 SUBD    CURPC                             ;CONVERT TO OFFSET
246A 830004           (          asm.asm):00696                 SUBD    #4                                ;CONVERT TO NORMAL
246D EDC1             (          asm.asm):00697                 STD     ,U++                              ;SAVE IN CODE
246F 20BB             (          asm.asm):00698                 BRA     T2E                               ;GENERATE LISTING
                      (          asm.asm):00699         ;* LONE BRANCH AND LBSR
2471                  (          asm.asm):00700         P2T8
2471 A684             (          asm.asm):00701                 LDA     ,X                                ;GET OPCODE
2473 A7C0             (          asm.asm):00702                 STA     ,U+                               ;SAVE IN MEMORY
2475 1704E5           (          asm.asm):00703                 LBSR    EVAL                              ;EVALUATE OPERANDS
2478 9308             (          asm.asm):00704                 SUBD    CURPC                             ;CALCULATE OFFSET
247A 830003           (          asm.asm):00705                 SUBD    #3                                ;CONVERT TO NORMAL
247D EDC1             (          asm.asm):00706                 STD     ,U++                              ;SAVE IN CODE
247F 20AB             (          asm.asm):00707                 BRA     T2E                               ;GENERATE LISTING
                      (          asm.asm):00708         ;* TYPE 9, PSH AND PUL
2481                  (          asm.asm):00709         P2T9
2481 A684             (          asm.asm):00710                 LDA     ,X                                ;GET OPCODE
2483 A7C0             (          asm.asm):00711                 STA     ,U+                               ;SAVE IN CODE
2485 6FC0             (          asm.asm):00712                 CLR     ,U+                               ;CLEAR POSTBYTE
2487                  (          asm.asm):00713         FNDREG
2487 8E24C1           (          asm.asm):00714                 LDX     #POTAB                            ;POINT TO TABLE
248A 5F               (          asm.asm):00715                 CLRB    START WITH NO BITS
248B A6A0             (          asm.asm):00716                 LDA     ,Y+                               ;GET CHARACTER FROM OPERAND
248D 8153             (          asm.asm):00717                 CMPA    #'S'                              ;IS IT S?
248F 2602             (          asm.asm):00718                 BNE     NOTS                              ;NO, ITS OK
2491 8655             (          asm.asm):00719                 LDA     #'U'                              ;CHANGE TO U
2493                  (          asm.asm):00720         NOTS
2493 1A01             (          asm.asm):00721                 ORCC    #1                                ;SET CARRY
2495                  (          asm.asm):00722         F1
2495 59               (          asm.asm):00723                 ROLB    SHIFT IN BIT
2496 256D             (          asm.asm):00724                 BCS     POPERR                            ;ERROR CONDITION
2498 A180             (          asm.asm):00725                 CMPA    ,X+                               ;IS THIS IT
249A 1CFE             (          asm.asm):00726                 ANDCC   #$FE                              ;INSURE CARRY CLEAR
249C 26F7             (          asm.asm):00727                 BNE     F1                                ;ITS BAD
249E 8144             (          asm.asm):00728                 CMPA    #'D'                              ;WAS THIS 'DP'?
24A0 2608             (          asm.asm):00729                 BNE     NOADJ                             ;NO, DONT ADJUST
24A2 A6A4             (          asm.asm):00730                 LDA     ,Y                                ;GET OPERAND BYTE
24A4 8150             (          asm.asm):00731                 CMPA    #'P'                              ;IS IT 'DP'
24A6 2702             (          asm.asm):00732                 BEQ     NOADJ                             ;DONT ADJUST
24A8 C606             (          asm.asm):00733                 LDB     #6                                ;CONVERT TO A+B
24AA                  (          asm.asm):00734         NOADJ
24AA EA5F             (          asm.asm):00735                 ORB     -1,U                              ;INCLUDE OLD VALUE
24AC E75F             (          asm.asm):00736                 STB     -1,U                              ;REPLACE
24AE                  (          asm.asm):00737         FNCOM
24AE 170565           (          asm.asm):00738                 LBSR    TSTERM                            ;LOOK FOR TERMINATOR
24B1 26FB             (          asm.asm):00739                 BNE     FNCOM                             ;TILL WE FIND
24B3 812C             (          asm.asm):00740                 CMPA    #','                              ;IS IT A COMMA
24B5 27D0             (          asm.asm):00741                 BEQ     FNDREG                            ;IF SO, ITS OK
24B7                  (          asm.asm):00742         T3E
24B7 16FEA1           (          asm.asm):00743                 LBRA    GENLIS                            ;CONTINUE
24BA                  (          asm.asm):00744         TFRERR
24BA 8607             (          asm.asm):00745                 LDA     #7                                ;'INVALID ARGUMENT FORMAT'
24BC                  (          asm.asm):00746         TFRE1
24BC 17056E           (          asm.asm):00747                 LBSR    SETERR                            ;SAVE IT
24BF 20F6             (          asm.asm):00748                 BRA     T3E                               ;AND GO GOME
24C1                  (          asm.asm):00749         POTAB
24C1 4341424458595550 (          asm.asm):00750                 FCC     'CABDXYUP'      PUSH OPERAND TABLE
                      (          asm.asm):00751         ;* TYPE 10, TRANSFER AND EXCHANGE
24C9                  (          asm.asm):00752         P2T10
24C9 A684             (          asm.asm):00753                 LDA     ,X                                ;GET OPCODE
24CB A7C1             (          asm.asm):00754                 STA     ,U++                              ;SAVE IN OUTPUT
24CD 8D15             (          asm.asm):00755                 BSR     FNTREG                            ;GET REGSITER
24CF 58               (          asm.asm):00756                 ASLB    ROTATE
24D0 58               (          asm.asm):00757                 ASLB    ROTATE
24D1 58               (          asm.asm):00758                 ASLB    ROTATE
24D2 58               (          asm.asm):00759                 ASLB    ROTATE
24D3 E75F             (          asm.asm):00760                 STB     -1,U                              ;SAVEPOSTBYTE
24D5 17053E           (          asm.asm):00761                 LBSR    TSTERM                            ;GET TERMINATOR
24D8 812C             (          asm.asm):00762                 CMPA    #','                              ;COMMA?
24DA 26DE             (          asm.asm):00763                 BNE     TFRERR                            ;IF NOT, ITS INVALID
24DC 8D06             (          asm.asm):00764                 BSR     FNTREG                            ;GET NEXT REGISTER
24DE EA5F             (          asm.asm):00765                 ORB     -1,U                              ;ADD IN OLD VALUE
24E0 E75F             (          asm.asm):00766                 STB     -1,U                              ;RESAVE
24E2 20D3             (          asm.asm):00767                 BRA     T3E                               ;GENERATE LISTING
                      (          asm.asm):00768         ;* CALCULATE TRANSFER & EXCHANGE REGISTER
24E4                  (          asm.asm):00769         FNTREG
24E4 A6A0             (          asm.asm):00770                 LDA     ,Y+                               ;GET REGISTER NAME
24E6 8E2509           (          asm.asm):00771                 LDX     #TFRTAB                           ;POINT TO TABLE
24E9 C6FF             (          asm.asm):00772                 LDB     #$FF                              ;START WITH MINUS ONE
24EB                  (          asm.asm):00773         F2
24EB 5C               (          asm.asm):00774                 INCB    ADVANCE TO NEXT
24EC C10C             (          asm.asm):00775                 CMPB    #12                               ;ARE WO OVER?
24EE 2413             (          asm.asm):00776                 BHS     TOPERR                            ;INDICATE INVALID
24F0 A180             (          asm.asm):00777                 CMPA    ,X+                               ;IS THIS IT?
24F2 26F7             (          asm.asm):00778                 BNE     F2                                ;NO, TRY AGAIN
24F4 8144             (          asm.asm):00779                 CMPA    #'D'                              ;IS IT A+B?
24F6 260A             (          asm.asm):00780                 BNE     NOATJ                             ;DONT ADJUST
24F8 A6A4             (          asm.asm):00781                 LDA     ,Y                                ;LOOK FOR NEXT CHARACTER
24FA 8150             (          asm.asm):00782                 CMPA    #'P'                              ;IS IT 'DP'
24FC 2604             (          asm.asm):00783                 BNE     NOATJ                             ;DONT ADJUST
24FE 3121             (          asm.asm):00784                 LEAY    1,Y                               ;ADVANCE POINTER
2500 C60B             (          asm.asm):00785                 LDB     #$B                               ;CONVERT TO DPR SPEC
2502                  (          asm.asm):00786         NOATJ
2502 39               (          asm.asm):00787                 RTS
2503                  (          asm.asm):00788         TOPERR
2503 3262             (          asm.asm):00789                 LEAS    2,S                               ;SKIP CRAP
2505                  (          asm.asm):00790         POPERR
2505 8604             (          asm.asm):00791                 LDA     #4                                ;'INVALID REGISTER'
2507 20B3             (          asm.asm):00792                 BRA     TFRE1                             ;GENERATE ERROR MESSAGE
2509                  (          asm.asm):00793         TFRTAB
2509 4458595553502E2E (          asm.asm):00794                 FCC     'DXYUSP..ABCD'
     41424344
                      (          asm.asm):00795         ;* EQUATE, EVALUATE OPERANDS FOR ERROR MESSAGES
2515                  (          asm.asm):00796         P2T11
2515 170445           (          asm.asm):00797                 LBSR    EVAL                              ;EVALUATE OPERANDS FOR FUN
2518                  (          asm.asm):00798         WRAD1
2518 3406             (          asm.asm):00799                 PSHS    A,B                               ;SAVE REGISTERS
251A 1705D7           (          asm.asm):00800                 LBSR    DSPTTL                            ;DISPLAY TITLE IF NESSARY
251D 3506             (          asm.asm):00801                 PULS    A,B                               ;RESTRE REGISTERS
251F 170558           (          asm.asm):00802                 LBSR    WRIBYT                            ;DISPLAY HIGH BYTE
2522 1F98             (          asm.asm):00803                 TFR     B,A                               ;COPY LOWER BYTE
2524 170553           (          asm.asm):00804                 LBSR    WRIBYT                            ;DISPLAY LOW BYTE
2527 9E08             (          asm.asm):00805                 LDX     CURPC                             ;INSURE WE HAVE VALID ADDRESS
2529 16FE5B           (          asm.asm):00806                 LBRA    LISOUT                            ;GENERATE LISTING
                      (          asm.asm):00807         ;* ORG STATEMENT
252C                  (          asm.asm):00808         P2T12
252C 17042E           (          asm.asm):00809                 LBSR    EVAL                              ;EVLAUATE OPERANDS
252F DD08             (          asm.asm):00810                 STD     CURPC                             ;SET CURRENT PROGRAM COUNTER
2531 8D04             (          asm.asm):00811                 BSR     WRCADR                            ;INDICATE WE CHANGED ADDRESS
2533 DC08             (          asm.asm):00812                 LDD     CURPC                             ;GET ADDRESS BACK
2535 20E1             (          asm.asm):00813                 BRA     WRAD1                             ;GO BACK
                      (          asm.asm):00814         ;* WRITE AN ADDRESS CHANGE RECORD
2537                  (          asm.asm):00815         WRCADR
2537 3406             (          asm.asm):00816                 PSHS    A,B                               ;SAVE HIGH BYTE
2539 86CF             (          asm.asm):00817                 LDA     #$CF                              ;GET FLAG BYTE
253B 1705A9           (          asm.asm):00818                 LBSR    WRIOBJ                            ;OUTPUT TO OBJECT FILE
253E 8601             (          asm.asm):00819                 LDA     #$01                              ;ADDRESS CHANGE
2540 1705A4           (          asm.asm):00820                 LBSR    WRIOBJ                            ;OUTPUT
2543 3502             (          asm.asm):00821                 PULS    A                                 ;GET HIGH BYTE BACK
2545 17059F           (          asm.asm):00822                 LBSR    WRIOBJ                            ;OUTPUT TO FILE
2548 3502             (          asm.asm):00823                 PULS    A                                 ;GET LOW ADDRESS
254A 16059A           (          asm.asm):00824                 LBRA    WRIOBJ                            ;OUTPUT
                      (          asm.asm):00825         ;* 'RMB' DIRECTIVE
254D                  (          asm.asm):00826         P2T13
254D 17040D           (          asm.asm):00827                 LBSR    EVAL                              ;GET OFFSET TO ADD
2550 D308             (          asm.asm):00828                 ADDD    CURPC                             ;CALCULATE NEW PC
2552 9E08             (          asm.asm):00829                 LDX     CURPC                             ;GET OLD PC VALUE
2554 DD08             (          asm.asm):00830                 STD     CURPC                             ;SET UP NEW VALUE
2556 8DDF             (          asm.asm):00831                 BSR     WRCADR                            ;INDICATE WE CHANGED ADDRESS
2558 1F10             (          asm.asm):00832                 TFR     X,D                               ;COPY OLD VALUE OVER
255A 20BC             (          asm.asm):00833                 BRA     WRAD1                             ;OUTPUT ADDRESS
                      (          asm.asm):00834         ;* 'FCB' DIRECTIVE
255C                  (          asm.asm):00835         P2T14
255C 1703FE           (          asm.asm):00836                 LBSR    EVAL                              ;EVALUATE OPERAND
255F E7C0             (          asm.asm):00837                 STB     ,U+                               ;SAVE DATA IN CODE
2561 A63F             (          asm.asm):00838                 LDA     -1,Y                              ;GET TERMINATING CHARACTER
2563 812C             (          asm.asm):00839                 CMPA    #','                              ;IS IT A COMMA
2565 27F5             (          asm.asm):00840                 BEQ     P2T14                             ;IF SO, GENERATE MORE
2567                  (          asm.asm):00841         T4E
2567 16FDF1           (          asm.asm):00842                 LBRA    GENLIS
                      (          asm.asm):00843         ;* 'FDB' DIRECTIVE
256A                  (          asm.asm):00844         P2T15
256A 1703F0           (          asm.asm):00845                 LBSR    EVAL                              ;EVALUATE OPERAND
256D EDC1             (          asm.asm):00846                 STD     ,U++                              ;SAVE CODE
256F A63F             (          asm.asm):00847                 LDA     -1,Y                              ;GET TERMINATING CHARACTER
2571 812C             (          asm.asm):00848                 CMPA    #','                              ;WAS THERE MORE
2573 27F5             (          asm.asm):00849                 BEQ     P2T15                             ;IF SO, GIVE IT TO HIM
2575 20F0             (          asm.asm):00850                 BRA     T4E
                      (          asm.asm):00851         ;* 'FCC' DIRECTIVE
2577                  (          asm.asm):00852         P2T16
2577 8D02             (          asm.asm):00853                 BSR     FCCCHR                            ;PUT IN STRING
2579 20EC             (          asm.asm):00854                 BRA     T4E                               ;AND PRODUCE LISTING
                      (          asm.asm):00855         ;* GENERATES FCC STRING
257B                  (          asm.asm):00856         FCCCHR
257B 170498           (          asm.asm):00857                 LBSR    TSTERM                            ;GET TERMINATOR
257E 810D             (          asm.asm):00858                 CMPA    #$0D                              ;CHECK FOR END OF LINE
2580 2711             (          asm.asm):00859                 BEQ     INVSTR                            ;STRING IS INVALID
2582 9706             (          asm.asm):00860                 STA     TEMP                              ;SAVE FOR LATER REFERENCE
2584                  (          asm.asm):00861         FCCM
2584 17048F           (          asm.asm):00862                 LBSR    TSTERM                            ;GET A CHARACTER
2587 810D             (          asm.asm):00863                 CMPA    #$0D                              ;END OF LINE
2589 2708             (          asm.asm):00864                 BEQ     INVSTR                            ;STRING IS INVALID
258B 9106             (          asm.asm):00865                 CMPA    TEMP                              ;IS THIS IT?
258D 2709             (          asm.asm):00866                 BEQ     FCCEND                            ;IF SO, WE ARE DONE
258F A7C0             (          asm.asm):00867                 STA     ,U+                               ;SAVE IN MEMORY
2591 20F1             (          asm.asm):00868                 BRA     FCCM                              ;KEEP MOVING THE STRING
2593                  (          asm.asm):00869         INVSTR
2593 8608             (          asm.asm):00870                 LDA     #8                                ;'STRING NOT PROPERLY DELIMITED'
2595 160495           (          asm.asm):00871                 LBRA    SETERR                            ;SET UP ERROR MESAGE
2598                  (          asm.asm):00872         FCCEND
2598 39               (          asm.asm):00873                 RTS     GO BACK
                      (          asm.asm):00874         ;* 'FCCZ' DIRECTIVE
2599                  (          asm.asm):00875         P2T17
2599 8DE0             (          asm.asm):00876                 BSR     FCCCHR                            ;CALCULATE STRING
259B 6FC0             (          asm.asm):00877                 CLR     ,U+                               ;AND APPEND A ZERO
259D 20C8             (          asm.asm):00878                 BRA     T4E                               ;AND GENERATE LISTING
                      (          asm.asm):00879         ;* SSR DIRECTIVE
259F                  (          asm.asm):00880         P2T18
259F A684             (          asm.asm):00881                 LDA     ,X                                ;GET OPCODE
25A1 A7C0             (          asm.asm):00882                 STA     ,U+                               ;SAVE IN CODE SPACE
25A3 1703B7           (          asm.asm):00883                 LBSR    EVAL                              ;GET OPERAND
25A6 E7C0             (          asm.asm):00884                 STB     ,U+                               ;SAVE IN OUTPUT CODE
25A8 20BD             (          asm.asm):00885                 BRA     T4E                               ;PRODUCE LISTING
                      (          asm.asm):00886         ;* 'SETDP' DIRECTIVE
25AA                  (          asm.asm):00887         P2T19
25AA 1703B0           (          asm.asm):00888                 LBSR    EVAL                              ;GET OPERAND VALUE
25AD DD0A             (          asm.asm):00889                 STD     CURDP                             ;SAVE CURRENT DIRECT PAGE
25AF 20B6             (          asm.asm):00890                 BRA     T4E
                      (          asm.asm):00891         ;* 'PAGE' DIRECTIVE
25B1                  (          asm.asm):00892         P2T20
25B1 0F12             (          asm.asm):00893                 CLR     PAGLIN                            ;FORCE PAGE EJECT
25B3 16FD24           (          asm.asm):00894                 LBRA    P2LIN                             ;AND RETURN FOR NEXT LINE
                      (          asm.asm):00895         ;* 'TITLE' DIRECTIVE
25B6                  (          asm.asm):00896         P2T21
25B6 8E4019           (          asm.asm):00897                 LDX     #TITLE                            ;POINT TO TITLE SPACE
25B9                  (          asm.asm):00898         TITL1
25B9 A6A0             (          asm.asm):00899                 LDA     ,Y+                               ;GET CHARACTER FROM SOURCE
25BB A780             (          asm.asm):00900                 STA     ,X+                               ;SAVE IN MEMORY
25BD 810D             (          asm.asm):00901                 CMPA    #$0D                              ;END OF LINE?
25BF 26F8             (          asm.asm):00902                 BNE     TITL1                             ;NO, KEEP GOING
25C1 16FD16           (          asm.asm):00903                 LBRA    P2LIN                             ;PROCESS NEXT LINE
                      (          asm.asm):00904         ;*
                      (          asm.asm):00905         ;* TERMINATION OF ASSEMBLER
                      (          asm.asm):00906         ;*
25C4                  (          asm.asm):00907         QUIT
25C4 7D3187           (          asm.asm):00908                 TST     QUIET
25C7 2710             (          asm.asm):00909                 BEQ     NOM2                              ;DONT SAY A WORD
25C9 DC02             (          asm.asm):00910                 LDD     ERRORS
25CB 3F               (          asm.asm):00911                 SWI
25CC 1A               (          asm.asm):00912                 FCB     26                                ;OUTPUT NUMBER
25CD 3F               (          asm.asm):00913                 SWI
25CE 19               (          asm.asm):00914                 FCB     25
25CF 206572726F722873 (          asm.asm):00915                 FCC     ' error(s)'
     29
25D8 00               (          asm.asm):00916                 FCB     00
25D9                  (          asm.asm):00917         NOM2
25D9 860D             (          asm.asm):00918                 LDA     #$0D                              ;NEW LINE
25DB 1704B0           (          asm.asm):00919                 LBSR    WRICHR                            ;OUTPUT
25DE 7D3183           (          asm.asm):00920                 TST     TERM                              ;TERMINAL OUTPUT?
25E1 2713             (          asm.asm):00921                 BEQ     NOSUM                             ;IF SO, DONT GENERATE SUMMARY
25E3 8E2B58           (          asm.asm):00922                 LDX     #ERRSUM                           ;POINT TO MESSAGE
25E6 170488           (          asm.asm):00923                 LBSR    WRIMSG                            ;OUTPUT
25E9 DC02             (          asm.asm):00924                 LDD     ERRORS                            ;GET ERROR COUNT
25EB 1704C7           (          asm.asm):00925                 LBSR    WRIDEC                            ;OUTPUT
25EE 860D             (          asm.asm):00926                 LDA     #$0D                              ;CARRIAGE RETURN
25F0 17049B           (          asm.asm):00927                 LBSR    WRICHR                            ;OUTPUT
25F3 170498           (          asm.asm):00928                 LBSR    WRICHR                            ;OUTPUT
                      (          asm.asm):00929         ;* DISPLAY SYMBOL TABLE
25F6                  (          asm.asm):00930         NOSUM
25F6 7D3186           (          asm.asm):00931                 TST     SYM                               ;DO WE DISPLAY SYMBOL TABLE?
25F9 2660             (          asm.asm):00932                 BNE     CLLST                             ;NO, DONT BOTHER
25FB 0F12             (          asm.asm):00933                 CLR     PAGLIN                            ;INSURE WE GET NEW PAGE
25FD 1704F4           (          asm.asm):00934                 LBSR    DSPTTL                            ;DISPLAY PAGE HEADER
2600 0A15             (          asm.asm):00935                 DEC     EMSG                              ;INSURE WE OUTPUT
2602 8E2B67           (          asm.asm):00936                 LDX     #SYMMSG                           ;POINT TO MESSAGE
2605 170469           (          asm.asm):00937                 LBSR    WRIMSG                            ;OUTPUT
2608 8E4777           (          asm.asm):00938                 LDX     #SYMTAB                           ;POINT TO SYMBOL TABLE
260B                  (          asm.asm):00939         NEWL
260B 860D             (          asm.asm):00940                 LDA     #$0D                              ;GET CARRIAGE RETURN
260D 17047E           (          asm.asm):00941                 LBSR    WRICHR                            ;OUTPUT
2610 8608             (          asm.asm):00942                 LDA     #8                                ;DISPLAY 6/LINE
2612 7D3183           (          asm.asm):00943                 TST     TERM                              ;IS THIS TO TERMINAL?
2615 2602             (          asm.asm):00944                 BNE     DSPX1                             ;NO, ITS OK
2617 8605             (          asm.asm):00945                 LDA     #5                                ;CHANGE TO 5/LINE
2619                  (          asm.asm):00946         DSPX1
2619 9706             (          asm.asm):00947                 STA     TEMP                              ;SAVE COUNTER
261B                  (          asm.asm):00948         DSPSY
261B 6D84             (          asm.asm):00949                 TST     ,X                                ;END OF TABLE?
261D 2737             (          asm.asm):00950                 BEQ     ENDSY                             ;IF SO, QUIT NOW
261F C608             (          asm.asm):00951                 LDB     #8                                ;MAX OF 8 CHARS
2621                  (          asm.asm):00952         OSYM
2621 A684             (          asm.asm):00953                 LDA     ,X                                ;GET CHARACTER
2623 847F             (          asm.asm):00954                 ANDA    #$7F                              ;REMOVE EXTRA BIT
2625 170466           (          asm.asm):00955                 LBSR    WRICHR                            ;OUTPUT
2628 5A               (          asm.asm):00956                 DECB    REDUCE COUNT
2629 270C             (          asm.asm):00957                 BEQ     SKRST                             ;IF END, SKIP THE REST
262B A680             (          asm.asm):00958                 LDA     ,X+                               ;GET NEXT CHARACTER
262D 2AF2             (          asm.asm):00959                 BPL     OSYM                              ;KEEP GOING
262F                  (          asm.asm):00960         FILSP
262F 170437           (          asm.asm):00961                 LBSR    SPACE                             ;DISPLAY A SPACE
2632 5A               (          asm.asm):00962                 DECB    REDUCE COUNT
2633 2AFA             (          asm.asm):00963                 BPL     FILSP                             ;CONTINUE
2635 2009             (          asm.asm):00964                 BRA     OADR                              ;OUTPUT ADDRESS
2637                  (          asm.asm):00965         SKRST
2637 6D80             (          asm.asm):00966                 TST     ,X+                               ;SKIP REMAINING CHARACTERS
2639 2AFC             (          asm.asm):00967                 BPL     SKRST                             ;TILL WE HIT END
263B 862B             (          asm.asm):00968                 LDA     #'+'                              ;INDICATE THERE IS MORE
263D 17044E           (          asm.asm):00969                 LBSR    WRICHR                            ;OUTPUT
2640                  (          asm.asm):00970         OADR
2640 A680             (          asm.asm):00971                 LDA     ,X+                               ;GET FIRST BYTE
2642 170435           (          asm.asm):00972                 LBSR    WRIBYT                            ;OUTPUT
2645 A680             (          asm.asm):00973                 LDA     ,X+                               ;GET NEXT BYTE
2647 170430           (          asm.asm):00974                 LBSR    WRIBYT                            ;OUTPUT
264A 17041C           (          asm.asm):00975                 LBSR    SPACE                             ;DISPLAY SPACE
264D 170419           (          asm.asm):00976                 LBSR    SPACE                             ;AND ANOTHER
2650 0A06             (          asm.asm):00977                 DEC     TEMP                              ;REDUCE COUNT
2652 26C7             (          asm.asm):00978                 BNE     DSPSY                             ;GET NEXT
2654 20B5             (          asm.asm):00979                 BRA     NEWL                              ;TRY A NEW LINE
2656                  (          asm.asm):00980         ENDSY
2656 860D             (          asm.asm):00981                 LDA     #$0D                              ;GET CARRIAGE RETURN
2658 170433           (          asm.asm):00982                 LBSR    WRICHR                            ;OUTPUT
                      (          asm.asm):00983         ;* CLOSE LISTING FILE
265B                  (          asm.asm):00984         CLLST
265B 7D3183           (          asm.asm):00985                 TST     TERM                              ;ARE WE LISTING?
265E 2705             (          asm.asm):00986                 BEQ     CLOBJ                             ;NO NEED TO CLOSE
2660 CE4363           (          asm.asm):00987                 LDU     #LSTFIL
2663 3F               (          asm.asm):00988                 SWI
2664 39               (          asm.asm):00989                 FCB     57
                      (          asm.asm):00990         ;* CLOSE OBJECT FILE
2665                  (          asm.asm):00991         CLOBJ
2665 86CF             (          asm.asm):00992                 LDA     #$CF                              ;GET FLAG CHARACTER
2667 17047D           (          asm.asm):00993                 LBSR    WRIOBJ                            ;OUTPUT
266A 4F               (          asm.asm):00994                 CLRA    GET EOF MARKER
266B 170479           (          asm.asm):00995                 LBSR    WRIOBJ                            ;OUTPUT TO FILE
266E CE456D           (          asm.asm):00996                 LDU     #OBJFIL
2671 3F               (          asm.asm):00997                 SWI
2672 39               (          asm.asm):00998                 FCB     57                                ;CLOSE IT
2673 DC02             (          asm.asm):00999                 LDD     ERRORS                            ;WERE THERE ANY ERRORS?
2675 2702             (          asm.asm):01000                 BEQ     ABORT                             ;NO, WE WERE OK
2677 8664             (          asm.asm):01001                 LDA     #100                              ;SET RETURN CODE
                      (          asm.asm):01002         ;*
                      (          asm.asm):01003         ;* ABORT ASSEMBLER, RETURN TO OS
                      (          asm.asm):01004         ;*
2679                  (          asm.asm):01005         ABORT
2679 3F               (          asm.asm):01006                 SWI
267A 00               (          asm.asm):01007                 FCB     0                                 ;BACK TO OS
                      (          asm.asm):01008         ;*
                      (          asm.asm):01009         ;* LOOK UP INSTRUCTIONS POINTED TO BY THE Y REGISTER IN THE INSTRUCTION TABLE
                      (          asm.asm):01010         ;* ON EXIT, ACCA CONTAINS TYPE OF INSTRUCTION, AND X POINTS TO FOUR BYTE OPCODE
                      (          asm.asm):01011         ;* TABLE IN RAM
                      (          asm.asm):01012         ;*
267B                  (          asm.asm):01013         LOCINS
267B 8E2C58           (          asm.asm):01014                 LDX     #INSTAB                           ;POINT TO INSTRUCTON TABLE
267E 17002B           (          asm.asm):01015                 LBSR    SKIP                              ;SKIP TO INSTRUCTION
2681                  (          asm.asm):01016         LOC1
2681 3420             (          asm.asm):01017                 PSHS    Y                                 ;SAVE POINTER TO INSTRUCTION
2683                  (          asm.asm):01018         LOC2
2683 170390           (          asm.asm):01019                 LBSR    TSTERM                            ;GET CHARACTER FROM LINE
2686 271A             (          asm.asm):01020                 BEQ     IMATCH                            ;WE MAY HAVE FOUND IT
2688 A180             (          asm.asm):01021                 CMPA    ,X+                               ;IS THIS IT?
268A 27F7             (          asm.asm):01022                 BEQ     LOC2                              ;LOOKS LIKE IT
268C                  (          asm.asm):01023         LOC4
268C 301F             (          asm.asm):01024                 LEAX    -1,X                              ;BACKUP INCASE WE ARE AT END
268E                  (          asm.asm):01025         LOC3
268E A680             (          asm.asm):01026                 LDA     ,X+                               ;GET VALUE
2690 2AFC             (          asm.asm):01027                 BPL     LOC3                              ;SKIP TO NEXT
2692 3004             (          asm.asm):01028                 LEAX    4,X                               ;SKIP TO NEXT INSTRUNCTION
2694 3520             (          asm.asm):01029                 PULS    Y                                 ;RESTORE REGISTER POINTER
2696 6D84             (          asm.asm):01030                 TST     ,X                                ;ARE WE AT END OF TABLE?
2698 26E7             (          asm.asm):01031                 BNE     LOC1                              ;TRY THIS ENTRY
269A 8601             (          asm.asm):01032                 LDA     #1                                ;'UNKNOWN OPCODE'
269C 17038E           (          asm.asm):01033                 LBSR    SETERR                            ;INDICATE WE HAVE AN ERROR
269F C601             (          asm.asm):01034                 LDB     #1                                ;INDICATE TYPE ONE
26A1 39               (          asm.asm):01035                 RTS
26A2                  (          asm.asm):01036         IMATCH
26A2 E680             (          asm.asm):01037                 LDB     ,X+                               ;IS THIS IT
26A4 2AE6             (          asm.asm):01038                 BPL     LOC4                              ;NO, KEEP GOING
26A6 3262             (          asm.asm):01039                 LEAS    2,S                               ;REMOVE Y REGISTER FROM STACK
26A8 C47F             (          asm.asm):01040                 ANDB    #$7F                              ;REMOVE HIGH BIT FLAG
26AA D718             (          asm.asm):01041                 STB     ITYPE                             ;SAVE INSTRUCTION TYPE
                      (          asm.asm):01042         ;*
                      (          asm.asm):01043         ;* SKIPS TO NEXT OPERAND
                      (          asm.asm):01044         ;*
26AC                  (          asm.asm):01045         SKIP
26AC A6A0             (          asm.asm):01046                 LDA     ,Y+                               ;GET CHARACTER FROM LINE
26AE 8120             (          asm.asm):01047                 CMPA    #' '                              ;SPACE?
26B0 27FA             (          asm.asm):01048                 BEQ     SKIP                              ;IF SO, KEEP GOING
26B2 313F             (          asm.asm):01049                 LEAY    -1,Y                              ;BACKUP TO OPERAND
26B4 39               (          asm.asm):01050                 RTS
                      (          asm.asm):01051         ;*
                      (          asm.asm):01052         ;* LOOK UP SYMBOL VALUE
                      (          asm.asm):01053         ;*
26B5                  (          asm.asm):01054         LOCSYM
26B5 8E4777           (          asm.asm):01055                 LDX     #SYMTAB                           ;POINT TO INSTRUCTON TABLE
26B8                  (          asm.asm):01056         LOCSY1
26B8 3420             (          asm.asm):01057                 PSHS    Y                                 ;SAVE POINTER TO INSTRUCTION
26BA                  (          asm.asm):01058         SYM2
26BA 170324           (          asm.asm):01059                 LBSR    TSTEXP                            ;GET CHARACTER FROM LINE
26BD A180             (          asm.asm):01060                 CMPA    ,X+                               ;IS THIS IT?
26BF 27F9             (          asm.asm):01061                 BEQ     SYM2                              ;LOOKS LIKE IT
26C1 8A80             (          asm.asm):01062                 ORA     #$80                              ;SET HIGH BIT
26C3 A11F             (          asm.asm):01063                 CMPA    -1,X                              ;IS THIS IT?
26C5 2723             (          asm.asm):01064                 BEQ     SMATCH                            ;SKIP TO END
26C7 301F             (          asm.asm):01065                 LEAX    -1,X                              ;BACKUP TO START
26C9 6D84             (          asm.asm):01066                 TST     ,X                                ;ARE WE AT END?
26CB 2712             (          asm.asm):01067                 BEQ     NOSY1                             ;IF SO, WE DIDNT FIND IT
26CD                  (          asm.asm):01068         SYM3
26CD A680             (          asm.asm):01069                 LDA     ,X+                               ;GET VALUE
26CF 2AFC             (          asm.asm):01070                 BPL     SYM3                              ;SKIP TO NEXT
26D1                  (          asm.asm):01071         SYOFF
26D1 3002             (          asm.asm):01072                 LEAX    2,X                               ;SKIP TO NEXT LABLE
26D3 10AEE4           (          asm.asm):01073                 LDY     ,S                                ;RESTORE REGISTER POINTER
26D6 6D84             (          asm.asm):01074                 TST     ,X                                ;ARE WE AT END OF TABLE?
26D8 26E0             (          asm.asm):01075                 BNE     SYM2                              ;TRY THIS ENTRY
26DA                  (          asm.asm):01076         NS
26DA 170304           (          asm.asm):01077                 LBSR    TSTEXP                            ;FIND TERMINATOR
26DD 26FB             (          asm.asm):01078                 BNE     NS                                ;KEEP LOOKING
26DF                  (          asm.asm):01079         NOSY1
26DF 8605             (          asm.asm):01080                 LDA     #5                                ;'UNDEFINED SYMBOL'
26E1 170349           (          asm.asm):01081                 LBSR    SETERR                            ;INDICATE ERROR MESSAGE
26E4 8E7FFF           (          asm.asm):01082                 LDX     #$7FFF                            ;INSURE MAX. OFFSET
26E7 3262             (          asm.asm):01083                 LEAS    2,S                               ;CLEANUP SYACK
26E9 39               (          asm.asm):01084                 RTS
26EA                  (          asm.asm):01085         SMATCH
26EA 1702F4           (          asm.asm):01086                 LBSR    TSTEXP                            ;GET TERMINATION CHARACTER
26ED 26E2             (          asm.asm):01087                 BNE     SYOFF                             ;INDICATE SYMBOL NOT FOUND
26EF 9F06             (          asm.asm):01088                 STX     TEMP                              ;SAVE SO WE CAN UPDATE
26F1 AE84             (          asm.asm):01089                 LDX     ,X                                ;GET SYMBOL VALUE
26F3 3262             (          asm.asm):01090                 LEAS    2,S                               ;REMOVE Y REGISTER VALUE FROM STACK
26F5 39               (          asm.asm):01091                 RTS     KEEP GOING
                      (          asm.asm):01092         ;*
                      (          asm.asm):01093         ;* PROCESS MEMORY OPERANDS AND DETERMINE REQUIRED POSTBYTE, OPERAND BYTES,
                      (          asm.asm):01094         ;* AND LENGTH OF OPERAND
                      (          asm.asm):01095         ;*
                      (          asm.asm):01096         ;* ON EXIT, ACC A = THE TYPE OF OPERAND: 0= IMMEDIATE VALUE
                      (          asm.asm):01097         ;*                                       1= DIRECT PAGE ADDRESSING
                      (          asm.asm):01098         ;*                                       2= POSTBYTE MEMORY REFERENCE
                      (          asm.asm):01099         ;*                                       3= EXTENDED ADDRESSING
                      (          asm.asm):01100         ;*
                      (          asm.asm):01101         ;* ACC B CONTAINS THE LENGTH (NUMBER OF BYTES) OF ALL OPERAND BYTES TO
                      (          asm.asm):01102         ;* THE INSTRUCTION
                      (          asm.asm):01103         ;*
                      (          asm.asm):01104         ;* THE SIXTEEN BIT MEMORY LOCATION 'VALUE' CONTAINS THE OFFSET OR ADDRESS
                      (          asm.asm):01105         ;* VALUE TO BE USED FOR INSTRUCTIONS REQUIRING DATA BYTES. FOR INSTRUCTIONS
                      (          asm.asm):01106         ;* REQUIRING ONLY AN EIGHT BIT OFFSET OR DATA BYTE, USE THE LOWER EIGHT BITS
                      (          asm.asm):01107         ;*
                      (          asm.asm):01108         ;* THE EIGHT BIT MEMORY LOCATION 'POST' CONTAINS THE POSTBYTE TO BE USED
                      (          asm.asm):01109         ;* FOR INSTRUCTIONS REQUIRING IT
                      (          asm.asm):01110         ;*
26F6                  (          asm.asm):01111         MEMOP
26F6 A6A0             (          asm.asm):01112                 LDA     ,Y+                               ;GET OPERAND TYPE
                      (          asm.asm):01113         ;* IMMEDIATE ADDRESSING
26F8 8123             (          asm.asm):01114                 CMPA    #'#'                              ;TEST FOR IMMEDIATE
26FA 2609             (          asm.asm):01115                 BNE     NOIMM                             ;NOT IMMEDIATE
26FC 17025E           (          asm.asm):01116                 LBSR    EVAL                              ;EVALUATE OPERAND
26FF DD13             (          asm.asm):01117                 STD     VALUE                             ;SAVE FOR LATER
2701 CC0002           (          asm.asm):01118                 LDD     #$0002                            ;LENGTH OF POSTBYTE
2704 39               (          asm.asm):01119                 RTS
                      (          asm.asm):01120         ;* EXTENDED ADDRESSING
2705                  (          asm.asm):01121         NOIMM
2705 813E             (          asm.asm):01122                 CMPA    #'>'                              ;EXTENDED ADDRESSING?
2707 2609             (          asm.asm):01123                 BNE     NOEXT                             ;NOT EXTENDED
2709 170251           (          asm.asm):01124                 LBSR    EVAL                              ;EVALUATE OPERAND
270C DD13             (          asm.asm):01125                 STD     VALUE                             ;SAVE IT
270E CC0302           (          asm.asm):01126                 LDD     #$0302                            ;INDICATE THREE BYTE OPERAND, + TYPE 1
2711 39               (          asm.asm):01127                 RTS
                      (          asm.asm):01128         ;* DIRECT PAGE ADDRESSING
2712                  (          asm.asm):01129         NOEXT
2712 813C             (          asm.asm):01130                 CMPA    #'<'                              ;DIRECT PAGE ADDRESSING?
2714 2609             (          asm.asm):01131                 BNE     NODIR                             ;NOT DIRECT PAGE ADDRESSING
2716 170244           (          asm.asm):01132                 LBSR    EVAL                              ;EVALUATE OPERAND
2719 DD13             (          asm.asm):01133                 STD     VALUE                             ;SAVE VALUE
271B CC0101           (          asm.asm):01134                 LDD     #$0101                            ;INDICATE DIRECT PAGE LENGTH AND TYPE
271E 39               (          asm.asm):01135                 RTS
                      (          asm.asm):01136         ;* INDIRECT ADDRESSING
271F                  (          asm.asm):01137         NODIR
271F 815B             (          asm.asm):01138                 CMPA    #'['                              ;INDIRECT?
2721 2610             (          asm.asm):01139                 BNE     NOTIND                            ;NOT INDIRECT
2723 0A17             (          asm.asm):01140                 DEC     INDFLG                            ;INDICATE WE ARE ON SECOND ITERATION
2725 8D0E             (          asm.asm):01141                 BSR     EVLIND                            ;EVALUATE INDEXED OPERANDS
2727 0F17             (          asm.asm):01142                 CLR     INDFLG                            ;RESET FLAG
2729 3402             (          asm.asm):01143                 PSHS    A                                 ;SAVE TYPE
272B 9616             (          asm.asm):01144                 LDA     POST                              ;GET POSTBYTE
272D 8A10             (          asm.asm):01145                 ORA     #$10                              ;SET INDIRECT BIT
272F 9716             (          asm.asm):01146                 STA     POST                              ;RESAVE POSTBYTE
2731 3582             (          asm.asm):01147                 PULS    A,PC                              ;RESTORE TYPE AND RETURN
                      (          asm.asm):01148         ;* ACCUMULATOR OFFSET FROM REGISTER
2733                  (          asm.asm):01149         NOTIND
2733 313F             (          asm.asm):01150                 LEAY    -1,Y                              ;BACKUP TO OPERAND
2735                  (          asm.asm):01151         EVLIND
2735 ECA4             (          asm.asm):01152                 LDD     ,Y                                ;GET FIRST TWO CHARACTERS?
2737 1083412C         (          asm.asm):01153                 CMPD    #$412C                            ;'A,' A ACCUMULATOR OFFSET?
273B 2712             (          asm.asm):01154                 BEQ     ACCAOF                            ;YES?
273D 1083422C         (          asm.asm):01155                 CMPD    #$422C                            ;'B,' B ACCUMULATOR OFFSET?
2741 2710             (          asm.asm):01156                 BEQ     ACCBOF                            ;YES
2743 1083442C         (          asm.asm):01157                 CMPD    #$442C                            ;'D,' D ACCUMULATOR OFFSET?
2747 102600B4         (          asm.asm):01158                 LBNE    NOACC                             ;NOT AN ACCUMULATOR OFFSET
274B 868B             (          asm.asm):01159                 LDA     #$8B                              ;POSTBYTE
274D 2006             (          asm.asm):01160                 BRA     PRCACC                            ;PROCESS
274F                  (          asm.asm):01161         ACCAOF
274F 8686             (          asm.asm):01162                 LDA     #$86                              ;POSTBYTE OPERAND
2751 2002             (          asm.asm):01163                 BRA     PRCACC                            ;PROCESS FOR ACCUMULATOR OFFSET
2753                  (          asm.asm):01164         ACCBOF
2753 8685             (          asm.asm):01165                 LDA     #$85                              ;POSTBYTE CODE
2755                  (          asm.asm):01166         PRCACC
2755 9716             (          asm.asm):01167                 STA     POST                              ;SAVE POSTBYTE
2757 3122             (          asm.asm):01168                 LEAY    2,Y                               ;SKIP ACC AND COMMA
2759                  (          asm.asm):01169         INSREG
2759 8D04             (          asm.asm):01170                 BSR     ADDREG                            ;ADD IN REGISTER BITS
275B CC0201           (          asm.asm):01171                 LDD     #$0201                            ;INDICATE TYPE AND LENGTH
275E 39               (          asm.asm):01172                 RTS
275F                  (          asm.asm):01173         ADDREG
275F 1702B4           (          asm.asm):01174                 LBSR    TSTERM                            ;GET CHARACTER FROM SOURCE
2762 812D             (          asm.asm):01175                 CMPA    #'-'                              ;NOT AUTO DECREMENT
2764 2610             (          asm.asm):01176                 BNE     NOAUT                             ;NO AUTO INC/DEC
2766 C682             (          asm.asm):01177                 LDB     #$82                              ;AUTO DEC POSTBYTE
2768 1702AB           (          asm.asm):01178                 LBSR    TSTERM                            ;TRY AGAIN
276B 812D             (          asm.asm):01179                 CMPA    #'-'                              ;IS IT AUTO DEC?
276D 2605             (          asm.asm):01180                 BNE     SETRGB                            ;NO, WE ARE OK
276F C683             (          asm.asm):01181                 LDB     #$83                              ;CHANGE OPCODE
2771 1702A2           (          asm.asm):01182                 LBSR    TSTERM                            ;GET REGISTER BYTE
2774                  (          asm.asm):01183         SETRGB
2774 D716             (          asm.asm):01184                 STB     POST                              ;SET NEW POSTBYTE
2776                  (          asm.asm):01185         NOAUT
2776 5F               (          asm.asm):01186                 CLRB    INDICATE X REGISTER
2777 8158             (          asm.asm):01187                 CMPA    #'X'                              ;IS IT X?
2779 270F             (          asm.asm):01188                 BEQ     ADDOUT                            ;IF SO, WE ARE THERE
277B 5C               (          asm.asm):01189                 INCB    INDICATE Y REGISTER
277C 8159             (          asm.asm):01190                 CMPA    #'Y'                              ;ARE WE THERE?
277E 270A             (          asm.asm):01191                 BEQ     ADDOUT                            ;IF SO, SKIP IT
2780 5C               (          asm.asm):01192                 INCB    ADVANCE
2781 8155             (          asm.asm):01193                 CMPA    #'U'                              ;USER STACK?
2783 2705             (          asm.asm):01194                 BEQ     ADDOUT                            ;INDICATE WE ARE THERE
2785 5C               (          asm.asm):01195                 INCB    ADVANCE
2786 8153             (          asm.asm):01196                 CMPA    #'S'                              ;SYSTEM STACK POINTER?
2788 2624             (          asm.asm):01197                 BNE     PCREL                             ;COULD BE PC RELATIVE
278A                  (          asm.asm):01198         ADDOUT
278A 8620             (          asm.asm):01199                 LDA     #32                               ;OFFSET FIVE BITS
278C 3D               (          asm.asm):01200                 MUL     MOVE IT OVER
278D DA16             (          asm.asm):01201                 ORB     POST                              ;ADD IN POSTBYTE BITS
278F D716             (          asm.asm):01202                 STB     POST                              ;RESAVE
2791 170282           (          asm.asm):01203                 LBSR    TSTERM                            ;GET FOLLOWING CHARACTER
2794 812B             (          asm.asm):01204                 CMPA    #'+'                              ;AUTOINC?
2796 2615             (          asm.asm):01205                 BNE     NOAINC                            ;NO, TRY AUTODEC
2798 9616             (          asm.asm):01206                 LDA     POST                              ;GET POST BYTE BACK
279A 8460             (          asm.asm):01207                 ANDA    #$60                              ;REMOVE BITS WE JUST SET
279C 3402             (          asm.asm):01208                 PSHS    A                                 ;SAVE BITS
279E C680             (          asm.asm):01209                 LDB     #$80                              ;INC BY ONE
27A0 170273           (          asm.asm):01210                 LBSR    TSTERM                            ;GET NEXT CHARACTER
27A3 812B             (          asm.asm):01211                 CMPA    #'+'                              ;TRY FOR AUTO TWICE
27A5 2602             (          asm.asm):01212                 BNE     SAVPOS                            ;SET BITS
27A7 C681             (          asm.asm):01213                 LDB     #$81                              ;NEW POSTBYTE
27A9                  (          asm.asm):01214         SAVPOS
27A9 EAE0             (          asm.asm):01215                 ORB     ,S+                               ;SET REGISTER BITS
27AB D716             (          asm.asm):01216                 STB     POST                              ;SAVE NEW POSTBYTE
27AD                  (          asm.asm):01217         NOAINC
27AD 39               (          asm.asm):01218                 RTS
                      (          asm.asm):01219         ;* TEST FOR PC RELATIVE OFFSETS
27AE                  (          asm.asm):01220         PCREL
27AE 8150             (          asm.asm):01221                 CMPA    #'P'                              ;TEST FOR 'PCR'
27B0 2648             (          asm.asm):01222                 BNE     REGERR                            ;NO, INDICATE ERROR
27B2 DC13             (          asm.asm):01223                 LDD     VALUE                             ;GET VALUE
27B4 9308             (          asm.asm):01224                 SUBD    CURPC                             ;SUBTRACT CURRENT PROGRAM COUNTER
27B6 830003           (          asm.asm):01225                 SUBD    #3                                ;CONVERT TO OFFSET FOR EIGHT BIT
27B9 3402             (          asm.asm):01226                 PSHS    A                                 ;SAVE VALUE
27BB 9618             (          asm.asm):01227                 LDA     ITYPE                             ;GET INSTRUCTION TYPE
27BD 8104             (          asm.asm):01228                 CMPA    #4                                ;IS IT SPECIAL CASE
27BF 250B             (          asm.asm):01229                 BLO     CALOFF                            ;NO, ITS OK
27C1 8105             (          asm.asm):01230                 CMPA    #5                                ;HOW ABOUT OTHER SPECIAL CASE
27C3 2207             (          asm.asm):01231                 BHI     CALOFF                            ;NO, ITS ALSO OK
27C5 A6E4             (          asm.asm):01232                 LDA     ,S                                ;GET VALUE BACK
27C7 830001           (          asm.asm):01233                 SUBD    #1                                ;CONVERT TO EXTRA BYTE OF OFFSET
27CA A7E4             (          asm.asm):01234                 STA     ,S                                ;RESAVE
27CC                  (          asm.asm):01235         CALOFF
27CC 3502             (          asm.asm):01236                 PULS    A                                 ;RESTORE VALUE
27CE 7D3184           (          asm.asm):01237                 TST     DEBUG                             ;IS THIS DEBUG MODE?
27D1 270C             (          asm.asm):01238                 BEQ     OFF16                             ;IF SO, USE 16 BIT OFFSET
27D3 10830080         (          asm.asm):01239                 CMPD    #128                              ;TEST FOR 8 BIT OFFSET
27D7 2515             (          asm.asm):01240                 BLO     OFF8                              ;YES, USE EIGHT BIT OFFSET
27D9 1083FF80         (          asm.asm):01241                 CMPD    #-128                             ;TEST FOR UNDER 8 BIT OFFSET
27DD 240F             (          asm.asm):01242                 BHS     OFF8                              ;YES, USE EIGHT BIT
27DF                  (          asm.asm):01243         OFF16
27DF 830001           (          asm.asm):01244                 SUBD    #1                                ;CONVERT FOR 16 BIT OFFSET
27E2 DD13             (          asm.asm):01245                 STD     VALUE                             ;SET OFFSET VALUE
27E4 868D             (          asm.asm):01246                 LDA     #$8D                              ;POSTBYTE
27E6 9716             (          asm.asm):01247                 STA     POST                              ;SAVE POSTBYTE
27E8 3262             (          asm.asm):01248                 LEAS    2,S                               ;SKIP SAVE PROGRAM COUNTER
27EA CC0203           (          asm.asm):01249                 LDD     #$0203                            ;THREE BYTES OF OPERAND
27ED 39               (          asm.asm):01250                 RTS
27EE                  (          asm.asm):01251         OFF8
27EE DD13             (          asm.asm):01252                 STD     VALUE                             ;SET OFFSET VALUE
27F0 868C             (          asm.asm):01253                 LDA     #$8C                              ;POSTBYTE
27F2 9716             (          asm.asm):01254                 STA     POST                              ;SAVE POSTBYTE VALUE
27F4 3262             (          asm.asm):01255                 LEAS    2,S                               ;SKIP SAVED PROGRAM COUNTER
27F6 CC0202           (          asm.asm):01256                 LDD     #$0202                            ;TWO BYTES OF OPERANDS
27F9 39               (          asm.asm):01257                 RTS
27FA                  (          asm.asm):01258         REGERR
27FA 8604             (          asm.asm):01259                 LDA     #4                                ;'INVALID REGISTER SPECIFICATION'
27FC 16022E           (          asm.asm):01260                 LBRA    SETERR                            ;INDICATE AN ERROR
                      (          asm.asm):01261         ;* CONSTANT OFFSET FROM REGISTER
27FF                  (          asm.asm):01262         NOACC
27FF 812C             (          asm.asm):01263                 CMPA    #','                              ;NO OFFSET?
2801 2609             (          asm.asm):01264                 BNE     OFFVAL                            ;NO, THERE IS AN OFFSET
2803 8684             (          asm.asm):01265                 LDA     #$84                              ;POSTBYTE FOR NO OFFSET
2805 9716             (          asm.asm):01266                 STA     POST                              ;SAVE
2807 3121             (          asm.asm):01267                 LEAY    1,Y                               ;GET REGISTER VALUE
2809 16FF4D           (          asm.asm):01268                 LBRA    INSREG                            ;INSERT REGISTER VALUE
280C                  (          asm.asm):01269         OFFVAL
280C 17014E           (          asm.asm):01270                 LBSR    EVAL                              ;EVALUATE OPERAND VALUE
280F DD13             (          asm.asm):01271                 STD     VALUE                             ;SAVE VALUE FOR LATER
2811 A63F             (          asm.asm):01272                 LDA     -1,Y                              ;GET TERMINATING CHARACTER
2813 812C             (          asm.asm):01273                 CMPA    #','                              ;ARE WE OFF REGISTER?
2815 271F             (          asm.asm):01274                 BEQ     BIT5                              ;YES, USE REGISTER DISPLACEMENT
2817 868F             (          asm.asm):01275                 LDA     #$8F                              ;GENERATE EXTENDED INDIRECT POSTBYTE
2819 9716             (          asm.asm):01276                 STA     POST                              ;SET POSTBYTE
281B 0D17             (          asm.asm):01277                 TST     INDFLG                            ;ARE WE INDIRECT?
281D 2653             (          asm.asm):01278                 BNE     BITEXT                            ;YES, SAVE EXTENDED POSTBYTE
                      (          asm.asm):01279         ;* NO REGISTER, AND NO INDIRECT... USE EXTENDED OR DP
281F 7D3184           (          asm.asm):01280                 TST     DEBUG                             ;ARE WE IN DEBUG MODE?
2822 270E             (          asm.asm):01281                 BEQ     USEXT                             ;IF SO, USE EXTENDED
2824 0D0A             (          asm.asm):01282                 TST     CURDP                             ;IS DIRECT PAGE SET?
2826 260A             (          asm.asm):01283                 BNE     USEXT                             ;NO, USE EXTENDED
2828 9613             (          asm.asm):01284                 LDA     VALUE                             ;GET HIGH BYTE
282A 910B             (          asm.asm):01285                 CMPA    CURDP+1                           ;IS ADDRESS IN DP SEGMENT?
282C 2604             (          asm.asm):01286                 BNE     USEXT                             ;NO, USE EXTENDED
282E CC0101           (          asm.asm):01287                 LDD     #$0101                            ;INDICATE DIRECT PAGE ADDRESSING
2831 39               (          asm.asm):01288                 RTS
2832                  (          asm.asm):01289         USEXT
2832 CC0302           (          asm.asm):01290                 LDD     #$0302                            ;INDICATE EXTENDED ADDRESSING
2835 39               (          asm.asm):01291                 RTS
2836                  (          asm.asm):01292         BIT5
2836 DC13             (          asm.asm):01293                 LDD     VALUE                             ;RESTORE VALUE
2838 7D3184           (          asm.asm):01294                 TST     DEBUG                             ;ARE WE DEBUGGING?
283B 272E             (          asm.asm):01295                 BEQ     BIT16                             ;IF SO, USE 16 BIT OFFSET
283D 0D17             (          asm.asm):01296                 TST     INDFLG                            ;ARE WE INDIRECT?
283F 2613             (          asm.asm):01297                 BNE     BIT8                              ;IF SO, DONT USE 5 BIT INDEX
2841 10830010         (          asm.asm):01298                 CMPD    #16                               ;ARE WE OVER FIVE BITS
2845 2C0D             (          asm.asm):01299                 BGE     BIT8                              ;YES, TRY EIGHTBIT
2847 1083FFF0         (          asm.asm):01300                 CMPD    #-16                              ;ARE WE UNDER FIVE BITS?
284B 2D07             (          asm.asm):01301                 BLT     BIT8                              ;IF SO, TRY FOR EIGHT BIT OFFSET
284D C41F             (          asm.asm):01302                 ANDB    #$1F                              ;GET FIVE BIT VALUE FOR POSTBYTE
284F D716             (          asm.asm):01303                 STB     POST                              ;SET UP POSTBYTE
2851 16FF05           (          asm.asm):01304                 LBRA    INSREG
2854                  (          asm.asm):01305         BIT8
2854 10830080         (          asm.asm):01306                 CMPD    #128                              ;ARE WE OVER 8 BITS?
2858 2C11             (          asm.asm):01307                 BGE     BIT16                             ;IF SO, GO WITH 16 BITS
285A 1083FF80         (          asm.asm):01308                 CMPD    #-128                             ;ARE WE UNDER 8 BITS
285E 2D0B             (          asm.asm):01309                 BLT     BIT16                             ;IF SO, GO WITH 16 BITS
2860 8688             (          asm.asm):01310                 LDA     #$88                              ;GET POSTBYTE FOR EIGHT BITS
2862 9716             (          asm.asm):01311                 STA     POST                              ;SAVE IN MEMORY
2864 17FEF8           (          asm.asm):01312                 LBSR    ADDREG                            ;INSERT REGISTER VALUE
2867 CC0202           (          asm.asm):01313                 LDD     #$0202                            ;INDICATE MEMORY REFERENCE
286A 39               (          asm.asm):01314                 RTS
286B                  (          asm.asm):01315         BIT16
286B 8689             (          asm.asm):01316                 LDA     #$89                              ;POSTBYTE FOR 16 BIT OFFSET
286D 9716             (          asm.asm):01317                 STA     POST                              ;SAVE FOR LATER
286F 17FEED           (          asm.asm):01318                 LBSR    ADDREG                            ;INSERT REGISTER BITS
2872                  (          asm.asm):01319         BITEXT
2872 CC0203           (          asm.asm):01320                 LDD     #$0203                            ;INDICATE TYPE AND LENGTH
2875 39               (          asm.asm):01321                 RTS     SAVE FOR LATER
                      (          asm.asm):01322         ;*
                      (          asm.asm):01323         ;* GET A VALUE FROM THE COMMAND LINE, RETURN IN 'D'
                      (          asm.asm):01324         ;*
2876                  (          asm.asm):01325         GETVAL
2876 A6A0             (          asm.asm):01326                 LDA     ,Y+                               ;GET PRECEDING SYMBOL?
                      (          asm.asm):01327         ;* TEST FOR '=' SWAP HIGH AND LOW BYTES
2878 813D             (          asm.asm):01328                 CMPA    #'='                              ;IS IT A REVERSE CHARACTER?
287A 2606             (          asm.asm):01329                 BNE     GETV1                             ;IF NO, NOTHING SPECIAL TO DO
287C 8DF8             (          asm.asm):01330                 BSR     GETVAL                            ;EVALUATE NEXT VALUE ELEMENT
287E 1E89             (          asm.asm):01331                 EXG     A,B                               ;SWAP HIGH AND LOW
2880 2014             (          asm.asm):01332                 BRA     GETEN1                            ;AND CONTINUE
                      (          asm.asm):01333         ;* TEST FOR '-' NEGATE VALUE
2882                  (          asm.asm):01334         GETV1
2882 812D             (          asm.asm):01335                 CMPA    #'-'                              ;IS IT NEGATE?
2884 2608             (          asm.asm):01336                 BNE     GETV2                             ;NO, ITS OK
2886 8DEE             (          asm.asm):01337                 BSR     GETVAL                            ;EVALUATE NEXT
2888 4F               (          asm.asm):01338                 CLRA
2889 5F               (          asm.asm):01339                 CLRB
288A 9304             (          asm.asm):01340                 SUBD    VAL1                              ;CALCULATE NEGATE
288C 2008             (          asm.asm):01341                 BRA     GETEN1                            ;AND CONTINUE
                      (          asm.asm):01342         ;* TEST FOR '~' ONE'S COMPLEMENT
288E                  (          asm.asm):01343         GETV2
288E 817E             (          asm.asm):01344                 CMPA    #'~'                              ;COMPLEMENT?
2890 2607             (          asm.asm):01345                 BNE     GETHEX                            ;NO, ITS OK
2892 8DE2             (          asm.asm):01346                 BSR     GETVAL                            ;EVALUATE NEXT
2894 43               (          asm.asm):01347                 COMA    COMPLEMENT HIGH
2895 53               (          asm.asm):01348                 COMB    COMPLEMENT LOW
2896                  (          asm.asm):01349         GETEN1
2896 DD04             (          asm.asm):01350                 STD     VAL1                              ;SAVE RESULT
2898 39               (          asm.asm):01351                 RTS
                      (          asm.asm):01352         ;* TEST FOR HEXIDECIMAL NUMBER
2899                  (          asm.asm):01353         GETHEX
2899 3410             (          asm.asm):01354                 PSHS    X                                 ;SAVE 'X'
289B 8E0000           (          asm.asm):01355                 LDX     #0                                ;START WITH ZERO
289E 8124             (          asm.asm):01356                 CMPA    #'$'                              ;IS IT A HEX NUMBER?
28A0 2622             (          asm.asm):01357                 BNE     GETBIN                            ;NOT A HEX NUMBER, TRY BINARY
28A2                  (          asm.asm):01358         GETH1
28A2 17013C           (          asm.asm):01359                 LBSR    TSTEXP                            ;TEST FOR TERMINATOR
28A5 275A             (          asm.asm):01360                 BEQ     GETEND                            ;IF SO, LAST CHARACTER
28A7 8030             (          asm.asm):01361                 SUBA    #'0'                              ;CONVERT TO BINARY
28A9 810A             (          asm.asm):01362                 CMPA    #10                               ;0-9?
28AB 250A             (          asm.asm):01363                 BLO     GETH2                             ;IF SO, ITS OK
28AD 8111             (          asm.asm):01364                 CMPA    #$11                              ;< 'A'?
28AF 2D4B             (          asm.asm):01365                 BLT     BADHEX                            ;IF SO, ITS BAD
28B1 8007             (          asm.asm):01366                 SUBA    #7                                ;CONVERT TO HEX
28B3 8110             (          asm.asm):01367                 CMPA    #$10                              ;IS IT 0-F?
28B5 2445             (          asm.asm):01368                 BHS     BADHEX                            ;IF SO, ITS BAD
28B7                  (          asm.asm):01369         GETH2
28B7 9706             (          asm.asm):01370                 STA     TEMP                              ;SAVE FOR TEMPORARY VALUE
28B9 CC0010           (          asm.asm):01371                 LDD     #16                               ;MULTIPLY BY 16 (SHIFT FOUR BITS)
28BC 3F               (          asm.asm):01372                 SWI
28BD 6B               (          asm.asm):01373                 FCB     107                               ;D=D                          ;*X
28BE DA06             (          asm.asm):01374                 ORB     TEMP                              ;INCLUDE EXTRA DIGIT
28C0 1F01             (          asm.asm):01375                 TFR     D,X                               ;REPLACE IN 'X'
28C2 20DE             (          asm.asm):01376                 BRA     GETH1                             ;DO NEXT
                      (          asm.asm):01377         ;* TEST FOR BINARY NUMBER
28C4                  (          asm.asm):01378         GETBIN
28C4 8125             (          asm.asm):01379                 CMPA    #'%'                              ;IS IT BINARY?
28C6 2616             (          asm.asm):01380                 BNE     GETOCT                            ;NO, TRY OCTAL
28C8                  (          asm.asm):01381         GETB1
28C8 170116           (          asm.asm):01382                 LBSR    TSTEXP                            ;TEST FOR A TERMINATOR
28CB 2734             (          asm.asm):01383                 BEQ     GETEND                            ;IF END, CONTINUE WITH EXPRESSION
28CD 8030             (          asm.asm):01384                 SUBA    #'0'                              ;CONVERT TO BINARY
28CF 8101             (          asm.asm):01385                 CMPA    #1                                ;TEST FOR IN RANGE
28D1 2229             (          asm.asm):01386                 BHI     BADHEX                            ;IF INVALID, SAY SO
28D3 3402             (          asm.asm):01387                 PSHS    A                                 ;SAVE THIS VALUE
28D5 1F10             (          asm.asm):01388                 TFR     X,D                               ;COPY TO ACCUMULATOR
28D7 308B             (          asm.asm):01389                 LEAX    D,X                               ;SHIFT BY ONE BIT
28D9 3504             (          asm.asm):01390                 PULS    B                                 ;RESTORE VALUE
28DB 3A               (          asm.asm):01391                 ABX     INSERT THIS BIT
28DC 20EA             (          asm.asm):01392                 BRA     GETB1                             ;CONTINUE LOOKING
                      (          asm.asm):01393         ;* TEST FOR OCTAL NUMBER
28DE                  (          asm.asm):01394         GETOCT
28DE 8140             (          asm.asm):01395                 CMPA    #'@'                              ;IS IT OCTAL?
28E0 2625             (          asm.asm):01396                 BNE     GETCHR                            ;NO, TRY CHARACTER
28E2                  (          asm.asm):01397         GETO1
28E2 1700FC           (          asm.asm):01398                 LBSR    TSTEXP                            ;TEST FOR TERMINATOR
28E5 10270018         (          asm.asm):01399                 LBEQ    GETEND                            ;IF END, CONTINUE
28E9 8030             (          asm.asm):01400                 SUBA    #'0'                              ;CONVERT TO BINARY
28EB 8107             (          asm.asm):01401                 CMPA    #7                                ;IN RANGE?
28ED 220D             (          asm.asm):01402                 BHI     BADHEX                            ;INVALID
28EF 9706             (          asm.asm):01403                 STA     TEMP                              ;SAVE TEMP
28F1 CC0008           (          asm.asm):01404                 LDD     #8                                ;MUL BY 8
28F4 3F               (          asm.asm):01405                 SWI
28F5 6B               (          asm.asm):01406                 FCB     107                               ;DO MULTIPLY
28F6 DA06             (          asm.asm):01407                 ORB     TEMP                              ;INCLUDE
28F8 1F01             (          asm.asm):01408                 TFR     D,X                               ;COPY BACK
28FA 20E6             (          asm.asm):01409                 BRA     GETO1                             ;CONTINUE
                      (          asm.asm):01410         ;* INVALID HEX DIGIT
28FC                  (          asm.asm):01411         BADHEX
28FC 8606             (          asm.asm):01412                 LDA     #6                                ;'INVALID OPERATOR IN EXPRESSION'
28FE 17012C           (          asm.asm):01413                 LBSR    SETERR                            ;DISPLAY
                      (          asm.asm):01414         ;* END OF GETVAL, EXIT
2901                  (          asm.asm):01415         GETEND
2901 1F10             (          asm.asm):01416                 TFR     X,D                               ;D = VALUE
2903 DD04             (          asm.asm):01417                 STD     VAL1                              ;SET VALUE
2905 3590             (          asm.asm):01418                 PULS    X,PC                              ;RESTORE & RETURN
                      (          asm.asm):01419         ;* TEST FOR QUOTED STRING
2907                  (          asm.asm):01420         GETCHR
2907 8127             (          asm.asm):01421                 CMPA    #$27                              ;IS IT A QUOTE?
2909 261F             (          asm.asm):01422                 BNE     GETDEC                            ;NO, TRY DECIMAL NUMBER
290B                  (          asm.asm):01423         GETC1
290B A6A0             (          asm.asm):01424                 LDA     ,Y+                               ;GET CHAR
290D 810D             (          asm.asm):01425                 CMPA    #$0D                              ;END OF LINE MEANS SCREWUP
290F 2710             (          asm.asm):01426                 BEQ     BADSTR                            ;INVALID STRING
2911 8127             (          asm.asm):01427                 CMPA    #$27                              ;CLOSING QUOTE
2913 27EC             (          asm.asm):01428                 BEQ     GETEND                            ;OF SO, THATS IT
2915 9706             (          asm.asm):01429                 STA     TEMP                              ;SAVE CHAR
2917 1F10             (          asm.asm):01430                 TFR     X,D                               ;COPY TO ACCUMULATOR
2919 1F98             (          asm.asm):01431                 TFR     B,A                               ;SHIFT UP
291B D606             (          asm.asm):01432                 LDB     TEMP                              ;INCLUDE LOWER CHAR
291D 1F01             (          asm.asm):01433                 TFR     D,X                               ;REPLACE OLD VALUE
291F 20EA             (          asm.asm):01434                 BRA     GETC1                             ;GET NEXT CHARACTER
                      (          asm.asm):01435         ;* STRING OPERAND WAS INVALID
2921                  (          asm.asm):01436         BADSTR
2921 313F             (          asm.asm):01437                 LEAY    -1,Y                              ;BACKUP
2923 8608             (          asm.asm):01438                 LDA     #8                                ;'IMPROPERLY DELIMITED STRING'
2925 170105           (          asm.asm):01439                 LBSR    SETERR                            ;SET ERROR MESSAGE
2928 20D7             (          asm.asm):01440                 BRA     GETEND                            ;CONTINUE
                      (          asm.asm):01441         ;* TEST FOR DECIMAL NUMBER
292A                  (          asm.asm):01442         GETDEC
292A 8130             (          asm.asm):01443                 CMPA    #'0'                              ;IS IT < '0'?
292C 2520             (          asm.asm):01444                 BLO     GETPC                             ;NO, ITS NOT DECIMAL
292E 8139             (          asm.asm):01445                 CMPA    #'9'                              ;IS IT > '9'
2930 221C             (          asm.asm):01446                 BHI     GETPC                             ;NO, NOT DECIMAL
2932 313F             (          asm.asm):01447                 LEAY    -1,Y                              ;BACKUP TO START OF LINE
2934                  (          asm.asm):01448         GETD1
2934 1700AA           (          asm.asm):01449                 LBSR    TSTEXP                            ;TEST FOR END OF DIGIT STRING
2937 27C8             (          asm.asm):01450                 BEQ     GETEND                            ;IF SO, QUIT
2939 8030             (          asm.asm):01451                 SUBA    #'0'                              ;CONVERT TO BINARY
293B 8109             (          asm.asm):01452                 CMPA    #9                                ;ARE WE DECIMAL?
293D 22BD             (          asm.asm):01453                 BHI     BADHEX                            ;IF NOT, GET UPSET
293F 9706             (          asm.asm):01454                 STA     TEMP                              ;SAVE DIGIT
2941 CC000A           (          asm.asm):01455                 LDD     #10                               ;MULTIPLY BY 10
2944 3F               (          asm.asm):01456                 SWI
2945 6B               (          asm.asm):01457                 FCB     107                               ;D=D                          ;*X
2946 DB06             (          asm.asm):01458                 ADDB    TEMP                              ;ADD IN DIGIT
2948 8900             (          asm.asm):01459                 ADCA    #0                                ;INSURE HIGH INCS
294A 1F01             (          asm.asm):01460                 TFR     D,X                               ;SAVE IN X FOR NEXT ITERATION
294C 20E6             (          asm.asm):01461                 BRA     GETD1                             ;KEEP GOING
                      (          asm.asm):01462         ;* TEST FOR CURRENT PROGRAM COUNTER
294E                  (          asm.asm):01463         GETPC
294E 812A             (          asm.asm):01464                 CMPA    #'*'                              ;CURRENT PROGRAM COUNTER?
2950 2604             (          asm.asm):01465                 BNE     GETSYM                            ;NOT THE CURRENT PROGRAM COUNTER
2952 9E08             (          asm.asm):01466                 LDX     CURPC                             ;GET CURRENT PROGRAM COUNTER
2954 20AB             (          asm.asm):01467                 BRA     GETEND                            ;CONTINUE
                      (          asm.asm):01468         ;* LOOK UP SYMBOL IN SYMBOL TABLE
2956                  (          asm.asm):01469         GETSYM
2956 313F             (          asm.asm):01470                 LEAY    -1,Y                              ;BACKUP TO SYMBOL
2958 17FD5A           (          asm.asm):01471                 LBSR    LOCSYM                            ;LOOK UP SYMBOL VALUE
295B 20A4             (          asm.asm):01472                 BRA     GETEND
                      (          asm.asm):01473         ;*
                      (          asm.asm):01474         ;* EVALUATE ANY OPERANDS
                      (          asm.asm):01475         ;*
295D                  (          asm.asm):01476         EVAL
295D 3410             (          asm.asm):01477                 PSHS    X                                 ;SAVE 'X'
295F 17FF14           (          asm.asm):01478                 LBSR    GETVAL                            ;GET VALUE
2962                  (          asm.asm):01479         EVAL1
2962 1F01             (          asm.asm):01480                 TFR     D,X                               ;SAVE OLD VALUE
2964                  (          asm.asm):01481         EVAL2
2964 1700AF           (          asm.asm):01482                 LBSR    TSTERM                            ;GET TERMINATOR
2967 2606             (          asm.asm):01483                 BNE     TRYADD                            ;TRY ADD
2969 1F10             (          asm.asm):01484                 TFR     X,D                               ;GET VALUE
296B                  (          asm.asm):01485         EVEXIT
296B DD04             (          asm.asm):01486                 STD     VAL1                              ;SET VALUE
296D 3590             (          asm.asm):01487                 PULS    X,PC                              ;RESTORE & RETURN
                      (          asm.asm):01488         ;* TEST FOR ADDITION
296F                  (          asm.asm):01489         TRYADD
296F 812B             (          asm.asm):01490                 CMPA    #'+'                              ;IS THIS ADDITION?
2971 2609             (          asm.asm):01491                 BNE     TRYSUB                            ;NO, TRY SUBTRACTION
2973 17FF00           (          asm.asm):01492                 LBSR    GETVAL                            ;GET NEW OPERAND VALUE
2976 1F10             (          asm.asm):01493                 TFR     X,D                               ;COPY TO ACCUMULATOR
2978 D304             (          asm.asm):01494                 ADDD    VAL1                              ;ADD TO OLD VALUE
297A 20E6             (          asm.asm):01495                 BRA     EVAL1                             ;BACK TO CALLER
                      (          asm.asm):01496         ;* TRY SUBTRACTION
297C                  (          asm.asm):01497         TRYSUB
297C 812D             (          asm.asm):01498                 CMPA    #'-'                              ;SUBTRACT?
297E 2609             (          asm.asm):01499                 BNE     TRYMUL                            ;NO, TRY MULTIPLICATION
2980 17FEF3           (          asm.asm):01500                 LBSR    GETVAL                            ;EVALUATE NEXT EXPRESSION
2983 1F10             (          asm.asm):01501                 TFR     X,D                               ;COPY TO ACCUMULATOR FOR ARITHMITIC
2985 9304             (          asm.asm):01502                 SUBD    VAL1                              ;SUBTRACT NEW VALUE
2987 20D9             (          asm.asm):01503                 BRA     EVAL1                             ;ALL DONE
                      (          asm.asm):01504         ;* MULTIPLY OPERANDS
2989                  (          asm.asm):01505         TRYMUL
2989 812A             (          asm.asm):01506                 CMPA    #'*'                              ;IS IT A MULTIPLY?
298B 2607             (          asm.asm):01507                 BNE     TRYDIV                            ;NO, TRY LOGICAL OR
298D 17FEE6           (          asm.asm):01508                 LBSR    GETVAL                            ;EVALUATE SECOND OPERAND
2990 3F               (          asm.asm):01509                 SWI
2991 6B               (          asm.asm):01510                 FCB     107                               ;DO MULTIPLY
2992 20CE             (          asm.asm):01511                 BRA     EVAL1                             ;ALL DONE
                      (          asm.asm):01512         ;* DIVIDE OPERATION
2994                  (          asm.asm):01513         TRYDIV
2994 812F             (          asm.asm):01514                 CMPA    #'/'                              ;DIVISION?
2996 2607             (          asm.asm):01515                 BNE     TRYMOD                            ;NO, TRY MODULUS
2998 17FEDB           (          asm.asm):01516                 LBSR    GETVAL                            ;GET OPERAND
299B 3F               (          asm.asm):01517                 SWI
299C 6C               (          asm.asm):01518                 FCB     108                               ;X=X/D
299D 20C5             (          asm.asm):01519                 BRA     EVAL2                             ;AND KEEP RESULT
                      (          asm.asm):01520         ;* MODULUS OPERATION
299F                  (          asm.asm):01521         TRYMOD
299F 815C             (          asm.asm):01522                 CMPA    #'\'                              ;MODULUS?
29A1 2607             (          asm.asm):01523                 BNE     TRYOR                             ;NO, TRY OR
29A3 17FED0           (          asm.asm):01524                 LBSR    GETVAL                            ;GET OPERAND
29A6 3F               (          asm.asm):01525                 SWI
29A7 6C               (          asm.asm):01526                 FCB     108                               ;X=X/D
29A8 20B8             (          asm.asm):01527                 BRA     EVAL1                             ;RETURN REMAINDER
                      (          asm.asm):01528         ;* LOGICAL OR OF OPERANDS
29AA                  (          asm.asm):01529         TRYOR
29AA 817C             (          asm.asm):01530                 CMPA    #'|'                              ;IS IT OR?
29AC 260B             (          asm.asm):01531                 BNE     TRYAND                            ;NO, TRY LOGICAL AND
29AE 17FEC5           (          asm.asm):01532                 LBSR    GETVAL                            ;CALCULATE OPERAND VALUE
29B1 1F10             (          asm.asm):01533                 TFR     X,D                               ;GET OLD VALUE
29B3 9A04             (          asm.asm):01534                 ORA     VAL1                              ;PERFORM OR
29B5 DA05             (          asm.asm):01535                 ORB     VAL1+1                            ;ON BOTH BYTES
29B7 20A9             (          asm.asm):01536                 BRA     EVAL1                             ;CONTINUE
                      (          asm.asm):01537         ;* LOGICAL AND OF OPERANDS
29B9                  (          asm.asm):01538         TRYAND
29B9 8126             (          asm.asm):01539                 CMPA    #'&'                              ;IS IT AND?
29BB 260B             (          asm.asm):01540                 BNE     TRYXOR                            ;NO, TRY XOR
29BD 17FEB6           (          asm.asm):01541                 LBSR    GETVAL                            ;EVALUATE OPERANDS
29C0 1F10             (          asm.asm):01542                 TFR     X,D                               ;GET OLD VALUE
29C2 9404             (          asm.asm):01543                 ANDA    VAL1                              ;AND WITH OLD
29C4 D405             (          asm.asm):01544                 ANDB    VAL1+1                            ;AND SECOND BYTE
29C6 209A             (          asm.asm):01545                 BRA     EVAL1                             ;CONTINUE
                      (          asm.asm):01546         ;* EXCLUSIVE OR OPERATION
29C8                  (          asm.asm):01547         TRYXOR
29C8 815E             (          asm.asm):01548                 CMPA    #'^'                              ;IS IT XOR?
29CA 260B             (          asm.asm):01549                 BNE     EVAERR                            ;NO, ERROR
29CC 17FEA7           (          asm.asm):01550                 LBSR    GETVAL                            ;EVALUATE OPERANDS
29CF 1F10             (          asm.asm):01551                 TFR     X,D                               ;GET OLD VALUE
29D1 9804             (          asm.asm):01552                 EORA    VAL1                              ;XOR WITH OLD
29D3 D805             (          asm.asm):01553                 EORB    VAL1+1                            ;XOR SECOND BYTE
29D5 208B             (          asm.asm):01554                 BRA     EVAL1                             ;CONTINUE
29D7                  (          asm.asm):01555         EVAERR
29D7 8606             (          asm.asm):01556                 LDA     #6                                ;'INVALID OPERATOR IN EXPRESSION'
29D9 170051           (          asm.asm):01557                 LBSR    SETERR                            ;SET ERROR FLAG
29DC CC0000           (          asm.asm):01558                 LDD     #0                                ;ZERO VALUE
29DF 208A             (          asm.asm):01559                 BRA     EVEXIT                            ;END EXIT
                      (          asm.asm):01560         ;*
                      (          asm.asm):01561         ;* TEST FOR VALID EXPRESSION ELEMENT TERMINATOR
                      (          asm.asm):01562         ;*
29E1                  (          asm.asm):01563         TSTEXP
29E1 A6A4             (          asm.asm):01564                 LDA     ,Y                                ;GET CHARACTER
29E3 812B             (          asm.asm):01565                 CMPA    #'+'                              ;PLUS SIGN
29E5 272E             (          asm.asm):01566                 BEQ     TSTEND                            ;OK
29E7 812D             (          asm.asm):01567                 CMPA    #'-'                              ;MINUS SIGN
29E9 272A             (          asm.asm):01568                 BEQ     TSTEND                            ;IS ALSO OK
29EB 8126             (          asm.asm):01569                 CMPA    #'&'                              ;LOCAIAL AND?
29ED 2726             (          asm.asm):01570                 BEQ     TSTEND                            ;IF SO, ITS OK
29EF 817C             (          asm.asm):01571                 CMPA    #'|'                              ;LOGICAL OR?
29F1 2722             (          asm.asm):01572                 BEQ     TSTEND                            ;IF SO, ITS OK
29F3 815E             (          asm.asm):01573                 CMPA    #'^'                              ;EXCLUSIVE OR?
29F5 271E             (          asm.asm):01574                 BEQ     TSTEND                            ;YES, ITS OK
29F7 812A             (          asm.asm):01575                 CMPA    #'*'                              ;MULTIPLY?
29F9 271A             (          asm.asm):01576                 BEQ     TSTEND                            ;YES, ITS OK
29FB 812F             (          asm.asm):01577                 CMPA    #'/'                              ;DIVIDE?
29FD 2716             (          asm.asm):01578                 BEQ     TSTEND                            ;YES, ITS OK
29FF 815C             (          asm.asm):01579                 CMPA    #'\'                              ;MODULUS?
2A01 2712             (          asm.asm):01580                 BEQ     TSTEND                            ;YES, ITS OK
2A03 8120             (          asm.asm):01581                 CMPA    #' '                              ;SPACE IS VALID
2A05 270E             (          asm.asm):01582                 BEQ     TSTEND                            ;IF SO, QUIT
2A07 812C             (          asm.asm):01583                 CMPA    #','                              ;SO IS COMMA
2A09 270A             (          asm.asm):01584                 BEQ     TSTEND                            ;INDICATE SO
2A0B 815D             (          asm.asm):01585                 CMPA    #']'                              ;AND CLOSING BRACE
2A0D 2706             (          asm.asm):01586                 BEQ     TSTEND                            ;INDICATE SO
2A0F 810D             (          asm.asm):01587                 CMPA    #$0D                              ;CARRIAGE RETURN IS LAST
2A11 2702             (          asm.asm):01588                 BEQ     TSTEND                            ;IF NOT, SAY SO
2A13 3121             (          asm.asm):01589                 LEAY    1,Y                               ;DONT SKIP END OF LINE
2A15                  (          asm.asm):01590         TSTEND
2A15 39               (          asm.asm):01591                 RTS
                      (          asm.asm):01592         ;* GET CHARACTER (Y) AND ADVANCE Y IF NOT A CR, SET 'Z' IF TERMINATOR
2A16                  (          asm.asm):01593         TSTERM
2A16 A6A0             (          asm.asm):01594                 LDA     ,Y+                               ;GET CHARACTER
2A18 8120             (          asm.asm):01595                 CMPA    #' '                              ;SPACE?
2A1A 27F9             (          asm.asm):01596                 BEQ     TSTEND                            ;YES, ITS OK
2A1C 812C             (          asm.asm):01597                 CMPA    #','                              ;COMMA?
2A1E 27F5             (          asm.asm):01598                 BEQ     TSTEND                            ;YES, ITS OK
2A20 815D             (          asm.asm):01599                 CMPA    #']'                              ;CLOSEING BRACE?
2A22 27F1             (          asm.asm):01600                 BEQ     TSTEND                            ;YES, ITS OK
2A24 810D             (          asm.asm):01601                 CMPA    #$0D                              ;CARRIAGE RETURN
2A26 26ED             (          asm.asm):01602                 BNE     TSTEND                            ;NO, ITS OK
2A28 313F             (          asm.asm):01603                 LEAY    -1,Y                              ;BACKUP
2A2A 1A04             (          asm.asm):01604                 ORCC    #%00000100      SET 'Z' FLAG
2A2C 39               (          asm.asm):01605                 RTS
                      (          asm.asm):01606         ;* INDICATE AN ERROR HAS OCCURED
2A2D                  (          asm.asm):01607         SETERR
2A2D 0D15             (          asm.asm):01608                 TST     EMSG                              ;ALREADY OCCURED?
2A2F 2602             (          asm.asm):01609                 BNE     NOSET                             ;DONT SET IF ALREADY IN
2A31 9715             (          asm.asm):01610                 STA     EMSG                              ;SET ERROR FLAG
2A33                  (          asm.asm):01611         NOSET
2A33 39               (          asm.asm):01612                 RTS
                      (          asm.asm):01613         ;*
                      (          asm.asm):01614         ;* DISPLAY ERROR MESSAGE
                      (          asm.asm):01615         ;*
2A34                  (          asm.asm):01616         DSPERR
2A34 3416             (          asm.asm):01617                 PSHS    A,B,X                             ;SAVE X REGISTER
2A36 9615             (          asm.asm):01618                 LDA     EMSG                              ;GETERROR MESSAGE
2A38 272D             (          asm.asm):01619                 BEQ     NOERR                             ;NOT AN ERROR
2A3A 0A12             (          asm.asm):01620                 DEC     PAGLIN                            ;REDUCE LINES/PAGE
2A3C 8E2B32           (          asm.asm):01621                 LDX     #EMSG1                            ;POINT TO FIRST MESSAGE
2A3F 8D30             (          asm.asm):01622                 BSR     WRIMSG                            ;OUTPUT MESSAGE
2A41 D615             (          asm.asm):01623                 LDB     EMSG                              ;GET ERROR NUMBER BACK
2A43 4F               (          asm.asm):01624                 CLRA    ZERO HIGH BYTE
2A44 17006E           (          asm.asm):01625                 LBSR    WRIDEC                            ;OUTPUT NUMBER IN DECIMAL
2A47 DC02             (          asm.asm):01626                 LDD     ERRORS                            ;GET TOTAL ERRORS
2A49 C30001           (          asm.asm):01627                 ADDD    #1                                ;ADVANCE TO NEXT
2A4C DD02             (          asm.asm):01628                 STD     ERRORS                            ;SAVE BACK
2A4E 8E2B54           (          asm.asm):01629                 LDX     #EMSG2                            ;SECOND PART
2A51 8D1E             (          asm.asm):01630                 BSR     WRIMSG                            ;OUTPUT MESSAGE
2A53 D615             (          asm.asm):01631                 LDB     EMSG                              ;GET MESSAGE NUMBER BACK
2A55 8E2B90           (          asm.asm):01632                 LDX     #ERRMSG                           ;POINT TO ERROR MESSAGE TABLE
2A58                  (          asm.asm):01633         LKMSG
2A58 A680             (          asm.asm):01634                 LDA     ,X+                               ;GET CHARACTER FROM MESSAGE
2A5A 26FC             (          asm.asm):01635                 BNE     LKMSG                             ;KEEP GOING TILL WE FIND END OF MESSAGE
2A5C 5A               (          asm.asm):01636                 DECB    REDUCE COUNT
2A5D 26F9             (          asm.asm):01637                 BNE     LKMSG                             ;OUTPUT
2A5F 8D10             (          asm.asm):01638                 BSR     WRIMSG                            ;OUTPUT
2A61 860D             (          asm.asm):01639                 LDA     #$0D                              ;GET CARRIAGE RETURN
2A63 8D29             (          asm.asm):01640                 BSR     WRICHR                            ;OUTPUT
2A65 0F15             (          asm.asm):01641                 CLR     EMSG                              ;CLEAR ERROR MESSAGE FLAG
2A67                  (          asm.asm):01642         NOERR
2A67 3596             (          asm.asm):01643                 PULS    A,B,X,PC        RESTORE REGISTERS
                      (          asm.asm):01644         ;*
                      (          asm.asm):01645         ;* DISPLAY A SPACE ON OUTPUT FILE
                      (          asm.asm):01646         ;*
2A69                  (          asm.asm):01647         SPACE
2A69 3402             (          asm.asm):01648                 PSHS    A                                 ;SAVE ACCUMULTOR
2A6B 8620             (          asm.asm):01649                 LDA     #' '                              ;GET SPACE
2A6D 8D1F             (          asm.asm):01650                 BSR     WRICHR                            ;OUTPUT
2A6F 3582             (          asm.asm):01651                 PULS    A,PC                              ;RESTORE AND RETURN
                      (          asm.asm):01652         ;*
                      (          asm.asm):01653         ;* DISPLAY MESSAGE UP TO A ZERO
                      (          asm.asm):01654         ;*
2A71                  (          asm.asm):01655         WRIMSG
2A71 A680             (          asm.asm):01656                 LDA     ,X+                               ;GET CHARACTER FROM MESSAGE
2A73 2704             (          asm.asm):01657                 BEQ     ENDMSG                            ;IF SO, QUIT
2A75 8D17             (          asm.asm):01658                 BSR     WRICHR                            ;OUTPUT
2A77 20F8             (          asm.asm):01659                 BRA     WRIMSG                            ;KEEP GOING
2A79                  (          asm.asm):01660         ENDMSG
2A79 39               (          asm.asm):01661                 RTS
                      (          asm.asm):01662         ;*
                      (          asm.asm):01663         ;* DISPLAY NUMBER IN ACCA IN HEX
                      (          asm.asm):01664         ;*
2A7A                  (          asm.asm):01665         WRIBYT
2A7A 3402             (          asm.asm):01666                 PSHS    A                                 ;SAVE CURRENT VALUE
2A7C 44               (          asm.asm):01667                 LSRA    NIBBLE INTO LOW
2A7D 44               (          asm.asm):01668                 LSRA    SO WE
2A7E 44               (          asm.asm):01669                 LSRA    CAN CONVERT TO
2A7F 44               (          asm.asm):01670                 LSRA    ASCII HEX
2A80 8D02             (          asm.asm):01671                 BSR     OUTASC                            ;OUTPUT
2A82 3502             (          asm.asm):01672                 PULS    A                                 ;RESTORE A VALUE
2A84                  (          asm.asm):01673         OUTASC
2A84 840F             (          asm.asm):01674                 ANDA    #$0F                              ;REMOVE ANY GARBAGE
2A86 8B30             (          asm.asm):01675                 ADDA    #$30                              ;CONVERT TO ASCII
2A88 8139             (          asm.asm):01676                 CMPA    #$39                              ;IS IT MORE?
2A8A 2302             (          asm.asm):01677                 BLS     WRICHR                            ;IF NOT, WRITE OUT CHARACTER
2A8C 8B07             (          asm.asm):01678                 ADDA    #$7                               ;CONVERT TO ASCII
                      (          asm.asm):01679         ;*
                      (          asm.asm):01680         ;* WRITE A CHARACTER TO THE OUTPUT FILE
                      (          asm.asm):01681         ;*
2A8E                  (          asm.asm):01682         WRICHR
2A8E 3442             (          asm.asm):01683                 PSHS    A,U                               ;SAVE REGISTERS
2A90 7D3185           (          asm.asm):01684                 TST     ERR                               ;ARE WE OUTPUTING ERROR MSGS ONLY?
2A93 2604             (          asm.asm):01685                 BNE     NOROUT                            ;NORMAL OUTPUT
2A95 0D15             (          asm.asm):01686                 TST     EMSG                              ;HAS THERE BEEN AN ERROR?
2A97 270F             (          asm.asm):01687                 BEQ     STLST                             ;IF NOT, QUIT
2A99                  (          asm.asm):01688         NOROUT
2A99 7D3183           (          asm.asm):01689                 TST     TERM                              ;IS IT TERMINAL OUTPUT
2A9C 260C             (          asm.asm):01690                 BNE     LSTOUT                            ;NO, OUTPUT TO LISTING
2A9E 3F               (          asm.asm):01691                 SWI
2A9F 21               (          asm.asm):01692                 FCB     33                                ;OUTPUT TO TERMINAL
2AA0 810D             (          asm.asm):01693                 CMPA    #$0D                              ;CARRIAGE RETURN?
2AA2 2604             (          asm.asm):01694                 BNE     STLST                             ;OUTPUT
2AA4 860A             (          asm.asm):01695                 LDA     #$0A                              ;GET LINE FEED
2AA6 3F               (          asm.asm):01696                 SWI
2AA7 21               (          asm.asm):01697                 FCB     33                                ;OUTPUT
2AA8                  (          asm.asm):01698         STLST
2AA8 35C2             (          asm.asm):01699                 PULS    A,U,PC                            ;RESTORE REGISTERS
2AAA                  (          asm.asm):01700         LSTOUT
2AAA CE4363           (          asm.asm):01701                 LDU     #LSTFIL
2AAD 3F               (          asm.asm):01702                 SWI
2AAE 3D               (          asm.asm):01703                 FCB     61                                ;WRITE CHAR
2AAF 1026FBC6         (          asm.asm):01704                 LBNE    ABORT                             ;ERROR
2AB3 35C2             (          asm.asm):01705                 PULS    A,U,PC                            ;RESTORE X AND PC
                      (          asm.asm):01706         ;*
                      (          asm.asm):01707         ;* WRITE DECIMAL VALUE OF D TO OUTPUT FILE
                      (          asm.asm):01708         ;*
2AB5                  (          asm.asm):01709         WRIDEC
2AB5 3436             (          asm.asm):01710                 PSHS    A,B,X,Y                           ;SAVE X-Y REGISTERS
2AB7 108E0000         (          asm.asm):01711                 LDY     #0                                ;START WITH ZERO CHARACTERS
2ABB 1F01             (          asm.asm):01712                 TFR     D,X                               ;SET UP STARTING VALUE
2ABD                  (          asm.asm):01713         WRDE1
2ABD CC000A           (          asm.asm):01714                 LDD     #10                               ;DIVIDE BY 10
2AC0 3F               (          asm.asm):01715                 SWI
2AC1 6C               (          asm.asm):01716                 FCB     108                               ;X=X/D, D=REMAINDER
2AC2 3404             (          asm.asm):01717                 PSHS    B                                 ;SAVE REMAINDER
2AC4 3121             (          asm.asm):01718                 LEAY    1,Y                               ;INDICATE ANOTHER ON STACK
2AC6 8C0000           (          asm.asm):01719                 CMPX    #0                                ;ANY MORE?
2AC9 26F2             (          asm.asm):01720                 BNE     WRDE1                             ;NO, CONTINUE
2ACB                  (          asm.asm):01721         WRDE2
2ACB 3502             (          asm.asm):01722                 PULS    A                                 ;GET DIGIT BACK
2ACD 8B30             (          asm.asm):01723                 ADDA    #'0'                              ;CONVERT TO PRINTABLE FORM
2ACF 17FFBC           (          asm.asm):01724                 LBSR    WRICHR                            ;DISPLAY DECIMAL DIGIT
2AD2 313F             (          asm.asm):01725                 LEAY    -1,Y                              ;REDUCE COUNT
2AD4 26F5             (          asm.asm):01726                 BNE     WRDE2                             ;IF NOT END, CONTINUE DISPLAYING
2AD6 35B6             (          asm.asm):01727                 PULS    A,B,X,Y,PC      RESTORE INDEX REGS
                      (          asm.asm):01728         ;*
                      (          asm.asm):01729         ;* READS A CHARACTER FROM THE INPUT FILE
                      (          asm.asm):01730         ;*
2AD8                  (          asm.asm):01731         RDINP
2AD8 3440             (          asm.asm):01732                 PSHS    U                                 ;SAVE REGISTERS
2ADA CE4159           (          asm.asm):01733                 LDU     #INFIL
2ADD 3F               (          asm.asm):01734                 SWI
2ADE 3B               (          asm.asm):01735                 FCB     59                                ;READ CHAR
2ADF 35C0             (          asm.asm):01736                 PULS    U,PC                              ;GO HOME
                      (          asm.asm):01737         ;*
                      (          asm.asm):01738         ;* WRITES A BYTE TO THE OBJECT FILE
                      (          asm.asm):01739         ;*
2AE1                  (          asm.asm):01740         WRIOBB
2AE1 81CF             (          asm.asm):01741                 CMPA    #$CF                              ;SPECIAL CASE?
2AE3 2602             (          asm.asm):01742                 BNE     WRIOBJ                            ;NO, OUTPUT IT
2AE5 8D00             (          asm.asm):01743                 BSR     WRIOBJ                            ;IF SPECIAL CASE, WRITE IT TWICE
                      (          asm.asm):01744         ;*
                      (          asm.asm):01745         ;* WRITE A CHARACTER TO THE OBJECT FILE
                      (          asm.asm):01746         ;*
2AE7                  (          asm.asm):01747         WRIOBJ
2AE7 3442             (          asm.asm):01748                 PSHS    A,U                               ;SAVE REGISTERS
2AE9 CE456D           (          asm.asm):01749                 LDU     #OBJFIL
2AEC 3F               (          asm.asm):01750                 SWI
2AED 3D               (          asm.asm):01751                 FCB     61                                ;WRITE CHAR
2AEE 1026FB87         (          asm.asm):01752                 LBNE    ABORT                             ;ERROR
2AF2 35C2             (          asm.asm):01753                 PULS    A,U,PC                            ;RESTORE X AND PC
                      (          asm.asm):01754         ;*
                      (          asm.asm):01755         ;* DISPLAY TITLE IF NESSARY
                      (          asm.asm):01756         ;*
2AF4                  (          asm.asm):01757         DSPTTL
2AF4 0A12             (          asm.asm):01758                 DEC     PAGLIN                            ;ARE WE BELOW?
2AF6 2A39             (          asm.asm):01759                 BPL     NTTL                              ;DONT DISPLAY TITLE
2AF8 8637             (          asm.asm):01760                 LDA     #55                               ;LINES/PAGE
2AFA 9712             (          asm.asm):01761                 STA     PAGLIN                            ;SO WE WONT FORGET
2AFC 8E2B76           (          asm.asm):01762                 LDX     #PAGM1                            ;POINT TO FIRST MESSAGE
2AFF 17FF6F           (          asm.asm):01763                 LBSR    WRIMSG                            ;OUTPUT TO FILE
2B02 8E4019           (          asm.asm):01764                 LDX     #TITLE                            ;POINT TO TITLE SPACE
2B05 C63C             (          asm.asm):01765                 LDB     #60                               ;NUMBER OF SPACES REMAINING
2B07                  (          asm.asm):01766         WRTTL
2B07 A680             (          asm.asm):01767                 LDA     ,X+                               ;GET CHARACTER FROM LINE
2B09 810D             (          asm.asm):01768                 CMPA    #$0D                              ;END OF TITLE?
2B0B 2706             (          asm.asm):01769                 BEQ     ENTTL                             ;IF SO, QUIT
2B0D 17FF7E           (          asm.asm):01770                 LBSR    WRICHR                            ;OUTPUT
2B10 5A               (          asm.asm):01771                 DECB    REDUCE COUNT
2B11 26F4             (          asm.asm):01772                 BNE     WRTTL                             ;KEEP DISPLAYING
2B13                  (          asm.asm):01773         ENTTL
2B13 17FF53           (          asm.asm):01774                 LBSR    SPACE                             ;DISPLAY A SPACE
2B16 5A               (          asm.asm):01775                 DECB    REDUCE COUNT
2B17 2AFA             (          asm.asm):01776                 BPL     ENTTL                             ;AND KEEP DISPLAYING
2B19 8E2B89           (          asm.asm):01777                 LDX     #PAGM2                            ;NEXT MESSAGE
2B1C 17FF52           (          asm.asm):01778                 LBSR    WRIMSG                            ;OUTPUT
2B1F DC10             (          asm.asm):01779                 LDD     PAGE                              ;GET CURRENT PAGE NUMBER
2B21 C30001           (          asm.asm):01780                 ADDD    #1                                ;ADD ONE
2B24 DD10             (          asm.asm):01781                 STD     PAGE                              ;RESAVE
2B26 17FF8C           (          asm.asm):01782                 LBSR    WRIDEC                            ;OUTPUT
2B29 860D             (          asm.asm):01783                 LDA     #$0D                              ;NEW LINE
2B2B 17FF60           (          asm.asm):01784                 LBSR    WRICHR                            ;OUTPUT
2B2E 17FF5D           (          asm.asm):01785                 LBSR    WRICHR                            ;AND A BLANK LINE
2B31                  (          asm.asm):01786         NTTL
2B31 39               (          asm.asm):01787                 RTS
                      (          asm.asm):01788         ;* INFORMATIONAL MESSAGES
2B32                  (          asm.asm):01789         EMSG1
2B32 202A4552524F522A (          asm.asm):01790                 FCC     ' *ERROR* #'
     2023
2B3C 00               (          asm.asm):01791                 FCB     00
2B3D                  (          asm.asm):01792         DUPSYM
2B3D 30202D204455504C (          asm.asm):01793                 FCC     '0 - DUPLICATE SYMBOL: '
     4943415445205359
     4D424F4C3A20
2B53 00               (          asm.asm):01794                 FCB     00
2B54                  (          asm.asm):01795         EMSG2
2B54 202D20           (          asm.asm):01796                 FCC     ' - '
2B57 00               (          asm.asm):01797                 FCB     00
2B58                  (          asm.asm):01798         ERRSUM
2B58 544F54414C204552 (          asm.asm):01799                 FCC     'TOTAL ERRORS: '
     524F52533A20
2B66 00               (          asm.asm):01800                 FCB     00
2B67                  (          asm.asm):01801         SYMMSG
2B67 53594D424F4C2054 (          asm.asm):01802                 FCC     'SYMBOL TABLE:'
     41424C453A
2B74 0D00             (          asm.asm):01803                 FCB     $0D,0
2B76                  (          asm.asm):01804         PAGM1
2B76 0C               (          asm.asm):01805                 FCB     $0C                               ;FORM FEED CHARACTER
2B77 3638303920415353 (          asm.asm):01806                 FCC     '6809 ASSEMBLER : '
     454D424C4552203A
     20
2B88 00               (          asm.asm):01807                 FCB     00
2B89                  (          asm.asm):01808         PAGM2
2B89 504147453A20     (          asm.asm):01809                 FCC     'PAGE: '
2B8F 00               (          asm.asm):01810                 FCB     00
                      (          asm.asm):01811         ;* ERROR MESSAGES
2B90                  (          asm.asm):01812         ERRMSG
2B90 00               (          asm.asm):01813                 FCB     0                                 ;DUMMY BYTE TO START OFF SEARCH
2B91 556E6B6E6F776E20 (          asm.asm):01814                 FCC     'Unknown opcode or directive'
     6F70636F6465206F
     7220646972656374
     697665
2BAC 00               (          asm.asm):01815                 FCB     00
2BAD 4164647265737320 (          asm.asm):01816                 FCC     'Address out of range'
     6F7574206F662072
     616E6765
2BC1 00               (          asm.asm):01817                 FCB     00
2BC2 496E76616C696420 (          asm.asm):01818                 FCC     'Invalid addressing mode'
     6164647265737369
     6E67206D6F6465
2BD9 00               (          asm.asm):01819                 FCB     00
2BDA 496E76616C696420 (          asm.asm):01820                 FCC     'Invalid register specification'
     7265676973746572
     2073706563696669
     636174696F6E
2BF8 00               (          asm.asm):01821                 FCB     00
2BF9 556E646566696E65 (          asm.asm):01822                 FCC     'Undefined symbol'
     642073796D626F6C
2C09 00               (          asm.asm):01823                 FCB     00
2C0A 496E76616C696420 (          asm.asm):01824                 FCC     'Invalid expression syntax'
     6578707265737369
     6F6E2073796E7461
     78
2C23 00               (          asm.asm):01825                 FCB     00
2C24 496E76616C696420 (          asm.asm):01826                 FCC     'Invalid argument format'
     617267756D656E74
     20666F726D6174
2C3B 00               (          asm.asm):01827                 FCB     00
2C3C 496D70726F706572 (          asm.asm):01828                 FCC     'Improperly delimited string'
     6C792064656C696D
     6974656420737472
     696E67
2C57 00               (          asm.asm):01829                 FCB     00
                      (          asm.asm):01830         ;*
                      (          asm.asm):01831         ;* 6809 INSTRUCTIONS
                      (          asm.asm):01832         ;*
2C58                  (          asm.asm):01833         INSTAB
2C58 4C425352         (          asm.asm):01834                 FCC     'LBSR'
2C5C 8817CFCFCF       (          asm.asm):01835                 FCB     $88,$17,$CF,$CF,$CF
2C61 4C4441           (          asm.asm):01836                 FCC     'LDA'
2C64 828696A6B6       (          asm.asm):01837                 FCB     $82,$86,$96,$A6,$B6
2C69 434D5041         (          asm.asm):01838                 FCC     'CMPA'
2C6D 828191A1B1       (          asm.asm):01839                 FCB     $82,$81,$91,$A1,$B1
2C72 424E45           (          asm.asm):01840                 FCC     'BNE'
2C75 8626CFCFCF       (          asm.asm):01841                 FCB     $86,$26,$CF,$CF,$CF
2C7A 424551           (          asm.asm):01842                 FCC     'BEQ'
2C7D 8627CFCFCF       (          asm.asm):01843                 FCB     $86,$27,$CF,$CF,$CF
2C82 425241           (          asm.asm):01844                 FCC     'BRA'
2C85 8620CFCFCF       (          asm.asm):01845                 FCB     $86,$20,$CF,$CF,$CF
2C8A 4C4458           (          asm.asm):01846                 FCC     'LDX'
2C8D 838E9EAEBE       (          asm.asm):01847                 FCB     $83,$8E,$9E,$AE,$BE
2C92 4C4442           (          asm.asm):01848                 FCC     'LDB'
2C95 82C6D6E6F6       (          asm.asm):01849                 FCB     $82,$C6,$D6,$E6,$F6
2C9A 4C4444           (          asm.asm):01850                 FCC     'LDD'
2C9D 83CCDCECFC       (          asm.asm):01851                 FCB     $83,$CC,$DC,$EC,$FC
2CA2 535441           (          asm.asm):01852                 FCC     'STA'
2CA5 82CF97A7B7       (          asm.asm):01853                 FCB     $82,$CF,$97,$A7,$B7
2CAA 535442           (          asm.asm):01854                 FCC     'STB'
2CAD 82CFD7E7F7       (          asm.asm):01855                 FCB     $82,$CF,$D7,$E7,$F7
2CB2 535444           (          asm.asm):01856                 FCC     'STD'
2CB5 83CFDDEDFD       (          asm.asm):01857                 FCB     $83,$CF,$DD,$ED,$FD
2CBA 535458           (          asm.asm):01858                 FCC     'STX'
2CBD 83CF9FAFBF       (          asm.asm):01859                 FCB     $83,$CF,$9F,$AF,$BF
2CC2 44454341         (          asm.asm):01860                 FCC     'DECA'
2CC6 814A000000       (          asm.asm):01861                 FCB     $81,$4A,0,0,0
2CCB 44454342         (          asm.asm):01862                 FCC     'DECB'
2CCF 815A000000       (          asm.asm):01863                 FCB     $81,$5A,0,0,0
2CD4 494E4341         (          asm.asm):01864                 FCC     'INCA'
2CD8 814C000000       (          asm.asm):01865                 FCB     $81,$4C,0,0,0
2CDD 494E4342         (          asm.asm):01866                 FCC     'INCB'
2CE1 815C000000       (          asm.asm):01867                 FCB     $81,$5C,0,0,0
2CE6 4C4459           (          asm.asm):01868                 FCC     'LDY'
2CE9 848E9EAEBE       (          asm.asm):01869                 FCB     $84,$8E,$9E,$AE,$BE
2CEE 4C425241         (          asm.asm):01870                 FCC     'LBRA'
2CF2 8816CFCFCF       (          asm.asm):01871                 FCB     $88,$16,$CF,$CF,$CF
2CF7 50554C53         (          asm.asm):01872                 FCC     'PULS'
2CFB 8935CFCFCF       (          asm.asm):01873                 FCB     $89,$35,$CF,$CF,$CF
2D00 50554C55         (          asm.asm):01874                 FCC     'PULU'
2D04 8937CFCFCF       (          asm.asm):01875                 FCB     $89,$37,$CF,$CF,$CF
2D09 50534853         (          asm.asm):01876                 FCC     'PSHS'
2D0D 8934CFCFCF       (          asm.asm):01877                 FCB     $89,$34,$CF,$CF,$CF
2D12 50534855         (          asm.asm):01878                 FCC     'PSHU'
2D16 8936CFCFCF       (          asm.asm):01879                 FCB     $89,$36,$CF,$CF,$CF
2D1B 525453           (          asm.asm):01880                 FCC     'RTS'
2D1E 8139000000       (          asm.asm):01881                 FCB     $81,$39,0,0,0
2D23 544652           (          asm.asm):01882                 FCC     'TFR'
2D26 8A1FCFCFCF       (          asm.asm):01883                 FCB     $8A,$1F,$CF,$CF,$CF
2D2B 535352           (          asm.asm):01884                 FCC     'SSR'
2D2E 923F000000       (          asm.asm):01885                 FCB     $92,$3F,0,0,0
2D33 464342           (          asm.asm):01886                 FCC     'FCB'
2D36 8E00000000       (          asm.asm):01887                 FCB     $8E,0,0,0,0
2D3B 464442           (          asm.asm):01888                 FCC     'FDB'
2D3E 8F00000000       (          asm.asm):01889                 FCB     $8F,0,0,0,0
2D43 464343           (          asm.asm):01890                 FCC     'FCC'
2D46 9000000000       (          asm.asm):01891                 FCB     $90,0,0,0,0
2D4B 4643435A         (          asm.asm):01892                 FCC     'FCCZ'
2D4F 9100000000       (          asm.asm):01893                 FCB     $91,0,0,0,0
2D54 41534C41         (          asm.asm):01894                 FCC     'ASLA'
2D58 8148000000       (          asm.asm):01895                 FCB     $81,$48,0,0,0
2D5D 41534C42         (          asm.asm):01896                 FCC     'ASLB'
2D61 8158000000       (          asm.asm):01897                 FCB     $81,$58,0,0,0
2D66 41535241         (          asm.asm):01898                 FCC     'ASRA'
2D6A 8147000000       (          asm.asm):01899                 FCB     $81,$47,0,0,0
2D6F 41535242         (          asm.asm):01900                 FCC     'ASRB'
2D73 8157000000       (          asm.asm):01901                 FCB     $81,$57,0,0,0
2D78 434C5241         (          asm.asm):01902                 FCC     'CLRA'
2D7C 814F000000       (          asm.asm):01903                 FCB     $81,$4F,0,0,0
2D81 434C5242         (          asm.asm):01904                 FCC     'CLRB'
2D85 815F000000       (          asm.asm):01905                 FCB     $81,$5F,0,0,0
2D8A 434F4D41         (          asm.asm):01906                 FCC     'COMA'
2D8E 8143000000       (          asm.asm):01907                 FCB     $81,$43,0,0,0
2D93 434F4D42         (          asm.asm):01908                 FCC     'COMB'
2D97 8153000000       (          asm.asm):01909                 FCB     $81,$53,0,0,0
2D9C 444141           (          asm.asm):01910                 FCC     'DAA'
2D9F 8119000000       (          asm.asm):01911                 FCB     $81,$19,0,0,0
2DA4 4C534C41         (          asm.asm):01912                 FCC     'LSLA'
2DA8 8148000000       (          asm.asm):01913                 FCB     $81,$48,0,0,0
2DAD 4C534C42         (          asm.asm):01914                 FCC     'LSLB'
2DB1 8158000000       (          asm.asm):01915                 FCB     $81,$58,0,0,0
2DB6 4C535241         (          asm.asm):01916                 FCC     'LSRA'
2DBA 8144000000       (          asm.asm):01917                 FCB     $81,$44,0,0,0
2DBF 4C535242         (          asm.asm):01918                 FCC     'LSRB'
2DC3 8154000000       (          asm.asm):01919                 FCB     $81,$54,0,0,0
2DC8 4D554C           (          asm.asm):01920                 FCC     'MUL'
2DCB 813D000000       (          asm.asm):01921                 FCB     $81,$3D,0,0,0
2DD0 4E454741         (          asm.asm):01922                 FCC     'NEGA'
2DD4 8140000000       (          asm.asm):01923                 FCB     $81,$40,0,0,0
2DD9 4E454742         (          asm.asm):01924                 FCC     'NEGB'
2DDD 8150000000       (          asm.asm):01925                 FCB     $81,$50,0,0,0
2DE2 524F4C41         (          asm.asm):01926                 FCC     'ROLA'
2DE6 8149000000       (          asm.asm):01927                 FCB     $81,$49,0,0,0
2DEB 524F4C42         (          asm.asm):01928                 FCC     'ROLB'
2DEF 8159000000       (          asm.asm):01929                 FCB     $81,$59,0,0,0
2DF4 524F5241         (          asm.asm):01930                 FCC     'RORA'
2DF8 8146000000       (          asm.asm):01931                 FCB     $81,$46,0,0,0
2DFD 524F5242         (          asm.asm):01932                 FCC     'RORB'
2E01 8156000000       (          asm.asm):01933                 FCB     $81,$56,0,0,0
2E06 525449           (          asm.asm):01934                 FCC     'RTI'
2E09 813B000000       (          asm.asm):01935                 FCB     $81,$3B,0,0,0
2E0E 534558           (          asm.asm):01936                 FCC     'SEX'
2E11 811D000000       (          asm.asm):01937                 FCB     $81,$1D,0,0,0
2E16 535749           (          asm.asm):01938                 FCC     'SWI'
2E19 813F000000       (          asm.asm):01939                 FCB     $81,$3F,0,0,0
2E1E 53574932         (          asm.asm):01940                 FCC     'SWI2'
2E22 81103F0000       (          asm.asm):01941                 FCB     $81,$10,$3F,0,0
2E27 53574933         (          asm.asm):01942                 FCC     'SWI3'
2E2B 81113F0000       (          asm.asm):01943                 FCB     $81,$11,$3F,0,0
2E30 53594E43         (          asm.asm):01944                 FCC     'SYNC'
2E34 8113000000       (          asm.asm):01945                 FCB     $81,$13,0,0,0
2E39 54535441         (          asm.asm):01946                 FCC     'TSTA'
2E3D 814D000000       (          asm.asm):01947                 FCB     $81,$4D,0,0,0
2E42 54535442         (          asm.asm):01948                 FCC     'TSTB'
2E46 815D000000       (          asm.asm):01949                 FCB     $81,$5D,0,0,0
2E4B 41444341         (          asm.asm):01950                 FCC     'ADCA'
2E4F 828999A9B9       (          asm.asm):01951                 FCB     $82,$89,$99,$A9,$B9
2E54 41444342         (          asm.asm):01952                 FCC     'ADCB'
2E58 82C9D9E9F9       (          asm.asm):01953                 FCB     $82,$C9,$D9,$E9,$F9
2E5D 41444441         (          asm.asm):01954                 FCC     'ADDA'
2E61 828B9BABBB       (          asm.asm):01955                 FCB     $82,$8B,$9B,$AB,$BB
2E66 41444442         (          asm.asm):01956                 FCC     'ADDB'
2E6A 82CBDBEBFB       (          asm.asm):01957                 FCB     $82,$CB,$DB,$EB,$FB
2E6F 41444444         (          asm.asm):01958                 FCC     'ADDD'
2E73 83C3D3E3F3       (          asm.asm):01959                 FCB     $83,$C3,$D3,$E3,$F3
2E78 414E4441         (          asm.asm):01960                 FCC     'ANDA'
2E7C 828494A4B4       (          asm.asm):01961                 FCB     $82,$84,$94,$A4,$B4
2E81 414E4442         (          asm.asm):01962                 FCC     'ANDB'
2E85 82C4D4E4F4       (          asm.asm):01963                 FCB     $82,$C4,$D4,$E4,$F4
2E8A 414E444343       (          asm.asm):01964                 FCC     'ANDCC'
2E8F 821CCFCFCF       (          asm.asm):01965                 FCB     $82,$1C,$CF,$CF,$CF
2E94 41534C           (          asm.asm):01966                 FCC     'ASL'
2E97 82CF086878       (          asm.asm):01967                 FCB     $82,$CF,$08,$68,$78
2E9C 415352           (          asm.asm):01968                 FCC     'ASR'
2E9F 82CF076777       (          asm.asm):01969                 FCB     $82,$CF,$07,$67,$77
2EA4 42495441         (          asm.asm):01970                 FCC     'BITA'
2EA8 828595A5B5       (          asm.asm):01971                 FCB     $82,$85,$95,$A5,$B5
2EAD 42495442         (          asm.asm):01972                 FCC     'BITB'
2EB1 82C5D5E5F5       (          asm.asm):01973                 FCB     $82,$C5,$D5,$E5,$F5
2EB6 434C52           (          asm.asm):01974                 FCC     'CLR'
2EB9 82CF0F6F7F       (          asm.asm):01975                 FCB     $82,$CF,$0F,$6F,$7F
2EBE 434D5042         (          asm.asm):01976                 FCC     'CMPB'
2EC2 82C1D1E1F1       (          asm.asm):01977                 FCB     $82,$C1,$D1,$E1,$F1
2EC7 434D5058         (          asm.asm):01978                 FCC     'CMPX'
2ECB 838C9CACBC       (          asm.asm):01979                 FCB     $83,$8C,$9C,$AC,$BC
2ED0 434F4D           (          asm.asm):01980                 FCC     'COM'
2ED3 82CF036373       (          asm.asm):01981                 FCB     $82,$CF,$03,$63,$73
2ED8 43574149         (          asm.asm):01982                 FCC     'CWAI'
2EDC 823CCFCFCF       (          asm.asm):01983                 FCB     $82,$3C,$CF,$CF,$CF
2EE1 444543           (          asm.asm):01984                 FCC     'DEC'
2EE4 82CF0A6A7A       (          asm.asm):01985                 FCB     $82,$CF,$0A,$6A,$7A
2EE9 454F5241         (          asm.asm):01986                 FCC     'EORA'
2EED 828898A8B8       (          asm.asm):01987                 FCB     $82,$88,$98,$A8,$B8
2EF2 454F5242         (          asm.asm):01988                 FCC     'EORB'
2EF6 82C8D8E8F8       (          asm.asm):01989                 FCB     $82,$C8,$D8,$E8,$F8
2EFB 494E43           (          asm.asm):01990                 FCC     'INC'
2EFE 82CF0C6C7C       (          asm.asm):01991                 FCB     $82,$CF,$0C,$6C,$7C
2F03 4A4D50           (          asm.asm):01992                 FCC     'JMP'
2F06 83CF0E6E7E       (          asm.asm):01993                 FCB     $83,$CF,$0E,$6E,$7E
2F0B 4A5352           (          asm.asm):01994                 FCC     'JSR'
2F0E 83CF9DADBD       (          asm.asm):01995                 FCB     $83,$CF,$9D,$AD,$BD
2F13 4C4455           (          asm.asm):01996                 FCC     'LDU'
2F16 83CEDEEEFE       (          asm.asm):01997                 FCB     $83,$CE,$DE,$EE,$FE
2F1B 4C454153         (          asm.asm):01998                 FCC     'LEAS'
2F1F 82CFCF32CF       (          asm.asm):01999                 FCB     $82,$CF,$CF,$32,$CF
2F24 4C454155         (          asm.asm):02000                 FCC     'LEAU'
2F28 82CFCF33CF       (          asm.asm):02001                 FCB     $82,$CF,$CF,$33,$CF
2F2D 4C454158         (          asm.asm):02002                 FCC     'LEAX'
2F31 82CFCF30CF       (          asm.asm):02003                 FCB     $82,$CF,$CF,$30,$CF
2F36 4C454159         (          asm.asm):02004                 FCC     'LEAY'
2F3A 82CFCF31CF       (          asm.asm):02005                 FCB     $82,$CF,$CF,$31,$CF
2F3F 4C534C           (          asm.asm):02006                 FCC     'LSL'
2F42 82CF086878       (          asm.asm):02007                 FCB     $82,$CF,$08,$68,$78
2F47 4C5352           (          asm.asm):02008                 FCC     'LSR'
2F4A 82CF046474       (          asm.asm):02009                 FCB     $82,$CF,$04,$64,$74
2F4F 4E4547           (          asm.asm):02010                 FCC     'NEG'
2F52 82CF006070       (          asm.asm):02011                 FCB     $82,$CF,$00,$60,$70
2F57 4F5241           (          asm.asm):02012                 FCC     'ORA'
2F5A 828A9AAABA       (          asm.asm):02013                 FCB     $82,$8A,$9A,$AA,$BA
2F5F 4F5242           (          asm.asm):02014                 FCC     'ORB'
2F62 82CADAEAFA       (          asm.asm):02015                 FCB     $82,$CA,$DA,$EA,$FA
2F67 4F524343         (          asm.asm):02016                 FCC     'ORCC'
2F6B 821ACFCFCF       (          asm.asm):02017                 FCB     $82,$1A,$CF,$CF,$CF
2F70 524F4C           (          asm.asm):02018                 FCC     'ROL'
2F73 82CF096979       (          asm.asm):02019                 FCB     $82,$CF,$09,$69,$79
2F78 524F52           (          asm.asm):02020                 FCC     'ROR'
2F7B 82CF066676       (          asm.asm):02021                 FCB     $82,$CF,$06,$66,$76
2F80 53424341         (          asm.asm):02022                 FCC     'SBCA'
2F84 828292A2B2       (          asm.asm):02023                 FCB     $82,$82,$92,$A2,$B2
2F89 53424342         (          asm.asm):02024                 FCC     'SBCB'
2F8D 82C2D2E2F2       (          asm.asm):02025                 FCB     $82,$C2,$D2,$E2,$F2
2F92 535455           (          asm.asm):02026                 FCC     'STU'
2F95 83CFDFEFFF       (          asm.asm):02027                 FCB     $83,$CF,$DF,$EF,$FF
2F9A 53554241         (          asm.asm):02028                 FCC     'SUBA'
2F9E 828090A0B0       (          asm.asm):02029                 FCB     $82,$80,$90,$A0,$B0
2FA3 53554242         (          asm.asm):02030                 FCC     'SUBB'
2FA7 82C0D0E0F0       (          asm.asm):02031                 FCB     $82,$C0,$D0,$E0,$F0
2FAC 53554244         (          asm.asm):02032                 FCC     'SUBD'
2FB0 838393A3B3       (          asm.asm):02033                 FCB     $83,$83,$93,$A3,$B3
2FB5 545354           (          asm.asm):02034                 FCC     'TST'
2FB8 82CF0D6D7D       (          asm.asm):02035                 FCB     $82,$CF,$0D,$6D,$7D
2FBD 434D5044         (          asm.asm):02036                 FCC     'CMPD'
2FC1 848393A3B3       (          asm.asm):02037                 FCB     $84,$83,$93,$A3,$B3
2FC6 434D5059         (          asm.asm):02038                 FCC     'CMPY'
2FCA 848C9CACBC       (          asm.asm):02039                 FCB     $84,$8C,$9C,$AC,$BC
2FCF 434D5053         (          asm.asm):02040                 FCC     'CMPS'
2FD3 858C9CACBC       (          asm.asm):02041                 FCB     $85,$8C,$9C,$AC,$BC
2FD8 434D5055         (          asm.asm):02042                 FCC     'CMPU'
2FDC 858393A3B3       (          asm.asm):02043                 FCB     $85,$83,$93,$A3,$B3
2FE1 4C4453           (          asm.asm):02044                 FCC     'LDS'
2FE4 84CEDEEEFE       (          asm.asm):02045                 FCB     $84,$CE,$DE,$EE,$FE
2FE9 535453           (          asm.asm):02046                 FCC     'STS'
2FEC 84CFDFEFFF       (          asm.asm):02047                 FCB     $84,$CF,$DF,$EF,$FF
2FF1 535459           (          asm.asm):02048                 FCC     'STY'
2FF4 84CF9FAFBF       (          asm.asm):02049                 FCB     $84,$CF,$9F,$AF,$BF
2FF9 42524E           (          asm.asm):02050                 FCC     'BRN'
2FFC 8621CFCFCF       (          asm.asm):02051                 FCB     $86,$21,$CF,$CF,$CF
3001 424849           (          asm.asm):02052                 FCC     'BHI'
3004 8622CFCFCF       (          asm.asm):02053                 FCB     $86,$22,$CF,$CF,$CF
3009 424C53           (          asm.asm):02054                 FCC     'BLS'
300C 8623CFCFCF       (          asm.asm):02055                 FCB     $86,$23,$CF,$CF,$CF
3011 424853           (          asm.asm):02056                 FCC     'BHS'
3014 8624CFCFCF       (          asm.asm):02057                 FCB     $86,$24,$CF,$CF,$CF
3019 424343           (          asm.asm):02058                 FCC     'BCC'
301C 8624CFCFCF       (          asm.asm):02059                 FCB     $86,$24,$CF,$CF,$CF
3021 424C4F           (          asm.asm):02060                 FCC     'BLO'
3024 8625CFCFCF       (          asm.asm):02061                 FCB     $86,$25,$CF,$CF,$CF
3029 424353           (          asm.asm):02062                 FCC     'BCS'
302C 8625CFCFCF       (          asm.asm):02063                 FCB     $86,$25,$CF,$CF,$CF
3031 425643           (          asm.asm):02064                 FCC     'BVC'
3034 8628CFCFCF       (          asm.asm):02065                 FCB     $86,$28,$CF,$CF,$CF
3039 425653           (          asm.asm):02066                 FCC     'BVS'
303C 8629CFCFCF       (          asm.asm):02067                 FCB     $86,$29,$CF,$CF,$CF
3041 42504C           (          asm.asm):02068                 FCC     'BPL'
3044 862ACFCFCF       (          asm.asm):02069                 FCB     $86,$2A,$CF,$CF,$CF
3049 424D49           (          asm.asm):02070                 FCC     'BMI'
304C 862BCFCFCF       (          asm.asm):02071                 FCB     $86,$2B,$CF,$CF,$CF
3051 424745           (          asm.asm):02072                 FCC     'BGE'
3054 862CCFCFCF       (          asm.asm):02073                 FCB     $86,$2C,$CF,$CF,$CF
3059 424C54           (          asm.asm):02074                 FCC     'BLT'
305C 862DCFCFCF       (          asm.asm):02075                 FCB     $86,$2D,$CF,$CF,$CF
3061 424754           (          asm.asm):02076                 FCC     'BGT'
3064 862ECFCFCF       (          asm.asm):02077                 FCB     $86,$2E,$CF,$CF,$CF
3069 424C45           (          asm.asm):02078                 FCC     'BLE'
306C 862FCFCFCF       (          asm.asm):02079                 FCB     $86,$2F,$CF,$CF,$CF
3071 425352           (          asm.asm):02080                 FCC     'BSR'
3074 868DCFCFCF       (          asm.asm):02081                 FCB     $86,$8D,$CF,$CF,$CF
3079 4C42524E         (          asm.asm):02082                 FCC     'LBRN'
307D 871021CFCF       (          asm.asm):02083                 FCB     $87,$10,$21,$CF,$CF
3082 4C424849         (          asm.asm):02084                 FCC     'LBHI'
3086 871022CFCF       (          asm.asm):02085                 FCB     $87,$10,$22,$CF,$CF
308B 4C424C53         (          asm.asm):02086                 FCC     'LBLS'
308F 871023CFCF       (          asm.asm):02087                 FCB     $87,$10,$23,$CF,$CF
3094 4C424853         (          asm.asm):02088                 FCC     'LBHS'
3098 871024CFCF       (          asm.asm):02089                 FCB     $87,$10,$24,$CF,$CF
309D 4C424343         (          asm.asm):02090                 FCC     'LBCC'
30A1 871024CFCF       (          asm.asm):02091                 FCB     $87,$10,$24,$CF,$CF
30A6 4C424C4F         (          asm.asm):02092                 FCC     'LBLO'
30AA 871025CFCF       (          asm.asm):02093                 FCB     $87,$10,$25,$CF,$CF
30AF 4C424353         (          asm.asm):02094                 FCC     'LBCS'
30B3 871025CFCF       (          asm.asm):02095                 FCB     $87,$10,$25,$CF,$CF
30B8 4C424E45         (          asm.asm):02096                 FCC     'LBNE'
30BC 871026CFCF       (          asm.asm):02097                 FCB     $87,$10,$26,$CF,$CF
30C1 4C424551         (          asm.asm):02098                 FCC     'LBEQ'
30C5 871027CFCF       (          asm.asm):02099                 FCB     $87,$10,$27,$CF,$CF
30CA 4C425643         (          asm.asm):02100                 FCC     'LBVC'
30CE 871028CFCF       (          asm.asm):02101                 FCB     $87,$10,$28,$CF,$CF
30D3 4C425653         (          asm.asm):02102                 FCC     'LBVS'
30D7 871029CFCF       (          asm.asm):02103                 FCB     $87,$10,$29,$CF,$CF
30DC 4C42504C         (          asm.asm):02104                 FCC     'LBPL'
30E0 87102ACFCF       (          asm.asm):02105                 FCB     $87,$10,$2A,$CF,$CF
30E5 4C424D49         (          asm.asm):02106                 FCC     'LBMI'
30E9 87102BCFCF       (          asm.asm):02107                 FCB     $87,$10,$2B,$CF,$CF
30EE 4C424745         (          asm.asm):02108                 FCC     'LBGE'
30F2 87102CCFCF       (          asm.asm):02109                 FCB     $87,$10,$2C,$CF,$CF
30F7 4C424C54         (          asm.asm):02110                 FCC     'LBLT'
30FB 87102DCFCF       (          asm.asm):02111                 FCB     $87,$10,$2D,$CF,$CF
3100 4C424754         (          asm.asm):02112                 FCC     'LBGT'
3104 87102ECFCF       (          asm.asm):02113                 FCB     $87,$10,$2E,$CF,$CF
3109 4C424C45         (          asm.asm):02114                 FCC     'LBLE'
310D 87102FCFCF       (          asm.asm):02115                 FCB     $87,$10,$2F,$CF,$CF
3112 455847           (          asm.asm):02116                 FCC     'EXG'
3115 8A1ECFCFCF       (          asm.asm):02117                 FCB     $8A,$1E,$CF,$CF,$CF
311A 455155           (          asm.asm):02118                 FCC     'EQU'
311D 8B00000000       (          asm.asm):02119                 FCB     $8B,0,0,0,0
3122 4F5247           (          asm.asm):02120                 FCC     'ORG'
3125 8C00000000       (          asm.asm):02121                 FCB     $8C,0,0,0,0
312A 524D42           (          asm.asm):02122                 FCC     'RMB'
312D 8D00000000       (          asm.asm):02123                 FCB     $8D,0,0,0,0
3132 5345544450       (          asm.asm):02124                 FCC     'SETDP'
3137 9300000000       (          asm.asm):02125                 FCB     $93,0,0,0,0
313C 414258           (          asm.asm):02126                 FCC     'ABX'
313F 813A000000       (          asm.asm):02127                 FCB     $81,$3A,0,0,0
3144 4E4F50           (          asm.asm):02128                 FCC     'NOP'
3147 8112000000       (          asm.asm):02129                 FCB     $81,$12,0,0,0
314C 50414745         (          asm.asm):02130                 FCC     'PAGE'
3150 9400000000       (          asm.asm):02131                 FCB     $94,0,0,0,0
3155 5449544C45       (          asm.asm):02132                 FCC     'TITLE'
315A 9500000000       (          asm.asm):02133                 FCB     $95,0,0,0,0
315F 00               (          asm.asm):02134                 FCB     0                                 ;END OF TABLE
                      (          asm.asm):02135         ;*
                      (          asm.asm):02136         ;* QUALIFIER TABLE
                      (          asm.asm):02137         ;*
3160                  (          asm.asm):02138         QTABLE
3160 82               (          asm.asm):02139                 FCB     $82
3161 2F5445524D       (          asm.asm):02140                 FCC     '/TERM'
3166 82               (          asm.asm):02141                 FCB     $82
3167 2F46415354       (          asm.asm):02142                 FCC     '/FAST'
316C 82               (          asm.asm):02143                 FCB     $82
316D 2F4552524F52     (          asm.asm):02144                 FCC     '/ERROR'
3173 82               (          asm.asm):02145                 FCB     $82
3174 2F53594D424F4C   (          asm.asm):02146                 FCC     '/SYMBOL'
317B 82               (          asm.asm):02147                 FCB     $82
317C 2F5155494554     (          asm.asm):02148                 FCC     '/QUIET'
3182 80               (          asm.asm):02149                 FCB     $80
     0005             (          asm.asm):02150         QMAX            EQU 5                             ;NUMBER OF QUALIFIERS
                      (          asm.asm):02151         ;* QUALIFIER FLAG TABLE
3183                  (          asm.asm):02152         TERM
3183 FF               (          asm.asm):02153                 FCB     $FF                               ;FLAG FOR NO LISTING
3184                  (          asm.asm):02154         DEBUG
3184 FF               (          asm.asm):02155                 FCB     $FF                               ;DEBUGGING FLAG
3185                  (          asm.asm):02156         ERR
3185 FF               (          asm.asm):02157                 FCB     $FF                               ;ERROR ONLY OUTPUT FLAG
3186                  (          asm.asm):02158         SYM
3186 FF               (          asm.asm):02159                 FCB     $FF                               ;SYMBOL TABLE OUTPUT
3187                  (          asm.asm):02160         QUIET
3187 FF               (          asm.asm):02161                 FCB     $FF

Symbol Table:
[ G] ABORT                            2679
[ G] ACCAOF                           274F
[ G] ACCBOF                           2753
[ G] ADDFCB                           222C
[ G] ADDOUT                           278A
[ G] ADDREG                           275F
[ G] ASM                              2000
[ G] BADHEX                           28FC
[ G] BADSTR                           2921
[ G] BIT16                            286B
[ G] BIT5                             2836
[ G] BIT8                             2854
[ G] BITEXT                           2872
[ G] CALOFF                           27CC
[ G] CLLST                            265B
[ G] CLOBJ                            2665
[ G] CODE                             4055
[ G] CPYN1                            20B8
[ G] CPYNAM                           20AF
[ G] CURDP                            400A
[ G] CURPC                            4008
[ G] DEBUG                            3184
[ G] DSPERR                           2A34
[ G] DSPLIN                           23F5
[ G] DSPSY                            261B
[ G] DSPTTL                           2AF4
[ G] DSPX1                            2619
[ G] DSQU1                            207B
[ G] DUPSYM                           2B3D
[ G] EMSG                             4015
[ G] EMSG1                            2B32
[ G] EMSG2                            2B54
[ G] ENDMSG                           2A79
[ G] ENDSY                            2656
[ G] ENTTL                            2B13
[ G] ERR                              3185
[ G] ERRMSG                           2B90
[ G] ERRORS                           4002
[ G] ERRSUM                           2B58
[ G] EVAERR                           29D7
[ G] EVAL                             295D
[ G] EVAL1                            2962
[ G] EVAL2                            2964
[ G] EVEXIT                           296B
[ G] EVLIND                           2735
[ G] F1                               2495
[ G] F2                               24EB
[ G] FCBLEN                           2229
[ G] FCC1                             2254
[ G] FCCCHR                           257B
[ G] FCCEND                           2598
[ G] FCCLEN                           2248
[ G] FCCM                             2584
[ G] FILPTR                           4000
[ G] FILSP                            262F
[ G] FIXSYM                           2186
[ G] FNCOM                            24AE
[ G] FNDREG                           2487
[ G] FNDSPC                           230D
[ G] FNTREG                           24E4
[ G] GENLI1                           237D
[ G] GENLIS                           235B
[ G] GETB1                            28C8
[ G] GETBIN                           28C4
[ G] GETC1                            290B
[ G] GETCHR                           2907
[ G] GETD1                            2934
[ G] GETDEC                           292A
[ G] GETEN1                           2896
[ G] GETEND                           2901
[ G] GETH1                            28A2
[ G] GETH2                            28B7
[ G] GETHEX                           2899
[ G] GETO1                            28E2
[ G] GETOCT                           28DE
[ G] GETPC                            294E
[ G] GETSYM                           2956
[ G] GETV1                            2882
[ G] GETV2                            288E
[ G] GETVAL                           2876
[ G] GOABO                            208B
[ G] GOASM                            203B
[ G] GOINS                            2317
[ G] IMATCH                           26A2
[ G] INDFLG                           4017
[ G] INFIL                            4159
[ G] INITS                            20DE
[ G] INSREG                           2759
[ G] INSTAB                           2C58
[ G] INSYM                            214C
[ G] INVSTR                           2593
[ G] ITYPE                            4018
[ G] L1                               2103
[ G] LINE                             40A5
[ G] LINUM                            400E
[ G] LISO1                            238F
[ G] LISO2                            23A5
[ G] LISO3                            23AA
[ G] LISO4                            23B8
[ G] LISO5                            23BA
[ G] LISOUT                           2387
[ G] LKMSG                            2A58
[ G] LOC1                             2681
[ G] LOC2                             2683
[ G] LOC3                             268E
[ G] LOC4                             268C
[ G] LOCINS                           267B
[ G] LOCSY1                           26B8
[ G] LOCSYM                           26B5
[ G] LSTFIL                           4363
[ G] LSTOUT                           2AAA
[ G] MAIN                             2094
[ G] MEMOP                            26F6
[ G] NEWL                             260B
[ G] NOACC                            27FF
[ G] NOADJ                            24AA
[ G] NOAINC                           27AD
[ G] NOATJ                            2502
[ G] NOAUT                            2776
[ G] NODIR                            271F
[ G] NOERR                            2A67
[ G] NOEXT                            2712
[ G] NOIMM                            2705
[ G] NOM1                             22B9
[ G] NOM2                             25D9
[ G] NOPOST                           241C
[ G] NOROUT                           2A99
[ G] NOSET                            2A33
[ G] NOSUM                            25F6
[ G] NOSY1                            26DF
[ G] NOTIND                           2733
[ G] NOTS                             2493
[ G] NOTTAB                           22F5
[ G] NPIMM                            21E7
[ G] NS                               26DA
[ G] NS1                              23CD
[ G] NS2                              23D6
[ G] NS3                              23DF
[ G] NS4                              23E8
[ G] NTTL                             2B31
[ G] OADR                             2640
[ G] OBJFIL                           456D
[ G] OFF16                            27DF
[ G] OFF8                             27EE
[ G] OFFVAL                           280C
[ G] ONEBYT                           21D9
[ G] OPTA                             2299
[ G] OPTMIZ                           2274
[ G] OSRAM                            2000
[ G] OSYM                             2621
[ G] OUTASC                           2A84
[ G] OUTSYS                           215F
[ G] P1T1                             21D3
[ G] P1T11                            21FE
[ G] P1T12                            2214
[ G] P1T13                            221C
[ G] P1T14                            2223
[ G] P1T15                            223A
[ G] P1T16                            2242
[ G] P1T17                            2264
[ G] P1T19                            226D
[ G] P1T2                             21E0
[ G] P1T3                             21EB
[ G] P1T7                             21F6
[ G] P1T8                             21FA
[ G] P1TAB                            21A9
[ G] P21                              22DF
[ G] P2LIN                            22DA
[ G] P2T1                             2353
[ G] P2T10                            24C9
[ G] P2T11                            2515
[ G] P2T12                            252C
[ G] P2T13                            254D
[ G] P2T14                            255C
[ G] P2T15                            256A
[ G] P2T16                            2577
[ G] P2T17                            2599
[ G] P2T18                            259F
[ G] P2T19                            25AA
[ G] P2T2                             2404
[ G] P2T20                            25B1
[ G] P2T21                            25B6
[ G] P2T3                             242F
[ G] P2T4                             2434
[ G] P2T5                             243A
[ G] P2T6                             2440
[ G] P2T7                             2461
[ G] P2T8                             2471
[ G] P2T9                             2481
[ G] P2TAB                            2329
[ G] PAGE                             4010
[ G] PAGLIN                           4012
[ G] PAGM1                            2B76
[ G] PAGM2                            2B89
[ G] PASS1                            20FB
[ G] PASS2                            22A2
[ G] PCREL                            27AE
[ G] PLI1                             2219
[ G] PLINE                            20FF
[ G] PNIMM                            240B
[ G] POPERR                           2505
[ G] POST                             4016
[ G] POTAB                            24C1
[ G] PRCACC                           2755
[ G] QERR                             2063
[ G] QMAX                             0005
[ G] QTABLE                           3160
[ G] QUAL                             204D
[ G] QUIET                            3187
[ G] QUIT                             25C4
[ G] RAM                              4000
[ G] RAMHB                            0040
[ G] RANOK                            245D
[ G] RDINP                            2AD8
[ G] REGERR                           27FA
[ G] S1                               220C
[ G] SAVCHR                           2110
[ G] SAVP1                            2221
[ G] SAVPC                            21DB
[ G] SAVPOS                           27A9
[ G] SETERR                           2A2D
[ G] SETRGB                           2774
[ G] SETSYM                           2210
[ G] SKIP                             26AC
[ G] SKPL1                            219D
[ G] SKPLAB                           219A
[ G] SKRST                            2637
[ G] SMATCH                           26EA
[ G] SPACE                            2A69
[ G] STAB1                            22EC
[ G] STACK                            4159
[ G] STLST                            2AA8
[ G] STRERR                           2261
[ G] SYM                              3186
[ G] SYM2                             26BA
[ G] SYM3                             26CD
[ G] SYMCR                            2169
[ G] SYMLOC                           400C
[ G] SYMM                             217D
[ G] SYMMSG                           2B67
[ G] SYMOK                            2177
[ G] SYMTAB                           4777
[ G] SYOFF                            26D1
[ G] T2E                              242C
[ G] T3E                              24B7
[ G] T4E                              2567
[ G] TEMP                             4006
[ G] TERM                             3183
[ G] TFRE1                            24BC
[ G] TFRERR                           24BA
[ G] TFRTAB                           2509
[ G] TITL1                            25B9
[ G] TITLE                            4019
[ G] TOPERR                           2503
[ G] TRYADD                           296F
[ G] TRYAND                           29B9
[ G] TRYDIV                           2994
[ G] TRYMOD                           299F
[ G] TRYMUL                           2989
[ G] TRYOR                            29AA
[ G] TRYSUB                           297C
[ G] TRYXOR                           29C8
[ G] TSTEND                           2A15
[ G] TSTERM                           2A16
[ G] TSTEXP                           29E1
[ G] TWOBYT                           21D7
[ G] TYP4                             21F0
[ G] USEXT                            2832
[ G] VAL1                             4004
[ G] VALUE                            4013
[ G] WRAD1                            2518
[ G] WRCADR                           2537
[ G] WRDE1                            2ABD
[ G] WRDE2                            2ACB
[ G] WRIBYT                           2A7A
[ G] WRICHR                           2A8E
[ G] WRIDEC                           2AB5
[ G] WRIMSG                           2A71
[ G] WRIOBB                           2AE1
[ G] WRIOBJ                           2AE7
[ G] WRTTL                            2B07
