                      (         calc.asm):00001         ;*
                      (         calc.asm):00002         ;* CALC: Simple Programmers Desk Calculator
                      (         calc.asm):00003         ;*
                      (         calc.asm):00004         ;* Copyright 1983-2005 Dave Dunfield
                      (         calc.asm):00005         ;* All rights reserved.
                      (         calc.asm):00006         ;*
     2000             (         calc.asm):00007         OSRAM           = $2000       APPLICATION RAM AREA
     DBFF             (         calc.asm):00008         OSEND           = $DBFF       END OF GENERAL RAM
     D000             (         calc.asm):00009         OSUTIL          = $D000       UTILITY ADDRESS SPACE
                      (         calc.asm):00010                 ORG     OSUTIL
D000                  (         calc.asm):00011         CALC
D000 10FFD203         (         calc.asm):00012                 STS     SAVSTK                            ;SAVE STACK POINTER
D004 3F               (         calc.asm):00013                 SWI
D005 04               (         calc.asm):00014                 FCB     4                                 ;TEST FOR OPERAND
D006 2615             (         calc.asm):00015                 BNE     OPSUP                             ;OPERAND WAS SUPPLIED
D008 7AD202           (         calc.asm):00016                 DEC     FLAG                              ;SET INTERACTIVE FLAG
D00B                  (         calc.asm):00017         CALC1
D00B 3F               (         calc.asm):00018                 SWI
D00C 18               (         calc.asm):00019                 FCB     24                                ;OUTPUT PROMPT
D00D 43616C633E00     (         calc.asm):00020                 FCN     'Calc>'                           ;STRING TO OUTPUT
D013 3F               (         calc.asm):00021                 SWI
D014 03               (         calc.asm):00022                 FCB     3                                 ;GET LINE OF INPUT
D015 3F               (         calc.asm):00023                 SWI
D016 04               (         calc.asm):00024                 FCB     4                                 ;TEST FOR OPERAND SUPPLIED
D017 271E             (         calc.asm):00025                 BEQ     CLEND                             ;IF NOT, QUIT
D019 8D06             (         calc.asm):00026                 BSR     OPSUP1                            ;CALCULATE AND DISPLAY
D01B 20EE             (         calc.asm):00027                 BRA     CALC1                             ;BACK FOR MORE
                      (         calc.asm):00028         ;* AN OPERAND WAS SUPPLIED
D01D                  (         calc.asm):00029         OPSUP
D01D 813F             (         calc.asm):00030                 CMPA    #'?'                              ;HELP WANTED?
D01F 2718             (         calc.asm):00031                 BEQ     HELP                              ;IF SO, GIVE IT TO HIM
                      (         calc.asm):00032         ;* EVALUATE EXPRESSIONS, AND DISPLAY RESULTS
D021                  (         calc.asm):00033         OPSUP1
D021 170127           (         calc.asm):00034                 LBSR    EVAL                              ;EVALUATE OPERANDS
D024 3406             (         calc.asm):00035                 PSHS    A,B                               ;SAVE RESULT
D026 3F               (         calc.asm):00036                 SWI
D027 1A               (         calc.asm):00037                 FCB     26                                ;OUTPUT RESULT IN DCIMAL
D028 3F               (         calc.asm):00038                 SWI
D029 18               (         calc.asm):00039                 FCB     24                                ;OUTPUT MESSAGE
D02A 202400           (         calc.asm):00040                 FCN     ' $'                              ;MESSAGE TO OUTPUT
D02D 3506             (         calc.asm):00041                 PULS    A,B                               ;RESTORE VALUE
D02F 3F               (         calc.asm):00042                 SWI
D030 1B               (         calc.asm):00043                 FCB     27                                ;OUTPUT IN HEX
D031 3F               (         calc.asm):00044                 SWI
D032 16               (         calc.asm):00045                 FCB     22                                ;NEW LINE
D033 3F               (         calc.asm):00046                 SWI
D034 04               (         calc.asm):00047                 FCB     4                                 ;TEST MORE
D035 26EA             (         calc.asm):00048                 BNE     OPSUP1                            ;AND CONTINUE
D037                  (         calc.asm):00049         CLEND
D037 4F               (         calc.asm):00050                 CLRA
D038 39               (         calc.asm):00051                 RTS
                      (         calc.asm):00052         ;* DISPLAY HELP MESSAGE
D039                  (         calc.asm):00053         HELP
D039 3F               (         calc.asm):00054                 SWI
D03A 19               (         calc.asm):00055                 FCB     25                                ; DISPLAY MESSAGE
D03B 5573653A2043414C (         calc.asm):00056                 FCN     'Use: CALC [expression ...]'
     43205B6578707265
     7373696F6E202E2E
     2E5D00
D056 4F               (         calc.asm):00057                 CLRA
D057 39               (         calc.asm):00058                 RTS
                      (         calc.asm):00059         ;*
                      (         calc.asm):00060         ;* GET A VALUE FROM THE COMMAND LINE, RETURN IN 'D'
                      (         calc.asm):00061         ;*
D058                  (         calc.asm):00062         GETVAL
D058 A6A0             (         calc.asm):00063                 LDA     ,Y+                               ;GET PRECEDING SYMBOL?
                      (         calc.asm):00064         ;* TEST FOR '=' SWAP HIGH AND LOW BYTES
D05A 813D             (         calc.asm):00065                 CMPA    #'='                              ;IS IT A REVERSE CHARACTER?
D05C 2606             (         calc.asm):00066                 BNE     GETV1                             ;IF NO, NOTHING SPECIAL TO DO
D05E 8DF8             (         calc.asm):00067                 BSR     GETVAL                            ;EVALUATE NEXT VALUE ELEMENT
D060 1E89             (         calc.asm):00068                 EXG     A,B                               ;SWAP HIGH AND LOW
D062 2015             (         calc.asm):00069                 BRA     GETEN1                            ;AND EXIT
                      (         calc.asm):00070         ;* TEST FOR '-' NEGATE VALUE
D064                  (         calc.asm):00071         GETV1
D064 812D             (         calc.asm):00072                 CMPA    #'-'                              ;IS IT NEGATE?
D066 2609             (         calc.asm):00073                 BNE     GETV2                             ;NO, ITS OK
D068 8DEE             (         calc.asm):00074                 BSR     GETVAL                            ;EVALUATE NEXT
D06A 4F               (         calc.asm):00075                 CLRA
D06B 5F               (         calc.asm):00076                 CLRB
D06C B3D200           (         calc.asm):00077                 SUBD    VAL1                              ;CALCULATE NEGATE
D06F 2008             (         calc.asm):00078                 BRA     GETEN1                            ;AND EXIT
                      (         calc.asm):00079         ;* TEST FOR '~' ONE'S COMPLEMENT
D071                  (         calc.asm):00080         GETV2
D071 817E             (         calc.asm):00081                 CMPA    #'~'                              ;COMPLEMENT?
D073 2608             (         calc.asm):00082                 BNE     GETHEX                            ;NO, ITS OK
D075 8DE1             (         calc.asm):00083                 BSR     GETVAL                            ;EVALUATE NEXT
D077 43               (         calc.asm):00084                 COMA                                      ;     COMPLEMENT HIGH
D078 53               (         calc.asm):00085                 COMB                                      ;     COMPLEMENT LOW
D079                  (         calc.asm):00086         GETEN1
D079 FDD200           (         calc.asm):00087                 STD     VAL1                              ;SAVE RESULT
D07C 39               (         calc.asm):00088                 RTS
                      (         calc.asm):00089         ;* TEST FOR HEXIDECIMAL NUMBER
D07D                  (         calc.asm):00090         GETHEX
D07D 3410             (         calc.asm):00091                 PSHS    X                                 ;SAVE 'X'
D07F 8E0000           (         calc.asm):00092                 LDX     #0                                ;START WITH ZERO
D082 8124             (         calc.asm):00093                 CMPA    #'$'                              ;IS IT A HEX NUMBER?
D084 2624             (         calc.asm):00094                 BNE     GETBIN                            ;NOT A HEX NUMBER, TRY BINARY
D086                  (         calc.asm):00095         GETH1
D086 170146           (         calc.asm):00096                 LBSR    TSTEXP                            ;TEST FOR TERMINATOR
D089 2739             (         calc.asm):00097                 BEQ     GETEND                            ;IF SO, LAST CHARACTER
D08B 8030             (         calc.asm):00098                 SUBA    #'0'                              ;CONVERT TO BINARY
D08D 810A             (         calc.asm):00099                 CMPA    #10                               ;0-9?
D08F 250A             (         calc.asm):00100                 BLO     GETH2                             ;IF SO, IT'S OK
D091 8111             (         calc.asm):00101                 CMPA    #$11                              ;< 'A'?
D093 2D54             (         calc.asm):00102                 BLT     SYNERR                            ;IF SO, IT'S BAD
D095 8007             (         calc.asm):00103                 SUBA    #7                                ;CONVERT TO HEX
D097 8110             (         calc.asm):00104                 CMPA    #$10                              ;IS IT 0-F?
D099 244E             (         calc.asm):00105                 BHS     SYNERR                            ;IF SO, IT'S BAD
D09B                  (         calc.asm):00106         GETH2
D09B B7D1FE           (         calc.asm):00107                 STA     TEMP                              ;SAVE FOR TEMPORARY VALUE
D09E CC0010           (         calc.asm):00108                 LDD     #16                               ;MULTIPLY BY 16 (SHIFT FOUR BITS)
D0A1 3F               (         calc.asm):00109                 SWI
D0A2 6B               (         calc.asm):00110                 FCB     107                               ;D=D;*X
D0A3 FAD1FE           (         calc.asm):00111                 ORB     TEMP                              ;INCLUDE EXTRA DIGIT
D0A6 1F01             (         calc.asm):00112                 TFR     D,X                               ;REPLACE IN 'X'
D0A8 20DC             (         calc.asm):00113                 BRA     GETH1                             ;DO NEXT
                      (         calc.asm):00114         ;* TEST FOR BINARY NUMBER
D0AA                  (         calc.asm):00115         GETBIN
D0AA 8125             (         calc.asm):00116                 CMPA    #'%'                              ;IS IT BINARY?
D0AC 261D             (         calc.asm):00117                 BNE     GETOCT                            ;NO, TRY OCTAL
D0AE                  (         calc.asm):00118         GETB1
D0AE 17011E           (         calc.asm):00119                 LBSR    TSTEXP                            ;TEST FOR A TERMINATOR
D0B1 2711             (         calc.asm):00120                 BEQ     GETEND                            ;IF END, CONTINUE WITH EXPRESSION
D0B3 8030             (         calc.asm):00121                 SUBA    #'0'                              ;CONVERT TO BINARY
D0B5 8101             (         calc.asm):00122                 CMPA    #1                                ;TEST FOR IN RANGE
D0B7 2230             (         calc.asm):00123                 BHI     SYNERR                            ;IF INVALID, SAY SO
D0B9 3402             (         calc.asm):00124                 PSHS    A                                 ;SAVE THIS VALUE
D0BB 1F10             (         calc.asm):00125                 TFR     X,D                               ;COPY TO ACCUMULATOR
D0BD 308B             (         calc.asm):00126                 LEAX    D,X                               ;SHIFT BY ONE BIT
D0BF 3504             (         calc.asm):00127                 PULS    B                                 ;RESTORE VALUE
D0C1 3A               (         calc.asm):00128                 ABX                                       ;     INSERT THIS BIT
D0C2 20EA             (         calc.asm):00129                 BRA     GETB1                             ;CONTINUE LOOKING
                      (         calc.asm):00130         ;* END OF EXPRESSION, EXIT
D0C4                  (         calc.asm):00131         GETEND
D0C4 1F10             (         calc.asm):00132                 TFR     X,D                               ;D = VALUE
D0C6 FDD200           (         calc.asm):00133                 STD     VAL1                              ;SET VALUE
D0C9 3590             (         calc.asm):00134                 PULS    X,PC                              ;RESTORE & RETURN
                      (         calc.asm):00135         ;* TEST FOR OCTAL NUMBER
D0CB                  (         calc.asm):00136         GETOCT
D0CB 8140             (         calc.asm):00137                 CMPA    #'@'                              ;IS IT OCTAL?
D0CD 2638             (         calc.asm):00138                 BNE     GETCHR                            ;NO, TRY CHARACTER
D0CF                  (         calc.asm):00139         GETO1
D0CF 1700FD           (         calc.asm):00140                 LBSR    TSTEXP                            ;TEST FOR TERMINATOR
D0D2 27F0             (         calc.asm):00141                 BEQ     GETEND                            ;IF END, CONTINUE
D0D4 8030             (         calc.asm):00142                 SUBA    #'0'                              ;CONVERT TO BINARY
D0D6 8107             (         calc.asm):00143                 CMPA    #7                                ;IN RANGE?
D0D8 220F             (         calc.asm):00144                 BHI     SYNERR                            ;INVALID
D0DA B7D1FE           (         calc.asm):00145                 STA     TEMP                              ;SAVE TEMP
D0DD CC0008           (         calc.asm):00146                 LDD     #8                                ;MUL BY 8
D0E0 3F               (         calc.asm):00147                 SWI
D0E1 6B               (         calc.asm):00148                 FCB     107                               ;DO MULTIPLY
D0E2 FAD1FE           (         calc.asm):00149                 ORB     TEMP                              ;INCLUDE
D0E5 1F01             (         calc.asm):00150                 TFR     D,X                               ;COPY BACK
D0E7 20E6             (         calc.asm):00151                 BRA     GETO1                             ;CONTINUE
                      (         calc.asm):00152         ;* INVALID HEX DIGIT
D0E9                  (         calc.asm):00153         SYNERR
D0E9 3F               (         calc.asm):00154                 SWI
D0EA 19               (         calc.asm):00155                 FCB     25                                ;OUTPUT MESSAGE
D0EB 53796E7461782045 (         calc.asm):00156                 FCN     'Syntax Error.'
     72726F722E00
D0F9                  (         calc.asm):00157         EVARET
D0F9 10FED203         (         calc.asm):00158                 LDS     SAVSTK                            ;GET STACK VALUE
D0FD B6D202           (         calc.asm):00159                 LDA     FLAG                              ;GET INTERACTIVE FLAG
D100 1026FF07         (         calc.asm):00160                 LBNE    CALC1                             ;AND CONTINUE
D104 8601             (         calc.asm):00161                 LDA     #1                                ;INDICATE INVALID OPERAND
D106 39               (         calc.asm):00162                 RTS
                      (         calc.asm):00163         ;* TEST FOR QUOTED STRING
D107                  (         calc.asm):00164         GETCHR
D107 8127             (         calc.asm):00165                 CMPA    #$27                              ;IS IT A QUOTE?
D109 261A             (         calc.asm):00166                 BNE     GETDEC                            ;NO, TRY DECIMAL NUMBER
D10B                  (         calc.asm):00167         GETC1
D10B A6A0             (         calc.asm):00168                 LDA     ,Y+                               ;GET CHAR
D10D 27DA             (         calc.asm):00169                 BEQ     SYNERR                            ;END OF LINE
D10F 810D             (         calc.asm):00170                 CMPA    #$0D                              ;END OF LINE MEANS SCREWUP
D111 27D6             (         calc.asm):00171                 BEQ     SYNERR                            ;INVALID STRING
D113 8127             (         calc.asm):00172                 CMPA    #$27                              ;CLOSING QUOTE
D115 27AD             (         calc.asm):00173                 BEQ     GETEND                            ;OF SO, THATS IT
D117 B7D1FE           (         calc.asm):00174                 STA     TEMP                              ;SAVE CHAR
D11A 1F10             (         calc.asm):00175                 TFR     X,D                               ;COPY TO ACCUMULATOR
D11C 1F98             (         calc.asm):00176                 TFR     B,A                               ;SHIFT UP
D11E F6D1FE           (         calc.asm):00177                 LDB     TEMP                              ;INCLUDE LOWER CHAR
D121 1F01             (         calc.asm):00178                 TFR     D,X                               ;REPLACE OLD VALUE
D123 20E6             (         calc.asm):00179                 BRA     GETC1                             ;GET NEXT CHARACTER
                      (         calc.asm):00180         ;* TEST FOR DECIMAL NUMBER
D125                  (         calc.asm):00181         GETDEC
D125 8130             (         calc.asm):00182                 CMPA    #'0'                              ;IS IT < '0'?
D127 25C0             (         calc.asm):00183                 BLO     SYNERR                            ;NO, IT'S NOT DECIMAL
D129 8139             (         calc.asm):00184                 CMPA    #'9'                              ;IS IT > '9'
D12B 22BC             (         calc.asm):00185                 BHI     SYNERR                            ;NO, NOT DECIMAL
D12D 313F             (         calc.asm):00186                 LEAY    -1,Y                              ;BACKUP TO START OF LINE
D12F                  (         calc.asm):00187         GETD1
D12F 17009D           (         calc.asm):00188                 LBSR    TSTEXP                            ;TEST FOR END OF DIGIT STRING
D132 2790             (         calc.asm):00189                 BEQ     GETEND                            ;IF SO, QUIT
D134 8030             (         calc.asm):00190                 SUBA    #'0'                              ;CONVERT TO BINARY
D136 8109             (         calc.asm):00191                 CMPA    #9                                ;ARE WE DECIMAL?
D138 22AF             (         calc.asm):00192                 BHI     SYNERR                            ;IF NOT, GET UPSET
D13A B7D1FE           (         calc.asm):00193                 STA     TEMP                              ;SAVE DIGIT
D13D CC000A           (         calc.asm):00194                 LDD     #10                               ;MULTIPLY BY 10
D140 3F               (         calc.asm):00195                 SWI
D141 6B               (         calc.asm):00196                 FCB     107                               ;D=D;*X
D142 FBD1FE           (         calc.asm):00197                 ADDB    TEMP                              ;ADD IN DIGIT
D145 8900             (         calc.asm):00198                 ADCA    #0                                ;INSURE HIGH INCS
D147 1F01             (         calc.asm):00199                 TFR     D,X                               ;SAVE IN X FOR NEXT ITERATION
D149 20E4             (         calc.asm):00200                 BRA     GETD1                             ;KEEP GOING
                      (         calc.asm):00201         ;*
                      (         calc.asm):00202         ;* EVALUATE ANY OPERANDS
                      (         calc.asm):00203         ;*
D14B                  (         calc.asm):00204         EVAL
D14B 3410             (         calc.asm):00205                 PSHS    X                                 ;SAVE 'X'
D14D 17FF08           (         calc.asm):00206                 LBSR    GETVAL                            ;GET VALUE
D150                  (         calc.asm):00207         EVAL1
D150 1F01             (         calc.asm):00208                 TFR     D,X                               ;SAVE OLD VALUE
D152                  (         calc.asm):00209         EVAL2
D152 3F               (         calc.asm):00210                 SWI
D153 05               (         calc.asm):00211                 FCB     5                                 ;GET NEXT CHAR
D154 2607             (         calc.asm):00212                 BNE     TRYADD                            ;TRY ADD
D156 1F10             (         calc.asm):00213                 TFR     X,D                               ;GET VALUE
D158                  (         calc.asm):00214         EVEXIT
D158 FDD200           (         calc.asm):00215                 STD     VAL1                              ;SET VALUE
D15B 3590             (         calc.asm):00216                 PULS    X,PC                              ;RESTORE & RETURN
                      (         calc.asm):00217         ;* TEST FOR ADDITION
D15D                  (         calc.asm):00218         TRYADD
D15D 812B             (         calc.asm):00219                 CMPA    #'+'                              ;IS THIS ADDITION?
D15F 260A             (         calc.asm):00220                 BNE     TRYSUB                            ;NO, TRY SUBTRACTION
D161 17FEF4           (         calc.asm):00221                 LBSR    GETVAL                            ;GET NEW OPERAND VALUE
D164 1F10             (         calc.asm):00222                 TFR     X,D                               ;COPY TO ACCUMULATOR
D166 F3D200           (         calc.asm):00223                 ADDD    VAL1                              ;ADD TO OLD VALUE
D169 20E5             (         calc.asm):00224                 BRA     EVAL1                             ;BACK TO CALLER
                      (         calc.asm):00225         ;* TRY SUBTRACTION
D16B                  (         calc.asm):00226         TRYSUB
D16B 812D             (         calc.asm):00227                 CMPA    #'-'                              ;SUBTRACT?
D16D 260A             (         calc.asm):00228                 BNE     TRYMUL                            ;NO, TRY MULTIPLICATION
D16F 17FEE6           (         calc.asm):00229                 LBSR    GETVAL                            ;EVALUATE NEXT EXPRESSION
D172 1F10             (         calc.asm):00230                 TFR     X,D                               ;COPY TO ACCUMULATOR FOR ARITHMITIC
D174 B3D200           (         calc.asm):00231                 SUBD    VAL1                              ;SUBTRACT NEW VALUE
D177 20D7             (         calc.asm):00232                 BRA     EVAL1                             ;ALL DONE
                      (         calc.asm):00233         ;* MULTIPLY OPERANDS
D179                  (         calc.asm):00234         TRYMUL
D179 812A             (         calc.asm):00235                 CMPA    #'*'                              ;IS IT A MULTIPLY?
D17B 2607             (         calc.asm):00236                 BNE     TRYDIV                            ;NO, TRY LOGICAL OR
D17D 17FED8           (         calc.asm):00237                 LBSR    GETVAL                            ;EVALUATE SECOND OPERAND
D180 3F               (         calc.asm):00238                 SWI
D181 6B               (         calc.asm):00239                 FCB     107                               ;DO MULTIPLY
D182 20CC             (         calc.asm):00240                 BRA     EVAL1                             ;ALL DONE
                      (         calc.asm):00241         ;* DIVIDE OPERATION
D184                  (         calc.asm):00242         TRYDIV
D184 812F             (         calc.asm):00243                 CMPA    #'/'                              ;DIVISION?
D186 2607             (         calc.asm):00244                 BNE     TRYMOD                            ;NO, TRY MODULUS
D188 17FECD           (         calc.asm):00245                 LBSR    GETVAL                            ;GET OPERAND
D18B 3F               (         calc.asm):00246                 SWI
D18C 6C               (         calc.asm):00247                 FCB     108                               ;X=X/D
D18D 20C3             (         calc.asm):00248                 BRA     EVAL2                             ;AND KEEP RESULT
                      (         calc.asm):00249         ;* MODULUS OPERATION
D18F                  (         calc.asm):00250         TRYMOD
D18F 815C             (         calc.asm):00251                 CMPA    #'\'                              ;MODULUS?
D191 2607             (         calc.asm):00252                 BNE     TRYOR                             ;NO, TRY OR
D193 17FEC2           (         calc.asm):00253                 LBSR    GETVAL                            ;GET OPERAND
D196 3F               (         calc.asm):00254                 SWI
D197 6C               (         calc.asm):00255                 FCB     108                               ;X=X/D
D198 20B6             (         calc.asm):00256                 BRA     EVAL1                             ;RETURN REMAINDER
                      (         calc.asm):00257         ;* LOGICAL OR OF OPERANDS
D19A                  (         calc.asm):00258         TRYOR
D19A 817C             (         calc.asm):00259                 CMPA    #'|'                              ;IS IT OR?
D19C 260D             (         calc.asm):00260                 BNE     TRYAND                            ;NO, TRY LOGICAL AND
D19E 17FEB7           (         calc.asm):00261                 LBSR    GETVAL                            ;CALCULATE OPERAND VALUE
D1A1 1F10             (         calc.asm):00262                 TFR     X,D                               ;GET OLD VALUE
D1A3 BAD200           (         calc.asm):00263                 ORA     VAL1                              ;PERFORM OR
D1A6 FAD201           (         calc.asm):00264                 ORB     VAL1+1                            ;ON BOTH BYTES
D1A9 20A5             (         calc.asm):00265                 BRA     EVAL1                             ;CONTINUE
                      (         calc.asm):00266         ;* LOGICAL AND OF OPERANDS
D1AB                  (         calc.asm):00267         TRYAND
D1AB 8126             (         calc.asm):00268                 CMPA    #'&'                              ;IS IT AND?
D1AD 260D             (         calc.asm):00269                 BNE     TRYXOR                            ;NO, TRY XOR
D1AF 17FEA6           (         calc.asm):00270                 LBSR    GETVAL                            ;EVALUATE OPERANDS
D1B2 1F10             (         calc.asm):00271                 TFR     X,D                               ;GET OLD VALUE
D1B4 B4D200           (         calc.asm):00272                 ANDA    VAL1                              ;AND WITH OLD
D1B7 F4D201           (         calc.asm):00273                 ANDB    VAL1+1                            ;AND SECOND BYTE
D1BA 2094             (         calc.asm):00274                 BRA     EVAL1                             ;CONTINUE
                      (         calc.asm):00275         ;* EXCLUSIVE OR OPERATION
D1BC                  (         calc.asm):00276         TRYXOR
D1BC 815E             (         calc.asm):00277                 CMPA    #'^'                              ;IS IT XOR?
D1BE 1026FF27         (         calc.asm):00278                 LBNE    SYNERR                            ;NO, ERROR
D1C2 17FE93           (         calc.asm):00279                 LBSR    GETVAL                            ;EVALUATE OPERANDS
D1C5 1F10             (         calc.asm):00280                 TFR     X,D                               ;GET OLD VALUE
D1C7 B8D200           (         calc.asm):00281                 EORA    VAL1                              ;XOR WITH OLD
D1CA F8D201           (         calc.asm):00282                 EORB    VAL1+1                            ;XOR SECOND BYTE
D1CD 2081             (         calc.asm):00283                 BRA     EVAL1                             ;CONTINUE
                      (         calc.asm):00284         ;*
                      (         calc.asm):00285         ;* TEST FOR VALID EXPRESSION ELEMENT TERMINATOR
                      (         calc.asm):00286         ;*
D1CF                  (         calc.asm):00287         TSTEXP
D1CF A6A4             (         calc.asm):00288                 LDA     ,Y                                ;GET CHARACTER
D1D1 272A             (         calc.asm):00289                 BEQ     TSTEND                            ;TERMINATOR
D1D3 812B             (         calc.asm):00290                 CMPA    #'+'                              ;PLUS SIGN
D1D5 2726             (         calc.asm):00291                 BEQ     TSTEND                            ;OK
D1D7 812D             (         calc.asm):00292                 CMPA    #'-'                              ;MINUS SIGN
D1D9 2722             (         calc.asm):00293                 BEQ     TSTEND                            ;IS ALSO OK
D1DB 8126             (         calc.asm):00294                 CMPA    #'&'                              ;LOCAIAL AND?
D1DD 271E             (         calc.asm):00295                 BEQ     TSTEND                            ;IF SO, IT'S OK
D1DF 817C             (         calc.asm):00296                 CMPA    #'|'                              ;LOGICAL OR?
D1E1 271A             (         calc.asm):00297                 BEQ     TSTEND                            ;IF SO, IT'S OK
D1E3 815E             (         calc.asm):00298                 CMPA    #'^'                              ;EXCLUSIVE OR?
D1E5 2716             (         calc.asm):00299                 BEQ     TSTEND                            ;YES, ITS OK
D1E7 812A             (         calc.asm):00300                 CMPA    #'*'                              ;MULTIPLY?
D1E9 2712             (         calc.asm):00301                 BEQ     TSTEND                            ;YES, ITS OK
D1EB 812F             (         calc.asm):00302                 CMPA    #'/'                              ;DIVIDE?
D1ED 270E             (         calc.asm):00303                 BEQ     TSTEND                            ;YES, ITS OK
D1EF 815C             (         calc.asm):00304                 CMPA    #'\'                              ;MODULUS?
D1F1 270A             (         calc.asm):00305                 BEQ     TSTEND                            ;YES, ITS OK
D1F3 8120             (         calc.asm):00306                 CMPA    #' '                              ;SPACE IS VALID
D1F5 2706             (         calc.asm):00307                 BEQ     TSTEND                            ;IF SO, QUIT
D1F7 810D             (         calc.asm):00308                 CMPA    #$0D                              ;CARRIAGE RETURN IS LAST
D1F9 2702             (         calc.asm):00309                 BEQ     TSTEND                            ;IF NOT, SAY SO
D1FB 3121             (         calc.asm):00310                 LEAY    1,Y                               ;DON'T SKIP END OF LINE
D1FD                  (         calc.asm):00311         TSTEND
D1FD 39               (         calc.asm):00312                 RTS
                      (         calc.asm):00313         ;* TEMPORARY STORAGE
D1FE                  (         calc.asm):00314         TEMP
D1FE 0000             (         calc.asm):00315                 FDB     0                                 ;TEMP STORAGE
D200                  (         calc.asm):00316         VAL1
D200 0000             (         calc.asm):00317                 FDB     0                                 ;TEMP STORAGE
D202                  (         calc.asm):00318         FLAG
D202 00               (         calc.asm):00319                 FCB     0                                 ;INTERACTIVE FLAG
D203                  (         calc.asm):00320         SAVSTK
D203                  (         calc.asm):00321                 RMB     2                                 ;SAVED STACK POINTER

Symbol Table:
[ G] CALC                             D000
[ G] CALC1                            D00B
[ G] CLEND                            D037
[ G] EVAL                             D14B
[ G] EVAL1                            D150
[ G] EVAL2                            D152
[ G] EVARET                           D0F9
[ G] EVEXIT                           D158
[ G] FLAG                             D202
[ G] GETB1                            D0AE
[ G] GETBIN                           D0AA
[ G] GETC1                            D10B
[ G] GETCHR                           D107
[ G] GETD1                            D12F
[ G] GETDEC                           D125
[ G] GETEN1                           D079
[ G] GETEND                           D0C4
[ G] GETH1                            D086
[ G] GETH2                            D09B
[ G] GETHEX                           D07D
[ G] GETO1                            D0CF
[ G] GETOCT                           D0CB
[ G] GETV1                            D064
[ G] GETV2                            D071
[ G] GETVAL                           D058
[ G] HELP                             D039
[ G] OPSUP                            D01D
[ G] OPSUP1                           D021
[ G] OSEND                            DBFF
[ G] OSRAM                            2000
[ G] OSUTIL                           D000
[ G] SAVSTK                           D203
[ G] SYNERR                           D0E9
[ G] TEMP                             D1FE
[ G] TRYADD                           D15D
[ G] TRYAND                           D1AB
[ G] TRYDIV                           D184
[ G] TRYMOD                           D18F
[ G] TRYMUL                           D179
[ G] TRYOR                            D19A
[ G] TRYSUB                           D16B
[ G] TRYXOR                           D1BC
[ G] TSTEND                           D1FD
[ G] TSTEXP                           D1CF
[ G] VAL1                             D200
