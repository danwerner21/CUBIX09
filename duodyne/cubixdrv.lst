                      (     cubixdrv.asm):00001         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00002         ;
                      (     cubixdrv.asm):00003         ;       Duodyne Cubix banked driver code
                      (     cubixdrv.asm):00004         ;
                      (     cubixdrv.asm):00005         ;  DWERNER 1/20/2024    Initial
                      (     cubixdrv.asm):00006         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00007         
                      (     cubixdrv.asm):00008         ;*
                      (     cubixdrv.asm):00009                 INCLUDE cubix_values.asm
                      ( cubix_values.asm):00001         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00002         ;
                      ( cubix_values.asm):00003         ;       Nhyodyne Cubix System storage locations
                      ( cubix_values.asm):00004         ;
                      ( cubix_values.asm):00005         ;  DWERNER 10/15/2023   Initial
                      ( cubix_values.asm):00006         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00007         
     0200             ( cubix_values.asm):00008         MD_PAGERA       = $0200                           ; PAGE DRIVER ADDRESS
     02F5             ( cubix_values.asm):00009         PAGER_STACK     = $02F5
     02F6             ( cubix_values.asm):00010         PAGER_U         = $02F6
     02F8             ( cubix_values.asm):00011         PAGER_D         = $02F8
     02FA             ( cubix_values.asm):00012         PAGER_X         = $02FA
     02FC             ( cubix_values.asm):00013         PAGER_Y         = $02FC
     02FE             ( cubix_values.asm):00014         PAGER_S         = $02FE
     0100             ( cubix_values.asm):00015         CONSOLEDEVICE   = $0100                           ; (BYTE)
     01E3             ( cubix_values.asm):00016         ST0             = $01E3                           ; (BYTE)
     01E4             ( cubix_values.asm):00017         FCMD            = $01E4                           ; (BYTE)
     01E5             ( cubix_values.asm):00018         FLERR           = $01E5                           ; (BYTE)
     01E6             ( cubix_values.asm):00019         DSKUNIT         = $01E6                           ; (BYTE)
     01E7             ( cubix_values.asm):00020         FLOPPY_DETCT    = $01E7                           ; (BYTE)
     01E8             ( cubix_values.asm):00021         FLRETRY         = $01E8                           ; (BYTE)
     01E9             ( cubix_values.asm):00022         FLRETRY1        = $01E9                           ; (BYTE)
     01EA             ( cubix_values.asm):00023         DSKY_BUF        = $01EA                           ; (8 BYTES)
     01F3             ( cubix_values.asm):00024         DSKY_HEXBUF     = $01F3                           ; (4 BYTES)
     01F7             ( cubix_values.asm):00025         DISKERROR       = $01F7                           ; (BYTE)
     01F8             ( cubix_values.asm):00026         CURRENTHEAD     = $01F8                           ; (BYTE)
     01F9             ( cubix_values.asm):00027         CURRENTCYL      = $01F9                           ; (BYTE)
     01FA             ( cubix_values.asm):00028         CURRENTSEC      = $01FA                           ; (BYTE)
     01FB             ( cubix_values.asm):00029         CURRENTDEVICE   = $01FB                           ; (BYTE)
     01FC             ( cubix_values.asm):00030         CURRENTSLICE    = $01FC                           ; (WORD)
     01FE             ( cubix_values.asm):00031         farpointer      = $01FE                           ; (WORD)                      ;
     0300             ( cubix_values.asm):00032         HSTBUF          = $0300
                      ( cubix_values.asm):00033         
     8800             ( cubix_values.asm):00034         BANKED_DRIVER_DISPATCHER = $8800
                      (     cubixdrv.asm):00010         ;*
                      (     cubixdrv.asm):00011         
                      (     cubixdrv.asm):00012                 ORG     $8800
                      (     cubixdrv.asm):00013         
                      (     cubixdrv.asm):00014         ;__DISPATCHER________________________________________________________________________________________
                      (     cubixdrv.asm):00015         ;
                      (     cubixdrv.asm):00016         ;  Function dispatcher
                      (     cubixdrv.asm):00017         ;  function to call is located in "farfunct"
                      (     cubixdrv.asm):00018         ;____________________________________________________________________________________________________
                      (     cubixdrv.asm):00019         ;
8800                  (     cubixdrv.asm):00020         FUNCTION_DISPATCHER:
8800 58               (     cubixdrv.asm):00021                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
8801 8600             (     cubixdrv.asm):00022                 LDA     #$00
8803 1F01             (     cubixdrv.asm):00023                 TFR     D,X
8805 EC898813         (     cubixdrv.asm):00024                 LDD     DISPATCHTABLE,X
8809 FD01FE           (     cubixdrv.asm):00025                 STD     farpointer
880C FC02F8           (     cubixdrv.asm):00026                 LDD     >PAGER_D                          ; RESTORE 'D'
880F 6E9F01FE         (     cubixdrv.asm):00027                 JMP     [farpointer]
                      (     cubixdrv.asm):00028         
                      (     cubixdrv.asm):00029         
8813                  (     cubixdrv.asm):00030         DISPATCHTABLE:
8813 886C             (     cubixdrv.asm):00031                 .WORD   WRSER1                            ; FUNCTION 00 - WRITE SERIAL PORT
8815 8879             (     cubixdrv.asm):00032                 .WORD   RDSER1                            ; FUNCTION 01 - READ SERIAL PORT
8817 886B             (     cubixdrv.asm):00033                 .WORD   SERIALINIT                        ; FUNCTION 02 - SERIAL PORT INIT
                      (     cubixdrv.asm):00034         
8819 970C             (     cubixdrv.asm):00035                 .WORD   drv_noop                          ; FUNCTION 03 - WRITE VIDEO
881B 970C             (     cubixdrv.asm):00036                 .WORD   drv_noop                          ; FUNCTION 04 - READ KEYBOARD
881D 970C             (     cubixdrv.asm):00037                 .WORD   drv_noop                          ; FUNCTION 05 - INIT INTERFACE
                      (     cubixdrv.asm):00038         
881F 970C             (     cubixdrv.asm):00039                 .WORD   drv_noop                          ; FUNCTION 06
8821 970C             (     cubixdrv.asm):00040                 .WORD   drv_noop                          ; FUNCTION 07
8823 970C             (     cubixdrv.asm):00041                 .WORD   drv_noop                          ; FUNCTION 08
                      (     cubixdrv.asm):00042         
8825 970C             (     cubixdrv.asm):00043                 .WORD   drv_noop                          ; FUNCTION 09
8827 970C             (     cubixdrv.asm):00044                 .WORD   drv_noop                          ; FUNCTION 10
8829 970C             (     cubixdrv.asm):00045                 .WORD   drv_noop                          ; FUNCTION 11
                      (     cubixdrv.asm):00046         
882B 970C             (     cubixdrv.asm):00047                 .WORD   drv_noop                          ; FUNCTION 12
882D 970C             (     cubixdrv.asm):00048                 .WORD   drv_noop                          ; FUNCTION 13
882F 970C             (     cubixdrv.asm):00049                 .WORD   drv_noop                          ; FUNCTION 14
                      (     cubixdrv.asm):00050         
8831 970C             (     cubixdrv.asm):00051                 .WORD   drv_noop                          ; FUNCTION 15 - called during OS init
8833 970C             (     cubixdrv.asm):00052                 .WORD   drv_noop                          ; FUNCTION 16 - read a sector from drive
8835 970C             (     cubixdrv.asm):00053                 .WORD   drv_noop                          ; FUNCTION 17 - write a sector to drive
                      (     cubixdrv.asm):00054         ;
8837 8E61             (     cubixdrv.asm):00055                 .WORD   FL_SETUP                          ; FUNCTION 18 - init floppy device
8839 8EE7             (     cubixdrv.asm):00056                 .WORD   FL_READ_SECTOR                    ; FUNCTION 19 - read a sector from floppy device
883B 8F33             (     cubixdrv.asm):00057                 .WORD   FL_WRITE_SECTOR                   ; FUNCTION 20 - write a sector to floppy device
                      (     cubixdrv.asm):00058         ;
883D 8895             (     cubixdrv.asm):00059                 .WORD   PPIDE_INIT                        ; FUNCTION 21 - init PPIDE device
883F 8991             (     cubixdrv.asm):00060                 .WORD   IDE_READ_SECTOR                   ; FUNCTION 22 - read a sector from PPIDE device
8841 89B7             (     cubixdrv.asm):00061                 .WORD   IDE_WRITE_SECTOR                  ; FUNCTION 23 - write a sector to PPIDE device
                      (     cubixdrv.asm):00062         ;
8843 927B             (     cubixdrv.asm):00063                 .WORD   FPSD_INIT                         ; FUNCTION 24 - init PPIDE device
8845 932D             (     cubixdrv.asm):00064                 .WORD   FPSD_READ_SECTOR                  ; FUNCTION 25 - read a sector from PPIDE device
8847 9375             (     cubixdrv.asm):00065                 .WORD   FPSD_WRITE_SECTOR                 ; FUNCTION 26 - write a sector to PPIDE device
                      (     cubixdrv.asm):00066         ;
8849 8B8F             (     cubixdrv.asm):00067                 .WORD   DSKY_INIT                         ; FUNCTION 27 -
884B 8CE1             (     cubixdrv.asm):00068                 .WORD   DSKY_SHOW                         ; FUNCTION 28 -
884D 8C9A             (     cubixdrv.asm):00069                 .WORD   DSKY_BIN2SEG                      ; FUNCTION 29 -
884F 8C10             (     cubixdrv.asm):00070                 .WORD   DSKY_RESET                        ; FUNCTION 30 -
8851 8C2F             (     cubixdrv.asm):00071                 .WORD   DSKY_STAT                         ; FUNCTION 31 -
8853 8C3C             (     cubixdrv.asm):00072                 .WORD   DSKY_GETKEY                       ; FUNCTION 32 -
8855 8DB3             (     cubixdrv.asm):00073                 .WORD   DSKY_BEEP                         ; FUNCTION 33 -
8857 8DDA             (     cubixdrv.asm):00074                 .WORD   DSKY_DSPL                         ; FUNCTION 34 -
8859 8D9E             (     cubixdrv.asm):00075                 .WORD   DSKY_PUTLED                       ; FUNCTION 35 -
885B 8D6C             (     cubixdrv.asm):00076                 .WORD   DSKY_BLANK                        ; FUNCTION 36 -
885D 9239             (     cubixdrv.asm):00077                 .WORD   FP_INIT                           ; FUNCTION 37 -
885F 9273             (     cubixdrv.asm):00078                 .WORD   FP_SETLED                         ; FUNCTION 38 -
8861 9277             (     cubixdrv.asm):00079                 .WORD   FP_GETSWITCH                      ; FUNCTION 39 -
8863 9456             (     cubixdrv.asm):00080                 .WORD   PCF_INIT                          ; FUNCTION 40 -
8865 9542             (     cubixdrv.asm):00081                 .WORD   PCF_READBYTES                     ; FUNCTION 41 -
8867 94E2             (     cubixdrv.asm):00082                 .WORD   PCF_SENDBYTES                     ; FUNCTION 42 -
8869 948D             (     cubixdrv.asm):00083                 .WORD   PCF_INITDEV                       ; FUNCTION 43 -
                      (     cubixdrv.asm):00084         ;
                      (     cubixdrv.asm):00085         
                      (     cubixdrv.asm):00086         
                      (     cubixdrv.asm):00087         ;__DRIVERS___________________________________________________________________________________________
                      (     cubixdrv.asm):00088         ;
                      (     cubixdrv.asm):00089                 INCLUDE cubix_serial.asm
                      ( cubix_serial.asm):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00002         ;
                      ( cubix_serial.asm):00003         ;       CUBIX serial drivers for 6809 IO card
                      ( cubix_serial.asm):00004         ;
                      ( cubix_serial.asm):00005         ;       Entry points:
                      ( cubix_serial.asm):00006         ;               SERIALINIT  - called during OS init
                      ( cubix_serial.asm):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00009         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00010         ;
                      ( cubix_serial.asm):00011         ;*
                      ( cubix_serial.asm):00012         ;*        HARDWARE I/O ADDRESSES
                      ( cubix_serial.asm):00013         ;*
                      ( cubix_serial.asm):00014         ; UART 16C550 SERIAL
     DF58             ( cubix_serial.asm):00015         UART0           EQU $DF58                         ; DATA IN/OUT
     DF59             ( cubix_serial.asm):00016         UART1           EQU $DF59                         ; CHECK RX
     DF5A             ( cubix_serial.asm):00017         UART2           EQU $DF5A                         ; INTERRUPTS
     DF5B             ( cubix_serial.asm):00018         UART3           EQU $DF5B                         ; LINE CONTROL
     DF5C             ( cubix_serial.asm):00019         UART4           EQU $DF5C                         ; MODEM CONTROL
     DF5D             ( cubix_serial.asm):00020         UART5           EQU $DF5D                         ; LINE STATUS
     DF5E             ( cubix_serial.asm):00021         UART6           EQU $DF5E                         ; MODEM STATUS
     DF5F             ( cubix_serial.asm):00022         UART7           EQU $DF5F                         ; SCRATCH REG.
                      ( cubix_serial.asm):00023         
                      ( cubix_serial.asm):00024         
                      ( cubix_serial.asm):00025         ;__SERIALINIT____________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00026         ;
                      ( cubix_serial.asm):00027         ;       INITIALIZE SERIAL PORTS
                      ( cubix_serial.asm):00028         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00029         ;
886B                  ( cubix_serial.asm):00030         SERIALINIT:
                      ( cubix_serial.asm):00031         ; these are all set by Bios prior to activating the 6809 card.
                      ( cubix_serial.asm):00032         ;       LDA             #$80            ;
                      ( cubix_serial.asm):00033         ;       STA             UART3           ; SET DLAB FLAG
                      ( cubix_serial.asm):00034         ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      ( cubix_serial.asm):00035         ;       STA             UART0           ; save baud rate
                      ( cubix_serial.asm):00036         ;       LDA             #00                     ;
                      ( cubix_serial.asm):00037         ;       STA             UART1           ;
                      ( cubix_serial.asm):00038         ;       LDA             #03                     ;
                      ( cubix_serial.asm):00039         ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
886B 39               ( cubix_serial.asm):00040                 RTS
                      ( cubix_serial.asm):00041         
                      ( cubix_serial.asm):00042         
                      ( cubix_serial.asm):00043         
                      ( cubix_serial.asm):00044         ;__WRSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00045         ;
                      ( cubix_serial.asm):00046         ;       WRITE CHARACTER(A) TO UART
                      ( cubix_serial.asm):00047         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00048         ;
886C                  ( cubix_serial.asm):00049         WRSER1
                      ( cubix_serial.asm):00050         !
886C F6DF5D           ( cubix_serial.asm):00051                 LDB     UART5                             ; READ LINE STATUS REGISTER
886F C420             ( cubix_serial.asm):00052                 ANDB    #$20                              ; TEST IF UART IS READY TO SEND (BIT 5)
8871 C100             ( cubix_serial.asm):00053                 CMPB    #$00
8873 27F7             ( cubix_serial.asm):00054                 BEQ     <                                 ; IF NOT REPEAT
8875 B7DF58           ( cubix_serial.asm):00055                 STA     UART0                             ; THEN WRITE THE CHAR TO UART
8878 39               ( cubix_serial.asm):00056                 RTS
                      ( cubix_serial.asm):00057         
                      ( cubix_serial.asm):00058         ;__RDSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00059         ;
                      ( cubix_serial.asm):00060         ;       READ CHARACTER FROM UART TO (A)
                      ( cubix_serial.asm):00061         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00062         ;
8879                  ( cubix_serial.asm):00063         RDSER1
8879 B6DF5D           ( cubix_serial.asm):00064                 LDA     UART5                             ; READ LINE STATUS REGISTER
887C 8401             ( cubix_serial.asm):00065                 ANDA    #$01                              ; TEST IF DATA IN RECEIVE BUFFER
887E 8100             ( cubix_serial.asm):00066                 CMPA    #$00
8880 2709             ( cubix_serial.asm):00067                 BEQ     >                                 ; NO DATA
8882 B6DF58           ( cubix_serial.asm):00068                 LDA     UART0                             ; THEN READ THE CHAR FROM THE UART
8885 B702F8           ( cubix_serial.asm):00069                 STA     >PAGER_D                          ; SAVE 'D'
8888 1A04             ( cubix_serial.asm):00070                 ORCC    #%00000100                        ; SET 'Z'
888A 39               ( cubix_serial.asm):00071                 RTS
                      ( cubix_serial.asm):00072         !
888B 86FF             ( cubix_serial.asm):00073                 LDA     #$FF                              ;
888D B702F8           ( cubix_serial.asm):00074                 STA     >PAGER_D                          ; SAVE 'D'
8890 39               ( cubix_serial.asm):00075                 RTS                                       ;
                      (     cubixdrv.asm):00090                 INCLUDE cubix_ide.asm
                      (    cubix_ide.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00002         ;
                      (    cubix_ide.asm):00003         ;       CUBIX IDE disk drivers for Duodyne Disk IO
                      (    cubix_ide.asm):00004         ;
                      (    cubix_ide.asm):00005         ;       Entry points:
                      (    cubix_ide.asm):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (    cubix_ide.asm):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00009         ;________________________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00010         ;
     DF88             (    cubix_ide.asm):00011         PPIDE_PPI       = $DF88                           ; PORT A
                      (    cubix_ide.asm):00012         ;
     DF88             (    cubix_ide.asm):00013         PPIDELO         = PPIDE_PPI+0                     ; LSB
     DF89             (    cubix_ide.asm):00014         PPIDEHI         = PPIDE_PPI+1                     ; MSB
     DF8A             (    cubix_ide.asm):00015         PPIDECNTRL      = PPIDE_PPI+2                     ; CONTROL SIGNALS
     DF8B             (    cubix_ide.asm):00016         PPIDEPPIC       = PPIDE_PPI+3                     ; CONTROL BYTE PPI 82C55
                      (    cubix_ide.asm):00017         
     0001             (    cubix_ide.asm):00018         PPIDE_A0_LINE   = $01                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (    cubix_ide.asm):00019         PPIDE_A1_LINE   = $02                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (    cubix_ide.asm):00020         PPIDE_A2_LINE   = $04                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (    cubix_ide.asm):00021         PPIDE_CS0_LINE  = $08                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (    cubix_ide.asm):00022         PPIDE_CS1_LINE  = $10                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (    cubix_ide.asm):00023         PPIDE_WR_LINE   = $20                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (    cubix_ide.asm):00024         PPIDE_RD_LINE   = $40                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (    cubix_ide.asm):00025         PPIDE_RST_LINE  = $80                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (    cubix_ide.asm):00026         
     0008             (    cubix_ide.asm):00027         PPIDE_DATA      = PPIDE_CS0_LINE
     0009             (    cubix_ide.asm):00028         PPIDE_ERR       = PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (    cubix_ide.asm):00029         PPIDE_SEC_CNT   = PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (    cubix_ide.asm):00030         PPIDE_LBALOW    = PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (    cubix_ide.asm):00031         PPIDE_LBAMID    = PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (    cubix_ide.asm):00032         PPIDE_LBAHI     = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (    cubix_ide.asm):00033         PPIDE_DEVICE    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (    cubix_ide.asm):00034         PPIDE_COMMAND   = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (    cubix_ide.asm):00035         PPIDE_STATUS    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (    cubix_ide.asm):00036         PPIDE_CONTROL   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (    cubix_ide.asm):00037         PPIDE_ASTATUS   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (    cubix_ide.asm):00038         
                      (    cubix_ide.asm):00039         
                      (    cubix_ide.asm):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (    cubix_ide.asm):00041         PPIDE_CMD_RECAL = $10
     0020             (    cubix_ide.asm):00042         PPIDE_CMD_READ  = $20
     0030             (    cubix_ide.asm):00043         PPIDE_CMD_WRITE = $30
     0091             (    cubix_ide.asm):00044         PPIDE_CMD_INIT  = $91
     00EC             (    cubix_ide.asm):00045         PPIDE_CMD_ID    = $EC
     00E0             (    cubix_ide.asm):00046         PPIDE_CMD_SPINDOWN = $E0
     00E1             (    cubix_ide.asm):00047         PPIDE_CMD_SPINUP = $E1
                      (    cubix_ide.asm):00048         
                      (    cubix_ide.asm):00049         
     0092             (    cubix_ide.asm):00050         PPRD_IDE_8255   = %10010010                       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (    cubix_ide.asm):00051         PPWR_IDE_8255   = %10000000                       ;ALL THREE PORTS OUTPUT
                      (    cubix_ide.asm):00052         
8891                  (    cubix_ide.asm):00053         PPIDELOTMP:
8891 00               (    cubix_ide.asm):00054                 .BYTE   0
8892                  (    cubix_ide.asm):00055         PPIDECOMMAND:
8892 00               (    cubix_ide.asm):00056                 .BYTE   0
8893                  (    cubix_ide.asm):00057         PPIDETIMEOUT:
8893 0000             (    cubix_ide.asm):00058                 .BYTE   $00,$00
                      (    cubix_ide.asm):00059         
                      (    cubix_ide.asm):00060         
                      (    cubix_ide.asm):00061         
                      (    cubix_ide.asm):00062         ;__PPIDE_INIT_________________________________________________________________________________________
                      (    cubix_ide.asm):00063         ;
                      (    cubix_ide.asm):00064         ;  INIT AND DISPLAY IDE INFO
                      (    cubix_ide.asm):00065         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00066         ;
8895                  (    cubix_ide.asm):00067         PPIDE_INIT:
8895 BD970D           (    cubix_ide.asm):00068                 JSR     LFCR                              ; AND CRLF
8898 8E8AF0           (    cubix_ide.asm):00069                 LDX     #MESSAGE1
889B BD9721           (    cubix_ide.asm):00070                 JSR     WRSTR                             ; DO PROMPT
889E BD970D           (    cubix_ide.asm):00071                 JSR     LFCR                              ; AND CRLF
88A1 BD8983           (    cubix_ide.asm):00072                 JSR     IDE_PPIDETECT                     ; TEST FOR PPI HARDWARE
88A4 2617             (    cubix_ide.asm):00073                 BNE     IDE_ABORT                         ; BAIL OUT IF NOT THERE
                      (    cubix_ide.asm):00074         ;
88A6 8E8AF8           (    cubix_ide.asm):00075                 LDX     #MESSAGE2
88A9 BD9721           (    cubix_ide.asm):00076                 JSR     WRSTR                             ; DO PROMPT
88AC CCDF88           (    cubix_ide.asm):00077                 LDD     #PPIDE_PPI                        ; GET BASE PORT
88AF BD972D           (    cubix_ide.asm):00078                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_ide.asm):00079         ;
88B2 BD89E2           (    cubix_ide.asm):00080                 JSR     PPIDE_RESET                       ; RESET THE BUS
88B5 BD88E3           (    cubix_ide.asm):00081                 JSR     PPIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
88B8 2503             (    cubix_ide.asm):00082                 BCS     IDE_ABORT
88BA 7E88C6           (    cubix_ide.asm):00083                 JMP     IDE_PRINT_INFO
88BD                  (    cubix_ide.asm):00084         IDE_ABORT:
88BD 8E8AFF           (    cubix_ide.asm):00085                 LDX     #MESSAGE3
88C0 BD9721           (    cubix_ide.asm):00086                 JSR     WRSTR                             ; DO PROMPT
88C3 7E88DF           (    cubix_ide.asm):00087                 JMP     IDE_INITA
88C6                  (    cubix_ide.asm):00088         IDE_PRINT_INFO:
88C6 BD970D           (    cubix_ide.asm):00089                 JSR     LFCR                              ; AND CRLF
88C9 8E8B0C           (    cubix_ide.asm):00090                 LDX     #MESSAGE4
88CC BD9721           (    cubix_ide.asm):00091                 JSR     WRSTR                             ; DO PROMPT
88CF 8600             (    cubix_ide.asm):00092                 LDA     #$00
88D1 BD8924           (    cubix_ide.asm):00093                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
88D4 8E8B1D           (    cubix_ide.asm):00094                 LDX     #MESSAGE5
88D7 BD9721           (    cubix_ide.asm):00095                 JSR     WRSTR                             ; DO PROMPT
88DA 8601             (    cubix_ide.asm):00096                 LDA     #$01
88DC BD8924           (    cubix_ide.asm):00097                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
88DF                  (    cubix_ide.asm):00098         IDE_INITA:
88DF BD970D           (    cubix_ide.asm):00099                 JSR     LFCR                              ; AND CRLF
88E2 39               (    cubix_ide.asm):00100                 RTS                                       ; DONE
                      (    cubix_ide.asm):00101         ;
                      (    cubix_ide.asm):00102         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (    cubix_ide.asm):00103         ;
                      (    cubix_ide.asm):00104         ;  PROBE FOR IDE HARDWARE
                      (    cubix_ide.asm):00105         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00106         ;
88E3                  (    cubix_ide.asm):00107         PPIDE_PROBE:
                      (    cubix_ide.asm):00108         ;
                      (    cubix_ide.asm):00109         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (    cubix_ide.asm):00110         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (    cubix_ide.asm):00111         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (    cubix_ide.asm):00112         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (    cubix_ide.asm):00113         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (    cubix_ide.asm):00114         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (    cubix_ide.asm):00115         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (    cubix_ide.asm):00116         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (    cubix_ide.asm):00117         
88E3 8600             (    cubix_ide.asm):00118                 LDA     #$00
88E5 B7DF88           (    cubix_ide.asm):00119                 STA     PPIDELO                           ; PPI PORT A, DATALO
88E8 BD89FC           (    cubix_ide.asm):00120                 JSR     IDE_WAIT_NOT_BUSY                 ; WAIT FOR BUSY TO CLEAR
88EB 2534             (    cubix_ide.asm):00121                 BCS     PPIDE_PROBE_FAIL                  ; IF TIMEOUT, REPORT NO IDE PRESENT
88ED 860F             (    cubix_ide.asm):00122                 LDA     #PPIDE_STATUS                     ; GET STATUS
88EF BD8A8C           (    cubix_ide.asm):00123                 JSR     IDE_READ
88F2 C440             (    cubix_ide.asm):00124                 ANDB    #%01000000
88F4 C100             (    cubix_ide.asm):00125                 CMPB    #$00
88F6 2729             (    cubix_ide.asm):00126                 BEQ     PPIDE_PROBE_FAIL                  ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (    cubix_ide.asm):00127         
                      (    cubix_ide.asm):00128         ; CHECK SIGNATURE
88F8 860A             (    cubix_ide.asm):00129                 LDA     #PPIDE_SEC_CNT
88FA BD8A8C           (    cubix_ide.asm):00130                 JSR     IDE_READ
88FD C101             (    cubix_ide.asm):00131                 CMPB    #$01
88FF 2620             (    cubix_ide.asm):00132                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
8901 860B             (    cubix_ide.asm):00133                 LDA     #PPIDE_LBALOW
8903 BD8A8C           (    cubix_ide.asm):00134                 JSR     IDE_READ
8906 C101             (    cubix_ide.asm):00135                 CMPB    #$01
8908 2617             (    cubix_ide.asm):00136                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
890A 860C             (    cubix_ide.asm):00137                 LDA     #PPIDE_LBAMID
890C BD8A8C           (    cubix_ide.asm):00138                 JSR     IDE_READ
890F C100             (    cubix_ide.asm):00139                 CMPB    #$00
8911 260E             (    cubix_ide.asm):00140                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
8913 860D             (    cubix_ide.asm):00141                 LDA     #PPIDE_LBAHI
8915 BD8A8C           (    cubix_ide.asm):00142                 JSR     IDE_READ
8918 C100             (    cubix_ide.asm):00143                 CMPB    #$00
891A 2605             (    cubix_ide.asm):00144                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
891C 1CFE             (    cubix_ide.asm):00145                 CLC
891E 7E8923           (    cubix_ide.asm):00146                 JMP     PPIDE_PROBE_SUCCESS
8921                  (    cubix_ide.asm):00147         PPIDE_PROBE_FAIL:
                      (    cubix_ide.asm):00148         
8921 1A01             (    cubix_ide.asm):00149                 SEC
8923                  (    cubix_ide.asm):00150         PPIDE_PROBE_SUCCESS:
8923 39               (    cubix_ide.asm):00151                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (    cubix_ide.asm):00152         
                      (    cubix_ide.asm):00153         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (    cubix_ide.asm):00154         ;*
                      (    cubix_ide.asm):00155         ;*  READ IDE INFORMATION
                      (    cubix_ide.asm):00156         ;*      CARRY SET ON ERROR
                      (    cubix_ide.asm):00157         ;*      A=MST/SLV
                      (    cubix_ide.asm):00158         ;*____________________________________________________________________________________________________
8924                  (    cubix_ide.asm):00159         IDE_READ_INFO:
                      (    cubix_ide.asm):00160         ; SET DRIVE BIT
8924 C60E             (    cubix_ide.asm):00161                 LDB     #PPIDE_DEVICE
8926 F78892           (    cubix_ide.asm):00162                 STB     PPIDECOMMAND
8929 8401             (    cubix_ide.asm):00163                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
892B 48               (    cubix_ide.asm):00164                 ASLA                                      ; SHIFT 4
892C 48               (    cubix_ide.asm):00165                 ASLA                                      ;
892D 48               (    cubix_ide.asm):00166                 ASLA                                      ;
892E 48               (    cubix_ide.asm):00167                 ASLA                                      ;
892F 8AE0             (    cubix_ide.asm):00168                 ORA     #$E0                              ; E0=MST  F0=SLV
8931 1F89             (    cubix_ide.asm):00169                 TFR     A,B
8933 8600             (    cubix_ide.asm):00170                 LDA     #$00
8935 BD8AB5           (    cubix_ide.asm):00171                 JSR     IDE_WRITE
8938 BD89FC           (    cubix_ide.asm):00172                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
893B 2534             (    cubix_ide.asm):00173                 BCS     IDE_READ_INFO_ABORT
893D 860F             (    cubix_ide.asm):00174                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
893F B78892           (    cubix_ide.asm):00175                 STA     PPIDECOMMAND
8942 CC00EC           (    cubix_ide.asm):00176                 LDD     #PPIDE_CMD_ID
8945 BD8AB5           (    cubix_ide.asm):00177                 JSR     IDE_WRITE                         ;ASK THE DRIVE TO READ IT
8948 BD8A23           (    cubix_ide.asm):00178                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
894B 2524             (    cubix_ide.asm):00179                 BCS     IDE_READ_INFO_ABORT
894D BD8A51           (    cubix_ide.asm):00180                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
8950 8E8B2E           (    cubix_ide.asm):00181                 LDX     #MESSAGE6
8953 BD9721           (    cubix_ide.asm):00182                 JSR     WRSTR
8956 B6037B           (    cubix_ide.asm):00183                 LDA     HSTBUF+123
8959 BD9739           (    cubix_ide.asm):00184                 JSR     WRHEX
895C B6037A           (    cubix_ide.asm):00185                 LDA     HSTBUF+122
895F BD9739           (    cubix_ide.asm):00186                 JSR     WRHEX
8962 B60379           (    cubix_ide.asm):00187                 LDA     HSTBUF+121
8965 BD9739           (    cubix_ide.asm):00188                 JSR     WRHEX
8968 B60378           (    cubix_ide.asm):00189                 LDA     HSTBUF+120
896B BD9739           (    cubix_ide.asm):00190                 JSR     WRHEX
896E 7E897D           (    cubix_ide.asm):00191                 JMP     IDE_READ_INFO_OK
8971                  (    cubix_ide.asm):00192         IDE_READ_INFO_ABORT:
8971 8E8AFF           (    cubix_ide.asm):00193                 LDX     #MESSAGE3
8974 BD9721           (    cubix_ide.asm):00194                 JSR     WRSTR                             ;DO PROMPT
8977 BD970D           (    cubix_ide.asm):00195                 JSR     LFCR                              ;AND CRLF
897A 1A01             (    cubix_ide.asm):00196                 SEC
897C 39               (    cubix_ide.asm):00197                 RTS                                       ;
897D                  (    cubix_ide.asm):00198         IDE_READ_INFO_OK:
897D BD970D           (    cubix_ide.asm):00199                 JSR     LFCR                              ; AND CRLF
8980 1CFE             (    cubix_ide.asm):00200                 CLC
8982 39               (    cubix_ide.asm):00201                 RTS
                      (    cubix_ide.asm):00202         
                      (    cubix_ide.asm):00203         
                      (    cubix_ide.asm):00204         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (    cubix_ide.asm):00205         ;
                      (    cubix_ide.asm):00206         ;  PROBE FOR PPI HARDWARE
                      (    cubix_ide.asm):00207         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00208         ;
8983                  (    cubix_ide.asm):00209         IDE_PPIDETECT:
                      (    cubix_ide.asm):00210         ;
                      (    cubix_ide.asm):00211         ; TEST FOR PPI EXISTENCE
                      (    cubix_ide.asm):00212         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (    cubix_ide.asm):00213         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (    cubix_ide.asm):00214         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (    cubix_ide.asm):00215         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (    cubix_ide.asm):00216         ; INTERFERE WITH THE VALUE BEING READ.
8983 BD8AE2           (    cubix_ide.asm):00217                 JSR     SET_PPI_WR
                      (    cubix_ide.asm):00218         ;
8986 8600             (    cubix_ide.asm):00219                 LDA     #$00                              ; VALUE ZERO
8988 B7DF88           (    cubix_ide.asm):00220                 STA     PPIDELO                           ; PUSH VALUE TO PORT
898B B6DF88           (    cubix_ide.asm):00221                 LDA     PPIDELO                           ; GET PORT VALUE
898E 8100             (    cubix_ide.asm):00222                 CMPA    #$00
8990 39               (    cubix_ide.asm):00223                 RTS                                       ; AND RETURN
                      (    cubix_ide.asm):00224         ;
                      (    cubix_ide.asm):00225         
                      (    cubix_ide.asm):00226         
                      (    cubix_ide.asm):00227         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (    cubix_ide.asm):00228         ;*
                      (    cubix_ide.asm):00229         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (    cubix_ide.asm):00230         ;*
                      (    cubix_ide.asm):00231         ;*____________________________________________________________________________________________________
8991                  (    cubix_ide.asm):00232         IDE_READ_SECTOR:
8991 BD89FC           (    cubix_ide.asm):00233                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
8994 251B             (    cubix_ide.asm):00234                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
8996                  (    cubix_ide.asm):00235         IDE_READ_SECTOR_1:
8996 BD8B31           (    cubix_ide.asm):00236                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
8999 860F             (    cubix_ide.asm):00237                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
899B B78892           (    cubix_ide.asm):00238                 STA     PPIDECOMMAND
899E CC0020           (    cubix_ide.asm):00239                 LDD     #PPIDE_CMD_READ
89A1 BD8AB5           (    cubix_ide.asm):00240                 JSR     IDE_WRITE                         ; ASK THE DRIVE TO READ IT
89A4 BD8A23           (    cubix_ide.asm):00241                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
89A7 2508             (    cubix_ide.asm):00242                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
89A9 BD8A51           (    cubix_ide.asm):00243                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
89AC 4F               (    cubix_ide.asm):00244                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
89AD B701F7           (    cubix_ide.asm):00245                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89B0 39               (    cubix_ide.asm):00246                 RTS
89B1                  (    cubix_ide.asm):00247         IDE_READ_SECTOR_ERROR:
89B1 8602             (    cubix_ide.asm):00248                 LDA     #$02                              ; SET ERROR CONDITION
89B3 B701F7           (    cubix_ide.asm):00249                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89B6 39               (    cubix_ide.asm):00250                 RTS
                      (    cubix_ide.asm):00251         
                      (    cubix_ide.asm):00252         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (    cubix_ide.asm):00253         ;*
                      (    cubix_ide.asm):00254         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (    cubix_ide.asm):00255         ;*
                      (    cubix_ide.asm):00256         ;*____________________________________________________________________________________________________
89B7                  (    cubix_ide.asm):00257         IDE_WRITE_SECTOR:
89B7 BD89FC           (    cubix_ide.asm):00258                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
89BA 2520             (    cubix_ide.asm):00259                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
89BC BD8B31           (    cubix_ide.asm):00260                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
89BF 860F             (    cubix_ide.asm):00261                 LDA     #PPIDE_COMMAND
89C1 B78892           (    cubix_ide.asm):00262                 STA     PPIDECOMMAND
89C4 CC0030           (    cubix_ide.asm):00263                 LDD     #PPIDE_CMD_WRITE
89C7 BD8AB5           (    cubix_ide.asm):00264                 JSR     IDE_WRITE                         ;TELL DRIVE TO WRITE A SECTOR
89CA BD8A23           (    cubix_ide.asm):00265                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
89CD 250D             (    cubix_ide.asm):00266                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
89CF BD8A6D           (    cubix_ide.asm):00267                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
89D2 BD89FC           (    cubix_ide.asm):00268                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
89D5 2505             (    cubix_ide.asm):00269                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
89D7 4F               (    cubix_ide.asm):00270                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
89D8 B701F7           (    cubix_ide.asm):00271                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89DB 39               (    cubix_ide.asm):00272                 RTS
89DC                  (    cubix_ide.asm):00273         IDE_WRITE_SECTOR_ERROR:
89DC 8602             (    cubix_ide.asm):00274                 LDA     #$02
89DE B701F7           (    cubix_ide.asm):00275                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89E1 39               (    cubix_ide.asm):00276                 RTS
                      (    cubix_ide.asm):00277         
                      (    cubix_ide.asm):00278         ;*__PPIDE_RESET____________________________________________________________________________________
                      (    cubix_ide.asm):00279         ;*
                      (    cubix_ide.asm):00280         ;*  SOFT RESET IDE CHANNEL
                      (    cubix_ide.asm):00281         ;*
                      (    cubix_ide.asm):00282         ;*____________________________________________________________________________________________________
89E2                  (    cubix_ide.asm):00283         PPIDE_RESET:
                      (    cubix_ide.asm):00284         ;       PRTDBG "IDE RESET$"
89E2 8680             (    cubix_ide.asm):00285                 LDA     #PPIDE_RST_LINE
89E4 B7DF8A           (    cubix_ide.asm):00286                 STA     PPIDECNTRL                        ; ASSERT RST LINE ON IDE INTERFACE
                      (    cubix_ide.asm):00287         
89E7 108E0100         (    cubix_ide.asm):00288                 LDY     #$0100
                      (    cubix_ide.asm):00289         ;       PRTDBG "IDE RESET DELAY$"
89EB                  (    cubix_ide.asm):00290         RST_DLY:
89EB 313F             (    cubix_ide.asm):00291                 DEY
89ED 108C0000         (    cubix_ide.asm):00292                 CMPY    #$0000
89F1 26F8             (    cubix_ide.asm):00293                 BNE     RST_DLY
89F3 8600             (    cubix_ide.asm):00294                 LDA     #$00
89F5 B7DF8A           (    cubix_ide.asm):00295                 STA     PPIDECNTRL                        ; DEASSERT RST LINE ON IDE INTERFACE
                      (    cubix_ide.asm):00296         
                      (    cubix_ide.asm):00297         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISDa:a BEING
                      (    cubix_ide.asm):00298         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
89F8 BD8C08           (    cubix_ide.asm):00299                 JSR     DSKY_REINIT
                      (    cubix_ide.asm):00300         
89FB 39               (    cubix_ide.asm):00301                 RTS
                      (    cubix_ide.asm):00302         
                      (    cubix_ide.asm):00303         
                      (    cubix_ide.asm):00304         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (    cubix_ide.asm):00305         ;*
                      (    cubix_ide.asm):00306         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (    cubix_ide.asm):00307         ;*
                      (    cubix_ide.asm):00308         ;*____________________________________________________________________________________________________
89FC                  (    cubix_ide.asm):00309         IDE_WAIT_NOT_BUSY:
89FC 3406             (    cubix_ide.asm):00310                 PSHS    A,B
89FE 8600             (    cubix_ide.asm):00311                 LDA     #$00
8A00 B78893           (    cubix_ide.asm):00312                 STA     PPIDETIMEOUT
8A03 B78894           (    cubix_ide.asm):00313                 STA     PPIDETIMEOUT+1
8A06                  (    cubix_ide.asm):00314         IDE_WAIT_NOT_BUSY1:
8A06 860F             (    cubix_ide.asm):00315                 LDA     #PPIDE_STATUS                     ;WAIT FOR RDY BIT TO BE SET
8A08 BD8A8C           (    cubix_ide.asm):00316                 JSR     IDE_READ
8A0B C480             (    cubix_ide.asm):00317                 ANDB    #$80
8A0D 270F             (    cubix_ide.asm):00318                 BEQ     IDE_WAIT_NOT_BUSY2
8A0F 7C8893           (    cubix_ide.asm):00319                 INC     PPIDETIMEOUT
8A12 26F2             (    cubix_ide.asm):00320                 BNE     IDE_WAIT_NOT_BUSY1
8A14 7C8894           (    cubix_ide.asm):00321                 INC     PPIDETIMEOUT+1
8A17 26ED             (    cubix_ide.asm):00322                 BNE     IDE_WAIT_NOT_BUSY1
8A19 1A01             (    cubix_ide.asm):00323                 SEC
8A1B 7E8A20           (    cubix_ide.asm):00324                 JMP     IDE_WAIT_NOT_BUSY3
8A1E                  (    cubix_ide.asm):00325         IDE_WAIT_NOT_BUSY2:
8A1E 1CFE             (    cubix_ide.asm):00326                 CLC
8A20                  (    cubix_ide.asm):00327         IDE_WAIT_NOT_BUSY3:
8A20 3586             (    cubix_ide.asm):00328                 PULS    PC,A,B
8A22 39               (    cubix_ide.asm):00329                 RTS
                      (    cubix_ide.asm):00330         
                      (    cubix_ide.asm):00331         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (    cubix_ide.asm):00332         ;*
                      (    cubix_ide.asm):00333         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (    cubix_ide.asm):00334         ;*
                      (    cubix_ide.asm):00335         ;*____________________________________________________________________________________________________
8A23                  (    cubix_ide.asm):00336         IDE_WAIT_DRQ:
8A23 3426             (    cubix_ide.asm):00337                 PSHS    A,B,Y
8A25 8600             (    cubix_ide.asm):00338                 LDA     #$00
8A27 B78893           (    cubix_ide.asm):00339                 STA     PPIDETIMEOUT
8A2A B78894           (    cubix_ide.asm):00340                 STA     PPIDETIMEOUT+1
8A2D                  (    cubix_ide.asm):00341         IDE_WAIT_DRQ1:
8A2D 860F             (    cubix_ide.asm):00342                 LDA     #PPIDE_STATUS                     ;WAIT FOR DRQ BIT TO BE SET
8A2F BD8A8C           (    cubix_ide.asm):00343                 JSR     IDE_READ
8A32 C488             (    cubix_ide.asm):00344                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
8A34 C108             (    cubix_ide.asm):00345                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
8A36 2715             (    cubix_ide.asm):00346                 BEQ     IDE_WAIT_DRQ2
8A38 C401             (    cubix_ide.asm):00347                 ANDB    #%00000001                        ; IS ERROR?
8A3A C101             (    cubix_ide.asm):00348                 CMPB    #%00000001                        ;
8A3C 270A             (    cubix_ide.asm):00349                 BEQ     IDE_WAIT_DRQE
8A3E 7C8893           (    cubix_ide.asm):00350                 INC     PPIDETIMEOUT
8A41 26EA             (    cubix_ide.asm):00351                 BNE     IDE_WAIT_DRQ1
8A43 7C8894           (    cubix_ide.asm):00352                 INC     PPIDETIMEOUT+1
8A46 26E5             (    cubix_ide.asm):00353                 BNE     IDE_WAIT_DRQ1
8A48                  (    cubix_ide.asm):00354         IDE_WAIT_DRQE:
8A48 1A01             (    cubix_ide.asm):00355                 SEC
8A4A 7E8A4F           (    cubix_ide.asm):00356                 JMP     IDE_WAIT_DRQ3
8A4D                  (    cubix_ide.asm):00357         IDE_WAIT_DRQ2:
8A4D 1CFE             (    cubix_ide.asm):00358                 CLC
8A4F                  (    cubix_ide.asm):00359         IDE_WAIT_DRQ3:
8A4F 35A6             (    cubix_ide.asm):00360                 PULS    PC,A,B,Y
                      (    cubix_ide.asm):00361         
                      (    cubix_ide.asm):00362         
                      (    cubix_ide.asm):00363         
                      (    cubix_ide.asm):00364         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00365         ;*
                      (    cubix_ide.asm):00366         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00367         ;*
                      (    cubix_ide.asm):00368         ;*____________________________________________________________________________________________________
8A51                  (    cubix_ide.asm):00369         IDE_READ_BUFFER:
8A51 108E0000         (    cubix_ide.asm):00370                 LDY     #$0000                            ; INDEX
8A55                  (    cubix_ide.asm):00371         IDEBUFRD:
8A55 8608             (    cubix_ide.asm):00372                 LDA     #PPIDE_DATA
8A57 BD8A8F           (    cubix_ide.asm):00373                 JSR     IDE_READ_NO_SETUP
8A5A E7A90300         (    cubix_ide.asm):00374                 STB     HSTBUF,Y                          ; 'ID DRIVE' IDE RESPONSE IS LITTLE ENDIAN FORMAT
8A5E 3121             (    cubix_ide.asm):00375                 INY
8A60 A7A90300         (    cubix_ide.asm):00376                 STA     HSTBUF,Y                          ; 'ID DRIVE' IDE RESPONSE IS LITTLE ENDIAN FORMAT
8A64 3121             (    cubix_ide.asm):00377                 INY
8A66 108C0200         (    cubix_ide.asm):00378                 CMPY    #$0200                            ;
8A6A 26E9             (    cubix_ide.asm):00379                 BNE     IDEBUFRD                          ;
8A6C 39               (    cubix_ide.asm):00380                 RTS                                       ;
                      (    cubix_ide.asm):00381         
                      (    cubix_ide.asm):00382         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00383         ;*
                      (    cubix_ide.asm):00384         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00385         ;*
                      (    cubix_ide.asm):00386         ;*____________________________________________________________________________________________________
8A6D                  (    cubix_ide.asm):00387         IDE_WRITE_BUFFER:
8A6D 108E0000         (    cubix_ide.asm):00388                 LDY     #$0000                            ; INDEX
8A71                  (    cubix_ide.asm):00389         IDEBUFWT:
8A71 8608             (    cubix_ide.asm):00390                 LDA     #PPIDE_DATA
8A73 B78892           (    cubix_ide.asm):00391                 STA     PPIDECOMMAND
8A76 E6A90300         (    cubix_ide.asm):00392                 LDB     HSTBUF,Y                          ; SECTORS ARE BIG ENDIAN
8A7A 3121             (    cubix_ide.asm):00393                 INY
8A7C A6A90300         (    cubix_ide.asm):00394                 LDA     HSTBUF,Y                          ; SECTORS ARE BIG ENDIAN
8A80 3121             (    cubix_ide.asm):00395                 INY                                       ;
8A82 BD8AB5           (    cubix_ide.asm):00396                 JSR     IDE_WRITE
8A85 108C0200         (    cubix_ide.asm):00397                 CMPY    #$0200                            ;
8A89 26E6             (    cubix_ide.asm):00398                 BNE     IDEBUFWT                          ;
8A8B 39               (    cubix_ide.asm):00399                 RTS                                       ;
                      (    cubix_ide.asm):00400         
                      (    cubix_ide.asm):00401         
                      (    cubix_ide.asm):00402         ;-------------------------------------------------------------------------------
                      (    cubix_ide.asm):00403         
                      (    cubix_ide.asm):00404         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (    cubix_ide.asm):00405         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (    cubix_ide.asm):00406         ; PROGRAM WOULD NOT CALL TO THESE.
                      (    cubix_ide.asm):00407         
                      (    cubix_ide.asm):00408         ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (    cubix_ide.asm):00409         ;INPUT A = IDE REGSITER ADDRESS
                      (    cubix_ide.asm):00410         ;OUTPUT D = WORD READ FROM IDE DRIVE
8A8C                  (    cubix_ide.asm):00411         IDE_READ:
8A8C BD8AD4           (    cubix_ide.asm):00412                 JSR     SET_PPI_RD                        ; SETUP FOR A READ CYCLE
8A8F                  (    cubix_ide.asm):00413         IDE_READ_NO_SETUP:
8A8F B7DF8A           (    cubix_ide.asm):00414                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
8A92 8A40             (    cubix_ide.asm):00415                 ORA     #PPIDE_RD_LINE                    ; ASSERT RD PIN
8A94 B7DF8A           (    cubix_ide.asm):00416                 STA     PPIDECNTRL
8A97 3402             (    cubix_ide.asm):00417                 PSHS    A
8A99 F6DF88           (    cubix_ide.asm):00418                 LDB     PPIDELO                           ; READ LOWER BYTE
8A9C B6DF89           (    cubix_ide.asm):00419                 LDA     PPIDEHI                           ; READ UPPER BYTE
8A9F B78891           (    cubix_ide.asm):00420                 STA     PPIDELOTMP
8AA2 3502             (    cubix_ide.asm):00421                 PULS    A                                 ; RESTORE REGISTER VALUE
8AA4 B7DF8A           (    cubix_ide.asm):00422                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
8AA7 8840             (    cubix_ide.asm):00423                 EORA    #PPIDE_RD_LINE                    ; ASSERT RD PIN
8AA9 B7DF8A           (    cubix_ide.asm):00424                 STA     PPIDECNTRL
8AAC 8600             (    cubix_ide.asm):00425                 LDA     #$00
8AAE B7DF8A           (    cubix_ide.asm):00426                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8AB1 B68891           (    cubix_ide.asm):00427                 LDA     PPIDELOTMP
8AB4 39               (    cubix_ide.asm):00428                 RTS
                      (    cubix_ide.asm):00429         
                      (    cubix_ide.asm):00430         
                      (    cubix_ide.asm):00431         
                      (    cubix_ide.asm):00432         ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (    cubix_ide.asm):00433         ;INPUT PPIDECOMMAND = IDE REGISTER ADDRESS
                      (    cubix_ide.asm):00434         ;INPUT REGISTER D = WORD TO WRITE
                      (    cubix_ide.asm):00435         ;
                      (    cubix_ide.asm):00436         
8AB5                  (    cubix_ide.asm):00437         IDE_WRITE:
8AB5 BD8AE2           (    cubix_ide.asm):00438                 JSR     SET_PPI_WR                        ; SETUP FOR A WRITE CYCLE
8AB8 F7DF88           (    cubix_ide.asm):00439                 STB     PPIDELO                           ; WRITE LOWER BYTE
8ABB B7DF89           (    cubix_ide.asm):00440                 STA     PPIDEHI                           ; WRITE UPPER BYTE
8ABE B68892           (    cubix_ide.asm):00441                 LDA     PPIDECOMMAND
8AC1 B7DF8A           (    cubix_ide.asm):00442                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
8AC4 8A20             (    cubix_ide.asm):00443                 ORA     #PPIDE_WR_LINE                    ; ASSERT WRITE PIN
8AC6 B7DF8A           (    cubix_ide.asm):00444                 STA     PPIDECNTRL
8AC9 8820             (    cubix_ide.asm):00445                 EORA    #PPIDE_WR_LINE                    ; DE ASSERT WR PIN
8ACB B7DF8A           (    cubix_ide.asm):00446                 STA     PPIDECNTRL
8ACE 8600             (    cubix_ide.asm):00447                 LDA     #$00
8AD0 B7DF8A           (    cubix_ide.asm):00448                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8AD3 39               (    cubix_ide.asm):00449                 RTS
                      (    cubix_ide.asm):00450         
                      (    cubix_ide.asm):00451         
                      (    cubix_ide.asm):00452         ;-----------------------------------------------------------------------------------
                      (    cubix_ide.asm):00453         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (    cubix_ide.asm):00454         ;
                      (    cubix_ide.asm):00455         ;------------------------------------------------------------------------------------
                      (    cubix_ide.asm):00456         
8AD4                  (    cubix_ide.asm):00457         SET_PPI_RD:
8AD4 3402             (    cubix_ide.asm):00458                 PSHS    A
8AD6 8600             (    cubix_ide.asm):00459                 LDA     #$00
8AD8 B7DF8A           (    cubix_ide.asm):00460                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8ADB 8692             (    cubix_ide.asm):00461                 LDA     #PPRD_IDE_8255
8ADD B7DF8B           (    cubix_ide.asm):00462                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, READ MODE
8AE0 3582             (    cubix_ide.asm):00463                 PULS    A,PC
                      (    cubix_ide.asm):00464         
8AE2                  (    cubix_ide.asm):00465         SET_PPI_WR:
8AE2 3402             (    cubix_ide.asm):00466                 PSHS    A
8AE4 8600             (    cubix_ide.asm):00467                 LDA     #$00
8AE6 B7DF8A           (    cubix_ide.asm):00468                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8AE9 8680             (    cubix_ide.asm):00469                 LDA     #PPWR_IDE_8255
8AEB B7DF8B           (    cubix_ide.asm):00470                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, WRITE MODE
8AEE 3582             (    cubix_ide.asm):00471                 PULS    A,PC
                      (    cubix_ide.asm):00472         
                      (    cubix_ide.asm):00473         
8AF0                  (    cubix_ide.asm):00474         MESSAGE1
8AF0 5050494445203A   (    cubix_ide.asm):00475                 FCC     "PPIDE :"
8AF7 00               (    cubix_ide.asm):00476                 FCB     00
8AF8                  (    cubix_ide.asm):00477         MESSAGE2
8AF8 20494F3D3078     (    cubix_ide.asm):00478                 FCC     " IO=0x"
8AFE 00               (    cubix_ide.asm):00479                 FCB     00
8AFF                  (    cubix_ide.asm):00480         MESSAGE3
8AFF 204E4F5420505245 (    cubix_ide.asm):00481                 FCC     " NOT PRESENT"
     53454E54
8B0B 00               (    cubix_ide.asm):00482                 FCB     00
8B0C                  (    cubix_ide.asm):00483         MESSAGE4
8B0C 205050494445303A (    cubix_ide.asm):00484                 FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
8B1C 00               (    cubix_ide.asm):00485                 FCB     00
8B1D                  (    cubix_ide.asm):00486         MESSAGE5
8B1D 205050494445313A (    cubix_ide.asm):00487                 FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
8B2D 00               (    cubix_ide.asm):00488                 FCB     00
8B2E                  (    cubix_ide.asm):00489         MESSAGE6
8B2E 3078             (    cubix_ide.asm):00490                 FCC     "0x"
8B30 00               (    cubix_ide.asm):00491                 FCB     00
                      (    cubix_ide.asm):00492         
                      (    cubix_ide.asm):00493         
                      (    cubix_ide.asm):00494         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (    cubix_ide.asm):00495         ;*
                      (    cubix_ide.asm):00496         ;*
                      (    cubix_ide.asm):00497         ;        SETUP   LBA DATA
                      (    cubix_ide.asm):00498         ;*
                      (    cubix_ide.asm):00499         ;*    This assumes the drive is setup for 128 sectors, 128 Cylinders, 4 heads. = 65536 total sectors.
                      (    cubix_ide.asm):00500         ;     LBA ADDRESS   LLLLLLLL CCCCCCCS SSSSSSHH
                      (    cubix_ide.asm):00501         ;     L=SLICE
                      (    cubix_ide.asm):00502         ;     H=HEAD
                      (    cubix_ide.asm):00503         ;     C=CYLINDER
                      (    cubix_ide.asm):00504         ;     S=SECTOR
                      (    cubix_ide.asm):00505         ;*
                      (    cubix_ide.asm):00506         ;*____________________________________________________________________________________________________
8B31                  (    cubix_ide.asm):00507         IDE_SETUP_LBA:
8B31 3406             (    cubix_ide.asm):00508                 PSHS    D
8B33 860E             (    cubix_ide.asm):00509                 LDA     #PPIDE_DEVICE
8B35 B701F3           (    cubix_ide.asm):00510                 STA     DSKY_HEXBUF
8B38 B78892           (    cubix_ide.asm):00511                 STA     PPIDECOMMAND
8B3B 8600             (    cubix_ide.asm):00512                 LDA     #$00
8B3D F601FB           (    cubix_ide.asm):00513                 LDB     CURRENTDEVICE
8B40 C401             (    cubix_ide.asm):00514                 ANDB    #$01                              ; only want drive cfg
8B42 58               (    cubix_ide.asm):00515                 ASLB                                      ; SHIFT 4
8B43 58               (    cubix_ide.asm):00516                 ASLB                                      ;
8B44 58               (    cubix_ide.asm):00517                 ASLB                                      ;
8B45 58               (    cubix_ide.asm):00518                 ASLB                                      ;
8B46 CAE0             (    cubix_ide.asm):00519                 ORB     #$E0                              ; E0=MST  F0=SLV
8B48 BD8AB5           (    cubix_ide.asm):00520                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00521         
8B4B 860D             (    cubix_ide.asm):00522                 LDA     #PPIDE_LBAHI
8B4D B78892           (    cubix_ide.asm):00523                 STA     PPIDECOMMAND
8B50 8600             (    cubix_ide.asm):00524                 LDA     #$00
8B52 F601FC           (    cubix_ide.asm):00525                 LDB     CURRENTSLICE
8B55 F701F4           (    cubix_ide.asm):00526                 STB     DSKY_HEXBUF+1
8B58 BD8AB5           (    cubix_ide.asm):00527                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00528         
8B5B 860C             (    cubix_ide.asm):00529                 LDA     #PPIDE_LBAMID
8B5D B78892           (    cubix_ide.asm):00530                 STA     PPIDECOMMAND
8B60 8600             (    cubix_ide.asm):00531                 LDA     #$00
8B62 F601F9           (    cubix_ide.asm):00532                 LDB     CURRENTCYL                        ;
8B65 F701F5           (    cubix_ide.asm):00533                 STB     DSKY_HEXBUF+2
8B68 BD8AB5           (    cubix_ide.asm):00534                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00535         
8B6B 860B             (    cubix_ide.asm):00536                 LDA     #PPIDE_LBALOW
8B6D B78892           (    cubix_ide.asm):00537                 STA     PPIDECOMMAND
8B70 8600             (    cubix_ide.asm):00538                 LDA     #$00
8B72 F601FA           (    cubix_ide.asm):00539                 LDB     CURRENTSEC                        ;
8B75 F701F6           (    cubix_ide.asm):00540                 STB     DSKY_HEXBUF+3
8B78 BD8AB5           (    cubix_ide.asm):00541                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00542         
8B7B 860A             (    cubix_ide.asm):00543                 LDA     #PPIDE_SEC_CNT
8B7D B78892           (    cubix_ide.asm):00544                 STA     PPIDECOMMAND
8B80 8600             (    cubix_ide.asm):00545                 LDA     #$00
8B82 C601             (    cubix_ide.asm):00546                 LDB     #$01
8B84 BD8AB5           (    cubix_ide.asm):00547                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00548         
8B87 BD8C9A           (    cubix_ide.asm):00549                 JSR     DSKY_BIN2SEG
8B8A BD8CE1           (    cubix_ide.asm):00550                 JSR     DSKY_SHOW
8B8D 3586             (    cubix_ide.asm):00551                 PULS    D,PC
                      (     cubixdrv.asm):00091                 INCLUDE cubix_dskyng.asm
                      ( cubix_dskyng.asm):00001         ;__DSKYNG DRIVERS_________________________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00002         ;
                      ( cubix_dskyng.asm):00003         ;       Duodyne DSKY/NG drivers
                      ( cubix_dskyng.asm):00004         ;
                      ( cubix_dskyng.asm):00005         ;       Entry points:
                      ( cubix_dskyng.asm):00006         ;               DSKY_INIT
                      ( cubix_dskyng.asm):00007         ;               DSKY_SHOW
                      ( cubix_dskyng.asm):00008         ;               DSKY_BIN2SEG
                      ( cubix_dskyng.asm):00009         ;               DSKY_RESET
                      ( cubix_dskyng.asm):00010         ;               DSKY_STAT
                      ( cubix_dskyng.asm):00011         ;               DSKY_GETKEY
                      ( cubix_dskyng.asm):00012         ;               DSKY_BEEP
                      ( cubix_dskyng.asm):00013         ;               DSKY_L1ON
                      ( cubix_dskyng.asm):00014         ;               DSKY_L2ON
                      ( cubix_dskyng.asm):00015         ;               DSKY_L1OFF
                      ( cubix_dskyng.asm):00016         ;               DSKY_L2OFF
                      ( cubix_dskyng.asm):00017         ;               DSKY_PUTLED
                      ( cubix_dskyng.asm):00018         ;               DSKY_BLANK
                      ( cubix_dskyng.asm):00019         ;________________________________________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00020         ;
                      ( cubix_dskyng.asm):00021         ;
                      ( cubix_dskyng.asm):00022         ; A DSKYNG CAN SHARE A PPI BUS WITH EITHER A PPIDE OR PPISD.
                      ( cubix_dskyng.asm):00023         ;
                      ( cubix_dskyng.asm):00024         ; LED SEGMENTS (BIT VALUES)
                      ( cubix_dskyng.asm):00025         ;
                      ( cubix_dskyng.asm):00026         ;       +--01--+
                      ( cubix_dskyng.asm):00027         ;       20    02
                      ( cubix_dskyng.asm):00028         ;       +--40--+
                      ( cubix_dskyng.asm):00029         ;       10    04
                      ( cubix_dskyng.asm):00030         ;       +--08--+  80
                      ( cubix_dskyng.asm):00031         ;
                      ( cubix_dskyng.asm):00032         ; KEY CODE MAP (KEY CODES) CSCCCRRR
                      ( cubix_dskyng.asm):00033         ;                          ||||||||
                      ( cubix_dskyng.asm):00034         ;                          |||||+++-- ROW
                      ( cubix_dskyng.asm):00035         ;                          ||+++----- COL
                      ( cubix_dskyng.asm):00036         ;                          |+-------- SHIFT
                      ( cubix_dskyng.asm):00037         ;                          +--------- CONTROL
                      ( cubix_dskyng.asm):00038         ;
                      ( cubix_dskyng.asm):00039         ;       00      08      10      18      23
                      ( cubix_dskyng.asm):00040         ;       01      09      11      19      22
                      ( cubix_dskyng.asm):00041         ;       02      0A      12      1A      21
                      ( cubix_dskyng.asm):00042         ;       03      0B      13      1B      20
                      ( cubix_dskyng.asm):00043         ;       04      0C      14      1C      SHIFT
                      ( cubix_dskyng.asm):00044         ;       05      0D      15      1D      CTRL
                      ( cubix_dskyng.asm):00045         ;
                      ( cubix_dskyng.asm):00046         ; LED BIT MAP (BIT VALUES)
                      ( cubix_dskyng.asm):00047         ;
                      ( cubix_dskyng.asm):00048         ;       $08     $09     $0A     $0B     $0C     $0D     $0E     $0F
                      ( cubix_dskyng.asm):00049         ;       ---     ---     ---     ---     ---     ---     ---     ---
                      ( cubix_dskyng.asm):00050         ;       01      01      01      01      01
                      ( cubix_dskyng.asm):00051         ;       02      02      02      02      02
                      ( cubix_dskyng.asm):00052         ;       04      04      04      04      04
                      ( cubix_dskyng.asm):00053         ;       08      08      08      08      08
                      ( cubix_dskyng.asm):00054         ;       10      10      10      10      10
                      ( cubix_dskyng.asm):00055         ;       20      20      20      20      20      L1      L2      BUZZ
                      ( cubix_dskyng.asm):00056         ;
     DF88             ( cubix_dskyng.asm):00057         DSKY_PPI        = $DF88                           ; PORT
     DF88             ( cubix_dskyng.asm):00058         DSKY_PPIA       = DSKY_PPI+0                      ; PORT A
     DF89             ( cubix_dskyng.asm):00059         DSKY_PPIB       = DSKY_PPI+1                      ; PORT B
     DF8A             ( cubix_dskyng.asm):00060         DSKY_PPIC       = DSKY_PPI+2                      ; PORT C
     DF8B             ( cubix_dskyng.asm):00061         DSKY_PPIX       = DSKY_PPI+3                      ; PPI CONTROL PORT
                      ( cubix_dskyng.asm):00062         ;
     0092             ( cubix_dskyng.asm):00063         DSKY_PPIX_RD    = %10010010                       ; PPIX VALUE FOR READS
     0082             ( cubix_dskyng.asm):00064         DSKY_PPIX_WR    = %10000010                       ; PPIX VALUE FOR WRITES
                      ( cubix_dskyng.asm):00065         ;
                      ( cubix_dskyng.asm):00066         ; PIO CHANNEL C:
                      ( cubix_dskyng.asm):00067         ;
                      ( cubix_dskyng.asm):00068         ;       7       6       5       4       3       2       1       0
                      ( cubix_dskyng.asm):00069         ;       RES     0       0       CS      CS      /RD     /WR     A0
                      ( cubix_dskyng.asm):00070         ;
                      ( cubix_dskyng.asm):00071         ; SETTING BITS 3 & 4 WILL ASSERT /CS ON 3279
                      ( cubix_dskyng.asm):00072         ; CLEAR BITS 1 OR 2 TO ASSERT READ/WRITE
                      ( cubix_dskyng.asm):00073         ;
     0006             ( cubix_dskyng.asm):00074         DSKY_PPI_IDLE   = %00000110
                      ( cubix_dskyng.asm):00075         ;
     00DF             ( cubix_dskyng.asm):00076         DSKY_CMD_CLR    = %11011111                       ; CLEAR (ALL OFF)
     00D3             ( cubix_dskyng.asm):00077         DSKY_CMD_CLRX   = %11010011                       ; CLEAR (ALL ON)
     0090             ( cubix_dskyng.asm):00078         DSKY_CMD_WDSP   = %10010000                       ; WRITE DISPLAY RAM
     0070             ( cubix_dskyng.asm):00079         DSKY_CMD_RDSP   = %01110000                       ; READ DISPLAY RAM
     0020             ( cubix_dskyng.asm):00080         DSKY_CMD_CLK    = %00100000                       ; SET CLK PRESCALE
     0040             ( cubix_dskyng.asm):00081         DSKY_CMD_FIFO   = %01000000                       ; READ FIFO
                      ( cubix_dskyng.asm):00082         ;
     ????             ( cubix_dskyng.asm):00083         DSKY_PRESCL     = DSKYOSC/100000                  ; PRESCALER
                      ( cubix_dskyng.asm):00084         ;
                      ( cubix_dskyng.asm):00085         ;__DSKY_INIT_________________________________________________________________________________________
                      ( cubix_dskyng.asm):00086         ;
                      ( cubix_dskyng.asm):00087         ;  DISPLAY DSKY INFO
                      ( cubix_dskyng.asm):00088         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00089         ;
8B8F                  ( cubix_dskyng.asm):00090         DSKY_INIT:
                      ( cubix_dskyng.asm):00091         ; PRTDBG "DSKY INIT:$"
8B8F BD8BD8           ( cubix_dskyng.asm):00092                 JSR     DSKY_PREINIT
8B92 8E8E3E           ( cubix_dskyng.asm):00093                 LDX     #DSKYMESSAGE1
8B95 BD9721           ( cubix_dskyng.asm):00094                 JSR     WRSTR                             ; DO PROMPT
8B98 BD970D           ( cubix_dskyng.asm):00095                 JSR     LFCR                              ; AND CRLF
                      ( cubix_dskyng.asm):00096         
8B9B 8E8E44           ( cubix_dskyng.asm):00097                 LDX     #DSKYMESSAGE2
8B9E BD9721           ( cubix_dskyng.asm):00098                 JSR     WRSTR                             ; DO PROMPT
8BA1 CCDF88           ( cubix_dskyng.asm):00099                 LDD     #PPIDE_PPI                        ; GET BASE PORT
8BA4 BD972D           ( cubix_dskyng.asm):00100                 JSR     WRHEXW                            ; PRINT BASE PORT
                      ( cubix_dskyng.asm):00101         
8BA7 8E8E4B           ( cubix_dskyng.asm):00102                 LDX     #DSKYMESSAGE3
8BAA BD9721           ( cubix_dskyng.asm):00103                 JSR     WRSTR                             ; DO PROMPT
                      ( cubix_dskyng.asm):00104         ;
                      ( cubix_dskyng.asm):00105         ;
8BAD B68E35           ( cubix_dskyng.asm):00106                 LDA     DSKY_PRESENT                      ; PRESENT?
8BB0 81FF             ( cubix_dskyng.asm):00107                 CMPA    #$FF                              ; SET FLAGS
8BB2 2708             ( cubix_dskyng.asm):00108                 BEQ     DSKY_INITA
8BB4 8E8E54           ( cubix_dskyng.asm):00109                 LDX     #DSKYMESSAGE4
8BB7 BD9721           ( cubix_dskyng.asm):00110                 JSR     WRSTR                             ; DO PROMPT
8BBA 2018             ( cubix_dskyng.asm):00111                 BRA     DSKY_INITB
8BBC                  ( cubix_dskyng.asm):00112         DSKY_INITA:
8BBC 8E0000           ( cubix_dskyng.asm):00113                 LDX     #$00
                      ( cubix_dskyng.asm):00114         !
8BBF A6898E36         ( cubix_dskyng.asm):00115                 LDA     DSKYINITMSG,X
8BC3 A78901EA         ( cubix_dskyng.asm):00116                 STA     DSKY_BUF,X
8BC7 3001             ( cubix_dskyng.asm):00117                 INX
8BC9 8C0008           ( cubix_dskyng.asm):00118                 CMPX    #$0008
8BCC 26F1             ( cubix_dskyng.asm):00119                 BNE     <
8BCE BD8CE1           ( cubix_dskyng.asm):00120                 JSR     DSKY_SHOW
8BD1 BD8DB3           ( cubix_dskyng.asm):00121                 JSR     DSKY_BEEP
                      ( cubix_dskyng.asm):00122         
8BD4                  ( cubix_dskyng.asm):00123         DSKY_INITB:
8BD4 BD970D           ( cubix_dskyng.asm):00124                 JSR     LFCR                              ; AND CRLF
8BD7 39               ( cubix_dskyng.asm):00125                 RTS                                       ; DONE
                      ( cubix_dskyng.asm):00126         ;
                      ( cubix_dskyng.asm):00127         ;__DSKY_PREINIT______________________________________________________________________________________
                      ( cubix_dskyng.asm):00128         ;
                      ( cubix_dskyng.asm):00129         ;  CONFIGURE PARALLEL PORT AND INITIALIZE 8279
                      ( cubix_dskyng.asm):00130         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00131         ; HARDWARE RESET 8279 BY PULSING RESET LINE
8BD8                  ( cubix_dskyng.asm):00132         DSKY_PREINIT:
                      ( cubix_dskyng.asm):00133         ; CHECK FOR PPI
8BD8 BD8C21           ( cubix_dskyng.asm):00134                 JSR     DSKY_PPIDETECT                    ; TEST FOR PPI HARDWARE
8BDB 262A             ( cubix_dskyng.asm):00135                 BNE     DSKY_ABORT                        ; BAIL OUT IF NOT THERE
                      ( cubix_dskyng.asm):00136         
                      ( cubix_dskyng.asm):00137         ; SETUP PPI TO DEFAULT MODE
8BDD BD8E0D           ( cubix_dskyng.asm):00138                 JSR     DSKY_PPIRD
                      ( cubix_dskyng.asm):00139         ; INIT 8279 VALUES TO IDLE STATE
8BE0 8606             ( cubix_dskyng.asm):00140                 LDA     #DSKY_PPI_IDLE
8BE2 B7DF8A           ( cubix_dskyng.asm):00141                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00142         ; PULSE RESET SIGNAL ON 8279
8BE5 8A80             ( cubix_dskyng.asm):00143                 ORA     #%10000000
8BE7 B7DF8A           ( cubix_dskyng.asm):00144                 STA     DSKY_PPIC
8BEA 847F             ( cubix_dskyng.asm):00145                 ANDA    #%01111111
8BEC B7DF8A           ( cubix_dskyng.asm):00146                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00147         ; INITIALIZE 8279
8BEF BD8C08           ( cubix_dskyng.asm):00148                 JSR     DSKY_REINIT
                      ( cubix_dskyng.asm):00149         ; NOW SEE IF A DSKYNG IS REALLY THERE...
8BF2 86A5             ( cubix_dskyng.asm):00150                 LDA     #$A5
8BF4 C600             ( cubix_dskyng.asm):00151                 LDB     #$00
8BF6 BD8D7C           ( cubix_dskyng.asm):00152                 JSR     DSKY_PUTBYTE
8BF9 C600             ( cubix_dskyng.asm):00153                 LDB     #$00
8BFB BD8D8F           ( cubix_dskyng.asm):00154                 JSR     DSKY_GETBYTE
8BFE 81A5             ( cubix_dskyng.asm):00155                 CMPA    #$A5
8C00 2605             ( cubix_dskyng.asm):00156                 BNE     DSKY_ABORT                        ; BAIL OUT IF MISCOMPARE
8C02 86FF             ( cubix_dskyng.asm):00157                 LDA     #$FF
8C04 B78E35           ( cubix_dskyng.asm):00158                 STA     DSKY_PRESENT
8C07                  ( cubix_dskyng.asm):00159         DSKY_ABORT:
8C07 39               ( cubix_dskyng.asm):00160                 RTS
                      ( cubix_dskyng.asm):00161         ;
8C08                  ( cubix_dskyng.asm):00162         DSKY_REINIT:
8C08 BD8E20           ( cubix_dskyng.asm):00163                 JSR     DSKY_PPIIDLE
                      ( cubix_dskyng.asm):00164         ; SET CLOCK SCALER TO 20
8C0B 8620             ( cubix_dskyng.asm):00165                 LDA     #DSKY_CMD_CLK | DSKY_PRESCL
8C0D BD8CF8           ( cubix_dskyng.asm):00166                 JSR     DSKY_CMD
                      ( cubix_dskyng.asm):00167         ; FALL THRU
                      ( cubix_dskyng.asm):00168         ;
8C10                  ( cubix_dskyng.asm):00169         DSKY_RESET:
                      ( cubix_dskyng.asm):00170         ; RESET DSKY -- CLEAR RAM AND FIFO
8C10 86DF             ( cubix_dskyng.asm):00171                 LDA     #DSKY_CMD_CLR
8C12 BD8CF8           ( cubix_dskyng.asm):00172                 JSR     DSKY_CMD
                      ( cubix_dskyng.asm):00173         ;
                      ( cubix_dskyng.asm):00174         ; 8259 TAKES ~160US TO CLEAR RAM DURING WHICH TIME WRITES TO
                      ( cubix_dskyng.asm):00175         ; DISPLAY RAM ARE INHIBITED.  HIGH BIT OF STATUS BYTE IS SET
                      ( cubix_dskyng.asm):00176         ; DURING THIS WINDOW.  TO PREVENT A DEADLOCK, A LOOP COUNTER
                      ( cubix_dskyng.asm):00177         ; IS USED TO IMPLEMENT A TIMEOUT.
8C15 8E0000           ( cubix_dskyng.asm):00178                 LDX     #0                                ; TIMEOUT LOOP COUNTER
8C18                  ( cubix_dskyng.asm):00179         DSKY_RESET1:
8C18 3410             ( cubix_dskyng.asm):00180                 PSHS    X                                 ; SAVE COUNTER
                      ( cubix_dskyng.asm):00181         ;JSR    DSKY_ST                 ; GET STATUS BYTE
8C1A 3510             ( cubix_dskyng.asm):00182                 PULS    X                                 ; RECOVER COUNTER
                      ( cubix_dskyng.asm):00183         ;  AND     #%10000000
                      ( cubix_dskyng.asm):00184         ;  BEQ     DSKY_RESET2          ; MOVE ON IF DONE
8C1C 301F             ( cubix_dskyng.asm):00185                 DEX
8C1E 26F8             ( cubix_dskyng.asm):00186                 BNE     DSKY_RESET1                       ; LOOP TILL TIMEOUT
                      ( cubix_dskyng.asm):00187         ;
8C20                  ( cubix_dskyng.asm):00188         DSKY_RESET2:
8C20 39               ( cubix_dskyng.asm):00189                 RTS
                      ( cubix_dskyng.asm):00190         ;
                      ( cubix_dskyng.asm):00191         ;
                      ( cubix_dskyng.asm):00192         ;
                      ( cubix_dskyng.asm):00193         ;__DSKY_PPIDETECT____________________________________________________________________________________
                      ( cubix_dskyng.asm):00194         ;
                      ( cubix_dskyng.asm):00195         ;  PROBE FOR PPI HARDWARE
                      ( cubix_dskyng.asm):00196         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00197         ;
8C21                  ( cubix_dskyng.asm):00198         DSKY_PPIDETECT:
                      ( cubix_dskyng.asm):00199         ;
                      ( cubix_dskyng.asm):00200         ; TEST FOR PPI EXISTENCE
                      ( cubix_dskyng.asm):00201         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      ( cubix_dskyng.asm):00202         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      ( cubix_dskyng.asm):00203         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      ( cubix_dskyng.asm):00204         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      ( cubix_dskyng.asm):00205         ; INTERFERE WITH THE VALUE BEING READ.
8C21 BD8DF5           ( cubix_dskyng.asm):00206                 JSR     DSKY_PPIWR
                      ( cubix_dskyng.asm):00207         ;
8C24 8600             ( cubix_dskyng.asm):00208                 LDA     #$00                              ; VALUE ZERO
8C26 B7DF88           ( cubix_dskyng.asm):00209                 STA     DSKY_PPIA                         ; PUSH VALUE TO PORT
8C29 B6DF88           ( cubix_dskyng.asm):00210                 LDA     DSKY_PPIA                         ; GET PORT VALUE
8C2C 8100             ( cubix_dskyng.asm):00211                 CMPA    #$00
8C2E 39               ( cubix_dskyng.asm):00212                 RTS                                       ; AND RETURN
                      ( cubix_dskyng.asm):00213         ;
                      ( cubix_dskyng.asm):00214         ;
     0000             ( cubix_dskyng.asm):00215         KY_0            = $00
     0001             ( cubix_dskyng.asm):00216         KY_1            = $01
     0002             ( cubix_dskyng.asm):00217         KY_2            = $02
     0003             ( cubix_dskyng.asm):00218         KY_3            = $03
     0004             ( cubix_dskyng.asm):00219         KY_4            = $04
     0005             ( cubix_dskyng.asm):00220         KY_5            = $05
     0006             ( cubix_dskyng.asm):00221         KY_6            = $06
     0007             ( cubix_dskyng.asm):00222         KY_7            = $07
     0008             ( cubix_dskyng.asm):00223         KY_8            = $08
     0009             ( cubix_dskyng.asm):00224         KY_9            = $09
     000A             ( cubix_dskyng.asm):00225         KY_A            = $0A
     000B             ( cubix_dskyng.asm):00226         KY_B            = $0B
     000C             ( cubix_dskyng.asm):00227         KY_C            = $0C
     000D             ( cubix_dskyng.asm):00228         KY_D            = $0D
     000E             ( cubix_dskyng.asm):00229         KY_E            = $0E
     000F             ( cubix_dskyng.asm):00230         KY_F            = $0F
     0010             ( cubix_dskyng.asm):00231         KY_FW           = $10                             ; FORWARD
     0011             ( cubix_dskyng.asm):00232         KY_BK           = $11                             ; BACKWARD
     0012             ( cubix_dskyng.asm):00233         KY_CL           = $12                             ; CLEAR
     0013             ( cubix_dskyng.asm):00234         KY_EN           = $13                             ; ENTER
     0014             ( cubix_dskyng.asm):00235         KY_DE           = $14                             ; DEPOSIT
     0015             ( cubix_dskyng.asm):00236         KY_EX           = $15                             ; EXAMINE
     0016             ( cubix_dskyng.asm):00237         KY_GO           = $16                             ; GO
     0017             ( cubix_dskyng.asm):00238         KY_BO           = $17                             ; BOOT
     0018             ( cubix_dskyng.asm):00239         KY_F4           = $18                             ; F4
     0019             ( cubix_dskyng.asm):00240         KY_F3           = $19                             ; F3
     0020             ( cubix_dskyng.asm):00241         KY_F2           = $20                             ; F2
     0021             ( cubix_dskyng.asm):00242         KY_F1           = $21                             ; F1
                      ( cubix_dskyng.asm):00243         ;
                      ( cubix_dskyng.asm):00244         ;__DSKY_STAT_________________________________________________________________________________________
                      ( cubix_dskyng.asm):00245         ;
                      ( cubix_dskyng.asm):00246         ;  CHECK FOR KEY PRESS, SAVE RAW VALUE, RETURN STATUS
                      ( cubix_dskyng.asm):00247         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00248         ;
8C2F                  ( cubix_dskyng.asm):00249         DSKY_STAT:
8C2F B68E35           ( cubix_dskyng.asm):00250                 LDA     DSKY_PRESENT                      ; DOES IT EXIST?
8C32 81FF             ( cubix_dskyng.asm):00251                 CMPA    #$FF                              ; SET FLAGS
8C34 2605             ( cubix_dskyng.asm):00252                 BNE     DSKY_STATA                        ; ABORT WITH A=0 IF NOT THERE
8C36 BD8D34           ( cubix_dskyng.asm):00253                 JSR     DSKY_ST
8C39 840F             ( cubix_dskyng.asm):00254                 ANDA    #$0F                              ; ISOLATE THE CUR FIFO LEN
8C3B                  ( cubix_dskyng.asm):00255         DSKY_STATA:
8C3B 39               ( cubix_dskyng.asm):00256                 RTS
                      ( cubix_dskyng.asm):00257         ;
                      ( cubix_dskyng.asm):00258         ;__DSKY_GETKEY_____________________________________________________________________________________
                      ( cubix_dskyng.asm):00259         ;
                      ( cubix_dskyng.asm):00260         ;  WAIT FOR A DSKY KEYPRESS AND RETURN
                      ( cubix_dskyng.asm):00261         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00262         ;
8C3C                  ( cubix_dskyng.asm):00263         DSKY_GETKEY:
8C3C B68E35           ( cubix_dskyng.asm):00264                 LDA     DSKY_PRESENT                      ; DOES IT EXIST?
8C3F 81FF             ( cubix_dskyng.asm):00265                 CMPA    #$FF                              ; SET FLAGS
8C41 2629             ( cubix_dskyng.asm):00266                 BNE     DSKY_GETKEY1A                     ; ABORT WITH A=0 IF NOT THERE
8C43 BD8C2F           ( cubix_dskyng.asm):00267                 JSR     DSKY_STAT
8C46 27F4             ( cubix_dskyng.asm):00268                 BEQ     DSKY_GETKEY                       ; LOOP IF NOTHING THERE
8C48 8640             ( cubix_dskyng.asm):00269                 LDA     #DSKY_CMD_FIFO
8C4A BD8CF8           ( cubix_dskyng.asm):00270                 JSR     DSKY_CMD
8C4D BD8D39           ( cubix_dskyng.asm):00271                 JSR     DSKY_DIN
8C50 88C0             ( cubix_dskyng.asm):00272                 EORA    #%11000000                        ; FLIP POLARITY OF SHIFT/CTL BITS
8C52 3402             ( cubix_dskyng.asm):00273                 PSHS    A
8C54 843F             ( cubix_dskyng.asm):00274                 ANDA    #$3F                              ; STRIP SHIFT/CTL BITS FOR LOOKUP
8C56 B78E33           ( cubix_dskyng.asm):00275                 STA     DSKY_TEMP_VAL
8C59 8E0000           ( cubix_dskyng.asm):00276                 LDX     #0                                ; INDEX
8C5C                  ( cubix_dskyng.asm):00277         DSKY_GETKEY1:
8C5C A6898C7E         ( cubix_dskyng.asm):00278                 LDA     DSKY_KEYMAP,X
8C60 B18E33           ( cubix_dskyng.asm):00279                 CMPA    DSKY_TEMP_VAL                     ; MATCH?
8C63 270C             ( cubix_dskyng.asm):00280                 BEQ     DSKY_GETKEY2                      ; FOUND, DONE
8C65 3001             ( cubix_dskyng.asm):00281                 INX
8C67 8C001C           ( cubix_dskyng.asm):00282                 CMPX    #28
8C6A 26F0             ( cubix_dskyng.asm):00283                 BNE     DSKY_GETKEY1                      ; LOOP UNTIL EOT
8C6C                  ( cubix_dskyng.asm):00284         DSKY_GETKEY1A:
8C6C 3502             ( cubix_dskyng.asm):00285                 PULS    A
8C6E 86FF             ( cubix_dskyng.asm):00286                 LDA     #$FF                              ; NOT FOUND ERR, RETURN $FF
8C70 39               ( cubix_dskyng.asm):00287                 RTS
                      ( cubix_dskyng.asm):00288         
8C71                  ( cubix_dskyng.asm):00289         DSKY_GETKEY2:
                      ( cubix_dskyng.asm):00290         ; RETURN THE INDEX POSITION WHERE THE SCAN CODE WAS FOUND
                      ( cubix_dskyng.asm):00291         ; THE ORIGINAL SHIFT/CTRL BITS ARE RESTORED
8C71 3502             ( cubix_dskyng.asm):00292                 PULS    A                                 ; RESTORE RAW VALUE
8C73 94C0             ( cubix_dskyng.asm):00293                 ANDA    %11000000                         ; ISOLATE SHIFT/CTRL BITS
8C75 B78E33           ( cubix_dskyng.asm):00294                 STA     DSKY_TEMP_VAL
8C78 1F18             ( cubix_dskyng.asm):00295                 TFR     X,A
8C7A BA8E33           ( cubix_dskyng.asm):00296                 ORA     DSKY_TEMP_VAL                     ; COMBINE WITH INDEX VALUE
8C7D 39               ( cubix_dskyng.asm):00297                 RTS
                      ( cubix_dskyng.asm):00298         ;
                      ( cubix_dskyng.asm):00299         ;_KEYMAP_TABLE_____________________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00300         ;
8C7E                  ( cubix_dskyng.asm):00301         DSKY_KEYMAP:
                      ( cubix_dskyng.asm):00302         ; POS   $00  $01  $02  $03  $04  $05  $06  $07
                      ( cubix_dskyng.asm):00303         ; KEY   [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]
8C7E 0D040C14030B1302 ( cubix_dskyng.asm):00304                 .BYTE   $0D,$04,$0C,$14,$03,$0B,$13,$02
                      ( cubix_dskyng.asm):00305         ;
                      ( cubix_dskyng.asm):00306         ; POS   $08  $09  $0A  $0B  $0C  $0D  $0E  $0F
                      ( cubix_dskyng.asm):00307         ; KEY   [8]  [9]  [A]  [B]  [C]  [D]  [E]  [F]
8C86 0A12010911000810 ( cubix_dskyng.asm):00308                 .BYTE   $0A,$12,$01,$09,$11,$00,$08,$10
                      ( cubix_dskyng.asm):00309         ;
                      ( cubix_dskyng.asm):00310         ; POS   $10  $11  $12  $13  $14  $15  $16  $17
                      ( cubix_dskyng.asm):00311         ; KEY   [FW] [BK] [CL] [EN] [DE] [EX] [GO] [BO]
8C8E 05151D1C1B1A1918 ( cubix_dskyng.asm):00312                 .BYTE   $05,$15,$1D,$1C,$1B,$1A,$19,$18
                      ( cubix_dskyng.asm):00313         
                      ( cubix_dskyng.asm):00314         ; POS   $18  $19  $20  $21
                      ( cubix_dskyng.asm):00315         ; KEY   [F4] [F3] [F2] [F1]
8C96 23222120         ( cubix_dskyng.asm):00316                 .BYTE   $23,$22,$21,$20
                      ( cubix_dskyng.asm):00317         
                      ( cubix_dskyng.asm):00318         ;
                      ( cubix_dskyng.asm):00319         ;
                      ( cubix_dskyng.asm):00320         ;__DSKY_BIN2SEG________________________________________________________________________________________
                      ( cubix_dskyng.asm):00321         ;
                      ( cubix_dskyng.asm):00322         ; CONVERT 32 BIT BINARY TO 8 BYTE HEX SEGMENT DISPLAY
                      ( cubix_dskyng.asm):00323         ;
                      ( cubix_dskyng.asm):00324         ; DSKY_BUF: 32 BIT BINARY
                      ( cubix_dskyng.asm):00325         ; DSKY_HEXBUF: DEST LED SEGMENT DISPLAY BUFFER (8 BYTES)
                      ( cubix_dskyng.asm):00326         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00327         ;
8C9A                  ( cubix_dskyng.asm):00328         DSKY_BIN2SEG:
8C9A 8E0000           ( cubix_dskyng.asm):00329                 LDX     #$0000
8C9D                  ( cubix_dskyng.asm):00330         DSKY_BIN2SEG1:
8C9D A68901F3         ( cubix_dskyng.asm):00331                 LDA     DSKY_HEXBUF,X                     ; FIRST NIBBLE
8CA1 44               ( cubix_dskyng.asm):00332                 LSRA
8CA2 44               ( cubix_dskyng.asm):00333                 LSRA
8CA3 44               ( cubix_dskyng.asm):00334                 LSRA
8CA4 44               ( cubix_dskyng.asm):00335                 LSRA
8CA5 C600             ( cubix_dskyng.asm):00336                 LDB     #$00
8CA7 1E89             ( cubix_dskyng.asm):00337                 EXG     A,B                               ; MOVE DIGIT TO LOOKUP INDEX
8CA9 1F02             ( cubix_dskyng.asm):00338                 TFR     D,Y
8CAB A6A98E23         ( cubix_dskyng.asm):00339                 LDA     DSKY_HEXMAP,Y                     ; GET DECODED DIGIT INTO A
8CAF 3402             ( cubix_dskyng.asm):00340                 PSHS    A
8CB1 1F10             ( cubix_dskyng.asm):00341                 TFR     X,D
8CB3 58               ( cubix_dskyng.asm):00342                 ASLB
8CB4 1F02             ( cubix_dskyng.asm):00343                 TFR     D,Y
8CB6 3502             ( cubix_dskyng.asm):00344                 PULS    A
8CB8 A7A901EA         ( cubix_dskyng.asm):00345                 STA     DSKY_BUF,Y                        ;STORE HIGH BYTE IN OUT BUFFER
8CBC A68901F3         ( cubix_dskyng.asm):00346                 LDA     DSKY_HEXBUF,X                     ; SECOND NIBBLE
8CC0 840F             ( cubix_dskyng.asm):00347                 ANDA    #$0F
8CC2 C600             ( cubix_dskyng.asm):00348                 LDB     #$00
8CC4 1E89             ( cubix_dskyng.asm):00349                 EXG     A,B                               ; MOVE DIGIT TO LOOKUP INDEX
8CC6 1F02             ( cubix_dskyng.asm):00350                 TFR     D,Y
8CC8 A6A98E23         ( cubix_dskyng.asm):00351                 LDA     DSKY_HEXMAP,Y                     ; GET DECODED DIGIT INTO A
8CCC 3402             ( cubix_dskyng.asm):00352                 PSHS    A
8CCE 1F10             ( cubix_dskyng.asm):00353                 TFR     X,D
8CD0 58               ( cubix_dskyng.asm):00354                 ASLB
8CD1 1F02             ( cubix_dskyng.asm):00355                 TFR     D,Y
8CD3 3502             ( cubix_dskyng.asm):00356                 PULS    A
8CD5 A7A901EB         ( cubix_dskyng.asm):00357                 STA     DSKY_BUF+1,Y                      ;STORE HIGH BYTE IN OUT BUFFER
8CD9 3001             ( cubix_dskyng.asm):00358                 INX
8CDB 8C0004           ( cubix_dskyng.asm):00359                 CMPX    #4
8CDE 26BD             ( cubix_dskyng.asm):00360                 BNE     DSKY_BIN2SEG1
8CE0 39               ( cubix_dskyng.asm):00361                 RTS
                      ( cubix_dskyng.asm):00362         ;
                      ( cubix_dskyng.asm):00363         ;__DSKY_SHOW___________________________________________________________________________________________
                      ( cubix_dskyng.asm):00364         ; DSKY SHOW BUFFER
                      ( cubix_dskyng.asm):00365         ;______________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00366         ;
8CE1                  ( cubix_dskyng.asm):00367         DSKY_SHOW:
8CE1 3436             ( cubix_dskyng.asm):00368                 PSHS    A,B,X,Y
8CE3 8E0000           ( cubix_dskyng.asm):00369                 LDX     #0
8CE6                  ( cubix_dskyng.asm):00370         DSKY_SHOW1:
8CE6 A68901EA         ( cubix_dskyng.asm):00371                 LDA     DSKY_BUF,X
8CEA 1F19             ( cubix_dskyng.asm):00372                 TFR     X,B
8CEC BD8D7C           ( cubix_dskyng.asm):00373                 JSR     DSKY_PUTBYTE
8CEF 3001             ( cubix_dskyng.asm):00374                 INX
8CF1 8C0008           ( cubix_dskyng.asm):00375                 CMPX    #8
8CF4 26F0             ( cubix_dskyng.asm):00376                 BNE     DSKY_SHOW1
8CF6 35B6             ( cubix_dskyng.asm):00377                 PULS    A,B,X,Y,PC
                      ( cubix_dskyng.asm):00378         
                      ( cubix_dskyng.asm):00379         ;______________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00380         ; DSKYNG OUTPUT ROUTINES
                      ( cubix_dskyng.asm):00381         ;______________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00382         
                      ( cubix_dskyng.asm):00383         ; SEND DSKY COMMAND BYTE IN REGISTER A
8CF8                  ( cubix_dskyng.asm):00384         DSKY_CMD:
8CF8 3402             ( cubix_dskyng.asm):00385                 PSHS    A
8CFA 8601             ( cubix_dskyng.asm):00386                 LDA     #$01
8CFC 7E8D03           ( cubix_dskyng.asm):00387                 JMP     DSKY_DOUT2
                      ( cubix_dskyng.asm):00388         ;
                      ( cubix_dskyng.asm):00389         ; SEND DSKY DATA BYTE IN REGISTER A
                      ( cubix_dskyng.asm):00390         ; TRASHES BC
                      ( cubix_dskyng.asm):00391         ;
8CFF                  ( cubix_dskyng.asm):00392         DSKY_DOUT:
8CFF 3402             ( cubix_dskyng.asm):00393                 PSHS    A
8D01 8600             ( cubix_dskyng.asm):00394                 LDA     #$00
                      ( cubix_dskyng.asm):00395         ;
8D03                  ( cubix_dskyng.asm):00396         DSKY_DOUT2:
                      ( cubix_dskyng.asm):00397         ; SET PPI LINE CONFIG TO WRITE MODE
8D03 BD8DF5           ( cubix_dskyng.asm):00398                 JSR     DSKY_PPIWR
                      ( cubix_dskyng.asm):00399         ;
                      ( cubix_dskyng.asm):00400         ; SET ADDRESS FIRST
8D06 8A06             ( cubix_dskyng.asm):00401                 ORA     #DSKY_PPI_IDLE
8D08 B7DF8A           ( cubix_dskyng.asm):00402                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00403         ;
                      ( cubix_dskyng.asm):00404         ; ASSERT 8279 /CS
8D0B 8A18             ( cubix_dskyng.asm):00405                 ORA     #%00011000
8D0D B7DF8A           ( cubix_dskyng.asm):00406                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00407         ;
                      ( cubix_dskyng.asm):00408         ; PPIC WORKING VALUE TO DSKY_TEMP_VAL
8D10 B78E33           ( cubix_dskyng.asm):00409                 STA     DSKY_TEMP_VAL
                      ( cubix_dskyng.asm):00410         ;
                      ( cubix_dskyng.asm):00411         ; ASSERT DATA BYTE VALUE
8D13 3502             ( cubix_dskyng.asm):00412                 PULS    A
8D15 B7DF88           ( cubix_dskyng.asm):00413                 STA     DSKY_PPIA
                      ( cubix_dskyng.asm):00414         ;
                      ( cubix_dskyng.asm):00415         ; PULSE /WR
8D18 B68E33           ( cubix_dskyng.asm):00416                 LDA     DSKY_TEMP_VAL
8D1B 84FD             ( cubix_dskyng.asm):00417                 ANDA    #%11111101
8D1D B7DF8A           ( cubix_dskyng.asm):00418                 STA     DSKY_PPIC
8D20 12               ( cubix_dskyng.asm):00419                 NOP                                       ; MAY NOT BE NEEDED
8D21 8A02             ( cubix_dskyng.asm):00420                 ORA     #%00000010
8D23 B7DF8A           ( cubix_dskyng.asm):00421                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00422         ;
                      ( cubix_dskyng.asm):00423         ; DEASSERT /CS
8D26 84E7             ( cubix_dskyng.asm):00424                 ANDA    #%11100111
8D28 B7DF8A           ( cubix_dskyng.asm):00425                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00426         ;
                      ( cubix_dskyng.asm):00427         ; CLEAR ADDRESS BIT
8D2B 84E6             ( cubix_dskyng.asm):00428                 ANDA    #%11100110
8D2D B7DF8A           ( cubix_dskyng.asm):00429                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00430         ;
                      ( cubix_dskyng.asm):00431         ; DONE
8D30 BD8E20           ( cubix_dskyng.asm):00432                 JSR     DSKY_PPIIDLE
8D33 39               ( cubix_dskyng.asm):00433                 RTS
                      ( cubix_dskyng.asm):00434         ;
                      ( cubix_dskyng.asm):00435         ;==================================================================================================
                      ( cubix_dskyng.asm):00436         ; DSKYNG OUTPUT ROUTINES
                      ( cubix_dskyng.asm):00437         ;==================================================================================================
                      ( cubix_dskyng.asm):00438         ;
                      ( cubix_dskyng.asm):00439         ; RETURN DSKY STATUS VALUE IN A
                      ( cubix_dskyng.asm):00440         ;
8D34                  ( cubix_dskyng.asm):00441         DSKY_ST:
8D34 8601             ( cubix_dskyng.asm):00442                 LDA     #$01
8D36 7E8D3B           ( cubix_dskyng.asm):00443                 JMP     DSKY_DIN2
                      ( cubix_dskyng.asm):00444         ;
                      ( cubix_dskyng.asm):00445         ; RETURN NEXT DATA VALUE IN A
                      ( cubix_dskyng.asm):00446         ;
8D39                  ( cubix_dskyng.asm):00447         DSKY_DIN:
8D39 8600             ( cubix_dskyng.asm):00448                 LDA     #$00
                      ( cubix_dskyng.asm):00449         ;
8D3B                  ( cubix_dskyng.asm):00450         DSKY_DIN2:
                      ( cubix_dskyng.asm):00451         ; SET PPI LINE CONFIG TO READ MODE
8D3B BD8E0D           ( cubix_dskyng.asm):00452                 JSR     DSKY_PPIRD
                      ( cubix_dskyng.asm):00453         ;
                      ( cubix_dskyng.asm):00454         ; SET ADDRESS FIRST
8D3E 8A06             ( cubix_dskyng.asm):00455                 ORA     #DSKY_PPI_IDLE
8D40 B7DF8A           ( cubix_dskyng.asm):00456                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00457         ;
                      ( cubix_dskyng.asm):00458         ; ASSERT 8279 /CS
8D43 8A18             ( cubix_dskyng.asm):00459                 ORA     #%00011000
8D45 B7DF8A           ( cubix_dskyng.asm):00460                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00461         ;
                      ( cubix_dskyng.asm):00462         ; ASSERT /RD
8D48 847B             ( cubix_dskyng.asm):00463                 ANDA    #%01111011
8D4A B7DF8A           ( cubix_dskyng.asm):00464                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00465         ;
8D4D B78E33           ( cubix_dskyng.asm):00466                 STA     DSKY_TEMP_VAL
                      ( cubix_dskyng.asm):00467         ; GET VALUE
8D50 B6DF88           ( cubix_dskyng.asm):00468                 LDA     DSKY_PPIA
8D53 3402             ( cubix_dskyng.asm):00469                 PSHS    A
8D55 B68E33           ( cubix_dskyng.asm):00470                 LDA     DSKY_TEMP_VAL
                      ( cubix_dskyng.asm):00471         ; DEASSERT /RD
8D58 8A04             ( cubix_dskyng.asm):00472                 ORA     #%00000100
8D5A B7DF8A           ( cubix_dskyng.asm):00473                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00474         ;
                      ( cubix_dskyng.asm):00475         ; DEASSERT /CS
8D5D 84E7             ( cubix_dskyng.asm):00476                 ANDA    #%11100111
8D5F B7DF8A           ( cubix_dskyng.asm):00477                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00478         ;
                      ( cubix_dskyng.asm):00479         ; CLEAR ADDRESS BIT
8D62 84E6             ( cubix_dskyng.asm):00480                 ANDA    #%11100110
8D64 B7DF8A           ( cubix_dskyng.asm):00481                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00482         ;
                      ( cubix_dskyng.asm):00483         ; DONE
8D67 BD8E20           ( cubix_dskyng.asm):00484                 JSR     DSKY_PPIIDLE
8D6A 3582             ( cubix_dskyng.asm):00485                 PULS    A,PC
                      ( cubix_dskyng.asm):00486         
                      ( cubix_dskyng.asm):00487         ;__DSKY_BLANK_____________________________________________________________________________________
                      ( cubix_dskyng.asm):00488         ;
                      ( cubix_dskyng.asm):00489         ; BLANK DSKYNG DISPLAY  (WITHOUT USING CLEAR)
                      ( cubix_dskyng.asm):00490         ;
                      ( cubix_dskyng.asm):00491         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00492         ;
8D6C                  ( cubix_dskyng.asm):00493         DSKY_BLANK:
8D6C 8690             ( cubix_dskyng.asm):00494                 LDA     #DSKY_CMD_WDSP
8D6E BD8CF8           ( cubix_dskyng.asm):00495                 JSR     DSKY_CMD
8D71 C610             ( cubix_dskyng.asm):00496                 LDB     #16
8D73                  ( cubix_dskyng.asm):00497         DSKY_BLANK1:
8D73 86FF             ( cubix_dskyng.asm):00498                 LDA     #$FF
8D75 BD8CFF           ( cubix_dskyng.asm):00499                 JSR     DSKY_DOUT
8D78 5A               ( cubix_dskyng.asm):00500                 DECB
8D79 26F8             ( cubix_dskyng.asm):00501                 BNE     DSKY_BLANK1
8D7B 39               ( cubix_dskyng.asm):00502                 RTS
                      ( cubix_dskyng.asm):00503         ;
                      ( cubix_dskyng.asm):00504         ;__DSKY_PUTBYTE____________________________________________________________________________________
                      ( cubix_dskyng.asm):00505         ;
                      ( cubix_dskyng.asm):00506         ; WRITE A RAW BYTE VALUE TO DSKY DISPLAY RAM
                      ( cubix_dskyng.asm):00507         ; AT LOCATION IN REGISTER B, VALUE IN A.
                      ( cubix_dskyng.asm):00508         ;
                      ( cubix_dskyng.asm):00509         ;__________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00510         ;
8D7C                  ( cubix_dskyng.asm):00511         DSKY_PUTBYTE:
8D7C 3402             ( cubix_dskyng.asm):00512                 PSHS    A
8D7E 1CFE             ( cubix_dskyng.asm):00513                 CLC
8D80 C990             ( cubix_dskyng.asm):00514                 ADCB    #DSKY_CMD_WDSP
8D82 1F98             ( cubix_dskyng.asm):00515                 TFR     B,A
8D84 BD8CF8           ( cubix_dskyng.asm):00516                 JSR     DSKY_CMD
8D87 3502             ( cubix_dskyng.asm):00517                 PULS    A
8D89 88FF             ( cubix_dskyng.asm):00518                 EORA    #$FF
8D8B BD8CFF           ( cubix_dskyng.asm):00519                 JSR     DSKY_DOUT
8D8E 39               ( cubix_dskyng.asm):00520                 RTS
                      ( cubix_dskyng.asm):00521         ;
                      ( cubix_dskyng.asm):00522         ;__DSKY_GETBYTE___________________________________________________________________________________
                      ( cubix_dskyng.asm):00523         ; READ A RAW BYTE VALUE FROM DSKY DISPLAY RAM
                      ( cubix_dskyng.asm):00524         ; AT LOCATION IN REGISTER B, VALUE RETURNED IN A
                      ( cubix_dskyng.asm):00525         ;
                      ( cubix_dskyng.asm):00526         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00527         ;
8D8F                  ( cubix_dskyng.asm):00528         DSKY_GETBYTE:
8D8F 1CFE             ( cubix_dskyng.asm):00529                 CLC
8D91 C970             ( cubix_dskyng.asm):00530                 ADCB    #DSKY_CMD_RDSP
8D93 1F98             ( cubix_dskyng.asm):00531                 TFR     B,A
8D95 BD8CF8           ( cubix_dskyng.asm):00532                 JSR     DSKY_CMD
8D98 BD8D39           ( cubix_dskyng.asm):00533                 JSR     DSKY_DIN
8D9B 88FF             ( cubix_dskyng.asm):00534                 EORA    #$FF
8D9D 39               ( cubix_dskyng.asm):00535                 RTS
                      ( cubix_dskyng.asm):00536         
                      ( cubix_dskyng.asm):00537         ;
                      ( cubix_dskyng.asm):00538         ;__DSKY_PUTLED____________________________________________________________________________________
                      ( cubix_dskyng.asm):00539         ;
                      ( cubix_dskyng.asm):00540         ;       This function is intended to update the LEDs.
                      ( cubix_dskyng.asm):00541         ;       VALUES SHOULD BE IN DSKY_BUF
                      ( cubix_dskyng.asm):00542         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00543         ;
8D9E                  ( cubix_dskyng.asm):00544         DSKY_PUTLED:
8D9E 3416             ( cubix_dskyng.asm):00545                 PSHS    A,B,X
8DA0 C600             ( cubix_dskyng.asm):00546                 LDB     #$00
8DA2 8E01EA           ( cubix_dskyng.asm):00547                 LDX     #DSKY_BUF
8DA5                  ( cubix_dskyng.asm):00548         DSKY_PUTLED_1:
8DA5 A684             ( cubix_dskyng.asm):00549                 LDA     ,X                                ; GET BYTE
8DA7 BD8D7C           ( cubix_dskyng.asm):00550                 JSR     DSKY_PUTBYTE                      ; SEND IT TO DSKY
8DAA 5C               ( cubix_dskyng.asm):00551                 INCB
8DAB 3001             ( cubix_dskyng.asm):00552                 INX
8DAD C108             ( cubix_dskyng.asm):00553                 CMPB    #8
8DAF 26F4             ( cubix_dskyng.asm):00554                 BNE     DSKY_PUTLED_1
8DB1 3596             ( cubix_dskyng.asm):00555                 PULS    A,B,X,PC
                      ( cubix_dskyng.asm):00556         
                      ( cubix_dskyng.asm):00557         ;
                      ( cubix_dskyng.asm):00558         ;__DSKY_BEEP______________________________________________________________________________________
                      ( cubix_dskyng.asm):00559         ;       This function is intended to beep the speaker on the DSKY
                      ( cubix_dskyng.asm):00560         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00561         ;
8DB3                  ( cubix_dskyng.asm):00562         DSKY_BEEP:
8DB3 3416             ( cubix_dskyng.asm):00563                 PSHS    A,B,X
8DB5 C60F             ( cubix_dskyng.asm):00564                 LDB     #$0F
8DB7 BD8D8F           ( cubix_dskyng.asm):00565                 JSR     DSKY_GETBYTE
8DBA 8A20             ( cubix_dskyng.asm):00566                 ORA     #$20
8DBC 8620             ( cubix_dskyng.asm):00567                 LDA     #$20
8DBE C60F             ( cubix_dskyng.asm):00568                 LDB     #$0F
8DC0 BD8D7C           ( cubix_dskyng.asm):00569                 JSR     DSKY_PUTBYTE
                      ( cubix_dskyng.asm):00570         
8DC3 8E8FFF           ( cubix_dskyng.asm):00571                 LDX     #$8FFF
8DC6                  ( cubix_dskyng.asm):00572         DSKY_BEEP1:
8DC6 301F             ( cubix_dskyng.asm):00573                 DEX
8DC8 26FC             ( cubix_dskyng.asm):00574                 BNE     DSKY_BEEP1
                      ( cubix_dskyng.asm):00575         
8DCA C60F             ( cubix_dskyng.asm):00576                 LDB     #$0F
8DCC BD8D8F           ( cubix_dskyng.asm):00577                 JSR     DSKY_GETBYTE
8DCF 84DF             ( cubix_dskyng.asm):00578                 ANDA    #$DF
8DD1 86DF             ( cubix_dskyng.asm):00579                 LDA     #$DF
8DD3 C60F             ( cubix_dskyng.asm):00580                 LDB     #$0F
8DD5 BD8D7C           ( cubix_dskyng.asm):00581                 JSR     DSKY_PUTBYTE
8DD8 3596             ( cubix_dskyng.asm):00582                 PULS    A,B,X,PC
                      ( cubix_dskyng.asm):00583         
                      ( cubix_dskyng.asm):00584         ;___DSKYNG_DSPL______________________________________________________________________________________
                      ( cubix_dskyng.asm):00585         ;
                      ( cubix_dskyng.asm):00586         ;       This function is intended to turn on or off the DSKY L1 & L2 leds
                      ( cubix_dskyng.asm):00587         ;
                      ( cubix_dskyng.asm):00588         ;   A= On(1) or Off(0)
                      ( cubix_dskyng.asm):00589         ;   B= LED# (0 or 1)
                      ( cubix_dskyng.asm):00590         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00591         ;
8DDA                  ( cubix_dskyng.asm):00592         DSKY_DSPL:
8DDA 3406             ( cubix_dskyng.asm):00593                 PSHS    A,B
8DDC 1CFE             ( cubix_dskyng.asm):00594                 CLC
8DDE C401             ( cubix_dskyng.asm):00595                 ANDB    #$01
8DE0 C90D             ( cubix_dskyng.asm):00596                 ADCB    #$0D
8DE2 BD8D8F           ( cubix_dskyng.asm):00597                 JSR     DSKY_GETBYTE
8DE5 8100             ( cubix_dskyng.asm):00598                 CMPA    #$00
8DE7 2705             ( cubix_dskyng.asm):00599                 BEQ     >
8DE9 8A20             ( cubix_dskyng.asm):00600                 ORA     #$20
8DEB 7E8DF0           ( cubix_dskyng.asm):00601                 JMP     DSKY_DSPL_1
                      ( cubix_dskyng.asm):00602         !
8DEE 84DF             ( cubix_dskyng.asm):00603                 ANDA    #$DF
8DF0                  ( cubix_dskyng.asm):00604         DSKY_DSPL_1:
8DF0 BD8D7C           ( cubix_dskyng.asm):00605                 JSR     DSKY_PUTBYTE
8DF3 3586             ( cubix_dskyng.asm):00606                 PULS    A,B,PC
                      ( cubix_dskyng.asm):00607         ;
                      ( cubix_dskyng.asm):00608         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00609         ; DSKYNG LINE CONTROL ROUTINES
                      ( cubix_dskyng.asm):00610         ;
                      ( cubix_dskyng.asm):00611         ; SETUP PPI FOR WRITING: PUT PPI PORT A IN OUTPUT MODE
                      ( cubix_dskyng.asm):00612         ; AVOID REWRTING PPIX IF ALREADY IN OUTPUT MODE
                      ( cubix_dskyng.asm):00613         ;
                      ( cubix_dskyng.asm):00614         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00615         ;
8DF5                  ( cubix_dskyng.asm):00616         DSKY_PPIWR:
8DF5 3402             ( cubix_dskyng.asm):00617                 PSHS    A
                      ( cubix_dskyng.asm):00618         ;
                      ( cubix_dskyng.asm):00619         ; CHECK FOR WRITE MODE
8DF7 B68E34           ( cubix_dskyng.asm):00620                 LDA     DSKY_PPIX_VAL
8DFA 8182             ( cubix_dskyng.asm):00621                 CMPA    #DSKY_PPIX_WR
8DFC 270D             ( cubix_dskyng.asm):00622                 BEQ     DSKY_PPIWR1
                      ( cubix_dskyng.asm):00623         ;
                      ( cubix_dskyng.asm):00624         ; SET PPI TO WRITE MODE
8DFE 8682             ( cubix_dskyng.asm):00625                 LDA     #DSKY_PPIX_WR
8E00 B7DF8B           ( cubix_dskyng.asm):00626                 STA     DSKY_PPIX
8E03 B78E34           ( cubix_dskyng.asm):00627                 STA     DSKY_PPIX_VAL
                      ( cubix_dskyng.asm):00628         ;
                      ( cubix_dskyng.asm):00629         ; RESTORE PORT C (MAY NOT BE NEEDED)
8E06 8606             ( cubix_dskyng.asm):00630                 LDA     #DSKY_PPI_IDLE
8E08 B7DF8A           ( cubix_dskyng.asm):00631                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00632         ;
8E0B                  ( cubix_dskyng.asm):00633         DSKY_PPIWR1:
                      ( cubix_dskyng.asm):00634         ;
8E0B 3582             ( cubix_dskyng.asm):00635                 PULS    A,PC
                      ( cubix_dskyng.asm):00636         
                      ( cubix_dskyng.asm):00637         ;
                      ( cubix_dskyng.asm):00638         ; SETUP PPI FOR READING: PUT PPI PORT A IN INPUT MODE
                      ( cubix_dskyng.asm):00639         ; AVOID REWRTING PPIX IF ALREADY IN INPUT MODE
                      ( cubix_dskyng.asm):00640         ;
8E0D                  ( cubix_dskyng.asm):00641         DSKY_PPIRD:
8E0D 3402             ( cubix_dskyng.asm):00642                 PSHS    A
                      ( cubix_dskyng.asm):00643         ;
                      ( cubix_dskyng.asm):00644         ; CHECK FOR READ MODE
8E0F B68E34           ( cubix_dskyng.asm):00645                 LDA     DSKY_PPIX_VAL
8E12 8192             ( cubix_dskyng.asm):00646                 CMPA    #DSKY_PPIX_RD
8E14 2708             ( cubix_dskyng.asm):00647                 BEQ     DSKY_PPIRD1
                      ( cubix_dskyng.asm):00648         ;
                      ( cubix_dskyng.asm):00649         ; SET PPI TO READ MODE
8E16 8692             ( cubix_dskyng.asm):00650                 LDA     #DSKY_PPIX_RD
8E18 B7DF8B           ( cubix_dskyng.asm):00651                 STA     DSKY_PPIX
8E1B B78E34           ( cubix_dskyng.asm):00652                 STA     DSKY_PPIX_VAL
                      ( cubix_dskyng.asm):00653         ;
8E1E                  ( cubix_dskyng.asm):00654         DSKY_PPIRD1:
8E1E 3582             ( cubix_dskyng.asm):00655                 PULS    A,PC
                      ( cubix_dskyng.asm):00656         
                      ( cubix_dskyng.asm):00657         ;
                      ( cubix_dskyng.asm):00658         ; RELEASE USE OF PPI
                      ( cubix_dskyng.asm):00659         ;
8E20                  ( cubix_dskyng.asm):00660         DSKY_PPIIDLE:
8E20 7E8E0D           ( cubix_dskyng.asm):00661                 JMP     DSKY_PPIRD                        ; SAME AS READ MODE
                      ( cubix_dskyng.asm):00662         ;
                      ( cubix_dskyng.asm):00663         ;__STORAGE_________________________________________________________________________________________
                      ( cubix_dskyng.asm):00664         ; CODES FOR NUMERICS
                      ( cubix_dskyng.asm):00665         ; HIGH BIT ALWAYS CLEAR TO SUPPRESS DECIMAL POINT
                      ( cubix_dskyng.asm):00666         ; SET HIGH BIT TO SHOW DECIMAL POINT
                      ( cubix_dskyng.asm):00667         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00668         ;
8E23                  ( cubix_dskyng.asm):00669         DSKY_HEXMAP:
8E23 3F               ( cubix_dskyng.asm):00670                 .BYTE   $3F                               ; 0
8E24 06               ( cubix_dskyng.asm):00671                 .BYTE   $06                               ; 1
8E25 5B               ( cubix_dskyng.asm):00672                 .BYTE   $5B                               ; 2
8E26 4F               ( cubix_dskyng.asm):00673                 .BYTE   $4F                               ; 3
8E27 66               ( cubix_dskyng.asm):00674                 .BYTE   $66                               ; 4
8E28 6D               ( cubix_dskyng.asm):00675                 .BYTE   $6D                               ; 5
8E29 7D               ( cubix_dskyng.asm):00676                 .BYTE   $7D                               ; 6
8E2A 07               ( cubix_dskyng.asm):00677                 .BYTE   $07                               ; 7
8E2B 7F               ( cubix_dskyng.asm):00678                 .BYTE   $7F                               ; 8
8E2C 67               ( cubix_dskyng.asm):00679                 .BYTE   $67                               ; 9
8E2D 77               ( cubix_dskyng.asm):00680                 .BYTE   $77                               ; A
8E2E 7C               ( cubix_dskyng.asm):00681                 .BYTE   $7C                               ; B
8E2F 39               ( cubix_dskyng.asm):00682                 .BYTE   $39                               ; C
8E30 5E               ( cubix_dskyng.asm):00683                 .BYTE   $5E                               ; D
8E31 79               ( cubix_dskyng.asm):00684                 .BYTE   $79                               ; E
8E32 71               ( cubix_dskyng.asm):00685                 .BYTE   $71                               ; F
                      ( cubix_dskyng.asm):00686         ;
8E33                  ( cubix_dskyng.asm):00687         DSKY_TEMP_VAL:
8E33 00               ( cubix_dskyng.asm):00688                 .BYTE   0
8E34                  ( cubix_dskyng.asm):00689         DSKY_PPIX_VAL:
8E34 00               ( cubix_dskyng.asm):00690                 .BYTE   0
8E35                  ( cubix_dskyng.asm):00691         DSKY_PRESENT:
8E35 00               ( cubix_dskyng.asm):00692                 .BYTE   0
8E36                  ( cubix_dskyng.asm):00693         DSKYINITMSG:
8E36 5E1C5C5E6E547940 ( cubix_dskyng.asm):00694                 .BYTE   $5E,$1C,$5C,$5E,$6E,$54,$79,$40
                      ( cubix_dskyng.asm):00695         
8E3E                  ( cubix_dskyng.asm):00696         DSKYMESSAGE1:
8E3E 44534B593A00     ( cubix_dskyng.asm):00697                 FCN     "DSKY:"
8E44                  ( cubix_dskyng.asm):00698         DSKYMESSAGE2:
8E44 20494F3D307800   ( cubix_dskyng.asm):00699                 FCN     " IO=0x"
8E4B                  ( cubix_dskyng.asm):00700         DSKYMESSAGE3:
8E4B 204D4F44453D4E47 ( cubix_dskyng.asm):00701                 FCN     " MODE=NG"                        ; PRINT DSKY TYPE
     00
8E54                  ( cubix_dskyng.asm):00702         DSKYMESSAGE4:
8E54 204E4F5420505245 ( cubix_dskyng.asm):00703                 FCN     " NOT PRESENT"                    ; NOT PRESENT
     53454E5400
                      (     cubixdrv.asm):00092                 INCLUDE cubix_floppy.asm
                      ( cubix_floppy.asm):00001         ;__FLOPPY DRIVERS________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00002         ;
                      ( cubix_floppy.asm):00003         ;       CUBIX floppy drivers for DUODYNE FDC card
                      ( cubix_floppy.asm):00004         ;
                      ( cubix_floppy.asm):00005         ;       Entry points:
                      ( cubix_floppy.asm):00006         ;               FL_SETUP        - called during OS init
                      ( cubix_floppy.asm):00007         ;               FL_READ_SECTOR  - read a sector from drive
                      ( cubix_floppy.asm):00008         ;               FL_WRITE_SECTOR - write a sector to drive
                      ( cubix_floppy.asm):00009         ;
                      ( cubix_floppy.asm):00010         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00011         ;
                      ( cubix_floppy.asm):00012         ;*
                      ( cubix_floppy.asm):00013         ;* HARDWARE I/O ADDRESSES
                      ( cubix_floppy.asm):00014         ;*
     DF80             ( cubix_floppy.asm):00015         FDC_MSR         = $DF80                           ; ADDRESS OF MAIN STATUS REGISTER
     DF81             ( cubix_floppy.asm):00016         FDC_DATA        = $DF81                           ; FLOPPY DATA REGISTER
     DF83             ( cubix_floppy.asm):00017         FDC_RESET       = $DF83                           ; FLOPPY RESET
     DF85             ( cubix_floppy.asm):00018         FDC_DCR         = $DF85                           ; LOAD CONTROL REGISTER
     DF86             ( cubix_floppy.asm):00019         FDC_DOR         = $DF86                           ; CONFIGURATION CONTROL REGISTER
     DF87             ( cubix_floppy.asm):00020         FDC_TC          = $DF87                           ; TERMINAL COUNT
                      ( cubix_floppy.asm):00021         
                      ( cubix_floppy.asm):00022         ;
                      ( cubix_floppy.asm):00023         ; FDC COMMANDS
                      ( cubix_floppy.asm):00024         ;
     0006             ( cubix_floppy.asm):00025         CFD_READ        = %00000110                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     000C             ( cubix_floppy.asm):00026         CFD_READDEL     = %00001100                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     0005             ( cubix_floppy.asm):00027         CFD_WRITE       = %00000101                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     0009             ( cubix_floppy.asm):00028         CFD_WRITEDEL    = %00001001                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     0002             ( cubix_floppy.asm):00029         CFD_READTRK     = %00000010                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     000A             ( cubix_floppy.asm):00030         CFD_READID      = %00001010                       ; CMD,HDS/DS --> ST0,ST1,ST2,C,H,R,N
     000D             ( cubix_floppy.asm):00031         CFD_FMTTRK      = %00001101                       ; CMD,HDS/DS,N,SC,GPL,D --> ST0,ST1,ST2,C,H,R,N
     0011             ( cubix_floppy.asm):00032         CFD_SCANEQ      = %00010001                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
     0019             ( cubix_floppy.asm):00033         CFD_SCANLOEQ    = %00011001                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
     001D             ( cubix_floppy.asm):00034         CFD_SCANHIEQ    = %00011101                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
     0007             ( cubix_floppy.asm):00035         CFD_RECAL       = %00000111                       ; CMD,DS --> <EMPTY>
     0008             ( cubix_floppy.asm):00036         CFD_SENSEINT    = %00001000                       ; CMD --> ST0,PCN
     0003             ( cubix_floppy.asm):00037         CFD_SPECIFY     = %00000011                       ; CMD,SRT/HUT,HLT/ND --> <EMPTY>
     0004             ( cubix_floppy.asm):00038         CFD_DRVSTAT     = %00000100                       ; CMD,HDS/DS --> ST3
     000F             ( cubix_floppy.asm):00039         CFD_SEEK        = %00001111                       ; CMD,HDS/DS --> <EMPTY>
     0010             ( cubix_floppy.asm):00040         CFD_VERSION     = %00010000                       ; CMD --> ST0
                      ( cubix_floppy.asm):00041         
     0040             ( cubix_floppy.asm):00042         CFD_MFM         = %01000000                       ;
                      ( cubix_floppy.asm):00043         
                      ( cubix_floppy.asm):00044         ;
                      ( cubix_floppy.asm):00045         ;
                      ( cubix_floppy.asm):00046         ; Specify Command:
                      ( cubix_floppy.asm):00047         ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      ( cubix_floppy.asm):00048         ; |Byte |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |
                      ( cubix_floppy.asm):00049         ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      ( cubix_floppy.asm):00050         ; |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |  1  |
                      ( cubix_floppy.asm):00051         ; |  1  | ----- STEP RATE ----- | -- HEAD UNLOAD TIME - |
                      ( cubix_floppy.asm):00052         ; |  2  | ------------ HEAD LOAD TIME ----------- | NDM |
                      ( cubix_floppy.asm):00053         ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      ( cubix_floppy.asm):00054         ;
                      ( cubix_floppy.asm):00055         ;
                      ( cubix_floppy.asm):00056         ; Step Rate (milliseconds):              Head Unload Time (milliseconds):       Head Load Time (milliseconds):
                      ( cubix_floppy.asm):00057         ; +------+------+------+------+------+   +------+------+------+------+------+   +------+------+------+------+------+
                      ( cubix_floppy.asm):00058         ; |      |         BITRATE           |   |      |         BITRATE           |   |      |         BITRATE           |
                      ( cubix_floppy.asm):00059         ; |  VAL | 1.0M | 500K | 300K | 250K |   |  VAL | 1.0M | 500K | 300K | 250K |   |  VAL | 1.0M | 500K | 300K | 250K |
                      ( cubix_floppy.asm):00060         ; +------+------+------+------+------+   +------+------+------+------+------+   +------+------+------+------+------+
                      ( cubix_floppy.asm):00061         ; |    0 |  8.0 | 16.0 | 26.7 | 32.0 |   |    0 |  128 |  256 |  426 |  512 |   |    0 |  128 |  256 |  426 |  512 |
                      ( cubix_floppy.asm):00062         ; |    1 |  7.5 | 15.0 | 25.0 | 30.0 |   |    1 |    8 |   16 | 26.7 |   32 |   |    1 |    1 |    2 |  3.3 |    4 |
                      ( cubix_floppy.asm):00063         ; |    2 |  7.0 | 14.0 | 23.3 | 28.0 |   |    2 |   16 |   32 | 53.3 |   64 |   |    2 |    2 |    4 |  6.7 |    8 |
                      ( cubix_floppy.asm):00064         ; |  ... |  ... |  ... |  ... |  ... |   |  ... |  ... |  ... |  ... |  ... |   |  ... |  ... |  ... |  ... |  ... |
                      ( cubix_floppy.asm):00065         ; |   14 |  1.0 |  2.0 |  3.3 |  4.0 |   |   14 |  112 |  224 |  373 |  448 |   |  126 |  126 |  252 |  420 |  504 |
                      ( cubix_floppy.asm):00066         ; |   15 |  0.5 |  1.0 |  1.7 |  2.0 |   |   15 |  120 |  240 |  400 |  480 |   |  127 |  127 |  254 |  423 |  508 |
                      ( cubix_floppy.asm):00067         ; +------+------+------+------+------+   +------+------+------+------+------+   +------+------+------+------+------+
                      ( cubix_floppy.asm):00068         ;
                      ( cubix_floppy.asm):00069         ; IBM PS/2 CALLS FOR:
                      ( cubix_floppy.asm):00070         ;   STEP RATE: 3ms (6ms FOR ALL 41mm OR 720K DRIVES)
                      ( cubix_floppy.asm):00071         ;   HEAD LOAD TIME: 15ms
                      ( cubix_floppy.asm):00072         
     000C             ( cubix_floppy.asm):00073         DOR_INIT        = %00001100                       ; SOFT RESET INACTIVE, DMA ENABLED
     000C             ( cubix_floppy.asm):00074         DOR_BR250       = DOR_INIT
     000C             ( cubix_floppy.asm):00075         DOR_BR500       = DOR_INIT
                      ( cubix_floppy.asm):00076         
                      ( cubix_floppy.asm):00077         
                      ( cubix_floppy.asm):00078         
     0006             ( cubix_floppy.asm):00079         FLOPPY_RETRIES  = 6                               ; HOW ABOUT SIX RETIRES?
     0002             ( cubix_floppy.asm):00080         FLOPPY_RETRIES1 = 2                               ; TWO ITERATIONS OF RECAL?
                      ( cubix_floppy.asm):00081         
                      ( cubix_floppy.asm):00082         ;__FL_SETUP______________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00083         ;
                      ( cubix_floppy.asm):00084         ;       SETUP FLOPPY DRIVE SETTINGS
                      ( cubix_floppy.asm):00085         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00086         ;
8E61                  ( cubix_floppy.asm):00087         FL_SETUP:
8E61 BD970D           ( cubix_floppy.asm):00088                 JSR     LFCR                              ; CRLF
8E64 8E9203           ( cubix_floppy.asm):00089                 LDX     #FMESSAGE1
8E67 BD9721           ( cubix_floppy.asm):00090                 JSR     WRSTR                             ; DO PROMPT
                      ( cubix_floppy.asm):00091         ;
8E6A 8E9209           ( cubix_floppy.asm):00092                 LDX     #FMESSAGE2
8E6D BD9721           ( cubix_floppy.asm):00093                 JSR     WRSTR                             ; DO PROMPT
8E70 CCDF80           ( cubix_floppy.asm):00094                 LDD     #FDC_MSR                          ; GET BASE PORT
8E73 BD972D           ( cubix_floppy.asm):00095                 JSR     WRHEXW                            ; PRINT BASE PORT
8E76 BD9183           ( cubix_floppy.asm):00096                 JSR     FD_DETECT                         ; CHECK FOR FDC
8E79 8100             ( cubix_floppy.asm):00097                 CMPA    #$00
8E7B 270C             ( cubix_floppy.asm):00098                 BEQ     >                                 ; CONTINUE IF FOUND
8E7D 8E9210           ( cubix_floppy.asm):00099                 LDX     #FMESSAGE3
8E80 BD9721           ( cubix_floppy.asm):00100                 JSR     WRSTR                             ; DO PROMPT
8E83 BD970D           ( cubix_floppy.asm):00101                 JSR     LFCR                              ; AND CRLF
8E86 86FF             ( cubix_floppy.asm):00102                 LDA     #$FF
8E88 39               ( cubix_floppy.asm):00103                 RTS                                       ; BAIL OUT
                      ( cubix_floppy.asm):00104         !
8E89 8E921F           ( cubix_floppy.asm):00105                 LDX     #FMESSAGE4
8E8C BD9721           ( cubix_floppy.asm):00106                 JSR     WRSTR                             ; DO PROMPT
8E8F BD970D           ( cubix_floppy.asm):00107                 JSR     LFCR                              ; AND CRLF
8E92 860C             ( cubix_floppy.asm):00108                 LDA     #DOR_INIT                         ; RESET SETTINGS
8E94 B7DF86           ( cubix_floppy.asm):00109                 STA     FDC_DOR
                      ( cubix_floppy.asm):00110         
8E97 BD9114           ( cubix_floppy.asm):00111                 JSR     CHECKINT                          ;
8E9A 8603             ( cubix_floppy.asm):00112                 LDA     #CFD_SPECIFY                      ; SPECIFY COMMAND
8E9C BD90BC           ( cubix_floppy.asm):00113                 JSR     PFDATA                            ; OUTPUT TO FDC
8E9F 867F             ( cubix_floppy.asm):00114                 LDA     #$7F                              ; 6 MS STEP, 480 MS HEAD UNLOAD
8EA1 BD90BC           ( cubix_floppy.asm):00115                 JSR     PFDATA                            ; OUTPUT TO FDC
8EA4 8605             ( cubix_floppy.asm):00116                 LDA     #$05                              ; 508 MS HEAD LOAD, NON-DMA MODE
8EA6 BD90BC           ( cubix_floppy.asm):00117                 JSR     PFDATA                            ; OUTPUT TO FDC
                      ( cubix_floppy.asm):00118         
8EA9 BD9114           ( cubix_floppy.asm):00119                 JSR     CHECKINT                          ; SEND SEVERAL INTERRUPTS TO ENSURE PROPER STATE
8EAC BD9114           ( cubix_floppy.asm):00120                 JSR     CHECKINT                          ;
8EAF BD9114           ( cubix_floppy.asm):00121                 JSR     CHECKINT                          ;
8EB2 BD9114           ( cubix_floppy.asm):00122                 JSR     CHECKINT                          ;
8EB5 BD9114           ( cubix_floppy.asm):00123                 JSR     CHECKINT                          ;
8EB8 BD9114           ( cubix_floppy.asm):00124                 JSR     CHECKINT                          ;
                      ( cubix_floppy.asm):00125         
8EBB 8610             ( cubix_floppy.asm):00126                 LDA     #%00010000
8EBD B701E6           ( cubix_floppy.asm):00127                 STA     DSKUNIT
8EC0 BD9092           ( cubix_floppy.asm):00128                 JSR     RECAL                             ;
8EC3 8627             ( cubix_floppy.asm):00129                 LDA     #39                               ;
8EC5 B701F9           ( cubix_floppy.asm):00130                 STA     CURRENTCYL                        ;
8EC8 BD9075           ( cubix_floppy.asm):00131                 JSR     SETTRK1
8ECB BD9092           ( cubix_floppy.asm):00132                 JSR     RECAL                             ;
                      ( cubix_floppy.asm):00133         
8ECE 8621             ( cubix_floppy.asm):00134                 LDA     #%00100001
8ED0 B701E6           ( cubix_floppy.asm):00135                 STA     DSKUNIT
8ED3 BD9092           ( cubix_floppy.asm):00136                 JSR     RECAL                             ;
8ED6 8627             ( cubix_floppy.asm):00137                 LDA     #39                               ;
8ED8 B701F9           ( cubix_floppy.asm):00138                 STA     CURRENTCYL                        ;
8EDB BD9075           ( cubix_floppy.asm):00139                 JSR     SETTRK1
8EDE BD9092           ( cubix_floppy.asm):00140                 JSR     RECAL                             ;
8EE1 860C             ( cubix_floppy.asm):00141                 LDA     #DOR_INIT                         ; RESET SETTINGS
8EE3 B7DF86           ( cubix_floppy.asm):00142                 STA     FDC_DOR
8EE6 39               ( cubix_floppy.asm):00143                 RTS
                      ( cubix_floppy.asm):00144         
                      ( cubix_floppy.asm):00145         
                      ( cubix_floppy.asm):00146         ;__FL_READ_SECTOR________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00147         ;
                      ( cubix_floppy.asm):00148         ;       READ A FLOPPY SECTOR
                      ( cubix_floppy.asm):00149         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00150         ;
                      ( cubix_floppy.asm):00151         ;
8EE7                  ( cubix_floppy.asm):00152         FL_READ_SECTOR:
8EE7 B601E7           ( cubix_floppy.asm):00153                 LDA     FLOPPY_DETCT
8EEA 8100             ( cubix_floppy.asm):00154                 CMPA    #$00
8EEC 2701             ( cubix_floppy.asm):00155                 BEQ     >
8EEE 39               ( cubix_floppy.asm):00156                 RTS
                      ( cubix_floppy.asm):00157         !
8EEF BD91EB           ( cubix_floppy.asm):00158                 JSR     GETDSKUNIT
8EF2 860C             ( cubix_floppy.asm):00159                 LDA     #DOR_INIT
8EF4 BA01E6           ( cubix_floppy.asm):00160                 ORA     DSKUNIT                           ; SET MOTOR ON
8EF7 B7DF86           ( cubix_floppy.asm):00161                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
                      ( cubix_floppy.asm):00162         
8EFA 8600             ( cubix_floppy.asm):00163                 LDA     #$00
8EFC B701E8           ( cubix_floppy.asm):00164                 STA     FLRETRY                           ; BLANK RETRIES
8EFF B701E9           ( cubix_floppy.asm):00165                 STA     FLRETRY1
                      ( cubix_floppy.asm):00166         
8F02                  ( cubix_floppy.asm):00167         READFL1:
8F02 8646             ( cubix_floppy.asm):00168                 LDA     #CFD_READ|CFD_MFM                 ; BIT 6 SETS MFM, 06H IS READ COMMAND
8F04 B701E4           ( cubix_floppy.asm):00169                 STA     FCMD                              ; SET COMMAND
8F07 BD8F7F           ( cubix_floppy.asm):00170                 JSR     DSKOP                             ; DO DISK OPERATION
                      ( cubix_floppy.asm):00171         
8F0A 8100             ( cubix_floppy.asm):00172                 CMPA    #$00
8F0C 2722             ( cubix_floppy.asm):00173                 BEQ     READFLDONE                        ; OPERATION SUCCESSFUL
8F0E 7C01E8           ( cubix_floppy.asm):00174                 INC     FLRETRY                           ; LET'S RETRY
8F11 B601E8           ( cubix_floppy.asm):00175                 LDA     FLRETRY
8F14 8106             ( cubix_floppy.asm):00176                 CMPA    #FLOPPY_RETRIES
8F16 26EA             ( cubix_floppy.asm):00177                 BNE     READFL1
8F18 BD9092           ( cubix_floppy.asm):00178                 JSR     RECAL                             ; AFTER X RETRIES, LET'S RECAL THE HEAD
8F1B BD9063           ( cubix_floppy.asm):00179                 JSR     SETTRACK                          ;
8F1E 8600             ( cubix_floppy.asm):00180                 LDA     #$00                              ;
8F20 B701E8           ( cubix_floppy.asm):00181                 STA     FLRETRY                           ; MORE RETRIES!
8F23 7C01E9           ( cubix_floppy.asm):00182                 INC     FLRETRY1
8F26 B601E9           ( cubix_floppy.asm):00183                 LDA     FLRETRY1
8F29 8102             ( cubix_floppy.asm):00184                 CMPA    #FLOPPY_RETRIES1
8F2B 26D5             ( cubix_floppy.asm):00185                 BNE     READFL1
8F2D 86FF             ( cubix_floppy.asm):00186                 LDA     #$FF                              ; A = 0 ON RETURN = OPERATION OK
8F2F 39               ( cubix_floppy.asm):00187                 RTS                                       ; A = $FF ON RETURN = OPERATION ERROR
8F30                  ( cubix_floppy.asm):00188         READFLDONE:
8F30 8600             ( cubix_floppy.asm):00189                 LDA     #$00                              ; A = 0 ON RETURN = OPERATION OK
8F32 39               ( cubix_floppy.asm):00190                 RTS
                      ( cubix_floppy.asm):00191         
                      ( cubix_floppy.asm):00192         ;__FL_WRITE_SECTOR_______________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00193         ;
                      ( cubix_floppy.asm):00194         ;       WRITE A FLOPPY SECTOR
                      ( cubix_floppy.asm):00195         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00196         ;
8F33                  ( cubix_floppy.asm):00197         FL_WRITE_SECTOR:
8F33 B601E7           ( cubix_floppy.asm):00198                 LDA     FLOPPY_DETCT
8F36 8100             ( cubix_floppy.asm):00199                 CMPA    #$00
8F38 2701             ( cubix_floppy.asm):00200                 BEQ     >
8F3A 39               ( cubix_floppy.asm):00201                 RTS
                      ( cubix_floppy.asm):00202         !
8F3B BD91EB           ( cubix_floppy.asm):00203                 JSR     GETDSKUNIT
8F3E 860C             ( cubix_floppy.asm):00204                 LDA     #DOR_INIT
8F40 BA01E6           ( cubix_floppy.asm):00205                 ORA     DSKUNIT                           ; SET MOTOR ON
8F43 B7DF86           ( cubix_floppy.asm):00206                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
                      ( cubix_floppy.asm):00207         
8F46 8600             ( cubix_floppy.asm):00208                 LDA     #$00
8F48 B701E8           ( cubix_floppy.asm):00209                 STA     FLRETRY                           ; BLANK RETRIES
8F4B B701E9           ( cubix_floppy.asm):00210                 STA     FLRETRY1
                      ( cubix_floppy.asm):00211         
8F4E                  ( cubix_floppy.asm):00212         WRITEFL1:
8F4E 8645             ( cubix_floppy.asm):00213                 LDA     #CFD_WRITE|CFD_MFM                ; BIT 6 SETS MFM, 05H IS WRITE COMMAND
8F50 B701E4           ( cubix_floppy.asm):00214                 STA     FCMD
8F53 BD8F7F           ( cubix_floppy.asm):00215                 JSR     DSKOP
                      ( cubix_floppy.asm):00216         
8F56 8100             ( cubix_floppy.asm):00217                 CMPA    #$00
8F58 2722             ( cubix_floppy.asm):00218                 BEQ     WRITEFLDONE
8F5A 7C01E8           ( cubix_floppy.asm):00219                 INC     FLRETRY
8F5D B601E8           ( cubix_floppy.asm):00220                 LDA     FLRETRY
8F60 8106             ( cubix_floppy.asm):00221                 CMPA    #FLOPPY_RETRIES
8F62 26EA             ( cubix_floppy.asm):00222                 BNE     WRITEFL1
8F64 BD9092           ( cubix_floppy.asm):00223                 JSR     RECAL
8F67 BD9063           ( cubix_floppy.asm):00224                 JSR     SETTRACK
8F6A 8600             ( cubix_floppy.asm):00225                 LDA     #$00
8F6C B701E8           ( cubix_floppy.asm):00226                 STA     FLRETRY
8F6F 7C01E9           ( cubix_floppy.asm):00227                 INC     FLRETRY1
8F72 B601E9           ( cubix_floppy.asm):00228                 LDA     FLRETRY1
8F75 8102             ( cubix_floppy.asm):00229                 CMPA    #FLOPPY_RETRIES1
8F77 26D5             ( cubix_floppy.asm):00230                 BNE     WRITEFL1
8F79 86FF             ( cubix_floppy.asm):00231                 LDA     #$FF                              ; INVALIDATE CACHE
8F7B 39               ( cubix_floppy.asm):00232                 RTS                                       ; A = $FF ON RETURN = OPERATION ERROR
8F7C                  ( cubix_floppy.asm):00233         WRITEFLDONE:
8F7C 8600             ( cubix_floppy.asm):00234                 LDA     #$00                              ; A = 0 ON RETURN = OPERATION OK
8F7E 39               ( cubix_floppy.asm):00235                 RTS
                      ( cubix_floppy.asm):00236         
                      ( cubix_floppy.asm):00237         
                      ( cubix_floppy.asm):00238         ;__DSKOP__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00239         ;
                      ( cubix_floppy.asm):00240         ;       PERFORM A DISK OPERATION
                      ( cubix_floppy.asm):00241         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00242         ;
8F7F                  ( cubix_floppy.asm):00243         DSKOP:
8F7F BD9114           ( cubix_floppy.asm):00244                 JSR     CHECKINT                          ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
8F82 81FF             ( cubix_floppy.asm):00245                 CMPA    #$FF                              ; DID IT RETURN WITH ERROR CODE?
8F84 2710             ( cubix_floppy.asm):00246                 BEQ     DSKEXIT                           ; IF YES, EXIT WITH ERROR CODE
                      ( cubix_floppy.asm):00247         ;
8F86 BD9063           ( cubix_floppy.asm):00248                 JSR     SETTRACK                          ; PERFORM SEEK TO TRACK
                      ( cubix_floppy.asm):00249         ;
8F89 B601E4           ( cubix_floppy.asm):00250                 LDA     FCMD                              ; WHAT COMMAND IS PENDING?
8F8C 8146             ( cubix_floppy.asm):00251                 CMPA    #CFD_READ|CFD_MFM                 ; IS IT A READ COMMAND?
8F8E 2603             ( cubix_floppy.asm):00252                 BNE     GWRR_POLL                         ;
8F90 7E9009           ( cubix_floppy.asm):00253                 JMP     RDD_POLL                          ;
8F93                  ( cubix_floppy.asm):00254         GWRR_POLL:
8F93 7E9041           ( cubix_floppy.asm):00255                 JMP     WRR_POLL                          ;
8F96                  ( cubix_floppy.asm):00256         DSKEXIT:
8F96 8600             ( cubix_floppy.asm):00257                 LDA     #0                                ; SET MOTOR OFF
8F98 B7DF86           ( cubix_floppy.asm):00258                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
8F9B 86FF             ( cubix_floppy.asm):00259                 LDA     #$FF                              ; SET IF ERROR
8F9D 39               ( cubix_floppy.asm):00260                 RTS
                      ( cubix_floppy.asm):00261         
8F9E                  ( cubix_floppy.asm):00262         SNDFDWR:
                      ( cubix_floppy.asm):00263         ;
8F9E B601FB           ( cubix_floppy.asm):00264                 LDA     CURRENTDEVICE
8FA1 B701F3           ( cubix_floppy.asm):00265                 STA     DSKY_HEXBUF
8FA4 B601F8           ( cubix_floppy.asm):00266                 LDA     CURRENTHEAD
8FA7 B701F4           ( cubix_floppy.asm):00267                 STA     DSKY_HEXBUF+1
8FAA B601F9           ( cubix_floppy.asm):00268                 LDA     CURRENTCYL                        ;
8FAD B701F5           ( cubix_floppy.asm):00269                 STA     DSKY_HEXBUF+2
8FB0 B601FA           ( cubix_floppy.asm):00270                 LDA     CURRENTSEC                        ;
8FB3 B701F6           ( cubix_floppy.asm):00271                 STA     DSKY_HEXBUF+3
8FB6 BD8C9A           ( cubix_floppy.asm):00272                 JSR     DSKY_BIN2SEG
8FB9 BD8CE1           ( cubix_floppy.asm):00273                 JSR     DSKY_SHOW
                      ( cubix_floppy.asm):00274         ;
8FBC 1CFE             ( cubix_floppy.asm):00275                 CLC
8FBE B601E6           ( cubix_floppy.asm):00276                 LDA     DSKUNIT                           ; GET DISK UNIT NUMBER
8FC1 8401             ( cubix_floppy.asm):00277                 ANDA    #$01                              ; MASK FOR TWO DRIVES.
8FC3 B79202           ( cubix_floppy.asm):00278                 STA     TMPSTORAGE                        ; PARK IT IN TEMP
8FC6 B601F8           ( cubix_floppy.asm):00279                 LDA     CURRENTHEAD                       ; GET HEAD SELECTION
8FC9 8401             ( cubix_floppy.asm):00280                 ANDA    #$01                              ; INSURE SINGLE BIT
8FCB 48               ( cubix_floppy.asm):00281                 ASLA                                      ;
8FCC 48               ( cubix_floppy.asm):00282                 ASLA                                      ; MOVE HEAD TO BIT 2 POSITION
8FCD BA9202           ( cubix_floppy.asm):00283                 ORA     TMPSTORAGE                        ; OR HEAD TO UNIT BYTE IN COMMAND BLOCK
8FD0 B79202           ( cubix_floppy.asm):00284                 STA     TMPSTORAGE                        ; STORE IN UNIT
8FD3 B601E4           ( cubix_floppy.asm):00285                 LDA     FCMD                              ;
8FD6 BD90BC           ( cubix_floppy.asm):00286                 JSR     PFDATA                            ; PUSH COMMAND TO I8272
8FD9 B69202           ( cubix_floppy.asm):00287                 LDA     TMPSTORAGE                        ;
8FDC BD90BC           ( cubix_floppy.asm):00288                 JSR     PFDATA                            ;
8FDF B601F9           ( cubix_floppy.asm):00289                 LDA     CURRENTCYL                        ;
8FE2 BD90BC           ( cubix_floppy.asm):00290                 JSR     PFDATA                            ;
8FE5 B601F8           ( cubix_floppy.asm):00291                 LDA     CURRENTHEAD                       ;
8FE8 BD90BC           ( cubix_floppy.asm):00292                 JSR     PFDATA                            ;
8FEB 1CFE             ( cubix_floppy.asm):00293                 CLC                                       ;
8FED B601FA           ( cubix_floppy.asm):00294                 LDA     CURRENTSEC                        ;
8FF0 4C               ( cubix_floppy.asm):00295                 INCA                                      ;
8FF1 BD90BC           ( cubix_floppy.asm):00296                 JSR     PFDATA                            ;
8FF4 8602             ( cubix_floppy.asm):00297                 LDA     #$02                              ;
8FF6 BD90BC           ( cubix_floppy.asm):00298                 JSR     PFDATA                            ; WHAT DENSITY
8FF9 8609             ( cubix_floppy.asm):00299                 LDA     #$09                              ;
8FFB BD90BC           ( cubix_floppy.asm):00300                 JSR     PFDATA                            ; ASSUME SC (SECTOR COUNT)  EOT
8FFE 861B             ( cubix_floppy.asm):00301                 LDA     #$1B                              ;
9000 BD90BC           ( cubix_floppy.asm):00302                 JSR     PFDATA                            ; WHAT GAP IS NEEDED
9003 86FF             ( cubix_floppy.asm):00303                 LDA     #$FF                              ; DTL, IS THE LAST COMMAND BYTE TO I8272
9005 BD90F5           ( cubix_floppy.asm):00304                 JSR     PFDATAS
9008 39               ( cubix_floppy.asm):00305                 RTS
                      ( cubix_floppy.asm):00306         
                      ( cubix_floppy.asm):00307         
                      ( cubix_floppy.asm):00308         ; PERFORM READ
                      ( cubix_floppy.asm):00309         ; FROM READ TO READ MUST NOT EXCEED 25US WORST CASE MIN. (AT 2MHZ IS 2,000,000 CYCLES PER SECOND == 50 CYCLE BUDGET.)
                      ( cubix_floppy.asm):00310         ;
9009                  ( cubix_floppy.asm):00311         RDD_POLL:
9009 BD8F9E           ( cubix_floppy.asm):00312                 JSR     SNDFDWR                           ;
900C 108E0000         ( cubix_floppy.asm):00313                 LDY     #$0000
9010                  ( cubix_floppy.asm):00314         RDS1:
9010 B6DF80           ( cubix_floppy.asm):00315                 LDA     FDC_MSR                           ; GET STATUS  (4 CYCLES)
9013 2AFB             ( cubix_floppy.asm):00316                 BPL     RDS1                              ; FDC IS NOT READY, WAIT FOR IT (UP TO 4 CYCLES)
9015 8420             ( cubix_floppy.asm):00317                 ANDA    #%00100000                        ; EXECUTION MODE? (2 CYCLES)
9017 270F             ( cubix_floppy.asm):00318                 BEQ     DSKOPEND                          ; NO, ERROR
9019                  ( cubix_floppy.asm):00319         RDS1A:
9019 B6DF81           ( cubix_floppy.asm):00320                 LDA     FDC_DATA                          ; GET DATA (4 CYCLES)
901C A7A90300         ( cubix_floppy.asm):00321                 STA     HSTBUF,Y                          ; WRITE IT (5 CYCLES)
9020 3121             ( cubix_floppy.asm):00322                 INY                                       ; (2 CYCLES)
9022 108C0200         ( cubix_floppy.asm):00323                 CMPY    #$0200
9026 26E8             ( cubix_floppy.asm):00324                 BNE     RDS1                              ; KEEP GOING (UP TO 4 CYCLES)   TOTAL =
9028                  ( cubix_floppy.asm):00325         DSKOPEND:
9028 B6DF87           ( cubix_floppy.asm):00326                 LDA     FDC_TC
902B BD91D2           ( cubix_floppy.asm):00327                 JSR     FDDELAY
                      ( cubix_floppy.asm):00328         ;
902E BD9163           ( cubix_floppy.asm):00329                 JSR     GFDATA                            ;GET ERROR TYPE
9031 B701E5           ( cubix_floppy.asm):00330                 STA     FLERR
                      ( cubix_floppy.asm):00331         ;* CLEAR OUT ANY REMAINING DATA
9034                  ( cubix_floppy.asm):00332         RESUL3:
9034 BD9163           ( cubix_floppy.asm):00333                 JSR     GFDATA                            ;READ BYTE FROM FDC
9037 8100             ( cubix_floppy.asm):00334                 CMPA    #$00
9039 26F9             ( cubix_floppy.asm):00335                 BNE     RESUL3                            ;CLEAR THEM ALL
903B B601E5           ( cubix_floppy.asm):00336                 LDA     FLERR                             ;
903E 84C0             ( cubix_floppy.asm):00337                 ANDA    #%11000000                        ;
9040 39               ( cubix_floppy.asm):00338                 RTS
                      ( cubix_floppy.asm):00339         
                      ( cubix_floppy.asm):00340         
9041                  ( cubix_floppy.asm):00341         WRR_POLL:
9041 BD8F9E           ( cubix_floppy.asm):00342                 JSR     SNDFDWR                           ;
9044 108E0000         ( cubix_floppy.asm):00343                 LDY     #$0000
9048                  ( cubix_floppy.asm):00344         WRS1:
                      ( cubix_floppy.asm):00345         ;
9048 B6DF80           ( cubix_floppy.asm):00346                 LDA     FDC_MSR                           ; GET STATUS
904B 2AFB             ( cubix_floppy.asm):00347                 BPL     WRS1                              ; NOT READY
904D 8420             ( cubix_floppy.asm):00348                 ANDA    #%00100000                        ; EXECUTION MODE?
904F 270F             ( cubix_floppy.asm):00349                 BEQ     WRS3                              ; NO, ERROR
9051 A6A90300         ( cubix_floppy.asm):00350                 LDA     HSTBUF,Y                          ; WRITE IT
9055 B7DF81           ( cubix_floppy.asm):00351                 STA     FDC_DATA                          ; WRITE TO FDC
9058 3121             ( cubix_floppy.asm):00352                 INY
905A 108C0200         ( cubix_floppy.asm):00353                 CMPY    #$0200
905E 26E8             ( cubix_floppy.asm):00354                 BNE     WRS1                              ; DO NEXT
9060                  ( cubix_floppy.asm):00355         WRS3:
9060 7E9028           ( cubix_floppy.asm):00356                 JMP     DSKOPEND                          ;
                      ( cubix_floppy.asm):00357         
                      ( cubix_floppy.asm):00358         
                      ( cubix_floppy.asm):00359         ;__SETTRACK__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00360         ;
                      ( cubix_floppy.asm):00361         ;       SEEK TO A TRACK ON GIVEN UNIT
                      ( cubix_floppy.asm):00362         ;       A: TRACK #
                      ( cubix_floppy.asm):00363         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00364         ;
9063                  ( cubix_floppy.asm):00365         SETTRACK:
9063 860C             ( cubix_floppy.asm):00366                 LDA     #DOR_INIT
9065 BA01E6           ( cubix_floppy.asm):00367                 ORA     DSKUNIT                           ; SET MOTOR ON
9068 B7DF86           ( cubix_floppy.asm):00368                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
                      ( cubix_floppy.asm):00369         
                      ( cubix_floppy.asm):00370         ; ANY INTERUPT PENDING
                      ( cubix_floppy.asm):00371         ; IF YES FIND OUT WHY/CLEAR
906B BD9114           ( cubix_floppy.asm):00372                 JSR     CHECKINT                          ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
906E 81FF             ( cubix_floppy.asm):00373                 CMPA    #$FF                              ; DID IT RTSURN WITH ERROR CODE?
9070 2603             ( cubix_floppy.asm):00374                 BNE     SETTRK1
9072 7E90BB           ( cubix_floppy.asm):00375                 JMP     SETTRKEXIT                        ;
                      ( cubix_floppy.asm):00376         
                      ( cubix_floppy.asm):00377         ;
9075                  ( cubix_floppy.asm):00378         SETTRK1:
9075 B601F9           ( cubix_floppy.asm):00379                 LDA     CURRENTCYL                        ; GET TRACK
9078 8100             ( cubix_floppy.asm):00380                 CMPA    #$00                              ;
907A 2716             ( cubix_floppy.asm):00381                 BEQ     RECAL                             ; IF 0 PERFORM RECAL INSTEAD OF SEEK
907C 860F             ( cubix_floppy.asm):00382                 LDA     #CFD_SEEK                         ; SEEK COMMAND
907E BD90BC           ( cubix_floppy.asm):00383                 JSR     PFDATA                            ; PUSH COMMAND
9081 B601E6           ( cubix_floppy.asm):00384                 LDA     DSKUNIT                           ; SAY WHICH UNIT
9084 8401             ( cubix_floppy.asm):00385                 ANDA    #$01
9086 BD90BC           ( cubix_floppy.asm):00386                 JSR     PFDATA                            ; SEND THAT
9089 B601F9           ( cubix_floppy.asm):00387                 LDA     CURRENTCYL                        ; TO WHAT TRACK
908C BD90BC           ( cubix_floppy.asm):00388                 JSR     PFDATA                            ; SEND THAT TOO
908F 7E90A7           ( cubix_floppy.asm):00389                 JMP     WAINT                             ; WAIT FOR INTERRUPT SAYING DONE
9092                  ( cubix_floppy.asm):00390         RECAL:
9092 860C             ( cubix_floppy.asm):00391                 LDA     #DOR_INIT
9094 BA01E6           ( cubix_floppy.asm):00392                 ORA     DSKUNIT                           ; SET MOTOR ON
9097 B7DF86           ( cubix_floppy.asm):00393                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
909A 8607             ( cubix_floppy.asm):00394                 LDA     #CFD_RECAL                        ; RECAL TO TRACK 0
909C BD90BC           ( cubix_floppy.asm):00395                 JSR     PFDATA                            ; SEND IT
909F B601E6           ( cubix_floppy.asm):00396                 LDA     DSKUNIT                           ; SAY WHICH UNIT
90A2 8401             ( cubix_floppy.asm):00397                 ANDA    #$01
90A4 BD90BC           ( cubix_floppy.asm):00398                 JSR     PFDATA                            ; SEND THAT TOO
                      ( cubix_floppy.asm):00399         ;
90A7                  ( cubix_floppy.asm):00400         WAINT:
90A7 3412             ( cubix_floppy.asm):00401                 PSHS    A,X
90A9 8E0064           ( cubix_floppy.asm):00402                 LDX     #100
90AC BD91DB           ( cubix_floppy.asm):00403                 JSR     FDVDELAY
90AF 3512             ( cubix_floppy.asm):00404                 PULS    A,X
                      ( cubix_floppy.asm):00405         !
90B1 BD9114           ( cubix_floppy.asm):00406                 JSR     CHECKINT
90B4 B6DF80           ( cubix_floppy.asm):00407                 LDA     FDC_MSR                           ; READ SEEK STATUS
90B7 840F             ( cubix_floppy.asm):00408                 ANDA    #%00001111                        ; ANY DRIVES SEEKING?
90B9 26F6             ( cubix_floppy.asm):00409                 BNE     <                                 ; YES, WAIT FOR THEM
                      ( cubix_floppy.asm):00410         ;
90BB                  ( cubix_floppy.asm):00411         SETTRKEXIT:
90BB 39               ( cubix_floppy.asm):00412                 RTS
                      ( cubix_floppy.asm):00413         
                      ( cubix_floppy.asm):00414         ;__PFDATA__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00415         ;
                      ( cubix_floppy.asm):00416         ; WRITE A COMMAND OR PARAMETER SEQUENCE
                      ( cubix_floppy.asm):00417         ;
                      ( cubix_floppy.asm):00418         ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
                      ( cubix_floppy.asm):00419         ;       RQM  DIO
                      ( cubix_floppy.asm):00420         ;       0       0       BUSY
                      ( cubix_floppy.asm):00421         ;       1       0       WRITE TO DATA REGISTER PERMITTED
                      ( cubix_floppy.asm):00422         ;       1       1       BYTE FOR READ BY HOST PENDING
                      ( cubix_floppy.asm):00423         ;       0       1       BUSY
                      ( cubix_floppy.asm):00424         ;
                      ( cubix_floppy.asm):00425         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00426         ;
90BC                  ( cubix_floppy.asm):00427         PFDATA:
90BC 3402             ( cubix_floppy.asm):00428                 PSHS    A                                 ; SAVE DATA BYTE
90BE 108E0000         ( cubix_floppy.asm):00429                 LDY     #$0000
90C2                  ( cubix_floppy.asm):00430         WRF1:
90C2 B6DF80           ( cubix_floppy.asm):00431                 LDA     FDC_MSR                           ; READ FDC STATUS
90C5 B79202           ( cubix_floppy.asm):00432                 STA     TMPSTORAGE
90C8 8480             ( cubix_floppy.asm):00433                 ANDA    #$80                              ;
90CA 260D             ( cubix_floppy.asm):00434                 BNE     >
90CC 3121             ( cubix_floppy.asm):00435                 INY
90CE 108C0100         ( cubix_floppy.asm):00436                 CMPY    #$0100
90D2 26EE             ( cubix_floppy.asm):00437                 BNE     WRF1                              ; FDC IS NOT READY, WAIT FOR IT
90D4 3502             ( cubix_floppy.asm):00438                 PULS    A
90D6 86FF             ( cubix_floppy.asm):00439                 LDA     #$FF
90D8 39               ( cubix_floppy.asm):00440                 RTS
                      ( cubix_floppy.asm):00441         !
90D9 B69202           ( cubix_floppy.asm):00442                 LDA     TMPSTORAGE
90DC 8440             ( cubix_floppy.asm):00443                 ANDA    #$40                              ; TEST DIO BIT
90DE 260F             ( cubix_floppy.asm):00444                 BNE     WRF2                              ; FDC IS OUT OF SYNC
90E0 3502             ( cubix_floppy.asm):00445                 PULS    A                                 ; RESTORE DATA
90E2 B7DF81           ( cubix_floppy.asm):00446                 STA     FDC_DATA                          ; WRITE TO FDC
90E5 BD91D2           ( cubix_floppy.asm):00447                 JSR     FDDELAY
90E8 BD91D2           ( cubix_floppy.asm):00448                 JSR     FDDELAY
90EB BD91D2           ( cubix_floppy.asm):00449                 JSR     FDDELAY
90EE 39               ( cubix_floppy.asm):00450                 RTS
                      ( cubix_floppy.asm):00451         ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
90EF                  ( cubix_floppy.asm):00452         WRF2:
90EF B6DF81           ( cubix_floppy.asm):00453                 LDA     FDC_DATA                          ; READ DATA REGISTER
90F2 7E90C2           ( cubix_floppy.asm):00454                 JMP     WRF1                              ; AND CONTINUE
                      ( cubix_floppy.asm):00455         
                      ( cubix_floppy.asm):00456         ;__PFDATAS_________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00457         ;
                      ( cubix_floppy.asm):00458         ; WRITE A COMMAND OR PARAMETER SEQUENCE (NO PAUSE)
                      ( cubix_floppy.asm):00459         ;
                      ( cubix_floppy.asm):00460         ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
                      ( cubix_floppy.asm):00461         ;       RQM  DIO
                      ( cubix_floppy.asm):00462         ;       0       0       BUSY
                      ( cubix_floppy.asm):00463         ;       1       0       WRITE TO DATA REGISTER PERMITTED
                      ( cubix_floppy.asm):00464         ;       1       1       BYTE FOR READ BY HOST PENDING
                      ( cubix_floppy.asm):00465         ;       0       1       BUSY
                      ( cubix_floppy.asm):00466         ;
                      ( cubix_floppy.asm):00467         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00468         ;
90F5                  ( cubix_floppy.asm):00469         PFDATAS:
90F5 3402             ( cubix_floppy.asm):00470                 PSHS    A                                 ; SAVE DATA BYTE
90F7                  ( cubix_floppy.asm):00471         WRF1S:
90F7 B6DF80           ( cubix_floppy.asm):00472                 LDA     FDC_MSR                           ; READ FDC STATUS
90FA B79202           ( cubix_floppy.asm):00473                 STA     TMPSTORAGE
90FD 8480             ( cubix_floppy.asm):00474                 ANDA    #$80                              ;
90FF 27F6             ( cubix_floppy.asm):00475                 BEQ     WRF1S                             ; FDC IS NOT READY, WAIT FOR IT
9101 B69202           ( cubix_floppy.asm):00476                 LDA     TMPSTORAGE
9104 8440             ( cubix_floppy.asm):00477                 ANDA    #$40                              ; TEST DIO BIT
9106 2606             ( cubix_floppy.asm):00478                 BNE     WRF2S                             ; FDC IS OUT OF SYNC
9108 3502             ( cubix_floppy.asm):00479                 PULS    A                                 ; RESTORE DATA
910A B7DF81           ( cubix_floppy.asm):00480                 STA     FDC_DATA                          ; WRITE TO FDC
910D 39               ( cubix_floppy.asm):00481                 RTS
                      ( cubix_floppy.asm):00482         ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
910E                  ( cubix_floppy.asm):00483         WRF2S:
910E B6DF81           ( cubix_floppy.asm):00484                 LDA     FDC_DATA                          ; READ DATA REGISTER
9111 7E90F7           ( cubix_floppy.asm):00485                 JMP     WRF1S                             ; AND CONTINUE
                      ( cubix_floppy.asm):00486         
                      ( cubix_floppy.asm):00487         
                      ( cubix_floppy.asm):00488         
                      ( cubix_floppy.asm):00489         ;__CHECKINT__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00490         ;
                      ( cubix_floppy.asm):00491         ; CHECK FOR ACTIVE FDC INTERRUPTS BEFORE GIVING I8272 COMMANDS
                      ( cubix_floppy.asm):00492         ; POLL RQM FOR WHEN NOT BUSY AND THEN SEND FDC
                      ( cubix_floppy.asm):00493         ; SENSE INTERRUPT COMMAND.  IF IT RTSURNS WITH NON ZERO
                      ( cubix_floppy.asm):00494         ; ERROR CODE, PASS BACK TO JSRING ROUTINE FOR HANDLING
                      ( cubix_floppy.asm):00495         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00496         ;
9114                  ( cubix_floppy.asm):00497         CHECKINT:
9114 108E0000         ( cubix_floppy.asm):00498                 LDY     #$00
                      ( cubix_floppy.asm):00499         !
9118 B6DF80           ( cubix_floppy.asm):00500                 LDA     FDC_MSR                           ; READING OR WRITING IS KEYS TO D7 RQM
911B 8480             ( cubix_floppy.asm):00501                 ANDA    #$80
911D 260A             ( cubix_floppy.asm):00502                 BNE     >                                 ; WAIT FOR RQM TO BE TRUE. WAIT UNTIL DONE
911F BD91D2           ( cubix_floppy.asm):00503                 JSR     FDDELAY
9122 3121             ( cubix_floppy.asm):00504                 INY
9124 26F2             ( cubix_floppy.asm):00505                 BNE     <
9126 7E9131           ( cubix_floppy.asm):00506                 JMP     ERRCLR
                      ( cubix_floppy.asm):00507         
                      ( cubix_floppy.asm):00508         !
9129 B6DF80           ( cubix_floppy.asm):00509                 LDA     FDC_MSR                           ; READING OR WRITING IS KEYS TO D7 RQM
912C 8440             ( cubix_floppy.asm):00510                 ANDA    #$40                              ; WAITING FOR INPUT?
912E 2719             ( cubix_floppy.asm):00511                 BEQ     SENDINT
9130 39               ( cubix_floppy.asm):00512                 RTS
                      ( cubix_floppy.asm):00513         
9131                  ( cubix_floppy.asm):00514         ERRCLR:
9131 108E0000         ( cubix_floppy.asm):00515                 LDY     #$00
                      ( cubix_floppy.asm):00516         !
9135 B6DF81           ( cubix_floppy.asm):00517                 LDA     FDC_DATA                          ; CLEAR THE JUNK OUT OF DATA REGISTER
9138 B6DF80           ( cubix_floppy.asm):00518                 LDA     FDC_MSR                           ; CHECK WITH RQM
913B 8480             ( cubix_floppy.asm):00519                 ANDA    #$80                              ; IF STILL NOT READY, READ OUT MORE JUNK
913D 2607             ( cubix_floppy.asm):00520                 BNE     >                                 ;
913F BD91D2           ( cubix_floppy.asm):00521                 JSR     FDDELAY
9142 3121             ( cubix_floppy.asm):00522                 INY
9144 26EF             ( cubix_floppy.asm):00523                 BNE     <
                      ( cubix_floppy.asm):00524         !
9146 86FF             ( cubix_floppy.asm):00525                 LDA     #$FF                              ; RETURN ERROR CODE -1
                      ( cubix_floppy.asm):00526         ;
9148 39               ( cubix_floppy.asm):00527                 RTS
                      ( cubix_floppy.asm):00528         
                      ( cubix_floppy.asm):00529         ;__SENDINT__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00530         ;
                      ( cubix_floppy.asm):00531         ; SENSE INTERRUPT COMMAND
                      ( cubix_floppy.asm):00532         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00533         ;
9149                  ( cubix_floppy.asm):00534         SENDINT:
9149 8608             ( cubix_floppy.asm):00535                 LDA     #CFD_SENSEINT                     ; SENSE INTERRUPT COMMAND
914B BD90BC           ( cubix_floppy.asm):00536                 JSR     PFDATA                            ; SEND IT
914E BD9163           ( cubix_floppy.asm):00537                 JSR     GFDATA                            ; GET RESULTS
9151 B701E3           ( cubix_floppy.asm):00538                 STA     ST0                               ; STORE THAT
9154 84C0             ( cubix_floppy.asm):00539                 ANDA    #$C0                              ; MASK OFF INTERRUPT STATUS BITS
9156 8180             ( cubix_floppy.asm):00540                 CMPA    #$80                              ; CHECK IF INVALID COMMAND
9158 2708             ( cubix_floppy.asm):00541                 BEQ     ENDSENDINT                        ; YES, EXIT
915A BD9163           ( cubix_floppy.asm):00542                 JSR     GFDATA                            ; GET ANOTHER (STATUS CODE 1)
915D B601E3           ( cubix_floppy.asm):00543                 LDA     ST0                               ; GET FIRST ONE
9160 84C0             ( cubix_floppy.asm):00544                 ANDA    #$C0                              ; MASK OFF ALL BUT INTERRUPT CODE 00 IS NORMAL
9162                  ( cubix_floppy.asm):00545         ENDSENDINT:
9162 39               ( cubix_floppy.asm):00546                 RTS                                       ; ANYTHING ELSE IS AN ERROR
                      ( cubix_floppy.asm):00547         
                      ( cubix_floppy.asm):00548         
                      ( cubix_floppy.asm):00549         ;__GFDATA__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00550         ;
                      ( cubix_floppy.asm):00551         ; GET DATA FROM FLOPPY CONTROLLER
                      ( cubix_floppy.asm):00552         ;
                      ( cubix_floppy.asm):00553         ; TRANSFERS ARE SYNCHONIZED BYT MSR D7 <RQM> AND D6 <DIO>
                      ( cubix_floppy.asm):00554         ;       RQM  DIO
                      ( cubix_floppy.asm):00555         ;       0       0       BUSY
                      ( cubix_floppy.asm):00556         ;       1       0       WRITE TO DATA REGISTER PERMITTED
                      ( cubix_floppy.asm):00557         ;       1       1       BYTE FOR READ BY HOST PENDING
                      ( cubix_floppy.asm):00558         ;       0       1       BUSY
                      ( cubix_floppy.asm):00559         ;
                      ( cubix_floppy.asm):00560         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00561         ;
9163                  ( cubix_floppy.asm):00562         GFDATA:
9163 108E0000         ( cubix_floppy.asm):00563                 LDY     #$00
                      ( cubix_floppy.asm):00564         !
9167 B6DF80           ( cubix_floppy.asm):00565                 LDA     FDC_MSR                           ; GET STATUS
916A B79202           ( cubix_floppy.asm):00566                 STA     TMPSTORAGE                        ;
916D 8480             ( cubix_floppy.asm):00567                 ANDA    #%10000000                        ; NOT READY, WAIT
916F 2607             ( cubix_floppy.asm):00568                 BNE     >                                 ;
9171 3121             ( cubix_floppy.asm):00569                 INY
9173 26F2             ( cubix_floppy.asm):00570                 BNE     <
9175 8600             ( cubix_floppy.asm):00571                 LDA     #$00
9177 39               ( cubix_floppy.asm):00572                 RTS
                      ( cubix_floppy.asm):00573         !
9178 B69202           ( cubix_floppy.asm):00574                 LDA     TMPSTORAGE
917B 8440             ( cubix_floppy.asm):00575                 ANDA    #%01000000                        ; ANY DATA FOR US?
917D 2703             ( cubix_floppy.asm):00576                 BEQ     GFDATA1                           ; NO, SKIP IT
917F B6DF81           ( cubix_floppy.asm):00577                 LDA     FDC_DATA                          ; GET FDC DATA
9182                  ( cubix_floppy.asm):00578         GFDATA1:
9182 39               ( cubix_floppy.asm):00579                 RTS
                      ( cubix_floppy.asm):00580         
                      ( cubix_floppy.asm):00581         ;__FD_DETECT______________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00582         ;
                      ( cubix_floppy.asm):00583         ;       DETECT FLOPPY HARDWARE
                      ( cubix_floppy.asm):00584         ;________________________________________________________________________________________________________________________________
9183                  ( cubix_floppy.asm):00585         FD_DETECT:
                      ( cubix_floppy.asm):00586         ; BLINDLY RESET FDC (WHICH MAY OR MAY NOT EXIST)
9183 BD91B2           ( cubix_floppy.asm):00587                 JSR     FC_RESETFDC                       ; RESET FDC
                      ( cubix_floppy.asm):00588         
9186 B6DF80           ( cubix_floppy.asm):00589                 LDA     FDC_MSR                           ; READ MSR
9189 8180             ( cubix_floppy.asm):00590                 CMPA    #$80
918B 270A             ( cubix_floppy.asm):00591                 BEQ     FD_DETECT1                        ; $80 IS OK
918D 81D0             ( cubix_floppy.asm):00592                 CMPA    #$D0
918F 2706             ( cubix_floppy.asm):00593                 BEQ     FD_DETECT1                        ; $D0 IS OK
9191 86FF             ( cubix_floppy.asm):00594                 LDA     #$FF                              ; NOT OK
9193 B701E7           ( cubix_floppy.asm):00595                 STA     FLOPPY_DETCT
9196 39               ( cubix_floppy.asm):00596                 RTS
                      ( cubix_floppy.asm):00597         ;
9197                  ( cubix_floppy.asm):00598         FD_DETECT1:
9197 8E0064           ( cubix_floppy.asm):00599                 LDX     #100
919A BD91DB           ( cubix_floppy.asm):00600                 JSR     FDVDELAY                          ; WAIT A BIT FOR FDC
919D B6DF80           ( cubix_floppy.asm):00601                 LDA     FDC_MSR                           ; READ MSR AGAIN
91A0 8180             ( cubix_floppy.asm):00602                 CMPA    #$80
91A2 2708             ( cubix_floppy.asm):00603                 BEQ     >                                 ; $80 IS OK
91A4 81D0             ( cubix_floppy.asm):00604                 CMPA    #$D0
91A6 86FF             ( cubix_floppy.asm):00605                 LDA     #$FF                              ; NOT OK
91A8 B701E7           ( cubix_floppy.asm):00606                 STA     FLOPPY_DETCT
91AB 39               ( cubix_floppy.asm):00607                 RTS
                      ( cubix_floppy.asm):00608         !
91AC 8600             ( cubix_floppy.asm):00609                 LDA     #$00                              ; OK
91AE B701E7           ( cubix_floppy.asm):00610                 STA     FLOPPY_DETCT
91B1 39               ( cubix_floppy.asm):00611                 RTS
                      ( cubix_floppy.asm):00612         
91B2                  ( cubix_floppy.asm):00613         FC_RESETFDC:
91B2 B6DF83           ( cubix_floppy.asm):00614                 LDA     FDC_RESET
91B5 B6DF83           ( cubix_floppy.asm):00615                 LDA     FDC_RESET
91B8 8E0096           ( cubix_floppy.asm):00616                 LDX     #150
91BB BD91DB           ( cubix_floppy.asm):00617                 JSR     FDVDELAY                          ; WAIT A BIT FOR FDC
                      ( cubix_floppy.asm):00618         
91BE 8600             ( cubix_floppy.asm):00619                 LDA     #$00
91C0 B7DF86           ( cubix_floppy.asm):00620                 STA     FDC_DOR
91C3 BD91D2           ( cubix_floppy.asm):00621                 JSR     FDDELAY
91C6 860C             ( cubix_floppy.asm):00622                 LDA     #DOR_INIT
91C8 B7DF86           ( cubix_floppy.asm):00623                 STA     FDC_DOR
91CB 8E0096           ( cubix_floppy.asm):00624                 LDX     #150                              ;
91CE BD91DB           ( cubix_floppy.asm):00625                 JSR     FDVDELAY
91D1 39               ( cubix_floppy.asm):00626                 RTS
                      ( cubix_floppy.asm):00627         
                      ( cubix_floppy.asm):00628         
91D2                  ( cubix_floppy.asm):00629         FDDELAY:
91D2 3402             ( cubix_floppy.asm):00630                 PSHS    A
91D4 3502             ( cubix_floppy.asm):00631                 PULS    A
91D6 3402             ( cubix_floppy.asm):00632                 PSHS    A
91D8 3502             ( cubix_floppy.asm):00633                 PULS    A
91DA 39               ( cubix_floppy.asm):00634                 RTS
91DB                  ( cubix_floppy.asm):00635         FDVDELAY:
91DB 3402             ( cubix_floppy.asm):00636                 PSHS    A
91DD 3502             ( cubix_floppy.asm):00637                 PULS    A
91DF 3402             ( cubix_floppy.asm):00638                 PSHS    A
91E1 3502             ( cubix_floppy.asm):00639                 PULS    A
91E3 301F             ( cubix_floppy.asm):00640                 DEX
91E5 8C0000           ( cubix_floppy.asm):00641                 CPX     #$00
91E8 26F1             ( cubix_floppy.asm):00642                 BNE     FDVDELAY
91EA 39               ( cubix_floppy.asm):00643                 RTS
                      ( cubix_floppy.asm):00644         
                      ( cubix_floppy.asm):00645         
91EB                  ( cubix_floppy.asm):00646         GETDSKUNIT:
91EB B601FB           ( cubix_floppy.asm):00647                 LDA     CURRENTDEVICE
91EE 8401             ( cubix_floppy.asm):00648                 ANDA    #$01
91F0 8100             ( cubix_floppy.asm):00649                 CMPA    #$00
91F2 2608             ( cubix_floppy.asm):00650                 BNE     >
91F4 8600             ( cubix_floppy.asm):00651                 LDA     #$00
91F6 8610             ( cubix_floppy.asm):00652                 LDA     #%00010000
91F8 B701E6           ( cubix_floppy.asm):00653                 STA     DSKUNIT
91FB 39               ( cubix_floppy.asm):00654                 RTS
                      ( cubix_floppy.asm):00655         !
91FC 8621             ( cubix_floppy.asm):00656                 LDA     #%00100001
91FE B701E6           ( cubix_floppy.asm):00657                 STA     DSKUNIT
9201 39               ( cubix_floppy.asm):00658                 RTS
                      ( cubix_floppy.asm):00659         
9202                  ( cubix_floppy.asm):00660         TMPSTORAGE:
9202 00               ( cubix_floppy.asm):00661                 FCB     00
9203                  ( cubix_floppy.asm):00662         FMESSAGE1:
9203 46443A           ( cubix_floppy.asm):00663                 FCC     "FD:"
9206 0D0A             ( cubix_floppy.asm):00664                 FCB     $0D,$0A
9208 00               ( cubix_floppy.asm):00665                 FCB     00
9209                  ( cubix_floppy.asm):00666         FMESSAGE2:
9209 20494F3D3078     ( cubix_floppy.asm):00667                 FCC     " IO=0x"
920F 00               ( cubix_floppy.asm):00668                 FCB     00
9210                  ( cubix_floppy.asm):00669         FMESSAGE3:
9210 0D0A             ( cubix_floppy.asm):00670                 FCB     $0D,$0A
9212 204E4F5420505245 ( cubix_floppy.asm):00671                 FCC     " NOT PRESENT"
     53454E54
921E 00               ( cubix_floppy.asm):00672                 FCB     00
921F                  ( cubix_floppy.asm):00673         FMESSAGE4:
921F 0D0A             ( cubix_floppy.asm):00674                 FCB     $0D,$0A
9221 2050524553454E54 ( cubix_floppy.asm):00675                 FCC     " PRESENT, MODE=DUODYNE "
     2C204D4F44453D44
     554F44594E4520
9238 00               ( cubix_floppy.asm):00676                 FCB     00
                      (     cubixdrv.asm):00093                 INCLUDE cubix_fp.asm
                      (     cubix_fp.asm):00001         ;__FRONT PANEL DRIVERS_____________________________________________________________________________________________________________
                      (     cubix_fp.asm):00002         ;
                      (     cubix_fp.asm):00003         ;       Duodyne Front Panel Driver
                      (     cubix_fp.asm):00004         ;
                      (     cubix_fp.asm):00005         ;       Entry points:
                      (     cubix_fp.asm):00006         ;               FP_INIT
                      (     cubix_fp.asm):00007         ;               FP_SETLED
                      (     cubix_fp.asm):00008         ;               FP_GETSWITCH
                      (     cubix_fp.asm):00009         ;________________________________________________________________________________________________________________________________
                      (     cubix_fp.asm):00010         ;
                      (     cubix_fp.asm):00011         ;
     DF54             (     cubix_fp.asm):00012         FP_PORT         = $DF54                           ; PORT
                      (     cubix_fp.asm):00013         ;
                      (     cubix_fp.asm):00014         ;
                      (     cubix_fp.asm):00015         ;__FP_INIT___________________________________________________________________________________________
                      (     cubix_fp.asm):00016         ;
                      (     cubix_fp.asm):00017         ;  FRONT PANEL INFO
                      (     cubix_fp.asm):00018         ;____________________________________________________________________________________________________
                      (     cubix_fp.asm):00019         ;
9239                  (     cubix_fp.asm):00020         FP_INIT:
9239 BD970D           (     cubix_fp.asm):00021                 JSR     LFCR                              ; AND CRLF
923C 8E9400           (     cubix_fp.asm):00022                 LDX     #FPMESSAGE1
923F BD9721           (     cubix_fp.asm):00023                 JSR     WRSTR                             ; DO PROMPT
9242 CCDF54           (     cubix_fp.asm):00024                 LDD     #FP_PORT                          ; GET BASE PORT
9245 BD972D           (     cubix_fp.asm):00025                 JSR     WRHEXW                            ; PRINT BASE PORT
9248 BD970D           (     cubix_fp.asm):00026                 JSR     LFCR                              ; AND CRLF
924B 8E9415           (     cubix_fp.asm):00027                 LDX     #FPMESSAGE2
924E BD9721           (     cubix_fp.asm):00028                 JSR     WRSTR                             ; DO PROMPT
9251 8600             (     cubix_fp.asm):00029                 LDA     #$00
9253 B7DF54           (     cubix_fp.asm):00030                 STA     FP_PORT
                      (     cubix_fp.asm):00031         ;
                      (     cubix_fp.asm):00032         ;
9256 8E0008           (     cubix_fp.asm):00033                 LDX     #$0008
9259 F6DF54           (     cubix_fp.asm):00034                 LDB     FP_PORT
925C                  (     cubix_fp.asm):00035         FP_INIT1:
925C 8600             (     cubix_fp.asm):00036                 LDA     #$00
925E 59               (     cubix_fp.asm):00037                 ROLB
925F 8930             (     cubix_fp.asm):00038                 ADCA    #'0'
9261 3404             (     cubix_fp.asm):00039                 PSHS    B
9263 BD9753           (     cubix_fp.asm):00040                 JSR     PUTCHR
9266 3504             (     cubix_fp.asm):00041                 PULS    B
9268 301F             (     cubix_fp.asm):00042                 DEX
926A 8C0000           (     cubix_fp.asm):00043                 CMPX    #$0000
926D 26ED             (     cubix_fp.asm):00044                 BNE     FP_INIT1
                      (     cubix_fp.asm):00045         
926F BD970D           (     cubix_fp.asm):00046                 JSR     LFCR                              ; AND CRLF
9272 39               (     cubix_fp.asm):00047                 RTS                                       ; DONE
                      (     cubix_fp.asm):00048         ;
                      (     cubix_fp.asm):00049         ;__FP_SETLED_________________________________________________________________________________________
                      (     cubix_fp.asm):00050         ;
                      (     cubix_fp.asm):00051         ;  SET LED OUTPUT ON FRONT PANEL
                      (     cubix_fp.asm):00052         ;  A=VALUE TO DISPLAY
                      (     cubix_fp.asm):00053         ;____________________________________________________________________________________________________
9273                  (     cubix_fp.asm):00054         FP_SETLED:
9273 B7DF54           (     cubix_fp.asm):00055                 STA     FP_PORT
9276 39               (     cubix_fp.asm):00056                 RTS
                      (     cubix_fp.asm):00057         ;__FP_GETSWITCH______________________________________________________________________________________
                      (     cubix_fp.asm):00058         ;
                      (     cubix_fp.asm):00059         ;  GET SWITCHES FROM FRONT PANEL
                      (     cubix_fp.asm):00060         ;  A=SWITCH VALUE
                      (     cubix_fp.asm):00061         ;____________________________________________________________________________________________________
9277                  (     cubix_fp.asm):00062         FP_GETSWITCH:
9277 B6DF54           (     cubix_fp.asm):00063                 LDA     FP_PORT
927A 39               (     cubix_fp.asm):00064                 RTS                                       ; DONE
                      (     cubix_fp.asm):00065         
                      (     cubix_fp.asm):00066         
                      (     cubix_fp.asm):00067         ;__FPSD_INIT__________________________________________________________________________________________
                      (     cubix_fp.asm):00068         ;
                      (     cubix_fp.asm):00069         ;  INIT AND DISPLAY SD INFO
                      (     cubix_fp.asm):00070         ;____________________________________________________________________________________________________
                      (     cubix_fp.asm):00071         ;
927B                  (     cubix_fp.asm):00072         FPSD_INIT:
927B BD970D           (     cubix_fp.asm):00073                 JSR     LFCR                              ; AND CRLF
927E 8E941F           (     cubix_fp.asm):00074                 LDX     #FPSDMESSAGE1
9281 BD9721           (     cubix_fp.asm):00075                 JSR     WRSTR                             ; DO PROMPT
9284 BD970D           (     cubix_fp.asm):00076                 JSR     LFCR                              ; AND CRLF
                      (     cubix_fp.asm):00077         
9287 B694E1           (     cubix_fp.asm):00078                 LDA     PCF_FAIL_FLAG
928A 8100             (     cubix_fp.asm):00079                 CMPA    #$00
928C 1026008D         (     cubix_fp.asm):00080                 LBNE    FPSD_INIT_ERROR
                      (     cubix_fp.asm):00081         
9290 8625             (     cubix_fp.asm):00082                 LDA     #$25
9292 B7932C           (     cubix_fp.asm):00083                 STA     I2C_ADDRESS
9295 BD92B0           (     cubix_fp.asm):00084                 JSR     FPSD_SCAN
9298 8626             (     cubix_fp.asm):00085                 LDA     #$26
929A B7932C           (     cubix_fp.asm):00086                 STA     I2C_ADDRESS
929D BD92B0           (     cubix_fp.asm):00087                 JSR     FPSD_SCAN
92A0 8627             (     cubix_fp.asm):00088                 LDA     #$27
92A2 B7932C           (     cubix_fp.asm):00089                 STA     I2C_ADDRESS
92A5 BD92B0           (     cubix_fp.asm):00090                 JSR     FPSD_SCAN
                      (     cubix_fp.asm):00091         
92A8 8600             (     cubix_fp.asm):00092                 LDA     #$00
92AA B7944C           (     cubix_fp.asm):00093                 STA     FPSDFAILFLAG
92AD 1CFE             (     cubix_fp.asm):00094                 CLC
92AF 39               (     cubix_fp.asm):00095                 RTS
                      (     cubix_fp.asm):00096         
92B0                  (     cubix_fp.asm):00097         FPSD_SCAN:
92B0 8E9426           (     cubix_fp.asm):00098                 LDX     #FPSDMESSAGE2
92B3 BD9721           (     cubix_fp.asm):00099                 JSR     WRSTR                             ; DO PROMPT
92B6 B6932C           (     cubix_fp.asm):00100                 LDA     I2C_ADDRESS                       ; DEFAULT ADDRESS BUG:SHOULD REALLY SCAN ALL APPLICABLE ADDRESSES
92B9 BD9739           (     cubix_fp.asm):00101                 JSR     WRHEX
92BC BD9719           (     cubix_fp.asm):00102                 JSR     SPACE
                      (     cubix_fp.asm):00103         
92BF 8E9454           (     cubix_fp.asm):00104                 LDX     #FPSDSENDINFO                     ; GET SD INFO
92C2 108E0001         (     cubix_fp.asm):00105                 LDY     #1
92C6 B6932C           (     cubix_fp.asm):00106                 LDA     I2C_ADDRESS                       ; DEFAULT ADDRESS BUG:SHOULD REALLY SCAN ALL APPLICABLE ADDRESSES
92C9 BD94F3           (     cubix_fp.asm):00107                 JSR     PCF_SENDBYTES_INTERNAL
92CC 8E9453           (     cubix_fp.asm):00108                 LDX     #FPSDSENDREAD                     ; READ BYTES
92CF 108E0001         (     cubix_fp.asm):00109                 LDY     #1
92D3 B6932C           (     cubix_fp.asm):00110                 LDA     I2C_ADDRESS                       ; DEFAULT ADDRESS BUG:SHOULD REALLY SCAN ALL APPLICABLE ADDRESSES
92D6 BD94F3           (     cubix_fp.asm):00111                 JSR     PCF_SENDBYTES_INTERNAL
92D9 8E0300           (     cubix_fp.asm):00112                 LDX     #HSTBUF
92DC 108E0005         (     cubix_fp.asm):00113                 LDY     #5
92E0 B6932C           (     cubix_fp.asm):00114                 LDA     I2C_ADDRESS                       ; DEFAULT ADDRESS BUG:SHOULD REALLY SCAN ALL APPLICABLE ADDRESSES
92E3 BD9553           (     cubix_fp.asm):00115                 JSR     PCF_READBYTES_INTERNAL
                      (     cubix_fp.asm):00116         
92E6 B60300           (     cubix_fp.asm):00117                 LDA     HSTBUF                            ; SHOULD RESPOND WITH "SD" FOLLOWED BY IMAGE SIZE
92E9 8153             (     cubix_fp.asm):00118                 CMPA    #'S'
92EB 2630             (     cubix_fp.asm):00119                 BNE     FPSD_INIT_ERROR
92ED B60301           (     cubix_fp.asm):00120                 LDA     HSTBUF+1
92F0 8144             (     cubix_fp.asm):00121                 CMPA    #'D'
92F2 2629             (     cubix_fp.asm):00122                 BNE     FPSD_INIT_ERROR
92F4 8E943C           (     cubix_fp.asm):00123                 LDX     #FPSDMESSAGE6
92F7 BD9721           (     cubix_fp.asm):00124                 JSR     WRSTR
                      (     cubix_fp.asm):00125         
92FA B60302           (     cubix_fp.asm):00126                 LDA     HSTBUF+2
92FD BD9739           (     cubix_fp.asm):00127                 JSR     WRHEX
9300 B60303           (     cubix_fp.asm):00128                 LDA     HSTBUF+3
9303 BD9739           (     cubix_fp.asm):00129                 JSR     WRHEX
9306 B60304           (     cubix_fp.asm):00130                 LDA     HSTBUF+4
9309 BD9739           (     cubix_fp.asm):00131                 JSR     WRHEX
930C B60305           (     cubix_fp.asm):00132                 LDA     HSTBUF+5
930F BD9739           (     cubix_fp.asm):00133                 JSR     WRHEX
9312 BD970D           (     cubix_fp.asm):00134                 JSR     LFCR                              ; AND CRLF
9315 8600             (     cubix_fp.asm):00135                 LDA     #$00
9317 B7944C           (     cubix_fp.asm):00136                 STA     FPSDFAILFLAG
931A 1CFE             (     cubix_fp.asm):00137                 CLC
931C 39               (     cubix_fp.asm):00138                 RTS
                      (     cubix_fp.asm):00139         
931D                  (     cubix_fp.asm):00140         FPSD_INIT_ERROR:
931D 8E942F           (     cubix_fp.asm):00141                 LDX     #FPSDMESSAGE3
9320 BD9721           (     cubix_fp.asm):00142                 JSR     WRSTR                             ; DO PROMPT
9323 BD970D           (     cubix_fp.asm):00143                 JSR     LFCR                              ; AND CRLF
9326 86FF             (     cubix_fp.asm):00144                 LDA     #$FF
9328 B7944C           (     cubix_fp.asm):00145                 STA     FPSDFAILFLAG
932B 39               (     cubix_fp.asm):00146                 RTS
                      (     cubix_fp.asm):00147         
932C                  (     cubix_fp.asm):00148         I2C_ADDRESS:
932C 00               (     cubix_fp.asm):00149                 FCB     00
                      (     cubix_fp.asm):00150         
                      (     cubix_fp.asm):00151         
                      (     cubix_fp.asm):00152         ;*__FPSD_READ_SECTOR___________________________________________________________________________________
                      (     cubix_fp.asm):00153         ;*
                      (     cubix_fp.asm):00154         ;*  READ FRONT PANEL SD SECTOR (IN LBA) INTO BUFFER
                      (     cubix_fp.asm):00155         ;*
                      (     cubix_fp.asm):00156         ;*____________________________________________________________________________________________________
932D                  (     cubix_fp.asm):00157         FPSD_READ_SECTOR:
932D B6944C           (     cubix_fp.asm):00158                 LDA     FPSDFAILFLAG
9330 8100             (     cubix_fp.asm):00159                 CMPA    #$00
9332 263B             (     cubix_fp.asm):00160                 BNE     FPSD_READ_SECTOR_ERROR
                      (     cubix_fp.asm):00161         
9334 BD93C9           (     cubix_fp.asm):00162                 JSR     FPSD_SETUP_LBA
9337 8E944E           (     cubix_fp.asm):00163                 LDX     #FPSDSENDADDRESS
933A 108E0005         (     cubix_fp.asm):00164                 LDY     #5
933E B6944D           (     cubix_fp.asm):00165                 LDA     FPSDDEVICE
9341 BD94F3           (     cubix_fp.asm):00166                 JSR     PCF_SENDBYTES_INTERNAL
9344 81FF             (     cubix_fp.asm):00167                 CMPA    #$FF
9346 2727             (     cubix_fp.asm):00168                 BEQ     FPSD_READ_SECTOR_ERROR
9348 8E9453           (     cubix_fp.asm):00169                 LDX     #FPSDSENDREAD                     ; READ BYTES
934B 108E0001         (     cubix_fp.asm):00170                 LDY     #1
934F B6944D           (     cubix_fp.asm):00171                 LDA     FPSDDEVICE
9352 BD94F3           (     cubix_fp.asm):00172                 JSR     PCF_SENDBYTES_INTERNAL
9355 81FF             (     cubix_fp.asm):00173                 CMPA    #$FF
9357 2716             (     cubix_fp.asm):00174                 BEQ     FPSD_READ_SECTOR_ERROR
9359 8E0300           (     cubix_fp.asm):00175                 LDX     #HSTBUF
935C 108E0200         (     cubix_fp.asm):00176                 LDY     #512
9360 B6944D           (     cubix_fp.asm):00177                 LDA     FPSDDEVICE
9363 BD9553           (     cubix_fp.asm):00178                 JSR     PCF_READBYTES_INTERNAL
9366 81FF             (     cubix_fp.asm):00179                 CMPA    #$FF
9368 2705             (     cubix_fp.asm):00180                 BEQ     FPSD_READ_SECTOR_ERROR
                      (     cubix_fp.asm):00181         
936A 4F               (     cubix_fp.asm):00182                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
936B B701F7           (     cubix_fp.asm):00183                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
936E 39               (     cubix_fp.asm):00184                 RTS
936F                  (     cubix_fp.asm):00185         FPSD_READ_SECTOR_ERROR:
936F 8602             (     cubix_fp.asm):00186                 LDA     #$02                              ; SET ERROR CONDITION
9371 B701F7           (     cubix_fp.asm):00187                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
9374 39               (     cubix_fp.asm):00188                 RTS
                      (     cubix_fp.asm):00189         
                      (     cubix_fp.asm):00190         ;*__FPSD_WRITE_SECTOR__________________________________________________________________________________
                      (     cubix_fp.asm):00191         ;*
                      (     cubix_fp.asm):00192         ;*  WRITE FRONT PANEL SD SECTOR (IN LBA) FROM BUFFER
                      (     cubix_fp.asm):00193         ;*
                      (     cubix_fp.asm):00194         ;*____________________________________________________________________________________________________
9375                  (     cubix_fp.asm):00195         FPSD_WRITE_SECTOR:
9375 B6944C           (     cubix_fp.asm):00196                 LDA     FPSDFAILFLAG
9378 8100             (     cubix_fp.asm):00197                 CMPA    #$00
937A 2647             (     cubix_fp.asm):00198                 BNE     FPSD_WRITE_SECTOR_ERROR
                      (     cubix_fp.asm):00199         
937C 3420             (     cubix_fp.asm):00200                 PSHS    Y
937E 108E0201         (     cubix_fp.asm):00201                 LDY     #$0201
                      (     cubix_fp.asm):00202         !
9382 313F             (     cubix_fp.asm):00203                 DEY
9384 A6A90300         (     cubix_fp.asm):00204                 LDA     HSTBUF,Y
9388 A7A90301         (     cubix_fp.asm):00205                 STA     HSTBUF+1,Y
938C 108C0000         (     cubix_fp.asm):00206                 CMPY    #$0000
9390 26F0             (     cubix_fp.asm):00207                 BNE     <
9392 3520             (     cubix_fp.asm):00208                 PULS    Y
9394 8657             (     cubix_fp.asm):00209                 LDA     #'W'
9396 B70300           (     cubix_fp.asm):00210                 STA     HSTBUF
                      (     cubix_fp.asm):00211         
9399 BD93C9           (     cubix_fp.asm):00212                 JSR     FPSD_SETUP_LBA
939C 8E944E           (     cubix_fp.asm):00213                 LDX     #FPSDSENDADDRESS
939F 108E0005         (     cubix_fp.asm):00214                 LDY     #5
93A3 B6944D           (     cubix_fp.asm):00215                 LDA     FPSDDEVICE
93A6 BD94F3           (     cubix_fp.asm):00216                 JSR     PCF_SENDBYTES_INTERNAL
93A9 81FF             (     cubix_fp.asm):00217                 CMPA    #$FF
93AB 2716             (     cubix_fp.asm):00218                 BEQ     FPSD_WRITE_SECTOR_ERROR
93AD 8E0300           (     cubix_fp.asm):00219                 LDX     #HSTBUF
93B0 108E0201         (     cubix_fp.asm):00220                 LDY     #513
93B4 B6944D           (     cubix_fp.asm):00221                 LDA     FPSDDEVICE
93B7 BD94F3           (     cubix_fp.asm):00222                 JSR     PCF_SENDBYTES_INTERNAL
93BA 81FF             (     cubix_fp.asm):00223                 CMPA    #$FF
93BC 2705             (     cubix_fp.asm):00224                 BEQ     FPSD_WRITE_SECTOR_ERROR
93BE 4F               (     cubix_fp.asm):00225                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
93BF B701F7           (     cubix_fp.asm):00226                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
93C2 39               (     cubix_fp.asm):00227                 RTS
93C3                  (     cubix_fp.asm):00228         FPSD_WRITE_SECTOR_ERROR:
93C3 8602             (     cubix_fp.asm):00229                 LDA     #$02
93C5 B701F7           (     cubix_fp.asm):00230                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
93C8 39               (     cubix_fp.asm):00231                 RTS
                      (     cubix_fp.asm):00232         
                      (     cubix_fp.asm):00233         ;*__FPSD_SETUP_LBA____________________________________________________________________________________
                      (     cubix_fp.asm):00234         ;*
                      (     cubix_fp.asm):00235         ;*
                      (     cubix_fp.asm):00236         ;*       SETUP   LBA DATA
                      (     cubix_fp.asm):00237         ;*
                      (     cubix_fp.asm):00238         ;*
                      (     cubix_fp.asm):00239         ;*____________________________________________________________________________________________________
93C9                  (     cubix_fp.asm):00240         FPSD_SETUP_LBA:
93C9 3406             (     cubix_fp.asm):00241                 PSHS    D
93CB B601FB           (     cubix_fp.asm):00242                 LDA     CURRENTDEVICE
93CE B701F3           (     cubix_fp.asm):00243                 STA     DSKY_HEXBUF
93D1 840F             (     cubix_fp.asm):00244                 ANDA    #$0F
93D3 8A20             (     cubix_fp.asm):00245                 ORA     #$20
93D5 B7944D           (     cubix_fp.asm):00246                 STA     FPSDDEVICE
93D8 8600             (     cubix_fp.asm):00247                 LDA     #$00
93DA B7944F           (     cubix_fp.asm):00248                 STA     FPSDSENDADDRESS+1
93DD F601FC           (     cubix_fp.asm):00249                 LDB     CURRENTSLICE
93E0 F701F4           (     cubix_fp.asm):00250                 STB     DSKY_HEXBUF+1
93E3 F79450           (     cubix_fp.asm):00251                 STB     FPSDSENDADDRESS+2
93E6 F601F9           (     cubix_fp.asm):00252                 LDB     CURRENTCYL                        ;
93E9 F701F5           (     cubix_fp.asm):00253                 STB     DSKY_HEXBUF+2
93EC F79451           (     cubix_fp.asm):00254                 STB     FPSDSENDADDRESS+3
93EF F601FA           (     cubix_fp.asm):00255                 LDB     CURRENTSEC                        ;
93F2 F701F6           (     cubix_fp.asm):00256                 STB     DSKY_HEXBUF+3
93F5 F79452           (     cubix_fp.asm):00257                 STB     FPSDSENDADDRESS+4
93F8 BD8C9A           (     cubix_fp.asm):00258                 JSR     DSKY_BIN2SEG
93FB BD8CE1           (     cubix_fp.asm):00259                 JSR     DSKY_SHOW
93FE 3586             (     cubix_fp.asm):00260                 PULS    D,PC
                      (     cubix_fp.asm):00261         
                      (     cubix_fp.asm):00262         
9400                  (     cubix_fp.asm):00263         FPMESSAGE1:
9400 46524F4E54205041 (     cubix_fp.asm):00264                 FCC     "FRONT PANEL:"
     4E454C3A
940C 0D0A             (     cubix_fp.asm):00265                 FCB     $0D,$0A
940E 20494F3D307800   (     cubix_fp.asm):00266                 FCN     " IO=0x"
9415                  (     cubix_fp.asm):00267         FPMESSAGE2:
9415 205357495443483A (     cubix_fp.asm):00268                 FCN     " SWITCH: "
     2000
                      (     cubix_fp.asm):00269         
941F                  (     cubix_fp.asm):00270         FPSDMESSAGE1
941F 46502D53443A     (     cubix_fp.asm):00271                 FCC     "FP-SD:"
9425 00               (     cubix_fp.asm):00272                 FCB     00
9426                  (     cubix_fp.asm):00273         FPSDMESSAGE2
9426 20414444523D3078 (     cubix_fp.asm):00274                 FCC     " ADDR=0x"
942E 00               (     cubix_fp.asm):00275                 FCB     00
942F                  (     cubix_fp.asm):00276         FPSDMESSAGE3
942F 204E4F5420505245 (     cubix_fp.asm):00277                 FCC     " NOT PRESENT"
     53454E54
943B 00               (     cubix_fp.asm):00278                 FCB     00
943C                  (     cubix_fp.asm):00279         FPSDMESSAGE6
943C 20544F54414C2042 (     cubix_fp.asm):00280                 FCC     " TOTAL BYTES=0x"
     595445533D3078
944B 00               (     cubix_fp.asm):00281                 FCB     00
                      (     cubix_fp.asm):00282         
944C                  (     cubix_fp.asm):00283         FPSDFAILFLAG:
944C FF               (     cubix_fp.asm):00284                 FCB     $FF
944D                  (     cubix_fp.asm):00285         FPSDDEVICE:
944D FF               (     cubix_fp.asm):00286                 FCB     $FF
944E                  (     cubix_fp.asm):00287         FPSDSENDADDRESS:
944E 5300000000       (     cubix_fp.asm):00288                 FCB     'S',$00,$00,$00,$00
9453                  (     cubix_fp.asm):00289         FPSDSENDREAD:
9453 52               (     cubix_fp.asm):00290                 FCB     'R'
9454                  (     cubix_fp.asm):00291         FPSDSENDINFO:
9454 4900             (     cubix_fp.asm):00292                 FCB     'I',$00
                      (     cubixdrv.asm):00094                 INCLUDE cubix_i2c.asm
                      (    cubix_i2c.asm):00001         ;__PCF DRIVER____________________________________________________________________________________________________________________
                      (    cubix_i2c.asm):00002         ;
                      (    cubix_i2c.asm):00003         ; PCF8584 I2C DRIVER
                      (    cubix_i2c.asm):00004         ;
                      (    cubix_i2c.asm):00005         ;       Entry points:
                      (    cubix_i2c.asm):00006         ;               PCF_INIT
                      (    cubix_i2c.asm):00007         ;               PCF_SENDBYTES
                      (    cubix_i2c.asm):00008         ;               PCF_READBYTES
                      (    cubix_i2c.asm):00009         ;               PCF_INITDEV
                      (    cubix_i2c.asm):00010         ;
                      (    cubix_i2c.asm):00011         ;________________________________________________________________________________________________________________________________
                      (    cubix_i2c.asm):00012         ;
                      (    cubix_i2c.asm):00013         ;
     DF56             (    cubix_i2c.asm):00014         PCF_BASE        = $DF56                           ; PORT
     00AA             (    cubix_i2c.asm):00015         PCF_ID          = $AA
     0008             (    cubix_i2c.asm):00016         CPU_CLK         = 8
                      (    cubix_i2c.asm):00017         ;
     DF56             (    cubix_i2c.asm):00018         PCF_RS0         = PCF_BASE
     DF57             (    cubix_i2c.asm):00019         PCF_RS1         = PCF_RS0+1
     0055             (    cubix_i2c.asm):00020         PCF_OWN         = $55                             ; PCF_ID>>1   PCF'S ADDRESS IN SLAVE MODE  (LWASM does not seem to have a bit shift operator)
                      (    cubix_i2c.asm):00021         ;
                      (    cubix_i2c.asm):00022         ;
                      (    cubix_i2c.asm):00023         ; CONTROL REGISTER BITS
                      (    cubix_i2c.asm):00024         ;
     0080             (    cubix_i2c.asm):00025         PCF_PIN         = %10000000
     0040             (    cubix_i2c.asm):00026         PCF_ES0         = %01000000
     0020             (    cubix_i2c.asm):00027         PCF_ES1         = %00100000
     0010             (    cubix_i2c.asm):00028         PCF_ES2         = %00010000
     0008             (    cubix_i2c.asm):00029         PCF_EN1         = %00001000
     0004             (    cubix_i2c.asm):00030         PCF_STA         = %00000100
     0002             (    cubix_i2c.asm):00031         PCF_STO         = %00000010
     0001             (    cubix_i2c.asm):00032         PCF_ACK         = %00000001
                      (    cubix_i2c.asm):00033         ;
     00C5             (    cubix_i2c.asm):00034         PCF_START_      = PCF_PIN|PCF_ES0|PCF_STA|PCF_ACK
     00C3             (    cubix_i2c.asm):00035         PCF_STOP_       = PCF_PIN|PCF_ES0|PCF_STO|PCF_ACK
                      (    cubix_i2c.asm):00036         ;PCF_REPSTART_   = PCF_ES0|PCF_STA|PCF_ACK
     00C1             (    cubix_i2c.asm):00037         PCF_IDLE_       = PCF_PIN|PCF_ES0|PCF_ACK
                      (    cubix_i2c.asm):00038         ;
                      (    cubix_i2c.asm):00039         ; STATUS REGISTER BITS
                      (    cubix_i2c.asm):00040         ;
                      (    cubix_i2c.asm):00041         ;PCF_PIN        =  %10000000
     0040             (    cubix_i2c.asm):00042         PCF_INI         = %01000000                       ; 1 if not initialized
     0020             (    cubix_i2c.asm):00043         PCF_STS         = %00100000
     0010             (    cubix_i2c.asm):00044         PCF_BER         = %00010000
     0008             (    cubix_i2c.asm):00045         PCF_AD0         = %00001000
     0008             (    cubix_i2c.asm):00046         PCF_LRB         = %00001000
     0004             (    cubix_i2c.asm):00047         PCF_AAS         = %00000100
     0002             (    cubix_i2c.asm):00048         PCF_LAB         = %00000010
     0001             (    cubix_i2c.asm):00049         PCF_BB          = %00000001
                      (    cubix_i2c.asm):00050         ;
                      (    cubix_i2c.asm):00051         ; THE PCF8584 TARGETS A TOP I2C CLOCK SPEED OF 90KHZ AND SUPPORTS DIVIDERS FOR
                      (    cubix_i2c.asm):00052         ; 3, 4.43, 6, 8 AND 12MHZ TO ACHEIVE THIS.
                      (    cubix_i2c.asm):00053         ;
                      (    cubix_i2c.asm):00054         ; +--------------------------------------------------------------------------------------------+
                      (    cubix_i2c.asm):00055         ; | div/clk |  2MHz |  4MHz  |  6MHz | 7.38Mhz |  10MHz | 12MHz |  16MHz | 18.432Mhz |  20MHz  |
                      (    cubix_i2c.asm):00056         ; +----------------------------------------------------------------------------------+---------+
                      (    cubix_i2c.asm):00057         ; |   3MHz  | 60Khz | 120Khz |       |         |        |       |        |           |         |
                      (    cubix_i2c.asm):00058         ; | 4.43MHz |       |  81Khz |       |         |        |       |        |           |         |
                      (    cubix_i2c.asm):00059         ; |   6MHz  |       |        | 90Khz | 110Khz  |        |       |        |           |         |
                      (    cubix_i2c.asm):00060         ; |   8MHz  |       |        |       |  83Khz  | 112Khz |       |        |           |         |
                      (    cubix_i2c.asm):00061         ; |  12MHz  |       |        |       |         |        | 90Khz | 120Khz |   138Khz  |  150Khz |
                      (    cubix_i2c.asm):00062         ; +----------------------------------------------------------------------------------+---------+
                      (    cubix_i2c.asm):00063         ;
                      (    cubix_i2c.asm):00064         ; CLOCK CHIP FREQUENCIES
                      (    cubix_i2c.asm):00065         ;
     0000             (    cubix_i2c.asm):00066         PCF_CLK3        = $00
     0010             (    cubix_i2c.asm):00067         PCF_CLK443      = $10
     0014             (    cubix_i2c.asm):00068         PCF_CLK6        = $14
     0018             (    cubix_i2c.asm):00069         PCF_CLK8        = $18
     001C             (    cubix_i2c.asm):00070         PCF_CLK12       = $1C
                      (    cubix_i2c.asm):00071         ;
                      (    cubix_i2c.asm):00072         ; TRANSMISSION FREQUENCIES
                      (    cubix_i2c.asm):00073         ;
     0000             (    cubix_i2c.asm):00074         PCF_TRNS90      = $00                             ;  90 kHz */
     0001             (    cubix_i2c.asm):00075         PCF_TRNS45      = $01                             ;  45 kHz */
     0002             (    cubix_i2c.asm):00076         PCF_TRNS11      = $02                             ;  11 kHz */
     0003             (    cubix_i2c.asm):00077         PCF_TRNS15      = $03                             ; 1.5 kHz */
                      (    cubix_i2c.asm):00078         ;
                      (    cubix_i2c.asm):00079         ; BELOW VARIABLES CONTROL PCF CLOCK DIVISOR PROGRAMMING
                      (    cubix_i2c.asm):00080         ; HARD-CODED FOR NOW
                      (    cubix_i2c.asm):00081         ;
     0018             (    cubix_i2c.asm):00082         PCF_CLK         = PCF_CLK8
     0000             (    cubix_i2c.asm):00083         PCF_TRNS        = PCF_TRNS90
                      (    cubix_i2c.asm):00084         ;
                      (    cubix_i2c.asm):00085         ; TIMEOUT AND DELAY VALUES (ARBITRARY)
                      (    cubix_i2c.asm):00086         ;
     FDE8             (    cubix_i2c.asm):00087         PCF_PINTO       = 65000
     FDE8             (    cubix_i2c.asm):00088         PCF_ACKTO       = 65000
     FDE8             (    cubix_i2c.asm):00089         PCF_BBTO        = 65000
     FDE8             (    cubix_i2c.asm):00090         PCF_LABDLY      = 65000
                      (    cubix_i2c.asm):00091         ;
                      (    cubix_i2c.asm):00092         ;
                      (    cubix_i2c.asm):00093         ;__PCF_INIT___________________________________________________________________________________________
                      (    cubix_i2c.asm):00094         ;
                      (    cubix_i2c.asm):00095         ;  FRONT PANEL INIT
                      (    cubix_i2c.asm):00096         ;____________________________________________________________________________________________________
                      (    cubix_i2c.asm):00097         ;
9456                  (    cubix_i2c.asm):00098         PCF_INIT:
9456 BD970D           (    cubix_i2c.asm):00099                 JSR     LFCR                              ; AND CRLF
9459 8E947C           (    cubix_i2c.asm):00100                 LDX     #PCFMESSAGE1
945C BD9721           (    cubix_i2c.asm):00101                 JSR     WRSTR                             ; DO PROMPT
945F CCDF56           (    cubix_i2c.asm):00102                 LDD     #PCF_BASE                         ; GET BASE PORT
9462 BD972D           (    cubix_i2c.asm):00103                 JSR     WRHEXW                            ; PRINT BASE PORT
9465 BD9719           (    cubix_i2c.asm):00104                 JSR     SPACE
9468 BD948D           (    cubix_i2c.asm):00105                 JSR     PCF_INITDEV
946B B694E1           (    cubix_i2c.asm):00106                 LDA     PCF_FAIL_FLAG
946E 8100             (    cubix_i2c.asm):00107                 CMPA    #$00
9470 2606             (    cubix_i2c.asm):00108                 BNE     >
9472 8E9654           (    cubix_i2c.asm):00109                 LDX     #PCF_PCFOK
9475 BD9721           (    cubix_i2c.asm):00110                 JSR     WRSTR
                      (    cubix_i2c.asm):00111         !
9478 BD970D           (    cubix_i2c.asm):00112                 JSR     LFCR                              ; AND CRLF
947B 39               (    cubix_i2c.asm):00113                 RTS                                       ; DONE
947C                  (    cubix_i2c.asm):00114         PCFMESSAGE1:
947C 493243205043463A (    cubix_i2c.asm):00115                 FCC     "I2C PCF:"
9484 0D0A             (    cubix_i2c.asm):00116                 FCB     $0D,$0A
9486 20494F3D307800   (    cubix_i2c.asm):00117                 FCN     " IO=0x"
                      (    cubix_i2c.asm):00118         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00119         ;
948D                  (    cubix_i2c.asm):00120         PCF_INITDEV:
948D 8680             (    cubix_i2c.asm):00121                 LDA     #PCF_PIN                          ; S1=80H: S0 SELECTED, SERIAL
948F B7DF57           (    cubix_i2c.asm):00122                 STA     PCF_RS1                           ; INTERFACE OFF
9492 12               (    cubix_i2c.asm):00123                 NOP
9493 B6DF57           (    cubix_i2c.asm):00124                 LDA     PCF_RS1                           ; CHECK TO SEE S1 NOW USED AS R/W
9496 847F             (    cubix_i2c.asm):00125                 ANDA    #$7F                              ; CTRL. PCF8584 DOES THAT WHEN ESO
9498 263E             (    cubix_i2c.asm):00126                 BNE     PCF_FAIL                          ; IS ZERO
                      (    cubix_i2c.asm):00127         ;
949A 8655             (    cubix_i2c.asm):00128                 LDA     #PCF_OWN                          ; LOAD OWN ADDRESS IN S0,
949C B7DF56           (    cubix_i2c.asm):00129                 STA     PCF_RS0                           ; EFFECTIVE ADDRESS IS (OWN <<1)
949F 12               (    cubix_i2c.asm):00130                 NOP
94A0 B6DF56           (    cubix_i2c.asm):00131                 LDA     PCF_RS0                           ; CHECK IT IS REALLY WRITTEN
94A3 8155             (    cubix_i2c.asm):00132                 CMPA    #PCF_OWN
94A5 10260161         (    cubix_i2c.asm):00133                 LBNE    PCF_SETERR
                      (    cubix_i2c.asm):00134         ;
94A9 86A0             (    cubix_i2c.asm):00135                 LDA     #PCF_PIN|PCF_ES1                  ; S1=0A0H
94AB B7DF57           (    cubix_i2c.asm):00136                 STA     PCF_RS1                           ; NEXT BYTE IN S2
94AE 12               (    cubix_i2c.asm):00137                 NOP
94AF B6DF57           (    cubix_i2c.asm):00138                 LDA     PCF_RS1
                      (    cubix_i2c.asm):00139         ;
94B2 8618             (    cubix_i2c.asm):00140                 LDA     #PCF_CLK|PCF_TRNS                 ; LOAD CLOCK REGISTER S2
94B4 B7DF56           (    cubix_i2c.asm):00141                 STA     PCF_RS0
94B7 12               (    cubix_i2c.asm):00142                 NOP
94B8 B6DF56           (    cubix_i2c.asm):00143                 LDA     PCF_RS0                           ; CHECK IT'S REALLY WRITTEN, ONLY
94BB 841F             (    cubix_i2c.asm):00144                 ANDA    #$1F                              ; THE LOWER 5 BITS MATTER
94BD 8118             (    cubix_i2c.asm):00145                 CMPA    #PCF_CLK|PCF_TRNS
94BF 1026014E         (    cubix_i2c.asm):00146                 LBNE    PCF_CLKERR
                      (    cubix_i2c.asm):00147         ;
94C3 86C1             (    cubix_i2c.asm):00148                 LDA     #PCF_IDLE_
94C5 B7DF57           (    cubix_i2c.asm):00149                 STA     PCF_RS1
94C8 12               (    cubix_i2c.asm):00150                 NOP
94C9 B6DF57           (    cubix_i2c.asm):00151                 LDA     PCF_RS1
94CC 8181             (    cubix_i2c.asm):00152                 CMPA    #PCF_PIN|PCF_BB
94CE 10260146         (    cubix_i2c.asm):00153                 LBNE    PCF_IDLERR
                      (    cubix_i2c.asm):00154         ;
94D2 8600             (    cubix_i2c.asm):00155                 LDA     #$00
94D4 B794E1           (    cubix_i2c.asm):00156                 STA     PCF_FAIL_FLAG
94D7 39               (    cubix_i2c.asm):00157                 RTS
                      (    cubix_i2c.asm):00158         ;
94D8                  (    cubix_i2c.asm):00159         PCF_FAIL:
94D8 BD9603           (    cubix_i2c.asm):00160                 JSR     PCF_INIERR
94DB 86FF             (    cubix_i2c.asm):00161                 LDA     #$FF
94DD B794E1           (    cubix_i2c.asm):00162                 STA     PCF_FAIL_FLAG
94E0 39               (    cubix_i2c.asm):00163                 RTS
                      (    cubix_i2c.asm):00164         ;
94E1                  (    cubix_i2c.asm):00165         PCF_FAIL_FLAG:
94E1 00               (    cubix_i2c.asm):00166                 FCB     0
                      (    cubix_i2c.asm):00167         ;
                      (    cubix_i2c.asm):00168         ;
                      (    cubix_i2c.asm):00169         ;--------------------------------------------------------------------------------
                      (    cubix_i2c.asm):00170         ;
                      (    cubix_i2c.asm):00171         ;       Y = COUNT
                      (    cubix_i2c.asm):00172         ;       A = Device Address/Return Status
                      (    cubix_i2c.asm):00173         ;   RETURN FF=ERROR
                      (    cubix_i2c.asm):00174         ;          00=SUCCESS
                      (    cubix_i2c.asm):00175         ;
94E2                  (    cubix_i2c.asm):00176         PCF_SENDBYTES:
94E2 B694E1           (    cubix_i2c.asm):00177                 LDA     PCF_FAIL_FLAG
94E5 8100             (    cubix_i2c.asm):00178                 CMPA    #$00
94E7 264E             (    cubix_i2c.asm):00179                 BNE     PCF_WERROR
94E9 BE02FA           (    cubix_i2c.asm):00180                 LDX     >PAGER_X
94EC 10BE02FC         (    cubix_i2c.asm):00181                 LDY     >PAGER_Y                          ; RESTORE 'Y'
94F0 FC02F8           (    cubix_i2c.asm):00182                 LDD     >PAGER_D                          ; RESTORE 'D'
94F3                  (    cubix_i2c.asm):00183         PCF_SENDBYTES_INTERNAL:
94F3 3432             (    cubix_i2c.asm):00184                 PSHS    A,X,Y
94F5 BD95E4           (    cubix_i2c.asm):00185                 JSR     PCF_WAIT_FOR_BB                   ; DO WE HAVE THE BUS?
94F8 8100             (    cubix_i2c.asm):00186                 CMPA    #$00
94FA 2708             (    cubix_i2c.asm):00187                 BEQ     PCF_WB1                           ; YES
94FC 3532             (    cubix_i2c.asm):00188                 PULS    A,X,Y
94FE 86FF             (    cubix_i2c.asm):00189                 LDA     #$FF
9500 B702F8           (    cubix_i2c.asm):00190                 STA     >PAGER_D                          ; STORE 'A'
9503 39               (    cubix_i2c.asm):00191                 RTS
9504                  (    cubix_i2c.asm):00192         PCF_WB1:
9504 3532             (    cubix_i2c.asm):00193                 PULS    A,X,Y
9506 48               (    cubix_i2c.asm):00194                 ASLA
9507 84FE             (    cubix_i2c.asm):00195                 ANDA    #$FE
9509 B7DF56           (    cubix_i2c.asm):00196                 STA     PCF_RS0                           ; send device address
950C 86C5             (    cubix_i2c.asm):00197                 LDA     #PCF_START_                       ; begin transmission
950E B7DF57           (    cubix_i2c.asm):00198                 STA     PCF_RS1
                      (    cubix_i2c.asm):00199         !
9511 BD95B5           (    cubix_i2c.asm):00200                 JSR     PCF_WAIT_FOR_PIN
9514 8100             (    cubix_i2c.asm):00201                 CMPA    #$00
9516 261F             (    cubix_i2c.asm):00202                 BNE     PCF_WERROR
9518 A680             (    cubix_i2c.asm):00203                 LDA     ,X+
951A B7DF56           (    cubix_i2c.asm):00204                 STA     PCF_RS0
951D 313F             (    cubix_i2c.asm):00205                 DEY
951F 108C0000         (    cubix_i2c.asm):00206                 CMPY    #$0000
9523 26EC             (    cubix_i2c.asm):00207                 BNE     <
9525 BD95B5           (    cubix_i2c.asm):00208                 JSR     PCF_WAIT_FOR_PIN
9528 8100             (    cubix_i2c.asm):00209                 CMPA    #$00
952A 260B             (    cubix_i2c.asm):00210                 BNE     PCF_WERROR
952C 86C3             (    cubix_i2c.asm):00211                 LDA     #PCF_STOP_                        ; end transmission
952E B7DF57           (    cubix_i2c.asm):00212                 STA     PCF_RS1
9531 8600             (    cubix_i2c.asm):00213                 LDA     #$00
9533 B702F8           (    cubix_i2c.asm):00214                 STA     >PAGER_D                          ; STORE 'A'
9536 39               (    cubix_i2c.asm):00215                 RTS
9537                  (    cubix_i2c.asm):00216         PCF_WERROR:
9537 86C3             (    cubix_i2c.asm):00217                 LDA     #PCF_STOP_                        ; end transmission
9539 B7DF57           (    cubix_i2c.asm):00218                 STA     PCF_RS1
953C 86FF             (    cubix_i2c.asm):00219                 LDA     #$FF
953E B702F8           (    cubix_i2c.asm):00220                 STA     >PAGER_D                          ; STORE 'A'
9541 39               (    cubix_i2c.asm):00221                 RTS
                      (    cubix_i2c.asm):00222         ;
                      (    cubix_i2c.asm):00223         ;--------------------------------------------------------------------------------
                      (    cubix_i2c.asm):00224         ;
                      (    cubix_i2c.asm):00225         ;       Y = COUNT
                      (    cubix_i2c.asm):00226         ;       A = Device Address/Return Status
                      (    cubix_i2c.asm):00227         ;   RETURN FF=ERROR
                      (    cubix_i2c.asm):00228         ;          00=SUCCESS
                      (    cubix_i2c.asm):00229         ;
9542                  (    cubix_i2c.asm):00230         PCF_READBYTES:
9542 B694E1           (    cubix_i2c.asm):00231                 LDA     PCF_FAIL_FLAG
9545 8100             (    cubix_i2c.asm):00232                 CMPA    #$00
9547 2661             (    cubix_i2c.asm):00233                 BNE     PCF_RERROR
9549 BE02FA           (    cubix_i2c.asm):00234                 LDX     >PAGER_X
954C 10BE02FC         (    cubix_i2c.asm):00235                 LDY     >PAGER_Y                          ; RESTORE 'Y'
9550 FC02F8           (    cubix_i2c.asm):00236                 LDD     >PAGER_D                          ; RESTORE 'D'
9553                  (    cubix_i2c.asm):00237         PCF_READBYTES_INTERNAL:
9553 48               (    cubix_i2c.asm):00238                 ASLA
9554 8A01             (    cubix_i2c.asm):00239                 ORA     #$01
9556 B7DF56           (    cubix_i2c.asm):00240                 STA     PCF_RS0                           ; send device address
9559 3432             (    cubix_i2c.asm):00241                 PSHS    A,X,Y
955B BD95E4           (    cubix_i2c.asm):00242                 JSR     PCF_WAIT_FOR_BB                   ; DO WE HAVE THE BUS?
955E 8100             (    cubix_i2c.asm):00243                 CMPA    #$00
9560 2708             (    cubix_i2c.asm):00244                 BEQ     PCF_RB1                           ; YES
9562 3532             (    cubix_i2c.asm):00245                 PULS    A,X,Y
9564 86FF             (    cubix_i2c.asm):00246                 LDA     #$FF
9566 B702F8           (    cubix_i2c.asm):00247                 STA     >PAGER_D                          ; STORE 'A'
9569 39               (    cubix_i2c.asm):00248                 RTS
956A                  (    cubix_i2c.asm):00249         PCF_RB1:
956A 3532             (    cubix_i2c.asm):00250                 PULS    A,X,Y
956C 86C5             (    cubix_i2c.asm):00251                 LDA     #PCF_START_                       ; begin rcv
956E B7DF57           (    cubix_i2c.asm):00252                 STA     PCF_RS1
9571 BD95B5           (    cubix_i2c.asm):00253                 JSR     PCF_WAIT_FOR_PIN
9574 B6DF56           (    cubix_i2c.asm):00254                 LDA     PCF_RS0
                      (    cubix_i2c.asm):00255         !
9577 BD95B5           (    cubix_i2c.asm):00256                 JSR     PCF_WAIT_FOR_PIN
957A 8100             (    cubix_i2c.asm):00257                 CMPA    #$00
957C 262C             (    cubix_i2c.asm):00258                 BNE     PCF_RERROR
957E 108C0001         (    cubix_i2c.asm):00259                 CMPY    #$0001
9582 2709             (    cubix_i2c.asm):00260                 BEQ     >
9584 B6DF56           (    cubix_i2c.asm):00261                 LDA     PCF_RS0
9587 A780             (    cubix_i2c.asm):00262                 STA     ,X+
9589 313F             (    cubix_i2c.asm):00263                 DEY
958B 20EA             (    cubix_i2c.asm):00264                 BRA     <
                      (    cubix_i2c.asm):00265         !
958D 8640             (    cubix_i2c.asm):00266                 LDA     #PCF_INI                          ; ack
958F B7DF57           (    cubix_i2c.asm):00267                 STA     PCF_RS1
9592 B6DF56           (    cubix_i2c.asm):00268                 LDA     PCF_RS0
9595 A780             (    cubix_i2c.asm):00269                 STA     ,X+
9597 BD95B5           (    cubix_i2c.asm):00270                 JSR     PCF_WAIT_FOR_PIN
959A 86C3             (    cubix_i2c.asm):00271                 LDA     #PCF_STOP_                        ; end RCV
959C B7DF57           (    cubix_i2c.asm):00272                 STA     PCF_RS1
959F B6DF56           (    cubix_i2c.asm):00273                 LDA     PCF_RS0
95A2 A780             (    cubix_i2c.asm):00274                 STA     ,X+
95A4 8600             (    cubix_i2c.asm):00275                 LDA     #$00
95A6 B702F8           (    cubix_i2c.asm):00276                 STA     >PAGER_D                          ; STORE 'A'
95A9 39               (    cubix_i2c.asm):00277                 RTS
95AA                  (    cubix_i2c.asm):00278         PCF_RERROR:
95AA 86C3             (    cubix_i2c.asm):00279                 LDA     #PCF_STOP_                        ; end RCV
95AC B7DF57           (    cubix_i2c.asm):00280                 STA     PCF_RS1
95AF 86FF             (    cubix_i2c.asm):00281                 LDA     #$FF
95B1 B702F8           (    cubix_i2c.asm):00282                 STA     >PAGER_D                          ; STORE 'A'
95B4 39               (    cubix_i2c.asm):00283                 RTS
                      (    cubix_i2c.asm):00284         ;
                      (    cubix_i2c.asm):00285         ;
                      (    cubix_i2c.asm):00286         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00287         ;
                      (    cubix_i2c.asm):00288         ; RETURN A=00/Z  IF SUCCESSFULL
                      (    cubix_i2c.asm):00289         ; RETURN A=FF/NZ IF TIMEOUT
                      (    cubix_i2c.asm):00290         ; RETURN A=01/NZ IF LOST ARBITRATION
                      (    cubix_i2c.asm):00291         ; PCF_STATUS HOLDS LAST PCF STATUS
                      (    cubix_i2c.asm):00292         ;
95B5                  (    cubix_i2c.asm):00293         PCF_WAIT_FOR_PIN:
95B5 3410             (    cubix_i2c.asm):00294                 PSHS    X
95B7 8EFDE8           (    cubix_i2c.asm):00295                 LDX     #PCF_PINTO                        ; SET TIMEOUT VALUE
95BA                  (    cubix_i2c.asm):00296         PCF_WFP0:
95BA B6DF57           (    cubix_i2c.asm):00297                 LDA     PCF_RS1                           ; GET BUS
95BD B795E3           (    cubix_i2c.asm):00298                 STA     PCF_STATUS                        ; STATUS
95C0 301F             (    cubix_i2c.asm):00299                 DEX                                       ; HAVE WE TIMED OUT
95C2 8C0000           (    cubix_i2c.asm):00300                 CMPX    #$00
95C5 2717             (    cubix_i2c.asm):00301                 BEQ     PCF_WFP1                          ; YES WE HAVE, GO ACTION IT
95C7 8480             (    cubix_i2c.asm):00302                 ANDA    #PCF_PIN                          ; IS TRANSMISSION COMPLETE?
95C9 8100             (    cubix_i2c.asm):00303                 CMPA    #$00
95CB 26ED             (    cubix_i2c.asm):00304                 BNE     PCF_WFP0                          ; KEEP ASKING IF NOT OR
95CD B695E3           (    cubix_i2c.asm):00305                 LDA     PCF_STATUS                        ; WE GOT PIN SO NOW
95D0 8408             (    cubix_i2c.asm):00306                 ANDA    #PCF_LRB                          ; CHECK WE HAVE
95D2 8100             (    cubix_i2c.asm):00307                 CMPA    #$00                              ; CHECK WE HAVE
95D4 2704             (    cubix_i2c.asm):00308                 BEQ     >                                 ; RECEIVED ACKNOWLEDGE
95D6 8601             (    cubix_i2c.asm):00309                 LDA     #$01
95D8 2006             (    cubix_i2c.asm):00310                 BRA     PCF_WFP2
                      (    cubix_i2c.asm):00311         !
95DA 8600             (    cubix_i2c.asm):00312                 LDA     #$00
95DC 2002             (    cubix_i2c.asm):00313                 BRA     PCF_WFP2
95DE                  (    cubix_i2c.asm):00314         PCF_WFP1:
95DE 86FF             (    cubix_i2c.asm):00315                 LDA     #$FF
95E0                  (    cubix_i2c.asm):00316         PCF_WFP2:
95E0 3510             (    cubix_i2c.asm):00317                 PULS    X                                 ; RET NZ, A=FF IF TIMEOUT
95E2 39               (    cubix_i2c.asm):00318                 RTS
                      (    cubix_i2c.asm):00319         ;
95E3                  (    cubix_i2c.asm):00320         PCF_STATUS
95E3 00               (    cubix_i2c.asm):00321                 FCB     $00
                      (    cubix_i2c.asm):00322         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00323         ;
                      (    cubix_i2c.asm):00324         ; POLL THE BUS BUSY BIT TO DETERMINE IF BUS IS FREE.
                      (    cubix_i2c.asm):00325         ; RETURN WITH A=00H/Z STATUS IF BUS IS FREE
                      (    cubix_i2c.asm):00326         ; RETURN WITH A=FFH/NZ STATUS IF BUS IS BUSY
                      (    cubix_i2c.asm):00327         ;
                      (    cubix_i2c.asm):00328         ; AFTER RESET THE BUS BUSY BIT WILL BE SET TO 1 I.E. NOT BUSY
                      (    cubix_i2c.asm):00329         ;
95E4                  (    cubix_i2c.asm):00330         PCF_WAIT_FOR_BB:
95E4 8EFDE8           (    cubix_i2c.asm):00331                 LDX     #PCF_BBTO
95E7                  (    cubix_i2c.asm):00332         PCF_WFBB0:
95E7 B6DF57           (    cubix_i2c.asm):00333                 LDA     PCF_RS1
95EA 8401             (    cubix_i2c.asm):00334                 ANDA    #PCF_BB
95EC 8101             (    cubix_i2c.asm):00335                 CMPA    #PCF_BB
95EE 2709             (    cubix_i2c.asm):00336                 BEQ     >
95F0 301F             (    cubix_i2c.asm):00337                 DEX
95F2 8100             (    cubix_i2c.asm):00338                 CMPA    #$00
95F4 26F1             (    cubix_i2c.asm):00339                 BNE     PCF_WFBB0                         ; REPEAT IF NOT TIMED OUT
95F6 86FF             (    cubix_i2c.asm):00340                 LDA     #$FF                              ; RET NZ IF TIMEOUT
95F8 39               (    cubix_i2c.asm):00341                 RTS
                      (    cubix_i2c.asm):00342         !
95F9 8600             (    cubix_i2c.asm):00343                 LDA     #$00
95FB 39               (    cubix_i2c.asm):00344                 RTS
                      (    cubix_i2c.asm):00345         ;
                      (    cubix_i2c.asm):00346         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00347         ; DISPLAY ERROR MESSAGES
                      (    cubix_i2c.asm):00348         ;
95FC                  (    cubix_i2c.asm):00349         PCF_RDERR:
95FC 3410             (    cubix_i2c.asm):00350                 PSHS    X
95FE 8E96BE           (    cubix_i2c.asm):00351                 LDX     #PCF_RDFAIL
9601 2046             (    cubix_i2c.asm):00352                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00353         ;
9603                  (    cubix_i2c.asm):00354         PCF_INIERR:
9603 3410             (    cubix_i2c.asm):00355                 PSHS    X
9605 8E965C           (    cubix_i2c.asm):00356                 LDX     #PCF_NOPCF
9608 203F             (    cubix_i2c.asm):00357                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00358         ;
960A                  (    cubix_i2c.asm):00359         PCF_SETERR:
960A 3410             (    cubix_i2c.asm):00360                 PSHS    X
960C 8E9668           (    cubix_i2c.asm):00361                 LDX     #PCF_WRTFAIL
960F 2038             (    cubix_i2c.asm):00362                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00363         ;
9611                  (    cubix_i2c.asm):00364         PCF_CLKERR:
9611 3410             (    cubix_i2c.asm):00365                 PSHS    X
9613 8E9681           (    cubix_i2c.asm):00366                 LDX     #PCF_CLKFAIL
9616 2031             (    cubix_i2c.asm):00367                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00368         ;
9618                  (    cubix_i2c.asm):00369         PCF_IDLERR:
9618 3410             (    cubix_i2c.asm):00370                 PSHS    X
961A 8E9690           (    cubix_i2c.asm):00371                 LDX     #PCF_IDLFAIL
961D 202A             (    cubix_i2c.asm):00372                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00373         ;
961F                  (    cubix_i2c.asm):00374         PCF_ACKERR:
961F 3410             (    cubix_i2c.asm):00375                 PSHS    X
9621 8E96A0           (    cubix_i2c.asm):00376                 LDX     #PCF_ACKFAIL
9624 2023             (    cubix_i2c.asm):00377                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00378         ;
9626                  (    cubix_i2c.asm):00379         PCF_RDBERR:
9626 3410             (    cubix_i2c.asm):00380                 PSHS    X
9628 8E96CA           (    cubix_i2c.asm):00381                 LDX     #PCF_RDBFAIL
962B 201C             (    cubix_i2c.asm):00382                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00383         ;
962D                  (    cubix_i2c.asm):00384         PCF_TOERR:
962D 3410             (    cubix_i2c.asm):00385                 PSHS    X
962F 8E96DB           (    cubix_i2c.asm):00386                 LDX     #PCF_TOFAIL
9632 2015             (    cubix_i2c.asm):00387                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00388         ;
9634                  (    cubix_i2c.asm):00389         PCF_ARBERR:
9634 3410             (    cubix_i2c.asm):00390                 PSHS    X
9636 8E96E9           (    cubix_i2c.asm):00391                 LDX     #PCF_ARBFAIL
9639 200E             (    cubix_i2c.asm):00392                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00393         ;
963B                  (    cubix_i2c.asm):00394         PCF_PINERR:
963B 3410             (    cubix_i2c.asm):00395                 PSHS    X
963D 8E96FA           (    cubix_i2c.asm):00396                 LDX     #PCF_PINFAIL
9640 2007             (    cubix_i2c.asm):00397                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00398         ;
9642                  (    cubix_i2c.asm):00399         PCF_BBERR:
9642 3410             (    cubix_i2c.asm):00400                 PSHS    X
9644 8E9703           (    cubix_i2c.asm):00401                 LDX     #PCF_BBFAIL
9647 2000             (    cubix_i2c.asm):00402                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00403         ;
9649                  (    cubix_i2c.asm):00404         PCF_PRTERR:
9649 BD9721           (    cubix_i2c.asm):00405                 JSR     WRSTR
964C 86FF             (    cubix_i2c.asm):00406                 LDA     #$FF
964E B794E1           (    cubix_i2c.asm):00407                 STA     PCF_FAIL_FLAG
9651 3510             (    cubix_i2c.asm):00408                 PULS    X
9653 39               (    cubix_i2c.asm):00409                 RTS
                      (    cubix_i2c.asm):00410         ;
                      (    cubix_i2c.asm):00411         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00412         ; DEBUG HELPER
                      (    cubix_i2c.asm):00413         ;
9654                  (    cubix_i2c.asm):00414         PCF_PCFOK:
9654 50524553454E5400 (    cubix_i2c.asm):00415                 FCN     "PRESENT"
965C                  (    cubix_i2c.asm):00416         PCF_NOPCF:
965C 4E4F542050524553 (    cubix_i2c.asm):00417                 FCN     "NOT PRESENT"
     454E5400
                      (    cubix_i2c.asm):00418         
9668                  (    cubix_i2c.asm):00419         PCF_WRTFAIL:
9668 53455454494E4720 (    cubix_i2c.asm):00420                 FCN     "SETTING DEVICE ID FAILED"
     4445564943452049
     44204641494C4544
     00
                      (    cubix_i2c.asm):00421         
9681                  (    cubix_i2c.asm):00422         PCF_CLKFAIL:
9681 434C4F434B205345 (    cubix_i2c.asm):00423                 FCN     "CLOCK SET FAIL"
     54204641494C00
                      (    cubix_i2c.asm):00424         
9690                  (    cubix_i2c.asm):00425         PCF_IDLFAIL:
9690 4255532049444C45 (    cubix_i2c.asm):00426                 FCN     "BUS IDLE FAILED"
     204641494C454400
                      (    cubix_i2c.asm):00427         
96A0                  (    cubix_i2c.asm):00428         PCF_ACKFAIL:
96A0 4641494C45442054 (    cubix_i2c.asm):00429                 FCN     "FAILED TO RECEIVE ACKNOWLEDGE"
     4F20524543454956
     452041434B4E4F57
     4C4544474500
                      (    cubix_i2c.asm):00430         
                      (    cubix_i2c.asm):00431         
                      (    cubix_i2c.asm):00432         
96BE                  (    cubix_i2c.asm):00433         PCF_RDFAIL:
96BE 5245414420464149 (    cubix_i2c.asm):00434                 FCN     "READ FAILED"
     4C454400
                      (    cubix_i2c.asm):00435         
96CA                  (    cubix_i2c.asm):00436         PCF_RDBFAIL:
96CA 5245414442595445 (    cubix_i2c.asm):00437                 FCN     "READBYTES FAILED"
     53204641494C4544
     00
                      (    cubix_i2c.asm):00438         
                      (    cubix_i2c.asm):00439         
96DB                  (    cubix_i2c.asm):00440         PCF_TOFAIL:
96DB 54494D454F555420 (    cubix_i2c.asm):00441                 FCN     "TIMEOUT ERROR"
     4552524F5200
                      (    cubix_i2c.asm):00442         
96E9                  (    cubix_i2c.asm):00443         PCF_ARBFAIL:
96E9 4C4F535420415242 (    cubix_i2c.asm):00444                 FCN     "LOST ARBITRATION"
     4954524154494F4E
     00
                      (    cubix_i2c.asm):00445         
                      (    cubix_i2c.asm):00446         
96FA                  (    cubix_i2c.asm):00447         PCF_PINFAIL:
96FA 50494E204641494C (    cubix_i2c.asm):00448                 FCN     "PIN FAIL"
     00
                      (    cubix_i2c.asm):00449         
9703                  (    cubix_i2c.asm):00450         PCF_BBFAIL:
9703 4255532042555359 (    cubix_i2c.asm):00451                 FCN     "BUS BUSY"
     00
                      (     cubixdrv.asm):00095         ;        INCLUDE cubix_esp32.asm
                      (     cubixdrv.asm):00096         ;        INCLUDE cubix_dsky.asm
                      (     cubixdrv.asm):00097         
                      (     cubixdrv.asm):00098         
                      (     cubixdrv.asm):00099         
970C                  (     cubixdrv.asm):00100         drv_noop:
970C 39               (     cubixdrv.asm):00101                 RTS
                      (     cubixdrv.asm):00102         
                      (     cubixdrv.asm):00103         ;*
                      (     cubixdrv.asm):00104         ;* OUTPUT LFCR TO CONSOLE
                      (     cubixdrv.asm):00105         ;*
970D                  (     cubixdrv.asm):00106         LFCR:
970D 3406             (     cubixdrv.asm):00107                 PSHS    a,b
970F 860A             (     cubixdrv.asm):00108                 LDA     #10
9711 8D40             (     cubixdrv.asm):00109                 BSR     PUTCHR
9713 860D             (     cubixdrv.asm):00110                 LDA     #13
9715 8D3C             (     cubixdrv.asm):00111                 BSR     PUTCHR
9717 3586             (     cubixdrv.asm):00112                 PULS    A,B,pc
9719                  (     cubixdrv.asm):00113         SPACE:
9719 3406             (     cubixdrv.asm):00114                 PSHS    a,b
971B 8620             (     cubixdrv.asm):00115                 LDA     #32
971D 8D34             (     cubixdrv.asm):00116                 BSR     PUTCHR
971F 3586             (     cubixdrv.asm):00117                 PULS    A,B,pc
                      (     cubixdrv.asm):00118         ;*
                      (     cubixdrv.asm):00119         ;* WRITE STRING(X) TO CONSOLE
                      (     cubixdrv.asm):00120         ;*
9721                  (     cubixdrv.asm):00121         WRSTR:
9721 3406             (     cubixdrv.asm):00122                 PSHS    A,B                               ;SAVE A
9723                  (     cubixdrv.asm):00123         WRST1:
9723 A680             (     cubixdrv.asm):00124                 LDA     ,X+                               ;GET CHAR
9725 2704             (     cubixdrv.asm):00125                 BEQ     WRST2                             ;END, QUIT
9727 8D2A             (     cubixdrv.asm):00126                 BSR     PUTCHR
9729 20F8             (     cubixdrv.asm):00127                 BRA     WRST1                             ;CONTINUE
972B                  (     cubixdrv.asm):00128         WRST2:
972B 3586             (     cubixdrv.asm):00129                 PULS    A,B,pc
                      (     cubixdrv.asm):00130         ;*
                      (     cubixdrv.asm):00131         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (     cubixdrv.asm):00132         ;*
972D                  (     cubixdrv.asm):00133         WRHEXW
972D 3406             (     cubixdrv.asm):00134                 PSHS    d
972F 8D08             (     cubixdrv.asm):00135                 BSR     WRHEX                             ;OUTPUT
9731 1E89             (     cubixdrv.asm):00136                 EXG     A,B                               ;SWAP
9733 8D04             (     cubixdrv.asm):00137                 BSR     WRHEX                             ;OUTPUT
9735 1E89             (     cubixdrv.asm):00138                 EXG     A,B                               ;BACK
9737 3586             (     cubixdrv.asm):00139                 PULS    d,pc
                      (     cubixdrv.asm):00140         
                      (     cubixdrv.asm):00141         ;*
                      (     cubixdrv.asm):00142         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (     cubixdrv.asm):00143         ;*
9739                  (     cubixdrv.asm):00144         WRHEX
9739 3406             (     cubixdrv.asm):00145                 PSHS    A,B                               ;SAVE IT
973B 44               (     cubixdrv.asm):00146                 LSRA                                      ;SHIFT
973C 44               (     cubixdrv.asm):00147                 LSRA                                      ;HIGH NIBBLE
973D 44               (     cubixdrv.asm):00148                 LSRA                                      ;INTO
973E 44               (     cubixdrv.asm):00149                 LSRA                                      ;LOW NIBBLE
973F 8D06             (     cubixdrv.asm):00150                 BSR     HOUT                              ;HIGH
9741 A6E4             (     cubixdrv.asm):00151                 LDA     ,S                                ;GET LOW
9743 8D02             (     cubixdrv.asm):00152                 BSR     HOUT                              ;OUTPUT
9745 3586             (     cubixdrv.asm):00153                 PULS    A,B,PC                            ;RESTORE IT
                      (     cubixdrv.asm):00154         ;* OUTPUT NIBBLE IN HEX
9747                  (     cubixdrv.asm):00155         HOUT
9747 840F             (     cubixdrv.asm):00156                 ANDA    #%00001111                        ;REMOVE HIGH
9749 8B30             (     cubixdrv.asm):00157                 ADDA    #'0'                              ;CONVERT
974B 8139             (     cubixdrv.asm):00158                 CMPA    #'9'                              ;OK?
974D 2304             (     cubixdrv.asm):00159                 BLS     PUTCHR                            ;OK, OUTPUT
974F 8B07             (     cubixdrv.asm):00160                 ADDA    #7                                ;CONVERT TO 'A'-'F'
9751 2000             (     cubixdrv.asm):00161                 BRA     PUTCHR                            ;OUTPUT
9753                  (     cubixdrv.asm):00162         PUTCHR:
9753 7E886C           (     cubixdrv.asm):00163                 JMP     WRSER1
9756 3404             (     cubixdrv.asm):00164                 PSHS    B
9758 3402             (     cubixdrv.asm):00165                 PSHS    A
975A 58               (     cubixdrv.asm):00166                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
975B 8600             (     cubixdrv.asm):00167                 LDA     #$00
975D F60100           (     cubixdrv.asm):00168                 LDB     CONSOLEDEVICE
9760 1F01             (     cubixdrv.asm):00169                 TFR     D,X
9762 EC898813         (     cubixdrv.asm):00170                 LDD     DISPATCHTABLE,X
9766 FD01FE           (     cubixdrv.asm):00171                 STD     farpointer
9769 3502             (     cubixdrv.asm):00172                 PULS    A
976B AD9F01FE         (     cubixdrv.asm):00173                 JSR     [farpointer]
976F 3504             (     cubixdrv.asm):00174                 PULS    B
9771 39               (     cubixdrv.asm):00175                 RTS
                      (     cubixdrv.asm):00176         
                      (     cubixdrv.asm):00177                 END

Symbol Table:
[ G] BANKED_DRIVER_DISPATCHER         8800
[ G] CFD_DRVSTAT                      0004
[ G] CFD_FMTTRK                       000D
[ G] CFD_MFM                          0040
[ G] CFD_READ                         0006
[ G] CFD_READDEL                      000C
[ G] CFD_READID                       000A
[ G] CFD_READTRK                      0002
[ G] CFD_RECAL                        0007
[ G] CFD_SCANEQ                       0011
[ G] CFD_SCANHIEQ                     001D
[ G] CFD_SCANLOEQ                     0019
[ G] CFD_SEEK                         000F
[ G] CFD_SENSEINT                     0008
[ G] CFD_SPECIFY                      0003
[ G] CFD_VERSION                      0010
[ G] CFD_WRITE                        0005
[ G] CFD_WRITEDEL                     0009
[ G] CHECKINT                         9114
[ G] CONSOLEDEVICE                    0100
[ G] CPU_CLK                          0008
[ G] CURRENTCYL                       01F9
[ G] CURRENTDEVICE                    01FB
[ G] CURRENTHEAD                      01F8
[ G] CURRENTSEC                       01FA
[ G] CURRENTSLICE                     01FC
[ G] DISKERROR                        01F7
[ G] DISPATCHTABLE                    8813
[ G] DOR_BR250                        000C
[ G] DOR_BR500                        000C
[ G] DOR_INIT                         000C
[ G] drv_noop                         970C
[ G] DSKEXIT                          8F96
[ G] DSKOP                            8F7F
[ G] DSKOPEND                         9028
[ G] DSKUNIT                          01E6
[ G] DSKY_ABORT                       8C07
[ G] DSKY_BEEP                        8DB3
[ G] DSKY_BEEP1                       8DC6
[ G] DSKY_BIN2SEG                     8C9A
[ G] DSKY_BIN2SEG1                    8C9D
[ G] DSKY_BLANK                       8D6C
[ G] DSKY_BLANK1                      8D73
[ G] DSKY_BUF                         01EA
[ G] DSKY_CMD                         8CF8
[ G] DSKY_CMD_CLK                     0020
[ G] DSKY_CMD_CLR                     00DF
[ G] DSKY_CMD_CLRX                    00D3
[ G] DSKY_CMD_FIFO                    0040
[ G] DSKY_CMD_RDSP                    0070
[ G] DSKY_CMD_WDSP                    0090
[ G] DSKY_DIN                         8D39
[ G] DSKY_DIN2                        8D3B
[ G] DSKY_DOUT                        8CFF
[ G] DSKY_DOUT2                       8D03
[ G] DSKY_DSPL                        8DDA
[ G] DSKY_DSPL_1                      8DF0
[ G] DSKY_GETBYTE                     8D8F
[ G] DSKY_GETKEY                      8C3C
[ G] DSKY_GETKEY1                     8C5C
[ G] DSKY_GETKEY1A                    8C6C
[ G] DSKY_GETKEY2                     8C71
[ G] DSKY_HEXBUF                      01F3
[ G] DSKY_HEXMAP                      8E23
[ G] DSKY_INIT                        8B8F
[ G] DSKY_INITA                       8BBC
[ G] DSKY_INITB                       8BD4
[ G] DSKY_KEYMAP                      8C7E
[ G] DSKY_PPI                         DF88
[ G] DSKY_PPI_IDLE                    0006
[ G] DSKY_PPIA                        DF88
[ G] DSKY_PPIB                        DF89
[ G] DSKY_PPIC                        DF8A
[ G] DSKY_PPIDETECT                   8C21
[ G] DSKY_PPIIDLE                     8E20
[ G] DSKY_PPIRD                       8E0D
[ G] DSKY_PPIRD1                      8E1E
[ G] DSKY_PPIWR                       8DF5
[ G] DSKY_PPIWR1                      8E0B
[ G] DSKY_PPIX                        DF8B
[ G] DSKY_PPIX_RD                     0092
[ G] DSKY_PPIX_VAL                    8E34
[ G] DSKY_PPIX_WR                     0082
[ G] DSKY_PREINIT                     8BD8
[ G] DSKY_PRESCL                      <<incomplete>>
[ G] DSKY_PRESENT                     8E35
[ G] DSKY_PUTBYTE                     8D7C
[ G] DSKY_PUTLED                      8D9E
[ G] DSKY_PUTLED_1                    8DA5
[ G] DSKY_REINIT                      8C08
[ G] DSKY_RESET                       8C10
[ G] DSKY_RESET1                      8C18
[ G] DSKY_RESET2                      8C20
[ G] DSKY_SHOW                        8CE1
[ G] DSKY_SHOW1                       8CE6
[ G] DSKY_ST                          8D34
[ G] DSKY_STAT                        8C2F
[ G] DSKY_STATA                       8C3B
[ G] DSKY_TEMP_VAL                    8E33
[ G] DSKYINITMSG                      8E36
[ G] DSKYMESSAGE1                     8E3E
[ G] DSKYMESSAGE2                     8E44
[ G] DSKYMESSAGE3                     8E4B
[ G] DSKYMESSAGE4                     8E54
[ G] ENDSENDINT                       9162
[ G] ERRCLR                           9131
[ G] farpointer                       01FE
[ G] FC_RESETFDC                      91B2
[ G] FCMD                             01E4
[ G] FD_DETECT                        9183
[ G] FD_DETECT1                       9197
[ G] FDC_DATA                         DF81
[ G] FDC_DCR                          DF85
[ G] FDC_DOR                          DF86
[ G] FDC_MSR                          DF80
[ G] FDC_RESET                        DF83
[ G] FDC_TC                           DF87
[ G] FDDELAY                          91D2
[ G] FDVDELAY                         91DB
[ G] FL_READ_SECTOR                   8EE7
[ G] FL_SETUP                         8E61
[ G] FL_WRITE_SECTOR                  8F33
[ G] FLERR                            01E5
[ G] FLOPPY_DETCT                     01E7
[ G] FLOPPY_RETRIES                   0006
[ G] FLOPPY_RETRIES1                  0002
[ G] FLRETRY                          01E8
[ G] FLRETRY1                         01E9
[ G] FMESSAGE1                        9203
[ G] FMESSAGE2                        9209
[ G] FMESSAGE3                        9210
[ G] FMESSAGE4                        921F
[ G] FP_GETSWITCH                     9277
[ G] FP_INIT                          9239
[ G] FP_INIT1                         925C
[ G] FP_PORT                          DF54
[ G] FP_SETLED                        9273
[ G] FPMESSAGE1                       9400
[ G] FPMESSAGE2                       9415
[ G] FPSD_INIT                        927B
[ G] FPSD_INIT_ERROR                  931D
[ G] FPSD_READ_SECTOR                 932D
[ G] FPSD_READ_SECTOR_ERROR           936F
[ G] FPSD_SCAN                        92B0
[ G] FPSD_SETUP_LBA                   93C9
[ G] FPSD_WRITE_SECTOR                9375
[ G] FPSD_WRITE_SECTOR_ERROR          93C3
[ G] FPSDDEVICE                       944D
[ G] FPSDFAILFLAG                     944C
[ G] FPSDMESSAGE1                     941F
[ G] FPSDMESSAGE2                     9426
[ G] FPSDMESSAGE3                     942F
[ G] FPSDMESSAGE6                     943C
[ G] FPSDSENDADDRESS                  944E
[ G] FPSDSENDINFO                     9454
[ G] FPSDSENDREAD                     9453
[ G] FUNCTION_DISPATCHER              8800
[ G] GETDSKUNIT                       91EB
[ G] GFDATA                           9163
[ G] GFDATA1                          9182
[ G] GWRR_POLL                        8F93
[ G] HOUT                             9747
[ G] HSTBUF                           0300
[ G] I2C_ADDRESS                      932C
[ G] IDE_ABORT                        88BD
[ G] IDE_INITA                        88DF
[ G] IDE_PPIDETECT                    8983
[ G] IDE_PRINT_INFO                   88C6
[ G] IDE_READ                         8A8C
[ G] IDE_READ_BUFFER                  8A51
[ G] IDE_READ_INFO                    8924
[ G] IDE_READ_INFO_ABORT              8971
[ G] IDE_READ_INFO_OK                 897D
[ G] IDE_READ_NO_SETUP                8A8F
[ G] IDE_READ_SECTOR                  8991
[ G] IDE_READ_SECTOR_1                8996
[ G] IDE_READ_SECTOR_ERROR            89B1
[ G] IDE_SETUP_LBA                    8B31
[ G] IDE_WAIT_DRQ                     8A23
[ G] IDE_WAIT_DRQ1                    8A2D
[ G] IDE_WAIT_DRQ2                    8A4D
[ G] IDE_WAIT_DRQ3                    8A4F
[ G] IDE_WAIT_DRQE                    8A48
[ G] IDE_WAIT_NOT_BUSY                89FC
[ G] IDE_WAIT_NOT_BUSY1               8A06
[ G] IDE_WAIT_NOT_BUSY2               8A1E
[ G] IDE_WAIT_NOT_BUSY3               8A20
[ G] IDE_WRITE                        8AB5
[ G] IDE_WRITE_BUFFER                 8A6D
[ G] IDE_WRITE_SECTOR                 89B7
[ G] IDE_WRITE_SECTOR_ERROR           89DC
[ G] IDEBUFRD                         8A55
[ G] IDEBUFWT                         8A71
[ G] KY_0                             0000
[ G] KY_1                             0001
[ G] KY_2                             0002
[ G] KY_3                             0003
[ G] KY_4                             0004
[ G] KY_5                             0005
[ G] KY_6                             0006
[ G] KY_7                             0007
[ G] KY_8                             0008
[ G] KY_9                             0009
[ G] KY_A                             000A
[ G] KY_B                             000B
[ G] KY_BK                            0011
[ G] KY_BO                            0017
[ G] KY_C                             000C
[ G] KY_CL                            0012
[ G] KY_D                             000D
[ G] KY_DE                            0014
[ G] KY_E                             000E
[ G] KY_EN                            0013
[ G] KY_EX                            0015
[ G] KY_F                             000F
[ G] KY_F1                            0021
[ G] KY_F2                            0020
[ G] KY_F3                            0019
[ G] KY_F4                            0018
[ G] KY_FW                            0010
[ G] KY_GO                            0016
[ G] LFCR                             970D
[ G] MD_PAGERA                        0200
[ G] MESSAGE1                         8AF0
[ G] MESSAGE2                         8AF8
[ G] MESSAGE3                         8AFF
[ G] MESSAGE4                         8B0C
[ G] MESSAGE5                         8B1D
[ G] MESSAGE6                         8B2E
[ G] PAGER_D                          02F8
[ G] PAGER_S                          02FE
[ G] PAGER_STACK                      02F5
[ G] PAGER_U                          02F6
[ G] PAGER_X                          02FA
[ G] PAGER_Y                          02FC
[ G] PCF_AAS                          0004
[ G] PCF_ACK                          0001
[ G] PCF_ACKERR                       961F
[ G] PCF_ACKFAIL                      96A0
[ G] PCF_ACKTO                        FDE8
[ G] PCF_AD0                          0008
[ G] PCF_ARBERR                       9634
[ G] PCF_ARBFAIL                      96E9
[ G] PCF_BASE                         DF56
[ G] PCF_BB                           0001
[ G] PCF_BBERR                        9642
[ G] PCF_BBFAIL                       9703
[ G] PCF_BBTO                         FDE8
[ G] PCF_BER                          0010
[ G] PCF_CLK                          0018
[ G] PCF_CLK12                        001C
[ G] PCF_CLK3                         0000
[ G] PCF_CLK443                       0010
[ G] PCF_CLK6                         0014
[ G] PCF_CLK8                         0018
[ G] PCF_CLKERR                       9611
[ G] PCF_CLKFAIL                      9681
[ G] PCF_EN1                          0008
[ G] PCF_ES0                          0040
[ G] PCF_ES1                          0020
[ G] PCF_ES2                          0010
[ G] PCF_FAIL                         94D8
[ G] PCF_FAIL_FLAG                    94E1
[ G] PCF_ID                           00AA
[ G] PCF_IDLE_                        00C1
[ G] PCF_IDLERR                       9618
[ G] PCF_IDLFAIL                      9690
[ G] PCF_INI                          0040
[ G] PCF_INIERR                       9603
[ G] PCF_INIT                         9456
[ G] PCF_INITDEV                      948D
[ G] PCF_LAB                          0002
[ G] PCF_LABDLY                       FDE8
[ G] PCF_LRB                          0008
[ G] PCF_NOPCF                        965C
[ G] PCF_OWN                          0055
[ G] PCF_PCFOK                        9654
[ G] PCF_PIN                          0080
[ G] PCF_PINERR                       963B
[ G] PCF_PINFAIL                      96FA
[ G] PCF_PINTO                        FDE8
[ G] PCF_PRTERR                       9649
[ G] PCF_RB1                          956A
[ G] PCF_RDBERR                       9626
[ G] PCF_RDBFAIL                      96CA
[ G] PCF_RDERR                        95FC
[ G] PCF_RDFAIL                       96BE
[ G] PCF_READBYTES                    9542
[ G] PCF_READBYTES_INTERNAL           9553
[ G] PCF_RERROR                       95AA
[ G] PCF_RS0                          DF56
[ G] PCF_RS1                          DF57
[ G] PCF_SENDBYTES                    94E2
[ G] PCF_SENDBYTES_INTERNAL           94F3
[ G] PCF_SETERR                       960A
[ G] PCF_STA                          0004
[ G] PCF_START_                       00C5
[ G] PCF_STATUS                       95E3
[ G] PCF_STO                          0002
[ G] PCF_STOP_                        00C3
[ G] PCF_STS                          0020
[ G] PCF_TOERR                        962D
[ G] PCF_TOFAIL                       96DB
[ G] PCF_TRNS                         0000
[ G] PCF_TRNS11                       0002
[ G] PCF_TRNS15                       0003
[ G] PCF_TRNS45                       0001
[ G] PCF_TRNS90                       0000
[ G] PCF_WAIT_FOR_BB                  95E4
[ G] PCF_WAIT_FOR_PIN                 95B5
[ G] PCF_WB1                          9504
[ G] PCF_WERROR                       9537
[ G] PCF_WFBB0                        95E7
[ G] PCF_WFP0                         95BA
[ G] PCF_WFP1                         95DE
[ G] PCF_WFP2                         95E0
[ G] PCF_WRTFAIL                      9668
[ G] PCFMESSAGE1                      947C
[ G] PFDATA                           90BC
[ G] PFDATAS                          90F5
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       8895
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        DF88
[ G] PPIDE_PROBE                      88E3
[ G] PPIDE_PROBE_FAIL                 8921
[ G] PPIDE_PROBE_SUCCESS              8923
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      89E2
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       DF8A
[ G] PPIDECOMMAND                     8892
[ G] PPIDEHI                          DF89
[ G] PPIDELO                          DF88
[ G] PPIDELOTMP                       8891
[ G] PPIDEPPIC                        DF8B
[ G] PPIDETIMEOUT                     8893
[ G] PPRD_IDE_8255                    0092
[ G] PPWR_IDE_8255                    0080
[ G] PUTCHR                           9753
[ G] RDD_POLL                         9009
[ G] RDS1                             9010
[ G] RDS1A                            9019
[ G] RDSER1                           8879
[ G] READFL1                          8F02
[ G] READFLDONE                       8F30
[ G] RECAL                            9092
[ G] RESUL3                           9034
[ G] RST_DLY                          89EB
[ G] SENDINT                          9149
[ G] SERIALINIT                       886B
[ G] SET_PPI_RD                       8AD4
[ G] SET_PPI_WR                       8AE2
[ G] SETTRACK                         9063
[ G] SETTRK1                          9075
[ G] SETTRKEXIT                       90BB
[ G] SNDFDWR                          8F9E
[ G] SPACE                            9719
[ G] ST0                              01E3
[ G] TMPSTORAGE                       9202
[ G] UART0                            DF58
[ G] UART1                            DF59
[ G] UART2                            DF5A
[ G] UART3                            DF5B
[ G] UART4                            DF5C
[ G] UART5                            DF5D
[ G] UART6                            DF5E
[ G] UART7                            DF5F
[ G] WAINT                            90A7
[ G] WRF1                             90C2
[ G] WRF1S                            90F7
[ G] WRF2                             90EF
[ G] WRF2S                            910E
[ G] WRHEX                            9739
[ G] WRHEXW                           972D
[ G] WRITEFL1                         8F4E
[ G] WRITEFLDONE                      8F7C
[ G] WRR_POLL                         9041
[ G] WRS1                             9048
[ G] WRS3                             9060
[ G] WRSER1                           886C
[ G] WRST1                            9723
[ G] WRST2                            972B
[ G] WRSTR                            9721
