                      (     cubixdrv.asm):00001         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00002         ;
                      (     cubixdrv.asm):00003         ;       Duodyne Cubix banked driver code
                      (     cubixdrv.asm):00004         ;
                      (     cubixdrv.asm):00005         ;  DWERNER 1/20/2024    Initial
                      (     cubixdrv.asm):00006         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00007         
                      (     cubixdrv.asm):00008         ;*
                      (     cubixdrv.asm):00009                 INCLUDE cubix_values.asm
                      ( cubix_values.asm):00001         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00002         ;
                      ( cubix_values.asm):00003         ;       Nhyodyne Cubix System storage locations
                      ( cubix_values.asm):00004         ;
                      ( cubix_values.asm):00005         ;  DWERNER 10/15/2023   Initial
                      ( cubix_values.asm):00006         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00007         
     0200             ( cubix_values.asm):00008         MD_PAGERA       = $0200                           ; PAGE DRIVER ADDRESS
     02F5             ( cubix_values.asm):00009         PAGER_STACK     = $02F5
     02F6             ( cubix_values.asm):00010         PAGER_U         = $02F6
     02F8             ( cubix_values.asm):00011         PAGER_D         = $02F8
     02FA             ( cubix_values.asm):00012         PAGER_X         = $02FA
     02FC             ( cubix_values.asm):00013         PAGER_Y         = $02FC
     02FE             ( cubix_values.asm):00014         PAGER_S         = $02FE
     0100             ( cubix_values.asm):00015         CONSOLEDEVICE   = $0100                           ; (BYTE)
     01E3             ( cubix_values.asm):00016         ST0             = $01E3                           ; (BYTE)
     01E4             ( cubix_values.asm):00017         FCMD            = $01E4                           ; (BYTE)
     01E5             ( cubix_values.asm):00018         FLERR           = $01E5                           ; (BYTE)
     01E6             ( cubix_values.asm):00019         DSKUNIT         = $01E6                           ; (BYTE)
     01E7             ( cubix_values.asm):00020         FLOPPY_DETCT    = $01E7                           ; (BYTE)
     01E8             ( cubix_values.asm):00021         FLRETRY         = $01E8                           ; (BYTE)
     01E9             ( cubix_values.asm):00022         FLRETRY1        = $01E9                           ; (BYTE)
     01EA             ( cubix_values.asm):00023         DSKY_BUF        = $01EA                           ; (8 BYTES)
     01F3             ( cubix_values.asm):00024         DSKY_HEXBUF     = $01F3                           ; (4 BYTES)
     01F7             ( cubix_values.asm):00025         DISKERROR       = $01F7                           ; (BYTE)
     01F8             ( cubix_values.asm):00026         CURRENTHEAD     = $01F8                           ; (BYTE)
     01F9             ( cubix_values.asm):00027         CURRENTCYL      = $01F9                           ; (BYTE)
     01FA             ( cubix_values.asm):00028         CURRENTSEC      = $01FA                           ; (BYTE)
     01FB             ( cubix_values.asm):00029         CURRENTDEVICE   = $01FB                           ; (BYTE)
     01FC             ( cubix_values.asm):00030         CURRENTSLICE    = $01FC                           ; (WORD)
     01FE             ( cubix_values.asm):00031         farpointer      = $01FE                           ; (WORD)                      ;
     0300             ( cubix_values.asm):00032         HSTBUF          = $0300
                      ( cubix_values.asm):00033         
     8800             ( cubix_values.asm):00034         BANKED_DRIVER_DISPATCHER = $8800
                      (     cubixdrv.asm):00010         ;*
                      (     cubixdrv.asm):00011         
                      (     cubixdrv.asm):00012                 ORG     $8800
                      (     cubixdrv.asm):00013         
                      (     cubixdrv.asm):00014         ;__DISPATCHER________________________________________________________________________________________
                      (     cubixdrv.asm):00015         ;
                      (     cubixdrv.asm):00016         ;  Function dispatcher
                      (     cubixdrv.asm):00017         ;  function to call is located in "farfunct"
                      (     cubixdrv.asm):00018         ;____________________________________________________________________________________________________
                      (     cubixdrv.asm):00019         ;
8800                  (     cubixdrv.asm):00020         FUNCTION_DISPATCHER:
8800 58               (     cubixdrv.asm):00021                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
8801 8600             (     cubixdrv.asm):00022                 LDA     #$00
8803 1F01             (     cubixdrv.asm):00023                 TFR     D,X
8805 EC898813         (     cubixdrv.asm):00024                 LDD     DISPATCHTABLE,X
8809 FD01FE           (     cubixdrv.asm):00025                 STD     farpointer
880C FC02F8           (     cubixdrv.asm):00026                 LDD     >PAGER_D                          ; RESTORE 'D'
880F 6E9F01FE         (     cubixdrv.asm):00027                 JMP     [farpointer]
                      (     cubixdrv.asm):00028         
                      (     cubixdrv.asm):00029         
8813                  (     cubixdrv.asm):00030         DISPATCHTABLE:
8813 887E             (     cubixdrv.asm):00031                 .WORD   WRSER1                            ; FUNCTION 00 - WRITE SERIAL PORT
8815 888B             (     cubixdrv.asm):00032                 .WORD   RDSER1                            ; FUNCTION 01 - READ SERIAL PORT
8817 8873             (     cubixdrv.asm):00033                 .WORD   SERIALINIT                        ; FUNCTION 02 - SERIAL PORT INIT
                      (     cubixdrv.asm):00034         
8819 991A             (     cubixdrv.asm):00035                 .WORD   drv_noop                          ; FUNCTION 03 - WRITE VIDEO
881B 991A             (     cubixdrv.asm):00036                 .WORD   drv_noop                          ; FUNCTION 04 - READ KEYBOARD
881D 991A             (     cubixdrv.asm):00037                 .WORD   drv_noop                          ; FUNCTION 05 - INIT INTERFACE
                      (     cubixdrv.asm):00038         
881F 991A             (     cubixdrv.asm):00039                 .WORD   drv_noop                          ; FUNCTION 06
8821 991A             (     cubixdrv.asm):00040                 .WORD   drv_noop                          ; FUNCTION 07
8823 991A             (     cubixdrv.asm):00041                 .WORD   drv_noop                          ; FUNCTION 08
                      (     cubixdrv.asm):00042         
8825 991A             (     cubixdrv.asm):00043                 .WORD   drv_noop                          ; FUNCTION 09
8827 991A             (     cubixdrv.asm):00044                 .WORD   drv_noop                          ; FUNCTION 10
8829 991A             (     cubixdrv.asm):00045                 .WORD   drv_noop                          ; FUNCTION 11
                      (     cubixdrv.asm):00046         
882B 991A             (     cubixdrv.asm):00047                 .WORD   drv_noop                          ; FUNCTION 12
882D 991A             (     cubixdrv.asm):00048                 .WORD   drv_noop                          ; FUNCTION 13
882F 991A             (     cubixdrv.asm):00049                 .WORD   drv_noop                          ; FUNCTION 14
                      (     cubixdrv.asm):00050         
8831 991A             (     cubixdrv.asm):00051                 .WORD   drv_noop                          ; FUNCTION 15 - called during OS init
8833 991A             (     cubixdrv.asm):00052                 .WORD   drv_noop                          ; FUNCTION 16 - read a sector from drive
8835 991A             (     cubixdrv.asm):00053                 .WORD   drv_noop                          ; FUNCTION 17 - write a sector to drive
                      (     cubixdrv.asm):00054         ;
8837 8E73             (     cubixdrv.asm):00055                 .WORD   FL_SETUP                          ; FUNCTION 18 - init floppy device
8839 8EF9             (     cubixdrv.asm):00056                 .WORD   FL_READ_SECTOR                    ; FUNCTION 19 - read a sector from floppy device
883B 8F45             (     cubixdrv.asm):00057                 .WORD   FL_WRITE_SECTOR                   ; FUNCTION 20 - write a sector to floppy device
                      (     cubixdrv.asm):00058         ;
883D 88A7             (     cubixdrv.asm):00059                 .WORD   PPIDE_INIT                        ; FUNCTION 21 - init PPIDE device
883F 89A3             (     cubixdrv.asm):00060                 .WORD   IDE_READ_SECTOR                   ; FUNCTION 22 - read a sector from PPIDE device
8841 89C9             (     cubixdrv.asm):00061                 .WORD   IDE_WRITE_SECTOR                  ; FUNCTION 23 - write a sector to PPIDE device
                      (     cubixdrv.asm):00062         ;
8843 9293             (     cubixdrv.asm):00063                 .WORD   FPSD_INIT                         ; FUNCTION 24 - init PPIDE device
8845 9345             (     cubixdrv.asm):00064                 .WORD   FPSD_READ_SECTOR                  ; FUNCTION 25 - read a sector from PPIDE device
8847 938D             (     cubixdrv.asm):00065                 .WORD   FPSD_WRITE_SECTOR                 ; FUNCTION 26 - write a sector to PPIDE device
                      (     cubixdrv.asm):00066         ;
8849 8BA1             (     cubixdrv.asm):00067                 .WORD   DSKY_INIT                         ; FUNCTION 27 -
884B 8CF3             (     cubixdrv.asm):00068                 .WORD   DSKY_SHOW                         ; FUNCTION 28 -
884D 8CAC             (     cubixdrv.asm):00069                 .WORD   DSKY_BIN2SEG                      ; FUNCTION 29 -
884F 8C22             (     cubixdrv.asm):00070                 .WORD   DSKY_RESET                        ; FUNCTION 30 -
8851 8C41             (     cubixdrv.asm):00071                 .WORD   DSKY_STAT                         ; FUNCTION 31 -
8853 8C4E             (     cubixdrv.asm):00072                 .WORD   DSKY_GETKEY                       ; FUNCTION 32 -
8855 8DC5             (     cubixdrv.asm):00073                 .WORD   DSKY_BEEP                         ; FUNCTION 33 -
8857 8DEC             (     cubixdrv.asm):00074                 .WORD   DSKY_DSPL                         ; FUNCTION 34 -
8859 8DB0             (     cubixdrv.asm):00075                 .WORD   DSKY_PUTLED                       ; FUNCTION 35 -
885B 8D7E             (     cubixdrv.asm):00076                 .WORD   DSKY_BLANK                        ; FUNCTION 36 -
885D 924B             (     cubixdrv.asm):00077                 .WORD   FP_INIT                           ; FUNCTION 37 -
885F 9285             (     cubixdrv.asm):00078                 .WORD   FP_SETLED                         ; FUNCTION 38 -
8861 928C             (     cubixdrv.asm):00079                 .WORD   FP_GETSWITCH                      ; FUNCTION 39 -
8863 9664             (     cubixdrv.asm):00080                 .WORD   PCF_INIT                          ; FUNCTION 40 -
8865 9750             (     cubixdrv.asm):00081                 .WORD   PCF_READBYTES                     ; FUNCTION 41 -
8867 96F0             (     cubixdrv.asm):00082                 .WORD   PCF_SENDBYTES                     ; FUNCTION 42 -
8869 969B             (     cubixdrv.asm):00083                 .WORD   PCF_INITDEV                       ; FUNCTION 43 -
886B 9418             (     cubixdrv.asm):00084                 .WORD   FPDIS_INIT                        ; FUNCTION 44 - Init Front Panel Display
886D 9469             (     cubixdrv.asm):00085                 .WORD   FPDIS_CLEAR                       ; FUNCTION 45 - Clear Front Panel Display
886F 9489             (     cubixdrv.asm):00086                 .WORD   FPDIS_SETXY                       ; FUNCTION 46 - SET XY ON Front Panel Display
8871 94AE             (     cubixdrv.asm):00087                 .WORD   FPDIS_OUTCH                       ; FUNCTION 47 - Output char on Front Panel Display
                      (     cubixdrv.asm):00088         ;
                      (     cubixdrv.asm):00089         
                      (     cubixdrv.asm):00090         
                      (     cubixdrv.asm):00091         ;__DRIVERS___________________________________________________________________________________________
                      (     cubixdrv.asm):00092         ;
                      (     cubixdrv.asm):00093                 INCLUDE cubix_serial.asm
                      ( cubix_serial.asm):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00002         ;
                      ( cubix_serial.asm):00003         ;       CUBIX serial drivers for 6809 IO card
                      ( cubix_serial.asm):00004         ;
                      ( cubix_serial.asm):00005         ;       Entry points:
                      ( cubix_serial.asm):00006         ;               SERIALINIT  - called during OS init
                      ( cubix_serial.asm):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00009         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00010         ;
                      ( cubix_serial.asm):00011         ;*
                      ( cubix_serial.asm):00012         ;*        HARDWARE I/O ADDRESSES
                      ( cubix_serial.asm):00013         ;*
                      ( cubix_serial.asm):00014         ; UART 16C550 SERIAL
     DF58             ( cubix_serial.asm):00015         UART0           EQU $DF58                         ; DATA IN/OUT
     DF59             ( cubix_serial.asm):00016         UART1           EQU $DF59                         ; CHECK RX
     DF5A             ( cubix_serial.asm):00017         UART2           EQU $DF5A                         ; INTERRUPTS
     DF5B             ( cubix_serial.asm):00018         UART3           EQU $DF5B                         ; LINE CONTROL
     DF5C             ( cubix_serial.asm):00019         UART4           EQU $DF5C                         ; MODEM CONTROL
     DF5D             ( cubix_serial.asm):00020         UART5           EQU $DF5D                         ; LINE STATUS
     DF5E             ( cubix_serial.asm):00021         UART6           EQU $DF5E                         ; MODEM STATUS
     DF5F             ( cubix_serial.asm):00022         UART7           EQU $DF5F                         ; SCRATCH REG.
                      ( cubix_serial.asm):00023         
                      ( cubix_serial.asm):00024         
                      ( cubix_serial.asm):00025         ;__SERIALINIT____________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00026         ;
                      ( cubix_serial.asm):00027         ;       INITIALIZE SERIAL PORTS
                      ( cubix_serial.asm):00028         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00029         ;
8873                  ( cubix_serial.asm):00030         SERIALINIT:
                      ( cubix_serial.asm):00031         ; these are all set by Bios prior to activating the 6809 card.
                      ( cubix_serial.asm):00032         ;       LDA             #$80            ;
                      ( cubix_serial.asm):00033         ;       STA             UART3           ; SET DLAB FLAG
                      ( cubix_serial.asm):00034         ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      ( cubix_serial.asm):00035         ;       STA             UART0           ; save baud rate
                      ( cubix_serial.asm):00036         ;       LDA             #00                     ;
                      ( cubix_serial.asm):00037         ;       STA             UART1           ;
                      ( cubix_serial.asm):00038         ;       LDA             #0F                     ;
                      ( cubix_serial.asm):00039         ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
8873 8681             ( cubix_serial.asm):00040                 LDA     #$81                              ; Enable FIFOs
8875 B7DF5A           ( cubix_serial.asm):00041                 STA     UART2                             ;
8878 862B             ( cubix_serial.asm):00042                 LDA     #$2B                              ; Enable Auto Flow Control $0B to disable AFC
887A B7DF5C           ( cubix_serial.asm):00043                 STA     UART4
887D 39               ( cubix_serial.asm):00044                 RTS
                      ( cubix_serial.asm):00045         
                      ( cubix_serial.asm):00046         
                      ( cubix_serial.asm):00047         
                      ( cubix_serial.asm):00048         ;__WRSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00049         ;
                      ( cubix_serial.asm):00050         ;       WRITE CHARACTER(A) TO UART
                      ( cubix_serial.asm):00051         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00052         ;
887E                  ( cubix_serial.asm):00053         WRSER1
                      ( cubix_serial.asm):00054         !
887E F6DF5D           ( cubix_serial.asm):00055                 LDB     UART5                             ; READ LINE STATUS REGISTER
8881 C420             ( cubix_serial.asm):00056                 ANDB    #$20                              ; TEST IF UART IS READY TO SEND (BIT 5)
8883 C100             ( cubix_serial.asm):00057                 CMPB    #$00
8885 27F7             ( cubix_serial.asm):00058                 BEQ     <                                 ; IF NOT REPEAT
8887 B7DF58           ( cubix_serial.asm):00059                 STA     UART0                             ; THEN WRITE THE CHAR TO UART
888A 39               ( cubix_serial.asm):00060                 RTS
                      ( cubix_serial.asm):00061         
                      ( cubix_serial.asm):00062         ;__RDSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00063         ;
                      ( cubix_serial.asm):00064         ;       READ CHARACTER FROM UART TO (A)
                      ( cubix_serial.asm):00065         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00066         ;
888B                  ( cubix_serial.asm):00067         RDSER1
888B B6DF5D           ( cubix_serial.asm):00068                 LDA     UART5                             ; READ LINE STATUS REGISTER
888E 8401             ( cubix_serial.asm):00069                 ANDA    #$01                              ; TEST IF DATA IN RECEIVE BUFFER
8890 8100             ( cubix_serial.asm):00070                 CMPA    #$00
8892 2709             ( cubix_serial.asm):00071                 BEQ     >                                 ; NO DATA
8894 B6DF58           ( cubix_serial.asm):00072                 LDA     UART0                             ; THEN READ THE CHAR FROM THE UART
8897 B702F8           ( cubix_serial.asm):00073                 STA     >PAGER_D                          ; SAVE 'D'
889A 1A04             ( cubix_serial.asm):00074                 ORCC    #%00000100                        ; SET 'Z'
889C 39               ( cubix_serial.asm):00075                 RTS
                      ( cubix_serial.asm):00076         !
889D 86FF             ( cubix_serial.asm):00077                 LDA     #$FF                              ;
889F B702F8           ( cubix_serial.asm):00078                 STA     >PAGER_D                          ; SAVE 'D'
88A2 39               ( cubix_serial.asm):00079                 RTS                                       ;
                      (     cubixdrv.asm):00094                 INCLUDE cubix_ide.asm
                      (    cubix_ide.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00002         ;
                      (    cubix_ide.asm):00003         ;       CUBIX IDE disk drivers for Duodyne Disk IO
                      (    cubix_ide.asm):00004         ;
                      (    cubix_ide.asm):00005         ;       Entry points:
                      (    cubix_ide.asm):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (    cubix_ide.asm):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00009         ;________________________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00010         ;
     DF88             (    cubix_ide.asm):00011         PPIDE_PPI       = $DF88                           ; PORT A
                      (    cubix_ide.asm):00012         ;
     DF88             (    cubix_ide.asm):00013         PPIDELO         = PPIDE_PPI+0                     ; LSB
     DF89             (    cubix_ide.asm):00014         PPIDEHI         = PPIDE_PPI+1                     ; MSB
     DF8A             (    cubix_ide.asm):00015         PPIDECNTRL      = PPIDE_PPI+2                     ; CONTROL SIGNALS
     DF8B             (    cubix_ide.asm):00016         PPIDEPPIC       = PPIDE_PPI+3                     ; CONTROL BYTE PPI 82C55
                      (    cubix_ide.asm):00017         
     0001             (    cubix_ide.asm):00018         PPIDE_A0_LINE   = $01                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (    cubix_ide.asm):00019         PPIDE_A1_LINE   = $02                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (    cubix_ide.asm):00020         PPIDE_A2_LINE   = $04                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (    cubix_ide.asm):00021         PPIDE_CS0_LINE  = $08                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (    cubix_ide.asm):00022         PPIDE_CS1_LINE  = $10                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (    cubix_ide.asm):00023         PPIDE_WR_LINE   = $20                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (    cubix_ide.asm):00024         PPIDE_RD_LINE   = $40                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (    cubix_ide.asm):00025         PPIDE_RST_LINE  = $80                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (    cubix_ide.asm):00026         
     0008             (    cubix_ide.asm):00027         PPIDE_DATA      = PPIDE_CS0_LINE
     0009             (    cubix_ide.asm):00028         PPIDE_ERR       = PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (    cubix_ide.asm):00029         PPIDE_SEC_CNT   = PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (    cubix_ide.asm):00030         PPIDE_LBALOW    = PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (    cubix_ide.asm):00031         PPIDE_LBAMID    = PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (    cubix_ide.asm):00032         PPIDE_LBAHI     = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (    cubix_ide.asm):00033         PPIDE_DEVICE    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (    cubix_ide.asm):00034         PPIDE_COMMAND   = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (    cubix_ide.asm):00035         PPIDE_STATUS    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (    cubix_ide.asm):00036         PPIDE_CONTROL   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (    cubix_ide.asm):00037         PPIDE_ASTATUS   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (    cubix_ide.asm):00038         
                      (    cubix_ide.asm):00039         
                      (    cubix_ide.asm):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (    cubix_ide.asm):00041         PPIDE_CMD_RECAL = $10
     0020             (    cubix_ide.asm):00042         PPIDE_CMD_READ  = $20
     0030             (    cubix_ide.asm):00043         PPIDE_CMD_WRITE = $30
     0091             (    cubix_ide.asm):00044         PPIDE_CMD_INIT  = $91
     00EC             (    cubix_ide.asm):00045         PPIDE_CMD_ID    = $EC
     00E0             (    cubix_ide.asm):00046         PPIDE_CMD_SPINDOWN = $E0
     00E1             (    cubix_ide.asm):00047         PPIDE_CMD_SPINUP = $E1
                      (    cubix_ide.asm):00048         
                      (    cubix_ide.asm):00049         
     0092             (    cubix_ide.asm):00050         PPRD_IDE_8255   = %10010010                       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (    cubix_ide.asm):00051         PPWR_IDE_8255   = %10000000                       ;ALL THREE PORTS OUTPUT
                      (    cubix_ide.asm):00052         
88A3                  (    cubix_ide.asm):00053         PPIDELOTMP:
88A3 00               (    cubix_ide.asm):00054                 .BYTE   0
88A4                  (    cubix_ide.asm):00055         PPIDECOMMAND:
88A4 00               (    cubix_ide.asm):00056                 .BYTE   0
88A5                  (    cubix_ide.asm):00057         PPIDETIMEOUT:
88A5 0000             (    cubix_ide.asm):00058                 .BYTE   $00,$00
                      (    cubix_ide.asm):00059         
                      (    cubix_ide.asm):00060         
                      (    cubix_ide.asm):00061         
                      (    cubix_ide.asm):00062         ;__PPIDE_INIT_________________________________________________________________________________________
                      (    cubix_ide.asm):00063         ;
                      (    cubix_ide.asm):00064         ;  INIT AND DISPLAY IDE INFO
                      (    cubix_ide.asm):00065         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00066         ;
88A7                  (    cubix_ide.asm):00067         PPIDE_INIT:
88A7 BD991B           (    cubix_ide.asm):00068                 JSR     LFCR                              ; AND CRLF
88AA 8E8B02           (    cubix_ide.asm):00069                 LDX     #MESSAGE1
88AD BD992F           (    cubix_ide.asm):00070                 JSR     WRSTR                             ; DO PROMPT
88B0 BD991B           (    cubix_ide.asm):00071                 JSR     LFCR                              ; AND CRLF
88B3 BD8995           (    cubix_ide.asm):00072                 JSR     IDE_PPIDETECT                     ; TEST FOR PPI HARDWARE
88B6 2617             (    cubix_ide.asm):00073                 BNE     IDE_ABORT                         ; BAIL OUT IF NOT THERE
                      (    cubix_ide.asm):00074         ;
88B8 8E8B0A           (    cubix_ide.asm):00075                 LDX     #MESSAGE2
88BB BD992F           (    cubix_ide.asm):00076                 JSR     WRSTR                             ; DO PROMPT
88BE CCDF88           (    cubix_ide.asm):00077                 LDD     #PPIDE_PPI                        ; GET BASE PORT
88C1 BD993B           (    cubix_ide.asm):00078                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_ide.asm):00079         ;
88C4 BD89F4           (    cubix_ide.asm):00080                 JSR     PPIDE_RESET                       ; RESET THE BUS
88C7 BD88F5           (    cubix_ide.asm):00081                 JSR     PPIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
88CA 2503             (    cubix_ide.asm):00082                 BCS     IDE_ABORT
88CC 7E88D8           (    cubix_ide.asm):00083                 JMP     IDE_PRINT_INFO
88CF                  (    cubix_ide.asm):00084         IDE_ABORT:
88CF 8E8B11           (    cubix_ide.asm):00085                 LDX     #MESSAGE3
88D2 BD992F           (    cubix_ide.asm):00086                 JSR     WRSTR                             ; DO PROMPT
88D5 7E88F1           (    cubix_ide.asm):00087                 JMP     IDE_INITA
88D8                  (    cubix_ide.asm):00088         IDE_PRINT_INFO:
88D8 BD991B           (    cubix_ide.asm):00089                 JSR     LFCR                              ; AND CRLF
88DB 8E8B1E           (    cubix_ide.asm):00090                 LDX     #MESSAGE4
88DE BD992F           (    cubix_ide.asm):00091                 JSR     WRSTR                             ; DO PROMPT
88E1 8600             (    cubix_ide.asm):00092                 LDA     #$00
88E3 BD8936           (    cubix_ide.asm):00093                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
88E6 8E8B2F           (    cubix_ide.asm):00094                 LDX     #MESSAGE5
88E9 BD992F           (    cubix_ide.asm):00095                 JSR     WRSTR                             ; DO PROMPT
88EC 8601             (    cubix_ide.asm):00096                 LDA     #$01
88EE BD8936           (    cubix_ide.asm):00097                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
88F1                  (    cubix_ide.asm):00098         IDE_INITA:
88F1 BD991B           (    cubix_ide.asm):00099                 JSR     LFCR                              ; AND CRLF
88F4 39               (    cubix_ide.asm):00100                 RTS                                       ; DONE
                      (    cubix_ide.asm):00101         ;
                      (    cubix_ide.asm):00102         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (    cubix_ide.asm):00103         ;
                      (    cubix_ide.asm):00104         ;  PROBE FOR IDE HARDWARE
                      (    cubix_ide.asm):00105         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00106         ;
88F5                  (    cubix_ide.asm):00107         PPIDE_PROBE:
                      (    cubix_ide.asm):00108         ;
                      (    cubix_ide.asm):00109         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (    cubix_ide.asm):00110         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (    cubix_ide.asm):00111         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (    cubix_ide.asm):00112         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (    cubix_ide.asm):00113         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (    cubix_ide.asm):00114         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (    cubix_ide.asm):00115         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (    cubix_ide.asm):00116         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (    cubix_ide.asm):00117         
88F5 8600             (    cubix_ide.asm):00118                 LDA     #$00
88F7 B7DF88           (    cubix_ide.asm):00119                 STA     PPIDELO                           ; PPI PORT A, DATALO
88FA BD8A0E           (    cubix_ide.asm):00120                 JSR     IDE_WAIT_NOT_BUSY                 ; WAIT FOR BUSY TO CLEAR
88FD 2534             (    cubix_ide.asm):00121                 BCS     PPIDE_PROBE_FAIL                  ; IF TIMEOUT, REPORT NO IDE PRESENT
88FF 860F             (    cubix_ide.asm):00122                 LDA     #PPIDE_STATUS                     ; GET STATUS
8901 BD8A9E           (    cubix_ide.asm):00123                 JSR     IDE_READ
8904 C440             (    cubix_ide.asm):00124                 ANDB    #%01000000
8906 C100             (    cubix_ide.asm):00125                 CMPB    #$00
8908 2729             (    cubix_ide.asm):00126                 BEQ     PPIDE_PROBE_FAIL                  ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (    cubix_ide.asm):00127         
                      (    cubix_ide.asm):00128         ; CHECK SIGNATURE
890A 860A             (    cubix_ide.asm):00129                 LDA     #PPIDE_SEC_CNT
890C BD8A9E           (    cubix_ide.asm):00130                 JSR     IDE_READ
890F C101             (    cubix_ide.asm):00131                 CMPB    #$01
8911 2620             (    cubix_ide.asm):00132                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
8913 860B             (    cubix_ide.asm):00133                 LDA     #PPIDE_LBALOW
8915 BD8A9E           (    cubix_ide.asm):00134                 JSR     IDE_READ
8918 C101             (    cubix_ide.asm):00135                 CMPB    #$01
891A 2617             (    cubix_ide.asm):00136                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
891C 860C             (    cubix_ide.asm):00137                 LDA     #PPIDE_LBAMID
891E BD8A9E           (    cubix_ide.asm):00138                 JSR     IDE_READ
8921 C100             (    cubix_ide.asm):00139                 CMPB    #$00
8923 260E             (    cubix_ide.asm):00140                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
8925 860D             (    cubix_ide.asm):00141                 LDA     #PPIDE_LBAHI
8927 BD8A9E           (    cubix_ide.asm):00142                 JSR     IDE_READ
892A C100             (    cubix_ide.asm):00143                 CMPB    #$00
892C 2605             (    cubix_ide.asm):00144                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
892E 1CFE             (    cubix_ide.asm):00145                 CLC
8930 7E8935           (    cubix_ide.asm):00146                 JMP     PPIDE_PROBE_SUCCESS
8933                  (    cubix_ide.asm):00147         PPIDE_PROBE_FAIL:
                      (    cubix_ide.asm):00148         
8933 1A01             (    cubix_ide.asm):00149                 SEC
8935                  (    cubix_ide.asm):00150         PPIDE_PROBE_SUCCESS:
8935 39               (    cubix_ide.asm):00151                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (    cubix_ide.asm):00152         
                      (    cubix_ide.asm):00153         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (    cubix_ide.asm):00154         ;*
                      (    cubix_ide.asm):00155         ;*  READ IDE INFORMATION
                      (    cubix_ide.asm):00156         ;*      CARRY SET ON ERROR
                      (    cubix_ide.asm):00157         ;*      A=MST/SLV
                      (    cubix_ide.asm):00158         ;*____________________________________________________________________________________________________
8936                  (    cubix_ide.asm):00159         IDE_READ_INFO:
                      (    cubix_ide.asm):00160         ; SET DRIVE BIT
8936 C60E             (    cubix_ide.asm):00161                 LDB     #PPIDE_DEVICE
8938 F788A4           (    cubix_ide.asm):00162                 STB     PPIDECOMMAND
893B 8401             (    cubix_ide.asm):00163                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
893D 48               (    cubix_ide.asm):00164                 ASLA                                      ; SHIFT 4
893E 48               (    cubix_ide.asm):00165                 ASLA                                      ;
893F 48               (    cubix_ide.asm):00166                 ASLA                                      ;
8940 48               (    cubix_ide.asm):00167                 ASLA                                      ;
8941 8AE0             (    cubix_ide.asm):00168                 ORA     #$E0                              ; E0=MST  F0=SLV
8943 1F89             (    cubix_ide.asm):00169                 TFR     A,B
8945 8600             (    cubix_ide.asm):00170                 LDA     #$00
8947 BD8AC7           (    cubix_ide.asm):00171                 JSR     IDE_WRITE
894A BD8A0E           (    cubix_ide.asm):00172                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
894D 2534             (    cubix_ide.asm):00173                 BCS     IDE_READ_INFO_ABORT
894F 860F             (    cubix_ide.asm):00174                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
8951 B788A4           (    cubix_ide.asm):00175                 STA     PPIDECOMMAND
8954 CC00EC           (    cubix_ide.asm):00176                 LDD     #PPIDE_CMD_ID
8957 BD8AC7           (    cubix_ide.asm):00177                 JSR     IDE_WRITE                         ;ASK THE DRIVE TO READ IT
895A BD8A35           (    cubix_ide.asm):00178                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
895D 2524             (    cubix_ide.asm):00179                 BCS     IDE_READ_INFO_ABORT
895F BD8A63           (    cubix_ide.asm):00180                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
8962 8E8B40           (    cubix_ide.asm):00181                 LDX     #MESSAGE6
8965 BD992F           (    cubix_ide.asm):00182                 JSR     WRSTR
8968 B6037B           (    cubix_ide.asm):00183                 LDA     HSTBUF+123
896B BD9947           (    cubix_ide.asm):00184                 JSR     WRHEX
896E B6037A           (    cubix_ide.asm):00185                 LDA     HSTBUF+122
8971 BD9947           (    cubix_ide.asm):00186                 JSR     WRHEX
8974 B60379           (    cubix_ide.asm):00187                 LDA     HSTBUF+121
8977 BD9947           (    cubix_ide.asm):00188                 JSR     WRHEX
897A B60378           (    cubix_ide.asm):00189                 LDA     HSTBUF+120
897D BD9947           (    cubix_ide.asm):00190                 JSR     WRHEX
8980 7E898F           (    cubix_ide.asm):00191                 JMP     IDE_READ_INFO_OK
8983                  (    cubix_ide.asm):00192         IDE_READ_INFO_ABORT:
8983 8E8B11           (    cubix_ide.asm):00193                 LDX     #MESSAGE3
8986 BD992F           (    cubix_ide.asm):00194                 JSR     WRSTR                             ;DO PROMPT
8989 BD991B           (    cubix_ide.asm):00195                 JSR     LFCR                              ;AND CRLF
898C 1A01             (    cubix_ide.asm):00196                 SEC
898E 39               (    cubix_ide.asm):00197                 RTS                                       ;
898F                  (    cubix_ide.asm):00198         IDE_READ_INFO_OK:
898F BD991B           (    cubix_ide.asm):00199                 JSR     LFCR                              ; AND CRLF
8992 1CFE             (    cubix_ide.asm):00200                 CLC
8994 39               (    cubix_ide.asm):00201                 RTS
                      (    cubix_ide.asm):00202         
                      (    cubix_ide.asm):00203         
                      (    cubix_ide.asm):00204         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (    cubix_ide.asm):00205         ;
                      (    cubix_ide.asm):00206         ;  PROBE FOR PPI HARDWARE
                      (    cubix_ide.asm):00207         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00208         ;
8995                  (    cubix_ide.asm):00209         IDE_PPIDETECT:
                      (    cubix_ide.asm):00210         ;
                      (    cubix_ide.asm):00211         ; TEST FOR PPI EXISTENCE
                      (    cubix_ide.asm):00212         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (    cubix_ide.asm):00213         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (    cubix_ide.asm):00214         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (    cubix_ide.asm):00215         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (    cubix_ide.asm):00216         ; INTERFERE WITH THE VALUE BEING READ.
8995 BD8AF4           (    cubix_ide.asm):00217                 JSR     SET_PPI_WR
                      (    cubix_ide.asm):00218         ;
8998 8600             (    cubix_ide.asm):00219                 LDA     #$00                              ; VALUE ZERO
899A B7DF88           (    cubix_ide.asm):00220                 STA     PPIDELO                           ; PUSH VALUE TO PORT
899D B6DF88           (    cubix_ide.asm):00221                 LDA     PPIDELO                           ; GET PORT VALUE
89A0 8100             (    cubix_ide.asm):00222                 CMPA    #$00
89A2 39               (    cubix_ide.asm):00223                 RTS                                       ; AND RETURN
                      (    cubix_ide.asm):00224         ;
                      (    cubix_ide.asm):00225         
                      (    cubix_ide.asm):00226         
                      (    cubix_ide.asm):00227         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (    cubix_ide.asm):00228         ;*
                      (    cubix_ide.asm):00229         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (    cubix_ide.asm):00230         ;*
                      (    cubix_ide.asm):00231         ;*____________________________________________________________________________________________________
89A3                  (    cubix_ide.asm):00232         IDE_READ_SECTOR:
89A3 BD8A0E           (    cubix_ide.asm):00233                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
89A6 251B             (    cubix_ide.asm):00234                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
89A8                  (    cubix_ide.asm):00235         IDE_READ_SECTOR_1:
89A8 BD8B43           (    cubix_ide.asm):00236                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
89AB 860F             (    cubix_ide.asm):00237                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
89AD B788A4           (    cubix_ide.asm):00238                 STA     PPIDECOMMAND
89B0 CC0020           (    cubix_ide.asm):00239                 LDD     #PPIDE_CMD_READ
89B3 BD8AC7           (    cubix_ide.asm):00240                 JSR     IDE_WRITE                         ; ASK THE DRIVE TO READ IT
89B6 BD8A35           (    cubix_ide.asm):00241                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
89B9 2508             (    cubix_ide.asm):00242                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
89BB BD8A63           (    cubix_ide.asm):00243                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
89BE 4F               (    cubix_ide.asm):00244                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
89BF B701F7           (    cubix_ide.asm):00245                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89C2 39               (    cubix_ide.asm):00246                 RTS
89C3                  (    cubix_ide.asm):00247         IDE_READ_SECTOR_ERROR:
89C3 8602             (    cubix_ide.asm):00248                 LDA     #$02                              ; SET ERROR CONDITION
89C5 B701F7           (    cubix_ide.asm):00249                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89C8 39               (    cubix_ide.asm):00250                 RTS
                      (    cubix_ide.asm):00251         
                      (    cubix_ide.asm):00252         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (    cubix_ide.asm):00253         ;*
                      (    cubix_ide.asm):00254         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (    cubix_ide.asm):00255         ;*
                      (    cubix_ide.asm):00256         ;*____________________________________________________________________________________________________
89C9                  (    cubix_ide.asm):00257         IDE_WRITE_SECTOR:
89C9 BD8A0E           (    cubix_ide.asm):00258                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
89CC 2520             (    cubix_ide.asm):00259                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
89CE BD8B43           (    cubix_ide.asm):00260                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
89D1 860F             (    cubix_ide.asm):00261                 LDA     #PPIDE_COMMAND
89D3 B788A4           (    cubix_ide.asm):00262                 STA     PPIDECOMMAND
89D6 CC0030           (    cubix_ide.asm):00263                 LDD     #PPIDE_CMD_WRITE
89D9 BD8AC7           (    cubix_ide.asm):00264                 JSR     IDE_WRITE                         ;TELL DRIVE TO WRITE A SECTOR
89DC BD8A35           (    cubix_ide.asm):00265                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
89DF 250D             (    cubix_ide.asm):00266                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
89E1 BD8A7F           (    cubix_ide.asm):00267                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
89E4 BD8A0E           (    cubix_ide.asm):00268                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
89E7 2505             (    cubix_ide.asm):00269                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
89E9 4F               (    cubix_ide.asm):00270                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
89EA B701F7           (    cubix_ide.asm):00271                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89ED 39               (    cubix_ide.asm):00272                 RTS
89EE                  (    cubix_ide.asm):00273         IDE_WRITE_SECTOR_ERROR:
89EE 8602             (    cubix_ide.asm):00274                 LDA     #$02
89F0 B701F7           (    cubix_ide.asm):00275                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89F3 39               (    cubix_ide.asm):00276                 RTS
                      (    cubix_ide.asm):00277         
                      (    cubix_ide.asm):00278         ;*__PPIDE_RESET____________________________________________________________________________________
                      (    cubix_ide.asm):00279         ;*
                      (    cubix_ide.asm):00280         ;*  SOFT RESET IDE CHANNEL
                      (    cubix_ide.asm):00281         ;*
                      (    cubix_ide.asm):00282         ;*____________________________________________________________________________________________________
89F4                  (    cubix_ide.asm):00283         PPIDE_RESET:
                      (    cubix_ide.asm):00284         ;       PRTDBG "IDE RESET$"
89F4 8680             (    cubix_ide.asm):00285                 LDA     #PPIDE_RST_LINE
89F6 B7DF8A           (    cubix_ide.asm):00286                 STA     PPIDECNTRL                        ; ASSERT RST LINE ON IDE INTERFACE
                      (    cubix_ide.asm):00287         
89F9 108E0100         (    cubix_ide.asm):00288                 LDY     #$0100
                      (    cubix_ide.asm):00289         ;       PRTDBG "IDE RESET DELAY$"
89FD                  (    cubix_ide.asm):00290         RST_DLY:
89FD 313F             (    cubix_ide.asm):00291                 DEY
89FF 108C0000         (    cubix_ide.asm):00292                 CMPY    #$0000
8A03 26F8             (    cubix_ide.asm):00293                 BNE     RST_DLY
8A05 8600             (    cubix_ide.asm):00294                 LDA     #$00
8A07 B7DF8A           (    cubix_ide.asm):00295                 STA     PPIDECNTRL                        ; DEASSERT RST LINE ON IDE INTERFACE
                      (    cubix_ide.asm):00296         
                      (    cubix_ide.asm):00297         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISDa:a BEING
                      (    cubix_ide.asm):00298         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
8A0A BD8C1A           (    cubix_ide.asm):00299                 JSR     DSKY_REINIT
                      (    cubix_ide.asm):00300         
8A0D 39               (    cubix_ide.asm):00301                 RTS
                      (    cubix_ide.asm):00302         
                      (    cubix_ide.asm):00303         
                      (    cubix_ide.asm):00304         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (    cubix_ide.asm):00305         ;*
                      (    cubix_ide.asm):00306         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (    cubix_ide.asm):00307         ;*
                      (    cubix_ide.asm):00308         ;*____________________________________________________________________________________________________
8A0E                  (    cubix_ide.asm):00309         IDE_WAIT_NOT_BUSY:
8A0E 3406             (    cubix_ide.asm):00310                 PSHS    A,B
8A10 8600             (    cubix_ide.asm):00311                 LDA     #$00
8A12 B788A5           (    cubix_ide.asm):00312                 STA     PPIDETIMEOUT
8A15 B788A6           (    cubix_ide.asm):00313                 STA     PPIDETIMEOUT+1
8A18                  (    cubix_ide.asm):00314         IDE_WAIT_NOT_BUSY1:
8A18 860F             (    cubix_ide.asm):00315                 LDA     #PPIDE_STATUS                     ;WAIT FOR RDY BIT TO BE SET
8A1A BD8A9E           (    cubix_ide.asm):00316                 JSR     IDE_READ
8A1D C480             (    cubix_ide.asm):00317                 ANDB    #$80
8A1F 270F             (    cubix_ide.asm):00318                 BEQ     IDE_WAIT_NOT_BUSY2
8A21 7C88A5           (    cubix_ide.asm):00319                 INC     PPIDETIMEOUT
8A24 26F2             (    cubix_ide.asm):00320                 BNE     IDE_WAIT_NOT_BUSY1
8A26 7C88A6           (    cubix_ide.asm):00321                 INC     PPIDETIMEOUT+1
8A29 26ED             (    cubix_ide.asm):00322                 BNE     IDE_WAIT_NOT_BUSY1
8A2B 1A01             (    cubix_ide.asm):00323                 SEC
8A2D 7E8A32           (    cubix_ide.asm):00324                 JMP     IDE_WAIT_NOT_BUSY3
8A30                  (    cubix_ide.asm):00325         IDE_WAIT_NOT_BUSY2:
8A30 1CFE             (    cubix_ide.asm):00326                 CLC
8A32                  (    cubix_ide.asm):00327         IDE_WAIT_NOT_BUSY3:
8A32 3586             (    cubix_ide.asm):00328                 PULS    PC,A,B
8A34 39               (    cubix_ide.asm):00329                 RTS
                      (    cubix_ide.asm):00330         
                      (    cubix_ide.asm):00331         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (    cubix_ide.asm):00332         ;*
                      (    cubix_ide.asm):00333         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (    cubix_ide.asm):00334         ;*
                      (    cubix_ide.asm):00335         ;*____________________________________________________________________________________________________
8A35                  (    cubix_ide.asm):00336         IDE_WAIT_DRQ:
8A35 3426             (    cubix_ide.asm):00337                 PSHS    A,B,Y
8A37 8600             (    cubix_ide.asm):00338                 LDA     #$00
8A39 B788A5           (    cubix_ide.asm):00339                 STA     PPIDETIMEOUT
8A3C B788A6           (    cubix_ide.asm):00340                 STA     PPIDETIMEOUT+1
8A3F                  (    cubix_ide.asm):00341         IDE_WAIT_DRQ1:
8A3F 860F             (    cubix_ide.asm):00342                 LDA     #PPIDE_STATUS                     ;WAIT FOR DRQ BIT TO BE SET
8A41 BD8A9E           (    cubix_ide.asm):00343                 JSR     IDE_READ
8A44 C488             (    cubix_ide.asm):00344                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
8A46 C108             (    cubix_ide.asm):00345                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
8A48 2715             (    cubix_ide.asm):00346                 BEQ     IDE_WAIT_DRQ2
8A4A C401             (    cubix_ide.asm):00347                 ANDB    #%00000001                        ; IS ERROR?
8A4C C101             (    cubix_ide.asm):00348                 CMPB    #%00000001                        ;
8A4E 270A             (    cubix_ide.asm):00349                 BEQ     IDE_WAIT_DRQE
8A50 7C88A5           (    cubix_ide.asm):00350                 INC     PPIDETIMEOUT
8A53 26EA             (    cubix_ide.asm):00351                 BNE     IDE_WAIT_DRQ1
8A55 7C88A6           (    cubix_ide.asm):00352                 INC     PPIDETIMEOUT+1
8A58 26E5             (    cubix_ide.asm):00353                 BNE     IDE_WAIT_DRQ1
8A5A                  (    cubix_ide.asm):00354         IDE_WAIT_DRQE:
8A5A 1A01             (    cubix_ide.asm):00355                 SEC
8A5C 7E8A61           (    cubix_ide.asm):00356                 JMP     IDE_WAIT_DRQ3
8A5F                  (    cubix_ide.asm):00357         IDE_WAIT_DRQ2:
8A5F 1CFE             (    cubix_ide.asm):00358                 CLC
8A61                  (    cubix_ide.asm):00359         IDE_WAIT_DRQ3:
8A61 35A6             (    cubix_ide.asm):00360                 PULS    PC,A,B,Y
                      (    cubix_ide.asm):00361         
                      (    cubix_ide.asm):00362         
                      (    cubix_ide.asm):00363         
                      (    cubix_ide.asm):00364         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00365         ;*
                      (    cubix_ide.asm):00366         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00367         ;*
                      (    cubix_ide.asm):00368         ;*____________________________________________________________________________________________________
8A63                  (    cubix_ide.asm):00369         IDE_READ_BUFFER:
8A63 108E0000         (    cubix_ide.asm):00370                 LDY     #$0000                            ; INDEX
8A67                  (    cubix_ide.asm):00371         IDEBUFRD:
8A67 8608             (    cubix_ide.asm):00372                 LDA     #PPIDE_DATA
8A69 BD8AA1           (    cubix_ide.asm):00373                 JSR     IDE_READ_NO_SETUP
8A6C E7A90300         (    cubix_ide.asm):00374                 STB     HSTBUF,Y                          ; 'ID DRIVE' IDE RESPONSE IS LITTLE ENDIAN FORMAT
8A70 3121             (    cubix_ide.asm):00375                 INY
8A72 A7A90300         (    cubix_ide.asm):00376                 STA     HSTBUF,Y                          ; 'ID DRIVE' IDE RESPONSE IS LITTLE ENDIAN FORMAT
8A76 3121             (    cubix_ide.asm):00377                 INY
8A78 108C0200         (    cubix_ide.asm):00378                 CMPY    #$0200                            ;
8A7C 26E9             (    cubix_ide.asm):00379                 BNE     IDEBUFRD                          ;
8A7E 39               (    cubix_ide.asm):00380                 RTS                                       ;
                      (    cubix_ide.asm):00381         
                      (    cubix_ide.asm):00382         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00383         ;*
                      (    cubix_ide.asm):00384         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00385         ;*
                      (    cubix_ide.asm):00386         ;*____________________________________________________________________________________________________
8A7F                  (    cubix_ide.asm):00387         IDE_WRITE_BUFFER:
8A7F 108E0000         (    cubix_ide.asm):00388                 LDY     #$0000                            ; INDEX
8A83                  (    cubix_ide.asm):00389         IDEBUFWT:
8A83 8608             (    cubix_ide.asm):00390                 LDA     #PPIDE_DATA
8A85 B788A4           (    cubix_ide.asm):00391                 STA     PPIDECOMMAND
8A88 E6A90300         (    cubix_ide.asm):00392                 LDB     HSTBUF,Y                          ; SECTORS ARE BIG ENDIAN
8A8C 3121             (    cubix_ide.asm):00393                 INY
8A8E A6A90300         (    cubix_ide.asm):00394                 LDA     HSTBUF,Y                          ; SECTORS ARE BIG ENDIAN
8A92 3121             (    cubix_ide.asm):00395                 INY                                       ;
8A94 BD8AC7           (    cubix_ide.asm):00396                 JSR     IDE_WRITE
8A97 108C0200         (    cubix_ide.asm):00397                 CMPY    #$0200                            ;
8A9B 26E6             (    cubix_ide.asm):00398                 BNE     IDEBUFWT                          ;
8A9D 39               (    cubix_ide.asm):00399                 RTS                                       ;
                      (    cubix_ide.asm):00400         
                      (    cubix_ide.asm):00401         
                      (    cubix_ide.asm):00402         ;-------------------------------------------------------------------------------
                      (    cubix_ide.asm):00403         
                      (    cubix_ide.asm):00404         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (    cubix_ide.asm):00405         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (    cubix_ide.asm):00406         ; PROGRAM WOULD NOT CALL TO THESE.
                      (    cubix_ide.asm):00407         
                      (    cubix_ide.asm):00408         ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (    cubix_ide.asm):00409         ;INPUT A = IDE REGSITER ADDRESS
                      (    cubix_ide.asm):00410         ;OUTPUT D = WORD READ FROM IDE DRIVE
8A9E                  (    cubix_ide.asm):00411         IDE_READ:
8A9E BD8AE6           (    cubix_ide.asm):00412                 JSR     SET_PPI_RD                        ; SETUP FOR A READ CYCLE
8AA1                  (    cubix_ide.asm):00413         IDE_READ_NO_SETUP:
8AA1 B7DF8A           (    cubix_ide.asm):00414                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
8AA4 8A40             (    cubix_ide.asm):00415                 ORA     #PPIDE_RD_LINE                    ; ASSERT RD PIN
8AA6 B7DF8A           (    cubix_ide.asm):00416                 STA     PPIDECNTRL
8AA9 3402             (    cubix_ide.asm):00417                 PSHS    A
8AAB F6DF88           (    cubix_ide.asm):00418                 LDB     PPIDELO                           ; READ LOWER BYTE
8AAE B6DF89           (    cubix_ide.asm):00419                 LDA     PPIDEHI                           ; READ UPPER BYTE
8AB1 B788A3           (    cubix_ide.asm):00420                 STA     PPIDELOTMP
8AB4 3502             (    cubix_ide.asm):00421                 PULS    A                                 ; RESTORE REGISTER VALUE
8AB6 B7DF8A           (    cubix_ide.asm):00422                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
8AB9 8840             (    cubix_ide.asm):00423                 EORA    #PPIDE_RD_LINE                    ; ASSERT RD PIN
8ABB B7DF8A           (    cubix_ide.asm):00424                 STA     PPIDECNTRL
8ABE 8600             (    cubix_ide.asm):00425                 LDA     #$00
8AC0 B7DF8A           (    cubix_ide.asm):00426                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8AC3 B688A3           (    cubix_ide.asm):00427                 LDA     PPIDELOTMP
8AC6 39               (    cubix_ide.asm):00428                 RTS
                      (    cubix_ide.asm):00429         
                      (    cubix_ide.asm):00430         
                      (    cubix_ide.asm):00431         
                      (    cubix_ide.asm):00432         ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (    cubix_ide.asm):00433         ;INPUT PPIDECOMMAND = IDE REGISTER ADDRESS
                      (    cubix_ide.asm):00434         ;INPUT REGISTER D = WORD TO WRITE
                      (    cubix_ide.asm):00435         ;
                      (    cubix_ide.asm):00436         
8AC7                  (    cubix_ide.asm):00437         IDE_WRITE:
8AC7 BD8AF4           (    cubix_ide.asm):00438                 JSR     SET_PPI_WR                        ; SETUP FOR A WRITE CYCLE
8ACA F7DF88           (    cubix_ide.asm):00439                 STB     PPIDELO                           ; WRITE LOWER BYTE
8ACD B7DF89           (    cubix_ide.asm):00440                 STA     PPIDEHI                           ; WRITE UPPER BYTE
8AD0 B688A4           (    cubix_ide.asm):00441                 LDA     PPIDECOMMAND
8AD3 B7DF8A           (    cubix_ide.asm):00442                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
8AD6 8A20             (    cubix_ide.asm):00443                 ORA     #PPIDE_WR_LINE                    ; ASSERT WRITE PIN
8AD8 B7DF8A           (    cubix_ide.asm):00444                 STA     PPIDECNTRL
8ADB 8820             (    cubix_ide.asm):00445                 EORA    #PPIDE_WR_LINE                    ; DE ASSERT WR PIN
8ADD B7DF8A           (    cubix_ide.asm):00446                 STA     PPIDECNTRL
8AE0 8600             (    cubix_ide.asm):00447                 LDA     #$00
8AE2 B7DF8A           (    cubix_ide.asm):00448                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8AE5 39               (    cubix_ide.asm):00449                 RTS
                      (    cubix_ide.asm):00450         
                      (    cubix_ide.asm):00451         
                      (    cubix_ide.asm):00452         ;-----------------------------------------------------------------------------------
                      (    cubix_ide.asm):00453         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (    cubix_ide.asm):00454         ;
                      (    cubix_ide.asm):00455         ;------------------------------------------------------------------------------------
                      (    cubix_ide.asm):00456         
8AE6                  (    cubix_ide.asm):00457         SET_PPI_RD:
8AE6 3402             (    cubix_ide.asm):00458                 PSHS    A
8AE8 8600             (    cubix_ide.asm):00459                 LDA     #$00
8AEA B7DF8A           (    cubix_ide.asm):00460                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8AED 8692             (    cubix_ide.asm):00461                 LDA     #PPRD_IDE_8255
8AEF B7DF8B           (    cubix_ide.asm):00462                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, READ MODE
8AF2 3582             (    cubix_ide.asm):00463                 PULS    A,PC
                      (    cubix_ide.asm):00464         
8AF4                  (    cubix_ide.asm):00465         SET_PPI_WR:
8AF4 3402             (    cubix_ide.asm):00466                 PSHS    A
8AF6 8600             (    cubix_ide.asm):00467                 LDA     #$00
8AF8 B7DF8A           (    cubix_ide.asm):00468                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8AFB 8680             (    cubix_ide.asm):00469                 LDA     #PPWR_IDE_8255
8AFD B7DF8B           (    cubix_ide.asm):00470                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, WRITE MODE
8B00 3582             (    cubix_ide.asm):00471                 PULS    A,PC
                      (    cubix_ide.asm):00472         
                      (    cubix_ide.asm):00473         
8B02                  (    cubix_ide.asm):00474         MESSAGE1
8B02 5050494445203A   (    cubix_ide.asm):00475                 FCC     "PPIDE :"
8B09 00               (    cubix_ide.asm):00476                 FCB     00
8B0A                  (    cubix_ide.asm):00477         MESSAGE2
8B0A 20494F3D3078     (    cubix_ide.asm):00478                 FCC     " IO=0x"
8B10 00               (    cubix_ide.asm):00479                 FCB     00
8B11                  (    cubix_ide.asm):00480         MESSAGE3
8B11 204E4F5420505245 (    cubix_ide.asm):00481                 FCC     " NOT PRESENT"
     53454E54
8B1D 00               (    cubix_ide.asm):00482                 FCB     00
8B1E                  (    cubix_ide.asm):00483         MESSAGE4
8B1E 205050494445303A (    cubix_ide.asm):00484                 FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
8B2E 00               (    cubix_ide.asm):00485                 FCB     00
8B2F                  (    cubix_ide.asm):00486         MESSAGE5
8B2F 205050494445313A (    cubix_ide.asm):00487                 FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
8B3F 00               (    cubix_ide.asm):00488                 FCB     00
8B40                  (    cubix_ide.asm):00489         MESSAGE6
8B40 3078             (    cubix_ide.asm):00490                 FCC     "0x"
8B42 00               (    cubix_ide.asm):00491                 FCB     00
                      (    cubix_ide.asm):00492         
                      (    cubix_ide.asm):00493         
                      (    cubix_ide.asm):00494         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (    cubix_ide.asm):00495         ;*
                      (    cubix_ide.asm):00496         ;*
                      (    cubix_ide.asm):00497         ;        SETUP   LBA DATA
                      (    cubix_ide.asm):00498         ;*
                      (    cubix_ide.asm):00499         ;*    This assumes the drive is setup for 128 sectors, 128 Cylinders, 4 heads. = 65536 total sectors.
                      (    cubix_ide.asm):00500         ;     LBA ADDRESS   LLLLLLLL CCCCCCCS SSSSSSHH
                      (    cubix_ide.asm):00501         ;     L=SLICE
                      (    cubix_ide.asm):00502         ;     H=HEAD
                      (    cubix_ide.asm):00503         ;     C=CYLINDER
                      (    cubix_ide.asm):00504         ;     S=SECTOR
                      (    cubix_ide.asm):00505         ;*
                      (    cubix_ide.asm):00506         ;*____________________________________________________________________________________________________
8B43                  (    cubix_ide.asm):00507         IDE_SETUP_LBA:
8B43 3406             (    cubix_ide.asm):00508                 PSHS    D
8B45 860E             (    cubix_ide.asm):00509                 LDA     #PPIDE_DEVICE
8B47 B701F3           (    cubix_ide.asm):00510                 STA     DSKY_HEXBUF
8B4A B788A4           (    cubix_ide.asm):00511                 STA     PPIDECOMMAND
8B4D 8600             (    cubix_ide.asm):00512                 LDA     #$00
8B4F F601FB           (    cubix_ide.asm):00513                 LDB     CURRENTDEVICE
8B52 C401             (    cubix_ide.asm):00514                 ANDB    #$01                              ; only want drive cfg
8B54 58               (    cubix_ide.asm):00515                 ASLB                                      ; SHIFT 4
8B55 58               (    cubix_ide.asm):00516                 ASLB                                      ;
8B56 58               (    cubix_ide.asm):00517                 ASLB                                      ;
8B57 58               (    cubix_ide.asm):00518                 ASLB                                      ;
8B58 CAE0             (    cubix_ide.asm):00519                 ORB     #$E0                              ; E0=MST  F0=SLV
8B5A BD8AC7           (    cubix_ide.asm):00520                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00521         
8B5D 860D             (    cubix_ide.asm):00522                 LDA     #PPIDE_LBAHI
8B5F B788A4           (    cubix_ide.asm):00523                 STA     PPIDECOMMAND
8B62 8600             (    cubix_ide.asm):00524                 LDA     #$00
8B64 F601FC           (    cubix_ide.asm):00525                 LDB     CURRENTSLICE
8B67 F701F4           (    cubix_ide.asm):00526                 STB     DSKY_HEXBUF+1
8B6A BD8AC7           (    cubix_ide.asm):00527                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00528         
8B6D 860C             (    cubix_ide.asm):00529                 LDA     #PPIDE_LBAMID
8B6F B788A4           (    cubix_ide.asm):00530                 STA     PPIDECOMMAND
8B72 8600             (    cubix_ide.asm):00531                 LDA     #$00
8B74 F601F9           (    cubix_ide.asm):00532                 LDB     CURRENTCYL                        ;
8B77 F701F5           (    cubix_ide.asm):00533                 STB     DSKY_HEXBUF+2
8B7A BD8AC7           (    cubix_ide.asm):00534                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00535         
8B7D 860B             (    cubix_ide.asm):00536                 LDA     #PPIDE_LBALOW
8B7F B788A4           (    cubix_ide.asm):00537                 STA     PPIDECOMMAND
8B82 8600             (    cubix_ide.asm):00538                 LDA     #$00
8B84 F601FA           (    cubix_ide.asm):00539                 LDB     CURRENTSEC                        ;
8B87 F701F6           (    cubix_ide.asm):00540                 STB     DSKY_HEXBUF+3
8B8A BD8AC7           (    cubix_ide.asm):00541                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00542         
8B8D 860A             (    cubix_ide.asm):00543                 LDA     #PPIDE_SEC_CNT
8B8F B788A4           (    cubix_ide.asm):00544                 STA     PPIDECOMMAND
8B92 8600             (    cubix_ide.asm):00545                 LDA     #$00
8B94 C601             (    cubix_ide.asm):00546                 LDB     #$01
8B96 BD8AC7           (    cubix_ide.asm):00547                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00548         
8B99 BD8CAC           (    cubix_ide.asm):00549                 JSR     DSKY_BIN2SEG
8B9C BD8CF3           (    cubix_ide.asm):00550                 JSR     DSKY_SHOW
8B9F 3586             (    cubix_ide.asm):00551                 PULS    D,PC
                      (     cubixdrv.asm):00095                 INCLUDE cubix_dskyng.asm
                      ( cubix_dskyng.asm):00001         ;__DSKYNG DRIVERS_________________________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00002         ;
                      ( cubix_dskyng.asm):00003         ;       Duodyne DSKY/NG drivers
                      ( cubix_dskyng.asm):00004         ;
                      ( cubix_dskyng.asm):00005         ;       Entry points:
                      ( cubix_dskyng.asm):00006         ;               DSKY_INIT
                      ( cubix_dskyng.asm):00007         ;               DSKY_SHOW
                      ( cubix_dskyng.asm):00008         ;               DSKY_BIN2SEG
                      ( cubix_dskyng.asm):00009         ;               DSKY_RESET
                      ( cubix_dskyng.asm):00010         ;               DSKY_STAT
                      ( cubix_dskyng.asm):00011         ;               DSKY_GETKEY
                      ( cubix_dskyng.asm):00012         ;               DSKY_BEEP
                      ( cubix_dskyng.asm):00013         ;               DSKY_L1ON
                      ( cubix_dskyng.asm):00014         ;               DSKY_L2ON
                      ( cubix_dskyng.asm):00015         ;               DSKY_L1OFF
                      ( cubix_dskyng.asm):00016         ;               DSKY_L2OFF
                      ( cubix_dskyng.asm):00017         ;               DSKY_PUTLED
                      ( cubix_dskyng.asm):00018         ;               DSKY_BLANK
                      ( cubix_dskyng.asm):00019         ;________________________________________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00020         ;
                      ( cubix_dskyng.asm):00021         ;
                      ( cubix_dskyng.asm):00022         ; A DSKYNG CAN SHARE A PPI BUS WITH EITHER A PPIDE OR PPISD.
                      ( cubix_dskyng.asm):00023         ;
                      ( cubix_dskyng.asm):00024         ; LED SEGMENTS (BIT VALUES)
                      ( cubix_dskyng.asm):00025         ;
                      ( cubix_dskyng.asm):00026         ;       +--01--+
                      ( cubix_dskyng.asm):00027         ;       20    02
                      ( cubix_dskyng.asm):00028         ;       +--40--+
                      ( cubix_dskyng.asm):00029         ;       10    04
                      ( cubix_dskyng.asm):00030         ;       +--08--+  80
                      ( cubix_dskyng.asm):00031         ;
                      ( cubix_dskyng.asm):00032         ; KEY CODE MAP (KEY CODES) CSCCCRRR
                      ( cubix_dskyng.asm):00033         ;                          ||||||||
                      ( cubix_dskyng.asm):00034         ;                          |||||+++-- ROW
                      ( cubix_dskyng.asm):00035         ;                          ||+++----- COL
                      ( cubix_dskyng.asm):00036         ;                          |+-------- SHIFT
                      ( cubix_dskyng.asm):00037         ;                          +--------- CONTROL
                      ( cubix_dskyng.asm):00038         ;
                      ( cubix_dskyng.asm):00039         ;       00      08      10      18      23
                      ( cubix_dskyng.asm):00040         ;       01      09      11      19      22
                      ( cubix_dskyng.asm):00041         ;       02      0A      12      1A      21
                      ( cubix_dskyng.asm):00042         ;       03      0B      13      1B      20
                      ( cubix_dskyng.asm):00043         ;       04      0C      14      1C      SHIFT
                      ( cubix_dskyng.asm):00044         ;       05      0D      15      1D      CTRL
                      ( cubix_dskyng.asm):00045         ;
                      ( cubix_dskyng.asm):00046         ; LED BIT MAP (BIT VALUES)
                      ( cubix_dskyng.asm):00047         ;
                      ( cubix_dskyng.asm):00048         ;       $08     $09     $0A     $0B     $0C     $0D     $0E     $0F
                      ( cubix_dskyng.asm):00049         ;       ---     ---     ---     ---     ---     ---     ---     ---
                      ( cubix_dskyng.asm):00050         ;       01      01      01      01      01
                      ( cubix_dskyng.asm):00051         ;       02      02      02      02      02
                      ( cubix_dskyng.asm):00052         ;       04      04      04      04      04
                      ( cubix_dskyng.asm):00053         ;       08      08      08      08      08
                      ( cubix_dskyng.asm):00054         ;       10      10      10      10      10
                      ( cubix_dskyng.asm):00055         ;       20      20      20      20      20      L1      L2      BUZZ
                      ( cubix_dskyng.asm):00056         ;
     DF88             ( cubix_dskyng.asm):00057         DSKY_PPI        = $DF88                           ; PORT
     DF88             ( cubix_dskyng.asm):00058         DSKY_PPIA       = DSKY_PPI+0                      ; PORT A
     DF89             ( cubix_dskyng.asm):00059         DSKY_PPIB       = DSKY_PPI+1                      ; PORT B
     DF8A             ( cubix_dskyng.asm):00060         DSKY_PPIC       = DSKY_PPI+2                      ; PORT C
     DF8B             ( cubix_dskyng.asm):00061         DSKY_PPIX       = DSKY_PPI+3                      ; PPI CONTROL PORT
                      ( cubix_dskyng.asm):00062         ;
     0092             ( cubix_dskyng.asm):00063         DSKY_PPIX_RD    = %10010010                       ; PPIX VALUE FOR READS
     0082             ( cubix_dskyng.asm):00064         DSKY_PPIX_WR    = %10000010                       ; PPIX VALUE FOR WRITES
                      ( cubix_dskyng.asm):00065         ;
                      ( cubix_dskyng.asm):00066         ; PIO CHANNEL C:
                      ( cubix_dskyng.asm):00067         ;
                      ( cubix_dskyng.asm):00068         ;       7       6       5       4       3       2       1       0
                      ( cubix_dskyng.asm):00069         ;       RES     0       0       CS      CS      /RD     /WR     A0
                      ( cubix_dskyng.asm):00070         ;
                      ( cubix_dskyng.asm):00071         ; SETTING BITS 3 & 4 WILL ASSERT /CS ON 3279
                      ( cubix_dskyng.asm):00072         ; CLEAR BITS 1 OR 2 TO ASSERT READ/WRITE
                      ( cubix_dskyng.asm):00073         ;
     0006             ( cubix_dskyng.asm):00074         DSKY_PPI_IDLE   = %00000110
                      ( cubix_dskyng.asm):00075         ;
     00DF             ( cubix_dskyng.asm):00076         DSKY_CMD_CLR    = %11011111                       ; CLEAR (ALL OFF)
     00D3             ( cubix_dskyng.asm):00077         DSKY_CMD_CLRX   = %11010011                       ; CLEAR (ALL ON)
     0090             ( cubix_dskyng.asm):00078         DSKY_CMD_WDSP   = %10010000                       ; WRITE DISPLAY RAM
     0070             ( cubix_dskyng.asm):00079         DSKY_CMD_RDSP   = %01110000                       ; READ DISPLAY RAM
     0020             ( cubix_dskyng.asm):00080         DSKY_CMD_CLK    = %00100000                       ; SET CLK PRESCALE
     0040             ( cubix_dskyng.asm):00081         DSKY_CMD_FIFO   = %01000000                       ; READ FIFO
                      ( cubix_dskyng.asm):00082         ;
     ????             ( cubix_dskyng.asm):00083         DSKY_PRESCL     = DSKYOSC/100000                  ; PRESCALER
                      ( cubix_dskyng.asm):00084         ;
                      ( cubix_dskyng.asm):00085         ;__DSKY_INIT_________________________________________________________________________________________
                      ( cubix_dskyng.asm):00086         ;
                      ( cubix_dskyng.asm):00087         ;  DISPLAY DSKY INFO
                      ( cubix_dskyng.asm):00088         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00089         ;
8BA1                  ( cubix_dskyng.asm):00090         DSKY_INIT:
                      ( cubix_dskyng.asm):00091         ; PRTDBG "DSKY INIT:$"
8BA1 BD8BEA           ( cubix_dskyng.asm):00092                 JSR     DSKY_PREINIT
8BA4 8E8E50           ( cubix_dskyng.asm):00093                 LDX     #DSKYMESSAGE1
8BA7 BD992F           ( cubix_dskyng.asm):00094                 JSR     WRSTR                             ; DO PROMPT
8BAA BD991B           ( cubix_dskyng.asm):00095                 JSR     LFCR                              ; AND CRLF
                      ( cubix_dskyng.asm):00096         
8BAD 8E8E56           ( cubix_dskyng.asm):00097                 LDX     #DSKYMESSAGE2
8BB0 BD992F           ( cubix_dskyng.asm):00098                 JSR     WRSTR                             ; DO PROMPT
8BB3 CCDF88           ( cubix_dskyng.asm):00099                 LDD     #PPIDE_PPI                        ; GET BASE PORT
8BB6 BD993B           ( cubix_dskyng.asm):00100                 JSR     WRHEXW                            ; PRINT BASE PORT
                      ( cubix_dskyng.asm):00101         
8BB9 8E8E5D           ( cubix_dskyng.asm):00102                 LDX     #DSKYMESSAGE3
8BBC BD992F           ( cubix_dskyng.asm):00103                 JSR     WRSTR                             ; DO PROMPT
                      ( cubix_dskyng.asm):00104         ;
                      ( cubix_dskyng.asm):00105         ;
8BBF B68E47           ( cubix_dskyng.asm):00106                 LDA     DSKY_PRESENT                      ; PRESENT?
8BC2 81FF             ( cubix_dskyng.asm):00107                 CMPA    #$FF                              ; SET FLAGS
8BC4 2708             ( cubix_dskyng.asm):00108                 BEQ     DSKY_INITA
8BC6 8E8E66           ( cubix_dskyng.asm):00109                 LDX     #DSKYMESSAGE4
8BC9 BD992F           ( cubix_dskyng.asm):00110                 JSR     WRSTR                             ; DO PROMPT
8BCC 2018             ( cubix_dskyng.asm):00111                 BRA     DSKY_INITB
8BCE                  ( cubix_dskyng.asm):00112         DSKY_INITA:
8BCE 8E0000           ( cubix_dskyng.asm):00113                 LDX     #$00
                      ( cubix_dskyng.asm):00114         !
8BD1 A6898E48         ( cubix_dskyng.asm):00115                 LDA     DSKYINITMSG,X
8BD5 A78901EA         ( cubix_dskyng.asm):00116                 STA     DSKY_BUF,X
8BD9 3001             ( cubix_dskyng.asm):00117                 INX
8BDB 8C0008           ( cubix_dskyng.asm):00118                 CMPX    #$0008
8BDE 26F1             ( cubix_dskyng.asm):00119                 BNE     <
8BE0 BD8CF3           ( cubix_dskyng.asm):00120                 JSR     DSKY_SHOW
8BE3 BD8DC5           ( cubix_dskyng.asm):00121                 JSR     DSKY_BEEP
                      ( cubix_dskyng.asm):00122         
8BE6                  ( cubix_dskyng.asm):00123         DSKY_INITB:
8BE6 BD991B           ( cubix_dskyng.asm):00124                 JSR     LFCR                              ; AND CRLF
8BE9 39               ( cubix_dskyng.asm):00125                 RTS                                       ; DONE
                      ( cubix_dskyng.asm):00126         ;
                      ( cubix_dskyng.asm):00127         ;__DSKY_PREINIT______________________________________________________________________________________
                      ( cubix_dskyng.asm):00128         ;
                      ( cubix_dskyng.asm):00129         ;  CONFIGURE PARALLEL PORT AND INITIALIZE 8279
                      ( cubix_dskyng.asm):00130         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00131         ; HARDWARE RESET 8279 BY PULSING RESET LINE
8BEA                  ( cubix_dskyng.asm):00132         DSKY_PREINIT:
                      ( cubix_dskyng.asm):00133         ; CHECK FOR PPI
8BEA BD8C33           ( cubix_dskyng.asm):00134                 JSR     DSKY_PPIDETECT                    ; TEST FOR PPI HARDWARE
8BED 262A             ( cubix_dskyng.asm):00135                 BNE     DSKY_ABORT                        ; BAIL OUT IF NOT THERE
                      ( cubix_dskyng.asm):00136         
                      ( cubix_dskyng.asm):00137         ; SETUP PPI TO DEFAULT MODE
8BEF BD8E1F           ( cubix_dskyng.asm):00138                 JSR     DSKY_PPIRD
                      ( cubix_dskyng.asm):00139         ; INIT 8279 VALUES TO IDLE STATE
8BF2 8606             ( cubix_dskyng.asm):00140                 LDA     #DSKY_PPI_IDLE
8BF4 B7DF8A           ( cubix_dskyng.asm):00141                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00142         ; PULSE RESET SIGNAL ON 8279
8BF7 8A80             ( cubix_dskyng.asm):00143                 ORA     #%10000000
8BF9 B7DF8A           ( cubix_dskyng.asm):00144                 STA     DSKY_PPIC
8BFC 847F             ( cubix_dskyng.asm):00145                 ANDA    #%01111111
8BFE B7DF8A           ( cubix_dskyng.asm):00146                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00147         ; INITIALIZE 8279
8C01 BD8C1A           ( cubix_dskyng.asm):00148                 JSR     DSKY_REINIT
                      ( cubix_dskyng.asm):00149         ; NOW SEE IF A DSKYNG IS REALLY THERE...
8C04 86A5             ( cubix_dskyng.asm):00150                 LDA     #$A5
8C06 C600             ( cubix_dskyng.asm):00151                 LDB     #$00
8C08 BD8D8E           ( cubix_dskyng.asm):00152                 JSR     DSKY_PUTBYTE
8C0B C600             ( cubix_dskyng.asm):00153                 LDB     #$00
8C0D BD8DA1           ( cubix_dskyng.asm):00154                 JSR     DSKY_GETBYTE
8C10 81A5             ( cubix_dskyng.asm):00155                 CMPA    #$A5
8C12 2605             ( cubix_dskyng.asm):00156                 BNE     DSKY_ABORT                        ; BAIL OUT IF MISCOMPARE
8C14 86FF             ( cubix_dskyng.asm):00157                 LDA     #$FF
8C16 B78E47           ( cubix_dskyng.asm):00158                 STA     DSKY_PRESENT
8C19                  ( cubix_dskyng.asm):00159         DSKY_ABORT:
8C19 39               ( cubix_dskyng.asm):00160                 RTS
                      ( cubix_dskyng.asm):00161         ;
8C1A                  ( cubix_dskyng.asm):00162         DSKY_REINIT:
8C1A BD8E32           ( cubix_dskyng.asm):00163                 JSR     DSKY_PPIIDLE
                      ( cubix_dskyng.asm):00164         ; SET CLOCK SCALER TO 20
8C1D 8620             ( cubix_dskyng.asm):00165                 LDA     #DSKY_CMD_CLK | DSKY_PRESCL
8C1F BD8D0A           ( cubix_dskyng.asm):00166                 JSR     DSKY_CMD
                      ( cubix_dskyng.asm):00167         ; FALL THRU
                      ( cubix_dskyng.asm):00168         ;
8C22                  ( cubix_dskyng.asm):00169         DSKY_RESET:
                      ( cubix_dskyng.asm):00170         ; RESET DSKY -- CLEAR RAM AND FIFO
8C22 86DF             ( cubix_dskyng.asm):00171                 LDA     #DSKY_CMD_CLR
8C24 BD8D0A           ( cubix_dskyng.asm):00172                 JSR     DSKY_CMD
                      ( cubix_dskyng.asm):00173         ;
                      ( cubix_dskyng.asm):00174         ; 8259 TAKES ~160US TO CLEAR RAM DURING WHICH TIME WRITES TO
                      ( cubix_dskyng.asm):00175         ; DISPLAY RAM ARE INHIBITED.  HIGH BIT OF STATUS BYTE IS SET
                      ( cubix_dskyng.asm):00176         ; DURING THIS WINDOW.  TO PREVENT A DEADLOCK, A LOOP COUNTER
                      ( cubix_dskyng.asm):00177         ; IS USED TO IMPLEMENT A TIMEOUT.
8C27 8E0000           ( cubix_dskyng.asm):00178                 LDX     #0                                ; TIMEOUT LOOP COUNTER
8C2A                  ( cubix_dskyng.asm):00179         DSKY_RESET1:
8C2A 3410             ( cubix_dskyng.asm):00180                 PSHS    X                                 ; SAVE COUNTER
                      ( cubix_dskyng.asm):00181         ;JSR    DSKY_ST                 ; GET STATUS BYTE
8C2C 3510             ( cubix_dskyng.asm):00182                 PULS    X                                 ; RECOVER COUNTER
                      ( cubix_dskyng.asm):00183         ;  AND     #%10000000
                      ( cubix_dskyng.asm):00184         ;  BEQ     DSKY_RESET2          ; MOVE ON IF DONE
8C2E 301F             ( cubix_dskyng.asm):00185                 DEX
8C30 26F8             ( cubix_dskyng.asm):00186                 BNE     DSKY_RESET1                       ; LOOP TILL TIMEOUT
                      ( cubix_dskyng.asm):00187         ;
8C32                  ( cubix_dskyng.asm):00188         DSKY_RESET2:
8C32 39               ( cubix_dskyng.asm):00189                 RTS
                      ( cubix_dskyng.asm):00190         ;
                      ( cubix_dskyng.asm):00191         ;
                      ( cubix_dskyng.asm):00192         ;
                      ( cubix_dskyng.asm):00193         ;__DSKY_PPIDETECT____________________________________________________________________________________
                      ( cubix_dskyng.asm):00194         ;
                      ( cubix_dskyng.asm):00195         ;  PROBE FOR PPI HARDWARE
                      ( cubix_dskyng.asm):00196         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00197         ;
8C33                  ( cubix_dskyng.asm):00198         DSKY_PPIDETECT:
                      ( cubix_dskyng.asm):00199         ;
                      ( cubix_dskyng.asm):00200         ; TEST FOR PPI EXISTENCE
                      ( cubix_dskyng.asm):00201         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      ( cubix_dskyng.asm):00202         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      ( cubix_dskyng.asm):00203         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      ( cubix_dskyng.asm):00204         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      ( cubix_dskyng.asm):00205         ; INTERFERE WITH THE VALUE BEING READ.
8C33 BD8E07           ( cubix_dskyng.asm):00206                 JSR     DSKY_PPIWR
                      ( cubix_dskyng.asm):00207         ;
8C36 8600             ( cubix_dskyng.asm):00208                 LDA     #$00                              ; VALUE ZERO
8C38 B7DF88           ( cubix_dskyng.asm):00209                 STA     DSKY_PPIA                         ; PUSH VALUE TO PORT
8C3B B6DF88           ( cubix_dskyng.asm):00210                 LDA     DSKY_PPIA                         ; GET PORT VALUE
8C3E 8100             ( cubix_dskyng.asm):00211                 CMPA    #$00
8C40 39               ( cubix_dskyng.asm):00212                 RTS                                       ; AND RETURN
                      ( cubix_dskyng.asm):00213         ;
                      ( cubix_dskyng.asm):00214         ;
     0000             ( cubix_dskyng.asm):00215         KY_0            = $00
     0001             ( cubix_dskyng.asm):00216         KY_1            = $01
     0002             ( cubix_dskyng.asm):00217         KY_2            = $02
     0003             ( cubix_dskyng.asm):00218         KY_3            = $03
     0004             ( cubix_dskyng.asm):00219         KY_4            = $04
     0005             ( cubix_dskyng.asm):00220         KY_5            = $05
     0006             ( cubix_dskyng.asm):00221         KY_6            = $06
     0007             ( cubix_dskyng.asm):00222         KY_7            = $07
     0008             ( cubix_dskyng.asm):00223         KY_8            = $08
     0009             ( cubix_dskyng.asm):00224         KY_9            = $09
     000A             ( cubix_dskyng.asm):00225         KY_A            = $0A
     000B             ( cubix_dskyng.asm):00226         KY_B            = $0B
     000C             ( cubix_dskyng.asm):00227         KY_C            = $0C
     000D             ( cubix_dskyng.asm):00228         KY_D            = $0D
     000E             ( cubix_dskyng.asm):00229         KY_E            = $0E
     000F             ( cubix_dskyng.asm):00230         KY_F            = $0F
     0010             ( cubix_dskyng.asm):00231         KY_FW           = $10                             ; FORWARD
     0011             ( cubix_dskyng.asm):00232         KY_BK           = $11                             ; BACKWARD
     0012             ( cubix_dskyng.asm):00233         KY_CL           = $12                             ; CLEAR
     0013             ( cubix_dskyng.asm):00234         KY_EN           = $13                             ; ENTER
     0014             ( cubix_dskyng.asm):00235         KY_DE           = $14                             ; DEPOSIT
     0015             ( cubix_dskyng.asm):00236         KY_EX           = $15                             ; EXAMINE
     0016             ( cubix_dskyng.asm):00237         KY_GO           = $16                             ; GO
     0017             ( cubix_dskyng.asm):00238         KY_BO           = $17                             ; BOOT
     0018             ( cubix_dskyng.asm):00239         KY_F4           = $18                             ; F4
     0019             ( cubix_dskyng.asm):00240         KY_F3           = $19                             ; F3
     0020             ( cubix_dskyng.asm):00241         KY_F2           = $20                             ; F2
     0021             ( cubix_dskyng.asm):00242         KY_F1           = $21                             ; F1
                      ( cubix_dskyng.asm):00243         ;
                      ( cubix_dskyng.asm):00244         ;__DSKY_STAT_________________________________________________________________________________________
                      ( cubix_dskyng.asm):00245         ;
                      ( cubix_dskyng.asm):00246         ;  CHECK FOR KEY PRESS, SAVE RAW VALUE, RETURN STATUS
                      ( cubix_dskyng.asm):00247         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00248         ;
8C41                  ( cubix_dskyng.asm):00249         DSKY_STAT:
8C41 B68E47           ( cubix_dskyng.asm):00250                 LDA     DSKY_PRESENT                      ; DOES IT EXIST?
8C44 81FF             ( cubix_dskyng.asm):00251                 CMPA    #$FF                              ; SET FLAGS
8C46 2605             ( cubix_dskyng.asm):00252                 BNE     DSKY_STATA                        ; ABORT WITH A=0 IF NOT THERE
8C48 BD8D46           ( cubix_dskyng.asm):00253                 JSR     DSKY_ST
8C4B 840F             ( cubix_dskyng.asm):00254                 ANDA    #$0F                              ; ISOLATE THE CUR FIFO LEN
8C4D                  ( cubix_dskyng.asm):00255         DSKY_STATA:
8C4D 39               ( cubix_dskyng.asm):00256                 RTS
                      ( cubix_dskyng.asm):00257         ;
                      ( cubix_dskyng.asm):00258         ;__DSKY_GETKEY_____________________________________________________________________________________
                      ( cubix_dskyng.asm):00259         ;
                      ( cubix_dskyng.asm):00260         ;  WAIT FOR A DSKY KEYPRESS AND RETURN
                      ( cubix_dskyng.asm):00261         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00262         ;
8C4E                  ( cubix_dskyng.asm):00263         DSKY_GETKEY:
8C4E B68E47           ( cubix_dskyng.asm):00264                 LDA     DSKY_PRESENT                      ; DOES IT EXIST?
8C51 81FF             ( cubix_dskyng.asm):00265                 CMPA    #$FF                              ; SET FLAGS
8C53 2629             ( cubix_dskyng.asm):00266                 BNE     DSKY_GETKEY1A                     ; ABORT WITH A=0 IF NOT THERE
8C55 BD8C41           ( cubix_dskyng.asm):00267                 JSR     DSKY_STAT
8C58 27F4             ( cubix_dskyng.asm):00268                 BEQ     DSKY_GETKEY                       ; LOOP IF NOTHING THERE
8C5A 8640             ( cubix_dskyng.asm):00269                 LDA     #DSKY_CMD_FIFO
8C5C BD8D0A           ( cubix_dskyng.asm):00270                 JSR     DSKY_CMD
8C5F BD8D4B           ( cubix_dskyng.asm):00271                 JSR     DSKY_DIN
8C62 88C0             ( cubix_dskyng.asm):00272                 EORA    #%11000000                        ; FLIP POLARITY OF SHIFT/CTL BITS
8C64 3402             ( cubix_dskyng.asm):00273                 PSHS    A
8C66 843F             ( cubix_dskyng.asm):00274                 ANDA    #$3F                              ; STRIP SHIFT/CTL BITS FOR LOOKUP
8C68 B78E45           ( cubix_dskyng.asm):00275                 STA     DSKY_TEMP_VAL
8C6B 8E0000           ( cubix_dskyng.asm):00276                 LDX     #0                                ; INDEX
8C6E                  ( cubix_dskyng.asm):00277         DSKY_GETKEY1:
8C6E A6898C90         ( cubix_dskyng.asm):00278                 LDA     DSKY_KEYMAP,X
8C72 B18E45           ( cubix_dskyng.asm):00279                 CMPA    DSKY_TEMP_VAL                     ; MATCH?
8C75 270C             ( cubix_dskyng.asm):00280                 BEQ     DSKY_GETKEY2                      ; FOUND, DONE
8C77 3001             ( cubix_dskyng.asm):00281                 INX
8C79 8C001C           ( cubix_dskyng.asm):00282                 CMPX    #28
8C7C 26F0             ( cubix_dskyng.asm):00283                 BNE     DSKY_GETKEY1                      ; LOOP UNTIL EOT
8C7E                  ( cubix_dskyng.asm):00284         DSKY_GETKEY1A:
8C7E 3502             ( cubix_dskyng.asm):00285                 PULS    A
8C80 86FF             ( cubix_dskyng.asm):00286                 LDA     #$FF                              ; NOT FOUND ERR, RETURN $FF
8C82 39               ( cubix_dskyng.asm):00287                 RTS
                      ( cubix_dskyng.asm):00288         
8C83                  ( cubix_dskyng.asm):00289         DSKY_GETKEY2:
                      ( cubix_dskyng.asm):00290         ; RETURN THE INDEX POSITION WHERE THE SCAN CODE WAS FOUND
                      ( cubix_dskyng.asm):00291         ; THE ORIGINAL SHIFT/CTRL BITS ARE RESTORED
8C83 3502             ( cubix_dskyng.asm):00292                 PULS    A                                 ; RESTORE RAW VALUE
8C85 94C0             ( cubix_dskyng.asm):00293                 ANDA    %11000000                         ; ISOLATE SHIFT/CTRL BITS
8C87 B78E45           ( cubix_dskyng.asm):00294                 STA     DSKY_TEMP_VAL
8C8A 1F18             ( cubix_dskyng.asm):00295                 TFR     X,A
8C8C BA8E45           ( cubix_dskyng.asm):00296                 ORA     DSKY_TEMP_VAL                     ; COMBINE WITH INDEX VALUE
8C8F 39               ( cubix_dskyng.asm):00297                 RTS
                      ( cubix_dskyng.asm):00298         ;
                      ( cubix_dskyng.asm):00299         ;_KEYMAP_TABLE_____________________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00300         ;
8C90                  ( cubix_dskyng.asm):00301         DSKY_KEYMAP:
                      ( cubix_dskyng.asm):00302         ; POS   $00  $01  $02  $03  $04  $05  $06  $07
                      ( cubix_dskyng.asm):00303         ; KEY   [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]
8C90 0D040C14030B1302 ( cubix_dskyng.asm):00304                 .BYTE   $0D,$04,$0C,$14,$03,$0B,$13,$02
                      ( cubix_dskyng.asm):00305         ;
                      ( cubix_dskyng.asm):00306         ; POS   $08  $09  $0A  $0B  $0C  $0D  $0E  $0F
                      ( cubix_dskyng.asm):00307         ; KEY   [8]  [9]  [A]  [B]  [C]  [D]  [E]  [F]
8C98 0A12010911000810 ( cubix_dskyng.asm):00308                 .BYTE   $0A,$12,$01,$09,$11,$00,$08,$10
                      ( cubix_dskyng.asm):00309         ;
                      ( cubix_dskyng.asm):00310         ; POS   $10  $11  $12  $13  $14  $15  $16  $17
                      ( cubix_dskyng.asm):00311         ; KEY   [FW] [BK] [CL] [EN] [DE] [EX] [GO] [BO]
8CA0 05151D1C1B1A1918 ( cubix_dskyng.asm):00312                 .BYTE   $05,$15,$1D,$1C,$1B,$1A,$19,$18
                      ( cubix_dskyng.asm):00313         
                      ( cubix_dskyng.asm):00314         ; POS   $18  $19  $20  $21
                      ( cubix_dskyng.asm):00315         ; KEY   [F4] [F3] [F2] [F1]
8CA8 23222120         ( cubix_dskyng.asm):00316                 .BYTE   $23,$22,$21,$20
                      ( cubix_dskyng.asm):00317         
                      ( cubix_dskyng.asm):00318         ;
                      ( cubix_dskyng.asm):00319         ;
                      ( cubix_dskyng.asm):00320         ;__DSKY_BIN2SEG________________________________________________________________________________________
                      ( cubix_dskyng.asm):00321         ;
                      ( cubix_dskyng.asm):00322         ; CONVERT 32 BIT BINARY TO 8 BYTE HEX SEGMENT DISPLAY
                      ( cubix_dskyng.asm):00323         ;
                      ( cubix_dskyng.asm):00324         ; DSKY_BUF: 32 BIT BINARY
                      ( cubix_dskyng.asm):00325         ; DSKY_HEXBUF: DEST LED SEGMENT DISPLAY BUFFER (8 BYTES)
                      ( cubix_dskyng.asm):00326         ;____________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00327         ;
8CAC                  ( cubix_dskyng.asm):00328         DSKY_BIN2SEG:
8CAC 8E0000           ( cubix_dskyng.asm):00329                 LDX     #$0000
8CAF                  ( cubix_dskyng.asm):00330         DSKY_BIN2SEG1:
8CAF A68901F3         ( cubix_dskyng.asm):00331                 LDA     DSKY_HEXBUF,X                     ; FIRST NIBBLE
8CB3 44               ( cubix_dskyng.asm):00332                 LSRA
8CB4 44               ( cubix_dskyng.asm):00333                 LSRA
8CB5 44               ( cubix_dskyng.asm):00334                 LSRA
8CB6 44               ( cubix_dskyng.asm):00335                 LSRA
8CB7 C600             ( cubix_dskyng.asm):00336                 LDB     #$00
8CB9 1E89             ( cubix_dskyng.asm):00337                 EXG     A,B                               ; MOVE DIGIT TO LOOKUP INDEX
8CBB 1F02             ( cubix_dskyng.asm):00338                 TFR     D,Y
8CBD A6A98E35         ( cubix_dskyng.asm):00339                 LDA     DSKY_HEXMAP,Y                     ; GET DECODED DIGIT INTO A
8CC1 3402             ( cubix_dskyng.asm):00340                 PSHS    A
8CC3 1F10             ( cubix_dskyng.asm):00341                 TFR     X,D
8CC5 58               ( cubix_dskyng.asm):00342                 ASLB
8CC6 1F02             ( cubix_dskyng.asm):00343                 TFR     D,Y
8CC8 3502             ( cubix_dskyng.asm):00344                 PULS    A
8CCA A7A901EA         ( cubix_dskyng.asm):00345                 STA     DSKY_BUF,Y                        ;STORE HIGH BYTE IN OUT BUFFER
8CCE A68901F3         ( cubix_dskyng.asm):00346                 LDA     DSKY_HEXBUF,X                     ; SECOND NIBBLE
8CD2 840F             ( cubix_dskyng.asm):00347                 ANDA    #$0F
8CD4 C600             ( cubix_dskyng.asm):00348                 LDB     #$00
8CD6 1E89             ( cubix_dskyng.asm):00349                 EXG     A,B                               ; MOVE DIGIT TO LOOKUP INDEX
8CD8 1F02             ( cubix_dskyng.asm):00350                 TFR     D,Y
8CDA A6A98E35         ( cubix_dskyng.asm):00351                 LDA     DSKY_HEXMAP,Y                     ; GET DECODED DIGIT INTO A
8CDE 3402             ( cubix_dskyng.asm):00352                 PSHS    A
8CE0 1F10             ( cubix_dskyng.asm):00353                 TFR     X,D
8CE2 58               ( cubix_dskyng.asm):00354                 ASLB
8CE3 1F02             ( cubix_dskyng.asm):00355                 TFR     D,Y
8CE5 3502             ( cubix_dskyng.asm):00356                 PULS    A
8CE7 A7A901EB         ( cubix_dskyng.asm):00357                 STA     DSKY_BUF+1,Y                      ;STORE HIGH BYTE IN OUT BUFFER
8CEB 3001             ( cubix_dskyng.asm):00358                 INX
8CED 8C0004           ( cubix_dskyng.asm):00359                 CMPX    #4
8CF0 26BD             ( cubix_dskyng.asm):00360                 BNE     DSKY_BIN2SEG1
8CF2 39               ( cubix_dskyng.asm):00361                 RTS
                      ( cubix_dskyng.asm):00362         ;
                      ( cubix_dskyng.asm):00363         ;__DSKY_SHOW___________________________________________________________________________________________
                      ( cubix_dskyng.asm):00364         ; DSKY SHOW BUFFER
                      ( cubix_dskyng.asm):00365         ;______________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00366         ;
8CF3                  ( cubix_dskyng.asm):00367         DSKY_SHOW:
8CF3 3436             ( cubix_dskyng.asm):00368                 PSHS    A,B,X,Y
8CF5 8E0000           ( cubix_dskyng.asm):00369                 LDX     #0
8CF8                  ( cubix_dskyng.asm):00370         DSKY_SHOW1:
8CF8 A68901EA         ( cubix_dskyng.asm):00371                 LDA     DSKY_BUF,X
8CFC 1F19             ( cubix_dskyng.asm):00372                 TFR     X,B
8CFE BD8D8E           ( cubix_dskyng.asm):00373                 JSR     DSKY_PUTBYTE
8D01 3001             ( cubix_dskyng.asm):00374                 INX
8D03 8C0008           ( cubix_dskyng.asm):00375                 CMPX    #8
8D06 26F0             ( cubix_dskyng.asm):00376                 BNE     DSKY_SHOW1
8D08 35B6             ( cubix_dskyng.asm):00377                 PULS    A,B,X,Y,PC
                      ( cubix_dskyng.asm):00378         
                      ( cubix_dskyng.asm):00379         ;______________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00380         ; DSKYNG OUTPUT ROUTINES
                      ( cubix_dskyng.asm):00381         ;______________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00382         
                      ( cubix_dskyng.asm):00383         ; SEND DSKY COMMAND BYTE IN REGISTER A
8D0A                  ( cubix_dskyng.asm):00384         DSKY_CMD:
8D0A 3402             ( cubix_dskyng.asm):00385                 PSHS    A
8D0C 8601             ( cubix_dskyng.asm):00386                 LDA     #$01
8D0E 7E8D15           ( cubix_dskyng.asm):00387                 JMP     DSKY_DOUT2
                      ( cubix_dskyng.asm):00388         ;
                      ( cubix_dskyng.asm):00389         ; SEND DSKY DATA BYTE IN REGISTER A
                      ( cubix_dskyng.asm):00390         ; TRASHES BC
                      ( cubix_dskyng.asm):00391         ;
8D11                  ( cubix_dskyng.asm):00392         DSKY_DOUT:
8D11 3402             ( cubix_dskyng.asm):00393                 PSHS    A
8D13 8600             ( cubix_dskyng.asm):00394                 LDA     #$00
                      ( cubix_dskyng.asm):00395         ;
8D15                  ( cubix_dskyng.asm):00396         DSKY_DOUT2:
                      ( cubix_dskyng.asm):00397         ; SET PPI LINE CONFIG TO WRITE MODE
8D15 BD8E07           ( cubix_dskyng.asm):00398                 JSR     DSKY_PPIWR
                      ( cubix_dskyng.asm):00399         ;
                      ( cubix_dskyng.asm):00400         ; SET ADDRESS FIRST
8D18 8A06             ( cubix_dskyng.asm):00401                 ORA     #DSKY_PPI_IDLE
8D1A B7DF8A           ( cubix_dskyng.asm):00402                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00403         ;
                      ( cubix_dskyng.asm):00404         ; ASSERT 8279 /CS
8D1D 8A18             ( cubix_dskyng.asm):00405                 ORA     #%00011000
8D1F B7DF8A           ( cubix_dskyng.asm):00406                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00407         ;
                      ( cubix_dskyng.asm):00408         ; PPIC WORKING VALUE TO DSKY_TEMP_VAL
8D22 B78E45           ( cubix_dskyng.asm):00409                 STA     DSKY_TEMP_VAL
                      ( cubix_dskyng.asm):00410         ;
                      ( cubix_dskyng.asm):00411         ; ASSERT DATA BYTE VALUE
8D25 3502             ( cubix_dskyng.asm):00412                 PULS    A
8D27 B7DF88           ( cubix_dskyng.asm):00413                 STA     DSKY_PPIA
                      ( cubix_dskyng.asm):00414         ;
                      ( cubix_dskyng.asm):00415         ; PULSE /WR
8D2A B68E45           ( cubix_dskyng.asm):00416                 LDA     DSKY_TEMP_VAL
8D2D 84FD             ( cubix_dskyng.asm):00417                 ANDA    #%11111101
8D2F B7DF8A           ( cubix_dskyng.asm):00418                 STA     DSKY_PPIC
8D32 12               ( cubix_dskyng.asm):00419                 NOP                                       ; MAY NOT BE NEEDED
8D33 8A02             ( cubix_dskyng.asm):00420                 ORA     #%00000010
8D35 B7DF8A           ( cubix_dskyng.asm):00421                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00422         ;
                      ( cubix_dskyng.asm):00423         ; DEASSERT /CS
8D38 84E7             ( cubix_dskyng.asm):00424                 ANDA    #%11100111
8D3A B7DF8A           ( cubix_dskyng.asm):00425                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00426         ;
                      ( cubix_dskyng.asm):00427         ; CLEAR ADDRESS BIT
8D3D 84E6             ( cubix_dskyng.asm):00428                 ANDA    #%11100110
8D3F B7DF8A           ( cubix_dskyng.asm):00429                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00430         ;
                      ( cubix_dskyng.asm):00431         ; DONE
8D42 BD8E32           ( cubix_dskyng.asm):00432                 JSR     DSKY_PPIIDLE
8D45 39               ( cubix_dskyng.asm):00433                 RTS
                      ( cubix_dskyng.asm):00434         ;
                      ( cubix_dskyng.asm):00435         ;==================================================================================================
                      ( cubix_dskyng.asm):00436         ; DSKYNG OUTPUT ROUTINES
                      ( cubix_dskyng.asm):00437         ;==================================================================================================
                      ( cubix_dskyng.asm):00438         ;
                      ( cubix_dskyng.asm):00439         ; RETURN DSKY STATUS VALUE IN A
                      ( cubix_dskyng.asm):00440         ;
8D46                  ( cubix_dskyng.asm):00441         DSKY_ST:
8D46 8601             ( cubix_dskyng.asm):00442                 LDA     #$01
8D48 7E8D4D           ( cubix_dskyng.asm):00443                 JMP     DSKY_DIN2
                      ( cubix_dskyng.asm):00444         ;
                      ( cubix_dskyng.asm):00445         ; RETURN NEXT DATA VALUE IN A
                      ( cubix_dskyng.asm):00446         ;
8D4B                  ( cubix_dskyng.asm):00447         DSKY_DIN:
8D4B 8600             ( cubix_dskyng.asm):00448                 LDA     #$00
                      ( cubix_dskyng.asm):00449         ;
8D4D                  ( cubix_dskyng.asm):00450         DSKY_DIN2:
                      ( cubix_dskyng.asm):00451         ; SET PPI LINE CONFIG TO READ MODE
8D4D BD8E1F           ( cubix_dskyng.asm):00452                 JSR     DSKY_PPIRD
                      ( cubix_dskyng.asm):00453         ;
                      ( cubix_dskyng.asm):00454         ; SET ADDRESS FIRST
8D50 8A06             ( cubix_dskyng.asm):00455                 ORA     #DSKY_PPI_IDLE
8D52 B7DF8A           ( cubix_dskyng.asm):00456                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00457         ;
                      ( cubix_dskyng.asm):00458         ; ASSERT 8279 /CS
8D55 8A18             ( cubix_dskyng.asm):00459                 ORA     #%00011000
8D57 B7DF8A           ( cubix_dskyng.asm):00460                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00461         ;
                      ( cubix_dskyng.asm):00462         ; ASSERT /RD
8D5A 847B             ( cubix_dskyng.asm):00463                 ANDA    #%01111011
8D5C B7DF8A           ( cubix_dskyng.asm):00464                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00465         ;
8D5F B78E45           ( cubix_dskyng.asm):00466                 STA     DSKY_TEMP_VAL
                      ( cubix_dskyng.asm):00467         ; GET VALUE
8D62 B6DF88           ( cubix_dskyng.asm):00468                 LDA     DSKY_PPIA
8D65 3402             ( cubix_dskyng.asm):00469                 PSHS    A
8D67 B68E45           ( cubix_dskyng.asm):00470                 LDA     DSKY_TEMP_VAL
                      ( cubix_dskyng.asm):00471         ; DEASSERT /RD
8D6A 8A04             ( cubix_dskyng.asm):00472                 ORA     #%00000100
8D6C B7DF8A           ( cubix_dskyng.asm):00473                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00474         ;
                      ( cubix_dskyng.asm):00475         ; DEASSERT /CS
8D6F 84E7             ( cubix_dskyng.asm):00476                 ANDA    #%11100111
8D71 B7DF8A           ( cubix_dskyng.asm):00477                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00478         ;
                      ( cubix_dskyng.asm):00479         ; CLEAR ADDRESS BIT
8D74 84E6             ( cubix_dskyng.asm):00480                 ANDA    #%11100110
8D76 B7DF8A           ( cubix_dskyng.asm):00481                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00482         ;
                      ( cubix_dskyng.asm):00483         ; DONE
8D79 BD8E32           ( cubix_dskyng.asm):00484                 JSR     DSKY_PPIIDLE
8D7C 3582             ( cubix_dskyng.asm):00485                 PULS    A,PC
                      ( cubix_dskyng.asm):00486         
                      ( cubix_dskyng.asm):00487         ;__DSKY_BLANK_____________________________________________________________________________________
                      ( cubix_dskyng.asm):00488         ;
                      ( cubix_dskyng.asm):00489         ; BLANK DSKYNG DISPLAY  (WITHOUT USING CLEAR)
                      ( cubix_dskyng.asm):00490         ;
                      ( cubix_dskyng.asm):00491         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00492         ;
8D7E                  ( cubix_dskyng.asm):00493         DSKY_BLANK:
8D7E 8690             ( cubix_dskyng.asm):00494                 LDA     #DSKY_CMD_WDSP
8D80 BD8D0A           ( cubix_dskyng.asm):00495                 JSR     DSKY_CMD
8D83 C610             ( cubix_dskyng.asm):00496                 LDB     #16
8D85                  ( cubix_dskyng.asm):00497         DSKY_BLANK1:
8D85 86FF             ( cubix_dskyng.asm):00498                 LDA     #$FF
8D87 BD8D11           ( cubix_dskyng.asm):00499                 JSR     DSKY_DOUT
8D8A 5A               ( cubix_dskyng.asm):00500                 DECB
8D8B 26F8             ( cubix_dskyng.asm):00501                 BNE     DSKY_BLANK1
8D8D 39               ( cubix_dskyng.asm):00502                 RTS
                      ( cubix_dskyng.asm):00503         ;
                      ( cubix_dskyng.asm):00504         ;__DSKY_PUTBYTE____________________________________________________________________________________
                      ( cubix_dskyng.asm):00505         ;
                      ( cubix_dskyng.asm):00506         ; WRITE A RAW BYTE VALUE TO DSKY DISPLAY RAM
                      ( cubix_dskyng.asm):00507         ; AT LOCATION IN REGISTER B, VALUE IN A.
                      ( cubix_dskyng.asm):00508         ;
                      ( cubix_dskyng.asm):00509         ;__________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00510         ;
8D8E                  ( cubix_dskyng.asm):00511         DSKY_PUTBYTE:
8D8E 3402             ( cubix_dskyng.asm):00512                 PSHS    A
8D90 1CFE             ( cubix_dskyng.asm):00513                 CLC
8D92 C990             ( cubix_dskyng.asm):00514                 ADCB    #DSKY_CMD_WDSP
8D94 1F98             ( cubix_dskyng.asm):00515                 TFR     B,A
8D96 BD8D0A           ( cubix_dskyng.asm):00516                 JSR     DSKY_CMD
8D99 3502             ( cubix_dskyng.asm):00517                 PULS    A
8D9B 88FF             ( cubix_dskyng.asm):00518                 EORA    #$FF
8D9D BD8D11           ( cubix_dskyng.asm):00519                 JSR     DSKY_DOUT
8DA0 39               ( cubix_dskyng.asm):00520                 RTS
                      ( cubix_dskyng.asm):00521         ;
                      ( cubix_dskyng.asm):00522         ;__DSKY_GETBYTE___________________________________________________________________________________
                      ( cubix_dskyng.asm):00523         ; READ A RAW BYTE VALUE FROM DSKY DISPLAY RAM
                      ( cubix_dskyng.asm):00524         ; AT LOCATION IN REGISTER B, VALUE RETURNED IN A
                      ( cubix_dskyng.asm):00525         ;
                      ( cubix_dskyng.asm):00526         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00527         ;
8DA1                  ( cubix_dskyng.asm):00528         DSKY_GETBYTE:
8DA1 1CFE             ( cubix_dskyng.asm):00529                 CLC
8DA3 C970             ( cubix_dskyng.asm):00530                 ADCB    #DSKY_CMD_RDSP
8DA5 1F98             ( cubix_dskyng.asm):00531                 TFR     B,A
8DA7 BD8D0A           ( cubix_dskyng.asm):00532                 JSR     DSKY_CMD
8DAA BD8D4B           ( cubix_dskyng.asm):00533                 JSR     DSKY_DIN
8DAD 88FF             ( cubix_dskyng.asm):00534                 EORA    #$FF
8DAF 39               ( cubix_dskyng.asm):00535                 RTS
                      ( cubix_dskyng.asm):00536         
                      ( cubix_dskyng.asm):00537         ;
                      ( cubix_dskyng.asm):00538         ;__DSKY_PUTLED____________________________________________________________________________________
                      ( cubix_dskyng.asm):00539         ;
                      ( cubix_dskyng.asm):00540         ;       This function is intended to update the LEDs.
                      ( cubix_dskyng.asm):00541         ;       VALUES SHOULD BE IN DSKY_BUF
                      ( cubix_dskyng.asm):00542         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00543         ;
8DB0                  ( cubix_dskyng.asm):00544         DSKY_PUTLED:
8DB0 3416             ( cubix_dskyng.asm):00545                 PSHS    A,B,X
8DB2 C600             ( cubix_dskyng.asm):00546                 LDB     #$00
8DB4 8E01EA           ( cubix_dskyng.asm):00547                 LDX     #DSKY_BUF
8DB7                  ( cubix_dskyng.asm):00548         DSKY_PUTLED_1:
8DB7 A684             ( cubix_dskyng.asm):00549                 LDA     ,X                                ; GET BYTE
8DB9 BD8D8E           ( cubix_dskyng.asm):00550                 JSR     DSKY_PUTBYTE                      ; SEND IT TO DSKY
8DBC 5C               ( cubix_dskyng.asm):00551                 INCB
8DBD 3001             ( cubix_dskyng.asm):00552                 INX
8DBF C108             ( cubix_dskyng.asm):00553                 CMPB    #8
8DC1 26F4             ( cubix_dskyng.asm):00554                 BNE     DSKY_PUTLED_1
8DC3 3596             ( cubix_dskyng.asm):00555                 PULS    A,B,X,PC
                      ( cubix_dskyng.asm):00556         
                      ( cubix_dskyng.asm):00557         ;
                      ( cubix_dskyng.asm):00558         ;__DSKY_BEEP______________________________________________________________________________________
                      ( cubix_dskyng.asm):00559         ;       This function is intended to beep the speaker on the DSKY
                      ( cubix_dskyng.asm):00560         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00561         ;
8DC5                  ( cubix_dskyng.asm):00562         DSKY_BEEP:
8DC5 3416             ( cubix_dskyng.asm):00563                 PSHS    A,B,X
8DC7 C60F             ( cubix_dskyng.asm):00564                 LDB     #$0F
8DC9 BD8DA1           ( cubix_dskyng.asm):00565                 JSR     DSKY_GETBYTE
8DCC 8A20             ( cubix_dskyng.asm):00566                 ORA     #$20
8DCE 8620             ( cubix_dskyng.asm):00567                 LDA     #$20
8DD0 C60F             ( cubix_dskyng.asm):00568                 LDB     #$0F
8DD2 BD8D8E           ( cubix_dskyng.asm):00569                 JSR     DSKY_PUTBYTE
                      ( cubix_dskyng.asm):00570         
8DD5 8E8FFF           ( cubix_dskyng.asm):00571                 LDX     #$8FFF
8DD8                  ( cubix_dskyng.asm):00572         DSKY_BEEP1:
8DD8 301F             ( cubix_dskyng.asm):00573                 DEX
8DDA 26FC             ( cubix_dskyng.asm):00574                 BNE     DSKY_BEEP1
                      ( cubix_dskyng.asm):00575         
8DDC C60F             ( cubix_dskyng.asm):00576                 LDB     #$0F
8DDE BD8DA1           ( cubix_dskyng.asm):00577                 JSR     DSKY_GETBYTE
8DE1 84DF             ( cubix_dskyng.asm):00578                 ANDA    #$DF
8DE3 86DF             ( cubix_dskyng.asm):00579                 LDA     #$DF
8DE5 C60F             ( cubix_dskyng.asm):00580                 LDB     #$0F
8DE7 BD8D8E           ( cubix_dskyng.asm):00581                 JSR     DSKY_PUTBYTE
8DEA 3596             ( cubix_dskyng.asm):00582                 PULS    A,B,X,PC
                      ( cubix_dskyng.asm):00583         
                      ( cubix_dskyng.asm):00584         ;___DSKYNG_DSPL______________________________________________________________________________________
                      ( cubix_dskyng.asm):00585         ;
                      ( cubix_dskyng.asm):00586         ;       This function is intended to turn on or off the DSKY L1 & L2 leds
                      ( cubix_dskyng.asm):00587         ;
                      ( cubix_dskyng.asm):00588         ;   A= On(1) or Off(0)
                      ( cubix_dskyng.asm):00589         ;   B= LED# (0 or 1)
                      ( cubix_dskyng.asm):00590         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00591         ;
8DEC                  ( cubix_dskyng.asm):00592         DSKY_DSPL:
8DEC 3406             ( cubix_dskyng.asm):00593                 PSHS    A,B
8DEE 1CFE             ( cubix_dskyng.asm):00594                 CLC
8DF0 C401             ( cubix_dskyng.asm):00595                 ANDB    #$01
8DF2 C90D             ( cubix_dskyng.asm):00596                 ADCB    #$0D
8DF4 BD8DA1           ( cubix_dskyng.asm):00597                 JSR     DSKY_GETBYTE
8DF7 8100             ( cubix_dskyng.asm):00598                 CMPA    #$00
8DF9 2705             ( cubix_dskyng.asm):00599                 BEQ     >
8DFB 8A20             ( cubix_dskyng.asm):00600                 ORA     #$20
8DFD 7E8E02           ( cubix_dskyng.asm):00601                 JMP     DSKY_DSPL_1
                      ( cubix_dskyng.asm):00602         !
8E00 84DF             ( cubix_dskyng.asm):00603                 ANDA    #$DF
8E02                  ( cubix_dskyng.asm):00604         DSKY_DSPL_1:
8E02 BD8D8E           ( cubix_dskyng.asm):00605                 JSR     DSKY_PUTBYTE
8E05 3586             ( cubix_dskyng.asm):00606                 PULS    A,B,PC
                      ( cubix_dskyng.asm):00607         ;
                      ( cubix_dskyng.asm):00608         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00609         ; DSKYNG LINE CONTROL ROUTINES
                      ( cubix_dskyng.asm):00610         ;
                      ( cubix_dskyng.asm):00611         ; SETUP PPI FOR WRITING: PUT PPI PORT A IN OUTPUT MODE
                      ( cubix_dskyng.asm):00612         ; AVOID REWRTING PPIX IF ALREADY IN OUTPUT MODE
                      ( cubix_dskyng.asm):00613         ;
                      ( cubix_dskyng.asm):00614         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00615         ;
8E07                  ( cubix_dskyng.asm):00616         DSKY_PPIWR:
8E07 3402             ( cubix_dskyng.asm):00617                 PSHS    A
                      ( cubix_dskyng.asm):00618         ;
                      ( cubix_dskyng.asm):00619         ; CHECK FOR WRITE MODE
8E09 B68E46           ( cubix_dskyng.asm):00620                 LDA     DSKY_PPIX_VAL
8E0C 8182             ( cubix_dskyng.asm):00621                 CMPA    #DSKY_PPIX_WR
8E0E 270D             ( cubix_dskyng.asm):00622                 BEQ     DSKY_PPIWR1
                      ( cubix_dskyng.asm):00623         ;
                      ( cubix_dskyng.asm):00624         ; SET PPI TO WRITE MODE
8E10 8682             ( cubix_dskyng.asm):00625                 LDA     #DSKY_PPIX_WR
8E12 B7DF8B           ( cubix_dskyng.asm):00626                 STA     DSKY_PPIX
8E15 B78E46           ( cubix_dskyng.asm):00627                 STA     DSKY_PPIX_VAL
                      ( cubix_dskyng.asm):00628         ;
                      ( cubix_dskyng.asm):00629         ; RESTORE PORT C (MAY NOT BE NEEDED)
8E18 8606             ( cubix_dskyng.asm):00630                 LDA     #DSKY_PPI_IDLE
8E1A B7DF8A           ( cubix_dskyng.asm):00631                 STA     DSKY_PPIC
                      ( cubix_dskyng.asm):00632         ;
8E1D                  ( cubix_dskyng.asm):00633         DSKY_PPIWR1:
                      ( cubix_dskyng.asm):00634         ;
8E1D 3582             ( cubix_dskyng.asm):00635                 PULS    A,PC
                      ( cubix_dskyng.asm):00636         
                      ( cubix_dskyng.asm):00637         ;
                      ( cubix_dskyng.asm):00638         ; SETUP PPI FOR READING: PUT PPI PORT A IN INPUT MODE
                      ( cubix_dskyng.asm):00639         ; AVOID REWRTING PPIX IF ALREADY IN INPUT MODE
                      ( cubix_dskyng.asm):00640         ;
8E1F                  ( cubix_dskyng.asm):00641         DSKY_PPIRD:
8E1F 3402             ( cubix_dskyng.asm):00642                 PSHS    A
                      ( cubix_dskyng.asm):00643         ;
                      ( cubix_dskyng.asm):00644         ; CHECK FOR READ MODE
8E21 B68E46           ( cubix_dskyng.asm):00645                 LDA     DSKY_PPIX_VAL
8E24 8192             ( cubix_dskyng.asm):00646                 CMPA    #DSKY_PPIX_RD
8E26 2708             ( cubix_dskyng.asm):00647                 BEQ     DSKY_PPIRD1
                      ( cubix_dskyng.asm):00648         ;
                      ( cubix_dskyng.asm):00649         ; SET PPI TO READ MODE
8E28 8692             ( cubix_dskyng.asm):00650                 LDA     #DSKY_PPIX_RD
8E2A B7DF8B           ( cubix_dskyng.asm):00651                 STA     DSKY_PPIX
8E2D B78E46           ( cubix_dskyng.asm):00652                 STA     DSKY_PPIX_VAL
                      ( cubix_dskyng.asm):00653         ;
8E30                  ( cubix_dskyng.asm):00654         DSKY_PPIRD1:
8E30 3582             ( cubix_dskyng.asm):00655                 PULS    A,PC
                      ( cubix_dskyng.asm):00656         
                      ( cubix_dskyng.asm):00657         ;
                      ( cubix_dskyng.asm):00658         ; RELEASE USE OF PPI
                      ( cubix_dskyng.asm):00659         ;
8E32                  ( cubix_dskyng.asm):00660         DSKY_PPIIDLE:
8E32 7E8E1F           ( cubix_dskyng.asm):00661                 JMP     DSKY_PPIRD                        ; SAME AS READ MODE
                      ( cubix_dskyng.asm):00662         ;
                      ( cubix_dskyng.asm):00663         ;__STORAGE_________________________________________________________________________________________
                      ( cubix_dskyng.asm):00664         ; CODES FOR NUMERICS
                      ( cubix_dskyng.asm):00665         ; HIGH BIT ALWAYS CLEAR TO SUPPRESS DECIMAL POINT
                      ( cubix_dskyng.asm):00666         ; SET HIGH BIT TO SHOW DECIMAL POINT
                      ( cubix_dskyng.asm):00667         ;_________________________________________________________________________________________________
                      ( cubix_dskyng.asm):00668         ;
8E35                  ( cubix_dskyng.asm):00669         DSKY_HEXMAP:
8E35 3F               ( cubix_dskyng.asm):00670                 .BYTE   $3F                               ; 0
8E36 06               ( cubix_dskyng.asm):00671                 .BYTE   $06                               ; 1
8E37 5B               ( cubix_dskyng.asm):00672                 .BYTE   $5B                               ; 2
8E38 4F               ( cubix_dskyng.asm):00673                 .BYTE   $4F                               ; 3
8E39 66               ( cubix_dskyng.asm):00674                 .BYTE   $66                               ; 4
8E3A 6D               ( cubix_dskyng.asm):00675                 .BYTE   $6D                               ; 5
8E3B 7D               ( cubix_dskyng.asm):00676                 .BYTE   $7D                               ; 6
8E3C 07               ( cubix_dskyng.asm):00677                 .BYTE   $07                               ; 7
8E3D 7F               ( cubix_dskyng.asm):00678                 .BYTE   $7F                               ; 8
8E3E 67               ( cubix_dskyng.asm):00679                 .BYTE   $67                               ; 9
8E3F 77               ( cubix_dskyng.asm):00680                 .BYTE   $77                               ; A
8E40 7C               ( cubix_dskyng.asm):00681                 .BYTE   $7C                               ; B
8E41 39               ( cubix_dskyng.asm):00682                 .BYTE   $39                               ; C
8E42 5E               ( cubix_dskyng.asm):00683                 .BYTE   $5E                               ; D
8E43 79               ( cubix_dskyng.asm):00684                 .BYTE   $79                               ; E
8E44 71               ( cubix_dskyng.asm):00685                 .BYTE   $71                               ; F
                      ( cubix_dskyng.asm):00686         ;
8E45                  ( cubix_dskyng.asm):00687         DSKY_TEMP_VAL:
8E45 00               ( cubix_dskyng.asm):00688                 .BYTE   0
8E46                  ( cubix_dskyng.asm):00689         DSKY_PPIX_VAL:
8E46 00               ( cubix_dskyng.asm):00690                 .BYTE   0
8E47                  ( cubix_dskyng.asm):00691         DSKY_PRESENT:
8E47 00               ( cubix_dskyng.asm):00692                 .BYTE   0
8E48                  ( cubix_dskyng.asm):00693         DSKYINITMSG:
8E48 5E1C5C5E6E547940 ( cubix_dskyng.asm):00694                 .BYTE   $5E,$1C,$5C,$5E,$6E,$54,$79,$40
                      ( cubix_dskyng.asm):00695         
8E50                  ( cubix_dskyng.asm):00696         DSKYMESSAGE1:
8E50 44534B593A00     ( cubix_dskyng.asm):00697                 FCN     "DSKY:"
8E56                  ( cubix_dskyng.asm):00698         DSKYMESSAGE2:
8E56 20494F3D307800   ( cubix_dskyng.asm):00699                 FCN     " IO=0x"
8E5D                  ( cubix_dskyng.asm):00700         DSKYMESSAGE3:
8E5D 204D4F44453D4E47 ( cubix_dskyng.asm):00701                 FCN     " MODE=NG"                        ; PRINT DSKY TYPE
     00
8E66                  ( cubix_dskyng.asm):00702         DSKYMESSAGE4:
8E66 204E4F5420505245 ( cubix_dskyng.asm):00703                 FCN     " NOT PRESENT"                    ; NOT PRESENT
     53454E5400
                      (     cubixdrv.asm):00096                 INCLUDE cubix_floppy.asm
                      ( cubix_floppy.asm):00001         ;__FLOPPY DRIVERS________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00002         ;
                      ( cubix_floppy.asm):00003         ;       CUBIX floppy drivers for DUODYNE FDC card
                      ( cubix_floppy.asm):00004         ;
                      ( cubix_floppy.asm):00005         ;       Entry points:
                      ( cubix_floppy.asm):00006         ;               FL_SETUP        - called during OS init
                      ( cubix_floppy.asm):00007         ;               FL_READ_SECTOR  - read a sector from drive
                      ( cubix_floppy.asm):00008         ;               FL_WRITE_SECTOR - write a sector to drive
                      ( cubix_floppy.asm):00009         ;
                      ( cubix_floppy.asm):00010         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00011         ;
                      ( cubix_floppy.asm):00012         ;*
                      ( cubix_floppy.asm):00013         ;* HARDWARE I/O ADDRESSES
                      ( cubix_floppy.asm):00014         ;*
     DF80             ( cubix_floppy.asm):00015         FDC_MSR         = $DF80                           ; ADDRESS OF MAIN STATUS REGISTER
     DF81             ( cubix_floppy.asm):00016         FDC_DATA        = $DF81                           ; FLOPPY DATA REGISTER
     DF83             ( cubix_floppy.asm):00017         FDC_RESET       = $DF83                           ; FLOPPY RESET
     DF85             ( cubix_floppy.asm):00018         FDC_DCR         = $DF85                           ; LOAD CONTROL REGISTER
     DF86             ( cubix_floppy.asm):00019         FDC_DOR         = $DF86                           ; CONFIGURATION CONTROL REGISTER
     DF87             ( cubix_floppy.asm):00020         FDC_TC          = $DF87                           ; TERMINAL COUNT
                      ( cubix_floppy.asm):00021         
                      ( cubix_floppy.asm):00022         ;
                      ( cubix_floppy.asm):00023         ; FDC COMMANDS
                      ( cubix_floppy.asm):00024         ;
     0006             ( cubix_floppy.asm):00025         CFD_READ        = %00000110                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     000C             ( cubix_floppy.asm):00026         CFD_READDEL     = %00001100                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     0005             ( cubix_floppy.asm):00027         CFD_WRITE       = %00000101                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     0009             ( cubix_floppy.asm):00028         CFD_WRITEDEL    = %00001001                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     0002             ( cubix_floppy.asm):00029         CFD_READTRK     = %00000010                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     000A             ( cubix_floppy.asm):00030         CFD_READID      = %00001010                       ; CMD,HDS/DS --> ST0,ST1,ST2,C,H,R,N
     000D             ( cubix_floppy.asm):00031         CFD_FMTTRK      = %00001101                       ; CMD,HDS/DS,N,SC,GPL,D --> ST0,ST1,ST2,C,H,R,N
     0011             ( cubix_floppy.asm):00032         CFD_SCANEQ      = %00010001                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
     0019             ( cubix_floppy.asm):00033         CFD_SCANLOEQ    = %00011001                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
     001D             ( cubix_floppy.asm):00034         CFD_SCANHIEQ    = %00011101                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
     0007             ( cubix_floppy.asm):00035         CFD_RECAL       = %00000111                       ; CMD,DS --> <EMPTY>
     0008             ( cubix_floppy.asm):00036         CFD_SENSEINT    = %00001000                       ; CMD --> ST0,PCN
     0003             ( cubix_floppy.asm):00037         CFD_SPECIFY     = %00000011                       ; CMD,SRT/HUT,HLT/ND --> <EMPTY>
     0004             ( cubix_floppy.asm):00038         CFD_DRVSTAT     = %00000100                       ; CMD,HDS/DS --> ST3
     000F             ( cubix_floppy.asm):00039         CFD_SEEK        = %00001111                       ; CMD,HDS/DS --> <EMPTY>
     0010             ( cubix_floppy.asm):00040         CFD_VERSION     = %00010000                       ; CMD --> ST0
                      ( cubix_floppy.asm):00041         
     0040             ( cubix_floppy.asm):00042         CFD_MFM         = %01000000                       ;
                      ( cubix_floppy.asm):00043         
                      ( cubix_floppy.asm):00044         ;
                      ( cubix_floppy.asm):00045         ;
                      ( cubix_floppy.asm):00046         ; Specify Command:
                      ( cubix_floppy.asm):00047         ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      ( cubix_floppy.asm):00048         ; |Byte |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |
                      ( cubix_floppy.asm):00049         ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      ( cubix_floppy.asm):00050         ; |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |  1  |
                      ( cubix_floppy.asm):00051         ; |  1  | ----- STEP RATE ----- | -- HEAD UNLOAD TIME - |
                      ( cubix_floppy.asm):00052         ; |  2  | ------------ HEAD LOAD TIME ----------- | NDM |
                      ( cubix_floppy.asm):00053         ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      ( cubix_floppy.asm):00054         ;
                      ( cubix_floppy.asm):00055         ;
                      ( cubix_floppy.asm):00056         ; Step Rate (milliseconds):              Head Unload Time (milliseconds):       Head Load Time (milliseconds):
                      ( cubix_floppy.asm):00057         ; +------+------+------+------+------+   +------+------+------+------+------+   +------+------+------+------+------+
                      ( cubix_floppy.asm):00058         ; |      |         BITRATE           |   |      |         BITRATE           |   |      |         BITRATE           |
                      ( cubix_floppy.asm):00059         ; |  VAL | 1.0M | 500K | 300K | 250K |   |  VAL | 1.0M | 500K | 300K | 250K |   |  VAL | 1.0M | 500K | 300K | 250K |
                      ( cubix_floppy.asm):00060         ; +------+------+------+------+------+   +------+------+------+------+------+   +------+------+------+------+------+
                      ( cubix_floppy.asm):00061         ; |    0 |  8.0 | 16.0 | 26.7 | 32.0 |   |    0 |  128 |  256 |  426 |  512 |   |    0 |  128 |  256 |  426 |  512 |
                      ( cubix_floppy.asm):00062         ; |    1 |  7.5 | 15.0 | 25.0 | 30.0 |   |    1 |    8 |   16 | 26.7 |   32 |   |    1 |    1 |    2 |  3.3 |    4 |
                      ( cubix_floppy.asm):00063         ; |    2 |  7.0 | 14.0 | 23.3 | 28.0 |   |    2 |   16 |   32 | 53.3 |   64 |   |    2 |    2 |    4 |  6.7 |    8 |
                      ( cubix_floppy.asm):00064         ; |  ... |  ... |  ... |  ... |  ... |   |  ... |  ... |  ... |  ... |  ... |   |  ... |  ... |  ... |  ... |  ... |
                      ( cubix_floppy.asm):00065         ; |   14 |  1.0 |  2.0 |  3.3 |  4.0 |   |   14 |  112 |  224 |  373 |  448 |   |  126 |  126 |  252 |  420 |  504 |
                      ( cubix_floppy.asm):00066         ; |   15 |  0.5 |  1.0 |  1.7 |  2.0 |   |   15 |  120 |  240 |  400 |  480 |   |  127 |  127 |  254 |  423 |  508 |
                      ( cubix_floppy.asm):00067         ; +------+------+------+------+------+   +------+------+------+------+------+   +------+------+------+------+------+
                      ( cubix_floppy.asm):00068         ;
                      ( cubix_floppy.asm):00069         ; IBM PS/2 CALLS FOR:
                      ( cubix_floppy.asm):00070         ;   STEP RATE: 3ms (6ms FOR ALL 41mm OR 720K DRIVES)
                      ( cubix_floppy.asm):00071         ;   HEAD LOAD TIME: 15ms
                      ( cubix_floppy.asm):00072         
     000C             ( cubix_floppy.asm):00073         DOR_INIT        = %00001100                       ; SOFT RESET INACTIVE, DMA ENABLED
     000C             ( cubix_floppy.asm):00074         DOR_BR250       = DOR_INIT
     000C             ( cubix_floppy.asm):00075         DOR_BR500       = DOR_INIT
                      ( cubix_floppy.asm):00076         
                      ( cubix_floppy.asm):00077         
                      ( cubix_floppy.asm):00078         
     0006             ( cubix_floppy.asm):00079         FLOPPY_RETRIES  = 6                               ; HOW ABOUT SIX RETIRES?
     0002             ( cubix_floppy.asm):00080         FLOPPY_RETRIES1 = 2                               ; TWO ITERATIONS OF RECAL?
                      ( cubix_floppy.asm):00081         
                      ( cubix_floppy.asm):00082         ;__FL_SETUP______________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00083         ;
                      ( cubix_floppy.asm):00084         ;       SETUP FLOPPY DRIVE SETTINGS
                      ( cubix_floppy.asm):00085         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00086         ;
8E73                  ( cubix_floppy.asm):00087         FL_SETUP:
8E73 BD991B           ( cubix_floppy.asm):00088                 JSR     LFCR                              ; CRLF
8E76 8E9215           ( cubix_floppy.asm):00089                 LDX     #FMESSAGE1
8E79 BD992F           ( cubix_floppy.asm):00090                 JSR     WRSTR                             ; DO PROMPT
                      ( cubix_floppy.asm):00091         ;
8E7C 8E921B           ( cubix_floppy.asm):00092                 LDX     #FMESSAGE2
8E7F BD992F           ( cubix_floppy.asm):00093                 JSR     WRSTR                             ; DO PROMPT
8E82 CCDF80           ( cubix_floppy.asm):00094                 LDD     #FDC_MSR                          ; GET BASE PORT
8E85 BD993B           ( cubix_floppy.asm):00095                 JSR     WRHEXW                            ; PRINT BASE PORT
8E88 BD9195           ( cubix_floppy.asm):00096                 JSR     FD_DETECT                         ; CHECK FOR FDC
8E8B 8100             ( cubix_floppy.asm):00097                 CMPA    #$00
8E8D 270C             ( cubix_floppy.asm):00098                 BEQ     >                                 ; CONTINUE IF FOUND
8E8F 8E9222           ( cubix_floppy.asm):00099                 LDX     #FMESSAGE3
8E92 BD992F           ( cubix_floppy.asm):00100                 JSR     WRSTR                             ; DO PROMPT
8E95 BD991B           ( cubix_floppy.asm):00101                 JSR     LFCR                              ; AND CRLF
8E98 86FF             ( cubix_floppy.asm):00102                 LDA     #$FF
8E9A 39               ( cubix_floppy.asm):00103                 RTS                                       ; BAIL OUT
                      ( cubix_floppy.asm):00104         !
8E9B 8E9231           ( cubix_floppy.asm):00105                 LDX     #FMESSAGE4
8E9E BD992F           ( cubix_floppy.asm):00106                 JSR     WRSTR                             ; DO PROMPT
8EA1 BD991B           ( cubix_floppy.asm):00107                 JSR     LFCR                              ; AND CRLF
8EA4 860C             ( cubix_floppy.asm):00108                 LDA     #DOR_INIT                         ; RESET SETTINGS
8EA6 B7DF86           ( cubix_floppy.asm):00109                 STA     FDC_DOR
                      ( cubix_floppy.asm):00110         
8EA9 BD9126           ( cubix_floppy.asm):00111                 JSR     CHECKINT                          ;
8EAC 8603             ( cubix_floppy.asm):00112                 LDA     #CFD_SPECIFY                      ; SPECIFY COMMAND
8EAE BD90CE           ( cubix_floppy.asm):00113                 JSR     PFDATA                            ; OUTPUT TO FDC
8EB1 867F             ( cubix_floppy.asm):00114                 LDA     #$7F                              ; 6 MS STEP, 480 MS HEAD UNLOAD
8EB3 BD90CE           ( cubix_floppy.asm):00115                 JSR     PFDATA                            ; OUTPUT TO FDC
8EB6 8605             ( cubix_floppy.asm):00116                 LDA     #$05                              ; 508 MS HEAD LOAD, NON-DMA MODE
8EB8 BD90CE           ( cubix_floppy.asm):00117                 JSR     PFDATA                            ; OUTPUT TO FDC
                      ( cubix_floppy.asm):00118         
8EBB BD9126           ( cubix_floppy.asm):00119                 JSR     CHECKINT                          ; SEND SEVERAL INTERRUPTS TO ENSURE PROPER STATE
8EBE BD9126           ( cubix_floppy.asm):00120                 JSR     CHECKINT                          ;
8EC1 BD9126           ( cubix_floppy.asm):00121                 JSR     CHECKINT                          ;
8EC4 BD9126           ( cubix_floppy.asm):00122                 JSR     CHECKINT                          ;
8EC7 BD9126           ( cubix_floppy.asm):00123                 JSR     CHECKINT                          ;
8ECA BD9126           ( cubix_floppy.asm):00124                 JSR     CHECKINT                          ;
                      ( cubix_floppy.asm):00125         
8ECD 8610             ( cubix_floppy.asm):00126                 LDA     #%00010000
8ECF B701E6           ( cubix_floppy.asm):00127                 STA     DSKUNIT
8ED2 BD90A4           ( cubix_floppy.asm):00128                 JSR     RECAL                             ;
8ED5 8627             ( cubix_floppy.asm):00129                 LDA     #39                               ;
8ED7 B701F9           ( cubix_floppy.asm):00130                 STA     CURRENTCYL                        ;
8EDA BD9087           ( cubix_floppy.asm):00131                 JSR     SETTRK1
8EDD BD90A4           ( cubix_floppy.asm):00132                 JSR     RECAL                             ;
                      ( cubix_floppy.asm):00133         
8EE0 8621             ( cubix_floppy.asm):00134                 LDA     #%00100001
8EE2 B701E6           ( cubix_floppy.asm):00135                 STA     DSKUNIT
8EE5 BD90A4           ( cubix_floppy.asm):00136                 JSR     RECAL                             ;
8EE8 8627             ( cubix_floppy.asm):00137                 LDA     #39                               ;
8EEA B701F9           ( cubix_floppy.asm):00138                 STA     CURRENTCYL                        ;
8EED BD9087           ( cubix_floppy.asm):00139                 JSR     SETTRK1
8EF0 BD90A4           ( cubix_floppy.asm):00140                 JSR     RECAL                             ;
8EF3 860C             ( cubix_floppy.asm):00141                 LDA     #DOR_INIT                         ; RESET SETTINGS
8EF5 B7DF86           ( cubix_floppy.asm):00142                 STA     FDC_DOR
8EF8 39               ( cubix_floppy.asm):00143                 RTS
                      ( cubix_floppy.asm):00144         
                      ( cubix_floppy.asm):00145         
                      ( cubix_floppy.asm):00146         ;__FL_READ_SECTOR________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00147         ;
                      ( cubix_floppy.asm):00148         ;       READ A FLOPPY SECTOR
                      ( cubix_floppy.asm):00149         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00150         ;
                      ( cubix_floppy.asm):00151         ;
8EF9                  ( cubix_floppy.asm):00152         FL_READ_SECTOR:
8EF9 B601E7           ( cubix_floppy.asm):00153                 LDA     FLOPPY_DETCT
8EFC 8100             ( cubix_floppy.asm):00154                 CMPA    #$00
8EFE 2701             ( cubix_floppy.asm):00155                 BEQ     >
8F00 39               ( cubix_floppy.asm):00156                 RTS
                      ( cubix_floppy.asm):00157         !
8F01 BD91FD           ( cubix_floppy.asm):00158                 JSR     GETDSKUNIT
8F04 860C             ( cubix_floppy.asm):00159                 LDA     #DOR_INIT
8F06 BA01E6           ( cubix_floppy.asm):00160                 ORA     DSKUNIT                           ; SET MOTOR ON
8F09 B7DF86           ( cubix_floppy.asm):00161                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
                      ( cubix_floppy.asm):00162         
8F0C 8600             ( cubix_floppy.asm):00163                 LDA     #$00
8F0E B701E8           ( cubix_floppy.asm):00164                 STA     FLRETRY                           ; BLANK RETRIES
8F11 B701E9           ( cubix_floppy.asm):00165                 STA     FLRETRY1
                      ( cubix_floppy.asm):00166         
8F14                  ( cubix_floppy.asm):00167         READFL1:
8F14 8646             ( cubix_floppy.asm):00168                 LDA     #CFD_READ|CFD_MFM                 ; BIT 6 SETS MFM, 06H IS READ COMMAND
8F16 B701E4           ( cubix_floppy.asm):00169                 STA     FCMD                              ; SET COMMAND
8F19 BD8F91           ( cubix_floppy.asm):00170                 JSR     DSKOP                             ; DO DISK OPERATION
                      ( cubix_floppy.asm):00171         
8F1C 8100             ( cubix_floppy.asm):00172                 CMPA    #$00
8F1E 2722             ( cubix_floppy.asm):00173                 BEQ     READFLDONE                        ; OPERATION SUCCESSFUL
8F20 7C01E8           ( cubix_floppy.asm):00174                 INC     FLRETRY                           ; LET'S RETRY
8F23 B601E8           ( cubix_floppy.asm):00175                 LDA     FLRETRY
8F26 8106             ( cubix_floppy.asm):00176                 CMPA    #FLOPPY_RETRIES
8F28 26EA             ( cubix_floppy.asm):00177                 BNE     READFL1
8F2A BD90A4           ( cubix_floppy.asm):00178                 JSR     RECAL                             ; AFTER X RETRIES, LET'S RECAL THE HEAD
8F2D BD9075           ( cubix_floppy.asm):00179                 JSR     SETTRACK                          ;
8F30 8600             ( cubix_floppy.asm):00180                 LDA     #$00                              ;
8F32 B701E8           ( cubix_floppy.asm):00181                 STA     FLRETRY                           ; MORE RETRIES!
8F35 7C01E9           ( cubix_floppy.asm):00182                 INC     FLRETRY1
8F38 B601E9           ( cubix_floppy.asm):00183                 LDA     FLRETRY1
8F3B 8102             ( cubix_floppy.asm):00184                 CMPA    #FLOPPY_RETRIES1
8F3D 26D5             ( cubix_floppy.asm):00185                 BNE     READFL1
8F3F 86FF             ( cubix_floppy.asm):00186                 LDA     #$FF                              ; A = 0 ON RETURN = OPERATION OK
8F41 39               ( cubix_floppy.asm):00187                 RTS                                       ; A = $FF ON RETURN = OPERATION ERROR
8F42                  ( cubix_floppy.asm):00188         READFLDONE:
8F42 8600             ( cubix_floppy.asm):00189                 LDA     #$00                              ; A = 0 ON RETURN = OPERATION OK
8F44 39               ( cubix_floppy.asm):00190                 RTS
                      ( cubix_floppy.asm):00191         
                      ( cubix_floppy.asm):00192         ;__FL_WRITE_SECTOR_______________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00193         ;
                      ( cubix_floppy.asm):00194         ;       WRITE A FLOPPY SECTOR
                      ( cubix_floppy.asm):00195         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00196         ;
8F45                  ( cubix_floppy.asm):00197         FL_WRITE_SECTOR:
8F45 B601E7           ( cubix_floppy.asm):00198                 LDA     FLOPPY_DETCT
8F48 8100             ( cubix_floppy.asm):00199                 CMPA    #$00
8F4A 2701             ( cubix_floppy.asm):00200                 BEQ     >
8F4C 39               ( cubix_floppy.asm):00201                 RTS
                      ( cubix_floppy.asm):00202         !
8F4D BD91FD           ( cubix_floppy.asm):00203                 JSR     GETDSKUNIT
8F50 860C             ( cubix_floppy.asm):00204                 LDA     #DOR_INIT
8F52 BA01E6           ( cubix_floppy.asm):00205                 ORA     DSKUNIT                           ; SET MOTOR ON
8F55 B7DF86           ( cubix_floppy.asm):00206                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
                      ( cubix_floppy.asm):00207         
8F58 8600             ( cubix_floppy.asm):00208                 LDA     #$00
8F5A B701E8           ( cubix_floppy.asm):00209                 STA     FLRETRY                           ; BLANK RETRIES
8F5D B701E9           ( cubix_floppy.asm):00210                 STA     FLRETRY1
                      ( cubix_floppy.asm):00211         
8F60                  ( cubix_floppy.asm):00212         WRITEFL1:
8F60 8645             ( cubix_floppy.asm):00213                 LDA     #CFD_WRITE|CFD_MFM                ; BIT 6 SETS MFM, 05H IS WRITE COMMAND
8F62 B701E4           ( cubix_floppy.asm):00214                 STA     FCMD
8F65 BD8F91           ( cubix_floppy.asm):00215                 JSR     DSKOP
                      ( cubix_floppy.asm):00216         
8F68 8100             ( cubix_floppy.asm):00217                 CMPA    #$00
8F6A 2722             ( cubix_floppy.asm):00218                 BEQ     WRITEFLDONE
8F6C 7C01E8           ( cubix_floppy.asm):00219                 INC     FLRETRY
8F6F B601E8           ( cubix_floppy.asm):00220                 LDA     FLRETRY
8F72 8106             ( cubix_floppy.asm):00221                 CMPA    #FLOPPY_RETRIES
8F74 26EA             ( cubix_floppy.asm):00222                 BNE     WRITEFL1
8F76 BD90A4           ( cubix_floppy.asm):00223                 JSR     RECAL
8F79 BD9075           ( cubix_floppy.asm):00224                 JSR     SETTRACK
8F7C 8600             ( cubix_floppy.asm):00225                 LDA     #$00
8F7E B701E8           ( cubix_floppy.asm):00226                 STA     FLRETRY
8F81 7C01E9           ( cubix_floppy.asm):00227                 INC     FLRETRY1
8F84 B601E9           ( cubix_floppy.asm):00228                 LDA     FLRETRY1
8F87 8102             ( cubix_floppy.asm):00229                 CMPA    #FLOPPY_RETRIES1
8F89 26D5             ( cubix_floppy.asm):00230                 BNE     WRITEFL1
8F8B 86FF             ( cubix_floppy.asm):00231                 LDA     #$FF                              ; INVALIDATE CACHE
8F8D 39               ( cubix_floppy.asm):00232                 RTS                                       ; A = $FF ON RETURN = OPERATION ERROR
8F8E                  ( cubix_floppy.asm):00233         WRITEFLDONE:
8F8E 8600             ( cubix_floppy.asm):00234                 LDA     #$00                              ; A = 0 ON RETURN = OPERATION OK
8F90 39               ( cubix_floppy.asm):00235                 RTS
                      ( cubix_floppy.asm):00236         
                      ( cubix_floppy.asm):00237         
                      ( cubix_floppy.asm):00238         ;__DSKOP__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00239         ;
                      ( cubix_floppy.asm):00240         ;       PERFORM A DISK OPERATION
                      ( cubix_floppy.asm):00241         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00242         ;
8F91                  ( cubix_floppy.asm):00243         DSKOP:
8F91 BD9126           ( cubix_floppy.asm):00244                 JSR     CHECKINT                          ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
8F94 81FF             ( cubix_floppy.asm):00245                 CMPA    #$FF                              ; DID IT RETURN WITH ERROR CODE?
8F96 2710             ( cubix_floppy.asm):00246                 BEQ     DSKEXIT                           ; IF YES, EXIT WITH ERROR CODE
                      ( cubix_floppy.asm):00247         ;
8F98 BD9075           ( cubix_floppy.asm):00248                 JSR     SETTRACK                          ; PERFORM SEEK TO TRACK
                      ( cubix_floppy.asm):00249         ;
8F9B B601E4           ( cubix_floppy.asm):00250                 LDA     FCMD                              ; WHAT COMMAND IS PENDING?
8F9E 8146             ( cubix_floppy.asm):00251                 CMPA    #CFD_READ|CFD_MFM                 ; IS IT A READ COMMAND?
8FA0 2603             ( cubix_floppy.asm):00252                 BNE     GWRR_POLL                         ;
8FA2 7E901B           ( cubix_floppy.asm):00253                 JMP     RDD_POLL                          ;
8FA5                  ( cubix_floppy.asm):00254         GWRR_POLL:
8FA5 7E9053           ( cubix_floppy.asm):00255                 JMP     WRR_POLL                          ;
8FA8                  ( cubix_floppy.asm):00256         DSKEXIT:
8FA8 8600             ( cubix_floppy.asm):00257                 LDA     #0                                ; SET MOTOR OFF
8FAA B7DF86           ( cubix_floppy.asm):00258                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
8FAD 86FF             ( cubix_floppy.asm):00259                 LDA     #$FF                              ; SET IF ERROR
8FAF 39               ( cubix_floppy.asm):00260                 RTS
                      ( cubix_floppy.asm):00261         
8FB0                  ( cubix_floppy.asm):00262         SNDFDWR:
                      ( cubix_floppy.asm):00263         ;
8FB0 B601FB           ( cubix_floppy.asm):00264                 LDA     CURRENTDEVICE
8FB3 B701F3           ( cubix_floppy.asm):00265                 STA     DSKY_HEXBUF
8FB6 B601F8           ( cubix_floppy.asm):00266                 LDA     CURRENTHEAD
8FB9 B701F4           ( cubix_floppy.asm):00267                 STA     DSKY_HEXBUF+1
8FBC B601F9           ( cubix_floppy.asm):00268                 LDA     CURRENTCYL                        ;
8FBF B701F5           ( cubix_floppy.asm):00269                 STA     DSKY_HEXBUF+2
8FC2 B601FA           ( cubix_floppy.asm):00270                 LDA     CURRENTSEC                        ;
8FC5 B701F6           ( cubix_floppy.asm):00271                 STA     DSKY_HEXBUF+3
8FC8 BD8CAC           ( cubix_floppy.asm):00272                 JSR     DSKY_BIN2SEG
8FCB BD8CF3           ( cubix_floppy.asm):00273                 JSR     DSKY_SHOW
                      ( cubix_floppy.asm):00274         ;
8FCE 1CFE             ( cubix_floppy.asm):00275                 CLC
8FD0 B601E6           ( cubix_floppy.asm):00276                 LDA     DSKUNIT                           ; GET DISK UNIT NUMBER
8FD3 8401             ( cubix_floppy.asm):00277                 ANDA    #$01                              ; MASK FOR TWO DRIVES.
8FD5 B79214           ( cubix_floppy.asm):00278                 STA     TMPSTORAGE                        ; PARK IT IN TEMP
8FD8 B601F8           ( cubix_floppy.asm):00279                 LDA     CURRENTHEAD                       ; GET HEAD SELECTION
8FDB 8401             ( cubix_floppy.asm):00280                 ANDA    #$01                              ; INSURE SINGLE BIT
8FDD 48               ( cubix_floppy.asm):00281                 ASLA                                      ;
8FDE 48               ( cubix_floppy.asm):00282                 ASLA                                      ; MOVE HEAD TO BIT 2 POSITION
8FDF BA9214           ( cubix_floppy.asm):00283                 ORA     TMPSTORAGE                        ; OR HEAD TO UNIT BYTE IN COMMAND BLOCK
8FE2 B79214           ( cubix_floppy.asm):00284                 STA     TMPSTORAGE                        ; STORE IN UNIT
8FE5 B601E4           ( cubix_floppy.asm):00285                 LDA     FCMD                              ;
8FE8 BD90CE           ( cubix_floppy.asm):00286                 JSR     PFDATA                            ; PUSH COMMAND TO I8272
8FEB B69214           ( cubix_floppy.asm):00287                 LDA     TMPSTORAGE                        ;
8FEE BD90CE           ( cubix_floppy.asm):00288                 JSR     PFDATA                            ;
8FF1 B601F9           ( cubix_floppy.asm):00289                 LDA     CURRENTCYL                        ;
8FF4 BD90CE           ( cubix_floppy.asm):00290                 JSR     PFDATA                            ;
8FF7 B601F8           ( cubix_floppy.asm):00291                 LDA     CURRENTHEAD                       ;
8FFA BD90CE           ( cubix_floppy.asm):00292                 JSR     PFDATA                            ;
8FFD 1CFE             ( cubix_floppy.asm):00293                 CLC                                       ;
8FFF B601FA           ( cubix_floppy.asm):00294                 LDA     CURRENTSEC                        ;
9002 4C               ( cubix_floppy.asm):00295                 INCA                                      ;
9003 BD90CE           ( cubix_floppy.asm):00296                 JSR     PFDATA                            ;
9006 8602             ( cubix_floppy.asm):00297                 LDA     #$02                              ;
9008 BD90CE           ( cubix_floppy.asm):00298                 JSR     PFDATA                            ; WHAT DENSITY
900B 8609             ( cubix_floppy.asm):00299                 LDA     #$09                              ;
900D BD90CE           ( cubix_floppy.asm):00300                 JSR     PFDATA                            ; ASSUME SC (SECTOR COUNT)  EOT
9010 861B             ( cubix_floppy.asm):00301                 LDA     #$1B                              ;
9012 BD90CE           ( cubix_floppy.asm):00302                 JSR     PFDATA                            ; WHAT GAP IS NEEDED
9015 86FF             ( cubix_floppy.asm):00303                 LDA     #$FF                              ; DTL, IS THE LAST COMMAND BYTE TO I8272
9017 BD9107           ( cubix_floppy.asm):00304                 JSR     PFDATAS
901A 39               ( cubix_floppy.asm):00305                 RTS
                      ( cubix_floppy.asm):00306         
                      ( cubix_floppy.asm):00307         
                      ( cubix_floppy.asm):00308         ; PERFORM READ
                      ( cubix_floppy.asm):00309         ; FROM READ TO READ MUST NOT EXCEED 25US WORST CASE MIN. (AT 2MHZ IS 2,000,000 CYCLES PER SECOND == 50 CYCLE BUDGET.)
                      ( cubix_floppy.asm):00310         ;
901B                  ( cubix_floppy.asm):00311         RDD_POLL:
901B BD8FB0           ( cubix_floppy.asm):00312                 JSR     SNDFDWR                           ;
901E 108E0000         ( cubix_floppy.asm):00313                 LDY     #$0000
9022                  ( cubix_floppy.asm):00314         RDS1:
9022 B6DF80           ( cubix_floppy.asm):00315                 LDA     FDC_MSR                           ; GET STATUS  (4 CYCLES)
9025 2AFB             ( cubix_floppy.asm):00316                 BPL     RDS1                              ; FDC IS NOT READY, WAIT FOR IT (UP TO 4 CYCLES)
9027 8420             ( cubix_floppy.asm):00317                 ANDA    #%00100000                        ; EXECUTION MODE? (2 CYCLES)
9029 270F             ( cubix_floppy.asm):00318                 BEQ     DSKOPEND                          ; NO, ERROR
902B                  ( cubix_floppy.asm):00319         RDS1A:
902B B6DF81           ( cubix_floppy.asm):00320                 LDA     FDC_DATA                          ; GET DATA (4 CYCLES)
902E A7A90300         ( cubix_floppy.asm):00321                 STA     HSTBUF,Y                          ; WRITE IT (5 CYCLES)
9032 3121             ( cubix_floppy.asm):00322                 INY                                       ; (2 CYCLES)
9034 108C0200         ( cubix_floppy.asm):00323                 CMPY    #$0200
9038 26E8             ( cubix_floppy.asm):00324                 BNE     RDS1                              ; KEEP GOING (UP TO 4 CYCLES)   TOTAL =
903A                  ( cubix_floppy.asm):00325         DSKOPEND:
903A B6DF87           ( cubix_floppy.asm):00326                 LDA     FDC_TC
903D BD91E4           ( cubix_floppy.asm):00327                 JSR     FDDELAY
                      ( cubix_floppy.asm):00328         ;
9040 BD9175           ( cubix_floppy.asm):00329                 JSR     GFDATA                            ;GET ERROR TYPE
9043 B701E5           ( cubix_floppy.asm):00330                 STA     FLERR
                      ( cubix_floppy.asm):00331         ;* CLEAR OUT ANY REMAINING DATA
9046                  ( cubix_floppy.asm):00332         RESUL3:
9046 BD9175           ( cubix_floppy.asm):00333                 JSR     GFDATA                            ;READ BYTE FROM FDC
9049 8100             ( cubix_floppy.asm):00334                 CMPA    #$00
904B 26F9             ( cubix_floppy.asm):00335                 BNE     RESUL3                            ;CLEAR THEM ALL
904D B601E5           ( cubix_floppy.asm):00336                 LDA     FLERR                             ;
9050 84C0             ( cubix_floppy.asm):00337                 ANDA    #%11000000                        ;
9052 39               ( cubix_floppy.asm):00338                 RTS
                      ( cubix_floppy.asm):00339         
                      ( cubix_floppy.asm):00340         
9053                  ( cubix_floppy.asm):00341         WRR_POLL:
9053 BD8FB0           ( cubix_floppy.asm):00342                 JSR     SNDFDWR                           ;
9056 108E0000         ( cubix_floppy.asm):00343                 LDY     #$0000
905A                  ( cubix_floppy.asm):00344         WRS1:
                      ( cubix_floppy.asm):00345         ;
905A B6DF80           ( cubix_floppy.asm):00346                 LDA     FDC_MSR                           ; GET STATUS
905D 2AFB             ( cubix_floppy.asm):00347                 BPL     WRS1                              ; NOT READY
905F 8420             ( cubix_floppy.asm):00348                 ANDA    #%00100000                        ; EXECUTION MODE?
9061 270F             ( cubix_floppy.asm):00349                 BEQ     WRS3                              ; NO, ERROR
9063 A6A90300         ( cubix_floppy.asm):00350                 LDA     HSTBUF,Y                          ; WRITE IT
9067 B7DF81           ( cubix_floppy.asm):00351                 STA     FDC_DATA                          ; WRITE TO FDC
906A 3121             ( cubix_floppy.asm):00352                 INY
906C 108C0200         ( cubix_floppy.asm):00353                 CMPY    #$0200
9070 26E8             ( cubix_floppy.asm):00354                 BNE     WRS1                              ; DO NEXT
9072                  ( cubix_floppy.asm):00355         WRS3:
9072 7E903A           ( cubix_floppy.asm):00356                 JMP     DSKOPEND                          ;
                      ( cubix_floppy.asm):00357         
                      ( cubix_floppy.asm):00358         
                      ( cubix_floppy.asm):00359         ;__SETTRACK__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00360         ;
                      ( cubix_floppy.asm):00361         ;       SEEK TO A TRACK ON GIVEN UNIT
                      ( cubix_floppy.asm):00362         ;       A: TRACK #
                      ( cubix_floppy.asm):00363         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00364         ;
9075                  ( cubix_floppy.asm):00365         SETTRACK:
9075 860C             ( cubix_floppy.asm):00366                 LDA     #DOR_INIT
9077 BA01E6           ( cubix_floppy.asm):00367                 ORA     DSKUNIT                           ; SET MOTOR ON
907A B7DF86           ( cubix_floppy.asm):00368                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
                      ( cubix_floppy.asm):00369         
                      ( cubix_floppy.asm):00370         ; ANY INTERUPT PENDING
                      ( cubix_floppy.asm):00371         ; IF YES FIND OUT WHY/CLEAR
907D BD9126           ( cubix_floppy.asm):00372                 JSR     CHECKINT                          ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
9080 81FF             ( cubix_floppy.asm):00373                 CMPA    #$FF                              ; DID IT RTSURN WITH ERROR CODE?
9082 2603             ( cubix_floppy.asm):00374                 BNE     SETTRK1
9084 7E90CD           ( cubix_floppy.asm):00375                 JMP     SETTRKEXIT                        ;
                      ( cubix_floppy.asm):00376         
                      ( cubix_floppy.asm):00377         ;
9087                  ( cubix_floppy.asm):00378         SETTRK1:
9087 B601F9           ( cubix_floppy.asm):00379                 LDA     CURRENTCYL                        ; GET TRACK
908A 8100             ( cubix_floppy.asm):00380                 CMPA    #$00                              ;
908C 2716             ( cubix_floppy.asm):00381                 BEQ     RECAL                             ; IF 0 PERFORM RECAL INSTEAD OF SEEK
908E 860F             ( cubix_floppy.asm):00382                 LDA     #CFD_SEEK                         ; SEEK COMMAND
9090 BD90CE           ( cubix_floppy.asm):00383                 JSR     PFDATA                            ; PUSH COMMAND
9093 B601E6           ( cubix_floppy.asm):00384                 LDA     DSKUNIT                           ; SAY WHICH UNIT
9096 8401             ( cubix_floppy.asm):00385                 ANDA    #$01
9098 BD90CE           ( cubix_floppy.asm):00386                 JSR     PFDATA                            ; SEND THAT
909B B601F9           ( cubix_floppy.asm):00387                 LDA     CURRENTCYL                        ; TO WHAT TRACK
909E BD90CE           ( cubix_floppy.asm):00388                 JSR     PFDATA                            ; SEND THAT TOO
90A1 7E90B9           ( cubix_floppy.asm):00389                 JMP     WAINT                             ; WAIT FOR INTERRUPT SAYING DONE
90A4                  ( cubix_floppy.asm):00390         RECAL:
90A4 860C             ( cubix_floppy.asm):00391                 LDA     #DOR_INIT
90A6 BA01E6           ( cubix_floppy.asm):00392                 ORA     DSKUNIT                           ; SET MOTOR ON
90A9 B7DF86           ( cubix_floppy.asm):00393                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
90AC 8607             ( cubix_floppy.asm):00394                 LDA     #CFD_RECAL                        ; RECAL TO TRACK 0
90AE BD90CE           ( cubix_floppy.asm):00395                 JSR     PFDATA                            ; SEND IT
90B1 B601E6           ( cubix_floppy.asm):00396                 LDA     DSKUNIT                           ; SAY WHICH UNIT
90B4 8401             ( cubix_floppy.asm):00397                 ANDA    #$01
90B6 BD90CE           ( cubix_floppy.asm):00398                 JSR     PFDATA                            ; SEND THAT TOO
                      ( cubix_floppy.asm):00399         ;
90B9                  ( cubix_floppy.asm):00400         WAINT:
90B9 3412             ( cubix_floppy.asm):00401                 PSHS    A,X
90BB 8E0064           ( cubix_floppy.asm):00402                 LDX     #100
90BE BD91ED           ( cubix_floppy.asm):00403                 JSR     FDVDELAY
90C1 3512             ( cubix_floppy.asm):00404                 PULS    A,X
                      ( cubix_floppy.asm):00405         !
90C3 BD9126           ( cubix_floppy.asm):00406                 JSR     CHECKINT
90C6 B6DF80           ( cubix_floppy.asm):00407                 LDA     FDC_MSR                           ; READ SEEK STATUS
90C9 840F             ( cubix_floppy.asm):00408                 ANDA    #%00001111                        ; ANY DRIVES SEEKING?
90CB 26F6             ( cubix_floppy.asm):00409                 BNE     <                                 ; YES, WAIT FOR THEM
                      ( cubix_floppy.asm):00410         ;
90CD                  ( cubix_floppy.asm):00411         SETTRKEXIT:
90CD 39               ( cubix_floppy.asm):00412                 RTS
                      ( cubix_floppy.asm):00413         
                      ( cubix_floppy.asm):00414         ;__PFDATA__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00415         ;
                      ( cubix_floppy.asm):00416         ; WRITE A COMMAND OR PARAMETER SEQUENCE
                      ( cubix_floppy.asm):00417         ;
                      ( cubix_floppy.asm):00418         ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
                      ( cubix_floppy.asm):00419         ;       RQM  DIO
                      ( cubix_floppy.asm):00420         ;       0       0       BUSY
                      ( cubix_floppy.asm):00421         ;       1       0       WRITE TO DATA REGISTER PERMITTED
                      ( cubix_floppy.asm):00422         ;       1       1       BYTE FOR READ BY HOST PENDING
                      ( cubix_floppy.asm):00423         ;       0       1       BUSY
                      ( cubix_floppy.asm):00424         ;
                      ( cubix_floppy.asm):00425         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00426         ;
90CE                  ( cubix_floppy.asm):00427         PFDATA:
90CE 3402             ( cubix_floppy.asm):00428                 PSHS    A                                 ; SAVE DATA BYTE
90D0 108E0000         ( cubix_floppy.asm):00429                 LDY     #$0000
90D4                  ( cubix_floppy.asm):00430         WRF1:
90D4 B6DF80           ( cubix_floppy.asm):00431                 LDA     FDC_MSR                           ; READ FDC STATUS
90D7 B79214           ( cubix_floppy.asm):00432                 STA     TMPSTORAGE
90DA 8480             ( cubix_floppy.asm):00433                 ANDA    #$80                              ;
90DC 260D             ( cubix_floppy.asm):00434                 BNE     >
90DE 3121             ( cubix_floppy.asm):00435                 INY
90E0 108C0100         ( cubix_floppy.asm):00436                 CMPY    #$0100
90E4 26EE             ( cubix_floppy.asm):00437                 BNE     WRF1                              ; FDC IS NOT READY, WAIT FOR IT
90E6 3502             ( cubix_floppy.asm):00438                 PULS    A
90E8 86FF             ( cubix_floppy.asm):00439                 LDA     #$FF
90EA 39               ( cubix_floppy.asm):00440                 RTS
                      ( cubix_floppy.asm):00441         !
90EB B69214           ( cubix_floppy.asm):00442                 LDA     TMPSTORAGE
90EE 8440             ( cubix_floppy.asm):00443                 ANDA    #$40                              ; TEST DIO BIT
90F0 260F             ( cubix_floppy.asm):00444                 BNE     WRF2                              ; FDC IS OUT OF SYNC
90F2 3502             ( cubix_floppy.asm):00445                 PULS    A                                 ; RESTORE DATA
90F4 B7DF81           ( cubix_floppy.asm):00446                 STA     FDC_DATA                          ; WRITE TO FDC
90F7 BD91E4           ( cubix_floppy.asm):00447                 JSR     FDDELAY
90FA BD91E4           ( cubix_floppy.asm):00448                 JSR     FDDELAY
90FD BD91E4           ( cubix_floppy.asm):00449                 JSR     FDDELAY
9100 39               ( cubix_floppy.asm):00450                 RTS
                      ( cubix_floppy.asm):00451         ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
9101                  ( cubix_floppy.asm):00452         WRF2:
9101 B6DF81           ( cubix_floppy.asm):00453                 LDA     FDC_DATA                          ; READ DATA REGISTER
9104 7E90D4           ( cubix_floppy.asm):00454                 JMP     WRF1                              ; AND CONTINUE
                      ( cubix_floppy.asm):00455         
                      ( cubix_floppy.asm):00456         ;__PFDATAS_________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00457         ;
                      ( cubix_floppy.asm):00458         ; WRITE A COMMAND OR PARAMETER SEQUENCE (NO PAUSE)
                      ( cubix_floppy.asm):00459         ;
                      ( cubix_floppy.asm):00460         ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
                      ( cubix_floppy.asm):00461         ;       RQM  DIO
                      ( cubix_floppy.asm):00462         ;       0       0       BUSY
                      ( cubix_floppy.asm):00463         ;       1       0       WRITE TO DATA REGISTER PERMITTED
                      ( cubix_floppy.asm):00464         ;       1       1       BYTE FOR READ BY HOST PENDING
                      ( cubix_floppy.asm):00465         ;       0       1       BUSY
                      ( cubix_floppy.asm):00466         ;
                      ( cubix_floppy.asm):00467         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00468         ;
9107                  ( cubix_floppy.asm):00469         PFDATAS:
9107 3402             ( cubix_floppy.asm):00470                 PSHS    A                                 ; SAVE DATA BYTE
9109                  ( cubix_floppy.asm):00471         WRF1S:
9109 B6DF80           ( cubix_floppy.asm):00472                 LDA     FDC_MSR                           ; READ FDC STATUS
910C B79214           ( cubix_floppy.asm):00473                 STA     TMPSTORAGE
910F 8480             ( cubix_floppy.asm):00474                 ANDA    #$80                              ;
9111 27F6             ( cubix_floppy.asm):00475                 BEQ     WRF1S                             ; FDC IS NOT READY, WAIT FOR IT
9113 B69214           ( cubix_floppy.asm):00476                 LDA     TMPSTORAGE
9116 8440             ( cubix_floppy.asm):00477                 ANDA    #$40                              ; TEST DIO BIT
9118 2606             ( cubix_floppy.asm):00478                 BNE     WRF2S                             ; FDC IS OUT OF SYNC
911A 3502             ( cubix_floppy.asm):00479                 PULS    A                                 ; RESTORE DATA
911C B7DF81           ( cubix_floppy.asm):00480                 STA     FDC_DATA                          ; WRITE TO FDC
911F 39               ( cubix_floppy.asm):00481                 RTS
                      ( cubix_floppy.asm):00482         ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
9120                  ( cubix_floppy.asm):00483         WRF2S:
9120 B6DF81           ( cubix_floppy.asm):00484                 LDA     FDC_DATA                          ; READ DATA REGISTER
9123 7E9109           ( cubix_floppy.asm):00485                 JMP     WRF1S                             ; AND CONTINUE
                      ( cubix_floppy.asm):00486         
                      ( cubix_floppy.asm):00487         
                      ( cubix_floppy.asm):00488         
                      ( cubix_floppy.asm):00489         ;__CHECKINT__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00490         ;
                      ( cubix_floppy.asm):00491         ; CHECK FOR ACTIVE FDC INTERRUPTS BEFORE GIVING I8272 COMMANDS
                      ( cubix_floppy.asm):00492         ; POLL RQM FOR WHEN NOT BUSY AND THEN SEND FDC
                      ( cubix_floppy.asm):00493         ; SENSE INTERRUPT COMMAND.  IF IT RTSURNS WITH NON ZERO
                      ( cubix_floppy.asm):00494         ; ERROR CODE, PASS BACK TO JSRING ROUTINE FOR HANDLING
                      ( cubix_floppy.asm):00495         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00496         ;
9126                  ( cubix_floppy.asm):00497         CHECKINT:
9126 108E0000         ( cubix_floppy.asm):00498                 LDY     #$00
                      ( cubix_floppy.asm):00499         !
912A B6DF80           ( cubix_floppy.asm):00500                 LDA     FDC_MSR                           ; READING OR WRITING IS KEYS TO D7 RQM
912D 8480             ( cubix_floppy.asm):00501                 ANDA    #$80
912F 260A             ( cubix_floppy.asm):00502                 BNE     >                                 ; WAIT FOR RQM TO BE TRUE. WAIT UNTIL DONE
9131 BD91E4           ( cubix_floppy.asm):00503                 JSR     FDDELAY
9134 3121             ( cubix_floppy.asm):00504                 INY
9136 26F2             ( cubix_floppy.asm):00505                 BNE     <
9138 7E9143           ( cubix_floppy.asm):00506                 JMP     ERRCLR
                      ( cubix_floppy.asm):00507         
                      ( cubix_floppy.asm):00508         !
913B B6DF80           ( cubix_floppy.asm):00509                 LDA     FDC_MSR                           ; READING OR WRITING IS KEYS TO D7 RQM
913E 8440             ( cubix_floppy.asm):00510                 ANDA    #$40                              ; WAITING FOR INPUT?
9140 2719             ( cubix_floppy.asm):00511                 BEQ     SENDINT
9142 39               ( cubix_floppy.asm):00512                 RTS
                      ( cubix_floppy.asm):00513         
9143                  ( cubix_floppy.asm):00514         ERRCLR:
9143 108E0000         ( cubix_floppy.asm):00515                 LDY     #$00
                      ( cubix_floppy.asm):00516         !
9147 B6DF81           ( cubix_floppy.asm):00517                 LDA     FDC_DATA                          ; CLEAR THE JUNK OUT OF DATA REGISTER
914A B6DF80           ( cubix_floppy.asm):00518                 LDA     FDC_MSR                           ; CHECK WITH RQM
914D 8480             ( cubix_floppy.asm):00519                 ANDA    #$80                              ; IF STILL NOT READY, READ OUT MORE JUNK
914F 2607             ( cubix_floppy.asm):00520                 BNE     >                                 ;
9151 BD91E4           ( cubix_floppy.asm):00521                 JSR     FDDELAY
9154 3121             ( cubix_floppy.asm):00522                 INY
9156 26EF             ( cubix_floppy.asm):00523                 BNE     <
                      ( cubix_floppy.asm):00524         !
9158 86FF             ( cubix_floppy.asm):00525                 LDA     #$FF                              ; RETURN ERROR CODE -1
                      ( cubix_floppy.asm):00526         ;
915A 39               ( cubix_floppy.asm):00527                 RTS
                      ( cubix_floppy.asm):00528         
                      ( cubix_floppy.asm):00529         ;__SENDINT__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00530         ;
                      ( cubix_floppy.asm):00531         ; SENSE INTERRUPT COMMAND
                      ( cubix_floppy.asm):00532         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00533         ;
915B                  ( cubix_floppy.asm):00534         SENDINT:
915B 8608             ( cubix_floppy.asm):00535                 LDA     #CFD_SENSEINT                     ; SENSE INTERRUPT COMMAND
915D BD90CE           ( cubix_floppy.asm):00536                 JSR     PFDATA                            ; SEND IT
9160 BD9175           ( cubix_floppy.asm):00537                 JSR     GFDATA                            ; GET RESULTS
9163 B701E3           ( cubix_floppy.asm):00538                 STA     ST0                               ; STORE THAT
9166 84C0             ( cubix_floppy.asm):00539                 ANDA    #$C0                              ; MASK OFF INTERRUPT STATUS BITS
9168 8180             ( cubix_floppy.asm):00540                 CMPA    #$80                              ; CHECK IF INVALID COMMAND
916A 2708             ( cubix_floppy.asm):00541                 BEQ     ENDSENDINT                        ; YES, EXIT
916C BD9175           ( cubix_floppy.asm):00542                 JSR     GFDATA                            ; GET ANOTHER (STATUS CODE 1)
916F B601E3           ( cubix_floppy.asm):00543                 LDA     ST0                               ; GET FIRST ONE
9172 84C0             ( cubix_floppy.asm):00544                 ANDA    #$C0                              ; MASK OFF ALL BUT INTERRUPT CODE 00 IS NORMAL
9174                  ( cubix_floppy.asm):00545         ENDSENDINT:
9174 39               ( cubix_floppy.asm):00546                 RTS                                       ; ANYTHING ELSE IS AN ERROR
                      ( cubix_floppy.asm):00547         
                      ( cubix_floppy.asm):00548         
                      ( cubix_floppy.asm):00549         ;__GFDATA__________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00550         ;
                      ( cubix_floppy.asm):00551         ; GET DATA FROM FLOPPY CONTROLLER
                      ( cubix_floppy.asm):00552         ;
                      ( cubix_floppy.asm):00553         ; TRANSFERS ARE SYNCHONIZED BYT MSR D7 <RQM> AND D6 <DIO>
                      ( cubix_floppy.asm):00554         ;       RQM  DIO
                      ( cubix_floppy.asm):00555         ;       0       0       BUSY
                      ( cubix_floppy.asm):00556         ;       1       0       WRITE TO DATA REGISTER PERMITTED
                      ( cubix_floppy.asm):00557         ;       1       1       BYTE FOR READ BY HOST PENDING
                      ( cubix_floppy.asm):00558         ;       0       1       BUSY
                      ( cubix_floppy.asm):00559         ;
                      ( cubix_floppy.asm):00560         ;________________________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00561         ;
9175                  ( cubix_floppy.asm):00562         GFDATA:
9175 108E0000         ( cubix_floppy.asm):00563                 LDY     #$00
                      ( cubix_floppy.asm):00564         !
9179 B6DF80           ( cubix_floppy.asm):00565                 LDA     FDC_MSR                           ; GET STATUS
917C B79214           ( cubix_floppy.asm):00566                 STA     TMPSTORAGE                        ;
917F 8480             ( cubix_floppy.asm):00567                 ANDA    #%10000000                        ; NOT READY, WAIT
9181 2607             ( cubix_floppy.asm):00568                 BNE     >                                 ;
9183 3121             ( cubix_floppy.asm):00569                 INY
9185 26F2             ( cubix_floppy.asm):00570                 BNE     <
9187 8600             ( cubix_floppy.asm):00571                 LDA     #$00
9189 39               ( cubix_floppy.asm):00572                 RTS
                      ( cubix_floppy.asm):00573         !
918A B69214           ( cubix_floppy.asm):00574                 LDA     TMPSTORAGE
918D 8440             ( cubix_floppy.asm):00575                 ANDA    #%01000000                        ; ANY DATA FOR US?
918F 2703             ( cubix_floppy.asm):00576                 BEQ     GFDATA1                           ; NO, SKIP IT
9191 B6DF81           ( cubix_floppy.asm):00577                 LDA     FDC_DATA                          ; GET FDC DATA
9194                  ( cubix_floppy.asm):00578         GFDATA1:
9194 39               ( cubix_floppy.asm):00579                 RTS
                      ( cubix_floppy.asm):00580         
                      ( cubix_floppy.asm):00581         ;__FD_DETECT______________________________________________________________________________________________________________________
                      ( cubix_floppy.asm):00582         ;
                      ( cubix_floppy.asm):00583         ;       DETECT FLOPPY HARDWARE
                      ( cubix_floppy.asm):00584         ;________________________________________________________________________________________________________________________________
9195                  ( cubix_floppy.asm):00585         FD_DETECT:
                      ( cubix_floppy.asm):00586         ; BLINDLY RESET FDC (WHICH MAY OR MAY NOT EXIST)
9195 BD91C4           ( cubix_floppy.asm):00587                 JSR     FC_RESETFDC                       ; RESET FDC
                      ( cubix_floppy.asm):00588         
9198 B6DF80           ( cubix_floppy.asm):00589                 LDA     FDC_MSR                           ; READ MSR
919B 8180             ( cubix_floppy.asm):00590                 CMPA    #$80
919D 270A             ( cubix_floppy.asm):00591                 BEQ     FD_DETECT1                        ; $80 IS OK
919F 81D0             ( cubix_floppy.asm):00592                 CMPA    #$D0
91A1 2706             ( cubix_floppy.asm):00593                 BEQ     FD_DETECT1                        ; $D0 IS OK
91A3 86FF             ( cubix_floppy.asm):00594                 LDA     #$FF                              ; NOT OK
91A5 B701E7           ( cubix_floppy.asm):00595                 STA     FLOPPY_DETCT
91A8 39               ( cubix_floppy.asm):00596                 RTS
                      ( cubix_floppy.asm):00597         ;
91A9                  ( cubix_floppy.asm):00598         FD_DETECT1:
91A9 8E0064           ( cubix_floppy.asm):00599                 LDX     #100
91AC BD91ED           ( cubix_floppy.asm):00600                 JSR     FDVDELAY                          ; WAIT A BIT FOR FDC
91AF B6DF80           ( cubix_floppy.asm):00601                 LDA     FDC_MSR                           ; READ MSR AGAIN
91B2 8180             ( cubix_floppy.asm):00602                 CMPA    #$80
91B4 2708             ( cubix_floppy.asm):00603                 BEQ     >                                 ; $80 IS OK
91B6 81D0             ( cubix_floppy.asm):00604                 CMPA    #$D0
91B8 86FF             ( cubix_floppy.asm):00605                 LDA     #$FF                              ; NOT OK
91BA B701E7           ( cubix_floppy.asm):00606                 STA     FLOPPY_DETCT
91BD 39               ( cubix_floppy.asm):00607                 RTS
                      ( cubix_floppy.asm):00608         !
91BE 8600             ( cubix_floppy.asm):00609                 LDA     #$00                              ; OK
91C0 B701E7           ( cubix_floppy.asm):00610                 STA     FLOPPY_DETCT
91C3 39               ( cubix_floppy.asm):00611                 RTS
                      ( cubix_floppy.asm):00612         
91C4                  ( cubix_floppy.asm):00613         FC_RESETFDC:
91C4 B6DF83           ( cubix_floppy.asm):00614                 LDA     FDC_RESET
91C7 B6DF83           ( cubix_floppy.asm):00615                 LDA     FDC_RESET
91CA 8E0096           ( cubix_floppy.asm):00616                 LDX     #150
91CD BD91ED           ( cubix_floppy.asm):00617                 JSR     FDVDELAY                          ; WAIT A BIT FOR FDC
                      ( cubix_floppy.asm):00618         
91D0 8600             ( cubix_floppy.asm):00619                 LDA     #$00
91D2 B7DF86           ( cubix_floppy.asm):00620                 STA     FDC_DOR
91D5 BD91E4           ( cubix_floppy.asm):00621                 JSR     FDDELAY
91D8 860C             ( cubix_floppy.asm):00622                 LDA     #DOR_INIT
91DA B7DF86           ( cubix_floppy.asm):00623                 STA     FDC_DOR
91DD 8E0096           ( cubix_floppy.asm):00624                 LDX     #150                              ;
91E0 BD91ED           ( cubix_floppy.asm):00625                 JSR     FDVDELAY
91E3 39               ( cubix_floppy.asm):00626                 RTS
                      ( cubix_floppy.asm):00627         
                      ( cubix_floppy.asm):00628         
91E4                  ( cubix_floppy.asm):00629         FDDELAY:
91E4 3402             ( cubix_floppy.asm):00630                 PSHS    A
91E6 3502             ( cubix_floppy.asm):00631                 PULS    A
91E8 3402             ( cubix_floppy.asm):00632                 PSHS    A
91EA 3502             ( cubix_floppy.asm):00633                 PULS    A
91EC 39               ( cubix_floppy.asm):00634                 RTS
91ED                  ( cubix_floppy.asm):00635         FDVDELAY:
91ED 3402             ( cubix_floppy.asm):00636                 PSHS    A
91EF 3502             ( cubix_floppy.asm):00637                 PULS    A
91F1 3402             ( cubix_floppy.asm):00638                 PSHS    A
91F3 3502             ( cubix_floppy.asm):00639                 PULS    A
91F5 301F             ( cubix_floppy.asm):00640                 DEX
91F7 8C0000           ( cubix_floppy.asm):00641                 CPX     #$00
91FA 26F1             ( cubix_floppy.asm):00642                 BNE     FDVDELAY
91FC 39               ( cubix_floppy.asm):00643                 RTS
                      ( cubix_floppy.asm):00644         
                      ( cubix_floppy.asm):00645         
91FD                  ( cubix_floppy.asm):00646         GETDSKUNIT:
91FD B601FB           ( cubix_floppy.asm):00647                 LDA     CURRENTDEVICE
9200 8401             ( cubix_floppy.asm):00648                 ANDA    #$01
9202 8100             ( cubix_floppy.asm):00649                 CMPA    #$00
9204 2608             ( cubix_floppy.asm):00650                 BNE     >
9206 8600             ( cubix_floppy.asm):00651                 LDA     #$00
9208 8610             ( cubix_floppy.asm):00652                 LDA     #%00010000
920A B701E6           ( cubix_floppy.asm):00653                 STA     DSKUNIT
920D 39               ( cubix_floppy.asm):00654                 RTS
                      ( cubix_floppy.asm):00655         !
920E 8621             ( cubix_floppy.asm):00656                 LDA     #%00100001
9210 B701E6           ( cubix_floppy.asm):00657                 STA     DSKUNIT
9213 39               ( cubix_floppy.asm):00658                 RTS
                      ( cubix_floppy.asm):00659         
9214                  ( cubix_floppy.asm):00660         TMPSTORAGE:
9214 00               ( cubix_floppy.asm):00661                 FCB     00
9215                  ( cubix_floppy.asm):00662         FMESSAGE1:
9215 46443A           ( cubix_floppy.asm):00663                 FCC     "FD:"
9218 0D0A             ( cubix_floppy.asm):00664                 FCB     $0D,$0A
921A 00               ( cubix_floppy.asm):00665                 FCB     00
921B                  ( cubix_floppy.asm):00666         FMESSAGE2:
921B 20494F3D3078     ( cubix_floppy.asm):00667                 FCC     " IO=0x"
9221 00               ( cubix_floppy.asm):00668                 FCB     00
9222                  ( cubix_floppy.asm):00669         FMESSAGE3:
9222 0D0A             ( cubix_floppy.asm):00670                 FCB     $0D,$0A
9224 204E4F5420505245 ( cubix_floppy.asm):00671                 FCC     " NOT PRESENT"
     53454E54
9230 00               ( cubix_floppy.asm):00672                 FCB     00
9231                  ( cubix_floppy.asm):00673         FMESSAGE4:
9231 0D0A             ( cubix_floppy.asm):00674                 FCB     $0D,$0A
9233 2050524553454E54 ( cubix_floppy.asm):00675                 FCC     " PRESENT, MODE=DUODYNE "
     2C204D4F44453D44
     554F44594E4520
924A 00               ( cubix_floppy.asm):00676                 FCB     00
                      (     cubixdrv.asm):00097                 INCLUDE cubix_fp.asm
                      (     cubix_fp.asm):00001         ;__FRONT PANEL DRIVERS_____________________________________________________________________________________________________________
                      (     cubix_fp.asm):00002         ;
                      (     cubix_fp.asm):00003         ;       Duodyne Front Panel Driver
                      (     cubix_fp.asm):00004         ;
                      (     cubix_fp.asm):00005         ;       Entry points:
                      (     cubix_fp.asm):00006         ;               FP_INIT
                      (     cubix_fp.asm):00007         ;               FP_SETLED
                      (     cubix_fp.asm):00008         ;               FP_GETSWITCH
                      (     cubix_fp.asm):00009         ;               FPSD_INIT
                      (     cubix_fp.asm):00010         ;               FPSD_READ_SECTOR
                      (     cubix_fp.asm):00011         ;               FPSD_WRITE_SECTOR
                      (     cubix_fp.asm):00012         ;               FPDIS_INIT
                      (     cubix_fp.asm):00013         ;               FPDIS_CLEAR
                      (     cubix_fp.asm):00014         ;               FPDIS_SETXY
                      (     cubix_fp.asm):00015         ;               FPDIS_OUTCH
                      (     cubix_fp.asm):00016         ;________________________________________________________________________________________________________________________________
                      (     cubix_fp.asm):00017         ;
                      (     cubix_fp.asm):00018         ;
     DF54             (     cubix_fp.asm):00019         FP_PORT         = $DF54                           ; PORT
     003C             (     cubix_fp.asm):00020         FPDIS_I2C_ADDRESS = $3C
                      (     cubix_fp.asm):00021         ;
                      (     cubix_fp.asm):00022         ;
                      (     cubix_fp.asm):00023         ;__FP_INIT___________________________________________________________________________________________
                      (     cubix_fp.asm):00024         ;
                      (     cubix_fp.asm):00025         ;  FRONT PANEL INFO
                      (     cubix_fp.asm):00026         ;____________________________________________________________________________________________________
                      (     cubix_fp.asm):00027         ;
924B                  (     cubix_fp.asm):00028         FP_INIT:
924B BD991B           (     cubix_fp.asm):00029                 JSR     LFCR                              ; AND CRLF
924E 8E95F9           (     cubix_fp.asm):00030                 LDX     #FPMESSAGE1
9251 BD992F           (     cubix_fp.asm):00031                 JSR     WRSTR                             ; DO PROMPT
9254 CCDF54           (     cubix_fp.asm):00032                 LDD     #FP_PORT                          ; GET BASE PORT
9257 BD993B           (     cubix_fp.asm):00033                 JSR     WRHEXW                            ; PRINT BASE PORT
925A BD991B           (     cubix_fp.asm):00034                 JSR     LFCR                              ; AND CRLF
925D 8E960E           (     cubix_fp.asm):00035                 LDX     #FPMESSAGE2
9260 BD992F           (     cubix_fp.asm):00036                 JSR     WRSTR                             ; DO PROMPT
9263 8600             (     cubix_fp.asm):00037                 LDA     #$00
9265 B7DF54           (     cubix_fp.asm):00038                 STA     FP_PORT
                      (     cubix_fp.asm):00039         ;
                      (     cubix_fp.asm):00040         ;
9268 8E0008           (     cubix_fp.asm):00041                 LDX     #$0008
926B F6DF54           (     cubix_fp.asm):00042                 LDB     FP_PORT
926E                  (     cubix_fp.asm):00043         FP_INIT1:
926E 8600             (     cubix_fp.asm):00044                 LDA     #$00
9270 59               (     cubix_fp.asm):00045                 ROLB
9271 8930             (     cubix_fp.asm):00046                 ADCA    #'0'
9273 3404             (     cubix_fp.asm):00047                 PSHS    B
9275 BD9961           (     cubix_fp.asm):00048                 JSR     PUTCHR
9278 3504             (     cubix_fp.asm):00049                 PULS    B
927A 301F             (     cubix_fp.asm):00050                 DEX
927C 8C0000           (     cubix_fp.asm):00051                 CMPX    #$0000
927F 26ED             (     cubix_fp.asm):00052                 BNE     FP_INIT1
                      (     cubix_fp.asm):00053         
9281 BD991B           (     cubix_fp.asm):00054                 JSR     LFCR                              ; AND CRLF
9284 39               (     cubix_fp.asm):00055                 RTS                                       ; DONE
                      (     cubix_fp.asm):00056         ;
                      (     cubix_fp.asm):00057         ;__FP_SETLED_________________________________________________________________________________________
                      (     cubix_fp.asm):00058         ;
                      (     cubix_fp.asm):00059         ;  SET LED OUTPUT ON FRONT PANEL
                      (     cubix_fp.asm):00060         ;  A=VALUE TO DISPLAY
                      (     cubix_fp.asm):00061         ;____________________________________________________________________________________________________
9285                  (     cubix_fp.asm):00062         FP_SETLED:
9285 FC02F8           (     cubix_fp.asm):00063                 LDD     >PAGER_D                          ; RESTORE 'D'
9288 B7DF54           (     cubix_fp.asm):00064                 STA     FP_PORT
928B 39               (     cubix_fp.asm):00065                 RTS
                      (     cubix_fp.asm):00066         ;__FP_GETSWITCH______________________________________________________________________________________
                      (     cubix_fp.asm):00067         ;
                      (     cubix_fp.asm):00068         ;  GET SWITCHES FROM FRONT PANEL
                      (     cubix_fp.asm):00069         ;  A=SWITCH VALUE
                      (     cubix_fp.asm):00070         ;____________________________________________________________________________________________________
928C                  (     cubix_fp.asm):00071         FP_GETSWITCH:
928C B6DF54           (     cubix_fp.asm):00072                 LDA     FP_PORT
928F FD02F8           (     cubix_fp.asm):00073                 STD     >PAGER_D                          ; RESTORE 'D'
9292 39               (     cubix_fp.asm):00074                 RTS                                       ; DONE
                      (     cubix_fp.asm):00075         
                      (     cubix_fp.asm):00076         ;__FPSD_INIT__________________________________________________________________________________________
                      (     cubix_fp.asm):00077         ;
                      (     cubix_fp.asm):00078         ;  INIT AND DISPLAY SD INFO
                      (     cubix_fp.asm):00079         ;____________________________________________________________________________________________________
                      (     cubix_fp.asm):00080         ;
9293                  (     cubix_fp.asm):00081         FPSD_INIT:
9293 BD991B           (     cubix_fp.asm):00082                 JSR     LFCR                              ; AND CRLF
9296 8E9618           (     cubix_fp.asm):00083                 LDX     #FPSDMESSAGE1
9299 BD992F           (     cubix_fp.asm):00084                 JSR     WRSTR                             ; DO PROMPT
929C BD991B           (     cubix_fp.asm):00085                 JSR     LFCR                              ; AND CRLF
                      (     cubix_fp.asm):00086         
929F B696EF           (     cubix_fp.asm):00087                 LDA     PCF_FAIL_FLAG
92A2 8100             (     cubix_fp.asm):00088                 CMPA    #$00
92A4 1026008D         (     cubix_fp.asm):00089                 LBNE    FPSD_INIT_ERROR
                      (     cubix_fp.asm):00090         
92A8 8625             (     cubix_fp.asm):00091                 LDA     #$25
92AA B79344           (     cubix_fp.asm):00092                 STA     I2C_ADDRESS
92AD BD92C8           (     cubix_fp.asm):00093                 JSR     FPSD_SCAN
92B0 8626             (     cubix_fp.asm):00094                 LDA     #$26
92B2 B79344           (     cubix_fp.asm):00095                 STA     I2C_ADDRESS
92B5 BD92C8           (     cubix_fp.asm):00096                 JSR     FPSD_SCAN
92B8 8627             (     cubix_fp.asm):00097                 LDA     #$27
92BA B79344           (     cubix_fp.asm):00098                 STA     I2C_ADDRESS
92BD BD92C8           (     cubix_fp.asm):00099                 JSR     FPSD_SCAN
                      (     cubix_fp.asm):00100         
92C0 8600             (     cubix_fp.asm):00101                 LDA     #$00
92C2 B7965A           (     cubix_fp.asm):00102                 STA     FPSDFAILFLAG
92C5 1CFE             (     cubix_fp.asm):00103                 CLC
92C7 39               (     cubix_fp.asm):00104                 RTS
                      (     cubix_fp.asm):00105         
92C8                  (     cubix_fp.asm):00106         FPSD_SCAN:
92C8 8E961F           (     cubix_fp.asm):00107                 LDX     #FPSDMESSAGE2
92CB BD992F           (     cubix_fp.asm):00108                 JSR     WRSTR                             ; DO PROMPT
92CE B69344           (     cubix_fp.asm):00109                 LDA     I2C_ADDRESS                       ; DEFAULT ADDRESS BUG:SHOULD REALLY SCAN ALL APPLICABLE ADDRESSES
92D1 BD9947           (     cubix_fp.asm):00110                 JSR     WRHEX
92D4 BD9927           (     cubix_fp.asm):00111                 JSR     SPACE
                      (     cubix_fp.asm):00112         
92D7 8E9662           (     cubix_fp.asm):00113                 LDX     #FPSDSENDINFO                     ; GET SD INFO
92DA 108E0001         (     cubix_fp.asm):00114                 LDY     #1
92DE B69344           (     cubix_fp.asm):00115                 LDA     I2C_ADDRESS                       ; DEFAULT ADDRESS BUG:SHOULD REALLY SCAN ALL APPLICABLE ADDRESSES
92E1 BD9701           (     cubix_fp.asm):00116                 JSR     PCF_SENDBYTES_INTERNAL
92E4 8E9661           (     cubix_fp.asm):00117                 LDX     #FPSDSENDREAD                     ; READ BYTES
92E7 108E0001         (     cubix_fp.asm):00118                 LDY     #1
92EB B69344           (     cubix_fp.asm):00119                 LDA     I2C_ADDRESS                       ; DEFAULT ADDRESS BUG:SHOULD REALLY SCAN ALL APPLICABLE ADDRESSES
92EE BD9701           (     cubix_fp.asm):00120                 JSR     PCF_SENDBYTES_INTERNAL
92F1 8E0300           (     cubix_fp.asm):00121                 LDX     #HSTBUF
92F4 108E0005         (     cubix_fp.asm):00122                 LDY     #5
92F8 B69344           (     cubix_fp.asm):00123                 LDA     I2C_ADDRESS                       ; DEFAULT ADDRESS BUG:SHOULD REALLY SCAN ALL APPLICABLE ADDRESSES
92FB BD9761           (     cubix_fp.asm):00124                 JSR     PCF_READBYTES_INTERNAL
                      (     cubix_fp.asm):00125         
92FE B60300           (     cubix_fp.asm):00126                 LDA     HSTBUF                            ; SHOULD RESPOND WITH "SD" FOLLOWED BY IMAGE SIZE
9301 8153             (     cubix_fp.asm):00127                 CMPA    #'S'
9303 2630             (     cubix_fp.asm):00128                 BNE     FPSD_INIT_ERROR
9305 B60301           (     cubix_fp.asm):00129                 LDA     HSTBUF+1
9308 8144             (     cubix_fp.asm):00130                 CMPA    #'D'
930A 2629             (     cubix_fp.asm):00131                 BNE     FPSD_INIT_ERROR
930C 8E9635           (     cubix_fp.asm):00132                 LDX     #FPSDMESSAGE6
930F BD992F           (     cubix_fp.asm):00133                 JSR     WRSTR
                      (     cubix_fp.asm):00134         
9312 B60302           (     cubix_fp.asm):00135                 LDA     HSTBUF+2
9315 BD9947           (     cubix_fp.asm):00136                 JSR     WRHEX
9318 B60303           (     cubix_fp.asm):00137                 LDA     HSTBUF+3
931B BD9947           (     cubix_fp.asm):00138                 JSR     WRHEX
931E B60304           (     cubix_fp.asm):00139                 LDA     HSTBUF+4
9321 BD9947           (     cubix_fp.asm):00140                 JSR     WRHEX
9324 B60305           (     cubix_fp.asm):00141                 LDA     HSTBUF+5
9327 BD9947           (     cubix_fp.asm):00142                 JSR     WRHEX
932A BD991B           (     cubix_fp.asm):00143                 JSR     LFCR                              ; AND CRLF
932D 8600             (     cubix_fp.asm):00144                 LDA     #$00
932F B7965A           (     cubix_fp.asm):00145                 STA     FPSDFAILFLAG
9332 1CFE             (     cubix_fp.asm):00146                 CLC
9334 39               (     cubix_fp.asm):00147                 RTS
                      (     cubix_fp.asm):00148         
9335                  (     cubix_fp.asm):00149         FPSD_INIT_ERROR:
9335 8E9628           (     cubix_fp.asm):00150                 LDX     #FPSDMESSAGE3
9338 BD992F           (     cubix_fp.asm):00151                 JSR     WRSTR                             ; DO PROMPT
933B BD991B           (     cubix_fp.asm):00152                 JSR     LFCR                              ; AND CRLF
933E 86FF             (     cubix_fp.asm):00153                 LDA     #$FF
9340 B7965A           (     cubix_fp.asm):00154                 STA     FPSDFAILFLAG
9343 39               (     cubix_fp.asm):00155                 RTS
                      (     cubix_fp.asm):00156         
9344                  (     cubix_fp.asm):00157         I2C_ADDRESS:
9344 00               (     cubix_fp.asm):00158                 FCB     00
                      (     cubix_fp.asm):00159         
                      (     cubix_fp.asm):00160         
                      (     cubix_fp.asm):00161         ;*__FPSD_READ_SECTOR___________________________________________________________________________________
                      (     cubix_fp.asm):00162         ;*
                      (     cubix_fp.asm):00163         ;*  READ FRONT PANEL SD SECTOR (IN LBA) INTO BUFFER
                      (     cubix_fp.asm):00164         ;*
                      (     cubix_fp.asm):00165         ;*____________________________________________________________________________________________________
9345                  (     cubix_fp.asm):00166         FPSD_READ_SECTOR:
9345 B6965A           (     cubix_fp.asm):00167                 LDA     FPSDFAILFLAG
9348 8100             (     cubix_fp.asm):00168                 CMPA    #$00
934A 263B             (     cubix_fp.asm):00169                 BNE     FPSD_READ_SECTOR_ERROR
                      (     cubix_fp.asm):00170         
934C BD93E1           (     cubix_fp.asm):00171                 JSR     FPSD_SETUP_LBA
934F 8E965C           (     cubix_fp.asm):00172                 LDX     #FPSDSENDADDRESS
9352 108E0005         (     cubix_fp.asm):00173                 LDY     #5
9356 B6965B           (     cubix_fp.asm):00174                 LDA     FPSDDEVICE
9359 BD9701           (     cubix_fp.asm):00175                 JSR     PCF_SENDBYTES_INTERNAL
935C 81FF             (     cubix_fp.asm):00176                 CMPA    #$FF
935E 2727             (     cubix_fp.asm):00177                 BEQ     FPSD_READ_SECTOR_ERROR
9360 8E9661           (     cubix_fp.asm):00178                 LDX     #FPSDSENDREAD                     ; READ BYTES
9363 108E0001         (     cubix_fp.asm):00179                 LDY     #1
9367 B6965B           (     cubix_fp.asm):00180                 LDA     FPSDDEVICE
936A BD9701           (     cubix_fp.asm):00181                 JSR     PCF_SENDBYTES_INTERNAL
936D 81FF             (     cubix_fp.asm):00182                 CMPA    #$FF
936F 2716             (     cubix_fp.asm):00183                 BEQ     FPSD_READ_SECTOR_ERROR
9371 8E0300           (     cubix_fp.asm):00184                 LDX     #HSTBUF
9374 108E0200         (     cubix_fp.asm):00185                 LDY     #512
9378 B6965B           (     cubix_fp.asm):00186                 LDA     FPSDDEVICE
937B BD9761           (     cubix_fp.asm):00187                 JSR     PCF_READBYTES_INTERNAL
937E 81FF             (     cubix_fp.asm):00188                 CMPA    #$FF
9380 2705             (     cubix_fp.asm):00189                 BEQ     FPSD_READ_SECTOR_ERROR
                      (     cubix_fp.asm):00190         
9382 4F               (     cubix_fp.asm):00191                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
9383 B701F7           (     cubix_fp.asm):00192                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
9386 39               (     cubix_fp.asm):00193                 RTS
9387                  (     cubix_fp.asm):00194         FPSD_READ_SECTOR_ERROR:
9387 8602             (     cubix_fp.asm):00195                 LDA     #$02                              ; SET ERROR CONDITION
9389 B701F7           (     cubix_fp.asm):00196                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
938C 39               (     cubix_fp.asm):00197                 RTS
                      (     cubix_fp.asm):00198         
                      (     cubix_fp.asm):00199         ;*__FPSD_WRITE_SECTOR__________________________________________________________________________________
                      (     cubix_fp.asm):00200         ;*
                      (     cubix_fp.asm):00201         ;*  WRITE FRONT PANEL SD SECTOR (IN LBA) FROM BUFFER
                      (     cubix_fp.asm):00202         ;*
                      (     cubix_fp.asm):00203         ;*____________________________________________________________________________________________________
938D                  (     cubix_fp.asm):00204         FPSD_WRITE_SECTOR:
938D B6965A           (     cubix_fp.asm):00205                 LDA     FPSDFAILFLAG
9390 8100             (     cubix_fp.asm):00206                 CMPA    #$00
9392 2647             (     cubix_fp.asm):00207                 BNE     FPSD_WRITE_SECTOR_ERROR
                      (     cubix_fp.asm):00208         
9394 3420             (     cubix_fp.asm):00209                 PSHS    Y
9396 108E0201         (     cubix_fp.asm):00210                 LDY     #$0201
                      (     cubix_fp.asm):00211         !
939A 313F             (     cubix_fp.asm):00212                 DEY
939C A6A90300         (     cubix_fp.asm):00213                 LDA     HSTBUF,Y
93A0 A7A90301         (     cubix_fp.asm):00214                 STA     HSTBUF+1,Y
93A4 108C0000         (     cubix_fp.asm):00215                 CMPY    #$0000
93A8 26F0             (     cubix_fp.asm):00216                 BNE     <
93AA 3520             (     cubix_fp.asm):00217                 PULS    Y
93AC 8657             (     cubix_fp.asm):00218                 LDA     #'W'
93AE B70300           (     cubix_fp.asm):00219                 STA     HSTBUF
                      (     cubix_fp.asm):00220         
93B1 BD93E1           (     cubix_fp.asm):00221                 JSR     FPSD_SETUP_LBA
93B4 8E965C           (     cubix_fp.asm):00222                 LDX     #FPSDSENDADDRESS
93B7 108E0005         (     cubix_fp.asm):00223                 LDY     #5
93BB B6965B           (     cubix_fp.asm):00224                 LDA     FPSDDEVICE
93BE BD9701           (     cubix_fp.asm):00225                 JSR     PCF_SENDBYTES_INTERNAL
93C1 81FF             (     cubix_fp.asm):00226                 CMPA    #$FF
93C3 2716             (     cubix_fp.asm):00227                 BEQ     FPSD_WRITE_SECTOR_ERROR
93C5 8E0300           (     cubix_fp.asm):00228                 LDX     #HSTBUF
93C8 108E0201         (     cubix_fp.asm):00229                 LDY     #513
93CC B6965B           (     cubix_fp.asm):00230                 LDA     FPSDDEVICE
93CF BD9701           (     cubix_fp.asm):00231                 JSR     PCF_SENDBYTES_INTERNAL
93D2 81FF             (     cubix_fp.asm):00232                 CMPA    #$FF
93D4 2705             (     cubix_fp.asm):00233                 BEQ     FPSD_WRITE_SECTOR_ERROR
93D6 4F               (     cubix_fp.asm):00234                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
93D7 B701F7           (     cubix_fp.asm):00235                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
93DA 39               (     cubix_fp.asm):00236                 RTS
93DB                  (     cubix_fp.asm):00237         FPSD_WRITE_SECTOR_ERROR:
93DB 8602             (     cubix_fp.asm):00238                 LDA     #$02
93DD B701F7           (     cubix_fp.asm):00239                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
93E0 39               (     cubix_fp.asm):00240                 RTS
                      (     cubix_fp.asm):00241         
                      (     cubix_fp.asm):00242         ;*__FPSD_SETUP_LBA____________________________________________________________________________________
                      (     cubix_fp.asm):00243         ;*
                      (     cubix_fp.asm):00244         ;*
                      (     cubix_fp.asm):00245         ;*       SETUP   LBA DATA
                      (     cubix_fp.asm):00246         ;*
                      (     cubix_fp.asm):00247         ;*
                      (     cubix_fp.asm):00248         ;*____________________________________________________________________________________________________
93E1                  (     cubix_fp.asm):00249         FPSD_SETUP_LBA:
93E1 3406             (     cubix_fp.asm):00250                 PSHS    D
93E3 B601FB           (     cubix_fp.asm):00251                 LDA     CURRENTDEVICE
93E6 B701F3           (     cubix_fp.asm):00252                 STA     DSKY_HEXBUF
93E9 840F             (     cubix_fp.asm):00253                 ANDA    #$0F
93EB 8A20             (     cubix_fp.asm):00254                 ORA     #$20
93ED B7965B           (     cubix_fp.asm):00255                 STA     FPSDDEVICE
93F0 8600             (     cubix_fp.asm):00256                 LDA     #$00
93F2 B7965D           (     cubix_fp.asm):00257                 STA     FPSDSENDADDRESS+1
93F5 F601FC           (     cubix_fp.asm):00258                 LDB     CURRENTSLICE
93F8 F701F4           (     cubix_fp.asm):00259                 STB     DSKY_HEXBUF+1
93FB F7965E           (     cubix_fp.asm):00260                 STB     FPSDSENDADDRESS+2
93FE F601F9           (     cubix_fp.asm):00261                 LDB     CURRENTCYL                        ;
9401 F701F5           (     cubix_fp.asm):00262                 STB     DSKY_HEXBUF+2
9404 F7965F           (     cubix_fp.asm):00263                 STB     FPSDSENDADDRESS+3
9407 F601FA           (     cubix_fp.asm):00264                 LDB     CURRENTSEC                        ;
940A F701F6           (     cubix_fp.asm):00265                 STB     DSKY_HEXBUF+3
940D F79660           (     cubix_fp.asm):00266                 STB     FPSDSENDADDRESS+4
9410 BD8CAC           (     cubix_fp.asm):00267                 JSR     DSKY_BIN2SEG
9413 BD8CF3           (     cubix_fp.asm):00268                 JSR     DSKY_SHOW
9416 3586             (     cubix_fp.asm):00269                 PULS    D,PC
                      (     cubix_fp.asm):00270         
                      (     cubix_fp.asm):00271         
                      (     cubix_fp.asm):00272         ;*__FPDIS_INIT________________________________________________________________________________________
                      (     cubix_fp.asm):00273         ;*
                      (     cubix_fp.asm):00274         ;*       SETUP   FRONT PANEL DISPLAY
                      (     cubix_fp.asm):00275         ;*
                      (     cubix_fp.asm):00276         ;*____________________________________________________________________________________________________
9418                  (     cubix_fp.asm):00277         FPDIS_INIT:
9418 B696EF           (     cubix_fp.asm):00278                 LDA     PCF_FAIL_FLAG                     ; skip if no PCF
941B 8100             (     cubix_fp.asm):00279                 CMPA    #$00
941D 2626             (     cubix_fp.asm):00280                 BNE     FPDIS_INIT_WERROR
941F 8E9446           (     cubix_fp.asm):00281                 LDX     #FRONTPANELDISPLAYINIT
9422 108E0023         (     cubix_fp.asm):00282                 LDY     #FRONTPANELDISPLAYINITEND-FRONTPANELDISPLAYINIT
9426 863C             (     cubix_fp.asm):00283                 LDA     #FPDIS_I2C_ADDRESS
9428 BD9701           (     cubix_fp.asm):00284                 JSR     PCF_SENDBYTES_INTERNAL
942B BD991B           (     cubix_fp.asm):00285                 JSR     LFCR                              ; AND CRLF
942E 8E9645           (     cubix_fp.asm):00286                 LDX     #FPDISPMESSAGE1
9431 BD992F           (     cubix_fp.asm):00287                 JSR     WRSTR                             ; DO PROMPT
9434 BD991B           (     cubix_fp.asm):00288                 JSR     LFCR                              ; AND CRLF
9437 8E9651           (     cubix_fp.asm):00289                 LDX     #FPDISPMESSAGE2
943A BD992F           (     cubix_fp.asm):00290                 JSR     WRSTR                             ; DO PROMPT
943D 863C             (     cubix_fp.asm):00291                 LDA     #FPDIS_I2C_ADDRESS
943F BD9947           (     cubix_fp.asm):00292                 JSR     WRHEX                             ; PRINT BASE PORT
9442 BD991B           (     cubix_fp.asm):00293                 JSR     LFCR                              ; AND CRLF
9445                  (     cubix_fp.asm):00294         FPDIS_INIT_WERROR:
9445 39               (     cubix_fp.asm):00295                 RTS
9446                  (     cubix_fp.asm):00296         FRONTPANELDISPLAYINIT:
9446 80               (     cubix_fp.asm):00297                 FCB     $80                               ; set command mode
9447 AE               (     cubix_fp.asm):00298                 FCB     $AE                               ; set display off
9448 817F             (     cubix_fp.asm):00299                 FCB     $81,$7F                           ; set contrast
944A A6               (     cubix_fp.asm):00300                 FCB     $A6                               ; normal display (a7=inverse)
944B 2000             (     cubix_fp.asm):00301                 FCB     $20,00                            ; horizontal addressing mode
944D A0               (     cubix_fp.asm):00302                 FCB     $A0                               ; segment remap (inverse)
944E A83F             (     cubix_fp.asm):00303                 FCB     $A8,$3F                           ; Multiplex ratio (64 pix)
9450 C8               (     cubix_fp.asm):00304                 FCB     $C8                               ; set com scan direction
9451 D300             (     cubix_fp.asm):00305                 FCB     $D3,$00                           ; set display offset
9453 DA12             (     cubix_fp.asm):00306                 FCB     $DA,$12                           ; pin hardware config
9455 D580             (     cubix_fp.asm):00307                 FCB     $D5,$80                           ; display clock divisor
9457 D922             (     cubix_fp.asm):00308                 FCB     $D9,$22                           ; set pre-charge
9459 DB20             (     cubix_fp.asm):00309                 FCB     $DB,$20                           ; set deselect level
945B 8D14             (     cubix_fp.asm):00310                 FCB     $8D,$14                           ; set charge pump
945D A4               (     cubix_fp.asm):00311                 FCB     $A4                               ; set display RAM on
945E AF               (     cubix_fp.asm):00312                 FCB     $AF                               ; set display on
945F 40               (     cubix_fp.asm):00313                 FCB     $40                               ; set start line
9460 2000             (     cubix_fp.asm):00314                 FCB     $20,00                            ; horizontal addressing mode
9462 21007F           (     cubix_fp.asm):00315                 FCB     $21,0,127                         ; set col start/end
9465 220007           (     cubix_fp.asm):00316                 FCB     $22,0,7                           ; set page start/end
9468 AF               (     cubix_fp.asm):00317                 FCB     $AF                               ; set display on
9469                  (     cubix_fp.asm):00318         FRONTPANELDISPLAYINITEND:
                      (     cubix_fp.asm):00319         
                      (     cubix_fp.asm):00320         ;*__FPDIS_CLEAR_______________________________________________________________________________________
                      (     cubix_fp.asm):00321         ;*
                      (     cubix_fp.asm):00322         ;*       CLEAR   FRONT PANEL DISPLAY
                      (     cubix_fp.asm):00323         ;*
                      (     cubix_fp.asm):00324         ;*____________________________________________________________________________________________________
9469                  (     cubix_fp.asm):00325         FPDIS_CLEAR:
9469 8600             (     cubix_fp.asm):00326                 LDA     #$00
946B C600             (     cubix_fp.asm):00327                 LDB     #$00
946D BD9489           (     cubix_fp.asm):00328                 JSR     FPDIS_SETXY
9470 108E0064         (     cubix_fp.asm):00329                 LDY     #100
                      (     cubix_fp.asm):00330         !
9474 8620             (     cubix_fp.asm):00331                 LDA     #' '
9476 BD94AE           (     cubix_fp.asm):00332                 JSR     FPDIS_OUTCH
9479 313F             (     cubix_fp.asm):00333                 DEY
947B 108C0000         (     cubix_fp.asm):00334                 CMPY    #00
947F 26F3             (     cubix_fp.asm):00335                 BNE     <
9481 8600             (     cubix_fp.asm):00336                 LDA     #$00
9483 C600             (     cubix_fp.asm):00337                 LDB     #$00
9485 BD9489           (     cubix_fp.asm):00338                 JSR     FPDIS_SETXY
9488 39               (     cubix_fp.asm):00339                 RTS
                      (     cubix_fp.asm):00340         
                      (     cubix_fp.asm):00341         ;*__FPDIS_SETXY_______________________________________________________________________________________
                      (     cubix_fp.asm):00342         ;*
                      (     cubix_fp.asm):00343         ;*       Set X,Y on FRONT PANEL DISPLAY
                      (     cubix_fp.asm):00344         ;*       X=A, Y=B
                      (     cubix_fp.asm):00345         ;*____________________________________________________________________________________________________
9489                  (     cubix_fp.asm):00346         FPDIS_SETXY:
9489 FC02F8           (     cubix_fp.asm):00347                 LDD     >PAGER_D                          ; RESTORE 'D'
948C B794A8           (     cubix_fp.asm):00348                 STA     FPDIS_X
948F F794AB           (     cubix_fp.asm):00349                 STB     FPDIS_Y
9492 B696EF           (     cubix_fp.asm):00350                 LDA     PCF_FAIL_FLAG                     ; skip if no PCF
9495 8100             (     cubix_fp.asm):00351                 CMPA    #$00
9497 260C             (     cubix_fp.asm):00352                 BNE     FPDIS_SETXY_WERROR
9499                  (     cubix_fp.asm):00353         FPDIS_SETXY_INTERNAL:
9499 8E94A6           (     cubix_fp.asm):00354                 LDX     #FPDISSETXYCONTROL
949C 108E0008         (     cubix_fp.asm):00355                 LDY     #FPDISSETXYCONTROLEND-FPDISSETXYCONTROL
94A0 863C             (     cubix_fp.asm):00356                 LDA     #FPDIS_I2C_ADDRESS
94A2 BD9701           (     cubix_fp.asm):00357                 JSR     PCF_SENDBYTES_INTERNAL
94A5                  (     cubix_fp.asm):00358         FPDIS_SETXY_WERROR:
94A5 39               (     cubix_fp.asm):00359                 RTS
94A6                  (     cubix_fp.asm):00360         FPDISSETXYCONTROL:
94A6 80               (     cubix_fp.asm):00361                 FCB     $80                               ; set command mode
94A7 21               (     cubix_fp.asm):00362                 FCB     $21
94A8                  (     cubix_fp.asm):00363         FPDIS_X:
94A8 00               (     cubix_fp.asm):00364                 FCB     $00
94A9 7F               (     cubix_fp.asm):00365                 FCB     127                               ; set col start/end
94AA 22               (     cubix_fp.asm):00366                 FCB     $22
94AB                  (     cubix_fp.asm):00367         FPDIS_Y:
94AB 00               (     cubix_fp.asm):00368                 FCB     $00
94AC 07               (     cubix_fp.asm):00369                 FCB     7                                 ; set page start/end
94AD AF               (     cubix_fp.asm):00370                 FCB     $AF                               ; set display on
94AE                  (     cubix_fp.asm):00371         FPDISSETXYCONTROLEND:
                      (     cubix_fp.asm):00372         
                      (     cubix_fp.asm):00373         
                      (     cubix_fp.asm):00374         ;*__FPDIS_OUTCH_______________________________________________________________________________________
                      (     cubix_fp.asm):00375         ;*
                      (     cubix_fp.asm):00376         ;*       Print Char on FRONT PANEL DISPLAY
                      (     cubix_fp.asm):00377         ;*      A=CHAR
                      (     cubix_fp.asm):00378         ;*____________________________________________________________________________________________________
94AE                  (     cubix_fp.asm):00379         FPDIS_OUTCH:
94AE 3436             (     cubix_fp.asm):00380                 PSHS    D,X,Y
94B0 B696EF           (     cubix_fp.asm):00381                 LDA     PCF_FAIL_FLAG                     ; skip if no PCF
94B3 8100             (     cubix_fp.asm):00382                 CMPA    #$00
94B5 265A             (     cubix_fp.asm):00383                 BNE     FPDIS_OUTCH_WERROR
94B7 BD9499           (     cubix_fp.asm):00384                 JSR     FPDIS_SETXY_INTERNAL
94BA FC02F8           (     cubix_fp.asm):00385                 LDD     >PAGER_D                          ; RESTORE 'D'
94BD BE951B           (     cubix_fp.asm):00386                 LDX     FPDIS_OUTCHFONT
94C0 815A             (     cubix_fp.asm):00387                 CMPA    #$5A
94C2 2F0C             (     cubix_fp.asm):00388                 BLE     >
94C4 1A01             (     cubix_fp.asm):00389                 SEC
94C6 8220             (     cubix_fp.asm):00390                 SBCA    #$20
94C8 8130             (     cubix_fp.asm):00391                 CMPA    #$30
94CA 2E04             (     cubix_fp.asm):00392                 BGT     >
94CC 1A01             (     cubix_fp.asm):00393                 SEC
94CE 822F             (     cubix_fp.asm):00394                 SBCA    #$2F
                      (     cubix_fp.asm):00395         !
94D0 C605             (     cubix_fp.asm):00396                 LDB     #5
94D2 3D               (     cubix_fp.asm):00397                 MUL
94D3 FD95F7           (     cubix_fp.asm):00398                 STD     FPDIS_TEMPWORD
94D6 108E9515         (     cubix_fp.asm):00399                 LDY     #FPDIS_OUTCHDATA+1
94DA 8E951B           (     cubix_fp.asm):00400                 LDX     #FPDIS_OUTCHFONT
                      (     cubix_fp.asm):00401         !
94DD A68995F7         (     cubix_fp.asm):00402                 LDA     FPDIS_TEMPWORD,X
94E1 10AFA0           (     cubix_fp.asm):00403                 STY     ,Y+
94E4 3001             (     cubix_fp.asm):00404                 INX
94E6 10BC951B         (     cubix_fp.asm):00405                 CMPY    FPDIS_OUTCHDATA+7
94EA 26F1             (     cubix_fp.asm):00406                 BNE     <
94EC 8E9514           (     cubix_fp.asm):00407                 LDX     #FPDIS_OUTCHDATA
94EF 108E0007         (     cubix_fp.asm):00408                 LDY     #7
94F3 863C             (     cubix_fp.asm):00409                 LDA     #FPDIS_I2C_ADDRESS
94F5 BD9701           (     cubix_fp.asm):00410                 JSR     PCF_SENDBYTES_INTERNAL
94F8 B694A8           (     cubix_fp.asm):00411                 LDA     FPDIS_X
94FB 1CFE             (     cubix_fp.asm):00412                 CLC
94FD 8B06             (     cubix_fp.asm):00413                 ADDA    #6
94FF B794A8           (     cubix_fp.asm):00414                 STA     FPDIS_X
9502 B694A8           (     cubix_fp.asm):00415                 LDA     FPDIS_X
9505 8196             (     cubix_fp.asm):00416                 CMPA    #150
9507 2F08             (     cubix_fp.asm):00417                 BLE     >
9509 7C94AB           (     cubix_fp.asm):00418                 INC     FPDIS_Y
950C 8600             (     cubix_fp.asm):00419                 LDA     #$00
950E B794A8           (     cubix_fp.asm):00420                 STA     FPDIS_X
                      (     cubix_fp.asm):00421         !
9511                  (     cubix_fp.asm):00422         FPDIS_OUTCH_WERROR:
9511 3536             (     cubix_fp.asm):00423                 PULS    D,X,Y
9513 39               (     cubix_fp.asm):00424                 RTS
                      (     cubix_fp.asm):00425         
9514                  (     cubix_fp.asm):00426         FPDIS_OUTCHDATA:
9514 40000000000000   (     cubix_fp.asm):00427                 FCB     $40,$00,$00,$00,$00,$00,$00
                      (     cubix_fp.asm):00428         
951B                  (     cubix_fp.asm):00429         FPDIS_OUTCHFONT:
951B 0000000000       (     cubix_fp.asm):00430                 FCB     $00,$00,$00,$00,$00               ; _
9520 3E415D413E       (     cubix_fp.asm):00431                 FCB     $3E,$41,$5D,$41,$3E               ; 0
9525 00407F4200       (     cubix_fp.asm):00432                 FCB     $00,$40,$7F,$42,$00               ; 1
952A 4245495162       (     cubix_fp.asm):00433                 FCB     $42,$45,$49,$51,$62               ; 2
952F 3649414122       (     cubix_fp.asm):00434                 FCB     $36,$49,$41,$41,$22               ; 3
9534 107F121418       (     cubix_fp.asm):00435                 FCB     $10,$7F,$12,$14,$18               ; 4
9539 1129454547       (     cubix_fp.asm):00436                 FCB     $11,$29,$45,$45,$47               ; 5
953E 304949493E       (     cubix_fp.asm):00437                 FCB     $30,$49,$49,$49,$3E               ; 6
9543 0305091161       (     cubix_fp.asm):00438                 FCB     $03,$05,$09,$11,$61               ; 7
9548 3649494936       (     cubix_fp.asm):00439                 FCB     $36,$49,$49,$49,$36               ; 8
954D 3E49494906       (     cubix_fp.asm):00440                 FCB     $3E,$49,$49,$49,$06               ; 9
9552 0000000000       (     cubix_fp.asm):00441                 FCB     $00,$00,$00,$00,$00               ; :
9557 0000000000       (     cubix_fp.asm):00442                 FCB     $00,$00,$00,$00,$00               ; ;
955C 0000000000       (     cubix_fp.asm):00443                 FCB     $00,$00,$00,$00,$00               ; <
9561 1414141414       (     cubix_fp.asm):00444                 FCB     $14,$14,$14,$14,$14               ; =
9566 0000000000       (     cubix_fp.asm):00445                 FCB     $00,$00,$00,$00,$00               ; >
956B 0000000000       (     cubix_fp.asm):00446                 FCB     $00,$00,$00,$00,$00               ; ?
9570 22147F1402       (     cubix_fp.asm):00447                 FCB     $22,$14,$7F,$14,$02               ; *
9575 7E0909097E       (     cubix_fp.asm):00448                 FCB     $7E,$09,$09,$09,$7E               ; A
957A 364949497F       (     cubix_fp.asm):00449                 FCB     $36,$49,$49,$49,$7F               ; B
957F 224141413E       (     cubix_fp.asm):00450                 FCB     $22,$41,$41,$41,$3E               ; C
9584 3E4141417F       (     cubix_fp.asm):00451                 FCB     $3E,$41,$41,$41,$7F               ; D
9589 414949497F       (     cubix_fp.asm):00452                 FCB     $41,$49,$49,$49,$7F               ; E
958E 010109097F       (     cubix_fp.asm):00453                 FCB     $01,$01,$09,$09,$7F               ; F
9593 384949413E       (     cubix_fp.asm):00454                 FCB     $38,$49,$49,$41,$3E               ; G
9598 7F0808087F       (     cubix_fp.asm):00455                 FCB     $7F,$08,$08,$08,$7F               ; H
959D 00417F4100       (     cubix_fp.asm):00456                 FCB     $00,$41,$7F,$41,$00               ; I
95A2 3F40404030       (     cubix_fp.asm):00457                 FCB     $3F,$40,$40,$40,$30               ; J
95A7 412214087F       (     cubix_fp.asm):00458                 FCB     $41,$22,$14,$08,$7F               ; K
95AC 404040407F       (     cubix_fp.asm):00459                 FCB     $40,$40,$40,$40,$7F               ; L
95B1 7F0304037F       (     cubix_fp.asm):00460                 FCB     $7F,$03,$04,$03,$7F               ; M
95B6 7F0804027F       (     cubix_fp.asm):00461                 FCB     $7F,$08,$04,$02,$7F               ; N
95BB 3E4141413E       (     cubix_fp.asm):00462                 FCB     $3E,$41,$41,$41,$3E               ; O
95C0 060909097F       (     cubix_fp.asm):00463                 FCB     $06,$09,$09,$09,$7F               ; P
95C5 7E6151413E       (     cubix_fp.asm):00464                 FCB     $7E,$61,$51,$41,$3E               ; Q
95CA 064929197F       (     cubix_fp.asm):00465                 FCB     $06,$49,$29,$19,$7F               ; R
95CF 3049494906       (     cubix_fp.asm):00466                 FCB     $30,$49,$49,$49,$06               ; S
95D4 01017F0101       (     cubix_fp.asm):00467                 FCB     $01,$01,$7F,$01,$01               ; T
95D9 3F4040403F       (     cubix_fp.asm):00468                 FCB     $3F,$40,$40,$40,$3F               ; U
95DE 1F2040201F       (     cubix_fp.asm):00469                 FCB     $1F,$20,$40,$20,$1F               ; V
95E3 3F4078403F       (     cubix_fp.asm):00470                 FCB     $3F,$40,$78,$40,$3F               ; W
95E8 4136083641       (     cubix_fp.asm):00471                 FCB     $41,$36,$08,$36,$41               ; X
95ED 0304780403       (     cubix_fp.asm):00472                 FCB     $03,$04,$78,$04,$03               ; Y
95F2 4345495262       (     cubix_fp.asm):00473                 FCB     $43,$45,$49,$52,$62               ; Z
95F7                  (     cubix_fp.asm):00474         TESTMESSAGEDATAEND:
95F7                  (     cubix_fp.asm):00475         FPDIS_TEMPWORD:
95F7 0000             (     cubix_fp.asm):00476                 FCB     $00,$00
                      (     cubix_fp.asm):00477         
95F9                  (     cubix_fp.asm):00478         FPMESSAGE1:
95F9 46524F4E54205041 (     cubix_fp.asm):00479                 FCC     "FRONT PANEL:"
     4E454C3A
9605 0D0A             (     cubix_fp.asm):00480                 FCB     $0D,$0A
9607 20494F3D307800   (     cubix_fp.asm):00481                 FCN     " IO=0x"
960E                  (     cubix_fp.asm):00482         FPMESSAGE2:
960E 205357495443483A (     cubix_fp.asm):00483                 FCN     " SWITCH: "
     2000
                      (     cubix_fp.asm):00484         
9618                  (     cubix_fp.asm):00485         FPSDMESSAGE1
9618 46502D53443A     (     cubix_fp.asm):00486                 FCC     "FP-SD:"
961E 00               (     cubix_fp.asm):00487                 FCB     00
961F                  (     cubix_fp.asm):00488         FPSDMESSAGE2
961F 20414444523D3078 (     cubix_fp.asm):00489                 FCC     " ADDR=0x"
9627 00               (     cubix_fp.asm):00490                 FCB     00
9628                  (     cubix_fp.asm):00491         FPSDMESSAGE3
9628 204E4F5420505245 (     cubix_fp.asm):00492                 FCC     " NOT PRESENT"
     53454E54
9634 00               (     cubix_fp.asm):00493                 FCB     00
9635                  (     cubix_fp.asm):00494         FPSDMESSAGE6
9635 20544F54414C2042 (     cubix_fp.asm):00495                 FCC     " TOTAL BYTES=0x"
     595445533D3078
9644 00               (     cubix_fp.asm):00496                 FCB     00
9645                  (     cubix_fp.asm):00497         FPDISPMESSAGE1
9645 46502D444953504C (     cubix_fp.asm):00498                 FCC     "FP-DISPLAY:"
     41593A
9650 00               (     cubix_fp.asm):00499                 FCB     00
9651                  (     cubix_fp.asm):00500         FPDISPMESSAGE2
9651 20414444523D3078 (     cubix_fp.asm):00501                 FCC     " ADDR=0x"
9659 00               (     cubix_fp.asm):00502                 FCB     00
965A                  (     cubix_fp.asm):00503         FPSDFAILFLAG:
965A FF               (     cubix_fp.asm):00504                 FCB     $FF
965B                  (     cubix_fp.asm):00505         FPSDDEVICE:
965B FF               (     cubix_fp.asm):00506                 FCB     $FF
965C                  (     cubix_fp.asm):00507         FPSDSENDADDRESS:
965C 5300000000       (     cubix_fp.asm):00508                 FCB     'S',$00,$00,$00,$00
9661                  (     cubix_fp.asm):00509         FPSDSENDREAD:
9661 52               (     cubix_fp.asm):00510                 FCB     'R'
9662                  (     cubix_fp.asm):00511         FPSDSENDINFO:
9662 4900             (     cubix_fp.asm):00512                 FCB     'I',$00
                      (     cubixdrv.asm):00098                 INCLUDE cubix_i2c.asm
                      (    cubix_i2c.asm):00001         ;__PCF DRIVER____________________________________________________________________________________________________________________
                      (    cubix_i2c.asm):00002         ;
                      (    cubix_i2c.asm):00003         ; PCF8584 I2C DRIVER
                      (    cubix_i2c.asm):00004         ;
                      (    cubix_i2c.asm):00005         ;       Entry points:
                      (    cubix_i2c.asm):00006         ;               PCF_INIT
                      (    cubix_i2c.asm):00007         ;               PCF_SENDBYTES
                      (    cubix_i2c.asm):00008         ;               PCF_READBYTES
                      (    cubix_i2c.asm):00009         ;               PCF_INITDEV
                      (    cubix_i2c.asm):00010         ;
                      (    cubix_i2c.asm):00011         ;________________________________________________________________________________________________________________________________
                      (    cubix_i2c.asm):00012         ;
                      (    cubix_i2c.asm):00013         ;
     DF56             (    cubix_i2c.asm):00014         PCF_BASE        = $DF56                           ; PORT
     00AA             (    cubix_i2c.asm):00015         PCF_ID          = $AA
     0008             (    cubix_i2c.asm):00016         CPU_CLK         = 8
                      (    cubix_i2c.asm):00017         ;
     DF56             (    cubix_i2c.asm):00018         PCF_RS0         = PCF_BASE
     DF57             (    cubix_i2c.asm):00019         PCF_RS1         = PCF_RS0+1
     0055             (    cubix_i2c.asm):00020         PCF_OWN         = $55                             ; PCF_ID>>1   PCF'S ADDRESS IN SLAVE MODE  (LWASM does not seem to have a bit shift operator)
                      (    cubix_i2c.asm):00021         ;
                      (    cubix_i2c.asm):00022         ;
                      (    cubix_i2c.asm):00023         ; CONTROL REGISTER BITS
                      (    cubix_i2c.asm):00024         ;
     0080             (    cubix_i2c.asm):00025         PCF_PIN         = %10000000
     0040             (    cubix_i2c.asm):00026         PCF_ES0         = %01000000
     0020             (    cubix_i2c.asm):00027         PCF_ES1         = %00100000
     0010             (    cubix_i2c.asm):00028         PCF_ES2         = %00010000
     0008             (    cubix_i2c.asm):00029         PCF_EN1         = %00001000
     0004             (    cubix_i2c.asm):00030         PCF_STA         = %00000100
     0002             (    cubix_i2c.asm):00031         PCF_STO         = %00000010
     0001             (    cubix_i2c.asm):00032         PCF_ACK         = %00000001
                      (    cubix_i2c.asm):00033         ;
     00C5             (    cubix_i2c.asm):00034         PCF_START_      = PCF_PIN|PCF_ES0|PCF_STA|PCF_ACK
     00C3             (    cubix_i2c.asm):00035         PCF_STOP_       = PCF_PIN|PCF_ES0|PCF_STO|PCF_ACK
                      (    cubix_i2c.asm):00036         ;PCF_REPSTART_   = PCF_ES0|PCF_STA|PCF_ACK
     00C1             (    cubix_i2c.asm):00037         PCF_IDLE_       = PCF_PIN|PCF_ES0|PCF_ACK
                      (    cubix_i2c.asm):00038         ;
                      (    cubix_i2c.asm):00039         ; STATUS REGISTER BITS
                      (    cubix_i2c.asm):00040         ;
                      (    cubix_i2c.asm):00041         ;PCF_PIN        =  %10000000
     0040             (    cubix_i2c.asm):00042         PCF_INI         = %01000000                       ; 1 if not initialized
     0020             (    cubix_i2c.asm):00043         PCF_STS         = %00100000
     0010             (    cubix_i2c.asm):00044         PCF_BER         = %00010000
     0008             (    cubix_i2c.asm):00045         PCF_AD0         = %00001000
     0008             (    cubix_i2c.asm):00046         PCF_LRB         = %00001000
     0004             (    cubix_i2c.asm):00047         PCF_AAS         = %00000100
     0002             (    cubix_i2c.asm):00048         PCF_LAB         = %00000010
     0001             (    cubix_i2c.asm):00049         PCF_BB          = %00000001
                      (    cubix_i2c.asm):00050         ;
                      (    cubix_i2c.asm):00051         ; THE PCF8584 TARGETS A TOP I2C CLOCK SPEED OF 90KHZ AND SUPPORTS DIVIDERS FOR
                      (    cubix_i2c.asm):00052         ; 3, 4.43, 6, 8 AND 12MHZ TO ACHEIVE THIS.
                      (    cubix_i2c.asm):00053         ;
                      (    cubix_i2c.asm):00054         ; +--------------------------------------------------------------------------------------------+
                      (    cubix_i2c.asm):00055         ; | div/clk |  2MHz |  4MHz  |  6MHz | 7.38Mhz |  10MHz | 12MHz |  16MHz | 18.432Mhz |  20MHz  |
                      (    cubix_i2c.asm):00056         ; +----------------------------------------------------------------------------------+---------+
                      (    cubix_i2c.asm):00057         ; |   3MHz  | 60Khz | 120Khz |       |         |        |       |        |           |         |
                      (    cubix_i2c.asm):00058         ; | 4.43MHz |       |  81Khz |       |         |        |       |        |           |         |
                      (    cubix_i2c.asm):00059         ; |   6MHz  |       |        | 90Khz | 110Khz  |        |       |        |           |         |
                      (    cubix_i2c.asm):00060         ; |   8MHz  |       |        |       |  83Khz  | 112Khz |       |        |           |         |
                      (    cubix_i2c.asm):00061         ; |  12MHz  |       |        |       |         |        | 90Khz | 120Khz |   138Khz  |  150Khz |
                      (    cubix_i2c.asm):00062         ; +----------------------------------------------------------------------------------+---------+
                      (    cubix_i2c.asm):00063         ;
                      (    cubix_i2c.asm):00064         ; CLOCK CHIP FREQUENCIES
                      (    cubix_i2c.asm):00065         ;
     0000             (    cubix_i2c.asm):00066         PCF_CLK3        = $00
     0010             (    cubix_i2c.asm):00067         PCF_CLK443      = $10
     0014             (    cubix_i2c.asm):00068         PCF_CLK6        = $14
     0018             (    cubix_i2c.asm):00069         PCF_CLK8        = $18
     001C             (    cubix_i2c.asm):00070         PCF_CLK12       = $1C
                      (    cubix_i2c.asm):00071         ;
                      (    cubix_i2c.asm):00072         ; TRANSMISSION FREQUENCIES
                      (    cubix_i2c.asm):00073         ;
     0000             (    cubix_i2c.asm):00074         PCF_TRNS90      = $00                             ;  90 kHz */
     0001             (    cubix_i2c.asm):00075         PCF_TRNS45      = $01                             ;  45 kHz */
     0002             (    cubix_i2c.asm):00076         PCF_TRNS11      = $02                             ;  11 kHz */
     0003             (    cubix_i2c.asm):00077         PCF_TRNS15      = $03                             ; 1.5 kHz */
                      (    cubix_i2c.asm):00078         ;
                      (    cubix_i2c.asm):00079         ; BELOW VARIABLES CONTROL PCF CLOCK DIVISOR PROGRAMMING
                      (    cubix_i2c.asm):00080         ; HARD-CODED FOR NOW
                      (    cubix_i2c.asm):00081         ;
     0018             (    cubix_i2c.asm):00082         PCF_CLK         = PCF_CLK8
     0000             (    cubix_i2c.asm):00083         PCF_TRNS        = PCF_TRNS90
                      (    cubix_i2c.asm):00084         ;
                      (    cubix_i2c.asm):00085         ; TIMEOUT AND DELAY VALUES (ARBITRARY)
                      (    cubix_i2c.asm):00086         ;
     FDE8             (    cubix_i2c.asm):00087         PCF_PINTO       = 65000
     FDE8             (    cubix_i2c.asm):00088         PCF_ACKTO       = 65000
     FDE8             (    cubix_i2c.asm):00089         PCF_BBTO        = 65000
     FDE8             (    cubix_i2c.asm):00090         PCF_LABDLY      = 65000
                      (    cubix_i2c.asm):00091         ;
                      (    cubix_i2c.asm):00092         ;
                      (    cubix_i2c.asm):00093         ;__PCF_INIT___________________________________________________________________________________________
                      (    cubix_i2c.asm):00094         ;
                      (    cubix_i2c.asm):00095         ;  FRONT PANEL INIT
                      (    cubix_i2c.asm):00096         ;____________________________________________________________________________________________________
                      (    cubix_i2c.asm):00097         ;
9664                  (    cubix_i2c.asm):00098         PCF_INIT:
9664 BD991B           (    cubix_i2c.asm):00099                 JSR     LFCR                              ; AND CRLF
9667 8E968A           (    cubix_i2c.asm):00100                 LDX     #PCFMESSAGE1
966A BD992F           (    cubix_i2c.asm):00101                 JSR     WRSTR                             ; DO PROMPT
966D CCDF56           (    cubix_i2c.asm):00102                 LDD     #PCF_BASE                         ; GET BASE PORT
9670 BD993B           (    cubix_i2c.asm):00103                 JSR     WRHEXW                            ; PRINT BASE PORT
9673 BD9927           (    cubix_i2c.asm):00104                 JSR     SPACE
9676 BD969B           (    cubix_i2c.asm):00105                 JSR     PCF_INITDEV
9679 B696EF           (    cubix_i2c.asm):00106                 LDA     PCF_FAIL_FLAG
967C 8100             (    cubix_i2c.asm):00107                 CMPA    #$00
967E 2606             (    cubix_i2c.asm):00108                 BNE     >
9680 8E9862           (    cubix_i2c.asm):00109                 LDX     #PCF_PCFOK
9683 BD992F           (    cubix_i2c.asm):00110                 JSR     WRSTR
                      (    cubix_i2c.asm):00111         !
9686 BD991B           (    cubix_i2c.asm):00112                 JSR     LFCR                              ; AND CRLF
9689 39               (    cubix_i2c.asm):00113                 RTS                                       ; DONE
968A                  (    cubix_i2c.asm):00114         PCFMESSAGE1:
968A 493243205043463A (    cubix_i2c.asm):00115                 FCC     "I2C PCF:"
9692 0D0A             (    cubix_i2c.asm):00116                 FCB     $0D,$0A
9694 20494F3D307800   (    cubix_i2c.asm):00117                 FCN     " IO=0x"
                      (    cubix_i2c.asm):00118         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00119         ;
969B                  (    cubix_i2c.asm):00120         PCF_INITDEV:
969B 8680             (    cubix_i2c.asm):00121                 LDA     #PCF_PIN                          ; S1=80H: S0 SELECTED, SERIAL
969D B7DF57           (    cubix_i2c.asm):00122                 STA     PCF_RS1                           ; INTERFACE OFF
96A0 12               (    cubix_i2c.asm):00123                 NOP
96A1 B6DF57           (    cubix_i2c.asm):00124                 LDA     PCF_RS1                           ; CHECK TO SEE S1 NOW USED AS R/W
96A4 847F             (    cubix_i2c.asm):00125                 ANDA    #$7F                              ; CTRL. PCF8584 DOES THAT WHEN ESO
96A6 263E             (    cubix_i2c.asm):00126                 BNE     PCF_FAIL                          ; IS ZERO
                      (    cubix_i2c.asm):00127         ;
96A8 8655             (    cubix_i2c.asm):00128                 LDA     #PCF_OWN                          ; LOAD OWN ADDRESS IN S0,
96AA B7DF56           (    cubix_i2c.asm):00129                 STA     PCF_RS0                           ; EFFECTIVE ADDRESS IS (OWN <<1)
96AD 12               (    cubix_i2c.asm):00130                 NOP
96AE B6DF56           (    cubix_i2c.asm):00131                 LDA     PCF_RS0                           ; CHECK IT IS REALLY WRITTEN
96B1 8155             (    cubix_i2c.asm):00132                 CMPA    #PCF_OWN
96B3 10260161         (    cubix_i2c.asm):00133                 LBNE    PCF_SETERR
                      (    cubix_i2c.asm):00134         ;
96B7 86A0             (    cubix_i2c.asm):00135                 LDA     #PCF_PIN|PCF_ES1                  ; S1=0A0H
96B9 B7DF57           (    cubix_i2c.asm):00136                 STA     PCF_RS1                           ; NEXT BYTE IN S2
96BC 12               (    cubix_i2c.asm):00137                 NOP
96BD B6DF57           (    cubix_i2c.asm):00138                 LDA     PCF_RS1
                      (    cubix_i2c.asm):00139         ;
96C0 8618             (    cubix_i2c.asm):00140                 LDA     #PCF_CLK|PCF_TRNS                 ; LOAD CLOCK REGISTER S2
96C2 B7DF56           (    cubix_i2c.asm):00141                 STA     PCF_RS0
96C5 12               (    cubix_i2c.asm):00142                 NOP
96C6 B6DF56           (    cubix_i2c.asm):00143                 LDA     PCF_RS0                           ; CHECK IT'S REALLY WRITTEN, ONLY
96C9 841F             (    cubix_i2c.asm):00144                 ANDA    #$1F                              ; THE LOWER 5 BITS MATTER
96CB 8118             (    cubix_i2c.asm):00145                 CMPA    #PCF_CLK|PCF_TRNS
96CD 1026014E         (    cubix_i2c.asm):00146                 LBNE    PCF_CLKERR
                      (    cubix_i2c.asm):00147         ;
96D1 86C1             (    cubix_i2c.asm):00148                 LDA     #PCF_IDLE_
96D3 B7DF57           (    cubix_i2c.asm):00149                 STA     PCF_RS1
96D6 12               (    cubix_i2c.asm):00150                 NOP
96D7 B6DF57           (    cubix_i2c.asm):00151                 LDA     PCF_RS1
96DA 8181             (    cubix_i2c.asm):00152                 CMPA    #PCF_PIN|PCF_BB
96DC 10260146         (    cubix_i2c.asm):00153                 LBNE    PCF_IDLERR
                      (    cubix_i2c.asm):00154         ;
96E0 8600             (    cubix_i2c.asm):00155                 LDA     #$00
96E2 B796EF           (    cubix_i2c.asm):00156                 STA     PCF_FAIL_FLAG
96E5 39               (    cubix_i2c.asm):00157                 RTS
                      (    cubix_i2c.asm):00158         ;
96E6                  (    cubix_i2c.asm):00159         PCF_FAIL:
96E6 BD9811           (    cubix_i2c.asm):00160                 JSR     PCF_INIERR
96E9 86FF             (    cubix_i2c.asm):00161                 LDA     #$FF
96EB B796EF           (    cubix_i2c.asm):00162                 STA     PCF_FAIL_FLAG
96EE 39               (    cubix_i2c.asm):00163                 RTS
                      (    cubix_i2c.asm):00164         ;
96EF                  (    cubix_i2c.asm):00165         PCF_FAIL_FLAG:
96EF 00               (    cubix_i2c.asm):00166                 FCB     0
                      (    cubix_i2c.asm):00167         ;
                      (    cubix_i2c.asm):00168         ;
                      (    cubix_i2c.asm):00169         ;--------------------------------------------------------------------------------
                      (    cubix_i2c.asm):00170         ;
                      (    cubix_i2c.asm):00171         ;       Y = COUNT
                      (    cubix_i2c.asm):00172         ;       A = Device Address/Return Status
                      (    cubix_i2c.asm):00173         ;   RETURN FF=ERROR
                      (    cubix_i2c.asm):00174         ;          00=SUCCESS
                      (    cubix_i2c.asm):00175         ;
96F0                  (    cubix_i2c.asm):00176         PCF_SENDBYTES:
96F0 B696EF           (    cubix_i2c.asm):00177                 LDA     PCF_FAIL_FLAG
96F3 8100             (    cubix_i2c.asm):00178                 CMPA    #$00
96F5 264E             (    cubix_i2c.asm):00179                 BNE     PCF_WERROR
96F7 BE02FA           (    cubix_i2c.asm):00180                 LDX     >PAGER_X
96FA 10BE02FC         (    cubix_i2c.asm):00181                 LDY     >PAGER_Y                          ; RESTORE 'Y'
96FE FC02F8           (    cubix_i2c.asm):00182                 LDD     >PAGER_D                          ; RESTORE 'D'
9701                  (    cubix_i2c.asm):00183         PCF_SENDBYTES_INTERNAL:
9701 3432             (    cubix_i2c.asm):00184                 PSHS    A,X,Y
9703 BD97F2           (    cubix_i2c.asm):00185                 JSR     PCF_WAIT_FOR_BB                   ; DO WE HAVE THE BUS?
9706 8100             (    cubix_i2c.asm):00186                 CMPA    #$00
9708 2708             (    cubix_i2c.asm):00187                 BEQ     PCF_WB1                           ; YES
970A 3532             (    cubix_i2c.asm):00188                 PULS    A,X,Y
970C 86FF             (    cubix_i2c.asm):00189                 LDA     #$FF
970E B702F8           (    cubix_i2c.asm):00190                 STA     >PAGER_D                          ; STORE 'A'
9711 39               (    cubix_i2c.asm):00191                 RTS
9712                  (    cubix_i2c.asm):00192         PCF_WB1:
9712 3532             (    cubix_i2c.asm):00193                 PULS    A,X,Y
9714 48               (    cubix_i2c.asm):00194                 ASLA
9715 84FE             (    cubix_i2c.asm):00195                 ANDA    #$FE
9717 B7DF56           (    cubix_i2c.asm):00196                 STA     PCF_RS0                           ; send device address
971A 86C5             (    cubix_i2c.asm):00197                 LDA     #PCF_START_                       ; begin transmission
971C B7DF57           (    cubix_i2c.asm):00198                 STA     PCF_RS1
                      (    cubix_i2c.asm):00199         !
971F BD97C3           (    cubix_i2c.asm):00200                 JSR     PCF_WAIT_FOR_PIN
9722 8100             (    cubix_i2c.asm):00201                 CMPA    #$00
9724 261F             (    cubix_i2c.asm):00202                 BNE     PCF_WERROR
9726 A680             (    cubix_i2c.asm):00203                 LDA     ,X+
9728 B7DF56           (    cubix_i2c.asm):00204                 STA     PCF_RS0
972B 313F             (    cubix_i2c.asm):00205                 DEY
972D 108C0000         (    cubix_i2c.asm):00206                 CMPY    #$0000
9731 26EC             (    cubix_i2c.asm):00207                 BNE     <
9733 BD97C3           (    cubix_i2c.asm):00208                 JSR     PCF_WAIT_FOR_PIN
9736 8100             (    cubix_i2c.asm):00209                 CMPA    #$00
9738 260B             (    cubix_i2c.asm):00210                 BNE     PCF_WERROR
973A 86C3             (    cubix_i2c.asm):00211                 LDA     #PCF_STOP_                        ; end transmission
973C B7DF57           (    cubix_i2c.asm):00212                 STA     PCF_RS1
973F 8600             (    cubix_i2c.asm):00213                 LDA     #$00
9741 B702F8           (    cubix_i2c.asm):00214                 STA     >PAGER_D                          ; STORE 'A'
9744 39               (    cubix_i2c.asm):00215                 RTS
9745                  (    cubix_i2c.asm):00216         PCF_WERROR:
9745 86C3             (    cubix_i2c.asm):00217                 LDA     #PCF_STOP_                        ; end transmission
9747 B7DF57           (    cubix_i2c.asm):00218                 STA     PCF_RS1
974A 86FF             (    cubix_i2c.asm):00219                 LDA     #$FF
974C B702F8           (    cubix_i2c.asm):00220                 STA     >PAGER_D                          ; STORE 'A'
974F 39               (    cubix_i2c.asm):00221                 RTS
                      (    cubix_i2c.asm):00222         ;
                      (    cubix_i2c.asm):00223         ;--------------------------------------------------------------------------------
                      (    cubix_i2c.asm):00224         ;
                      (    cubix_i2c.asm):00225         ;       Y = COUNT
                      (    cubix_i2c.asm):00226         ;       A = Device Address/Return Status
                      (    cubix_i2c.asm):00227         ;   RETURN FF=ERROR
                      (    cubix_i2c.asm):00228         ;          00=SUCCESS
                      (    cubix_i2c.asm):00229         ;
9750                  (    cubix_i2c.asm):00230         PCF_READBYTES:
9750 B696EF           (    cubix_i2c.asm):00231                 LDA     PCF_FAIL_FLAG
9753 8100             (    cubix_i2c.asm):00232                 CMPA    #$00
9755 2661             (    cubix_i2c.asm):00233                 BNE     PCF_RERROR
9757 BE02FA           (    cubix_i2c.asm):00234                 LDX     >PAGER_X
975A 10BE02FC         (    cubix_i2c.asm):00235                 LDY     >PAGER_Y                          ; RESTORE 'Y'
975E FC02F8           (    cubix_i2c.asm):00236                 LDD     >PAGER_D                          ; RESTORE 'D'
9761                  (    cubix_i2c.asm):00237         PCF_READBYTES_INTERNAL:
9761 48               (    cubix_i2c.asm):00238                 ASLA
9762 8A01             (    cubix_i2c.asm):00239                 ORA     #$01
9764 B7DF56           (    cubix_i2c.asm):00240                 STA     PCF_RS0                           ; send device address
9767 3432             (    cubix_i2c.asm):00241                 PSHS    A,X,Y
9769 BD97F2           (    cubix_i2c.asm):00242                 JSR     PCF_WAIT_FOR_BB                   ; DO WE HAVE THE BUS?
976C 8100             (    cubix_i2c.asm):00243                 CMPA    #$00
976E 2708             (    cubix_i2c.asm):00244                 BEQ     PCF_RB1                           ; YES
9770 3532             (    cubix_i2c.asm):00245                 PULS    A,X,Y
9772 86FF             (    cubix_i2c.asm):00246                 LDA     #$FF
9774 B702F8           (    cubix_i2c.asm):00247                 STA     >PAGER_D                          ; STORE 'A'
9777 39               (    cubix_i2c.asm):00248                 RTS
9778                  (    cubix_i2c.asm):00249         PCF_RB1:
9778 3532             (    cubix_i2c.asm):00250                 PULS    A,X,Y
977A 86C5             (    cubix_i2c.asm):00251                 LDA     #PCF_START_                       ; begin rcv
977C B7DF57           (    cubix_i2c.asm):00252                 STA     PCF_RS1
977F BD97C3           (    cubix_i2c.asm):00253                 JSR     PCF_WAIT_FOR_PIN
9782 B6DF56           (    cubix_i2c.asm):00254                 LDA     PCF_RS0
                      (    cubix_i2c.asm):00255         !
9785 BD97C3           (    cubix_i2c.asm):00256                 JSR     PCF_WAIT_FOR_PIN
9788 8100             (    cubix_i2c.asm):00257                 CMPA    #$00
978A 262C             (    cubix_i2c.asm):00258                 BNE     PCF_RERROR
978C 108C0001         (    cubix_i2c.asm):00259                 CMPY    #$0001
9790 2709             (    cubix_i2c.asm):00260                 BEQ     >
9792 B6DF56           (    cubix_i2c.asm):00261                 LDA     PCF_RS0
9795 A780             (    cubix_i2c.asm):00262                 STA     ,X+
9797 313F             (    cubix_i2c.asm):00263                 DEY
9799 20EA             (    cubix_i2c.asm):00264                 BRA     <
                      (    cubix_i2c.asm):00265         !
979B 8640             (    cubix_i2c.asm):00266                 LDA     #PCF_INI                          ; ack
979D B7DF57           (    cubix_i2c.asm):00267                 STA     PCF_RS1
97A0 B6DF56           (    cubix_i2c.asm):00268                 LDA     PCF_RS0
97A3 A780             (    cubix_i2c.asm):00269                 STA     ,X+
97A5 BD97C3           (    cubix_i2c.asm):00270                 JSR     PCF_WAIT_FOR_PIN
97A8 86C3             (    cubix_i2c.asm):00271                 LDA     #PCF_STOP_                        ; end RCV
97AA B7DF57           (    cubix_i2c.asm):00272                 STA     PCF_RS1
97AD B6DF56           (    cubix_i2c.asm):00273                 LDA     PCF_RS0
97B0 A780             (    cubix_i2c.asm):00274                 STA     ,X+
97B2 8600             (    cubix_i2c.asm):00275                 LDA     #$00
97B4 B702F8           (    cubix_i2c.asm):00276                 STA     >PAGER_D                          ; STORE 'A'
97B7 39               (    cubix_i2c.asm):00277                 RTS
97B8                  (    cubix_i2c.asm):00278         PCF_RERROR:
97B8 86C3             (    cubix_i2c.asm):00279                 LDA     #PCF_STOP_                        ; end RCV
97BA B7DF57           (    cubix_i2c.asm):00280                 STA     PCF_RS1
97BD 86FF             (    cubix_i2c.asm):00281                 LDA     #$FF
97BF B702F8           (    cubix_i2c.asm):00282                 STA     >PAGER_D                          ; STORE 'A'
97C2 39               (    cubix_i2c.asm):00283                 RTS
                      (    cubix_i2c.asm):00284         ;
                      (    cubix_i2c.asm):00285         ;
                      (    cubix_i2c.asm):00286         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00287         ;
                      (    cubix_i2c.asm):00288         ; RETURN A=00/Z  IF SUCCESSFULL
                      (    cubix_i2c.asm):00289         ; RETURN A=FF/NZ IF TIMEOUT
                      (    cubix_i2c.asm):00290         ; RETURN A=01/NZ IF LOST ARBITRATION
                      (    cubix_i2c.asm):00291         ; PCF_STATUS HOLDS LAST PCF STATUS
                      (    cubix_i2c.asm):00292         ;
97C3                  (    cubix_i2c.asm):00293         PCF_WAIT_FOR_PIN:
97C3 3410             (    cubix_i2c.asm):00294                 PSHS    X
97C5 8EFDE8           (    cubix_i2c.asm):00295                 LDX     #PCF_PINTO                        ; SET TIMEOUT VALUE
97C8                  (    cubix_i2c.asm):00296         PCF_WFP0:
97C8 B6DF57           (    cubix_i2c.asm):00297                 LDA     PCF_RS1                           ; GET BUS
97CB B797F1           (    cubix_i2c.asm):00298                 STA     PCF_STATUS                        ; STATUS
97CE 301F             (    cubix_i2c.asm):00299                 DEX                                       ; HAVE WE TIMED OUT
97D0 8C0000           (    cubix_i2c.asm):00300                 CMPX    #$00
97D3 2717             (    cubix_i2c.asm):00301                 BEQ     PCF_WFP1                          ; YES WE HAVE, GO ACTION IT
97D5 8480             (    cubix_i2c.asm):00302                 ANDA    #PCF_PIN                          ; IS TRANSMISSION COMPLETE?
97D7 8100             (    cubix_i2c.asm):00303                 CMPA    #$00
97D9 26ED             (    cubix_i2c.asm):00304                 BNE     PCF_WFP0                          ; KEEP ASKING IF NOT OR
97DB B697F1           (    cubix_i2c.asm):00305                 LDA     PCF_STATUS                        ; WE GOT PIN SO NOW
97DE 8408             (    cubix_i2c.asm):00306                 ANDA    #PCF_LRB                          ; CHECK WE HAVE
97E0 8100             (    cubix_i2c.asm):00307                 CMPA    #$00                              ; CHECK WE HAVE
97E2 2704             (    cubix_i2c.asm):00308                 BEQ     >                                 ; RECEIVED ACKNOWLEDGE
97E4 8601             (    cubix_i2c.asm):00309                 LDA     #$01
97E6 2006             (    cubix_i2c.asm):00310                 BRA     PCF_WFP2
                      (    cubix_i2c.asm):00311         !
97E8 8600             (    cubix_i2c.asm):00312                 LDA     #$00
97EA 2002             (    cubix_i2c.asm):00313                 BRA     PCF_WFP2
97EC                  (    cubix_i2c.asm):00314         PCF_WFP1:
97EC 86FF             (    cubix_i2c.asm):00315                 LDA     #$FF
97EE                  (    cubix_i2c.asm):00316         PCF_WFP2:
97EE 3510             (    cubix_i2c.asm):00317                 PULS    X                                 ; RET NZ, A=FF IF TIMEOUT
97F0 39               (    cubix_i2c.asm):00318                 RTS
                      (    cubix_i2c.asm):00319         ;
97F1                  (    cubix_i2c.asm):00320         PCF_STATUS
97F1 00               (    cubix_i2c.asm):00321                 FCB     $00
                      (    cubix_i2c.asm):00322         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00323         ;
                      (    cubix_i2c.asm):00324         ; POLL THE BUS BUSY BIT TO DETERMINE IF BUS IS FREE.
                      (    cubix_i2c.asm):00325         ; RETURN WITH A=00H/Z STATUS IF BUS IS FREE
                      (    cubix_i2c.asm):00326         ; RETURN WITH A=FFH/NZ STATUS IF BUS IS BUSY
                      (    cubix_i2c.asm):00327         ;
                      (    cubix_i2c.asm):00328         ; AFTER RESET THE BUS BUSY BIT WILL BE SET TO 1 I.E. NOT BUSY
                      (    cubix_i2c.asm):00329         ;
97F2                  (    cubix_i2c.asm):00330         PCF_WAIT_FOR_BB:
97F2 8EFDE8           (    cubix_i2c.asm):00331                 LDX     #PCF_BBTO
97F5                  (    cubix_i2c.asm):00332         PCF_WFBB0:
97F5 B6DF57           (    cubix_i2c.asm):00333                 LDA     PCF_RS1
97F8 8401             (    cubix_i2c.asm):00334                 ANDA    #PCF_BB
97FA 8101             (    cubix_i2c.asm):00335                 CMPA    #PCF_BB
97FC 2709             (    cubix_i2c.asm):00336                 BEQ     >
97FE 301F             (    cubix_i2c.asm):00337                 DEX
9800 8100             (    cubix_i2c.asm):00338                 CMPA    #$00
9802 26F1             (    cubix_i2c.asm):00339                 BNE     PCF_WFBB0                         ; REPEAT IF NOT TIMED OUT
9804 86FF             (    cubix_i2c.asm):00340                 LDA     #$FF                              ; RET NZ IF TIMEOUT
9806 39               (    cubix_i2c.asm):00341                 RTS
                      (    cubix_i2c.asm):00342         !
9807 8600             (    cubix_i2c.asm):00343                 LDA     #$00
9809 39               (    cubix_i2c.asm):00344                 RTS
                      (    cubix_i2c.asm):00345         ;
                      (    cubix_i2c.asm):00346         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00347         ; DISPLAY ERROR MESSAGES
                      (    cubix_i2c.asm):00348         ;
980A                  (    cubix_i2c.asm):00349         PCF_RDERR:
980A 3410             (    cubix_i2c.asm):00350                 PSHS    X
980C 8E98CC           (    cubix_i2c.asm):00351                 LDX     #PCF_RDFAIL
980F 2046             (    cubix_i2c.asm):00352                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00353         ;
9811                  (    cubix_i2c.asm):00354         PCF_INIERR:
9811 3410             (    cubix_i2c.asm):00355                 PSHS    X
9813 8E986A           (    cubix_i2c.asm):00356                 LDX     #PCF_NOPCF
9816 203F             (    cubix_i2c.asm):00357                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00358         ;
9818                  (    cubix_i2c.asm):00359         PCF_SETERR:
9818 3410             (    cubix_i2c.asm):00360                 PSHS    X
981A 8E9876           (    cubix_i2c.asm):00361                 LDX     #PCF_WRTFAIL
981D 2038             (    cubix_i2c.asm):00362                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00363         ;
981F                  (    cubix_i2c.asm):00364         PCF_CLKERR:
981F 3410             (    cubix_i2c.asm):00365                 PSHS    X
9821 8E988F           (    cubix_i2c.asm):00366                 LDX     #PCF_CLKFAIL
9824 2031             (    cubix_i2c.asm):00367                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00368         ;
9826                  (    cubix_i2c.asm):00369         PCF_IDLERR:
9826 3410             (    cubix_i2c.asm):00370                 PSHS    X
9828 8E989E           (    cubix_i2c.asm):00371                 LDX     #PCF_IDLFAIL
982B 202A             (    cubix_i2c.asm):00372                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00373         ;
982D                  (    cubix_i2c.asm):00374         PCF_ACKERR:
982D 3410             (    cubix_i2c.asm):00375                 PSHS    X
982F 8E98AE           (    cubix_i2c.asm):00376                 LDX     #PCF_ACKFAIL
9832 2023             (    cubix_i2c.asm):00377                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00378         ;
9834                  (    cubix_i2c.asm):00379         PCF_RDBERR:
9834 3410             (    cubix_i2c.asm):00380                 PSHS    X
9836 8E98D8           (    cubix_i2c.asm):00381                 LDX     #PCF_RDBFAIL
9839 201C             (    cubix_i2c.asm):00382                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00383         ;
983B                  (    cubix_i2c.asm):00384         PCF_TOERR:
983B 3410             (    cubix_i2c.asm):00385                 PSHS    X
983D 8E98E9           (    cubix_i2c.asm):00386                 LDX     #PCF_TOFAIL
9840 2015             (    cubix_i2c.asm):00387                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00388         ;
9842                  (    cubix_i2c.asm):00389         PCF_ARBERR:
9842 3410             (    cubix_i2c.asm):00390                 PSHS    X
9844 8E98F7           (    cubix_i2c.asm):00391                 LDX     #PCF_ARBFAIL
9847 200E             (    cubix_i2c.asm):00392                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00393         ;
9849                  (    cubix_i2c.asm):00394         PCF_PINERR:
9849 3410             (    cubix_i2c.asm):00395                 PSHS    X
984B 8E9908           (    cubix_i2c.asm):00396                 LDX     #PCF_PINFAIL
984E 2007             (    cubix_i2c.asm):00397                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00398         ;
9850                  (    cubix_i2c.asm):00399         PCF_BBERR:
9850 3410             (    cubix_i2c.asm):00400                 PSHS    X
9852 8E9911           (    cubix_i2c.asm):00401                 LDX     #PCF_BBFAIL
9855 2000             (    cubix_i2c.asm):00402                 BRA     PCF_PRTERR
                      (    cubix_i2c.asm):00403         ;
9857                  (    cubix_i2c.asm):00404         PCF_PRTERR:
9857 BD992F           (    cubix_i2c.asm):00405                 JSR     WRSTR
985A 86FF             (    cubix_i2c.asm):00406                 LDA     #$FF
985C B796EF           (    cubix_i2c.asm):00407                 STA     PCF_FAIL_FLAG
985F 3510             (    cubix_i2c.asm):00408                 PULS    X
9861 39               (    cubix_i2c.asm):00409                 RTS
                      (    cubix_i2c.asm):00410         ;
                      (    cubix_i2c.asm):00411         ;-----------------------------------------------------------------------------
                      (    cubix_i2c.asm):00412         ; DEBUG HELPER
                      (    cubix_i2c.asm):00413         ;
9862                  (    cubix_i2c.asm):00414         PCF_PCFOK:
9862 50524553454E5400 (    cubix_i2c.asm):00415                 FCN     "PRESENT"
986A                  (    cubix_i2c.asm):00416         PCF_NOPCF:
986A 4E4F542050524553 (    cubix_i2c.asm):00417                 FCN     "NOT PRESENT"
     454E5400
                      (    cubix_i2c.asm):00418         
9876                  (    cubix_i2c.asm):00419         PCF_WRTFAIL:
9876 53455454494E4720 (    cubix_i2c.asm):00420                 FCN     "SETTING DEVICE ID FAILED"
     4445564943452049
     44204641494C4544
     00
                      (    cubix_i2c.asm):00421         
988F                  (    cubix_i2c.asm):00422         PCF_CLKFAIL:
988F 434C4F434B205345 (    cubix_i2c.asm):00423                 FCN     "CLOCK SET FAIL"
     54204641494C00
                      (    cubix_i2c.asm):00424         
989E                  (    cubix_i2c.asm):00425         PCF_IDLFAIL:
989E 4255532049444C45 (    cubix_i2c.asm):00426                 FCN     "BUS IDLE FAILED"
     204641494C454400
                      (    cubix_i2c.asm):00427         
98AE                  (    cubix_i2c.asm):00428         PCF_ACKFAIL:
98AE 4641494C45442054 (    cubix_i2c.asm):00429                 FCN     "FAILED TO RECEIVE ACKNOWLEDGE"
     4F20524543454956
     452041434B4E4F57
     4C4544474500
                      (    cubix_i2c.asm):00430         
                      (    cubix_i2c.asm):00431         
                      (    cubix_i2c.asm):00432         
98CC                  (    cubix_i2c.asm):00433         PCF_RDFAIL:
98CC 5245414420464149 (    cubix_i2c.asm):00434                 FCN     "READ FAILED"
     4C454400
                      (    cubix_i2c.asm):00435         
98D8                  (    cubix_i2c.asm):00436         PCF_RDBFAIL:
98D8 5245414442595445 (    cubix_i2c.asm):00437                 FCN     "READBYTES FAILED"
     53204641494C4544
     00
                      (    cubix_i2c.asm):00438         
                      (    cubix_i2c.asm):00439         
98E9                  (    cubix_i2c.asm):00440         PCF_TOFAIL:
98E9 54494D454F555420 (    cubix_i2c.asm):00441                 FCN     "TIMEOUT ERROR"
     4552524F5200
                      (    cubix_i2c.asm):00442         
98F7                  (    cubix_i2c.asm):00443         PCF_ARBFAIL:
98F7 4C4F535420415242 (    cubix_i2c.asm):00444                 FCN     "LOST ARBITRATION"
     4954524154494F4E
     00
                      (    cubix_i2c.asm):00445         
                      (    cubix_i2c.asm):00446         
9908                  (    cubix_i2c.asm):00447         PCF_PINFAIL:
9908 50494E204641494C (    cubix_i2c.asm):00448                 FCN     "PIN FAIL"
     00
                      (    cubix_i2c.asm):00449         
9911                  (    cubix_i2c.asm):00450         PCF_BBFAIL:
9911 4255532042555359 (    cubix_i2c.asm):00451                 FCN     "BUS BUSY"
     00
                      (     cubixdrv.asm):00099         ;        INCLUDE cubix_esp32.asm
                      (     cubixdrv.asm):00100         ;        INCLUDE cubix_dsky.asm
                      (     cubixdrv.asm):00101         
                      (     cubixdrv.asm):00102         
                      (     cubixdrv.asm):00103         
991A                  (     cubixdrv.asm):00104         drv_noop:
991A 39               (     cubixdrv.asm):00105                 RTS
                      (     cubixdrv.asm):00106         
                      (     cubixdrv.asm):00107         ;*
                      (     cubixdrv.asm):00108         ;* OUTPUT LFCR TO CONSOLE
                      (     cubixdrv.asm):00109         ;*
991B                  (     cubixdrv.asm):00110         LFCR:
991B 3406             (     cubixdrv.asm):00111                 PSHS    a,b
991D 860A             (     cubixdrv.asm):00112                 LDA     #10
991F 8D40             (     cubixdrv.asm):00113                 BSR     PUTCHR
9921 860D             (     cubixdrv.asm):00114                 LDA     #13
9923 8D3C             (     cubixdrv.asm):00115                 BSR     PUTCHR
9925 3586             (     cubixdrv.asm):00116                 PULS    A,B,pc
9927                  (     cubixdrv.asm):00117         SPACE:
9927 3406             (     cubixdrv.asm):00118                 PSHS    a,b
9929 8620             (     cubixdrv.asm):00119                 LDA     #32
992B 8D34             (     cubixdrv.asm):00120                 BSR     PUTCHR
992D 3586             (     cubixdrv.asm):00121                 PULS    A,B,pc
                      (     cubixdrv.asm):00122         ;*
                      (     cubixdrv.asm):00123         ;* WRITE STRING(X) TO CONSOLE
                      (     cubixdrv.asm):00124         ;*
992F                  (     cubixdrv.asm):00125         WRSTR:
992F 3406             (     cubixdrv.asm):00126                 PSHS    A,B                               ;SAVE A
9931                  (     cubixdrv.asm):00127         WRST1:
9931 A680             (     cubixdrv.asm):00128                 LDA     ,X+                               ;GET CHAR
9933 2704             (     cubixdrv.asm):00129                 BEQ     WRST2                             ;END, QUIT
9935 8D2A             (     cubixdrv.asm):00130                 BSR     PUTCHR
9937 20F8             (     cubixdrv.asm):00131                 BRA     WRST1                             ;CONTINUE
9939                  (     cubixdrv.asm):00132         WRST2:
9939 3586             (     cubixdrv.asm):00133                 PULS    A,B,pc
                      (     cubixdrv.asm):00134         ;*
                      (     cubixdrv.asm):00135         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (     cubixdrv.asm):00136         ;*
993B                  (     cubixdrv.asm):00137         WRHEXW
993B 3406             (     cubixdrv.asm):00138                 PSHS    d
993D 8D08             (     cubixdrv.asm):00139                 BSR     WRHEX                             ;OUTPUT
993F 1E89             (     cubixdrv.asm):00140                 EXG     A,B                               ;SWAP
9941 8D04             (     cubixdrv.asm):00141                 BSR     WRHEX                             ;OUTPUT
9943 1E89             (     cubixdrv.asm):00142                 EXG     A,B                               ;BACK
9945 3586             (     cubixdrv.asm):00143                 PULS    d,pc
                      (     cubixdrv.asm):00144         
                      (     cubixdrv.asm):00145         ;*
                      (     cubixdrv.asm):00146         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (     cubixdrv.asm):00147         ;*
9947                  (     cubixdrv.asm):00148         WRHEX
9947 3406             (     cubixdrv.asm):00149                 PSHS    A,B                               ;SAVE IT
9949 44               (     cubixdrv.asm):00150                 LSRA                                      ;SHIFT
994A 44               (     cubixdrv.asm):00151                 LSRA                                      ;HIGH NIBBLE
994B 44               (     cubixdrv.asm):00152                 LSRA                                      ;INTO
994C 44               (     cubixdrv.asm):00153                 LSRA                                      ;LOW NIBBLE
994D 8D06             (     cubixdrv.asm):00154                 BSR     HOUT                              ;HIGH
994F A6E4             (     cubixdrv.asm):00155                 LDA     ,S                                ;GET LOW
9951 8D02             (     cubixdrv.asm):00156                 BSR     HOUT                              ;OUTPUT
9953 3586             (     cubixdrv.asm):00157                 PULS    A,B,PC                            ;RESTORE IT
                      (     cubixdrv.asm):00158         ;* OUTPUT NIBBLE IN HEX
9955                  (     cubixdrv.asm):00159         HOUT
9955 840F             (     cubixdrv.asm):00160                 ANDA    #%00001111                        ;REMOVE HIGH
9957 8B30             (     cubixdrv.asm):00161                 ADDA    #'0'                              ;CONVERT
9959 8139             (     cubixdrv.asm):00162                 CMPA    #'9'                              ;OK?
995B 2304             (     cubixdrv.asm):00163                 BLS     PUTCHR                            ;OK, OUTPUT
995D 8B07             (     cubixdrv.asm):00164                 ADDA    #7                                ;CONVERT TO 'A'-'F'
995F 2000             (     cubixdrv.asm):00165                 BRA     PUTCHR                            ;OUTPUT
9961                  (     cubixdrv.asm):00166         PUTCHR:
9961 7E887E           (     cubixdrv.asm):00167                 JMP     WRSER1
9964 3404             (     cubixdrv.asm):00168                 PSHS    B
9966 3402             (     cubixdrv.asm):00169                 PSHS    A
9968 58               (     cubixdrv.asm):00170                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
9969 8600             (     cubixdrv.asm):00171                 LDA     #$00
996B F60100           (     cubixdrv.asm):00172                 LDB     CONSOLEDEVICE
996E 1F01             (     cubixdrv.asm):00173                 TFR     D,X
9970 EC898813         (     cubixdrv.asm):00174                 LDD     DISPATCHTABLE,X
9974 FD01FE           (     cubixdrv.asm):00175                 STD     farpointer
9977 3502             (     cubixdrv.asm):00176                 PULS    A
9979 AD9F01FE         (     cubixdrv.asm):00177                 JSR     [farpointer]
997D 3504             (     cubixdrv.asm):00178                 PULS    B
997F 39               (     cubixdrv.asm):00179                 RTS
                      (     cubixdrv.asm):00180         
                      (     cubixdrv.asm):00181                 END

Symbol Table:
[ G] BANKED_DRIVER_DISPATCHER         8800
[ G] CFD_DRVSTAT                      0004
[ G] CFD_FMTTRK                       000D
[ G] CFD_MFM                          0040
[ G] CFD_READ                         0006
[ G] CFD_READDEL                      000C
[ G] CFD_READID                       000A
[ G] CFD_READTRK                      0002
[ G] CFD_RECAL                        0007
[ G] CFD_SCANEQ                       0011
[ G] CFD_SCANHIEQ                     001D
[ G] CFD_SCANLOEQ                     0019
[ G] CFD_SEEK                         000F
[ G] CFD_SENSEINT                     0008
[ G] CFD_SPECIFY                      0003
[ G] CFD_VERSION                      0010
[ G] CFD_WRITE                        0005
[ G] CFD_WRITEDEL                     0009
[ G] CHECKINT                         9126
[ G] CONSOLEDEVICE                    0100
[ G] CPU_CLK                          0008
[ G] CURRENTCYL                       01F9
[ G] CURRENTDEVICE                    01FB
[ G] CURRENTHEAD                      01F8
[ G] CURRENTSEC                       01FA
[ G] CURRENTSLICE                     01FC
[ G] DISKERROR                        01F7
[ G] DISPATCHTABLE                    8813
[ G] DOR_BR250                        000C
[ G] DOR_BR500                        000C
[ G] DOR_INIT                         000C
[ G] drv_noop                         991A
[ G] DSKEXIT                          8FA8
[ G] DSKOP                            8F91
[ G] DSKOPEND                         903A
[ G] DSKUNIT                          01E6
[ G] DSKY_ABORT                       8C19
[ G] DSKY_BEEP                        8DC5
[ G] DSKY_BEEP1                       8DD8
[ G] DSKY_BIN2SEG                     8CAC
[ G] DSKY_BIN2SEG1                    8CAF
[ G] DSKY_BLANK                       8D7E
[ G] DSKY_BLANK1                      8D85
[ G] DSKY_BUF                         01EA
[ G] DSKY_CMD                         8D0A
[ G] DSKY_CMD_CLK                     0020
[ G] DSKY_CMD_CLR                     00DF
[ G] DSKY_CMD_CLRX                    00D3
[ G] DSKY_CMD_FIFO                    0040
[ G] DSKY_CMD_RDSP                    0070
[ G] DSKY_CMD_WDSP                    0090
[ G] DSKY_DIN                         8D4B
[ G] DSKY_DIN2                        8D4D
[ G] DSKY_DOUT                        8D11
[ G] DSKY_DOUT2                       8D15
[ G] DSKY_DSPL                        8DEC
[ G] DSKY_DSPL_1                      8E02
[ G] DSKY_GETBYTE                     8DA1
[ G] DSKY_GETKEY                      8C4E
[ G] DSKY_GETKEY1                     8C6E
[ G] DSKY_GETKEY1A                    8C7E
[ G] DSKY_GETKEY2                     8C83
[ G] DSKY_HEXBUF                      01F3
[ G] DSKY_HEXMAP                      8E35
[ G] DSKY_INIT                        8BA1
[ G] DSKY_INITA                       8BCE
[ G] DSKY_INITB                       8BE6
[ G] DSKY_KEYMAP                      8C90
[ G] DSKY_PPI                         DF88
[ G] DSKY_PPI_IDLE                    0006
[ G] DSKY_PPIA                        DF88
[ G] DSKY_PPIB                        DF89
[ G] DSKY_PPIC                        DF8A
[ G] DSKY_PPIDETECT                   8C33
[ G] DSKY_PPIIDLE                     8E32
[ G] DSKY_PPIRD                       8E1F
[ G] DSKY_PPIRD1                      8E30
[ G] DSKY_PPIWR                       8E07
[ G] DSKY_PPIWR1                      8E1D
[ G] DSKY_PPIX                        DF8B
[ G] DSKY_PPIX_RD                     0092
[ G] DSKY_PPIX_VAL                    8E46
[ G] DSKY_PPIX_WR                     0082
[ G] DSKY_PREINIT                     8BEA
[ G] DSKY_PRESCL                      <<incomplete>>
[ G] DSKY_PRESENT                     8E47
[ G] DSKY_PUTBYTE                     8D8E
[ G] DSKY_PUTLED                      8DB0
[ G] DSKY_PUTLED_1                    8DB7
[ G] DSKY_REINIT                      8C1A
[ G] DSKY_RESET                       8C22
[ G] DSKY_RESET1                      8C2A
[ G] DSKY_RESET2                      8C32
[ G] DSKY_SHOW                        8CF3
[ G] DSKY_SHOW1                       8CF8
[ G] DSKY_ST                          8D46
[ G] DSKY_STAT                        8C41
[ G] DSKY_STATA                       8C4D
[ G] DSKY_TEMP_VAL                    8E45
[ G] DSKYINITMSG                      8E48
[ G] DSKYMESSAGE1                     8E50
[ G] DSKYMESSAGE2                     8E56
[ G] DSKYMESSAGE3                     8E5D
[ G] DSKYMESSAGE4                     8E66
[ G] ENDSENDINT                       9174
[ G] ERRCLR                           9143
[ G] farpointer                       01FE
[ G] FC_RESETFDC                      91C4
[ G] FCMD                             01E4
[ G] FD_DETECT                        9195
[ G] FD_DETECT1                       91A9
[ G] FDC_DATA                         DF81
[ G] FDC_DCR                          DF85
[ G] FDC_DOR                          DF86
[ G] FDC_MSR                          DF80
[ G] FDC_RESET                        DF83
[ G] FDC_TC                           DF87
[ G] FDDELAY                          91E4
[ G] FDVDELAY                         91ED
[ G] FL_READ_SECTOR                   8EF9
[ G] FL_SETUP                         8E73
[ G] FL_WRITE_SECTOR                  8F45
[ G] FLERR                            01E5
[ G] FLOPPY_DETCT                     01E7
[ G] FLOPPY_RETRIES                   0006
[ G] FLOPPY_RETRIES1                  0002
[ G] FLRETRY                          01E8
[ G] FLRETRY1                         01E9
[ G] FMESSAGE1                        9215
[ G] FMESSAGE2                        921B
[ G] FMESSAGE3                        9222
[ G] FMESSAGE4                        9231
[ G] FP_GETSWITCH                     928C
[ G] FP_INIT                          924B
[ G] FP_INIT1                         926E
[ G] FP_PORT                          DF54
[ G] FP_SETLED                        9285
[ G] FPDIS_CLEAR                      9469
[ G] FPDIS_I2C_ADDRESS                003C
[ G] FPDIS_INIT                       9418
[ G] FPDIS_INIT_WERROR                9445
[ G] FPDIS_OUTCH                      94AE
[ G] FPDIS_OUTCH_WERROR               9511
[ G] FPDIS_OUTCHDATA                  9514
[ G] FPDIS_OUTCHFONT                  951B
[ G] FPDIS_SETXY                      9489
[ G] FPDIS_SETXY_INTERNAL             9499
[ G] FPDIS_SETXY_WERROR               94A5
[ G] FPDIS_TEMPWORD                   95F7
[ G] FPDIS_X                          94A8
[ G] FPDIS_Y                          94AB
[ G] FPDISPMESSAGE1                   9645
[ G] FPDISPMESSAGE2                   9651
[ G] FPDISSETXYCONTROL                94A6
[ G] FPDISSETXYCONTROLEND             94AE
[ G] FPMESSAGE1                       95F9
[ G] FPMESSAGE2                       960E
[ G] FPSD_INIT                        9293
[ G] FPSD_INIT_ERROR                  9335
[ G] FPSD_READ_SECTOR                 9345
[ G] FPSD_READ_SECTOR_ERROR           9387
[ G] FPSD_SCAN                        92C8
[ G] FPSD_SETUP_LBA                   93E1
[ G] FPSD_WRITE_SECTOR                938D
[ G] FPSD_WRITE_SECTOR_ERROR          93DB
[ G] FPSDDEVICE                       965B
[ G] FPSDFAILFLAG                     965A
[ G] FPSDMESSAGE1                     9618
[ G] FPSDMESSAGE2                     961F
[ G] FPSDMESSAGE3                     9628
[ G] FPSDMESSAGE6                     9635
[ G] FPSDSENDADDRESS                  965C
[ G] FPSDSENDINFO                     9662
[ G] FPSDSENDREAD                     9661
[ G] FRONTPANELDISPLAYINIT            9446
[ G] FRONTPANELDISPLAYINITEND         9469
[ G] FUNCTION_DISPATCHER              8800
[ G] GETDSKUNIT                       91FD
[ G] GFDATA                           9175
[ G] GFDATA1                          9194
[ G] GWRR_POLL                        8FA5
[ G] HOUT                             9955
[ G] HSTBUF                           0300
[ G] I2C_ADDRESS                      9344
[ G] IDE_ABORT                        88CF
[ G] IDE_INITA                        88F1
[ G] IDE_PPIDETECT                    8995
[ G] IDE_PRINT_INFO                   88D8
[ G] IDE_READ                         8A9E
[ G] IDE_READ_BUFFER                  8A63
[ G] IDE_READ_INFO                    8936
[ G] IDE_READ_INFO_ABORT              8983
[ G] IDE_READ_INFO_OK                 898F
[ G] IDE_READ_NO_SETUP                8AA1
[ G] IDE_READ_SECTOR                  89A3
[ G] IDE_READ_SECTOR_1                89A8
[ G] IDE_READ_SECTOR_ERROR            89C3
[ G] IDE_SETUP_LBA                    8B43
[ G] IDE_WAIT_DRQ                     8A35
[ G] IDE_WAIT_DRQ1                    8A3F
[ G] IDE_WAIT_DRQ2                    8A5F
[ G] IDE_WAIT_DRQ3                    8A61
[ G] IDE_WAIT_DRQE                    8A5A
[ G] IDE_WAIT_NOT_BUSY                8A0E
[ G] IDE_WAIT_NOT_BUSY1               8A18
[ G] IDE_WAIT_NOT_BUSY2               8A30
[ G] IDE_WAIT_NOT_BUSY3               8A32
[ G] IDE_WRITE                        8AC7
[ G] IDE_WRITE_BUFFER                 8A7F
[ G] IDE_WRITE_SECTOR                 89C9
[ G] IDE_WRITE_SECTOR_ERROR           89EE
[ G] IDEBUFRD                         8A67
[ G] IDEBUFWT                         8A83
[ G] KY_0                             0000
[ G] KY_1                             0001
[ G] KY_2                             0002
[ G] KY_3                             0003
[ G] KY_4                             0004
[ G] KY_5                             0005
[ G] KY_6                             0006
[ G] KY_7                             0007
[ G] KY_8                             0008
[ G] KY_9                             0009
[ G] KY_A                             000A
[ G] KY_B                             000B
[ G] KY_BK                            0011
[ G] KY_BO                            0017
[ G] KY_C                             000C
[ G] KY_CL                            0012
[ G] KY_D                             000D
[ G] KY_DE                            0014
[ G] KY_E                             000E
[ G] KY_EN                            0013
[ G] KY_EX                            0015
[ G] KY_F                             000F
[ G] KY_F1                            0021
[ G] KY_F2                            0020
[ G] KY_F3                            0019
[ G] KY_F4                            0018
[ G] KY_FW                            0010
[ G] KY_GO                            0016
[ G] LFCR                             991B
[ G] MD_PAGERA                        0200
[ G] MESSAGE1                         8B02
[ G] MESSAGE2                         8B0A
[ G] MESSAGE3                         8B11
[ G] MESSAGE4                         8B1E
[ G] MESSAGE5                         8B2F
[ G] MESSAGE6                         8B40
[ G] PAGER_D                          02F8
[ G] PAGER_S                          02FE
[ G] PAGER_STACK                      02F5
[ G] PAGER_U                          02F6
[ G] PAGER_X                          02FA
[ G] PAGER_Y                          02FC
[ G] PCF_AAS                          0004
[ G] PCF_ACK                          0001
[ G] PCF_ACKERR                       982D
[ G] PCF_ACKFAIL                      98AE
[ G] PCF_ACKTO                        FDE8
[ G] PCF_AD0                          0008
[ G] PCF_ARBERR                       9842
[ G] PCF_ARBFAIL                      98F7
[ G] PCF_BASE                         DF56
[ G] PCF_BB                           0001
[ G] PCF_BBERR                        9850
[ G] PCF_BBFAIL                       9911
[ G] PCF_BBTO                         FDE8
[ G] PCF_BER                          0010
[ G] PCF_CLK                          0018
[ G] PCF_CLK12                        001C
[ G] PCF_CLK3                         0000
[ G] PCF_CLK443                       0010
[ G] PCF_CLK6                         0014
[ G] PCF_CLK8                         0018
[ G] PCF_CLKERR                       981F
[ G] PCF_CLKFAIL                      988F
[ G] PCF_EN1                          0008
[ G] PCF_ES0                          0040
[ G] PCF_ES1                          0020
[ G] PCF_ES2                          0010
[ G] PCF_FAIL                         96E6
[ G] PCF_FAIL_FLAG                    96EF
[ G] PCF_ID                           00AA
[ G] PCF_IDLE_                        00C1
[ G] PCF_IDLERR                       9826
[ G] PCF_IDLFAIL                      989E
[ G] PCF_INI                          0040
[ G] PCF_INIERR                       9811
[ G] PCF_INIT                         9664
[ G] PCF_INITDEV                      969B
[ G] PCF_LAB                          0002
[ G] PCF_LABDLY                       FDE8
[ G] PCF_LRB                          0008
[ G] PCF_NOPCF                        986A
[ G] PCF_OWN                          0055
[ G] PCF_PCFOK                        9862
[ G] PCF_PIN                          0080
[ G] PCF_PINERR                       9849
[ G] PCF_PINFAIL                      9908
[ G] PCF_PINTO                        FDE8
[ G] PCF_PRTERR                       9857
[ G] PCF_RB1                          9778
[ G] PCF_RDBERR                       9834
[ G] PCF_RDBFAIL                      98D8
[ G] PCF_RDERR                        980A
[ G] PCF_RDFAIL                       98CC
[ G] PCF_READBYTES                    9750
[ G] PCF_READBYTES_INTERNAL           9761
[ G] PCF_RERROR                       97B8
[ G] PCF_RS0                          DF56
[ G] PCF_RS1                          DF57
[ G] PCF_SENDBYTES                    96F0
[ G] PCF_SENDBYTES_INTERNAL           9701
[ G] PCF_SETERR                       9818
[ G] PCF_STA                          0004
[ G] PCF_START_                       00C5
[ G] PCF_STATUS                       97F1
[ G] PCF_STO                          0002
[ G] PCF_STOP_                        00C3
[ G] PCF_STS                          0020
[ G] PCF_TOERR                        983B
[ G] PCF_TOFAIL                       98E9
[ G] PCF_TRNS                         0000
[ G] PCF_TRNS11                       0002
[ G] PCF_TRNS15                       0003
[ G] PCF_TRNS45                       0001
[ G] PCF_TRNS90                       0000
[ G] PCF_WAIT_FOR_BB                  97F2
[ G] PCF_WAIT_FOR_PIN                 97C3
[ G] PCF_WB1                          9712
[ G] PCF_WERROR                       9745
[ G] PCF_WFBB0                        97F5
[ G] PCF_WFP0                         97C8
[ G] PCF_WFP1                         97EC
[ G] PCF_WFP2                         97EE
[ G] PCF_WRTFAIL                      9876
[ G] PCFMESSAGE1                      968A
[ G] PFDATA                           90CE
[ G] PFDATAS                          9107
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       88A7
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        DF88
[ G] PPIDE_PROBE                      88F5
[ G] PPIDE_PROBE_FAIL                 8933
[ G] PPIDE_PROBE_SUCCESS              8935
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      89F4
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       DF8A
[ G] PPIDECOMMAND                     88A4
[ G] PPIDEHI                          DF89
[ G] PPIDELO                          DF88
[ G] PPIDELOTMP                       88A3
[ G] PPIDEPPIC                        DF8B
[ G] PPIDETIMEOUT                     88A5
[ G] PPRD_IDE_8255                    0092
[ G] PPWR_IDE_8255                    0080
[ G] PUTCHR                           9961
[ G] RDD_POLL                         901B
[ G] RDS1                             9022
[ G] RDS1A                            902B
[ G] RDSER1                           888B
[ G] READFL1                          8F14
[ G] READFLDONE                       8F42
[ G] RECAL                            90A4
[ G] RESUL3                           9046
[ G] RST_DLY                          89FD
[ G] SENDINT                          915B
[ G] SERIALINIT                       8873
[ G] SET_PPI_RD                       8AE6
[ G] SET_PPI_WR                       8AF4
[ G] SETTRACK                         9075
[ G] SETTRK1                          9087
[ G] SETTRKEXIT                       90CD
[ G] SNDFDWR                          8FB0
[ G] SPACE                            9927
[ G] ST0                              01E3
[ G] TESTMESSAGEDATAEND               95F7
[ G] TMPSTORAGE                       9214
[ G] UART0                            DF58
[ G] UART1                            DF59
[ G] UART2                            DF5A
[ G] UART3                            DF5B
[ G] UART4                            DF5C
[ G] UART5                            DF5D
[ G] UART6                            DF5E
[ G] UART7                            DF5F
[ G] WAINT                            90B9
[ G] WRF1                             90D4
[ G] WRF1S                            9109
[ G] WRF2                             9101
[ G] WRF2S                            9120
[ G] WRHEX                            9947
[ G] WRHEXW                           993B
[ G] WRITEFL1                         8F60
[ G] WRITEFLDONE                      8F8E
[ G] WRR_POLL                         9053
[ G] WRS1                             905A
[ G] WRS3                             9072
[ G] WRSER1                           887E
[ G] WRST1                            9931
[ G] WRST2                            9939
[ G] WRSTR                            992F
