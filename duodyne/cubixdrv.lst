                      (     cubixdrv.asm):00001         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00002         ;
                      (     cubixdrv.asm):00003         ;       Duodyne Cubix banked driver code
                      (     cubixdrv.asm):00004         ;
                      (     cubixdrv.asm):00005         ;  DWERNER 1/20/2024    Initial
                      (     cubixdrv.asm):00006         ;________________________________________________________________________________________________________________________________
                      (     cubixdrv.asm):00007         
                      (     cubixdrv.asm):00008         ;*
                      (     cubixdrv.asm):00009                 INCLUDE cubix_values.asm
                      ( cubix_values.asm):00001         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00002         ;
                      ( cubix_values.asm):00003         ;       Nhyodyne Cubix System storage locations
                      ( cubix_values.asm):00004         ;
                      ( cubix_values.asm):00005         ;  DWERNER 10/15/2023   Initial
                      ( cubix_values.asm):00006         ;________________________________________________________________________________________________________________________________
                      ( cubix_values.asm):00007         
     0200             ( cubix_values.asm):00008         MD_PAGERA       = $0200                           ; PAGE DRIVER ADDRESS
     02F5             ( cubix_values.asm):00009         PAGER_STACK     = $02F5
     02F6             ( cubix_values.asm):00010         PAGER_U         = $02F6
     02F8             ( cubix_values.asm):00011         PAGER_D         = $02F8
     02FA             ( cubix_values.asm):00012         PAGER_X         = $02FA
     02FC             ( cubix_values.asm):00013         PAGER_Y         = $02FC
     02FE             ( cubix_values.asm):00014         PAGER_S         = $02FE
     0100             ( cubix_values.asm):00015         CONSOLEDEVICE   = $0100                           ; (BYTE)
     01E3             ( cubix_values.asm):00016         ST0             = $01E3                           ; (BYTE)
     01E4             ( cubix_values.asm):00017         FCMD            = $01E4                           ; (BYTE)
     01E5             ( cubix_values.asm):00018         FLERR           = $01E5                           ; (BYTE)
     01E6             ( cubix_values.asm):00019         DSKUNIT         = $01E6                           ; (BYTE)
     01E7             ( cubix_values.asm):00020         FLOPPY_DETCT    = $01E7                           ; (BYTE)
     01E8             ( cubix_values.asm):00021         FLRETRY         = $01E8                           ; (BYTE)
     01E9             ( cubix_values.asm):00022         FLRETRY1        = $01E9                           ; (BYTE)
     01EA             ( cubix_values.asm):00023         DSKY_BUF        = $01EA                           ; (8 BYTES)
     01F3             ( cubix_values.asm):00024         DSKY_HEXBUF     = $01F3                           ; (4 BYTES)
     01F7             ( cubix_values.asm):00025         DISKERROR       = $01F7                           ; (BYTE)
     01F8             ( cubix_values.asm):00026         CURRENTHEAD     = $01F8                           ; (BYTE)
     01F9             ( cubix_values.asm):00027         CURRENTCYL      = $01F9                           ; (BYTE)
     01FA             ( cubix_values.asm):00028         CURRENTSEC      = $01FA                           ; (BYTE)
     01FB             ( cubix_values.asm):00029         CURRENTDEVICE   = $01FB                           ; (BYTE)
     01FC             ( cubix_values.asm):00030         CURRENTSLICE    = $01FC                           ; (WORD)
     01FE             ( cubix_values.asm):00031         farpointer      = $01FE                           ; (WORD)                      ;
     0300             ( cubix_values.asm):00032         HSTBUF          = $0300
                      ( cubix_values.asm):00033         
     8800             ( cubix_values.asm):00034         BANKED_DRIVER_DISPATCHER = $8800
                      (     cubixdrv.asm):00010         ;*
                      (     cubixdrv.asm):00011         
                      (     cubixdrv.asm):00012                 ORG     $8800
                      (     cubixdrv.asm):00013         
                      (     cubixdrv.asm):00014         ;__DISPATCHER________________________________________________________________________________________
                      (     cubixdrv.asm):00015         ;
                      (     cubixdrv.asm):00016         ;  Function dispatcher
                      (     cubixdrv.asm):00017         ;  function to call is located in "farfunct"
                      (     cubixdrv.asm):00018         ;____________________________________________________________________________________________________
                      (     cubixdrv.asm):00019         ;
8800                  (     cubixdrv.asm):00020         FUNCTION_DISPATCHER:
8800 58               (     cubixdrv.asm):00021                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
8801 8600             (     cubixdrv.asm):00022                 LDA     #$00
8803 1F01             (     cubixdrv.asm):00023                 TFR     D,X
8805 EC898813         (     cubixdrv.asm):00024                 LDD     DISPATCHTABLE,X
8809 FD01FE           (     cubixdrv.asm):00025                 STD     farpointer
880C FC02F8           (     cubixdrv.asm):00026                 LDD     >PAGER_D                          ; RESTORE 'D'
880F 6E9F01FE         (     cubixdrv.asm):00027                 JMP     [farpointer]
                      (     cubixdrv.asm):00028         
                      (     cubixdrv.asm):00029         
8813                  (     cubixdrv.asm):00030         DISPATCHTABLE:
8813 885E             (     cubixdrv.asm):00031                 .WORD   WRSER1                            ; FUNCTION 00 - WRITE SERIAL PORT
8815 886B             (     cubixdrv.asm):00032                 .WORD   RDSER1                            ; FUNCTION 01 - READ SERIAL PORT
8817 885D             (     cubixdrv.asm):00033                 .WORD   SERIALINIT                        ; FUNCTION 02 - SERIAL PORT INIT
                      (     cubixdrv.asm):00034         
8819 8B7B             (     cubixdrv.asm):00035                 .WORD   drv_noop                          ; FUNCTION 03 - WRITE VIDEO
881B 8B7B             (     cubixdrv.asm):00036                 .WORD   drv_noop                          ; FUNCTION 04 - READ KEYBOARD
881D 8B7B             (     cubixdrv.asm):00037                 .WORD   drv_noop                          ; FUNCTION 05 - INIT INTERFACE
                      (     cubixdrv.asm):00038         
881F 8B7B             (     cubixdrv.asm):00039                 .WORD   drv_noop                          ; FUNCTION 06
8821 8B7B             (     cubixdrv.asm):00040                 .WORD   drv_noop                          ; FUNCTION 07
8823 8B7B             (     cubixdrv.asm):00041                 .WORD   drv_noop                          ; FUNCTION 08
                      (     cubixdrv.asm):00042         
8825 8B7B             (     cubixdrv.asm):00043                 .WORD   drv_noop                          ; FUNCTION 09
8827 8B7B             (     cubixdrv.asm):00044                 .WORD   drv_noop                          ; FUNCTION 10
8829 8B7B             (     cubixdrv.asm):00045                 .WORD   drv_noop                          ; FUNCTION 11
                      (     cubixdrv.asm):00046         
882B 8B7B             (     cubixdrv.asm):00047                 .WORD   drv_noop                          ; FUNCTION 12
882D 8B7B             (     cubixdrv.asm):00048                 .WORD   drv_noop                          ; FUNCTION 13
882F 8B7B             (     cubixdrv.asm):00049                 .WORD   drv_noop                          ; FUNCTION 14
                      (     cubixdrv.asm):00050         
8831 8B7B             (     cubixdrv.asm):00051                 .WORD   drv_noop                          ; FUNCTION 15 - called during OS init
8833 8B7B             (     cubixdrv.asm):00052                 .WORD   drv_noop                          ; FUNCTION 16 - read a sector from drive
8835 8B7B             (     cubixdrv.asm):00053                 .WORD   drv_noop                          ; FUNCTION 17 - write a sector to drive
                      (     cubixdrv.asm):00054         ;
8837 8B7B             (     cubixdrv.asm):00055                 .WORD   drv_noop                          ; FL_SETUP                          ; FUNCTION 18 - init floppy device
8839 8B7B             (     cubixdrv.asm):00056                 .WORD   drv_noop                          ; FL_READ_SECTOR                    ; FUNCTION 19 - read a sector from floppy device
883B 8B7B             (     cubixdrv.asm):00057                 .WORD   drv_noop                          ; FL_WRITE_SECTOR                   ; FUNCTION 20 - write a sector to floppy device
                      (     cubixdrv.asm):00058         ;
883D 8887             (     cubixdrv.asm):00059                 .WORD   PPIDE_INIT                        ; FUNCTION 21 - init PPIDE device
883F 8986             (     cubixdrv.asm):00060                 .WORD   IDE_READ_SECTOR                   ; FUNCTION 22 - read a sector from PPIDE device
8841 89AC             (     cubixdrv.asm):00061                 .WORD   IDE_WRITE_SECTOR                  ; FUNCTION 23 - write a sector to PPIDE device
                      (     cubixdrv.asm):00062         ;
8843 8B7B             (     cubixdrv.asm):00063                 .WORD   drv_noop                          ; FUNCTION 24 -
8845 8B7B             (     cubixdrv.asm):00064                 .WORD   drv_noop                          ; FUNCTION 25 -
8847 8B7B             (     cubixdrv.asm):00065                 .WORD   drv_noop                          ; FUNCTION 26 -
                      (     cubixdrv.asm):00066         ;
8849 8B7B             (     cubixdrv.asm):00067                 .WORD   drv_noop                          ; DSKY_INIT                         ; FUNCTION 27 -
884B 8B7B             (     cubixdrv.asm):00068                 .WORD   drv_noop                          ; DSKY_SHOW                         ; FUNCTION 28 -
884D 8B7B             (     cubixdrv.asm):00069                 .WORD   drv_noop                          ; DSKY_BIN2SEG                      ; FUNCTION 29 -
884F 8B7B             (     cubixdrv.asm):00070                 .WORD   drv_noop                          ; DSKY_RESET                        ; FUNCTION 30 -
8851 8B7B             (     cubixdrv.asm):00071                 .WORD   drv_noop                          ; DSKY_STAT                         ; FUNCTION 31 -
8853 8B7B             (     cubixdrv.asm):00072                 .WORD   drv_noop                          ; DSKY_GETKEY                       ; FUNCTION 32 -
8855 8B7B             (     cubixdrv.asm):00073                 .WORD   drv_noop                          ; DSKY_BEEP                         ; FUNCTION 33 -
8857 8B7B             (     cubixdrv.asm):00074                 .WORD   drv_noop                          ; DSKY_DSPL                         ; FUNCTION 34 -
8859 8B7B             (     cubixdrv.asm):00075                 .WORD   drv_noop                          ; DSKY_PUTLED                       ; FUNCTION 35 -
885B 8B7B             (     cubixdrv.asm):00076                 .WORD   drv_noop                          ; DSKY_BLANK                        ; FUNCTION 36 -
                      (     cubixdrv.asm):00077         ;
                      (     cubixdrv.asm):00078         
                      (     cubixdrv.asm):00079         
                      (     cubixdrv.asm):00080         ;__DRIVERS___________________________________________________________________________________________
                      (     cubixdrv.asm):00081         ;
                      (     cubixdrv.asm):00082                 INCLUDE cubix_serial.asm
                      ( cubix_serial.asm):00001         ;__SERIAL DRIVERS________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00002         ;
                      ( cubix_serial.asm):00003         ;       CUBIX serial drivers for 6809 IO card
                      ( cubix_serial.asm):00004         ;
                      ( cubix_serial.asm):00005         ;       Entry points:
                      ( cubix_serial.asm):00006         ;               SERIALINIT  - called during OS init
                      ( cubix_serial.asm):00007         ;               RDSER1      - read a byte from serial port ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00008         ;               WRSER1      - write a byte from serial port  ('A' POINTS TO BYTE)
                      ( cubix_serial.asm):00009         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00010         ;
                      ( cubix_serial.asm):00011         ;*
                      ( cubix_serial.asm):00012         ;*        HARDWARE I/O ADDRESSES
                      ( cubix_serial.asm):00013         ;*
                      ( cubix_serial.asm):00014         ; UART 16C550 SERIAL
     DF58             ( cubix_serial.asm):00015         UART0           EQU $DF58                         ; DATA IN/OUT
     DF59             ( cubix_serial.asm):00016         UART1           EQU $DF59                         ; CHECK RX
     DF5A             ( cubix_serial.asm):00017         UART2           EQU $DF5A                         ; INTERRUPTS
     DF5B             ( cubix_serial.asm):00018         UART3           EQU $DF5B                         ; LINE CONTROL
     DF5C             ( cubix_serial.asm):00019         UART4           EQU $DF5C                         ; MODEM CONTROL
     DF5D             ( cubix_serial.asm):00020         UART5           EQU $DF5D                         ; LINE STATUS
     DF5E             ( cubix_serial.asm):00021         UART6           EQU $DF5E                         ; MODEM STATUS
     DF5F             ( cubix_serial.asm):00022         UART7           EQU $DF5F                         ; SCRATCH REG.
                      ( cubix_serial.asm):00023         
                      ( cubix_serial.asm):00024         
                      ( cubix_serial.asm):00025         ;__SERIALINIT____________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00026         ;
                      ( cubix_serial.asm):00027         ;       INITIALIZE SERIAL PORTS
                      ( cubix_serial.asm):00028         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00029         ;
885D                  ( cubix_serial.asm):00030         SERIALINIT:
                      ( cubix_serial.asm):00031         ; these are all set by Bios prior to activating the 6809 card.
                      ( cubix_serial.asm):00032         ;       LDA             #$80            ;
                      ( cubix_serial.asm):00033         ;       STA             UART3           ; SET DLAB FLAG
                      ( cubix_serial.asm):00034         ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      ( cubix_serial.asm):00035         ;       STA             UART0           ; save baud rate
                      ( cubix_serial.asm):00036         ;       LDA             #00                     ;
                      ( cubix_serial.asm):00037         ;       STA             UART1           ;
                      ( cubix_serial.asm):00038         ;       LDA             #03                     ;
                      ( cubix_serial.asm):00039         ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
885D 39               ( cubix_serial.asm):00040                 RTS
                      ( cubix_serial.asm):00041         
                      ( cubix_serial.asm):00042         
                      ( cubix_serial.asm):00043         
                      ( cubix_serial.asm):00044         ;__WRSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00045         ;
                      ( cubix_serial.asm):00046         ;       WRITE CHARACTER(A) TO UART
                      ( cubix_serial.asm):00047         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00048         ;
885E                  ( cubix_serial.asm):00049         WRSER1
                      ( cubix_serial.asm):00050         !
885E F6DF5D           ( cubix_serial.asm):00051                 LDB     UART5                             ; READ LINE STATUS REGISTER
8861 C420             ( cubix_serial.asm):00052                 ANDB    #$20                              ; TEST IF UART IS READY TO SEND (BIT 5)
8863 C100             ( cubix_serial.asm):00053                 CMPB    #$00
8865 27F7             ( cubix_serial.asm):00054                 BEQ     <                                 ; IF NOT REPEAT
8867 B7DF58           ( cubix_serial.asm):00055                 STA     UART0                             ; THEN WRITE THE CHAR TO UART
886A 39               ( cubix_serial.asm):00056                 RTS
                      ( cubix_serial.asm):00057         
                      ( cubix_serial.asm):00058         ;__RDSER1________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00059         ;
                      ( cubix_serial.asm):00060         ;       READ CHARACTER FROM UART TO (A)
                      ( cubix_serial.asm):00061         ;________________________________________________________________________________________________________________________________
                      ( cubix_serial.asm):00062         ;
886B                  ( cubix_serial.asm):00063         RDSER1
886B B6DF5D           ( cubix_serial.asm):00064                 LDA     UART5                             ; READ LINE STATUS REGISTER
886E 8401             ( cubix_serial.asm):00065                 ANDA    #$01                              ; TEST IF DATA IN RECEIVE BUFFER
8870 8100             ( cubix_serial.asm):00066                 CMPA    #$00
8872 2709             ( cubix_serial.asm):00067                 BEQ     >                                 ; NO DATA
8874 B6DF58           ( cubix_serial.asm):00068                 LDA     UART0                             ; THEN READ THE CHAR FROM THE UART
8877 B702F8           ( cubix_serial.asm):00069                 STA     >PAGER_D                          ; SAVE 'D'
887A 1A04             ( cubix_serial.asm):00070                 ORCC    #%00000100                        ; SET 'Z'
887C 39               ( cubix_serial.asm):00071                 RTS
                      ( cubix_serial.asm):00072         !
887D 86FF             ( cubix_serial.asm):00073                 LDA     #$FF                              ;
887F B702F8           ( cubix_serial.asm):00074                 STA     >PAGER_D                          ; SAVE 'D'
8882 39               ( cubix_serial.asm):00075                 RTS                                       ;
                      (     cubixdrv.asm):00083                 INCLUDE cubix_ide.asm
                      (    cubix_ide.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00002         ;
                      (    cubix_ide.asm):00003         ;       CUBIX IDE disk drivers for Duodyne Disk IO
                      (    cubix_ide.asm):00004         ;
                      (    cubix_ide.asm):00005         ;       Entry points:
                      (    cubix_ide.asm):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (    cubix_ide.asm):00007         ;               IDE_READ_SECTOR  - read a sector from drive  ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00008         ;               IDE_WRITE_SECTOR - write a sector to drive   ('U' POINTS TO DCB, X TO MEMORY)
                      (    cubix_ide.asm):00009         ;________________________________________________________________________________________________________________________________
                      (    cubix_ide.asm):00010         ;
     DF88             (    cubix_ide.asm):00011         PPIDE_PPI       = $DF88                           ; PORT A
                      (    cubix_ide.asm):00012         ;
     DF88             (    cubix_ide.asm):00013         PPIDELO         = PPIDE_PPI+0                     ; LSB
     DF89             (    cubix_ide.asm):00014         PPIDEHI         = PPIDE_PPI+1                     ; MSB
     DF8A             (    cubix_ide.asm):00015         PPIDECNTRL      = PPIDE_PPI+2                     ; CONTROL SIGNALS
     DF8B             (    cubix_ide.asm):00016         PPIDEPPIC       = PPIDE_PPI+3                     ; CONTROL BYTE PPI 82C55
                      (    cubix_ide.asm):00017         
     0001             (    cubix_ide.asm):00018         PPIDE_A0_LINE   = $01                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (    cubix_ide.asm):00019         PPIDE_A1_LINE   = $02                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (    cubix_ide.asm):00020         PPIDE_A2_LINE   = $04                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (    cubix_ide.asm):00021         PPIDE_CS0_LINE  = $08                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (    cubix_ide.asm):00022         PPIDE_CS1_LINE  = $10                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (    cubix_ide.asm):00023         PPIDE_WR_LINE   = $20                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (    cubix_ide.asm):00024         PPIDE_RD_LINE   = $40                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (    cubix_ide.asm):00025         PPIDE_RST_LINE  = $80                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (    cubix_ide.asm):00026         
     0008             (    cubix_ide.asm):00027         PPIDE_DATA      = PPIDE_CS0_LINE
     0009             (    cubix_ide.asm):00028         PPIDE_ERR       = PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (    cubix_ide.asm):00029         PPIDE_SEC_CNT   = PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (    cubix_ide.asm):00030         PPIDE_LBALOW    = PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (    cubix_ide.asm):00031         PPIDE_LBAMID    = PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (    cubix_ide.asm):00032         PPIDE_LBAHI     = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (    cubix_ide.asm):00033         PPIDE_DEVICE    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (    cubix_ide.asm):00034         PPIDE_COMMAND   = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (    cubix_ide.asm):00035         PPIDE_STATUS    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (    cubix_ide.asm):00036         PPIDE_CONTROL   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (    cubix_ide.asm):00037         PPIDE_ASTATUS   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (    cubix_ide.asm):00038         
                      (    cubix_ide.asm):00039         
                      (    cubix_ide.asm):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (    cubix_ide.asm):00041         PPIDE_CMD_RECAL = $10
     0020             (    cubix_ide.asm):00042         PPIDE_CMD_READ  = $20
     0030             (    cubix_ide.asm):00043         PPIDE_CMD_WRITE = $30
     0091             (    cubix_ide.asm):00044         PPIDE_CMD_INIT  = $91
     00EC             (    cubix_ide.asm):00045         PPIDE_CMD_ID    = $EC
     00E0             (    cubix_ide.asm):00046         PPIDE_CMD_SPINDOWN = $E0
     00E1             (    cubix_ide.asm):00047         PPIDE_CMD_SPINUP = $E1
                      (    cubix_ide.asm):00048         
                      (    cubix_ide.asm):00049         
     0092             (    cubix_ide.asm):00050         PPRD_IDE_8255   = %10010010                       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (    cubix_ide.asm):00051         PPWR_IDE_8255   = %10000000                       ;ALL THREE PORTS OUTPUT
                      (    cubix_ide.asm):00052         
8883                  (    cubix_ide.asm):00053         PPIDELOTMP:
8883 00               (    cubix_ide.asm):00054                 .BYTE   0
8884                  (    cubix_ide.asm):00055         PPIDECOMMAND:
8884 00               (    cubix_ide.asm):00056                 .BYTE   0
8885                  (    cubix_ide.asm):00057         PPIDETIMEOUT:
8885 0000             (    cubix_ide.asm):00058                 .BYTE   $00,$00
                      (    cubix_ide.asm):00059         
                      (    cubix_ide.asm):00060         
                      (    cubix_ide.asm):00061         
                      (    cubix_ide.asm):00062         ;__PPIDE_INIT_________________________________________________________________________________________
                      (    cubix_ide.asm):00063         ;
                      (    cubix_ide.asm):00064         ;  INIT AND DISPLAY IDE INFO
                      (    cubix_ide.asm):00065         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00066         ;
8887                  (    cubix_ide.asm):00067         PPIDE_INIT:
8887 BD8B7C           (    cubix_ide.asm):00068                 JSR     LFCR                              ; AND CRLF
888A BD8B7C           (    cubix_ide.asm):00069                 JSR     LFCR                              ; AND CRLF
888D 8E8AE2           (    cubix_ide.asm):00070                 LDX     #MESSAGE1
8890 BD8B85           (    cubix_ide.asm):00071                 JSR     WRSTR                             ; DO PROMPT
8893 BD8B7C           (    cubix_ide.asm):00072                 JSR     LFCR                              ; AND CRLF
8896 BD8978           (    cubix_ide.asm):00073                 JSR     IDE_PPIDETECT                     ; TEST FOR PPI HARDWARE
8899 2617             (    cubix_ide.asm):00074                 BNE     IDE_ABORT                         ; BAIL OUT IF NOT THERE
                      (    cubix_ide.asm):00075         ;
889B 8E8AEA           (    cubix_ide.asm):00076                 LDX     #MESSAGE2
889E BD8B85           (    cubix_ide.asm):00077                 JSR     WRSTR                             ; DO PROMPT
88A1 CCDF88           (    cubix_ide.asm):00078                 LDD     #PPIDE_PPI                        ; GET BASE PORT
88A4 BD8B92           (    cubix_ide.asm):00079                 JSR     WRHEXW                            ; PRINT BASE PORT
                      (    cubix_ide.asm):00080         ;
88A7 BD89D7           (    cubix_ide.asm):00081                 JSR     PPIDE_RESET                       ; RESET THE BUS
88AA BD88D8           (    cubix_ide.asm):00082                 JSR     PPIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
88AD 2503             (    cubix_ide.asm):00083                 BCS     IDE_ABORT
88AF 7E88BB           (    cubix_ide.asm):00084                 JMP     IDE_PRINT_INFO
88B2                  (    cubix_ide.asm):00085         IDE_ABORT:
88B2 8E8AF1           (    cubix_ide.asm):00086                 LDX     #MESSAGE3
88B5 BD8B85           (    cubix_ide.asm):00087                 JSR     WRSTR                             ; DO PROMPT
88B8 7E88D4           (    cubix_ide.asm):00088                 JMP     IDE_INITA
88BB                  (    cubix_ide.asm):00089         IDE_PRINT_INFO:
88BB BD8B7C           (    cubix_ide.asm):00090                 JSR     LFCR                              ; AND CRLF
88BE 8E8AFE           (    cubix_ide.asm):00091                 LDX     #MESSAGE4
88C1 BD8B85           (    cubix_ide.asm):00092                 JSR     WRSTR                             ; DO PROMPT
88C4 8600             (    cubix_ide.asm):00093                 LDA     #$00
88C6 BD8919           (    cubix_ide.asm):00094                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
88C9 8E8B0F           (    cubix_ide.asm):00095                 LDX     #MESSAGE5
88CC BD8B85           (    cubix_ide.asm):00096                 JSR     WRSTR                             ; DO PROMPT
88CF 8601             (    cubix_ide.asm):00097                 LDA     #$01
88D1 BD8919           (    cubix_ide.asm):00098                 JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
88D4                  (    cubix_ide.asm):00099         IDE_INITA:
88D4 BD8B7C           (    cubix_ide.asm):00100                 JSR     LFCR                              ; AND CRLF
88D7 39               (    cubix_ide.asm):00101                 RTS                                       ; DONE
                      (    cubix_ide.asm):00102         ;
                      (    cubix_ide.asm):00103         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (    cubix_ide.asm):00104         ;
                      (    cubix_ide.asm):00105         ;  PROBE FOR IDE HARDWARE
                      (    cubix_ide.asm):00106         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00107         ;
88D8                  (    cubix_ide.asm):00108         PPIDE_PROBE:
                      (    cubix_ide.asm):00109         ;
                      (    cubix_ide.asm):00110         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (    cubix_ide.asm):00111         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (    cubix_ide.asm):00112         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (    cubix_ide.asm):00113         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (    cubix_ide.asm):00114         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (    cubix_ide.asm):00115         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (    cubix_ide.asm):00116         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (    cubix_ide.asm):00117         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (    cubix_ide.asm):00118         
88D8 8600             (    cubix_ide.asm):00119                 LDA     #$00
88DA B7DF88           (    cubix_ide.asm):00120                 STA     PPIDELO                           ; PPI PORT A, DATALO
88DD BD89EE           (    cubix_ide.asm):00121                 JSR     IDE_WAIT_NOT_BUSY                 ; WAIT FOR BUSY TO CLEAR
88E0 2534             (    cubix_ide.asm):00122                 BCS     PPIDE_PROBE_FAIL                  ; IF TIMEOUT, REPORT NO IDE PRESENT
88E2 860F             (    cubix_ide.asm):00123                 LDA     #PPIDE_STATUS                     ; GET STATUS
88E4 BD8A7E           (    cubix_ide.asm):00124                 JSR     IDE_READ
88E7 C440             (    cubix_ide.asm):00125                 ANDB    #%01000000
88E9 C100             (    cubix_ide.asm):00126                 CMPB    #$00
88EB 2729             (    cubix_ide.asm):00127                 BEQ     PPIDE_PROBE_FAIL                  ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (    cubix_ide.asm):00128         
                      (    cubix_ide.asm):00129         ; CHECK SIGNATURE
88ED 860A             (    cubix_ide.asm):00130                 LDA     #PPIDE_SEC_CNT
88EF BD8A7E           (    cubix_ide.asm):00131                 JSR     IDE_READ
88F2 C101             (    cubix_ide.asm):00132                 CMPB    #$01
88F4 2620             (    cubix_ide.asm):00133                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
88F6 860B             (    cubix_ide.asm):00134                 LDA     #PPIDE_LBALOW
88F8 BD8A7E           (    cubix_ide.asm):00135                 JSR     IDE_READ
88FB C101             (    cubix_ide.asm):00136                 CMPB    #$01
88FD 2617             (    cubix_ide.asm):00137                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
88FF 860C             (    cubix_ide.asm):00138                 LDA     #PPIDE_LBAMID
8901 BD8A7E           (    cubix_ide.asm):00139                 JSR     IDE_READ
8904 C100             (    cubix_ide.asm):00140                 CMPB    #$00
8906 260E             (    cubix_ide.asm):00141                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
8908 860D             (    cubix_ide.asm):00142                 LDA     #PPIDE_LBAHI
890A BD8A7E           (    cubix_ide.asm):00143                 JSR     IDE_READ
890D C100             (    cubix_ide.asm):00144                 CMPB    #$00
890F 2605             (    cubix_ide.asm):00145                 BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
8911 1CFE             (    cubix_ide.asm):00146                 CLC
8913 7E8918           (    cubix_ide.asm):00147                 JMP     PPIDE_PROBE_SUCCESS
8916                  (    cubix_ide.asm):00148         PPIDE_PROBE_FAIL:
                      (    cubix_ide.asm):00149         
8916 1A01             (    cubix_ide.asm):00150                 SEC
8918                  (    cubix_ide.asm):00151         PPIDE_PROBE_SUCCESS:
8918 39               (    cubix_ide.asm):00152                 RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (    cubix_ide.asm):00153         
                      (    cubix_ide.asm):00154         ;*__IDE_READ_INFO___________________________________________________________________________________
                      (    cubix_ide.asm):00155         ;*
                      (    cubix_ide.asm):00156         ;*  READ IDE INFORMATION
                      (    cubix_ide.asm):00157         ;*      CARRY SET ON ERROR
                      (    cubix_ide.asm):00158         ;*      A=MST/SLV
                      (    cubix_ide.asm):00159         ;*____________________________________________________________________________________________________
8919                  (    cubix_ide.asm):00160         IDE_READ_INFO:
                      (    cubix_ide.asm):00161         ; SET DRIVE BIT
8919 C60E             (    cubix_ide.asm):00162                 LDB     #PPIDE_DEVICE
891B F78884           (    cubix_ide.asm):00163                 STB     PPIDECOMMAND
891E 8401             (    cubix_ide.asm):00164                 ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
8920 48               (    cubix_ide.asm):00165                 ASLA                                      ; SHIFT 4
8921 48               (    cubix_ide.asm):00166                 ASLA                                      ;
8922 48               (    cubix_ide.asm):00167                 ASLA                                      ;
8923 48               (    cubix_ide.asm):00168                 ASLA                                      ;
8924 8AE0             (    cubix_ide.asm):00169                 ORA     #$E0                              ; E0=MST  F0=SLV
8926 1F89             (    cubix_ide.asm):00170                 TFR     A,B
8928 8600             (    cubix_ide.asm):00171                 LDA     #$00
892A BD8AA7           (    cubix_ide.asm):00172                 JSR     IDE_WRITE
892D BD89EE           (    cubix_ide.asm):00173                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
8930 2534             (    cubix_ide.asm):00174                 BCS     IDE_READ_INFO_ABORT
8932 860F             (    cubix_ide.asm):00175                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
8934 B78884           (    cubix_ide.asm):00176                 STA     PPIDECOMMAND
8937 CC00EC           (    cubix_ide.asm):00177                 LDD     #PPIDE_CMD_ID
893A BD8AA7           (    cubix_ide.asm):00178                 JSR     IDE_WRITE                         ;ASK THE DRIVE TO READ IT
893D BD8A15           (    cubix_ide.asm):00179                 JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
8940 2524             (    cubix_ide.asm):00180                 BCS     IDE_READ_INFO_ABORT
8942 BD8A43           (    cubix_ide.asm):00181                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
8945 8E8B20           (    cubix_ide.asm):00182                 LDX     #MESSAGE6
8948 BD8B85           (    cubix_ide.asm):00183                 JSR     WRSTR
894B B6037B           (    cubix_ide.asm):00184                 LDA     HSTBUF+123
894E BD8B9B           (    cubix_ide.asm):00185                 JSR     WRHEX
8951 B6037A           (    cubix_ide.asm):00186                 LDA     HSTBUF+122
8954 BD8B9B           (    cubix_ide.asm):00187                 JSR     WRHEX
8957 B60379           (    cubix_ide.asm):00188                 LDA     HSTBUF+121
895A BD8B9B           (    cubix_ide.asm):00189                 JSR     WRHEX
895D B60378           (    cubix_ide.asm):00190                 LDA     HSTBUF+120
8960 BD8B9B           (    cubix_ide.asm):00191                 JSR     WRHEX
8963 7E8972           (    cubix_ide.asm):00192                 JMP     IDE_READ_INFO_OK
8966                  (    cubix_ide.asm):00193         IDE_READ_INFO_ABORT:
8966 8E8AF1           (    cubix_ide.asm):00194                 LDX     #MESSAGE3
8969 BD8B85           (    cubix_ide.asm):00195                 JSR     WRSTR                             ;DO PROMPT
896C BD8B7C           (    cubix_ide.asm):00196                 JSR     LFCR                              ;AND CRLF
896F 1A01             (    cubix_ide.asm):00197                 SEC
8971 39               (    cubix_ide.asm):00198                 RTS                                       ;
8972                  (    cubix_ide.asm):00199         IDE_READ_INFO_OK:
8972 BD8B7C           (    cubix_ide.asm):00200                 JSR     LFCR                              ; AND CRLF
8975 1CFE             (    cubix_ide.asm):00201                 CLC
8977 39               (    cubix_ide.asm):00202                 RTS
                      (    cubix_ide.asm):00203         
                      (    cubix_ide.asm):00204         
                      (    cubix_ide.asm):00205         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (    cubix_ide.asm):00206         ;
                      (    cubix_ide.asm):00207         ;  PROBE FOR PPI HARDWARE
                      (    cubix_ide.asm):00208         ;____________________________________________________________________________________________________
                      (    cubix_ide.asm):00209         ;
8978                  (    cubix_ide.asm):00210         IDE_PPIDETECT:
                      (    cubix_ide.asm):00211         ;
                      (    cubix_ide.asm):00212         ; TEST FOR PPI EXISTENCE
                      (    cubix_ide.asm):00213         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (    cubix_ide.asm):00214         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (    cubix_ide.asm):00215         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (    cubix_ide.asm):00216         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (    cubix_ide.asm):00217         ; INTERFERE WITH THE VALUE BEING READ.
8978 BD8AD4           (    cubix_ide.asm):00218                 JSR     SET_PPI_WR
                      (    cubix_ide.asm):00219         ;
897B 8600             (    cubix_ide.asm):00220                 LDA     #$00                              ; VALUE ZERO
897D B7DF88           (    cubix_ide.asm):00221                 STA     PPIDELO                           ; PUSH VALUE TO PORT
8980 B6DF88           (    cubix_ide.asm):00222                 LDA     PPIDELO                           ; GET PORT VALUE
8983 8100             (    cubix_ide.asm):00223                 CMPA    #$00
8985 39               (    cubix_ide.asm):00224                 RTS                                       ; AND RETURN
                      (    cubix_ide.asm):00225         ;
                      (    cubix_ide.asm):00226         
                      (    cubix_ide.asm):00227         
                      (    cubix_ide.asm):00228         ;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (    cubix_ide.asm):00229         ;*
                      (    cubix_ide.asm):00230         ;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (    cubix_ide.asm):00231         ;*
                      (    cubix_ide.asm):00232         ;*____________________________________________________________________________________________________
8986                  (    cubix_ide.asm):00233         IDE_READ_SECTOR:
8986 BD89EE           (    cubix_ide.asm):00234                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
8989 251B             (    cubix_ide.asm):00235                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
898B                  (    cubix_ide.asm):00236         IDE_READ_SECTOR_1:
898B BD8B23           (    cubix_ide.asm):00237                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
898E 860F             (    cubix_ide.asm):00238                 LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
8990 B78884           (    cubix_ide.asm):00239                 STA     PPIDECOMMAND
8993 CC0020           (    cubix_ide.asm):00240                 LDD     #PPIDE_CMD_READ
8996 BD8AA7           (    cubix_ide.asm):00241                 JSR     IDE_WRITE                         ; ASK THE DRIVE TO READ IT
8999 BD8A15           (    cubix_ide.asm):00242                 JSR     IDE_WAIT_DRQ                      ; WAIT UNTIL IT'S GOT THE DATA
899C 2508             (    cubix_ide.asm):00243                 BCS     IDE_READ_SECTOR_ERROR             ; IF TIMEOUT, REPORT NO IDE PRESENT
899E BD8A43           (    cubix_ide.asm):00244                 JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
89A1 4F               (    cubix_ide.asm):00245                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
89A2 B701F7           (    cubix_ide.asm):00246                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89A5 39               (    cubix_ide.asm):00247                 RTS
89A6                  (    cubix_ide.asm):00248         IDE_READ_SECTOR_ERROR:
89A6 8602             (    cubix_ide.asm):00249                 LDA     #$02                              ; SET ERROR CONDITION
89A8 B701F7           (    cubix_ide.asm):00250                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89AB 39               (    cubix_ide.asm):00251                 RTS
                      (    cubix_ide.asm):00252         
                      (    cubix_ide.asm):00253         ;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (    cubix_ide.asm):00254         ;*
                      (    cubix_ide.asm):00255         ;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (    cubix_ide.asm):00256         ;*
                      (    cubix_ide.asm):00257         ;*____________________________________________________________________________________________________
89AC                  (    cubix_ide.asm):00258         IDE_WRITE_SECTOR:
89AC BD89EE           (    cubix_ide.asm):00259                 JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
89AF 2520             (    cubix_ide.asm):00260                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
89B1 BD8B23           (    cubix_ide.asm):00261                 JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
89B4 860F             (    cubix_ide.asm):00262                 LDA     #PPIDE_COMMAND
89B6 B78884           (    cubix_ide.asm):00263                 STA     PPIDECOMMAND
89B9 CC0030           (    cubix_ide.asm):00264                 LDD     #PPIDE_CMD_WRITE
89BC BD8AA7           (    cubix_ide.asm):00265                 JSR     IDE_WRITE                         ;TELL DRIVE TO WRITE A SECTOR
89BF BD8A15           (    cubix_ide.asm):00266                 JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
89C2 250D             (    cubix_ide.asm):00267                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
89C4 BD8A5F           (    cubix_ide.asm):00268                 JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
89C7 BD89EE           (    cubix_ide.asm):00269                 JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
89CA 2505             (    cubix_ide.asm):00270                 BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
89CC 4F               (    cubix_ide.asm):00271                 CLRA                                      ; ZERO = 1 ON RETURN = OPERATION OK
89CD B701F7           (    cubix_ide.asm):00272                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89D0 39               (    cubix_ide.asm):00273                 RTS
89D1                  (    cubix_ide.asm):00274         IDE_WRITE_SECTOR_ERROR:
89D1 8602             (    cubix_ide.asm):00275                 LDA     #$02
89D3 B701F7           (    cubix_ide.asm):00276                 STA     DISKERROR                         ; SAVE ERROR CONDITION FOR OS
89D6 39               (    cubix_ide.asm):00277                 RTS
                      (    cubix_ide.asm):00278         
                      (    cubix_ide.asm):00279         ;*__PPIDE_RESET____________________________________________________________________________________
                      (    cubix_ide.asm):00280         ;*
                      (    cubix_ide.asm):00281         ;*  SOFT RESET IDE CHANNEL
                      (    cubix_ide.asm):00282         ;*
                      (    cubix_ide.asm):00283         ;*____________________________________________________________________________________________________
89D7                  (    cubix_ide.asm):00284         PPIDE_RESET:
                      (    cubix_ide.asm):00285         ;       PRTDBG "IDE RESET$"
89D7 8680             (    cubix_ide.asm):00286                 LDA     #PPIDE_RST_LINE
89D9 B7DF8A           (    cubix_ide.asm):00287                 STA     PPIDECNTRL                        ; ASSERT RST LINE ON IDE INTERFACE
                      (    cubix_ide.asm):00288         
89DC 108E0100         (    cubix_ide.asm):00289                 LDY     #$0100
                      (    cubix_ide.asm):00290         ;       PRTDBG "IDE RESET DELAY$"
89E0                  (    cubix_ide.asm):00291         RST_DLY:
89E0 313F             (    cubix_ide.asm):00292                 DEY
89E2 108C0000         (    cubix_ide.asm):00293                 CMPY    #$0000
89E6 26F8             (    cubix_ide.asm):00294                 BNE     RST_DLY
89E8 8600             (    cubix_ide.asm):00295                 LDA     #$00
89EA B7DF8A           (    cubix_ide.asm):00296                 STA     PPIDECNTRL                        ; DEASSERT RST LINE ON IDE INTERFACE
                      (    cubix_ide.asm):00297         
                      (    cubix_ide.asm):00298         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISDa:a BEING
                      (    cubix_ide.asm):00299         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (    cubix_ide.asm):00300         ;;;;;;;;;;;;;;;;;;;;;;;;;  JSR     DSKY_REINIT
                      (    cubix_ide.asm):00301         
89ED 39               (    cubix_ide.asm):00302                 RTS
                      (    cubix_ide.asm):00303         
                      (    cubix_ide.asm):00304         
                      (    cubix_ide.asm):00305         ;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (    cubix_ide.asm):00306         ;*
                      (    cubix_ide.asm):00307         ;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (    cubix_ide.asm):00308         ;*
                      (    cubix_ide.asm):00309         ;*____________________________________________________________________________________________________
89EE                  (    cubix_ide.asm):00310         IDE_WAIT_NOT_BUSY:
89EE 3406             (    cubix_ide.asm):00311                 PSHS    A,B
89F0 8600             (    cubix_ide.asm):00312                 LDA     #$00
89F2 B78885           (    cubix_ide.asm):00313                 STA     PPIDETIMEOUT
89F5 B78886           (    cubix_ide.asm):00314                 STA     PPIDETIMEOUT+1
89F8                  (    cubix_ide.asm):00315         IDE_WAIT_NOT_BUSY1:
89F8 860F             (    cubix_ide.asm):00316                 LDA     #PPIDE_STATUS                     ;WAIT FOR RDY BIT TO BE SET
89FA BD8A7E           (    cubix_ide.asm):00317                 JSR     IDE_READ
89FD C480             (    cubix_ide.asm):00318                 ANDB    #$80
89FF 270F             (    cubix_ide.asm):00319                 BEQ     IDE_WAIT_NOT_BUSY2
8A01 7C8885           (    cubix_ide.asm):00320                 INC     PPIDETIMEOUT
8A04 26F2             (    cubix_ide.asm):00321                 BNE     IDE_WAIT_NOT_BUSY1
8A06 7C8886           (    cubix_ide.asm):00322                 INC     PPIDETIMEOUT+1
8A09 26ED             (    cubix_ide.asm):00323                 BNE     IDE_WAIT_NOT_BUSY1
8A0B 1A01             (    cubix_ide.asm):00324                 SEC
8A0D 7E8A12           (    cubix_ide.asm):00325                 JMP     IDE_WAIT_NOT_BUSY3
8A10                  (    cubix_ide.asm):00326         IDE_WAIT_NOT_BUSY2:
8A10 1CFE             (    cubix_ide.asm):00327                 CLC
8A12                  (    cubix_ide.asm):00328         IDE_WAIT_NOT_BUSY3:
8A12 3586             (    cubix_ide.asm):00329                 PULS    PC,A,B
8A14 39               (    cubix_ide.asm):00330                 RTS
                      (    cubix_ide.asm):00331         
                      (    cubix_ide.asm):00332         ;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (    cubix_ide.asm):00333         ;*
                      (    cubix_ide.asm):00334         ;*      WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (    cubix_ide.asm):00335         ;*
                      (    cubix_ide.asm):00336         ;*____________________________________________________________________________________________________
8A15                  (    cubix_ide.asm):00337         IDE_WAIT_DRQ:
8A15 3426             (    cubix_ide.asm):00338                 PSHS    A,B,Y
8A17 8600             (    cubix_ide.asm):00339                 LDA     #$00
8A19 B78885           (    cubix_ide.asm):00340                 STA     PPIDETIMEOUT
8A1C B78886           (    cubix_ide.asm):00341                 STA     PPIDETIMEOUT+1
8A1F                  (    cubix_ide.asm):00342         IDE_WAIT_DRQ1:
8A1F 860F             (    cubix_ide.asm):00343                 LDA     #PPIDE_STATUS                     ;WAIT FOR DRQ BIT TO BE SET
8A21 BD8A7E           (    cubix_ide.asm):00344                 JSR     IDE_READ
8A24 C488             (    cubix_ide.asm):00345                 ANDB    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
8A26 C108             (    cubix_ide.asm):00346                 CMPB    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
8A28 2715             (    cubix_ide.asm):00347                 BEQ     IDE_WAIT_DRQ2
8A2A C401             (    cubix_ide.asm):00348                 ANDB    #%00000001                        ; IS ERROR?
8A2C C101             (    cubix_ide.asm):00349                 CMPB    #%00000001                        ;
8A2E 270A             (    cubix_ide.asm):00350                 BEQ     IDE_WAIT_DRQE
8A30 7C8885           (    cubix_ide.asm):00351                 INC     PPIDETIMEOUT
8A33 26EA             (    cubix_ide.asm):00352                 BNE     IDE_WAIT_DRQ1
8A35 7C8886           (    cubix_ide.asm):00353                 INC     PPIDETIMEOUT+1
8A38 26E5             (    cubix_ide.asm):00354                 BNE     IDE_WAIT_DRQ1
8A3A                  (    cubix_ide.asm):00355         IDE_WAIT_DRQE:
8A3A 1A01             (    cubix_ide.asm):00356                 SEC
8A3C 7E8A41           (    cubix_ide.asm):00357                 JMP     IDE_WAIT_DRQ3
8A3F                  (    cubix_ide.asm):00358         IDE_WAIT_DRQ2:
8A3F 1CFE             (    cubix_ide.asm):00359                 CLC
8A41                  (    cubix_ide.asm):00360         IDE_WAIT_DRQ3:
8A41 35A6             (    cubix_ide.asm):00361                 PULS    PC,A,B,Y
                      (    cubix_ide.asm):00362         
                      (    cubix_ide.asm):00363         
                      (    cubix_ide.asm):00364         
                      (    cubix_ide.asm):00365         ;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00366         ;*
                      (    cubix_ide.asm):00367         ;*  READ IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00368         ;*
                      (    cubix_ide.asm):00369         ;*____________________________________________________________________________________________________
8A43                  (    cubix_ide.asm):00370         IDE_READ_BUFFER:
8A43 108E0000         (    cubix_ide.asm):00371                 LDY     #$0000                            ; INDEX
8A47                  (    cubix_ide.asm):00372         IDEBUFRD:
8A47 8608             (    cubix_ide.asm):00373                 LDA     #PPIDE_DATA
8A49 BD8A81           (    cubix_ide.asm):00374                 JSR     IDE_READ_NO_SETUP
8A4C E7A90300         (    cubix_ide.asm):00375                 STB     HSTBUF,Y                          ; 'ID DRIVE' IDE RESPONSE IS LITTLE ENDIAN FORMAT
8A50 3121             (    cubix_ide.asm):00376                 INY
8A52 A7A90300         (    cubix_ide.asm):00377                 STA     HSTBUF,Y                          ; 'ID DRIVE' IDE RESPONSE IS LITTLE ENDIAN FORMAT
8A56 3121             (    cubix_ide.asm):00378                 INY
8A58 108C0200         (    cubix_ide.asm):00379                 CMPY    #$0200                            ;
8A5C 26E9             (    cubix_ide.asm):00380                 BNE     IDEBUFRD                          ;
8A5E 39               (    cubix_ide.asm):00381                 RTS                                       ;
                      (    cubix_ide.asm):00382         
                      (    cubix_ide.asm):00383         ;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (    cubix_ide.asm):00384         ;*
                      (    cubix_ide.asm):00385         ;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (    cubix_ide.asm):00386         ;*
                      (    cubix_ide.asm):00387         ;*____________________________________________________________________________________________________
8A5F                  (    cubix_ide.asm):00388         IDE_WRITE_BUFFER:
8A5F 108E0000         (    cubix_ide.asm):00389                 LDY     #$0000                            ; INDEX
8A63                  (    cubix_ide.asm):00390         IDEBUFWT:
8A63 8608             (    cubix_ide.asm):00391                 LDA     #PPIDE_DATA
8A65 B78884           (    cubix_ide.asm):00392                 STA     PPIDECOMMAND
8A68 E6A90300         (    cubix_ide.asm):00393                 LDB     HSTBUF,Y                          ; SECTORS ARE BIG ENDIAN
8A6C 3121             (    cubix_ide.asm):00394                 INY
8A6E A6A90300         (    cubix_ide.asm):00395                 LDA     HSTBUF,Y                          ; SECTORS ARE BIG ENDIAN
8A72 3121             (    cubix_ide.asm):00396                 INY                                       ;
8A74 BD8AA7           (    cubix_ide.asm):00397                 JSR     IDE_WRITE
8A77 108C0200         (    cubix_ide.asm):00398                 CMPY    #$0200                            ;
8A7B 26E6             (    cubix_ide.asm):00399                 BNE     IDEBUFWT                          ;
8A7D 39               (    cubix_ide.asm):00400                 RTS                                       ;
                      (    cubix_ide.asm):00401         
                      (    cubix_ide.asm):00402         
                      (    cubix_ide.asm):00403         ;-------------------------------------------------------------------------------
                      (    cubix_ide.asm):00404         
                      (    cubix_ide.asm):00405         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (    cubix_ide.asm):00406         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (    cubix_ide.asm):00407         ; PROGRAM WOULD NOT CALL TO THESE.
                      (    cubix_ide.asm):00408         
                      (    cubix_ide.asm):00409         ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (    cubix_ide.asm):00410         ;INPUT A = IDE REGSITER ADDRESS
                      (    cubix_ide.asm):00411         ;OUTPUT D = WORD READ FROM IDE DRIVE
8A7E                  (    cubix_ide.asm):00412         IDE_READ:
8A7E BD8AC6           (    cubix_ide.asm):00413                 JSR     SET_PPI_RD                        ; SETUP FOR A READ CYCLE
8A81                  (    cubix_ide.asm):00414         IDE_READ_NO_SETUP:
8A81 B7DF8A           (    cubix_ide.asm):00415                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
8A84 8A40             (    cubix_ide.asm):00416                 ORA     #PPIDE_RD_LINE                    ; ASSERT RD PIN
8A86 B7DF8A           (    cubix_ide.asm):00417                 STA     PPIDECNTRL
8A89 3402             (    cubix_ide.asm):00418                 PSHS    A
8A8B F6DF88           (    cubix_ide.asm):00419                 LDB     PPIDELO                           ; READ LOWER BYTE
8A8E B6DF89           (    cubix_ide.asm):00420                 LDA     PPIDEHI                           ; READ UPPER BYTE
8A91 B78883           (    cubix_ide.asm):00421                 STA     PPIDELOTMP
8A94 3502             (    cubix_ide.asm):00422                 PULS    A                                 ; RESTORE REGISTER VALUE
8A96 B7DF8A           (    cubix_ide.asm):00423                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
8A99 8840             (    cubix_ide.asm):00424                 EORA    #PPIDE_RD_LINE                    ; ASSERT RD PIN
8A9B B7DF8A           (    cubix_ide.asm):00425                 STA     PPIDECNTRL
8A9E 8600             (    cubix_ide.asm):00426                 LDA     #$00
8AA0 B7DF8A           (    cubix_ide.asm):00427                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8AA3 B68883           (    cubix_ide.asm):00428                 LDA     PPIDELOTMP
8AA6 39               (    cubix_ide.asm):00429                 RTS
                      (    cubix_ide.asm):00430         
                      (    cubix_ide.asm):00431         
                      (    cubix_ide.asm):00432         
                      (    cubix_ide.asm):00433         ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (    cubix_ide.asm):00434         ;INPUT PPIDECOMMAND = IDE REGISTER ADDRESS
                      (    cubix_ide.asm):00435         ;INPUT REGISTER D = WORD TO WRITE
                      (    cubix_ide.asm):00436         ;
                      (    cubix_ide.asm):00437         
8AA7                  (    cubix_ide.asm):00438         IDE_WRITE:
8AA7 BD8AD4           (    cubix_ide.asm):00439                 JSR     SET_PPI_WR                        ; SETUP FOR A WRITE CYCLE
8AAA F7DF88           (    cubix_ide.asm):00440                 STB     PPIDELO                           ; WRITE LOWER BYTE
8AAD B7DF89           (    cubix_ide.asm):00441                 STA     PPIDEHI                           ; WRITE UPPER BYTE
8AB0 B68884           (    cubix_ide.asm):00442                 LDA     PPIDECOMMAND
8AB3 B7DF8A           (    cubix_ide.asm):00443                 STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
8AB6 8A20             (    cubix_ide.asm):00444                 ORA     #PPIDE_WR_LINE                    ; ASSERT WRITE PIN
8AB8 B7DF8A           (    cubix_ide.asm):00445                 STA     PPIDECNTRL
8ABB 8820             (    cubix_ide.asm):00446                 EORA    #PPIDE_WR_LINE                    ; DE ASSERT WR PIN
8ABD B7DF8A           (    cubix_ide.asm):00447                 STA     PPIDECNTRL
8AC0 8600             (    cubix_ide.asm):00448                 LDA     #$00
8AC2 B7DF8A           (    cubix_ide.asm):00449                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8AC5 39               (    cubix_ide.asm):00450                 RTS
                      (    cubix_ide.asm):00451         
                      (    cubix_ide.asm):00452         
                      (    cubix_ide.asm):00453         ;-----------------------------------------------------------------------------------
                      (    cubix_ide.asm):00454         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (    cubix_ide.asm):00455         ;
                      (    cubix_ide.asm):00456         ;------------------------------------------------------------------------------------
                      (    cubix_ide.asm):00457         
8AC6                  (    cubix_ide.asm):00458         SET_PPI_RD:
8AC6 3402             (    cubix_ide.asm):00459                 PSHS    A
8AC8 8600             (    cubix_ide.asm):00460                 LDA     #$00
8ACA B7DF8A           (    cubix_ide.asm):00461                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8ACD 8692             (    cubix_ide.asm):00462                 LDA     #PPRD_IDE_8255
8ACF B7DF8B           (    cubix_ide.asm):00463                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, READ MODE
8AD2 3582             (    cubix_ide.asm):00464                 PULS    A,PC
                      (    cubix_ide.asm):00465         
8AD4                  (    cubix_ide.asm):00466         SET_PPI_WR:
8AD4 3402             (    cubix_ide.asm):00467                 PSHS    A
8AD6 8600             (    cubix_ide.asm):00468                 LDA     #$00
8AD8 B7DF8A           (    cubix_ide.asm):00469                 STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
8ADB 8680             (    cubix_ide.asm):00470                 LDA     #PPWR_IDE_8255
8ADD B7DF8B           (    cubix_ide.asm):00471                 STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, WRITE MODE
8AE0 3582             (    cubix_ide.asm):00472                 PULS    A,PC
                      (    cubix_ide.asm):00473         
                      (    cubix_ide.asm):00474         
8AE2                  (    cubix_ide.asm):00475         MESSAGE1
8AE2 5050494445203A   (    cubix_ide.asm):00476                 FCC     "PPIDE :"
8AE9 00               (    cubix_ide.asm):00477                 FCB     00
8AEA                  (    cubix_ide.asm):00478         MESSAGE2
8AEA 20494F3D3078     (    cubix_ide.asm):00479                 FCC     " IO=0x"
8AF0 00               (    cubix_ide.asm):00480                 FCB     00
8AF1                  (    cubix_ide.asm):00481         MESSAGE3
8AF1 204E4F5420505245 (    cubix_ide.asm):00482                 FCC     " NOT PRESENT"
     53454E54
8AFD 00               (    cubix_ide.asm):00483                 FCB     00
8AFE                  (    cubix_ide.asm):00484         MESSAGE4
8AFE 205050494445303A (    cubix_ide.asm):00485                 FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
8B0E 00               (    cubix_ide.asm):00486                 FCB     00
8B0F                  (    cubix_ide.asm):00487         MESSAGE5
8B0F 205050494445313A (    cubix_ide.asm):00488                 FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
8B1F 00               (    cubix_ide.asm):00489                 FCB     00
8B20                  (    cubix_ide.asm):00490         MESSAGE6
8B20 3078             (    cubix_ide.asm):00491                 FCC     "0x"
8B22 00               (    cubix_ide.asm):00492                 FCB     00
                      (    cubix_ide.asm):00493         
                      (    cubix_ide.asm):00494         
                      (    cubix_ide.asm):00495         ;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (    cubix_ide.asm):00496         ;*
                      (    cubix_ide.asm):00497         ;*
                      (    cubix_ide.asm):00498         ;        SETUP   LBA DATA
                      (    cubix_ide.asm):00499         ;*
                      (    cubix_ide.asm):00500         ;*    This assumes the drive is setup for 128 sectors, 128 Cylinders, 4 heads. = 65536 total sectors.
                      (    cubix_ide.asm):00501         ;     LBA ADDRESS   LLLLLLLL CCCCCCCS SSSSSSHH
                      (    cubix_ide.asm):00502         ;     L=SLICE
                      (    cubix_ide.asm):00503         ;     H=HEAD
                      (    cubix_ide.asm):00504         ;     C=CYLINDER
                      (    cubix_ide.asm):00505         ;     S=SECTOR
                      (    cubix_ide.asm):00506         ;*
                      (    cubix_ide.asm):00507         ;*____________________________________________________________________________________________________
8B23                  (    cubix_ide.asm):00508         IDE_SETUP_LBA:
8B23 3406             (    cubix_ide.asm):00509                 PSHS    D
8B25 860E             (    cubix_ide.asm):00510                 LDA     #PPIDE_DEVICE
8B27 B701F3           (    cubix_ide.asm):00511                 STA     DSKY_HEXBUF
8B2A B78884           (    cubix_ide.asm):00512                 STA     PPIDECOMMAND
8B2D 8600             (    cubix_ide.asm):00513                 LDA     #$00
8B2F F601FB           (    cubix_ide.asm):00514                 LDB     CURRENTDEVICE
8B32 C401             (    cubix_ide.asm):00515                 ANDB    #$01                              ; only want drive cfg
8B34 58               (    cubix_ide.asm):00516                 ASLB                                      ; SHIFT 4
8B35 58               (    cubix_ide.asm):00517                 ASLB                                      ;
8B36 58               (    cubix_ide.asm):00518                 ASLB                                      ;
8B37 58               (    cubix_ide.asm):00519                 ASLB                                      ;
8B38 CAE0             (    cubix_ide.asm):00520                 ORB     #$E0                              ; E0=MST  F0=SLV
8B3A BD8AA7           (    cubix_ide.asm):00521                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00522         
8B3D 860D             (    cubix_ide.asm):00523                 LDA     #PPIDE_LBAHI
8B3F B78884           (    cubix_ide.asm):00524                 STA     PPIDECOMMAND
8B42 8600             (    cubix_ide.asm):00525                 LDA     #$00
8B44 F601FC           (    cubix_ide.asm):00526                 LDB     CURRENTSLICE
8B47 F701F4           (    cubix_ide.asm):00527                 STB     DSKY_HEXBUF+1
8B4A BD8AA7           (    cubix_ide.asm):00528                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00529         
8B4D 860C             (    cubix_ide.asm):00530                 LDA     #PPIDE_LBAMID
8B4F B78884           (    cubix_ide.asm):00531                 STA     PPIDECOMMAND
8B52 8600             (    cubix_ide.asm):00532                 LDA     #$00
8B54 F601F9           (    cubix_ide.asm):00533                 LDB     CURRENTCYL                        ;
8B57 F701F5           (    cubix_ide.asm):00534                 STB     DSKY_HEXBUF+2
8B5A BD8AA7           (    cubix_ide.asm):00535                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00536         
8B5D 860B             (    cubix_ide.asm):00537                 LDA     #PPIDE_LBALOW
8B5F B78884           (    cubix_ide.asm):00538                 STA     PPIDECOMMAND
8B62 8600             (    cubix_ide.asm):00539                 LDA     #$00
8B64 F601FA           (    cubix_ide.asm):00540                 LDB     CURRENTSEC                        ;
8B67 F701F6           (    cubix_ide.asm):00541                 STB     DSKY_HEXBUF+3
8B6A BD8AA7           (    cubix_ide.asm):00542                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00543         
8B6D 860A             (    cubix_ide.asm):00544                 LDA     #PPIDE_SEC_CNT
8B6F B78884           (    cubix_ide.asm):00545                 STA     PPIDECOMMAND
8B72 8600             (    cubix_ide.asm):00546                 LDA     #$00
8B74 C601             (    cubix_ide.asm):00547                 LDB     #$01
8B76 BD8AA7           (    cubix_ide.asm):00548                 JSR     IDE_WRITE
                      (    cubix_ide.asm):00549         
                      (    cubix_ide.asm):00550         ;   JSR     DSKY_BIN2SEG
                      (    cubix_ide.asm):00551         ;   JSR     DSKY_SHOW
8B79 3586             (    cubix_ide.asm):00552                 PULS    D,PC
                      (     cubixdrv.asm):00084         ;        INCLUDE cubix_dskyng.asm
                      (     cubixdrv.asm):00085         ;        INCLUDE cubix_dsky.asm
                      (     cubixdrv.asm):00086         ;        INCLUDE cubix_floppy.asm
                      (     cubixdrv.asm):00087         ;        INCLUDE cubix_esp32.asm
                      (     cubixdrv.asm):00088         
                      (     cubixdrv.asm):00089         
                      (     cubixdrv.asm):00090         
                      (     cubixdrv.asm):00091         
8B7B                  (     cubixdrv.asm):00092         drv_noop:
8B7B 39               (     cubixdrv.asm):00093                 RTS
                      (     cubixdrv.asm):00094         
                      (     cubixdrv.asm):00095         ;*
                      (     cubixdrv.asm):00096         ;* OUTPUT LFCR TO CONSOLE
                      (     cubixdrv.asm):00097         ;*
8B7C                  (     cubixdrv.asm):00098         LFCR:
8B7C 860A             (     cubixdrv.asm):00099                 LDA     #10
8B7E 8D35             (     cubixdrv.asm):00100                 BSR     PUTCHR
8B80 860D             (     cubixdrv.asm):00101                 LDA     #13
8B82 8D31             (     cubixdrv.asm):00102                 BSR     PUTCHR
8B84 39               (     cubixdrv.asm):00103                 RTS
                      (     cubixdrv.asm):00104         ;*
                      (     cubixdrv.asm):00105         ;* WRITE STRING(X) TO CONSOLE
                      (     cubixdrv.asm):00106         ;*
8B85                  (     cubixdrv.asm):00107         WRSTR:
8B85 3406             (     cubixdrv.asm):00108                 PSHS    A,B                               ;SAVE A
8B87                  (     cubixdrv.asm):00109         WRST1:
8B87 A680             (     cubixdrv.asm):00110                 LDA     ,X+                               ;GET CHAR
8B89 2704             (     cubixdrv.asm):00111                 BEQ     WRST2                             ;END, QUIT
8B8B 8D28             (     cubixdrv.asm):00112                 BSR     PUTCHR
8B8D 20F8             (     cubixdrv.asm):00113                 BRA     WRST1                             ;CONTINUE
8B8F                  (     cubixdrv.asm):00114         WRST2:
8B8F 3506             (     cubixdrv.asm):00115                 PULS    A,B
8B91 39               (     cubixdrv.asm):00116                 RTS
                      (     cubixdrv.asm):00117         ;*
                      (     cubixdrv.asm):00118         ;* OUTPUT NUMBER IN 'D' TO CONSOLE IN HEX
                      (     cubixdrv.asm):00119         ;*
8B92                  (     cubixdrv.asm):00120         WRHEXW
8B92 8D07             (     cubixdrv.asm):00121                 BSR     WRHEX                             ;OUTPUT
8B94 1E89             (     cubixdrv.asm):00122                 EXG     A,B                               ;SWAP
8B96 8D03             (     cubixdrv.asm):00123                 BSR     WRHEX                             ;OUTPUT
8B98 1E89             (     cubixdrv.asm):00124                 EXG     A,B                               ;BACK
8B9A 39               (     cubixdrv.asm):00125                 RTS
                      (     cubixdrv.asm):00126         ;*
                      (     cubixdrv.asm):00127         ;* OUTPUT 'A' NUMBER TO CONSOLE IN HEX
                      (     cubixdrv.asm):00128         ;*
8B9B                  (     cubixdrv.asm):00129         WRHEX
8B9B 3402             (     cubixdrv.asm):00130                 PSHS    A                                 ;SAVE IT
8B9D 44               (     cubixdrv.asm):00131                 LSRA                                      ;SHIFT
8B9E 44               (     cubixdrv.asm):00132                 LSRA                                      ;HIGH NIBBLE
8B9F 44               (     cubixdrv.asm):00133                 LSRA                                      ;INTO
8BA0 44               (     cubixdrv.asm):00134                 LSRA                                      ;LOW NIBBLE
8BA1 8D06             (     cubixdrv.asm):00135                 BSR     HOUT                              ;HIGH
8BA3 A6E4             (     cubixdrv.asm):00136                 LDA     ,S                                ;GET LOW
8BA5 8D02             (     cubixdrv.asm):00137                 BSR     HOUT                              ;OUTPUT
8BA7 3582             (     cubixdrv.asm):00138                 PULS    A,PC                              ;RESTORE IT
                      (     cubixdrv.asm):00139         ;* OUTPUT NIBBLE IN HEX
8BA9                  (     cubixdrv.asm):00140         HOUT
8BA9 840F             (     cubixdrv.asm):00141                 ANDA    #%00001111                        ;REMOVE HIGH
8BAB 8B30             (     cubixdrv.asm):00142                 ADDA    #'0'                              ;CONVERT
8BAD 8139             (     cubixdrv.asm):00143                 CMPA    #'9'                              ;OK?
8BAF 2304             (     cubixdrv.asm):00144                 BLS     PUTCHR                            ;OK, OUTPUT
8BB1 8B07             (     cubixdrv.asm):00145                 ADDA    #7                                ;CONVERT TO 'A'-'F'
8BB3 2000             (     cubixdrv.asm):00146                 BRA     PUTCHR                            ;OUTPUT
8BB5                  (     cubixdrv.asm):00147         PUTCHR:
8BB5 7E885E           (     cubixdrv.asm):00148                 JMP     WRSER1
8BB8 3404             (     cubixdrv.asm):00149                 PSHS    B
8BBA 3402             (     cubixdrv.asm):00150                 PSHS    A
8BBC 58               (     cubixdrv.asm):00151                 ASLB                                      ; DOUBLE NUMBER FOR TABLE LOOKUP
8BBD 8600             (     cubixdrv.asm):00152                 LDA     #$00
8BBF F60100           (     cubixdrv.asm):00153                 LDB     CONSOLEDEVICE
8BC2 1F01             (     cubixdrv.asm):00154                 TFR     D,X
8BC4 EC898813         (     cubixdrv.asm):00155                 LDD     DISPATCHTABLE,X
8BC8 FD01FE           (     cubixdrv.asm):00156                 STD     farpointer
8BCB 3502             (     cubixdrv.asm):00157                 PULS    A
8BCD AD9F01FE         (     cubixdrv.asm):00158                 JSR     [farpointer]
8BD1 3504             (     cubixdrv.asm):00159                 PULS    B
8BD3 39               (     cubixdrv.asm):00160                 RTS
                      (     cubixdrv.asm):00161         
                      (     cubixdrv.asm):00162                 END

Symbol Table:
[ G] BANKED_DRIVER_DISPATCHER         8800
[ G] CONSOLEDEVICE                    0100
[ G] CURRENTCYL                       01F9
[ G] CURRENTDEVICE                    01FB
[ G] CURRENTHEAD                      01F8
[ G] CURRENTSEC                       01FA
[ G] CURRENTSLICE                     01FC
[ G] DISKERROR                        01F7
[ G] DISPATCHTABLE                    8813
[ G] drv_noop                         8B7B
[ G] DSKUNIT                          01E6
[ G] DSKY_BUF                         01EA
[ G] DSKY_HEXBUF                      01F3
[ G] farpointer                       01FE
[ G] FCMD                             01E4
[ G] FLERR                            01E5
[ G] FLOPPY_DETCT                     01E7
[ G] FLRETRY                          01E8
[ G] FLRETRY1                         01E9
[ G] FUNCTION_DISPATCHER              8800
[ G] HOUT                             8BA9
[ G] HSTBUF                           0300
[ G] IDE_ABORT                        88B2
[ G] IDE_INITA                        88D4
[ G] IDE_PPIDETECT                    8978
[ G] IDE_PRINT_INFO                   88BB
[ G] IDE_READ                         8A7E
[ G] IDE_READ_BUFFER                  8A43
[ G] IDE_READ_INFO                    8919
[ G] IDE_READ_INFO_ABORT              8966
[ G] IDE_READ_INFO_OK                 8972
[ G] IDE_READ_NO_SETUP                8A81
[ G] IDE_READ_SECTOR                  8986
[ G] IDE_READ_SECTOR_1                898B
[ G] IDE_READ_SECTOR_ERROR            89A6
[ G] IDE_SETUP_LBA                    8B23
[ G] IDE_WAIT_DRQ                     8A15
[ G] IDE_WAIT_DRQ1                    8A1F
[ G] IDE_WAIT_DRQ2                    8A3F
[ G] IDE_WAIT_DRQ3                    8A41
[ G] IDE_WAIT_DRQE                    8A3A
[ G] IDE_WAIT_NOT_BUSY                89EE
[ G] IDE_WAIT_NOT_BUSY1               89F8
[ G] IDE_WAIT_NOT_BUSY2               8A10
[ G] IDE_WAIT_NOT_BUSY3               8A12
[ G] IDE_WRITE                        8AA7
[ G] IDE_WRITE_BUFFER                 8A5F
[ G] IDE_WRITE_SECTOR                 89AC
[ G] IDE_WRITE_SECTOR_ERROR           89D1
[ G] IDEBUFRD                         8A47
[ G] IDEBUFWT                         8A63
[ G] LFCR                             8B7C
[ G] MD_PAGERA                        0200
[ G] MESSAGE1                         8AE2
[ G] MESSAGE2                         8AEA
[ G] MESSAGE3                         8AF1
[ G] MESSAGE4                         8AFE
[ G] MESSAGE5                         8B0F
[ G] MESSAGE6                         8B20
[ G] PAGER_D                          02F8
[ G] PAGER_S                          02FE
[ G] PAGER_STACK                      02F5
[ G] PAGER_U                          02F6
[ G] PAGER_X                          02FA
[ G] PAGER_Y                          02FC
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       8887
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        DF88
[ G] PPIDE_PROBE                      88D8
[ G] PPIDE_PROBE_FAIL                 8916
[ G] PPIDE_PROBE_SUCCESS              8918
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      89D7
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       DF8A
[ G] PPIDECOMMAND                     8884
[ G] PPIDEHI                          DF89
[ G] PPIDELO                          DF88
[ G] PPIDELOTMP                       8883
[ G] PPIDEPPIC                        DF8B
[ G] PPIDETIMEOUT                     8885
[ G] PPRD_IDE_8255                    0092
[ G] PPWR_IDE_8255                    0080
[ G] PUTCHR                           8BB5
[ G] RDSER1                           886B
[ G] RST_DLY                          89E0
[ G] SERIALINIT                       885D
[ G] SET_PPI_RD                       8AC6
[ G] SET_PPI_WR                       8AD4
[ G] ST0                              01E3
[ G] UART0                            DF58
[ G] UART1                            DF59
[ G] UART2                            DF5A
[ G] UART3                            DF5B
[ G] UART4                            DF5C
[ G] UART5                            DF5D
[ G] UART6                            DF5E
[ G] UART7                            DF5F
[ G] WRHEX                            8B9B
[ G] WRHEXW                           8B92
[ G] WRSER1                           885E
[ G] WRST1                            8B87
[ G] WRST2                            8B8F
[ G] WRSTR                            8B85
