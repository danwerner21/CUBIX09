*
* I/O Drivers for CUBIX on the D6809 simulator.
*
* Copyright 1983-2005 Dave Dunfield
* All rights reserved.
*
	TITLE	HARDWARE DEPENDANT I/O DRIVERS
* PORTABLE SYSTEM HARDWARE I/O ADDRESSES
UART1	EQU	$0000		SERIAL PORT 1
UART2	EQU	$0004		SERIAL PORT 2
;AUART	EQU	$0010		AUXILARY UART
KBD	EQU	$00FF		KEYBOARD LOCATIONS
FDC	EQU	$00F0		FDC STATUS REG
* MISC CONSTANTS
;VSH	EQU	80		NUMBER OF COLUMNS
;VSV	EQU	25		NUMBER OF ROWS
;VSIZ	EQU	VSH*VSV		SCREEN SIZE
;VRAM	EQU	VIDEO+VSIZ	SCRATCHPAD RAM
* SPECIAL CHARACTERS TO VIDEO DISPLAY
VCLR	EQU	'X'-$40		CLEAR DISPLAY
VCLD	EQU	'W'-$40		CLEAR TO END OF DISPLAY
VCLE	EQU	'V'-$40		CLEAR TO END OF LINE
VHO	EQU	'Y'-$40		HOME CURSOR
VSI	EQU	'N'-$40		SHIFT IN ALTERNATE
VSO	EQU	'O'-$40		SHIFT OUT ALTERNATE
VTA	EQU	'I'-$40		TAB TO NEXT STOP
VCR	EQU	'M'-$40		CARRIAGE RETURN
VLF	EQU	'J'-$40		ADVANCE LINE
VBS	EQU	'H'-$40		BACKSPACE
VUP	EQU	'Z'-$40		UP ARROW
VND	EQU	'U'-$40		NON-DESTRUCTIVE SPACE
VSC	EQU	'D'-$40		SCROLL
VUS	EQU	'E'-$40		UPWARDS SCROLL
VCP	EQU	'P'-$40		CURSOR POSITION
VBL	EQU	'G'-$40		BELL RING CHARACTER
*
* INITIALIZE SYSTEM HARDWARE
* ON ENTRY Y POINTS TO SYSTEM RAM DEFAULT AREA
*
* INIT. VIDEO CONTROLLER
HWINIT	EQU	*
* SET UP INITIALIZED RAM
	LDX	#RITAB		POINT TO DRIVE TABLE
	LDB	#RISIZ		TOTAL SIZE OF TABLE
DIN1	LDA	,X+		GET A BYTE FROM TABLE
	STA	,Y+		WRITE IT TO CUBIX RAM
	DECB			REDUCE COUNT
	BNE	DIN1		MOVE ENTIRE TABLE
* INITIALIZE THE DISK SYSTEM
	LDA	#$05		INIT COMMAND
	STA	>FDC		WRITE TO FDC
* INITIALIZE SERIAL PORTS
*	LDD	#$AB3E		9600, 7 BITS, MARK PARITY, 1 STOP BIT
	LDD	#$0B1E		9600, 8 BITS, NO PARITY, 1 STOP BIT
	CLR	>UART1+1	RESET 1
	CLR	>UART2+1	RESET 2
	STD	>UART1+2	INIT 1
	STD	>UART2+2	INIT 2
	LDA	#VCLR		CHARACTER TO CLEAR SCREEN
*
* OUTPUT THE CHARACTER IN (A) TO VIDEO SCREEN
*
WRVID	STA	>KBD		Write to screen
	RTS
*
* WRITE SERIAL PORTS
*
WRSER2	LDX	#UART2		GET ADDRESS
	BRA	WRSER		WRITE IT
WRSER1	LDX	#UART1		GET ADDRESS
WRSER	LDB	1,X		GET STATUS
	BITB	#%00010000	IS TX READY
	BEQ	WRSER		NO, WAIT FOR IT
	STA	,X		WRITE DATA
	RTS
*
* WRITE AUXILARY PORT
*
;WRAUX	LDB	>AUART		GET STATUS
;	BITB	#%00000010	IS TX READY?
;	BEQ	WRAUX		NO, WAIT FOR IT
;	STA	>AUART+1	WRITE IT
;	RTS
*
* READ SERIAL PORTS
*
RDSER2	LDX	#UART2		GET ADDRESS
	BRA	RDSER		READ IT
RDSER1	LDX	#UART1		GET ADDRESS
RDSER	LDA	1,X		GET STATUS REGISTER
	BITA	#%00001000	IS RX READY
	BEQ	RDNULL		NO, INDICATE NO CHAR
	LDA	,X		GET DATA CHAR
	ORCC	#%00000100	SET 'Z'
	RTS
*
* READ AUX PORT
*
;RDAUX	LDA	>AUART+1	GET STATUS
;	BITA	#%00000001	IS RX READY?
;	BEQ	RDNULL		NO, INDICATE NO CHAR
;	LDA	>AUART		GET DATA
;	ORCC	#%00000100	SET 'Z'
;	RTS
*
* CHECK FOR A KEY FROM THE KEYBOARD
*
RDKBD	LDA	>KBD		KEYBOARD DATA?
	BEQ	RDNULL		NO
	ORCC	#%00000100	Set Z
	RTS
* NO KEY, RETURN WITH $FF AND 'Z' FLAG CLEAR
* ALSO ACTS AS THE NULL DEVICE DRIVERS
RDNULL	LDA	#$FF		INDICATE NO KEY
WRNULL	RTS
*
* FORMAT DISK, 'A' = INTERLEAVE FACTOR
*
DFORMAT	LDA	DRIVE,U		Get drive
	STA	>FDC+2		Set drive
	LDA	NCYL,U		Get #cylinders
	STA	>FDC+3		Set #cylinders
	LDA	NHEAD,U		Get #heads
	STA	>FDC+4		Set # heads
	LDA	NSEC,U		Get # sectors
	STA	>FDC+5		Set # sectors
	LDA	#$03		Format command
	STA	>FDC		Write to FDC
	BRA	DEND		And exit
*
* Home HEAD
*
DHOME	LDA	DRIVE,U		Get drive
	STA	>FDC+2		Set drive
	LDA	#$04		Reset command
	STA	>FDC		Reset drive
	BRA	DEND		And exit
*
* READ A SECTOR, FROM DISK TO MEMORY(X)
*
DRDSEC	LDA	DRIVE,U		Get drive
	STA	>FDC+2		Set drive
	LDA	CYL,U		Get cylinder
	STA	>FDC+3		Set cylinder
	LDA	HEAD,U		Get head
	STA	>FDC+4		Set head
	LDA	SEC,U		Get sector
	STA	>FDC+5		Set sector
	LDA	NHEAD,U		Get # heads
	STA	>FDC+6		Set # heads
	LDA	NSEC,U		Get # sectors
	STA	>FDC+7		Set # sectors
	LDA	#$01		Read command
	STA	>FDC		Issue read
	LDA	>FDC		Read device
	CMPA	#$01		Reading?
	BNE	DERR		Report error
	LDY	#512		Move 512 bytes
DRDS1	LDA	>FDC+1		Read data
	STA	,X+		Write
	LEAY	-1,Y		Reduce count
	BNE	DRDS1		Do entire sector
DEND	LDA	>FDC		Get status
	BEQ	RDOK		It's OK
DERR	ANDA	#$0F		Remove indicator
	ANDCC	#$FB		Clear 'Z'
RDOK	RTS
*
* WRITE A SECTOR TO DISK FROM MEMORY(X)
*
DWRSEC	LDA	DRIVE,U		Get drive
	STA	>FDC+2		Set drive
	LDA	CYL,U		Get cylinder
	STA	>FDC+3		Set cylinder
	LDA	HEAD,U		Get head
	STA	>FDC+4		Set head
	LDA	SEC,U		Get sector
	STA	>FDC+5		Set sector
	LDA	NHEAD,U		Get # heads
	STA	>FDC+6		Set # heads
	LDA	NSEC,U		Get # sectors
	STA	>FDC+7		Set # sectors
	LDA	#$02		Read command
	STA	>FDC		Issue read
	LDA	>FDC		Read device
	CMPA	#$02		Writing?
	BNE	DERR		Report error
	LDY	#512		Move 512 bytes
DWRS1	LDA	,X+		Read from memory
	STA	>FDC+1		Write to FDC
	LEAY	-1,Y		Reduce count
	BNE	DWRS1		Do entire sector
	BRA	DEND		Check status
* INTERRUPT IGNORE
IGNORE	RTI
*
* INITIALIZATION TABLE FOR CUBIX RAM
*
RITAB	EQU	*
* DEFAULT DRIVE CHARACTISTICS
	FCB	0,40,2,9,0,0,0	DEV 0, 40 CYL, 2 HEAD, 9 SEC/TRK
	FCB	1,40,2,9,0,0,0	DEV 1, 40 CYL, 2 HEAD, 9 SEC/TRK
	FCB	2,40,2,9,0,0,0	DEV 2, 40 CYL, 2 HEAD, 9 SEC/TRK
	FCB	3,40,2,9,0,0,0	DEV 3, 40 CYL, 2 HEAD, 9 SEC/TRK
* CONSOLE DEVICE ASSIGNMENTS
	FCB	1		CONSOLE INPUT DEVICE
	FCB	1		CONSOLE OUTPUT DEVICE
* SERIAL DEVICE DRIVERS
	FDB	RDNULL,RDKBD,RDSER1,RDSER2,0,0,0,0
	FDB	WRNULL,WRVID,WRSER1,WRSER2,0,0,0,0
* DISK DEVICE DRIVERS
	FDB	DHOME,DRDSEC,DWRSEC,DFORMAT
* 6809 HARDWARE VECTORS
	FDB	SSR		SWI VECTOR (USED FOR SSR'S)
	FDB	IGNORE		SWI2 VECTOR
	FDB	IGNORE		SWI3 VECTOR
	FDB	IGNORE		IRQ  VECTOR
	FDB	IGNORE		FIRQ VECTOR
	FDB	IGNORE		NMI VECTOR
* MISC FLAGS & VARIABLES
	FCB	$FF		ERROR MESSAGES ENABLED
	FCB	0		TRACEING DISABLED
	FCB	0		DEBUG OUTPUT DISABLED
	FCB	0		DEFAULT DRIVE (A)
	FCC	'MAIN'		DEFAULT DIRECTORY
	FCB	0,0,0,0		(FILLER)
	FCB	0		SYSTEM DRIVE (A)
	FCC	'SYSTEM'	SYSTEM DIRECTORY
	FCB	0,0		(FILLER)
RISIZ	EQU	*-RITAB		SIZE OF INITILAIZED RAM
