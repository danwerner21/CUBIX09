DUNFIELD 6809 ASSEMBLER: D:MAPL                                       PAGE: 1

0000                         1  *
0000                         2  * SYSTEM MEMORY LOCATIONS FOR USE BY APPLICATION PROGRAMS
0000                         3  *
2000                         4  OSRAM	EQU	$2000		USER APPLICATION RAM STARTS HEDE
DBFF                         5  OSEND	EQU	$DBFF		LAST LOCATION OF USER (NON-SYSTEM) RAM
D000                         6  OSUTIL	EQU	$D000		RAM FOR UTILITY PROGRAM USAGE
0000                         7  *
0000                         9  *
0000                        10  * MICRO-APL 1.0
0000                        11  *
0000                        12  * Simple APL SUBSET for the 6809, using the standard ASCII
0000                        13  * character set. Lower case characters are used instead of
0000                        14  * special APL characters to represent some of the primitive
0000                        15  * functions. The function of the "SHIFT" key is reversed to
0000                        16  * allow easier operation (SHIFT = special functions)
0000                        17  *
0000                        18  * SYSTEM COMMANDS:
0000                        19  *
0000                        20  *  )OFF, )LIB, )SI, )REL, )RESET, )LOAD, )SAVE, )WSID, )DROP,
0000                        21  *  )CLEAR, )SYS, )VARS, )FNS, )LBLS, )STAT
0000                        22  *
0000                        23  * MONADIC (SINGLE OPERAND) OPERATORS:
0000                        24  *
0000                        25  *  i - INDEX VECTOR GENERATION		 p - SHAPE OF OPERAND
0000                        26  *  r - REVERSE OPERAND			 c - CLASSIFICATION
0000                        27  *  e - EXECUTE STRING OPERAND		 s - CONVERT TO STRING
0000                        28  *  ? - ROLL RANDOM VECTOR		 ^ - SORT VECTOR
0000                        29  *  b - BRANCH TO LABEL
0000                        30  *
0000                        31  * DYADIC (TWO OPERAND) OPERATORS:
0000                        32  *
0000                        33  *  + - ADDITION				 - - SUBTRACTION
0000                        34  *  x - MULTIPLICATION			 % - DIVISION
0000                        35  *  m - MODULUS				 & - LOGICAL AND
0000                        36  *  ! - LOGICAL OR			 | - EXCLUSIVE OR
0000                        37  *  g - GREATEST				 l - LEAST
0000                        38  * == - TEST FOR EQUALITY		-= - TEST FOR INEQUALITY
0000                        39  *  > - TEST FOR GREATER THAN		 < - TEST FOR LESS THAN
0000                        40  * >= - TEST FOR GREATOR OR EQUAL	<= - TEST FOR LESS OR EQUAL
0000                        41  *  = - ASSIGNMENT			 / - EXTRACTION
0000                        42  *  ; - JOIN				 t - TAKE
0000                        43  *  d - DROP				 f - FIND
0000                        44  *  | - EXCLUSIVE OR			 u - UNION OF SETS
0000                        45  *  n - TRANSLATE
0000                        46  *
0000                        47  * OTHER OPERATORS:
0000                        48  *
0000                        49  * [] - INDEX ACCESS			() - NEST
0000                        50  *  \ - TRAVEL				 $ - FUNCTION DEFINITION
0000                        51  *
0000                        52  * SYSTEM VARIABLES:
0000                        53  *
0000                        54  *  B$ - BUFFER SIZE			C$ - CHARACTER VECTOR
0000                        55  *  F$ - FORMATTED I/O			K$ - READ KEYSTROKE
0000                        56  *  L$ - LINE NUMBER			O$ - ORIGIN VALUE
0000                        57  *  P$ - PARAMETER			R$ - REMAINDER
0000                        58  *  S$ - RANDOM SEED			T$ - TERMINAL I/O
0000                        59  *  W$ - AVAILABEL WORKSPACE
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 2

0000                        60  *
0000                        61  * Copyright 1984-2005 Dave Dunfield
0000                        62  * All rights reserved.
0000                        63  *
0000                        64  * DATA AREAS
0000                        65  *
2000                        66  ROM	EQU	OSRAM		PROGRAMM GOES HERE
3C00                        67  RAM	EQU	OSRAM+7168	DATA GOES HERE
CC00                        68  HIRAM	EQU	OSUTIL-1024	TOP OF RAM
0000                        69  *
3C82                        70  LEVEL	EQU	RAM+130
3C83                        71  EXEC	EQU	LEVEL+1
3C84                        72  TEMP	EQU	EXEC+1
3C86                        73  TEMP0	EQU	TEMP+2
3C88                        74  TEMP1	EQU	TEMP0+2
3C8A                        75  TEMP2	EQU	TEMP1+2
3C8C                        76  TEMP3	EQU	TEMP2+2
3C8E                        77  TEMP4	EQU	TEMP3+2
3C90                        78  TEMP5	EQU	TEMP4+2
3C92                        79  TXTTMP	EQU	TEMP5+2
3C94                        80  PARM	EQU	TXTTMP+2
3C96                        81  LINCT	EQU	PARM+2
3C98                        82  GOTO	EQU	LINCT+2
3C9A                        83  NAMPTR	EQU	GOTO+2
3C9C                        84  DIVREM	EQU	NAMPTR+2
3C9E                        85  TXTPTR	EQU	DIVREM+2
3CA0                        86  SAVSTK	EQU	TXTPTR+2
3CA2                        87  RAMTOP	EQU	SAVSTK+2
3CA4                        88  ASSFLG	EQU	RAMTOP+2
3CA5                        89  ERRFLG	EQU	ASSFLG+1
3CA6                        90  INPSTK	EQU	ERRFLG+1
3CA8                        91  ID	EQU	INPSTK+2
4000                        92  STACK	EQU	RAM+1024
0000                        93  * WORKSPACE CONTENTS
4000                        94  FREE	EQU	RAM+1024
4002                        95  ORIGIN	EQU	FREE+2
4004                        96  SEED	EQU	ORIGIN+2
4006                        97  BUFSIZ	EQU	SEED+2
4008                        98  FREMEM	EQU	BUFSIZ+2
400A                        99  SYMTAB	EQU	FREMEM+2
0000                       100  *
2000                       101  	ORG	ROM
2000                       102  * PROGRAM ENTRY
2000  17 04 63             103  APL	LBSR	SYSMSG
2003  4D 41 50 4C 20 76 +  104  	FCCZ	'MAPL version 1.0'
2014  4F                   105  	CLRA			INDICATE ERR MSGS
2015  3F                   106  	SWI			SOFTWARE INTERRUPT TO DOS
2016  69                   107  	FCB	105		SYSTEM REQUEST NUMBER
2017  10 8E 3A 4C          108  	LDY	#CONTIN		POINT TO CONTINUE NAME
201B  3F                   109  	SWI			SOFTWARE INTERRUPT TO DOS
201C  0A                   110  	FCB	10		SYSTEM REQUEST NUMBER
201D  31 08                111  	LEAY	8,X		POINT TO IT
201F  3F                   112  	SWI			SOFTWARE INTERRUPT TO DOS
2020  44                   113  	FCB	68		SYSTEM REQUEST NUMBER
2021  10 27 00 A0          114  	LBEQ	LDGO		IF SO, LOAD IT
2025  20 1C                115  	BRA	DEFCLR		DEFAULT CLEAR
2027                       116  * ')CLEAR' COMMAND
2027  17 04 64             117  CLEAR	LBSR	SKIP		LOOK FOR PARAMETER
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 3

202A  27 17                118  	BEQ	DEFCLR		ASSUME DEFAULT
202C  A6 A0                119  CLER1	LDA	,Y+		GET CHAR
202E  81 0D                120  	CMPA	#$0D		CONTINUE
2030  26 FA                121  	BNE	CLER1		TO END OF LINE
2032  31 3F                122  	LEAY	-1,Y		BACKUP TO CR
2034  17 04 68             123  	LBSR	SKBK		BACKUP TO NUMBER
2037  17 04 88             124  	LBSR	VALNUM		VALID DIGIT?
203A  10 26 19 48          125  	LBNE	UNCMD		INVALID
203E  17 04 96             126  	LBSR	GETDEC		GET DECIMAL
2041  20 03                127  	BRA	CLRGO		CONTINUE
2043  CC 03 E8             128  DEFCLR	LDD	#1000		DEFAULT SYMBOL TABLE SIZE
2046  C3 40 0B             129  CLRGO	ADDD	#SYMTAB+1	OFFSET FOR SYMBOL TABLE ADDRESS
2049  FD 40 08             130  	STD	FREMEM		POINT TO FREE MEMORY
204C  FD 40 00             131  	STD	>FREE		INDICATE HOW MUCH IS FREE
204F  7F 40 0A             132  	CLR	>SYMTAB		REMOVE SYMBOLS
2052  CC 04 00             133  	LDD	#1024		DEFAULT BUFFER SIZE
2055  FD 40 06             134  	STD	BUFSIZ		SAVE BUFFER SIZE
2058  10 8E 20 6C          135  	LDY	#CID		POINT TO NEW ID
205C  17 16 AD             136  	LBSR	WSISET		SET UP WSID
205F  CC 00 01             137  	LDD	#1		GET A 1 ORIGIN
2062  FD 40 02             138  	STD	ORIGIN		SAVE ORIGIN VALUE
2065  43                   139  	COMA			GARBAGE VALUE
2066  FD 40 04             140  	STD	SEED		SET UP SEED
2069  17 03 FA             141  CLMSG	LBSR	SYSMSG		DISPLAY MESSAGE
206C  43 4C 45 41 52 20 +  142  CID	FCCZ	'CLEAR WS'
2075  10 CE 40 00          143  	LDS	#STACK		POINT TO SYSTEM STACK
2079  10 FF 3C A0          144  	STS	SAVSTK		INTIALIZE IT
207D                       145  * ')RESET' SYSTEM COMMAND
207D  17 18 33             146  RESET	LBSR	DOREST		DO A RESET
2080                       147  * COMMAND INTERPRETER
2080  8D 28                148  CMD	BSR	INIWS		INIT WORKSPACE PARMS
2082  10 FE 3C A0          149  	LDS	SAVSTK		SET UP STACK
2086  17 03 D1             150  	LBSR	DSPSTR		DISPLAY MESSAGE
2089  20 20 20 20 20 20 +  151  	FCCZ	'      '	SPACE OVER
2090  17 03 6F             152  	LBSR	GETRAM		GET A LINE OF INPUT
2093  17 03 F8             153  	LBSR	SKIP		SKIP TO COMMAND
2096  27 E8                154  	BEQ	CMD		IF NONE, TRY AGAIN
2098  81 2A                155  	CMPA	#'*'		COMMENT?
209A  27 E4                156  	BEQ	CMD		IF SO, GO FOR IT
209C  81 29                157  	CMPA	#')'		SYSTEM COMMAND?
209E  10 26 00 77          158  	LBNE	EDIT		NO, PROCESS EXPRESSION
20A2  8E 39 D5             159  	LDX	#CMDTAB		POINT TO COMMAND TABLE
20A5  17 12 AF             160  	LBSR	CLOOK		LOOK UP AND EXECUTE COMMAND
20A8  20 D6                161  	BRA	CMD		GET NEXT
20AA  7F 3C 83             162  INIWS	CLR	EXEC		INSURE NOTHING RUNNING
20AD  CC 00 00             163  	LDD	#0
20B0  FD 3C A6             164  	STD	INPSTK		SAVE INPUT STACK POINTER
20B3  FC 3C A2             165  	LDD	RAMTOP		GET TOP OF RAM
20B6  FD 3C 90             166  	STD	TEMP5		SAVE FREE MEMORY INDICATOR
20B9  39                   167  	RTS
20BA                       168  * ')LOAD' COMMAND
20BA  17 05 13             169  LOAD	LBSR	FILNAM		GET FILENAME
20BD  3F                   170  	SWI			SOFTWARE INTERRUPT TO DOS
20BE  0A                   171  	FCB	10		SYSTEM REQUEST NUMBER
20BF  10 26 18 C3          172  	LBNE	UNCMD		GET UPSET IF BAD
20C3  31 08                173  	LEAY	8,X		POINT TO NAME
20C5  8E 40 00             174  LDGO	LDX	#FREE		POINT TO FREE SPACE
20C8  3F                   175  	SWI			SOFTWARE INTERRUPT TO DOS
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 4

20C9  35                   176  	FCB	53		SYSTEM REQUEST NUMBER
20CA  27 11                177  	BEQ	LOA2		IT'S OK, CONTINUE
20CC  17 03 97             178  LOA1	LBSR	SYSMSG		INDICATE SYSTEM ERROR
20CF  57 53 20 4E 4F 54 +  179  	FCCZ	'WS NOT FOUND'
20DC  39                   180  	RTS
20DD                       181  * PERFORM INIT
20DD  17 16 2C             182  LOA2	LBSR	WSISET		SET NAME
20E0  10 CE 40 00          183  	LDS	#STACK		RESET STACK
20E4  10 FF 3C A0          184  	STS	SAVSTK		SAVE NEW
20E8  17 17 C8             185  	LBSR	DOREST		PERFORM RESET
20EB  8D BD                186  	BSR	INIWS		INIT WORKSPACE
20ED  17 03 6A             187  	LBSR	DSPSTR		DISPLAY STRING
20F0  57 53 49 44 20 49 +  188  	FCCZ	'WSID IS '	MESSAGE TO DISPLAY
20F9  17 16 24             189  	LBSR	DWSID		DISPLAY
20FC  10 8E 3A 4A          190  	LDY	#LXNAME		POINT TO LATENT EXPRESSION
2100  17 04 08             191  	LBSR	LOOKUP		IS IT FOUND?
2103  26 03                192  	BNE	CMD1		NO, SKIP IT
2105  17 04 E5             193  PROCMD	LBSR	EXPR		EVALUATE EXPRESSION
2108  16 FF 75             194  CMD1	LBRA	CMD		PERFORM COMMAND
210B                       195  * ')DROP' COMMAND
210B  17 04 C2             196  DROP	LBSR	FILNAM		GET FILENAME
210E  3F                   197  	SWI			SOFTWARE INTERRUPT TO DOS
210F  0A                   198  	FCB	10		SYSTEM REQUEST NUMBER
2110  10 26 18 72          199  	LBNE	UNCMD		GET UPSET IF INVALID
2114  3F                   200  	SWI			SOFTWARE INTERRUPT TO DOS
2115  49                   201  	FCB	73		SYSTEM REQUEST NUMBER
2116  26 B4                202  	BNE	LOA1		IF NOT FOUND
2118  39                   203  	RTS
2119                       204  *
2119                       205  * FUNCTION EDITOR
2119                       206  *
2119  81 24                207  EDIT	CMPA	#'$'		CREATE A FUNCTION?
211B  10 26 FF E6          208  	LBNE	PROCMD		PROCESS COMMAND
211F  10 BF 3C 84          209  	STY	TEMP		SAVE POINTER
2123  17 03 8F             210  	LBSR	SFSYM		SKIP FORWARD
2126  26 11                211  	BNE	NAMOK		NAME IS OK
2128  17 03 3B             212  DEFERR	LBSR	SYSMSG		DISPLAY MESSAGE,
212B  44 45 46 4E 20 45 +  213  	FCCZ	'DEFN ERROR'
2136  16 FF 47             214  	LBRA	CMD		AND BACK FOR COMMAND
2139  10 BF 3C 8C          215  NAMOK	STY	TEMP3		SAVE Y REG
213D  17 17 73             216  	LBSR	DOREST		PERFORM A RESET
2140  10 BE 3C 8C          217  	LDY	TEMP3		RESTORE
2144  31 3F                218  	LEAY	-1,Y		BACKUP TO FIRST CHAR OF SYMBOL
2146  4F                   219  	CLRA
2147  5F                   220  	CLRB			GET A ZERO
2148  FD 3C 8C             221  	STD	TEMP3		INITIALIZE LINE NUMBER
214B  17 03 BD             222  	LBSR	LOOKUP		LOOK FOR ENTRY
214E  27 20                223  	BEQ	FUNFND		FUNCTION EXISTS
2150  10 BE 3C 84          224  	LDY	TEMP		POINT TO NAME
2154  17 03 2C             225  	LBSR	SKP		ADVANCE TO NEXT CRAP
2157  BE 40 00             226  	LDX	FREE		POINT TO FREE RAM
215A  6F 80                227  	CLR	,X+		RESAVE
215C  BF 3C 8A             228  	STX	TEMP2		SAVE POINTER TO FUNCTION BEING EDITED
215F  A6 A0                229  CRED1	LDA	,Y+		GET CHAR
2161  A7 80                230  	STA	,X+		SAVE
2163  81 0D                231  	CMPA	#$0D		END?
2165  26 F8                232  	BNE	CRED1		NO, CONTINUE
2167  86 FF                233  	LDA	#$FF		GET END OF FUNCTION INDICATOR
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 5

2169  A7 80                234  	STA	,X+		SAVE IN RAM
216B  7C 3C 8D             235  	INC	TEMP3+1		START ON LINE 1
216E  20 35                236  	BRA	EDTRUN		EDIT THE FUNCTION
2170                       237  * FUNCTION EXISTED, COPY IT OVER
2170  BF 3C 84             238  FUNFND	STX	TEMP		SAVE POINTER TO SYMBOL TABLE ENTRY
2173  4D                   239  	TSTA			IS IT AN UNLOCKED FUNCTION?
2174  26 B2                240  	BNE	DEFERR		CAN'T EDIT UNLESS IT'S A FUNCTION
2176  10 AE 85             241  	LDY	B,X		GET POINTER TO FUNCTION ADDRESS
2179  BE 40 00             242  	LDX	FREE		POINT TO AVAILABEL MEMORY
217C  6F 80                243  	CLR	,X+		CLEAR BYTE FOR FUNCTION
217E  BF 3C 8A             244  	STX	TEMP2		RESAVE
2181                       245  * INSERT NAME AS LINE #0
2181  FE 3C 84             246  	LDU	TEMP		POINT TO SYMBOL TABLE ENTRY AGAIN
2184  E6 C1                247  	LDB	,U++		GET LENGTH
2186  C4 1F                248  	ANDB	#$1F		MASK LENGTH
2188  33 C5                249  	LEAU	B,U		INDICATE THIS IS IT
218A  A6 C2                250  EDX1	LDA	,-U		GET CHARACTER
218C  A7 80                251  	STA	,X+		SAVE IN NAME
218E  5A                   252  	DECB			REDUCE COUNT
218F  26 F9                253  	BNE	EDX1		AND KEEP DOING IT
2191  A6 A0                254  CPYFUN	LDA	,Y+		GET CHARACTER FROM FUNCTION
2193  A7 80                255  	STA	,X+		SAVE IN WORKSPACE BUFFER
2195  81 0D                256  	CMPA	#$0D		END OF LINE?
2197  26 08                257  	BNE	CPYF1		NO, ADVANCE TO NEXT
2199  7C 3C 8D             258  	INC	TEMP3+1		ADVANCE LINE NUMBER
219C  24 03                259  	BCC	CPYF1		AND SKIP IF NO CARRY
219E  7C 3C 8C             260  	INC	TEMP3		ADVANCE HIGH DIGIT
21A1  81 FF                261  CPYF1	CMPA	#$FF		END OF FUNCTION?
21A3  26 EC                262  	BNE	CPYFUN		CONTINUE TILL WE COPY IT ALL
21A5                       263  * START UP THE EDITOR
21A5  30 1F                264  EDTRUN	LEAX	-1,X		BACKUP TO END OF FILE MARKER
21A7  86 5B                265  EDTLIN	LDA	#'['		GET STARTING BRACE
21A9  17 02 CC             266  	LBSR	PUTCHR		DISPLAY
21AC  FC 3C 8C             267  	LDD	TEMP3		GET LINE NUMBER
21AF  17 0D 4C             268  	LBSR	DECOUT		DISPLAY
21B2  86 5D                269  	LDA	#']'		GET POINTER
21B4  17 02 C1             270  	LBSR	PUTCHR		DISPLAY
21B7  17 02 C5             271  	LBSR	SPACE		AND A BLANK
21BA  17 02 45             272  	LBSR	GETRAM		GET A LINE
21BD  17 02 C3             273  	LBSR	SKP		IS IT COMMAND
21C0  27 E5                274  	BEQ	EDTLIN		BAD, TRY AGAIN
21C2  81 24                275  	CMPA	#'$'		END OF DEFINITION
21C4  10 27 00 E9          276  	LBEQ	RESAVE		RESAVE EDITED FUNCTION
21C8  81 5B                277  	CMPA	#'['		IS IT COMMAND?
21CA  27 24                278  	BEQ	EDCMD		EXECUTE EDIT COMMAND
21CC  17 01 F4             279  	LBSR	DELETE		DELETE THIS LINE
21CF  17 02 10             280  	LBSR	INSERT		INSERT THIS LINE
21D2  7C 3C 8D             281  INCLIN	INC	TEMP3+1		ADVANCE LINE NUMBER
21D5  24 D0                282  	BCC	EDTLIN		IF NO CARRY, EVERYTHING OK
21D7  7C 3C 8C             283  	INC	TEMP3		AND GO FOR BROKE
21DA  20 CB                284  	BRA	EDTLIN		EDIT LINE
21DC  34 10                285  ERRDEF	PSHS	X		SAVE POINTER
21DE  17 02 85             286  	LBSR	SYSMSG		DISPLAY MESSAGE
21E1  44 45 46 4E 20 45 +  287  	FCCZ	'DEFN ERROR'
21EC  35 10                288  	PULS	X		RESTORE
21EE  20 B7                289  	BRA	EDTLIN		BACK TO LINE
21F0                       290  *
21F0                       291  * EDITOR COMMAND
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 6

21F0                       292  *
21F0  31 21                293  EDCMD	LEAY	1,Y		SKIP '['
21F2  17 02 99             294  	LBSR	SKIP		ADVANCE TO NEXT
21F5  81 24                295  	CMPA	#'$'		IS IT DISPLAY
21F7  26 34                296  	BNE	EDC1		NOT A QUAD
21F9  17 02 AC             297  	LBSR	SFNUM		LOOK FOR NUMBER
21FC  27 05                298  	BEQ	EDC2		SHOW ALL
21FE  17 02 D8             299  	LBSR	GETDIG		GET NUMBER
2201  20 13                300  	BRA	EDC3		IT'S OK
2203  17 02 54             301  EDC2	LBSR	DSPSTR		DISPLAY MSG
2206  20 20 20 20 20 24 +  302  	FCCZ	'     $'	DISPLAY
220D  BE 3C 8A             303  	LDX	TEMP2		POINT TO SPACE
2210  17 01 77             304  	LBSR	OULI		DISPLAY
2213  CC 00 01             305  	LDD	#1		DISPLAY LINE 1
2216  17 01 7D             306  EDC3	LBSR	FNDLIN		POINT TO LINE
2219  A6 84                307  DISP	LDA	,X		ARE WE AT END
221B  81 FF                308  	CMPA	#$FF		TEST FOR END OF FILE
221D  27 26                309  	BEQ	EDC5		QUIT IF END
221F  17 01 43             310  	LBSR	DSPLIN		DISPLAY A LINE
2222  FC 3C 8C             311  	LDD	TEMP3		GET NUMBER
2225  C3 00 01             312  	ADDD	#1		ADVANCE
2228  FD 3C 8C             313  	STD	TEMP3		AND RESAVE
222B  20 EC                314  	BRA	DISP		AND CONTINUE
222D                       315  * DELETE LINES
222D  81 44                316  EDC1	CMPA	#'D'		IS IT DELETE LINE?
222F  26 17                317  	BNE	EDC4		NO, TRY POSITION
2231  17 02 74             318  	LBSR	SFNUM		LOOK FOR LINE NUMBER
2234  27 A6                319  	BEQ	ERRDEF		CAN'T DELETE
2236  17 02 A0             320  	LBSR	GETDIG		GET NUMBER
2239  10 83 00 00          321  	CMPD	#0		TRYING TO DELETE 0?
223D  27 9D                322  	BEQ	ERRDEF		INVALID
223F  17 01 54             323  	LBSR	FNDLIN		LOCATE LINE
2242  17 01 7E             324  	LBSR	DELETE		GET RID OF IT
2245  16 FF 5F             325  EDC5	LBRA	EDTLIN		NEXT COMMAND
2248                       326  * INSERT LINE(S)
2248  81 49                327  EDC4	CMPA	#'I'		INSERT?
224A  26 41                328  	BNE	EDCP		NO, FORGET IT
224C  17 02 59             329  	LBSR	SFNUM		ARE WE OK?
224F  10 27 FF 89          330  	LBEQ	ERRDEF		NO, NO NUMBER
2253  17 02 83             331  	LBSR	GETDIG		GET THE NUMBER
2256  10 83 00 00          332  	CMPD	#0		CANNOT INSERT IN LINE 0
225A  10 27 FF 7E          333  	LBEQ	ERRDEF		SAY SO
225E  17 01 35             334  	LBSR	FNDLIN		LOCATE THE LINE
2261  86 28                335  EDCZ	LDA	#'('		DISPLAY MESSAGE
2263  17 02 12             336  	LBSR	PUTCHR		OUTPUT
2266  FC 3C 8C             337  	LDD	TEMP3		GET LINE NUMBER
2269  17 0C 92             338  	LBSR	DECOUT		OUTPUT
226C  86 29                339  	LDA	#')'		CLOSING PROMPT
226E  17 02 07             340  	LBSR	PUTCHR		DISPLAY
2271  17 02 0B             341  	LBSR	SPACE		SPACE OVER
2274  17 01 8B             342  	LBSR	GETRAM		GET A LINE
2277  17 02 09             343  	LBSR	SKP		IS IT THE END
227A  27 0E                344  	BEQ	EDCX		IF SO, QUIT
227C  17 01 63             345  	LBSR	INSERT		PUT IT HERE
227F  FC 3C 8C             346  	LDD	TEMP3		GET LINE NUMBER
2282  C3 00 01             347  	ADDD	#1		ADVANCE
2285  FD 3C 8C             348  	STD	TEMP3		AND GO AGAIN
2288  20 D7                349  	BRA	EDCZ		AND GET NEXT LINE
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 7

228A  16 FF 1A             350  EDCX	LBRA	EDTLIN		BACK FOR NEXT COMMAND
228D                       351  * POSITION TO LINE
228D  17 02 32             352  EDCP	LBSR	VALNUM		IS IT VALID?
2290  10 26 FF 48          353  	LBNE	ERRDEF		NO, GET UPSET
2294  31 3F                354  	LEAY	-1,Y		BACKUP TO IT
2296  17 02 0F             355  	LBSR	SFNUM		LOOK FOR NUMBER
2299  34 02                356  	PSHS	A		SAVE CHARACTER
229B  17 02 3B             357  	LBSR	GETDIG		GET NUMBER
229E  17 00 F5             358  	LBSR	FNDLIN		LOCATE IT
22A1  35 02                359  	PULS	A		GET CHARACTER BACK
22A3  81 24                360  	CMPA	#'$'		DO WE DISPLAY?
22A5  26 E3                361  	BNE	EDCX		NO, JUST GO THERE
22A7  34 10                362  	PSHS	X		SAVE POSITION
22A9  17 00 B9             363  	LBSR	DSPLIN		DISPLAY
22AC  35 10                364  	PULS	X		RESTORE X
22AE  16 FE F6             365  	LBRA	EDTLIN		AND GO HOME
22B1                       366  * SAVE NEW FUNCTION DEFINITION, INSERT AT BEGINNING OF SYMBOL TABLE
22B1  A6 21                367  RESAVE	LDA	1,Y		GET NEXT CHARACTER
22B3  B7 3C A4             368  	STA	ASSFLG		SAVE
22B6  4F                   369  	CLRA
22B7  5F                   370  	CLRB			GET A ZERO
22B8  FD 3C 8C             371  	STD	TEMP3		SET LINE NUMBER
22BB  BE 3C 8A             372  	LDX	TEMP2		POINT TO START
22BE  1F 12                373  	TFR	X,Y		COPY IT
22C0  17 01 F2             374  	LBSR	SFSYM		SKIP TO END
22C3  10 27 FF 15          375  	LBEQ	ERRDEF		INVALID DEFN
22C7  F7 3C 8E             376  	STB	TEMP4		SAVE LENGTH
22CA  10 BF 3C 8C          377  	STY	TEMP3		SAVE POINTER TO SYMBOL
22CE  31 3F                378  	LEAY	-1,Y		BACKUP
22D0  17 02 38             379  	LBSR	LOOKUP		LOOK FOR IT
22D3  26 03                380  	BNE	NOER1		DON'T ERASE
22D5  17 15 05             381  	LBSR	ERASYM		ERASE IT
22D8  BE 3C 8C             382  NOER1	LDX	TEMP3		POINT TO WORKSPACE
22DB  A6 80                383  RE2	LDA	,X+		GET SYMBOL CHAR
22DD  81 FF                384  	CMPA	#$FF		END OF PROGRAM?
22DF  26 FA                385  	BNE	RE2		NO
22E1  1F 10                386  	TFR	X,D		COPY
22E3  B3 3C 8C             387  	SUBD	TEMP3		CONVERT TO OFFSET VALUE
22E6  FD 3C 88             388  	STD	TEMP1		SAVE OFFSET VALUE
22E9                       389  * RIFLE THROUGH SYMBOL TABLE, LOOKING FOR END, AND ADDING OFFSET TO THE
22E9                       390  * EXISTING SYMBOLS
22E9  8E 40 08             391  	LDX	#SYMTAB-2	POINT TO SYMBOL TABLE
22EC  30 02                392  RIF0	LEAX	2,X		ADVANCE
22EE  E6 81                393  RIF1	LDB	,X++		GET OFFSET
22F0  1F 98                394  	TFR	B,A		COPY TO A
22F2  84 E0                395  	ANDA	#$E0		MASK LENGTH
22F4  C4 1F                396  	ANDB	#$1F		MASK TYPE
22F6  27 0F                397  	BEQ	RIF2		HIT THE END
22F8  30 85                398  	LEAX	B,X		OFFSET TO DATA AREA
22FA  81 60                399  	CMPA	#$60		IS IT LABEL TYPE
22FC  27 EE                400  	BEQ	RIF0		IF SO, DON'T ADJUST
22FE  EC 84                401  	LDD	,X		GET ADDRESS
2300  F3 3C 88             402  	ADDD	TEMP1		ADD OFFSET
2303  ED 81                403  	STD	,X++		RESAVE
2305  20 E7                404  	BRA	RIF1		AND CONTINUE
2307                       405  * ADVANCE SYMBOL TABLE ENOUGH FOR ENTRY
2307  F6 3C 8E             406  RIF2	LDB	TEMP4		GET LENGTH
230A  CB 04                407  	ADDB	#4		ADD TYPE/ADDRESS BYTES
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 8

230C  31 85                408  	LEAY	B,X		POINT TO ABOVE ADDRESS
230E  A6 82                409  RIF3	LDA	,-X		GET BYTE FROM TABLE
2310  A7 A2                410  	STA	,-Y		SAVE IN NEW LOCATION
2312  8C 40 0A             411  	CMPX	#SYMTAB		ARE WE PAST BEGINNING?
2315  22 F7                412  	BHI	RIF3		NO, KEEP GOING
2317                       413  * CREATE SYMBOL TABLE ENTRY
2317  F6 3C 8E             414  	LDB	TEMP4		GET LENGTH
231A  B6 3C A4             415  	LDA	ASSFLG		RESTORE TYPE
231D  81 24                416  	CMPA	#'$'		IS IT LOCK?
231F  26 02                417  	BNE	NOLOKI		DON'T LOCK
2321  CA 20                418  	ORB	#$20		SET TYPE TO ONE
2323  E7 80                419  NOLOKI	STB	,X+		SAVE LENGTH IN TABLE
2325  6F 80                420  	CLR	,X+		AND SET NEST BYTE
2327  10 BE 3C 8C          421  	LDY	TEMP3		POINT TO ENTRY
232B  C4 1F                422  	ANDB	#$1F		REMOVE TYPE INFO
232D  A6 A2                423  RIF4	LDA	,-Y		GET CHARACTER
232F  A7 80                424  	STA	,X+		SAVE IN TABLE
2331  5A                   425  	DECB			REDUCE COUNT
2332  26 F9                426  	BNE	RIF4		CONTINUE
2334  FC 40 08             427  	LDD	FREMEM		POINT TO FREE MEMORY
2337  ED 84                428  	STD	,X		SET ADDRESS
2339                       429  * MOVE MEMORY AHEAD, TO MAKE ROOM
2339  BE 3C 8C             430  	LDX	TEMP3		GET PROGRAM ADDRESS
233C  FC 3C 88             431  	LDD	TEMP1		GET SIZE
233F  31 8B                432  	LEAY	D,X		ADVANCE TO END OF PROGRAM
2341  34 20                433  	PSHS	Y		SAVE POINTER
2343  30 AB                434  	LEAX	D,Y		ADVANCE TO EXTRA SPACE FOR COPY
2345  A6 A2                435  RIF5	LDA	,-Y		GET BYTE
2347  A7 82                436  	STA	,-X		SAVE IN NEW LOCATION
2349  10 BC 40 08          437  	CMPY	FREMEM		HIT THE BEGINNING?
234D  22 F6                438  	BHI	RIF5		NO, KEEP GOING
234F  35 10                439  	PULS	X		RESTORE POINTER TO TEXT
2351  A6 80                440  RIF6	LDA	,X+		GET FROM PROGRAM
2353  A7 A0                441  	STA	,Y+		SAVE
2355  81 FF                442  	CMPA	#$FF		AT THE END?
2357  26 F8                443  	BNE	RIF6		NO, SKIP IT
2359  FC 40 00             444  	LDD	FREE		GET FREE MEMORY
235C  F3 3C 88             445  	ADDD	TEMP1		ADD IN PROGRAM SIZE
235F  FD 40 00             446  	STD	FREE		RESAVE
2362  16 FD 1B             447  	LBRA	CMD		GET NEXT COMMAND
2365                       448  *
2365                       449  * EDITOR SUBROUTINES
2365                       450  *
2365                       451  * DISPLAY LINE (X)
2365  86 5B                452  DSPLIN	LDA	#'['		GET OPANING BRACE
2367  17 01 0E             453  	LBSR	PUTCHR		OUTPUT
236A  FC 3C 8C             454  	LDD	TEMP3		GET LINE NUMBER
236D  17 0B 8E             455  	LBSR	DECOUT		DISPLAY
2370  86 5D                456  	LDA	#']'		CLOSING BRACE
2372  17 01 03             457  	LBSR	PUTCHR		DISPLAY
2375  17 01 07             458  	LBSR	SPACE		DISPLAY A SPACE
2378  34 30                459  	PSHS	X,Y		SAVE POINTER
237A  1F 12                460  	TFR	X,Y		COPY IT OVER
237C  17 01 36             461  	LBSR	SFSYM		LOOK FOR SYMBOL
237F  27 04                462  	BEQ	EXTSPC		IF NONE, EXTRA SPACE
2381  81 3A                463  	CMPA	#':'		WAS IT A LABEL?
2383  27 03                464  	BEQ	NOESPC		YES, OUTDENT IT ONE COLUMN
2385  17 00 F7             465  EXTSPC	LBSR	SPACE		DISPLAY
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 9

2388  35 30                466  NOESPC	PULS	X,Y		RESTORE REGS
238A                       467  * DISPLAY MESSAGE (X)
238A  A6 80                468  OULI	LDA	,X+		GET CHARACTER FROM LINE
238C  27 07                469  	BEQ	OULX		IF ZERO, TERMINATE
238E  17 00 E7             470  	LBSR	PUTCHR		DISPLAY
2391  81 0A                471  	CMPA	#$0A		END OF LINE?
2393  26 F5                472  	BNE	OULI		NO, CONTINUE
2395  39                   473  OULX	RTS
2396                       474  * MOVE TO AND FIND LINE INDICATED BY D
2396  BE 3C 8A             475  FNDLIN	LDX	TEMP2		POINT TO TEXT
2399  34 26                476  FNDL1	PSHS	A,B,Y		SAVE INDICATORS
239B  4F                   477  	CLRA
239C  5F                   478  	CLRB			START WITH ZERO
239D  10 AE E4             479  FND1	LDY	,S		GET VALUE
23A0  27 1C                480  	BEQ	FND4		LINE IS FOUND
23A2  31 3F                481  	LEAY	-1,Y		DECREMENT
23A4  10 AF E4             482  	STY	,S		AND RESAVE
23A7  C3 00 01             483  	ADDD	#1		INCREMENT LINE NUMBER
23AA  34 02                484  	PSHS	A		SAVE CHARACTER
23AC  A6 80                485  FND2	LDA	,X+		ADVANCE
23AE  81 FF                486  	CMPA	#$FF		IS IT END OF FILE?
23B0  27 08                487  	BEQ	FND3		IF SO, QUIT
23B2  81 0D                488  	CMPA	#$0D		END OF LINE
23B4  26 F6                489  	BNE	FND2		GIVE UP
23B6  35 02                490  	PULS	A		RESTORE CHARACTER
23B8  20 E3                491  	BRA	FND1		AND KEEP LOOKING
23BA  35 02                492  FND3	PULS	A		RESTORE CHARACTER
23BC  30 1F                493  	LEAX	-1,X		BACKUP TO VALUE
23BE  FD 3C 8C             494  FND4	STD	TEMP3		SAVE NUMBER
23C1  35 A6                495  	PULS	A,B,Y,PC	GO HOME
23C3                       496  * DELETE LINE POINTED TO BY X
23C3  34 30                497  DELETE	PSHS	X,Y		SAVE POINTERS
23C5  1F 12                498  	TFR	X,Y		COPY TO Y REGISTER
23C7  A6 80                499  DEL1	LDA	,X+		GET CHARACTER FROM LINE
23C9  81 FF                500  	CMPA	#$FF		END OF LINE
23CB  27 0C                501  	BEQ	DEL3		IF SO, QUIT
23CD  81 0D                502  	CMPA	#$0D		END OF LINE?
23CF  26 F6                503  	BNE	DEL1		NO, KEEP LOOKING
23D1  A6 80                504  DEL2	LDA	,X+		GET CHARACTER FROM TEXT
23D3  A7 A0                505  	STA	,Y+		SAVE IN OLD POSITION
23D5  81 FF                506  	CMPA	#$FF		END OF TEXT?
23D7  26 F8                507  	BNE	DEL2		NO, KEEP GOING
23D9  35 B0                508  DEL3	PULS	X,Y,PC		GO HOME
23DB                       509  *
23DB                       510  * FIND END OF FILE
23DB                       511  *
23DB  A6 80                512  FNDEOF	LDA	,X+		GET CHARACTER FROM FILE
23DD  81 FF                513  	CMPA	#$FF		ARE WE AT END?
23DF  26 FA                514  	BNE	FNDEOF		NO, KEEP LOOKING\
23E1  39                   515  	RTS
23E2                       516  *
23E2                       517  * INSERT LINE INTO TEXT
23E2                       518  *
23E2  34 30                519  INSERT	PSHS	X,Y		SAVE POINTERS
23E4  5F                   520  	CLRB			CLEAR LENGTH
23E5  5C                   521  INS1	INCB			ADVANCE COUNT
23E6  A6 A0                522  	LDA	,Y+		LOOK FOR END OF LINE
23E8  81 0D                523  	CMPA	#$0D		END OF LINE?
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 10

23EA  26 F9                524  	BNE	INS1		NO, SKIP IT
23EC  8D ED                525  	BSR	FNDEOF		FIND END OF FILE
23EE  31 85                526  	LEAY	B,X		ADVANCE TO NEXT
23F0  A6 82                527  INS2	LDA	,-X		GET CHARACTER FROM TEXT
23F2  A7 A2                528  	STA	,-Y		AND SAVE AT NEW POSITION
23F4  AC E4                529  	CMPX	,S		ARE WE BACK TO NEW POSITION
23F6  22 F8                530  	BHI	INS2		KEEP GOING TILL WE GET TO END
23F8  35 30                531  	PULS	X,Y		GET POINTERS BACK
23FA  A6 A0                532  INS3	LDA	,Y+		GET CHARACTER FROM BUFFER
23FC  A7 80                533  	STA	,X+		SAVE IN TEXT
23FE  5A                   534  	DECB			REDUCE COUNT
23FF  26 F9                535  	BNE	INS3		AND KEEP COPYING
2401  39                   536  	RTS
2402                       537  *
2402                       538  * SYSTEM SUBROUTINES
2402                       539  *
2402                       540  * GET A LINE OF INPUT
2402                       541  *
2402  10 8E 3C 00          542  GETRAM	LDY	#RAM		POINT TO RAM
2406  20 03                543  	BRA	GETLIN		GET INPUT LINE
2408  17 00 67             544  GETLF	LBSR	LFCR		NEW LINE
240B  86 0D                545  GETLIN	LDA	#$0D		GET CR
240D  A7 A0                546  	STA	,Y+		SABE IN RAM LOCATION
240F  5F                   547  	CLRB			INDICATE AT POSITION ZERO
2410  5D                   548  GET1	TSTB			TEST FOR OVER LIMIT
2411  2B F5                549  	BMI	GETLF		IF SO, TRY AGAIN
2413  8D 2D                550  	BSR	GETCHR		GET INPUT CHARACTER
2415  81 03                551  	CMPA	#$03		CONTROL-C
2417  27 1D                552  	BEQ	INPBRK		IF SO, INTERRUPT
2419  81 7F                553  	CMPA	#$7F		DELETE?
241B  27 0B                554  	BEQ	DELCHR		IF SO, DELETE IT
241D  A7 A5                555  	STA	B,Y		SAVE IN BUFFER
241F  5C                   556  	INCB			ADVANCE TO NEXT
2420  17 00 55             557  	LBSR	PUTCHR		DISPLAY
2423  81 0A                558  	CMPA	#$0A		CARRIAGE RETURN?
2425  26 E9                559  	BNE	GET1		NO, SKIP IT
2427  39                   560  	RTS
2428  5A                   561  DELCHR	DECB			BACKUP OVER CHARACTER
2429  34 10                562  	PSHS	X		SAVE POINTER
242B  17 00 2C             563  	LBSR	DSPSTR		DISPLAY
242E  08 20 08 00          564  	FCB	$08,$20,$08,0	MESSAGE TO DELETE
2432  35 10                565  	PULS	X		RESTORE
2434  20 DA                566  	BRA	GET1		AND GO AGAIN
2436  86 0D                567  INPBRK	LDA	#$0D		GET CR
2438  A7 A5                568  	STA	B,Y		SAVE IT
243A  31 3F                569  	LEAY	-1,Y		BACKUP TO BEFORE CR
243C  17 00 39             570  	LBSR	PUTCHR		DISPLAY NEW LINE
243F  16 0F 8D             571  	LBRA	BREAK		PERFORM BREAK
2442                       572  * READ A CHARACTER
2442  3F                   573  GETCHR	SWI			SOFTWARE INTERRUPT TO DOS
2443  22                   574  	FCB	34		SYSTEM REQUEST NUMBER
2444  81 41                575  	CMPA	#$41		<'A'?
2446  25 06                576  	BLO	CHROK		IF SO, IT'S OK
2448  81 5A                577  	CMPA	#$5A		>'Z'?
244A  22 03                578  	BHI	NOC1		NO CONVERSION
244C  8A 20                579  	ORA	#$20		CONVERT TO LOWER CASE
244E  39                   580  CHROK	RTS
244F  81 61                581  NOC1	CMPA	#$61		<'A' (LOWER)?
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 11

2451  25 FB                582  	BLO	CHROK		IT'S OK
2453  81 7A                583  	CMPA	#$7A		>'Z' (LOWER)?
2455  22 F7                584  	BHI	CHROK		IF SO, IT'S OK
2457  84 5F                585  	ANDA	#$5F		CONVERT TO UPPER CASE
2459  39                   586  	RTS
245A                       587  *
245A                       588  * DISPLAY STRING
245A                       589  *
245A  35 10                590  DSPSTR	PULS	X		GET POINTER TO MESSAGE
245C  A6 80                591  DSP1	LDA	,X+		GET FROM TEXT
245E  27 04                592  	BEQ	DSP2		QUIT
2460  8D 16                593  	BSR	PUTCHR		DISPLAY
2462  20 F8                594  	BRA	DSP1		AGAIN
2464  1F 15                595  DSP2	TFR	X,PC		RETURN
2466                       596  *
2466                       597  * DISPLAY SYSTEM MESSAGE
2466                       598  *
2466  35 10                599  SYSMSG	PULS	X		GET X FROM PC
2468  A6 80                600  SY1	LDA	,X+		GET CHAR
246A  27 04                601  	BEQ	ENM1		END OF MESSAGE
246C  8D 0A                602  	BSR	PUTCHR		OUTPUT
246E  20 F8                603  	BRA	SY1		AND DISPLAY
2470  34 10                604  ENM1	PSHS	X		SAVE PC AGAIN
2472                       605  * DISPLAY LFCR ON TERMINAL
2472  86 0D                606  LFCR	LDA	#$0D		NEW LINE
2474  8D 06                607  	BSR	PUTOUT		DISPLAY
2476  86 0A                608  	LDA	#$0A		LF
2478                       609  * DISPLAY A CHARACTER
2478  81 0D                610  PUTCHR	CMPA	#$0D		END OF LINE?
247A  27 F6                611  	BEQ	LFCR		IF SO, DISPLAY LFCR
247C  3F                   612  PUTOUT	SWI			SOFTWARE INTERRUPT TO DOS
247D  21                   613  	FCB	33		SYSTEM REQUEST NUMBER
247E  39                   614  	RTS
247F                       615  * DISPLAY A SPACE
247F  86 20                616  SPACE	LDA	#' '		GET A SPACE
2481  20 F5                617  	BRA	PUTCHR		AND DISPLAY
2483                       618  * SKIP WITHOUT ADVANCING
2483  A6 A0                619  SKP	LDA	,Y+		GET CHR
2485  81 20                620  	CMPA	#' '		TEST FOR BLANK
2487  27 FA                621  	BEQ	SKP		AND FIND A NON-BLANK
2489  31 3F                622  	LEAY	-1,Y		BACKUP TO IT
248B  81 0D                623  	CMPA	#$0D		TEST FOR END OF LINE
248D  39                   624  	RTS
248E                       625  * SKIP TO NEXT NON-BLANK
248E  A6 A0                626  SKIP	LDA	,Y+		GET CHARACTER
2490  81 20                627  	CMPA	#' '		BLANK?
2492  27 FA                628  	BEQ	SKIP		TRY AGAIN
2494  81 0D                629  	CMPA	#$0D		CR?
2496  26 04                630  	BNE	OKRTS		SKIP IT
2498  31 3F                631  	LEAY	-1,Y		BACKUP
249A  1A 04                632  	ORCC	#4		SET Z FLAG
249C  39                   633  OKRTS	RTS
249D                       634  * SKIP BACK BUT CHECK HERE FIRST
249D  31 21                635  SKBKP	LEAY	1,Y		ADVANCE FIRST
249F                       636  * SKIP BACKWARD TO NEXT NON-BLANK
249F  A6 A2                637  SKBK	LDA	,-Y		BACKUP
24A1  81 20                638  	CMPA	#' '		SPACE?
24A3  27 FA                639  	BEQ	SKBK		CONTINUE
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 12

24A5  81 0D                640  	CMPA	#$0D		START OF LINE?
24A7  39                   641  	RTS
24A8                       642  * SKIP FORWARD THROUGH A NUMBER
24A8  C6 FF                643  SFNUM	LDB	#-1		START WITH MINUS ONE
24AA  5C                   644  SFN1	INCB			ADVANCE FOR LENGTH
24AB  A6 A0                645  	LDA	,Y+		ADVANCE
24AD  8D 13                646  	BSR	VALNUM		IS IT A VALID DIGIT?
24AF  27 F9                647  	BEQ	SFN1		IF SO, CONTINUE
24B1  31 3F                648  	LEAY	-1,Y		BACKUP TO START OF NUMBER
24B3  5D                   649  	TSTB			CHECK FOR ZERO LENGTH
24B4  39                   650  	RTS
24B5                       651  * SKIP FORWARD THROUGH A VARIABLE
24B5  C6 FF                652  SFSYM	LDB	#-1		START WITH MINUS ONE
24B7  5C                   653  SFS1	INCB			ADVANCE FOR LENGTH
24B8  A6 A0                654  	LDA	,Y+		ADVANCE
24BA  8D 10                655  	BSR	VALSYM		IS IT VALID?
24BC  27 F9                656  	BEQ	SFS1		AND CONTINUE
24BE  31 3F                657  	LEAY	-1,Y		BACKUP
24C0  5D                   658  	TSTB			TEST FOR ZERO LENGTH
24C1  39                   659  	RTS
24C2                       660  * SET Z FLAG IF PASSED CHARACTER IS A VALID NUMBER
24C2  81 30                661  VALNUM	CMPA	#'0'		IN RANGE?
24C4  25 10                662  	BLO	BADSYM		NO, IT'S BAD
24C6  81 39                663  	CMPA	#'9'		IN RANGE?
24C8  22 0C                664  	BHI	BADSYM		NO, IT'S BAD
24CA  20 08                665  	BRA	VALOK		VALUE IS OK
24CC                       666  * SET Z FLAG IS PASSED CHARACTER IS A VALID SYMBOL
24CC  81 40                667  VALSYM	CMPA	#'@'		IN RANGE?
24CE  25 06                668  	BLO	BADSYM		NO, IT'S BAD
24D0  81 5A                669  	CMPA	#'Z'		IN RANGE?
24D2  22 02                670  	BHI	BADSYM		NO, IT'S BAD
24D4  1A 04                671  VALOK	ORCC	#4		INDICATE OK
24D6  39                   672  BADSYM	RTS
24D7                       673  *
24D7                       674  * GETS NUMERIC VALUE FROM LINE(Y)., RETURNS IN D
24D7                       675  *
24D7  31 21                676  GETDEC	LEAY	1,Y		ADVANCE
24D9  CC 00 00             677  GETDIG	LDD	#0		START OF RESULT
24DC  34 16                678  	PSHS	A,B,X		SAVE VALUE AND MULTIPLIER
24DE  8E 00 01             679  	LDX	#1		FIRST MULTIPLIER
24E1  A6 A2                680  GETD1	LDA	,-Y		GET DIGIT
24E3  8D DD                681  	BSR	VALNUM		IS IT A VALID NUMBER
24E5  26 16                682  	BNE	GETD2		END OF NUMBER
24E7  80 30                683  	SUBA	#$30		CONVERT TO BINARY
24E9  1F 89                684  	TFR	A,B		COPY TO B
24EB  4F                   685  	CLRA			CLEAR IT
24EC  17 00 9D             686  	LBSR	MULT		TIMES MULTIPLIER
24EF  E3 E4                687  	ADDD	,S		ADD TO OLD VALUE
24F1  ED E4                688  	STD	,S		RESAVE
24F3  CC 00 0A             689  	LDD	#10		TIMES 10
24F6  17 00 93             690  	LBSR	MULT		PERFORM
24F9  1F 01                691  	TFR	D,X		COPY TO X
24FB  20 E4                692  	BRA	GETD1		GET NEXT DIGIT
24FD  81 5F                693  GETD2	CMPA	#'_'		NEGATIVE PREFIX?
24FF  26 08                694  	BNE	DETD3		NO, IT'S OK
2501  4F                   695  	CLRA			GET A ZERO
2502  5F                   696  	CLRB			FOR D ACCUMULATOR
2503  A3 E4                697  	SUBD	,S		CONVERT NUMBER
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 13

2505  ED E4                698  	STD	,S		RESAVE
2507  31 3F                699  	LEAY	-1,Y		BACKUP
2509  35 96                700  DETD3	PULS	A,B,X,PC	RESTORE VALUES
250B                       701  *
250B                       702  * LOOK UP ENTRY IN SYMBOL TABLE, ON EXIT, IF ENTRY IS FOUND, Z FLAG IS
250B                       703  * SET AND X POINTS TO A COPY OF THE SYMBOL TABLE ENTRY IN RAM. B HAS OFFSET
250B                       704  * FOR ADDRESS, AND A CONTAINS TYPE
250B                       705  * IF ENTRY IS NOT FOUND, Z FLAG IS CLEAR, AND X POINTS TO FIRST FREE SYMBOL
250B                       706  * TABLE SPACE
250B                       707  *
250B  8E 40 0A             708  LOOKUP	LDX	#SYMTAB		POINT TO SYMBOL TABLE
250E  34 30                709  CHKENT	PSHS	X,Y		SAVE REGSITERS
2510  E6 80                710  	LDB	,X+		GET LENGTH OF NAME
2512  C4 1F                711  	ANDB	#$1F		REMOVE TYPE BITS
2514  27 39                712  	BEQ	ENDST		DIDN'T FIND IT
2516  A6 80                713  	LDA	,X+		GET NEST INFO
2518  26 29                714  	BNE	NOSYM		DON'T RECOGNISE IT
251A  A6 A4                715  CHKV	LDA	,Y		GET CHARACTER FROM SOURCE
251C  A1 80                716  	CMPA	,X+		IS IT OK
251E  26 23                717  	BNE	NOSYM		NOT A VARIABLE
2520  31 3F                718  	LEAY	-1,Y		BACKUP
2522  5A                   719  	DECB			REDUCE COUNT
2523  26 F5                720  	BNE	CHKV		AND KEEP CHECKING
2525  A6 A4                721  	LDA	,Y		GET CHARACTER FROM VARIABLE
2527  17 FF A2             722  	LBSR	VALSYM		VALID SYMBOL?
252A  27 17                723  	BEQ	NOSYM		HAVN'T FOUND IT YET
252C  35 10                724  	PULS	X		RESTORE TABLE POSITION
252E  32 62                725  	LEAS	2,S		SKIP Y VALUE
2530  17 FF 6A             726  	LBSR	SKBKP		SKIP BACK TO NEXT
2533  A6 84                727  	LDA	,X		GET LENGTH
2535  1F 89                728  	TFR	A,B		SAVE TYPE INFO IN B
2537  C4 1F                729  	ANDB	#$1F		MASK OFF LENGTH
2539  CB 02                730  	ADDB	#2		SKIP TO TYPE BYTE
253B  44                   731  	LSRA			SHIFT
253C  44                   732  	LSRA			TYPE
253D  44                   733  	LSRA			BACK
253E  44                   734  	LSRA			TO
253F  44                   735  	LSRA			POSITION
2540  1A 04                736  	ORCC	#4		SET Z FLAG
2542  39                   737  	RTS
2543  35 30                738  NOSYM	PULS	X,Y		RESTORE REGSTERS
2545  A6 84                739  	LDA	,X		ADVANCE TO NEXT
2547  84 1F                740  	ANDA	#$1F		MASK OFF TYPE
2549  8B 04                741  	ADDA	#4		ADD THREE BYTES FOR ADDRESS
254B  30 86                742  	LEAX	A,X		SKIP TO NEXT ENTRY
254D  20 BF                743  	BRA	CHKENT		AND CHECK THIS ENTRY
254F  35 30                744  ENDST	PULS	X,Y		RESTORE POINTER
2551  1C FB                745  	ANDCC	#$FB		CLEAR Z FLAG
2553  39                   746  	RTS
2554                       747  *
2554                       748  * CREATE A SYMBOL TABLE ENTRY, TYPE PASSED IN A
2554                       749  *
2554  48                   750  CRESYM	LSLA			SHIFT
2555  48                   751  	LSLA			TYPE INTO HIGH BITS
2556  48                   752  	LSLA			FOR ENTRY IN
2557  48                   753  	LSLA			SYMBOL
2558  48                   754  	LSLA			TABLE
2559  34 02                755  	PSHS	A		SAVE TYPE
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 14

255B  8E 40 0A             756  	LDX	#SYMTAB		POINT TO TABLE
255E  A6 80                757  CRE1	LDA	,X+		GET LINK
2560  84 1F                758  	ANDA	#$1F		MASK OFF LENGTH INFO
2562  27 06                759  	BEQ	CRE2		END OF TABLE
2564  8B 03                760  	ADDA	#3		CONVERT TO COMPLETE OFFSET
2566  30 86                761  	LEAX	A,X		SKIP THIS ENTRY
2568  20 F4                762  	BRA	CRE1		LOOK AGAIN
256A  5F                   763  CRE2	CLRB			SET OFFSET
256B  A6 A4                764  CRE3	LDA	,Y		GET CHARACTER FROM TEXT
256D  17 FF 5C             765  	LBSR	VALSYM		IS IT VALID
2570  26 07                766  	BNE	CRE4		NO MORE
2572  5C                   767  	INCB			ADVANCE
2573  A7 85                768  	STA	B,X		SAVE SYMBOL IN TABLE
2575  31 3F                769  	LEAY	-1,Y		BACKUP TO NEXT
2577  20 F2                770  	BRA	CRE3		AND KEEP CREATING
2579  1F 98                771  CRE4	TFR	B,A		COPY TO A
257B  AA E0                772  	ORA	,S+		ADD IN TYPE BITS
257D  A7 1F                773  	STA	-1,X		SAVE LENGTH IN TABLE
257F  6F 84                774  	CLR	,X		INDICATE LEVEL ZERO NEST
2581  5C                   775  	INCB			SKIP TO TYPE FIELD IN ENTRY
2582  30 85                776  	LEAX	B,X		ADVANCE POINTER
2584  FC 40 00             777  	LDD	FREE		POINT TO FREE MEMORY
2587  ED 84                778  	STD	,X		INDICATE WHERE SYMBOL WILL BE
2589  6F 02                779  	CLR	2,X		INDICATE LAST ENTRY
258B  39                   780  	RTS
258C                       781  *
258C                       782  * PERFORMS 16 BIT MULTIPLICATION (D=X*D)
258C                       783  *
258C  34 16                784  MULT	PSHS	D,X		SAVE PARAMETERS
258E  A6 61                785  	LDA	1,S
2590  E6 63                786  	LDB	3,S
2592  3D                   787  	MUL
2593  34 06                788  	PSHS	A,B		RESAVE
2595  A6 62                789  	LDA	2,S
2597  E6 65                790  	LDB	5,S
2599  3D                   791  	MUL
259A  EB E4                792  	ADDB	,S
259C  E7 E4                793  	STB	,S
259E  A6 63                794  	LDA	3,S
25A0  E6 64                795  	LDB	4,S
25A2  3D                   796  	MUL
25A3  EB E4                797  	ADDB	,S
25A5  E7 E4                798  	STB	,S
25A7  35 06                799  	PULS	A,B		GET RESULT
25A9  32 64                800  	LEAS	4,S		SKIP CRAP
25AB  39                   801  	RTS
25AC                       802  *
25AC                       803  * PERFORMS 16 BIT DIVISION. (X=X/D, D=REMAINDER.)
25AC                       804  *
25AC  34 16                805  DIV	PSHS	D,X
25AE  CC 00 00             806  	LDD			#0
25B1  8E 00 11             807  	LDX			#17
25B4  1C FE                808  DIV1	ANDCC			#$FE
25B6  69 63                809  DIV2	ROL			3,S
25B8  69 62                810  	ROL			2,S
25BA  30 1F                811  	LEAX			-1,X
25BC  27 0D                812  	BEQ			DIV3
25BE  59                   813  	ROLB
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 15

25BF  49                   814  	ROLA
25C0  10 A3 E4             815  	CMPD			,S
25C3  25 EF                816  	BLO			DIV1
25C5  A3 E4                817  	SUBD			,S
25C7  1A 01                818  	ORCC			#1
25C9  20 EB                819  	BRA			DIV2
25CB  32 62                820  DIV3	LEAS	2,S
25CD  35 10                821  	PULS	X
25CF  39                   822  	RTS
25D0                       823  *
25D0                       824  * GET FILENAME FROM INPUT LINE
25D0                       825  *
25D0  34 20                826  FILNAM	PSHS	Y		SAVE Y
25D2  A6 A0                827  FIL1	LDA	,Y+		GET CHAR
25D4  81 20                828  	CMPA	#' '		SPACE?
25D6  27 04                829  	BEQ	FIL2		MARKS END
25D8  81 0D                830  	CMPA	#$0D		CR?
25DA  26 F6                831  	BNE	FIL1		NO, MORE FILENAME
25DC  86 2E                832  FIL2	LDA	#'.'		GET DOT
25DE  A7 3F                833  	STA	-1,Y		SAVE
25E0  CC 41 50             834  	LDD	#$4150		GET 'AP'
25E3  ED A1                835  	STD	,Y++		SET UP IN NAME
25E5  CC 4C 0D             836  	LDD	#$4C0D		GET 'L' AND CR
25E8  ED A4                837  	STD	,Y		SET UP IN NAME
25EA  35 20                838  	PULS	Y		RESTORE FILENAME POINTER
25EC  39                   839  	RTS
25ED                       840  *
25ED                       841  * EVALUATES AN EXPRESSION
25ED                       842  *
25ED  A6 A0                843  EXPR	LDA	,Y+		GET CHARACTER
25EF  81 0D                844  	CMPA	#$0D		END OF LINE?
25F1  26 FA                845  	BNE	EXPR		KEEP LOOKING
25F3  7F 3C A5             846  EXEX	CLR	ERRFLG		INSURE NO ERROR SET
25F6  31 3F                847  	LEAY	-1,Y		BACKUP
25F8  34 20                848  	PSHS	Y		SAVE IT
25FA  8D 1A                849  	BSR	DOEXPR		EXECUTE ROUTINE
25FC  81 3A                850  	CMPA	#':'		LABEL DEFINITION?
25FE  27 04                851  	BEQ	EXEXE		IF SO, OK
2600  81 0D                852  	CMPA	#$0D		END OF LINE?
2602  26 10                853  	BNE	EX1		NO, DON'T DISPLAY
2604  7D 3C A4             854  EXEXE	TST	ASSFLG		WAS IT ASSIGNMENT
2607  26 0B                855  	BNE	EX1		NO, DON'T DISPLAY
2609  FC 3C A6             856  	LDD	INPSTK		ARE WE INPUTTING?
260C  26 06                857  	BNE	EX1		YES, DON'T OUTPUT
260E  17 08 BB             858  	LBSR	DISPLY		DISPLAY
2611  17 FE 5E             859  	LBSR	LFCR		NEW LINE
2614  35 A0                860  EX1	PULS	Y,PC		GO HOME
2616                       861  * CALCULATE AN EXPRESSION
2616  7F 3C A4             862  DOEXPR	CLR	ASSFLG		INSURE WE KNOW IF ASSIGNMENT
2619  FC 3C 90             863  	LDD	TEMP5		GET FREE RAM ADDRESS
261C  B3 40 06             864  	SUBD	BUFSIZ		SUBTRACT WORK BUFFER
261F  10 B3 40 00          865  	CMPD	FREE		ARE WE OVER MEMORY LIMIT
2623  10 23 0D C7          866  	LBLS	WSFUL		INDICATE FULL
2627  FD 3C 90             867  	STD	TEMP5		RESAVE
262A  BE 3C 90             868  EXP1	LDX	TEMP5		POINT TO WORKSPACE
262D  31 3F                869  	LEAY	-1,Y		BACKUP
262F  17 08 FE             870  	LBSR	GETVAL		GET FIRST VALUE
2632  10 26 0D C5          871  	LBNE	SYNTAX		FIRST VALUE MUST EXIST
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 16

2636  17 0C E6             872  NXTOPR	LBSR	MVWRK		INSURE LAST RESULT IS IN WORKSPACE
2639  17 FE 61             873  	LBSR	SKBKP		GET NEXT OPERATOR
263C  10 BF 3C 9E          874  	STY	TXTPTR		SAVE OPERATOR LOCATION
2640  81 0D                875  	CMPA	#$0D		START OF LINE?
2642  27 0F                876  	BEQ	ENDEXP		IF SO, QUIT
2644  81 3A                877  	CMPA	#':'		LABEL?
2646  27 0B                878  	BEQ	ENDEXP		IF SO, EXIT
2648  81 5B                879  	CMPA	#'['		START OF INDEX EXPRESSON
264A  27 07                880  	BEQ	ENDEXP		IF SO, QUIT
264C  7F 3C A4             881  	CLR	ASSFLG		INSURE '(' DISPLAYS
264F  81 28                882  	CMPA	#'('		START OF NESTED EXPRESSION
2651  26 0D                883  	BNE	DOEX1		NO, CALCULATE IT
2653  34 02                884  ENDEXP	PSHS	A		SAVE ENDING CHARACTER
2655  FC 3C 90             885  	LDD	TEMP5		POINT TO WORK BUFFER
2658  F3 40 06             886  	ADDD	BUFSIZ		RELEASE OUR LEVEL
265B  FD 3C 90             887  	STD	TEMP5		AND RESAVE
265E  35 82                888  	PULS	A,PC		GO HOME
2660                       889  * PERFORM OPERATION
2660  31 3F                890  DOEX1	LEAY	-1,Y		BACKUP TO LAST
2662                       891  * DETERMINE LENGTH OF PASSED STRUCTURE
2662  81 70                892  DSIP1	CMPA	#'p'		CHECK FOR LENGTH
2664  26 0D                893  	BNE	DSIP2		NOT SHAPE
2666  EC 01                894  	LDD	1,X		GET LENGTH
2668  ED 03                895  	STD	3,X		AND SAVE IT
266A  CC 00 01             896  	LDD	#1		SET LENGTH TO 1
266D  ED 01                897  	STD	1,X		SET LENGTH
266F  E7 84                898  	STB	,X		SET TYPE TO INTEGER
2671  20 C3                899  	BRA	NXTOPR		AND GT NEXT OPERAND
2673                       900  * CREATE AN ASCENTING VECTOR
2673  81 69                901  DSIP2	CMPA	#'i'		IS IT VECTOR?
2675  26 2D                902  	BNE	DSIP3		NO, TRY NEXT
2677  34 10                903  	PSHS	X		SAVE POSITION
2679  A6 80                904  	LDA	,X+		GET TYPE
267B  81 01                905  	CMPA	#1		INTEGER?
267D  10 26 0C 8B          906  	LBNE	CDOM		NO, ERROR
2681  EC 81                907  	LDD	,X++		GET LENGTH
2683  10 83 00 01          908  	CMPD	#1		SINGLE ELEMENT?
2687  10 26 0C 7A          909  	LBNE	CLEN		NO, ERROR
268B  EC 84                910  	LDD	,X		GET DATA
268D  ED 1E                911  	STD	-2,X		SET LENGTH
268F  27 0E                912  	BEQ	IOTZ		SPECIAL CASE
2691  F3 40 02             913  	ADDD	ORIGIN		ADVANCE
2694  83 00 01             914  IOT1	SUBD	#1		REDUCE COUNT
2697  ED 81                915  	STD	,X++		SAVE
2699  10 B3 40 02          916  	CMPD	ORIGIN		ARE WE AT START YET?
269D  26 F5                917  	BNE	IOT1		AND GO BACK
269F  35 10                918  IOTZ	PULS	X		RESTORE REGISTERS
26A1  16 FF 92             919  	LBRA	NXTOPR
26A4                       920  * REVERSE OPERAND VECTOR
26A4  81 72                921  DSIP3	CMPA	#'r'		REVERSE?
26A6  26 37                922  	BNE	DSIP4		NO, TRY NEXT
26A8  34 70                923  	PSHS	X,Y,U		SAVE REGISTERS
26AA  EC 01                924  	LDD	1,X		GET LENGTH
26AC  27 2C                925  	BEQ	REV2		NOTHING TO DO
26AE  31 03                926  	LEAY	3,X		GET START OF VECTOR
26B0  6D 84                927  	TST	,X		WHAT FORM ARE WE
26B2  27 14                928  	BEQ	CREV		REVERSING CHARACTER ARRAY
26B4  58                   929  	LSLB
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 17

26B5  49                   930  	ROLA			DOUBLE FOR TWO BYTE ENTRIES
26B6  30 AB                931  	LEAX	D,Y		POINT TO END OF STRING
26B8  EC A1                932  REV1	LDD	,Y++		GET CHARACTER FROM START
26BA  EE 83                933  	LDU	,--X		AND GET OTHER ONE
26BC  34 20                934  	PSHS	Y		SAVE
26BE  AC E1                935  	CMPX	,S++		TEST FOR WRAPPED
26C0  25 18                936  	BLO	REV2		IF SO, WE ARE DONE
26C2  ED 84                937  	STD	,X		SAVE NEW RESULT
26C4  EF 3E                938  	STU	-2,Y		AND OTHER ONE
26C6  20 F0                939  	BRA	REV1		KEEP GOING
26C8  30 AB                940  CREV	LEAX	D,Y		SKIP TO END
26CA  A6 82                941  REV3	LDA	,-X		GET CHARACTER
26CC  E6 A0                942  	LDB	,Y+		AND GET OTHER CHARACTER
26CE  34 20                943  	PSHS	Y		SAVE REG
26D0  AC E1                944  	CMPX	,S++		ARE WE THERE?
26D2  25 06                945  	BLO	REV2		IF SO, EXIT
26D4  E7 84                946  	STB	,X		SET NEW VALUE
26D6  A7 3F                947  	STA	-1,Y		AND NEW VALUE HERE
26D8  20 F0                948  	BRA	REV3		CONTINUE REVERSING
26DA  35 70                949  REV2	PULS	X,Y,U		RESTORE REGISTERS
26DC  16 FF 57             950  	LBRA	NXTOPR		NEXT OPERATOR
26DF                       951  * GENERATE RANDOM VECTORS
26DF  81 3F                952  DSIP4	CMPA	#'?'		RANDOM OPERATOR?
26E1  26 37                953  	BNE	DSIP5		NO, TRY NEXT
26E3  34 30                954  	PSHS	X,Y		SAVE REGISTERS
26E5  A6 80                955  	LDA	,X+		GET TYPE
26E7  10 27 0C 21          956  	LBEQ	CDOM		CAN'T USE CHARACTERS
26EB  10 AE 81             957  	LDY	,X++		GET LENGTH
26EE  27 25                958  	BEQ	RND2		ZERO LENGTH, SKIP IT
26F0  34 10                959  RND1	PSHS	X		SAVE POINTER
26F2  FC 40 04             960  	LDD	SEED		GET RANDOM SEED
26F5  8E 35 8D             961  	LDX	#13709		GET FIRST VALUE
26F8  17 FE 91             962  	LBSR	MULT		MULTIPLY IT
26FB  C3 36 19             963  	ADDD	#13849		AND DO THE ADDITION
26FE  FD 40 04             964  	STD	SEED		RESAVE SEED
2701  1F 01                965  	TFR	D,X		COPY FOR DIV
2703  EC F4                966  	LDD	[,S]		GET LIMIT VALUE
2705  27 06                967  	BEQ	RND3		ZERO, RESULT IS ZERO
2707  17 FE A2             968  	LBSR	DIV		PERFORM DIVISION
270A  F3 40 02             969  	ADDD	ORIGIN		CONVERT FOR ORIGIN VALUE
270D  35 10                970  RND3	PULS	X		RESTORE POINTER
270F  ED 81                971  	STD	,X++		SAVE BACK IN VECTOR
2711  31 3F                972  	LEAY	-1,Y		REDUCE LENGTH
2713  26 DB                973  	BNE	RND1		DO THEM ALL
2715  35 30                974  RND2	PULS	X,Y		RESTORE REGISTERS
2717  16 FF 1C             975  	LBRA	NXTOPR
271A                       976  * CLASSIFY DATA TYPE
271A  81 63                977  DSIP5	CMPA	#'c'		IS IT CLASSIFY?
271C  26 0E                978  	BNE	DSIP6		NO, TRY NEXT
271E  E6 84                979  	LDB	,X		GET TYPE
2720  4F                   980  	CLRA			ZERO HIGH BYTE
2721  ED 03                981  	STD	3,X		SAVE DATA
2723  C6 01                982  	LDB	#1		GET LENGTH + TYPE
2725  ED 01                983  	STD	1,X		SAVE LENGTH
2727  E7 84                984  	STB	,X		SAVE TYPE
2729  16 FF 0A             985  	LBRA	NXTOPR
272C                       986  * GENERATE ASSENDING VECTOR INDEX
272C  81 5E                987  DSIP6	CMPA	#'^'		ASSEND?
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 18

272E  10 26 00 A9          988  	LBNE	DSIP7		NO, TRY NEXT
2732  34 60                989  	PSHS	Y,U		SAVE REGISTERS
2734  30 01                990  	LEAX	1,X		SKIP TO DATA
2736  10 BE 40 00          991  	LDY	FREE		POINT TO FREE RAM
273A  EC 84                992  	LDD	,X		GET LENGTH
273C  33 AB                993  	LEAU	D,Y		ADVANCE FOR FLAG VECTOR SPACE
273E  34 40                994  	PSHS	U		SAVE FREE LOCATION
2740  27 07                995  	BEQ	ASC8		ZERO LENGTH, NOTHING TO DO
2742  6F A0                996  ASC0	CLR	,Y+		CLEAR ONE FLAG
2744  83 00 01             997  	SUBD	#1		REDUCE COUNT
2747  26 F9                998  	BNE	ASC0		CLEAR THEM ALL
2749  86 01                999  ASC8	LDA	#1		RESULT IS ALWAYS AN INTEGER
274B  A7 C0               1000  	STA	,U+		SET TYPE OF RESULT
274D  EC 81               1001  	LDD	,X++		GET LENGTH AGAIN
274F  ED C1               1002  	STD	,U++		SET LENGTH OF RESULT
2751  27 46               1003  	BEQ	ASC1		IF ZERO LENGTH, NOTHING TO DO
2753  1F 02               1004  	TFR	D,Y		SAVE LENGTH
2755  FD 3C 88            1005  	STD	TEMP1		AND KEEP IT
2758  A6 1D               1006  	LDA	-3,X		GET TYPE
275A  27 42               1007  	BEQ	ASC5		CHARACTER SORT
275C  34 30               1008  ASC2	PSHS	X,Y		SAVE REGISTERS
275E  34 40               1009  	PSHS	U		SAVE LOCATION
2760  4F                  1010  	CLRA			START
2761  5F                  1011  	CLRB			WITH ZERO
2762  10 BE 3C 88         1012  	LDY	TEMP1		GET LENGTH
2766  FE 40 00            1013  	LDU	FREE		POINT TO FLAG VECTOR
2769  6D C0               1014  ASC3	TST	,U+		TEST FOR ELEMENT ALREADY SELECTED
276B  26 0E               1015  	BNE	ASC4		IF SO, DON'T LOOK AT IT
276D  10 A3 84            1016  	CMPD	,X		TEST FOR SMALLEST ELEMENT
2770  22 09               1017  	BHI	ASC4		NO, SKIP IT
2772  10 BF 3C 8C         1018  	STY	TEMP3		SAVE ELEMENT NUMBER
2776  FF 3C 8A            1019  	STU	TEMP2		SAVE FLAG VECTOR ADDRESS
2779  EC 84               1020  	LDD	,X		USE THIS AS THE NEW VALUE
277B  30 02               1021  ASC4	LEAX	2,X		SKIP TO NEXT ELEMENT
277D  31 3F               1022  	LEAY	-1,Y		REDUCE COUNT
277F  26 E8               1023  	BNE	ASC3		KEEP GOING TILL WE DO IT ALL
2781  BE 3C 8A            1024  	LDX	TEMP2		GET FLAG VECTOR ADDRESS
2784  6A 1F               1025  	DEC	-1,X		SET FLAG
2786  35 40               1026  	PULS	U		RESTORE RESULT ADDRESS
2788  FC 3C 8C            1027  	LDD	TEMP3		GET ELEMENT NUMBER
278B  83 00 01            1028  	SUBD	#1		CONVERT TO ZERO OFFSET
278E  F3 40 02            1029  	ADDD	ORIGIN		AND ADJUST FOR ORIGIN
2791  ED C1               1030  	STD	,U++		SAVE IN RSULT
2793  35 30               1031  	PULS	X,Y		RESTORE POINTERS
2795  31 3F               1032  	LEAY	-1,Y		REDUCE REMAINING COUNT
2797  26 C3               1033  	BNE	ASC2		AND DO THEM ALL
2799  35 70               1034  ASC1	PULS	X,Y,U		RESTORE POINTERS
279B  16 FE 98            1035  	LBRA	NXTOPR
279E  34 30               1036  ASC5	PSHS	X,Y		SAVE REGISTERS
27A0  34 40               1037  	PSHS	U		SAVE LOCATION
27A2  4F                  1038  	CLRA			START
27A3  10 BE 3C 88         1039  	LDY	TEMP1		GET LENGTH
27A7  FE 40 00            1040  	LDU	FREE		POINT TO FLAG VECTOR
27AA  6D C0               1041  ASC6	TST	,U+		TEST FOR ELEMENT ALREADY SELECTED
27AC  26 0D               1042  	BNE	ASC7		IF SO, DON'T LOOK AT IT
27AE  A1 84               1043  	CMPA	,X		TEST FOR SMALLEST ELEMENT
27B0  22 09               1044  	BHI	ASC7		NO, SKIP IT
27B2  10 BF 3C 8C         1045  	STY	TEMP3		SAVE ELEMENT NUMBER
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 19

27B6  FF 3C 8A            1046  	STU	TEMP2		SAVE FLAG VECTOR ADDRESS
27B9  A6 84               1047  	LDA	,X		USE THIS AS THE NEW VALUE
27BB  30 01               1048  ASC7	LEAX	1,X		SKIP TO NEXT ELEMENT
27BD  31 3F               1049  	LEAY	-1,Y		REDUCE COUNT
27BF  26 E9               1050  	BNE	ASC6		KEEP GOING TILL WE DO IT ALL
27C1  BE 3C 8A            1051  	LDX	TEMP2		GET FLAG VECTOR ADDRESS
27C4  6A 1F               1052  	DEC	-1,X		SET FLAG
27C6  35 40               1053  	PULS	U		RESTORE RESULT ADDRESS
27C8  FC 3C 8C            1054  	LDD	TEMP3		GET ELEMENT NUMBER
27CB  83 00 01            1055  	SUBD	#1		CONVERT TO ZERO OFFSET
27CE  F3 40 02            1056  	ADDD	ORIGIN		AND ADJUST FOR ORIGIN
27D1  ED C1               1057  	STD	,U++		SAVE IN RSULT
27D3  35 30               1058  	PULS	X,Y		RESTORE POINTERS
27D5  31 3F               1059  	LEAY	-1,Y		REDUCE REMAINING COUNT
27D7  26 C5               1060  	BNE	ASC5		AND DO THEM ALL
27D9  20 BE               1061  	BRA	ASC1		GO HOME
27DB                      1062  * EXECUTE STRING
27DB  81 65               1063  DSIP7	CMPA	#'e'		EXECUTE?
27DD  26 37               1064  	BNE	DSIP8		NO, TRY STRING FORMAT
27DF  A6 80               1065  	LDA	,X+		GET TYPE
27E1  10 26 0B 27         1066  	LBNE	CDOM		NOT VALID
27E5  EC 81               1067  	LDD	,X++		GET LENGTH OF STRING
27E7  27 25               1068  	BEQ	NOEXEC		NOTHING TO EXECUTE
27E9  10 83 00 80         1069  	CMPD	#128		ARE WE OVER LENGTH
27ED  10 24 0B 14         1070  	LBHS	CLEN		INDICATE EXEC OVER 255 CHARACTERS
27F1  34 20               1071  	PSHS	Y		SAVE POINTERS
27F3  31 85               1072  	LEAY	B,X		POINT TO BUFFER
27F5  1F 21               1073  	TFR	Y,X		COPY TO X
27F7  86 0D               1074  	LDA	#$0D		GET CR
27F9  A7 A0               1075  	STA	,Y+		SAVE IT
27FB  A6 82               1076  DS71	LDA	,-X		GET CHARACTER FROM BUFFER
27FD  A7 A0               1077  	STA	,Y+		SAVE IN OUTPUT
27FF  5A                  1078  	DECB			REDUCE COUNT
2800  26 F9               1079  	BNE	DS71		CONTINUE
2802  86 0D               1080  	LDA	#$0D		GET CR
2804  A7 A4               1081  	STA	,Y		SAVE IT
2806  17 FE 0D            1082  	LBSR	DOEXPR		PERFORM EXPRESSION
2809  35 20               1083  	PULS	Y		RESTORE Y REGISTER
280B  16 FE 28            1084  DS72	LBRA	NXTOPR		GET NEXT OPERAND
280E                      1085  * EXECUTE OF NULL LENGTH VECTOR, DO NOTHING, NO OUTPUT
280E  8E 3A 3E            1086  NOEXEC	LDX	#IOTA0		POINT TO DEFAULT PARAMETER
2811  7A 3C A4            1087  	DEC	ASSFLG		DON'T DISPLAY EXECUTE OF NULL
2814  20 F5               1088  	BRA	DS72		AND GO HOME
2816                      1089  * FORMAT NUMERIC VALUE TO STRING
2816  81 73               1090  DSIP8	CMPA	#'s'		IS IT FORMAT STRING?
2818  26 4C               1091  	BNE	BRANCH		NO, TRY BRANCH
281A  34 60               1092  	PSHS	Y,U		SAVE REGISTERS
281C  FE 40 00            1093  	LDU	FREE		AND A PLACE TO PUT IT
281F  6F C0               1094  	CLR	,U+		CHARACTER DATA
2821  33 42               1095  	LEAU	2,U		ADVANCE PAST LENGTH FOR NOW
2823  10 8E 00 00         1096  	LDY	#0		LENGTH OF OUTPUT
2827  A6 80               1097  	LDA	,X+		GET TYPE
2829  10 27 0A DF         1098  	LBEQ	CDOM		INDICATE DOMAIN ERROR
282D  EC 81               1099  	LDD	,X++		GET LENGTH
282F  27 2A               1100  	BEQ	DECS1		EXIT IF ZERO
2831  34 16               1101  DECS2	PSHS	A,B,X		SAVE REGISTERS
2833  AE 84               1102  	LDX	,X		GET NUMBER TO DISPLAY
2835  CC 00 0A            1103  DECS	LDD	#10		DIVIDE BY 10
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 20

2838  17 FD 71            1104  	LBSR	DIV		PERFORM DIVISION
283B  CA 30               1105  	ORB	#$30		CONVERT TO NUMBER
283D  E7 C0               1106  	STB	,U+		SAVE DIGIT
283F  31 21               1107  	LEAY	1,Y		ADVANCE LENGTH
2841  8C 00 00            1108  	CMPX	#0		OVER YET?
2844  26 EF               1109  	BNE	DECS		NO, KEEP GOING
2846  35 16               1110  	PULS	A,B,X		RESTORE REGISTERS
2848  83 00 01            1111  	SUBD	#1		ARE WE DONE?
284B  27 0E               1112  	BEQ	DECS1		IF SO, QUIT
284D  34 02               1113  	PSHS	A		SAVE A
284F  86 20               1114  	LDA	#' '		GET SPACE
2851  A7 C0               1115  	STA	,U+		SAVE
2853  35 02               1116  	PULS	A		RESTORE
2855  31 21               1117  	LEAY	1,Y		ADVANCE LENGTH
2857  30 02               1118  	LEAX	2,X		ADVANCE TO NEXT
2859  20 D6               1119  	BRA	DECS2		AND CONTINUE
285B  BE 40 00            1120  DECS1	LDX	FREE		POINT TO OUTPUT
285E  10 AF 01            1121  	STY	1,X		SET UP LENGTH
2861  35 60               1122  	PULS	Y,U		RESTORE REGS
2863  16 FD D0            1123  	LBRA	NXTOPR		AND GET NEXT
2866                      1124  * BRANCH OPERATOR
2866  81 62               1125  BRANCH	CMPA	#'b'		IS IT BRANCH?
2868  26 1D               1126  	BNE	TRAVEL		NO, TRY TRAVEL
286A  A6 84               1127  	LDA	,X		GET TYPE
286C  10 27 0A 9C         1128  	LBEQ	CDOM		INDICATE DOMAIN ERROR
2870  EC 01               1129  	LDD	1,X		GET LENGTH
2872  27 0D               1130  	BEQ	NOBRA		DON'T BRANCH
2874  10 83 00 01         1131  	CMPD	#1		IS IT PROPER LENGTH?
2878  10 26 0A 89         1132  	LBNE	CLEN		INDICATE LENGTH ERROR
287C  EC 03               1133  	LDD	3,X		GET VALUE
287E  FD 3C 98            1134  	STD	GOTO		SAVE IN FLAG
2881  7A 3C A4            1135  NOBRA	DEC	ASSFLG		INSURE NO JUMP
2884  16 FD AF            1136  	LBRA	NXTOPR		GO FOR IT
2887                      1137  * OPERATOR TRAVEL
2887  81 5C               1138  TRAVEL	CMPA	#'\'		IS IT TRAVEL
2889  10 26 00 A8         1139  	LBNE	REDUC		NO, TRY REDUCTION
288D  17 FC 0D            1140  	LBSR	SKBKP		GET NEXT OPERATOR
2890  6D 84               1141  	TST	,X		TEST TYPE OF OPERAND
2892  10 27 0A 76         1142  	LBEQ	CDOM		NOT VALID WITH CHARACTER
2896  34 30               1143  	PSHS	X,Y		SAVE REGISTERS
2898  C6 01               1144  	LDB	#1		GET TYPE OF RESULT
289A  E7 80               1145  	STB	,X+		SAVE TYPE
289C  10 AE 84            1146  	LDY	,X		GET LENGTH
289F  31 21               1147  	LEAY	1,Y		CONVERT
28A1  4F                  1148  	CLRA			ZERO HIGH BYTE
28A2  ED 81               1149  	STD	,X++		SAVE NEW LENGTH
28A4  A6 F8 02            1150  	LDA	[2,S]		GET OPERATOR BACK
28A7  81 2B               1151  	CMPA	#'+'		ADDITION?
28A9  26 0A               1152  	BNE	CMP1		NO, TRY MULTIPLY
28AB  4F                  1153  	CLRA
28AC  5F                  1154  	CLRB			INITIAL VALUE IS ZERO
28AD  31 3F               1155  CMPA	LEAY	-1,Y		REDUCE COUNT
28AF  27 3D               1156  	BEQ	CMP9		END OF OPERAND, QUIT
28B1  E3 81               1157  	ADDD	,X++		ADD NEXT ELEMENT
28B3  20 F8               1158  	BRA	CMPA		DO NEXT
28B5  81 78               1159  CMP1	CMPA	#'x'		MULTIPLY?
28B7  26 14               1160  	BNE	CMP2		NO, TRY LOGICAL AND
28B9  CC 00 01            1161  	LDD	#1		INITIAL VALUE IS ONE
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 21

28BC  31 3F               1162  CMPB	LEAY	-1,Y		REDUCE COUNT
28BE  27 2E               1163  	BEQ	CMP9		END OF OPERAND, QUIT
28C0  34 10               1164  	PSHS	X		SAVE POINTER TO OPERAND
28C2  AE 84               1165  	LDX	,X		GET VALUE
28C4  17 FC C5            1166  	LBSR	MULT		PERFORM MULTIPLY
28C7  35 10               1167  	PULS	X		RESTORE POINTER
28C9  30 02               1168  	LEAX	2,X		ADVANCE TO NEXT
28CB  20 EF               1169  	BRA	CMPB		GO AGAIN
28CD  81 26               1170  CMP2	CMPA	#'&'		LOGICAL AND?
28CF  26 0D               1171  	BNE	CMP3		NO, TRY LOGICAL OR
28D1  CC FF FF            1172  	LDD	#$FFFF		INTIAL VALUE
28D4  31 3F               1173  CMPC	LEAY	-1,Y		REDUCE COUNT
28D6  27 16               1174  	BEQ	CMP9		END, QUIT
28D8  A4 80               1175  	ANDA	,X+		AND HIGH BYTE
28DA  E4 80               1176  	ANDB	,X+		AND LOW BYTE
28DC  20 F6               1177  	BRA	CMPC		AND CONTINUE
28DE  81 21               1178  CMP3	CMPA	#'!'		LOGICAL OR?
28E0  26 15               1179  	BNE	CMP6		NO, TRY XOR
28E2  4F                  1180  	CLRA
28E3  5F                  1181  	CLRB			START WITH ZERO
28E4  31 3F               1182  CMPD	LEAY	-1,Y		REDUCE COUNT
28E6  27 06               1183  	BEQ	CMP9		END, QUIT
28E8  AA 80               1184  	ORA	,X+		OR HIGH BYTE
28EA  EA 80               1185  	ORB	,X+		OR LOW BYTE
28EC  20 F6               1186  	BRA	CMPD		GO AGAIN
28EE  35 30               1187  CMP9	PULS	X,Y		RESTORE REGISTERS
28F0  31 3F               1188  	LEAY	-1,Y		BACKUP PAST OPERATOR
28F2  ED 03               1189  	STD	3,X		SAVE VALUE OR RESULT
28F4  16 FD 3F            1190  	LBRA	NXTOPR		AND GET NEXT
28F7  81 7C               1191  CMP6	CMPA	#'|'		XOR?
28F9  26 0C               1192  	BNE	CMP4		NO, TRY GREATOR OF
28FB  4F                  1193  	CLRA
28FC  5F                  1194  	CLRB			START WITH ZERO
28FD  31 3F               1195  CMPZ	LEAY	-1,Y		REDUCE COUNT
28FF  27 ED               1196  	BEQ	CMP9		END IF DONE
2901  A8 80               1197  	EORA	,X+		XOR HIGH BYTE
2903  E8 80               1198  	EORB	,X+		XOR LOW BYTE
2905  20 F6               1199  	BRA	CMPZ		CONTINUE
2907  81 67               1200  CMP4	CMPA	#'g'		GREATOR OF?
2909  26 0F               1201  	BNE	CMP5		NO, TRY LESS OF
290B  4F                  1202  	CLRA
290C  5F                  1203  	CLRB			START WITH ZERO
290D  31 3F               1204  CMPE	LEAY	-1,Y		REDUCE COUNT
290F  27 DD               1205  	BEQ	CMP9		END, QUIT
2911  10 A3 81            1206  	CMPD	,X++		TEST FOR GREATOR
2914  24 F7               1207  	BHS	CMPE		NO, SKIP IT
2916  EC 1E               1208  	LDD	-2,X		REPLACE VALUE
2918  20 F3               1209  	BRA	CMPE		AND TRY AGAIN
291A  81 6C               1210  CMP5	CMPA	#'l'		LESS OF?
291C  26 10               1211  	BNE	CSYNT		NO, GET UPSET
291E  CC FF FF            1212  	LDD	#$FFFF		START WITH FFFF
2921  31 3F               1213  CMPF	LEAY	-1,Y		REDUCE COUNT
2923  27 C9               1214  	BEQ	CMP9		END, QUIT
2925  10 A3 81            1215  	CMPD	,X++		TEST FOR LESS
2928  23 F7               1216  	BLS	CMPF		NO, SKIP IT
292A  EC 1E               1217  	LDD	-2,X		REPLACE VALUE
292C  20 F3               1218  	BRA	CMPF		AND GO AGAIN
292E  10 BE 3C 9E         1219  CSYNT	LDY	TXTPTR		POINT TO TEXT
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 22

2932  16 0A C6            1220  	LBRA	SYNTAX
2935                      1221  *
2935                      1222  * EXTRACT OPERATOR
2935                      1223  *
2935  81 2F               1224  REDUC	CMPA	#'/'		EXTRACT?
2937  10 26 00 85         1225  	LBNE	DYADIC		NO, TRY DYADIC FUNCTIONS
293B  34 50               1226  	PSHS	X,U		SAVE REGISTERS
293D  17 05 E2            1227  	LBSR	GETPRM		GET PARAMETER
2940  EE E4               1228  	LDU	,S		GET POINTER BACK
2942  A6 80               1229  	LDA	,X+		GET TYPE OF OPERAND?
2944  10 27 09 C4         1230  	LBEQ	CDOM		DOMAIN ERROR IF CHARACTER
2948  4F                  1231  	CLRA
2949  5F                  1232  	CLRB			GET A ZERO
294A  FD 3C 84            1233  	STD	TEMP		CLEAR LENGTH SAVER
294D  EC 81               1234  	LDD	,X++		GET LENGTH
294F  34 20               1235  	PSHS	Y		SAVE Y POINTER
2951  10 A3 41            1236  	CMPD	1,U		IS LENGTH THE SAME?
2954  33 43               1237  	LEAU	3,U		SKIP TO DATA
2956  1F 32               1238  	TFR	U,Y		SAVE FOR LATER
2958  26 2A               1239  	BNE	RED1		NO, TRY SCALER OPERATION
295A  C3 00 01            1240  	ADDD	#1		ADVANCE
295D  6D 5D               1241  	TST	-3,U		CHARACTER?
295F  27 41               1242  	BEQ	RED5		DO IT FOR CHARACTER
2961  83 00 01            1243  RED2	SUBD	#1		DEC. COUNT
2964  27 19               1244  	BEQ	RED3		SAVE
2966  34 06               1245  	PSHS	A,B		SAVE
2968  EC 81               1246  	LDD	,X++		TEST FOR NUMBER
296A  27 0D               1247  	BEQ	RED4		DON'T INCLUDE THIS ELEMENT
296C  EC C4               1248  	LDD	,U		GET ELEMENT
296E  ED A1               1249  	STD	,Y++		SAVE IN OUTPUT
2970  FC 3C 84            1250  	LDD	TEMP		GET LENGTH
2973  C3 00 01            1251  	ADDD	#1		ADVANCE
2976  FD 3C 84            1252  	STD	TEMP		RESAVE
2979  35 06               1253  RED4	PULS	A,B		RESTORE
297B  33 42               1254  	LEAU	2,U		ADVANCE
297D  20 E2               1255  	BRA	RED2		RESAVE
297F  FC 3C 84            1256  RED3	LDD	TEMP		GET LENGTH
2982  20 0E               1257  	BRA	RED9		SET LENGTH
2984  10 83 00 01         1258  RED1	CMPD	#1		TEST FOR LENGTH 1?
2988  10 26 09 79         1259  	LBNE	CLEN		INVALID
298C  EC 84               1260  	LDD	,X		GET VALUE
298E  26 0B               1261  	BNE	RED8		WORKED
2990  4F                  1262  	CLRA
2991  5F                  1263  	CLRB			ZERO LENGTH
2992  35 20               1264  RED9	PULS	Y		RESTORE POINTER
2994  35 50               1265  	PULS	X,U		AND REGISTERS
2996  ED 01               1266  	STD	1,X		SET LENGTH
2998  16 FC 9B            1267  	LBRA	NXTOPR
299B  35 20               1268  RED8	PULS	Y		RESTORE Y
299D  35 50               1269  	PULS	X,U		RESTORE POINTERS
299F  16 FC 94            1270  	LBRA	NXTOPR
29A2  83 00 01            1271  RED5	SUBD	#1		DEC. COUNT
29A5  27 D8               1272  	BEQ	RED3		SAVE
29A7  34 06               1273  	PSHS	A,B		SAVE ACC
29A9  EC 81               1274  	LDD	,X++		TEST FOR NUMBER
29AB  27 0D               1275  	BEQ	RED6		DON'T INCLUDE THIS ELEMENT
29AD  A6 C4               1276  	LDA	,U		GET ELEMENT
29AF  A7 A0               1277  	STA	,Y+		SAVE IN OUTPUT
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 23

29B1  FC 3C 84            1278  	LDD	TEMP		GET LENGTH
29B4  C3 00 01            1279  	ADDD	#1		ADVANCE
29B7  FD 3C 84            1280  	STD	TEMP		RESAVE
29BA  35 06               1281  RED6	PULS	A,B		RESTORE
29BC  33 41               1282  	LEAU	1,U		ADVANCE
29BE  20 E2               1283  	BRA	RED5		RESAVE
29C0                      1284  *
29C0                      1285  * DYADIC OPERATORS
29C0                      1286  *
29C0  81 3B               1287  DYADIC	CMPA	#';'		IS IT JOIN?
29C2  26 44               1288  	BNE	SEARCH		NO, TRY NEXT
29C4  34 70               1289  	PSHS	X,Y,U		SAVE REGISTERS
29C6  17 05 59            1290  	LBSR	GETPRM		GET OPERAND VALUE
29C9  10 AF 62            1291  	STY	2,S		SAVE NEW TEXT POSITION
29CC  EE E4               1292  	LDU	,S		GET OLD OPERAND LOCATION
29CE  A6 C0               1293  	LDA	,U+		GET TYPE FOR OLD OPERAND
29D0  A1 80               1294  	CMPA	,X+		TEST AGAIN OTHER OPERAND TYPE
29D2  10 26 09 36         1295  	LBNE	CDOM		MISMATCHED, ERROR
29D6  EC 81               1296  	LDD	,X++		GET LENGTH OF NEW OPERAND
29D8  27 1D               1297  	BEQ	CON1		IF ZERO, IT'S OK
29DA  34 06               1298  	PSHS	A,B		SAVE LENGTH
29DC  E3 C4               1299  	ADDD	,U		ADD TO OLD OPERAND LENGTH
29DE  10 AE C4            1300  	LDY	,U		GET OLD LENGTH
29E1  ED C1               1301  	STD	,U++		SAVE NEW LENGTH VALUE
29E3  1F 20               1302  	TFR	Y,D		PUT OLD LENGTH IN D
29E5  35 20               1303  	PULS	Y		GET NEW LENGTH IN Y
29E7  6D 5D               1304  	TST	-3,U		CHECK FOR CHARACTER DATA
29E9  27 11               1305  	BEQ	CON3		IT'S CHARACTER
29EB  58                  1306  	LSLB
29EC  49                  1307  	ROLA			DOUBLE FOR WORD ELEMENTS
29ED  33 CB               1308  	LEAU	D,U		OFFSET TO NEW LOCATION
29EF  EC 81               1309  CON2	LDD	,X++		GET ELEMENT FROM OLD OPERAND
29F1  ED C1               1310  	STD	,U++		SAVE IN NEW OPERAND
29F3  31 3F               1311  	LEAY	-1,Y		REDUCE COUNT
29F5  26 F8               1312  	BNE	CON2		GO AGAIN
29F7  35 70               1313  CON1	PULS	X,Y,U		RESTORE REGISTERS
29F9  16 FC 3A            1314  	LBRA	NXTOPR
29FC  33 CB               1315  CON3	LEAU	D,U		SKIP TO END OF CHARACTER ARRAY
29FE  A6 80               1316  CON4	LDA	,X+		GET CHARACTER FROM OLD
2A00  A7 C0               1317  	STA	,U+		SAVE IN NEW
2A02  31 3F               1318  	LEAY	-1,Y		REDUCE COUNT
2A04  26 F8               1319  	BNE	CON4		GO AGAIN
2A06  20 EF               1320  	BRA	CON1		AND GO HOME
2A08                      1321  * FIND SUBSTRING
2A08  81 66               1322  SEARCH	CMPA	#'f'		IS IT SEARCH?
2A0A  10 26 00 8F         1323  	LBNE	ADROP		NO, TRY EQUALS TEST
2A0E  34 50               1324  	PSHS	X,U		SAVE REGS
2A10  17 05 0F            1325  	LBSR	GETPRM		GET PARAMETER VALUE
2A13  EE E4               1326  	LDU	,S		GET OLD OPERAND POINTER BACK
2A15  A6 84               1327  	LDA	,X		GET TYPE
2A17  A1 C0               1328  	CMPA	,U+		IS IT SAME?
2A19  10 26 08 EF         1329  	LBNE	CDOM		NO, ERROR
2A1D  B7 3C 88            1330  	STA	TEMP1		SAVE FOR LATER REF
2A20  34 20               1331  	PSHS	Y		SAVE TEXT POINTER
2A22  EC C1               1332  	LDD	,U++		GET LENGTH OF STRING WE LOOK FOR
2A24  10 27 08 DD         1333  	LBEQ	CLEN		INDICATE INVALID LENGTH
2A28  10 AE 01            1334  	LDY	1,X		GET LENGTH OF SOURCE STRING
2A2B  10 BF 3C 8A         1335  	STY	TEMP2		SAVE FOR LATER REF
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 24

2A2F  17 08 E1            1336  	LBSR	CALLEN		GET LENGTH
2A32  30 8B               1337  	LEAX	D,X		ADVANCE TO NEXT
2A34  1E 13               1338  	EXG	X,U		SWAP
2A36  BF 3C 84            1339  	STX	TEMP		SAVE BACKUP POSITION
2A39  30 1D               1340  	LEAX	-3,X		BACKUP TO START
2A3B  17 08 D5            1341  	LBSR	CALLEN		CALCULATE LENGTH
2A3E  30 8B               1342  	LEAX	D,X		SKIP TO END
2A40  34 10               1343  	PSHS	X		SAVE POINTER
2A42  31 21               1344  	LEAY	1,Y		ADVANCE FOR DEC
2A44  7D 3C 88            1345  	TST	TEMP1		CHARACTER VALUES?
2A47  27 3F               1346  	BEQ	SER1		LOOK FOR CHARACTER STRING
2A49  31 3F               1347  SER2	LEAY	-1,Y		BACKUP
2A4B  27 36               1348  	BEQ	SER7		GO FOR IT
2A4D  EC C3               1349  	LDD	,--U		GET VALUE FROM SOURCE
2A4F  10 A3 83            1350  	CMPD	,--X		MATCH?
2A52  27 04               1351  	BEQ	SER3		OK
2A54  AE E4               1352  	LDX	,S		RESTORE POINTER
2A56  20 F1               1353  	BRA	SER2
2A58  BC 3C 84            1354  SER3	CMPX	TEMP		HAVE WE REACHED END?
2A5B  26 EC               1355  	BNE	SER2		NO, WE ARE STILL HERE
2A5D  1F 20               1356  SER5	TFR	Y,D		GET VALUE
2A5F  BE 3C 84            1357  	LDX	TEMP		POINT TO DATA SPACE
2A62  E3 1E               1358  	ADDD	-2,X		BACKUP TO FIRST CHARACTER OF SUBSTRING
2A64  34 06               1359  	PSHS	A,B		SAVE
2A66  FC 3C 8A            1360  	LDD	TEMP2		GET LENGTH
2A69  A3 E1               1361  	SUBD	,S++		AND CALCULATE FINAL VALUE
2A6B  C3 00 01            1362  	ADDD	#1		CONVERT TO PROPER OFFSET
2A6E  F3 40 02            1363  SER8	ADDD	ORIGIN		AND OFFSET FOR ORIGIN VALUE
2A71  35 40               1364  	PULS	U		RESTORE POINTER
2A73  35 20               1365  	PULS	Y		RESTORE Y POINTER
2A75  35 50               1366  	PULS	X,U		RESTORE X POINTER
2A77  ED 03               1367  	STD	3,X		SAVE VALUE
2A79  CC 00 01            1368  	LDD	#1		LENGTH/TYPE=1
2A7C  E7 84               1369  	STB	,X		SET TYPE
2A7E  ED 01               1370  	STD	1,X		SET LENGTH
2A80  16 FB B3            1371  	LBRA	NXTOPR		GET NEXT OPERAND
2A83  FC 3C 8A            1372  SER7	LDD	TEMP2		GET OPERAND LENGTH
2A86  20 E6               1373  	BRA	SER8
2A88  31 3F               1374  SER1	LEAY	-1,Y		BACKUP
2A8A  27 F7               1375  	BEQ	SER7		GO FOR IT
2A8C  A6 C2               1376  	LDA	,-U		GET VALUE FROM SOURCE
2A8E  A1 82               1377  	CMPA	,-X		MATCH?
2A90  27 04               1378  	BEQ	SER6		OK
2A92  AE E4               1379  	LDX	,S		RESTORE POINTER
2A94  20 F2               1380  	BRA	SER1
2A96  BC 3C 84            1381  SER6	CMPX	TEMP		HAVE WE REACHED END?
2A99  26 ED               1382  	BNE	SER1		NO, WE ARE STILL HERE
2A9B  20 C0               1383  	BRA	SER5		GO HOME
2A9D                      1384  * DROP ELEMENTS FROM START OF VECTOR
2A9D  81 64               1385  ADROP	CMPA	#'d'		DROP?
2A9F  26 28               1386  	BNE	TAKE		NO, TRY NEXT
2AA1  34 50               1387  	PSHS	X,U		SAVE REGISTERS
2AA3  17 04 7C            1388  	LBSR	GETPRM		GET FORWARD PARAMETER
2AA6  EE E4               1389  	LDU	,S		RESTORE REGISTERS
2AA8  A6 80               1390  	LDA	,X+		GET TYPE
2AAA  10 27 08 5E         1391  	LBEQ	CDOM		INDICATE DOMAIN ERROR
2AAE  EC 81               1392  	LDD	,X++		GET LENGTH
2AB0  10 83 00 01         1393  	CMPD	#1		INSURE LENGTH OF ONE
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 25

2AB4  10 26 08 4D         1394  	LBNE	CLEN		INDICATE BAD LENGTH
2AB8  33 41               1395  	LEAU	1,U		SKIP TYPE
2ABA  EC C4               1396  	LDD	,U		GET LENGTH
2ABC  A3 84               1397  	SUBD	,X		PERFORM DROP
2ABE  24 02               1398  	BCC	DRP1		ALL IS OK
2AC0  4F                  1399  	CLRA
2AC1  5F                  1400  	CLRB			SET LENGTH TO ZERO
2AC2  ED C4               1401  DRP1	STD	,U		SET NEW LENGTH,
2AC4  35 50               1402  	PULS	X,U		RESTORE REGISTERS
2AC6  16 FB 6D            1403  	LBRA	NXTOPR		GET NEXT OPERATOR
2AC9                      1404  * TAKE A NUMBER OF ELEMENTS FROM THE START OF A STRUCTURE
2AC9  81 74               1405  TAKE	CMPA	#'t'		TAKE?
2ACB  26 7D               1406  	BNE	MEMBER		NO, TRY SOMETING ELSE
2ACD  34 50               1407  	PSHS	X,U		SAVE REGISTERS
2ACF  17 04 50            1408  	LBSR	GETPRM		GET PARAMETER
2AD2  35 40               1409  	PULS	U		GET POINTER TO OLD
2AD4  A6 80               1410  	LDA	,X+		GET TYPE OF NEW
2AD6  10 27 08 32         1411  	LBEQ	CDOM		INDICATE INVALID
2ADA  EC 81               1412  	LDD	,X++		GET LENGTH?
2ADC  10 83 00 01         1413  	CMPD	#1		IS IT ONE?
2AE0  10 26 08 21         1414  	LBNE	CLEN		INDICATE LENGTH ERROR
2AE4  34 20               1415  	PSHS	Y		SAVE TEXT POINTER
2AE6  10 AE 81            1416  	LDY	,X++		GET REQUESTED LENGTH
2AE9  1F 31               1417  	TFR	U,X		COPY TO X
2AEB  33 43               1418  	LEAU	3,U		ADVANCE TO DATA SPACE
2AED  FF 3C 84            1419  	STU	TEMP		SAVE
2AF0  FE 40 00            1420  	LDU	FREE		GET POINTER TO FREE SPACE
2AF3  10 AF 41            1421  	STY	1,U		SAVE LENGTH
2AF6  A6 84               1422  	LDA	,X		GET TYPE OF OLD
2AF8  A7 C4               1423  	STA	,U		AND SAVE
2AFA  34 02               1424  	PSHS	A		SAVE ON STACK
2AFC  17 08 14            1425  	LBSR	CALLEN		CALCULATE LENGTH
2AFF  30 8B               1426  	LEAX	D,X		SKIP TO END
2B01  1E 13               1427  	EXG	X,U		SWAP
2B03  17 08 0D            1428  	LBSR	CALLEN		LENGTH OF NEW
2B06  30 8B               1429  	LEAX	D,X		SKIP TO END
2B08  31 21               1430  	LEAY	1,Y		ADVANCE
2B0A  6D E0               1431  	TST	,S+		CHECK TYPE
2B0C  27 22               1432  	BEQ	TAK4		TAKEING A CHARACTER
2B0E  11 B3 3C 84         1433  TAK1	CMPU	TEMP
2B12  23 0A               1434  	BLS	TAK12
2B14  31 3F               1435  	LEAY	-1,Y		BACKUP
2B16  27 10               1436  	BEQ	TAK2		END, QUIT
2B18  EC C3               1437  	LDD	,--U		GET FROM OLD
2B1A  ED 83               1438  	STD	,--X		SAVE IN NEW
2B1C  20 F0               1439  	BRA	TAK1
2B1E  4F                  1440  TAK12	CLRA
2B1F  5F                  1441  	CLRB			START WITH ZERO
2B20  31 3F               1442  TAK3	LEAY	-1,Y		BACKUP
2B22  27 04               1443  	BEQ	TAK2		EXIT IF END
2B24  ED 83               1444  	STD	,--X		RESAVE
2B26  20 F8               1445  	BRA	TAK3		GO AGAIN
2B28  35 60               1446  TAK2	PULS	Y,U		RESTORE TEXT POINTER
2B2A  BE 40 00            1447  	LDX	FREE		POINT TO NEW VALUE
2B2D  16 FB 06            1448  	LBRA	NXTOPR		GO AGAIN
2B30  11 B3 3C 84         1449  TAK4	CMPU	TEMP
2B34  23 0A               1450  	BLS	TAK41
2B36  31 3F               1451  	LEAY	-1,Y		BACKUP
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 26

2B38  27 EE               1452  	BEQ	TAK2		END, QUIT
2B3A  A6 C2               1453  	LDA	,-U		GET FROM OLD
2B3C  A7 82               1454  	STA	,-X		SAVE IN NEW
2B3E  20 F0               1455  	BRA	TAK4		NO, IT'S OK
2B40  86 20               1456  TAK41	LDA	#' '		GET SPACE
2B42  31 3F               1457  TAK5	LEAY	-1,Y		BACKUP
2B44  27 E2               1458  	BEQ	TAK2		EXIT IF END
2B46  A7 82               1459  	STA	,-X		RESAVE
2B48  20 F8               1460  	BRA	TAK5		GO AGAIN
2B4A                      1461  * MEMBER, DETERMINE IF EACH ELEMENT IS A MEMBER OF THE OTHER SET
2B4A  81 75               1462  MEMBER	CMPA	#'u'		MEMBER OPERATOR?
2B4C  26 7B               1463  	BNE	XLATE		NO, TRY TRANSLATE
2B4E  34 50               1464  	PSHS	X,U		SAVE REGS
2B50  17 03 CF            1465  	LBSR	GETPRM		GET PARAMETER
2B53  35 40               1466  	PULS	U		GET REGISTER
2B55  34 20               1467  	PSHS	Y		SAVE REGISTERS
2B57  A6 C0               1468  	LDA	,U+		GET TYPE OF FIRST
2B59  A1 80               1469  	CMPA	,X+		SAME AS SECOND?
2B5B  10 26 07 AD         1470  	LBNE	CDOM		NO, GET UPSET
2B5F  FC 40 00            1471  	LDD	FREE		GET FREE POINTER
2B62  F3 40 06            1472  	ADDD	BUFSIZ		GET SECOND BUFFER
2B65  1F 02               1473  	TFR	D,Y		POINT U AT IT
2B67  34 06               1474  	PSHS	A,B		SAVE IT
2B69  86 01               1475  	LDA	#1		INTEGER
2B6B  A7 A0               1476  	STA	,Y+		SET TYPE
2B6D  EC 81               1477  	LDD	,X++		GET LENGTH OF RIGHT OPERATOR
2B6F  ED A1               1478  	STD	,Y++		SAVE IT
2B71  27 51               1479  	BEQ	MEMEND		SPECIAL CASE, QUIT
2B73  6D 1D               1480  	TST	-3,X		IS IT CHARACTER?
2B75  27 28               1481  	BEQ	MEMCHR		IF SO, DO IT FOR CHARACTERS
2B77  34 66               1482  MEMLP	PSHS	A,B,Y,U		SAVE REGS
2B79  EC 81               1483  	LDD	,X++		GET ELEMENT WE ARE TESTING
2B7B  10 AE C1            1484  	LDY	,U++		GET LENGTH OF LEFT OPERAND
2B7E  27 09               1485  	BEQ	MEML0		DOES NOT EXIST
2B80  10 A3 C1            1486  MEMLX	CMPD	,U++		DUZ IT MATCH
2B83  27 07               1487  	BEQ	MEML1		OK
2B85  31 3F               1488  	LEAY	-1,Y		REDUCE COUNT
2B87  26 F7               1489  	BNE	MEMLX		CONTINUE
2B89  5F                  1490  MEML0	CLRB
2B8A  20 02               1491  	BRA	MEML2		CONTINUE
2B8C  C6 01               1492  MEML1	LDB	#1		INDICATE FOUND
2B8E  4F                  1493  MEML2	CLRA			ZERO HIGH BYTE
2B8F  10 AE 62            1494  	LDY	2,S		GET POINTER
2B92  ED A4               1495  	STD	,Y		SAVE
2B94  35 66               1496  	PULS	A,B,Y,U		RESTORE REGS
2B96  31 22               1497  	LEAY	2,Y		ADVANCE
2B98  83 00 01            1498  	SUBD	#1		MORE ELEMENTS
2B9B  26 DA               1499  	BNE	MEMLP		CONTINUE
2B9D  20 25               1500  	BRA	MEMEND
2B9F  34 66               1501  MEMCHR	PSHS	A,B,Y,U		SAVE REGS
2BA1  A6 80               1502  	LDA	,X+		GET ELEMENT WE ARE TESTING
2BA3  10 AE C1            1503  	LDY	,U++		GET LENGTH OF LEFT OPERAND
2BA6  27 08               1504  	BEQ	MEMC0		DOES NOT EXIST
2BA8  A1 C0               1505  MEMCX	CMPA	,U+		DOS IT MATCH
2BAA  27 07               1506  	BEQ	MEMC1		OK
2BAC  31 3F               1507  	LEAY	-1,Y		REDUCE COUNT
2BAE  26 F8               1508  	BNE	MEMCX		CONTINUE
2BB0  5F                  1509  MEMC0	CLRB
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 27

2BB1  20 02               1510  	BRA	MEMC2		CONTINUE
2BB3  C6 01               1511  MEMC1	LDB	#1		INDICATE FOUND
2BB5  4F                  1512  MEMC2	CLRA			ZERO HIGH BYTE
2BB6  10 AE 62            1513  	LDY	2,S		GET POINTER
2BB9  ED A4               1514  	STD	,Y		SAVE
2BBB  35 66               1515  	PULS	A,B,Y,U		RESTORE REGS
2BBD  31 22               1516  	LEAY	2,Y		ADVANCE
2BBF  83 00 01            1517  	SUBD	#1		MORE ELEMENTS
2BC2  26 DB               1518  	BNE	MEMCHR		CONTINUE
2BC4  35 70               1519  MEMEND	PULS	X,Y,U		RESTORE REGS
2BC6  16 FA 6D            1520  	LBRA	NXTOPR		CONTINUE
2BC9                      1521  * TRANSLATE TABLE LOOKUP
2BC9  81 6E               1522  XLATE	CMPA	#'n'		TRANSLATE OPERATOR?
2BCB  10 26 00 89         1523  	LBNE	OPSYS		NO, TRY OPSYS
2BCF  34 50               1524  	PSHS	X,U		SAVE REGS
2BD1  17 03 4E            1525  	LBSR	GETPRM		GET PARAMETER
2BD4  35 40               1526  	PULS	U		GET REGISTER
2BD6  34 20               1527  	PSHS	Y		SAVE REGISTERS
2BD8  A6 C0               1528  	LDA	,U+		GET TYPE OF FIRST
2BDA  A1 80               1529  	CMPA	,X+		SAME AS SECOND?
2BDC  10 26 07 2C         1530  	LBNE	CDOM		NO, GET UPSET
2BE0  FC 40 00            1531  	LDD	FREE		GET FREE POINTER
2BE3  F3 40 06            1532  	ADDD	BUFSIZ		GET SECOND BUFFER
2BE6  1F 02               1533  	TFR	D,Y		POINT U AT IT
2BE8  34 06               1534  	PSHS	A,B		SAVE IT
2BEA  86 01               1535  	LDA	#1		INTEGER
2BEC  A7 A0               1536  	STA	,Y+		SET TYPE
2BEE  EC C1               1537  	LDD	,U++		GET LENGTH OF RIGHT OPERATOR
2BF0  ED A1               1538  	STD	,Y++		SAVE IT
2BF2  27 5F               1539  	BEQ	XLAEND		SPECIAL CASE, QUIT
2BF4  6D 1F               1540  	TST	-1,X		IS IT CHARACTER?
2BF6  27 2F               1541  	BEQ	XLACHR		IF SO, DO IT FOR CHARACTERS
2BF8  34 36               1542  XLALP	PSHS	A,B,X,Y		SAVE REGS
2BFA  EC C1               1543  	LDD	,U++		GET ELEMENT WE ARE TESTING
2BFC  10 AE 81            1544  	LDY	,X++		GET LENGTH OF LEFT OPERAND
2BFF  27 09               1545  	BEQ	XLAL0		DOES NOT EXIST
2C01  10 A3 81            1546  XLALX	CMPD	,X++		DUZ IT MATCH
2C04  27 0A               1547  	BEQ	XLAL1		OK
2C06  31 3F               1548  	LEAY	-1,Y		REDUCE COUNT
2C08  26 F7               1549  	BNE	XLALX		CONTINUE
2C0A  10 AE F8 02         1550  XLAL0	LDY	[2,S]		POINT TO END
2C0E  31 21               1551  	LEAY	1,Y		ADVANCE PAST END
2C10  31 3F               1552  XLAL1	LEAY	-1,Y		BACKUP TO ORIGIN ZERO
2C12  1F 20               1553  	TFR	Y,D		COPY
2C14  F3 40 02            1554  	ADDD	ORIGIN		OFFSET
2C17  10 AE 64            1555  	LDY	4,S		GET POINTER
2C1A  ED A4               1556  	STD	,Y		SAVE
2C1C  35 36               1557  	PULS	A,B,X,Y		RESTORE REGS
2C1E  31 22               1558  	LEAY	2,Y		ADVANCE
2C20  83 00 01            1559  	SUBD	#1		MORE ELEMENTS
2C23  26 D3               1560  	BNE	XLALP		CONTINUE
2C25  20 2C               1561  	BRA	XLAEND
2C27  34 36               1562  XLACHR	PSHS	A,B,X,Y		SAVE REGS
2C29  A6 C0               1563  	LDA	,U+		GET ELEMENT WE ARE TESTING
2C2B  10 AE 81            1564  	LDY	,X++		GET LENGTH OF LEFT OPERAND
2C2E  27 08               1565  	BEQ	XLAC0		DOES NOT EXIST
2C30  A1 80               1566  XLACX	CMPA	,X+		DOS IT MATCH
2C32  27 0A               1567  	BEQ	XLAC1		OK
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 28

2C34  31 3F               1568  	LEAY	-1,Y		REDUCE COUNT
2C36  26 F8               1569  	BNE	XLACX		CONTINUE
2C38  10 AE F8 02         1570  XLAC0	LDY	[2,S]		GET HIGHEST VALIE
2C3C  31 21               1571  	LEAY	1,Y		BACKUP TO ORIGIN ZERO
2C3E  31 3F               1572  XLAC1	LEAY	-1,Y		ADVANCE
2C40  1F 20               1573  	TFR	Y,D		COPY TO D
2C42  F3 40 02            1574  	ADDD	ORIGIN		CONVERT
2C45  10 AE 64            1575  	LDY	4,S		GET POINTER
2C48  ED A4               1576  	STD	,Y		SAVE
2C4A  35 36               1577  	PULS	A,B,X,Y		RESTORE REGS
2C4C  31 22               1578  	LEAY	2,Y		ADVANCE
2C4E  83 00 01            1579  	SUBD	#1		MORE ELEMENTS
2C51  26 D4               1580  	BNE	XLACHR		CONTINUE
2C53  35 70               1581  XLAEND	PULS	X,Y,U		RESTORE REGS
2C55  16 F9 DE            1582  	LBRA	NXTOPR		CONTINUE
2C58                      1583  * OPERATING SYSTEM INTERFACE
2C58  81 6F               1584  OPSYS	CMPA	#'o'		OPERATING SYSTEM INTERFACE?
2C5A  26 13               1585  	BNE	EQUTST		NO, TRY EQUALITY TEST
2C5C  34 70               1586  	PSHS	X,Y,U		SAVE OPERAND POINTER
2C5E  17 02 C1            1587  	LBSR	GETPRM		GET PARAMETER
2C61  10 AF 62            1588  	STY	2,S		RESET LINE PTR
2C64  10 AE E4            1589  	LDY	,S		'Y' POINTS TO FIRST
2C67  17 0D EF            1590  	LBSR	OSFUNC		EXECUTE OS FUNCTION
2C6A  35 70               1591  	PULS	X,Y,U		RESTORE ALL REGS
2C6C  16 F9 C7            1592  	LBRA	NXTOPR		AND GET NEXT OPERATOR
2C6F                      1593  * EQUALS AND ASSOCIATED FUNCTIONS
2C6F  81 3D               1594  EQUTST	CMPA	#'='		EQUALS?
2C71  10 26 00 EB         1595  	LBNE	DYFNS		NO, SKIP IT
2C75  34 50               1596  	PSHS	X,U		SAVE U REGISTER
2C77  A6 A4               1597  	LDA	,Y		GET NEXT OPERAND
2C79  31 3F               1598  	LEAY	-1,Y		BACKUP
2C7B  CE 2E 8D            1599  	LDU	#DYGE		INDICATE GREATER/EQUALS
2C7E  81 3E               1600  	CMPA	#'>'		TEST FOR GE
2C80  27 12               1601  	BEQ	DODYA1		DO IT
2C82  CE 2E 97            1602  	LDU	#DYLE		TEST FOR LT
2C85  81 3C               1603  	CMPA	#'<'		IS THIS IT?
2C87  27 0B               1604  	BEQ	DODYA1		IF SO, DO IT
2C89  CE 2E A4            1605  	LDU	#DYEQ		POINT AT HANDLER
2C8C  81 3D               1606  	CMPA	#'='		EQUALS
2C8E  26 07               1607  	BNE	EQU1		NOT IT
2C90  6D 84               1608  	TST	,X		IS IT NUMERIC?
2C92  27 0E               1609  	BEQ	CEQU		IT'S CHARACTER
2C94  16 00 DE            1610  DODYA1	LBRA	DODYA		GO FOR IT
2C97                      1611  * CHARACTER EQUALITY TEST
2C97  CE 2E AD            1612  EQU1	LDU	#DYNE		POINT AT IT
2C9A  81 2D               1613  	CMPA	#'-'		IS THIS IT?
2C9C  26 79               1614  	BNE	EQU9		MUST BE ASSIGNMENT
2C9E  6D 84               1615  	TST	,X		IS THIS IT?
2CA0  26 F2               1616  	BNE	DODYA1		GO FOR IT
2CA2  CE 2D 4B            1617  CEQU	LDU	#DCEQU		POINT TO EQUALS
2CA5  81 3D               1618  	CMPA	#'='		IS IT EQUALS
2CA7  27 03               1619  	BEQ	CEQ2		IT'S OK
2CA9  CE 2D 56            1620  	LDU	#DCNEQ		POINT TO NOT EQUALS
2CAC  FF 3C 8A            1621  CEQ2	STU	TEMP2		SAVE POINTER
2CAF  17 02 70            1622  	LBSR	GETPRM		GET SECOND OPERAND
2CB2  6D 80               1623  	TST	,X+		TEST FOR TYPE
2CB4  10 26 06 54         1624  	LBNE	CDOM		INVALID
2CB8  EE E4               1625  	LDU	,S		POINT TO OLD PARM
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 29

2CBA  33 41               1626  	LEAU	1,U		SKIP TYPE
2CBC  EC 81               1627  	LDD	,X++		GET LENGTH
2CBE  10 A3 C1            1628  	CMPD	,U++		ARE THEY THE SAME?
2CC1  26 14               1629  	BNE	CEQU1		NO, TRY SCALAR COMPARISIONS
2CC3  C3 00 01            1630  	ADDD	#1		ADVANCE FOR LATER DEC
2CC6  83 00 01            1631  CEQ1	SUBD	#1		BACKUP
2CC9  27 5C               1632  	BEQ	CEQ3		END, GET OUT
2CCB  34 02               1633  	PSHS	A		SAVE REGISTERS
2CCD  AD 9F 3C 8A         1634  	JSR	[TEMP2]		PERFORM IT
2CD1  30 01               1635  	LEAX	1,X		NEXT
2CD3  35 02               1636  	PULS	A		GET THEM BACK
2CD5  20 EF               1637  	BRA	CEQ1		AND DO IT
2CD7  10 83 00 01         1638  CEQU1	CMPD	#1		IS THIS A SCALAR?
2CDB  26 14               1639  	BNE	CEQU2		NO, TRY NEXT
2CDD  EC 5E               1640  	LDD	-2,U		GET LENGTH BACK
2CDF  C3 00 01            1641  	ADDD	#1		ADVANCE FOR LATER DEC
2CE2  83 00 01            1642  CEQ4	SUBD	#1		DEC
2CE5  27 40               1643  	BEQ	CEQ3		GET OUT
2CE7  34 02               1644  	PSHS	A		SAVE IT
2CE9  AD 9F 3C 8A         1645  	JSR	[TEMP2]		DO IT
2CED  35 02               1646  	PULS	A		RESTORE
2CEF  20 F1               1647  	BRA	CEQ4		GO AGAIN
2CF1  EC 5E               1648  CEQU2	LDD	-2,U		GET IT
2CF3  10 83 00 01         1649  	CMPD	#1		IS THIS IT?
2CF7  10 26 06 0A         1650  	LBNE	CLEN		GET REAL
2CFB  EC 1E               1651  	LDD	-2,X		GET LENGTH BACK
2CFD  ED 5E               1652  	STD	-2,U		SET OUTPUT LENGTH
2CFF  C3 00 01            1653  	ADDD	#1		ADVANCE
2D02  83 00 01            1654  CEQ5	SUBD	#1		DECREMENT COUNTER
2D05  27 20               1655  	BEQ	CEQ3		QUIT IF DONE
2D07  34 02               1656  	PSHS	A		SAVE REGSITER
2D09  A6 C4               1657  	LDA	,U		GET VALUE
2D0B  A7 41               1658  	STA	1,U		AND SAVE ONE UP
2D0D  AD 9F 3C 8A         1659  	JSR	[TEMP2]		DO IT
2D11  30 01               1660  	LEAX	1,X		NEXT
2D13  35 02               1661  	PULS	A		RESTORE
2D15  20 EB               1662  	BRA	CEQ5		DO IT AGAIN
2D17                      1663  * ASSIGNMENT
2D17  35 50               1664  EQU9	PULS	X,U		RESTORE REGISTERS
2D19  31 21               1665  	LEAY	1,Y		ADVANCE
2D1B  17 F7 7F            1666  	LBSR	SKBKP		SKIP BACK
2D1E  17 04 73            1667  	LBSR	ASSIGN		PERFORM ASSIGNMENT
2D21  7A 3C A4            1668  	DEC	ASSFLG		SET ASSIGNMENT FLAG
2D24  16 F9 0F            1669  	LBRA	NXTOPR		GET NEXT OPERATOR
2D27                      1670  * SAVE OUTPUT VECTOR AND CONVERT TO INTEGER (WORDS)
2D27  AE E4               1671  CEQ3	LDX	,S		GET POINTER TO OUTPUT
2D29  34 20               1672  	PSHS	Y		SAVE POINTER
2D2B  10 AE 01            1673  	LDY	1,X		GET LENGTH
2D2E  31 21               1674  	LEAY	1,Y		ADVANCE FOR LATER DEC
2D30  86 01               1675  	LDA	#1		GET TYPE
2D32  A7 84               1676  	STA	,X		SAVE TYPE
2D34  17 05 DC            1677  	LBSR	CALLEN		GET LENGTH
2D37  30 8B               1678  	LEAX	D,X		OFFSET
2D39  4F                  1679  	CLRA			CLEAR HIGH ORDER BYTE
2D3A  31 3F               1680  CEQ6	LEAY	-1,Y		BACKUP
2D3C  27 06               1681  	BEQ	CEQ7		IF END, GO HOME
2D3E  E6 C2               1682  	LDB	,-U		GET CHAR FROM OUTPUT
2D40  ED 83               1683  	STD	,--X		SAVE IN OUTPUT
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 30

2D42  20 F6               1684  	BRA	CEQ6		AND GO AGAIN
2D44  35 20               1685  CEQ7	PULS	Y		RESTORE Y (AGAIN)
2D46  35 50               1686  	PULS	X,U		RESTORE REGSITERS
2D48  16 F8 EB            1687  	LBRA	NXTOPR
2D4B                      1688  * CHARACTER EQUALS LOGIC
2D4B  A6 84               1689  DCEQU	LDA	,X		GET CHAR
2D4D  A1 C4               1690  	CMPA	,U		TEST FOR OK
2D4F  26 0B               1691  	BNE	DCR0		FALSE
2D51  86 01               1692  DCR1	LDA	#1		GET ONE
2D53  A7 C0               1693  	STA	,U+
2D55  39                  1694  	RTS
2D56                      1695  * CHARACTER NOT EQUALS LOGIC
2D56  A6 84               1696  DCNEQ	LDA	,X		GET CHAR
2D58  A1 C4               1697  	CMPA	,U		TEST FOR NOT EQUAL
2D5A  26 F5               1698  	BNE	DCR1		TRUE
2D5C  4F                  1699  DCR0	CLRA			FALSE
2D5D  A7 C0               1700  	STA	,U+
2D5F  39                  1701  	RTS
2D60                      1702  * STANDARD DYADIC FUNCTONS
2D60  34 50               1703  DYFNS	PSHS	X,U		SAVE U REG
2D62  CE 2D EF            1704  	LDU	#DOTAB		POINT TO TABLE
2D65  6D C4               1705  DOD1	TST	,U		CHECK FOR END OF TABLE
2D67  10 27 01 4B         1706  	LBEQ	FUNVAL		INVALID, QUIT
2D6B  A1 C0               1707  	CMPA	,U+		IS THIS IT?
2D6D  27 04               1708  	BEQ	DOD2		YES, GRAB IT
2D6F  33 42               1709  	LEAU	2,U		SKIP TO NEXT
2D71  20 F2               1710  	BRA	DOD1		AND KEEP LOOKING
2D73  EE C4               1711  DOD2	LDU	,U		GET HANDLER ADDRESS
2D75  17 01 AA            1712  DODYA	LBSR	GETPRM		GET PARAMETER VALUE
2D78  FF 3C 8A            1713  	STU	TEMP2		SAVE HANDLER ADDRESS
2D7B  EE E4               1714  	LDU	,S		GET OLD OPERAND VALUE
2D7D  A6 80               1715  	LDA	,X+		GET TYPE
2D7F  10 27 05 89         1716  	LBEQ	CDOM		NOT FOR CHARACTER VALUES
2D83  A6 C0               1717  	LDA	,U+		TEST TYPE OF OTHER OPERAND
2D85  10 27 05 83         1718  	LBEQ	CDOM		CHARACTER STILL INVALID
2D89  EC 81               1719  	LDD	,X++		GET LENGTH
2D8B  10 A3 C1            1720  	CMPD	,U++		SAME AS OTHER?
2D8E  26 1B               1721  	BNE	TSCALE		NO, TRY SCALAR OPERATION
2D90  C3 00 01            1722  	ADDD	#1		OFFSET FOR ZERO
2D93  83 00 01            1723  ZX1	SUBD	#1		REDUCE COUNT
2D96  27 0E               1724  	BEQ	ZX2		END, QUIT
2D98  34 16               1725  	PSHS	A,B,X		SAVE VALUES
2D9A  AD 9F 3C 8A         1726  	JSR	[TEMP2]		PERFORM OPERATION
2D9E  35 16               1727  	PULS	A,B,X		RESTORE REGISTERS
2DA0  30 02               1728  	LEAX	2,X		ADVANCE IN NEW
2DA2  33 42               1729  	LEAU	2,U		ADVANCE IN OLD
2DA4  20 ED               1730  	BRA	ZX1		GO AGAIN
2DA6  35 50               1731  ZX2	PULS	X,U		RESTORE REGISTERS
2DA8  16 F8 8B            1732  	LBRA	NXTOPR
2DAB  10 83 00 01         1733  TSCALE	CMPD	#1		TEST FOR SCALER OPERATION
2DAF  26 16               1734  	BNE	TSCAL2		NO, TRY OTHER WAY
2DB1  EC 5E               1735  	LDD	-2,U		GET LENGTH
2DB3  C3 00 01            1736  	ADDD	#1		ADD FOR LATER DEC
2DB6  83 00 01            1737  TSL2	SUBD	#1		REDUCE COUNT
2DB9  27 EB               1738  	BEQ	ZX2		END, QUIT
2DBB  34 16               1739  	PSHS	A,B,X		SAVE REGISTERS
2DBD  AD 9F 3C 8A         1740  	JSR	[TEMP2]		PERFORM OPERATION
2DC1  35 16               1741  	PULS	A,B,X		RESTORE REGISTERS
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 31

2DC3  33 42               1742  	LEAU	2,U		ADVANCE POINTER
2DC5  20 EF               1743  	BRA	TSL2		AND GO IT AGAIN
2DC7  EC 5E               1744  TSCAL2	LDD	-2,U		GET OTHER LENGTH
2DC9  10 83 00 01         1745  	CMPD	#1		TEST FOR LENGTH ONE
2DCD  10 26 05 34         1746  	LBNE	CLEN		INVALID LENGTHS
2DD1  EC 1E               1747  	LDD	-2,X		GET LENGTH OF NEW OPERAND
2DD3  ED 5E               1748  	STD	-2,U		SET LENGTH OR RESULT
2DD5  C3 00 01            1749  	ADDD	#1		ADVANCE FOR LATER DEC
2DD8  83 00 01            1750  TSC2	SUBD	#1		REDUCE COUNT
2DDB  27 C9               1751  	BEQ	ZX2		END, QUIT
2DDD  34 16               1752  	PSHS	A,B,X		SAVE REGISTERS
2DDF  EC C4               1753  	LDD	,U		GET VALUE
2DE1  ED 42               1754  	STD	2,U		SAVE LATER
2DE3  AD 9F 3C 8A         1755  	JSR	[TEMP2]		PERFORM OPERATION
2DE7  35 16               1756  	PULS	A,B,X		RESTORE REGISTERS
2DE9  30 02               1757  	LEAX	2,X		ADVANCE IN NEW
2DEB  33 42               1758  	LEAU	2,U		ADVANCE IN OLD
2DED  20 E9               1759  	BRA	TSC2		AND CONTINUE
2DEF                      1760  *
2DEF                      1761  * DYADIC FUNCTION TABLE
2DEF                      1762  *
2DEF  2B                  1763  DOTAB	FCC	'+'		ADDITION
2DF0  2E 14               1764  	FDB	DYADD
2DF2  2D                  1765  	FCC	'-'		SUBTRACTON
2DF3  2E 1B               1766  	FDB	DYSUB
2DF5  78                  1767  	FCC	'x'		MULTIPLICATION
2DF6  2E 22               1768  	FDB	DYMUL
2DF8  25                  1769  	FCC	'%'		DIVIDE
2DF9  2E 2C               1770  	FDB	DYDIV
2DFB  67                  1771  	FCC	'g'		GREATEST
2DFC  2E 4B               1772  	FDB	DYCEIL
2DFE  6C                  1773  	FCC	'l'		LEAST
2DFF  2E 57               1774  	FDB	DYFLOR
2E01  26                  1775  	FCC	'&'		LOGICAL AND
2E02  2E 60               1776  	FDB	DYAND
2E04  21                  1777  	FCC	'!'		LOGICAL OR
2E05  2E 69               1778  	FDB	DYOR
2E07  6D                  1779  	FCC	'm'		MODULUS
2E08  2E 3D               1780  	FDB	DYMOD
2E0A  3E                  1781  	FCC	'>'		GREATER THAN
2E0B  2E 7B               1782  	FDB	DYGT
2E0D  3C                  1783  	FCC	'<'		LESS THAN
2E0E  2E 84               1784  	FDB	DYLT
2E10  7C                  1785  	FCC	'|'		EXCLUSIVE OR
2E11  2E 72               1786  	FDB	DYXOR
2E13  00                  1787  	FCB	0
2E14                      1788  * DYADIC FUNCTION ROUTINES
2E14  EC 84               1789  DYADD	LDD	,X		GET NEW VALUE
2E16  E3 C4               1790  	ADDD	,U		ADD OLD VALUE
2E18  ED C4               1791  	STD	,U		SAVE BACK
2E1A  39                  1792  	RTS
2E1B  EC 84               1793  DYSUB	LDD	,X		GET NEW VALUE
2E1D  A3 C4               1794  	SUBD	,U		SUBTRACT OLD VALUE
2E1F  ED C4               1795  	STD	,U		SAVE BACK
2E21  39                  1796  	RTS
2E22  EC 84               1797  DYMUL	LDD	,X		GET NEW
2E24  AE C4               1798  	LDX	,U		GET OLD
2E26  17 F7 63            1799  	LBSR	MULT		DO MULTIPLY
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 32

2E29  ED C4               1800  	STD	,U		RESAVE
2E2B  39                  1801  	RTS
2E2C  EC C4               1802  DYDIV	LDD	,U		GET OLD
2E2E  10 27 04 DA         1803  	LBEQ	CDOM		INDICATE ERROR IF %0
2E32  AE 84               1804  	LDX	,X		GET NEW
2E34  17 F7 75            1805  	LBSR	DIV		DO DIVISION
2E37  AF C4               1806  	STX	,U		SAVE RESULT
2E39  FD 3C 9C            1807  	STD	DIVREM		SAVE REMAINDER
2E3C  39                  1808  	RTS
2E3D  EC 84               1809  DYMOD	LDD	,X		GET NEW VALUE
2E3F  10 27 04 C9         1810  	LBEQ	CDOM		DIVISION BY ZERO
2E43  AE C4               1811  	LDX	,U		GET OLD VALUE
2E45  17 F7 64            1812  	LBSR	DIV		DO DIVISION
2E48  ED C4               1813  	STD	,U		SAVE RESULT
2E4A  39                  1814  	RTS
2E4B  EC C4               1815  DYCEIL	LDD	,U		GET OLD VALUE
2E4D  10 A3 84            1816  	CMPD	,X		PERFORM TEST
2E50  22 04               1817  	BHI	DYRTS		OK, GO HOME
2E52  EC 84               1818  DYSWP	LDD	,X		GET OTHER VALUE
2E54  ED C4               1819  	STD	,U		AND SAVE
2E56  39                  1820  DYRTS	RTS
2E57  EC C4               1821  DYFLOR	LDD	,U		GET OLD VALUE
2E59  10 A3 84            1822  	CMPD	,X		PERFORM TEST
2E5C  25 F8               1823  	BLO	DYRTS		OK, GO HOME
2E5E  20 F2               1824  	BRA	DYSWP		SWAP
2E60  EC C4               1825  DYAND	LDD	,U		GET OLD
2E62  A4 84               1826  	ANDA	,X		AND HIGH BYTE
2E64  E4 01               1827  	ANDB	1,X		AND LOW BYTE
2E66  ED C4               1828  	STD	,U		RESAVE
2E68  39                  1829  	RTS
2E69  EC C4               1830  DYOR	LDD	,U		GET OLD
2E6B  AA 84               1831  	ORA	,X		OR HIGH BYTE
2E6D  EA 01               1832  	ORB	1,X		OR LOW BYTE
2E6F  ED C4               1833  	STD	,U		SAVE RESULT
2E71  39                  1834  	RTS
2E72  EC C4               1835  DYXOR	LDD	,U		GET OLD
2E74  A8 84               1836  	EORA	,X		XOR HIGH BYTE
2E76  E8 01               1837  	EORB	1,X		XOR LOW BYTE
2E78  ED C4               1838  	STD	,U		RESAVE
2E7A  39                  1839  	RTS
2E7B  EC 84               1840  DYGT	LDD	,X		GET NEW
2E7D  10 A3 C4            1841  	CMPD	,U		TEST AGAINST OLD
2E80  22 1C               1842  	BHI	RET1		ITS TRUE
2E82  20 10               1843  	BRA	RET0
2E84  EC 84               1844  DYLT	LDD	,X		GET NEW
2E86  10 A3 C4            1845  	CMPD	,U		TEST AGAINST OLD
2E89  25 13               1846  	BLO	RET1		TRUE
2E8B  20 07               1847  	BRA	RET0		FALES
2E8D  EC 84               1848  DYGE	LDD	,X		GET NEW
2E8F  10 A3 C4            1849  	CMPD	,U		TEST AGAINST OLD
2E92  24 0A               1850  	BHS	RET1		OK
2E94  5F                  1851  RET0	CLRB
2E95  20 09               1852  	BRA	RETX
2E97  EC 84               1853  DYLE	LDD	,X		GET NEW
2E99  10 A3 C4            1854  	CMPD	,U		TEST AGAINST OLD
2E9C  22 F6               1855  	BHI	RET0		FALSE
2E9E  C6 01               1856  RET1	LDB	#1		TRUE
2EA0  4F                  1857  RETX	CLRA			CLEAR HIGH BYTE,
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 33

2EA1  ED C4               1858  	STD	,U		SAVE VALUE
2EA3  39                  1859  	RTS
2EA4  EC 84               1860  DYEQ	LDD	,X		GET NEW
2EA6  10 A3 C4            1861  	CMPD	,U		TEST AGAINAT OLD
2EA9  27 F3               1862  	BEQ	RET1		OK
2EAB  26 E7               1863  	BNE	RET0		FALSE
2EAD  EC 84               1864  DYNE	LDD	,X		GET NEW
2EAF  10 A3 C4            1865  	CMPD	,U		TEST AGAINST OLD
2EB2  27 E0               1866  	BEQ	RET0		FALSE
2EB4  20 E8               1867  	BRA	RET1		TRUE
2EB6                      1868  * EXECUTE FUNCTION WITH A VALUE
2EB6  35 50               1869  FUNVAL	PULS	X,U		RESTORE STACK
2EB8  BF 3C 84            1870  	STX	TEMP		SAVE PARAMETER ADDRESS
2EBB  31 21               1871  	LEAY	1,Y		BACK FOR FUNCTION NAME
2EBD  17 F6 4B            1872  	LBSR	LOOKUP		LOOK FOR IT
2EC0  81 02               1873  	CMPA	#2		IS IT A FUNCTION
2EC2  10 24 FA 68         1874  	LBHS	CSYNT		SYNTAX ERROR
2EC6  17 05 D7            1875  	LBSR	FUNC		PERFORM FUNCTION
2EC9  16 F7 6A            1876  	LBRA	NXTOPR		GET NEXT OPERATOR
2ECC                      1877  *
2ECC                      1878  * DISPLAYS VALUE OF A STRUCTURE (X)
2ECC                      1879  *
2ECC  34 50               1880  DISPLY	PSHS	X,U		SAVE VARIABLES
2ECE  A6 80               1881  	LDA	,X+		GET TYPE
2ED0  27 19               1882  	BEQ	CHROUT		IT'S CHARACTER DATA
2ED2  EC 81               1883  	LDD	,X++		GET LENGTH
2ED4  27 26               1884  	BEQ	NULOUT		NOTHING TO OUTPUT
2ED6  34 06               1885  	PSHS	D		SAVE TEMP
2ED8  E3 E4               1886  	ADDD	,S		DOUBLE FOR INTEGERS
2EDA  33 8B               1887  	LEAU	D,X		SKIP TO END
2EDC  35 10               1888  	PULS	X		GET # ELEMENTS IN X
2EDE  EC C3               1889  DIS1	LDD	,--U		GET VALUE
2EE0  8D 1C               1890  	BSR	DECOUT		OUTPUT
2EE2  17 F5 9A            1891  	LBSR	SPACE		DISPLAY SPACE
2EE5  30 1F               1892  	LEAX	-1,X		REDUCE COUNT
2EE7  26 F5               1893  	BNE	DIS1		AND CONTINUE
2EE9  20 11               1894  	BRA	NULOUT		GO AWAY
2EEB  EC 81               1895  CHROUT	LDD	,X++		GET LENGTH
2EED  27 0D               1896  	BEQ	NULOUT		NULL STRING
2EEF  33 8B               1897  	LEAU	D,X		SKIP TO END
2EF1  1F 01               1898  	TFR	D,X		COPY TO X
2EF3  A6 C2               1899  DIS2	LDA	,-U		GET CHARACTER
2EF5  17 F5 80            1900  	LBSR	PUTCHR		OUTPUT
2EF8  30 1F               1901  	LEAX	-1,X		REDUCE LENGTH,
2EFA  26 F7               1902  	BNE	DIS2		KEEP GOING
2EFC  35 D0               1903  NULOUT	PULS	X,U,PC		BACK TO WORK
2EFE                      1904  *
2EFE                      1905  * DISPLAY NUMBER (D) IN DECIMAL
2EFE                      1906  *
2EFE  34 30               1907  DECOUT	PSHS	X,Y
2F00  1F 01               1908  	TFR	D,X		COPY
2F02  10 8E 00 00         1909  	LDY	#0		START WITH ZERO CHARS
2F06  CC 00 0A            1910  DEC1	LDD	#10		DIVIDE BY 10
2F09  17 F6 A0            1911  	LBSR	DIV		PERFORM DIVISION
2F0C  34 04               1912  	PSHS	B		SAVE IT
2F0E  31 21               1913  	LEAY	1,Y		ADVANCE
2F10  8C 00 00            1914  	CMPX	#0		OVER YET?
2F13  26 F1               1915  	BNE	DEC1		NO, KEEP GOING
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 34

2F15  35 02               1916  DEC2	PULS	A		GET CHAR BACK
2F17  8A 30               1917  	ORA	#$30		CONVERT TO DISPLAYABLE
2F19  17 F5 5C            1918  	LBSR	PUTCHR		OUTPUT IT
2F1C  31 3F               1919  	LEAY	-1,Y		REDUCE COUNT OF CHARACTERS
2F1E  26 F5               1920  	BNE	DEC2		AND CONTINUE
2F20  35 B0               1921  	PULS	X,Y,PC
2F22                      1922  *
2F22                      1923  * GETS A VALUE FOR THE WORKSPACE (,X)
2F22                      1924  *
2F22  BE 40 00            1925  GETPRM	LDX	FREE		POINT TO FREE SPACE
2F25  10 BF 3C 9E         1926  	STY	TXTPTR		SAVE TEXT POSITION
2F29  8D 05               1927  	BSR	GETVAL		GET VALUE
2F2B  10 26 F9 FF         1928  	LBNE	CSYNT		IF NONE, PROCLAIM ERROR
2F2F  39                  1929  	RTS
2F30  34 50               1930  GETVAL	PSHS	X,U		SAVE REGSITERS
2F32  17 F5 68            1931  	LBSR	SKBKP		BACKUP
2F35  81 29               1932  	CMPA	#')'		EXPRESSION
2F37  26 10               1933  	BNE	GETV0		NO, CONTINUE
2F39  17 F6 DA            1934  	LBSR	DOEXPR		DO EXPRESSION
2F3C  81 28               1935  	CMPA	#'('		CLOSED PROPERLY?
2F3E  10 26 04 B9         1936  	LBNE	SYNTAX		INDICATE INVALID
2F42  AF E4               1937  	STX	,S		SAVE OUTPUT ADDRESS
2F44  17 F5 58            1938  	LBSR	SKBK		BACKUP
2F47  20 64               1939  	BRA	NV1		GO AGAIN
2F49  81 5D               1940  GETV0	CMPA	#']'		IS IT INDEX?
2F4B  10 26 00 92         1941  	LBNE	GETN0		NO, EVERYTHING IS OK
2F4F                      1942  * LOOK UP INDEX VALUE
2F4F  17 F6 C4            1943  	LBSR	DOEXPR		GET VALUE
2F52  81 5B               1944  	CMPA	#'['		CLOSE PROPERLY
2F54  10 26 04 A3         1945  	LBNE	SYNTAX		INVALID SYNTAX
2F58  A6 84               1946  	LDA	,X		GET TYPE
2F5A  81 01               1947  	CMPA	#1		IS IT INTEGER?
2F5C  10 26 04 A5         1948  	LBNE	DOMAIN		INDICATE DOMAIN ERROR
2F60  17 F5 3C            1949  	LBSR	SKBK		BACKUP
2F63  AF E4               1950  	STX	,S		SAVE POINTER TO ENTRY
2F65  FC 3C 90            1951  	LDD	TEMP5		GET BUFFER ADDRESS
2F68  B3 40 06            1952  	SUBD	BUFSIZ		ALLOCATE ANOTHER BUFFER
2F6B  FD 3C 90            1953  	STD	TEMP5		RESAVE
2F6E  17 FF B1            1954  	LBSR	GETPRM		GET VALUE
2F71  FC 3C 90            1955  	LDD	TEMP5		GET BUFFER ADDRESS
2F74  F3 40 06            1956  	ADDD	BUFSIZ		RELEASE BUFFER
2F77  FD 3C 90            1957  	STD	TEMP5		RESAVE
2F7A  EE E4               1958  	LDU	,S		GET ORIG. PARM BACK
2F7C  EC 01               1959  	LDD	1,X		GET LENGTH
2F7E  83 00 01            1960  	SUBD	#1		CONVERT TO OFFSET FROM ZERO
2F81  FD 3C 8E            1961  	STD	TEMP4		SAVE FOR REF
2F84  A6 84               1962  	LDA	,X		GET ARG. TYPE
2F86  30 03               1963  	LEAX	3,X		SKIP TO DATA
2F88  A7 C0               1964  	STA	,U+		SET DEST TYPE
2F8A  27 25               1965  	BEQ	CHRI		CHARACTER INDEX
2F8C  EC C1               1966  	LDD	,U++		GET LENGTH
2F8E  34 06               1967  NUMI	PSHS	A,B		SAVE
2F90  EC C4               1968  	LDD	,U		GET INDEX VALUE
2F92  B3 40 02            1969  	SUBD	ORIGIN		SUBTRACT ORIGIN VALUE
2F95  34 06               1970  	PSHS	A,B		SAVE VALUE ON STACK
2F97  FC 3C 8E            1971  	LDD	TEMP4		GET VALUE
2F9A  A3 E1               1972  	SUBD	,S++		CONVERT TO PROPER OFFSET
2F9C  10 25 04 6F         1973  	LBCS	INDEX		INDICATE INDEX ERROR
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 35

2FA0  58                  1974  	LSLB
2FA1  49                  1975  	ROLA			DOUBLE FOR TWO BYTE ENTRIES
2FA2  EC 8B               1976  	LDD	D,X		GET OPERAND
2FA4  ED C1               1977  	STD	,U++		SAVE IN OUTPUT
2FA6  35 06               1978  	PULS	A,B		GET LENGTH BACK
2FA8  83 00 01            1979  	SUBD	#1		REDUCE
2FAB  26 E1               1980  	BNE	NUMI		AND KEEP GOING
2FAD  1A 04               1981  NV1	ORCC	#4		SET Z FLAG
2FAF  35 D0               1982  	PULS	X,U,PC		GO HOME
2FB1  EC C1               1983  CHRI	LDD	,U++		SAVE VALUE
2FB3  10 BF 3C 9E         1984  	STY	TXTPTR		SAVE TEXT POINTER
2FB7  1F 32               1985  	TFR	U,Y		POINT TO CHARACTER SPACE
2FB9  34 06               1986  CHRI1	PSHS	A,B		SAVE
2FBB  EC C1               1987  	LDD	,U++		GET INDEX VALUE
2FBD  B3 40 02            1988  	SUBD	ORIGIN		SUBTRACT ORIGIN VALUE
2FC0  34 06               1989  	PSHS	A,B		SAVE VALUE ON STACK
2FC2  FC 3C 8E            1990  	LDD	TEMP4		GET VALUE
2FC5  A3 E1               1991  	SUBD	,S++		CONVERT TO PROPER OFFSET
2FC7  25 11               1992  	BCS	CIDX		INDICATE INDEX ERROR
2FC9  A6 8B               1993  	LDA	D,X		GET OPERAND
2FCB  A7 A0               1994  	STA	,Y+		SAVE IN OUTPUT
2FCD  35 06               1995  	PULS	A,B		GET LENGTH BACK
2FCF  83 00 01            1996  	SUBD	#1		REDUCE
2FD2  26 E5               1997  	BNE	CHRI1		AND KEEP GOING
2FD4  10 BE 3C 9E         1998  	LDY	TXTPTR		GI IT AGAIN
2FD8  20 D3               1999  	BRA	NV1
2FDA  10 BE 3C 9E         2000  CIDX	LDY	TXTPTR		GET TEXT POINTER AGAIN
2FDE  16 04 2E            2001  	LBRA	INDEX		GET UPSET
2FE1                      2002  * TEST FOR NUMBER
2FE1  17 F4 DE            2003  GETN0	LBSR	VALNUM		IS IT A NUMBER?
2FE4  26 1A               2004  	BNE	GETV1		NO, TRY STRING
2FE6  86 01               2005  	LDA	#1		INDICATE ONE VARIABLE
2FE8  A7 84               2006  	STA	,X		SET TYPE
2FEA  30 03               2007  	LEAX	3,X		SKIP POSITION
2FEC  CE 00 00            2008  	LDU	#0		START WITH ZERO ELEMENTS
2FEF  17 F4 AB            2009  GETN1	LBSR	SKBKP		LOOK FOR NUMBER
2FF2  17 F4 CD            2010  	LBSR	VALNUM		VALID NUMBER?
2FF5  26 33               2011  	BNE	GETV9		LAST NUMBER
2FF7  33 41               2012  	LEAU	1,U		ADVANCE
2FF9  17 F4 DB            2013  	LBSR	GETDEC		GET A NUMBER
2FFC  ED 81               2014  	STD	,X++		SAVE VALUE
2FFE  20 EF               2015  	BRA	GETN1		AND TRY AGAIN
3000  81 27               2016  GETV1	CMPA	#$27		IS IT A CHARACTER VALUE?
3002  26 2E               2017  	BNE	GETV2		NO, TRY NEXT
3004                      2018  * GETS A CHARACTER VALUE FOR THE WORKSPACE
3004  6F 84               2019  	CLR	,X		INDICATE CHARACTER DATA
3006  30 03               2020  	LEAX	3,X		SKIP FOR NOW
3008  CE 00 00            2021  	LDU	#0		START WITH ZERO CHARACTER
300B  A6 A2               2022  GETC2	LDA	,-Y		GET NEXT CHARACTER
300D  81 27               2023  	CMPA	#$27		CLOSING QUOTE?
300F  27 0C               2024  	BEQ	GETC3		IF SO, QUIT
3011  81 0D               2025  	CMPA	#$0D		END OF LINE?
3013  10 27 03 E4         2026  	LBEQ	SYNTAX		INDICATE ERROR
3017  33 41               2027  GETC5	LEAU	1,U		INC. NUMBER OF CHARACTERS IN STRING
3019  A7 80               2028  	STA	,X+		SAVE IN OUTPUT VALUE
301B  20 EE               2029  	BRA	GETC2		NO TRY FOR ANOTHER
301D  A6 3F               2030  GETC3	LDA	-1,Y		GET PRECEDING CHAR
301F  81 27               2031  	CMPA	#$27		QUOTE?
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 36

3021  26 04               2032  	BNE	GETC4		NO, TERMINATE
3023  A6 A2               2033  	LDA	,-Y		GET CHARACTER
3025  20 F0               2034  	BRA	GETC5
3027  17 F4 75            2035  GETC4	LBSR	SKBK		ADVANCE BACKWARDS
302A  AE E4               2036  GETV9	LDX	,S		GET OFFSET
302C  EF 01               2037  	STU	1,X		SAVE SIZE
302E  1A 04               2038  	ORCC	#4		SET Z FLAG
3030  35 D0               2039  	PULS	X,U,PC		BACKUP AND RETURN
3032                      2040  * TEST FOR SYSTEM VARIABLE
3032  81 24               2041  GETV2	CMPA	#'$'		SYS VAR?
3034  26 5C               2042  	BNE	GETV3		NO, TRY SYMBOL
3036  C6 01               2043  	LDB	#1		GET TYPE, INTEGER
3038  E7 80               2044  	STB	,X+		SAVE IN RAM
303A  4F                  2045  	CLRA			SET LENGTH TO 1
303B  ED 81               2046  	STD	,X++		SAVE LENGTH
303D  A6 A2               2047  	LDA	,-Y		GET SYMBOL LENGTH
303F  81 4C               2048  	CMPA	#'L'		IS IT LINE NUMBER?
3041  26 05               2049  	BNE	SYS1		NO, TRY ORIGIN
3043  FC 3C 96            2050  	LDD	LINCT		GET COUNTER
3046  20 41               2051  	BRA	SYS9		AND EXIT WITH IT
3048  81 4F               2052  SYS1	CMPA	#'O'		ORIGIN?
304A  26 05               2053  	BNE	SYS2		NO, TRY WSSIZE.
304C  FC 40 02            2054  	LDD	ORIGIN		GET ORIGIN VALUE
304F  20 38               2055  	BRA	SYS9		AND EXIT
3051  81 57               2056  SYS2	CMPA	#'W'		IS IT WORKSPACE SIZE?
3053  26 08               2057  	BNE	SYS3		NO, TRY DIV REM
3055  FC 3C 90            2058  	LDD	TEMP5		GET FREE ADDRESS
3058  B3 40 00            2059  	SUBD	FREE		CONVERT TO SIMPLE OFFSET
305B  20 2C               2060  	BRA	SYS9		END EXIT
305D  81 52               2061  SYS3	CMPA	#'R'		REMAINDER?
305F  26 05               2062  	BNE	SYS4		NO, TRY SEED
3061  FC 3C 9C            2063  	LDD	DIVREM		GET REMANDER
3064  20 23               2064  	BRA	SYS9		AND EXIT
3066  81 53               2065  SYS4	CMPA	#'S'		SEED?
3068  26 05               2066  	BNE	ATOM		NO, TRY ATOMIC VECTOR
306A  FC 40 04            2067  	LDD	SEED		GET SEED VALUE
306D  20 1A               2068  	BRA	SYS9		AND SAVE
306F  81 43               2069  ATOM	CMPA	#'C'		CHARACTER STRING?
3071  26 0F               2070  	BNE	SY5		NO, TRY NEXT
3073  6F 1D               2071  	CLR	-3,X		INDICATE CHARACTER
3075  CC 01 00            2072  	LDD	#256		LENGTH OF IT
3078  ED 1E               2073  	STD	-2,X		SET IT UP
307A  4F                  2074  	CLRA			START WITH NULL
307B  4A                  2075  AV1	DECA			BACKUP THROUGH CHARACTER SET
307C  A7 80               2076  	STA	,X+		SAVE IN VECTOR
307E  26 FB               2077  	BNE	AV1		KEEP GOING
3080  20 09               2078  	BRA	SYSX		GO  HOME
3082  81 42               2079  SY5	CMPA	#'B'		BUFFER SIZE?
3084  26 46               2080  	BNE	SYSPRM		NO, TRY PARM
3086  FC 40 06            2081  	LDD	BUFSIZ		GET BUFFER SIZE
3089  ED 84               2082  SYS9	STD	,X		SAVE VALUE
308B  17 F4 11            2083  SYSX	LBSR	SKBK		SKIP BACK TO NEXT
308E  1A 04               2084  	ORCC	#4		SET Z FLAG
3090  35 D0               2085  	PULS	X,U,PC		AND GO HOME
3092                      2086  * LOOK FOR SYMBOL IN TABLE
3092  17 F4 37            2087  GETV3	LBSR	VALSYM		IS IT A SYMBOL
3095  26 31               2088  	BNE	GETV4		NOT VALID
3097  CC 3A 3E            2089  	LDD	#IOTA0		DEFAULT PARAMETER
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 37

309A  FD 3C 84            2090  	STD	TEMP		SAVE
309D  17 F4 6B            2091  	LBSR	LOOKUP		LOOK UP VALUE
30A0  10 26 03 5C         2092  	LBNE	VALUE		INDICATE VALUE ERROR
30A4  81 02               2093  	CMPA	#2		IS IT A VARIABLE
30A6  26 04               2094  	BNE	GETV5		NO, TRY LABEL
30A8  AE 85               2095  	LDX	B,X		POINT TO VARIABLE ENTRY
30AA  20 16               2096  	BRA	GETV6		GO FOR IT
30AC  81 03               2097  GETV5	CMPA	#3		IS IT A LABEL?
30AE  26 0F               2098  	BNE	GETV7		NO, TRY.
30B0  EC 85               2099  	LDD	B,X		GET VALUE
30B2  AE E4               2100  	LDX	,S		GET STACK VALUE
30B4  ED 03               2101  	STD	3,X		SAVE IT
30B6  C6 01               2102  	LDB	#1		GET TYPE
30B8  4F                  2103  	CLRA			ZERO HIGH BYTE
30B9  E7 84               2104  	STB	,X		SAVE TYPE
30BB  ED 01               2105  	STD	1,X		SAVE LENGTH
30BD  20 03               2106  	BRA	GETV6
30BF  17 03 DE            2107  GETV7	LBSR	FUNC		CALL FUNCTION
30C2  32 62               2108  GETV6	LEAS	2,S		SKIP X VALUE FROM STACK
30C4  1A 04               2109  	ORCC	#4		SET Z FLAG
30C6  35 C0               2110  	PULS	U,PC		AND GO HOME
30C8  1C FB               2111  GETV4	ANDCC	#$FB		CLEAR Z FLAG
30CA  35 D0               2112  	PULS	X,U,PC		AND RETURN
30CC                      2113  * 'P$' SYSTEM VARIABLE
30CC  81 50               2114  SYSPRM	CMPA	#'P'		IS IT PARAMETER
30CE  26 08               2115  	BNE	KREAD		NO, TRY TO READ TERMINAL
30D0  17 F3 CC            2116  	LBSR	SKBK		BACKUP
30D3  BE 3C 94            2117  	LDX	PARM		GET PARAMETER POINTER
30D6  20 EA               2118  	BRA	GETV6		RETURN
30D8                      2119  * READ A SINGLE KEYBOARD KEY
30D8  81 4B               2120  KREAD	CMPA	#'K'		READ KEYBOARD?
30DA  26 0E               2121  	BNE	INTER		NO, TRY READ LINE
30DC  6F 1D               2122  	CLR	-3,X		SET TYPE TO CHARACTER
30DE  CC 00 01            2123  	LDD	#1		GET LENGTH OF ONE
30E1  ED 1E               2124  	STD	-2,X		SAVE
30E3  17 F3 5C            2125  	LBSR	GETCHR		READ A CHARACTER
30E6  A7 84               2126  	STA	,X		SAVE IT
30E8  20 A1               2127  SYSX1	BRA	SYSX		GO HOME
30EA                      2128  * READ LINE FROM TERMINAL
30EA  81 46               2129  INTER	CMPA	#'F'		FORMATTED INPUT?
30EC  26 20               2130  	BNE	INNUM		NO, TRY FOR NUMERIC INPUT
30EE  34 20               2131  	PSHS	Y		SAVE VARIABLE POINTER
30F0  10 BE 3C 90         2132  	LDY	TEMP5		GET BUFFER ADDRESS
30F4  31 A8 80            2133  	LEAY	-128,Y		BACKUP TO FREE RAM
30F7  17 F3 11            2134  	LBSR	GETLIN		READ IT
30FA  5A                  2135  	DECB			BACKUP
30FB  4F                  2136  	CLRA			SET HIGH BYTE TO ZERO
30FC  A7 1D               2137  	STA	-3,X		SET TYPE TO CHARACTER
30FE  ED 1E               2138  	STD	-2,X		SET LENGTH
3100  27 08               2139  	BEQ	INTER2		ZERO LENGTH
3102  5A                  2140  INTER1	DECB			BACKUP
3103  A6 A5               2141  	LDA	B,Y		GET CHARACTER FROM BUFFER
3105  A7 80               2142  	STA	,X+		SAVE IN OUTPUT
3107  5D                  2143  	TSTB			BACKUP
3108  26 F8               2144  	BNE	INTER1		SAVE IT ALL
310A  35 20               2145  INTER2	PULS	Y		RESTORE TEXT POINTER
310C  20 DA               2146  	BRA	SYSX1		AND GO HOME
310E  81 54               2147  INNUM	CMPA	#'T'		TERMINAL INP?
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 38

3110  10 26 02 E7         2148  	LBNE	SYNTAX		NO, GET UPSET
3114  FC 3C A2            2149  INN1	LDD	RAMTOP		GET TOP OF RAM
3117  34 26               2150  	PSHS	A,B,Y		SAVE
3119  10 BE 3C 9A         2151  	LDY	NAMPTR		POINT TO NAME
311D  FC 3C 96            2152  	LDD	LINCT		GET LINE COUNTER
3120  34 26               2153  	PSHS	A,B,Y		SAVE
3122  10 BE 3C 98         2154  	LDY	GOTO		GET GOTO POINTER
3126  FC 3C 94            2155  	LDD	PARM		GET PARAMETERS
3129  34 26               2156  	PSHS	A,B,Y		SAVE
312B  10 BE 3C A0         2157  	LDY	SAVSTK		SAVED STACK POINTER
312F  FC 3C A6            2158  	LDD	INPSTK		GET INPUT STACK
3132  34 26               2159  	PSHS	A,B,Y		SAVE
3134  10 FF 3C A6         2160  	STS	INPSTK		SAVE OUR STACK POINTER
3138  FC 3C 90            2161  	LDD	TEMP5		GET BUFFER ADDRESS
313B  FD 3C A2            2162  	STD	RAMTOP		SAVE IT BACK
313E  86 3F               2163  INN2	LDA	#'?'		GET PROMPT
3140  17 F3 35            2164  	LBSR	PUTCHR		DISPLAY
3143  10 BE 3C 90         2165  	LDY	TEMP5		POINT TO RAM ADDRESS
3147  31 A8 80            2166  	LEAY	-128,Y		BACKUP FOR SOME BUFFER SPACE
314A  10 BF 3C 90         2167  	STY	TEMP5		RESERVE THIS BUFFER
314E  17 F2 BA            2168  	LBSR	GETLIN		GET A LINE
3151  17 F3 2F            2169  	LBSR	SKP		ADVANCE
3154  81 0D               2170  	CMPA	#$0D		CR?
3156  27 E6               2171  	BEQ	INN2		IF SO, GO AGAIN
3158  86 0D               2172  	LDA	#$0D		GET CR
315A  A7 3F               2173  	STA	-1,Y		SAVE
315C  17 F4 8E            2174  	LBSR	EXPR		DO EXPRESSION
315F  FC 3C A2            2175  INNP3	LDD	RAMTOP		GET BUFFER ADRESS
3162  FD 3C 90            2176  	STD	TEMP5		RESAVE
3165  10 FE 3C A6         2177  	LDS	INPSTK		GET INPUT STACK
3169  35 26               2178  	PULS	A,B,Y		GET VALUES BACK
316B  FD 3C A6            2179  	STD	INPSTK		SAVE INPUT FLAG
316E  10 BF 3C A0         2180  	STY	SAVSTK		RESAVE STACK
3172  35 26               2181  	PULS	A,B,Y		GET MORE
3174  FD 3C 94            2182  	STD	PARM		SAVE PARM POINTER
3177  10 BF 3C 98         2183  	STY	GOTO		SAVE GOTO FLAG
317B  35 26               2184  	PULS	A,B,Y		GET LINCT AND NAMPTR
317D  FD 3C 96            2185  	STD	LINCT		SAVE LINE COUNT
3180  10 BF 3C 9A         2186  	STY	NAMPTR		RESAVE
3184  35 26               2187  	PULS	A,B,Y		GET TOP OF RAM
3186  FD 3C A2            2188  	STD	RAMTOP		AND RESAVE
3189  7D 3C A5            2189  	TST	ERRFLG		DID AN ERROR OCCUR?
318C  26 86               2190  	BNE	INN1		IF SO, GO AGAIN
318E  17 F3 0E            2191  	LBSR	SKBK		BACKUP
3191  16 FF 2E            2192  	LBRA	GETV6		AND GO HOME
3194                      2193  *
3194                      2194  * ASSIGN VALUE(X) TO VARIABLE
3194                      2195  *
3194  34 50               2196  ASSIGN	PSHS	X,U		SAVE VALUE
3196  10 BF 3C 8C         2197  	STY	TEMP3		SAVE FOR LATER
319A  A6 A4               2198  	LDA	,Y		GET VALUE
319C  81 5D               2199  	CMPA	#']'		INDEXED ASSIGNMENT
319E  10 27 00 C6         2200  	LBEQ	IASS		INDICATE SO
31A2  81 24               2201  	CMPA	#'$'		IS IT A SYSTEM VARIABLE?
31A4  26 62               2202  	BNE	ASI1		NO, NORMAL ASSIGNMENT
31A6  A6 A2               2203  	LDA	,-Y		GET NEXT CHARACTER
31A8  81 4F               2204  	CMPA	#'O'		SETORIGIN?
31AA  26 05               2205  	BNE	ASN1		NO, TRY SEED
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 39

31AC  CE 40 02            2206  	LDU	#ORIGIN		SAVE VALUE
31AF  20 14               2207  	BRA	ASN9		AND QUIT
31B1  81 43               2208  ASN1	CMPA	#'C'		CHARACTER?
31B3  27 24               2209  	BEQ	ASN8		PERFORM DUMP
31B5  81 53               2210  	CMPA	#'S'		SET RANDOM SEED?
31B7  26 05               2211  	BNE	ASN2		NO, TRY NEXT
31B9  CE 40 04            2212  	LDU	#SEED		SAVE RANDOM SEED
31BC  20 07               2213  	BRA	ASN9		SAVE VALUE
31BE  81 42               2214  ASN2	CMPA	#'B'		BUFFER SIZE
31C0  26 1C               2215  	BNE	LGOTO		TRY GOTO LINE
31C2  CE 40 06            2216  	LDU	#BUFSIZ		POINT TO IT
31C5  A6 84               2217  ASN9	LDA	,X		GET TYPE
31C7  10 27 02 3A         2218  	LBEQ	DOMAIN		INVALID
31CB  EC 01               2219  	LDD	1,X		GET LENGTH
31CD  10 83 00 01         2220  ASN89	CMPD	#1		SINGLE ELEMENT?
31D1  10 26 02 35         2221  	LBNE	LENGTH		NO, IT'S INVALID
31D5  EC 03               2222  	LDD	3,X		GET VALUE
31D7  ED C4               2223  	STD	,U		SAVE IN DEST
31D9  17 F2 C3            2224  ASN8	LBSR	SKBK		BACKUP
31DC  35 D0               2225  	PULS	X,U,PC		RETURN
31DE                      2226  * BRANCH BY CHANGEING VALUE OF 'L$'
31DE  81 4C               2227  LGOTO	CMPA	#'L'		IS IT 'L'$
31E0  26 0F               2228  	BNE	TEROUT		NO, SAY ERROR
31E2  A6 84               2229  	LDA	,X		GET TYPE
31E4  10 27 02 1D         2230  	LBEQ	DOMAIN		INVALID
31E8  EC 01               2231  	LDD	1,X		GET LENGTH
31EA  27 ED               2232  	BEQ	ASN8		IF ZERO, IGNORE
31EC  CE 3C 98            2233  	LDU	#GOTO
31EF  20 DC               2234  	BRA	ASN89
31F1                      2235  * DISPLAY VALUE ON TERMINAL
31F1  81 54               2236  TEROUT	CMPA	#'T'		TERMINAL I/O?
31F3  26 08               2237  	BNE	FRMOUT		NO, TRY FORMATTED
31F5  17 FC D4            2238  	LBSR	DISPLY		DISPLAY IT
31F8  17 F2 77            2239  	LBSR	LFCR		NEW LINE
31FB  20 DC               2240  	BRA	ASN8		GO HOME
31FD  81 46               2241  FRMOUT	CMPA	#'F'		FORMATTED OUTPUT?
31FF  10 26 01 F8         2242  	LBNE	SYNTAX		NO, GET UPSET
3203  17 FC C6            2243  	LBSR	DISPLY		OUTPUT IT
3206  20 D1               2244  	BRA	ASN8		AND GO IT AGAIN
3208                      2245  * LOOK UP SYMBOL VALUE
3208  17 F2 C1            2246  ASI1	LBSR	VALSYM		IS IT A VALID SYMBOL NAME
320B  10 26 01 EC         2247  	LBNE	SYNTAX		NO, GET UPSET
320F  17 01 01            2248  	LBSR	CALLEN		GET LENGTH
3212  34 06               2249  	PSHS	A,B		SAVE LENGTH
3214  17 F2 F4            2250  	LBSR	LOOKUP		LOOK FOR DATA
3217  26 19               2251  	BNE	NEWV		CREATE NEW VARIABLE
3219  81 02               2252  	CMPA	#2		IS IT A VARIABLE
321B  10 26 01 DC         2253  	LBNE	SYNTAX		INDICATE INVALID SYNTAX
321F  BF 3C 8E            2254  	STX	TEMP4		SAVE FOR LATER
3222  AE 85               2255  	LDX	B,X		GET ADDRESS OF VARIABLE
3224  17 00 EC            2256  	LBSR	CALLEN		DO THEY NEED SAME SPACE
3227  10 A3 E4            2257  	CMPD	,S		ARE THEY SAME
322A  27 28               2258  	BEQ	ASI2		IF SO, NO NEED TO CHANGE
322C  BE 3C 8E            2259  	LDX	TEMP4		SYMBOL TABLE ENTRY BACK
322F  17 05 AB            2260  	LBSR	ERASYM		ERASE SYMBOL
3232  86 02               2261  NEWV	LDA	#2		GET TYPE
3234  10 BE 3C 8C         2262  	LDY	TEMP3		POINT TO NAME
3238  17 F3 19            2263  	LBSR	CRESYM		CREATE SYMBOL
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 40

323B  35 06               2264  	PULS	A,B		GET LENGTH
323D  EE 84               2265  	LDU	,X		GET ADDRESS OF SYMBOL
323F  AE E4               2266  	LDX	,S		GET SYMBOL VALUE
3241  34 20               2267  	PSHS	Y		SAVE POINTER
3243  1F 02               2268  	TFR	D,Y		COPY TO Y
3245  A6 80               2269  ASI3	LDA	,X+		GET BYTE FROM STRUCTURE
3247  A7 C0               2270  	STA	,U+		RESAVE
3249  31 3F               2271  	LEAY	-1,Y		BACKUP
324B  26 F8               2272  	BNE	ASI3		KEEP SAVEING
324D  35 20               2273  	PULS	Y		RESTORE Y
324F  FF 40 00            2274  	STU	FREE		SAVE FREE VALUE
3252  35 D0               2275  	PULS	X,U,PC
3254  35 06               2276  ASI2	PULS	A,B		GET COUNT
3256  EE E4               2277  	LDU	,S		GET OLD VALUE ADDRESS
3258  34 20               2278  	PSHS	Y		SAVE POINTR
325A  1F 02               2279  	TFR	D,Y		COPY
325C  A6 C0               2280  ASI4	LDA	,U+		GET DATA FROM OLD
325E  A7 80               2281  	STA	,X+		SAVE IN NEW
3260  31 3F               2282  	LEAY	-1,Y		BACKUP
3262  26 F8               2283  	BNE	ASI4		INSERT
3264  35 20               2284  	PULS	Y		RESTORE POINTER
3266  35 D0               2285  	PULS	X,U,PC		COND CONTINUE
3268                      2286  * INDEXED ASSIGNEMENT TO AN EXISTING VARIABLE
3268  17 F3 AB            2287  IASS	LBSR	DOEXPR		GET ASSIGNMENT VALUE
326B  81 5B               2288  	CMPA	#'['		TEST FOR PROPER TERMINATION
326D  10 26 01 8A         2289  	LBNE	SYNTAX		INDICATE INVALID
3271  7A 3C A4            2290  	DEC	ASSFLG		SET LAST OPERATOR
3274  A6 80               2291  	LDA	,X+		GET TYPE OF INDEX VALUE
3276  81 01               2292  	CMPA	#1		IS IT AN INTEGER VALUE
3278  10 26 01 89         2293  	LBNE	DOMAIN		IF NOT, SAY SO
327C  34 10               2294  	PSHS	X		SAVE POINTER TO VALUE
327E  17 F2 1E            2295  	LBSR	SKBK		BACKUP AGAIN
3281  17 F2 87            2296  	LBSR	LOOKUP		FIND VARIABLE
3284  10 26 01 78         2297  	LBNE	VALUE		IT'S BAD
3288  81 02               2298  	CMPA	#2		IS IT A VARIABLE?
328A  10 26 01 6D         2299  	LBNE	SYNTAX		NO, GIVE UP
328E  AE 85               2300  	LDX	B,X		POINT TO VARIABLE ADDRESS
3290  35 40               2301  	PULS	U		GET INDEX BACK
3292  10 BF 3C 9E         2302  	STY	TXTPTR		SAVE TEXT POINTER
3296  10 AE E4            2303  	LDY	,S		GET SOURCE VALUE
3299  A6 84               2304  	LDA	,X		GET TYPE OF VARIABLE
329B  A1 A0               2305  	CMPA	,Y+		SAME AS TYPE OF ARGUMENT
329D  26 6D               2306  	BNE	CDOM		NO, COMPLAIN
329F  7F 3C 84            2307  	CLR	TEMP		INDICATE SINGLE MODE
32A2  EC A1               2308  	LDD	,Y++		GET LENGTH OF SOURCE
32A4  10 83 00 01         2309  	CMPD	#1		LENGTH ONE IS SPECIAL CASE
32A8  27 08               2310  	BEQ	IDA0		IF SO, IT'S OK
32AA  10 A3 C4            2311  	CMPD	,U		SAME SIZE AS INDEX
32AD  26 56               2312  	BNE	CLEN		INDICATE LENGTH ERROR
32AF  7A 3C 84            2313  	DEC	TEMP		INDICATE NORMAL MODE
32B2  EC C1               2314  IDA0	LDD	,U++		GET LENGTH OF INDEX
32B4  27 4F               2315  	BEQ	CLEN		INDICATE LENGTH ERROR IS ZERO LENGTH INDEX
32B6  34 06               2316  IDA1	PSHS	A,B		SAVE IT
32B8  EC C1               2317  	LDD	,U++		GET INDEX VALUE
32BA  B3 40 02            2318  	SUBD	ORIGIN		SET ORIGIN VALUE
32BD  34 06               2319  	PSHS	A,B		SAVE IN STACK
32BF  EC 01               2320  	LDD	1,X		GET LENGTH OF DEST VARIABLE
32C1  83 00 01            2321  	SUBD	#1		CONVERT TO ZERO OFFSET
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 41

32C4  A3 E1               2322  	SUBD	,S++		CONVERT OFFSET
32C6  10 25 FD 10         2323  	LBCS	CIDX		INDEX ERROR IF OVER
32CA  6D 84               2324  	TST	,X		CHARACTER INFO?
32CC  27 16               2325  	BEQ	IDA2		IF SO, DON'T DOUBLE ADDRESS
32CE  58                  2326  	LSLB
32CF  49                  2327  	ROLA			DOUBLE FOR TWO BYTE ENTRIES
32D0  34 40               2328  	PSHS	U		SAVE Y POINTER
32D2  C3 00 03            2329  	ADDD	#3		OFFSET FOR TYPE AND LENGTH
32D5  33 8B               2330  	LEAU	D,X		POINT TO OFFSET
32D7  EC A1               2331  	LDD	,Y++		GET VALUE FROM SOURCE
32D9  ED C4               2332  	STD	,U		SAVE IN DATA
32DB  B6 3C 84            2333  	LDA	TEMP		ADVANCE?
32DE  26 16               2334  	BNE	IDA3
32E0  31 3E               2335  	LEAY	-2,Y		BACKUP
32E2  20 12               2336  	BRA	IDA3		END
32E4  34 40               2337  IDA2	PSHS	U		SAVE POINTER
32E6  C3 00 03            2338  	ADDD	#3		OFFSET FOR TYPE AND LENGTH
32E9  33 8B               2339  	LEAU	D,X		OFFSET TO AREA
32EB  A6 A0               2340  	LDA	,Y+		GET CHARACTER
32ED  A7 C4               2341  	STA	,U		SAVE BACK
32EF  7D 3C 84            2342  	TST	TEMP		NORMAL?
32F2  26 02               2343  	BNE	IDA3		YES, GOT FOR IT
32F4  31 3F               2344  	LEAY	-1,Y		BACKUP
32F6  35 40               2345  IDA3	PULS	U		RESTORE POINTER
32F8  35 06               2346  	PULS	A,B		RESTORE COUNT
32FA  83 00 01            2347  	SUBD	#1		OVER YET?
32FD  26 B7               2348  	BNE	IDA1		NO, GO AGAIN
32FF  10 BE 3C 9E         2349  	LDY	TXTPTR		RESTORE TEXT POINTER
3303  35 D0               2350  	PULS	X,U,PC		GO HOME
3305  10 BE 3C 9E         2351  CLEN	LDY	TXTPTR
3309  16 00 FE            2352  	LBRA	LENGTH
330C  10 BE 3C 9E         2353  CDOM	LDY	TXTPTR
3310  16 00 F2            2354  	LBRA	DOMAIN
3313                      2355  *
3313                      2356  * RETURN LENGTH (IN BYTES) OF STRUCTURE(X)
3313                      2357  *
3313  EC 01               2358  CALLEN	LDD	1,X		GET SHAPE
3315  6D 84               2359  	TST	,X		IS IT CHARACTER
3317  27 02               2360  	BEQ	CALL1		YES, DON'T DOUBLE
3319  58                  2361  	LSLB
331A  49                  2362  	ROLA			DOUBLE FOR TWO BYTE ENTRIES
331B  C3 00 03            2363  CALL1	ADDD	#3		AND IN LENGTH, AND TYPE DATA
331E  39                  2364  	RTS
331F                      2365  *
331F                      2366  * INSURE DATA IS IN WORKSPACE
331F                      2367  *
331F  34 60               2368  MVWRK	PSHS	Y,U		SAVE POINTER
3321  BC 3C 90            2369  	CMPX	TEMP5		IS IT IN WORKSPACE?
3324  27 2C               2370  	BEQ	MVRTS		ALL IS OK
3326  FE 3C 90            2371  	LDU	TEMP5		POINT
3329  A6 80               2372  	LDA	,X+		GET POINTER
332B  A7 C0               2373  	STA	,U+		SAVE
332D  10 AE 81            2374  	LDY	,X++		GET LENGTH
3330  10 AF C1            2375  	STY	,U++		SAVE
3333  4D                  2376  	TSTA			CHARACTER MOVE?
3334  27 0E               2377  	BEQ	CHRMV		IF SO, SPECIAL
3336  10 8C 00 00         2378  MV1	CMPY	#0		ZERO LENGTH?
333A  27 16               2379  	BEQ	MVRTS		IF SO, QUIT
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 42

333C  31 3F               2380  	LEAY	-1,Y		BACKUP
333E  EC 81               2381  	LDD	,X++		GET FROM SOURCE
3340  ED C1               2382  	STD	,U++		SAVE
3342  20 F2               2383  	BRA	MV1		OK
3344  10 8C 00 00         2384  CHRMV	CMPY	#0		ZERO LENGTH?
3348  27 08               2385  	BEQ	MVRTS		IF SO, QUIT
334A  31 3F               2386  	LEAY	-1,Y		BACKUP
334C  EC 80               2387  	LDD	,X+		GET CHAR
334E  ED C0               2388  	STD	,U+		SAVE CHAR
3350  20 F2               2389  	BRA	CHRMV		OK
3352  BE 3C 90            2390  MVRTS	LDX	TEMP5		POINT TO SPACE
3355  35 E0               2391  	PULS	Y,U,PC		HOME
3357                      2392  *
3357                      2393  * LOOK UP AND EXECUTE COMMAND
3357                      2394  *
3357  34 20               2395  CLOOK	PSHS	Y		SAVE COMMAND POINTER
3359  A6 80               2396  CL5	LDA	,X+		GET CHARACTER FROM TABLE
335B  2B 0E               2397  	BMI	CCHK		LAST ONE, CHECK IT
335D  A1 A0               2398  	CMPA	,Y+		DOES IT MATCH?
335F  27 F8               2399  	BEQ	CL5		YES, KEEP LOOKING
3361  A6 80               2400  CL2	LDA	,X+		GET NEXT
3363  2A FC               2401  	BPL	CL2		LOOK FOR END
3365  30 02               2402  CL3	LEAX	2,X		SKIP ADDRESS
3367  35 20               2403  	PULS	Y		RESTORE POINTER
3369  20 EC               2404  	BRA	CLOOK		AND GO AGAIN
336B  84 7F               2405  CCHK	ANDA	#$7F		REMOVE HIGH BIT
336D  27 04               2406  	BEQ	CL4		END OF TABLE
336F  A1 A0               2407  	CMPA	,Y+		IS IT SAME AS FROM BUFFER?
3371  26 F2               2408  	BNE	CL3		NO, GO AGAIN
3373  32 62               2409  CL4	LEAS	2,S		CLEAN UP STACK
3375  17 F1 0B            2410  	LBSR	SKP		ADVANCE TO PARAMETERS
3378  6E 94               2411  	JMP	[,X]		EXECUTE CODE
337A                      2412  *
337A                      2413  * ERROR MESSAGES
337A                      2414  *
337A  53 59 4E 54 41 58 + 2415  SYMSG	FCCZ	'SYNTAX'
3381  56 41 4C 55 45 00   2416  VALMSG	FCCZ	'VALUE'
3387  44 4F 4D 41 49 4E + 2417  DOMMSG	FCCZ	'DOMAIN'
338E  4C 45 4E 47 54 48 + 2418  LENMSG	FCCZ	'LENGTH'
3395  49 4E 44 45 58 00   2419  INDMSG	FCCZ	'INDEX'
339B  49 4E 54 45 52 52 + 2420  BRKMSG	FCC	'INTERRUPT'
33A4  0D                  2421  	FCB	$0D
33A5                      2422  *
33A5                      2423  * ERROR HANDLERS
33A5                      2424  *
33A5  FC 3C A2            2425  REBRK	LDD	RAMTOP		GET BUFFER ADRESS
33A8  FD 3C 90            2426  	STD	TEMP5		RESAVE
33AB  10 FE 3C A6         2427  	LDS	INPSTK		GET INPUT STACK
33AF  35 26               2428  	PULS	A,B,Y		GET VALUES BACK
33B1  FD 3C A6            2429  	STD	INPSTK		SAVE INPUT FLAG
33B4  10 BF 3C A0         2430  	STY	SAVSTK		RESAVE STACK
33B8  35 26               2431  	PULS	A,B,Y		GET MORE
33BA  FD 3C 94            2432  	STD	PARM		SAVE PARM POINTER
33BD  10 BF 3C 98         2433  	STY	GOTO		SAVE GOTO FLAG
33C1  35 26               2434  	PULS	A,B,Y		GET LINCT AND NAMPTR
33C3  FD 3C 96            2435  	STD	LINCT		SAVE LINE COUNT
33C6  10 BF 3C 9A         2436  	STY	NAMPTR		RESAVE
33CA  35 26               2437  	PULS	A,B,Y		GET TOP OF RAM
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 43

33CC  FD 3C A2            2438  	STD	RAMTOP		AND RESAVE
33CF  FC 3C A6            2439  BREAK	LDD	INPSTK		ARE WE INPUTTING?
33D2  26 D1               2440  	BNE	REBRK		YES, FIX IT UP
33D4  B6 3C 83            2441  	LDA	EXEC		EXECUTING FUNCTION?
33D7  27 0D               2442  	BEQ	BRK0		OK TO DISPLAY
33D9  A6 9F 3C 9A         2443  	LDA	[NAMPTR]	GET TYPE BITS
33DD  84 20               2444  	ANDA	#$20		IS IT LOCKED
33DF  27 05               2445  	BEQ	BRK0		NO, IT'S OK
33E1  17 04 AB            2446  	LBSR	RELEAS		RELEASE THIS ONE
33E4  20 E9               2447  	BRA	BREAK		ALWAYS A DOMAIN ERROR
33E6  8E 33 9B            2448  BRK0	LDX	#BRKMSG		DISPLAY
33E9  17 EF 9E            2449  	LBSR	OULI		DISPLAY
33EC  20 48               2450  	BRA	ERR0		AND CONTINUE
33EE                      2451  * WORKSACE IS FULL
33EE  17 F0 75            2452  WSFUL	LBSR	SYSMSG		DISPLAY MESSAGE
33F1  57 53 20 46 55 4C + 2453  	FCCZ	'WS FULL'
33F9  20 3B               2454  	BRA	ERR0		CONTINUE
33FB  8E 33 7A            2455  SYNTAX	LDX	#SYMSG
33FE  20 12               2456  	BRA	ERROR
3400  8E 33 81            2457  VALUE	LDX	#VALMSG
3403  20 0D               2458  	BRA	ERROR
3405  8E 33 87            2459  DOMAIN	LDX	#DOMMSG
3408  20 08               2460  	BRA	ERROR
340A  8E 33 8E            2461  LENGTH	LDX	#LENMSG
340D  20 03               2462  	BRA	ERROR
340F  8E 33 95            2463  INDEX	LDX	#INDMSG
3412  B6 3C 83            2464  ERROR	LDA	EXEC		EXECUTING FUNCTION?
3415  27 12               2465  	BEQ	OKDISP		OK TO DISPLAY
3417  A6 9F 3C 9A         2466  	LDA	[NAMPTR]	GET TYPE BITS
341B  84 20               2467  	ANDA	#$20		IS IT LOCKED
341D  27 0A               2468  	BEQ	OKDISP		NO, IT'S OK
341F  FC 3C A6            2469  	LDD	INPSTK		INPUTTING?
3422  26 05               2470  	BNE	OKDISP		CONTINUE
3424  17 04 68            2471  	LBSR	RELEAS		RELEASE THIS ONE
3427  20 DC               2472  	BRA	DOMAIN		ALWAYS A DOMAIN ERROR
3429  17 EF 5E            2473  OKDISP	LBSR	OULI		DISPLAY MESSAGE
342C  17 F0 37            2474  	LBSR	SYSMSG
342F  20 45 52 52 4F 52 + 2475  	FCCZ	' ERROR'
3436  B6 3C 83            2476  ERR0	LDA	EXEC		EXECUTING FUNCTION?
3439  27 11               2477  	BEQ	ERR01		NO
343B  BE 3C 9A            2478  	LDX	NAMPTR		POINT TO ENTRY
343E  FC 3C 96            2479  	LDD	LINCT		GET LINE COUNTER
3441  17 00 3F            2480  	LBSR	DSPNAM		DISPLAY IT
3444  17 F0 2B            2481  	LBSR	LFCR		NEW LINE
3447  FC 3C 96            2482  	LDD	LINCT		LINE ZERO?
344A  27 2A               2483  	BEQ	ERR9
344C  5F                  2484  ERR01	CLRB			START WITH ZERO OFFSET
344D  A6 A4               2485  ERR1	LDA	,Y		GET CHARACTER FROM Y REGISTER
344F  81 0D               2486  	CMPA	#$0D		END OF LINE?
3451  27 05               2487  	BEQ	ERR5		IF SO, TOO BAD
3453  5C                  2488  	INCB			ADVANCE
3454  31 3F               2489  	LEAY	-1,Y		AND BACKUP IN LINE
3456  20 F5               2490  	BRA	ERR1		CONTINUE
3458  31 21               2491  ERR5	LEAY	1,Y		BACK TO BEFORE CR
345A  A6 A0               2492  ERR2	LDA	,Y+		GET CHARACTER
345C  17 F0 19            2493  	LBSR	PUTCHR		DISPLAY
345F  81 0A               2494  	CMPA	#$0A		END OF LINE?
3461  26 F7               2495  	BNE	ERR2		NO, KEEP GOING
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 44

3463  5D                  2496  	TSTB			CHECK FOR OVER
3464  27 08               2497  	BEQ	ERR4		ALL DONE
3466  5A                  2498  ERR3	DECB			REDUCE COUNT
3467  27 05               2499  	BEQ	ERR4		OK
3469  17 F0 13            2500  	LBSR	SPACE		SPACE OVER
346C  20 F8               2501  	BRA	ERR3		TILL WE ARE UNDER IT
346E  86 5E               2502  ERR4	LDA	#'^'		GET ERROR MARK
3470  17 F0 05            2503  	LBSR	PUTCHR		DISPLAY
3473  17 EF FC            2504  	LBSR	LFCR		NEW LINE
3476  7A 3C A5            2505  ERR9	DEC	ERRFLG		INDICATE ERROR HAPPENED
3479  FC 3C A6            2506  	LDD	INPSTK		ARE WE INPUTTING
347C  10 26 FC DF         2507  	LBNE	INNP3		IF SO, RECOVER
3480  16 EB FD            2508  	LBRA	CMD		ENTER COMMAND MODE
3483                      2509  * DISPLAY NAME OF FUNCTION, A,B= LINE NUMBER, X= NAME POINTER
3483  34 06               2510  DSPNAM	PSHS	A,B		SAVE REGS
3485  E6 80               2511  	LDB	,X+		GET LENGTH OF NAME
3487  C4 1F               2512  	ANDB	#$1F		MASKOFF SHIT
3489  A6 85               2513  ERRP	LDA	B,X		GET CHARACTER
348B  17 EF EA            2514  	LBSR	PUTCHR		DISPLAY
348E  5A                  2515  	DECB			REDUCE COUNT
348F  26 F8               2516  	BNE	ERRP		KEEP GOING
3491  86 5B               2517  	LDA	#'['		START
3493  17 EF E2            2518  	LBSR	PUTCHR		DISPLAY
3496  35 06               2519  	PULS	A,B		RESTORE IT
3498  17 FA 63            2520  	LBSR	DECOUT		DISPLAY
349B  86 5D               2521  	LDA	#']'		CLOSING BRACE
349D  16 EF D8            2522  	LBRA	PUTCHR		DISPLAY
34A0                      2523  *
34A0                      2524  * START A FUNCTION
34A0                      2525  *
34A0  34 20               2526  FUNC	PSHS	Y		SAVE TEXT POINTER
34A2  10 BE 3C A2         2527  	LDY	RAMTOP		GET TOP OF FREE RAM
34A6  34 20               2528  	PSHS	Y		RESAVE
34A8  10 BE 3C 9A         2529  	LDY	NAMPTR		GET NAME POINTER
34AC  34 20               2530  	PSHS	Y		SAVE
34AE  BF 3C 9A            2531  	STX	NAMPTR		SAVE OUR NAME
34B1  10 AE 85            2532  	LDY	B,X		GET TEXT POINTER
34B4  BE 3C 96            2533  	LDX	LINCT		GET LINE COUNTER
34B7  FC 3C 98            2534  	LDD	GOTO		GET GOTO POINTER
34BA  34 16               2535  	PSHS	A,B,X		SAVE
34BC  BE 3C 94            2536  	LDX	PARM		SAVE OUT GOTO VALUE
34BF  FC 3C A0            2537  	LDD	SAVSTK		GET SAVED STACK VALUE
34C2  34 16               2538  	PSHS	A,B,X		SAVE
34C4  FC 3C 84            2539  	LDD	TEMP		GET TEMPORARY STORAGE
34C7  FD 3C 94            2540  	STD	PARM		SAVE PARAMETER
34CA  4F                  2541  	CLRA			CLEAR IT
34CB  5F                  2542  	CLRB			START WITH LINE #0
34CC  FD 3C 96            2543  	STD	LINCT		SET LINE NUMBER
34CF  FD 3C 98            2544  	STD	GOTO		SAVE WHERE WE WANT TO GO
34D2  34 20               2545  	PSHS	Y		SAVE POINTER TO LOCAL SYMBOLS
34D4  7C 3C 82            2546  	INC	LEVEL		DOWN ANOTHER LEVEL
34D7  7C 3C 83            2547  	INC	EXEC		EXECUTING
34DA  10 FF 3C A0         2548  	STS	SAVSTK		SAVE STACK
34DE  FC 3C 90            2549  	LDD	TEMP5		GET TOP OF FREE RAM
34E1  FD 3C A2            2550  	STD	RAMTOP		SET IT UP
34E4                      2551  * FIX UP FOR LOCAL SYMBOLS
34E4  17 EF A7            2552  LCVAR	LBSR	SKIP		ADVANCE TO NEXT
34E7  81 0D               2553  	CMPA	#$0D		END OF LINE?
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 45

34E9  27 1B               2554  	BEQ	FNGO		GO AHEAD
34EB  81 3B               2555  	CMPA	#';'		SEMI?
34ED  10 26 FF 0A         2556  	LBNE	SYNTAX		INDICATE SYNTAX ERROR
34F1  17 EF C1            2557  	LBSR	SFSYM		ADVANCE
34F4  34 20               2558  	PSHS	Y		SAVE
34F6  31 3F               2559  	LEAY	-1,Y		BACK TO SYMBOL
34F8  17 F0 10            2560  	LBSR	LOOKUP		LOOK FOR IT
34FB  26 05               2561  	BNE	LCV1		DON'T ZAP IF NOT THERE
34FD  B6 3C 82            2562  	LDA	LEVEL		GET OUR LEVEL
3500  A7 01               2563  	STA	1,X		INDICATE THAT IT IS NESTED
3502  35 20               2564  LCV1	PULS	Y		RESTORE Y REG
3504  20 DE               2565  	BRA	LCVAR		AND GO AGAIN
3506                      2566  * CREATE LABEL ENTRIES IN SYMBOL TABLE
3506  CE 00 00            2567  FNGO	LDU	#0
3509  A6 A0               2568  FUNGT	LDA	,Y+		GET CHAR FROM LINE
350B  2B 2D               2569  	BMI	FNGOX		END OF FILE, QUIT
350D  81 0D               2570  	CMPA	#$0D		LOOK FOR CARRAGE RETURN
350F  26 F8               2571  	BNE	FUNGT		LOOK TILL WE FIND
3511  33 41               2572  	LEAU	1,U		ADVANCE
3513  17 EF 9F            2573  	LBSR	SFSYM		SKIP FORWARD
3516  27 F1               2574  	BEQ	FUNGT		NO SYMBOL, GET UPSET
3518  81 3A               2575  	CMPA	#':'		LABEL?
351A  26 ED               2576  	BNE	FUNGT		NO, SKIP IT
351C  34 20               2577  	PSHS	Y		SAVE POINTER
351E  31 3F               2578  	LEAY	-1,Y		BACKUP
3520  17 EF E8            2579  	LBSR	LOOKUP		DOES IT EXIST?
3523  26 05               2580  	BNE	FNGOZ		NO, DON'T SAVE IT
3525  B6 3C 82            2581  	LDA	LEVEL		GET LEVEL
3528  A7 01               2582  	STA	1,X		SAVE IT
352A  10 AE E4            2583  FNGOZ	LDY	,S		GET POINTER BACK
352D  31 3F               2584  	LEAY	-1,Y		BACKUP
352F  86 03               2585  	LDA	#3		INDICATE LABEL
3531  17 F0 20            2586  	LBSR	CRESYM		SAVE IT
3534  EF 84               2587  	STU	,X		SAVE LINE NUMBER
3536  35 20               2588  	PULS	Y		RESTORE Y
3538  20 CF               2589  	BRA	FUNGT		CONTINUE
353A  8E 3A 3E            2590  FNGOX	LDX	#IOTA0		POINT TO EMPTY VECTOR FOR DEFAULT RETURN
353D  10 AE E4            2591  	LDY	,S		GET TEXT POINTER
3540                      2592  * START IT UP
3540  A6 A0               2593  FNXLIN	LDA	,Y+		ADVANCE TO NEXT
3542  81 0D               2594  	CMPA	#$0D		END OF LINE?
3544  26 FA               2595  	BNE	FNXLIN		CONTINUE
3546  FC 3C 98            2596  	LDD	GOTO		IS THIS WEHERE WE WANT TO GO?
3549  27 10               2597  	BEQ	GOTOK		GOTO IS OK
354B  34 10               2598  	PSHS	X		SAVE X
354D  AE 62               2599  	LDX	2,S		GET TEXT ADRESS
354F  17 EE 47            2600  	LBSR	FNDL1		LOCATE THE LINE
3552  1F 12               2601  	TFR	X,Y		COPY BACK
3554  35 10               2602  	PULS	X		RESTORE X
3556  FC 3C 8C            2603  	LDD	TEMP3		GET LINE NUMBER
3559  20 06               2604  	BRA	GOT1
355B  FC 3C 96            2605  GOTOK	LDD	LINCT		GET LINE COUNTER
355E  C3 00 01            2606  	ADDD	#1		ADVANCE
3561  FD 3C 96            2607  GOT1	STD	LINCT		RESAVE
3564  4F                  2608  	CLRA
3565  5F                  2609  	CLRB
3566  FD 3C 98            2610  	STD	GOTO		RESET GOTO FLAG
3569  A6 A4               2611  	LDA	,Y		GET NEXT CHARACTER
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 46

356B  81 FF               2612  	CMPA	#$FF		END OF FUNCTION?
356D  27 11               2613  	BEQ	EFUNC		NO, GO AGAIN
356F  81 2A               2614  	CMPA	#'*'		COMMENT?
3571  27 CD               2615  	BEQ	FNXLIN		GO TO NEXT LINE
3573  3F                  2616  	SWI			SOFTWARE INTERRUPT TO DOS
3574  23                  2617  	FCB	35		SYSTEM REQUEST NUMBER
3575  81 03               2618  	CMPA	#$03		CONTROL C?
3577  10 27 FE 54         2619  	LBEQ	BREAK		INTERRUPT PROGRAM
357B  17 F0 6F            2620  NOINT1	LBSR	EXPR		EXECUTE
357E  20 C0               2621  	BRA	FNXLIN
3580                      2622  * END OF A FUNCTION
3580  35 20               2623  EFUNC	PULS	Y		GET POINTER BACK
3582  34 10               2624  	PSHS	X		SAVE IT
3584  17 EF 07            2625  EFUN1	LBSR	SKIP		LOOK FOR IT
3587  81 0D               2626  	CMPA	#$0D		END?
3589  27 13               2627  	BEQ	EFUPOT		IF SO, EXIT
358B  17 EF 27            2628  	LBSR	SFSYM		SKIP TO END
358E  34 20               2629  	PSHS	Y		SAVE IT
3590  31 3F               2630  	LEAY	-1,Y		BACKUP
3592  17 EF 76            2631  	LBSR	LOOKUP		LOOK FOR IT
3595  26 03               2632  	BNE	EFUN3		NOT FOUND
3597  17 02 43            2633  	LBSR	ERASYM		ERASE IT
359A  35 20               2634  EFUN3	PULS	Y		RESTORE POINTER
359C  20 E6               2635  	BRA	EFUN1		AND GO AGAIN
359E  A6 A0               2636  EFUPOT	LDA	,Y+		GET CHAR
35A0  2B 1D               2637  	BMI	EFUN2		END, QUIT
35A2  81 0D               2638  	CMPA	#$0D		END OF LINE?
35A4  26 F8               2639  	BNE	EFUPOT		GO
35A6  17 EF 0C            2640  	LBSR	SFSYM		SCAN FOR SYMBOL
35A9  27 F3               2641  	BEQ	EFUPOT		NONE, SKIP IT
35AB  81 3A               2642  	CMPA	#':'		IS IT LOCAL LABEL?
35AD  26 EF               2643  	BNE	EFUPOT		NO, SKIP IT
35AF  34 20               2644  	PSHS	Y		SAVE IT
35B1  31 3F               2645  	LEAY	-1,Y		BACKUP
35B3  17 EF 55            2646  	LBSR	LOOKUP		LOOK FOR IT
35B6  26 03               2647  	BNE	NOFUNE		DON'T ERASE
35B8  17 02 22            2648  	LBSR	ERASYM		ERASE IT
35BB  35 20               2649  NOFUNE	PULS	Y		RESTORE Y
35BD  20 DF               2650  	BRA	EFUPOT		CONTINUE
35BF                      2651  * REPLACE SMUDGED VARIABLES
35BF  8E 40 0A            2652  EFUN2	LDX	#SYMTAB		POINT TO SYMBOL TABLE
35C2  B6 3C 82            2653  	LDA	LEVEL		GET OUR LEVEL
35C5  E6 84               2654  EFUN4	LDB	,X		GET TYPE BYTE
35C7  C4 1F               2655  	ANDB	#$1F		MASK GARBAGE
35C9  27 0B               2656  	BEQ	EFUN5		END OF TABLE
35CB  A1 01               2657  	CMPA	1,X		IS THIS ONE WE NESTED?
35CD  26 02               2658  	BNE	EFUN6		NO, SKIP IT
35CF  6F 01               2659  	CLR	1,X		RELEASE IT
35D1  CB 04               2660  EFUN6	ADDB	#4		ADVANCE EXTRA BYTES
35D3  3A                  2661  	ABX			SKIP AHEAD
35D4  20 EF               2662  	BRA	EFUN4		GO IT AGAIN
35D6  35 10               2663  EFUN5	PULS	X		RESTORE REGISTERS
35D8  35 26               2664  	PULS	A,B,Y		RESTORE PARAMETER ADDRESS
35DA  FD 3C A0            2665  	STD	SAVSTK		REPLACE SAVED STACK POINTER
35DD  10 BF 3C 94         2666  	STY	PARM		SET PARAMETER VALUE
35E1  35 26               2667  	PULS	A,B,Y		RESTORE NAME POINTER
35E3  FD 3C 98            2668  	STD	GOTO		SAVE
35E6  10 BF 3C 96         2669  	STY	LINCT		SAVE LINE COUNTER
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 47

35EA  35 26               2670  	PULS	A,B,Y		RESTORE VARIABLES
35EC  FD 3C 9A            2671  	STD	NAMPTR		RESET LINE COUNTER
35EF  10 BF 3C A2         2672  	STY	RAMTOP		SET BUFFER ADDRESS
35F3  7A 3C 82            2673  	DEC	LEVEL		RESET MODE
35F6  7A 3C 83            2674  	DEC	EXEC		RELEASE EXECUTION FLAG
35F9  7F 3C A4            2675  	CLR	ASSFLG		NO ASSIGNMENT
35FC  35 A0               2676  	PULS	Y,PC		BACKUP AND RETURN
35FE                      2677  *
35FE                      2678  * SYSTEM COMMAND DEFINTIONS
35FE                      2679  *
35FE                      2680  * CONTINUE COMMAND
35FE  10 8E 3A 4C         2681  CONCMD	LDY	#CONTIN		POINT AT FILENAME
3602  17 01 75            2682  	LBSR	SAV5		PERFORM SAVE
3605                      2683  * ')OFF' COMMAND
3605  4F                  2684  OFF	CLRA			INDICATE MESSAGES
3606  3F                  2685  	SWI			SOFTWARE INTERRUPT TO DOS
3607  68                  2686  	FCB	104		SYSTEM REQUEST NUMBER
3608  4F                  2687  	CLRA			SET ZERO RC
3609  3F                  2688  	SWI			SOFTWARE INTERRUPT TO DOS
360A  00                  2689  	FCB	0		SYSTEM REQUEST NUMBER
360B                      2690  * ')LBLS' COMMAND
360B  86 60               2691  LBLS	LDA	#$60		GET TYPE
360D  B7 3C 84            2692  	STA	TEMP		SAVE IT
3610  20 05               2693  	BRA	FNST1		SAVE SINGLE TYPE LIST
3612                      2694  * ')VARS' COMMAND
3612  86 40               2695  VARS	LDA	#$40		INDICATE LOOKING FOR VARIABLES
3614  B7 3C 84            2696  	STA	TEMP		SET INDICATOR
3617  86 E0               2697  FNST1	LDA	#$E0		SET MASK
3619  20 05               2698  	BRA	SRCSY		SEARCH SYMBOL TABLE
361B                      2699  * ')FNS' COMMAND
361B  7F 3C 84            2700  FNS	CLR	TEMP		INDICATE LOOKING FOR FUNCTIONS
361E  86 C0               2701  	LDA	#$C0		PROPER MASK
3620  B7 3C 85            2702  SRCSY	STA	TEMP+1		SAVE IN LOCATION
3623  86 FF               2703  	LDA	#$FF		GET END OF TABLE POINTER
3625  A7 9F 40 00         2704  	STA	[FREE]		INITIALIZE WORKSPACE
3629  8E 40 0A            2705  	LDX	#SYMTAB		POINT TO TABLE
362C  E6 80               2706  FNS1	LDB	,X+		GET LENGTH
362E  1F 98               2707  	TFR	B,A		SAVE FOR TYPE REFERENCE
3630  C4 1F               2708  	ANDB	#$1F		REMOVE TYPE INFO
3632  27 54               2709  	BEQ	FNS4		QUIT IF END
3634  B4 3C 85            2710  	ANDA	TEMP+1		MASK OFF TYPE INFO
3637  B1 3C 84            2711  	CMPA	TEMP		DOES IT MATCH?
363A  26 43               2712  	BNE	FNS3		NO, SKIP IT
363C  10 BE 40 00         2713  	LDY	FREE		POINT TO WORK SPACE
3640  34 24               2714  INW0	PSHS	B,Y		SAVE WRKSPC POINTER
3642  A6 A4               2715  	LDA	,Y		IS THIS THE END?
3644  81 FF               2716  	CMPA	#$FF		END OF TABLE?
3646  27 17               2717  	BEQ	INW2		PUT IT HERE
3648  A6 A0               2718  INW1	LDA	,Y+		GET CHARCTER FROM TABLE
364A  27 0B               2719  	BEQ	INW3		DON'T PUT IT HERE
364C  A1 85               2720  	CMPA	B,X		ARE WE OVER
364E  25 07               2721  	BLO	INW3		DON'T PUT IT HERE
3650  22 0D               2722  	BHI	INW2		YES, GO FOR IT
3652  5A                  2723  	DECB			BACKUP
3653  26 F3               2724  	BNE	INW1		KEEP GOING TILL DONE
3655  20 08               2725  	BRA	INW2		INSERT IT HERE
3657  35 24               2726  INW3	PULS	B,Y		RESTORE
3659  A6 A0               2727  INW5	LDA	,Y+		ADVANCE
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 48

365B  26 FC               2728  	BNE	INW5		TILL WE FIND NEXT
365D  20 E1               2729  	BRA	INW0		AND TRY AGAIN
365F  A6 A0               2730  INW2	LDA	,Y+		FIND END
3661  81 FF               2731  	CMPA	#$FF		KEEP LOOKING
3663  26 FA               2732  	BNE	INW2		NOT HERE
3665  35 04               2733  	PULS	B		RESTORE LENGTH
3667  5C                  2734  	INCB			ADVANCE FOR ZERO VALUE
3668  A6 A4               2735  INW4	LDA	,Y		GET DATA FROM TABLE
366A  A7 A5               2736  	STA	B,Y		SAVE HIGHER UP
366C  31 3F               2737  	LEAY	-1,Y		BACKUP FOR LATER
366E  10 AC E4            2738  	CMPY	,S		ARE WE BACK YET?
3671  24 F5               2739  	BHS	INW4		NO, KEEP LOOKING
3673  35 20               2740  	PULS	Y		RESTORE POITION
3675  5A                  2741  	DECB			CONVERT BACK TO LENGTH
3676  A6 85               2742  FNS2	LDA	B,X		GET CHARACTER
3678  A7 A0               2743  	STA	,Y+		SAVE IN RAM
367A  5A                  2744  	DECB			REDUCE COUNT
367B  26 F9               2745  	BNE	FNS2		AND KEEP GOING
367D  6F A4               2746  	CLR	,Y		INDICATE END OF ENTRY
367F  E6 1F               2747  FNS3	LDB	-1,X		GET LENGTH AGAIN
3681  C4 1F               2748  	ANDB	#$1F		REMOVE TYPE INFO
3683  CB 03               2749  	ADDB	#3		OFFSET TO NEXT
3685  3A                  2750  	ABX	B,X		SKIP TO NEXT
3686  20 A4               2751  	BRA	FNS1		AND TRY AGAIN
3688  BE 40 00            2752  FNS4	LDX	FREE		POINT TO WORKSPACE
368B  5F                  2753  FNS5	CLRB			SET PRINT POSITION TO ZERO
368C  A6 80               2754  FNS6	LDA	,X+		GET DATA FROM WORKSPACE
368E  27 0A               2755  	BEQ	FNS7		ADVANCE TO NEXT
3690  81 FF               2756  	CMPA	#$FF		END OF TABLE?
3692  27 17               2757  	BEQ	FNS8		IF SO, STOP
3694  17 ED E1            2758  	LBSR	PUTCHR		DISPLAY
3697  5C                  2759  	INCB			INDICATE WE ADVANCED
3698  20 F2               2760  	BRA	FNS6		AND CONTINUE
369A  17 ED E2            2761  FNS7	LBSR	SPACE		DISPLAY A SPACE
369D  5C                  2762  	INCB			ADVANCE
369E  C5 07               2763  	BITB	#$07		TEST FOR AT A TAB STOP
36A0  26 F8               2764  	BNE	FNS7		NO, KEEP GOING
36A2  C1 3C               2765  	CMPB	#60		ARE WE OVER LIMIT?
36A4  25 E6               2766  	BLO	FNS6		NO, WE ARE OK
36A6  17 ED C9            2767  	LBSR	LFCR		NEW LINE
36A9  20 E0               2768  	BRA	FNS5		AND TRY AGAIN
36AB  5D                  2769  FNS8	TSTB			ARE WE AT BEGINNING OF LINE?
36AC  27 03               2770  	BEQ	NOLF		NO NEED TO NEW LINE
36AE  17 ED C1            2771  	LBSR	LFCR		NEW LINE
36B1  39                  2772  NOLF	RTS
36B2                      2773  * ')SYSTEM' COMMAND
36B2  34 20               2774  SYSTEM	PSHS	Y		SAVE COMMAND
36B4  4F                  2775  	CLRA
36B5  3F                  2776  	SWI			SOFTWARE INTERRUPT TO DOS
36B6  68                  2777  	FCB	104		SYSTEM REQUEST NUMBER
36B7  35 20               2778  	PULS	Y		RESTORE COMMAND
36B9  17 ED C7            2779  	LBSR	SKP		CHECK FOR OPERAND
36BC  27 04               2780  	BEQ	DOSENT		EXECUTE DOS COMMAND
36BE  3F                  2781  	SWI			SOFTWARE INTERRUPT TO DOS
36BF  64                  2782  	FCB	100		SYSTEM REQUEST NUMBER
36C0  20 02               2783  	BRA	SYST1		AND QUIT
36C2  3F                  2784  DOSENT	SWI			SOFTWARE INTERRUPT TO DOS
36C3  65                  2785  	FCB	101		SYSTEM REQUEST NUMBER
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 49

36C4  4F                  2786  SYST1	CLRA			DISABLE MESSAGES
36C5  3F                  2787  	SWI			SOFTWARE INTERRUPT TO DOS
36C6  69                  2788  	FCB	105		SYSTEM REQUEST NUMBER
36C7  39                  2789  	RTS
36C8                      2790  * ')LIB' COMMAND
36C8  17 ED B8            2791  LIB	LBSR	SKP		LOOK FOR NAME
36CB  26 06               2792  	BNE	LIB1		DON'T ASSUME DEFAULT
36CD  10 8E 3A 41         2793  	LDY	#DEFNAM		POINT TO DEFAULT NAME
36D1  20 03               2794  	BRA	LIB2		AND DISPLAY IT
36D3  17 EE FA            2795  LIB1	LBSR	FILNAM		GET FILENAME
36D6  3F                  2796  LIB2	SWI			SOFTWARE INTERRUPT TO DOS
36D7  09                  2797  	FCB	9		SYSTEM REQUEST NUMBER
36D8  10 26 02 AA         2798  	LBNE	UNCMD		ERROR, QUIT
36DC  3F                  2799  	SWI			SOFTWARE INTERRUPT TO DOS
36DD  5E                  2800  	FCB	94		SYSTEM REQUEST NUMBER
36DE  27 11               2801  	BEQ	LIB3		OK
36E0  17 ED 83            2802  	LBSR	SYSMSG		DISPLAY MESSAGE
36E3  4C 49 42 52 41 52 + 2803  	FCCZ	'LIBRARY EMPTY'
36F1  39                  2804  LIB3	RTS
36F2                      2805  * ')WSID' COMMAND
36F2  17 ED 8E            2806  WSID	LBSR	SKP		LOOK FOR OPERAND
36F5  27 22               2807  	BEQ	WSID1		IF NONE, SHOW IT
36F7  17 EE D6            2808  	LBSR	FILNAM		GET FILENAME
36FA  3F                  2809  	SWI			SOFTWARE INTERRUPT TO DOS
36FB  0A                  2810  	FCB	10		SYSTEM REQUEST NUMBER
36FC  10 26 02 86         2811  	LBNE	UNCMD		FAILED
3700  31 08               2812  	LEAY	8,X		SKIP TO NAME FIELD
3702  17 ED 55            2813  	LBSR	DSPSTR		DISPLAY MESSAGE
3705  57 41 53 20 00      2814  	FCCZ	'WAS '
370A  8D 14               2815  	BSR	DWSID		DISPLAY WHAT IT WAS
370C  C6 08               2816  WSISET	LDB	#8		MOVE EIGHT CHARACTERS
370E  8E 3C A8            2817  	LDX	#ID		POINT TO ID
3711  A6 A0               2818  WSID3	LDA	,Y+		GET CHAR
3713  A7 80               2819  	STA	,X+		SAVE ID
3715  5A                  2820  	DECB			REDUCE COUNT
3716  26 F9               2821  	BNE	WSID3		AND SAVE IT ALL
3718  39                  2822  WSID2	RTS
3719  17 ED 3E            2823  WSID1	LBSR	DSPSTR		DISPLAY MESSAGE
371C  49 53 20 00         2824  	FCCZ	'IS '
3720                      2825  * DISPLAY WORKSPACE ID
3720  8E 3C A8            2826  DWSID	LDX	#ID		POINT TO ID
3723  C6 08               2827  	LDB	#8		MAX EIGHT CHARACTERS
3725  A6 80               2828  WSID4	LDA	,X+		GET CHAR
3727  27 06               2829  	BEQ	WSID5		QUIT
3729  17 ED 4C            2830  	LBSR	PUTCHR		OUTPUT
372C  5A                  2831  	DECB			REDUCE COUNT
372D  26 F6               2832  	BNE	WSID4		AND CONTINUE
372F  17 ED 40            2833  WSID5	LBSR	LFCR		NEW LINE
3732  39                  2834  	RTS
3733  17 ED 30            2835  NOTSI	LBSR	SYSMSG		DISPLAY MESSAGE
3736  4E 4F 54 20 57 49 + 2836  	FCCZ	'NOT WITH SI'
3742  39                  2837  	RTS
3743                      2838  * ')SAVE' COMMAND
3743  17 ED 3D            2839  SAVE	LBSR	SKP		LOOK FOR PARAMETER
3746  26 2F               2840  	BNE	SAV1		USER SUPPLIED FILENAME
3748  8E 3C A8            2841  	LDX	#ID		POINT TO SAVED ID
374B  C6 08               2842  	LDB	#8		MAX EIGHT CHARACTERS
374D  10 8E 20 6C         2843  	LDY	#CID		POINT TO CID
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 50

3751  A6 80               2844  SAV6	LDA	,X+		GET CHARACTER FROM ID
3753  A1 A0               2845  	CMPA	,Y+		IS IT SAME AS CLEAR
3755  26 06               2846  	BNE	SAV7		NO, IT'S OK
3757  5A                  2847  	DECB			REDUCE COUNT
3758  26 F7               2848  	BNE	SAV6		KEEP LOOKING
375A  16 E9 0C            2849  	LBRA	CLMSG		GET UPSET
375D  8E 3C A8            2850  SAV7	LDX	#ID		POINT TO ID
3760  C6 08               2851  	LDB	#8		MOVE EIGHT CHARACTERS
3762  10 8E 3C 00         2852  	LDY	#RAM		POINT TO INPUT BUFFER
3766  34 20               2853  	PSHS	Y		SAVE POINTER
3768  A6 80               2854  SAV3	LDA	,X+		GET CHAR
376A  27 05               2855  	BEQ	SAV4		END, GO AGAIN
376C  A7 A0               2856  	STA	,Y+		SAVE IN OUTPUT
376E  5A                  2857  	DECB			REDUCE COUNT
376F  26 F7               2858  	BNE	SAV3		AND KEEP GOING
3771  86 0D               2859  SAV4	LDA	#$0D		GET CR
3773  A7 A4               2860  	STA	,Y		SAVE IN FILENAME
3775  35 20               2861  	PULS	Y		RESTORE POINTER
3777  17 EE 56            2862  SAV1	LBSR	FILNAM		GET FILENAME
377A  FC 3C A0            2863  SAV5	LDD	SAVSTK		GET SAVED STACK
377D  10 83 40 00         2864  	CMPD	#STACK		DO WE HAVE SI?
3781  26 B0               2865  	BNE	NOTSI		NOT WITH SI
3783  3F                  2866  	SWI			SOFTWARE INTERRUPT TO DOS
3784  0A                  2867  	FCB	10		SYSTEM REQUEST NUMBER
3785  10 26 01 FD         2868  	LBNE	UNCMD		IF BAD, SKIP IT
3789  31 08               2869  	LEAY	8,X		POINT TO FILENAME
378B  17 FF 7E            2870  	LBSR	WSISET		SET ID
378E  FC 40 00            2871  	LDD	FREE		GET FIRST FREE ADDRESS
3791  83 40 00            2872  	SUBD	#FREE		AND CALCULATE OFFSET
3794  1F 01               2873  	TFR	D,X		COPY TO X FOR DIVIDE
3796  CC 02 00            2874  	LDD	#512		SIZE OF DISK SECTORS
3799  17 EE 10            2875  	LBSR	DIV		PERFORM DIVISION
379C  10 83 00 00         2876  	CMPD	#0		ANY REMAINDER
37A0  27 02               2877  	BEQ	SAV2		NO INC
37A2  30 01               2878  	LEAX	1,X		ADVANCE FOR REMAINDER OF SECTOR
37A4  1F 10               2879  SAV2	TFR	X,D		COPY SIZE TO D
37A6  8E 40 00            2880  	LDX	#FREE		POINT TO START OF WS
37A9  3F                  2881  	SWI			SOFTWARE INTERRUPT TO DOS
37AA  36                  2882  	FCB	54		SYSTEM REQUEST NUMBER
37AB  10 26 01 ED         2883  	LBNE	SYSERR		INDICATE SYSTEM ERROR
37AF  39                  2884  	RTS
37B0                      2885  * ')ERASE' COMMAND
37B0  17 ED 02            2886  ERASE	LBSR	SFSYM		LOOK FOR SYMBOLS
37B3  10 27 01 CF         2887  	LBEQ	UNCMD		INVALID COMMAND
37B7  10 BF 3C 84         2888  	STY	TEMP		SAVE FOR LATER
37BB  17 00 F5            2889  	LBSR	DOREST		PERFORM RESET
37BE  10 BE 3C 84         2890  	LDY	TEMP		AND GET POINTER BACK
37C2  31 3F               2891  	LEAY	-1,Y		BACKUP TO SYMBOL
37C4  17 ED 44            2892  	LBSR	LOOKUP		LOOK FOR SYMBOL
37C7  26 04               2893  	BNE	NOTFNS		DOES NOT EXIST
37C9  8D 12               2894  	BSR	ERASYM		ERASE IT
37CB  20 0D               2895  	BRA	NOTF1
37CD  17 EC 96            2896  NOTFNS	LBSR	SYSMSG		DISPLAY MESSAGE
37D0  4E 4F 54 20 46 4F + 2897  	FCCZ	'NOT FOUND'
37DA  16 E8 A3            2898  NOTF1	LBRA	CMD		GO HOME
37DD                      2899  *
37DD                      2900  * ERASES SYMBOL TABLE ENTRY POINTED TO BY "X" REGISTER
37DD                      2901  *
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 51

37DD                      2902  * DETERMINE TYPE OF SYMBOL
37DD  34 10               2903  ERASYM	PSHS	X		SAVE POINTER TO SYMBOL
37DF  A6 84               2904  	LDA	,X		GET TYPE/LENGTH
37E1  1F 89               2905  	TFR	A,B		COPY
37E3  84 E0               2906  	ANDA	#$E0		MASK OFF LENGTH
37E5  C4 1F               2907  	ANDB	#$1F		MASK OFF TYPE
37E7  CB 02               2908  	ADDB	#2		ADVANCE PAST TYPE/LENGTH, NEST
37E9  3A                  2909  	ABX			ADVANCE PAST NAME
37EA  10 AE 81            2910  	LDY	,X++		GET LENGTH
37ED  10 BF 3C 88         2911  	STY	TEMP1		SAVE ADDRESS
37F1  7F 3C 8A            2912  	CLR	TEMP2		SET ZERO OFFSET
37F4  7F 3C 8B            2913  	CLR	TEMP2+1		SET ZERO OFFSET
37F7  81 60               2914  	CMPA	#$60		IS IT LABEL TYPE SYMBOL?
37F9  27 20               2915  	BEQ	RMSYM		IF SO, IT'S A SPECIAL CASE
37FB                      2916  * DETERMINE SIZE OF SYMBOL
37FB  10 BE 40 00         2917  ERANXT	LDY	FREE		USE FREE FOR OFFSET
37FF  E6 84               2918  	LDB	,X		GET TYPE/LENGTH
3801  1F 98               2919  	TFR	B,A		COPY
3803  84 E0               2920  	ANDA	#$E0		MASK OFF LENGTH
3805  C4 1F               2921  	ANDB	#$1F		MASK OFF TYPE
3807  27 0A               2922  	BEQ	FREOFF		END OF TABLE, REMOVE IT
3809  CB 02               2923  	ADDB	#2		ADVANCE PAST TYPE/LENGTH, NEST BYTES
380B  3A                  2924  	ABX			SKIP NAME AS WELL
380C  10 AE 81            2925  	LDY	,X++		GET ADDRESS
380F  81 60               2926  	CMPA	#$60		IS IT LABEL TYPE SYMBOL?
3811  27 E8               2927  	BEQ	ERANXT		IF SO, CONTINUE LOOKING
3813  1F 20               2928  FREOFF	TFR	Y,D		GET ADDRESS
3815  B3 3C 88            2929  	SUBD	TEMP1		CONVERT TO OFFSET
3818  FD 3C 8A            2930  	STD	TEMP2		SAVE OFFSET
381B                      2931  * REMOVE SYMBOL TABLE ENTRY, AND ADJUST ADDRESSES
381B  35 10               2932  RMSYM	PULS	X		RESTORE POINTER TO SYMBOL
381D  E6 84               2933  	LDB	,X		GET LENGTH
381F  C4 1F               2934  	ANDB	#$1F		MASK OFF LENGTH
3821  CB 04               2935  	ADDB	#4		OFFSET TO NEXT
3823  31 85               2936  	LEAY	B,X		POINT TO NEXT SYMBOL
3825  E6 A0               2937  RMS1	LDB	,Y+		GET CHAR FROM SYMBOL
3827  E7 80               2938  	STB	,X+		SAVE
3829  1F 98               2939  	TFR	B,A		COPY
382B  84 E0               2940  	ANDA	#$E0		MASK LENGTH
382D  C4 1F               2941  	ANDB	#$1F		CALCULATE LENGTH
382F  27 1A               2942  	BEQ	RMS2		IF END, QUIT
3831  CB 03               2943  	ADDB	#3		OFFSET FOR NEXT
3833  34 02               2944  	PSHS	A		SAVE SYMBOL TYPE
3835  A6 A0               2945  RMS11	LDA	,Y+		GET BYTE
3837  A7 80               2946  	STA	,X+		SAVE
3839  5A                  2947  	DECB			REDUCE COUNT
383A  26 F9               2948  	BNE	RMS11		CONTINUE COPYING
383C  35 02               2949  	PULS	A		RESTORE TYPE
383E  81 60               2950  	CMPA	#$60		LABEL TYPE?
3840  27 E3               2951  	BEQ	RMS1		IF SO, FORGET IT
3842  EC 1E               2952  	LDD	-2,X		GET ADRESS
3844  B3 3C 8A            2953  	SUBD	TEMP2		SUBTRACT OFFSET
3847  ED 1E               2954  	STD	-2,X		RESAVE
3849  20 DA               2955  	BRA	RMS1		AND CONTINUE
384B                      2956  * MOVE MEMORY BACK REQUIRED AMOUNT
384B  FC 3C 8A            2957  RMS2	LDD	TEMP2		GET OFFSET
384E  27 18               2958  	BEQ	NOMOVE		DON'T MOVE IF NO OFFSET
3850  10 BE 3C 88         2959  	LDY	TEMP1		GET SYMBOL ADDRESS
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 52

3854  30 AB               2960  	LEAX	D,Y		POINT TO NEW LOCATION
3856  BC 40 00            2961  	CMPX	FREE		SPACIAL CASE FOR LAST VARIABLE IN TABLE
3859  24 09               2962  	BHS	SAVFRE		IF SO, SAVE IT
385B  A6 80               2963  RMS3	LDA	,X+		GET FROM MEMORY
385D  A7 A0               2964  	STA	,Y+		SAVE IN OLD LOCATION
385F  BC 40 00            2965  	CMPX	FREE		ARE WE OVER
3862  25 F7               2966  	BLO	RMS3		GO FOR IT
3864  10 BF 40 00         2967  SAVFRE	STY	FREE		RESAVE
3868  39                  2968  NOMOVE	RTS
3869                      2969  * ')SI' COMMAND
3869  BE 3C 9A            2970  SI	LDX	NAMPTR		POINT TO NAME
386C  FC 3C 96            2971  	LDD	LINCT		GET LINE COUNTER
386F  10 BE 3C A0         2972  	LDY	SAVSTK		POINT TO SAVED STACK POINTER
3873  10 8C 40 00         2973  	CMPY	#STACK		AT TOP?
3877  27 2A               2974  	BEQ	NOSUSP		NONE
3879  17 FC 07            2975  SI1	LBSR	DSPNAM		DISPLAY
387C  AE A4               2976  	LDX	,Y		GET POINTER TO LOCAL VARIABLE LIST
387E  17 EB 09            2977  	LBSR	OULI		DISPLAY VARIABLES
3881  AE 2A               2978  	LDX	10,Y		POINT TO NAME
3883  EC 28               2979  	LDD	8,Y		GET LINE NUMBER
3885  10 AE 22            2980  	LDY	2,Y		GET NEXT SAVED STACK POINTER
3888  10 8C 40 00         2981  	CMPY	#STACK		ARE WE AT TOP?
388C  26 EB               2982  	BNE	SI1		CONTINUE
388E  39                  2983  	RTS
388F                      2984  * ')REL' RELEASE ONE SUSPENDED FUNCTION
388F  10 BE 3C A0         2985  RELEAS	LDY	SAVSTK		GET STACK POINTER
3893  10 8C 40 00         2986  	CMPY	#STACK		AT TOP?
3897  27 0A               2987  	BEQ	NOSUSP		INDICATE NOTHING TO BE EXCITED ABOUT
3899  35 06               2988  REL1	PULS	A,B		GET PROGRAM COUNTER
389B  ED A8 10            2989  	STD	16,Y		SET RETURN ADDRESS
389E  1F 24               2990  	TFR	Y,S		COPY IT OVER
38A0  16 FC DD            2991  	LBRA	EFUNC		AND DO IT
38A3  17 EB C0            2992  NOSUSP	LBSR	SYSMSG		DISPLAY MESSAGE
38A6  4E 4F 20 53 49 20 + 2993  	FCCZ	'NO SI IN WS'
38B2  39                  2994  	RTS
38B3                      2995  * PERFORM A RESET
38B3  35 06               2996  DOREST	PULS	A,B		GET PC
38B5  FD 3C 8E            2997  	STD	TEMP4		SAVE VALUE
38B8  10 BE 3C A0         2998  DORES1	LDY	SAVSTK		CKECK FOR STACK EMPTY
38BC  10 8C 40 00         2999  	CMPY	#STACK		ARE WE AT TOP?
38C0  27 04               3000  	BEQ	CLALL		IF SO, CLEAR IT
38C2  8D D5               3001  	BSR	REL1		RELEASE THIS BUNCH
38C4  20 F2               3002  	BRA	DORES1		AND CONTINUE
38C6  CC CC 00            3003  CLALL	LDD	#HIRAM		TOP OF RAM
38C9  FD 3C A2            3004  	STD	RAMTOP		SET UP RAM TOP
38CC  CC 3A 3E            3005  	LDD	#IOTA0		POINT TO NULL VECTOR
38CF  FD 3C 94            3006  	STD	PARM		SET UP PARAMETER VALUE
38D2  7F 3C 82            3007  	CLR	LEVEL		SET LEVEL ZERO
38D5  6E 9F 3C 8E         3008  	JMP	[TEMP4]		RETURN TO CALLER
38D9                      3009  * ')STATUS' COMMAND
38D9  17 EB 7E            3010  STATUS	LBSR	DSPSTR		DISPLAY STRING
38DC  57 4F 52 4B 53 50 + 3011  	FCCZ	'WORKSPACE NAME: '
38ED  17 FE 30            3012  	LBSR	DWSID		DISPLAY IT
38F0  17 EB 67            3013  	LBSR	DSPSTR		DISPLAY STRING
38F3  53 59 4D 42 4F 4C + 3014  	FCCZ	'SYMBOLS IN USE: '
3904  10 8E 00 00         3015  	LDY	#$0		INDICATE ZERO SYMBOLS
3908  8E 40 0A            3016  	LDX	#SYMTAB		POINT TO START OF TABLE
390B  E6 80               3017  STSYM	LDB	,X+		GET STARTING VALUE
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 53

390D  C4 1F               3018  	ANDB	#$1F		MASK TYPE BITS
390F  27 07               3019  	BEQ	STSY1		END OF TABLE
3911  31 21               3020  	LEAY	1,Y		THIS IS ONE
3913  CB 03               3021  	ADDB	#3		OFFSET FOR SYMBOL TABLE ENTRIES
3915  3A                  3022  	ABX			ADVANCE
3916  20 F3               3023  	BRA	STSYM		CONTINUE LOOKING
3918  1F 20               3024  STSY1	TFR	Y,D		COPY TO D
391A  17 F5 E1            3025  	LBSR	DECOUT		DISPLAY IT
391D  34 10               3026  	PSHS	X		SAVE X
391F  17 EB 38            3027  	LBSR	DSPSTR		DISPLAY STRING
3922  0D                  3028  	FCB	$0D
3923  53 59 4D 42 4F 4C + 3029  	FCCZ	'SYMBOL TABLE SIZE: '
3937  FC 40 08            3030  	LDD	FREMEM		POINT TO END OF SYMBOL TABLE
393A  83 40 0B            3031  	SUBD	#SYMTAB+1	CONVERT TO SIMPLE OFFSET
393D  17 F5 BE            3032  	LBSR	DECOUT		DISPLAY IT
3940  17 EB 17            3033  	LBSR	DSPSTR		DISPLAY STRING
3943  0D                  3034  	FCB	$0D
3944  53 59 4D 42 4F 4C + 3035  	FCCZ	'SYMBOL TABLE FREE: '
3958  FC 40 08            3036  	LDD	FREMEM		GET FREE MEMORY SPACE
395B  A3 E1               3037  	SUBD	,S++		CONVERT TO BINARY VALUE
395D  17 F5 9E            3038  	LBSR	DECOUT		DISPLAY
3960  17 EA F7            3039  	LBSR	DSPSTR		DISPLAY STRING
3963  0D                  3040  	FCB	$0D
3964  57 4F 52 4B 53 50 + 3041  	FCCZ	'WORKSPACE REMAINING: '
397A  FC 3C A2            3042  	LDD	RAMTOP		POINT TO TOP OF RAM
397D  B3 40 00            3043  	SUBD	FREE		CONVERT TO FREE SPACE
3980  17 F5 7B            3044  	LBSR	DECOUT		DISPLAY
3983  16 EA EC            3045  	LBRA	LFCR		NEW LINE
3986                      3046  * UNKNOWN SYSTEM COMMAND
3986  17 EA DD            3047  UNCMD	LBSR	SYSMSG
3989  49 4E 43 4F 52 52 + 3048  	FCCZ	'INCORRECT COMMAND'
399B  39                  3049  	RTS
399C                      3050  * SYSTEM ERROR HAS OCCURED
399C  34 36               3051  SYSERR	PSHS	A,B,X,Y
399E  17 EA C5            3052  	LBSR	SYSMSG
39A1  53 59 53 54 45 4D + 3053  	FCCZ	'SYSTEM ERROR'
39AE  35 06               3054  	PULS	A,B		; Get D
39B0  3F                  3055  	SWI			SOFTWARE INTERRUPT TO DOS
39B1  1B                  3056  	FCB	27		SYSTEM REQUEST NUMBER
39B2  3F                  3057  	SWI			SOFTWARE INTERRUPT TO DOS
39B3  15                  3058  	FCB	21		SYSTEM REQUEST NUMBER
39B4  35 06               3059  	PULS	A,B		; Get X
39B6  3F                  3060  	SWI			SOFTWARE INTERRUPT TO DOS
39B7  1B                  3061  	FCB	27		SYSTEM REQUEST NUMBER
39B8  3F                  3062  	SWI			SOFTWARE INTERRUPT TO DOS
39B9  15                  3063  	FCB	21		SYSTEM REQUEST NUMBER
39BA  35 06               3064  	PULS	A,B		; Get Y
39BC  3F                  3065  	SWI			SOFTWARE INTERRUPT TO DOS
39BD  1B                  3066  	FCB	27		SYSTEM REQUEST NUMBER
39BE  3F                  3067  	SWI			SOFTWARE INTERRUPT TO DOS
39BF  15                  3068  	FCB	21		SYSTEM REQUEST NUMBER
39C0  35 06               3069  	PULS	A,B		; Get PC
39C2  3F                  3070  	SWI			SOFTWARE INTERRUPT TO DOS
39C3  1B                  3071  	FCB	27		SYSTEM REQUEST NUMBER
39C4  3F                  3072  	SWI			SOFTWARE INTERRUPT TO DOS
39C5  15                  3073  	FCB	21		SYSTEM REQUEST NUMBER
39C6  1F 40               3074  	TFR	S,D		; Get S
39C8  3F                  3075  	SWI			SOFTWARE INTERRUPT TO DOS
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 54

39C9  1B                  3076  	FCB	27		SYSTEM REQUEST NUMBER
39CA  3F                  3077  	SWI			SOFTWARE INTERRUPT TO DOS
39CB  15                  3078  	FCB	21		SYSTEM REQUEST NUMBER
39CC  1F 30               3079  	TFR	U,D		; Get U
39CE  3F                  3080  	SWI			SOFTWARE INTERRUPT TO DOS
39CF  1B                  3081  	FCB	27		SYSTEM REQUEST NUMBER
39D0  3F                  3082  	SWI			SOFTWARE INTERRUPT TO DOS
39D1  16                  3083  	FCB	22		SYSTEM REQUEST NUMBER
39D2  16 E6 AB            3084  	LBRA	CMD
39D5                      3085  *
39D5                      3086  * SYSTEM COMMAND TEXT TABLE
39D5                      3087  *
39D5  4F 46               3088  CMDTAB	FCC	'OF'
39D7  C6                  3089  	FCB	'F'+$80
39D8  36 05               3090  	FDB	OFF
39DA  43 4C 45 41         3091  	FCC	'CLEA'
39DE  D2                  3092  	FCB	'R'+$80
39DF  20 27               3093  	FDB	CLEAR
39E1  46 4E               3094  	FCC	'FN'
39E3  D3                  3095  	FCB	'S'+$80
39E4  36 1B               3096  	FDB	FNS
39E6  56 41 52            3097  	FCC	'VAR'
39E9  D3                  3098  	FCB	'S'+$80
39EA  36 12               3099  	FDB	VARS
39EC  4C 42 4C            3100  	FCC	'LBL'
39EF  D3                  3101  	FCB	'S'+$80
39F0  36 0B               3102  	FDB	LBLS
39F2  53 59               3103  	FCC	'SY'
39F4  D3                  3104  	FCB	'S'+$80
39F5  36 B2               3105  	FDB	SYSTEM
39F7  4C 49               3106  	FCC	'LI'
39F9  C2                  3107  	FCB	'B'+$80
39FA  36 C8               3108  	FDB	LIB
39FC  57 53 49            3109  	FCC	'WSI'
39FF  C4                  3110  	FCB	'D'+$80
3A00  36 F2               3111  	FDB	WSID
3A02  53 41 56            3112  	FCC	'SAV'
3A05  C5                  3113  	FCB	'E'+$80
3A06  37 43               3114  	FDB	SAVE
3A08  4C 4F 41            3115  	FCC	'LOA'
3A0B  C4                  3116  	FCB	'D'+$80
3A0C  20 BA               3117  	FDB	LOAD
3A0E  44 52 4F            3118  	FCC	'DRO'
3A11  D0                  3119  	FCB	'P'+$80
3A12  21 0B               3120  	FDB	DROP
3A14  45 52 41 53         3121  	FCC	'ERAS'
3A18  C5                  3122  	FCB	'E'+$80
3A19  37 B0               3123  	FDB	ERASE
3A1B  53                  3124  	FCC	'S'
3A1C  C9                  3125  	FCB	'I'+$80
3A1D  38 69               3126  	FDB	SI
3A1F  52 45               3127  	FCC	'RE'
3A21  CC                  3128  	FCB	'L'+$80
3A22  38 8F               3129  	FDB	RELEAS
3A24  52 45 53 45         3130  	FCC	'RESE'
3A28  D4                  3131  	FCB	'T'+$80
3A29  20 7D               3132  	FDB	RESET
3A2B  43 4F 4E 54 49 4E + 3133  	FCC	'CONTINU'
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 55

3A32  C5                  3134  	FCB	'E'+$80
3A33  35 FE               3135  	FDB	CONCMD
3A35  53 54 41            3136  	FCC	'STA'
3A38  D4                  3137  	FCB	'T'+$80
3A39  38 D9               3138  	FDB	STATUS
3A3B  80                  3139  	FCB	$80
3A3C  39 86               3140  	FDB	UNCMD
3A3E                      3141  * DEFAULT VECTOR STRING, EMPTY NUMERIC VECTOR
3A3E  01                  3142  IOTA0	FCB	$01		TYPE = NUMERIC
3A3F  00 00               3143  	FDB	0		LENGTH = ZERO
3A41                      3144  *
3A41                      3145  * STRINGS
3A41                      3146  *
3A41  2A 2E 41 50 4C      3147  DEFNAM	FCC	'*.APL'
3A46  0D                  3148  	FCB	$0D
3A47  65 40 4C 58         3149  	FCC	'e@LX'
3A4B  0D                  3150  	FCB	$0D
3A4A                      3151  LXNAME	EQU	*-2
3A4C  43 4F 4E 54 49 4E + 3152  CONTIN	FCCZ	'CONTINUE.APL'
3A59                      3153  *
3A59                      3154  * STANDARD OPERATING SYSTEM INTERFACE, SUPPORTS
3A59                      3155  * OPERATING SYSTEM COMMANDS, AND FILE I/O
3A59                      3156  * ON ENTRY, 'X' POINT TO LEFT OPERAND, 'Y' POINTS TO RIGHT OPERAND
3A59                      3157  *
3A59                      3158  * FUNCTIONS:
3A59                      3159  *   0 - EXECUTE DOS COMMAND
3A59                      3160  *   1 - OPEN FILE/READ
3A59                      3161  *   2 - OPEN FILE/WRITE
3A59                      3162  *   3 - TEST FOR FILE EXISTANCE
3A59                      3163  *   4 - READ MEMORY (ADDR, ADDR, ADDR ...)
3A59                      3164  *   5 - WRITE MEMORY (ADDR, DATA, DATA ...)
3A59                      3165  *   6 - EXECUTE SSR (IN=SSR,AB,X,Y,U - OUT=RC,AB,X,Y,U)
3A59                      3166  *   <file>o<char>   - Write file
3A59                      3167  *   <file>o0	    - Read file
3A59                      3168  *   <file>o1	    - Close file
3A59                      3169  *   <file>o2	    - Rewind file
3A59                      3170  *
3A59  A6 84               3171  OSFUNC	LDA	,X		GET TYPE
3A5B  4A                  3172  	DECA			INTEGER
3A5C  10 26 F8 AC         3173  	LBNE	CDOM		ERROR
3A60  EC 01               3174  	LDD	1,X		GET LENGTH
3A62  10 83 01 05         3175  	CMPD	#261		SPECIAL FILE STUFF?
3A66  10 27 01 03         3176  	LBEQ	OSFILE		ITS A FILE ACCESS
3A6A                      3177  * NON FILE ACCESS
3A6A  10 83 00 01         3178  OSFNF	CMPD	#1		FUNCTION CODE
3A6E  10 26 F8 93         3179  	LBNE	CLEN		OUT OF RAMGE
3A72  EC 03               3180  	LDD	3,X		GET VALUE
3A74  4D                  3181  	TSTA			HIGH ZERO?
3A75  10 26 F8 93         3182  	LBNE	CDOM		ERROR
3A79                      3183  * CHECK FOR EXECUTE OPERATING SYSTEM COMMAND
3A79  5D                  3184  	TSTB
3A7A  26 1E               3185  	BNE	OSOPEN		NO, TRY OPEN
3A7C  17 01 34            3186  	LBSR	OSROT		ROTATE IT
3A7F  86 0D               3187  	LDA	#$0D		GET CR, TERMINATE COMMAND
3A81  A7 C4               3188  	STA	,U		SAVE IT
3A83  31 23               3189  	LEAY	3,Y		POINT TO COMMAND
3A85  3F                  3190  	SWI			SOFTWARE INTERRUPT TO DOS
3A86  64                  3191  	FCB	100		SYSTEM REQUEST NUMBER
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 56

3A87  27 04               3192  OSAVRC	BEQ	OSRCZ		RC IS ZERO
3A89  1F 89               3193  	TFR	A,B		COPY TO B
3A8B  20 01               3194  	BRA	OSRC1		RETURN RC
3A8D  5F                  3195  OSRCZ	CLRB			SET ZERO RC
3A8E  4F                  3196  OSRC1	CLRA			CLEAR HIGH BYTE
3A8F  AE 62               3197  OSRES	LDX	2,S		GET POINTER BACK
3A91  ED 03               3198  	STD	3,X		SAVE VALUE
3A93  C6 01               3199  	LDB	#1		GET TYPE AND LENGTH
3A95  E7 84               3200  	STB	,X		SAVE IT
3A97  ED 01               3201  	STD	1,X		SAVE LENGTH
3A99  39                  3202  	RTS
3A9A                      3203  * OPEN FILE FOR READ
3A9A  5A                  3204  OSOPEN	DECB			TEST FOR OPEN READ
3A9B  26 19               3205  	BNE	OSOPW		NO, TRY FOR OPEN WRITE
3A9D  17 01 13            3206  	LBSR	OSROT		SWAP IT
3AA0  6F C4               3207  	CLR	,U		INDICATE END
3AA2  31 23               3208  	LEAY	3,Y		PT TO TEXT
3AA4  3F                  3209  	SWI			SOFTWARE INTERRUPT TO DOS
3AA5  0A                  3210  	FCB	10		SYSTEM REQUEST NUMBER
3AA6  26 DF               3211  	BNE	OSAVRC		INVALID
3AA8  EE 62               3212  	LDU	2,S		PT TO OPERAND
3AAA  CC 01 05            3213  	LDD	#261		LENGTH
3AAD  A7 C0               3214  	STA	,U+		SAVE TYPE
3AAF  ED C1               3215  	STD	,U++		SAVE LENGTH
3AB1  3F                  3216  	SWI			SOFTWARE INTERRUPT TO DOS
3AB2  37                  3217  	FCB	55		SYSTEM REQUEST NUMBER
3AB3  26 D2               3218  	BNE	OSAVRC		INDICATE OK
3AB5  39                  3219  	RTS
3AB6                      3220  * OPEN FILE FOR OUTPUT
3AB6  5A                  3221  OSOPW	DECB			OPEN FOR WRITE?
3AB7  26 19               3222  	BNE	OSTFIL		NO, TRY CLOSE
3AB9  17 00 F7            3223  	LBSR	OSROT		SWAP IT
3ABC  6F C4               3224  	CLR	,U		SET TERMINATOR
3ABE  31 23               3225  	LEAY	3,Y		DO IT
3AC0  3F                  3226  	SWI			SOFTWARE INTERRUPT TO DOS
3AC1  0A                  3227  	FCB	10		SYSTEM REQUEST NUMBER
3AC2  26 C3               3228  	BNE	OSAVRC		NO, GET UPSET
3AC4  EE 62               3229  	LDU	2,S		PT TO OPERAND
3AC6  CC 01 05            3230  	LDD	#261		SIZE OPERAND
3AC9  A7 C0               3231  	STA	,U+		SET TYPE
3ACB  ED C1               3232  	STD	,U++		SAVE LENGTH
3ACD  3F                  3233  	SWI			SOFTWARE INTERRUPT TO DOS
3ACE  38                  3234  	FCB	56		SYSTEM REQUEST NUMBER
3ACF  26 B6               3235  	BNE	OSAVRC		SAVE RC
3AD1  39                  3236  OSRM2	RTS
3AD2                      3237  * TEST FOR FILE EXISTANCE
3AD2  5A                  3238  OSTFIL	DECB			TEST FOR FILE?
3AD3  26 0F               3239  	BNE	OSRMEM		NO, TRY NEXT
3AD5  17 00 DB            3240  	LBSR	OSROT		ROTATE OPERAND
3AD8  6F C4               3241  	CLR	,U		SET DELIMITER
3ADA  31 23               3242  	LEAY	3,Y		ADVANCE
3ADC  3F                  3243  	SWI			SOFTWARE INTERRUPT TO DOS
3ADD  0A                  3244  	FCB	10		SYSTEM REQUEST NUMBER
3ADE  26 A7               3245  	BNE	OSAVRC		BAD, QUIT
3AE0  3F                  3246  	SWI			SOFTWARE INTERRUPT TO DOS
3AE1  44                  3247  	FCB	68		SYSTEM REQUEST NUMBER
3AE2  20 A3               3248  	BRA	OSAVRC		SAVE RC
3AE4                      3249  * READ MEMORY
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 57

3AE4  A6 A4               3250  OSRMEM	LDA	,Y		INTEGER DATA ONLY
3AE6  81 01               3251  	CMPA	#1		INTEGER?
3AE8  10 26 F8 20         3252  	LBNE	CDOM		ERROR, WRONG TYPE
3AEC  5A                  3253  	DECB			READ MEMORY?
3AED  26 18               3254  	BNE	OSWMEM		WRITE MEMORY
3AEF  EC 21               3255  	LDD	1,Y		GET LENGTH
3AF1  34 06               3256  	PSHS	A,B		SAVE PTR
3AF3  31 23               3257  	LEAY	3,Y		ADVANCE TO DATA
3AF5  EC E1               3258  OSRM1	LDD	,S++		GET COUNT
3AF7  27 D8               3259  	BEQ	OSRM2		EXIT
3AF9  83 00 01            3260  	SUBD	#1		REDUCE COUNT
3AFC  ED E3               3261  	STD	,--S		RESAVE
3AFE  AE A4               3262  	LDX	,Y		GET ADDRESS
3B00  E6 84               3263  	LDB	,X		GET DATA
3B02  4F                  3264  	CLRA			ZERO HIGH
3B03  ED A1               3265  	STD	,Y++		SET VALUE
3B05  20 EE               3266  	BRA	OSRM1		AND CONTINUE
3B07                      3267  * WRITE MEMORY
3B07  5A                  3268  OSWMEM	DECB			WRITE MEMORY?
3B08  26 2B               3269  	BNE	OSSSR		NO, TRY OSR
3B0A  EC 21               3270  	LDD	1,Y		GET LENGTH
3B0C  10 27 F7 F5         3271  	LBEQ	CLEN		ZERO LENGTH INVALID
3B10  83 00 01            3272  	SUBD	#1		CONVERT
3B13  ED 21               3273  	STD	1,Y		SET LENGTH TO L-1
3B15  34 06               3274  	PSHS	A,B		SAVE REGS
3B17  59                  3275  	ROLB			X2
3B18  48                  3276  	LSLA			FOR INTEGER ENTRIES
3B19  31 23               3277  	LEAY	3,Y		ADVANCE TO DATA
3B1B  31 AB               3278  	LEAY	D,Y		POINT TO DATA
3B1D  AE A4               3279  	LDX	,Y		GET ADDRESS
3B1F  EC E1               3280  OSWM1	LDD	,S++		GET COUNT
3B21  27 AE               3281  	BEQ	OSRM2		END, EXIT
3B23  83 00 01            3282  	SUBD	#1		REDUCE LENGTH
3B26  ED E3               3283  	STD	,--S		RESAVE
3B28  EC A3               3284  	LDD	,--Y		GET DATA TO WRITE
3B2A  A6 84               3285  	LDA	,X		GET OLD DATA
3B2C  E7 80               3286  	STB	,X+		WRITE NEW DATA
3B2E  1E 89               3287  	EXG	A,B		SWAP
3B30  4F                  3288  	CLRA			ZERO HIGH
3B31  ED A4               3289  	STD	,Y		AND REWRITE
3B33  20 EA               3290  	BRA	OSWM1		CONTINUE
3B35                      3291  * PERFORM A DOS SYSTEM REQUEST
3B35  5A                  3292  OSSSR	DECB			IS THIS IT?
3B36  10 26 F7 D2         3293  	LBNE	CDOM		NO, EXIT
3B3A  EC 21               3294  	LDD	1,Y		GET LENGTH
3B3C  10 83 00 05         3295  	CMPD	#5		FOUR ELEMENTS?
3B40  10 26 F7 C1         3296  	LBNE	CLEN		LENGTH ERROR
3B44  EC 2B               3297  	LDD	11,Y		GET SSR NUMBER
3B46  F7 3B 53            3298  	STB	OSSRNO+1	SET IT
3B49  EC 29               3299  	LDD	9,Y		GET A,B
3B4B  AE 27               3300  	LDX	7,Y		GET X
3B4D  EE 23               3301  	LDU	3,Y		GET 'U'
3B4F  10 AE 25            3302  	LDY	5,Y		GET 'Y'
3B52  3F                  3303  OSSRNO	SWI			SOFTWARE INTERRUPT TO DOS
3B53  00                  3304  	FCB	0		SYSTEM REQUEST NUMBER
3B54  34 11               3305  	PSHS	CC,X		SAVE REGS
3B56  AE 65               3306  	LDX	5,S		GET PTR TO DATA
3B58  EF 03               3307  	STU	3,X		SAVE 'U'
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 58

3B5A  10 AF 05            3308  	STY	5,X		SAVE 'Y'
3B5D  ED 09               3309  	STD	9,X		SAVE 'A'+'B'
3B5F  1F 89               3310  	TFR	A,B		B = RC
3B61  35 21               3311  	PULS	CC,Y		RESTORE REGS
3B63  26 01               3312  	BNE	OSSR1		NON-ZERO
3B65  5F                  3313  	CLRB
3B66  4F                  3314  OSSR1	CLRA			ZERO HIGH
3B67  ED 0B               3315  	STD	11,X		SET RC
3B69  10 AF 07            3316  	STY	7,X		SET 'X' VALUE
3B6C  39                  3317  	RTS
3B6D                      3318  * ACCESSING A FILE
3B6D  33 03               3319  OSFILE	LEAU	3,X		SET UP FILE PTR
3B6F  A6 A0               3320  	LDA	,Y+		TEST TYPE
3B71  26 16               3321  	BNE	OSFFUN		FILE FUNCTIONS
3B73                      3322  * WRITE FILE
3B73  AE A0               3323  	LDX	,Y+		GET LENGTH
3B75  27 0C               3324  	BEQ	OSWR2		NULL LINE
3B77  1F 10               3325  OSWR1	TFR	X,D		COPY IT
3B79  A6 AB               3326  	LDA	D,Y		GET CHARACTER
3B7B  3F                  3327  	SWI			SOFTWARE INTERRUPT TO DOS
3B7C  3D                  3328  	FCB	61		SYSTEM REQUEST NUMBER
3B7D  26 5E               3329  	BNE	OSAVR2		ERROR, RETURN CODE
3B7F  30 1F               3330  	LEAX	-1,X		REDUCE COUNT
3B81  26 F4               3331  	BNE	OSWR1		AND CONTINUE
3B83  86 0D               3332  OSWR2	LDA	#$0D		CR
3B85  3F                  3333  	SWI			SOFTWARE INTERRUPT TO DOS
3B86  3D                  3334  	FCB	61		SYSTEM REQUEST NUMBER
3B87  20 54               3335  	BRA	OSAVR2		AND EXIT
3B89                      3336  * OTHER FILE FUNCTIONS
3B89  EC A1               3337  OSFFUN	LDD	,Y++		GET LENGTH
3B8B  10 83 00 01         3338  	CMPD	#1		PROPER?
3B8F  10 26 F7 72         3339  	LBNE	CLEN		NO
3B93  EC A4               3340  	LDD	,Y		GET VALUE
3B95  4D                  3341  	TSTA
3B96  10 26 F7 72         3342  	LBNE	CDOM		OUT OF RAMGE
3B9A                      3343  * READ DATA FILE FILE
3B9A  5D                  3344  	TSTB			ZERO?
3B9B  26 3B               3345  	BNE	OSFCLO		CLOSE FILE
3B9D  6F 3D               3346  	CLR	-3,Y		INDICATE CHARACTER
3B9F  8E FF FF            3347  	LDX	#-1		START WITH -1
3BA2  3F                  3348  OSRE1	SWI			SOFTWARE INTERRUPT TO DOS
3BA3  3B                  3349  	FCB	59		SYSTEM REQUEST NUMBER
3BA4  26 37               3350  	BNE	OSAVR2		ERROR
3BA6  A7 A0               3351  	STA	,Y+		SAVE IN DATA AREA
3BA8  30 01               3352  	LEAX	1,X		INCREASE LENGTH
3BAA  81 0D               3353  	CMPA	#$0D		CR?
3BAC  26 F4               3354  	BNE	OSRE1		CONTINUE
3BAE  10 AE 62            3355  	LDY	2,S		GET PTR BACK
3BB1  AF 21               3356  	STX	1,Y		SET LENGTH
3BB3                      3357  * ROTATE OPERAND VALUE(Y)
3BB3  34 20               3358  OSROT	PSHS	Y		SAVE REGISTERS
3BB5  6D A4               3359  	TST	,Y		WHAT FORM ARE WE
3BB7  10 26 F7 51         3360  	LBNE	CDOM		REVERSING CHARACTER ARRAY
3BBB  EC 21               3361  	LDD	1,Y		GET LENGTH
3BBD  27 17               3362  	BEQ	OSREND		NOTHING TO DO
3BBF  30 23               3363  	LEAX	3,Y		GET START OF VECTOR
3BC1  31 8B               3364  	LEAY	D,X		SKIP TO END
3BC3  1F 23               3365  	TFR	Y,U		COPY IT
DUNFIELD 6809 ASSEMBLER: MICRO APL 1.0                                PAGE: 59

3BC5  A6 A2               3366  OSREV	LDA	,-Y		GET CHARACTER
3BC7  E6 80               3367  	LDB	,X+		AND GET OTHER CHARACTER
3BC9  34 10               3368  	PSHS	X		SAVE POSITION
3BCB  10 AC E1            3369  	CMPY	,S++		ARE WE THERE?
3BCE  25 06               3370  	BLO	OSREND		IF SO, EXIT
3BD0  E7 A4               3371  	STB	,Y		SET NEW VALUE
3BD2  A7 1F               3372  	STA	-1,X		AND NEW VALUE HERE
3BD4  20 EF               3373  	BRA	OSREV		CONTINUE REVERSING
3BD6  35 A0               3374  OSREND	PULS	Y,PC		RESTORE REGISTERS
3BD8                      3375  * CLOSE FILE
3BD8  5A                  3376  OSFCLO	DECB
3BD9  26 05               3377  	BNE	OSFREW		TRY REWIND
3BDB  3F                  3378  	SWI			SOFTWARE INTERRUPT TO DOS
3BDC  39                  3379  	FCB	57		SYSTEM REQUEST NUMBER
3BDD  16 FE A7            3380  OSAVR2	LBRA	OSAVRC		AND RETURN
3BE0                      3381  * REWIND FILE
3BE0  5A                  3382  OSFREW	DECB
3BE1  10 26 F7 27         3383  	LBNE	CDOM		NOT REWIND, EXIT
3BE5  3F                  3384  	SWI			SOFTWARE INTERRUPT TO DOS
3BE6  3E                  3385  	FCB	62		SYSTEM REQUEST NUMBER
3BE7  20 F4               3386  	BRA	OSAVR2		RETURN CODE
